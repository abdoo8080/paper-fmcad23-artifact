(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_8 Int) (StartBool_1 Bool) (Start_1 Int) (Start_6 Int) (Start_4 Int) (Start_2 Int) (Start_3 Int) (StartBool_2 Bool) (Start_5 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_7 Int))
  ((Start Int (3 (- Start Start_1) (abs Start_1)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_1 StartBool) (< Start_1 Start_1) (>= Start_2 Start) (> Start_1 Start_2)))
   (StartBool_5 Bool (true (or StartBool_3 StartBool_5) (< Start_2 Start_6) (>= Start_7 Start_5)))
   (Start_8 Int (4 2 (- Start_8) (+ Start_5 Start_1) (div Start_3 Start_3) (ite StartBool_5 Start_5 Start_2)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool StartBool_1) (< Start_3 Start) (<= Start_4 Start_2) (= Start_3 Start_1) (>= Start_5 Start_3) (> Start_3 Start)))
   (Start_1 Int (x (- Start) (- Start_1 Start_1) (* Start Start_1)))
   (Start_6 Int (5 x 2 (+ Start_3 Start) (div Start_4 Start_7) (ite StartBool_3 Start_6 Start_1)))
   (Start_4 Int (y (+ Start_3 Start_4) (div Start_5 Start_5) (mod Start_4 Start_2) (abs Start_3) (ite StartBool Start_5 Start_2)))
   (Start_2 Int (1 4 x 3 (* Start_1 Start_1)))
   (Start_3 Int (1 (- Start_3) (div Start_2 Start_5) (mod Start Start_4)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_2) (or StartBool_3 StartBool_2) (< Start Start_2) (= Start_4 Start_2) (>= Start_2 Start_1)))
   (Start_5 Int (1 x y 3 0 2 4 5 (- Start_4) (- Start_3 Start_5) (+ Start_5 Start_1) (* Start_1 Start) (abs Start)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_4 StartBool_4) (>= Start_5 Start) (> Start Start_1)))
   (StartBool_4 Bool (true false (< Start_6 Start_2)))
   (Start_7 Int (3 (abs Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 4 (mod 1 0))))

(check-synth)
