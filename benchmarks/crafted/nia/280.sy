(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_21 Int) (Start_10 Int) (StartBool_2 Bool) (StartBool_6 Bool) (Start_9 Int) (Start_12 Int) (Start_13 Int) (Start_8 Int) (StartBool_5 Bool) (Start_15 Int) (StartBool_3 Bool) (Start_4 Int) (Start_6 Int) (Start_7 Int) (Start_14 Int) (Start_18 Int) (Start_17 Int) (Start_11 Int) (Start_3 Int) (Start_19 Int) (Start_5 Int) (StartBool_4 Bool) (StartBool_7 Bool) (StartBool_1 Bool) (Start_20 Int) (Start_16 Int) (Start_2 Int) (Start_1 Int))
  ((Start Int (4 y (- Start_1) (+ Start_2 Start_2) (* Start_2 Start_3) (div Start_1 Start_1) (ite StartBool_1 Start_4 Start_5)))
   (StartBool Bool (true false (< Start_14 Start_14) (<= Start_20 Start_17) (>= Start_3 Start_21)))
   (Start_21 Int (1 (- Start_5 Start_7) (abs Start_15)))
   (Start_10 Int (4 5 (+ Start_1 Start_10) (* Start_6 Start_3) (mod Start_5 Start_11) (ite StartBool_3 Start_9 Start_10)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool StartBool_1) (<= Start Start_6) (> Start_4 Start_4)))
   (StartBool_6 Bool (true false (and StartBool_5 StartBool) (or StartBool_5 StartBool_3) (> Start Start_8)))
   (Start_9 Int (0 2 (- Start_10) (div Start_5 Start_1) (abs Start_4)))
   (Start_12 Int (0 2 (- Start_1) (+ Start_13 Start_9) (div Start_3 Start_5) (mod Start_2 Start_14) (ite StartBool_6 Start_7 Start_3)))
   (Start_13 Int (1 (- Start_7) (- Start Start_10) (+ Start_7 Start_14)))
   (Start_8 Int (y 3 (- Start_5) (mod Start_9 Start_5) (abs Start_4)))
   (StartBool_5 Bool (true (or StartBool_3 StartBool) (<= Start_5 Start_12) (> Start_12 Start_2)))
   (Start_15 Int (4 (- Start_8 Start_8) (* Start_6 Start_9) (div Start_13 Start_6) (mod Start_12 Start_17) (abs Start_10) (ite StartBool Start Start_5)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_4 StartBool_5) (or StartBool_2 StartBool_1) (<= Start_1 Start_9)))
   (Start_4 Int (4 y 1 (- Start_4 Start_8) (* Start_7 Start_2) (mod Start_2 Start_4) (abs Start_2)))
   (Start_6 Int (1 x (- Start_5) (- Start Start_1) (* Start_2 Start_7) (div Start_1 Start_3) (mod Start_7 Start_5)))
   (Start_7 Int (5 (- Start_5) (- Start_5 Start_1) (* Start_7 Start_5) (div Start_3 Start_4) (mod Start_7 Start)))
   (Start_14 Int (x 2 0 (+ Start_15 Start_16) (* Start_6 Start_14) (mod Start_16 Start_15) (abs Start_11) (ite StartBool_3 Start_3 Start_6)))
   (Start_18 Int (y (* Start_2 Start_1) (ite StartBool_1 Start_19 Start_19)))
   (Start_17 Int (0 (- Start_16 Start_18) (+ Start_9 Start) (div Start_13 Start_16)))
   (Start_11 Int (y (* Start_16 Start_2) (mod Start_12 Start_1) (abs Start_10)))
   (Start_3 Int (4 (+ Start_11 Start_2) (mod Start_12 Start_20) (ite StartBool_7 Start_6 Start_10)))
   (Start_19 Int (0 (div Start Start_7) (ite StartBool_6 Start_19 Start_19)))
   (Start_5 Int (3 5 (- Start_1) (+ Start_3 Start_4) (ite StartBool_2 Start_2 Start_2)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool_5 StartBool) (or StartBool_5 StartBool_4) (< Start_4 Start_15) (= Start_17 Start_12) (> Start_5 Start_9)))
   (StartBool_7 Bool (false (not StartBool_2) (and StartBool_2 StartBool_1) (or StartBool_4 StartBool_5)))
   (StartBool_1 Bool (false (and StartBool_4 StartBool_1) (< Start_2 Start_18) (= Start_6 Start_3) (>= Start_17 Start_12)))
   (Start_20 Int (y (+ Start_6 Start_8) (abs Start_10)))
   (Start_16 Int (x 5 (div Start_15 Start_6) (mod Start_5 Start)))
   (Start_2 Int (0 (- Start_4) (* Start_18 Start_19) (mod Start Start_15)))
   (Start_1 Int (x (- Start_19) (+ Start_7 Start_17) (div Start_3 Start_8) (mod Start_11 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ y (+ (mod 1 (- 3 x)) 5))))

(check-synth)
