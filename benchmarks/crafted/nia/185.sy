(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_14 Int) (Start_12 Int) (StartBool_5 Bool) (Start_7 Int) (Start_11 Int) (Start_9 Int) (Start_15 Int) (Start_10 Int) (Start_3 Int) (Start_6 Int) (Start_4 Int) (Start_2 Int) (Start_8 Int) (StartBool_4 Bool) (StartBool_6 Bool) (StartBool_2 Bool) (Start_5 Int) (Start_16 Int) (StartBool_1 Bool) (Start_1 Int) (StartBool_3 Bool))
  ((Start Int (5 (+ Start Start) (* Start Start_1) (abs Start_1)))
   (StartBool Bool (true false (<= Start_10 Start_16) (= Start_3 Start_11) (> Start_8 Start_4)))
   (Start_13 Int (y 5 (- Start_16) (div Start_1 Start_7) (mod Start_15 Start_5) (abs Start_2)))
   (Start_14 Int (2 (- Start_8) (- Start_13 Start_2) (+ Start_2 Start) (div Start_4 Start_7) (mod Start_3 Start_5) (abs Start_4) (ite StartBool Start_4 Start_15)))
   (Start_12 Int (1 (+ Start_5 Start_13) (mod Start_9 Start_13) (abs Start_10) (ite StartBool_5 Start_14 Start_4)))
   (StartBool_5 Bool (false (or StartBool_6 StartBool_3) (= Start_2 Start_2) (> Start_10 Start_10)))
   (Start_7 Int (2 (- Start_11 Start_1) (* Start_7 Start_4) (div Start_9 Start_5) (mod Start_4 Start_2) (ite StartBool_5 Start_8 Start_6)))
   (Start_11 Int (5 3 1 (+ Start_1 Start_2) (* Start_7 Start_12) (mod Start_7 Start) (ite StartBool_4 Start Start_3)))
   (Start_9 Int (4 (- Start_3 Start_10) (+ Start_3 Start_6) (* Start_5 Start_10) (div Start_1 Start_4) (ite StartBool_2 Start_5 Start)))
   (Start_15 Int (1 (+ Start_15 Start_5) (* Start Start_1) (div Start_9 Start_15) (ite StartBool_4 Start_12 Start_15)))
   (Start_10 Int (4 (- Start_2) (- Start_8 Start_3) (+ Start_1 Start_1) (mod Start_6 Start_8) (abs Start) (ite StartBool_3 Start Start_7)))
   (Start_3 Int (y 1 (- Start_1 Start) (ite StartBool Start_4 Start_1)))
   (Start_6 Int (x 2 3 (- Start Start_4) (+ Start_2 Start_5) (* Start_5 Start_7) (mod Start_1 Start) (abs Start_7) (ite StartBool_1 Start_2 Start)))
   (Start_4 Int (2 1 4 (- Start_3 Start) (+ Start Start) (mod Start_4 Start_2)))
   (Start_2 Int (x 5 (- Start_5) (+ Start Start_6) (div Start_1 Start) (mod Start_5 Start_3) (abs Start_3)))
   (Start_8 Int (y 3 x 4 (- Start_4) (* Start_5 Start_2) (div Start_7 Start_7) (mod Start Start_7) (ite StartBool_1 Start Start_1)))
   (StartBool_4 Bool (true false (not StartBool_1) (<= Start_5 Start_6) (= Start_2 Start)))
   (StartBool_6 Bool (true (not StartBool_5) (<= Start_1 Start_10) (= Start_10 Start_9) (>= Start_3 Start_8) (> Start_3 Start_11)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool_4) (or StartBool StartBool_3) (< Start_7 Start_8) (>= Start_5 Start_9) (> Start_9 Start_4)))
   (Start_5 Int (1 x (- Start_7 Start_6) (+ Start_16 Start_14) (* Start_9 Start_13) (mod Start_4 Start_10)))
   (Start_16 Int (x (* Start_12 Start_6) (abs Start_14)))
   (StartBool_1 Bool (true false (not StartBool_1) (or StartBool_2 StartBool_3) (< Start_5 Start_7) (<= Start_2 Start_3) (= Start_4 Start_3) (> Start_8 Start)))
   (Start_1 Int (x (- Start_1) (- Start_1 Start_2) (+ Start_1 Start_2) (mod Start_2 Start_3) (abs Start_1) (ite StartBool Start_1 Start_1)))
   (StartBool_3 Bool (false (not StartBool) (or StartBool_4 StartBool_4) (>= Start_3 Start_6) (> Start_6 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs y))))

(check-synth)
