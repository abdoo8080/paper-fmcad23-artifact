(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_4 Bool) (Start_15 Int) (Start_4 Int) (Start_12 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_13 Int) (Start_6 Int) (Start_14 Int) (Start_7 Int) (Start_8 Int) (Start_5 Int) (Start_3 Int) (Start_9 Int) (Start_11 Int) (Start_10 Int) (Start_2 Int) (Start_1 Int))
  ((Start Int (4 (- Start_1) (+ Start_2 Start_3) (* Start_4 Start) (div Start_2 Start_2)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_2 StartBool) (or StartBool_3 StartBool_1) (<= Start_10 Start_5) (= Start_10 Start_11) (>= Start_1 Start_1)))
   (StartBool_3 Bool (false true (and StartBool StartBool_2) (or StartBool_2 StartBool_1) (<= Start_15 Start_13) (= Start Start_15)))
   (StartBool_4 Bool (true false (< Start_7 Start_14) (= Start_11 Start_12)))
   (Start_15 Int (1 (- Start_10) (mod Start_13 Start_11) (ite StartBool_3 Start_1 Start_14)))
   (Start_4 Int (y 5 x (- Start_1) (- Start Start_1) (* Start_1 Start_3) (mod Start_2 Start_3) (ite StartBool_1 Start Start)))
   (Start_12 Int (1 (- Start_11) (* Start_1 Start_3) (div Start_13 Start_7) (mod Start_14 Start_6) (ite StartBool Start_13 Start_6)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (>= Start_4 Start)))
   (StartBool_2 Bool (false (not StartBool_1) (< Start_1 Start) (> Start_10 Start_2)))
   (Start_13 Int (2 (- Start_12) (- Start_5 Start_6) (+ Start_5 Start_8) (* Start_5 Start_12) (mod Start_13 Start_2) (ite StartBool_4 Start_8 Start)))
   (Start_6 Int (4 (+ Start_4 Start_7) (* Start_1 Start_10) (mod Start_7 Start_7) (abs Start_3)))
   (Start_14 Int (2 5 (- Start_8) (- Start_9 Start_10) (* Start_1 Start_15) (mod Start_15 Start_14) (abs Start_10)))
   (Start_7 Int (5 (* Start_4 Start_5) (div Start_6 Start_5) (abs Start_9) (ite StartBool_1 Start_6 Start_2)))
   (Start_8 Int (y 0 x 5 (- Start_1) (+ Start_6 Start_8) (abs Start_2)))
   (Start_5 Int (2 (- Start_5) (- Start_1 Start) (+ Start_5 Start_6) (* Start_4 Start_6) (mod Start_2 Start_4)))
   (Start_3 Int (x 4 (- Start_5) (+ Start_6 Start_3) (* Start_7 Start_3) (mod Start Start_7) (ite StartBool_1 Start_8 Start_3)))
   (Start_9 Int (0 1 (+ Start_1 Start_9) (* Start Start_1) (div Start_10 Start_3) (mod Start_3 Start_7) (abs Start_1)))
   (Start_11 Int (3 (- Start_1) (* Start_12 Start_6) (ite StartBool_1 Start_10 Start_10)))
   (Start_10 Int (5 (- Start_3) (+ Start_9 Start_8) (div Start Start_5) (mod Start_7 Start_8) (ite StartBool_2 Start_3 Start_5)))
   (Start_2 Int (1 0 x y (+ Start_4 Start_7) (div Start Start_1) (mod Start_10 Start) (abs Start_1) (ite StartBool_2 Start_3 Start_6)))
   (Start_1 Int (0 (mod Start_8 Start_5) (ite StartBool Start_1 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div y 5))))

(check-synth)
