(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_17 Int) (StartBool_6 Bool) (Start_16 Int) (Start_15 Int) (Start_18 Int) (Start_1 Int) (StartBool_4 Bool) (Start_2 Int) (Start_3 Int) (StartBool_1 Bool) (Start_4 Int) (Start_8 Int) (Start_7 Int) (Start_14 Int) (StartBool_2 Bool) (StartBool_5 Bool) (Start_10 Int) (Start_6 Int) (Start_5 Int) (Start_11 Int) (Start_13 Int) (StartBool_3 Bool) (Start_12 Int) (Start_9 Int))
  ((Start Int (1 2 x (+ Start_1 Start) (* Start_2 Start_3) (mod Start Start_4) (ite StartBool_1 Start_2 Start_4)))
   (StartBool Bool (false true (and StartBool_1 StartBool_1) (= Start_15 Start_18) (>= Start_14 Start)))
   (StartBool_7 Bool (true false (or StartBool_3 StartBool_7) (< Start_10 Start_6) (<= Start_7 Start_9)))
   (Start_17 Int (2 3 (- Start_2) (- Start_5 Start_15) (mod Start_4 Start_10) (abs Start_3) (ite StartBool_1 Start_11 Start_6)))
   (StartBool_6 Bool (true false (and StartBool_5 StartBool_4) (or StartBool_3 StartBool_7) (= Start_4 Start_13) (>= Start_3 Start_17)))
   (Start_16 Int (1 (- Start_6 Start_10) (div Start_11 Start_10) (ite StartBool_6 Start_11 Start_7)))
   (Start_15 Int (y (abs Start_5) (ite StartBool_2 Start_9 Start_8)))
   (Start_18 Int (y 2 3 5 (- Start_3) (+ Start Start_16) (* Start_16 Start_1) (div Start_3 Start_12)))
   (Start_1 Int (1 x 3 4 0 y 5 (div Start_12 Start_10) (ite StartBool_5 Start_9 Start)))
   (StartBool_4 Bool (true false (not StartBool_1) (< Start_13 Start) (> Start_6 Start_10)))
   (Start_2 Int (5 (+ Start Start_10) (div Start_10 Start_9) (mod Start_4 Start_7) (abs Start_3) (ite StartBool_4 Start_5 Start_8)))
   (Start_3 Int (0 2 3 (- Start_9) (+ Start_6 Start_10) (mod Start Start_11) (abs Start_9)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool_1)))
   (Start_4 Int (1 (+ Start_4 Start_3) (* Start_2 Start) (div Start_5 Start) (mod Start Start_5) (abs Start_1)))
   (Start_8 Int (0 (- Start_9 Start_9) (+ Start_1 Start_10) (mod Start_9 Start_6) (abs Start_3) (ite StartBool_2 Start_8 Start_5)))
   (Start_7 Int (4 2 (+ Start Start) (mod Start_6 Start_6) (abs Start_3) (ite StartBool_1 Start_8 Start_3)))
   (Start_14 Int (3 5 (- Start_13) (- Start_1 Start_12) (div Start_7 Start_8) (mod Start Start_10) (abs Start_16)))
   (StartBool_2 Bool (true (not StartBool_2) (< Start_10 Start_9) (= Start_6 Start_3) (> Start_2 Start_10)))
   (StartBool_5 Bool (false true (or StartBool_6 StartBool_4) (<= Start_11 Start_14) (>= Start_2 Start_8) (> Start_15 Start_13)))
   (Start_10 Int (5 (* Start_8 Start_11) (abs Start_12) (ite StartBool_2 Start_4 Start_8)))
   (Start_6 Int (5 x (+ Start_13 Start_13) (mod Start_1 Start_8) (abs Start_9) (ite StartBool_3 Start_4 Start)))
   (Start_5 Int (x (- Start) (+ Start_6 Start_1) (* Start Start_4) (div Start_2 Start_7)))
   (Start_11 Int (0 x (- Start_13) (+ Start_8 Start_1) (* Start_12 Start_11) (div Start_6 Start_3) (ite StartBool_2 Start_11 Start_5)))
   (Start_13 Int (1 y (- Start) (- Start_11 Start_5) (+ Start Start) (div Start_2 Start) (mod Start_5 Start_9) (abs Start_12)))
   (StartBool_3 Bool (false (and StartBool StartBool) (= Start_1 Start_12) (>= Start_8 Start_4)))
   (Start_12 Int (1 5 4 2 (div Start_2 Start_2) (mod Start_10 Start_8) (abs Start_1)))
   (Start_9 Int (4 1 (- Start_3 Start_12) (* Start_5 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- 1 y) (- 5))))

(check-synth)
