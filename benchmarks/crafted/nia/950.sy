(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_14 Int) (StartBool_3 Bool) (Start_15 Int) (Start_12 Int) (Start_11 Int) (Start_3 Int) (Start_4 Int) (Start_7 Int) (Start_5 Int) (Start_13 Int) (Start_6 Int) (Start_10 Int) (StartBool_6 Bool) (StartBool_1 Bool) (Start_9 Int) (Start_8 Int) (StartBool_2 Bool) (Start_2 Int) (StartBool_4 Bool) (StartBool_5 Bool))
  ((Start Int (x (- Start_1) (+ Start_2 Start_2) (* Start_2 Start) (mod Start Start_1)))
   (StartBool Bool (true false (< Start_5 Start_5) (<= Start_1 Start_14)))
   (Start_1 Int (y 0 (- Start_10 Start_8) (+ Start Start_13) (* Start_8 Start_2) (mod Start_4 Start_8) (ite StartBool_3 Start Start_13)))
   (Start_14 Int (y 1 (- Start_7) (- Start_2 Start_15) (* Start_13 Start_11) (abs Start_8) (ite StartBool_5 Start Start_14)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_1 StartBool_3) (>= Start_4 Start_10) (> Start_1 Start_8)))
   (Start_15 Int (x 0 (div Start_4 Start) (mod Start_7 Start_8) (ite StartBool_4 Start_10 Start_11)))
   (Start_12 Int (3 0 y (+ Start_10 Start_9) (mod Start_13 Start_2)))
   (Start_11 Int (2 (* Start_2 Start_9) (div Start_12 Start_9) (abs Start_12) (ite StartBool_1 Start_5 Start_13)))
   (Start_3 Int (4 (- Start_3) (+ Start Start_4) (abs Start_4) (ite StartBool_1 Start_2 Start_5)))
   (Start_4 Int (3 (- Start_6) (- Start_7 Start) (* Start_14 Start_1) (div Start_7 Start_10) (mod Start_11 Start_6) (ite StartBool_2 Start_13 Start_7)))
   (Start_7 Int (4 y (- Start_8) (+ Start_1 Start_3) (* Start Start_6) (div Start_5 Start_8) (abs Start_3)))
   (Start_5 Int (3 (- Start_3 Start_6) (+ Start_5 Start)))
   (Start_13 Int (0 (- Start_2) (* Start_11 Start_7) (mod Start_6 Start_7) (ite StartBool_3 Start_13 Start_4)))
   (Start_6 Int (3 (- Start_6) (- Start_6 Start_2) (* Start_3 Start_5) (abs Start_6)))
   (Start_10 Int (5 2 (abs Start_6) (ite StartBool_1 Start_2 Start_7)))
   (StartBool_6 Bool (true (and StartBool_3 StartBool_4) (or StartBool_3 StartBool_4) (< Start_8 Start_11) (<= Start_10 Start_8)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (< Start_7 Start_4) (<= Start_5 Start_4) (= Start Start_4) (>= Start_8 Start_4)))
   (Start_9 Int (3 4 (+ Start_5 Start) (abs Start) (ite StartBool Start Start_2)))
   (Start_8 Int (2 (- Start_1 Start_4) (+ Start_6 Start_2) (div Start_5 Start_6) (ite StartBool_2 Start_3 Start_9)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_4) (or StartBool StartBool_3) (< Start_6 Start_9) (<= Start_8 Start_3) (>= Start_10 Start_5)))
   (Start_2 Int (2 (+ Start_1 Start) (* Start Start) (div Start_3 Start_1) (mod Start_3 Start_2) (abs Start_3)))
   (StartBool_4 Bool (true (not StartBool) (or StartBool_3 StartBool_5) (<= Start_1 Start_2) (>= Start_3 Start_6)))
   (StartBool_5 Bool (true (not StartBool_6) (and StartBool_2 StartBool_6) (or StartBool_5 StartBool_1) (>= Start_10 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- y 3) (- (+ x 5)))))

(check-synth)
