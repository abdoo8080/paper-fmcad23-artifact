(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_5 Int) (StartBool_2 Bool) (Start_8 Int) (Start_11 Int) (Start_4 Int) (StartBool_1 Bool) (Start_6 Int) (Start_3 Int) (StartBool_3 Bool) (Start_10 Int) (Start_9 Int) (Start_1 Int) (Start_7 Int) (StartBool_4 Bool))
  ((Start Int (y 1 (- Start) (div Start_1 Start) (mod Start_1 Start_1) (abs Start) (ite StartBool_1 Start_2 Start_2)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool StartBool_3) (< Start_1 Start_5)))
   (Start_2 Int (5 (- Start) (* Start_3 Start_4) (div Start_4 Start_5) (mod Start_2 Start)))
   (Start_5 Int (0 (+ Start_2 Start_1) (div Start_4 Start_5) (ite StartBool Start_1 Start_3)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool StartBool) (< Start_9 Start_4) (<= Start_5 Start_5) (= Start_7 Start_10) (>= Start_9 Start_5) (> Start_9 Start_9)))
   (Start_8 Int (0 3 y (- Start_1) (- Start_4 Start_2) (+ Start_1 Start_6) (* Start_2 Start_7) (div Start_2 Start_8) (abs Start_9) (ite StartBool_1 Start_7 Start)))
   (Start_11 Int (y (- Start_9) (* Start_9 Start_5) (mod Start_11 Start_8) (ite StartBool_2 Start_8 Start_2)))
   (Start_4 Int (2 5 4 (- Start_6) (abs Start_5)))
   (StartBool_1 Bool (true (>= Start_4 Start_5)))
   (Start_6 Int (0 5 4 x (- Start_2) (- Start_1 Start_6) (* Start Start_6) (abs Start_2)))
   (Start_3 Int (x (- Start) (* Start_3 Start_6) (div Start_1 Start_1) (mod Start_1 Start_2)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_4 StartBool_2) (< Start_2 Start_8) (>= Start_6 Start_8) (> Start Start_1)))
   (Start_10 Int (1 (- Start_10) (- Start_3 Start_1) (mod Start_8 Start) (abs Start_8) (ite StartBool_3 Start_11 Start_11)))
   (Start_9 Int (2 (- Start_8) (- Start Start_3) (+ Start_5 Start_5) (* Start_9 Start_1) (mod Start_1 Start_6) (abs Start_2) (ite StartBool Start_8 Start_2)))
   (Start_1 Int (3 (- Start_7) (+ Start_7 Start_2) (* Start_1 Start_7) (abs Start)))
   (Start_7 Int (2 1 (- Start_4) (+ Start Start_5) (div Start_1 Start_6)))
   (StartBool_4 Bool (true (not StartBool_2) (or StartBool_4 StartBool_1) (>= Start_3 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 0)))

(check-synth)
