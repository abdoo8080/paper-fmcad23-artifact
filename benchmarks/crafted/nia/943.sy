(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (StartBool_3 Bool) (Start_10 Int) (Start_3 Int) (Start_1 Int) (Start_2 Int) (Start_9 Int) (Start_4 Int) (Start_7 Int) (Start_6 Int) (Start_5 Int) (StartBool_2 Bool) (Start_8 Int) (Start_11 Int))
  ((Start Int (y 3 0 5 (- Start Start) (+ Start Start) (mod Start Start_1) (ite StartBool Start_1 Start_1)))
   (StartBool Bool (false true (not StartBool) (or StartBool_1 StartBool_2) (<= Start_1 Start_2)))
   (StartBool_1 Bool (true false (and StartBool_3 StartBool_2) (<= Start_3 Start_8) (= Start_5 Start_6) (>= Start_3 Start_1) (> Start_8 Start_5)))
   (StartBool_3 Bool (false (and StartBool_2 StartBool_2) (or StartBool_2 StartBool_3) (<= Start_5 Start_10)))
   (Start_10 Int (x (mod Start_6 Start_9) (abs Start_3)))
   (Start_3 Int (x (- Start_2) (- Start_2 Start_2) (+ Start Start_2) (div Start Start_3) (mod Start_2 Start_2) (abs Start_3)))
   (Start_1 Int (1 (- Start_1)))
   (Start_2 Int (2 4 (- Start_2) (+ Start_1 Start_1) (* Start_1 Start_1) (mod Start_3 Start_1)))
   (Start_9 Int (2 (- Start_3 Start_8) (+ Start_2 Start_1) (* Start_8 Start_1)))
   (Start_4 Int (1 (- Start) (* Start_2 Start_3) (div Start Start_1) (mod Start_4 Start_1) (abs Start_5) (ite StartBool Start_6 Start_1)))
   (Start_7 Int (4 (- Start_4) (* Start_3 Start_8) (div Start_6 Start_8) (mod Start_8 Start_3) (abs Start)))
   (Start_6 Int (3 x y (- Start_7) (- Start_8 Start_4) (+ Start_3 Start_9) (* Start_3 Start_6) (mod Start_5 Start_9)))
   (Start_5 Int (1 (- Start_10 Start_4) (+ Start_9 Start_11) (div Start_5 Start_10) (ite StartBool Start_8 Start_6)))
   (StartBool_2 Bool (true (or StartBool_3 StartBool_2) (> Start_4 Start)))
   (Start_8 Int (1 0 (- Start_9 Start_5) (+ Start_6 Start_4)))
   (Start_11 Int (y 2 (- Start_8 Start_7) (div Start_10 Start_9) (mod Start_8 Start_4) (ite StartBool_1 Start_2 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 0 (mod x 2)))))

(check-synth)
