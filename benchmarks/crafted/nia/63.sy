(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_12 Int) (Start_10 Int) (StartBool_1 Bool) (Start_5 Int) (Start_4 Int) (Start_6 Int) (Start_9 Int) (Start_2 Int) (Start_8 Int) (Start_7 Int) (Start_3 Int) (Start_1 Int) (StartBool_2 Bool))
  ((Start Int (0 (- Start) (div Start Start_1) (mod Start_2 Start) (abs Start)))
   (StartBool Bool (false (<= Start_2 Start_4) (= Start_5 Start_10)))
   (Start_11 Int (3 x 5 (+ Start_4 Start_1) (* Start_2 Start_10) (mod Start Start_11)))
   (Start_12 Int (x (- Start_3) (- Start Start_5) (+ Start_7 Start_1) (div Start_5 Start_8) (mod Start_6 Start_6) (abs Start_7)))
   (Start_10 Int (2 (+ Start_7 Start_4) (* Start_11 Start_6) (ite StartBool_1 Start_6 Start_12)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool_1) (<= Start_3 Start_4) (>= Start_4 Start_4)))
   (Start_5 Int (y 1 x (- Start_5) (+ Start_6 Start_6) (* Start Start_4) (div Start_4 Start_1) (mod Start_2 Start_5) (abs Start_2) (ite StartBool Start_6 Start_8)))
   (Start_4 Int (4 1 3 (- Start_5) (- Start_2 Start_1) (abs Start_3) (ite StartBool Start_6 Start)))
   (Start_6 Int (2 5 (- Start_7) (- Start_1 Start_8) (+ Start_4 Start_3) (mod Start_5 Start_6)))
   (Start_9 Int (4 y 5 1 (+ Start_2 Start_8)))
   (Start_2 Int (3 1 0 (- Start_3) (+ Start Start_1) (div Start_4 Start_4) (abs Start_4) (ite StartBool_1 Start_4 Start_1)))
   (Start_8 Int (0 (- Start_6) (+ Start_6 Start_8) (* Start_8 Start_6) (abs Start_3)))
   (Start_7 Int (0 y (+ Start_4 Start_3) (* Start_2 Start_7) (abs Start_3)))
   (Start_3 Int (x (- Start_5 Start_8) (div Start_9 Start_9) (mod Start_2 Start_9) (ite StartBool_2 Start_9 Start_3)))
   (Start_1 Int (0 4 1 (- Start_5) (div Start_1 Start_4) (abs Start_5)))
   (StartBool_2 Bool (false true (and StartBool StartBool_2) (= Start_3 Start_3) (> Start_2 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod 4 0) 3)))

(check-synth)
