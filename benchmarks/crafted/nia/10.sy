(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_17 Int) (Start_16 Int) (Start_14 Int) (Start_1 Int) (StartBool_4 Bool) (Start_15 Int) (Start_2 Int) (Start_18 Int) (StartBool_1 Bool) (Start_9 Int) (Start_4 Int) (StartBool_2 Bool) (Start_7 Int) (Start_10 Int) (Start_8 Int) (Start_3 Int) (Start_5 Int) (Start_11 Int) (StartBool_3 Bool) (Start_12 Int) (Start_13 Int) (Start_6 Int))
  ((Start Int (1 (- Start_1 Start) (+ Start Start_1) (div Start Start_2) (abs Start) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (true (and StartBool StartBool_2) (or StartBool_4 StartBool_1) (<= Start_11 Start_1) (>= Start Start_6)))
   (Start_19 Int (y 2 3 (- Start_2) (- Start_13 Start_1) (mod Start_2 Start_2)))
   (Start_17 Int (x (- Start_11) (div Start_8 Start_18)))
   (Start_16 Int (x 1 4 (- Start_3) (- Start_7 Start_17) (div Start_12 Start_14) (ite StartBool_3 Start_8 Start_12)))
   (Start_14 Int (5 4 (- Start_4) (+ Start_5 Start_13) (* Start_10 Start_15) (div Start_12 Start_1) (mod Start_3 Start_13) (ite StartBool_3 Start Start_8)))
   (Start_1 Int (x 5 (* Start_12 Start_8) (div Start_14 Start) (abs Start_2) (ite StartBool_1 Start_1 Start_5)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool_4) (<= Start_3 Start_5) (= Start_14 Start_1) (>= Start_16 Start_13)))
   (Start_15 Int (4 x (- Start_7) (- Start_11 Start_15) (* Start_10 Start_9) (div Start_6 Start_14) (abs Start_11) (ite StartBool Start_4 Start_3)))
   (Start_2 Int (2 1 (- Start_1) (- Start_10 Start_7) (* Start_13 Start) (abs Start_7) (ite StartBool_1 Start_11 Start_1)))
   (Start_18 Int (5 (+ Start_10 Start_13) (* Start_5 Start_12) (div Start_12 Start_19) (abs Start_1) (ite StartBool_1 Start_10 Start_7)))
   (StartBool_1 Bool (true false (< Start_3 Start) (<= Start Start_4) (= Start_4 Start_4)))
   (Start_9 Int (3 y (- Start_9) (- Start_8 Start_1) (ite StartBool_1 Start_10 Start_3)))
   (Start_4 Int (x (- Start_4) (- Start_3 Start) (* Start_5 Start_1) (div Start_6 Start) (mod Start_7 Start) (abs Start_1)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_1 StartBool) (< Start_12 Start_12) (= Start Start_5) (> Start_1 Start_3)))
   (Start_7 Int (x (- Start_8) (- Start_2 Start_1) (+ Start_6 Start_6) (* Start Start_9) (div Start_10 Start_6) (mod Start Start_9) (abs Start_7)))
   (Start_10 Int (x (- Start_4) (* Start Start_10)))
   (Start_8 Int (1 (- Start_11) (- Start_5 Start_5) (* Start_6 Start_3) (abs Start_1) (ite StartBool Start_10 Start_10)))
   (Start_3 Int (y (- Start) (- Start_4 Start_4) (+ Start Start_3) (div Start_2 Start_10) (mod Start Start_3) (abs Start_12)))
   (Start_5 Int (x 0 (+ Start_10 Start_2) (div Start_11 Start_8) (abs Start_10) (ite StartBool_1 Start_8 Start_11)))
   (Start_11 Int (y (+ Start_3 Start_10) (mod Start_10 Start_1) (ite StartBool_2 Start_8 Start_4)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_1 StartBool_1) (or StartBool_1 StartBool_3) (<= Start_13 Start_12)))
   (Start_12 Int (3 y 4 5 (- Start_11 Start_2) (* Start_13 Start_7) (div Start_3 Start_10)))
   (Start_13 Int (y (+ Start_4 Start_4) (div Start_3 Start_9) (abs Start_2)))
   (Start_6 Int (5 y (- Start_10 Start) (abs Start_3) (ite StartBool_1 Start_8 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div (mod 1 y) 3) 0)))

(check-synth)
