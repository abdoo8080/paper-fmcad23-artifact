(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_4 Int) (Start_7 Int) (Start_14 Int) (Start_15 Int) (Start_16 Int) (Start_11 Int) (StartBool_5 Bool) (Start_2 Int) (Start_3 Int) (Start_17 Int) (Start_1 Int) (Start_6 Int) (Start_5 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_12 Int) (Start_8 Int) (Start_9 Int) (StartBool_4 Bool) (Start_18 Int) (Start_10 Int) (Start_13 Int))
  ((Start Int (2 (ite StartBool_1 Start Start)))
   (StartBool Bool (false true (and StartBool_5 StartBool_4) (or StartBool StartBool_4) (< Start_16 Start_11) (<= Start_10 Start_17)))
   (StartBool_2 Bool (true (or StartBool StartBool_1)))
   (Start_4 Int (5 2 (+ Start_14 Start_3) (* Start_13 Start_10) (div Start_1 Start_4) (mod Start_10 Start_12) (abs Start_3) (ite StartBool_3 Start_8 Start_10)))
   (Start_7 Int (3 (- Start_1 Start_13) (* Start_5 Start_16) (div Start_3 Start_7) (mod Start_15 Start_17) (abs Start_12) (ite StartBool_2 Start_16 Start_7)))
   (Start_14 Int (5 1 (- Start_2) (- Start_9 Start_6) (* Start_15 Start_9) (mod Start_12 Start_12)))
   (Start_15 Int (y (- Start_11) (- Start_15 Start_6) (* Start_8 Start_4) (mod Start_3 Start_3) (ite StartBool_2 Start_6 Start_14)))
   (Start_16 Int (x 4 3 (+ Start_2 Start_11) (* Start_1 Start_14) (ite StartBool_3 Start_1 Start_11)))
   (Start_11 Int (y (- Start_1) (- Start_14 Start_14) (+ Start_3 Start_11) (div Start_3 Start) (mod Start_8 Start_15) (abs Start_10)))
   (StartBool_5 Bool (true (not StartBool_2) (<= Start_6 Start_12) (>= Start_2 Start_15) (> Start_16 Start_5)))
   (Start_2 Int (1 x 2 0 (- Start_3) (+ Start_3 Start_3) (* Start_2 Start_2) (mod Start_3 Start_3) (abs Start)))
   (Start_3 Int (3 (- Start_3) (- Start_1 Start_2) (+ Start_1 Start) (div Start_4 Start_5) (ite StartBool_1 Start_4 Start_6)))
   (Start_17 Int (x (- Start_4 Start_6) (* Start_18 Start) (div Start_17 Start_3) (mod Start_14 Start_17) (ite StartBool_2 Start_11 Start_3)))
   (Start_1 Int (0 5 (div Start_1 Start) (mod Start_1 Start_1) (abs Start) (ite StartBool_1 Start_2 Start_1)))
   (Start_6 Int (5 x (- Start_1 Start_3)))
   (Start_5 Int (0 4 (- Start_6 Start_1) (div Start_3 Start_1) (mod Start_2 Start_7) (abs Start_1) (ite StartBool_3 Start_2 Start_7)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool) (or StartBool_2 StartBool) (< Start_1 Start) (= Start_1 Start_1)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_1) (or StartBool_4 StartBool_3) (<= Start_3 Start_6) (= Start_3 Start_7) (>= Start_6 Start_8) (> Start_7 Start_8)))
   (Start_12 Int (y 4 0 (- Start_13 Start) (mod Start_4 Start_1)))
   (Start_8 Int (1 (- Start_8) (* Start Start_2) (div Start_8 Start_3) (mod Start Start_2) (abs Start_6)))
   (Start_9 Int (x (+ Start_9 Start_7) (* Start_10 Start_9) (mod Start_15 Start_16) (ite StartBool_4 Start_7 Start_14)))
   (StartBool_4 Bool (false true (not StartBool) (<= Start_9 Start_10)))
   (Start_18 Int (5 x (- Start_16) (- Start_1 Start_4) (div Start_18 Start_11) (abs Start_14) (ite StartBool Start Start_12)))
   (Start_10 Int (y (- Start_6) (+ Start_11 Start_2) (mod Start_4 Start_12) (abs Start_12)))
   (Start_13 Int (y (+ Start_2 Start_10) (* Start_9 Start_5) (mod Start_1 Start_6) (abs Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ y (* (mod 2 0) 2))))

(check-synth)
