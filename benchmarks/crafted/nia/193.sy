(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_14 Int) (Start_12 Int) (Start_5 Int) (Start_7 Int) (Start_8 Int) (StartBool_3 Bool) (Start_6 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_9 Int) (Start_1 Int) (Start_10 Int) (Start_4 Int) (Start_13 Int) (Start_11 Int) (Start_2 Int))
  ((Start Int (3 0 y x (- Start Start_1) (+ Start_1 Start_1) (* Start_2 Start_3) (div Start Start) (mod Start_1 Start_2) (abs Start_4) (ite StartBool_1 Start_5 Start_1)))
   (StartBool Bool (false (not StartBool) (and StartBool_2 StartBool_3) (or StartBool_4 StartBool_3) (< Start_12 Start_4)))
   (StartBool_5 Bool (true (not StartBool_3) (or StartBool_1 StartBool_4) (< Start_2 Start_1) (= Start_9 Start_5) (>= Start_11 Start_11)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_5) (< Start Start_13) (<= Start_1 Start_6) (> Start_14 Start_13)))
   (Start_14 Int (2 0 (+ Start_11 Start_9) (div Start_4 Start_5) (mod Start_2 Start_6)))
   (Start_12 Int (0 x 2 5 3 1 y (- Start_2) (+ Start_5 Start_13) (* Start_13 Start_10) (div Start_12 Start) (abs Start_12) (ite StartBool Start_11 Start_11)))
   (Start_5 Int (1 x (- Start_3 Start) (* Start_4 Start_6) (div Start_6 Start_4) (mod Start_4 Start_5) (abs Start_1) (ite StartBool_2 Start_6 Start_7)))
   (Start_7 Int (1 4 (+ Start_1 Start_4) (div Start_6 Start_8) (abs Start)))
   (Start_8 Int (0 y 2 5 (- Start Start_6) (+ Start_8 Start_8) (* Start_5 Start_6) (abs Start_1)))
   (StartBool_3 Bool (false true (not StartBool_3) (< Start_8 Start_6) (= Start_10 Start_11)))
   (Start_6 Int (0 1 x (- Start_5) (- Start_6 Start_2) (div Start_7 Start_5) (mod Start_8 Start_1) (abs Start_2)))
   (Start_3 Int (2 (- Start_9) (* Start_7 Start_3) (mod Start_1 Start_9) (ite StartBool_1 Start_4 Start_7)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_2 StartBool) (or StartBool StartBool_1) (= Start_8 Start_9) (>= Start_3 Start_3) (> Start_9 Start_7)))
   (StartBool_1 Bool (true (or StartBool_2 StartBool) (<= Start_8 Start_7) (>= Start Start_1) (> Start_9 Start_1)))
   (Start_9 Int (2 4 x))
   (Start_1 Int (3 x 5 (- Start_12) (- Start_12 Start) (* Start Start_5) (div Start_7 Start_9) (mod Start_3 Start_8) (abs Start_2) (ite StartBool_1 Start_9 Start_2)))
   (Start_10 Int (0 (- Start_6 Start_2) (div Start_2 Start_5) (ite StartBool_2 Start_1 Start_2)))
   (Start_4 Int (5 (+ Start_7 Start_10) (* Start_1 Start_8) (mod Start_11 Start_8)))
   (Start_13 Int (4 x 5 (- Start_13 Start_6) (+ Start Start_11) (mod Start_14 Start_9)))
   (Start_11 Int (3 4 0 (- Start_6) (- Start_3 Start_11) (abs Start_7) (ite StartBool_2 Start_7 Start_11)))
   (Start_2 Int (2 0 (- Start_10) (+ Start Start_7) (* Start_1 Start_3) (div Start_1 Start_1) (ite StartBool_2 Start_11 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 (div y (mod y 2)))))

(check-synth)
