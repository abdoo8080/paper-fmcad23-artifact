(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_4 Int) (Start_5 Int) (Start_8 Int) (Start_7 Int) (Start_6 Int) (StartBool_1 Bool) (Start_3 Int))
  ((Start Int (1 (- Start) (- Start Start) (+ Start Start_1) (* Start Start) (div Start_1 Start_2) (mod Start_3 Start_2) (abs Start) (ite StartBool Start Start)))
   (StartBool Bool (true false (not StartBool) (and StartBool StartBool_1) (or StartBool StartBool) (< Start_5 Start_2) (<= Start_2 Start_2) (> Start_4 Start_3)))
   (Start_1 Int (4 y 0 (* Start_4 Start_1) (div Start_2 Start_1)))
   (Start_2 Int (3 (* Start_3 Start_2) (div Start_6 Start_8) (abs Start_3) (ite StartBool Start Start_3)))
   (Start_4 Int (y (- Start_8 Start_4) (+ Start_2 Start_5) (abs Start_8) (ite StartBool_1 Start_7 Start_2)))
   (Start_5 Int (3 (- Start Start_3) (+ Start_8 Start_6) (* Start_3 Start_2) (div Start_4 Start_8) (abs Start_3)))
   (Start_8 Int (2 (- Start_3) (+ Start_5 Start) (* Start_7 Start)))
   (Start_7 Int (x 5 (- Start_7) (- Start_3 Start) (+ Start_2 Start_8) (div Start_8 Start_3) (mod Start_4 Start) (ite StartBool_1 Start_6 Start_1)))
   (Start_6 Int (y (+ Start_6 Start_3) (mod Start Start_4) (ite StartBool_1 Start_7 Start_2)))
   (StartBool_1 Bool (true (<= Start_4 Start_5) (= Start Start_3) (>= Start_6 Start_2) (> Start Start_1)))
   (Start_3 Int (1 4 y 3 (- Start_1) (- Start_4 Start_3) (* Start_1 Start) (div Start_4 Start_3) (ite StartBool_1 Start_3 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= 2 y) 1 0)))

(check-synth)
