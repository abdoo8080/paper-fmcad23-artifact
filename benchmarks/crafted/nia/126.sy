(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_1 Int) (Start_5 Int) (Start_2 Int) (Start_4 Int) (Start_3 Int) (StartBool_1 Bool))
  ((Start Int (0 5 (- Start) (+ Start Start_1) (* Start Start_2) (ite StartBool Start_3 Start_2)))
   (StartBool Bool (true false (< Start Start_3) (= Start_4 Start_2) (> Start Start_6)))
   (Start_6 Int (0 (- Start_5) (- Start_6 Start_2) (* Start_5 Start_1) (div Start_1 Start_2)))
   (Start_1 Int (0 y (- Start_1) (+ Start_4 Start_5) (div Start_5 Start_3) (abs Start_4)))
   (Start_5 Int (5 (abs Start_2) (ite StartBool Start_2 Start_1)))
   (Start_2 Int (5 (- Start_5 Start_3) (* Start_4 Start_4) (div Start_5 Start_5) (mod Start_2 Start_1)))
   (Start_4 Int (5 0 (- Start_3) (- Start_1 Start_2) (* Start_3 Start_4) (div Start_3 Start) (mod Start_3 Start_3) (ite StartBool_1 Start_2 Start)))
   (Start_3 Int (2 (- Start_4) (+ Start_1 Start_2) (div Start Start_3) (abs Start_4)))
   (StartBool_1 Bool (false (or StartBool StartBool_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div y 0)))

(check-synth)
