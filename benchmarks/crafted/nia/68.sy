(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_2 Int) (Start_17 Int) (Start_16 Int) (Start_15 Int) (StartBool_3 Bool) (Start_13 Int) (StartBool_6 Bool) (Start_1 Int) (StartBool_7 Bool) (Start_9 Int) (Start_5 Int) (StartBool_4 Bool) (Start_4 Int) (Start_14 Int) (Start_6 Int) (Start_8 Int) (StartBool_2 Bool) (Start_7 Int) (Start_10 Int) (Start_3 Int) (Start_12 Int) (Start_11 Int))
  ((Start Int (4 (div Start Start) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (false (not StartBool_5) (and StartBool_5 StartBool_7) (or StartBool_4 StartBool_3) (< Start_6 Start) (<= Start_8 Start_5) (= Start_4 Start_1) (> Start_12 Start_11)))
   (Start_18 Int (0 3 (- Start Start_3) (+ Start_3 Start)))
   (StartBool_5 Bool (true false (not StartBool_5) (and StartBool_6 StartBool_5) (< Start_7 Start_14) (> Start_18 Start_16)))
   (StartBool_1 Bool (false (and StartBool_5 StartBool_2) (< Start_15 Start_12) (<= Start_16 Start_8) (> Start_13 Start_15)))
   (Start_2 Int (2 (- Start_9) (+ Start_2 Start_10) (div Start_17 Start)))
   (Start_17 Int (3 (- Start_6 Start_2) (abs Start_4) (ite StartBool_3 Start_11 Start_6)))
   (Start_16 Int (1 0 y 5 x 3 (- Start_7) (* Start_9 Start_16) (div Start_12 Start_5) (mod Start_9 Start_11)))
   (Start_15 Int (0 1 x 2 5 (- Start_15 Start_12) (* Start_12 Start_5) (div Start_5 Start_16)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_1 StartBool) (or StartBool_1 StartBool_2) (< Start_13 Start_14) (<= Start_1 Start_10) (= Start_8 Start_10) (> Start_8 Start_8)))
   (Start_13 Int (y 5 (- Start_3 Start_7) (* Start_13 Start_4) (mod Start_5 Start)))
   (StartBool_6 Bool (true false (not StartBool_5) (or StartBool_5 StartBool_2)))
   (Start_1 Int (0 (- Start_2) (- Start_3 Start_3) (+ Start_4 Start_3) (* Start Start_1) (mod Start Start_2) (ite StartBool_1 Start Start_5)))
   (StartBool_7 Bool (true false (or StartBool_7 StartBool_4) (< Start_1 Start_6) (<= Start_4 Start_3)))
   (Start_9 Int (2 (- Start_9 Start_5) (* Start_6 Start_2) (abs Start_10) (ite StartBool_2 Start Start_1)))
   (Start_5 Int (1 x 4 0 5 3 (abs Start_3)))
   (StartBool_4 Bool (false (not StartBool_2) (< Start_17 Start_3) (= Start_8 Start_16) (>= Start_11 Start_1)))
   (Start_4 Int (y (- Start_3) (- Start_4 Start_1) (+ Start_4 Start_2) (* Start_5 Start_6) (mod Start Start_6) (ite StartBool_1 Start_2 Start_6)))
   (Start_14 Int (3 (- Start_15 Start_4) (+ Start_2 Start_11) (div Start_6 Start_5)))
   (Start_6 Int (y x 2 4 (- Start_6) (* Start_6 Start_5) (div Start_6 Start_7) (mod Start Start_6) (abs Start_8) (ite StartBool Start_5 Start_3)))
   (Start_8 Int (3 1 2 (- Start_8) (+ Start_7 Start_2) (* Start_9 Start_7) (mod Start_6 Start_7) (abs Start_7)))
   (StartBool_2 Bool (true (< Start_5 Start_9)))
   (Start_7 Int (5 2 (- Start_10) (* Start_2 Start_2) (mod Start_2 Start_9) (abs Start_5) (ite StartBool Start_9 Start_6)))
   (Start_10 Int (4 x 3 (* Start_10 Start_6) (mod Start_8 Start_7)))
   (Start_3 Int (5 (+ Start_10 Start_11) (* Start_3 Start_3) (div Start_10 Start_12) (mod Start_4 Start_7) (ite StartBool Start_5 Start_2)))
   (Start_12 Int (4 (- Start_8) (- Start_4 Start_9) (+ Start_7 Start_12) (div Start_1 Start_5) (abs Start_9)))
   (Start_11 Int (0 (- Start_4) (abs Start_6) (ite StartBool_3 Start_13 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 5 0)))

(check-synth)
