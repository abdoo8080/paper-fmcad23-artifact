(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_7 Bool) (Start_16 Int) (Start_12 Int) (StartBool_5 Bool) (Start_13 Int) (Start_11 Int) (Start_14 Int) (Start_4 Int) (Start_15 Int) (Start_6 Int) (Start_8 Int) (Start_7 Int) (Start_5 Int) (StartBool_3 Bool) (Start_3 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartBool_8 Bool) (Start_10 Int) (StartBool_6 Bool) (Start_2 Int) (StartBool_4 Bool) (Start_9 Int))
  ((Start Int (0 3 4 5 x 1 y (- Start Start_1) (mod Start_1 Start_1) (ite StartBool_1 Start Start_2)))
   (StartBool Bool (false (not StartBool_8) (>= Start_11 Start_8) (> Start_10 Start)))
   (Start_1 Int (3 (- Start_5) (+ Start_9 Start_6) (div Start_13 Start_14)))
   (StartBool_7 Bool (true (not StartBool_6) (< Start_5 Start_14) (= Start_5 Start_3) (>= Start_13 Start_3)))
   (Start_16 Int (5 x (+ Start_3 Start_6) (* Start_7 Start_11) (div Start_14 Start_13) (mod Start_8 Start_11) (abs Start_6) (ite StartBool_8 Start_8 Start_12)))
   (Start_12 Int (3 y 1 (- Start_13) (+ Start_1 Start_10) (* Start_3 Start_10) (abs Start_10) (ite StartBool_4 Start_11 Start_13)))
   (StartBool_5 Bool (false true (not StartBool_3) (and StartBool_7 StartBool_6) (or StartBool StartBool) (<= Start_12 Start_11) (= Start_13 Start_8)))
   (Start_13 Int (x 1 (- Start_12 Start_3) (* Start_12 Start) (abs Start_10)))
   (Start_11 Int (4 (+ Start_2 Start_10) (div Start_4 Start_7)))
   (Start_14 Int (4 (- Start_10) (- Start_8 Start_4) (+ Start_3 Start_6) (mod Start_12 Start_6) (abs Start_5)))
   (Start_4 Int (2 1 (- Start_1 Start_3) (+ Start_3 Start_3) (* Start_3 Start_3) (abs Start_3) (ite StartBool_2 Start_2 Start_1)))
   (Start_15 Int (0 1 2 3 4 y 5 x (- Start_6) (- Start_12 Start_2) (div Start_15 Start_16) (mod Start_1 Start_3)))
   (Start_6 Int (y (- Start_5 Start_1) (* Start Start) (abs Start_5)))
   (Start_8 Int (0 y 2 5 (- Start_6) (mod Start_10 Start_2)))
   (Start_7 Int (2 (- Start_1 Start_7) (* Start_7 Start_1) (div Start_3 Start_6) (ite StartBool_1 Start_6 Start_1)))
   (Start_5 Int (x 3 (abs Start_4) (ite StartBool_3 Start_2 Start_2)))
   (StartBool_3 Bool (true false (< Start_4 Start_5) (= Start_6 Start_5)))
   (Start_3 Int (0 (* Start Start_4) (mod Start_3 Start_4)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_3) (or StartBool StartBool) (< Start_3 Start_3) (<= Start_3 Start_4) (> Start_1 Start)))
   (StartBool_1 Bool (true (and StartBool_3 StartBool_4) (< Start_1 Start_7)))
   (StartBool_8 Bool (false true (< Start_13 Start_4) (= Start_15 Start_1) (>= Start_15 Start_16) (> Start_15 Start)))
   (Start_10 Int (5 2 0 3 (- Start_9) (- Start_11 Start_11) (* Start_8 Start_10) (abs Start_9) (ite StartBool_4 Start_9 Start_8)))
   (StartBool_6 Bool (false (not StartBool_3) (and StartBool_4 StartBool_4) (or StartBool_3 StartBool_2) (= Start_5 Start_8) (>= Start Start_3) (> Start_3 Start_9)))
   (Start_2 Int (y 4 5 x 2 (- Start_2) (* Start_1 Start_3) (div Start_3 Start) (mod Start_4 Start_3) (abs Start_4)))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_4) (or StartBool_6 StartBool_1) (<= Start_5 Start_6) (= Start_1 Start_7) (>= Start_5 Start) (> Start_7 Start_1)))
   (Start_9 Int (4 (- Start_7) (* Start Start_6) (mod Start_6 Start_4) (abs Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* (* 5 y) 5))))

(check-synth)
