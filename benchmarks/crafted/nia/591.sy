(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_6 Int) (Start_7 Int) (Start_4 Int) (StartBool_1 Bool) (Start_5 Int) (Start_2 Int) (Start_8 Int) (Start_3 Int))
  ((Start Int (2 1 4 (- Start_1) (- Start_2 Start) (* Start_2 Start_2) (mod Start_2 Start) (ite StartBool Start Start_3)))
   (StartBool Bool (true false))
   (Start_1 Int (y 1 (- Start_3 Start) (+ Start_7 Start_7) (div Start_2 Start_4)))
   (Start_6 Int (1 2 (- Start_5) (- Start_3 Start) (* Start_7 Start_6) (ite StartBool Start_8 Start_5)))
   (Start_7 Int (0 2 (+ Start_8 Start_7) (* Start_6 Start_8) (ite StartBool_1 Start_3 Start_5)))
   (Start_4 Int (x (- Start_3 Start_5) (div Start_3 Start_3)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_1 StartBool) (or StartBool StartBool) (<= Start_5 Start_8) (>= Start_1 Start_6) (> Start_8 Start_4)))
   (Start_5 Int (1 (- Start_5 Start_6) (+ Start_5 Start_7) (div Start_4 Start_6) (mod Start_7 Start_5) (ite StartBool_1 Start Start_5)))
   (Start_2 Int (1 y 5 (- Start_3) (* Start_2 Start) (div Start_3 Start_3) (abs Start_4)))
   (Start_8 Int (1 x (div Start_4 Start_1) (mod Start_2 Start_8) (abs Start_2)))
   (Start_3 Int (4 y 1 3 (abs Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 1 (+ x 3))))

(check-synth)
