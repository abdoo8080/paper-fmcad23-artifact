(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (StartBool_3 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_6 Int) (Start_3 Int) (Start_9 Int) (StartBool_1 Bool) (Start_8 Int) (Start_7 Int) (Start_4 Int) (Start_2 Int) (Start_1 Int) (Start_10 Int))
  ((Start Int (y x (+ Start Start_1) (* Start_2 Start) (div Start_3 Start_3) (ite StartBool Start_3 Start_2)))
   (StartBool Bool (true (not StartBool) (< Start_7 Start_11) (>= Start_2 Start_3)))
   (Start_11 Int (4 x 2 1 0 3 (+ Start_8 Start) (abs Start_11)))
   (StartBool_3 Bool (false true (and StartBool StartBool_1) (or StartBool_1 StartBool_2) (<= Start_4 Start_10) (= Start_4 Start_4)))
   (Start_5 Int (5 (- Start_1) (+ Start_5 Start_5)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_2 StartBool) (or StartBool_1 StartBool_1) (< Start_5 Start_2)))
   (Start_6 Int (2 (- Start_7) (+ Start_7 Start_1) (mod Start_6 Start_8) (ite StartBool Start_4 Start_8)))
   (Start_3 Int (y (- Start_3 Start) (div Start_4 Start_5) (mod Start_2 Start_2) (ite StartBool Start_2 Start_4)))
   (Start_9 Int (y (- Start_3) (mod Start_8 Start_2) (ite StartBool Start_8 Start_9)))
   (StartBool_1 Bool (false (not StartBool) (or StartBool StartBool_1)))
   (Start_8 Int (y (* Start_5 Start_5) (mod Start_4 Start_9) (abs Start_7)))
   (Start_7 Int (2 (- Start_7) (* Start_4 Start_4) (div Start_9 Start_3) (mod Start_3 Start_7)))
   (Start_4 Int (2 (- Start_1) (+ Start_1 Start_1) (* Start Start_3) (div Start Start_2) (mod Start Start) (abs Start_6)))
   (Start_2 Int (3 (- Start_10) (- Start_6 Start) (div Start Start_7) (ite StartBool_1 Start_10 Start_1)))
   (Start_1 Int (4 2 (- Start_10 Start_3) (+ Start_9 Start_10) (div Start Start_1) (mod Start_9 Start) (ite StartBool_2 Start_8 Start_4)))
   (Start_10 Int (1 0 (- Start_3) (div Start_10 Start_1) (abs Start_3) (ite StartBool_1 Start Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 5)))

(check-synth)
