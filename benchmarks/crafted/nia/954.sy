(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (StartBool_8 Bool) (StartBool_7 Bool) (StartBool_6 Bool) (StartBool_5 Bool) (Start_7 Int) (Start_13 Int) (StartBool_9 Bool) (Start_15 Int) (Start_8 Int) (Start_2 Int) (Start_1 Int) (Start_12 Int) (Start_3 Int) (StartBool_1 Bool) (Start_5 Int) (Start_9 Int) (StartBool_2 Bool) (Start_14 Int) (Start_6 Int) (StartBool_4 Bool) (StartBool_3 Bool) (Start_11 Int) (Start_10 Int))
  ((Start Int (3 1 5 (- Start_1) (- Start_1 Start) (+ Start_1 Start) (* Start_1 Start) (div Start Start_2) (abs Start_2)))
   (StartBool Bool (false (not StartBool_8) (and StartBool_9 StartBool_4) (> Start_7 Start_5)))
   (Start_4 Int (4 (- Start_7) (- Start_4 Start_8) (* Start_6 Start_11) (mod Start_9 Start_2) (abs Start_15) (ite StartBool_3 Start_3 Start_7)))
   (StartBool_8 Bool (false true (not StartBool_5) (and StartBool_6 StartBool_6) (>= Start_10 Start_10)))
   (StartBool_7 Bool (false (not StartBool_1) (and StartBool_5 StartBool) (or StartBool_4 StartBool_2) (= Start_8 Start_10) (>= Start_9 Start_12)))
   (StartBool_6 Bool (false (or StartBool_5 StartBool_7) (<= Start_6 Start_11) (> Start_3 Start_12)))
   (StartBool_5 Bool (true false (and StartBool_2 StartBool) (<= Start_11 Start_13) (= Start_12 Start_11) (>= Start_1 Start_10) (> Start_14 Start_14)))
   (Start_7 Int (5 1 y (- Start) (+ Start_6 Start_9) (div Start_2 Start_1) (mod Start_1 Start_4) (abs Start_6)))
   (Start_13 Int (4 0 (+ Start_14 Start_10)))
   (StartBool_9 Bool (true false (and StartBool_9 StartBool_2) (or StartBool_2 StartBool_9) (<= Start_14 Start) (= Start_9 Start_10) (>= Start_1 Start_3) (> Start_5 Start_10)))
   (Start_15 Int (3 5 (- Start_11) (* Start_9 Start_8) (abs Start_12) (ite StartBool_2 Start_3 Start_11)))
   (Start_8 Int (3 0 2 (- Start_3) (* Start_1 Start_7) (abs Start_6) (ite StartBool_4 Start_3 Start_7)))
   (Start_2 Int (0 (* Start_2 Start_1) (div Start_2 Start_1) (mod Start_1 Start_1)))
   (Start_1 Int (2 0 (+ Start_1 Start_1) (mod Start_2 Start) (ite StartBool_1 Start_3 Start_3)))
   (Start_12 Int (3 2 0 y (- Start_9) (+ Start_13 Start_7) (div Start_5 Start_5) (abs Start_1)))
   (Start_3 Int (x 0 y 1 5 (- Start_4) (- Start_4 Start_1) (div Start Start_3) (ite StartBool_1 Start Start_5)))
   (StartBool_1 Bool (true false (< Start_15 Start_11) (= Start_15 Start_2) (>= Start_1 Start_14)))
   (Start_5 Int (2 (- Start_4) (- Start_4 Start_1) (+ Start Start_3) (* Start Start_1) (abs Start_4) (ite StartBool_2 Start_2 Start_1)))
   (Start_9 Int (0 3 2 (+ Start Start_2) (* Start_10 Start_7) (div Start_2 Start_5) (mod Start_11 Start_8)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool) (< Start_5 Start) (= Start Start_4) (>= Start_6 Start_4)))
   (Start_14 Int (y (* Start_10 Start_12) (abs Start) (ite StartBool_5 Start_12 Start_2)))
   (Start_6 Int (3 0 (- Start_2 Start_1) (+ Start_7 Start_8)))
   (StartBool_4 Bool (true (not StartBool_5) (or StartBool StartBool_4) (< Start_2 Start_7) (= Start_1 Start_9) (>= Start Start_4) (> Start_2 Start_4)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_6 StartBool_1) (or StartBool_1 StartBool) (= Start_10 Start_11) (> Start_14 Start_4)))
   (Start_11 Int (3 (+ Start_2 Start_5)))
   (Start_10 Int (y 0 (- Start_12) (div Start_9 Start_1) (mod Start_4 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (div 4 0) 1)))

(check-synth)
