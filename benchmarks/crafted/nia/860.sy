(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_5 Int) (Start_1 Int) (StartBool_3 Bool) (StartBool_2 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_6 Int) (Start_3 Int) (Start_2 Int))
  ((Start Int (3 x 4 0 2 1 (div Start_1 Start_2) (ite StartBool Start Start)))
   (StartBool Bool (true false (not StartBool_2) (< Start_5 Start_5) (<= Start Start_3)))
   (Start_5 Int (x (- Start_6) (- Start_5 Start_6) (+ Start_1 Start_4) (* Start_3 Start) (div Start_5 Start_2) (mod Start_5 Start_3) (ite StartBool_1 Start_3 Start_6)))
   (Start_1 Int (x 1 5 (- Start_2) (+ Start Start) (ite StartBool_3 Start_5 Start)))
   (StartBool_3 Bool (true (not StartBool_1) (or StartBool_2 StartBool) (> Start_6 Start_5)))
   (StartBool_2 Bool (false true (< Start_1 Start_2) (= Start_3 Start_1)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_2) (or StartBool StartBool) (< Start Start_1)))
   (Start_4 Int (2 (- Start_1) (+ Start_1 Start_1) (* Start Start_4) (div Start_2 Start_1) (abs Start)))
   (Start_6 Int (3 (- Start_2) (+ Start_4 Start_1) (* Start_5 Start_1)))
   (Start_3 Int (3 1 (- Start) (+ Start_3 Start) (div Start_2 Start) (ite StartBool_1 Start_4 Start_4)))
   (Start_2 Int (1 (- Start) (- Start_3 Start_1) (div Start_3 Start) (mod Start_3 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 2 (- y))))

(check-synth)
