(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_14 Int) (Start_9 Int) (Start_12 Int) (Start_10 Int) (StartBool_1 Bool) (Start_13 Int) (Start_4 Int) (Start_11 Int) (Start_2 Int) (Start_7 Int) (Start_5 Int) (Start_1 Int) (Start_6 Int) (Start_8 Int) (Start_15 Int) (Start_3 Int) (StartBool_2 Bool))
  ((Start Int (y 1 (- Start_1) (+ Start Start_2) (* Start_2 Start_1) (div Start_3 Start) (abs Start)))
   (StartBool Bool (false (and StartBool_2 StartBool_2) (or StartBool_1 StartBool_2) (< Start Start_5) (<= Start_6 Start_11) (>= Start_6 Start_15)))
   (Start_16 Int (3 (- Start_2) (* Start_8 Start_10) (div Start_8 Start_4) (abs Start_3)))
   (Start_14 Int (y (- Start_8 Start_2) (+ Start_1 Start_5) (div Start_13 Start_8) (mod Start_5 Start_4) (abs Start_11)))
   (Start_9 Int (y x (- Start_13) (- Start_9 Start_14) (+ Start_12 Start_4) (* Start_8 Start_10) (div Start_4 Start_5) (abs Start_12) (ite StartBool Start_11 Start_2)))
   (Start_12 Int (2 (+ Start_7 Start_7) (* Start_6 Start_4) (mod Start_7 Start_10)))
   (Start_10 Int (5 (- Start_4) (- Start_1 Start_11) (+ Start_8 Start_8) (div Start_10 Start_5) (abs Start)))
   (StartBool_1 Bool (true false (or StartBool StartBool_1) (< Start_2 Start_4) (<= Start_2 Start_3)))
   (Start_13 Int (0 2 (- Start_13) (div Start_5 Start_1) (mod Start_13 Start) (abs Start_1)))
   (Start_4 Int (2 (- Start) (- Start_2 Start_4) (+ Start_2 Start) (mod Start Start_2) (abs Start_3) (ite StartBool_1 Start_3 Start_3)))
   (Start_11 Int (3 (- Start_6) (* Start_4 Start_11) (abs Start_12) (ite StartBool_2 Start_13 Start_5)))
   (Start_2 Int (4 (- Start) (- Start_3 Start_4) (+ Start_1 Start) (* Start_5 Start_2) (div Start_2 Start) (mod Start_4 Start_2) (ite StartBool_1 Start_3 Start_2)))
   (Start_7 Int (x (- Start_1 Start_6) (* Start Start_6) (abs Start_10)))
   (Start_5 Int (1 (- Start_2 Start_2) (+ Start_5 Start_2) (abs Start_6)))
   (Start_1 Int (1 (+ Start_3 Start_3) (* Start_5 Start_1) (div Start_7 Start_7) (mod Start_2 Start_8) (abs Start_8)))
   (Start_6 Int (1 5 (- Start)))
   (Start_8 Int (4 y 2 (- Start Start_2) (div Start_6 Start_9) (mod Start_9 Start_10)))
   (Start_15 Int (3 0 (- Start_6) (- Start_16 Start_11) (* Start_15 Start_5) (mod Start_3 Start_15) (abs Start_16) (ite StartBool_2 Start_10 Start_13)))
   (Start_3 Int (y 4 5 2 (+ Start_2 Start) (mod Start_2 Start_3) (abs Start_2) (ite StartBool_1 Start Start_3)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool) (< Start_7 Start_4) (= Start_10 Start_1) (> Start_13 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod 5 0) x)))

(check-synth)
