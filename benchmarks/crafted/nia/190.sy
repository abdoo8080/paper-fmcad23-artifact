(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_1 Int) (Start_14 Int) (StartBool_6 Bool) (Start_12 Int) (StartBool_4 Bool) (Start_13 Int) (Start_3 Int) (StartBool_7 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_17 Int) (Start_6 Int) (StartBool_3 Bool) (Start_7 Int) (Start_8 Int) (Start_2 Int) (Start_15 Int) (Start_10 Int) (Start_9 Int) (StartBool_5 Bool) (Start_5 Int) (Start_11 Int) (StartBool_2 Bool))
  ((Start Int (1 4 (- Start_1 Start) (+ Start Start_1) (* Start Start_1) (div Start_2 Start) (mod Start Start_1) (abs Start_3)))
   (StartBool Bool (false true (not StartBool_4) (and StartBool_5 StartBool_5) (<= Start_12 Start_2) (= Start_6 Start_15) (> Start_12 Start_11)))
   (Start_16 Int (4 (* Start_16 Start_1) (div Start_16 Start_12) (mod Start_17 Start) (abs Start_8)))
   (Start_1 Int (2 y 4 0 x 3 1 5 (- Start) (- Start_1 Start_6) (* Start_2 Start_14) (div Start Start_5) (mod Start_5 Start_3) (ite StartBool_6 Start_13 Start_13)))
   (Start_14 Int (3 (- Start_3) (- Start_6 Start_9) (+ Start_1 Start_13) (* Start Start_2) (mod Start_1 Start_14)))
   (StartBool_6 Bool (false (not StartBool_7) (and StartBool_4 StartBool_6) (or StartBool_1 StartBool_2) (> Start_3 Start_8)))
   (Start_12 Int (3 0 (- Start_7 Start_12) (div Start_8 Start) (ite StartBool_4 Start_7 Start_5)))
   (StartBool_4 Bool (false true (and StartBool_2 StartBool_2) (or StartBool StartBool) (> Start_9 Start_1)))
   (Start_13 Int (3 (* Start_12 Start_1) (mod Start_5 Start_3) (abs Start_1)))
   (Start_3 Int (4 y 2 3 (- Start_4) (- Start Start) (mod Start_3 Start_2) (abs Start)))
   (StartBool_7 Bool (false true (not StartBool_4) (and StartBool StartBool_7) (or StartBool_5 StartBool_6) (< Start_2 Start_5) (<= Start_1 Start_7) (>= Start_13 Start_14)))
   (StartBool_1 Bool (true (not StartBool_2) (or StartBool_1 StartBool_2) (< Start_4 Start_8) (>= Start_11 Start_3) (> Start_7 Start_8)))
   (Start_4 Int (5 0 2 x (+ Start_5 Start_5) (* Start_6 Start_1)))
   (Start_17 Int (4 (+ Start_17 Start_9) (div Start_2 Start_4) (mod Start_15 Start_12) (ite StartBool_2 Start_14 Start)))
   (Start_6 Int (3 2 (- Start Start_3) (div Start_7 Start_4) (mod Start_4 Start_4) (ite StartBool Start_4 Start_4)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_5 StartBool_2) (< Start_8 Start_6) (>= Start_5 Start_10)))
   (Start_7 Int (3 y (- Start_7 Start_6) (+ Start_2 Start_6) (ite StartBool Start_8 Start_6)))
   (Start_8 Int (3 0 4 (- Start_3) (- Start Start_5) (+ Start Start_1) (* Start Start_2) (mod Start_3 Start_8) (abs Start_9)))
   (Start_2 Int (y x (+ Start_3 Start_9) (div Start_1 Start_4) (mod Start_5 Start) (abs Start_2) (ite StartBool_1 Start_10 Start_1)))
   (Start_15 Int (3 4 5 1 2 (- Start_5) (- Start_10 Start_2) (+ Start_12 Start_7) (* Start_1 Start_9) (abs Start_16)))
   (Start_10 Int (1 (- Start_3) (- Start_1 Start_9) (* Start_10 Start_5) (abs Start_5)))
   (Start_9 Int (5 y x 1 (- Start_9) (+ Start_1 Start_2) (div Start_3 Start) (abs Start_6) (ite StartBool Start_7 Start_2)))
   (StartBool_5 Bool (false (not StartBool_6) (and StartBool_2 StartBool_3) (or StartBool_1 StartBool_2) (< Start_8 Start) (>= Start_11 Start_12) (> Start_5 Start_8)))
   (Start_5 Int (4 0 (- Start_4 Start_6) (ite StartBool Start_8 Start_3)))
   (Start_11 Int (3 (* Start_3 Start_5)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_3 StartBool_4) (>= Start_11 Start_3) (> Start_2 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 2 y)))

(check-synth)
