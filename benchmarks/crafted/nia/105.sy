(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_17 Int) (Start_18 Int) (StartBool_5 Bool) (Start_13 Int) (Start_14 Int) (Start_19 Int) (Start_15 Int) (Start_12 Int) (Start_11 Int) (Start_6 Int) (StartBool_3 Bool) (Start_9 Int) (StartBool_2 Bool) (Start_4 Int) (StartBool_1 Bool) (Start_8 Int) (Start_2 Int) (Start_16 Int) (Start_7 Int) (Start_3 Int) (Start_1 Int) (Start_10 Int) (Start_5 Int))
  ((Start Int (0 x (- Start_1) (+ Start_1 Start_2) (div Start_3 Start_3) (abs Start_4)))
   (StartBool Bool (true (not StartBool_1) (or StartBool StartBool_2) (< Start_3 Start_1) (<= Start_11 Start_4) (= Start_1 Start_12)))
   (StartBool_4 Bool (true false (or StartBool_2 StartBool_5)))
   (Start_17 Int (5 (- Start_18 Start_1) (* Start_1 Start_10) (div Start_4 Start_12) (mod Start_3 Start_18) (abs Start_6) (ite StartBool_2 Start_14 Start_13)))
   (Start_18 Int (0 1 (- Start_19) (+ Start_12 Start_6)))
   (StartBool_5 Bool (false true (not StartBool_3) (and StartBool_2 StartBool_3) (< Start_16 Start_6) (= Start_2 Start_9) (> Start_17 Start_2)))
   (Start_13 Int (0 (- Start_2 Start_9) (+ Start_3 Start_5) (* Start_14 Start_16) (div Start_15 Start_13)))
   (Start_14 Int (2 (- Start_14 Start_9) (+ Start_5 Start_16) (* Start_16 Start_7) (div Start Start_10) (mod Start_1 Start_10) (abs Start_13)))
   (Start_19 Int (3 (- Start_17 Start_1)))
   (Start_15 Int (x (- Start_13) (+ Start_10 Start_13) (* Start_1 Start_1) (mod Start_3 Start_2) (abs Start_14) (ite StartBool_3 Start_14 Start_9)))
   (Start_12 Int (4 x (- Start_9) (- Start_5 Start_13) (+ Start_7 Start_8) (* Start_2 Start_14) (div Start_15 Start) (mod Start_12 Start_2) (abs Start_13)))
   (Start_11 Int (4 0 y (- Start_2) (- Start_4 Start_11) (* Start_5 Start_7) (div Start_10 Start_15) (ite StartBool Start_1 Start_4)))
   (Start_6 Int (4 (+ Start_6 Start_6) (div Start_5 Start_3) (abs Start_3) (ite StartBool Start_3 Start_3)))
   (StartBool_3 Bool (true (<= Start_6 Start_14) (= Start_13 Start_13)))
   (Start_9 Int (5 (+ Start_6 Start_4) (* Start_3 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_4) (and StartBool_4 StartBool_5) (or StartBool_4 StartBool_5) (< Start_10 Start_11) (<= Start_12 Start_7) (> Start_8 Start_15)))
   (Start_4 Int (4 (+ Start_4 Start_4) (div Start_2 Start_5) (mod Start_2 Start_5) (abs Start_2) (ite StartBool Start_4 Start_6)))
   (StartBool_1 Bool (true false (not StartBool_1) (< Start_8 Start_2) (<= Start_2 Start_4) (= Start_2 Start_7)))
   (Start_8 Int (5 (- Start_3) (div Start_2 Start_7) (ite StartBool_1 Start_5 Start_3)))
   (Start_2 Int (2 3 5 1 (- Start_5) (* Start_5 Start_5)))
   (Start_16 Int (x (- Start_14) (+ Start_13 Start_10) (* Start_16 Start_16)))
   (Start_7 Int (3 2 4 1 (- Start_8 Start_8) (div Start_8 Start_4) (abs Start_2)))
   (Start_3 Int (0 (- Start_3 Start) (+ Start_7 Start_9) (div Start_1 Start_4) (mod Start_7 Start_8) (abs Start_6)))
   (Start_1 Int (4 (- Start_7) (- Start_10 Start_10) (ite StartBool Start_7 Start_1)))
   (Start_10 Int (4 (- Start_1) (div Start Start_1) (abs Start_10) (ite StartBool_1 Start_3 Start_1)))
   (Start_5 Int (x (- Start_7) (+ Start_6 Start_8) (div Start_1 Start_5) (ite StartBool_1 Start_6 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- 1 y))))

(check-synth)
