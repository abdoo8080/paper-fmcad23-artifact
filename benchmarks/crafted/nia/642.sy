(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_4 Int) (Start_10 Int) (Start_6 Int) (StartBool_2 Bool) (Start_3 Int) (StartBool_1 Bool) (Start_9 Int) (Start_7 Int) (Start_8 Int) (Start_11 Int) (Start_5 Int) (Start_2 Int))
  ((Start Int (5 2 0 (* Start_1 Start_2) (div Start_1 Start_3) (abs Start_2)))
   (StartBool Bool (true false (not StartBool_2) (or StartBool_2 StartBool) (< Start_10 Start_6) (> Start_2 Start_7)))
   (Start_1 Int (y (* Start_8 Start_9) (mod Start_1 Start_11)))
   (Start_4 Int (y 2 5 3 1 x (- Start_7 Start) (div Start_6 Start_3) (mod Start_7 Start_4) (abs Start_8) (ite StartBool_2 Start_2 Start)))
   (Start_10 Int (3 2 x 1 0 (* Start_6 Start_6) (div Start_7 Start_10) (mod Start_8 Start_10) (abs Start_3)))
   (Start_6 Int (x (- Start_1) (- Start_4 Start_3) (+ Start Start_4) (mod Start_2 Start_3)))
   (StartBool_2 Bool (true false (< Start_7 Start_6) (<= Start_1 Start_3) (= Start_4 Start_2) (>= Start_3 Start_9)))
   (Start_3 Int (3 x 4 (- Start_2) (- Start_1 Start_4) (mod Start_4 Start_1) (abs Start_2) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_1 Bool (false true (not StartBool) (< Start_4 Start_2) (<= Start_4 Start_3) (= Start_5 Start_4) (> Start Start_4)))
   (Start_9 Int (x (- Start_1) (- Start_4 Start_8) (mod Start_9 Start) (abs Start) (ite StartBool_1 Start_9 Start_3)))
   (Start_7 Int (4 (- Start_1 Start_1) (div Start_5 Start_7) (mod Start_4 Start_10) (ite StartBool_1 Start_4 Start_11)))
   (Start_8 Int (3 (- Start_2) (- Start_9 Start_7) (+ Start Start_8) (* Start_6 Start_8) (div Start_4 Start_3) (mod Start_8 Start_7) (ite StartBool_2 Start_1 Start_4)))
   (Start_11 Int (y x (+ Start_1 Start_6) (mod Start_1 Start_4) (abs Start_4) (ite StartBool Start_3 Start_5)))
   (Start_5 Int (1 (+ Start_2 Start_5) (* Start_4 Start_2) (div Start_6 Start_5) (mod Start_5 Start_5) (abs Start_4) (ite StartBool Start_1 Start_1)))
   (Start_2 Int (2 (- Start_5) (- Start_11 Start) (* Start_11 Start_3) (ite StartBool_1 Start_5 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 1 (mod 2 0))))

(check-synth)
