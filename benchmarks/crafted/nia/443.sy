(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_14 Int) (Start_1 Int) (Start_11 Int) (Start_8 Int) (Start_3 Int) (Start_7 Int) (StartBool_3 Bool) (Start_5 Int) (StartBool_1 Bool) (Start_13 Int) (Start_10 Int) (StartBool_2 Bool) (Start_6 Int) (Start_4 Int) (Start_2 Int) (Start_15 Int) (Start_9 Int) (Start_12 Int))
  ((Start Int (4 x (- Start_1) (- Start_1 Start) (* Start_2 Start_3) (abs Start_1)))
   (StartBool Bool (true (or StartBool_3 StartBool_3) (<= Start_12 Start_14) (> Start Start_11)))
   (Start_16 Int (5 (+ Start_6 Start_6) (mod Start_6 Start_8) (ite StartBool Start_1 Start)))
   (Start_14 Int (3 y 4 0 x 2 1 5 (- Start_10 Start_4) (+ Start_15 Start_3) (* Start_12 Start_2) (div Start Start_6) (mod Start_15 Start_16)))
   (Start_1 Int (4 (- Start_5) (- Start_11 Start_1) (div Start_3 Start_10)))
   (Start_11 Int (2 0 (+ Start_1 Start) (mod Start_13 Start_9) (abs Start_8)))
   (Start_8 Int (1 x (- Start_3) (+ Start_4 Start) (div Start_2 Start_6) (ite StartBool_1 Start_1 Start_3)))
   (Start_3 Int (2 5 0 (- Start) (* Start_2 Start_1) (div Start_4 Start_4) (abs Start_5)))
   (Start_7 Int (x 2 3 (- Start_1) (* Start_3 Start_7) (div Start Start_6) (abs Start_6)))
   (StartBool_3 Bool (false true (not StartBool_1) (< Start_16 Start_4) (<= Start_14 Start_11)))
   (Start_5 Int (2 x 1 y (- Start_1) (- Start_3 Start_4) (* Start_5 Start) (div Start Start_6) (ite StartBool_1 Start_2 Start)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (< Start_6 Start_6) (= Start_5 Start_2) (>= Start Start_6)))
   (Start_13 Int (4 (- Start_13 Start_1) (+ Start Start_2) (div Start_13 Start_12) (mod Start_8 Start_8)))
   (Start_10 Int (y (- Start_4) (+ Start_6 Start) (div Start_11 Start_12) (mod Start_3 Start_12)))
   (StartBool_2 Bool (false (not StartBool_2) (< Start_6 Start) (= Start_1 Start_3)))
   (Start_6 Int (3 (+ Start_3 Start_7) (* Start_1 Start_5) (div Start_4 Start_7) (mod Start_2 Start_2) (abs Start_4)))
   (Start_4 Int (0 x 5 (- Start_7) (- Start_2 Start_5) (+ Start_6 Start_8) (* Start_5 Start_5) (mod Start_2 Start_6)))
   (Start_2 Int (1 5 2 x y 4 (- Start_8) (- Start_8 Start_4) (+ Start_7 Start_7) (mod Start_8 Start) (abs Start_6) (ite StartBool Start_8 Start_9)))
   (Start_15 Int (1 (- Start_10) (- Start_12 Start_1) (+ Start_11 Start_14) (abs Start_5) (ite StartBool_1 Start_15 Start_7)))
   (Start_9 Int (3 (+ Start_8 Start_8) (div Start_10 Start_7) (mod Start_5 Start_3) (ite StartBool_1 Start_5 Start)))
   (Start_12 Int (2 (+ Start Start_12) (* Start_3 Start_3) (div Start_10 Start) (mod Start_8 Start_3) (abs Start_11) (ite StartBool_2 Start_2 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* 4 y) (div y y))))

(check-synth)
