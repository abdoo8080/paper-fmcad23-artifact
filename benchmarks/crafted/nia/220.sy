(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_1 Int) (Start_10 Int) (Start_8 Int) (StartBool_3 Bool) (Start_3 Int) (Start_7 Int) (Start_2 Int) (Start_5 Int) (Start_4 Int) (Start_9 Int) (Start_6 Int) (StartBool_2 Bool))
  ((Start Int (3 (- Start) (* Start_1 Start)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (or StartBool StartBool) (<= Start_7 Start_9) (>= Start_4 Start)))
   (StartBool_1 Bool (true false (< Start_2 Start_1) (<= Start Start) (= Start_4 Start_3) (>= Start_10 Start_2)))
   (Start_1 Int (1 (- Start_1) (+ Start Start_2) (* Start Start_1) (div Start_2 Start_3) (mod Start Start)))
   (Start_10 Int (2 3 5 y (- Start_4) (- Start_4 Start) (mod Start_6 Start_2) (abs Start_1) (ite StartBool_1 Start_7 Start_7)))
   (Start_8 Int (5 2 (* Start_1 Start_2) (div Start Start_6)))
   (StartBool_3 Bool (true false (or StartBool StartBool) (< Start_4 Start_7) (= Start_6 Start_2) (> Start_1 Start_9)))
   (Start_3 Int (0 (+ Start_2 Start_4) (div Start_3 Start_3) (mod Start Start_5) (abs Start_1)))
   (Start_7 Int (2 (div Start_2 Start_5) (abs Start_7)))
   (Start_2 Int (5 3 (- Start_1 Start_8) (div Start Start_5) (mod Start_9 Start_9)))
   (Start_5 Int (0 1 (- Start_6) (- Start_4 Start_6) (* Start_3 Start_2) (mod Start_2 Start_5)))
   (Start_4 Int (4 x 3 y 1 2 0 (- Start) (- Start_1 Start_8) (+ Start Start_7) (div Start_4 Start_6) (mod Start_9 Start_7)))
   (Start_9 Int (5 4 3 1 (- Start_2 Start_3) (* Start_8 Start) (div Start_7 Start_8) (mod Start_1 Start_1)))
   (Start_6 Int (0 5 (- Start_4) (+ Start_2 Start_3) (* Start_7 Start_6) (ite StartBool Start_2 Start_1)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_3) (or StartBool_3 StartBool) (< Start_9 Start_6) (<= Start_5 Start_1) (>= Start_4 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (abs (- (+ 4 x))) 2)))

(check-synth)
