(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_8 Int) (Start_7 Int) (StartBool_1 Bool) (Start_6 Int) (Start_3 Int) (Start_4 Int) (StartBool_2 Bool) (Start_5 Int) (Start_9 Int) (StartBool_3 Bool) (Start_10 Int))
  ((Start Int (1 5 4 (- Start) (- Start Start_1) (+ Start_2 Start_2) (mod Start_3 Start_1) (abs Start_2) (ite StartBool Start Start_3)))
   (StartBool Bool (false (< Start_4 Start_5)))
   (Start_1 Int (0 1 3 x 5 (- Start) (abs Start_8) (ite StartBool_2 Start_10 Start_9)))
   (Start_2 Int (2 (- Start_7) (- Start_5 Start_8) (* Start_3 Start_5) (mod Start_10 Start_8) (abs Start_7) (ite StartBool_1 Start_6 Start_8)))
   (Start_8 Int (3 (div Start_3 Start) (abs Start_8)))
   (Start_7 Int (1 0 (- Start_3 Start_8) (* Start_2 Start) (div Start_8 Start_3) (mod Start Start_4) (abs Start)))
   (StartBool_1 Bool (false true (not StartBool) (or StartBool_1 StartBool_1) (<= Start_5 Start_6) (>= Start_3 Start_1)))
   (Start_6 Int (x (- Start_7) (- Start Start_4) (+ Start_7 Start_4) (* Start_1 Start_7) (mod Start_4 Start_7) (abs Start_4) (ite StartBool_2 Start Start_5)))
   (Start_3 Int (x (- Start_1 Start_3) (* Start Start_2) (abs Start_4) (ite StartBool_1 Start_3 Start_1)))
   (Start_4 Int (y (- Start_5 Start_8) (div Start_4 Start_7) (mod Start_8 Start) (abs Start_9) (ite StartBool_2 Start_8 Start_3)))
   (StartBool_2 Bool (false true (not StartBool_2) (or StartBool_2 StartBool_1) (< Start_7 Start_6)))
   (Start_5 Int (x 1 y (- Start_7) (- Start_3 Start_4) (div Start Start_8)))
   (Start_9 Int (2 (- Start_9 Start_9) (* Start_7 Start) (ite StartBool_3 Start_4 Start_9)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_1) (<= Start_10 Start_10) (= Start_9 Start_7)))
   (Start_10 Int (3 (- Start_3) (+ Start_7 Start_5) (mod Start_6 Start_6) (ite StartBool_1 Start_4 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 2 (* x x))))

(check-synth)
