(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_7 Int) (Start_12 Int) (StartBool_1 Bool) (Start_2 Int) (StartBool_3 Bool) (Start_8 Int) (Start_1 Int) (Start_3 Int) (Start_4 Int) (Start_5 Int) (Start_6 Int) (Start_9 Int) (Start_10 Int) (Start_11 Int) (StartBool_2 Bool))
  ((Start Int (4 (- Start_1) (- Start Start) (* Start Start) (abs Start_2)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_3 StartBool_2) (or StartBool_2 StartBool) (< Start Start_11) (= Start_13 Start)))
   (Start_13 Int (2 (- Start_5 Start_10) (* Start_5 Start_6) (div Start_12 Start_4) (mod Start_4 Start_10) (ite StartBool_1 Start_7 Start_9)))
   (Start_7 Int (x (- Start_7 Start_9) (+ Start_6 Start_2) (* Start Start_10) (div Start_3 Start_12) (ite StartBool_3 Start_2 Start_3)))
   (Start_12 Int (5 (+ Start_3 Start_1)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_1) (< Start_8 Start_9) (<= Start_10 Start_4) (= Start_1 Start_10) (> Start_7 Start_9)))
   (Start_2 Int (x (- Start) (+ Start_2 Start_1) (div Start_2 Start_2) (mod Start_2 Start_1) (ite StartBool Start_2 Start)))
   (StartBool_3 Bool (false true (not StartBool_3) (or StartBool StartBool_1) (< Start_7 Start_3) (<= Start_6 Start_8)))
   (Start_8 Int (1 0 (- Start_1 Start_7) (+ Start_7 Start_1) (* Start_9 Start) (div Start_6 Start_3) (mod Start_2 Start_7) (abs Start_8)))
   (Start_1 Int (3 y 1 (- Start) (- Start_1 Start_3) (+ Start_3 Start_3) (* Start_3 Start_2) (div Start_2 Start_1) (mod Start Start_2) (abs Start_3)))
   (Start_3 Int (y (- Start Start_3) (+ Start_4 Start_2) (* Start_4 Start_3) (mod Start_2 Start_2) (abs Start_5)))
   (Start_4 Int (x y 5 (- Start_3) (- Start_6 Start_6) (+ Start Start_6) (* Start_6 Start_2) (ite StartBool Start_2 Start_1)))
   (Start_5 Int (2 y (- Start_1 Start_4) (* Start_4 Start_3) (div Start_5 Start_3)))
   (Start_6 Int (y 3 (- Start_6 Start) (div Start_3 Start_7) (abs Start_6) (ite StartBool_1 Start_6 Start_8)))
   (Start_9 Int (5 1 (- Start_9 Start_8) (+ Start_5 Start_2) (* Start_6 Start_8) (div Start_9 Start_2) (abs Start_1)))
   (Start_10 Int (4 2 y 1 (- Start_4) (- Start_6 Start_4) (div Start Start_11)))
   (Start_11 Int (3 (- Start_4) (* Start_2 Start_2) (div Start_1 Start_12) (mod Start_1 Start_11) (ite StartBool_2 Start_3 Start_11)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_2) (or StartBool StartBool_1) (= Start_1 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (div (+ y x) 4) 2)))

(check-synth)
