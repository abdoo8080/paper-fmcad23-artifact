(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_4 Bool) (Start_14 Int) (Start_1 Int) (StartBool_5 Bool) (Start_13 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_7 Int) (Start_8 Int) (Start_5 Int) (Start_3 Int) (Start_16 Int) (Start_12 Int) (Start_2 Int) (Start_9 Int) (Start_6 Int) (Start_11 Int) (Start_15 Int) (Start_4 Int) (Start_10 Int))
  ((Start Int (3 (- Start_1) (- Start_2 Start_2) (div Start_1 Start_1) (ite StartBool Start_3 Start_4)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_3 StartBool_3) (or StartBool_4 StartBool_4) (<= Start_4 Start_12) (>= Start_14 Start_13)))
   (StartBool_3 Bool (false true (or StartBool StartBool_5) (>= Start_15 Start_12) (> Start_13 Start_1)))
   (StartBool_4 Bool (true (< Start_9 Start_12) (<= Start_14 Start) (= Start_4 Start_9) (> Start_1 Start_7)))
   (Start_14 Int (4 y (mod Start_12 Start_13)))
   (Start_1 Int (4 3 0 x (div Start_7 Start_5) (ite StartBool_1 Start_7 Start_14)))
   (StartBool_5 Bool (false (not StartBool_1) (or StartBool StartBool_2) (> Start_15 Start_15)))
   (Start_13 Int (y (+ Start_12 Start_5) (div Start_2 Start_7)))
   (StartBool_2 Bool (true (not StartBool_2) (>= Start_3 Start_1)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (< Start_7 Start_4) (<= Start_3 Start_1)))
   (Start_7 Int (x (- Start Start_2) (abs Start_5) (ite StartBool_2 Start_5 Start_4)))
   (Start_8 Int (5 2 3 0 4 (- Start_10) (- Start_3 Start_5) (+ Start_7 Start_11) (abs Start_3) (ite StartBool_2 Start_4 Start_11)))
   (Start_5 Int (x 4 (* Start_4 Start_1) (abs Start_5) (ite StartBool_1 Start_2 Start_7)))
   (Start_3 Int (5 x 1 2 0 (- Start_6 Start_5) (+ Start_2 Start_4) (div Start_2 Start_4)))
   (Start_16 Int (x (- Start_11 Start_12) (abs Start) (ite StartBool_4 Start_9 Start_12)))
   (Start_12 Int (x (mod Start_3 Start_2) (abs Start_1)))
   (Start_2 Int (4 y 0 (* Start_8 Start_7) (div Start_6 Start_9) (mod Start_1 Start_1) (abs Start_4)))
   (Start_9 Int (2 3 (- Start_1 Start_5) (div Start_5 Start_1) (ite StartBool Start_6 Start_7)))
   (Start_6 Int (y (- Start_6 Start) (ite StartBool_2 Start_5 Start_7)))
   (Start_11 Int (0 4 1 (- Start_1) (mod Start_4 Start_5)))
   (Start_15 Int (x 5 (- Start_16) (- Start_3 Start) (* Start_14 Start) (div Start_10 Start_12) (mod Start_14 Start_11) (ite StartBool_4 Start_16 Start_14)))
   (Start_4 Int (x (- Start_5 Start) (+ Start_6 Start_1) (mod Start Start_1) (ite StartBool_1 Start_6 Start_1)))
   (Start_10 Int (x (- Start_9 Start_12) (+ Start_5 Start_2) (div Start_13 Start) (abs Start_11) (ite StartBool_1 Start_7 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (+ 5 5) 0)))

(check-synth)
