(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (StartBool_6 Bool) (Start_17 Int) (Start_15 Int) (Start_13 Int) (StartBool_5 Bool) (StartBool_3 Bool) (Start_7 Int) (Start_9 Int) (StartBool_7 Bool) (Start_14 Int) (Start_11 Int) (StartBool_1 Bool) (Start_12 Int) (Start_6 Int) (Start_19 Int) (Start_16 Int) (Start_2 Int) (Start_8 Int) (Start_5 Int) (Start_10 Int) (Start_3 Int) (Start_1 Int) (Start_4 Int) (StartBool_2 Bool) (StartBool_4 Bool))
  ((Start Int (y (- Start) (- Start_1 Start_2) (div Start Start_1) (abs Start_2) (ite StartBool Start Start)))
   (StartBool Bool (true false (not StartBool_1) (or StartBool_5 StartBool_6) (< Start_11 Start_8) (<= Start_11 Start_17)))
   (Start_18 Int (5 (- Start_13) (- Start_11 Start_17) (+ Start_7 Start_19) (div Start_15 Start_7)))
   (StartBool_6 Bool (false (and StartBool_1 StartBool_6) (or StartBool_4 StartBool_7) (< Start_17 Start_18) (<= Start_17 Start_7) (>= Start_16 Start_19) (> Start_4 Start_1)))
   (Start_17 Int (0 (- Start_5 Start_16) (* Start_16 Start_8) (ite StartBool_4 Start_5 Start_10)))
   (Start_15 Int (4 (- Start_16 Start_10) (+ Start_15 Start_5) (* Start_1 Start_3) (div Start_2 Start_6) (mod Start_6 Start)))
   (Start_13 Int (1 (- Start_1) (div Start_1 Start_7) (mod Start_14 Start_5) (abs Start_14) (ite StartBool_3 Start_15 Start_13)))
   (StartBool_5 Bool (false (<= Start_4 Start_8) (= Start_7 Start_12) (>= Start_5 Start_1)))
   (StartBool_3 Bool (true false (not StartBool_1) (or StartBool_5 StartBool_2)))
   (Start_7 Int (y 4 (- Start_5) (mod Start_8 Start_1) (ite StartBool_1 Start_9 Start_9)))
   (Start_9 Int (2 3 (+ Start_1 Start_1) (* Start_6 Start_4)))
   (StartBool_7 Bool (true (not StartBool) (< Start_6 Start_11) (<= Start_6 Start_8) (= Start_4 Start_15) (>= Start_8 Start_16)))
   (Start_14 Int (2 x (- Start_10) (- Start_6 Start_4) (+ Start_13 Start_10) (mod Start_4 Start_8) (abs Start_13)))
   (Start_11 Int (3 4 (- Start_9) (- Start_11 Start) (+ Start_3 Start_8) (* Start_4 Start_11) (div Start_6 Start_11) (abs Start_9) (ite StartBool_4 Start Start_11)))
   (StartBool_1 Bool (false true (or StartBool_1 StartBool_1) (< Start_4 Start) (> Start_4 Start_3)))
   (Start_12 Int (y (- Start_1) (- Start_8 Start_8) (+ Start_1 Start_7) (* Start_4 Start_13) (abs Start_5) (ite StartBool_1 Start_4 Start_10)))
   (Start_6 Int (0 5 (* Start_5 Start_4) (ite StartBool_1 Start_3 Start_3)))
   (Start_19 Int (x 1 3 4 0))
   (Start_16 Int (5 4 1 2 0 x y 3 (- Start_1) (mod Start_10 Start_2)))
   (Start_2 Int (3 (- Start_3) (- Start_4 Start_5) (+ Start_4 Start_5) (* Start Start_6) (mod Start_7 Start_7)))
   (Start_8 Int (2 5 (- Start_7) (- Start_7 Start_4) (* Start_5 Start_8) (div Start_2 Start_1)))
   (Start_5 Int (1 4 (- Start_2) (- Start_2 Start_8) (+ Start_10 Start_2)))
   (Start_10 Int (1 5 2 y (- Start_8 Start_5) (div Start_1 Start_8) (abs Start_10)))
   (Start_3 Int (0 (- Start_6 Start) (div Start_3 Start_6) (mod Start_7 Start_5) (ite StartBool_2 Start_4 Start_6)))
   (Start_1 Int (5 y (- Start_12) (ite StartBool_5 Start_10 Start_4)))
   (Start_4 Int (4 (- Start_5 Start_10) (* Start_3 Start_10) (mod Start_2 Start_3) (ite StartBool_1 Start_7 Start_9)))
   (StartBool_2 Bool (false true (not StartBool_3) (or StartBool_3 StartBool_4) (<= Start_5 Start_1) (= Start_5 Start_3) (>= Start_4 Start_4)))
   (StartBool_4 Bool (true (<= Start_3 Start_3) (= Start_8 Start_7) (>= Start_8 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod 2 0))))

(check-synth)
