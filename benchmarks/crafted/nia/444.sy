(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_11 Bool) (Start_1 Int) (StartBool_2 Bool) (StartBool_10 Bool) (StartBool_7 Bool) (Start_2 Int) (Start_6 Int) (Start_3 Int) (Start_7 Int) (StartBool_6 Bool) (StartBool_4 Bool) (Start_5 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_10 Int) (StartBool_8 Bool) (StartBool_9 Bool) (Start_8 Int) (Start_4 Int) (StartBool_5 Bool) (Start_9 Int))
  ((Start Int (3 (- Start) (- Start Start_1) (+ Start_2 Start_1) (* Start_1 Start_2) (abs Start_3) (ite StartBool Start_3 Start)))
   (StartBool Bool (true false (not StartBool_11) (or StartBool_3 StartBool_6) (<= Start_7 Start_9) (>= Start_9 Start_4) (> Start_10 Start_3)))
   (StartBool_11 Bool (true (and StartBool_5 StartBool_9) (or StartBool StartBool_4) (<= Start_6 Start_2) (= Start_6 Start_6)))
   (Start_1 Int (4 (- Start_2) (+ Start_5 Start_3) (div Start_1 Start_4) (mod Start Start_4) (abs Start_8)))
   (StartBool_2 Bool (true false (or StartBool_3 StartBool_6) (< Start_5 Start_6) (<= Start_6 Start_6) (= Start_7 Start_2) (> Start_4 Start_9)))
   (StartBool_10 Bool (false true (<= Start_7 Start_8) (>= Start_5 Start_1)))
   (StartBool_7 Bool (false true (not StartBool_2) (or StartBool StartBool_5) (< Start_8 Start_3)))
   (Start_2 Int (y x 2 0 (- Start_2) (+ Start_4 Start_1) (div Start_1 Start) (mod Start_1 Start) (ite StartBool Start_2 Start_5)))
   (Start_6 Int (0 (* Start_1 Start_3) (abs Start)))
   (Start_3 Int (0 2 (+ Start_2 Start_2) (mod Start_1 Start_3) (ite StartBool Start_3 Start_3)))
   (Start_7 Int (y (- Start_6) (- Start_2 Start_6) (+ Start_8 Start_8) (* Start_7 Start_4) (abs Start_1) (ite StartBool_6 Start Start_6)))
   (StartBool_6 Bool (false (not StartBool_6) (and StartBool_7 StartBool_8) (<= Start_2 Start_7) (= Start_5 Start_1) (>= Start_3 Start_9) (> Start Start_6)))
   (StartBool_4 Bool (true (not StartBool_2) (and StartBool_10 StartBool_8) (>= Start_3 Start_4)))
   (Start_5 Int (x (- Start_4 Start_5) (+ Start_2 Start_3) (* Start_3 Start_3) (mod Start_2 Start_3) (ite StartBool_1 Start_4 Start)))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (or StartBool_3 StartBool) (= Start_5 Start_5)))
   (StartBool_3 Bool (false true (not StartBool_4) (or StartBool_5 StartBool_1) (<= Start_4 Start) (= Start_5 Start_3) (>= Start_6 Start_6) (> Start_4 Start_6)))
   (Start_10 Int (3 (+ Start_3 Start_10) (* Start_1 Start_10)))
   (StartBool_8 Bool (true false (not StartBool_3) (and StartBool StartBool_9) (< Start_8 Start_3) (<= Start_1 Start_2) (= Start Start_1) (> Start_7 Start_6)))
   (StartBool_9 Bool (false true (not StartBool_2) (or StartBool StartBool_5)))
   (Start_8 Int (5 2 (+ Start_7 Start_2) (div Start_8 Start_4) (mod Start_5 Start_1)))
   (Start_4 Int (0 4 (* Start_4 Start_5) (div Start Start_4)))
   (StartBool_5 Bool (false true (not StartBool_5) (and StartBool_6 StartBool) (or StartBool_6 StartBool_6) (= Start_7 Start) (>= Start_4 Start_2)))
   (Start_9 Int (4 (- Start_7) (- Start Start_9) (+ Start_6 Start_6) (* Start_2 Start_3) (div Start_7 Start_3) (mod Start_5 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (* y y) x)))

(check-synth)
