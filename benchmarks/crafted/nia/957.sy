(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (StartBool_5 Bool) (StartBool_6 Bool) (Start_3 Int) (Start_18 Int) (Start_8 Int) (Start_7 Int) (Start_17 Int) (StartBool_9 Bool) (StartBool_4 Bool) (Start_6 Int) (StartBool_8 Bool) (Start_5 Int) (Start_10 Int) (StartBool_1 Bool) (StartBool_7 Bool) (Start_2 Int) (StartBool_10 Bool) (Start_12 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_15 Int) (Start_14 Int) (Start_4 Int) (Start_16 Int) (Start_11 Int) (Start_1 Int) (Start_13 Int))
  ((Start Int (1 (- Start_1 Start_1) (+ Start_2 Start_1) (* Start_2 Start) (div Start Start) (mod Start Start_2) (abs Start_1) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (true (not StartBool_7) (<= Start_8 Start_16) (= Start_7 Start_9) (> Start_13 Start_14)))
   (Start_9 Int (2 4 (- Start_5) (* Start_6 Start_3) (div Start Start_1) (mod Start Start_8) (ite StartBool_1 Start_10 Start_9)))
   (StartBool_5 Bool (false true (< Start_8 Start_2) (<= Start_2 Start_5) (= Start_4 Start_11)))
   (StartBool_6 Bool (true false (not StartBool_4) (and StartBool_7 StartBool_8) (< Start Start_1) (<= Start Start) (= Start_3 Start_9)))
   (Start_3 Int (x (- Start_6) (div Start_13 Start_7) (mod Start Start_6) (abs Start_7) (ite StartBool_10 Start_1 Start)))
   (Start_18 Int (5 1 (- Start_7) (* Start_2 Start_9) (div Start_18 Start) (ite StartBool_10 Start_8 Start_4)))
   (Start_8 Int (5 3 (- Start_4) (- Start_6 Start_2) (+ Start_7 Start_3) (* Start_6 Start_9) (abs Start_1) (ite StartBool Start_4 Start_5)))
   (Start_7 Int (4 3 (- Start_2 Start_3) (+ Start_8 Start_2) (mod Start_7 Start_1) (abs Start_4)))
   (Start_17 Int (2 5 (- Start_18 Start_4) (+ Start_14 Start_4)))
   (StartBool_9 Bool (false true (not StartBool_5) (and StartBool_10 StartBool_8) (or StartBool_7 StartBool_7) (< Start_8 Start) (<= Start_4 Start_5)))
   (StartBool_4 Bool (true false (and StartBool_1 StartBool_4) (or StartBool_5 StartBool_6) (<= Start_5 Start_1) (= Start_7 Start_1)))
   (Start_6 Int (0 5 3 (- Start_4) (- Start_3 Start_4) (+ Start_1 Start_1) (mod Start_4 Start_1) (ite StartBool Start_6 Start_6)))
   (StartBool_8 Bool (false true (not StartBool_9) (or StartBool_5 StartBool_5)))
   (Start_5 Int (5 2 y x 3 (- Start_2) (- Start_12 Start_13) (* Start_2 Start_11) (mod Start_10 Start_13) (abs Start_11) (ite StartBool_8 Start_2 Start_12)))
   (Start_10 Int (5 y (+ Start_9 Start_6) (ite StartBool_6 Start_9 Start_10)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (or StartBool_2 StartBool_1) (< Start_1 Start_3) (= Start_4 Start_3) (> Start_1 Start_4)))
   (StartBool_7 Bool (false (not StartBool_5) (or StartBool_4 StartBool_8) (< Start_4 Start_5)))
   (Start_2 Int (y x (- Start_4 Start_7) (+ Start_11 Start_11) (* Start_5 Start_13) (div Start_2 Start_2)))
   (StartBool_10 Bool (true (not StartBool) (and StartBool_6 StartBool_8) (or StartBool_9 StartBool_4) (< Start_9 Start_8) (= Start_11 Start_11) (> Start_7 Start_1)))
   (Start_12 Int (x (- Start_10) (+ Start_9 Start_9) (* Start_3 Start_10) (abs Start_8)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool) (< Start_2 Start_4) (>= Start_4 Start_5) (> Start_6 Start)))
   (StartBool_2 Bool (false true (= Start_12 Start_3) (>= Start_13 Start_11) (> Start_13 Start_5)))
   (Start_15 Int (4 3 0 5 x (- Start_14 Start_1) (* Start_11 Start_16) (abs Start_5) (ite StartBool_6 Start_7 Start_10)))
   (Start_14 Int (5 (+ Start_12 Start_5) (* Start_14 Start_14) (div Start_15 Start_11) (mod Start_6 Start_9) (ite StartBool Start_13 Start_15)))
   (Start_4 Int (0 x 3 (- Start_5) (- Start Start_4) (div Start_1 Start_3) (mod Start_3 Start_4) (abs Start_5) (ite StartBool_3 Start Start_1)))
   (Start_16 Int (0 (- Start_2 Start_6) (+ Start_7 Start_15) (abs Start_17) (ite StartBool_1 Start_5 Start_8)))
   (Start_11 Int (0 2 3 5 4 (- Start_12 Start_1) (div Start_5 Start_5) (abs Start_6) (ite StartBool_10 Start_6 Start_6)))
   (Start_1 Int (3 y 0 1 4 (- Start_11) (+ Start_2 Start_14) (* Start_5 Start_5) (div Start_14 Start_10)))
   (Start_13 Int (y 2 (+ Start_8 Start_1) (div Start_7 Start_3) (mod Start_6 Start_6) (abs Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* 2 y))))

(check-synth)
