(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_2 Int) (Start_4 Int) (Start_1 Int) (Start_7 Int) (Start_17 Int) (Start_16 Int) (StartBool_3 Bool) (Start_11 Int) (Start_3 Int) (Start_15 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_9 Int) (Start_12 Int) (Start_6 Int) (Start_8 Int) (Start_13 Int) (StartBool_2 Bool) (Start_5 Int) (Start_10 Int) (Start_14 Int))
  ((Start Int (3 x (- Start_1) (- Start_1 Start) (* Start_2 Start_1) (mod Start Start_1) (abs Start) (ite StartBool Start_3 Start)))
   (StartBool Bool (true (and StartBool StartBool_2) (or StartBool StartBool) (= Start_11 Start_3)))
   (Start_18 Int (0 2 (- Start_4) (- Start_15 Start_18) (+ Start_5 Start_11) (* Start_5 Start_2) (div Start_11 Start_18) (mod Start_13 Start_3)))
   (Start_2 Int (y 5 1 (ite StartBool Start_6 Start_3)))
   (Start_4 Int (2 1 x (- Start_6) (* Start_4 Start_17)))
   (Start_1 Int (y 4 (+ Start_12 Start_10) (* Start Start_4) (div Start_17 Start_6) (ite StartBool_4 Start_18 Start_16)))
   (Start_7 Int (4 (* Start_17 Start_5) (div Start_7 Start_5) (mod Start_2 Start_16)))
   (Start_17 Int (0 2 y 4 3 5 (- Start_4 Start_5) (+ Start_2 Start_14) (* Start_3 Start_3) (abs Start_13) (ite StartBool_3 Start_2 Start_17)))
   (Start_16 Int (3 1 (- Start_1) (- Start_1 Start_15) (* Start_3 Start_13) (ite StartBool_2 Start_7 Start_13)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool_3) (<= Start_9 Start_13) (= Start_16 Start_6)))
   (Start_11 Int (0 (- Start_3) (- Start_6 Start_11) (* Start_11 Start_8) (mod Start_3 Start_7) (ite StartBool_1 Start_1 Start_12)))
   (Start_3 Int (2 (- Start_3) (+ Start_1 Start_1) (* Start Start_4) (div Start_5 Start_2) (mod Start_3 Start) (abs Start) (ite StartBool Start_4 Start_5)))
   (Start_15 Int (y 0 (- Start_1 Start_13) (+ Start_6 Start_8) (mod Start_10 Start_13) (ite StartBool_3 Start_6 Start_14)))
   (StartBool_4 Bool (false (and StartBool StartBool_1) (or StartBool_3 StartBool) (< Start_18 Start) (<= Start_7 Start_18) (>= Start_3 Start_6) (> Start_16 Start_15)))
   (StartBool_1 Bool (true false (or StartBool StartBool_2) (< Start Start_12) (<= Start_11 Start_13) (= Start Start_3) (>= Start_5 Start_13) (> Start_3 Start_12)))
   (Start_9 Int (y (- Start_8 Start_3) (+ Start_10 Start_2) (* Start_4 Start_2) (mod Start_2 Start_11)))
   (Start_12 Int (x (- Start_5) (+ Start_7 Start_9) (mod Start_7 Start_11)))
   (Start_6 Int (0 x 3 (* Start_4 Start_3) (mod Start_16 Start_16) (abs Start_16) (ite StartBool_3 Start_10 Start_13)))
   (Start_8 Int (1 (- Start_1) (- Start_6 Start_3) (+ Start_5 Start_9) (ite StartBool Start_7 Start_9)))
   (Start_13 Int (4 (- Start_6 Start_11) (+ Start_4 Start) (* Start_12 Start_6)))
   (StartBool_2 Bool (true false (and StartBool StartBool_1) (= Start Start_4) (>= Start_12 Start_9)))
   (Start_5 Int (3 1 4 0 (- Start_6) (- Start Start_2) (+ Start_7 Start_1) (mod Start_5 Start_5) (ite StartBool Start_2 Start_8)))
   (Start_10 Int (1 4 5 0 y (- Start_7 Start_14) (+ Start Start_11) (* Start_4 Start_3) (div Start_3 Start_14) (mod Start Start_5) (abs Start_6)))
   (Start_14 Int (0 (- Start) (- Start_1 Start_15) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ x (+ 5 (div 0 x)))))

(check-synth)
