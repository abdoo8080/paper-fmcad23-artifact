(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_9 Int) (StartBool_2 Bool) (Start_8 Int) (Start_5 Int) (StartBool_1 Bool) (Start_4 Int) (Start_2 Int) (Start_3 Int) (Start_7 Int) (Start_1 Int))
  ((Start Int (4 5 (+ Start Start_1) (* Start_1 Start_1) (mod Start Start) (abs Start_1)))
   (StartBool Bool (false (or StartBool StartBool_1) (< Start_2 Start_1) (<= Start_4 Start_1) (= Start_4 Start)))
   (Start_6 Int (5 3 (+ Start_7 Start) (div Start_6 Start_6) (mod Start_8 Start_1)))
   (Start_9 Int (4 (- Start Start_2) (* Start_3 Start_6) (ite StartBool_1 Start_6 Start_6)))
   (StartBool_2 Bool (false (<= Start_2 Start_4) (= Start_6 Start) (> Start_6 Start_2)))
   (Start_8 Int (0 x y 5 (+ Start_7 Start_7) (* Start_5 Start_4) (mod Start_4 Start_9) (abs Start_2)))
   (Start_5 Int (0 (- Start_5 Start_1) (* Start_6 Start_7) (div Start_8 Start_7) (mod Start_1 Start) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool StartBool_2) (<= Start Start_5) (>= Start_2 Start)))
   (Start_4 Int (3 1 (- Start) (div Start_3 Start_1) (mod Start_3 Start_3)))
   (Start_2 Int (1 0 x (- Start) (- Start_4 Start_1)))
   (Start_3 Int (5 4 1 y (- Start_1) (- Start_2 Start_3) (* Start Start_1) (abs Start)))
   (Start_7 Int (2 (div Start_1 Start_8) (ite StartBool Start_3 Start_3)))
   (Start_1 Int (0 2 5 4 (* Start_2 Start_3) (div Start_1 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (+ (- (- x y) 3) 2) 4)))

(check-synth)
