(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (StartBool_3 Bool) (Start_17 Int) (Start_16 Int) (Start_13 Int) (Start_14 Int) (Start_1 Int) (Start_3 Int) (StartBool_1 Bool) (Start_9 Int) (StartBool_2 Bool) (Start_7 Int) (Start_5 Int) (Start_6 Int) (Start_2 Int) (Start_8 Int) (Start_15 Int) (Start_11 Int) (Start_10 Int) (Start_4 Int) (Start_12 Int))
  ((Start Int (0 (- Start_1) (- Start_1 Start) (+ Start_1 Start) (* Start Start) (div Start_2 Start_1) (mod Start_2 Start)))
   (StartBool Bool (true false (not StartBool) (and StartBool_1 StartBool) (< Start Start_17) (>= Start_15 Start_6)))
   (Start_18 Int (y (+ Start_6 Start_6) (div Start_6 Start_5) (ite StartBool_2 Start_12 Start_8)))
   (StartBool_3 Bool (true (and StartBool StartBool_2) (or StartBool_1 StartBool) (< Start_5 Start_6) (= Start_9 Start_15) (>= Start_10 Start)))
   (Start_17 Int (3 (div Start_13 Start) (abs Start_10)))
   (Start_16 Int (5 (- Start_3) (- Start_17 Start_8) (abs Start_14)))
   (Start_13 Int (2 1 (- Start_14) (- Start_10 Start_8) (+ Start_11 Start_12) (mod Start_1 Start_12) (abs Start_8) (ite StartBool_2 Start_9 Start_14)))
   (Start_14 Int (4 3 5 (- Start_10) (* Start_3 Start) (mod Start_10 Start_12) (abs Start_5)))
   (Start_1 Int (4 2 (div Start_18 Start_17) (ite StartBool Start_14 Start)))
   (Start_3 Int (1 5 4 y 2 3 (- Start) (abs Start_1)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_2 StartBool_2) (or StartBool_2 StartBool) (< Start_1 Start_4)))
   (Start_9 Int (5 4 (- Start_10) (* Start_11 Start_1) (div Start_4 Start_8) (abs Start_7) (ite StartBool_2 Start Start_8)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_1) (< Start_4 Start_4) (<= Start_3 Start_2) (>= Start Start_1) (> Start_4 Start_5)))
   (Start_7 Int (1 (- Start_10) (* Start_3 Start_1) (ite StartBool_2 Start_10 Start_12)))
   (Start_5 Int (5 y (- Start_6) (- Start_5 Start_5) (* Start_3 Start) (div Start_6 Start_2) (mod Start_1 Start_7) (abs Start_8) (ite StartBool_2 Start_8 Start_3)))
   (Start_6 Int (4 3 0 1 5 (+ Start_9 Start_5) (* Start_10 Start_15) (abs Start_16)))
   (Start_2 Int (2 (- Start_2) (* Start_1 Start_1) (div Start_2 Start) (abs Start_2) (ite StartBool_1 Start_3 Start)))
   (Start_8 Int (x (- Start_1) (+ Start_3 Start_9) (div Start_8 Start_3) (mod Start_7 Start_8) (abs Start_8)))
   (Start_15 Int (2 0 (- Start_14) (- Start_12 Start_7) (+ Start_2 Start_13) (div Start_5 Start_3) (abs Start_1) (ite StartBool_1 Start_11 Start_8)))
   (Start_11 Int (2 1 x 0 5 (- Start_7) (- Start_6 Start_2) (+ Start_3 Start) (* Start Start_1) (ite StartBool Start_3 Start_10)))
   (Start_10 Int (5 (- Start_5) (mod Start_7 Start_7) (abs Start_5)))
   (Start_4 Int (y (- Start Start_3) (* Start_1 Start_1) (div Start_2 Start_4)))
   (Start_12 Int (4 (- Start_8) (- Start_4 Start_13) (* Start_12 Start_11) (div Start_14 Start_8) (abs Start_11) (ite StartBool_2 Start_13 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod x y))))

(check-synth)
