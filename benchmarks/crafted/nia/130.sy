(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_2 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_3 Int) (Start_6 Int) (Start_5 Int) (Start_8 Int) (Start_2 Int) (Start_7 Int) (Start_1 Int) (Start_9 Int))
  ((Start Int (2 0 (- Start Start_1) (* Start_1 Start_2) (div Start_2 Start_3) (abs Start_1) (ite StartBool_1 Start_3 Start_2)))
   (StartBool Bool (true false (or StartBool_3 StartBool_2) (< Start_8 Start_9) (>= Start_4 Start_9) (> Start_8 Start_9)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_2) (<= Start_8 Start_2) (= Start_6 Start_3)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_1 StartBool_1) (< Start_2 Start_1) (> Start Start_2)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (<= Start_3 Start_2) (> Start_2 Start_1)))
   (Start_4 Int (0 2 (- Start_2) (- Start_4 Start_5) (+ Start_6 Start_1) (* Start_1 Start_4) (mod Start_5 Start_8)))
   (Start_3 Int (4 y 2 (- Start_2) (- Start_1 Start_4) (+ Start Start_5) (div Start_4 Start_2) (mod Start_4 Start_6)))
   (Start_6 Int (1 (- Start_3 Start_7) (* Start_2 Start_8) (div Start Start_8) (abs Start_2) (ite StartBool_2 Start_4 Start_1)))
   (Start_5 Int (5 (- Start_3) (* Start_2 Start_2) (div Start_7 Start_5)))
   (Start_8 Int (2 5 0 x (- Start_6) (+ Start_6 Start_3) (* Start Start_5) (mod Start_5 Start_5) (ite StartBool_2 Start_6 Start)))
   (Start_2 Int (4 0 (- Start_3) (- Start_7 Start_8) (+ Start_2 Start_7) (abs Start_1)))
   (Start_7 Int (5 (- Start_5) (- Start_4 Start_3) (+ Start_5 Start_4) (mod Start_4 Start_3) (abs Start_7) (ite StartBool_1 Start_8 Start_8)))
   (Start_1 Int (2 (- Start Start_4) (+ Start_8 Start_5) (* Start_5 Start) (mod Start_2 Start_6) (abs Start_8) (ite StartBool_2 Start_5 Start_3)))
   (Start_9 Int (5 (- Start Start_3) (* Start_8 Start_1) (div Start_5 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (+ 2 (* 2 y)) (mod 1 (- y)))))

(check-synth)
