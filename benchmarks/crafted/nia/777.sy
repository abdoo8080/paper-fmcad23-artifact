(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_1 Int) (Start_9 Int) (Start_5 Int) (Start_8 Int) (Start_2 Int) (Start_6 Int) (Start_10 Int) (StartBool_1 Bool) (Start_7 Int) (Start_3 Int) (StartBool_2 Bool))
  ((Start Int (1 (- Start) (+ Start Start) (* Start Start) (abs Start)))
   (StartBool Bool (false true (not StartBool) (< Start Start) (= Start Start_1) (>= Start_1 Start) (> Start_2 Start_1)))
   (Start_4 Int (1 (- Start_4 Start_2) (+ Start_2 Start_2) (ite StartBool_1 Start_2 Start_7)))
   (Start_1 Int (1 5 4 (- Start_4) (- Start Start_5) (div Start_8 Start_3) (abs Start_5) (ite StartBool Start_1 Start_5)))
   (Start_9 Int (1 5 y (* Start_10 Start_1) (abs Start_1) (ite StartBool_2 Start_7 Start_1)))
   (Start_5 Int (5 (- Start_2 Start_2) (+ Start_5 Start_5) (* Start_4 Start_5) (mod Start_3 Start) (abs Start_5) (ite StartBool Start_6 Start_2)))
   (Start_8 Int (0 2 (- Start_5) (- Start_9 Start_2) (* Start Start) (abs Start_8) (ite StartBool Start_7 Start)))
   (Start_2 Int (5 (- Start_3 Start_3) (* Start_4 Start) (mod Start_5 Start_4)))
   (Start_6 Int (4 0 5 (- Start_5) (+ Start_6 Start) (ite StartBool_1 Start_1 Start)))
   (Start_10 Int (5 (* Start_3 Start_8) (div Start_2 Start_9) (abs Start_9)))
   (StartBool_1 Bool (false true (or StartBool StartBool_1) (= Start_1 Start_2) (>= Start_5 Start_4) (> Start_3 Start)))
   (Start_7 Int (5 4 (- Start) (+ Start_7 Start_1) (* Start_1 Start) (div Start_3 Start_2) (mod Start Start_4) (abs Start_4)))
   (Start_3 Int (3 0 (ite StartBool Start_7 Start_1)))
   (StartBool_2 Bool (false (not StartBool_1) (or StartBool_2 StartBool_1) (< Start_10 Start_7) (= Start_3 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (* 3 x) (mod 3 x))))

(check-synth)
