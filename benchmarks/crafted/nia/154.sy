(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_13 Int) (Start_11 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_9 Int) (StartBool_6 Bool) (Start_7 Int) (Start_16 Int) (Start_8 Int) (StartBool_2 Bool) (Start_19 Int) (Start_12 Int) (Start_21 Int) (Start_10 Int) (Start_4 Int) (Start_1 Int) (Start_2 Int) (Start_14 Int) (StartBool_5 Bool) (Start_6 Int) (Start_5 Int) (StartBool_3 Bool) (Start_18 Int) (Start_15 Int) (Start_17 Int) (Start_3 Int) (Start_20 Int))
  ((Start Int (5 (div Start_1 Start) (mod Start_1 Start) (ite StartBool Start Start)))
   (StartBool Bool (true false (and StartBool_3 StartBool_6) (or StartBool_4 StartBool_3) (<= Start_17 Start_19) (= Start_5 Start_20) (>= Start_11 Start_20)))
   (StartBool_7 Bool (true false (or StartBool_4 StartBool_1) (<= Start_16 Start_15) (= Start_13 Start_12) (> Start_10 Start_6)))
   (Start_13 Int (5 (- Start_6 Start_3) (* Start_14 Start_2) (mod Start_3 Start) (abs Start_10)))
   (Start_11 Int (0 2 x y (- Start_7) (- Start_7 Start_7) (+ Start_1 Start_12) (* Start_2 Start_1) (div Start_11 Start_2) (abs Start_1) (ite StartBool Start Start_3)))
   (StartBool_4 Bool (true false (or StartBool StartBool_3) (= Start Start_10) (>= Start_4 Start_10)))
   (StartBool_1 Bool (true false (or StartBool StartBool) (< Start Start_4) (= Start Start) (>= Start Start) (> Start_4 Start_2)))
   (Start_9 Int (4 5 1 (- Start_6) (- Start_4 Start_8) (* Start_2 Start_2) (div Start_3 Start_8) (mod Start_3 Start_10) (abs Start) (ite StartBool_3 Start_6 Start)))
   (StartBool_6 Bool (false (and StartBool_2 StartBool_7) (< Start_9 Start_15) (<= Start_9 Start_1)))
   (Start_7 Int (x y 2 (- Start_1) (- Start_5 Start_8) (+ Start_8 Start) (div Start Start_8) (abs Start_9) (ite StartBool_4 Start_2 Start_1)))
   (Start_16 Int (5 4 (abs Start_18)))
   (Start_8 Int (y (- Start_7) (- Start_4 Start_11) (+ Start_1 Start_13) (* Start_11 Start_8) (abs Start_13)))
   (StartBool_2 Bool (true (not StartBool_3) (<= Start_5 Start_4) (= Start_1 Start_6) (>= Start_7 Start_5)))
   (Start_19 Int (2 (- Start_21 Start_21) (mod Start_19 Start_9)))
   (Start_12 Int (4 (- Start_7) (- Start_2 Start_4) (mod Start_2 Start_6) (abs Start_8)))
   (Start_21 Int (3 (- Start_10) (+ Start_6 Start_17) (mod Start_7 Start_5)))
   (Start_10 Int (0 x (- Start_1) (+ Start_11 Start_7) (* Start_3 Start_4) (abs Start)))
   (Start_4 Int (y (+ Start Start_4) (* Start_1 Start_3) (mod Start_4 Start_4) (ite StartBool_2 Start Start_4)))
   (Start_1 Int (0 1 (- Start_1) (- Start_1 Start_1) (* Start_2 Start_1) (div Start_3 Start_2) (mod Start_3 Start_3) (abs Start) (ite StartBool_1 Start Start_1)))
   (Start_2 Int (y (* Start_8 Start_13) (abs Start_6)))
   (Start_14 Int (x (mod Start_8 Start_1) (abs Start_10)))
   (StartBool_5 Bool (true (>= Start_15 Start_2)))
   (Start_6 Int (4 1 (- Start) (- Start_5 Start_12) (div Start_14 Start_13) (mod Start_4 Start_11)))
   (Start_5 Int (0 2 (- Start_8 Start_2)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool StartBool_4) (or StartBool_5 StartBool_5) (< Start_9 Start_9)))
   (Start_18 Int (x (- Start_18 Start_1) (+ Start_3 Start_4)))
   (Start_15 Int (x 2 (- Start_14 Start_9) (+ Start Start_12) (div Start_3 Start_16) (ite StartBool_4 Start_17 Start_4)))
   (Start_17 Int (3 (- Start_9) (- Start_16 Start_1) (+ Start_9 Start_5) (* Start_11 Start_17) (mod Start Start_10)))
   (Start_3 Int (2 (- Start_17 Start_6) (* Start_17 Start_12)))
   (Start_20 Int (0 1 5 x 4 (- Start_5) (+ Start_3 Start_17) (* Start_6 Start_20) (div Start_3 Start_10) (mod Start_16 Start) (abs Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- 4) 0)))

(check-synth)
