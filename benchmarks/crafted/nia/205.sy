(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_17 Int) (StartBool_5 Bool) (Start_15 Int) (Start_8 Int) (Start_4 Int) (Start_14 Int) (Start_5 Int) (Start_3 Int) (Start_7 Int) (Start_2 Int) (StartBool_3 Bool) (Start_9 Int) (Start_11 Int) (Start_16 Int) (StartBool_4 Bool) (StartBool_2 Bool) (StartBool_1 Bool) (Start_10 Int) (Start_12 Int) (Start_6 Int) (Start_13 Int))
  ((Start Int (3 x (- Start) (* Start_1 Start_1) (mod Start_1 Start_2) (abs Start_2)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool StartBool) (< Start_14 Start_1) (<= Start_11 Start_12)))
   (Start_1 Int (3 (* Start_15 Start_12) (mod Start_3 Start) (abs Start_3)))
   (Start_17 Int (4 2 (- Start_17) (- Start_6 Start_8) (div Start_7 Start_17) (ite StartBool_1 Start_13 Start_17)))
   (StartBool_5 Bool (false (< Start_5 Start) (<= Start_11 Start_15)))
   (Start_15 Int (x 4 (+ Start_7 Start_1) (div Start_2 Start_5) (mod Start_8 Start_6) (abs Start_4) (ite StartBool_5 Start_10 Start_3)))
   (Start_8 Int (y (- Start_11) (* Start Start_5) (div Start_14 Start_1) (ite StartBool Start_4 Start_12)))
   (Start_4 Int (x (- Start_1) (div Start_8 Start_12) (ite StartBool_2 Start_7 Start_17)))
   (Start_14 Int (5 y (+ Start_4 Start_11) (ite StartBool_1 Start_12 Start_12)))
   (Start_5 Int (5 (* Start Start_1) (div Start Start) (mod Start_1 Start_6) (ite StartBool Start_6 Start_4)))
   (Start_3 Int (1 (- Start_4) (- Start_2 Start_4) (+ Start_5 Start_5) (* Start_1 Start_3) (div Start_4 Start_1) (abs Start_3)))
   (Start_7 Int (5 y 3 1 (- Start_15) (div Start_7 Start_14) (mod Start_11 Start_10) (abs Start_8) (ite StartBool Start_8 Start_16)))
   (Start_2 Int (2 (- Start_1) (+ Start Start_1) (* Start_3 Start_3) (mod Start_1 Start) (abs Start_2) (ite StartBool Start_1 Start)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_1) (= Start Start_9)))
   (Start_9 Int (x (+ Start_7 Start_2) (* Start_9 Start_4) (mod Start_7 Start_1) (ite StartBool_1 Start_4 Start_10)))
   (Start_11 Int (2 x 1 3 (div Start_10 Start_2) (ite StartBool_3 Start_13 Start)))
   (Start_16 Int (0 (- Start_10) (+ Start_12 Start_7) (div Start_16 Start_12) (ite StartBool_3 Start_6 Start_13)))
   (StartBool_4 Bool (false (< Start_10 Start_4) (= Start_10 Start_13) (>= Start_14 Start_2)))
   (StartBool_2 Bool (true (or StartBool StartBool_3)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (< Start_6 Start_3) (<= Start_6 Start_8) (= Start_4 Start_1) (>= Start_3 Start) (> Start_8 Start_6)))
   (Start_10 Int (5 4 (- Start_11) (- Start_12 Start_12) (+ Start_2 Start_4) (mod Start_3 Start_3)))
   (Start_12 Int (1 3 x 4 5 0 y (- Start_12) (+ Start_12 Start_5) (* Start_10 Start_11) (div Start_7 Start_7) (mod Start_2 Start_7) (ite StartBool_2 Start_11 Start_6)))
   (Start_6 Int (3 (- Start_1) (+ Start_5 Start_3) (* Start_5 Start_5) (mod Start Start_7) (abs Start_8) (ite StartBool_1 Start_1 Start_5)))
   (Start_13 Int (3 y 5 0 (- Start_10) (* Start_11 Start_12) (abs Start_1) (ite StartBool_4 Start_3 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x 2)))

(check-synth)
