(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_7 Int) (Start_6 Int) (Start_8 Int) (StartBool_3 Bool) (Start_5 Int) (Start_4 Int) (StartBool_2 Bool) (Start_2 Int) (Start_1 Int) (Start_3 Int) (StartBool_1 Bool))
  ((Start Int (2 (+ Start_1 Start) (abs Start) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (false (or StartBool StartBool_1) (< Start_7 Start_4) (<= Start_6 Start_3) (= Start_5 Start_3) (>= Start Start_4) (> Start_3 Start_6)))
   (Start_7 Int (3 2 0 (- Start_4) (+ Start_1 Start_7) (* Start_6 Start_4) (div Start_6 Start_1) (ite StartBool_2 Start_4 Start_5)))
   (Start_6 Int (5 3 (- Start_4) (div Start_6 Start) (mod Start_3 Start_7)))
   (Start_8 Int (0 4 2 x 5 (- Start Start_7) (+ Start_4 Start_5) (* Start_7 Start_7) (div Start_1 Start_3) (mod Start_2 Start_4) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_3 StartBool_3) (< Start Start_3) (= Start_4 Start_2)))
   (Start_5 Int (x 5 (- Start_8 Start_1) (mod Start_7 Start_5)))
   (Start_4 Int (3 4 y 1 (- Start_1) (* Start_4 Start_1)))
   (StartBool_2 Bool (true (not StartBool_3) (<= Start Start) (= Start Start_4) (> Start_3 Start_1)))
   (Start_2 Int (5 1 y (- Start_2) (+ Start_2 Start_1) (mod Start Start_3) (abs Start_3)))
   (Start_1 Int (3 (- Start_5) (* Start_6 Start_1) (div Start Start_3) (mod Start Start_2) (ite StartBool_3 Start_2 Start_6)))
   (Start_3 Int (0 (- Start_3) (- Start Start_2) (+ Start_1 Start_1) (div Start_2 Start) (mod Start_3 Start_3) (abs Start_1) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool) (or StartBool_2 StartBool_1) (< Start_2 Start_2) (= Start_3 Start_2) (>= Start_1 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 3 (* 2 y))))

(check-synth)
