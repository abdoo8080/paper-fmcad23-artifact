(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_2 Int) (Start_8 Int) (Start_1 Int) (Start_4 Int) (Start_6 Int) (Start_7 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_10 Int) (Start_9 Int) (Start_11 Int) (Start_5 Int))
  ((Start Int (y 2 (- Start_1) (* Start_2 Start_1) (abs Start)))
   (StartBool Bool (true false (and StartBool_1 StartBool_3) (or StartBool_2 StartBool_4) (= Start_9 Start_9) (>= Start_3 Start_6)))
   (Start_3 Int (2 (mod Start_2 Start_2) (ite StartBool_4 Start_4 Start_4)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_1 StartBool) (or StartBool_4 StartBool_4) (< Start_8 Start) (= Start_10 Start_2) (>= Start_10 Start_1) (> Start Start_3)))
   (StartBool_1 Bool (true (or StartBool_2 StartBool_1) (< Start Start) (= Start_2 Start_1)))
   (Start_2 Int (0 (- Start_1) (+ Start_1 Start_2) (* Start_1 Start) (div Start Start_2) (ite StartBool_1 Start Start_2)))
   (Start_8 Int (2 (- Start_4 Start_1) (* Start_1 Start_2) (div Start_6 Start_5) (abs Start_4)))
   (Start_1 Int (5 0 (- Start_10) (- Start_6 Start) (* Start_10 Start)))
   (Start_4 Int (1 3 (- Start_2) (- Start_5 Start_6) (mod Start_3 Start_2)))
   (Start_6 Int (y x 4 (- Start_4) (div Start_4 Start_7) (mod Start_4 Start) (ite StartBool Start_7 Start_7)))
   (Start_7 Int (1 (- Start_6 Start_8) (+ Start_2 Start_1) (* Start_4 Start) (div Start_5 Start_3) (abs Start) (ite StartBool_4 Start_7 Start_6)))
   (StartBool_4 Bool (false true (not StartBool_4) (and StartBool StartBool_1) (>= Start_9 Start_4)))
   (StartBool_2 Bool (false true (not StartBool_1) (or StartBool_3 StartBool_1) (< Start_2 Start) (= Start_2 Start_3) (> Start_3 Start_4)))
   (Start_10 Int (x (- Start_10) (- Start_3 Start_7) (* Start_10 Start_11)))
   (Start_9 Int (0 2 (- Start) (- Start_10 Start_3) (abs Start_1)))
   (Start_11 Int (4 (- Start_10) (- Start_5 Start_10)))
   (Start_5 Int (x 1 y 0 (- Start_1 Start_8) (+ Start_1 Start_8) (div Start_7 Start_4) (mod Start_2 Start_2) (abs Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* x y) (* 2 y))))

(check-synth)
