(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (StartBool_4 Bool) (Start_1 Int) (StartBool_1 Bool) (Start_13 Int) (StartBool_5 Bool) (Start_6 Int) (Start_2 Int) (Start_5 Int) (Start_12 Int) (Start_3 Int) (Start_15 Int) (Start_7 Int) (Start_4 Int) (Start_9 Int) (Start_10 Int) (Start_8 Int) (Start_11 Int) (StartBool_3 Bool) (StartBool_2 Bool))
  ((Start Int (y 1 5 x 2 (+ Start Start_1) (abs Start_2)))
   (StartBool Bool (true false (or StartBool StartBool_2) (= Start_12 Start_10) (>= Start_6 Start)))
   (Start_14 Int (1 (- Start_5) (* Start_6 Start_12) (div Start_3 Start_3) (mod Start_8 Start_8)))
   (StartBool_4 Bool (false true (< Start_8 Start_11) (= Start_4 Start_13)))
   (Start_1 Int (x y (- Start_13) (- Start_12 Start_15) (mod Start_4 Start_12)))
   (StartBool_1 Bool (false true (<= Start_14 Start_3) (> Start_15 Start)))
   (Start_13 Int (3 (* Start_12 Start_6) (mod Start_7 Start_6) (abs Start_5) (ite StartBool_2 Start_1 Start_4)))
   (StartBool_5 Bool (false (not StartBool_5) (and StartBool StartBool) (or StartBool_4 StartBool_1) (< Start_13 Start_1) (= Start_5 Start_10) (>= Start_6 Start_7)))
   (Start_6 Int (3 x (- Start_2 Start_11) (* Start_6 Start_10) (div Start_12 Start_11) (ite StartBool_2 Start_1 Start_7)))
   (Start_2 Int (x 3 y (- Start) (+ Start_2 Start) (* Start_2 Start_2) (abs Start_1) (ite StartBool_1 Start_3 Start)))
   (Start_5 Int (4 (- Start_6) (- Start_6 Start_5) (+ Start_4 Start_5) (mod Start_4 Start_1) (abs Start_2) (ite StartBool_2 Start_2 Start_7)))
   (Start_12 Int (3 (* Start_2 Start_8) (div Start Start_8) (mod Start_4 Start_1) (ite StartBool_3 Start_10 Start_2)))
   (Start_3 Int (x (- Start_3 Start_4) (+ Start_3 Start_4) (div Start Start) (mod Start_3 Start_4) (abs Start) (ite StartBool_2 Start_2 Start_5)))
   (Start_15 Int (y (- Start_7) (- Start_3 Start_1) (div Start_9 Start_4) (abs Start_3)))
   (Start_7 Int (5 (+ Start_2 Start_3) (* Start_8 Start) (mod Start_1 Start_8) (abs Start_9)))
   (Start_4 Int (2 0 (- Start_5) (mod Start_8 Start_2) (abs Start_11)))
   (Start_9 Int (3 y 2 x 5 4 (- Start) (+ Start_2 Start_4) (div Start_8 Start_4) (mod Start_7 Start_8) (abs Start_4) (ite StartBool Start_4 Start_10)))
   (Start_10 Int (y 4 1 0 (div Start_4 Start_1) (mod Start_1 Start_3)))
   (Start_8 Int (x (- Start_11) (+ Start Start_2) (div Start_5 Start_6) (ite StartBool_1 Start_11 Start_7)))
   (Start_11 Int (5 (+ Start_7 Start) (div Start_4 Start_6) (abs Start_6) (ite StartBool Start_2 Start_4)))
   (StartBool_3 Bool (true false (< Start_12 Start_5) (> Start_12 Start_1)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_3 StartBool_4) (or StartBool_5 StartBool_2) (<= Start_4 Start_1) (= Start_9 Start_12) (>= Start_9 Start_7) (> Start_10 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- (mod 5 x)) x)))

(check-synth)
