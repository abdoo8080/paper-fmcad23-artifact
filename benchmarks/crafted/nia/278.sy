(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_13 Int) (Start_2 Int) (Start_3 Int) (StartBool_2 Bool) (Start_12 Int) (StartBool_3 Bool) (Start_5 Int) (StartBool_6 Bool) (Start_7 Int) (Start_4 Int) (Start_6 Int) (Start_8 Int) (Start_14 Int) (StartBool_1 Bool) (StartBool_5 Bool) (Start_9 Int) (Start_11 Int) (StartBool_4 Bool) (Start_10 Int))
  ((Start Int (2 (- Start_1) (+ Start_1 Start) (div Start Start) (mod Start_1 Start_2) (abs Start_3) (ite StartBool_1 Start_4 Start_5)))
   (StartBool Bool (true false (and StartBool_1 StartBool_5) (= Start_7 Start_5)))
   (Start_1 Int (y 3 1 (+ Start_14 Start_14) (mod Start_7 Start_6) (abs Start_9)))
   (Start_13 Int (0 x y (- Start_9 Start_11) (mod Start_9 Start_3) (abs Start_6) (ite StartBool_3 Start_8 Start_14)))
   (Start_2 Int (2 (- Start_2) (- Start_13 Start) (* Start_6 Start_2) (div Start_2 Start_3) (abs Start) (ite StartBool_2 Start_6 Start_6)))
   (Start_3 Int (3 5 (- Start) (- Start_12 Start_12) (mod Start_9 Start_9) (ite StartBool_6 Start_1 Start_6)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool) (or StartBool_4 StartBool_2) (< Start_8 Start_2) (= Start_9 Start_9) (>= Start_10 Start_6)))
   (Start_12 Int (1 x 2 (- Start_12 Start_9) (ite StartBool_1 Start_11 Start_9)))
   (StartBool_3 Bool (false true (or StartBool_4 StartBool_5) (<= Start_4 Start) (= Start Start_4) (>= Start_5 Start_5)))
   (Start_5 Int (0 (- Start_4 Start_1) (mod Start_5 Start_3)))
   (StartBool_6 Bool (true (not StartBool_5) (= Start_2 Start_8) (> Start_4 Start_9)))
   (Start_7 Int (0 y (- Start_3) (- Start_6 Start_7) (mod Start_2 Start_2) (abs Start_8)))
   (Start_4 Int (2 (- Start) (+ Start Start_4) (* Start_4 Start_6) (div Start_6 Start_2) (mod Start Start_5) (abs Start_5)))
   (Start_6 Int (y 3 (- Start_1) (- Start_4 Start_2) (+ Start_5 Start_5) (div Start_7 Start_1) (abs Start_4)))
   (Start_8 Int (y 3 x 1 (div Start_1 Start_7) (mod Start_1 Start_5)))
   (Start_14 Int (3 y 0 x 1 4 (- Start_1 Start_3) (* Start_11 Start_11) (div Start_3 Start_5) (mod Start_8 Start) (abs Start_12)))
   (StartBool_1 Bool (true false (not StartBool_2) (or StartBool_3 StartBool_1) (< Start_1 Start_4) (<= Start_8 Start_5) (= Start_4 Start_6)))
   (StartBool_5 Bool (false (not StartBool_6) (< Start_6 Start_5) (<= Start_3 Start_2)))
   (Start_9 Int (4 (- Start_10 Start_10) (* Start_6 Start_5) (div Start_5 Start_6) (mod Start_6 Start_3)))
   (Start_11 Int (0 (- Start_12) (- Start_2 Start_4) (+ Start_8 Start_3) (* Start_9 Start_1) (mod Start_5 Start_1)))
   (StartBool_4 Bool (false true (and StartBool_1 StartBool) (or StartBool_5 StartBool_5) (< Start_7 Start_3) (>= Start_6 Start_5) (> Start_3 Start_11)))
   (Start_10 Int (4 0 2 (* Start Start) (abs Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 3 (div x (div 0 y)))))

(check-synth)
