(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_9 Int) (Start_10 Int) (Start_11 Int) (Start_3 Int) (Start_2 Int) (StartBool_2 Bool) (Start_6 Int) (Start_4 Int) (StartBool_1 Bool) (Start_8 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_1 Int) (Start_7 Int) (Start_5 Int))
  ((Start Int (x (- Start_1) (+ Start_2 Start_3) (* Start_3 Start)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_3 StartBool_5) (or StartBool_4 StartBool) (< Start_9 Start_2) (<= Start_10 Start_3) (= Start_2 Start_5) (>= Start_10 Start_4)))
   (StartBool_5 Bool (false (or StartBool_3 StartBool) (<= Start_4 Start_1) (>= Start_6 Start_1) (> Start_2 Start_11)))
   (Start_9 Int (3 1 5 4 y x (* Start Start) (mod Start_10 Start_4) (abs Start_10)))
   (Start_10 Int (3 5 0 (- Start_2) (- Start_7 Start_8) (+ Start_2 Start_9) (mod Start_7 Start_10) (abs Start_8) (ite StartBool_5 Start_1 Start_2)))
   (Start_11 Int (3 0 (- Start_6) (- Start_9 Start) (* Start_5 Start_7)))
   (Start_3 Int (4 1 (- Start_3) (- Start_1 Start_1) (* Start_2 Start_1) (mod Start_1 Start) (ite StartBool Start_3 Start_1)))
   (Start_2 Int (2 4 (- Start_3) (- Start_1 Start) (mod Start_3 Start_4) (abs Start_4) (ite StartBool Start_3 Start_4)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool_2 StartBool_1) (or StartBool_3 StartBool) (= Start_1 Start) (>= Start Start_4)))
   (Start_6 Int (5 (- Start_7) (- Start_1 Start_5) (+ Start_6 Start_7) (* Start_3 Start) (div Start_5 Start_6) (mod Start_3 Start_8) (abs Start_1)))
   (Start_4 Int (x 5 (+ Start_3 Start) (ite StartBool_1 Start_4 Start)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_2) (or StartBool StartBool) (< Start Start_1) (<= Start_4 Start_3) (> Start_1 Start_4)))
   (Start_8 Int (3 (- Start_8) (+ Start_7 Start_5) (div Start_6 Start) (mod Start_8 Start_1) (ite StartBool_4 Start_5 Start_6)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool StartBool_3) (< Start_2 Start_2) (= Start_2 Start_5) (>= Start_2 Start_6) (> Start_5 Start_4)))
   (StartBool_4 Bool (true false (or StartBool_1 StartBool) (> Start Start_4)))
   (Start_1 Int (2 (* Start_2 Start_1) (abs Start_8)))
   (Start_7 Int (2 3 (+ Start Start_7) (* Start_4 Start_1) (mod Start_8 Start_6) (abs Start_2)))
   (Start_5 Int (2 (- Start_2) (div Start_5 Start_3) (mod Start_8 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- y 3) (mod y 4))))

(check-synth)
