(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (StartBool_1 Bool) (Start_5 Int) (Start_4 Int) (StartBool_2 Bool) (Start_3 Int) (Start_6 Int) (Start_2 Int) (Start_8 Int) (Start_1 Int) (StartBool_3 Bool) (Start_7 Int))
  ((Start Int (3 1 2 x (- Start_1) (- Start_2 Start) (+ Start Start_1) (* Start_3 Start_1) (div Start_2 Start_4) (mod Start_3 Start_5) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (false (or StartBool_4 StartBool_1) (<= Start_1 Start_1) (>= Start_3 Start_1) (> Start_7 Start_3)))
   (StartBool_5 Bool (true false (and StartBool_3 StartBool_3) (< Start_5 Start_1) (= Start_2 Start_3)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool_5) (or StartBool_3 StartBool_4) (< Start_4 Start_2)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool StartBool_2) (or StartBool StartBool) (< Start_3 Start_4) (<= Start_5 Start_3) (= Start_2 Start)))
   (Start_5 Int (x 5 2 (- Start_2) (- Start_4 Start_2) (* Start Start_5) (ite StartBool Start Start_1)))
   (Start_4 Int (0 (- Start_2) (- Start_6 Start_6) (+ Start_1 Start_2)))
   (StartBool_2 Bool (true (and StartBool StartBool_1) (or StartBool_3 StartBool_2) (<= Start_2 Start_5)))
   (Start_3 Int (3 2 (- Start_2) (mod Start_5 Start_6)))
   (Start_6 Int (2 (- Start_5) (- Start Start_2) (abs Start_1) (ite StartBool_1 Start_2 Start_4)))
   (Start_2 Int (5 (abs Start_1)))
   (Start_8 Int (2 (- Start_1 Start_4) (div Start_4 Start_4) (ite StartBool_2 Start_1 Start_4)))
   (Start_1 Int (1 (- Start) (- Start Start_6) (+ Start_4 Start_5) (* Start Start_1) (div Start Start_6) (mod Start_5 Start_5)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool_3) (< Start Start) (>= Start_5 Start_3) (> Start_3 Start_5)))
   (Start_7 Int (x (- Start_8 Start_2) (* Start_2 Start) (div Start Start_1) (mod Start Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 5 (+ (* x 2) 1))))

(check-synth)
