(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_1 Int) (StartBool_5 Bool) (Start_15 Int) (StartBool_4 Bool) (Start_12 Int) (Start_14 Int) (Start_16 Int) (StartBool_3 Bool) (Start_6 Int) (Start_11 Int) (Start_17 Int) (Start_3 Int) (Start_8 Int) (Start_4 Int) (Start_7 Int) (Start_5 Int) (Start_9 Int) (Start_10 Int) (StartBool_2 Bool) (Start_2 Int) (Start_13 Int) (StartBool_1 Bool))
  ((Start Int (3 (- Start_1) (- Start Start_2) (abs Start_3)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (or StartBool StartBool_1) (< Start_6 Start_6) (> Start_12 Start_13)))
   (Start_18 Int (y 2 5 x 1 (- Start_16) (- Start Start_7) (* Start_2 Start_4) (mod Start_9 Start_12) (abs Start_18)))
   (Start_1 Int (1 (- Start_17) (* Start_17 Start_16) (div Start_18 Start_15) (mod Start_18 Start_7) (abs Start_3) (ite StartBool_1 Start_5 Start_15)))
   (StartBool_5 Bool (true false (or StartBool_2 StartBool) (<= Start_13 Start_1)))
   (Start_15 Int (y 5 (- Start_14 Start_7) (* Start_13 Start_13) (mod Start_11 Start_3) (abs Start_16) (ite StartBool_1 Start_6 Start_2)))
   (StartBool_4 Bool (true false (and StartBool_4 StartBool_5) (<= Start_4 Start_9) (= Start_5 Start_9) (>= Start_8 Start_10)))
   (Start_12 Int (3 y (- Start_10) (+ Start_4 Start_10) (ite StartBool_3 Start_3 Start_8)))
   (Start_14 Int (0 2 (- Start_5) (mod Start_9 Start_10) (abs Start_7)))
   (Start_16 Int (y 2 (- Start_2 Start_13) (+ Start_9 Start_4) (* Start_13 Start_6) (div Start_1 Start_16) (mod Start_7 Start_15) (abs Start_9) (ite StartBool_4 Start_3 Start_10)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_1 StartBool_1)))
   (Start_6 Int (2 (- Start_1) (* Start_4 Start_1) (div Start_7 Start) (abs Start_8)))
   (Start_11 Int (4 0 2 y 3 (- Start_12) (+ Start_5 Start_6)))
   (Start_17 Int (2 (- Start Start_3) (* Start_9 Start_9) (mod Start_3 Start_4)))
   (Start_3 Int (1 (+ Start_4 Start_5) (ite StartBool Start_4 Start_4)))
   (Start_8 Int (2 x y 5 4 1 3 0 (- Start_4) (- Start_4 Start_1) (* Start_7 Start) (div Start_5 Start_2) (abs Start_3) (ite StartBool Start_7 Start_2)))
   (Start_4 Int (1 (- Start_10) (- Start_7 Start_5) (* Start_8 Start_7) (abs Start_9)))
   (Start_7 Int (y x 2 4 (- Start_9 Start_4) (mod Start_8 Start_7)))
   (Start_5 Int (4 (- Start_6) (- Start_4 Start_4) (+ Start_2 Start_2) (div Start_5 Start_2)))
   (Start_9 Int (2 3 (- Start_7 Start_2) (div Start_9 Start_2) (abs Start_6)))
   (Start_10 Int (5 (+ Start_7 Start_10) (* Start Start) (ite StartBool Start_5 Start_8)))
   (StartBool_2 Bool (false (not StartBool_2) (<= Start_3 Start_9) (> Start_5 Start_6)))
   (Start_2 Int (4 (- Start_10) (- Start_11 Start_8) (div Start_2 Start_10) (mod Start_8 Start_6) (ite StartBool_1 Start_2 Start_10)))
   (Start_13 Int (4 (- Start) (- Start_3 Start_14) (div Start_15 Start_5)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_1) (= Start_4 Start_4) (>= Start_11 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- y 5) 3)))

(check-synth)
