(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_1 Int) (Start_5 Int) (StartBool_3 Bool) (StartBool_2 Bool) (StartBool_1 Bool) (Start_3 Int) (Start_6 Int) (Start_11 Int) (Start_8 Int) (Start_9 Int) (Start_10 Int) (Start_2 Int) (Start_7 Int))
  ((Start Int (5 0 (div Start_1 Start_2) (mod Start_3 Start) (abs Start_2) (ite StartBool_1 Start_4 Start_2)))
   (StartBool Bool (true false (not StartBool_1) (or StartBool_1 StartBool) (<= Start_8 Start_8) (> Start Start_8)))
   (Start_4 Int (0 (- Start_1) (* Start_1 Start_2) (mod Start_3 Start_2) (ite StartBool_2 Start_1 Start_3)))
   (Start_1 Int (5 4 x 2 (* Start_10 Start_3) (mod Start_10 Start_2)))
   (Start_5 Int (2 (- Start_3) (- Start_3 Start_8) (+ Start Start_5) (div Start_4 Start_3) (ite StartBool Start_11 Start_11)))
   (StartBool_3 Bool (false (not StartBool_3) (and StartBool_1 StartBool) (or StartBool_3 StartBool) (< Start_1 Start_3) (<= Start_3 Start_7) (= Start_3 Start_3)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_1) (< Start_3 Start_2) (> Start Start_4)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool StartBool) (>= Start_1 Start)))
   (Start_3 Int (2 (- Start Start_5) (+ Start_5 Start) (* Start Start_2) (div Start_2 Start_6) (mod Start_4 Start_2) (abs Start)))
   (Start_6 Int (y (- Start_7) (- Start_6 Start_5) (* Start_2 Start_7) (div Start_1 Start) (mod Start_8 Start_2)))
   (Start_11 Int (5 0 (- Start_7 Start_5) (mod Start_8 Start_5)))
   (Start_8 Int (4 3 1 (div Start_2 Start_8) (abs Start) (ite StartBool_2 Start_9 Start_6)))
   (Start_9 Int (y (- Start_7 Start_3) (* Start_5 Start_4) (mod Start_6 Start) (abs Start_10) (ite StartBool_3 Start_4 Start_7)))
   (Start_10 Int (1 (- Start_4) (+ Start_4 Start_7) (* Start_10 Start_8) (div Start Start_7) (ite StartBool_2 Start_9 Start)))
   (Start_2 Int (2 3 (- Start_7) (- Start_7 Start_5) (* Start_10 Start_4) (div Start_10 Start_3) (mod Start_10 Start_3) (abs Start_10)))
   (Start_7 Int (y (+ Start_11 Start_5) (* Start_6 Start_4) (div Start_4 Start_1) (abs Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div y (* x 4))))

(check-synth)
