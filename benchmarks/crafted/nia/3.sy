(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_11 Int) (Start_13 Int) (Start_12 Int) (Start_10 Int) (StartBool_2 Bool) (Start_5 Int) (Start_4 Int) (Start_6 Int) (Start_8 Int) (StartBool_3 Bool) (Start_1 Int) (Start_7 Int) (StartBool_1 Bool) (Start_3 Int) (StartBool_4 Bool) (Start_2 Int) (Start_9 Int))
  ((Start Int (2 (- Start_1) (- Start Start_1) (div Start_1 Start) (abs Start_1)))
   (StartBool Bool (true false (not StartBool_5) (< Start_1 Start_6) (<= Start_9 Start_7) (= Start_9 Start_7)))
   (StartBool_5 Bool (false true (<= Start_9 Start_10) (= Start_10 Start_3) (> Start_8 Start_9)))
   (Start_11 Int (0 (- Start) (+ Start_6 Start_13) (* Start_4 Start_8) (mod Start_8 Start_6)))
   (Start_13 Int (4 x (- Start_10) (div Start_1 Start_5)))
   (Start_12 Int (1 0 3 2 (- Start_12) (+ Start_2 Start_7) (* Start_3 Start_8) (mod Start_13 Start_9) (ite StartBool_4 Start_1 Start_13)))
   (Start_10 Int (1 2 5 (- Start_5) (+ Start_9 Start_4) (div Start_5 Start) (mod Start_10 Start_1) (ite StartBool_1 Start_8 Start_10)))
   (StartBool_2 Bool (true false (not StartBool_3) (<= Start_6 Start_8) (= Start_11 Start_1) (> Start_12 Start_12)))
   (Start_5 Int (1 (- Start_7 Start_1) (+ Start_3 Start_3) (mod Start_8 Start_1)))
   (Start_4 Int (0 (- Start) (- Start_4 Start) (+ Start_5 Start_5) (* Start_2 Start_1) (div Start_5 Start_1) (ite StartBool Start_4 Start_6)))
   (Start_6 Int (3 (- Start_3) (- Start Start_4) (+ Start Start) (div Start_2 Start_3) (mod Start_3 Start_3) (ite StartBool Start_1 Start)))
   (Start_8 Int (3 (- Start_1 Start_7) (mod Start_6 Start_2) (abs Start_4) (ite StartBool Start_2 Start_3)))
   (StartBool_3 Bool (true (or StartBool_4 StartBool_1) (= Start_8 Start_2)))
   (Start_1 Int (0 2 4 5 (+ Start_2 Start_2) (div Start_3 Start_4) (mod Start_2 Start_2) (abs Start_1)))
   (Start_7 Int (3 (- Start_7) (- Start_7 Start_7) (div Start_6 Start_5) (mod Start_6 Start_2) (abs Start_4) (ite StartBool_1 Start_4 Start_1)))
   (StartBool_1 Bool (false (not StartBool) (>= Start_8 Start_6) (> Start_7 Start_5)))
   (Start_3 Int (0 2 1 (- Start_1) (- Start Start_3)))
   (StartBool_4 Bool (true false (or StartBool_1 StartBool_3) (<= Start_2 Start_6) (= Start_7 Start_6) (> Start_7 Start_5)))
   (Start_2 Int (y (mod Start_9 Start) (abs Start_10) (ite StartBool Start_10 Start_9)))
   (Start_9 Int (5 (- Start_6) (* Start_4 Start) (mod Start_8 Start) (abs Start_2) (ite StartBool_2 Start_3 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 4 (- 4))))

(check-synth)
