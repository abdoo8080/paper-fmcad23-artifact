(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_6 Int) (Start_5 Int) (Start_2 Int) (Start_4 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_3 Int) (Start_7 Int) (Start_9 Int) (Start_12 Int) (Start_1 Int) (Start_11 Int) (StartBool_2 Bool) (Start_10 Int) (Start_8 Int))
  ((Start Int (5 (+ Start_1 Start) (mod Start Start_1) (ite StartBool_1 Start Start_2)))
   (StartBool Bool (false (not StartBool_2) (or StartBool_2 StartBool_3) (= Start_2 Start_12) (>= Start_1 Start_10) (> Start_7 Start_5)))
   (Start_13 Int (0 4 3 1 5 (- Start_6) (div Start_12 Start_13)))
   (Start_6 Int (5 (- Start_2) (+ Start_2 Start_5) (div Start_3 Start_2) (mod Start_2 Start_3) (abs Start_7) (ite StartBool Start_2 Start_2)))
   (Start_5 Int (x (- Start) (- Start_10 Start_1) (+ Start_11 Start_8) (* Start_1 Start_12) (div Start_6 Start_6) (ite StartBool_1 Start_6 Start_13)))
   (Start_2 Int (y (- Start_1) (+ Start_2 Start_2) (abs Start) (ite StartBool Start_2 Start_1)))
   (Start_4 Int (5 (+ Start_3 Start_1) (* Start_3 Start) (div Start_2 Start_4) (mod Start Start_4) (ite StartBool Start_1 Start_2)))
   (StartBool_1 Bool (false (or StartBool StartBool) (< Start_3 Start_1) (>= Start_1 Start_4) (> Start Start_3)))
   (StartBool_3 Bool (true (and StartBool StartBool) (= Start_10 Start_2) (> Start_7 Start_10)))
   (Start_3 Int (4 (- Start_3) (- Start_5 Start_2) (+ Start_3 Start_6) (ite StartBool Start_2 Start_6)))
   (Start_7 Int (0 y (- Start_4) (* Start Start_2) (div Start_6 Start_8) (abs Start_6) (ite StartBool_2 Start_3 Start_9)))
   (Start_9 Int (y (- Start_1) (- Start_5 Start_9) (+ Start_6 Start_10) (* Start_9 Start_10) (div Start_10 Start_8) (abs Start_1) (ite StartBool_2 Start Start_10)))
   (Start_12 Int (4 (- Start) (+ Start_3 Start) (div Start_5 Start_12) (abs Start) (ite StartBool Start_10 Start)))
   (Start_1 Int (y 4 0 (- Start_3) (- Start_12 Start_4) (+ Start_12 Start_3) (* Start_11 Start_6) (div Start_12 Start_10) (mod Start_1 Start_5) (abs Start_2)))
   (Start_11 Int (3 (- Start_2) (- Start_2 Start_3) (div Start_2 Start_1) (ite StartBool_1 Start_8 Start_5)))
   (StartBool_2 Bool (true false (= Start_8 Start_12) (>= Start_7 Start_10)))
   (Start_10 Int (4 (+ Start_5 Start_11) (* Start_12 Start_9) (div Start_3 Start_4) (abs Start_1)))
   (Start_8 Int (0 4))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 1 (mod 1 (+ (mod 1 y) x)))))

(check-synth)
