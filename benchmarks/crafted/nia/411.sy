(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_9 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_15 Int) (Start_8 Int) (Start_14 Int) (StartBool_7 Bool) (StartBool_8 Bool) (Start_13 Int) (Start_6 Int) (StartBool_6 Bool) (Start_9 Int) (Start_7 Int) (Start_5 Int) (StartBool_2 Bool) (Start_10 Int) (Start_11 Int) (Start_3 Int) (Start_12 Int) (Start_2 Int) (StartBool_4 Bool) (StartBool_3 Bool) (StartBool_5 Bool))
  ((Start Int (x (+ Start Start_1) (mod Start_2 Start_2) (abs Start_1) (ite StartBool_1 Start_2 Start_3)))
   (StartBool Bool (true (= Start_7 Start_5) (>= Start_3 Start)))
   (Start_1 Int (5 (abs Start_3)))
   (StartBool_9 Bool (true false (< Start_15 Start_5) (<= Start_5 Start_7) (>= Start_2 Start_9) (> Start_4 Start_11)))
   (StartBool_1 Bool (true (or StartBool_6 StartBool_9) (= Start_12 Start_10) (> Start_7 Start_12)))
   (Start_4 Int (4 (- Start_15 Start_10) (+ Start_12 Start_13) (* Start_12 Start_14) (div Start_9 Start_2) (mod Start_13 Start_12) (ite StartBool_5 Start_9 Start_5)))
   (Start_15 Int (1 2 (* Start_2 Start_2) (div Start_10 Start_15) (mod Start_14 Start_11)))
   (Start_8 Int (y 4 2 x (+ Start_11 Start_3) (div Start Start_9) (mod Start_1 Start_8) (abs Start_15)))
   (Start_14 Int (x y 5 4 (- Start_8)))
   (StartBool_7 Bool (false (not StartBool) (<= Start_13 Start_13) (>= Start_4 Start_1)))
   (StartBool_8 Bool (false (< Start_3 Start_6) (<= Start_2 Start_10) (>= Start_3 Start_3) (> Start_6 Start_6)))
   (Start_13 Int (0 3 5 (mod Start_7 Start_11) (abs Start_10) (ite StartBool_8 Start_4 Start_3)))
   (Start_6 Int (y 0 2 (+ Start_1 Start_5) (* Start_2 Start_1) (mod Start_4 Start_7) (ite StartBool Start_4 Start_6)))
   (StartBool_6 Bool (true (not StartBool_7) (or StartBool_4 StartBool_6) (<= Start_4 Start_3) (> Start_13 Start_2)))
   (Start_9 Int (2 (- Start_14) (- Start_2 Start_4) (+ Start_4 Start_14) (div Start Start_2) (abs Start_6)))
   (Start_7 Int (y 4 5 (- Start Start_3) (+ Start_5 Start) (* Start_7 Start_6) (abs Start)))
   (Start_5 Int (4 y 1 (- Start_8) (- Start_7 Start_6) (+ Start_1 Start_6) (* Start_1 Start_6) (div Start Start_9) (mod Start_7 Start_2) (abs Start_8) (ite StartBool Start_5 Start_10)))
   (StartBool_2 Bool (false true (or StartBool_3 StartBool_2) (< Start_10 Start_5) (<= Start_10 Start_1) (= Start_8 Start_9) (>= Start_7 Start_10)))
   (Start_10 Int (5 3 (- Start_7) (- Start_11 Start_11) (* Start_2 Start_11) (div Start_6 Start_5)))
   (Start_11 Int (0 2 (+ Start_11 Start_5) (mod Start_6 Start_9) (ite StartBool_2 Start_10 Start_11)))
   (Start_3 Int (4 (- Start_4) (- Start Start_5) (+ Start_5 Start_6) (* Start_3 Start_6) (div Start Start_1) (abs Start_5) (ite StartBool_1 Start Start_4)))
   (Start_12 Int (1 3 (- Start) (- Start_8 Start_8) (* Start_1 Start_5) (div Start_3 Start_8) (ite StartBool_4 Start_2 Start_4)))
   (Start_2 Int (3 (- Start_10) (- Start_2 Start_11) (+ Start_5 Start_1) (* Start_15 Start_7) (abs Start_1) (ite StartBool_5 Start Start_10)))
   (StartBool_4 Bool (true false (not StartBool_1) (or StartBool_1 StartBool_6) (<= Start_5 Start) (>= Start_12 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_4) (or StartBool_5 StartBool) (< Start_3 Start_10) (= Start_5 Start_5) (>= Start_2 Start_4)))
   (StartBool_5 Bool (true false (not StartBool) (and StartBool_5 StartBool_1) (or StartBool_4 StartBool_3) (< Start_9 Start_9) (> Start_10 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 2 (* y y))))

(check-synth)
