(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_13 Int) (Start_2 Int) (Start_11 Int) (Start_14 Int) (Start_5 Int) (Start_1 Int) (Start_7 Int) (StartBool_3 Bool) (Start_12 Int) (Start_6 Int) (Start_15 Int) (Start_10 Int) (Start_8 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_3 Int) (Start_9 Int))
  ((Start Int (y (- Start) (- Start_1 Start) (+ Start Start_1) (* Start_1 Start) (mod Start_1 Start) (abs Start_2) (ite StartBool_1 Start_2 Start_2)))
   (StartBool Bool (false (or StartBool_3 StartBool_2) (< Start_4 Start_6) (<= Start_9 Start_7) (> Start_4 Start_14)))
   (Start_16 Int (y 1 x 5 4 (abs Start_10) (ite StartBool_1 Start_15 Start_11)))
   (Start_13 Int (x y (- Start_3 Start_11) (+ Start_5 Start_9) (mod Start_13 Start_13)))
   (Start_2 Int (x (- Start_1) (div Start_10 Start_12) (ite StartBool Start_2 Start_13)))
   (Start_11 Int (y 4 2 (- Start_7) (abs Start)))
   (Start_14 Int (4 (- Start_10 Start_16) (mod Start_6 Start) (abs Start_9)))
   (Start_5 Int (5 4 x (- Start_1 Start) (+ Start Start) (* Start Start_4) (div Start_3 Start_6) (ite StartBool_1 Start_6 Start_2)))
   (Start_1 Int (3 (- Start_4 Start_1) (div Start_14 Start) (mod Start_1 Start_6) (abs Start_15)))
   (Start_7 Int (1 (abs Start_8) (ite StartBool_2 Start_5 Start_9)))
   (StartBool_3 Bool (true (not StartBool) (<= Start_1 Start_4)))
   (Start_12 Int (5 3 2 x (- Start_6 Start_4) (* Start_9 Start_10) (div Start_7 Start_5) (abs Start_10) (ite StartBool_1 Start_1 Start_7)))
   (Start_6 Int (2 (* Start_6 Start_3) (abs Start_5)))
   (Start_15 Int (3 (- Start_3) (mod Start_4 Start_1)))
   (Start_10 Int (2 (- Start_7) (- Start_3 Start_10)))
   (Start_8 Int (y (- Start_5 Start_5) (+ Start_3 Start_10) (mod Start_2 Start_4) (ite StartBool_1 Start_9 Start_1)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool) (or StartBool_2 StartBool_3) (< Start_11 Start_10) (>= Start_1 Start_12)))
   (StartBool_1 Bool (false true (or StartBool_2 StartBool_3) (<= Start_3 Start_1) (= Start_3 Start_2) (>= Start_4 Start_2) (> Start_5 Start_4)))
   (Start_4 Int (0 2 3 (- Start Start_1) (* Start_1 Start_6) (mod Start_4 Start_6) (abs Start_1) (ite StartBool Start_5 Start_1)))
   (Start_3 Int (2 1 (- Start_7 Start_7) (mod Start_2 Start_2)))
   (Start_9 Int (2 0 1 3 x (- Start_7) (div Start Start_7) (mod Start_3 Start_10) (abs Start_7) (ite StartBool_1 Start_2 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 (mod 3 y))))

(check-synth)
