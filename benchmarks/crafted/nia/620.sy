(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_12 Int) (StartBool_2 Bool) (StartBool_5 Bool) (Start_10 Int) (Start_1 Int) (Start_7 Int) (StartBool_4 Bool) (Start_2 Int) (Start_3 Int) (Start_9 Int) (Start_5 Int) (Start_8 Int) (Start_6 Int) (StartBool_1 Bool) (Start_4 Int) (StartBool_3 Bool))
  ((Start Int (5 1 2 (- Start_1)))
   (StartBool Bool (false (not StartBool_2) (or StartBool_2 StartBool_3) (< Start_3 Start) (> Start Start_4)))
   (Start_11 Int (3 y (+ Start_10 Start_10) (mod Start_9 Start_7) (ite StartBool Start Start_11)))
   (Start_12 Int (3 1 5 0 4 (- Start_7) (- Start_12 Start_12) (* Start Start_5) (div Start_7 Start_9)))
   (StartBool_2 Bool (false true (or StartBool_2 StartBool_5) (< Start_3 Start_11) (> Start_12 Start_5)))
   (StartBool_5 Bool (false (not StartBool_1) (= Start_3 Start_9) (>= Start_6 Start_8) (> Start_9 Start)))
   (Start_10 Int (1 (- Start) (+ Start_2 Start_3) (abs Start_3) (ite StartBool_5 Start_1 Start_4)))
   (Start_1 Int (5 3 (- Start_2 Start) (div Start_2 Start_2) (mod Start_2 Start)))
   (Start_7 Int (2 0 (- Start) (- Start_5 Start_2) (mod Start_7 Start_2) (ite StartBool Start_6 Start_2)))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool) (< Start_4 Start_3) (<= Start Start_10) (= Start_9 Start_5) (> Start_1 Start_1)))
   (Start_2 Int (5 2 y x 0 (- Start_2) (* Start_2 Start) (div Start_2 Start_3) (mod Start Start_2) (abs Start)))
   (Start_3 Int (5 1 (+ Start_4 Start_2) (mod Start_5 Start) (ite StartBool Start_6 Start_2)))
   (Start_9 Int (y 0 1 (- Start) (- Start_5 Start_1) (div Start_4 Start_9) (abs Start) (ite StartBool_4 Start_7 Start_8)))
   (Start_5 Int (4 (* Start_5 Start_7) (div Start_5 Start_2) (ite StartBool_1 Start_2 Start_8)))
   (Start_8 Int (x (- Start_2) (- Start_8 Start_5) (* Start_6 Start_4) (div Start_2 Start) (mod Start_4 Start_2) (abs Start_4) (ite StartBool_1 Start_2 Start_4)))
   (Start_6 Int (y (- Start_6 Start_5) (+ Start_2 Start_1) (* Start_3 Start_2) (mod Start_2 Start_3) (abs Start_1) (ite StartBool Start_5 Start_1)))
   (StartBool_1 Bool (true (< Start_6 Start) (<= Start_4 Start_3) (>= Start_1 Start_4) (> Start_2 Start_3)))
   (Start_4 Int (2 x 4 3 (- Start_5 Start_6) (+ Start_7 Start_2) (* Start_8 Start_3) (div Start_6 Start_3) (mod Start Start_4)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool) (or StartBool_2 StartBool) (<= Start_9 Start_3) (= Start_5 Start_1) (>= Start_6 Start_8) (> Start_9 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (< y 5) (+ 4 (+ 5 2)) 1)))

(check-synth)
