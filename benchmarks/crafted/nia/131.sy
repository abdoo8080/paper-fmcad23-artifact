(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_11 Int) (Start_1 Int) (Start_6 Int) (Start_4 Int) (Start_7 Int) (Start_2 Int) (Start_9 Int) (StartBool_1 Bool) (Start_3 Int) (Start_5 Int) (Start_8 Int) (Start_12 Int))
  ((Start Int (2 x (- Start_1) (- Start_1 Start) (+ Start_1 Start_2) (* Start Start_2) (div Start Start) (mod Start_3 Start) (abs Start_3)))
   (StartBool Bool (true (< Start_2 Start_8) (<= Start_11 Start) (>= Start_4 Start_10) (> Start_7 Start_8)))
   (Start_10 Int (0 (- Start) (+ Start_1 Start) (mod Start_12 Start_12) (abs Start_2) (ite StartBool_1 Start_4 Start_12)))
   (Start_11 Int (x (- Start_4) (* Start_9 Start_8) (abs Start_5) (ite StartBool Start_5 Start_10)))
   (Start_1 Int (2 (- Start_1) (div Start_4 Start_1) (mod Start_1 Start_8) (abs Start_5) (ite StartBool Start_9 Start_8)))
   (Start_6 Int (x 2 (div Start_2 Start_4) (mod Start_5 Start_2)))
   (Start_4 Int (1 (- Start_7) (- Start_7 Start_4) (mod Start_5 Start) (abs Start_1)))
   (Start_7 Int (y 2 (* Start_5 Start_7) (div Start_3 Start_7) (abs Start)))
   (Start_2 Int (2 (+ Start_4 Start_1) (div Start_3 Start_5) (abs Start_1) (ite StartBool Start_4 Start_5)))
   (Start_9 Int (1 (- Start_3) (- Start_5 Start_6) (div Start_4 Start_3) (mod Start_7 Start_3)))
   (StartBool_1 Bool (true (not StartBool) (or StartBool StartBool) (< Start Start_12) (<= Start_1 Start_2) (>= Start_4 Start_1)))
   (Start_3 Int (y (+ Start_3 Start_3) (mod Start_3 Start)))
   (Start_5 Int (x (- Start_5) (div Start_4 Start_3) (mod Start_6 Start_5)))
   (Start_8 Int (x 5 2 3 4 1 (+ Start_3 Start_10) (* Start_5 Start_4) (mod Start_9 Start_11) (abs Start_11) (ite StartBool_1 Start_7 Start_9)))
   (Start_12 Int (4 (- Start_8 Start_1) (+ Start Start_10) (mod Start_7 Start_8) (abs Start_10) (ite StartBool_1 Start_9 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 3 y)))

(check-synth)
