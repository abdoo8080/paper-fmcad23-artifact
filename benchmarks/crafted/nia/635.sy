(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_19 Int) (Start_14 Int) (Start_16 Int) (Start_11 Int) (Start_12 Int) (Start_15 Int) (Start_13 Int) (Start_4 Int) (Start_17 Int) (Start_1 Int) (Start_9 Int) (Start_6 Int) (StartBool_3 Bool) (Start_10 Int) (Start_7 Int) (Start_8 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_18 Int) (Start_2 Int) (Start_5 Int))
  ((Start Int (3 (+ Start_1 Start) (abs Start_1)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool_1) (< Start Start_1) (<= Start Start_1) (= Start Start_2) (>= Start_2 Start_2)))
   (StartBool_1 Bool (false true (<= Start_19 Start_13) (>= Start_8 Start) (> Start_16 Start_5)))
   (Start_19 Int (1 2 y (- Start_3) (+ Start_17 Start_15) (* Start_18 Start_11) (div Start_18 Start_13) (mod Start_6 Start_10) (abs Start_3)))
   (Start_14 Int (0 (- Start_5) (* Start_4 Start_14) (mod Start_9 Start_11) (abs Start_6)))
   (Start_16 Int (3 1 2 (- Start_17) (- Start_9 Start_14) (+ Start Start_13) (div Start_5 Start_15) (mod Start_2 Start_7) (abs Start_2)))
   (Start_11 Int (0 (- Start_9 Start_12) (* Start_2 Start_3) (div Start_14 Start_15)))
   (Start_12 Int (2 (- Start_11 Start_13) (* Start_5 Start_11) (mod Start_9 Start_6)))
   (Start_15 Int (2 0 (mod Start_16 Start_4) (ite StartBool_3 Start_15 Start_13)))
   (Start_13 Int (1 y (- Start_7) (- Start_3 Start_10) (abs Start_13) (ite StartBool_3 Start_6 Start_7)))
   (Start_4 Int (5 3 (+ Start_18 Start_11) (* Start_13 Start_2) (div Start_17 Start_1) (mod Start_13 Start_16) (ite StartBool_4 Start_1 Start_10)))
   (Start_17 Int (1 2 (- Start_10) (* Start_10 Start_15) (mod Start_10 Start_11)))
   (Start_1 Int (5 y (- Start_1)))
   (Start_9 Int (1 4 3 (- Start_9 Start_7) (* Start_5 Start_4)))
   (Start_6 Int (y 1 (- Start_2) (* Start_2 Start_6) (div Start_1 Start_4) (mod Start Start) (abs Start_2) (ite StartBool_2 Start_5 Start_7)))
   (StartBool_3 Bool (true (not StartBool) (< Start_8 Start_3) (= Start Start_8)))
   (Start_10 Int (3 2 (- Start_10) (- Start_7 Start_2) (+ Start_2 Start_6) (div Start_5 Start_1)))
   (Start_7 Int (3 (- Start_7) (- Start_2 Start_8) (+ Start_9 Start_4) (* Start_7 Start_1) (div Start_10 Start_8) (mod Start_4 Start_6) (ite StartBool_2 Start_5 Start_9)))
   (Start_8 Int (1 (- Start) (- Start_1 Start_9) (+ Start_1 Start_6) (* Start_5 Start_4) (mod Start_1 Start_4) (ite StartBool_3 Start_6 Start_7)))
   (Start_3 Int (x (* Start_7 Start_6) (div Start_5 Start_19) (mod Start_10 Start_8) (abs Start_15) (ite StartBool_1 Start_18 Start_14)))
   (StartBool_2 Bool (false true (not StartBool_4) (<= Start_5 Start_6) (= Start_9 Start_7) (>= Start_5 Start_8) (> Start Start_8)))
   (StartBool_4 Bool (true (not StartBool_3) (and StartBool_2 StartBool_1) (or StartBool_1 StartBool_4) (<= Start_7 Start) (> Start_2 Start_5)))
   (Start_18 Int (y (- Start_14 Start_11) (div Start_2 Start_14) (abs Start)))
   (Start_2 Int (0 (- Start_2) (+ Start_3 Start_3) (* Start_4 Start_3) (div Start_5 Start_6) (abs Start_5) (ite StartBool_1 Start_6 Start_6)))
   (Start_5 Int (x (- Start_9) (- Start_11 Start_12) (+ Start_12 Start_11) (* Start_6 Start_8) (div Start_5 Start_7) (mod Start_13 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (< (mod 3 x) 4) 5 3)))

(check-synth)
