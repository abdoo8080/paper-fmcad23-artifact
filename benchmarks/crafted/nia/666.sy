(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_3 Int) (Start_9 Int) (Start_2 Int) (StartBool_1 Bool) (Start_1 Int) (Start_4 Int) (Start_7 Int) (Start_10 Int) (Start_5 Int) (Start_11 Int) (Start_8 Int))
  ((Start Int (3 (- Start_1 Start_1) (* Start_1 Start) (mod Start_2 Start_3)))
   (StartBool Bool (true (>= Start_11 Start_5) (> Start_4 Start_9)))
   (Start_6 Int (1 (+ Start_9 Start_5) (* Start_7 Start_3) (mod Start_3 Start_7) (abs Start_10)))
   (Start_3 Int (x 5 (- Start_2) (div Start_2 Start_1) (mod Start Start_1) (abs Start_1)))
   (Start_9 Int (3 (* Start_6 Start_8) (abs Start_2)))
   (Start_2 Int (5 (* Start_1 Start_2) (div Start_4 Start_3) (abs Start)))
   (StartBool_1 Bool (true (and StartBool StartBool) (< Start_7 Start_5) (<= Start_9 Start_8) (= Start_10 Start_8) (> Start_3 Start_6)))
   (Start_1 Int (1 (+ Start_9 Start_11) (* Start Start_8)))
   (Start_4 Int (0 2 (- Start Start_5) (+ Start_6 Start_3) (* Start_7 Start_1) (div Start_8 Start_1) (abs Start_6) (ite StartBool_1 Start_6 Start_7)))
   (Start_7 Int (3 y (- Start_3) (+ Start_6 Start_3) (mod Start_8 Start_5) (abs Start_8)))
   (Start_10 Int (4 (- Start_10 Start_2) (mod Start_2 Start_11)))
   (Start_5 Int (4 (+ Start_10 Start_4) (mod Start_8 Start_3) (ite StartBool Start_3 Start_9)))
   (Start_11 Int (0 (div Start_3 Start_1) (abs Start_7)))
   (Start_8 Int (3 5 (* Start_6 Start_7) (div Start_2 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (abs y) 0)))

(check-synth)
