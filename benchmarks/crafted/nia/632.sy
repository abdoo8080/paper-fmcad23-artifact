(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_21 Int) (Start_19 Int) (Start_1 Int) (StartBool_4 Bool) (Start_13 Int) (Start_15 Int) (StartBool_5 Bool) (Start_18 Int) (Start_14 Int) (Start_12 Int) (StartBool_6 Bool) (Start_7 Int) (Start_20 Int) (Start_2 Int) (Start_6 Int) (Start_16 Int) (StartBool_1 Bool) (Start_9 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_8 Int) (Start_17 Int) (Start_4 Int) (Start_10 Int) (Start_3 Int) (Start_5 Int) (Start_11 Int))
  ((Start Int (2 5 3 4 y x (- Start_1 Start_2) (+ Start_2 Start_1) (div Start_2 Start_2) (mod Start_2 Start_2) (abs Start_1) (ite StartBool Start_1 Start)))
   (StartBool Bool (true (< Start_20 Start_15) (<= Start_5 Start_6) (>= Start_17 Start_15) (> Start_7 Start_8)))
   (Start_21 Int (1 y (+ Start_12 Start_11) (* Start_1 Start_9) (mod Start_8 Start_5)))
   (Start_19 Int (4 (* Start_3 Start_14) (mod Start_19 Start_16) (abs Start_16) (ite StartBool_1 Start_2 Start_19)))
   (Start_1 Int (1 x (- Start_11 Start_13) (+ Start_11 Start_10) (mod Start_5 Start_19) (ite StartBool_4 Start_12 Start_4)))
   (StartBool_4 Bool (true (<= Start_3 Start_7) (> Start_4 Start_1)))
   (Start_13 Int (1 3 4 5 (- Start_7) (- Start_15 Start_17) (+ Start_14 Start_15) (* Start Start_14) (div Start_2 Start_4) (mod Start_18 Start_10) (abs Start) (ite StartBool_3 Start_3 Start_17)))
   (Start_15 Int (y 0 (- Start_16) (+ Start_15 Start_13)))
   (StartBool_5 Bool (true false (or StartBool_5 StartBool) (> Start_12 Start_4)))
   (Start_18 Int (3 0 (+ Start_9 Start_16) (* Start_7 Start_2) (div Start_13 Start_4)))
   (Start_14 Int (x (- Start_3) (+ Start_10 Start_11) (div Start_15 Start_1) (mod Start_11 Start_5) (ite StartBool_5 Start_4 Start)))
   (Start_12 Int (1 5 y (- Start_13) (div Start_13 Start_14)))
   (StartBool_6 Bool (true (< Start_10 Start_13)))
   (Start_7 Int (5 (* Start_3 Start_1) (div Start_3 Start_8)))
   (Start_20 Int (3 (- Start_21 Start_14) (* Start_10 Start_21) (div Start_14 Start) (ite StartBool_2 Start_4 Start_13)))
   (Start_2 Int (3 2 (- Start) (- Start Start_2) (+ Start_3 Start_1) (div Start Start_1) (abs Start_4) (ite StartBool Start_2 Start_4)))
   (Start_6 Int (5 2 (- Start_4) (* Start_7 Start_4) (div Start_3 Start_3) (mod Start_5 Start_7) (abs Start_2) (ite StartBool Start_5 Start_5)))
   (Start_16 Int (y (- Start_9) (- Start_7 Start_15) (abs Start_12) (ite StartBool_6 Start_11 Start_2)))
   (StartBool_1 Bool (false (not StartBool_2) (or StartBool_1 StartBool_3) (< Start_2 Start_8) (<= Start_2 Start_2) (>= Start_8 Start_9)))
   (Start_9 Int (1 0 (- Start_5 Start_7) (div Start Start_3) (mod Start_8 Start_1) (abs Start_10)))
   (StartBool_3 Bool (false true (or StartBool_1 StartBool_4) (<= Start_1 Start_9) (= Start_2 Start_1) (> Start_8 Start_12)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_4 StartBool_2) (or StartBool StartBool_1) (<= Start_2 Start_17) (> Start_10 Start_8)))
   (Start_8 Int (2 1 (div Start_5 Start_9) (ite StartBool Start_7 Start_2)))
   (Start_17 Int (3 4 1 (+ Start_4 Start_2) (div Start_17 Start_14) (mod Start_6 Start_6) (ite StartBool_1 Start_10 Start)))
   (Start_4 Int (5 (- Start_1) (+ Start_1 Start_4) (* Start_2 Start) (abs Start_1) (ite StartBool Start_3 Start_5)))
   (Start_10 Int (y 2 x (- Start_1 Start_8) (* Start_8 Start_6) (mod Start_2 Start_1)))
   (Start_3 Int (y (* Start_3 Start_5) (div Start_5 Start_6) (mod Start_11 Start_1) (ite StartBool Start_10 Start_5)))
   (Start_5 Int (1 0 4 (+ Start_1 Start_2) (* Start_6 Start_4) (div Start Start_1) (mod Start_5 Start_5)))
   (Start_11 Int (2 x (- Start_9 Start) (* Start_1 Start_2) (mod Start_5 Start_2) (ite StartBool_1 Start_4 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod 3 (div x 4)) (+ x 3))))

(check-synth)
