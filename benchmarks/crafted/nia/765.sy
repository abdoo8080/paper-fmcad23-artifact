(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_3 Int) (StartBool_1 Bool) (Start_4 Int) (Start_8 Int) (Start_6 Int) (Start_5 Int) (Start_7 Int) (Start_1 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_2 Int) (Start_9 Int))
  ((Start Int (1 (- Start Start_1) (+ Start_2 Start_3) (mod Start_4 Start_4) (ite StartBool_1 Start Start)))
   (StartBool Bool (false true (not StartBool_3) (or StartBool_3 StartBool_1) (> Start_10 Start_6)))
   (Start_10 Int (1 (div Start_10 Start_10) (mod Start_2 Start) (abs Start_10) (ite StartBool_2 Start_9 Start_2)))
   (Start_3 Int (3 (- Start_5) (- Start_5 Start_2) (+ Start_1 Start_5) (div Start_3 Start_2) (abs Start_2) (ite StartBool_2 Start_4 Start_6)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_1) (or StartBool_1 StartBool) (< Start Start) (= Start_1 Start_2) (>= Start_1 Start_2)))
   (Start_4 Int (4 (- Start_4) (- Start Start_3) (+ Start_3 Start) (* Start_2 Start_1) (div Start_2 Start_5) (abs Start_1) (ite StartBool_1 Start_3 Start_3)))
   (Start_8 Int (4 y 2 (- Start_3) (div Start_3 Start_7) (abs Start_4) (ite StartBool_3 Start_8 Start_1)))
   (Start_6 Int (4 (- Start_2) (- Start_5 Start_2) (* Start_2 Start_5) (div Start_2 Start_1) (mod Start_7 Start_3) (ite StartBool_2 Start_3 Start_2)))
   (Start_5 Int (4 (- Start_2) (- Start_5 Start_3) (+ Start_3 Start_4)))
   (Start_7 Int (1))
   (Start_1 Int (3 (- Start_2) (- Start_2 Start) (+ Start_8 Start_2) (* Start_3 Start_6) (div Start Start_5) (ite StartBool_1 Start_6 Start_7)))
   (StartBool_3 Bool (true false (< Start_8 Start_5) (<= Start_4 Start_9) (>= Start_2 Start)))
   (StartBool_2 Bool (false (>= Start_2 Start_2) (> Start_3 Start)))
   (Start_2 Int (0 (- Start_3 Start) (+ Start_7 Start_2) (mod Start Start) (ite StartBool Start_6 Start_6)))
   (Start_9 Int (1 4 (+ Start_3 Start_4) (mod Start_2 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (= x 2) (- (div 4 0)) 5)))

(check-synth)
