(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_21 Int) (Start_22 Int) (Start_3 Int) (Start_4 Int) (Start_7 Int) (Start_5 Int) (Start_17 Int) (Start_8 Int) (Start_16 Int) (Start_1 Int) (StartBool_1 Bool) (Start_20 Int) (Start_6 Int) (Start_10 Int) (Start_19 Int) (StartBool_2 Bool) (Start_11 Int) (Start_18 Int) (Start_13 Int) (Start_9 Int) (Start_2 Int) (Start_15 Int) (Start_14 Int) (Start_12 Int) (StartBool_3 Bool))
  ((Start Int (y 3 (- Start_1 Start_1) (ite StartBool Start_2 Start)))
   (StartBool Bool (false (and StartBool_4 StartBool) (or StartBool_1 StartBool_1) (< Start_21 Start_10) (>= Start_13 Start_21) (> Start_6 Start_3)))
   (StartBool_4 Bool (false (not StartBool_2) (and StartBool_3 StartBool_1) (< Start_2 Start_5) (>= Start_4 Start_20) (> Start_5 Start_5)))
   (Start_21 Int (2 (- Start_9 Start_4) (+ Start_22 Start_7) (* Start_9 Start_4) (div Start_7 Start_11) (mod Start_19 Start_20)))
   (Start_22 Int (x (+ Start_11 Start_8) (* Start_6 Start_19) (div Start_22 Start_2)))
   (Start_3 Int (y (- Start_5 Start_12) (+ Start_7 Start_3) (div Start_16 Start_17) (abs Start_18)))
   (Start_4 Int (3 x (- Start_6) (+ Start_16 Start_9) (* Start_16 Start_8) (mod Start_13 Start_17) (ite StartBool_2 Start_13 Start_14)))
   (Start_7 Int (y (- Start_13 Start_8) (+ Start_3 Start_13) (* Start_3 Start_15) (div Start_1 Start_3) (mod Start_12 Start_14) (abs Start_2)))
   (Start_5 Int (5 4 3 y (- Start_20) (- Start_6 Start_8) (* Start_18 Start_3) (abs Start_7)))
   (Start_17 Int (1 (- Start_11) (- Start_3 Start_4) (div Start_6 Start_2) (abs Start_12) (ite StartBool_3 Start_18 Start_3)))
   (Start_8 Int (3 (+ Start_8 Start_17) (div Start_7 Start_3) (mod Start_11 Start_11) (ite StartBool_3 Start_12 Start_5)))
   (Start_16 Int (0 (+ Start_3 Start_7) (div Start_6 Start_8)))
   (Start_1 Int (y (- Start_15) (* Start_13 Start_6) (div Start_15 Start)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_3 StartBool_1) (= Start_13 Start_9) (>= Start_15 Start_9)))
   (Start_20 Int (x 5 0 y (- Start_17) (+ Start_7 Start_11) (abs Start_18) (ite StartBool_1 Start_2 Start_18)))
   (Start_6 Int (y (- Start_7) (- Start_6 Start_5) (+ Start_4 Start_8) (* Start_1 Start_9) (mod Start_2 Start_7) (abs Start) (ite StartBool_1 Start_8 Start_10)))
   (Start_10 Int (y (- Start Start_10) (div Start_11 Start_9) (mod Start_6 Start_8)))
   (Start_19 Int (4 2 (- Start_20) (- Start_8 Start_8) (+ Start_10 Start_9) (div Start_11 Start_11) (abs Start_4)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_1 StartBool) (< Start_15 Start_11)))
   (Start_11 Int (y 4 (- Start_7) (- Start Start_3) (+ Start_12 Start_12) (mod Start_13 Start_10) (abs Start_7) (ite StartBool_1 Start_6 Start_9)))
   (Start_18 Int (0 1 (- Start_9) (+ Start_6 Start_7) (* Start_19 Start_13) (div Start Start_20) (mod Start_12 Start_12) (abs Start_12)))
   (Start_13 Int (0 (* Start_1 Start_10) (div Start Start_2) (abs Start_3)))
   (Start_9 Int (2 (- Start_11) (- Start_13 Start_9) (+ Start_4 Start_16) (* Start_10 Start_8) (mod Start_13 Start_7) (abs Start_16) (ite StartBool_3 Start_15 Start)))
   (Start_2 Int (2 (- Start_3 Start_4) (+ Start_1 Start_5) (* Start Start_5) (div Start_6 Start_6) (mod Start Start_1) (abs Start)))
   (Start_15 Int (y 5 (* Start_9 Start_4) (mod Start_5 Start_2) (abs Start_6) (ite StartBool Start_10 Start_10)))
   (Start_14 Int (4 3 (- Start_4) (- Start_2 Start_13) (abs Start_10)))
   (Start_12 Int (1 (- Start_11 Start_4) (+ Start Start_5) (div Start_14 Start_7) (mod Start_12 Start_15) (ite StartBool Start_2 Start_15)))
   (StartBool_3 Bool (false true (not StartBool) (or StartBool_1 StartBool_3) (<= Start_15 Start_13) (= Start_4 Start_15)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (+ x 3) (div 5 (* 5 (mod 1 0))))))

(check-synth)
