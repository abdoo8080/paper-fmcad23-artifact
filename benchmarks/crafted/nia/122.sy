(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_11 Int) (Start_2 Int) (Start_7 Int) (Start_10 Int) (StartBool_4 Bool) (Start_3 Int) (Start_5 Int) (Start_4 Int) (StartBool_6 Bool) (StartBool_1 Bool) (StartBool_2 Bool) (StartBool_5 Bool) (StartBool_3 Bool) (Start_8 Int) (Start_6 Int) (Start_9 Int))
  ((Start Int (y (- Start Start_1) (* Start Start_1) (div Start_1 Start) (mod Start_2 Start_3)))
   (StartBool Bool (true false (and StartBool_4 StartBool_6) (< Start_6 Start_10) (= Start_10 Start_8) (>= Start Start_8) (> Start_6 Start)))
   (Start_1 Int (3 (- Start) (- Start Start_1) (mod Start_4 Start_6) (ite StartBool_2 Start_9 Start_5)))
   (Start_11 Int (y 2 x (* Start_9 Start_6) (ite StartBool Start_10 Start_1)))
   (Start_2 Int (4 5 (- Start_5) (+ Start_2 Start_2) (* Start_7 Start_11)))
   (Start_7 Int (2 0 (+ Start_10 Start) (div Start_6 Start_3) (abs Start_2)))
   (Start_10 Int (0 (+ Start_5 Start_7) (div Start_2 Start_4) (mod Start_9 Start_7)))
   (StartBool_4 Bool (false true (<= Start_5 Start_1) (= Start_7 Start_4) (>= Start_2 Start_4) (> Start_8 Start)))
   (Start_3 Int (5 x (+ Start_2 Start) (div Start_2 Start_4) (ite StartBool_1 Start Start_3)))
   (Start_5 Int (4 x 3 (- Start_2 Start_3) (* Start_3 Start_1) (div Start Start_2) (mod Start_5 Start_2) (abs Start_3) (ite StartBool Start_1 Start_4)))
   (Start_4 Int (y 3 (* Start_5 Start_6) (mod Start_4 Start_4) (abs Start) (ite StartBool_1 Start_4 Start)))
   (StartBool_6 Bool (false true (or StartBool StartBool_4) (<= Start_10 Start_5) (= Start Start_2) (>= Start_3 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_1) (< Start_3 Start_1) (= Start_3 Start_5)))
   (StartBool_2 Bool (false true (not StartBool_3) (< Start_6 Start_2) (> Start_5 Start_4)))
   (StartBool_5 Bool (false true (not StartBool_6) (and StartBool_6 StartBool_2) (or StartBool_4 StartBool_1) (< Start_8 Start) (>= Start_9 Start_2) (> Start_3 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool_3 StartBool) (or StartBool_3 StartBool_4) (< Start_3 Start)))
   (Start_8 Int (4 x (- Start_8) (- Start_9 Start_9) (+ Start Start_1) (ite StartBool_4 Start_8 Start_7)))
   (Start_6 Int (5 0 (- Start) (* Start_6 Start_5) (mod Start_6 Start_1) (abs Start_2) (ite StartBool_2 Start_3 Start_6)))
   (Start_9 Int (3 2 5 (mod Start_2 Start_6) (ite StartBool_5 Start_2 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div (* x 4) 5) (* (abs x) 5))))

(check-synth)
