(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_12 Int) (Start_14 Int) (Start_2 Int) (StartBool_1 Bool) (Start_8 Int) (Start_3 Int) (Start_4 Int) (Start_5 Int) (Start_6 Int) (StartBool_6 Bool) (StartBool_4 Bool) (Start_13 Int) (Start_1 Int) (Start_9 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_10 Int) (Start_11 Int) (Start_7 Int) (StartBool_5 Bool))
  ((Start Int (1 5 (- Start) (* Start Start) (ite StartBool Start_1 Start)))
   (StartBool Bool (false true (not StartBool_6) (or StartBool_1 StartBool_4)))
   (Start_15 Int (0 x (- Start_15) (div Start_2 Start_5) (abs Start_9)))
   (Start_12 Int (1 3 5 y 4 0 2 (- Start_15) (- Start_14 Start_10) (+ Start_11 Start_9) (* Start Start_6) (mod Start_12 Start_14)))
   (Start_14 Int (x (- Start_7) (+ Start_12 Start_1) (* Start_5 Start_6) (mod Start Start_6) (abs Start_4)))
   (Start_2 Int (5 0 (- Start_7) (+ Start_6 Start_2) (* Start_10 Start_2) (abs Start_4) (ite StartBool_5 Start_6 Start_7)))
   (StartBool_1 Bool (false true (and StartBool_3 StartBool_1) (<= Start_4 Start_7) (= Start_1 Start_4) (>= Start_6 Start)))
   (Start_8 Int (5 0 (- Start_6) (- Start_6 Start) (* Start_10 Start_3)))
   (Start_3 Int (x (- Start_2) (* Start_2 Start_1) (div Start_3 Start_2) (mod Start Start_1) (abs Start) (ite StartBool_2 Start Start_4)))
   (Start_4 Int (x (* Start_4 Start_1) (div Start_2 Start_5) (abs Start_5)))
   (Start_5 Int (1 (- Start) (+ Start_3 Start_5) (mod Start_6 Start_1) (abs Start_6)))
   (Start_6 Int (x 4 1 y (- Start_2 Start_3) (mod Start_1 Start_6) (ite StartBool_3 Start_7 Start_4)))
   (StartBool_6 Bool (false true (< Start_1 Start_1) (<= Start_11 Start_12) (> Start_10 Start_13)))
   (StartBool_4 Bool (false (or StartBool StartBool_2) (> Start_8 Start_9)))
   (Start_13 Int (1 (- Start_7 Start_4) (+ Start_8 Start_8) (* Start_11 Start_2) (ite StartBool_4 Start_6 Start_14)))
   (Start_1 Int (1 (- Start_2) (+ Start Start_1) (* Start Start) (div Start Start_1) (abs Start_2) (ite StartBool_1 Start_3 Start_2)))
   (Start_9 Int (5 0 (- Start_2) (- Start_10 Start_2) (* Start_5 Start_5) (div Start_3 Start) (abs Start_6) (ite StartBool_1 Start_9 Start_6)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool_2 StartBool_4) (or StartBool_3 StartBool) (< Start_5 Start_4)))
   (StartBool_2 Bool (false true (<= Start_7 Start) (= Start_7 Start_4) (>= Start_5 Start_11)))
   (Start_10 Int (5 4 3 (- Start Start_10) (div Start_8 Start_11) (abs Start_2) (ite StartBool_2 Start_8 Start_4)))
   (Start_11 Int (3 (abs Start_8) (ite StartBool_5 Start_4 Start_10)))
   (Start_7 Int (5 (- Start) (- Start_1 Start_6) (+ Start_1 Start_5) (* Start_6 Start_1) (div Start_3 Start_4) (mod Start_4 Start_3) (ite StartBool_3 Start_4 Start_5)))
   (StartBool_5 Bool (true false (not StartBool_1) (and StartBool_5 StartBool_4) (<= Start_4 Start_10) (> Start_4 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 3 y)))

(check-synth)
