(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_21 Int) (Start_6 Int) (StartBool_4 Bool) (Start_10 Int) (Start_5 Int) (Start_4 Int) (Start_11 Int) (Start_22 Int) (Start_7 Int) (Start_18 Int) (Start_1 Int) (StartBool_1 Bool) (Start_9 Int) (Start_8 Int) (Start_13 Int) (Start_12 Int) (Start_2 Int) (StartBool_3 Bool) (Start_14 Int) (Start_15 Int) (Start_17 Int) (StartBool_6 Bool) (Start_16 Int) (StartBool_5 Bool) (Start_19 Int) (Start_3 Int) (Start_20 Int))
  ((Start Int (0 (- Start_1) (- Start_1 Start_1) (div Start Start_2) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (true (not StartBool_5) (and StartBool_4 StartBool_6) (or StartBool_2 StartBool_4) (= Start_3 Start_16)))
   (StartBool_2 Bool (true false (>= Start_7 Start_11)))
   (Start_21 Int (4 (- Start_8 Start_3) (+ Start_19 Start_10) (* Start_8 Start_10) (div Start_15 Start_15) (abs Start_15)))
   (Start_6 Int (0 5 (- Start_6)))
   (StartBool_4 Bool (true (and StartBool_6 StartBool) (or StartBool_5 StartBool) (>= Start_5 Start_1) (> Start_16 Start_17)))
   (Start_10 Int (3 (* Start Start_7) (div Start_4 Start_3) (mod Start_1 Start_8)))
   (Start_5 Int (5 0 (- Start_2) (- Start_6 Start_4) (+ Start_2 Start_4) (* Start_5 Start_7) (abs Start_2) (ite StartBool_1 Start_3 Start_7)))
   (Start_4 Int (3 (- Start_4 Start) (+ Start_5 Start_2) (ite StartBool_2 Start Start_2)))
   (Start_11 Int (x y 0 4 (+ Start_12 Start_4) (* Start_8 Start_1) (div Start_12 Start) (mod Start_12 Start_12) (ite StartBool_3 Start_13 Start_5)))
   (Start_22 Int (4 2 (- Start_17) (- Start_16 Start_12) (abs Start_21) (ite StartBool_5 Start_19 Start_2)))
   (Start_7 Int (0 (+ Start_5 Start_4) (* Start_8 Start_5) (mod Start_3 Start_1)))
   (Start_18 Int (1 5 4 (- Start_1 Start_13) (* Start_17 Start_4) (div Start Start_1) (mod Start_4 Start_10) (ite StartBool_2 Start_2 Start_19)))
   (Start_1 Int (2 (* Start_2 Start_3) (ite StartBool_2 Start_4 Start_4)))
   (StartBool_1 Bool (true false (not StartBool_1) (or StartBool StartBool) (<= Start_1 Start) (>= Start_1 Start)))
   (Start_9 Int (5 (- Start_6) (- Start_4 Start_4) (* Start_4 Start_4) (ite StartBool Start_10 Start_7)))
   (Start_8 Int (5 0 1 y (- Start_9 Start_8) (ite StartBool_1 Start_5 Start_2)))
   (Start_13 Int (4 (* Start_4 Start_1) (mod Start_9 Start_6) (ite StartBool Start_8 Start_4)))
   (Start_12 Int (2 x (* Start Start_5) (abs Start_15) (ite StartBool_3 Start Start_15)))
   (Start_2 Int (y (- Start) (ite StartBool Start_1 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_5 StartBool_6) (<= Start_2 Start_14)))
   (Start_14 Int (5 (- Start_10) (- Start_10 Start_4) (abs Start_8) (ite StartBool_3 Start_2 Start_15)))
   (Start_15 Int (3 (- Start_2 Start_6) (+ Start_15 Start_4) (ite StartBool_6 Start_15 Start)))
   (Start_17 Int (x 5 0 (- Start_18) (- Start_7 Start_4) (+ Start_9 Start_18) (* Start_3 Start_11) (div Start_17 Start_9) (abs Start_3)))
   (StartBool_6 Bool (true false (> Start_15 Start_5)))
   (Start_16 Int (2 (* Start_4 Start_3) (ite StartBool_5 Start_6 Start_9)))
   (StartBool_5 Bool (true (or StartBool_3 StartBool_3) (< Start_2 Start_12) (<= Start_5 Start_12) (= Start_1 Start_11) (>= Start_9 Start_13) (> Start_5 Start_14)))
   (Start_19 Int (4 (- Start_6 Start_18) (+ Start_3 Start_18) (* Start_12 Start_16) (div Start_3 Start_9) (mod Start_11 Start_17) (ite StartBool_1 Start_1 Start_8)))
   (Start_3 Int (1 x (+ Start_7 Start_17) (* Start_4 Start_1) (mod Start_18 Start_7) (abs Start_20) (ite StartBool_4 Start_19 Start_8)))
   (Start_20 Int (2 (- Start_3) (+ Start_16 Start) (* Start_2 Start_5) (div Start_21 Start_22) (mod Start_18 Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (mod y 3) 3)))

(check-synth)
