(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_21 Int) (Start_1 Int) (Start_20 Int) (Start_2 Int) (Start_18 Int) (StartBool_4 Bool) (Start_19 Int) (Start_16 Int) (Start_4 Int) (Start_10 Int) (Start_15 Int) (Start_14 Int) (StartBool_1 Bool) (Start_17 Int) (Start_3 Int) (Start_12 Int) (StartBool_2 Bool) (Start_6 Int) (Start_8 Int) (Start_9 Int) (StartBool_3 Bool) (Start_13 Int) (Start_5 Int) (Start_7 Int) (Start_11 Int))
  ((Start Int (0 x 4 (- Start_1 Start_1) (+ Start_2 Start) (mod Start_2 Start_3) (abs Start_3)))
   (StartBool Bool (false true (< Start_12 Start_18) (<= Start_3 Start_13)))
   (Start_21 Int (5 2 (- Start_17) (+ Start_18 Start_15) (* Start_5 Start_5) (div Start_1 Start_6) (ite StartBool_3 Start_10 Start_21)))
   (Start_1 Int (3 x 1 y 0 4 (- Start_14) (+ Start_9 Start_7) (* Start_20 Start_6) (abs Start_21)))
   (Start_20 Int (2 (+ Start_15 Start_16) (div Start_3 Start_2)))
   (Start_2 Int (3 (- Start_14 Start_18) (+ Start_10 Start_9) (* Start_12 Start_2) (mod Start_16 Start_5) (ite StartBool_4 Start_14 Start_10)))
   (Start_18 Int (0 4 (- Start_1) (- Start_11 Start_7) (+ Start_9 Start_11) (mod Start_14 Start_18) (ite StartBool_1 Start_19 Start_6)))
   (StartBool_4 Bool (false true (and StartBool_2 StartBool_4) (< Start_1 Start_3) (<= Start_18 Start_4) (= Start Start_11) (>= Start Start)))
   (Start_19 Int (0 (- Start_6) (mod Start_10 Start_11) (abs Start_7) (ite StartBool_4 Start_7 Start_4)))
   (Start_16 Int (y 2 3 4 (- Start_2) (- Start_17 Start_16) (* Start_11 Start_6) (mod Start_4 Start_1) (abs Start_6)))
   (Start_4 Int (0 (+ Start_7 Start_10) (* Start_2 Start_3) (mod Start_16 Start_13) (abs Start_13) (ite StartBool_2 Start_10 Start_6)))
   (Start_10 Int (0 (+ Start_2 Start_2) (* Start_4 Start_7) (div Start_9 Start_8)))
   (Start_15 Int (4 3 2 1 (- Start_1) (+ Start_11 Start_8) (* Start_7 Start_8) (mod Start_7 Start) (abs Start_14)))
   (Start_14 Int (5 x 2 y 1 4 (- Start_12) (* Start_4 Start_8) (div Start_7 Start_4) (mod Start_7 Start_4) (ite StartBool Start_14 Start_15)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool StartBool_2) (or StartBool_1 StartBool_1)))
   (Start_17 Int (2 x (- Start_3) (- Start_6 Start_10) (div Start_18 Start_19) (mod Start_18 Start_7)))
   (Start_3 Int (0 1 y (+ Start_1 Start_4) (ite StartBool_1 Start_3 Start)))
   (Start_12 Int (3 y 1 4 2 0 5 x (- Start_4) (- Start_9 Start_4) (+ Start_9 Start_13) (div Start_13 Start_11) (abs Start_8)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_2 StartBool_3) (<= Start_5 Start_6) (>= Start_1 Start_4)))
   (Start_6 Int (0 (- Start_4) (- Start_5 Start_2) (+ Start_3 Start_4) (div Start_7 Start_3) (mod Start_4 Start_5)))
   (Start_8 Int (4 (mod Start_2 Start_1) (abs Start_1) (ite StartBool_2 Start_8 Start_2)))
   (Start_9 Int (4 x 1 (- Start_8 Start_5) (+ Start Start_2) (ite StartBool Start_9 Start_5)))
   (StartBool_3 Bool (true false (not StartBool_2) (< Start Start_10) (<= Start_6 Start_11) (= Start_12 Start_6) (> Start Start_2)))
   (Start_13 Int (1 5 (* Start Start) (mod Start_9 Start_1) (abs Start_1)))
   (Start_5 Int (4 (abs Start_9)))
   (Start_7 Int (y 3 (- Start_2) (- Start Start) (div Start_8 Start_7) (mod Start_3 Start)))
   (Start_11 Int (y 5 (- Start_14) (- Start Start) (ite StartBool_1 Start_6 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod 3 (abs y)))))

(check-synth)
