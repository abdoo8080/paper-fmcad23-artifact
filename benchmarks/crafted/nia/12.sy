(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_3 Int) (Start_4 Int) (Start_1 Int) (Start_8 Int) (Start_6 Int) (Start_7 Int) (Start_5 Int) (Start_10 Int) (Start_9 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_2 Int))
  ((Start Int (1 (- Start_1) (- Start_1 Start_2) (+ Start_1 Start) (* Start_1 Start_2) (mod Start_1 Start_3)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_2 StartBool_3) (< Start_5 Start) (= Start_10 Start_4)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_1) (< Start_4 Start_3) (<= Start_3 Start_5) (> Start_5 Start)))
   (Start_3 Int (0 (- Start_3) (- Start_1 Start_1) (+ Start_4 Start_3) (abs Start_3) (ite StartBool Start_2 Start_2)))
   (Start_4 Int (y 1 2 (- Start_3) (- Start_4 Start_3) (div Start_1 Start_2) (ite StartBool_1 Start_2 Start_2)))
   (Start_1 Int (1 (- Start) (div Start Start_1)))
   (Start_8 Int (0 x (* Start_2 Start_5) (mod Start_9 Start_6) (ite StartBool_3 Start_3 Start_6)))
   (Start_6 Int (1 y (* Start_1 Start_9) (mod Start_8 Start_4) (abs Start_10) (ite StartBool_2 Start_4 Start_2)))
   (Start_7 Int (4 2 (- Start_6) (- Start_6 Start_2) (+ Start_5 Start_8) (* Start_2 Start_6) (div Start_1 Start_5) (abs Start_6)))
   (Start_5 Int (x (* Start Start) (mod Start_4 Start_6) (ite StartBool_2 Start_1 Start_7)))
   (Start_10 Int (4 (- Start_3 Start_3) (* Start_4 Start_1) (div Start_3 Start_5) (mod Start_5 Start_4) (abs Start_1)))
   (Start_9 Int (2 3 0 (- Start_1) (div Start_6 Start) (abs Start_4) (ite StartBool Start_7 Start_3)))
   (StartBool_2 Bool (false true (>= Start_6 Start_7)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_3) (< Start_5 Start) (<= Start Start_6) (> Start_4 Start)))
   (Start_2 Int (x (+ Start_1 Start_1) (div Start_6 Start_3) (abs Start_9) (ite StartBool Start_5 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div y 4))))

(check-synth)
