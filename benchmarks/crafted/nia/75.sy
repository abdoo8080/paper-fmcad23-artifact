(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_8 Int) (Start_2 Int) (Start_5 Int) (Start_7 Int) (StartBool_1 Bool) (Start_4 Int) (Start_6 Int) (Start_3 Int) (Start_1 Int))
  ((Start Int (2 3 1 x 4 5 0 y (ite StartBool_1 Start Start_1)))
   (StartBool Bool (false true (and StartBool StartBool_2) (or StartBool StartBool) (< Start_6 Start_7) (<= Start_8 Start_7) (= Start_1 Start_7) (> Start_6 Start_5)))
   (StartBool_2 Bool (false true (<= Start_2 Start) (= Start_7 Start_4)))
   (Start_8 Int (1 (* Start_2 Start_3) (div Start_1 Start)))
   (Start_2 Int (x (* Start_3 Start_3) (div Start_6 Start_5) (mod Start_1 Start_3) (abs Start) (ite StartBool Start_5 Start_6)))
   (Start_5 Int (5 (- Start_2) (ite StartBool Start Start_1)))
   (Start_7 Int (1 (- Start_3) (+ Start_7 Start_8) (* Start_1 Start_8) (mod Start_6 Start)))
   (StartBool_1 Bool (true (not StartBool_1) (or StartBool StartBool_1) (< Start_1 Start_6) (= Start_4 Start_2) (>= Start_1 Start_4)))
   (Start_4 Int (5 0 (- Start_2) (- Start_5 Start_3) (+ Start Start_5) (* Start_1 Start_1) (div Start_3 Start_4) (mod Start_6 Start_2)))
   (Start_6 Int (2 (- Start_4) (- Start_5 Start_1) (* Start_2 Start_2) (div Start_1 Start_6) (mod Start Start)))
   (Start_3 Int (y 1 0 2 (- Start_2) (- Start_4 Start_3) (* Start_3 Start) (abs Start_4)))
   (Start_1 Int (x 0 (- Start_1) (* Start Start) (div Start Start_2) (abs Start) (ite StartBool_1 Start Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* (- 2) (- y 1)))))

(check-synth)
