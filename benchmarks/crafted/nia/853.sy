(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (StartBool_8 Bool) (StartBool_1 Bool) (Start_6 Int) (Start_14 Int) (StartBool_6 Bool) (StartBool_5 Bool) (StartBool_9 Bool) (Start_3 Int) (Start_5 Int) (Start_10 Int) (Start_4 Int) (StartBool_3 Bool) (Start_9 Int) (Start_11 Int) (StartBool_4 Bool) (Start_7 Int) (Start_12 Int) (StartBool_7 Bool) (StartBool_2 Bool) (Start_13 Int) (Start_8 Int))
  ((Start Int (2 3 (- Start) (- Start Start_1) (div Start_1 Start) (mod Start Start_1) (abs Start_2) (ite StartBool_1 Start_3 Start_2)))
   (StartBool Bool (true (not StartBool_8) (and StartBool StartBool_9) (or StartBool_7 StartBool_3) (< Start Start_10) (> Start_9 Start_8)))
   (Start_1 Int (3 (- Start_3) (- Start_4 Start_6) (+ Start_6 Start_12) (* Start_5 Start_14) (abs Start_14) (ite StartBool_8 Start_6 Start_3)))
   (Start_2 Int (3 (* Start_14 Start_4) (div Start_6 Start) (abs Start_2)))
   (StartBool_8 Bool (false (or StartBool_2 StartBool_1) (< Start_5 Start_1) (<= Start_4 Start_6) (= Start_11 Start_3) (>= Start Start_9) (> Start_5 Start_10)))
   (StartBool_1 Bool (false (and StartBool StartBool_3) (or StartBool_6 StartBool_7) (= Start_1 Start_1) (>= Start_13 Start_11)))
   (Start_6 Int (1 (- Start_10 Start_6) (+ Start_11 Start_4) (mod Start_14 Start_12)))
   (Start_14 Int (4 x 1 (- Start_12 Start_6) (mod Start_3 Start_11) (abs Start_3) (ite StartBool_6 Start_10 Start_12)))
   (StartBool_6 Bool (true (not StartBool_3) (or StartBool_5 StartBool_2) (<= Start_2 Start_10) (= Start_14 Start_6) (> Start_3 Start)))
   (StartBool_5 Bool (true (or StartBool_1 StartBool_6) (< Start_1 Start_13) (<= Start_6 Start_4)))
   (StartBool_9 Bool (false (not StartBool_8) (and StartBool_3 StartBool_5) (<= Start Start_1) (= Start_13 Start_14) (> Start_11 Start_6)))
   (Start_3 Int (3 5 x (- Start) (* Start Start_2) (div Start_1 Start_4) (abs Start_3)))
   (Start_5 Int (2 y (- Start_11) (+ Start_7 Start_1)))
   (Start_10 Int (3 5 (- Start) (- Start_2 Start_12) (+ Start_8 Start_13) (* Start_8 Start_6) (div Start_9 Start) (abs Start_5)))
   (Start_4 Int (5 (- Start_5) (- Start Start_6) (+ Start Start_3) (mod Start_2 Start_7) (ite StartBool_2 Start_3 Start_1)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_2 StartBool) (or StartBool_1 StartBool_3) (= Start_7 Start_2) (>= Start_4 Start_11) (> Start_5 Start_11)))
   (Start_9 Int (1 (- Start_10 Start_2) (+ Start_1 Start_9) (* Start_10 Start_11) (ite StartBool_3 Start Start_11)))
   (Start_11 Int (0 1 2 5 4 3 x y (+ Start_3 Start_6) (div Start_12 Start_7) (ite StartBool_4 Start_2 Start_11)))
   (StartBool_4 Bool (false (not StartBool_2) (= Start_11 Start_3) (>= Start_4 Start_1)))
   (Start_7 Int (y 0 (- Start) (- Start_9 Start_3) (+ Start_8 Start_11) (mod Start_9 Start_12) (ite StartBool_5 Start_8 Start_3)))
   (Start_12 Int (3 y 4 (mod Start_7 Start_6)))
   (StartBool_7 Bool (false (and StartBool StartBool_8) (= Start_8 Start_3) (> Start_11 Start_2)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_1 StartBool_1) (< Start_4 Start) (>= Start_8 Start_9)))
   (Start_13 Int (3 x 1 (- Start_9) (* Start_2 Start_12) (mod Start_12 Start_8) (ite StartBool_4 Start_5 Start_7)))
   (Start_8 Int (3 y (+ Start_2 Start_7) (* Start_4 Start_7) (div Start_7 Start_13) (mod Start_10 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (+ 4 4) x)))

(check-synth)
