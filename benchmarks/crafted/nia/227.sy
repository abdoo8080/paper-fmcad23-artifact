(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (StartBool_3 Bool) (Start_13 Int) (StartBool_5 Bool) (Start_10 Int) (Start_1 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartBool_6 Bool) (Start_4 Int) (Start_5 Int) (Start_6 Int) (Start_7 Int) (Start_8 Int) (Start_12 Int) (Start_9 Int) (Start_3 Int) (Start_2 Int) (StartBool_4 Bool) (Start_11 Int))
  ((Start Int (0 5 (- Start) (- Start Start_1) (* Start_1 Start) (div Start Start_1) (abs Start_1)))
   (StartBool Bool (false (not StartBool_2) (and StartBool StartBool) (or StartBool_3 StartBool_2) (<= Start Start_11) (> Start_9 Start_11)))
   (Start_14 Int (3 2 1 x (+ Start_9 Start_9) (mod Start_6 Start_14)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_4 StartBool) (<= Start_4 Start_5) (>= Start_10 Start_7) (> Start Start_5)))
   (Start_13 Int (5 1 0 2 x (- Start_9) (+ Start_2 Start_8) (div Start_6 Start_11) (ite StartBool Start_5 Start_10)))
   (StartBool_5 Bool (true false (< Start_4 Start_8) (<= Start_13 Start_8) (= Start_1 Start_11) (>= Start_12 Start_11) (> Start Start_5)))
   (Start_10 Int (5 3 (- Start_10) (+ Start_1 Start_1) (* Start_5 Start_3) (abs Start_3)))
   (Start_1 Int (x 2 (* Start_2 Start_3) (div Start Start_4) (mod Start_4 Start)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_3 StartBool_3) (or StartBool_6 StartBool_6) (< Start_14 Start_13) (<= Start Start_3)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_1 StartBool) (>= Start_1 Start) (> Start_7 Start_4)))
   (StartBool_6 Bool (false true (= Start_12 Start_1) (>= Start_10 Start_1) (> Start_8 Start)))
   (Start_4 Int (4 (+ Start_1 Start_5) (* Start_5 Start_2) (div Start_3 Start_5) (abs Start_1) (ite StartBool_1 Start_6 Start_6)))
   (Start_5 Int (5 (- Start_8 Start_3) (mod Start_6 Start_6) (abs Start_2) (ite StartBool_1 Start Start_9)))
   (Start_6 Int (0 (- Start_3) (+ Start_6 Start_2) (mod Start_5 Start_2) (abs Start_2)))
   (Start_7 Int (4 y x 1 (+ Start_7 Start) (* Start_8 Start_3) (mod Start_4 Start_7)))
   (Start_8 Int (3 (+ Start_4 Start_3) (* Start_7 Start_1) (div Start_3 Start_1) (mod Start_1 Start_2) (abs Start_7) (ite StartBool Start_1 Start_5)))
   (Start_12 Int (3 0 (- Start_10) (- Start_3 Start_10) (* Start_1 Start_12) (mod Start_6 Start_1) (abs Start_11) (ite StartBool_4 Start Start_1)))
   (Start_9 Int (y (- Start_3) (- Start_1 Start_9) (+ Start_10 Start_9) (* Start_8 Start_10) (mod Start_9 Start_8) (abs Start_3)))
   (Start_3 Int (1 2 0 3 4 (* Start_8 Start_4) (mod Start Start_6)))
   (Start_2 Int (3 (- Start_1) (mod Start_9 Start_6) (ite StartBool Start Start_3)))
   (StartBool_4 Bool (false (and StartBool_1 StartBool_5) (= Start_8 Start_12) (> Start_4 Start_9)))
   (Start_11 Int (2 1 (+ Start_1 Start) (* Start_4 Start) (abs Start_6) (ite StartBool_4 Start_7 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div (+ x (+ 4 4)) 0) 5)))

(check-synth)
