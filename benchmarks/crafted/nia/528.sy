(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (Start_13 Int) (Start_15 Int) (Start_14 Int) (Start_6 Int) (Start_1 Int) (StartBool_1 Bool) (Start_2 Int) (StartBool_3 Bool) (Start_7 Int) (Start_11 Int) (Start_4 Int) (Start_8 Int) (Start_9 Int) (Start_5 Int) (Start_10 Int) (Start_12 Int) (StartBool_2 Bool))
  ((Start Int (4 (- Start_1) (- Start_1 Start) (+ Start Start) (div Start Start_2) (abs Start_1) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true (and StartBool_1 StartBool_3) (or StartBool_1 StartBool_1) (< Start_14 Start_7) (>= Start_15 Start_8)))
   (Start_3 Int (x 3 (- Start_14) (+ Start_7 Start) (* Start_7 Start_11) (mod Start_10 Start_3) (ite StartBool Start_9 Start)))
   (Start_13 Int (2 (- Start_9) (+ Start_11 Start_5) (* Start_4 Start_5) (abs Start_7) (ite StartBool Start_9 Start_2)))
   (Start_15 Int (0 (- Start_10) (+ Start_13 Start_8) (* Start_5 Start_8) (mod Start_11 Start_4) (ite StartBool_1 Start_8 Start_11)))
   (Start_14 Int (0 (- Start_1) (- Start_13 Start_13) (* Start_2 Start_15) (div Start_9 Start_9)))
   (Start_6 Int (1 (- Start_3) (- Start_13 Start_1) (+ Start_5 Start_8) (* Start_14 Start_2) (abs Start_7) (ite StartBool_2 Start_6 Start_6)))
   (Start_1 Int (x y (* Start_4 Start_2) (ite StartBool Start_11 Start_14)))
   (StartBool_1 Bool (true false (= Start_2 Start_2)))
   (Start_2 Int (1 x (- Start_1) (+ Start_1 Start_3) (* Start Start_4) (abs Start_2)))
   (StartBool_3 Bool (true (not StartBool) (= Start_9 Start_8)))
   (Start_7 Int (y 5 0 (- Start_4 Start_8) (* Start_7 Start_1) (div Start Start_2) (ite StartBool_2 Start_1 Start_7)))
   (Start_11 Int (2 (- Start_3) (- Start_7 Start_1) (+ Start_12 Start_5) (mod Start_12 Start_10) (abs Start_6) (ite StartBool Start Start_2)))
   (Start_4 Int (5 (- Start_2) (+ Start_1 Start_5) (abs Start)))
   (Start_8 Int (2 1 (- Start_5) (mod Start_7 Start_7) (ite StartBool_3 Start_6 Start_5)))
   (Start_9 Int (2 5 y (- Start_1) (+ Start_8 Start_1) (mod Start_5 Start_2) (ite StartBool_3 Start_10 Start_1)))
   (Start_5 Int (1 (- Start_4) (- Start_5 Start_3) (+ Start_4 Start_6) (* Start_4 Start_2) (abs Start_3) (ite StartBool_2 Start_7 Start_7)))
   (Start_10 Int (4 1 x 5 (- Start_3) (- Start_9 Start_2) (+ Start_11 Start) (div Start_12 Start_12) (mod Start_12 Start_10)))
   (Start_12 Int (0 3 (+ Start_9 Start_9) (div Start_12 Start) (mod Start_1 Start_11) (abs Start_2)))
   (StartBool_2 Bool (false true (>= Start_12 Start_11) (> Start_11 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (* x (- 3)) (+ 1 5))))

(check-synth)
