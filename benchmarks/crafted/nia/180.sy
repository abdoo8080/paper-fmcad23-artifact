(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_14 Int) (Start_1 Int) (Start_2 Int) (StartBool_6 Bool) (Start_13 Int) (Start_16 Int) (Start_15 Int) (Start_9 Int) (Start_5 Int) (Start_12 Int) (Start_3 Int) (StartBool_2 Bool) (Start_7 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_4 Int) (Start_8 Int) (Start_6 Int) (Start_10 Int) (Start_11 Int))
  ((Start Int (4 (* Start Start_1) (div Start_2 Start_1) (abs Start_3) (ite StartBool_1 Start Start_3)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool StartBool_4) (<= Start_4 Start_15) (> Start_1 Start_8)))
   (Start_17 Int (4 (- Start_4) (- Start Start_15) (+ Start_12 Start_1) (* Start_12 Start_8) (abs Start_5)))
   (StartBool_5 Bool (true (not StartBool_5) (and StartBool StartBool_5) (or StartBool_6 StartBool_4) (< Start_1 Start_11)))
   (StartBool_4 Bool (false true (not StartBool_5) (or StartBool_4 StartBool_5) (< Start_8 Start_13) (= Start_12 Start_11)))
   (Start_14 Int (x (- Start_14) (* Start_11 Start_12)))
   (Start_1 Int (5 (- Start_8) (- Start_13 Start_14) (+ Start_1 Start_7) (mod Start_11 Start_14) (abs Start_4)))
   (Start_2 Int (4 (- Start_10) (mod Start_8 Start) (abs Start_7)))
   (StartBool_6 Bool (true (not StartBool_4) (and StartBool_6 StartBool_5) (or StartBool_6 StartBool) (< Start_13 Start_14) (<= Start_5 Start_2) (= Start Start_16) (> Start Start_16)))
   (Start_13 Int (y 3 x 0 (- Start_10 Start_12) (abs Start_6) (ite StartBool Start_9 Start_10)))
   (Start_16 Int (y (- Start_1) (* Start_7 Start_11) (div Start_9 Start_17) (ite StartBool_2 Start_4 Start_6)))
   (Start_15 Int (y (- Start_2) (- Start_7 Start_9) (* Start_9 Start_7)))
   (Start_9 Int (5 (+ Start_4 Start_2) (div Start_4 Start_4) (mod Start Start_4)))
   (Start_5 Int (0 (+ Start_6 Start_6) (div Start_3 Start_3) (mod Start_3 Start_6) (abs Start_6)))
   (Start_12 Int (0 3 (- Start_11) (- Start Start) (+ Start_8 Start_5) (* Start_13 Start) (div Start_4 Start_11) (abs Start_4)))
   (Start_3 Int (5 x (- Start_8) (* Start_3 Start_9) (mod Start Start_11)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_3) (< Start_6 Start_1) (<= Start_4 Start_7) (= Start_4 Start_5) (> Start_6 Start_2)))
   (Start_7 Int (y 0 3 x (- Start_1 Start_7) (* Start_5 Start_7) (abs Start)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_1) (< Start_4 Start_3) (= Start_2 Start_4) (>= Start_5 Start_5)))
   (StartBool_3 Bool (false (not StartBool) (<= Start_8 Start_1) (= Start_6 Start_1) (> Start Start_7)))
   (Start_4 Int (3 1 (- Start_6) (div Start_3 Start)))
   (Start_8 Int (3 (- Start_8 Start_2) (+ Start_6 Start_6) (div Start_1 Start_3) (mod Start_7 Start_9) (abs Start_3) (ite StartBool_2 Start_5 Start_10)))
   (Start_6 Int (4 1 (+ Start_3 Start_4) (div Start_3 Start) (mod Start Start_1)))
   (Start_10 Int (0 x (- Start_5) (- Start_10 Start_6) (+ Start Start_1) (div Start_9 Start_1) (abs Start_10)))
   (Start_11 Int (4 y 1 (- Start_8 Start_6) (* Start_12 Start_2) (abs Start_1) (ite StartBool_3 Start_3 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* x 2))))

(check-synth)
