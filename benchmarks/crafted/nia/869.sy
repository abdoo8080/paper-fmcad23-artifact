(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_12 Int) (Start_11 Int) (Start_10 Int) (Start_8 Int) (Start_7 Int) (Start_3 Int) (StartBool_2 Bool) (Start_4 Int) (StartBool_3 Bool) (StartBool_5 Bool) (Start_5 Int) (StartBool_1 Bool) (Start_9 Int) (StartBool_4 Bool) (Start_6 Int) (Start_2 Int) (StartBool_6 Bool))
  ((Start Int (5 (- Start) (+ Start Start_1) (* Start_2 Start_3) (mod Start_4 Start_5) (abs Start_6) (ite StartBool_1 Start_6 Start_6)))
   (StartBool Bool (true false (not StartBool_1) (or StartBool_3 StartBool_6) (>= Start_9 Start_11)))
   (Start_1 Int (x 1 5 y 3 2 4 0 (- Start_7) (- Start_6 Start_11) (+ Start_9 Start_1) (mod Start_9 Start_2) (ite StartBool_1 Start_11 Start_7)))
   (Start_12 Int (x 3 1 (* Start_5 Start) (div Start_8 Start_2) (mod Start_1 Start)))
   (Start_11 Int (2 (- Start_11) (+ Start_3 Start) (div Start_8 Start_11) (abs Start_12) (ite StartBool Start_4 Start_3)))
   (Start_10 Int (5 4 y 0 (- Start_4 Start_3) (* Start_4 Start_3) (div Start_4 Start_10)))
   (Start_8 Int (4 (- Start_4) (- Start Start_4) (ite StartBool_2 Start_1 Start_1)))
   (Start_7 Int (x (- Start_8) (div Start_5 Start_9) (mod Start_5 Start)))
   (Start_3 Int (3 (+ Start Start_7) (* Start Start_8) (mod Start_10 Start_3) (ite StartBool_3 Start_5 Start)))
   (StartBool_2 Bool (false (not StartBool) (or StartBool_4 StartBool_5) (= Start_5 Start_5) (>= Start_3 Start_4) (> Start_9 Start_5)))
   (Start_4 Int (3 0 x (- Start Start_2) (div Start_3 Start_5) (abs Start_8)))
   (StartBool_3 Bool (true false (and StartBool StartBool_2) (>= Start_1 Start)))
   (StartBool_5 Bool (false true (and StartBool StartBool) (or StartBool_3 StartBool_1) (< Start_4 Start_7) (<= Start_1 Start_1) (= Start_9 Start_2) (>= Start_6 Start) (> Start_6 Start_6)))
   (Start_5 Int (3 0 y (- Start_7) (+ Start_10 Start) (* Start_8 Start_7) (abs Start_10) (ite StartBool_6 Start_4 Start)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (or StartBool_3 StartBool_3) (<= Start_7 Start_8) (>= Start_2 Start_1)))
   (Start_9 Int (3 (- Start_4) (- Start_2 Start_2) (+ Start_4 Start_4) (* Start Start_5) (abs Start_5) (ite StartBool_1 Start_9 Start_4)))
   (StartBool_4 Bool (true false (and StartBool_1 StartBool_2) (or StartBool_3 StartBool) (< Start_7 Start_7) (> Start_1 Start)))
   (Start_6 Int (2 5 (- Start_6) (mod Start_5 Start_9) (abs Start_8)))
   (Start_2 Int (1 2 (- Start_2 Start_3) (+ Start_8 Start_11) (* Start_5 Start) (div Start_4 Start_3) (mod Start_6 Start_3)))
   (StartBool_6 Bool (false (or StartBool_5 StartBool_5) (<= Start_3 Start_6) (> Start_4 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 2 (div x y))))

(check-synth)
