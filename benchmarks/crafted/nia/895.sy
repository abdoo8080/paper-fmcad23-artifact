(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_17 Int) (StartBool_4 Bool) (Start_2 Int) (Start_15 Int) (Start_12 Int) (Start_16 Int) (Start_13 Int) (Start_14 Int) (Start_1 Int) (Start_8 Int) (Start_3 Int) (Start_6 Int) (StartBool_1 Bool) (Start_5 Int) (Start_10 Int) (Start_9 Int) (Start_11 Int) (Start_4 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_7 Int))
  ((Start Int (5 y 0 (* Start_1 Start) (mod Start_1 Start_1)))
   (StartBool Bool (true false (not StartBool_2) (or StartBool_4 StartBool_2) (>= Start_16 Start_8) (> Start_10 Start_11)))
   (StartBool_5 Bool (false true (< Start_8 Start_5) (<= Start_10 Start_4) (>= Start_14 Start_3)))
   (Start_17 Int (5 0 3 (- Start_16) (ite StartBool_4 Start_16 Start_11)))
   (StartBool_4 Bool (false (not StartBool_5) (and StartBool_4 StartBool_1) (< Start_5 Start_8) (<= Start_15 Start_17)))
   (Start_2 Int (2 4 (- Start_16 Start_2) (div Start_2 Start_15) (abs Start_14) (ite StartBool_2 Start_12 Start_4)))
   (Start_15 Int (0 5 (- Start_8 Start_12) (div Start_6 Start_9) (mod Start_3 Start_3) (abs Start_6) (ite StartBool_2 Start_10 Start_12)))
   (Start_12 Int (x (- Start_1 Start_9) (* Start_5 Start_9) (div Start_14 Start) (mod Start_7 Start_12)))
   (Start_16 Int (3 (+ Start_6 Start_15) (mod Start_2 Start_3)))
   (Start_13 Int (x 2 y (- Start_6) (+ Start_1 Start_7) (mod Start_4 Start_2) (ite StartBool_3 Start_9 Start_10)))
   (Start_14 Int (4 (- Start_13) (- Start_13 Start_3) (* Start_13 Start_12) (div Start Start_3) (mod Start_9 Start_1) (ite StartBool_1 Start_10 Start_6)))
   (Start_1 Int (5 (- Start_1) (+ Start_1 Start_1) (* Start_2 Start_3)))
   (Start_8 Int (5 (+ Start_8 Start_2) (div Start_5 Start_9) (mod Start_2 Start_3) (abs Start) (ite StartBool Start_5 Start_5)))
   (Start_3 Int (x 3 (- Start_1) (- Start_4 Start_4) (+ Start_3 Start_2) (mod Start_2 Start_3) (abs Start) (ite StartBool_1 Start_1 Start_2)))
   (Start_6 Int (1 (- Start_5) (- Start_12 Start_10) (div Start_9 Start_5) (ite StartBool Start_1 Start_9)))
   (StartBool_1 Bool (true (not StartBool) (<= Start_2 Start_2) (= Start_4 Start_5) (> Start_3 Start_2)))
   (Start_5 Int (5 (- Start_6 Start_7) (+ Start_1 Start) (abs Start_1) (ite StartBool_1 Start_8 Start_7)))
   (Start_10 Int (y (+ Start_11 Start_10) (div Start_1 Start_1) (mod Start_4 Start_2) (abs Start_1) (ite StartBool_1 Start_7 Start_4)))
   (Start_9 Int (y 3 (- Start_9) (- Start_9 Start_4) (mod Start_5 Start_10) (abs Start_2) (ite StartBool_2 Start_10 Start_10)))
   (Start_11 Int (5 x 0 y (+ Start Start) (* Start_5 Start_8) (div Start_5 Start_3) (abs Start_8) (ite StartBool_3 Start_11 Start_1)))
   (Start_4 Int (0 (- Start_8 Start_6) (+ Start_7 Start_7) (mod Start_15 Start_14) (abs Start_1)))
   (StartBool_3 Bool (true (or StartBool_3 StartBool_1) (>= Start_5 Start_9)))
   (StartBool_2 Bool (false (not StartBool) (= Start_3 Start_4) (>= Start Start_3)))
   (Start_7 Int (y (- Start_10) (+ Start_7 Start) (div Start_10 Start_12) (abs Start_13) (ite StartBool_3 Start Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* (- 3 y) 2))))

(check-synth)
