(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_2 Bool) (Start_7 Int) (Start_9 Int) (Start_6 Int) (StartBool_1 Bool) (Start_4 Int) (Start_5 Int) (Start_3 Int) (Start_8 Int) (Start_2 Int))
  ((Start Int (1 0 (- Start) (- Start Start) (+ Start_1 Start_2) (mod Start Start_3) (abs Start_3)))
   (StartBool Bool (false true (< Start_8 Start_1) (> Start_9 Start_1)))
   (Start_1 Int (0 (- Start_5) (- Start_5 Start_2) (* Start_2 Start_4) (div Start_2 Start_5) (mod Start_2 Start_8) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_2 Bool (false true (not StartBool) (or StartBool StartBool_2) (= Start_9 Start_8) (> Start_5 Start_2)))
   (Start_7 Int (4 1 (- Start_2) (+ Start_1 Start_3) (* Start Start_8) (abs Start_8)))
   (Start_9 Int (2 x 0 (- Start_1) (+ Start_6 Start_4) (* Start_2 Start_8) (div Start_1 Start) (ite StartBool Start_5 Start_4)))
   (Start_6 Int (0 (- Start) (- Start_7 Start_3) (+ Start_7 Start) (* Start_2 Start_7) (div Start_4 Start_1) (mod Start_6 Start_5) (abs Start_3)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool_1) (or StartBool_2 StartBool) (<= Start_1 Start_6) (= Start_3 Start_7) (>= Start_5 Start_6) (> Start_8 Start_5)))
   (Start_4 Int (0 1 3 (- Start_3 Start) (+ Start_2 Start_3) (* Start_4 Start_1) (abs Start)))
   (Start_5 Int (0 4 1 3 x y (- Start_6 Start) (mod Start_4 Start)))
   (Start_3 Int (0 2 1 (- Start_2) (* Start_4 Start_1) (abs Start_1)))
   (Start_8 Int (4 (+ Start_4 Start_7) (* Start_5 Start_1) (div Start_9 Start_4) (abs Start_1) (ite StartBool_1 Start_8 Start_4)))
   (Start_2 Int (3 (- Start_5) (* Start_4 Start_4) (abs Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (= y 2) 5 2)))

(check-synth)
