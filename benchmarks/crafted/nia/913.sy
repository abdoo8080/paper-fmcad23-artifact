(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_14 Int) (StartBool_1 Bool) (Start_10 Int) (Start_12 Int) (Start_15 Int) (Start_1 Int) (Start_2 Int) (Start_8 Int) (StartBool_4 Bool) (Start_4 Int) (StartBool_5 Bool) (StartBool_2 Bool) (Start_3 Int) (StartBool_3 Bool) (Start_5 Int) (Start_13 Int) (Start_11 Int) (Start_7 Int) (Start_9 Int))
  ((Start Int (0 (div Start_1 Start_1) (mod Start_1 Start_1) (abs Start_1) (ite StartBool_1 Start Start_1)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_5 StartBool_1) (< Start_3 Start_5) (> Start_14 Start_12)))
   (Start_6 Int (y (- Start_6) (abs Start_7)))
   (Start_14 Int (x (- Start_10 Start_5) (+ Start_4 Start_5) (* Start_11 Start_12) (div Start_3 Start_10) (abs Start_8)))
   (StartBool_1 Bool (false true (not StartBool_2) (or StartBool StartBool_1)))
   (Start_10 Int (5 (- Start_14) (- Start_13 Start_13) (+ Start_8 Start_3) (div Start_1 Start_4) (abs Start_12) (ite StartBool_2 Start_7 Start_3)))
   (Start_12 Int (3 (- Start_10 Start) (* Start_8 Start_9) (div Start_6 Start) (mod Start_13 Start_2) (abs Start_1) (ite StartBool_3 Start_10 Start_12)))
   (Start_15 Int (x 2 1 (+ Start_6 Start_8) (* Start_1 Start_13) (div Start_15 Start_12) (abs Start_5)))
   (Start_1 Int (x 0 3 (- Start Start) (+ Start_10 Start_8) (div Start_9 Start_11) (mod Start_9 Start_14) (abs Start_3)))
   (Start_2 Int (0 3 (- Start_2) (* Start_2 Start_1) (mod Start Start) (abs Start_2)))
   (Start_8 Int (4 (- Start_9 Start_1) (div Start_4 Start_8)))
   (StartBool_4 Bool (true (< Start_1 Start_3) (<= Start_4 Start) (>= Start_4 Start_2) (> Start_3 Start_1)))
   (Start_4 Int (0 (- Start_1) (- Start_4 Start_4) (* Start_2 Start_3) (abs Start_3)))
   (StartBool_5 Bool (false (not StartBool) (and StartBool_1 StartBool_2) (< Start_6 Start_12) (= Start_6 Start_15) (>= Start_3 Start_15)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool_2) (or StartBool_3 StartBool_4) (< Start Start) (= Start_1 Start_2)))
   (Start_3 Int (3 0 (- Start_1 Start_2) (* Start_5 Start_1) (div Start_3 Start) (mod Start_5 Start_3) (abs Start_2) (ite StartBool_1 Start Start_3)))
   (StartBool_3 Bool (true (< Start_12 Start_8) (= Start_4 Start_10)))
   (Start_5 Int (x 3 (- Start_6 Start_5) (* Start_7 Start_3)))
   (Start_13 Int (y 3 (- Start_5 Start_7) (+ Start_9 Start_4) (* Start_14 Start_14) (div Start_14 Start_4) (mod Start_12 Start_5) (abs Start_9) (ite StartBool Start_8 Start_6)))
   (Start_11 Int (2 (- Start_12) (+ Start_8 Start_12) (* Start_5 Start) (mod Start_7 Start_5) (abs Start_11) (ite StartBool Start_5 Start_5)))
   (Start_7 Int (0 (- Start_7) (* Start_1 Start_6) (ite StartBool_1 Start_1 Start_8)))
   (Start_9 Int (4 y 1 (- Start_3) (* Start_10 Start_10) (div Start_1 Start_9) (mod Start_6 Start_10) (abs Start_3) (ite StartBool_4 Start_4 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (< y 5) (- 4) y)))

(check-synth)
