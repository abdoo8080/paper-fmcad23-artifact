(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_10 Int) (Start_2 Int) (StartBool_2 Bool) (Start_1 Int) (Start_4 Int) (StartBool_3 Bool) (Start_8 Int) (Start_3 Int) (StartBool_1 Bool) (Start_6 Int) (StartBool_4 Bool) (Start_7 Int) (StartBool_6 Bool) (Start_5 Int) (Start_9 Int))
  ((Start Int (y 2 0 (- Start Start) (+ Start Start) (div Start Start)))
   (StartBool Bool (false (and StartBool StartBool_1) (or StartBool_2 StartBool_3) (<= Start_1 Start_1) (= Start Start) (>= Start_1 Start_1)))
   (StartBool_5 Bool (false true (not StartBool_2) (and StartBool_6 StartBool_4) (< Start Start_9) (<= Start_2 Start_3) (= Start_5 Start_4) (>= Start_6 Start_3)))
   (Start_10 Int (y 3 0 1 2 x 4 (- Start Start_4) (* Start_4 Start_5) (div Start_3 Start_4) (mod Start_4 Start_9) (abs Start_8) (ite StartBool_6 Start_5 Start_4)))
   (Start_2 Int (3 x 4 (- Start_2 Start) (+ Start_2 Start_3) (* Start_1 Start_1) (div Start_3 Start_2) (mod Start_1 Start_4)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_5) (or StartBool_4 StartBool_5) (< Start_4 Start) (<= Start_6 Start) (= Start Start) (>= Start_1 Start_3) (> Start_7 Start)))
   (Start_1 Int (x (* Start_2 Start_1) (div Start Start_1) (abs Start)))
   (Start_4 Int (0 (- Start Start_3) (mod Start_5 Start_1) (ite StartBool_2 Start_5 Start_2)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool StartBool_2) (or StartBool_4 StartBool_1) (<= Start_5 Start_1) (>= Start_2 Start_4)))
   (Start_8 Int (4 (- Start_5) (+ Start_6 Start_6) (* Start_3 Start_3) (div Start_2 Start_9) (mod Start_4 Start_6) (abs Start_1)))
   (Start_3 Int (4 (- Start_2) (+ Start Start) (* Start_1 Start_5) (abs Start_5)))
   (StartBool_1 Bool (false (and StartBool_3 StartBool_4) (or StartBool_2 StartBool_3) (< Start_8 Start_10) (>= Start_2 Start_10)))
   (Start_6 Int (4 x 5 (- Start_9) (* Start_10 Start_3) (div Start_4 Start_10) (abs Start_4)))
   (StartBool_4 Bool (true (not StartBool) (and StartBool_1 StartBool_1) (< Start Start_1) (<= Start_2 Start)))
   (Start_7 Int (1 0 (div Start_8 Start_7) (mod Start_2 Start_5) (abs Start_7)))
   (StartBool_6 Bool (true (not StartBool_3) (or StartBool_6 StartBool_1) (< Start_5 Start_7) (<= Start_1 Start_1) (>= Start_6 Start_5)))
   (Start_5 Int (3 (- Start_5) (* Start_3 Start_4) (div Start_3 Start_1) (abs Start_3)))
   (Start_9 Int (2 (- Start_7) (* Start_2 Start_4) (mod Start_1 Start_2) (ite StartBool Start_7 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* 2 y) x)))

(check-synth)
