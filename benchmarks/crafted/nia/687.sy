(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_10 Bool) (Start_9 Int) (Start_10 Int) (Start_2 Int) (StartBool_5 Bool) (StartBool_7 Bool) (Start_11 Int) (Start_8 Int) (StartBool_9 Bool) (StartBool_1 Bool) (Start_6 Int) (Start_5 Int) (StartBool_2 Bool) (Start_4 Int) (StartBool_3 Bool) (Start_7 Int) (Start_3 Int) (StartBool_8 Bool) (StartBool_4 Bool) (Start_1 Int) (StartBool_6 Bool))
  ((Start Int (3 4 (+ Start_1 Start_2) (* Start_3 Start_1) (div Start_3 Start_3) (mod Start_1 Start_3) (abs Start_4) (ite StartBool_1 Start_2 Start_4)))
   (StartBool Bool (false (and StartBool_3 StartBool_9) (or StartBool_10 StartBool_5) (= Start_9 Start_9) (>= Start_9 Start_8)))
   (StartBool_10 Bool (false true (or StartBool_2 StartBool) (< Start_3 Start_3) (<= Start_4 Start_11) (= Start Start_3)))
   (Start_9 Int (5 y (- Start_6) (- Start_9 Start_3) (+ Start_11 Start_3) (abs Start_7) (ite StartBool_7 Start_5 Start_8)))
   (Start_10 Int (2 (+ Start_6 Start) (* Start_11 Start) (div Start_3 Start_11)))
   (Start_2 Int (2 (- Start_9) (+ Start_6 Start_3) (div Start_1 Start) (mod Start_10 Start_8) (abs Start_4) (ite StartBool_9 Start_7 Start_3)))
   (StartBool_5 Bool (true false (not StartBool_2) (and StartBool_1 StartBool_3) (or StartBool_8 StartBool_8) (< Start_4 Start_6) (<= Start_3 Start_1) (>= Start_5 Start_1)))
   (StartBool_7 Bool (false (not StartBool_4) (and StartBool_1 StartBool_9) (or StartBool_8 StartBool_8) (< Start_3 Start_3) (= Start_3 Start_1) (>= Start_2 Start_6)))
   (Start_11 Int (3 0 5 1 (+ Start_7 Start) (div Start_8 Start_8) (mod Start_8 Start_9) (ite StartBool_7 Start_5 Start_1)))
   (Start_8 Int (5 (- Start_8) (* Start_7 Start_3) (div Start_3 Start_6) (abs Start_5) (ite StartBool_4 Start_8 Start_1)))
   (StartBool_9 Bool (true false (not StartBool_2) (and StartBool_7 StartBool) (or StartBool_2 StartBool_1) (<= Start_4 Start_1) (>= Start_5 Start_1)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool_1) (or StartBool StartBool_2) (< Start_5 Start)))
   (Start_6 Int (1 4 (- Start_1 Start_5) (+ Start_5 Start_6) (* Start_2 Start_1) (abs Start_6) (ite StartBool_3 Start_2 Start_5)))
   (Start_5 Int (1 3 (+ Start_5 Start_4) (div Start_3 Start_4) (mod Start_3 Start_1)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_2 StartBool) (or StartBool StartBool_1) (<= Start_2 Start_2) (= Start_4 Start_5)))
   (Start_4 Int (0 x 2 (- Start_3) (- Start_6 Start_2) (+ Start_1 Start_2) (abs Start)))
   (StartBool_3 Bool (true (not StartBool_2) (> Start_4 Start)))
   (Start_7 Int (y 3 (- Start_4) (- Start_3 Start_4) (+ Start_2 Start_3) (div Start_3 Start_6) (ite StartBool_2 Start_8 Start_5)))
   (Start_3 Int (1 (+ Start_2 Start) (* Start_2 Start_6) (mod Start_5 Start_3) (ite StartBool_4 Start_4 Start_7)))
   (StartBool_8 Bool (true false (not StartBool_2) (< Start_5 Start_7) (= Start_1 Start_8)))
   (StartBool_4 Bool (false (not StartBool_5) (and StartBool_1 StartBool_4) (or StartBool StartBool_6) (= Start_8 Start) (> Start_6 Start_4)))
   (Start_1 Int (5 y x (+ Start_3 Start_5) (abs Start_3)))
   (StartBool_6 Bool (true (and StartBool_7 StartBool_8) (<= Start_3 Start_5) (= Start_5 Start_2) (>= Start_2 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 (+ 2 x))))

(check-synth)
