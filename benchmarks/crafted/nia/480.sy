(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_11 Int) (Start_3 Int) (Start_6 Int) (Start_5 Int) (StartBool_1 Bool) (Start_1 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_2 Int) (Start_7 Int) (Start_4 Int) (Start_8 Int) (Start_9 Int))
  ((Start Int (5 (- Start_1) (- Start_1 Start) (abs Start_1)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_3 StartBool_3) (< Start_4 Start_3) (>= Start_11 Start_4)))
   (Start_10 Int (1 3 (+ Start_1 Start_9) (div Start_11 Start_6) (abs Start_7) (ite StartBool_2 Start_7 Start)))
   (Start_11 Int (5 (- Start_3 Start_3) (* Start_9 Start_7) (mod Start_9 Start_3) (abs Start_8)))
   (Start_3 Int (y 5 x (- Start_3) (* Start_3 Start_3) (div Start_2 Start_2)))
   (Start_6 Int (3 4 (- Start_4 Start) (mod Start_7 Start_1) (abs Start_6)))
   (Start_5 Int (4 (- Start_2 Start) (+ Start_4 Start_5) (* Start Start_1) (abs Start_6) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_1 Bool (true (not StartBool_1) (or StartBool_1 StartBool_1) (= Start Start_5) (>= Start_6 Start_4) (> Start_5 Start_5)))
   (Start_1 Int (y 5 (+ Start_1 Start) (mod Start_2 Start_3)))
   (StartBool_3 Bool (true false (not StartBool_2) (>= Start_2 Start_3) (> Start_4 Start_4)))
   (StartBool_2 Bool (true false (or StartBool_3 StartBool_1) (>= Start_4 Start_5)))
   (Start_2 Int (0 x 3 y (- Start) (+ Start_4 Start_3) (div Start_3 Start) (abs Start_5) (ite StartBool Start_1 Start_5)))
   (Start_7 Int (3 (- Start_2) (+ Start_6 Start_3) (* Start_8 Start_2) (abs Start_6) (ite StartBool_2 Start Start_8)))
   (Start_4 Int (0 2 (- Start_3) (- Start_5 Start_7) (* Start_9 Start_9) (mod Start_1 Start_7)))
   (Start_8 Int (4))
   (Start_9 Int (1 2 4 3 0 5 x (- Start_5) (- Start_4 Start_10) (+ Start_10 Start_8) (* Start_4 Start_9) (div Start_11 Start) (abs Start_4) (ite StartBool_3 Start_11 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 1 y))))

(check-synth)
