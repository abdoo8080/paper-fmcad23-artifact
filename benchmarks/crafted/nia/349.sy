(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (StartBool_2 Bool) (Start_5 Int) (Start_2 Int) (Start_4 Int) (Start_6 Int) (Start_1 Int) (Start_3 Int))
  ((Start Int (y (- Start Start)))
   (StartBool Bool (true (not StartBool) (and StartBool StartBool) (or StartBool_1 StartBool_1) (= Start_1 Start_1) (>= Start Start)))
   (StartBool_1 Bool (true (<= Start_1 Start_6) (= Start Start_5) (> Start_3 Start_2)))
   (StartBool_2 Bool (true (not StartBool) (< Start Start_4) (> Start_3 Start_2)))
   (Start_5 Int (4 (- Start) (- Start Start_3) (* Start_4 Start_4) (abs Start_1) (ite StartBool_2 Start_6 Start)))
   (Start_2 Int (y (- Start_3) (- Start_5 Start_1) (abs Start_1)))
   (Start_4 Int (2 1 (* Start_2 Start_2) (div Start_1 Start_2) (mod Start_4 Start_3) (abs Start_1) (ite StartBool_1 Start_2 Start)))
   (Start_6 Int (x 2 0 1 3 (- Start_3) (abs Start_4) (ite StartBool_1 Start_3 Start_1)))
   (Start_1 Int (x y (- Start_2) (- Start_3 Start_3) (mod Start Start)))
   (Start_3 Int (5 (+ Start_2 Start_1) (* Start_4 Start_4) (mod Start_1 Start_2) (ite StartBool_1 Start_3 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 4 (mod x y))))

(check-synth)
