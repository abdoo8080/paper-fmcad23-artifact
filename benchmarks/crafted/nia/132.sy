(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (Start_11 Int) (Start_2 Int) (Start_5 Int) (Start_6 Int) (Start_4 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_7 Int) (Start_1 Int) (StartBool_3 Bool) (Start_3 Int) (Start_8 Int) (Start_10 Int))
  ((Start Int (x (- Start_1) (* Start Start_1) (div Start_1 Start) (mod Start_1 Start_2)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_3 StartBool_2) (< Start_7 Start_7)))
   (Start_9 Int (2 1 3 (- Start_2) (* Start_3 Start) (ite StartBool Start_5 Start_8)))
   (Start_11 Int (y 2 (abs Start)))
   (Start_2 Int (0 (- Start_3) (- Start_3 Start_3) (+ Start_4 Start_1) (div Start_5 Start_3) (abs Start_1)))
   (Start_5 Int (0 2 (- Start) (- Start_1 Start_5) (* Start_4 Start_3) (div Start_5 Start) (mod Start_1 Start_6)))
   (Start_6 Int (5 1 0 y x (- Start_2) (+ Start_2 Start_5) (mod Start_2 Start_3) (abs Start_1) (ite StartBool Start_5 Start_2)))
   (Start_4 Int (y 2 (- Start_3 Start_5) (+ Start Start_3) (div Start_2 Start_3) (mod Start_1 Start_4) (abs Start_3) (ite StartBool_1 Start_1 Start_2)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_2 StartBool)))
   (StartBool_2 Bool (true (not StartBool_3) (< Start_7 Start_7)))
   (Start_7 Int (x 3 (- Start_3) (- Start Start_3) (+ Start_3 Start) (div Start Start) (mod Start Start_3) (abs Start_4)))
   (Start_1 Int (5 (* Start Start) (div Start Start_9) (abs Start_5) (ite StartBool_3 Start_3 Start_10)))
   (StartBool_3 Bool (true false (<= Start_3 Start_3) (= Start_8 Start_3) (>= Start_6 Start_5)))
   (Start_3 Int (y 3 5 x 1 4 2 0 (- Start_5 Start_5)))
   (Start_8 Int (4 3 y (- Start_6) (+ Start_5 Start_2) (div Start_4 Start_1) (mod Start Start_7) (abs Start_2)))
   (Start_10 Int (5 1 3 (* Start_4 Start_10) (mod Start_11 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (abs (mod 2 x)) y)))

(check-synth)
