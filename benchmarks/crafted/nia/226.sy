(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_1 Int) (Start_12 Int) (Start_6 Int) (StartBool_1 Bool) (Start_5 Int) (Start_4 Int) (Start_8 Int) (Start_7 Int) (Start_3 Int) (Start_9 Int) (Start_10 Int) (StartBool_2 Bool) (Start_13 Int) (Start_2 Int) (Start_11 Int))
  ((Start Int (2 (- Start Start) (mod Start_1 Start_1) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true false (not StartBool_3) (= Start_3 Start_12)))
   (StartBool_3 Bool (true false (and StartBool_1 StartBool_2) (= Start_10 Start_13)))
   (Start_1 Int (0 5 x (- Start_4 Start_4) (* Start_10 Start_4) (div Start_4 Start_6) (mod Start_8 Start_5)))
   (Start_12 Int (y (- Start_12 Start_12) (+ Start_9 Start_13) (div Start_2 Start_8) (abs Start_7) (ite StartBool_1 Start_2 Start_13)))
   (Start_6 Int (4 y 1 3 (- Start_1) (- Start_10 Start_7) (+ Start_2 Start_8) (* Start_10 Start_3) (mod Start Start_10) (abs Start_1)))
   (StartBool_1 Bool (true false (<= Start_2 Start_1) (= Start_3 Start)))
   (Start_5 Int (2 3 (- Start_4 Start) (+ Start Start_2) (* Start_2 Start_3)))
   (Start_4 Int (3 (- Start_3) (- Start_6 Start) (+ Start_5 Start_2) (div Start_5 Start_5) (mod Start_7 Start_7)))
   (Start_8 Int (y 5 (- Start_7) (- Start_3 Start_1) (+ Start_4 Start_9) (* Start_9 Start) (div Start Start_2) (mod Start_3 Start_3) (abs Start_7)))
   (Start_7 Int (1 4 x 2 (- Start_8) (- Start Start_4) (* Start_3 Start_4) (div Start_9 Start_3) (abs Start_1)))
   (Start_3 Int (5 4 3 1 x (- Start_1) (* Start_1 Start_4) (div Start_5 Start_4)))
   (Start_9 Int (x (- Start_3 Start_5) (mod Start_9 Start_6) (ite StartBool_2 Start_4 Start_4)))
   (Start_10 Int (4 (- Start_11 Start_9) (abs Start_7)))
   (StartBool_2 Bool (false true (= Start_4 Start_4) (> Start Start_1)))
   (Start_13 Int (4 (* Start_6 Start_5) (mod Start_2 Start_3)))
   (Start_2 Int (4 2 3 0 (- Start_10 Start_10) (* Start_6 Start_1) (div Start_5 Start_2) (ite StartBool_2 Start_7 Start_13)))
   (Start_11 Int (y (- Start_3 Start_11) (+ Start_6 Start_12) (* Start_7 Start_10) (div Start_2 Start_12) (abs Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 5 (abs (+ x (- x 5))))))

(check-synth)
