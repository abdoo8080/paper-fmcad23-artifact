(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_20 Int) (Start_19 Int) (Start_2 Int) (Start_18 Int) (Start_4 Int) (Start_8 Int) (Start_14 Int) (Start_15 Int) (StartBool_2 Bool) (Start_11 Int) (Start_3 Int) (Start_16 Int) (Start_1 Int) (Start_5 Int) (Start_6 Int) (Start_12 Int) (Start_10 Int) (Start_13 Int) (Start_7 Int) (Start_9 Int) (Start_17 Int) (StartBool_1 Bool))
  ((Start Int (4 1 x (- Start_1) (+ Start_1 Start)))
   (StartBool Bool (true false (and StartBool StartBool_3) (or StartBool_3 StartBool) (< Start_12 Start_3) (<= Start_20 Start_4) (>= Start_11 Start_17)))
   (StartBool_3 Bool (true (not StartBool_2) (< Start_11 Start_20) (<= Start_16 Start_5) (= Start_5 Start_5) (>= Start_11 Start_4)))
   (Start_20 Int (3 (- Start_18 Start_8) (* Start_8 Start_3) (mod Start_10 Start_5)))
   (Start_19 Int (4 (- Start_9) (+ Start_8 Start_7) (* Start_20 Start) (abs Start_12) (ite StartBool Start_3 Start_15)))
   (Start_2 Int (y 4 x (- Start_10) (+ Start_2 Start_11) (div Start_6 Start_7) (mod Start_19 Start_18) (abs Start_10) (ite StartBool_1 Start_17 Start_7)))
   (Start_18 Int (4 (+ Start Start_2) (* Start_2 Start_10) (mod Start_18 Start_6)))
   (Start_4 Int (5 (- Start_10) (* Start_7 Start_18)))
   (Start_8 Int (x (- Start_1) (+ Start_11 Start_3) (* Start_15 Start_8) (div Start_16 Start_15) (mod Start_14 Start_11) (abs Start_6)))
   (Start_14 Int (5 (- Start) (- Start_2 Start) (+ Start_8 Start_6) (ite StartBool_1 Start_3 Start_9)))
   (Start_15 Int (4 (* Start_11 Start_1) (div Start_4 Start_2)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (or StartBool StartBool_2) (< Start_17 Start_9) (= Start_9 Start_5)))
   (Start_11 Int (y (+ Start_3 Start_2) (* Start_2 Start_6) (mod Start_3 Start_3) (ite StartBool Start_11 Start_13)))
   (Start_3 Int (y (- Start_1 Start_2) (+ Start_4 Start_2) (div Start_4 Start_1) (mod Start_3 Start_5) (abs Start_6) (ite StartBool Start_7 Start_5)))
   (Start_16 Int (0 3 (- Start_5 Start_10) (* Start_14 Start_9) (abs Start_16)))
   (Start_1 Int (0 1 3 (- Start_2 Start) (mod Start_2 Start_1) (abs Start_1) (ite StartBool Start_3 Start_1)))
   (Start_5 Int (2 (- Start_2) (- Start_4 Start_8) (+ Start_9 Start_6)))
   (Start_6 Int (2 (+ Start Start_1) (* Start_6 Start_1) (div Start_1 Start_1) (mod Start_7 Start_3)))
   (Start_12 Int (2 (- Start_3 Start_4) (+ Start_8 Start_8) (mod Start_12 Start_1)))
   (Start_10 Int (3 (- Start_9 Start_5) (* Start_9 Start_11) (mod Start_10 Start_7) (abs Start_12)))
   (Start_13 Int (4 (- Start_14) (- Start_13 Start_8) (+ Start_11 Start) (* Start_2 Start_15) (div Start_7 Start_8) (mod Start_15 Start_16) (abs Start_4) (ite StartBool Start Start_17)))
   (Start_7 Int (2 3 x (- Start_6) (+ Start_4 Start_4) (* Start_4 Start_4) (abs Start)))
   (Start_9 Int (1 (- Start_2) (+ Start Start_7) (* Start_1 Start_7) (div Start_4 Start_1) (mod Start_10 Start_4)))
   (Start_17 Int (4 y (- Start_4 Start_11) (+ Start_5 Start_5) (* Start_13 Start_9) (div Start_4 Start_13) (abs Start_4) (ite StartBool_1 Start_8 Start_2)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_2 StartBool) (= Start_1 Start_15) (> Start Start_17)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 1 (abs (- x)))))

(check-synth)
