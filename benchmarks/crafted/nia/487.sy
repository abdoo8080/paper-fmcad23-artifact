(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_9 Int) (Start_3 Int) (Start_7 Int) (StartBool_2 Bool) (Start_5 Int) (Start_4 Int) (Start_10 Int) (Start_1 Int) (Start_11 Int) (Start_6 Int) (Start_8 Int) (Start_2 Int))
  ((Start Int (1 (- Start_1) (- Start_1 Start) (* Start Start_2) (div Start Start_3) (mod Start_2 Start) (abs Start_4) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (true false (< Start_6 Start_8) (= Start_11 Start_10) (> Start_10 Start_5)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (or StartBool_1 StartBool_1) (< Start_4 Start_5) (<= Start_5 Start_5) (= Start_4 Start_4) (>= Start_2 Start_4)))
   (Start_9 Int (2 1 3 (- Start) (div Start_6 Start_6) (mod Start Start_8)))
   (Start_3 Int (3 y (- Start_6) (+ Start_5 Start_9) (mod Start_10 Start_4) (abs Start)))
   (Start_7 Int (x 0 (+ Start Start_2) (* Start_4 Start_7) (mod Start_1 Start_3) (ite StartBool_2 Start_5 Start_3)))
   (StartBool_2 Bool (false true (< Start_4 Start_8) (<= Start_1 Start_6)))
   (Start_5 Int (0 (- Start_3) (+ Start Start) (* Start Start_2) (mod Start_2 Start_2) (abs Start_6)))
   (Start_4 Int (3 x (+ Start_7 Start) (abs Start_4)))
   (Start_10 Int (1 (- Start_5) (+ Start Start_6) (* Start Start_6) (div Start Start_2) (abs Start_4)))
   (Start_1 Int (5 2 0 1 (- Start_11) (+ Start Start_11) (abs Start_11) (ite StartBool_1 Start_7 Start_4)))
   (Start_11 Int (0 3 x 5 (mod Start_6 Start_10)))
   (Start_6 Int (4 (- Start_1) (abs Start_5) (ite StartBool_1 Start_3 Start)))
   (Start_8 Int (0 (- Start_9) (- Start_4 Start_10) (+ Start_6 Start_8) (* Start_10 Start_10) (div Start_1 Start_9) (mod Start_10 Start_3) (abs Start_11)))
   (Start_2 Int (1 (* Start_9 Start_6) (mod Start_8 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 3 y))))

(check-synth)
