(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_14 Int) (Start_1 Int) (Start_12 Int) (StartBool_4 Bool) (Start_15 Int) (Start_11 Int) (Start_7 Int) (Start_4 Int) (Start_13 Int) (Start_9 Int) (Start_3 Int) (Start_8 Int) (Start_6 Int) (Start_5 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartBool_5 Bool) (StartBool_3 Bool) (Start_2 Int) (Start_10 Int))
  ((Start Int (x (- Start) (- Start_1 Start_2) (* Start_1 Start_1) (div Start_2 Start) (ite StartBool_1 Start_1 Start_3)))
   (StartBool Bool (true false (< Start_4 Start_2) (= Start_12 Start_3) (>= Start_4 Start_6)))
   (Start_16 Int (4 0 (- Start_14) (- Start_1 Start_10) (+ Start Start_15) (mod Start_1 Start_2)))
   (Start_14 Int (x 4 2 5 3 y 0 1 (- Start_15 Start_11) (* Start_7 Start_12) (div Start_3 Start_16) (mod Start_6 Start_8) (abs Start_2) (ite StartBool Start_5 Start_16)))
   (Start_1 Int (5 (- Start_11 Start_7) (+ Start Start_13) (* Start_9 Start_11) (div Start_8 Start_13) (abs Start_1)))
   (Start_12 Int (3 (- Start_11) (- Start_4 Start_7) (+ Start_3 Start_1) (div Start_11 Start_11)))
   (StartBool_4 Bool (false true (not StartBool_4) (and StartBool_5 StartBool_3) (< Start_1 Start_5)))
   (Start_15 Int (1 3 0 2 (+ Start_11 Start_1) (* Start_5 Start_4) (div Start_14 Start_16) (mod Start_11 Start_6)))
   (Start_11 Int (1 (- Start) (abs Start_10) (ite StartBool_4 Start_9 Start_6)))
   (Start_7 Int (2 y (- Start_6) (- Start_2 Start_5) (* Start_7 Start_5) (mod Start_8 Start_2)))
   (Start_4 Int (0 2 1 5 3 y (+ Start_2 Start_3) (* Start_1 Start) (div Start_1 Start) (mod Start_5 Start_3) (abs Start_9) (ite StartBool_1 Start_6 Start_3)))
   (Start_13 Int (y 2 x 0 1 (- Start_6 Start_9) (* Start_9 Start_14) (ite StartBool Start_12 Start_6)))
   (Start_9 Int (4 (+ Start_1 Start_1)))
   (Start_3 Int (4 (- Start_1) (- Start Start_1) (+ Start_1 Start_1) (* Start_4 Start_5) (div Start_4 Start_6) (mod Start_2 Start) (abs Start) (ite StartBool Start_7 Start_7)))
   (Start_8 Int (1 5 (- Start_4) (* Start_5 Start_7) (div Start_1 Start_1) (abs Start_6) (ite StartBool_1 Start_3 Start_8)))
   (Start_6 Int (x 0 4 (mod Start_1 Start_4)))
   (Start_5 Int (4 0 (- Start_4 Start_6) (+ Start_3 Start_7) (mod Start_3 Start) (abs Start_2) (ite StartBool_2 Start_5 Start_8)))
   (StartBool_1 Bool (true false (or StartBool_1 StartBool_3) (<= Start_5 Start_4) (= Start_9 Start_3) (> Start_6 Start_1)))
   (StartBool_2 Bool (true false (not StartBool_1) (< Start_6 Start) (>= Start_4 Start)))
   (StartBool_5 Bool (false true (and StartBool_2 StartBool_3) (<= Start_5 Start_12) (= Start_2 Start_2) (>= Start_6 Start_6)))
   (StartBool_3 Bool (true false (and StartBool_1 StartBool_1) (or StartBool_1 StartBool) (< Start_7 Start_6) (<= Start_6 Start_1) (= Start_5 Start_8) (> Start_10 Start_5)))
   (Start_2 Int (x (- Start_3 Start_11) (* Start_5 Start_4) (mod Start_5 Start_11)))
   (Start_10 Int (x (- Start_7) (+ Start_3 Start_9) (ite StartBool_2 Start_3 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div 2 (mod 3 x)))))

(check-synth)
