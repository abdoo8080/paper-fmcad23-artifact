(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_13 Int) (StartBool_4 Bool) (Start_12 Int) (Start_11 Int) (Start_10 Int) (Start_2 Int) (Start_4 Int) (Start_3 Int) (Start_6 Int) (Start_7 Int) (StartBool_1 Bool) (Start_9 Int) (Start_1 Int) (StartBool_3 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_8 Int))
  ((Start Int (2 (+ Start_1 Start) (* Start_1 Start_2) (div Start_2 Start)))
   (StartBool Bool (false true (and StartBool_1 StartBool_4) (or StartBool_2 StartBool) (< Start_7 Start_12) (<= Start_3 Start_4)))
   (Start_14 Int (3 1 0 x (- Start_1) (- Start_6 Start_3) (+ Start_3 Start_2) (* Start_10 Start_7) (div Start_12 Start_14) (abs Start_13) (ite StartBool_1 Start_2 Start_6)))
   (Start_13 Int (0 4 (- Start_8 Start_4) (+ Start Start_9) (* Start_5 Start_5) (div Start_11 Start_7) (mod Start_14 Start_1)))
   (StartBool_4 Bool (false (<= Start_5 Start_11)))
   (Start_12 Int (3 0 x 5 2 y 1 4 (+ Start Start_1) (* Start_9 Start_10) (mod Start_6 Start_2) (ite StartBool_3 Start_3 Start_6)))
   (Start_11 Int (x (- Start_8) (- Start_1 Start_9) (div Start_1 Start_11) (mod Start_2 Start_2) (abs Start_9) (ite StartBool_2 Start_4 Start_2)))
   (Start_10 Int (4 1 2 5 (- Start_10 Start_12) (div Start_11 Start_10)))
   (Start_2 Int (1 5 4 (- Start_1) (- Start Start_2) (+ Start_1 Start_1) (* Start_1 Start_3) (div Start_4 Start_4) (mod Start_1 Start_2) (abs Start_3)))
   (Start_4 Int (3 (- Start_5 Start_4) (* Start_6 Start_4) (abs Start_7) (ite StartBool_1 Start_2 Start_3)))
   (Start_3 Int (4 (+ Start_9 Start_6) (div Start_8 Start_4) (abs Start_9) (ite StartBool_3 Start Start_6)))
   (Start_6 Int (2 (+ Start_5 Start_3) (* Start_8 Start) (mod Start_1 Start_5) (abs Start)))
   (Start_7 Int (x 1 (- Start_8) (- Start_5 Start_4) (div Start_6 Start_3) (mod Start_3 Start_9)))
   (StartBool_1 Bool (false true (not StartBool_1) (or StartBool_2 StartBool_2) (< Start_6 Start_3) (>= Start_7 Start_6)))
   (Start_9 Int (y (+ Start_2 Start_3) (ite StartBool_2 Start_1 Start_8)))
   (Start_1 Int (3 0 2 5 (- Start_11) (- Start_5 Start_4) (+ Start_11 Start_12) (* Start_9 Start_4) (abs Start_5) (ite StartBool_4 Start_4 Start_13)))
   (StartBool_3 Bool (false true (and StartBool StartBool_3) (= Start Start_7) (>= Start_9 Start_7) (> Start_5 Start_1)))
   (Start_5 Int (1 2 3 y 5 (- Start_9) (+ Start_2 Start_10) (* Start_2 Start_6) (mod Start_4 Start_11) (ite StartBool_2 Start_4 Start_1)))
   (StartBool_2 Bool (false true (<= Start Start_6) (> Start_1 Start_3)))
   (Start_8 Int (4 x 1 y 3 2 (+ Start_4 Start_8) (div Start Start_5) (abs Start_2) (ite StartBool_3 Start_8 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* (div 1 (div x 3)) 2))))

(check-synth)
