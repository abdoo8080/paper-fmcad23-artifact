(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (StartBool_4 Bool) (StartBool_3 Bool) (Start_2 Int) (Start_13 Int) (Start_1 Int) (Start_16 Int) (Start_7 Int) (Start_5 Int) (Start_18 Int) (Start_15 Int) (Start_3 Int) (Start_14 Int) (Start_6 Int) (Start_11 Int) (Start_10 Int) (Start_8 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_12 Int) (Start_17 Int) (Start_9 Int))
  ((Start Int (0 x y 3 (- Start) (- Start_1 Start_2) (+ Start_1 Start) (mod Start_2 Start_2) (ite StartBool Start_1 Start_1)))
   (StartBool Bool (false (< Start_12 Start_7) (= Start_18 Start_9) (>= Start_4 Start_2) (> Start_10 Start_6)))
   (Start_4 Int (4 2 (- Start_11) (+ Start_11 Start_3) (mod Start_14 Start_6) (abs Start_5)))
   (StartBool_4 Bool (false true (not StartBool) (<= Start_5 Start_9) (= Start_12 Start_2) (>= Start_4 Start_2)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool_4 StartBool_4) (<= Start_8 Start_1)))
   (Start_2 Int (x (- Start_1) (* Start_2 Start_1) (div Start_2 Start_2) (mod Start_1 Start) (ite StartBool Start_1 Start_1)))
   (Start_13 Int (y x 1 0 (- Start_13) (* Start_8 Start_8) (div Start_6 Start_6) (mod Start_13 Start_13) (ite StartBool_2 Start Start_4)))
   (Start_1 Int (1 (- Start_3) (- Start_3 Start) (+ Start_4 Start_4) (div Start Start_3) (mod Start Start) (ite StartBool_1 Start_5 Start_5)))
   (Start_16 Int (y (- Start_9) (- Start_16 Start_14) (div Start_8 Start_4) (abs Start_5) (ite StartBool_2 Start_4 Start_5)))
   (Start_7 Int (5 y (* Start_12 Start_7) (div Start_11 Start_12) (mod Start_7 Start_5) (ite StartBool_3 Start_1 Start_11)))
   (Start_5 Int (x (- Start_1) (- Start_3 Start_2) (div Start_5 Start_2) (ite StartBool Start_6 Start_2)))
   (Start_18 Int (3 x (- Start_15) (mod Start_15 Start_11)))
   (Start_15 Int (0 5 (- Start_9) (- Start Start_3) (+ Start_5 Start_14) (* Start_13 Start_16) (abs Start_17)))
   (Start_3 Int (4 (- Start_10 Start_9) (mod Start_2 Start_15) (abs Start_14) (ite StartBool Start_2 Start_5)))
   (Start_14 Int (3 (- Start_1) (- Start_5 Start_10) (mod Start_2 Start_2)))
   (Start_6 Int (x y 2 (- Start_7) (+ Start_8 Start_6) (div Start_7 Start_6) (abs Start_3) (ite StartBool_1 Start_8 Start_8)))
   (Start_11 Int (0 2 1 (- Start_8) (- Start_1 Start_9) (mod Start_8 Start_11) (ite StartBool_1 Start_11 Start_1)))
   (Start_10 Int (4 (div Start_2 Start_12) (ite StartBool_2 Start_8 Start_7)))
   (Start_8 Int (4 (- Start) (- Start_9 Start_6) (+ Start_3 Start_10) (abs Start_5) (ite StartBool_1 Start_11 Start_10)))
   (StartBool_2 Bool (true false (and StartBool StartBool_1) (or StartBool_1 StartBool) (< Start_4 Start_2) (<= Start_10 Start_8) (= Start_1 Start_7) (> Start_1 Start_12)))
   (StartBool_1 Bool (false true (>= Start_2 Start_10)))
   (Start_12 Int (1 2 0 x y (- Start_10) (div Start_9 Start_6) (abs Start_11) (ite StartBool_2 Start Start_11)))
   (Start_17 Int (x (- Start_4 Start_15) (* Start_3 Start)))
   (Start_9 Int (5 (- Start_13) (- Start_6 Start_13) (ite StartBool_2 Start_4 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- 5) 4)))

(check-synth)
