(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_18 Int) (Start_17 Int) (Start_10 Int) (StartBool_2 Bool) (Start_15 Int) (Start_3 Int) (Start_14 Int) (Start_11 Int) (Start_12 Int) (Start_2 Int) (Start_1 Int) (StartBool_1 Bool) (Start_4 Int) (Start_5 Int) (StartBool_3 Bool) (Start_6 Int) (Start_13 Int) (Start_7 Int) (Start_9 Int) (Start_8 Int) (Start_16 Int) (StartBool_4 Bool) (StartBool_5 Bool))
  ((Start Int (3 (- Start_1 Start) (* Start Start_1) (div Start Start)))
   (StartBool Bool (false (not StartBool_6) (= Start_6 Start_5) (>= Start_2 Start_16)))
   (StartBool_6 Bool (false (or StartBool_3 StartBool) (<= Start_14 Start_8) (= Start_9 Start_11) (>= Start_10 Start_15)))
   (Start_18 Int (3 (- Start_10 Start) (+ Start_12 Start_9) (* Start_12 Start_16) (mod Start_15 Start_14) (ite StartBool_6 Start_7 Start_17)))
   (Start_17 Int (x 5 4 (- Start_16 Start_6) (+ Start_10 Start_18) (div Start_9 Start) (ite StartBool Start_2 Start)))
   (Start_10 Int (2 (- Start_8) (- Start_3 Start_10) (+ Start_13 Start_2) (div Start_2 Start_8)))
   (StartBool_2 Bool (true false (not StartBool_5) (and StartBool_3 StartBool_4) (< Start_3 Start_2) (> Start_7 Start)))
   (Start_15 Int (0 4 (- Start_13) (+ Start_5 Start_3) (div Start_14 Start_11) (abs Start_3)))
   (Start_3 Int (5 y 2 (- Start_2) (* Start_2 Start_7) (mod Start_15 Start_13) (ite StartBool_4 Start_9 Start_1)))
   (Start_14 Int (4 2 (- Start_6) (div Start_6 Start_9) (mod Start_15 Start_8)))
   (Start_11 Int (x (- Start_8) (+ Start Start_6) (div Start_8 Start_12) (mod Start_15 Start_6) (abs Start_14)))
   (Start_12 Int (x 3 5 y (- Start_7) (+ Start_12 Start_14) (mod Start Start_8) (abs Start_4)))
   (Start_2 Int (3 2 (- Start_1) (- Start Start) (* Start Start_1) (div Start_3 Start_2) (abs Start_2) (ite StartBool_1 Start Start_2)))
   (Start_1 Int (5 2 3 (* Start_1 Start_1) (div Start_1 Start_2) (abs Start_2)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool_2) (or StartBool_3 StartBool_3) (< Start Start_3) (<= Start_2 Start_4) (= Start_3 Start_2)))
   (Start_4 Int (0 (- Start_5) (+ Start_1 Start_1)))
   (Start_5 Int (0 (- Start_2) (+ Start_4 Start_2) (mod Start_1 Start_1) (abs Start) (ite StartBool Start_1 Start_4)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool StartBool_1) (< Start_5 Start_1) (> Start_6 Start_5)))
   (Start_6 Int (5 (- Start_6 Start) (+ Start_1 Start_4) (* Start_4 Start_7) (div Start_5 Start_5) (mod Start Start_6) (ite StartBool_2 Start_1 Start_7)))
   (Start_13 Int (y 5 (* Start_4 Start) (abs Start)))
   (Start_7 Int (x (* Start_8 Start_4) (abs Start_8) (ite StartBool_4 Start_5 Start_5)))
   (Start_9 Int (1 2 5 y (- Start_4 Start) (+ Start_2 Start_7) (div Start_10 Start_1) (mod Start_1 Start_6) (abs Start_11) (ite StartBool_5 Start_3 Start_11)))
   (Start_8 Int (1 4 0 x 5 (- Start_6) (+ Start_2 Start) (* Start_4 Start_1) (div Start_4 Start) (abs Start_4) (ite StartBool_4 Start_5 Start_4)))
   (Start_16 Int (y 3 4 (- Start_2) (- Start_3 Start_9) (+ Start_16 Start_14) (* Start_6 Start_9) (div Start_15 Start_6) (mod Start_17 Start_12)))
   (StartBool_4 Bool (false (< Start_4 Start_5) (<= Start_9 Start_9) (= Start_4 Start_9) (>= Start_7 Start) (> Start_3 Start_7)))
   (StartBool_5 Bool (false true (and StartBool_2 StartBool_2) (or StartBool_4 StartBool_2) (< Start_7 Start_12) (>= Start_3 Start_3) (> Start_13 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 4 x)))

(check-synth)
