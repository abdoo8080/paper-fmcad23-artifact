(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_12 Int) (Start_10 Int) (Start_15 Int) (Start_17 Int) (Start_3 Int) (StartBool_6 Bool) (Start_11 Int) (Start_2 Int) (Start_13 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_9 Int) (Start_16 Int) (Start_4 Int) (Start_8 Int) (StartBool_2 Bool) (Start_1 Int) (Start_19 Int) (Start_18 Int) (Start_6 Int) (StartBool_5 Bool) (Start_5 Int) (Start_7 Int) (Start_14 Int))
  ((Start Int (5 1 y 0 (- Start_1) (- Start_2 Start_3)))
   (StartBool Bool (false true (not StartBool) (and StartBool_3 StartBool_4) (<= Start Start_9) (= Start_2 Start_5) (>= Start_2 Start_2) (> Start Start_8)))
   (StartBool_4 Bool (false true (and StartBool_4 StartBool_5) (or StartBool StartBool_3) (<= Start_6 Start_6) (>= Start_8 Start_13) (> Start_12 Start_13)))
   (Start_12 Int (y (- Start_15) (- Start_9 Start_9) (mod Start_12 Start_4) (ite StartBool_2 Start_2 Start_18)))
   (Start_10 Int (4 (- Start_1) (div Start_6 Start_2) (mod Start_9 Start_1)))
   (Start_15 Int (5 0 2 x 3 (- Start_3) (- Start_11 Start_2) (+ Start_11 Start_5) (mod Start_16 Start_3) (abs Start_1) (ite StartBool_1 Start_16 Start_17)))
   (Start_17 Int (1 (- Start_6) (- Start_7 Start_16)))
   (Start_3 Int (3 (- Start_2) (- Start Start_1) (+ Start_4 Start_1) (* Start_4 Start_3)))
   (StartBool_6 Bool (false (= Start_18 Start_19)))
   (Start_11 Int (3 5 (+ Start_5 Start_12) (* Start_5 Start_10) (div Start_6 Start_4) (mod Start_13 Start_5) (abs Start_14) (ite StartBool Start_2 Start_10)))
   (Start_2 Int (x 0 (- Start_2) (abs Start_19) (ite StartBool_1 Start_1 Start_3)))
   (Start_13 Int (2 x 3 y 5 (- Start_9) (+ Start_6 Start_15) (* Start_7 Start_5)))
   (StartBool_3 Bool (false true (or StartBool StartBool_2) (< Start_3 Start_8) (<= Start_3 Start_5) (>= Start_6 Start_8) (> Start_9 Start_3)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (or StartBool_1 StartBool_1) (>= Start_3 Start_2) (> Start_7 Start_2)))
   (Start_9 Int (1 (mod Start_3 Start_5) (abs Start_5)))
   (Start_16 Int (3 (- Start_4) (* Start_13 Start_5) (mod Start_13 Start_10) (abs Start)))
   (Start_4 Int (5 (- Start_4) (+ Start_1 Start_5) (* Start_2 Start_3) (div Start_4 Start_2) (mod Start_6 Start_3) (abs Start_4) (ite StartBool_1 Start_1 Start_2)))
   (Start_8 Int (x 2 (- Start_5) (+ Start_5 Start) (* Start_2 Start_5) (div Start_1 Start_9) (abs Start_4) (ite StartBool Start_8 Start_8)))
   (StartBool_2 Bool (true (or StartBool_1 StartBool) (< Start Start) (<= Start_9 Start_3) (> Start_7 Start)))
   (Start_1 Int (1 (* Start_14 Start_19) (mod Start_16 Start_13) (abs Start_9) (ite StartBool_1 Start_5 Start_1)))
   (Start_19 Int (5 (- Start_5) (* Start_14 Start_17) (div Start_15 Start_14) (abs Start_6) (ite StartBool_3 Start_11 Start_11)))
   (Start_18 Int (4 1 (- Start_7 Start_3) (* Start_13 Start_1) (div Start_1 Start_4) (abs Start_9)))
   (Start_6 Int (4 2 (+ Start_10 Start_9) (* Start_9 Start_4) (div Start_4 Start_11)))
   (StartBool_5 Bool (false true (not StartBool_6) (< Start_9 Start_5) (<= Start Start_19)))
   (Start_5 Int (0 (+ Start_4 Start_1) (* Start_13 Start_18) (div Start_18 Start_18)))
   (Start_7 Int (4 3 5 (- Start Start_4) (+ Start_4 Start_4) (div Start_3 Start_6) (mod Start Start_2) (abs Start_3)))
   (Start_14 Int (x 4 (- Start_10) (- Start_13 Start_13) (* Start_4 Start_8) (ite StartBool_1 Start_12 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 1 (* (+ 1 (div x x)) 5))))

(check-synth)
