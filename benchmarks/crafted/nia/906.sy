(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_11 Int) (Start_12 Int) (Start_8 Int) (Start_10 Int) (Start_6 Int) (StartBool_3 Bool) (StartBool_5 Bool) (Start_9 Int) (Start_4 Int) (Start_5 Int) (Start_2 Int) (StartBool_1 Bool) (Start_3 Int) (Start_1 Int) (Start_7 Int) (StartBool_2 Bool) (StartBool_4 Bool))
  ((Start Int (1 2 4 5 (- Start) (+ Start Start_1) (* Start_1 Start_2) (mod Start_1 Start_2) (ite StartBool Start_1 Start)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_5 StartBool_1) (<= Start_2 Start_12) (= Start_7 Start_12) (>= Start_8 Start_5) (> Start_6 Start_4)))
   (Start_13 Int (1 3 2 x 4 y 5 (- Start_1) (- Start_6 Start_12)))
   (Start_11 Int (4 (+ Start_3 Start_12) (div Start_12 Start_9) (mod Start_13 Start_2) (ite StartBool Start_5 Start_11)))
   (Start_12 Int (2 y (- Start_10) (* Start_8 Start_8) (div Start_12 Start_9) (mod Start_6 Start_1) (abs Start_2)))
   (Start_8 Int (0 (* Start_3 Start_9) (ite StartBool_4 Start_11 Start_1)))
   (Start_10 Int (0 3 (+ Start_4 Start_7) (* Start_5 Start_1) (div Start_4 Start_1) (mod Start_8 Start_5) (abs Start_8)))
   (Start_6 Int (2 (- Start_7 Start_1) (* Start_6 Start_6) (abs Start_7)))
   (StartBool_3 Bool (true (>= Start_2 Start) (> Start Start_6)))
   (StartBool_5 Bool (false true (and StartBool StartBool_3) (or StartBool_1 StartBool_2) (< Start_13 Start_12) (> Start_7 Start_3)))
   (Start_9 Int (0 (+ Start_6 Start_1) (div Start Start_10) (mod Start_1 Start_8) (abs Start_1)))
   (Start_4 Int (0 (- Start_1) (+ Start_5 Start_4) (abs Start) (ite StartBool Start_2 Start_4)))
   (Start_5 Int (2 (- Start) (+ Start_3 Start_5) (mod Start_5 Start_1) (ite StartBool_1 Start_3 Start_3)))
   (Start_2 Int (0 (- Start_1 Start_1) (+ Start_1 Start) (abs Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (or StartBool StartBool) (<= Start_4 Start)))
   (Start_3 Int (2 (- Start_3) (* Start_2 Start_3) (div Start Start_1) (mod Start_1 Start_3) (abs Start_6) (ite StartBool_2 Start_6 Start_3)))
   (Start_1 Int (y 0 3 (- Start_3) (+ Start_4 Start_3) (abs Start_1)))
   (Start_7 Int (y 2 (+ Start_8 Start_9) (* Start_6 Start) (mod Start_6 Start_3) (abs Start_7)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_4) (or StartBool StartBool_3) (> Start_6 Start_6)))
   (StartBool_4 Bool (false true (not StartBool_1) (<= Start_2 Start_3) (> Start_4 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (- (div (abs y) (- 5 y)) 2) 4)))

(check-synth)
