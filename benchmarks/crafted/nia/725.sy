(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (StartBool_5 Bool) (Start_1 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_5 Int) (Start_2 Int) (StartBool_1 Bool) (Start_11 Int) (StartBool_2 Bool) (Start_6 Int) (Start_4 Int) (Start_7 Int) (Start_8 Int) (Start_12 Int) (Start_9 Int) (Start_10 Int) (Start_14 Int) (Start_13 Int))
  ((Start Int (y (- Start) (+ Start Start_1) (* Start_2 Start) (mod Start_2 Start_1) (ite StartBool_1 Start Start_1)))
   (StartBool Bool (true (and StartBool_4 StartBool_3) (> Start_11 Start_7)))
   (Start_3 Int (x 5 (+ Start_10 Start_13) (div Start_3 Start_1) (abs Start_10) (ite StartBool_3 Start_13 Start_1)))
   (StartBool_5 Bool (false true (and StartBool_2 StartBool_2) (>= Start_8 Start_7)))
   (Start_1 Int (4 y 0 (- Start_8) (+ Start_3 Start_9) (* Start_4 Start_11)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_5 StartBool_4) (or StartBool_1 StartBool_3) (<= Start_3 Start_12) (> Start_4 Start_5)))
   (StartBool_4 Bool (true (and StartBool_4 StartBool_3) (or StartBool_2 StartBool_3) (> Start_14 Start)))
   (Start_5 Int (x (- Start_4 Start_4) (+ Start_10 Start_4)))
   (Start_2 Int (4 y (* Start_3 Start_2) (abs Start_4) (ite StartBool Start_3 Start_4)))
   (StartBool_1 Bool (false true (or StartBool_1 StartBool_1) (<= Start Start)))
   (Start_11 Int (y (- Start_12 Start_1) (* Start Start_8) (ite StartBool_2 Start_10 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_4) (or StartBool_3 StartBool_1) (< Start_4 Start) (<= Start Start) (= Start_4 Start_5) (>= Start_6 Start_2) (> Start_1 Start_1)))
   (Start_6 Int (x 3 y 4 (- Start_7 Start_4) (+ Start_8 Start_6) (abs Start_6) (ite StartBool_2 Start_7 Start_2)))
   (Start_4 Int (5 (+ Start Start_2) (mod Start_1 Start_1) (abs Start) (ite StartBool_2 Start Start_3)))
   (Start_7 Int (y (- Start) (- Start_4 Start_2) (* Start_8 Start_4) (ite StartBool_2 Start Start_10)))
   (Start_8 Int (x (- Start_2 Start_3) (+ Start Start_6) (* Start_7 Start_7) (div Start_5 Start_4) (mod Start_9 Start_5) (abs Start_9) (ite StartBool Start_2 Start_6)))
   (Start_12 Int (3 2 (- Start_12) (+ Start_4 Start_5) (div Start_10 Start_13) (mod Start_11 Start_2) (ite StartBool Start_10 Start_3)))
   (Start_9 Int (3 (div Start_2 Start_9) (mod Start_3 Start_1) (abs Start_6)))
   (Start_10 Int (4 0 y x 1 (- Start_10) (- Start_11 Start_2) (* Start_8 Start_1) (mod Start_5 Start_12) (abs Start_4)))
   (Start_14 Int (1 (- Start_1 Start_11) (abs Start_9) (ite StartBool_1 Start_5 Start_9)))
   (Start_13 Int (2 (- Start_8 Start_2) (+ Start_7 Start_7) (div Start_7 Start_3) (abs Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod (mod x y) 2))))

(check-synth)
