(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_2 Bool) (Start_2 Int) (Start_7 Int) (Start_6 Int) (StartBool_1 Bool) (Start_4 Int) (Start_5 Int) (Start_3 Int))
  ((Start Int (5 x (- Start_1) (+ Start_2 Start_1) (* Start Start_2) (div Start_2 Start_2) (ite StartBool_1 Start_2 Start_3)))
   (StartBool Bool (false true (and StartBool_2 StartBool_1) (>= Start_4 Start_1)))
   (Start_1 Int (3 (- Start) (+ Start_3 Start_7) (div Start_7 Start_4)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool) (or StartBool_1 StartBool) (> Start_2 Start_6)))
   (Start_2 Int (2 (- Start) (+ Start_1 Start_4) (* Start_6 Start_1) (div Start_7 Start_5) (ite StartBool_1 Start Start_5)))
   (Start_7 Int (y 5 (div Start_4 Start_4) (mod Start_4 Start_6) (abs Start_3)))
   (Start_6 Int (4 1 (+ Start Start_7) (div Start_1 Start_4) (mod Start_6 Start_2)))
   (StartBool_1 Bool (true false (= Start_5 Start_1) (>= Start Start)))
   (Start_4 Int (x y (- Start_1) (- Start_4 Start_2) (div Start_3 Start_2) (mod Start_5 Start_5) (ite StartBool_1 Start_4 Start_5)))
   (Start_5 Int (4 5 (- Start_1 Start_5) (+ Start_2 Start_2) (* Start_4 Start) (ite StartBool_1 Start_6 Start)))
   (Start_3 Int (y (- Start_3) (- Start_1 Start_4) (ite StartBool_1 Start Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div (+ (- 1) (ite (< y 5) x 0)) y))))

(check-synth)
