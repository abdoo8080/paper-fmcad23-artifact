(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_12 Int) (Start_11 Int) (StartBool_3 Bool) (Start_3 Int) (Start_10 Int) (Start_8 Int) (Start_4 Int) (Start_6 Int) (Start_1 Int) (Start_5 Int) (Start_7 Int) (StartBool_2 Bool) (Start_2 Int) (Start_9 Int) (StartBool_1 Bool))
  ((Start Int (x 2 1 (- Start) (* Start_1 Start_1) (div Start Start)))
   (StartBool Bool (false true (not StartBool_3) (or StartBool_1 StartBool_2) (< Start_8 Start_2) (<= Start_1 Start_4) (= Start_4 Start) (> Start_8 Start_5)))
   (StartBool_4 Bool (false true (not StartBool_2) (>= Start_2 Start_12) (> Start_8 Start_4)))
   (Start_12 Int (y 0 (- Start_11 Start_5) (+ Start_10 Start_8) (* Start_6 Start_3) (div Start_7 Start_3) (abs Start_10)))
   (Start_11 Int (4 (- Start_7) (+ Start_12 Start_11) (mod Start_9 Start_4)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_3 StartBool_3) (or StartBool_2 StartBool_4) (<= Start_10 Start) (= Start_2 Start_2) (>= Start_4 Start_3) (> Start_5 Start_5)))
   (Start_3 Int (y 5 (+ Start_3 Start_4) (* Start Start_2)))
   (Start_10 Int (0 4 y (- Start_7) (- Start_3 Start_6) (* Start_4 Start_10) (mod Start_8 Start_7) (abs Start_11) (ite StartBool Start_5 Start_1)))
   (Start_8 Int (y (- Start_8) (- Start_4 Start_7) (* Start Start_6) (div Start_7 Start_8) (mod Start_7 Start_4) (ite StartBool_2 Start_3 Start_4)))
   (Start_4 Int (5 1 (+ Start_4 Start_2) (mod Start Start) (abs Start_5) (ite StartBool_1 Start_1 Start_4)))
   (Start_6 Int (3 5 (- Start Start_6) (+ Start_1 Start_2) (* Start_2 Start_2) (div Start_6 Start_6) (abs Start) (ite StartBool Start_4 Start_7)))
   (Start_1 Int (5 2 1 (- Start_2 Start) (* Start_2 Start_2) (ite StartBool_1 Start Start_3)))
   (Start_5 Int (1 0 (- Start Start_5) (+ Start_1 Start_4) (div Start_4 Start_5) (mod Start_4 Start_3)))
   (Start_7 Int (x (- Start_1) (+ Start_5 Start_5) (* Start_4 Start_5) (div Start_3 Start_3) (ite StartBool_2 Start_3 Start_8)))
   (StartBool_2 Bool (false (<= Start_4 Start_6) (> Start_1 Start_7)))
   (Start_2 Int (y 2 5 x 0 3 (- Start_9 Start_1) (abs Start_3) (ite StartBool_2 Start_6 Start_3)))
   (Start_9 Int (x 4 1 (- Start_8) (* Start_8 Start_6) (div Start_9 Start_6) (mod Start_7 Start_1) (abs Start)))
   (StartBool_1 Bool (true (or StartBool StartBool) (< Start_3 Start_1) (>= Start Start_1) (> Start_2 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div x (+ 4 4))))

(check-synth)
