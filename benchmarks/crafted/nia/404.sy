(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_2 Int) (Start_7 Int) (Start_3 Int) (Start_9 Int) (StartBool_2 Bool) (Start_6 Int) (Start_5 Int) (Start_4 Int) (Start_10 Int) (StartBool_1 Bool) (Start_1 Int) (Start_8 Int))
  ((Start Int (y (* Start Start_1) (div Start Start_1) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_2 StartBool) (< Start_8 Start_6) (> Start_5 Start_4)))
   (Start_11 Int (y (- Start_9) (* Start_5 Start_7) (div Start_7 Start_4) (mod Start_1 Start_10) (abs Start_5)))
   (Start_2 Int (x (- Start_1 Start_1) (* Start Start_1) (mod Start_3 Start) (ite StartBool_1 Start Start_2)))
   (Start_7 Int (1 x (- Start) (* Start_2 Start_4) (mod Start_5 Start_7) (ite StartBool Start_3 Start_7)))
   (Start_3 Int (3 (- Start_2) (- Start_4 Start_1) (+ Start_3 Start_2) (div Start_3 Start_5) (mod Start_5 Start) (abs Start_5) (ite StartBool_2 Start_5 Start)))
   (Start_9 Int (x 0 (- Start_8) (+ Start_3 Start_9) (* Start_10 Start_11) (div Start_1 Start_1) (abs Start_9)))
   (StartBool_2 Bool (false (< Start_3 Start) (<= Start_3 Start) (= Start_3 Start) (>= Start Start_1) (> Start_4 Start_1)))
   (Start_6 Int (0 (- Start_5) (+ Start_3 Start_3) (div Start Start_2) (abs Start_3)))
   (Start_5 Int (4 y (+ Start_2 Start_6) (* Start_6 Start_3) (mod Start_2 Start_2)))
   (Start_4 Int (5 0 (+ Start_3 Start_4) (* Start_1 Start_1) (mod Start_5 Start_7)))
   (Start_10 Int (x (- Start_3 Start_1) (mod Start_6 Start_10) (abs Start_10) (ite StartBool_2 Start_11 Start_7)))
   (StartBool_1 Bool (false (not StartBool_2)))
   (Start_1 Int (y 1 (- Start_7 Start_6) (div Start_4 Start_2) (abs Start_7)))
   (Start_8 Int (5 (- Start_9) (- Start Start) (+ Start_5 Start) (div Start_2 Start_3) (mod Start_7 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= (- x 2) 1) y 3)))

(check-synth)
