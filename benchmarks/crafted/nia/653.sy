(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (Start_19 Int) (StartBool_2 Bool) (Start_18 Int) (Start_1 Int) (Start_15 Int) (StartBool_6 Bool) (StartBool_3 Bool) (Start_17 Int) (Start_16 Int) (Start_14 Int) (Start_4 Int) (StartBool_4 Bool) (Start_5 Int) (Start_3 Int) (StartBool_5 Bool) (Start_2 Int) (Start_6 Int) (Start_10 Int) (Start_12 Int) (Start_8 Int) (Start_9 Int) (Start_21 Int) (StartBool_1 Bool) (Start_7 Int) (Start_11 Int) (Start_13 Int))
  ((Start Int (4 (- Start_1 Start_1) (+ Start_2 Start_2) (* Start_1 Start_1)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_2 StartBool_6) (= Start_21 Start_19) (> Start_19 Start_8)))
   (Start_20 Int (0 (- Start_6) (- Start_3 Start_12) (div Start_17 Start_17) (mod Start_10 Start_9) (abs Start_16) (ite StartBool_4 Start_2 Start_8)))
   (Start_19 Int (3 y 1 4 (- Start_5 Start_15) (div Start_1 Start_2) (abs Start_6) (ite StartBool_2 Start_20 Start_16)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_2) (or StartBool_5 StartBool_2)))
   (Start_18 Int (1 x y))
   (Start_1 Int (3 (- Start_17 Start_13) (* Start_15 Start_2) (div Start_16 Start_4) (ite StartBool_4 Start_19 Start_9)))
   (Start_15 Int (5 4 (- Start_13 Start_15) (+ Start_5 Start_8) (mod Start_8 Start_5) (abs Start_17) (ite StartBool_4 Start_13 Start_18)))
   (StartBool_6 Bool (true false (not StartBool_1) (or StartBool_6 StartBool_4) (< Start_12 Start_20) (<= Start_1 Start_4) (= Start_18 Start_4)))
   (StartBool_3 Bool (true (not StartBool_2) (= Start_15 Start_15)))
   (Start_17 Int (4 (- Start_14) (- Start_3 Start_17)))
   (Start_16 Int (1 (- Start_15 Start_17) (div Start_5 Start_16) (ite StartBool_1 Start_17 Start_17)))
   (Start_14 Int (x 1 0 3 (- Start_14) (div Start_15 Start_9) (mod Start_6 Start_12) (ite StartBool_3 Start_8 Start_16)))
   (Start_4 Int (3 1 y 2 4 5 (- Start_11)))
   (StartBool_4 Bool (true (not StartBool_2) (and StartBool StartBool_4) (< Start_5 Start_6) (>= Start_1 Start_2)))
   (Start_5 Int (4 (+ Start_2 Start_3) (mod Start_5 Start_7) (abs Start_1) (ite StartBool_1 Start_4 Start_9)))
   (Start_3 Int (2 (+ Start_4 Start_5) (div Start_6 Start_2) (mod Start_7 Start_2)))
   (StartBool_5 Bool (false true (and StartBool_1 StartBool_6) (or StartBool_3 StartBool_4) (< Start_19 Start_9) (>= Start_19 Start_13) (> Start_6 Start_19)))
   (Start_2 Int (3 y (- Start_2 Start_1) (+ Start_1 Start_2) (div Start_2 Start) (mod Start Start_3) (abs Start_3) (ite StartBool Start_1 Start_3)))
   (Start_6 Int (1 (- Start_8) (mod Start_1 Start_6)))
   (Start_10 Int (y (- Start) (- Start_11 Start_8) (* Start_12 Start_10) (div Start Start) (abs Start_11)))
   (Start_12 Int (3 (- Start_9) (div Start_6 Start_8)))
   (Start_8 Int (4 3 (- Start Start_6) (+ Start_9 Start_7) (div Start_9 Start_2)))
   (Start_9 Int (3 1 2 (+ Start_9 Start_4) (mod Start_6 Start_7) (abs Start_7)))
   (Start_21 Int (y 3 (- Start_3 Start_13) (* Start_15 Start_9) (div Start_11 Start_3) (abs Start_17) (ite StartBool_6 Start_4 Start_11)))
   (StartBool_1 Bool (false (or StartBool StartBool_2) (< Start_7 Start_10) (<= Start_10 Start_7) (= Start_3 Start_10) (>= Start_4 Start_5) (> Start_2 Start_3)))
   (Start_7 Int (2 x))
   (Start_11 Int (2 x 4 y 0 (+ Start_12 Start) (mod Start Start_13) (abs Start_7)))
   (Start_13 Int (5 3 2 (- Start_8) (- Start_7 Start_6) (+ Start_10 Start_1) (ite StartBool_2 Start_13 Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (= y 1) 0 (div 1 0))))

(check-synth)
