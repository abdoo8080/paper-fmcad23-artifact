(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_5 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_2 Int) (Start_9 Int) (Start_4 Int) (Start_6 Int) (Start_8 Int) (StartBool_3 Bool) (Start_7 Int) (Start_1 Int) (Start_3 Int) (Start_10 Int) (StartBool_4 Bool))
  ((Start Int (3 (- Start_1) (div Start_2 Start) (mod Start_1 Start)))
   (StartBool Bool (true false (not StartBool) (or StartBool StartBool_1) (< Start_6 Start_8) (>= Start_10 Start_5) (> Start_3 Start_6)))
   (Start_5 Int (0 (- Start_3) (- Start_4 Start_1) (* Start_7 Start_4) (abs Start_4) (ite StartBool_4 Start_7 Start_10)))
   (StartBool_1 Bool (false true (not StartBool_1) (<= Start_1 Start_1)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool StartBool_3) (or StartBool_2 StartBool_1) (>= Start_7 Start_4)))
   (Start_2 Int (3 (- Start_2 Start_2) (+ Start_1 Start_1) (abs Start_3) (ite StartBool_1 Start_1 Start)))
   (Start_9 Int (2 (- Start_3 Start_3) (div Start_6 Start_5) (mod Start_8 Start_7)))
   (Start_4 Int (1 (+ Start_1 Start_4) (* Start_4 Start_5) (abs Start_2) (ite StartBool_2 Start_6 Start_5)))
   (Start_6 Int (4 (- Start_7 Start_8) (+ Start_6 Start) (div Start Start_4)))
   (Start_8 Int (2 5 x (div Start Start_7) (mod Start_1 Start_3) (ite StartBool_2 Start_9 Start_1)))
   (StartBool_3 Bool (false (and StartBool_4 StartBool_1) (or StartBool StartBool) (< Start_4 Start_1) (= Start_9 Start_5)))
   (Start_7 Int (5 (- Start) (* Start_5 Start_10)))
   (Start_1 Int (0 4 (- Start_2) (- Start Start_5) (* Start_9 Start_10) (ite StartBool_4 Start_2 Start_9)))
   (Start_3 Int (1 (- Start_1) (+ Start_4 Start) (* Start_3 Start) (div Start_2 Start_1) (mod Start_1 Start_1) (abs Start_1)))
   (Start_10 Int (1 0 (- Start_7 Start_1) (mod Start_4 Start_6) (abs Start_5)))
   (StartBool_4 Bool (false true (or StartBool_4 StartBool)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 4 (* (- x 4) x))))

(check-synth)
