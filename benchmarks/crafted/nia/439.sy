(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_13 Int) (StartBool_8 Bool) (Start_12 Int) (Start_2 Int) (StartBool_2 Bool) (StartBool_5 Bool) (Start_5 Int) (Start_8 Int) (Start_1 Int) (Start_14 Int) (Start_6 Int) (Start_4 Int) (Start_3 Int) (Start_7 Int) (Start_11 Int) (StartBool_7 Bool) (StartBool_6 Bool) (StartBool_1 Bool) (Start_10 Int) (StartBool_10 Bool) (Start_9 Int) (StartBool_9 Bool) (StartBool_3 Bool) (Start_16 Int) (StartBool_4 Bool))
  ((Start Int (3 (* Start Start) (div Start_1 Start)))
   (StartBool Bool (true (not StartBool_10) (<= Start_16 Start_1) (>= Start_15 Start_6)))
   (Start_15 Int (2 (- Start_14) (+ Start Start_13) (* Start_5 Start) (div Start Start_13) (mod Start_15 Start_11) (abs Start_1) (ite StartBool Start_1 Start_10)))
   (Start_13 Int (2 x 3 (- Start_10) (* Start_8 Start_10) (div Start_2 Start_8) (mod Start_2 Start_9) (abs Start_6) (ite StartBool_6 Start_9 Start_14)))
   (StartBool_8 Bool (true false (not StartBool_9) (and StartBool_4 StartBool_7) (< Start_10 Start_6)))
   (Start_12 Int (1 (- Start_9) (- Start_8 Start_2) (div Start_2 Start_4) (mod Start_11 Start_13)))
   (Start_2 Int (5 y (+ Start_9 Start_2) (mod Start_4 Start_12) (abs Start_5) (ite StartBool Start_6 Start)))
   (StartBool_2 Bool (true false (<= Start_9 Start_7) (= Start Start_8) (> Start_5 Start)))
   (StartBool_5 Bool (true false (or StartBool_2 StartBool_1) (<= Start_3 Start_8) (> Start Start_5)))
   (Start_5 Int (3 (- Start) (* Start_2 Start_10) (div Start_7 Start) (mod Start Start_2) (ite StartBool_1 Start_8 Start_3)))
   (Start_8 Int (5 (- Start_5 Start_8) (+ Start_6 Start_9) (* Start_4 Start_6) (mod Start_8 Start_7) (abs Start_6) (ite StartBool_2 Start_1 Start_10)))
   (Start_1 Int (x (- Start_2 Start_3) (* Start_4 Start_1)))
   (Start_14 Int (5 1 3 (- Start_3) (- Start_9 Start_4) (div Start_10 Start_11) (mod Start_7 Start_1) (abs Start)))
   (Start_6 Int (2 (+ Start_4 Start_1) (abs Start)))
   (Start_4 Int (3 2 (- Start_2) (+ Start_3 Start) (div Start_3 Start_3)))
   (Start_3 Int (4 y (* Start_5 Start_4) (abs Start_4) (ite StartBool_1 Start_4 Start_6)))
   (Start_7 Int (0 4 5 3 (* Start_8 Start_5) (abs Start_4)))
   (Start_11 Int (2 y (- Start_3) (- Start Start_2) (+ Start Start_1) (* Start_5 Start_3) (div Start_7 Start_2) (ite StartBool_2 Start_2 Start_11)))
   (StartBool_7 Bool (true (not StartBool_6) (< Start_11 Start_16) (= Start_2 Start_15)))
   (StartBool_6 Bool (true false (not StartBool_7) (or StartBool_7 StartBool_7) (= Start_11 Start) (>= Start_3 Start_10) (> Start_15 Start_12)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool_2) (or StartBool_1 StartBool_3) (= Start_7 Start_7) (> Start Start)))
   (Start_10 Int (1 (* Start Start_3) (div Start_2 Start_5) (mod Start Start_10)))
   (StartBool_10 Bool (true (or StartBool_3 StartBool) (< Start_7 Start_15) (<= Start_2 Start_10) (= Start_13 Start_9) (> Start_3 Start_7)))
   (Start_9 Int (4 (- Start_1 Start_11) (+ Start_9 Start_7) (* Start_2 Start_9) (mod Start_2 Start_7) (abs Start_1) (ite StartBool_2 Start_3 Start_1)))
   (StartBool_9 Bool (false true (and StartBool_1 StartBool_4) (< Start_11 Start_4) (= Start_16 Start_9)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_3 StartBool_4) (< Start_2 Start_4) (= Start_11 Start) (>= Start_8 Start_6)))
   (Start_16 Int (2 4 x 3 (- Start_1) (- Start_14 Start_11) (* Start_14 Start_2) (mod Start_16 Start) (abs Start_6) (ite StartBool_8 Start_2 Start)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_1 StartBool) (<= Start_4 Start_11) (= Start_6 Start_2) (>= Start_3 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 3 (div x 0))))

(check-synth)
