(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (StartBool_5 Bool) (Start_18 Int) (Start_17 Int) (Start_15 Int) (Start_16 Int) (Start_14 Int) (StartBool_7 Bool) (Start_13 Int) (Start_2 Int) (Start_1 Int) (Start_7 Int) (Start_12 Int) (Start_6 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_8 Int) (Start_10 Int) (StartBool_4 Bool) (StartBool_6 Bool) (Start_9 Int) (Start_4 Int) (Start_19 Int) (Start_11 Int) (Start_3 Int) (Start_5 Int) (StartBool_3 Bool))
  ((Start Int (4 (mod Start Start_1)))
   (StartBool Bool (false (and StartBool_3 StartBool_2) (or StartBool_4 StartBool_5) (< Start_1 Start_2) (<= Start_8 Start_11) (= Start_14 Start) (> Start Start_10)))
   (Start_20 Int (y (- Start_15) (- Start_19 Start_18) (div Start_18 Start_13) (abs Start)))
   (StartBool_5 Bool (true (< Start_11 Start_14) (= Start_9 Start_3) (> Start_20 Start_14)))
   (Start_18 Int (3 1 (- Start_9 Start_19) (mod Start_9 Start_18) (ite StartBool_7 Start_8 Start_14)))
   (Start_17 Int (5 (* Start_9 Start_18) (div Start_4 Start_18) (abs Start_16) (ite StartBool_5 Start_7 Start_15)))
   (Start_15 Int (5 (- Start_5 Start_5) (+ Start_3 Start_3) (* Start_2 Start_7) (mod Start_3 Start_16) (abs Start_9) (ite StartBool_1 Start_17 Start_8)))
   (Start_16 Int (3 2 x (- Start_9 Start_9) (+ Start_4 Start_10) (div Start_16 Start_5)))
   (Start_14 Int (5 (- Start_7) (- Start_13 Start_15) (* Start_16 Start_11) (div Start_5 Start_2) (mod Start_15 Start_9) (ite StartBool_6 Start_15 Start_7)))
   (StartBool_7 Bool (false true (and StartBool_6 StartBool_2) (< Start_12 Start_19) (<= Start_3 Start_11) (>= Start_7 Start_5)))
   (Start_13 Int (0 (- Start_2) (+ Start_11 Start_9) (* Start_1 Start_6) (div Start_7 Start_5) (mod Start_12 Start_10)))
   (Start_2 Int (3 (+ Start_3 Start_9) (* Start_1 Start_6) (div Start_8 Start_12)))
   (Start_1 Int (4 (- Start_1) (+ Start_2 Start) (* Start_3 Start_2) (div Start_4 Start) (ite StartBool_1 Start_5 Start_3)))
   (Start_7 Int (2 1 (+ Start_5 Start_2) (* Start_1 Start_7) (div Start_1 Start_1) (mod Start Start) (abs Start)))
   (Start_12 Int (2 (- Start_5) (- Start_1 Start_12) (div Start_12 Start_13) (mod Start_7 Start_1) (abs Start_10)))
   (Start_6 Int (0 4 x 3 2 (- Start_4) (* Start_4 Start_7) (div Start_6 Start_8) (abs Start_3) (ite StartBool_2 Start_7 Start_7)))
   (StartBool_1 Bool (true (< Start_9 Start_3) (<= Start_8 Start) (>= Start_2 Start_8)))
   (StartBool_2 Bool (false (or StartBool StartBool) (< Start_4 Start_6) (<= Start_6 Start_3) (= Start_7 Start_8)))
   (Start_8 Int (4 1 (+ Start_3 Start_7) (div Start_2 Start_8) (mod Start_6 Start_8)))
   (Start_10 Int (y 4 (- Start_1) (* Start_9 Start_1) (div Start_10 Start_9) (ite StartBool_1 Start_4 Start_9)))
   (StartBool_4 Bool (true (and StartBool StartBool_4) (<= Start_7 Start_4) (>= Start_8 Start_2) (> Start_7 Start_11)))
   (StartBool_6 Bool (false (not StartBool_4) (and StartBool_3 StartBool_6) (or StartBool_3 StartBool_2) (>= Start_7 Start_1)))
   (Start_9 Int (5 4 x (- Start_3) (div Start_8 Start_2)))
   (Start_4 Int (4 (- Start_1) (+ Start Start_8) (div Start_1 Start_9) (abs Start_7)))
   (Start_19 Int (x (- Start) (- Start_15 Start_5) (+ Start_14 Start_11) (div Start_3 Start_12) (mod Start_16 Start_17)))
   (Start_11 Int (5 (- Start_5) (* Start_11 Start_8) (mod Start_3 Start_2)))
   (Start_3 Int (2 (- Start_8) (+ Start_5 Start_10) (* Start_1 Start) (mod Start_4 Start_9) (ite StartBool_3 Start_2 Start_9)))
   (Start_5 Int (3 x 1 4 y (- Start_2) (- Start_6 Start_5) (+ Start_3 Start_3) (div Start_1 Start_7) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_4) (or StartBool_1 StartBool_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (div 4 y) y)))

(check-synth)
