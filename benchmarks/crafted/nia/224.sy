(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_12 Int) (Start_3 Int) (StartBool_3 Bool) (Start_2 Int) (Start_6 Int) (Start_10 Int) (Start_1 Int) (StartBool_1 Bool) (Start_9 Int) (Start_7 Int) (Start_4 Int) (Start_8 Int) (Start_5 Int) (StartBool_2 Bool))
  ((Start Int (x (* Start Start) (div Start Start_1) (mod Start_2 Start) (ite StartBool_1 Start_3 Start_3)))
   (StartBool Bool (true (not StartBool_1) (or StartBool StartBool_3) (< Start_9 Start_2)))
   (Start_11 Int (x (- Start_3 Start_3) (* Start_4 Start_1) (ite StartBool_2 Start_11 Start_1)))
   (Start_12 Int (2 x 0 (- Start) (* Start_4 Start_10) (div Start_5 Start_1) (ite StartBool_2 Start_5 Start_4)))
   (Start_3 Int (3 (- Start_1 Start_2) (+ Start_1 Start) (* Start Start) (div Start_3 Start_3) (mod Start_1 Start_3) (abs Start) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_2 StartBool_1) (<= Start_2 Start_3) (= Start_10 Start_9)))
   (Start_2 Int (x (- Start) (+ Start_1 Start) (* Start Start_2) (mod Start Start_2) (abs Start_1) (ite StartBool_1 Start_4 Start_2)))
   (Start_6 Int (5 (* Start_2 Start_6) (div Start_2 Start_1) (mod Start_2 Start_4) (ite StartBool_1 Start_6 Start_5)))
   (Start_10 Int (2 (mod Start_8 Start_1) (abs Start_8) (ite StartBool Start_4 Start)))
   (Start_1 Int (y (- Start_10) (- Start_6 Start_1) (div Start_11 Start_2) (abs Start_7) (ite StartBool_2 Start_1 Start)))
   (StartBool_1 Bool (false (<= Start Start) (= Start_1 Start_3)))
   (Start_9 Int (0 (- Start_7) (ite StartBool Start_5 Start_4)))
   (Start_7 Int (2 1 (- Start_7) (- Start_8 Start_9) (mod Start_10 Start_2) (abs Start_4) (ite StartBool_1 Start_8 Start)))
   (Start_4 Int (2 1 3 (- Start_4) (+ Start Start_5) (* Start_6 Start_4) (mod Start_3 Start) (abs Start_5)))
   (Start_8 Int (4 (- Start_5 Start_8) (+ Start_5 Start_8) (* Start_2 Start_7) (abs Start_9)))
   (Start_5 Int (0 1 (- Start_7) (+ Start_4 Start_4) (div Start_4 Start_3) (mod Start_3 Start_6) (abs Start_6)))
   (StartBool_2 Bool (true (not StartBool_1) (or StartBool_3 StartBool) (<= Start_2 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (div 2 x) y)))

(check-synth)
