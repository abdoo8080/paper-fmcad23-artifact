(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_9 Int) (Start_1 Int) (Start_4 Int) (StartBool_1 Bool) (Start_8 Int) (Start_5 Int) (Start_7 Int) (Start_2 Int) (Start_6 Int) (Start_3 Int))
  ((Start Int (2 (- Start Start) (* Start Start) (div Start_1 Start_2) (mod Start_2 Start_3) (abs Start_3) (ite StartBool Start Start)))
   (StartBool Bool (true false (not StartBool_1) (< Start_8 Start_3) (= Start_2 Start_2) (>= Start_9 Start_9) (> Start_9 Start_10)))
   (Start_10 Int (x (- Start_8) (+ Start_9 Start_6) (* Start_7 Start_7) (div Start_5 Start) (mod Start Start_6)))
   (Start_9 Int (1 y 5 3 (- Start_1) (- Start_7 Start_5) (div Start_3 Start_9) (mod Start_10 Start_9) (abs Start_3)))
   (Start_1 Int (3 (- Start_7) (- Start_3 Start_1) (+ Start Start_7) (* Start_3 Start_3) (div Start_9 Start) (mod Start_5 Start_9)))
   (Start_4 Int (x 4 (- Start_7) (+ Start Start) (div Start_5 Start_5) (abs Start_8)))
   (StartBool_1 Bool (false true (not StartBool_1) (= Start_4 Start)))
   (Start_8 Int (0 (- Start_3) (+ Start Start_2) (mod Start_2 Start_7)))
   (Start_5 Int (0 5 1 y (- Start_4) (- Start_5 Start_4) (+ Start_5 Start_5) (* Start_2 Start_3) (div Start_1 Start_3) (mod Start_5 Start_2) (abs Start_7)))
   (Start_7 Int (4 y (- Start_6) (- Start_4 Start_1) (* Start_4 Start_4) (div Start_7 Start_4) (ite StartBool_1 Start_8 Start_3)))
   (Start_2 Int (2 (- Start_3) (+ Start_1 Start_4) (* Start_1 Start_1) (abs Start_2) (ite StartBool_1 Start_5 Start_6)))
   (Start_6 Int (2 x (- Start_5 Start_1) (* Start_1 Start) (ite StartBool_1 Start_6 Start_5)))
   (Start_3 Int (1 (- Start_3) (+ Start_1 Start_2) (mod Start_3 Start_2) (ite StartBool Start Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 4 (mod 5 (- y 2)))))

(check-synth)
