(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_6 Int) (Start_2 Int) (Start_3 Int) (Start_1 Int) (Start_4 Int) (Start_5 Int) (StartBool_1 Bool))
  ((Start Int (2 (- Start_1) (+ Start_1 Start_1) (* Start_2 Start) (div Start_3 Start_2) (ite StartBool_1 Start_1 Start_1)))
   (StartBool Bool (false true (and StartBool_1 StartBool_2) (<= Start_4 Start_3) (> Start_2 Start_6)))
   (StartBool_2 Bool (false true (not StartBool_2) (or StartBool_1 StartBool_2) (= Start Start_6) (> Start_5 Start_5)))
   (Start_6 Int (y (- Start_5) (+ Start_2 Start) (div Start_5 Start) (mod Start_5 Start_2)))
   (Start_2 Int (2 3 x (- Start) (* Start Start_3) (div Start_5 Start_1) (abs Start_3) (ite StartBool_1 Start_5 Start_2)))
   (Start_3 Int (0 (- Start_5 Start_2) (+ Start_4 Start_4) (* Start Start_5)))
   (Start_1 Int (1 0 5 x (- Start_2) (* Start_5 Start_5) (abs Start_5)))
   (Start_4 Int (1 (div Start_3 Start_4) (mod Start Start_2)))
   (Start_5 Int (0 (- Start_3 Start_1) (div Start_3 Start_2) (mod Start_5 Start_5)))
   (StartBool_1 Bool (false (not StartBool_1) (<= Start_3 Start) (= Start_1 Start_2) (>= Start Start_4) (> Start Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div y y) 1)))

(check-synth)
