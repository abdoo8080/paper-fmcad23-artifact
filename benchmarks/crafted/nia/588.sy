(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_17 Int) (Start_4 Int) (Start_11 Int) (Start_1 Int) (Start_15 Int) (Start_16 Int) (Start_6 Int) (Start_5 Int) (Start_2 Int) (Start_3 Int) (StartBool_1 Bool) (Start_10 Int) (Start_7 Int) (Start_9 Int) (Start_8 Int) (StartBool_2 Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_12 Int) (StartBool_5 Bool) (Start_14 Int) (Start_13 Int))
  ((Start Int (0 4 2 (- Start) (- Start Start) (+ Start Start_1) (div Start_1 Start_1) (mod Start_2 Start_1) (abs Start) (ite StartBool Start Start_1)))
   (StartBool Bool (false (not StartBool_5) (and StartBool_2 StartBool_3) (or StartBool_3 StartBool_1) (< Start_2 Start_7) (>= Start_2 Start_14) (> Start_2 Start_12)))
   (Start_18 Int (3 0 (- Start_2 Start_16) (+ Start_1 Start_1) (* Start_4 Start_6) (div Start_4 Start_6) (mod Start_3 Start_6) (abs Start_8) (ite StartBool_1 Start_17 Start_3)))
   (Start_17 Int (5 3 (- Start_11) (- Start_6 Start_17) (+ Start_6 Start_13) (div Start_9 Start_6) (abs Start_1) (ite StartBool Start_18 Start_1)))
   (Start_4 Int (3 0 (* Start_13 Start_8) (div Start_11 Start_16) (ite StartBool_5 Start_17 Start_10)))
   (Start_11 Int (0 (mod Start_8 Start_9)))
   (Start_1 Int (1 2 (- Start_7 Start_12) (* Start_15 Start_1) (abs Start_9) (ite StartBool_1 Start_15 Start_2)))
   (Start_15 Int (0 y 2 1 x (- Start_1) (+ Start_12 Start_7) (* Start_13 Start_7) (abs Start_10) (ite StartBool Start_14 Start)))
   (Start_16 Int (4 2 y (- Start_3 Start_18) (+ Start_1 Start_2) (div Start_3 Start_8) (mod Start_3 Start_6) (abs Start_8)))
   (Start_6 Int (3 (- Start) (+ Start_12 Start_13) (mod Start_10 Start_7) (abs Start_11)))
   (Start_5 Int (4 y (div Start_2 Start_1) (ite StartBool_1 Start_5 Start_1)))
   (Start_2 Int (1 3 4 x (- Start) (+ Start Start_2) (mod Start_1 Start_3)))
   (Start_3 Int (2 4 x (- Start_4) (+ Start_2 Start) (abs Start_5)))
   (StartBool_1 Bool (true false (not StartBool) (< Start_4 Start_6) (= Start_4 Start_7) (>= Start_3 Start_4)))
   (Start_10 Int (1 4 (* Start_11 Start_12) (div Start_8 Start_4)))
   (Start_7 Int (x (- Start_8) (+ Start_6 Start_4) (* Start_1 Start_7) (mod Start_4 Start_3) (abs Start_5)))
   (Start_9 Int (x 1 4 5 y 2 (- Start_12) (* Start_7 Start_2) (mod Start_2 Start_15) (abs Start_6)))
   (Start_8 Int (0 (- Start_4) (- Start_1 Start_9) (div Start_3 Start_8) (abs Start_2) (ite StartBool_2 Start_10 Start_3)))
   (StartBool_2 Bool (true (not StartBool) (<= Start_12 Start_3) (= Start_14 Start_13) (>= Start_9 Start_2)))
   (StartBool_4 Bool (true false (and StartBool_4 StartBool_3) (< Start_6 Start_13) (<= Start_3 Start_14) (>= Start_3 Start_11)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_2 StartBool_3) (or StartBool StartBool_4) (<= Start_1 Start_6) (> Start_2 Start_4)))
   (Start_12 Int (y (+ Start_12 Start_4) (mod Start_12 Start_9) (abs Start_8) (ite StartBool_3 Start_2 Start_5)))
   (StartBool_5 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_4) (or StartBool_4 StartBool) (< Start_18 Start_15) (>= Start_10 Start_2)))
   (Start_14 Int (4 y 5 (- Start_3)))
   (Start_13 Int (5 3 (- Start_12) (- Start_9 Start_2) (+ Start_3 Start_4) (div Start_15 Start_6) (mod Start_12 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (+ y 1))))

(check-synth)
