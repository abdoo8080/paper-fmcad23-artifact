(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_5 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_3 Int) (Start_4 Int) (Start_6 Int) (Start_1 Int) (Start_2 Int) (Start_7 Int) (StartBool_3 Bool))
  ((Start Int (0 (- Start_1) (- Start_1 Start_1) (mod Start_1 Start_1) (abs Start_1)))
   (StartBool Bool (true (not StartBool) (<= Start_1 Start_2) (= Start_3 Start_4) (>= Start_1 Start_1) (> Start_1 Start_3)))
   (Start_5 Int (3 1 (+ Start Start_4) (mod Start_4 Start_6) (abs Start_5) (ite StartBool_3 Start_7 Start_3)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_2) (or StartBool_3 StartBool) (= Start_1 Start_3) (>= Start_5 Start_1) (> Start_2 Start_4)))
   (StartBool_1 Bool (false true (or StartBool_2 StartBool_3) (< Start_2 Start) (>= Start Start) (> Start_4 Start_2)))
   (Start_3 Int (0 (- Start_4) (- Start Start) (+ Start Start_2) (div Start_3 Start_1) (mod Start_1 Start_4) (ite StartBool_1 Start_3 Start_3)))
   (Start_4 Int (3 5 0 (- Start_2) (- Start Start_2) (* Start Start)))
   (Start_6 Int (3 (- Start) (+ Start_1 Start)))
   (Start_1 Int (x))
   (Start_2 Int (x (- Start_6 Start) (+ Start_4 Start_3) (* Start_6 Start_1) (ite StartBool Start_6 Start_7)))
   (Start_7 Int (x (- Start_4 Start_3) (+ Start_2 Start_3) (mod Start_1 Start)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool) (<= Start_4 Start_1) (>= Start Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- (+ 4 x)) (- 2))))

(check-synth)
