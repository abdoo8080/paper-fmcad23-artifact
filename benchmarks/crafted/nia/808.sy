(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_8 Int) (Start_11 Int) (StartBool_7 Bool) (Start_1 Int) (StartBool_4 Bool) (Start_15 Int) (Start_10 Int) (StartBool_2 Bool) (Start_14 Int) (StartBool_8 Bool) (StartBool_5 Bool) (Start_6 Int) (Start_4 Int) (Start_7 Int) (StartBool_3 Bool) (Start_13 Int) (Start_19 Int) (StartBool_1 Bool) (Start_5 Int) (Start_3 Int) (Start_18 Int) (Start_9 Int) (StartBool_6 Bool) (Start_16 Int) (Start_17 Int) (Start_20 Int) (Start_2 Int))
  ((Start Int (0 (- Start) (- Start_1 Start_1) (+ Start_2 Start_1) (div Start_3 Start_4) (mod Start_1 Start_2) (abs Start_3) (ite StartBool Start_4 Start_2)))
   (StartBool Bool (true false (> Start_2 Start_7)))
   (Start_12 Int (2 5 0 1 (- Start_11 Start) (ite StartBool_5 Start_11 Start_9)))
   (Start_8 Int (3 y 0 1 x (- Start_9) (- Start Start_8) (* Start_5 Start_10) (mod Start_2 Start_5) (abs Start_8)))
   (Start_11 Int (y 3 0 5 (- Start_7) (- Start_8 Start_10) (mod Start_12 Start_9) (abs Start_8)))
   (StartBool_7 Bool (false (not StartBool_7) (<= Start Start_10) (>= Start_4 Start_18) (> Start_11 Start_14)))
   (Start_1 Int (3 5 1 2 0 (mod Start_12 Start_4) (ite StartBool_8 Start_8 Start_20)))
   (StartBool_4 Bool (false (and StartBool StartBool_4) (or StartBool_1 StartBool_4) (<= Start_6 Start_4) (= Start_1 Start_2) (>= Start_5 Start_2) (> Start_7 Start_3)))
   (Start_15 Int (3 0 2 4 (- Start_11) (- Start Start_4) (+ Start_14 Start_8) (div Start_13 Start_12) (mod Start_10 Start_13) (abs Start_16)))
   (Start_10 Int (2 (- Start_3) (- Start_6 Start_10) (+ Start_5 Start_5) (mod Start_4 Start_11)))
   (StartBool_2 Bool (true (not StartBool_2) (or StartBool_3 StartBool) (< Start_4 Start_3) (<= Start_2 Start_5) (= Start_3 Start_7) (> Start_6 Start_4)))
   (Start_14 Int (3 (- Start_1) (* Start_16 Start_17) (mod Start Start_15) (abs Start_18)))
   (StartBool_8 Bool (true false (not StartBool_6) (< Start_1 Start_14) (<= Start_16 Start_13) (= Start_8 Start_7) (>= Start_1 Start_7)))
   (StartBool_5 Bool (true (not StartBool_1) (< Start_7 Start_10) (>= Start_5 Start_5) (> Start_6 Start_9)))
   (Start_6 Int (3 0 1 (- Start_4 Start_4) (* Start_2 Start_11) (mod Start_7 Start_2) (abs Start) (ite StartBool_5 Start_11 Start_10)))
   (Start_4 Int (3 (- Start_5) (* Start_6 Start_2) (div Start_6 Start_7) (mod Start_5 Start_5) (abs Start_5)))
   (Start_7 Int (y 3 0 5 4 (+ Start_1 Start_6) (* Start_4 Start_6) (div Start_3 Start_1) (mod Start_8 Start_9) (abs Start_8) (ite StartBool_1 Start_2 Start_2)))
   (StartBool_3 Bool (false (and StartBool StartBool_4) (>= Start_2 Start_5)))
   (Start_13 Int (1 (+ Start_14 Start_12) (mod Start_12 Start_7) (abs Start_9) (ite StartBool_6 Start_14 Start_14)))
   (Start_19 Int (y (- Start_11 Start_12) (div Start_9 Start_15) (abs Start_15)))
   (StartBool_1 Bool (false true (not StartBool_2) (or StartBool_2 StartBool_3) (< Start_2 Start_1) (= Start_6 Start_1) (> Start_3 Start_7)))
   (Start_5 Int (3 (- Start_8) (- Start_2 Start_5) (* Start_9 Start_7) (div Start_2 Start_11) (mod Start_6 Start_9) (ite StartBool_3 Start_7 Start_6)))
   (Start_3 Int (5 4 y (- Start_9) (- Start_12 Start_6) (+ Start_13 Start_3) (* Start_6 Start_4) (mod Start_7 Start_10) (abs Start_4)))
   (Start_18 Int (0 y x 3 5 2 1 (- Start_16) (- Start Start_6) (+ Start_18 Start_18) (* Start_4 Start_4) (div Start_10 Start_1) (mod Start_11 Start_19) (abs Start_1)))
   (Start_9 Int (0 5 1 (div Start_8 Start_4) (mod Start_5 Start_10)))
   (StartBool_6 Bool (false true (or StartBool_4 StartBool_6) (= Start_15 Start_7) (>= Start_8 Start_16) (> Start_15 Start_10)))
   (Start_16 Int (3 1 x 0 2 (- Start_12 Start_8) (abs Start_8) (ite StartBool_3 Start_6 Start_3)))
   (Start_17 Int (5 (- Start) (- Start_3 Start_15) (+ Start_20 Start_19) (div Start_11 Start_2) (abs Start_13)))
   (Start_20 Int (3 x y 2 (- Start_11 Start_2) (* Start_17 Start_13) (div Start Start_13) (ite StartBool_7 Start_14 Start_16)))
   (Start_2 Int (5 (- Start_6) (abs Start_6) (ite StartBool_4 Start_13 Start_15)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- 3 y))))

(check-synth)
