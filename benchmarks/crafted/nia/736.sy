(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_15 Int) (StartBool_1 Bool) (Start_2 Int) (Start_8 Int) (Start_12 Int) (StartBool_4 Bool) (Start_18 Int) (Start_5 Int) (Start_1 Int) (Start_11 Int) (Start_10 Int) (Start_7 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_21 Int) (Start_19 Int) (Start_16 Int) (Start_9 Int) (StartBool_5 Bool) (Start_20 Int) (Start_14 Int) (Start_22 Int) (Start_13 Int) (StartBool_6 Bool) (Start_4 Int) (Start_6 Int) (Start_3 Int))
  ((Start Int (3 (- Start) (* Start Start) (div Start_1 Start) (mod Start Start_2)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_3 StartBool) (or StartBool_4 StartBool) (< Start_16 Start_11) (<= Start_10 Start_3) (> Start_14 Start_19)))
   (Start_17 Int (0 1 x y (- Start_9) (- Start_12 Start_10) (+ Start_16 Start_14) (* Start_17 Start_6) (mod Start_17 Start_7) (ite StartBool_3 Start_10 Start_11)))
   (Start_15 Int (3 1 (- Start_3) (- Start_16 Start_6) (* Start_1 Start_17) (mod Start_14 Start_2)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_2) (<= Start_4 Start_2) (>= Start Start_3) (> Start Start_2)))
   (Start_2 Int (x (* Start_3 Start) (div Start_3 Start_3) (mod Start_4 Start_5) (ite StartBool_1 Start Start_5)))
   (Start_8 Int (1 (- Start_8) (- Start_10 Start_14) (div Start_15 Start_2) (mod Start_5 Start_15) (abs Start_3) (ite StartBool_2 Start_2 Start_6)))
   (Start_12 Int (0 (mod Start_6 Start) (ite StartBool_2 Start_5 Start)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool) (or StartBool StartBool_4) (< Start_4 Start_9) (<= Start_2 Start_11) (= Start_18 Start_5) (>= Start_19 Start_9)))
   (Start_18 Int (4 0 (- Start_12) (+ Start_1 Start_11) (mod Start_5 Start_1) (abs Start_18)))
   (Start_5 Int (0 x 2 1 (- Start_4) (- Start_5 Start_16) (abs Start_9) (ite StartBool_1 Start_20 Start_13)))
   (Start_1 Int (0 x (* Start_15 Start_11) (div Start_21 Start_7) (mod Start_18 Start_5) (abs Start_12)))
   (Start_11 Int (x (- Start_12) (mod Start_12 Start_7)))
   (Start_10 Int (4 3 (- Start_6) (+ Start Start_7) (div Start_6 Start_8) (mod Start_11 Start_2) (ite StartBool Start_1 Start_2)))
   (Start_7 Int (0 y (- Start_8) (- Start_6 Start_9) (div Start_1 Start_10) (abs Start_4)))
   (StartBool_2 Bool (true (< Start_4 Start_1) (= Start_5 Start_6) (> Start_7 Start_7)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_1 StartBool_4) (or StartBool_2 StartBool_3) (< Start_9 Start_9) (= Start_3 Start_17)))
   (Start_21 Int (5 3 4 (- Start_13) (- Start Start_3) (+ Start_12 Start_20) (mod Start_17 Start_8) (abs Start_22)))
   (Start_19 Int (x (- Start_6) (- Start Start_3) (+ Start_20 Start_7) (div Start_17 Start_20) (mod Start_17 Start_17) (ite StartBool_3 Start_6 Start_18)))
   (Start_16 Int (0 5 (div Start_3 Start_14) (mod Start_12 Start_18) (abs Start_19) (ite StartBool_1 Start_13 Start_14)))
   (Start_9 Int (4 (- Start_13) (- Start_4 Start_5) (+ Start_9 Start_1) (* Start_8 Start_13) (div Start Start_8) (abs Start_1)))
   (StartBool_5 Bool (true (not StartBool_3) (and StartBool_6 StartBool_3) (<= Start_14 Start_8) (>= Start_7 Start_2) (> Start_14 Start_12)))
   (Start_20 Int (5 (- Start_12) (- Start_13 Start_18) (div Start_12 Start_4) (mod Start Start_14) (abs Start_15) (ite StartBool_4 Start_10 Start_4)))
   (Start_14 Int (3 5 (- Start_9) (* Start_9 Start_10) (mod Start_1 Start_12) (abs Start_3) (ite StartBool_5 Start_20 Start_1)))
   (Start_22 Int (y 5 4 1 0 (- Start_12) (- Start_17 Start_7) (div Start_18 Start_9) (mod Start_11 Start_6) (abs Start_14)))
   (Start_13 Int (0 3 5 (- Start_6 Start_13) (+ Start_1 Start_11) (div Start_4 Start_10) (mod Start_3 Start_10)))
   (StartBool_6 Bool (false true (not StartBool) (or StartBool_6 StartBool_6) (<= Start_10 Start_17)))
   (Start_4 Int (3 5 0 (- Start_19) (+ Start_7 Start_4) (* Start_20 Start_1) (div Start_2 Start_3) (mod Start_9 Start_18)))
   (Start_6 Int (3 (- Start_14 Start_12) (+ Start_15 Start_19) (abs Start_4) (ite StartBool Start_5 Start_1)))
   (Start_3 Int (5 (+ Start_13 Start_4) (mod Start_6 Start_2) (ite StartBool Start_15 Start_16)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (div 3 0) 2)))

(check-synth)
