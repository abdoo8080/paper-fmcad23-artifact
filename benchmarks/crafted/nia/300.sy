(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (StartBool_6 Bool) (Start_2 Int) (Start_17 Int) (Start_3 Int) (Start_13 Int) (Start_10 Int) (Start_4 Int) (StartBool_1 Bool) (Start_6 Int) (Start_5 Int) (Start_15 Int) (Start_14 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_8 Int) (Start_9 Int) (Start_12 Int) (Start_1 Int) (Start_7 Int) (StartBool_5 Bool) (Start_11 Int) (Start_16 Int) (StartBool_4 Bool))
  ((Start Int (4 5 x 2 1 (- Start_1) (- Start_2 Start_3) (div Start_2 Start) (ite StartBool_1 Start_4 Start_4)))
   (StartBool Bool (false true (not StartBool_3) (or StartBool_3 StartBool) (<= Start_11 Start_13)))
   (StartBool_7 Bool (true (< Start_14 Start_15) (<= Start_1 Start_14) (= Start_2 Start_13) (>= Start_15 Start_17) (> Start_3 Start_3)))
   (StartBool_6 Bool (false true (and StartBool_2 StartBool_4) (or StartBool_7 StartBool_3)))
   (Start_2 Int (3 0 x (- Start_4) (+ Start_11 Start_15) (div Start_12 Start_8) (mod Start_7 Start_15) (abs Start_8) (ite StartBool_5 Start_9 Start_8)))
   (Start_17 Int (y x 5 2 (- Start_14 Start_9) (div Start_14 Start_2) (mod Start_6 Start_3) (abs Start_3)))
   (Start_3 Int (y 4 3 1 (- Start_4) (- Start_1 Start) (+ Start_4 Start_11) (* Start_3 Start) (abs Start_14)))
   (Start_13 Int (2 (- Start_10) (* Start_7 Start_13) (div Start_9 Start_2) (mod Start_4 Start_13) (abs Start_5)))
   (Start_10 Int (4 3 (- Start_11) (+ Start_5 Start_3) (abs Start_8) (ite StartBool Start_5 Start_13)))
   (Start_4 Int (0 (- Start Start_4) (+ Start Start_3) (* Start_5 Start_4) (div Start_5 Start_6) (ite StartBool_1 Start_1 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_1) (< Start_6 Start_8) (>= Start_9 Start_1)))
   (Start_6 Int (x (+ Start_3 Start) (abs Start_1)))
   (Start_5 Int (0 (* Start_4 Start_1) (div Start_4 Start_2) (mod Start_7 Start_3) (ite StartBool_2 Start_7 Start_3)))
   (Start_15 Int (5 (- Start_4) (- Start_2 Start_13) (+ Start_4 Start_6) (div Start_15 Start_11) (abs Start_16) (ite StartBool_6 Start_17 Start_8)))
   (Start_14 Int (5 1 (- Start) (+ Start_11 Start_9) (* Start_1 Start) (mod Start_12 Start_9)))
   (StartBool_2 Bool (false true (< Start_6 Start_6) (= Start_2 Start_7) (>= Start_2 Start_3) (> Start_5 Start_7)))
   (StartBool_3 Bool (false true (and StartBool_4 StartBool_5) (or StartBool_5 StartBool_4) (< Start_8 Start_9) (>= Start_10 Start) (> Start_3 Start_10)))
   (Start_8 Int (1 (- Start_4 Start_9) (* Start_5 Start_3) (mod Start_1 Start_8) (abs Start_7)))
   (Start_9 Int (5 1 (- Start_3) (+ Start_3 Start_10) (* Start_5 Start_1) (div Start_9 Start_2) (ite StartBool_3 Start_3 Start_6)))
   (Start_12 Int (1 (- Start_10 Start_10) (+ Start_11 Start_12) (div Start_10 Start) (abs Start_1) (ite StartBool_2 Start_10 Start_10)))
   (Start_1 Int (4 5 (mod Start_17 Start_12) (abs Start_15) (ite StartBool_6 Start_10 Start_8)))
   (Start_7 Int (0 1 x y (- Start_2 Start) (* Start_3 Start_8) (mod Start_6 Start_7)))
   (StartBool_5 Bool (false true (not StartBool_4) (< Start_2 Start_11) (<= Start_8 Start_10) (= Start_4 Start_10)))
   (Start_11 Int (1 (- Start_9 Start_4) (* Start_2 Start_4) (div Start_6 Start_11) (mod Start_11 Start_3)))
   (Start_16 Int (2 (- Start_15 Start_17) (abs Start_17) (ite StartBool_7 Start_16 Start_12)))
   (StartBool_4 Bool (true (not StartBool_5) (< Start_12 Start_6) (<= Start_7 Start_4) (= Start_1 Start_2) (>= Start_7 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (* y y) 5)))

(check-synth)
