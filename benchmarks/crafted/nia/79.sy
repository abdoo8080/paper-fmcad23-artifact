(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (StartBool_2 Bool) (Start_1 Int) (Start_3 Int) (Start_6 Int) (Start_5 Int) (StartBool_1 Bool) (Start_8 Int) (Start_7 Int) (Start_9 Int) (Start_11 Int) (Start_10 Int) (Start_4 Int))
  ((Start Int (x 4 (- Start Start) (+ Start Start) (abs Start_1)))
   (StartBool Bool (true (not StartBool_2) (= Start_1 Start_11) (>= Start_2 Start_2)))
   (Start_2 Int (x 4 0 5 (- Start_11 Start_2) (+ Start_10 Start_8) (ite StartBool_1 Start_7 Start_7)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_2) (or StartBool StartBool) (< Start_11 Start_10) (<= Start_11 Start_6) (= Start_7 Start_8) (> Start_11 Start_1)))
   (Start_1 Int (x (div Start_2 Start_3) (abs Start_3)))
   (Start_3 Int (y 1 (+ Start_4 Start_5) (* Start_4 Start_4) (mod Start Start_6) (abs Start_2) (ite StartBool Start Start)))
   (Start_6 Int (2 (- Start) (- Start_6 Start_5) (+ Start_3 Start_4) (* Start_7 Start_2) (ite StartBool_1 Start Start_2)))
   (Start_5 Int (2 (+ Start_7 Start_9) (* Start_11 Start_10) (div Start_6 Start_2) (ite StartBool_2 Start_6 Start_5)))
   (StartBool_1 Bool (false true (not StartBool) (< Start_1 Start_8) (<= Start_6 Start_5) (= Start_4 Start_6) (>= Start_8 Start_8)))
   (Start_8 Int (3 x y 2 5 (- Start) (- Start Start_2) (+ Start_6 Start) (* Start_3 Start_1)))
   (Start_7 Int (x (- Start_4 Start_1) (* Start Start_1) (mod Start_9 Start_7)))
   (Start_9 Int (0 2 x (- Start_7) (- Start_3 Start_6) (* Start_9 Start_2) (mod Start_4 Start_10)))
   (Start_11 Int (0 1 2 (- Start_7) (- Start_9 Start_8) (mod Start_2 Start_1) (ite StartBool Start_3 Start_2)))
   (Start_10 Int (3 4 0 y (- Start_4 Start_9) (div Start_2 Start_5) (mod Start_8 Start) (abs Start_1)))
   (Start_4 Int (y (- Start_1) (* Start Start_7) (div Start_4 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div y 0) (+ (mod (+ x (+ 4 4)) 3) (- y 4)))))

(check-synth)
