(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_10 Int) (Start_11 Int) (Start_13 Int) (Start_12 Int) (StartBool_9 Bool) (Start_5 Int) (Start_8 Int) (StartBool_10 Bool) (StartBool_4 Bool) (Start_9 Int) (Start_1 Int) (StartBool_2 Bool) (StartBool_5 Bool) (Start_3 Int) (Start_2 Int) (StartBool_6 Bool) (StartBool_8 Bool) (StartBool_1 Bool) (StartBool_7 Bool) (StartBool_3 Bool) (Start_15 Int) (Start_7 Int) (Start_4 Int) (Start_6 Int))
  ((Start Int (x (* Start_1 Start_1) (mod Start_1 Start) (abs Start)))
   (StartBool Bool (false true (and StartBool_5 StartBool_1) (<= Start_9 Start_6) (= Start_15 Start_6) (>= Start_11 Start_1) (> Start_12 Start_14)))
   (Start_14 Int (0 y (- Start_15) (+ Start_14 Start_14) (div Start_7 Start_13)))
   (Start_10 Int (3 x (- Start_7) (+ Start_6 Start_11) (div Start_8 Start_9) (mod Start Start_11)))
   (Start_11 Int (5 y 3 (- Start_12 Start_2) (* Start_3 Start_11) (mod Start_6 Start_1) (ite StartBool_3 Start_3 Start_9)))
   (Start_13 Int (y (+ Start_6 Start_15) (mod Start_3 Start_7) (abs Start_7) (ite StartBool_10 Start_13 Start_1)))
   (Start_12 Int (1 0 x 2 (- Start_9) (mod Start_6 Start_9) (abs Start_6)))
   (StartBool_9 Bool (true (or StartBool_5 StartBool_5) (< Start_9 Start_12) (<= Start_5 Start_2) (>= Start_12 Start_2)))
   (Start_5 Int (1 x 4 (- Start) (+ Start_3 Start_10) (* Start_11 Start_6) (div Start_11 Start_8) (ite StartBool_9 Start Start_11)))
   (Start_8 Int (4 (- Start_7) (- Start_6 Start_4) (* Start_3 Start_8) (abs Start_8) (ite StartBool_7 Start_9 Start_8)))
   (StartBool_10 Bool (true false (not StartBool_3)))
   (StartBool_4 Bool (true (not StartBool_3) (<= Start_5 Start_5) (>= Start Start_3) (> Start_2 Start_3)))
   (Start_9 Int (0 2 (+ Start_2 Start_5) (* Start_9 Start_6) (mod Start Start_9)))
   (Start_1 Int (y 5 (+ Start Start_2) (abs Start_3)))
   (StartBool_2 Bool (false (not StartBool_5) (or StartBool_5 StartBool_10) (< Start_13 Start_14) (<= Start_7 Start_6) (= Start Start_1) (> Start_10 Start_3)))
   (StartBool_5 Bool (true false (not StartBool_3) (and StartBool_1 StartBool_5) (or StartBool_6 StartBool_7) (< Start_5 Start_2) (<= Start_2 Start_3) (= Start Start_7)))
   (Start_3 Int (2 4 (- Start_3) (* Start_1 Start_1) (div Start_1 Start_3) (mod Start_2 Start)))
   (Start_2 Int (3 2 5 (div Start_3 Start) (abs Start_2) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_6 Bool (true false (and StartBool StartBool_8) (or StartBool_7 StartBool_2) (= Start_8 Start_6) (> Start Start_1)))
   (StartBool_8 Bool (false true (< Start Start) (<= Start_7 Start_9) (= Start_4 Start_4) (>= Start_5 Start_7)))
   (StartBool_1 Bool (true (not StartBool_2) (or StartBool_3 StartBool_2) (< Start_2 Start_3) (= Start_2 Start_3) (>= Start Start_2)))
   (StartBool_7 Bool (false true (not StartBool_1) (or StartBool_5 StartBool_7)))
   (StartBool_3 Bool (false true (< Start_2 Start_4)))
   (Start_15 Int (y (- Start_8 Start_9) (+ Start_13 Start_5) (* Start_15 Start_1) (div Start_1 Start_3) (ite StartBool_2 Start_8 Start_1)))
   (Start_7 Int (y (- Start_1 Start) (+ Start_2 Start_6) (div Start_1 Start_1) (mod Start_7 Start_8) (ite StartBool_5 Start_4 Start_2)))
   (Start_4 Int (1 5 (- Start_4) (+ Start_2 Start_5) (* Start_4 Start) (div Start_4 Start_6) (abs Start)))
   (Start_6 Int (3 5 x (- Start_7) (- Start_4 Start_3) (div Start Start_6) (mod Start_4 Start_4) (abs Start) (ite StartBool_4 Start_1 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 0 (* (mod 2 y) 5))))

(check-synth)
