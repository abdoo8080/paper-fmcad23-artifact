(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_4 Bool) (StartBool_6 Bool) (StartBool_5 Bool) (Start_15 Int) (Start_1 Int) (Start_11 Int) (Start_8 Int) (Start_12 Int) (StartBool_7 Bool) (Start_5 Int) (Start_6 Int) (StartBool_2 Bool) (Start_7 Int) (Start_16 Int) (Start_14 Int) (Start_13 Int) (Start_4 Int) (StartBool_1 Bool) (Start_9 Int) (Start_2 Int) (Start_3 Int) (Start_10 Int))
  ((Start Int (2 (- Start_1) (+ Start_1 Start_1) (* Start_2 Start_3) (div Start_3 Start)))
   (StartBool Bool (false (and StartBool_3 StartBool_4) (or StartBool_5 StartBool_1) (<= Start_9 Start_4) (>= Start_12 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_7) (and StartBool_1 StartBool_5) (< Start_8 Start_13)))
   (StartBool_4 Bool (false (and StartBool StartBool_1) (or StartBool_2 StartBool_6) (< Start_9 Start_1) (<= Start_9 Start_12) (= Start_8 Start_1) (> Start_2 Start_7)))
   (StartBool_6 Bool (true (<= Start_12 Start_6) (= Start_16 Start_3) (> Start_1 Start_15)))
   (StartBool_5 Bool (false true (and StartBool_1 StartBool_6)))
   (Start_15 Int (2 4 0 (- Start) (+ Start_10 Start_12) (* Start_4 Start_13)))
   (Start_1 Int (4 (- Start) (mod Start_5 Start) (ite StartBool_1 Start_6 Start_15)))
   (Start_11 Int (1 0 4 2 x y (- Start_13 Start_9) (+ Start_7 Start_2) (* Start_1 Start_6) (div Start Start_14)))
   (Start_8 Int (4 (- Start_8) (- Start_7 Start_6) (+ Start Start_7) (* Start_9 Start_9) (div Start_10 Start_1) (mod Start_10 Start_6) (abs Start_5)))
   (Start_12 Int (0 (- Start_7 Start_12) (* Start_9 Start_13) (div Start_9 Start_11) (mod Start_2 Start_12) (ite StartBool Start_6 Start_5)))
   (StartBool_7 Bool (true (not StartBool_3) (or StartBool_2 StartBool_1) (<= Start_2 Start_1) (= Start_13 Start_8) (>= Start_10 Start_14)))
   (Start_5 Int (x (- Start_6 Start_4) (+ Start_4 Start_1) (* Start_1 Start) (mod Start Start_5)))
   (Start_6 Int (y 4 (- Start_7) (- Start Start_5) (+ Start_2 Start_4) (* Start_4 Start_2) (div Start_6 Start_3) (abs Start_4) (ite StartBool Start_2 Start_7)))
   (StartBool_2 Bool (true (not StartBool_2) (or StartBool_1 StartBool_1) (= Start_5 Start_11) (>= Start_12 Start) (> Start_4 Start)))
   (Start_7 Int (0 5 3 (- Start_8) (- Start_1 Start_5) (div Start Start_9) (mod Start_7 Start_6) (ite StartBool_1 Start Start_7)))
   (Start_16 Int (2 (+ Start_12 Start_11) (* Start_1 Start) (ite StartBool_6 Start_13 Start_15)))
   (Start_14 Int (5 1 (- Start_6 Start_2) (+ Start_6 Start_5) (* Start_7 Start_11) (div Start_11 Start_14) (mod Start_12 Start_6) (abs Start_4) (ite StartBool_2 Start_2 Start_2)))
   (Start_13 Int (2 0 1 (- Start_7 Start_2) (* Start_12 Start_4)))
   (Start_4 Int (2 5 (- Start_4) (+ Start_5 Start_10) (* Start Start) (div Start Start) (ite StartBool Start_5 Start)))
   (StartBool_1 Bool (true false (not StartBool) (or StartBool_1 StartBool_1) (= Start_2 Start_10) (>= Start Start_1) (> Start_6 Start_10)))
   (Start_9 Int (0 1 (- Start_2) (- Start_2 Start_4) (* Start_2 Start_3) (div Start_2 Start_3) (abs Start_1)))
   (Start_2 Int (4 x (- Start_4 Start_11) (+ Start_10 Start_3) (* Start_11 Start_5) (div Start_8 Start_9) (mod Start_12 Start_6) (abs Start_12) (ite StartBool Start Start_3)))
   (Start_3 Int (0 2 (- Start_2) (- Start_3 Start_2) (* Start_2 Start_4) (ite StartBool Start_5 Start_4)))
   (Start_10 Int (3 (- Start_4) (- Start Start_1) (+ Start Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div (abs x) 5) 5)))

(check-synth)
