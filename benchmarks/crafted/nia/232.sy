(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_4 Int) (Start_5 Int) (Start_7 Int) (StartBool_2 Bool) (Start_6 Int) (StartBool_1 Bool) (Start_2 Int) (Start_9 Int) (Start_8 Int) (Start_1 Int) (Start_3 Int))
  ((Start Int (2 1 (- Start) (- Start Start) (+ Start Start) (* Start_1 Start_2)))
   (StartBool Bool (true (and StartBool_2 StartBool_2) (< Start_3 Start_10) (>= Start_10 Start_4) (> Start_1 Start_10)))
   (Start_10 Int (y (- Start_3) (+ Start_8 Start_8) (div Start_1 Start_1) (mod Start_7 Start_5)))
   (Start_4 Int (3 (ite StartBool_2 Start_4 Start_3)))
   (Start_5 Int (x 0 3 (mod Start_6 Start_1)))
   (Start_7 Int (x (- Start_2) (- Start_2 Start_6) (div Start_6 Start_1) (mod Start_2 Start)))
   (StartBool_2 Bool (true false (not StartBool_1) (or StartBool StartBool_1) (>= Start Start)))
   (Start_6 Int (1 x 2 (- Start_1) (- Start_2 Start_1) (+ Start_5 Start_4) (* Start_6 Start_6) (div Start_2 Start) (mod Start Start_5) (ite StartBool_1 Start_3 Start_6)))
   (StartBool_1 Bool (false (not StartBool_2) (or StartBool_2 StartBool) (<= Start_2 Start_7) (>= Start_7 Start_5)))
   (Start_2 Int (x 2 5 1 3 (- Start) (- Start_2 Start_1) (+ Start_1 Start_3) (* Start_4 Start_5) (div Start_4 Start_1) (mod Start_4 Start_4)))
   (Start_9 Int (3 (- Start_7 Start_6) (* Start_1 Start_3)))
   (Start_8 Int (3 (+ Start_9 Start_6) (abs Start_7) (ite StartBool Start_9 Start)))
   (Start_1 Int (4 y (- Start) (div Start_9 Start) (abs Start_4) (ite StartBool_1 Start_7 Start_3)))
   (Start_3 Int (0 2 x (- Start_3) (- Start_5 Start_8) (+ Start_7 Start_1) (* Start_3 Start_9) (mod Start_8 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod 5 x) 0)))

(check-synth)
