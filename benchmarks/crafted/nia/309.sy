(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_13 Int) (Start_10 Int) (Start_2 Int) (StartBool_3 Bool) (StartBool_6 Bool) (Start_9 Int) (Start_11 Int) (Start_15 Int) (Start_8 Int) (Start_4 Int) (StartBool_5 Bool) (Start_3 Int) (Start_14 Int) (StartBool_1 Bool) (Start_7 Int) (Start_12 Int) (Start_6 Int) (Start_17 Int) (StartBool_2 Bool) (Start_5 Int) (Start_18 Int) (Start_16 Int) (Start_20 Int) (StartBool_4 Bool) (Start_21 Int) (Start_22 Int) (Start_1 Int))
  ((Start Int (y 4 0 1 (- Start_1) (- Start Start) (+ Start Start_2) (abs Start_1) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (true (not StartBool_2) (or StartBool_6 StartBool_1) (< Start_12 Start_10) (<= Start_15 Start_2) (= Start_18 Start_16)))
   (Start_19 Int (5 (- Start_18 Start_5) (* Start_12 Start_8) (div Start_2 Start_12) (mod Start_8 Start)))
   (Start_13 Int (2 3 4 (- Start_10 Start_4) (div Start_12 Start_10) (mod Start_7 Start_1) (abs Start_2)))
   (Start_10 Int (4 (- Start_20) (- Start_18 Start_15) (* Start_19 Start_1) (abs Start_12) (ite StartBool_5 Start_5 Start_10)))
   (Start_2 Int (5 4 2 1 x (- Start_1) (* Start_3 Start) (mod Start_3 Start_4)))
   (StartBool_3 Bool (false (not StartBool_4) (< Start_10 Start_15) (> Start_10 Start_16)))
   (StartBool_6 Bool (true false (< Start Start_7) (<= Start_5 Start_7) (= Start_4 Start_5) (>= Start_6 Start_18) (> Start_2 Start_16)))
   (Start_9 Int (x 4 0 1 y (+ Start_5 Start_2) (* Start_10 Start_9) (div Start_2 Start_10) (mod Start_11 Start_2) (abs Start_12) (ite StartBool_1 Start_12 Start_13)))
   (Start_11 Int (3 y (- Start_1 Start_2) (* Start_8 Start_6) (div Start_6 Start_19) (mod Start_7 Start_9) (abs Start_15) (ite StartBool Start_4 Start_13)))
   (Start_15 Int (1 x (- Start_6 Start_14) (+ Start_4 Start_7) (div Start_4 Start_8) (ite StartBool Start_6 Start_7)))
   (Start_8 Int (2 x 0 3 (- Start_20 Start_19) (div Start_5 Start_7) (mod Start Start_9)))
   (Start_4 Int (y 5 4 (- Start Start_5) (+ Start_2 Start_5) (* Start_5 Start_5) (div Start_5 Start_1) (abs Start)))
   (StartBool_5 Bool (true false (not StartBool_4) (< Start_2 Start_4) (<= Start_9 Start_13) (= Start Start_17) (> Start_6 Start_16)))
   (Start_3 Int (5 (- Start_14) (- Start_17 Start_7) (+ Start_17 Start_22) (* Start_1 Start_2) (mod Start_7 Start_10) (abs Start_6) (ite StartBool_2 Start_2 Start_7)))
   (Start_14 Int (0 x 4 1 (- Start_5) (+ Start_15 Start_15) (div Start_5 Start_5)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool StartBool_3) (or StartBool_2 StartBool) (< Start Start_8) (>= Start_10 Start_5) (> Start_14 Start_2)))
   (Start_7 Int (y (- Start_6) (+ Start_6 Start_4) (* Start_8 Start_1) (mod Start_9 Start_3) (abs Start_9)))
   (Start_12 Int (1 5 0 3 (abs Start_14)))
   (Start_6 Int (3 2 (abs Start_2) (ite StartBool_3 Start_22 Start_5)))
   (Start_17 Int (5 (+ Start_12 Start_16) (* Start_8 Start_4) (div Start_1 Start_15) (ite StartBool_3 Start_3 Start_17)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_3 StartBool_5) (or StartBool_1 StartBool_6) (<= Start_16 Start_15) (= Start_7 Start_14) (> Start_5 Start_15)))
   (Start_5 Int (x (+ Start_3 Start_3) (div Start_3 Start_3) (ite StartBool Start_6 Start_7)))
   (Start_18 Int (1 (- Start) (mod Start_2 Start)))
   (Start_16 Int (x (- Start_15) (mod Start_15 Start_14)))
   (Start_20 Int (x 0 (- Start_8 Start_19) (* Start_7 Start_11) (abs Start) (ite StartBool_4 Start_21 Start_2)))
   (StartBool_4 Bool (false (not StartBool_2) (and StartBool_1 StartBool_4) (< Start Start_1) (<= Start_5 Start_5) (= Start_1 Start_17) (>= Start_16 Start_16)))
   (Start_21 Int (x (- Start_6 Start_9) (+ Start_7 Start_10) (* Start_8 Start_12) (abs Start_18) (ite StartBool_5 Start_4 Start_14)))
   (Start_22 Int (4 2 x (- Start_17) (- Start_19 Start_13) (+ Start_13 Start_12) (abs Start_2) (ite StartBool Start_18 Start_20)))
   (Start_1 Int (2 0 1 (+ Start_6 Start_20) (* Start_2 Start_11) (div Start_8 Start) (abs Start) (ite StartBool_1 Start_14 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 0 (div 0 y))))

(check-synth)
