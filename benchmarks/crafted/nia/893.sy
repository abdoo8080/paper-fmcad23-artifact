(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_15 Int) (StartBool_5 Bool) (Start_14 Int) (Start_13 Int) (Start_11 Int) (Start_1 Int) (Start_12 Int) (StartBool_7 Bool) (Start_2 Int) (Start_4 Int) (Start_16 Int) (Start_5 Int) (Start_3 Int) (StartBool_1 Bool) (Start_6 Int) (Start_7 Int) (StartBool_2 Bool) (Start_8 Int) (StartBool_4 Bool) (Start_9 Int) (Start_10 Int) (Start_17 Int) (StartBool_3 Bool))
  ((Start Int (4 5 x 1 y 2 0 (- Start) (- Start_1 Start_2) (mod Start_1 Start_1) (ite StartBool Start_2 Start_1)))
   (StartBool Bool (false (not StartBool_1) (or StartBool_6 StartBool)))
   (StartBool_6 Bool (false (and StartBool_5 StartBool_7) (< Start Start_7) (<= Start_4 Start_14) (>= Start_16 Start_1) (> Start_5 Start_4)))
   (Start_15 Int (4 1 2 (- Start_12) (- Start_12 Start_8) (+ Start_13 Start) (* Start_3 Start_6) (div Start_12 Start_3) (ite StartBool_5 Start_11 Start_10)))
   (StartBool_5 Bool (false true (not StartBool_6) (and StartBool_3 StartBool_4) (>= Start_1 Start_10)))
   (Start_14 Int (4 1 0 y 3 x (* Start_11 Start_1) (abs Start_7) (ite StartBool Start_10 Start_6)))
   (Start_13 Int (1 0 3 (- Start_1) (- Start Start_5) (* Start_8 Start_8) (abs Start_7) (ite StartBool Start_5 Start_2)))
   (Start_11 Int (2 (- Start_13) (- Start Start_10) (+ Start_3 Start_13) (div Start Start_10)))
   (Start_1 Int (5 0 (+ Start_2 Start_11) (* Start Start_2) (abs Start_7) (ite StartBool_4 Start_10 Start_14)))
   (Start_12 Int (1 (* Start Start_8)))
   (StartBool_7 Bool (true false (< Start_9 Start_6) (= Start_15 Start_17) (>= Start_10 Start_15)))
   (Start_2 Int (0 4 x 2 1 (- Start) (- Start Start_1) (+ Start_1 Start) (* Start Start_2) (div Start_2 Start_1) (mod Start_1 Start_1) (ite StartBool_1 Start Start_1)))
   (Start_4 Int (1 (- Start_1 Start_1) (mod Start Start_5) (abs Start)))
   (Start_16 Int (5 (+ Start_6 Start_2) (* Start_6 Start_16) (div Start_9 Start_14) (mod Start_6 Start_16)))
   (Start_5 Int (x (- Start_4) (+ Start_4 Start_6) (mod Start Start_6) (abs Start_3) (ite StartBool Start_3 Start_2)))
   (Start_3 Int (5 (- Start_2 Start_2) (+ Start_4 Start_6) (* Start_1 Start_4) (div Start_7 Start_6) (mod Start_10 Start_9) (abs Start_2)))
   (StartBool_1 Bool (true (or StartBool StartBool) (< Start Start_1) (<= Start Start_3) (= Start_2 Start_2) (> Start_2 Start_4)))
   (Start_6 Int (1 (- Start_2 Start_2) (div Start_3 Start_4) (ite StartBool Start_7 Start_8)))
   (Start_7 Int (1 3 (- Start_9) (- Start Start_4) (div Start Start_7) (abs Start_2)))
   (StartBool_2 Bool (false (or StartBool_3 StartBool_3) (< Start_1 Start_2) (= Start_3 Start_8) (> Start_6 Start_7)))
   (Start_8 Int (4 (- Start_7) (+ Start Start_1) (* Start_9 Start_1) (div Start_1 Start_9)))
   (StartBool_4 Bool (true false (and StartBool_1 StartBool_4) (or StartBool_5 StartBool_2) (< Start_11 Start_15) (= Start_11 Start_12) (>= Start_8 Start_2) (> Start_9 Start_15)))
   (Start_9 Int (2 x (- Start_6) (- Start_1 Start_4) (* Start_2 Start_6) (div Start_9 Start_6) (ite StartBool_1 Start_7 Start_5)))
   (Start_10 Int (4 0 x (* Start_2 Start_2) (div Start_7 Start_3) (mod Start_11 Start_9) (ite StartBool_2 Start_5 Start_10)))
   (Start_17 Int (4 (- Start_15 Start_9) (* Start_4 Start_7) (abs Start_9)))
   (StartBool_3 Bool (true false (not StartBool_1) (< Start_12 Start_11) (> Start_4 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 5 (div 0 x))))

(check-synth)
