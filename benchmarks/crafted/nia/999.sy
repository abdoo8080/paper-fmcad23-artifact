(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (Start_5 Int) (Start_4 Int) (StartBool_2 Bool) (Start_1 Int) (Start_6 Int) (StartBool_1 Bool) (Start_2 Int))
  ((Start Int (x (- Start Start) (* Start Start) (mod Start_1 Start_2)))
   (StartBool Bool (true false (<= Start Start_6) (> Start_2 Start)))
   (Start_3 Int (1 2 y 3 5 4 (- Start_2) (- Start_2 Start_6) (* Start_1 Start_6) (abs Start)))
   (Start_5 Int (x 4 5 (- Start_5 Start_4)))
   (Start_4 Int (2 5 4 (- Start_2) (+ Start_3 Start_5) (div Start_3 Start_1) (mod Start_1 Start_3)))
   (StartBool_2 Bool (true false (or StartBool_1 StartBool_1) (= Start_1 Start) (>= Start_2 Start_4)))
   (Start_1 Int (0 2 (- Start Start) (+ Start_3 Start_2) (mod Start_4 Start_1) (ite StartBool_2 Start_2 Start_1)))
   (Start_6 Int (3 (- Start_3) (- Start_6 Start_3) (* Start_6 Start_1) (mod Start_5 Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (< Start_2 Start_1) (= Start_2 Start_2)))
   (Start_2 Int (x 2 (+ Start_1 Start_2) (abs Start) (ite StartBool_1 Start_1 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- x 3) x)))

(check-synth)
