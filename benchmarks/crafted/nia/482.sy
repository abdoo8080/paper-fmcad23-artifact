(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (StartBool_7 Bool) (StartBool_4 Bool) (StartBool_5 Bool) (StartBool_6 Bool) (Start_12 Int) (Start_8 Int) (Start_3 Int) (StartBool_2 Bool) (Start_4 Int) (Start_9 Int) (Start_11 Int) (StartBool_3 Bool) (Start_5 Int) (Start_10 Int) (Start_6 Int) (Start_7 Int) (Start_13 Int) (StartBool_1 Bool) (Start_1 Int) (Start_2 Int))
  ((Start Int (x 1 (- Start) (- Start Start_1) (+ Start Start_2) (* Start_1 Start) (mod Start_1 Start_2) (abs Start_3)))
   (StartBool Bool (false true (<= Start_5 Start_13) (>= Start_8 Start_14) (> Start_4 Start_4)))
   (Start_14 Int (2 (abs Start_2)))
   (StartBool_7 Bool (false (or StartBool_4 StartBool_4) (= Start_5 Start_14)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool_6 StartBool_6) (= Start_9 Start_2)))
   (StartBool_5 Bool (false (< Start_13 Start_5) (>= Start_2 Start_11) (> Start_13 Start_9)))
   (StartBool_6 Bool (false true (and StartBool_1 StartBool_3) (>= Start_3 Start_7)))
   (Start_12 Int (y 0 2 3 (- Start) (- Start_9 Start_5) (+ Start_8 Start_7) (div Start_3 Start_10) (mod Start_7 Start_5) (ite StartBool_5 Start_7 Start_6)))
   (Start_8 Int (2 x 5 (+ Start_6 Start_4) (mod Start_4 Start_6) (abs Start_1) (ite StartBool Start_3 Start)))
   (Start_3 Int (5 (- Start_4) (- Start_1 Start_4) (+ Start_2 Start_1) (* Start Start) (ite StartBool Start Start_4)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_3 StartBool_1) (or StartBool_4 StartBool) (< Start_12 Start) (= Start_7 Start_4) (>= Start_11 Start_13)))
   (Start_4 Int (0 (- Start_3) (- Start Start_1) (* Start_5 Start_1) (div Start_1 Start_4) (abs Start_4)))
   (Start_9 Int (0 1 (- Start_2 Start_8) (* Start_8 Start_9) (mod Start_4 Start)))
   (Start_11 Int (5 0 3 4 x (- Start_7) (- Start_7 Start_4) (+ Start Start_8) (div Start_3 Start_10) (abs Start_4) (ite StartBool_2 Start Start_2)))
   (StartBool_3 Bool (true false (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_7) (<= Start_7 Start_8) (= Start_8 Start_11) (>= Start_7 Start)))
   (Start_5 Int (x (+ Start_6 Start_1) (* Start_4 Start_1) (mod Start_6 Start_6)))
   (Start_10 Int (0 x (- Start_1) (- Start_7 Start_2)))
   (Start_6 Int (5 3 (- Start_7 Start_3) (div Start_7 Start_8) (mod Start_6 Start_6) (abs Start) (ite StartBool Start Start_2)))
   (Start_7 Int (y x 5 2 (+ Start Start_1) (* Start_5 Start_5) (div Start_7 Start_3) (mod Start_7 Start_2) (ite StartBool_1 Start_1 Start_6)))
   (Start_13 Int (4 2 3 (+ Start_7 Start_6) (* Start_1 Start_4)))
   (StartBool_1 Bool (false true (or StartBool StartBool_1) (< Start_9 Start_7) (= Start_8 Start_2) (> Start_9 Start)))
   (Start_1 Int (y (- Start_1) (- Start_9 Start_11) (div Start_5 Start_4) (mod Start_2 Start_5)))
   (Start_2 Int (3 (- Start_4) (+ Start_6 Start_10) (div Start_1 Start_4) (mod Start_9 Start_2) (ite StartBool Start_7 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- 4) y)))

(check-synth)
