(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_11 Int) (Start_2 Int) (Start_10 Int) (Start_12 Int) (Start_6 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_4 Int) (Start_8 Int) (Start_7 Int) (Start_3 Int) (StartBool_4 Bool) (Start_5 Int) (Start_9 Int) (StartBool_5 Bool) (StartBool_2 Bool))
  ((Start Int (0 (- Start_1) (* Start_2 Start_2) (div Start_2 Start_2) (abs Start_3) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (false (<= Start_12 Start_4) (= Start_2 Start_9) (>= Start_3 Start_6)))
   (Start_1 Int (x (- Start_7 Start_1) (div Start_10 Start_4) (abs Start_2) (ite StartBool_1 Start_11 Start_10)))
   (Start_11 Int (0 5 4 y (- Start_4) (- Start_5 Start_8) (+ Start_11 Start_9) (mod Start_4 Start_10) (ite StartBool Start_5 Start_3)))
   (Start_2 Int (5 x 2 1 (div Start_11 Start_3) (abs Start_3)))
   (Start_10 Int (5 (- Start_10) (- Start_10 Start_7) (div Start_2 Start_8) (abs Start_3) (ite StartBool_3 Start_8 Start_7)))
   (Start_12 Int (x (- Start_2) (- Start_5 Start_8) (abs Start_3) (ite StartBool_2 Start_12 Start_5)))
   (Start_6 Int (5 (+ Start_5 Start_7) (* Start_7 Start_3) (mod Start_4 Start) (abs Start_7) (ite StartBool_1 Start_1 Start_4)))
   (StartBool_1 Bool (true false (or StartBool_2 StartBool_1) (< Start_3 Start) (<= Start_3 Start_3) (= Start_1 Start_4)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_2 StartBool) (or StartBool_4 StartBool_4) (= Start_8 Start_4) (> Start_7 Start_5)))
   (Start_4 Int (5 3 4 (- Start_4) (- Start_2 Start_5) (div Start_1 Start_1) (mod Start_3 Start_6) (abs Start_5) (ite StartBool_1 Start_2 Start_6)))
   (Start_8 Int (x (+ Start_7 Start_5) (ite StartBool Start_5 Start_2)))
   (Start_7 Int (5 (- Start) (abs Start_2)))
   (Start_3 Int (2 (- Start_10 Start_10) (+ Start_5 Start_4) (mod Start Start_6) (abs Start_2)))
   (StartBool_4 Bool (false true (and StartBool_4 StartBool) (or StartBool StartBool_3) (= Start Start_5) (>= Start_9 Start_7)))
   (Start_5 Int (3 1 2 x (- Start_4) (- Start_7 Start_4) (+ Start_3 Start_5) (div Start_8 Start_2) (abs Start_5) (ite StartBool_3 Start_6 Start_1)))
   (Start_9 Int (5 4 (* Start Start_5)))
   (StartBool_5 Bool (true false (not StartBool_1) (<= Start_2 Start_7) (> Start_1 Start_3)))
   (StartBool_2 Bool (true (and StartBool_5 StartBool_4) (or StartBool_4 StartBool_2) (> Start Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 2 (div 0 (mod 3 y)))))

(check-synth)
