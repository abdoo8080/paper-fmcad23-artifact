(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (StartBool_2 Bool) (Start_7 Int) (StartBool_1 Bool) (Start_4 Int) (Start_5 Int) (Start_3 Int) (Start_2 Int) (Start_1 Int))
  ((Start Int (5 (* Start_1 Start)))
   (StartBool Bool (true false (= Start Start) (>= Start_2 Start_3)))
   (Start_6 Int (4 (- Start_7) (- Start_1 Start_2) (+ Start_7 Start_3) (* Start_5 Start_1) (div Start Start_4) (mod Start_4 Start)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool StartBool_1) (< Start_7 Start_7) (<= Start_3 Start) (>= Start Start_5)))
   (Start_7 Int (4 1 3 5 (- Start_1) (+ Start_2 Start_4) (* Start_3 Start_6) (mod Start_3 Start_5) (abs Start_3)))
   (StartBool_1 Bool (true (or StartBool_1 StartBool_2) (< Start_3 Start) (<= Start_4 Start_4) (= Start_7 Start_3) (> Start_4 Start_1)))
   (Start_4 Int (2 3 (- Start_4) (div Start_2 Start_5) (mod Start_6 Start_5) (ite StartBool_1 Start_5 Start_6)))
   (Start_5 Int (2 (- Start_1 Start_5) (* Start_4 Start)))
   (Start_3 Int (5 (- Start_3) (- Start_4 Start_5) (* Start_5 Start_3) (div Start_2 Start_5)))
   (Start_2 Int (2 1 (- Start) (abs Start_1)))
   (Start_1 Int (y (- Start_1 Start_2) (div Start_2 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 1 x)))

(check-synth)
