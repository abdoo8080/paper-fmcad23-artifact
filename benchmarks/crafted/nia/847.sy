(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_11 Int) (StartBool_1 Bool) (Start_2 Int) (Start_4 Int) (Start_5 Int) (Start_10 Int) (Start_7 Int) (Start_3 Int) (Start_1 Int) (Start_8 Int) (Start_13 Int) (StartBool_4 Bool) (Start_12 Int) (StartBool_3 Bool) (Start_6 Int) (StartBool_2 Bool) (Start_9 Int) (StartBool_5 Bool))
  ((Start Int (x (- Start Start) (+ Start_1 Start) (* Start_1 Start) (mod Start Start_1) (ite StartBool_1 Start Start)))
   (StartBool Bool (true (not StartBool_1) (or StartBool_4 StartBool_4) (= Start_11 Start_13)))
   (Start_14 Int (0 2 4 3 (+ Start_7 Start) (abs Start_11)))
   (Start_11 Int (3 x (- Start_8 Start_11) (+ Start_7 Start_9) (div Start_9 Start_11) (mod Start_7 Start_6) (abs Start)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_2) (or StartBool_3 StartBool_3) (< Start Start) (= Start_1 Start_2) (>= Start_2 Start)))
   (Start_2 Int (3 (* Start_1 Start_1) (div Start_2 Start_1) (mod Start_3 Start_4) (abs Start_1)))
   (Start_4 Int (x (- Start) (- Start_2 Start_2) (mod Start Start_5)))
   (Start_5 Int (0 3 (- Start_2) (mod Start_2 Start_1) (ite StartBool Start_3 Start_2)))
   (Start_10 Int (1 5 (- Start_3 Start) (+ Start_9 Start_6) (div Start_3 Start_4) (ite StartBool_4 Start_9 Start_3)))
   (Start_7 Int (x (+ Start_8 Start_8) (abs Start_5)))
   (Start_3 Int (y (+ Start_2 Start_5) (div Start_6 Start_1) (mod Start_1 Start_7) (ite StartBool_4 Start_7 Start_8)))
   (Start_1 Int (0 (* Start_12 Start_10)))
   (Start_8 Int (4 x (- Start_6) (mod Start_3 Start_8)))
   (Start_13 Int (5 y 4 1 3 (- Start_12) (- Start_9 Start_4) (+ Start_9 Start_8) (* Start_3 Start_8) (div Start_6 Start_14) (mod Start_1 Start_12) (ite StartBool_4 Start_1 Start_7)))
   (StartBool_4 Bool (true (not StartBool_2) (< Start_6 Start_5) (<= Start_5 Start_6)))
   (Start_12 Int (2 (- Start_6) (- Start_2 Start_8) (+ Start_12 Start_13)))
   (StartBool_3 Bool (true (< Start Start_9) (> Start Start_1)))
   (Start_6 Int (5 (- Start_4) (+ Start_1 Start) (mod Start_5 Start_1) (abs Start_8)))
   (StartBool_2 Bool (true false (not StartBool_5) (and StartBool StartBool_4) (or StartBool_2 StartBool_3) (<= Start_10 Start_1) (= Start_4 Start_3) (>= Start_9 Start_2) (> Start_11 Start_10)))
   (Start_9 Int (3 (- Start_1 Start_3) (+ Start_6 Start_6) (* Start_9 Start_2) (abs Start_1) (ite StartBool_5 Start_6 Start_2)))
   (StartBool_5 Bool (false (not StartBool_3) (= Start_3 Start_9) (>= Start_8 Start_6) (> Start_3 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 2 (- (* 3 x) (* (abs y) 4)))))

(check-synth)
