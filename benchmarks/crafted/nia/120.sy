(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_13 Int) (Start_11 Int) (StartBool_3 Bool) (Start_12 Int) (Start_9 Int) (StartBool_7 Bool) (Start_3 Int) (Start_4 Int) (Start_5 Int) (Start_18 Int) (Start_2 Int) (Start_10 Int) (Start_17 Int) (StartBool_1 Bool) (Start_14 Int) (Start_20 Int) (Start_22 Int) (Start_8 Int) (Start_6 Int) (StartBool_6 Bool) (Start_15 Int) (Start_7 Int) (Start_19 Int) (Start_1 Int) (StartBool_2 Bool) (Start_16 Int) (StartBool_4 Bool) (Start_21 Int))
  ((Start Int (3 5 4 x 2 1 0 y (- Start) (* Start Start_1) (div Start Start_1) (mod Start_1 Start) (abs Start_1) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (true (or StartBool_3 StartBool_4) (< Start_11 Start_20) (>= Start_20 Start_6)))
   (StartBool_5 Bool (false (not StartBool_5) (and StartBool_5 StartBool_7) (< Start_17 Start_10) (<= Start_18 Start_16) (= Start_6 Start_11) (> Start_12 Start_21)))
   (Start_13 Int (3 (- Start_3) (mod Start_3 Start_11) (abs Start_12)))
   (Start_11 Int (x (- Start_9) (+ Start_12 Start_11) (div Start_8 Start_5) (ite StartBool_2 Start_4 Start_6)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool_3) (<= Start_6 Start_11) (= Start_4 Start_4) (>= Start_5 Start_6) (> Start_6 Start_12)))
   (Start_12 Int (x (- Start) (- Start_3 Start_3) (+ Start_1 Start_11) (* Start_13 Start_6) (ite StartBool_1 Start_13 Start_5)))
   (Start_9 Int (1 y (- Start) (- Start_10 Start_8) (+ Start_9 Start_11) (* Start_1 Start_10) (mod Start_10 Start_3) (ite StartBool Start_2 Start_12)))
   (StartBool_7 Bool (false true (<= Start_22 Start_15) (= Start_2 Start_12) (>= Start_5 Start_20)))
   (Start_3 Int (y (- Start_1) (- Start_5 Start_5) (* Start_3 Start_5) (div Start_5 Start_4)))
   (Start_4 Int (x (- Start_4) (- Start Start_2) (* Start_2 Start_1) (mod Start_1 Start_3)))
   (Start_5 Int (4 0 (- Start_1) (- Start_3 Start_6) (+ Start_4 Start_3) (div Start_7 Start_3) (ite StartBool Start_2 Start_3)))
   (Start_18 Int (x (+ Start_1 Start_1) (div Start_9 Start_16) (mod Start_6 Start_17)))
   (Start_2 Int (0 (* Start_3 Start_1) (div Start_3 Start_4) (mod Start_2 Start_3)))
   (Start_10 Int (1 (- Start_3) (- Start_3 Start_14) (abs Start_8)))
   (Start_17 Int (x 2 5 (- Start_13 Start_4) (div Start_18 Start_15) (mod Start_8 Start)))
   (StartBool_1 Bool (true (and StartBool_3 StartBool_1) (or StartBool StartBool) (< Start_12 Start_7) (<= Start_17 Start_6)))
   (Start_14 Int (x 2 3 5 0 4 (* Start_6 Start_13) (div Start_12 Start_8) (mod Start_3 Start_10) (abs Start_9) (ite StartBool_3 Start_11 Start_8)))
   (Start_20 Int (5 1 (+ Start_3 Start_10) (* Start_4 Start_14) (div Start_1 Start_8) (abs Start_17) (ite StartBool_2 Start_14 Start_8)))
   (Start_22 Int (y 3 5 (+ Start_16 Start_4) (* Start_15 Start_14) (ite StartBool_2 Start_16 Start_18)))
   (Start_8 Int (5 0 2 (- Start_15) (- Start_3 Start_14) (+ Start_8 Start_4) (* Start_6 Start_11) (mod Start_14 Start_16) (abs Start_8)))
   (Start_6 Int (1 (- Start_8) (- Start_4 Start_7) (+ Start_9 Start_5) (* Start_9 Start_8) (div Start_9 Start_1) (mod Start_4 Start)))
   (StartBool_6 Bool (false (and StartBool_3 StartBool_6) (>= Start_3 Start_22) (> Start_8 Start_2)))
   (Start_15 Int (3 (- Start_16) (- Start_13 Start_3) (* Start_19 Start_18) (div Start_7 Start_7) (ite StartBool_1 Start_11 Start_4)))
   (Start_7 Int (3 (- Start_7) (+ Start_3 Start) (abs Start_5)))
   (Start_19 Int (1 2 3 (+ Start_15 Start_15) (* Start_17 Start) (abs Start_18)))
   (Start_1 Int (2 y (+ Start_8 Start_3) (abs Start_20)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_2) (<= Start Start_11)))
   (Start_16 Int (5 (- Start_6) (- Start_13 Start_17) (* Start_17 Start_14) (mod Start_2 Start_14)))
   (StartBool_4 Bool (true false (not StartBool_4) (or StartBool_5 StartBool_2) (< Start_7 Start_9) (= Start_21 Start_18)))
   (Start_21 Int (5 (- Start_12) (- Start_5 Start_1) (+ Start_14 Start_15) (* Start Start_9) (ite StartBool_6 Start_21 Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (abs y))))

(check-synth)
