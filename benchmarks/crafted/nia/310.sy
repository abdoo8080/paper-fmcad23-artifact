(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (StartBool_8 Bool) (Start_8 Int) (Start_6 Int) (Start_11 Int) (Start_9 Int) (StartBool_5 Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_4 Int) (StartBool_7 Bool) (StartBool_1 Bool) (Start_23 Int) (Start_16 Int) (StartBool_2 Bool) (Start_17 Int) (Start_10 Int) (Start_2 Int) (Start_5 Int) (Start_13 Int) (Start_14 Int) (Start_12 Int) (Start_15 Int) (Start_19 Int) (Start_7 Int) (Start_3 Int) (Start_18 Int) (StartBool_6 Bool) (Start_1 Int) (Start_21 Int) (Start_22 Int))
  ((Start Int (x 0 3 (- Start Start_1) (+ Start_2 Start_1) (div Start_2 Start_2) (mod Start Start_1)))
   (StartBool Bool (false true (and StartBool_6 StartBool_5) (< Start_11 Start_2) (<= Start_17 Start_18) (= Start_10 Start_5)))
   (Start_20 Int (3 0 (* Start_7 Start_3) (abs Start_20) (ite StartBool_1 Start_15 Start_21)))
   (StartBool_8 Bool (false (and StartBool_1 StartBool_6) (or StartBool_6 StartBool_4) (<= Start_8 Start_12) (> Start_20 Start_7)))
   (Start_8 Int (0 5 y 3 2 (+ Start_2 Start_1) (* Start_11 Start_8) (mod Start_1 Start_6) (abs Start_3)))
   (Start_6 Int (4 (- Start_10) (- Start_5 Start_2) (div Start_3 Start_3) (mod Start_7 Start_2) (abs Start_4) (ite StartBool_6 Start_9 Start_3)))
   (Start_11 Int (1 (- Start) (+ Start_11 Start_5) (abs Start_8)))
   (Start_9 Int (2 0 5 y 3 4 (- Start_5 Start_3) (* Start_7 Start_2) (div Start_3 Start_11) (abs Start_11) (ite StartBool_5 Start_10 Start_6)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool_4) (<= Start_2 Start_3) (= Start_6 Start) (>= Start_2 Start_4) (> Start_4 Start_9)))
   (StartBool_4 Bool (true false (not StartBool_2) (or StartBool StartBool_1) (< Start_3 Start_1) (<= Start_2 Start_5) (= Start_3 Start_10) (> Start_9 Start_9)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool_1) (< Start_7 Start_2) (= Start_9 Start_2) (>= Start_3 Start_10)))
   (Start_4 Int (x (- Start_4 Start_5) (mod Start_1 Start_3) (ite StartBool_1 Start Start_3)))
   (StartBool_7 Bool (false (not StartBool_8) (and StartBool StartBool) (or StartBool_2 StartBool_3) (<= Start_2 Start_16) (= Start_15 Start_2) (> Start_21 Start_17)))
   (StartBool_1 Bool (false (and StartBool StartBool) (<= Start_1 Start_3) (= Start_6 Start_7) (>= Start Start) (> Start_2 Start)))
   (Start_23 Int (2 x y (- Start_4) (* Start_12 Start_14)))
   (Start_16 Int (5 (- Start_9) (- Start_9 Start_11) (+ Start_11 Start_15) (div Start_3 Start_15)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_3) (< Start_3 Start)))
   (Start_17 Int (2 y (- Start_15 Start) (* Start_23 Start_2) (div Start_9 Start_6) (abs Start)))
   (Start_10 Int (4 (+ Start Start_3) (* Start_1 Start_2) (ite StartBool_4 Start Start_7)))
   (Start_2 Int (1 2 (- Start_2) (- Start_2 Start_2) (+ Start_1 Start_1) (* Start_3 Start_2) (div Start_2 Start) (ite StartBool Start_4 Start_4)))
   (Start_5 Int (2 4 1 y (+ Start_13 Start_1) (div Start_4 Start_8) (mod Start_6 Start_13)))
   (Start_13 Int (y 2 (* Start_11 Start) (mod Start_14 Start_11) (ite StartBool_4 Start_3 Start_8)))
   (Start_14 Int (5 (* Start_1 Start_10) (mod Start_1 Start_9) (abs Start_5) (ite StartBool_2 Start_4 Start_8)))
   (Start_12 Int (0 (+ Start_8 Start_3) (div Start_1 Start_5) (mod Start_15 Start_4) (abs Start_11)))
   (Start_15 Int (4 (- Start_8 Start_1) (* Start Start_8) (div Start_4 Start_5) (abs Start_3)))
   (Start_19 Int (x (* Start_20 Start_3) (abs Start_9) (ite StartBool_7 Start_14 Start_18)))
   (Start_7 Int (1 (div Start_6 Start_5) (mod Start_6 Start_1) (abs Start_8) (ite StartBool_2 Start_1 Start_8)))
   (Start_3 Int (3 (- Start_16 Start_1) (* Start_6 Start_12) (div Start_12 Start_14) (abs Start_3)))
   (Start_18 Int (4 3 (- Start_4) (+ Start_7 Start_5) (* Start_19 Start_5) (div Start_6 Start)))
   (StartBool_6 Bool (false true (not StartBool_5) (and StartBool_2 StartBool_3) (or StartBool_2 StartBool_4) (< Start_5 Start_3) (<= Start_12 Start_13) (= Start_12 Start_4) (>= Start_13 Start) (> Start_13 Start_5)))
   (Start_1 Int (y 0 (+ Start_8 Start_1) (* Start_4 Start_3) (mod Start Start_3) (abs Start_16)))
   (Start_21 Int (3 (- Start_22)))
   (Start_22 Int (3 (- Start_22) (- Start_7 Start_22) (* Start Start_8) (mod Start_18 Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 2 (div (* x 4) 5))))

(check-synth)
