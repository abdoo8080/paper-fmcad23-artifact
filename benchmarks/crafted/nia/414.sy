(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (StartBool_1 Bool) (Start_15 Int) (Start_6 Int) (Start_13 Int) (Start_14 Int) (Start_8 Int) (Start_9 Int) (Start_2 Int) (Start_3 Int) (Start_5 Int) (Start_12 Int) (Start_16 Int) (StartBool_6 Bool) (Start_4 Int) (Start_7 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_1 Int) (Start_10 Int) (Start_11 Int) (StartBool_3 Bool) (StartBool_5 Bool))
  ((Start Int (4 1 (+ Start Start_1) (* Start_2 Start_2)))
   (StartBool Bool (false true (not StartBool) (and StartBool_7 StartBool_3) (>= Start_14 Start_16) (> Start_9 Start_10)))
   (StartBool_7 Bool (true (not StartBool_3) (and StartBool_1 StartBool_7) (<= Start_16 Start_9) (= Start_2 Start_6)))
   (StartBool_1 Bool (false true (< Start_4 Start_16) (= Start_11 Start_1)))
   (Start_15 Int (3 4 1 (- Start_2) (+ Start_2 Start_9) (* Start_8 Start_9) (div Start_10 Start_1) (mod Start_9 Start_11) (ite StartBool_3 Start_13 Start_11)))
   (Start_6 Int (3 4 (- Start_9 Start_11) (* Start_13 Start_2) (div Start_15 Start_10) (mod Start_15 Start_11) (abs Start_2) (ite StartBool_2 Start_8 Start_6)))
   (Start_13 Int (3 (mod Start_3 Start_10)))
   (Start_14 Int (5 (- Start_3) (+ Start_13 Start_13) (div Start_12 Start_11) (abs Start_3) (ite StartBool_1 Start_6 Start_6)))
   (Start_8 Int (3 (+ Start_6 Start_6) (* Start_9 Start_13) (mod Start_14 Start_11)))
   (Start_9 Int (y (- Start_4) (* Start_11 Start_7) (div Start_4 Start_1) (mod Start_8 Start_6) (abs Start_11)))
   (Start_2 Int (5 3 (- Start_2) (- Start_1 Start_1) (mod Start_2 Start_1) (ite StartBool_1 Start_3 Start)))
   (Start_3 Int (2 (- Start_1) (- Start_1 Start_4) (+ Start Start_1) (abs Start_5)))
   (Start_5 Int (2 0 1 (- Start_4 Start_1) (+ Start_5 Start_2) (* Start_4 Start) (mod Start_2 Start_1) (abs Start_1)))
   (Start_12 Int (5 0 (- Start_7) (- Start_5 Start_8) (+ Start_10 Start) (div Start_3 Start_10) (abs Start_8) (ite StartBool_1 Start Start_4)))
   (Start_16 Int (4 (- Start_13 Start_1) (+ Start_13 Start_4) (* Start_9 Start_13) (div Start_10 Start_1)))
   (StartBool_6 Bool (false (and StartBool StartBool) (<= Start_4 Start_8) (= Start_12 Start) (>= Start_3 Start_5) (> Start_6 Start_8)))
   (Start_4 Int (4 (- Start_1) (+ Start_1 Start_2) (* Start_6 Start_1) (ite StartBool Start_5 Start_7)))
   (Start_7 Int (5 x (- Start_1) (+ Start_8 Start_4) (* Start_8 Start_7) (div Start_3 Start_6) (mod Start_8 Start_9) (abs Start_6) (ite StartBool_2 Start_8 Start_10)))
   (StartBool_4 Bool (true (or StartBool StartBool_3) (= Start_11 Start) (>= Start_2 Start) (> Start_8 Start_8)))
   (StartBool_2 Bool (false true (and StartBool_5 StartBool_3)))
   (Start_1 Int (4 (- Start_6) (div Start_15 Start_11) (mod Start_15 Start_5)))
   (Start_10 Int (1 x 5 (- Start_10) (- Start_6 Start_3) (* Start_9 Start_7) (div Start_7 Start_11) (mod Start_9 Start_5) (abs Start_3)))
   (Start_11 Int (y (mod Start_12 Start_3) (abs Start_3) (ite StartBool_3 Start_3 Start_12)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool_1) (or StartBool_4 StartBool_1) (< Start_6 Start) (<= Start_4 Start_9) (= Start_10 Start_5)))
   (StartBool_5 Bool (true false (not StartBool) (and StartBool StartBool_2) (or StartBool_6 StartBool) (<= Start_12 Start_12) (>= Start_11 Start_3) (> Start_4 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- x) x)))

(check-synth)
