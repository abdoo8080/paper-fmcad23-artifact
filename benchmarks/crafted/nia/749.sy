(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_10 Bool) (Start_2 Int) (StartBool_6 Bool) (Start_13 Int) (Start_15 Int) (Start_16 Int) (Start_12 Int) (Start_3 Int) (Start_8 Int) (StartBool_7 Bool) (StartBool_1 Bool) (Start_14 Int) (Start_7 Int) (StartBool_4 Bool) (Start_5 Int) (Start_1 Int) (Start_6 Int) (Start_9 Int) (StartBool_9 Bool) (Start_4 Int) (Start_10 Int) (StartBool_2 Bool) (StartBool_8 Bool) (StartBool_3 Bool) (StartBool_5 Bool) (Start_11 Int))
  ((Start Int (0 y (- Start) (+ Start Start) (mod Start_1 Start_2) (abs Start_3) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true (and StartBool_7 StartBool_10) (or StartBool_8 StartBool_10)))
   (StartBool_10 Bool (true false (and StartBool_10 StartBool_5) (>= Start_5 Start_13)))
   (Start_2 Int (3 2 5 (- Start_8) (* Start_11 Start) (div Start_11 Start_4) (abs Start_10)))
   (StartBool_6 Bool (true false (and StartBool_5 StartBool_6) (or StartBool StartBool_5) (< Start_1 Start_12) (= Start Start)))
   (Start_13 Int (x (- Start_10) (div Start_16 Start_11)))
   (Start_15 Int (4 (- Start_10 Start_4) (+ Start Start_16) (div Start_13 Start_14) (mod Start_9 Start_6)))
   (Start_16 Int (5 (* Start_6 Start_8) (div Start_13 Start_4) (abs Start_3)))
   (Start_12 Int (2 (- Start_10) (- Start_5 Start_13) (+ Start_3 Start_9) (* Start_11 Start_2) (div Start_14 Start_6) (ite StartBool_1 Start_2 Start_5)))
   (Start_3 Int (5 (+ Start_10 Start_7) (* Start_6 Start_3) (div Start_15 Start_11) (abs Start_16)))
   (Start_8 Int (1 (abs Start_3)))
   (StartBool_7 Bool (false (<= Start_8 Start_13) (>= Start_14 Start_7) (> Start_13 Start_8)))
   (StartBool_1 Bool (true false (not StartBool_2) (< Start_1 Start_1) (<= Start_1 Start_1) (= Start Start_4) (>= Start_2 Start_2) (> Start_5 Start_1)))
   (Start_14 Int (3 (- Start) (- Start_15 Start_13) (* Start_1 Start_2) (abs Start_4) (ite StartBool_8 Start_8 Start_16)))
   (Start_7 Int (1 4 0 5 3 (- Start_1 Start_4) (+ Start_3 Start_8) (* Start_5 Start_1) (abs Start_5) (ite StartBool Start_4 Start_3)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool StartBool_3) (< Start_7 Start_5) (<= Start_8 Start_1)))
   (Start_5 Int (x (- Start_6 Start_5) (* Start_4 Start_7) (div Start_4 Start_3) (mod Start_1 Start_3) (abs Start)))
   (Start_1 Int (1 2 (- Start_5 Start_12) (+ Start_15 Start_4) (abs Start_12)))
   (Start_6 Int (x (- Start_3) (+ Start_8 Start_3) (abs Start_3) (ite StartBool Start_9 Start_8)))
   (Start_9 Int (x (- Start_9 Start_4) (+ Start_2 Start_5) (* Start_7 Start_7) (mod Start Start) (abs Start)))
   (StartBool_9 Bool (false true (not StartBool_3) (< Start_1 Start_2) (<= Start_9 Start_1)))
   (Start_4 Int (2 (- Start_8 Start_9) (+ Start_1 Start_8) (* Start Start_7) (div Start_9 Start_2) (abs Start)))
   (Start_10 Int (0 4 3 (- Start_10) (- Start_4 Start_3) (+ Start_4 Start_7) (ite StartBool_7 Start_12 Start_7)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_3 StartBool_4) (or StartBool_1 StartBool_3) (< Start_3 Start_6) (<= Start_3 Start_6) (= Start_9 Start_8) (>= Start_1 Start_2)))
   (StartBool_8 Bool (false (and StartBool_5 StartBool_9) (or StartBool_7 StartBool_1) (<= Start_9 Start_8) (> Start_5 Start_2)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool StartBool_5) (< Start_9 Start_3) (>= Start_2 Start_5)))
   (StartBool_5 Bool (true (and StartBool_6 StartBool_7) (< Start_10 Start_5) (= Start_10 Start_5) (>= Start_11 Start_2)))
   (Start_11 Int (3 x (- Start_5) (+ Start_6 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 0 (mod 0 x))))

(check-synth)
