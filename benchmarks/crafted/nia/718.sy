(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (StartBool_6 Bool) (Start_18 Int) (Start_16 Int) (Start_17 Int) (Start_14 Int) (Start_13 Int) (Start_15 Int) (Start_12 Int) (Start_1 Int) (Start_3 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_5 Int) (Start_8 Int) (StartBool_5 Bool) (Start_2 Int) (Start_11 Int) (Start_6 Int) (StartBool_1 Bool) (Start_10 Int) (StartBool_4 Bool) (Start_7 Int) (Start_9 Int) (Start_4 Int))
  ((Start Int (5 1 y 3 x 0 4 2 (- Start Start_1) (* Start Start_1) (div Start_2 Start_2) (ite StartBool Start Start_3)))
   (StartBool Bool (true false (and StartBool StartBool_1) (or StartBool_5 StartBool_5) (< Start_13 Start) (= Start_12 Start_7)))
   (Start_19 Int (3 (- Start_3 Start_17) (abs Start)))
   (StartBool_6 Bool (true false (and StartBool_1 StartBool_4) (< Start_8 Start_17) (> Start_19 Start_7)))
   (Start_18 Int (4 (abs Start_15)))
   (Start_16 Int (y (+ Start_16 Start_10) (* Start_13 Start_16) (div Start_5 Start_10) (abs Start_7)))
   (Start_17 Int (x y (- Start_2) (* Start_10 Start_1) (abs Start_10)))
   (Start_14 Int (2 (div Start_3 Start_4) (mod Start_9 Start_7) (abs Start_4) (ite StartBool Start_15 Start)))
   (Start_13 Int (y (- Start_14) (+ Start_9 Start_10) (* Start_4 Start_14) (mod Start_9 Start_5) (abs Start) (ite StartBool_1 Start_12 Start_3)))
   (Start_15 Int (2 y (- Start) (+ Start_7 Start_13) (* Start_2 Start_2) (div Start_16 Start_17) (mod Start_7 Start_12)))
   (Start_12 Int (1 (+ Start_10 Start_7) (* Start_11 Start) (mod Start_2 Start_3) (ite StartBool_3 Start_11 Start_13)))
   (Start_1 Int (x (- Start_2) (- Start_5 Start_4) (+ Start_5 Start_5) (* Start_9 Start_4) (mod Start Start_11) (abs Start_9) (ite StartBool Start_12 Start_3)))
   (Start_3 Int (1 0 5 (- Start_1) (- Start_4 Start_1) (* Start_5 Start_2) (mod Start Start_4)))
   (StartBool_3 Bool (false (not StartBool_4) (= Start_7 Start_12) (>= Start_17 Start_16) (> Start_11 Start_16)))
   (StartBool_2 Bool (false true (or StartBool StartBool) (<= Start_2 Start_6) (>= Start_1 Start_1) (> Start Start_6)))
   (Start_5 Int (3 x (- Start_1 Start) (div Start_5 Start_2) (abs Start_2) (ite StartBool_1 Start_4 Start_5)))
   (Start_8 Int (4 (- Start_3) (ite StartBool Start_5 Start_6)))
   (StartBool_5 Bool (false true (and StartBool_2 StartBool_2) (or StartBool_6 StartBool_5) (< Start_9 Start_18) (>= Start_14 Start)))
   (Start_2 Int (5 x (ite StartBool_1 Start_8 Start_4)))
   (Start_11 Int (2 (- Start_1)))
   (Start_6 Int (y (+ Start_2 Start_3) (* Start_3 Start_5) (div Start_3 Start_5) (mod Start_5 Start_7) (abs Start_2) (ite StartBool Start_8 Start_7)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_1) (or StartBool StartBool) (>= Start_2 Start_2) (> Start_1 Start_2)))
   (Start_10 Int (2 3 (- Start_7) (* Start_11 Start_3) (div Start_10 Start_3)))
   (StartBool_4 Bool (true false (<= Start_2 Start_11) (> Start_4 Start_17)))
   (Start_7 Int (4 x (* Start_2 Start_9) (abs Start_8)))
   (Start_9 Int (4 (- Start_4 Start_10)))
   (Start_4 Int (2 (- Start_7) (- Start_4 Start_11) (+ Start_6 Start_10) (* Start Start_1) (div Start_10 Start_5) (mod Start Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x (+ (mod 0 y) 4))))

(check-synth)
