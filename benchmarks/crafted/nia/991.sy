(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_17 Int) (Start_15 Int) (Start_16 Int) (Start_14 Int) (Start_4 Int) (Start_7 Int) (Start_3 Int) (StartBool_2 Bool) (Start_2 Int) (Start_12 Int) (Start_6 Int) (Start_5 Int) (Start_9 Int) (Start_13 Int) (StartBool_1 Bool) (Start_8 Int) (Start_11 Int) (Start_1 Int) (Start_10 Int))
  ((Start Int (4 (div Start_1 Start_2) (mod Start_1 Start_3)))
   (StartBool Bool (true (< Start_9 Start_12) (>= Start_16 Start_8) (> Start Start_10)))
   (StartBool_3 Bool (true false (not StartBool_2) (or StartBool_3 StartBool_3) (>= Start_17 Start_14)))
   (Start_17 Int (2 1 0 (- Start_1) (div Start Start_13) (mod Start_7 Start_1)))
   (Start_15 Int (4 2 3 5 (- Start_9) (+ Start_17 Start_6) (div Start_2 Start_13) (mod Start Start_5)))
   (Start_16 Int (1 (* Start_10 Start_1) (mod Start_7 Start_9)))
   (Start_14 Int (x 1 (- Start_2) (- Start_9 Start_2) (* Start_2 Start_15) (div Start_16 Start) (mod Start_1 Start_7) (abs Start_1) (ite StartBool Start_12 Start_4)))
   (Start_4 Int (3 (- Start_4) (div Start_3 Start_4) (mod Start_5 Start_5) (ite StartBool_1 Start_1 Start_2)))
   (Start_7 Int (0 (- Start_4) (* Start_5 Start_4) (mod Start_8 Start_9)))
   (Start_3 Int (0 (- Start_4) (div Start_4 Start) (abs Start_3) (ite StartBool Start_1 Start_1)))
   (StartBool_2 Bool (false (not StartBool_2) (< Start Start) (<= Start_4 Start) (>= Start_3 Start_2) (> Start_3 Start_2)))
   (Start_2 Int (3 2 (+ Start_1 Start_7)))
   (Start_12 Int (x 3 (div Start_8 Start_1) (mod Start_17 Start_6)))
   (Start_6 Int (3 (- Start_6) (- Start Start_2) (+ Start_4 Start) (ite StartBool_2 Start_3 Start_3)))
   (Start_5 Int (2 x (- Start_5 Start_5) (* Start_6 Start_6) (div Start_3 Start)))
   (Start_9 Int (0 x (- Start_5 Start_2) (mod Start_9 Start_2) (abs Start_8)))
   (Start_13 Int (2 5 3 0 (- Start_9) (mod Start_14 Start_12)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (or StartBool_2 StartBool_1) (= Start_1 Start_6) (>= Start_2 Start_6)))
   (Start_8 Int (2 0 x (- Start_7) (div Start_3 Start_3) (mod Start_8 Start_10) (abs Start_5) (ite StartBool Start_11 Start_1)))
   (Start_11 Int (3 2 (* Start_5 Start_6) (mod Start_9 Start_3)))
   (Start_1 Int (x (- Start) (+ Start_16 Start_2) (abs Start_6)))
   (Start_10 Int (0 y 2 (- Start_8) (- Start_8 Start_2) (* Start_1 Start_3) (div Start_12 Start_8) (mod Start_9 Start_13) (abs Start_9) (ite StartBool_3 Start_3 Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 0 (abs (div x x)))))

(check-synth)
