(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_14 Int) (Start_12 Int) (Start_1 Int) (Start_11 Int) (Start_8 Int) (Start_13 Int) (Start_2 Int) (StartBool_1 Bool) (Start_9 Int) (Start_4 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_5 Int) (StartBool_3 Bool) (Start_3 Int) (Start_10 Int) (Start_7 Int) (StartBool_5 Bool) (Start_6 Int))
  ((Start Int (x 3 5 (- Start_1) (- Start Start_1) (abs Start_1) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (true (not StartBool_5) (and StartBool_4 StartBool_2) (< Start_10 Start) (>= Start_9 Start_11) (> Start_14 Start_9)))
   (Start_15 Int (2 (abs Start_2) (ite StartBool_3 Start_1 Start)))
   (Start_14 Int (1 (- Start_8 Start_10) (mod Start_4 Start_15) (ite StartBool_2 Start_6 Start_12)))
   (Start_12 Int (y 0 3 4 5 (- Start_2) (- Start_8 Start_7) (div Start_7 Start_8) (mod Start_8 Start_3) (ite StartBool_2 Start_3 Start)))
   (Start_1 Int (y (- Start_4) (- Start_11 Start_2) (* Start_5 Start_1) (div Start_12 Start) (mod Start_2 Start_4) (abs Start) (ite StartBool_2 Start_4 Start_1)))
   (Start_11 Int (5 4 (* Start Start_6) (div Start_8 Start_9) (mod Start_3 Start_13) (ite StartBool_4 Start_5 Start_4)))
   (Start_8 Int (1 (div Start_3 Start_5) (mod Start_6 Start_6)))
   (Start_13 Int (x 0 (- Start) (- Start_1 Start_11) (+ Start_1 Start_13) (* Start_3 Start_12) (abs Start_3) (ite StartBool_4 Start_11 Start_3)))
   (Start_2 Int (1 0 4 3 (div Start Start_1) (mod Start_1 Start) (abs Start_2)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool) (<= Start_3 Start_3) (>= Start_1 Start_3) (> Start_1 Start_4)))
   (Start_9 Int (x 0 1 5 (- Start_9) (+ Start_8 Start_10) (div Start_1 Start_2) (mod Start_7 Start_1) (abs Start_4)))
   (Start_4 Int (x 4 1 (- Start_3) (- Start_1 Start_2) (* Start_2 Start_1) (div Start_2 Start_1) (ite StartBool Start_4 Start_5)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_4) (or StartBool_4 StartBool) (< Start_4 Start_7) (> Start_4 Start_2)))
   (StartBool_4 Bool (true false (not StartBool_4) (< Start_4 Start_3) (<= Start_1 Start_7) (>= Start_2 Start_6) (> Start Start_2)))
   (Start_5 Int (5 3 0 1 4 x 2 y (- Start Start_6) (+ Start_7 Start_7) (* Start_3 Start_4) (mod Start_1 Start_1) (ite StartBool_2 Start_3 Start)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_5 StartBool_3) (<= Start_7 Start_3) (= Start_5 Start_7)))
   (Start_3 Int (2 (- Start_10) (- Start_8 Start_9) (+ Start_8 Start) (div Start_10 Start_1)))
   (Start_10 Int (y 5 (- Start_8) (- Start_3 Start) (abs Start_9) (ite StartBool_1 Start_5 Start_9)))
   (Start_7 Int (5 (- Start) (+ Start_5 Start_5) (* Start_6 Start_2) (mod Start_6 Start_2) (ite StartBool_1 Start_6 Start_1)))
   (StartBool_5 Bool (false (or StartBool StartBool_3) (< Start_2 Start_5) (<= Start_7 Start_3) (= Start_3 Start) (>= Start_5 Start)))
   (Start_6 Int (5 3 (- Start_4 Start_8) (+ Start_4 Start_9) (* Start_8 Start_2) (mod Start_8 Start_9) (ite StartBool_2 Start_8 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x (mod x 4))))

(check-synth)
