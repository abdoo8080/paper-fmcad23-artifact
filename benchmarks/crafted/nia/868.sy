(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_3 Bool) (Start_15 Int) (Start_1 Int) (StartBool_5 Bool) (Start_14 Int) (StartBool_2 Bool) (Start_4 Int) (Start_16 Int) (Start_6 Int) (StartBool_4 Bool) (Start_5 Int) (Start_7 Int) (Start_17 Int) (Start_2 Int) (Start_10 Int) (Start_13 Int) (Start_11 Int) (Start_12 Int) (Start_3 Int) (Start_9 Int) (StartBool_1 Bool) (Start_8 Int))
  ((Start Int (5 x (- Start) (div Start_1 Start) (mod Start_1 Start_2)))
   (StartBool Bool (true false (not StartBool) (or StartBool_6 StartBool_3) (< Start_4 Start_10) (>= Start_12 Start_16) (> Start_2 Start_16)))
   (StartBool_6 Bool (true false (not StartBool_5) (or StartBool_3 StartBool_5) (< Start_12 Start_5) (<= Start_2 Start_6) (= Start_9 Start_7) (>= Start_1 Start_7) (> Start_17 Start_16)))
   (StartBool_3 Bool (true false (<= Start_5 Start_3) (= Start_12 Start_16) (>= Start_3 Start_9)))
   (Start_15 Int (4 2 (- Start_4) (- Start_4 Start_2) (mod Start_15 Start_5) (abs Start_6) (ite StartBool_4 Start_6 Start_15)))
   (Start_1 Int (2 (- Start_11) (- Start_4 Start_11) (+ Start_16 Start_6) (* Start_5 Start_13) (abs Start_8) (ite StartBool_3 Start_9 Start_4)))
   (StartBool_5 Bool (true false (not StartBool_3) (or StartBool_1 StartBool_1) (< Start_4 Start_2) (>= Start_1 Start_12) (> Start_16 Start_3)))
   (Start_14 Int (4 (- Start_15) (+ Start_7 Start_7) (abs Start_12) (ite StartBool_4 Start_8 Start_7)))
   (StartBool_2 Bool (true false (and StartBool StartBool_2) (or StartBool_2 StartBool_3) (< Start_1 Start_14) (>= Start Start_1)))
   (Start_4 Int (2 0 1 (- Start_1) (- Start_2 Start) (* Start_4 Start_3) (abs Start) (ite StartBool Start_4 Start_3)))
   (Start_16 Int (5 (- Start_12) (- Start_12 Start_4) (+ Start_12 Start_5) (* Start_4 Start_4) (abs Start_6) (ite StartBool Start_13 Start_2)))
   (Start_6 Int (x (- Start_4 Start_3) (* Start_7 Start_5) (mod Start_4 Start_6) (abs Start_6)))
   (StartBool_4 Bool (true (or StartBool_3 StartBool_5) (< Start_9 Start_4) (>= Start_4 Start_4)))
   (Start_5 Int (1 (- Start_4)))
   (Start_7 Int (1 (- Start_1) (- Start_8 Start) (+ Start_7 Start_7) (div Start_3 Start_6) (abs Start) (ite StartBool_1 Start_9 Start_8)))
   (Start_17 Int (1 (- Start_2 Start_4) (* Start_7 Start_17) (mod Start Start_13) (ite StartBool_1 Start_2 Start_2)))
   (Start_2 Int (y (- Start_3) (+ Start_3 Start) (mod Start_3 Start) (ite StartBool_1 Start_2 Start_4)))
   (Start_10 Int (x (- Start_6) (- Start_7 Start_6) (+ Start_3 Start_2) (* Start_6 Start_5) (div Start_5 Start) (mod Start Start_11) (abs Start_7)))
   (Start_13 Int (0 4 (+ Start_8 Start_14) (* Start_11 Start_5) (div Start Start_11) (mod Start_4 Start_15) (abs Start_16)))
   (Start_11 Int (3 0 y (- Start_6 Start) (* Start_4 Start) (div Start_11 Start_11) (mod Start_1 Start_7)))
   (Start_12 Int (3 (- Start_10) (- Start_3 Start_9) (mod Start_13 Start) (abs Start_11) (ite StartBool_2 Start_4 Start_7)))
   (Start_3 Int (3 2 x (- Start_6) (- Start Start_2) (mod Start_1 Start_4) (ite StartBool Start_1 Start_1)))
   (Start_9 Int (x (- Start_1) (- Start_6 Start_10) (+ Start_5 Start_6)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (< Start Start) (<= Start_3 Start_5) (= Start_3 Start_4) (> Start_2 Start_5)))
   (Start_8 Int (x y 1 3 5 (div Start_9 Start) (mod Start_12 Start_10) (abs Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 5 (ite (< x 5) 3 1))))

(check-synth)
