(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (StartBool_5 Bool) (Start_15 Int) (Start_1 Int) (Start_10 Int) (StartBool_6 Bool) (StartBool_4 Bool) (Start_16 Int) (StartBool_1 Bool) (Start_7 Int) (Start_14 Int) (StartBool_2 Bool) (Start_18 Int) (Start_8 Int) (Start_5 Int) (Start_6 Int) (Start_4 Int) (Start_2 Int) (Start_9 Int) (StartBool_3 Bool) (Start_12 Int) (Start_13 Int) (Start_3 Int) (Start_11 Int))
  ((Start Int (2 5 (- Start) (- Start_1 Start) (+ Start_2 Start_3) (div Start_4 Start_1) (mod Start_2 Start_2) (ite StartBool_1 Start_2 Start_4)))
   (StartBool Bool (true false (not StartBool_6) (and StartBool_2 StartBool_2) (< Start_10 Start_13) (= Start_12 Start_2) (>= Start Start_14) (> Start_14 Start_10)))
   (Start_17 Int (3 (- Start_4 Start_9) (abs Start_2) (ite StartBool_6 Start_4 Start_16)))
   (StartBool_5 Bool (true false (not StartBool_4) (and StartBool_6 StartBool_1) (< Start_3 Start_15) (> Start_6 Start_9)))
   (Start_15 Int (3 0 (+ Start_15 Start_1) (* Start_2 Start_4) (div Start_1 Start_1) (abs Start_5) (ite StartBool_5 Start_14 Start_3)))
   (Start_1 Int (2 x y 3 5 (- Start_18 Start_12) (+ Start_13 Start_1) (mod Start_9 Start_4) (abs Start_15)))
   (Start_10 Int (4 (- Start_14) (div Start_14 Start_10)))
   (StartBool_6 Bool (true (not StartBool_5) (and StartBool StartBool_6) (< Start_14 Start) (<= Start_16 Start_3) (>= Start_16 Start_4) (> Start_1 Start_11)))
   (StartBool_4 Bool (true (not StartBool_1) (or StartBool_4 StartBool) (<= Start_8 Start_12) (>= Start_6 Start_6) (> Start_8 Start_11)))
   (Start_16 Int (x (- Start_9) (+ Start_16 Start_13) (div Start_15 Start_11) (mod Start_3 Start_13) (abs Start_7)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (<= Start_5 Start_1) (= Start_3 Start_4) (> Start_4 Start_5)))
   (Start_7 Int (5 x 2 y (- Start_2) (+ Start_3 Start_1) (* Start_3 Start_4)))
   (Start_14 Int (4 (* Start_11 Start_9) (mod Start_15 Start_6) (abs Start_3) (ite StartBool_4 Start_10 Start)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_2) (< Start_8 Start_1) (= Start_2 Start_1) (> Start_8 Start_6)))
   (Start_18 Int (0 (- Start_13) (+ Start_18 Start_11) (abs Start_9) (ite StartBool_6 Start_1 Start_14)))
   (Start_8 Int (4 (- Start_6 Start_2) (+ Start Start_6) (* Start_5 Start)))
   (Start_5 Int (4 x 5 (- Start_4) (- Start_4 Start_2) (+ Start_5 Start_1) (* Start_5 Start_1) (div Start_4 Start_1) (mod Start_5 Start_1) (abs Start_3) (ite StartBool_2 Start_6 Start_7)))
   (Start_6 Int (1 3 (- Start Start_7) (+ Start Start_3) (div Start_7 Start_2) (ite StartBool_2 Start_6 Start_7)))
   (Start_4 Int (3 (- Start_3) (- Start_1 Start_2) (* Start_8 Start_3) (mod Start_3 Start_9) (abs Start_6)))
   (Start_2 Int (x (- Start_9 Start_10) (* Start_17 Start_17) (ite StartBool_1 Start_6 Start_7)))
   (Start_9 Int (4 3 (- Start_6 Start_6) (div Start_9 Start_8) (mod Start_5 Start_10) (ite StartBool_3 Start_6 Start_3)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool StartBool_2) (or StartBool_4 StartBool) (<= Start_10 Start_3) (= Start_11 Start_6) (>= Start_2 Start_9) (> Start_12 Start_1)))
   (Start_12 Int (5 (- Start_4) (- Start_2 Start_8) (abs Start_13)))
   (Start_13 Int (1 4 (- Start_1) (+ Start Start_9)))
   (Start_3 Int (0 4 3 (- Start_6) (+ Start_17 Start_16) (mod Start_14 Start_6)))
   (Start_11 Int (2 x (- Start Start_2) (+ Start_6 Start_13) (* Start_1 Start_10) (div Start_7 Start_13) (abs Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 4 (abs (- x 1)))))

(check-synth)
