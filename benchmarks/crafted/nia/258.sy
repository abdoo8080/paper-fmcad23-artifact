(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_6 Int) (Start_3 Int) (Start_16 Int) (Start_15 Int) (Start_11 Int) (Start_13 Int) (StartBool_8 Bool) (StartBool_2 Bool) (Start_1 Int) (Start_10 Int) (Start_2 Int) (StartBool_6 Bool) (StartBool_4 Bool) (Start_8 Int) (Start_4 Int) (Start_18 Int) (Start_14 Int) (Start_12 Int) (Start_9 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_5 Int) (Start_17 Int) (Start_7 Int) (StartBool_7 Bool))
  ((Start Int (4 y 3 (- Start Start) (mod Start Start) (abs Start) (ite StartBool Start Start)))
   (StartBool Bool (true (and StartBool StartBool_1) (> Start_1 Start)))
   (StartBool_5 Bool (false (< Start_13 Start_1) (= Start_9 Start_13) (>= Start_12 Start_7) (> Start Start_4)))
   (Start_6 Int (4 y (- Start_15) (+ Start_17 Start_16) (div Start_18 Start_15) (ite StartBool_1 Start_18 Start_12)))
   (Start_3 Int (1 x (- Start_8) (+ Start_6 Start_5) (* Start_11 Start_10) (div Start_8 Start_2) (ite StartBool_8 Start_7 Start_6)))
   (Start_16 Int (3 (mod Start Start_3) (abs Start_2)))
   (Start_15 Int (5 (- Start_3 Start_9) (* Start_16 Start_16) (div Start_1 Start_10) (abs Start_17)))
   (Start_11 Int (y (+ Start_13 Start_11) (* Start Start_9) (div Start_8 Start) (mod Start_8 Start) (abs Start_8)))
   (Start_13 Int (0 3 (- Start_4) (+ Start_3 Start_7) (* Start_2 Start_10) (div Start_10 Start) (abs Start_6)))
   (StartBool_8 Bool (true (< Start_10 Start_11) (= Start_12 Start_8) (> Start_7 Start_9)))
   (StartBool_2 Bool (false true (not StartBool) (or StartBool StartBool_3) (> Start_4 Start_1)))
   (Start_1 Int (3 4 5 2 (mod Start Start)))
   (Start_10 Int (3 4 1 0 2 (- Start_8 Start_9) (* Start_4 Start_14) (ite StartBool Start_14 Start_12)))
   (Start_2 Int (0 x (- Start_3) (- Start_3 Start_3) (* Start_2 Start) (abs Start) (ite StartBool_2 Start_3 Start_2)))
   (StartBool_6 Bool (false true (< Start_2 Start) (<= Start_2 Start_7) (>= Start_1 Start_2)))
   (StartBool_4 Bool (true (and StartBool_7 StartBool_8) (or StartBool_7 StartBool_2) (< Start_2 Start_5) (<= Start_9 Start_17) (= Start_18 Start_10) (> Start_8 Start_4)))
   (Start_8 Int (2 y (- Start_8 Start_2) (+ Start_5 Start_4) (* Start_3 Start_8) (abs Start_5) (ite StartBool_7 Start_2 Start_5)))
   (Start_4 Int (5 2 (* Start_3 Start_4) (abs Start_1) (ite StartBool_1 Start_4 Start_1)))
   (Start_18 Int (x (* Start_3 Start_17) (abs Start_6) (ite StartBool_5 Start_8 Start_6)))
   (Start_14 Int (1 2 (- Start_11) (- Start_14 Start_2) (+ Start_4 Start) (mod Start Start_12) (abs Start_1) (ite StartBool_8 Start_15 Start_2)))
   (Start_12 Int (1 y (- Start_1) (- Start Start_5) (+ Start_13 Start_5)))
   (Start_9 Int (4 0 (- Start_6) (- Start_2 Start_3) (* Start_6 Start_3)))
   (StartBool_3 Bool (true (and StartBool_4 StartBool_5) (<= Start_5 Start) (>= Start_3 Start_5) (> Start_4 Start_2)))
   (StartBool_1 Bool (true (not StartBool_1) (< Start_1 Start) (<= Start_1 Start_1) (= Start_1 Start) (>= Start_1 Start_2)))
   (Start_5 Int (x 1 y 4 (+ Start_3 Start_6) (div Start_4 Start_6) (mod Start_3 Start_4) (ite StartBool_6 Start_3 Start_3)))
   (Start_17 Int (y 3 4 (* Start_16 Start_13) (div Start_5 Start_2) (mod Start_1 Start_8) (ite StartBool_3 Start_17 Start_8)))
   (Start_7 Int (3 0 (+ Start_5 Start_4) (* Start_5 Start_1) (div Start_5 Start_8) (mod Start_4 Start)))
   (StartBool_7 Bool (false true (or StartBool_8 StartBool_1) (= Start_3 Start_1) (>= Start_1 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 5 x)))

(check-synth)
