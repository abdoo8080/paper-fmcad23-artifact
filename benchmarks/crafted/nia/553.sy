(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (StartBool_7 Bool) (Start_16 Int) (StartBool_8 Bool) (Start_15 Int) (Start_13 Int) (Start_12 Int) (Start_1 Int) (Start_10 Int) (StartBool_6 Bool) (Start_11 Int) (Start_6 Int) (Start_4 Int) (Start_14 Int) (StartBool_3 Bool) (Start_5 Int) (Start_3 Int) (Start_7 Int) (StartBool_5 Bool) (StartBool_2 Bool) (Start_8 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_2 Int) (Start_9 Int))
  ((Start Int (5 x 3 4 (- Start_1) (- Start_1 Start) (+ Start_2 Start_3) (div Start Start_4) (mod Start Start_1)))
   (StartBool Bool (true false (not StartBool_5) (and StartBool_6 StartBool_1) (or StartBool_7 StartBool) (< Start_13 Start_7) (<= Start_15 Start_10)))
   (Start_17 Int (x 4 3 (- Start_12) (- Start_13 Start_7) (abs Start_6) (ite StartBool_3 Start_13 Start_2)))
   (StartBool_7 Bool (false true (or StartBool_8 StartBool_7) (< Start_17 Start_4) (= Start Start_9) (> Start_1 Start_12)))
   (Start_16 Int (5 2 3 (* Start_2 Start_12) (mod Start_11 Start_1)))
   (StartBool_8 Bool (false (not StartBool_3) (< Start_2 Start_11) (= Start_1 Start_13) (> Start_1 Start_3)))
   (Start_15 Int (5 (- Start Start_12) (+ Start_16 Start_14) (div Start_10 Start_1) (mod Start_6 Start_15) (abs Start_9) (ite StartBool_6 Start_3 Start_16)))
   (Start_13 Int (x 1 4 (- Start) (- Start_7 Start_2) (+ Start_15 Start_9) (abs Start_15)))
   (Start_12 Int (4 1 (- Start_12) (- Start_4 Start_9) (* Start_5 Start_13) (div Start_1 Start_10) (mod Start_14 Start_13) (ite StartBool_2 Start_13 Start_3)))
   (Start_1 Int (y (- Start_5) (mod Start_3 Start_11) (abs Start_11) (ite StartBool_2 Start_3 Start_7)))
   (Start_10 Int (1 (abs Start_8)))
   (StartBool_6 Bool (false true (not StartBool_1) (or StartBool_3 StartBool) (< Start_8 Start_9) (>= Start_1 Start_3) (> Start_4 Start_2)))
   (Start_11 Int (0 3 (* Start_11 Start_12) (mod Start_11 Start)))
   (Start_6 Int (5 (- Start_2 Start) (+ Start_3 Start_2) (ite StartBool_1 Start Start_3)))
   (Start_4 Int (y (- Start Start_3) (* Start Start_4) (div Start_5 Start) (abs Start_6)))
   (Start_14 Int (0 y 4 1 2 x (- Start_7 Start_11) (+ Start Start_5) (ite StartBool_2 Start_13 Start_6)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_1) (or StartBool StartBool_3) (< Start_8 Start_1) (<= Start_4 Start_1) (>= Start_6 Start_1)))
   (Start_5 Int (y 5 4 0 (mod Start Start_4) (abs Start_1)))
   (Start_3 Int (1 5 x 2 0 (+ Start_5 Start_6) (div Start_1 Start_4) (mod Start_5 Start_3)))
   (Start_7 Int (5 (- Start_4) (+ Start_6 Start) (* Start_7 Start_5) (div Start_5 Start_5) (abs Start_3) (ite StartBool_2 Start_1 Start_7)))
   (StartBool_5 Bool (false (and StartBool_2 StartBool_1) (or StartBool_4 StartBool_5) (<= Start_7 Start_10) (> Start_9 Start_3)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool) (or StartBool_3 StartBool_1) (> Start Start_6)))
   (Start_8 Int (3 y (- Start_6) (- Start Start_9) (+ Start_5 Start_5) (div Start_4 Start_5) (abs Start_5)))
   (StartBool_4 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_5) (or StartBool_3 StartBool_6)))
   (StartBool_1 Bool (false (= Start_6 Start) (>= Start_2 Start_3)))
   (Start_2 Int (3 2 1 0 4 5 (* Start_1 Start_6) (abs Start_7)))
   (Start_9 Int (1 x 2 0 y (- Start_3) (+ Start_9 Start_8) (div Start_7 Start_5) (abs Start_10) (ite StartBool_4 Start_3 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div y (* 5 5))))

(check-synth)
