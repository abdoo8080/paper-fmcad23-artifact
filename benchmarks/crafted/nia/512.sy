(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_6 Int) (Start_5 Int) (StartBool_2 Bool) (Start_3 Int) (Start_4 Int) (StartBool_1 Bool) (Start_7 Int))
  ((Start Int (0 y 2 x (- Start Start_1) (+ Start_2 Start_1) (div Start_1 Start) (mod Start_2 Start_3) (abs Start_4)))
   (StartBool Bool (true (not StartBool) (or StartBool_1 StartBool) (< Start_6 Start_5) (<= Start_6 Start_3) (= Start_2 Start_6) (>= Start_1 Start_7)))
   (Start_1 Int (4 (- Start_1) (- Start_2 Start_6) (div Start_1 Start_6) (abs Start_5)))
   (Start_2 Int (5 4 y 1 (- Start_1 Start_7) (* Start_3 Start_7) (mod Start_3 Start_4) (abs Start_7) (ite StartBool Start_5 Start_4)))
   (Start_6 Int (y x 2 5 (- Start_1) (- Start_7 Start_4) (mod Start_1 Start_5) (abs Start_4)))
   (Start_5 Int (2 y (- Start_5) (+ Start_2 Start_1) (abs Start_6)))
   (StartBool_2 Bool (true (or StartBool_1 StartBool_1) (< Start_2 Start_1) (<= Start_5 Start_6) (>= Start_7 Start_6) (> Start_4 Start_2)))
   (Start_3 Int (4 5 (* Start_5 Start_4) (abs Start_1)))
   (Start_4 Int (5 (+ Start Start_1) (* Start_3 Start) (div Start_3 Start)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (or StartBool_1 StartBool_2) (<= Start_7 Start) (> Start_6 Start_2)))
   (Start_7 Int (5 2 y (- Start_6) (abs Start_1) (ite StartBool Start_4 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (mod 4 0) 5)))

(check-synth)
