(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_11 Int) (Start_6 Int) (StartBool_1 Bool) (Start_9 Int) (Start_8 Int) (Start_2 Int) (Start_4 Int) (Start_10 Int) (Start_5 Int) (Start_7 Int) (Start_3 Int) (Start_1 Int))
  ((Start Int (y 2 0 1 (- Start_1) (div Start_1 Start_2) (ite StartBool Start Start_2)))
   (StartBool Bool (true false (<= Start_1 Start_1) (>= Start_11 Start_2) (> Start_2 Start_10)))
   (StartBool_2 Bool (false (not StartBool_2) (= Start_7 Start_3) (>= Start_4 Start_9) (> Start_2 Start_2)))
   (Start_11 Int (4 (- Start) (- Start_8 Start_10) (mod Start Start_1) (abs Start_10)))
   (Start_6 Int (0 4 (- Start_7) (div Start_5 Start_7) (mod Start_5 Start_4) (abs Start) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (< Start_6 Start_5) (>= Start_8 Start) (> Start Start_9)))
   (Start_9 Int (y 4 3 (- Start_3) (- Start_7 Start_8) (+ Start_6 Start_8) (* Start_5 Start_2) (div Start_9 Start_4) (mod Start_8 Start_5) (ite StartBool Start_9 Start_3)))
   (Start_8 Int (0 (div Start_2 Start_9) (mod Start_9 Start) (ite StartBool Start_10 Start_3)))
   (Start_2 Int (4 (- Start_1 Start_1) (+ Start_2 Start_3) (div Start Start_4) (mod Start_5 Start_6)))
   (Start_4 Int (4 0 y 3 1 (- Start_4 Start_1) (+ Start_6 Start_2) (* Start_8 Start_4) (mod Start_6 Start_10) (abs Start)))
   (Start_10 Int (0 (- Start_8) (+ Start_1 Start_3) (div Start_8 Start_4) (mod Start_6 Start_1) (abs Start_2)))
   (Start_5 Int (2 1 (- Start_4) (- Start_5 Start_2) (div Start_4 Start_4)))
   (Start_7 Int (5 (- Start_4) (+ Start_7 Start_1) (* Start_3 Start_1) (mod Start_1 Start_1) (ite StartBool_1 Start_1 Start_9)))
   (Start_3 Int (2 (- Start_9) (- Start_10 Start_9) (mod Start_5 Start_9)))
   (Start_1 Int (x (- Start_2) (* Start_3 Start_10) (div Start_7 Start_3) (mod Start_2 Start_5) (abs Start_3) (ite StartBool_1 Start_7 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div y y) 2)))

(check-synth)
