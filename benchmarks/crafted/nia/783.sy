(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_7 Bool) (Start_12 Int) (Start_13 Int) (StartBool_4 Bool) (Start_10 Int) (Start_11 Int) (Start_4 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_2 Int) (Start_6 Int) (Start_3 Int) (StartBool_2 Bool) (Start_8 Int) (Start_9 Int) (Start_7 Int) (StartBool_6 Bool) (Start_5 Int) (Start_1 Int))
  ((Start Int (4 (- Start) (abs Start)))
   (StartBool Bool (false (<= Start_1 Start_2) (= Start_3 Start_1) (>= Start_4 Start_3) (> Start_2 Start_3)))
   (StartBool_3 Bool (true (and StartBool_6 StartBool_4) (< Start_1 Start) (<= Start_13 Start_12) (>= Start_11 Start_5)))
   (StartBool_7 Bool (false true (not StartBool_7) (and StartBool_1 StartBool_3) (or StartBool_7 StartBool_2) (< Start_1 Start_2) (<= Start_3 Start_1) (>= Start_5 Start_7) (> Start_7 Start)))
   (Start_12 Int (2 (- Start_5) (- Start Start_4) (* Start_1 Start_1) (abs Start_10)))
   (Start_13 Int (4 (- Start) (div Start_4 Start_9) (mod Start_1 Start_1) (abs Start_7)))
   (StartBool_4 Bool (false (not StartBool_2) (and StartBool_5 StartBool_5) (or StartBool_6 StartBool) (< Start_8 Start_4)))
   (Start_10 Int (y 1 4 (- Start_6 Start_10) (* Start_11 Start_2) (div Start_11 Start_4) (abs Start_11) (ite StartBool_2 Start_7 Start_10)))
   (Start_11 Int (5 x (+ Start_7 Start_2) (* Start Start_7) (mod Start_8 Start_2) (ite StartBool_4 Start_7 Start_1)))
   (Start_4 Int (2 5 x 0 (- Start_3 Start_5) (+ Start_2 Start_5) (* Start_1 Start) (div Start_2 Start_2)))
   (StartBool_5 Bool (true (not StartBool_4) (< Start_1 Start) (<= Start_4 Start_9) (> Start_7 Start_11)))
   (StartBool_1 Bool (false true (not StartBool_2) (<= Start_6 Start_5) (>= Start_3 Start_4) (> Start_4 Start_2)))
   (Start_2 Int (2 3 (- Start_3) (+ Start_5 Start_4) (* Start_5 Start_9) (div Start_2 Start_6)))
   (Start_6 Int (2 (- Start_3) (+ Start Start_5) (* Start_7 Start_2) (div Start_8 Start_1) (abs Start_1)))
   (Start_3 Int (5 (- Start Start_7) (* Start_6 Start_1) (div Start_1 Start) (abs Start_9)))
   (StartBool_2 Bool (true false (and StartBool_2 StartBool_1) (< Start_6 Start_5) (>= Start Start_4)))
   (Start_8 Int (1 (* Start_9 Start_3) (div Start_2 Start_4) (mod Start Start)))
   (Start_9 Int (1 (+ Start_2 Start_6) (mod Start_9 Start_6) (abs Start_8)))
   (Start_7 Int (y (- Start_9) (- Start_3 Start_9) (* Start_7 Start_1) (div Start_7 Start_6) (mod Start_5 Start_1) (abs Start_1)))
   (StartBool_6 Bool (true (and StartBool_5 StartBool_3) (or StartBool_2 StartBool_7) (< Start_6 Start_11) (<= Start_12 Start_4)))
   (Start_5 Int (2 (- Start_5 Start) (+ Start_3 Start_6) (* Start_5 Start_5) (mod Start_4 Start_4) (ite StartBool_1 Start_3 Start_1)))
   (Start_1 Int (2 (+ Start_5 Start) (div Start_4 Start_1) (ite StartBool_3 Start_10 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- 3 (div x 4)) 1)))

(check-synth)
