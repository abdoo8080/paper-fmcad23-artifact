(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_16 Int) (StartBool_5 Bool) (Start_14 Int) (Start_12 Int) (Start_13 Int) (Start_11 Int) (Start_1 Int) (Start_3 Int) (Start_4 Int) (Start_7 Int) (StartBool_1 Bool) (Start_8 Int) (Start_2 Int) (StartBool_2 Bool) (Start_5 Int) (Start_17 Int) (Start_9 Int) (Start_6 Int) (StartBool_3 Bool) (Start_10 Int) (StartBool_4 Bool))
  ((Start Int (2 1 (* Start_1 Start_1) (div Start Start_1) (abs Start_1)))
   (StartBool Bool (true (not StartBool_4) (<= Start Start_5) (>= Start_8 Start_14)))
   (Start_15 Int (3 0 4 (- Start_14) (- Start_1 Start_17) (+ Start_12 Start_1) (* Start_4 Start_16) (abs Start_10) (ite StartBool_1 Start_2 Start_4)))
   (Start_16 Int (5 0 (* Start_4 Start_8) (mod Start_13 Start_5) (abs Start_8)))
   (StartBool_5 Bool (true false (not StartBool) (and StartBool StartBool_2) (or StartBool_5 StartBool_5) (< Start_8 Start_5) (>= Start_12 Start_13) (> Start_6 Start_6)))
   (Start_14 Int (x 1 (- Start_4) (- Start_7 Start_9) (+ Start_3 Start_14) (mod Start_3 Start_15) (abs Start_8) (ite StartBool_2 Start_16 Start_2)))
   (Start_12 Int (5 3 x (- Start_3 Start_1) (+ Start_11 Start_13) (div Start_1 Start_2) (mod Start_4 Start_6) (abs Start_9) (ite StartBool_5 Start_10 Start_9)))
   (Start_13 Int (5 x 4 (div Start_11 Start_2) (mod Start_11 Start_10) (abs Start_3) (ite StartBool_1 Start_2 Start_3)))
   (Start_11 Int (2 5 (- Start_6) (- Start_3 Start_8) (* Start_6 Start_10) (div Start_11 Start_9) (abs Start_2) (ite StartBool_3 Start_7 Start_1)))
   (Start_1 Int (x (- Start Start) (* Start_2 Start_3) (ite StartBool_1 Start Start_2)))
   (Start_3 Int (0 (- Start_2) (* Start_2 Start_2) (div Start_6 Start_6) (mod Start_5 Start_8) (ite StartBool_4 Start_4 Start_11)))
   (Start_4 Int (x 0 (- Start_3 Start_5) (* Start_1 Start_4) (mod Start_6 Start) (abs Start_7) (ite StartBool Start_6 Start_2)))
   (Start_7 Int (2 (- Start_8) (+ Start_1 Start_6) (* Start_7 Start_7) (mod Start_8 Start_6) (abs Start_3)))
   (StartBool_1 Bool (false (< Start Start_1) (<= Start_3 Start_3) (> Start_1 Start_4)))
   (Start_8 Int (3 (- Start) (- Start_8 Start_7) (* Start Start) (mod Start_5 Start) (ite StartBool_2 Start_3 Start_4)))
   (Start_2 Int (2 4 y 0 (- Start_12 Start_9) (+ Start_7 Start_10)))
   (StartBool_2 Bool (false true (< Start_3 Start_3) (<= Start_1 Start_8) (>= Start_1 Start_9) (> Start_1 Start)))
   (Start_5 Int (0 2 (- Start_6) (- Start_6 Start_8) (ite StartBool_3 Start_9 Start_1)))
   (Start_17 Int (4 (+ Start_4 Start_1) (mod Start_1 Start_8) (abs Start)))
   (Start_9 Int (4 5 1 2 3 (mod Start Start_5)))
   (Start_6 Int (y x (* Start Start_4) (div Start_8 Start_1)))
   (StartBool_3 Bool (true false (or StartBool_4 StartBool) (< Start_5 Start_8) (<= Start Start_4) (= Start_9 Start_7) (>= Start_6 Start_6) (> Start_10 Start_2)))
   (Start_10 Int (0 (- Start_10) (mod Start Start_10) (abs Start_7)))
   (StartBool_4 Bool (true (or StartBool_1 StartBool_4) (<= Start_2 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 2 (* 3 x))))

(check-synth)
