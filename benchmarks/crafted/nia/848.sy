(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_20 Int) (StartBool_7 Bool) (Start_10 Int) (StartBool_4 Bool) (Start_12 Int) (Start_16 Int) (Start_1 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_9 Int) (Start_13 Int) (Start_15 Int) (Start_3 Int) (StartBool_8 Bool) (Start_5 Int) (Start_11 Int) (Start_6 Int) (Start_8 Int) (StartBool_5 Bool) (Start_14 Int) (StartBool_6 Bool) (Start_4 Int) (Start_18 Int) (Start_17 Int) (Start_19 Int) (Start_7 Int) (Start_2 Int))
  ((Start Int (3 1 (- Start_1) (+ Start_2 Start_2) (* Start_3 Start_3) (div Start_4 Start_4) (mod Start Start_5) (abs Start_6)))
   (StartBool Bool (true (not StartBool_7) (and StartBool_8 StartBool_1) (< Start_17 Start) (= Start_3 Start_20) (>= Start_13 Start_5) (> Start_13 Start)))
   (StartBool_2 Bool (true (not StartBool_4) (and StartBool_3 StartBool_2) (<= Start_1 Start_1) (= Start_10 Start_2) (>= Start_10 Start) (> Start_12 Start)))
   (Start_20 Int (y 5 (mod Start_12 Start_7) (abs Start_1)))
   (StartBool_7 Bool (true false (not StartBool_8) (<= Start_2 Start_14) (>= Start_1 Start_17)))
   (Start_10 Int (5 (- Start_9) (+ Start_11 Start_7) (* Start_2 Start_6)))
   (StartBool_4 Bool (false (<= Start_7 Start_9) (>= Start_7 Start_8) (> Start_6 Start_4)))
   (Start_12 Int (4 (- Start_6 Start_13) (+ Start_2 Start_4) (* Start_1 Start_8) (div Start_9 Start_3) (abs Start)))
   (Start_16 Int (2 0 (- Start_11) (- Start_4 Start_9) (+ Start_15 Start_12) (* Start_12 Start_11) (mod Start_2 Start_9) (abs Start_6)))
   (Start_1 Int (5 4 x 1 3 2 y 0 (mod Start_14 Start_14) (abs Start_16)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool_1) (>= Start_7 Start_12) (> Start_10 Start_12)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool StartBool_3) (or StartBool_2 StartBool) (< Start_10 Start_8) (> Start_9 Start_10)))
   (Start_9 Int (0 (- Start_5) (- Start_6 Start_3) (+ Start_9 Start_3) (* Start_8 Start_4) (div Start Start) (mod Start_9 Start_7) (abs Start_1) (ite StartBool_1 Start_3 Start_5)))
   (Start_13 Int (4 1 2 (- Start) (- Start_13 Start_12) (+ Start_4 Start_2) (div Start_9 Start_12) (abs Start_1)))
   (Start_15 Int (4 (- Start_6) (- Start Start_14) (* Start_12 Start_15) (mod Start_8 Start_3) (abs Start) (ite StartBool_5 Start_4 Start_8)))
   (Start_3 Int (5 (- Start_4) (- Start_17 Start_8) (div Start_15 Start_13) (abs Start_19) (ite StartBool Start_9 Start_13)))
   (StartBool_8 Bool (false (not StartBool_7) (and StartBool_7 StartBool_5) (or StartBool_2 StartBool_8) (= Start_3 Start_18)))
   (Start_5 Int (5 (- Start_8 Start_2) (+ Start_7 Start_8) (* Start Start) (div Start_9 Start_3) (abs Start_8)))
   (Start_11 Int (y 4 x (- Start_2 Start) (mod Start_5 Start_4) (abs Start_3) (ite StartBool Start_1 Start_6)))
   (Start_6 Int (4 (- Start_2) (- Start_1 Start) (+ Start_5 Start_2) (* Start_6 Start_1) (div Start_5 Start_1) (mod Start_7 Start_1)))
   (Start_8 Int (x (- Start_10 Start_14) (+ Start_9 Start_13) (mod Start_12 Start_4) (abs Start_15) (ite StartBool_3 Start_4 Start_14)))
   (StartBool_5 Bool (false true (not StartBool_1) (and StartBool_5 StartBool_5) (< Start_3 Start_1) (<= Start Start_3)))
   (Start_14 Int (3 0 (- Start_3) (+ Start_9 Start_6) (* Start_14 Start_4) (div Start_1 Start_9) (mod Start_5 Start_12) (ite StartBool_3 Start_2 Start_3)))
   (StartBool_6 Bool (false true (and StartBool StartBool_3) (<= Start_12 Start_6) (= Start_17 Start) (>= Start_6 Start_2) (> Start_11 Start_4)))
   (Start_4 Int (4 3 (- Start_15 Start_1) (+ Start_9 Start_3) (* Start_14 Start_11) (mod Start_5 Start_4) (ite StartBool_6 Start_5 Start_16)))
   (Start_18 Int (4 0 (- Start_8) (- Start_10 Start_18) (+ Start_10 Start_5) (* Start_15 Start_12) (div Start_6 Start_8) (mod Start_12 Start_13) (abs Start_18) (ite StartBool_4 Start_9 Start_9)))
   (Start_17 Int (y 3 x 5 (- Start_10) (* Start_12 Start_14) (div Start_8 Start_6) (abs Start_18)))
   (Start_19 Int (y (- Start_14) (- Start_12 Start_14) (* Start_1 Start) (div Start_4 Start_3) (ite StartBool_6 Start Start_10)))
   (Start_7 Int (4 0 5 (- Start_1) (- Start Start_4) (abs Start)))
   (Start_2 Int (5 (- Start_10) (- Start Start_11) (ite StartBool_2 Start_4 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div y 5) x)))

(check-synth)
