(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_1 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_4 Int) (Start_5 Int) (StartBool_3 Bool) (Start_9 Int) (Start_6 Int) (Start_8 Int) (Start_2 Int) (Start_7 Int) (Start_11 Int) (Start_3 Int) (Start_10 Int))
  ((Start Int (0 (- Start) (- Start_1 Start_1) (* Start Start_1) (div Start_2 Start_1) (mod Start Start_2) (ite StartBool Start Start_3)))
   (StartBool Bool (false true (not StartBool) (and StartBool_2 StartBool_1) (< Start_4 Start_4) (<= Start_5 Start_7) (= Start_10 Start_5) (>= Start_4 Start_1)))
   (Start_12 Int (0 2 (- Start_8) (- Start_12 Start_2) (mod Start Start_1)))
   (Start_1 Int (4 (- Start_10) (- Start_4 Start_10) (+ Start Start_11) (* Start_1 Start_7) (div Start_5 Start_7) (mod Start_6 Start_12)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool) (or StartBool StartBool_2) (<= Start Start_1)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool) (or StartBool_2 StartBool_2) (< Start_1 Start) (<= Start Start_3) (>= Start_1 Start_4) (> Start Start_4)))
   (Start_4 Int (1 4 (* Start_2 Start_3) (mod Start_3 Start_4) (ite StartBool_1 Start_1 Start_5)))
   (Start_5 Int (2 y (+ Start_1 Start_2) (div Start_3 Start_6) (mod Start_3 Start_1) (abs Start_2) (ite StartBool_2 Start_5 Start_5)))
   (StartBool_3 Bool (true (or StartBool StartBool) (= Start_9 Start_5) (>= Start_1 Start_8)))
   (Start_9 Int (2 5 (* Start Start_9) (mod Start_3 Start_4)))
   (Start_6 Int (4 (- Start) (- Start_4 Start_6) (+ Start_1 Start_5) (div Start_2 Start_6)))
   (Start_8 Int (1 0 5 x 4 y (- Start_5 Start_6) (+ Start_6 Start_3) (* Start_9 Start_9) (div Start_3 Start) (abs Start_3)))
   (Start_2 Int (1 y (- Start_2) (- Start_7 Start_2) (mod Start_5 Start_6) (abs Start_8) (ite StartBool_3 Start_6 Start)))
   (Start_7 Int (x 4 (+ Start Start_3) (* Start_3 Start_1) (mod Start_1 Start_6) (ite StartBool_2 Start_10 Start)))
   (Start_11 Int (5 0 (+ Start Start_2) (div Start_9 Start) (abs Start_9) (ite StartBool_1 Start_11 Start_8)))
   (Start_3 Int (0 (- Start) (div Start_3 Start_2) (ite StartBool_1 Start Start)))
   (Start_10 Int (5 2 (* Start_8 Start_1) (mod Start_10 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 0 (mod x 4))))

(check-synth)
