(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_13 Int) (Start_12 Int) (Start_3 Int) (StartBool_6 Bool) (StartBool_4 Bool) (StartBool_2 Bool) (Start_5 Int) (Start_6 Int) (StartBool_1 Bool) (Start_10 Int) (Start_11 Int) (Start_7 Int) (Start_9 Int) (Start_2 Int) (Start_8 Int) (StartBool_3 Bool) (Start_4 Int) (StartBool_5 Bool))
  ((Start Int (2 1 (- Start) (+ Start_1 Start_2) (* Start_1 Start_1) (div Start_3 Start) (ite StartBool_1 Start_3 Start_4)))
   (StartBool Bool (false true (not StartBool) (and StartBool_2 StartBool_6) (<= Start_10 Start_12) (= Start Start_2) (> Start_10 Start_8)))
   (Start_1 Int (1 (- Start_3) (- Start_11 Start_3)))
   (Start_13 Int (5 (+ Start_7 Start_1) (* Start Start_7)))
   (Start_12 Int (5 (- Start_2 Start_11) (+ Start_1 Start_8) (div Start_13 Start_2)))
   (Start_3 Int (1 (- Start_12 Start_10) (+ Start_10 Start_10) (abs Start_5) (ite StartBool_4 Start_4 Start_11)))
   (StartBool_6 Bool (false (not StartBool_4) (< Start_13 Start_5) (= Start_3 Start_5)))
   (StartBool_4 Bool (true false (< Start_8 Start_5) (> Start_10 Start_7)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool StartBool_4) (or StartBool_4 StartBool_5) (< Start_3 Start_9) (<= Start_3 Start_6) (= Start Start_6) (>= Start Start_3)))
   (Start_5 Int (2 3 (- Start_5) (+ Start_5 Start_6) (mod Start_3 Start_4) (ite StartBool_1 Start_5 Start_6)))
   (Start_6 Int (0 (- Start Start_7) (ite StartBool_1 Start_3 Start_4)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_1) (or StartBool StartBool_3) (< Start_1 Start_1) (<= Start_5 Start_1) (= Start_8 Start_1)))
   (Start_10 Int (0 x (- Start_11) (- Start_10 Start_5) (* Start_2 Start_8) (div Start_6 Start_7) (abs Start_10) (ite StartBool_5 Start_7 Start)))
   (Start_11 Int (0 5 (+ Start_9 Start_3) (div Start_3 Start_8) (mod Start_3 Start_1) (abs Start_10)))
   (Start_7 Int (4 x y 1 (- Start_1) (abs Start_8)))
   (Start_9 Int (0 x (- Start_2) (+ Start_5 Start) (* Start_5 Start_1) (div Start_2 Start_10) (mod Start_3 Start_8) (abs Start_2)))
   (Start_2 Int (0 1 5 y (- Start_4 Start_13) (* Start_1 Start_1) (div Start_2 Start_11)))
   (Start_8 Int (4 0 x 2 (ite StartBool_1 Start_6 Start_3)))
   (StartBool_3 Bool (true false (and StartBool StartBool_1) (or StartBool_1 StartBool_3) (<= Start_3 Start_1) (>= Start_2 Start)))
   (Start_4 Int (2 (- Start_4) (- Start_4 Start_5) (* Start_2 Start_3)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool_2) (> Start_8 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 5 (+ 1 5))))

(check-synth)
