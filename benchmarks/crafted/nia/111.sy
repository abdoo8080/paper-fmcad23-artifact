(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (StartBool_6 Bool) (Start_1 Int) (Start_7 Int) (Start_16 Int) (Start_13 Int) (Start_15 Int) (Start_12 Int) (Start_20 Int) (Start_19 Int) (StartBool_3 Bool) (Start_14 Int) (Start_6 Int) (StartBool_2 Bool) (Start_21 Int) (Start_11 Int) (Start_3 Int) (Start_2 Int) (Start_8 Int) (Start_4 Int) (Start_5 Int) (StartBool_4 Bool) (Start_17 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_10 Int) (Start_9 Int))
  ((Start Int (1 (- Start Start) (div Start Start) (mod Start Start_1) (abs Start_2) (ite StartBool Start_3 Start_3)))
   (StartBool Bool (false (or StartBool_4 StartBool_6) (<= Start_1 Start_4) (= Start_17 Start_6) (>= Start_10 Start_6)))
   (Start_18 Int (2 4 1 (- Start_3 Start_2) (+ Start_3 Start_21) (* Start_4 Start_17) (abs Start_10) (ite StartBool_3 Start_18 Start_3)))
   (StartBool_6 Bool (false true (and StartBool_2 StartBool_5) (< Start_11 Start_18) (> Start_19 Start_1)))
   (Start_1 Int (4 0 x (- Start_12 Start_2) (mod Start_7 Start_3) (ite StartBool Start_7 Start_12)))
   (Start_7 Int (5 (- Start_10) (- Start_13 Start_4) (+ Start_15 Start_4) (mod Start_7 Start_9)))
   (Start_16 Int (2 y 0 (+ Start_17 Start_5) (* Start_16 Start_12) (mod Start_17 Start_12) (abs Start_6) (ite StartBool_5 Start_8 Start_15)))
   (Start_13 Int (y (- Start_5) (- Start_7 Start_11) (* Start_16 Start_6) (mod Start Start_1) (abs Start_2)))
   (Start_15 Int (x 1 y (- Start_2 Start_9) (* Start_6 Start_1) (div Start_9 Start_2)))
   (Start_12 Int (4 5 (- Start_6 Start_13) (+ Start_5 Start_14) (* Start_14 Start_11) (mod Start Start_2) (abs Start_2)))
   (Start_20 Int (y (- Start) (- Start_5 Start_4) (* Start_2 Start) (div Start_20 Start_10) (mod Start_6 Start_6) (ite StartBool_1 Start_6 Start_15)))
   (Start_19 Int (x 0 4 1 3 5 y (- Start_18) (- Start_16 Start_13) (+ Start_6 Start_14) (* Start_18 Start_14) (div Start_13 Start_20) (ite StartBool_2 Start_18 Start)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_2 StartBool_1) (< Start_10 Start_9) (<= Start_11 Start_10) (= Start_11 Start_8) (>= Start_7 Start_12)))
   (Start_14 Int (1 (- Start_10) (- Start Start_8) (+ Start_4 Start_10) (* Start_15 Start_7) (div Start_13 Start_1) (mod Start_2 Start) (abs Start_14)))
   (Start_6 Int (0 (mod Start_2 Start_7) (ite StartBool_1 Start_7 Start_3)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_3 StartBool_1) (or StartBool_4 StartBool_5) (<= Start_4 Start_6) (>= Start_3 Start_2)))
   (Start_21 Int (1 x (- Start_6) (+ Start_21 Start_20) (* Start_19 Start_20) (ite StartBool_2 Start_17 Start_7)))
   (Start_11 Int (y (- Start_10) (- Start_8 Start_2) (mod Start_10 Start_5)))
   (Start_3 Int (1 (- Start_3 Start_3) (div Start_2 Start_3) (abs Start_1) (ite StartBool Start_2 Start_3)))
   (Start_2 Int (5 4 (- Start) (* Start_4 Start_2) (div Start_3 Start_1) (abs Start) (ite StartBool Start_3 Start_1)))
   (Start_8 Int (1 2 (- Start_3) (- Start Start_5) (+ Start_6 Start_7) (div Start_3 Start_6) (mod Start_5 Start_8) (ite StartBool_2 Start_5 Start_6)))
   (Start_4 Int (1 (- Start_3) (- Start Start_5) (+ Start_3 Start_5) (* Start Start_5) (div Start_1 Start_1) (mod Start_2 Start_3) (ite StartBool Start_4 Start_5)))
   (Start_5 Int (5 x 1 (- Start_4) (+ Start_2 Start_4) (* Start_3 Start_3) (mod Start_6 Start_3) (abs Start_2)))
   (StartBool_4 Bool (false (or StartBool_3 StartBool_4) (< Start_8 Start_6) (= Start_9 Start_1) (>= Start_2 Start_5)))
   (Start_17 Int (1 5 (- Start_7 Start_7) (mod Start_15 Start_6)))
   (StartBool_5 Bool (false (and StartBool_3 StartBool_5) (or StartBool_3 StartBool_4) (< Start_5 Start) (<= Start_5 Start_5) (= Start_8 Start_2) (>= Start_4 Start_4) (> Start_7 Start_9)))
   (StartBool_1 Bool (true (< Start_1 Start_4) (<= Start_8 Start_4) (= Start Start_2) (>= Start_8 Start_8)))
   (Start_10 Int (0 5 4 3 (- Start_8) (- Start_6 Start_8) (+ Start_10 Start_5) (div Start_5 Start_4) (mod Start_2 Start_8)))
   (Start_9 Int (4 5 (* Start_9 Start_3) (abs Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- x 3))))

(check-synth)
