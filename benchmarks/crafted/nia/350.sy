(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_3 Int) (Start_2 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_1 Int) (StartBool_3 Bool) (Start_5 Int) (Start_7 Int) (Start_4 Int) (Start_9 Int) (Start_6 Int) (Start_8 Int))
  ((Start Int (5 (+ Start_1 Start) (div Start_1 Start) (mod Start_2 Start_1) (abs Start_2)))
   (StartBool Bool (false (and StartBool_1 StartBool) (or StartBool StartBool_3) (> Start_5 Start_8)))
   (Start_10 Int (4 (* Start_9 Start_9) (div Start_6 Start_2) (mod Start_3 Start_8)))
   (Start_3 Int (1 (- Start_3 Start_4) (+ Start_2 Start_3) (* Start_5 Start_4) (mod Start_4 Start_5) (ite StartBool_1 Start_2 Start_5)))
   (Start_2 Int (2 4 5 (- Start Start_1) (* Start_1 Start_2) (div Start_3 Start) (ite StartBool Start Start)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool_2) (<= Start_2 Start_1) (= Start_4 Start_3) (>= Start_5 Start_3) (> Start_3 Start_1)))
   (StartBool_2 Bool (false true (or StartBool_2 StartBool_2) (< Start_5 Start_5) (> Start_4 Start_4)))
   (Start_1 Int (y 0 (- Start_2) (- Start_4 Start_3) (+ Start Start_2) (* Start_5 Start_5) (div Start Start_6) (mod Start_5 Start_4) (abs Start_6)))
   (StartBool_3 Bool (true false (= Start_3 Start_1) (> Start_9 Start_4)))
   (Start_5 Int (5 (- Start_1) (* Start_5 Start_2) (div Start_4 Start_4)))
   (Start_7 Int (y (- Start_2 Start_8) (+ Start Start_3) (* Start_3 Start) (abs Start_3) (ite StartBool_1 Start Start_4)))
   (Start_4 Int (5 (- Start_2) (+ Start_2 Start_2) (* Start_1 Start_3) (ite StartBool_2 Start_3 Start_2)))
   (Start_9 Int (3 (- Start_8 Start_2) (+ Start_3 Start_7) (* Start_9 Start_8) (mod Start_10 Start)))
   (Start_6 Int (0 1 y (- Start_6) (div Start_6 Start_2) (abs Start_7)))
   (Start_8 Int (3 (- Start_8 Start_2) (+ Start_2 Start_5) (* Start_7 Start_1) (div Start_7 Start_6) (mod Start_1 Start_2) (abs Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 (- 3 x))))

(check-synth)
