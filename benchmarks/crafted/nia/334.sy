(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (Start_8 Int) (Start_4 Int) (Start_6 Int) (Start_7 Int) (StartBool_1 Bool) (Start_9 Int) (Start_5 Int) (Start_10 Int) (Start_2 Int) (Start_11 Int) (Start_12 Int) (Start_1 Int))
  ((Start Int (3 2 (- Start_1 Start) (+ Start_2 Start_3) (* Start_4 Start_2) (div Start_4 Start_3) (abs Start_4) (ite StartBool Start_4 Start_4)))
   (StartBool Bool (false true (< Start Start_1) (= Start Start_4) (> Start Start_12)))
   (Start_3 Int (y (* Start_6 Start_1) (mod Start_8 Start_5) (abs Start_7) (ite StartBool_1 Start Start_2)))
   (Start_8 Int (5 x (- Start_2) (* Start_2 Start_9) (ite StartBool_1 Start Start_6)))
   (Start_4 Int (x 5 y (- Start_3 Start_5) (div Start_1 Start_4) (mod Start Start_6) (abs Start_1)))
   (Start_6 Int (5 (- Start_3) (+ Start_5 Start_6) (div Start_6 Start_5) (mod Start_2 Start_2) (abs Start_6)))
   (Start_7 Int (0 (- Start_3 Start_2) (mod Start_2 Start_6)))
   (StartBool_1 Bool (true false (or StartBool_1 StartBool_1) (< Start_2 Start_3) (<= Start_7 Start_6) (>= Start_3 Start_6) (> Start Start_2)))
   (Start_9 Int (x y (- Start_4 Start_5) (* Start_6 Start_10) (mod Start_4 Start_3) (ite StartBool_1 Start Start_3)))
   (Start_5 Int (0 (- Start_2 Start_7) (* Start_7 Start_5) (div Start Start_6) (mod Start Start_1) (ite StartBool Start_1 Start_2)))
   (Start_10 Int (3 x 0 1 y (- Start_11) (+ Start Start_2)))
   (Start_2 Int (y 4 5 (- Start_6) (- Start_3 Start_5) (* Start_7 Start_3) (div Start_4 Start_2) (mod Start_1 Start_7)))
   (Start_11 Int (1 (+ Start_8 Start_2)))
   (Start_12 Int (y 3 (- Start_6) (- Start_8 Start_5) (div Start_4 Start_7)))
   (Start_1 Int (x 1 (+ Start_2 Start_5) (* Start_2 Start_7) (div Start_12 Start_12) (mod Start_12 Start_6) (abs Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ x (mod 5 y))))

(check-synth)
