(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_2 Int) (Start_3 Int) (Start_7 Int) (Start_8 Int) (StartBool_1 Bool) (Start_6 Int) (Start_5 Int) (Start_10 Int) (Start_1 Int) (Start_4 Int) (StartBool_2 Bool) (Start_9 Int))
  ((Start Int (4 (- Start_1) (* Start_1 Start) (abs Start_1)))
   (StartBool Bool (true false (not StartBool_3) (< Start_3 Start_9) (<= Start_3 Start_4) (= Start_3 Start_9) (>= Start_3 Start_2)))
   (StartBool_3 Bool (true false (and StartBool_1 StartBool_2) (<= Start_6 Start_4) (= Start_3 Start_6) (>= Start_10 Start_9) (> Start_7 Start_5)))
   (Start_2 Int (0 (- Start) (* Start Start_2) (mod Start_3 Start_1) (abs Start)))
   (Start_3 Int (4 (- Start_1) (- Start_1 Start_2) (* Start_1 Start_4) (div Start_3 Start) (mod Start_4 Start) (abs Start_4) (ite StartBool_1 Start_3 Start_3)))
   (Start_7 Int (4 5 2 (+ Start_8 Start_8) (mod Start_5 Start_9) (abs Start_3) (ite StartBool_2 Start_4 Start_6)))
   (Start_8 Int (y (- Start_10) (mod Start_2 Start_3) (ite StartBool_1 Start_2 Start_10)))
   (StartBool_1 Bool (true (or StartBool StartBool) (< Start_4 Start_2) (= Start Start_5) (>= Start_5 Start_6)))
   (Start_6 Int (5 0 (+ Start_1 Start_2) (div Start_1 Start_4) (ite StartBool_1 Start Start_6)))
   (Start_5 Int (2 (* Start_3 Start_2) (mod Start_3 Start_4) (abs Start_5)))
   (Start_10 Int (4 2 x 3 5 1 y 0 (- Start_1) (- Start Start_3) (* Start_1 Start_8) (div Start_7 Start_7) (mod Start_9 Start_6)))
   (Start_1 Int (1 0 (- Start_2 Start_2) (* Start Start_2) (div Start Start)))
   (Start_4 Int (1 2 (- Start_2) (* Start_6 Start_7) (div Start_6 Start_6) (mod Start_3 Start_1) (abs Start_3) (ite StartBool_1 Start Start_4)))
   (StartBool_2 Bool (true (not StartBool_2) (< Start_8 Start_5) (<= Start Start_3) (> Start_8 Start)))
   (Start_9 Int (4 (- Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* (mod (+ y x) 5) 2) 1)))

(check-synth)
