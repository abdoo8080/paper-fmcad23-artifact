(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_2 Int) (Start_3 Int) (StartBool_1 Bool) (Start_5 Int) (Start_6 Int) (Start_7 Int) (Start_10 Int) (Start_8 Int) (Start_1 Int) (Start_9 Int) (Start_4 Int) (Start_12 Int))
  ((Start Int (0 4 1 5 3 (- Start_1) (+ Start Start) (* Start_2 Start) (div Start_1 Start) (mod Start Start_2) (abs Start_3)))
   (StartBool Bool (true (not StartBool) (and StartBool StartBool_1) (< Start_10 Start_8) (>= Start_3 Start_5) (> Start_4 Start_4)))
   (Start_11 Int (1 (* Start_9 Start_8) (mod Start_7 Start_2) (abs Start_6)))
   (Start_2 Int (5 1 (- Start Start_3) (+ Start_4 Start_6) (div Start_2 Start_4) (abs Start_1)))
   (Start_3 Int (y (- Start_3) (- Start_1 Start_1) (+ Start_1 Start) (ite StartBool Start_3 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_1)))
   (Start_5 Int (1 3 (- Start_3 Start_2) (abs Start_1)))
   (Start_6 Int (y x (- Start_1) (- Start_7 Start_6) (mod Start_5 Start_3) (ite StartBool Start_7 Start_6)))
   (Start_7 Int (3 4 1 (- Start_4 Start_6) (+ Start_1 Start_4) (div Start_5 Start) (mod Start_4 Start_4) (ite StartBool Start_5 Start_8)))
   (Start_10 Int (0 x (- Start_6 Start_1) (+ Start_2 Start_11) (div Start_2 Start_12) (mod Start_8 Start_12)))
   (Start_8 Int (0 4 3 (- Start_3) (- Start_5 Start_5)))
   (Start_1 Int (x (- Start_8) (* Start_5 Start_6) (div Start_9 Start_9) (ite StartBool_1 Start_6 Start_3)))
   (Start_9 Int (y (- Start_10) (+ Start_8 Start) (* Start_10 Start) (abs Start_6)))
   (Start_4 Int (0 x (* Start_5 Start_3) (abs Start_5)))
   (Start_12 Int (x (- Start_11 Start_7) (* Start_6 Start_9) (abs Start_6) (ite StartBool Start_4 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 5 (mod y y)))))

(check-synth)
