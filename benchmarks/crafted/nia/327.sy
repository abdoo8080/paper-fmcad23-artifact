(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_2 Bool) (StartBool_1 Bool) (Start_1 Int) (Start_3 Int) (Start_2 Int) (Start_11 Int) (Start_5 Int) (Start_9 Int) (Start_4 Int) (Start_10 Int) (Start_6 Int) (StartBool_4 Bool) (Start_7 Int) (Start_12 Int) (Start_8 Int))
  ((Start Int (4 (- Start) (* Start Start_1) (mod Start_1 Start_1) (ite StartBool Start_1 Start_1)))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (or StartBool_1 StartBool_2) (< Start_3 Start_1) (<= Start_1 Start_4) (>= Start_1 Start_3) (> Start_6 Start_5)))
   (StartBool_3 Bool (true (and StartBool_4 StartBool_1) (or StartBool_1 StartBool_3) (>= Start Start)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (or StartBool_1 StartBool)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_3) (= Start_12 Start_12) (> Start_6 Start_8)))
   (Start_1 Int (2 0 (- Start_1 Start) (+ Start_1 Start) (* Start_1 Start_2) (div Start Start_2) (mod Start_1 Start) (abs Start_3)))
   (Start_3 Int (x 2 (- Start_2) (- Start Start_2) (abs Start_3)))
   (Start_2 Int (2 5 (- Start_3) (+ Start_4 Start_2) (div Start_5 Start_3) (abs Start_1)))
   (Start_11 Int (5 (* Start_9 Start_5) (mod Start_4 Start_10) (abs Start_11) (ite StartBool_1 Start_8 Start_6)))
   (Start_5 Int (0 2 1 x 4 (- Start_1 Start) (div Start_1 Start_2)))
   (Start_9 Int (4 2 3 0 y (- Start_11) (+ Start_12 Start_4) (* Start_2 Start_10) (mod Start_8 Start_5) (ite StartBool_2 Start_12 Start_9)))
   (Start_4 Int (y (mod Start_5 Start_3) (abs Start_2) (ite StartBool Start_3 Start)))
   (Start_10 Int (y (- Start_6 Start_9) (+ Start_9 Start_10) (* Start_2 Start_1) (mod Start_10 Start_11)))
   (Start_6 Int (y 1 (+ Start_1 Start_1) (* Start_7 Start_1) (mod Start_1 Start) (ite StartBool Start_8 Start_7)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_4) (= Start_10 Start_6) (>= Start_2 Start_4) (> Start_11 Start_2)))
   (Start_7 Int (0 (- Start) (- Start_3 Start_9) (+ Start_2 Start_2) (* Start_10 Start_9) (div Start_4 Start_8) (mod Start_4 Start_10) (abs Start) (ite StartBool_2 Start_9 Start_6)))
   (Start_12 Int (0 (- Start_5) (+ Start_7 Start_6) (* Start_1 Start_7)))
   (Start_8 Int (3 (- Start_4) (+ Start_1 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x (abs (+ 4 x)))))

(check-synth)
