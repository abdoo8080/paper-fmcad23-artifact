(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_23 Int) (StartBool_2 Bool) (Start_11 Int) (Start_12 Int) (Start_22 Int) (Start_10 Int) (Start_9 Int) (Start_7 Int) (StartBool_3 Bool) (Start_1 Int) (Start_13 Int) (Start_8 Int) (StartBool_1 Bool) (Start_6 Int) (Start_17 Int) (Start_15 Int) (Start_5 Int) (StartBool_4 Bool) (Start_3 Int) (Start_14 Int) (StartBool_5 Bool) (Start_4 Int) (Start_2 Int) (Start_19 Int) (StartBool_7 Bool) (Start_20 Int) (Start_16 Int) (Start_21 Int) (Start_18 Int) (StartBool_8 Bool))
  ((Start Int (y 5 (- Start) (- Start Start) (+ Start_1 Start) (div Start Start) (mod Start Start) (ite StartBool Start_2 Start_3)))
   (StartBool Bool (false true (not StartBool_1) (or StartBool_4 StartBool_6) (< Start Start_14) (<= Start_8 Start_2) (= Start_14 Start_15)))
   (StartBool_6 Bool (true (and StartBool StartBool_6) (or StartBool_5 StartBool_3) (= Start_10 Start_3) (> Start_19 Start_9)))
   (Start_23 Int (2 (+ Start_19 Start_20) (* Start_16 Start_10) (div Start_13 Start_8) (mod Start_7 Start_13)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_3) (or StartBool StartBool_1) (<= Start_2 Start_12) (= Start Start_3) (> Start_13 Start_5)))
   (Start_11 Int (2 4 x 3 (- Start_7 Start_9) (* Start_6 Start_5)))
   (Start_12 Int (2 4 (- Start_12) (+ Start_6 Start_3) (div Start Start_9) (mod Start_10 Start_10)))
   (Start_22 Int (5 (- Start_9 Start_20) (div Start Start_1) (mod Start Start_9)))
   (Start_10 Int (0 (- Start_2) (- Start_4 Start_3) (* Start_11 Start_8)))
   (Start_9 Int (3 0 5 1 x (- Start_9) (- Start_5 Start_10) (+ Start_3 Start_3) (abs Start) (ite StartBool_1 Start_12 Start_2)))
   (Start_7 Int (1 y 0 (- Start_7) (- Start_9 Start_7) (+ Start_6 Start_10) (* Start_9 Start_3) (div Start_5 Start_8) (mod Start_9 Start_9)))
   (StartBool_3 Bool (true false (not StartBool) (<= Start_2 Start_2)))
   (Start_1 Int (5 4 1 (* Start_10 Start_8) (mod Start_5 Start_5) (abs Start_9) (ite StartBool_4 Start_3 Start_5)))
   (Start_13 Int (2 (- Start_1 Start_1) (* Start_8 Start_7) (mod Start_11 Start_6)))
   (Start_8 Int (4 x (- Start_7) (- Start_4 Start_2) (ite StartBool_2 Start_2 Start_7)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (< Start_2 Start_7) (= Start_6 Start_8) (> Start_8 Start_1)))
   (Start_6 Int (0 5 (- Start_4) (- Start_3 Start) (+ Start_6 Start_4) (* Start_3 Start_1) (div Start_6 Start_6) (abs Start_3) (ite StartBool_1 Start_1 Start)))
   (Start_17 Int (x 3 (- Start_4) (- Start_18 Start_14) (* Start Start_8) (div Start_17 Start_13) (mod Start_1 Start_19) (abs Start_2) (ite StartBool_6 Start_20 Start_1)))
   (Start_15 Int (3 (- Start_8 Start_3) (+ Start_14 Start_11) (div Start_4 Start) (abs Start_8)))
   (Start_5 Int (x (- Start_4) (* Start_2 Start_2) (div Start_6 Start_6)))
   (StartBool_4 Bool (true (and StartBool_1 StartBool_5) (<= Start_6 Start_4) (= Start_13 Start_10) (> Start_1 Start_4)))
   (Start_3 Int (5 (- Start_4 Start_1) (+ Start_5 Start_5) (* Start_5 Start_5) (div Start Start_4)))
   (Start_14 Int (4 5 x (- Start_8) (+ Start_15 Start_3) (* Start_10 Start_1) (div Start_14 Start_1) (mod Start_2 Start_15) (ite StartBool Start_5 Start_16)))
   (StartBool_5 Bool (false (< Start_7 Start_6) (>= Start_1 Start_7) (> Start_1 Start_11)))
   (Start_4 Int (2 x (- Start_8) (+ Start_7 Start_11) (div Start_6 Start) (mod Start_13 Start_3)))
   (Start_2 Int (4 (- Start_2) (div Start_2 Start_1) (abs Start_11)))
   (Start_19 Int (4 (- Start_4) (div Start_15 Start_3) (mod Start_9 Start_21) (abs Start_1)))
   (StartBool_7 Bool (false true (not StartBool_2) (or StartBool_8 StartBool_3) (<= Start_3 Start_14) (= Start_5 Start_12) (>= Start_9 Start_2)))
   (Start_20 Int (y (- Start_20 Start_4) (* Start_11 Start_8) (div Start Start_14) (mod Start_18 Start_19) (ite StartBool_6 Start_8 Start_20)))
   (Start_16 Int (4 3 x (- Start_9) (- Start Start_8) (+ Start_10 Start_4) (mod Start_4 Start_6) (ite StartBool_5 Start Start_17)))
   (Start_21 Int (0 (- Start_19) (- Start_22 Start_12) (* Start_7 Start_5) (ite StartBool_7 Start Start_4)))
   (Start_18 Int (3 (- Start_23) (- Start_18 Start_14) (+ Start_4 Start_11)))
   (StartBool_8 Bool (false (not StartBool_7) (or StartBool_8 StartBool_7) (= Start_17 Start_11) (>= Start_7 Start_18) (> Start_1 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (div 3 y) 3)))

(check-synth)
