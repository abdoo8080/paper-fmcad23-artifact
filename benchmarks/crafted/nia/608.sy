(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_11 Int) (Start_6 Int) (Start_1 Int) (StartBool_1 Bool) (StartBool_4 Bool) (StartBool_2 Bool) (Start_3 Int) (StartBool_3 Bool) (Start_8 Int) (Start_9 Int) (Start_10 Int) (Start_4 Int) (Start_5 Int) (Start_2 Int) (Start_7 Int))
  ((Start Int (5 2 3 (+ Start Start_1) (abs Start_1)))
   (StartBool Bool (false (not StartBool_4) (< Start_8 Start_9) (= Start_12 Start_6) (> Start_2 Start_7)))
   (Start_12 Int (x (- Start) (div Start_10 Start_1)))
   (Start_11 Int (4 0 5 (- Start_2 Start_5) (* Start_11 Start_8) (abs Start)))
   (Start_6 Int (1 (- Start_7) (- Start_10 Start_7) (* Start_9 Start_2) (mod Start_1 Start_11) (ite StartBool_4 Start_2 Start_5)))
   (Start_1 Int (x (- Start Start) (+ Start_2 Start_1) (abs Start_2) (ite StartBool_1 Start_1 Start_1)))
   (StartBool_1 Bool (false (not StartBool_2) (< Start_2 Start_1) (<= Start_1 Start_2) (> Start Start_2)))
   (StartBool_4 Bool (true false (not StartBool_1) (< Start_1 Start_2) (= Start_5 Start_3) (>= Start_4 Start)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_2 StartBool_3) (<= Start_1 Start_3) (= Start Start_2) (> Start_2 Start_1)))
   (Start_3 Int (3 (- Start) (div Start_1 Start_2) (mod Start Start_4)))
   (StartBool_3 Bool (false (or StartBool_3 StartBool_4) (< Start_2 Start_5) (<= Start_1 Start_5) (>= Start_5 Start_1)))
   (Start_8 Int (1 (* Start_8 Start_9) (div Start_1 Start_4) (abs Start_6) (ite StartBool_1 Start_9 Start_3)))
   (Start_9 Int (4 3 y (- Start_3) (- Start_4 Start_5) (+ Start_4 Start_6) (mod Start_2 Start_8)))
   (Start_10 Int (2 (- Start_5 Start_5) (+ Start_5 Start_8) (abs Start_7)))
   (Start_4 Int (4 3 y 2 x (- Start Start_5) (* Start_2 Start) (div Start_4 Start_3) (mod Start_5 Start_1)))
   (Start_5 Int (3 (- Start) (div Start_2 Start) (mod Start Start_5) (abs Start_3)))
   (Start_2 Int (0 y 5 4 1 2 (- Start_6) (- Start_2 Start_7) (+ Start_3 Start_2) (* Start_7 Start_6) (div Start_7 Start_4) (abs Start_7) (ite StartBool_2 Start_7 Start_1)))
   (Start_7 Int (0 (- Start_3 Start_2) (+ Start_7 Start_8) (mod Start_1 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- 0 (* 2 y)))))

(check-synth)
