(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_13 Int) (StartBool_3 Bool) (Start_2 Int) (Start_4 Int) (Start_12 Int) (Start_1 Int) (Start_5 Int) (Start_7 Int) (Start_8 Int) (Start_6 Int) (StartBool_1 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_9 Int) (Start_10 Int) (Start_11 Int))
  ((Start Int (1 0 5 (+ Start_1 Start_1) (mod Start_1 Start_2) (abs Start_2)))
   (StartBool Bool (false true (not StartBool) (or StartBool StartBool) (< Start_5 Start) (= Start_2 Start_5) (> Start_6 Start_4)))
   (Start_14 Int (y 2 1 3 (+ Start_6 Start_7) (* Start_2 Start_3) (div Start_8 Start_9) (mod Start_7 Start_14) (ite StartBool_1 Start_1 Start_11)))
   (Start_13 Int (1 (- Start_1) (+ Start_14 Start_5) (* Start_5 Start_2) (div Start_12 Start_1)))
   (StartBool_3 Bool (false true (and StartBool StartBool_1) (<= Start_2 Start_13) (>= Start_8 Start_11) (> Start_6 Start)))
   (Start_2 Int (y (mod Start Start) (abs Start) (ite StartBool Start_1 Start_1)))
   (Start_4 Int (0 4 (- Start_1) (+ Start_1 Start_2) (* Start_3 Start_1) (div Start_2 Start) (abs Start_4)))
   (Start_12 Int (5 2 (- Start_4) (* Start_2 Start_5) (mod Start_1 Start_1)))
   (Start_1 Int (4 (- Start_1 Start) (+ Start_2 Start_2) (div Start_2 Start_3) (mod Start_3 Start) (abs Start_1)))
   (Start_5 Int (2 y 4 5 (+ Start_8 Start_4) (* Start_12 Start_13) (abs Start_1) (ite StartBool_3 Start_4 Start_6)))
   (Start_7 Int (x 1 y (+ Start_5 Start_2) (* Start_1 Start_8) (div Start Start_8)))
   (Start_8 Int (4 (- Start) (- Start_2 Start_2) (+ Start_6 Start_7) (* Start_8 Start_9) (div Start_9 Start_1) (ite StartBool_2 Start_7 Start)))
   (Start_6 Int (2 (+ Start_1 Start_4) (mod Start_1 Start_5) (ite StartBool_1 Start_4 Start_6)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool StartBool_1) (< Start_6 Start_3) (<= Start_5 Start_7)))
   (Start_3 Int (2 5 (- Start_3) (- Start_3 Start_3) (div Start_1 Start_4)))
   (StartBool_2 Bool (true (< Start Start_7) (= Start_6 Start_10) (>= Start_7 Start_1) (> Start_9 Start_10)))
   (Start_9 Int (1 5 (* Start Start_5) (mod Start_3 Start_1)))
   (Start_10 Int (x (- Start) (- Start_6 Start_8) (div Start_3 Start_11) (mod Start_5 Start_6) (abs Start_3)))
   (Start_11 Int (x 0 (+ Start_4 Start_2) (* Start_7 Start_9) (div Start_6 Start_7) (mod Start_2 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 0 x))))

(check-synth)
