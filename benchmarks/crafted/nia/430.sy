(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_11 Int) (Start_3 Int) (Start_5 Int) (Start_7 Int) (Start_12 Int) (Start_6 Int) (StartBool_6 Bool) (StartBool_1 Bool) (Start_1 Int) (StartBool_7 Bool) (Start_2 Int) (Start_10 Int) (StartBool_2 Bool) (Start_4 Int) (StartBool_5 Bool) (Start_9 Int) (Start_8 Int))
  ((Start Int (y 2 (- Start) (- Start_1 Start_2) (+ Start_2 Start) (* Start_3 Start_1) (mod Start Start_2) (ite StartBool_1 Start_2 Start_3)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_1 StartBool_3) (or StartBool_3 StartBool_3) (>= Start_11 Start_9)))
   (StartBool_4 Bool (false true (< Start_11 Start) (= Start_12 Start_3)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_4 StartBool_5) (or StartBool_6 StartBool_7) (<= Start_9 Start_9) (= Start_3 Start_10) (>= Start_12 Start_11)))
   (Start_11 Int (1 4 3 (- Start_6) (div Start_5 Start_8) (mod Start_3 Start_4) (abs Start) (ite StartBool_2 Start_9 Start_9)))
   (Start_3 Int (0 (div Start_4 Start_5) (abs Start_1)))
   (Start_5 Int (2 5 1 4 (- Start_3) (- Start_6 Start_7) (+ Start Start_1) (div Start_3 Start_4) (mod Start_5 Start_4)))
   (Start_7 Int (3 4 5 0 (- Start_7 Start_6) (div Start_4 Start_4) (abs Start_5)))
   (Start_12 Int (2 1 0 3 (+ Start_12 Start_8) (div Start_8 Start_6) (ite StartBool_6 Start_10 Start_8)))
   (Start_6 Int (5 2 0 (- Start_7) (* Start_2 Start_7) (abs Start_7) (ite StartBool Start Start_2)))
   (StartBool_6 Bool (false (not StartBool_6) (and StartBool_4 StartBool_7) (or StartBool StartBool_7) (> Start_12 Start_10)))
   (StartBool_1 Bool (false true (not StartBool_2) (>= Start Start_2) (> Start_1 Start_3)))
   (Start_1 Int (1 (- Start_4) (- Start_1 Start_10) (+ Start_7 Start_7) (* Start_5 Start_1) (mod Start_2 Start_3) (abs Start_10) (ite StartBool_2 Start_2 Start_1)))
   (StartBool_7 Bool (true (< Start_8 Start_9) (>= Start Start_4) (> Start_2 Start_9)))
   (Start_2 Int (5 4 (- Start_1) (+ Start_8 Start_6) (* Start Start_7) (div Start_1 Start_9) (mod Start_3 Start_4) (ite StartBool_1 Start_5 Start_1)))
   (Start_10 Int (1 (* Start_4 Start) (mod Start_7 Start) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_2 Bool (true (and StartBool StartBool) (= Start_2 Start)))
   (Start_4 Int (5 3 y 0 (abs Start_1) (ite StartBool_2 Start_1 Start_4)))
   (StartBool_5 Bool (false (< Start_7 Start_6) (<= Start_7 Start_5) (>= Start_5 Start_10)))
   (Start_9 Int (5 1 (- Start_1) (+ Start_1 Start_4) (* Start_9 Start_9) (div Start_8 Start_7)))
   (Start_8 Int (4 (- Start_2 Start_2) (* Start Start_9) (mod Start_6 Start_2) (abs Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 3 (- (abs x)))))

(check-synth)
