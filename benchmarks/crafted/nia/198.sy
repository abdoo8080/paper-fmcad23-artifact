(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_11 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_7 Int) (Start_4 Int) (Start_3 Int) (Start_2 Int) (Start_1 Int) (Start_6 Int) (Start_10 Int) (Start_5 Int) (StartBool_3 Bool) (Start_9 Int) (Start_8 Int))
  ((Start Int (3 (- Start_1 Start) (+ Start_2 Start_2) (ite StartBool_1 Start_1 Start_1)))
   (StartBool Bool (true false (not StartBool) (or StartBool_2 StartBool) (< Start_4 Start_2) (<= Start_3 Start) (= Start_3 Start_6)))
   (StartBool_2 Bool (false true (< Start_5 Start_4) (<= Start Start_3) (>= Start_9 Start_4) (> Start_6 Start_2)))
   (Start_11 Int (1 3 (+ Start_1 Start_4) (abs Start_4) (ite StartBool_2 Start_7 Start_8)))
   (StartBool_4 Bool (false (and StartBool_1 StartBool_3) (< Start_8 Start_5) (= Start_2 Start_4) (> Start_6 Start_2)))
   (StartBool_1 Bool (true false (not StartBool) (= Start_3 Start_4) (>= Start_3 Start_2)))
   (Start_7 Int (y (+ Start_7 Start_6) (* Start_1 Start_3) (abs Start_3)))
   (Start_4 Int (y (- Start) (- Start Start_3) (+ Start_2 Start_2) (div Start_3 Start_2) (mod Start_1 Start_2) (abs Start_2)))
   (Start_3 Int (3 4 0 2 (- Start_3) (- Start_3 Start) (+ Start_2 Start_4) (div Start_1 Start_4) (abs Start_2)))
   (Start_2 Int (0 x 1 (- Start Start_3) (+ Start_3 Start_4) (div Start_3 Start_3)))
   (Start_1 Int (0 2 4 (- Start_5) (+ Start_4 Start) (abs Start_3)))
   (Start_6 Int (0 3 y 2 (- Start_5 Start_3) (+ Start_1 Start_6) (div Start Start_2) (ite StartBool_3 Start_5 Start)))
   (Start_10 Int (2 (+ Start_10 Start) (* Start_6 Start_4) (div Start_2 Start_11)))
   (Start_5 Int (4 (- Start_4) (- Start_3 Start_2) (div Start_2 Start_1) (mod Start_3 Start_3) (abs Start_4)))
   (StartBool_3 Bool (false (not StartBool_3) (or StartBool_4 StartBool_4) (> Start_7 Start_6)))
   (Start_9 Int (x (- Start_5) (+ Start_2 Start_6) (* Start Start_5) (mod Start_4 Start_8) (abs Start_10)))
   (Start_8 Int (3 (- Start_1) (+ Start_1 Start_4) (div Start_6 Start_9) (mod Start_3 Start_5) (abs Start_5) (ite StartBool_1 Start_7 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- (mod x 5)))))

(check-synth)
