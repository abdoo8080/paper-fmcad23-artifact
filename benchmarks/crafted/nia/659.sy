(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_13 Int) (Start_1 Int) (Start_11 Int) (Start_2 Int) (Start_6 Int) (Start_3 Int) (StartBool_4 Bool) (StartBool_5 Bool) (Start_8 Int) (StartBool_3 Bool) (Start_7 Int) (StartBool_2 Bool) (Start_9 Int) (Start_4 Int) (StartBool_1 Bool) (Start_10 Int) (Start_5 Int))
  ((Start Int (2 0 y x 3 (- Start_1) (mod Start_1 Start_2)))
   (StartBool Bool (true (not StartBool_3) (or StartBool_1 StartBool_4) (< Start_13 Start_11) (= Start_7 Start_3) (> Start_11 Start)))
   (Start_12 Int (0 3 5 (+ Start_2 Start_8) (* Start Start_5) (div Start_9 Start_6) (mod Start_1 Start_8) (abs Start_12) (ite StartBool_4 Start_5 Start_5)))
   (Start_13 Int (y 0 (+ Start_10 Start_10) (ite StartBool_4 Start_3 Start_7)))
   (Start_1 Int (5 (- Start_11 Start_5) (+ Start_4 Start_3) (* Start_5 Start_8) (div Start_5 Start_6) (abs Start_10) (ite StartBool_4 Start_10 Start_12)))
   (Start_11 Int (x 0 1 y 3 5 (- Start_11) (+ Start_5 Start_11) (* Start_3 Start_7) (mod Start_10 Start_5) (abs Start_7) (ite StartBool_3 Start_1 Start_4)))
   (Start_2 Int (2 x (- Start_2) (* Start_3 Start_1) (abs Start_2)))
   (Start_6 Int (1 4 (- Start_4) (- Start_4 Start) (abs Start_1) (ite StartBool_2 Start_2 Start_3)))
   (Start_3 Int (3 x (- Start_4) (- Start Start_5) (* Start_3 Start_5) (div Start_2 Start_4) (abs Start) (ite StartBool_1 Start Start_6)))
   (StartBool_4 Bool (false (<= Start_2 Start_3) (= Start_7 Start_1) (> Start_7 Start_1)))
   (StartBool_5 Bool (true (not StartBool_2) (< Start_3 Start_7) (>= Start_3 Start_7) (> Start_11 Start)))
   (Start_8 Int (2))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_2 StartBool_2) (or StartBool_1 StartBool) (= Start_5 Start_6) (> Start_3 Start_2)))
   (Start_7 Int (1 (- Start_5) (- Start_8 Start_7) (div Start_2 Start_4) (mod Start_2 Start_3) (abs Start_6)))
   (StartBool_2 Bool (true (not StartBool_3) (<= Start_3 Start_2) (= Start_1 Start_3) (> Start_3 Start_6)))
   (Start_9 Int (4 (- Start_3) (+ Start_7 Start_7) (abs Start_2) (ite StartBool Start Start_5)))
   (Start_4 Int (0 y (- Start_5) (* Start_1 Start_6) (div Start_4 Start_5) (mod Start_4 Start_9)))
   (StartBool_1 Bool (false true (not StartBool_1) (<= Start_1 Start) (= Start Start_7) (>= Start_9 Start_2) (> Start_5 Start_9)))
   (Start_10 Int (4 (- Start_1 Start_3) (div Start_2 Start_7) (ite StartBool_5 Start_9 Start_2)))
   (Start_5 Int (3 0 2 5 (- Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 3 (+ x 1)))))

(check-synth)
