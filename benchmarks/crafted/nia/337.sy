(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_16 Int) (Start_15 Int) (Start_14 Int) (Start_10 Int) (Start_2 Int) (Start_3 Int) (Start_8 Int) (Start_7 Int) (StartBool_1 Bool) (Start_12 Int) (Start_18 Int) (Start_4 Int) (Start_5 Int) (Start_9 Int) (StartBool_2 Bool) (Start_6 Int) (Start_13 Int) (Start_1 Int) (Start_11 Int))
  ((Start Int (x 0 (* Start Start_1) (ite StartBool_1 Start Start)))
   (StartBool Bool (true (not StartBool) (and StartBool_1 StartBool_2) (or StartBool_1 StartBool) (< Start Start_13) (> Start_18 Start_4)))
   (Start_17 Int (2 (- Start_7) (- Start_10 Start_8) (mod Start_6 Start_8) (abs Start_7)))
   (Start_16 Int (2 (- Start_1 Start_13) (+ Start_14 Start_7) (abs Start_17)))
   (Start_15 Int (5 (- Start_10 Start) (mod Start_10 Start_7) (abs Start_2)))
   (Start_14 Int (5 x (- Start_15) (+ Start_14 Start_15) (div Start_11 Start_14)))
   (Start_10 Int (y x (- Start_12) (- Start_14 Start_13) (mod Start_8 Start_4) (ite StartBool_1 Start_8 Start_2)))
   (Start_2 Int (5 (- Start_3 Start_3) (+ Start_2 Start_4)))
   (Start_3 Int (0 2 x 3 4 5 (- Start_1) (+ Start Start_4) (div Start_2 Start_5) (abs Start) (ite StartBool_2 Start_1 Start_2)))
   (Start_8 Int (2 0 (- Start_13 Start_13) (+ Start_11 Start_14) (* Start_2 Start_16) (mod Start_2 Start_14) (abs Start_4) (ite StartBool_1 Start_6 Start_7)))
   (Start_7 Int (4 (abs Start_2)))
   (StartBool_1 Bool (true false (not StartBool_1) (< Start_2 Start) (> Start_1 Start_1)))
   (Start_12 Int (y (- Start_9 Start_11) (* Start_2 Start_10) (div Start_5 Start_13) (mod Start_11 Start_2)))
   (Start_18 Int (4 0 (- Start_3) (* Start_13 Start_8) (ite StartBool_1 Start_16 Start_16)))
   (Start_4 Int (5 1 x 4 (- Start_4 Start_3) (+ Start_2 Start_2) (* Start_1 Start_3) (mod Start_3 Start_1) (abs Start_3) (ite StartBool_1 Start_3 Start_2)))
   (Start_5 Int (1 0 (- Start_2) (- Start_2 Start_4) (+ Start_3 Start_2) (* Start_3 Start_6) (div Start_6 Start_6)))
   (Start_9 Int (x y 3 (+ Start Start_10) (div Start_6 Start_10) (mod Start_9 Start_8) (abs Start_11)))
   (StartBool_2 Bool (false (<= Start_5 Start_6) (>= Start_3 Start_2) (> Start_7 Start_4)))
   (Start_6 Int (x (- Start_5) (* Start_2 Start_4)))
   (Start_13 Int (4 1 (+ Start_9 Start_2) (div Start_13 Start_3) (mod Start_4 Start_5) (ite StartBool_1 Start_3 Start_7)))
   (Start_1 Int (4 (- Start_2 Start_2) (+ Start_3 Start_6) (* Start_8 Start_9) (mod Start_1 Start_2) (ite StartBool_1 Start_7 Start_1)))
   (Start_11 Int (4 (+ Start_3 Start_7) (* Start_10 Start_6) (mod Start_6 Start_12) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 2 (+ x 3))))

(check-synth)
