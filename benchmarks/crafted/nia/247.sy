(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_2 Int) (StartBool_1 Bool) (Start_1 Int) (Start_16 Int) (StartBool_3 Bool) (Start_14 Int) (Start_18 Int) (StartBool_4 Bool) (Start_11 Int) (Start_5 Int) (Start_4 Int) (Start_17 Int) (StartBool_2 Bool) (Start_7 Int) (Start_3 Int) (Start_6 Int) (Start_13 Int) (Start_8 Int) (Start_9 Int) (Start_10 Int) (StartBool_5 Bool) (Start_15 Int) (Start_12 Int))
  ((Start Int (1 (- Start Start_1) (* Start_1 Start_2) (mod Start Start_1) (ite StartBool_1 Start_3 Start_4)))
   (StartBool Bool (false (and StartBool_2 StartBool_4) (or StartBool StartBool_1) (< Start_14 Start_5) (<= Start_19 Start_8) (= Start_4 Start_8) (>= Start_14 Start_3) (> Start_2 Start_4)))
   (Start_19 Int (5 (- Start_7) (- Start_17 Start_14) (div Start_1 Start_14) (mod Start_15 Start_17)))
   (Start_2 Int (y (- Start_5) (- Start_6 Start_5) (+ Start_7 Start_5) (* Start_5 Start_8) (abs Start_18)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_3 StartBool_3) (or StartBool_1 StartBool_5) (<= Start_3 Start_13) (>= Start_18 Start_1) (> Start_14 Start_1)))
   (Start_1 Int (y (mod Start_1 Start_8) (ite StartBool_2 Start_6 Start_17)))
   (Start_16 Int (1 0 (- Start_2) (- Start_11 Start_8) (div Start_2 Start_10) (mod Start_10 Start_12) (ite StartBool_3 Start_17 Start)))
   (StartBool_3 Bool (true (not StartBool_2) (or StartBool_4 StartBool_2) (< Start Start_9) (> Start_3 Start_12)))
   (Start_14 Int (3 2 y (- Start_5 Start_1) (+ Start_15 Start_2) (div Start_12 Start_7) (mod Start_3 Start_16) (ite StartBool_3 Start_15 Start_6)))
   (Start_18 Int (x (- Start_14) (- Start_12 Start_8) (div Start_2 Start_17) (mod Start_12 Start_6)))
   (StartBool_4 Bool (true (not StartBool_4) (and StartBool_4 StartBool_3) (< Start_3 Start_4) (> Start_6 Start_9)))
   (Start_11 Int (2 4 0 1 (- Start_5) (- Start_5 Start_4) (* Start_5 Start_12)))
   (Start_5 Int (5 (- Start_9) (- Start_2 Start_7) (mod Start_3 Start_2)))
   (Start_4 Int (5 4 3 2 y (- Start_1) (- Start_5 Start_1) (+ Start_6 Start_2) (div Start_2 Start_7) (mod Start_6 Start_6) (abs Start_6)))
   (Start_17 Int (y 0 4 2 (+ Start_15 Start_17) (mod Start_16 Start_3) (ite StartBool_3 Start_12 Start_9)))
   (StartBool_2 Bool (true (>= Start_14 Start_8)))
   (Start_7 Int (0 (- Start_1 Start_3) (mod Start_5 Start) (ite StartBool_1 Start_7 Start)))
   (Start_3 Int (2 y (- Start_4) (- Start_1 Start_7) (+ Start_6 Start_2) (div Start_4 Start_11) (abs Start_4) (ite StartBool_2 Start_11 Start_4)))
   (Start_6 Int (y x 4 (- Start_4) (- Start_7 Start_8) (* Start_1 Start_1) (div Start Start_2)))
   (Start_13 Int (0 x (- Start_8 Start_1) (+ Start_12 Start_5) (* Start_11 Start_13) (div Start_2 Start_6) (abs Start_10) (ite StartBool_1 Start_5 Start_9)))
   (Start_8 Int (3 (+ Start_2 Start_6) (abs Start_4) (ite StartBool Start_8 Start_9)))
   (Start_9 Int (x (- Start_8) (mod Start_3 Start_10) (ite StartBool Start_1 Start_5)))
   (Start_10 Int (1 0 (- Start_2) (+ Start_1 Start_8) (* Start_6 Start_4) (div Start_3 Start_9) (abs Start_11) (ite StartBool_1 Start Start_10)))
   (StartBool_5 Bool (false true (> Start_4 Start_14)))
   (Start_15 Int (2 3 y (+ Start_1 Start_14) (mod Start_5 Start_11)))
   (Start_12 Int (3 2 (- Start_3 Start_8) (+ Start_7 Start_3) (abs Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div y y)))

(check-synth)
