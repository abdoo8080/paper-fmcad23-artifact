(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_5 Int) (Start_8 Int) (Start_10 Int) (Start_2 Int) (Start_1 Int) (Start_11 Int) (StartBool_1 Bool) (Start_3 Int) (StartBool_3 Bool) (Start_4 Int) (StartBool_2 Bool) (Start_7 Int) (StartBool_4 Bool) (Start_6 Int) (Start_9 Int) (Start_12 Int))
  ((Start Int (y (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (false true (and StartBool_2 StartBool_2) (< Start_4 Start_7) (<= Start_10 Start_2)))
   (Start_5 Int (2 5 1 y 0 3 (- Start_10 Start_6) (+ Start_8 Start_9) (* Start_2 Start_5) (mod Start_2 Start)))
   (Start_8 Int (0 3 (- Start) (+ Start_8 Start_3) (div Start_7 Start_12) (mod Start_5 Start_4) (abs Start_11)))
   (Start_10 Int (3 4 (- Start_5) (* Start_7 Start_2) (mod Start_5 Start_5) (abs Start_12)))
   (Start_2 Int (x 5 (- Start_2) (- Start_3 Start_3) (+ Start_5 Start_6) (* Start_3 Start_5) (div Start_3 Start_2) (mod Start_7 Start_4) (ite StartBool_2 Start_7 Start_5)))
   (Start_1 Int (0 (- Start_2) (- Start_2 Start) (div Start_2 Start) (ite StartBool_2 Start_3 Start_3)))
   (Start_11 Int (y 1 (- Start_2 Start_10) (+ Start_3 Start_1) (div Start_8 Start_12)))
   (StartBool_1 Bool (false true (or StartBool_3 StartBool_4) (<= Start_12 Start_9) (= Start_5 Start_6) (>= Start_3 Start_1)))
   (Start_3 Int (1 (- Start_1) (- Start_3 Start_4) (* Start_4 Start_4) (div Start_1 Start) (mod Start_2 Start_2)))
   (StartBool_3 Bool (true false (not StartBool_2) (or StartBool_3 StartBool_4) (< Start_5 Start_5) (= Start_3 Start_3)))
   (Start_4 Int (5 x 3 1 (- Start_4 Start_3) (+ Start_4 Start_3) (mod Start_3 Start_1)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_2 StartBool_1) (or StartBool StartBool_2) (< Start Start_2)))
   (Start_7 Int (y 4 (* Start_3 Start_7) (mod Start Start_4) (ite StartBool_2 Start_6 Start_3)))
   (StartBool_4 Bool (false true (and StartBool_3 StartBool_1) (or StartBool StartBool_4) (<= Start Start_8) (>= Start_9 Start_2) (> Start_9 Start_5)))
   (Start_6 Int (1 (* Start_5 Start_6) (mod Start_6 Start) (abs Start_3) (ite StartBool_3 Start_6 Start_5)))
   (Start_9 Int (5 1 (- Start_4 Start_9) (+ Start_5 Start_9) (* Start_9 Start_9) (div Start_4 Start_10) (mod Start_7 Start_9) (abs Start_11) (ite StartBool_2 Start_8 Start_5)))
   (Start_12 Int (4 (- Start_1) (- Start_10 Start_3) (+ Start_11 Start_5) (mod Start_4 Start_1) (abs Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- 4) (div 3 x))))

(check-synth)
