(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_15 Int) (Start_12 Int) (StartBool_6 Bool) (StartBool_5 Bool) (Start_1 Int) (StartBool_3 Bool) (Start_3 Int) (Start_6 Int) (Start_5 Int) (StartBool_1 Bool) (StartBool_4 Bool) (Start_4 Int) (Start_8 Int) (Start_9 Int) (Start_14 Int) (Start_10 Int) (Start_7 Int) (Start_11 Int) (Start_2 Int) (StartBool_2 Bool))
  ((Start Int (y 2 1 (- Start_1 Start) (+ Start_1 Start_1) (* Start_1 Start) (abs Start) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true (< Start_6 Start_12) (<= Start_4 Start_4) (= Start_11 Start_13) (> Start_14 Start)))
   (Start_13 Int (5 3 4 (- Start_7) (- Start_12 Start_5) (* Start_9 Start_2) (div Start_13 Start_5) (mod Start Start_6) (ite StartBool_5 Start_10 Start_13)))
   (Start_15 Int (1 4 (- Start_15) (+ Start_6 Start_15) (* Start_3 Start_4) (mod Start_4 Start_13) (ite StartBool_5 Start_9 Start_1)))
   (Start_12 Int (3 1 x y (- Start_1 Start) (+ Start_9 Start_3) (abs Start_10) (ite StartBool_4 Start_11 Start_1)))
   (StartBool_6 Bool (true (< Start_3 Start_7) (= Start_1 Start_1) (> Start_7 Start_6)))
   (StartBool_5 Bool (true (or StartBool_6 StartBool_3) (= Start_5 Start_9)))
   (Start_1 Int (y 4 1 (- Start_11) (- Start_9 Start_12) (div Start_4 Start_4) (mod Start_9 Start_3) (abs Start_1)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_2 StartBool_5) (< Start_3 Start_9) (<= Start_1 Start_7) (>= Start_4 Start_10) (> Start_2 Start_6)))
   (Start_3 Int (5 x 4 2 (- Start_1) (- Start_8 Start_1) (+ Start_9 Start_2) (* Start_5 Start_11) (mod Start_8 Start_5) (ite StartBool_2 Start_1 Start_2)))
   (Start_6 Int (0 2 (- Start_5 Start) (mod Start_5 Start_7) (ite StartBool_1 Start_8 Start_9)))
   (Start_5 Int (x (- Start Start_5) (* Start_3 Start_5) (div Start_1 Start_4)))
   (StartBool_1 Bool (true (and StartBool_3 StartBool_2) (< Start_6 Start)))
   (StartBool_4 Bool (false (and StartBool StartBool_4) (<= Start_4 Start_2) (= Start_11 Start_10) (>= Start_9 Start_2)))
   (Start_4 Int (0 3 x (- Start_2) (- Start_4 Start_6) (+ Start_6 Start_5) (* Start_2 Start) (div Start_2 Start_2)))
   (Start_8 Int (0 x y 4 3 2 (- Start_2) (- Start_10 Start) (+ Start_1 Start_6) (div Start Start_1) (mod Start_3 Start_3) (abs Start_1)))
   (Start_9 Int (y 0 (- Start_2) (div Start_5 Start_8) (mod Start_9 Start_6) (abs Start_10)))
   (Start_14 Int (3 (div Start_5 Start_12) (mod Start_6 Start_8) (ite StartBool_4 Start_12 Start_15)))
   (Start_10 Int (5 (- Start_10) (- Start_2 Start_9) (* Start_2 Start) (div Start_3 Start_10)))
   (Start_7 Int (5 y 4 (- Start_10) (- Start_6 Start_3) (* Start_11 Start_3) (mod Start_8 Start_4) (abs Start_4)))
   (Start_11 Int (4 (- Start_7 Start_8) (mod Start_7 Start_4) (abs Start_1)))
   (Start_2 Int (5 2 y (- Start_1) (div Start_3 Start_3) (abs Start_4) (ite StartBool_1 Start_5 Start_2)))
   (StartBool_2 Bool (true false (< Start_6 Start_1) (<= Start_1 Start_7) (>= Start_6 Start_11) (> Start_5 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (+ 4 x))))

(check-synth)
