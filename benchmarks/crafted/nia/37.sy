(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_13 Int) (Start_4 Int) (Start_5 Int) (Start_12 Int) (Start_2 Int) (Start_11 Int) (StartBool_4 Bool) (StartBool_5 Bool) (Start_3 Int) (Start_6 Int) (StartBool_1 Bool) (Start_1 Int) (Start_7 Int) (Start_8 Int) (Start_9 Int) (Start_10 Int) (StartBool_3 Bool) (StartBool_2 Bool))
  ((Start Int (4 3 (+ Start Start_1) (* Start_2 Start_2) (mod Start Start)))
   (StartBool Bool (false true (or StartBool_4 StartBool_3) (< Start_9 Start_13) (>= Start_1 Start_13) (> Start_10 Start_5)))
   (Start_14 Int (y 3 2 (- Start_7) (div Start_11 Start_7) (mod Start_12 Start_14) (ite StartBool_5 Start_4 Start_9)))
   (Start_13 Int (y 3 (* Start_1 Start_10) (div Start_14 Start_14) (abs Start_8)))
   (Start_4 Int (5 (- Start_2) (+ Start_5 Start_13) (div Start_1 Start) (ite StartBool Start Start_12)))
   (Start_5 Int (x 2 (- Start_8) (+ Start_10 Start_6) (div Start_1 Start_2)))
   (Start_12 Int (1 3 (- Start_6) (- Start_12 Start) (+ Start_3 Start_10) (* Start_11 Start_3)))
   (Start_2 Int (1 0 (- Start_1) (- Start_2 Start_1) (* Start_1 Start_3) (abs Start_1)))
   (Start_11 Int (2 y 4 (- Start_12) (- Start_12 Start_11) (* Start_9 Start_2) (div Start_6 Start) (mod Start_4 Start_3)))
   (StartBool_4 Bool (false (and StartBool_1 StartBool_5) (< Start_3 Start_3) (= Start_2 Start) (> Start Start_7)))
   (StartBool_5 Bool (false true (not StartBool_4) (or StartBool_3 StartBool_2) (< Start_4 Start_8) (= Start_7 Start_9) (>= Start_3 Start_8) (> Start_1 Start_9)))
   (Start_3 Int (2 0 3 5 4 (- Start_3 Start) (+ Start Start_4) (* Start_5 Start_5) (mod Start_6 Start_5)))
   (Start_6 Int (y 4 0 (ite StartBool_1 Start_5 Start_5)))
   (StartBool_1 Bool (true (not StartBool_2) (or StartBool_3 StartBool_4) (<= Start_1 Start_7)))
   (Start_1 Int (1 (- Start_11 Start_1) (+ Start_4 Start_5) (div Start_13 Start_13) (abs Start_2)))
   (Start_7 Int (2 (- Start_2 Start_3) (* Start_4 Start_7)))
   (Start_8 Int (5 (- Start_3 Start_4) (* Start_9 Start) (abs Start_6)))
   (Start_9 Int (0 2 (- Start_8) (ite StartBool_1 Start Start_4)))
   (Start_10 Int (3 0 y 2 5 (- Start_2) (+ Start_8 Start_10) (div Start_7 Start_1) (mod Start_6 Start_6) (ite StartBool_3 Start_1 Start_9)))
   (StartBool_3 Bool (false true (and StartBool_5 StartBool_3) (or StartBool_3 StartBool_1) (= Start_4 Start_10) (>= Start_7 Start_1)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_1) (< Start Start_11) (>= Start_7 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod y y)))

(check-synth)
