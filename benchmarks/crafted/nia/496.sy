(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_19 Int) (Start_4 Int) (Start_6 Int) (Start_9 Int) (Start_18 Int) (Start_3 Int) (Start_17 Int) (Start_5 Int) (Start_16 Int) (Start_1 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_8 Int) (Start_7 Int) (Start_13 Int) (Start_14 Int) (Start_12 Int) (Start_11 Int) (Start_10 Int) (Start_15 Int))
  ((Start Int (y (div Start Start_1) (mod Start_2 Start_3)))
   (StartBool Bool (false true (< Start_9 Start_9) (<= Start_16 Start) (>= Start_2 Start_4) (> Start_7 Start_7)))
   (Start_2 Int (1 0 4 3 x 5 (* Start_14 Start_11) (ite StartBool_1 Start_4 Start_8)))
   (Start_19 Int (x 2 5 (div Start Start_16) (abs Start_8)))
   (Start_4 Int (0 3 (- Start_12 Start_6) (+ Start_11 Start_17) (abs Start_14)))
   (Start_6 Int (4 (mod Start_13 Start_12) (abs Start_11) (ite StartBool_2 Start_5 Start_6)))
   (Start_9 Int (5 (- Start_18 Start_1) (* Start_11 Start_15) (mod Start_7 Start_2) (abs Start_6)))
   (Start_18 Int (3 5 (- Start_5) (div Start_18 Start_1)))
   (Start_3 Int (3 2 (- Start_2) (- Start_4 Start_4) (* Start_1 Start_4) (mod Start_2 Start_5) (abs Start_3)))
   (Start_17 Int (x (+ Start_14 Start_1) (div Start_10 Start_14) (mod Start_7 Start_9)))
   (Start_5 Int (1 y (- Start) (+ Start_6 Start_7) (abs Start)))
   (Start_16 Int (3 5 (- Start_4 Start_1) (ite StartBool_2 Start_4 Start_3)))
   (Start_1 Int (4 (- Start_19) (- Start_7 Start_8) (mod Start_16 Start_10) (abs Start_13)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool StartBool_2) (< Start_7 Start_4) (>= Start_7 Start_8)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool_1) (or StartBool_1 StartBool) (<= Start_11 Start_6) (= Start Start_6) (> Start Start_12)))
   (Start_8 Int (1 (- Start_9 Start_9) (+ Start_8 Start_1) (* Start_10 Start_9) (div Start_6 Start) (mod Start_7 Start_7) (abs Start_5) (ite StartBool_1 Start_4 Start_8)))
   (Start_7 Int (2 (- Start_4) (div Start_2 Start_4) (mod Start_7 Start_6) (abs Start) (ite StartBool Start Start_8)))
   (Start_13 Int (0 (* Start_17 Start_12) (div Start_7 Start_10) (mod Start_7 Start_12)))
   (Start_14 Int (0 (+ Start_3 Start_9) (div Start_10 Start_7) (mod Start_1 Start_13)))
   (Start_12 Int (4 0 x (- Start_1) (+ Start_7 Start_12) (* Start Start_6) (div Start_2 Start_10) (mod Start_9 Start_7) (abs Start_5) (ite StartBool Start_9 Start_12)))
   (Start_11 Int (2 (- Start Start_13) (+ Start Start_10) (div Start_1 Start_14) (mod Start_15 Start_10)))
   (Start_10 Int (4 y 1 x (- Start_18 Start_11) (* Start_12 Start_12) (div Start_18 Start_7)))
   (Start_15 Int (y (- Start) (- Start_9 Start) (+ Start_16 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x (- x))))

(check-synth)
