(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_2 Int) (StartBool_1 Bool) (Start_4 Int) (Start_10 Int) (StartBool_2 Bool) (Start_6 Int) (Start_1 Int) (Start_5 Int) (Start_8 Int) (Start_9 Int) (Start_11 Int) (Start_3 Int) (Start_7 Int))
  ((Start Int (y (- Start Start_1) (mod Start Start_1) (abs Start) (ite StartBool Start Start)))
   (StartBool Bool (false (not StartBool) (or StartBool_3 StartBool_3) (= Start_11 Start_4)))
   (StartBool_3 Bool (true (and StartBool StartBool_1) (or StartBool_2 StartBool_3) (<= Start_6 Start_11) (= Start_1 Start_5)))
   (Start_2 Int (3 (* Start_9 Start_5) (mod Start_8 Start) (ite StartBool_1 Start_5 Start_2)))
   (StartBool_1 Bool (false true (not StartBool_1) (< Start_2 Start_1) (<= Start_4 Start_8) (>= Start_2 Start_6) (> Start_3 Start_4)))
   (Start_4 Int (4 (- Start_1 Start_3) (* Start_2 Start)))
   (Start_10 Int (1 0 4 (mod Start_6 Start_1) (abs Start_9) (ite StartBool_2 Start_6 Start_6)))
   (StartBool_2 Bool (false (not StartBool_1) (or StartBool StartBool) (< Start Start_8) (= Start Start_8) (>= Start_7 Start_8) (> Start_9 Start_7)))
   (Start_6 Int (4 x (- Start_2) (abs Start_1) (ite StartBool Start_2 Start_4)))
   (Start_1 Int (2 (- Start) (- Start_1 Start_2) (div Start_3 Start_4) (mod Start Start_2) (abs Start_3)))
   (Start_5 Int (5 1 (- Start_2) (+ Start_4 Start_7) (div Start_5 Start_1) (mod Start_3 Start_5) (abs Start_5) (ite StartBool_1 Start_5 Start_4)))
   (Start_8 Int (5 (- Start_1 Start_3) (+ Start_5 Start_1) (div Start_9 Start_10) (mod Start_3 Start_3) (abs Start_6)))
   (Start_9 Int (2 x 5 4 (- Start_10) (+ Start_9 Start_3) (* Start_11 Start) (mod Start_7 Start_5)))
   (Start_11 Int (0 (- Start_11 Start_10) (div Start_5 Start_8) (mod Start_1 Start_2) (ite StartBool_1 Start_6 Start_3)))
   (Start_3 Int (1 4 (- Start_5) (div Start_6 Start)))
   (Start_7 Int (y 0 3 (- Start_8) (+ Start_9 Start_1) (* Start_2 Start_6) (div Start_7 Start_1) (mod Start_1 Start_9) (abs Start_10) (ite StartBool_1 Start_11 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs y) y)))

(check-synth)
