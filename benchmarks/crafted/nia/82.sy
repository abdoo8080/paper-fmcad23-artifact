(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (Start_1 Int) (Start_2 Int) (Start_6 Int) (StartBool_1 Bool) (Start_4 Int) (Start_5 Int) (Start_3 Int) (StartBool_3 Bool) (Start_7 Int) (StartBool_2 Bool) (Start_8 Int))
  ((Start Int (y (- Start) (* Start Start_1) (mod Start_1 Start)))
   (StartBool Bool (true (and StartBool StartBool_2) (<= Start_1 Start_7) (>= Start_1 Start)))
   (Start_9 Int (1 (- Start Start_6) (div Start_2 Start_2) (mod Start_8 Start_5) (abs Start_5)))
   (Start_1 Int (5 (div Start Start) (mod Start_1 Start_2)))
   (Start_2 Int (x (- Start_1) (+ Start Start_3) (* Start Start) (div Start_1 Start_4)))
   (Start_6 Int (3 5 1 0 4 y 2 x (- Start_5) (- Start_3 Start_5) (+ Start_7 Start) (div Start_2 Start_1) (mod Start_4 Start_1)))
   (StartBool_1 Bool (false true (and StartBool StartBool_1) (< Start Start_1) (= Start_3 Start_2) (> Start_5 Start)))
   (Start_4 Int (5 4 (+ Start_2 Start_1) (* Start_1 Start_5) (div Start_5 Start_3) (mod Start_5 Start_4)))
   (Start_5 Int (4 (mod Start Start_1) (abs Start_4) (ite StartBool Start Start_1)))
   (Start_3 Int (0 2 1 (+ Start_1 Start) (mod Start_1 Start_6) (abs Start_1)))
   (StartBool_3 Bool (false true (and StartBool StartBool_3) (or StartBool_3 StartBool_2) (>= Start_4 Start_8) (> Start_6 Start_1)))
   (Start_7 Int (y 4 (- Start_6) (+ Start Start_7) (div Start_2 Start_7) (mod Start Start_4) (ite StartBool_1 Start_2 Start_2)))
   (StartBool_2 Bool (false (not StartBool_2) (or StartBool_3 StartBool_1) (< Start_5 Start_3) (> Start_6 Start_2)))
   (Start_8 Int (3 x 5 (- Start_3 Start_3) (+ Start_2 Start_9) (mod Start_1 Start_2) (abs Start) (ite StartBool Start_6 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 4 (* x y))))

(check-synth)
