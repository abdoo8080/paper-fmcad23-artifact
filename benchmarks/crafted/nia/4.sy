(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_16 Int) (Start_12 Int) (Start_13 Int) (Start_1 Int) (Start_14 Int) (Start_11 Int) (Start_10 Int) (Start_4 Int) (Start_6 Int) (Start_5 Int) (StartBool_4 Bool) (Start_3 Int) (Start_8 Int) (StartBool_2 Bool) (Start_7 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_2 Int) (Start_9 Int))
  ((Start Int (2 (- Start) (+ Start Start) (* Start_1 Start) (div Start_1 Start) (mod Start_1 Start_2) (abs Start) (ite StartBool_1 Start_3 Start_4)))
   (StartBool Bool (true (not StartBool_2) (< Start_10 Start_15) (>= Start_15 Start_16)))
   (Start_15 Int (0 1 3 2 y (div Start_6 Start_2) (abs Start_16) (ite StartBool_2 Start_7 Start)))
   (Start_16 Int (1 y (* Start_3 Start_5) (div Start_10 Start) (mod Start_7 Start_8) (abs Start_6)))
   (Start_12 Int (x 2 1 (* Start_14 Start_5) (abs Start_14) (ite StartBool Start_7 Start_13)))
   (Start_13 Int (0 (* Start_4 Start_3) (div Start_7 Start_7) (mod Start Start_10) (abs Start_1)))
   (Start_1 Int (3 x (- Start_10 Start_5) (+ Start_2 Start) (* Start_6 Start_9) (div Start_7 Start_3) (mod Start_6 Start_7) (abs Start_11) (ite StartBool_2 Start_8 Start_3)))
   (Start_14 Int (x 4 (+ Start_6 Start_1) (ite StartBool_4 Start_9 Start_10)))
   (Start_11 Int (2 4 (- Start_4) (- Start_10 Start_12) (+ Start Start_7) (mod Start Start_13)))
   (Start_10 Int (1 (- Start_8) (- Start_7 Start_3) (* Start Start_6) (div Start Start_7) (abs Start_9)))
   (Start_4 Int (4 (- Start_3) (- Start_1 Start_5) (* Start_5 Start_6) (div Start_5 Start_2)))
   (Start_6 Int (y 4 1 0 (- Start_6) (+ Start_6 Start) (* Start_1 Start_4) (mod Start_4 Start_2) (ite StartBool Start Start_2)))
   (Start_5 Int (2 (- Start_6) (- Start_2 Start_1) (+ Start_5 Start_5) (* Start Start_3) (div Start_2 Start_2) (mod Start_4 Start_1) (ite StartBool_2 Start_1 Start_5)))
   (StartBool_4 Bool (false (or StartBool_2 StartBool) (< Start_3 Start_1) (<= Start_7 Start_4) (= Start_4 Start_6)))
   (Start_3 Int (2 (- Start_5 Start_4) (* Start_7 Start_5) (abs Start)))
   (Start_8 Int (3 (- Start_2) (- Start_1 Start_9) (mod Start_2 Start_7) (ite StartBool_3 Start_8 Start_9)))
   (StartBool_2 Bool (true false (or StartBool_1 StartBool_3) (<= Start_3 Start_1)))
   (Start_7 Int (4 3))
   (StartBool_1 Bool (true (not StartBool_4) (and StartBool_1 StartBool_3) (= Start_7 Start_7)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool_3 StartBool_2) (= Start_7 Start_5) (>= Start_3 Start_1) (> Start Start_6)))
   (Start_2 Int (4 (- Start_8) (- Start Start_7) (mod Start_4 Start_4) (ite StartBool_2 Start_5 Start_2)))
   (Start_9 Int (0 y 2 (- Start_4) (div Start_6 Start_9) (mod Start_10 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 2 y)))

(check-synth)
