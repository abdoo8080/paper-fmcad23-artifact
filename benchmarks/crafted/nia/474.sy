(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_11 Int) (Start_2 Int) (Start_9 Int) (Start_1 Int) (Start_3 Int) (Start_5 Int) (Start_4 Int) (Start_7 Int) (Start_8 Int) (StartBool_1 Bool) (Start_10 Int) (Start_6 Int))
  ((Start Int (3))
   (StartBool Bool (false (and StartBool StartBool) (or StartBool StartBool) (= Start Start_1) (>= Start_1 Start)))
   (Start_12 Int (1 x (- Start_2) (+ Start_1 Start_5) (div Start_2 Start_12) (mod Start_4 Start_9)))
   (Start_11 Int (4 (+ Start_8 Start_4) (div Start_6 Start_9) (mod Start_8 Start_12) (ite StartBool_1 Start_3 Start_7)))
   (Start_2 Int (x 3 (- Start) (- Start_5 Start_6) (* Start_3 Start_6) (div Start_6 Start_3) (abs Start_2) (ite StartBool Start_7 Start_7)))
   (Start_9 Int (0 3 y x 2 1 5 (- Start_9) (div Start_10 Start_2) (ite StartBool_1 Start_10 Start_7)))
   (Start_1 Int (0 5 (* Start_2 Start_1) (mod Start_3 Start) (abs Start) (ite StartBool Start Start_4)))
   (Start_3 Int (y (- Start_1) (- Start_4 Start_2) (ite StartBool Start_5 Start)))
   (Start_5 Int (0 (- Start_1) (* Start_1 Start_2) (div Start_1 Start_3)))
   (Start_4 Int (4 (- Start_2) (* Start Start_4) (div Start_2 Start_5) (mod Start_4 Start_3)))
   (Start_7 Int (x 5 (- Start_2) (* Start_1 Start_2) (abs Start_2) (ite StartBool Start_8 Start_2)))
   (Start_8 Int (1 (- Start_4 Start_1) (+ Start_5 Start_5) (* Start_6 Start_7) (div Start_6 Start_1) (ite StartBool_1 Start_3 Start_5)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_1) (< Start_7 Start_7) (= Start_6 Start_9) (>= Start_10 Start_5) (> Start_2 Start)))
   (Start_10 Int (0 3 4 y 2 (- Start_5 Start_4) (* Start Start_9) (div Start Start_8) (mod Start_4 Start_7)))
   (Start_6 Int (y (- Start_6) (* Start_1 Start_10) (div Start_5 Start_11) (mod Start_4 Start_2) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* x (mod x 3)))))

(check-synth)
