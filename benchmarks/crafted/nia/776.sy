(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_15 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_2 Int) (Start_5 Int) (Start_3 Int) (Start_11 Int) (Start_12 Int) (Start_7 Int) (Start_13 Int) (Start_6 Int) (Start_8 Int) (Start_10 Int) (Start_16 Int) (Start_9 Int) (Start_1 Int) (Start_4 Int) (Start_14 Int))
  ((Start Int (5 (- Start_1) (div Start_1 Start_2) (mod Start_1 Start_3) (ite StartBool Start_2 Start_3)))
   (StartBool Bool (true (and StartBool_2 StartBool) (or StartBool_3 StartBool_1) (< Start_7 Start_16) (<= Start_11 Start_14) (>= Start_7 Start_4)))
   (StartBool_3 Bool (true false (or StartBool_1 StartBool) (< Start_9 Start_4) (>= Start_2 Start) (> Start Start_14)))
   (Start_15 Int (4 x 0 5 1 3 (- Start_7) (+ Start_10 Start) (mod Start_1 Start_10)))
   (StartBool_2 Bool (false true (or StartBool_3 StartBool_3) (> Start_15 Start_9)))
   (StartBool_1 Bool (true (or StartBool_2 StartBool_2) (>= Start_9 Start_3) (> Start_9 Start_13)))
   (Start_2 Int (2 x (- Start_4 Start_2) (div Start_13 Start_6) (abs Start_10) (ite StartBool Start_14 Start_4)))
   (Start_5 Int (3 (- Start_3) (+ Start_3 Start_1) (* Start_3 Start_6) (div Start_5 Start_4) (mod Start_7 Start_5) (abs Start_4)))
   (Start_3 Int (x 2 0 (- Start_4 Start) (* Start_1 Start_5) (mod Start Start_5) (abs Start_3) (ite StartBool Start_3 Start_5)))
   (Start_11 Int (5 (- Start_11 Start_12) (div Start_11 Start_4) (abs Start_10) (ite StartBool Start_1 Start_6)))
   (Start_12 Int (x (mod Start_11 Start_5) (abs Start_5)))
   (Start_7 Int (0 (+ Start_2 Start) (* Start_2 Start_1) (div Start_1 Start_3)))
   (Start_13 Int (2 x (- Start_2) (+ Start_12 Start_13) (* Start_14 Start_12) (div Start_5 Start_8)))
   (Start_6 Int (1 (* Start_1 Start_4) (div Start Start_8) (mod Start_7 Start_8) (ite StartBool Start_7 Start_4)))
   (Start_8 Int (2 5 1 (- Start_2 Start_9) (* Start Start_10) (mod Start_5 Start_10)))
   (Start_10 Int (0 y 1 3 5 (* Start_7 Start_4) (ite StartBool Start_5 Start_1)))
   (Start_16 Int (5 (- Start_16 Start_10) (+ Start_12 Start_12) (* Start_5 Start) (div Start_11 Start_12) (mod Start_2 Start_12) (ite StartBool_3 Start_9 Start_9)))
   (Start_9 Int (4 (- Start_10) (* Start_6 Start_9) (div Start_11 Start_6) (mod Start Start_1) (abs Start_6) (ite StartBool Start_3 Start_1)))
   (Start_1 Int (1 (- Start_4) (+ Start_3 Start_2) (div Start_10 Start_14) (abs Start_9) (ite StartBool_1 Start_3 Start_13)))
   (Start_4 Int (1 0 (- Start_4) (- Start_13 Start) (+ Start_7 Start_8) (div Start_5 Start_12) (mod Start_5 Start_4) (ite StartBool Start_11 Start_11)))
   (Start_14 Int (x 3 0 (- Start_6 Start) (+ Start_2 Start_14) (abs Start_3) (ite StartBool Start_13 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (* x 2) 2)))

(check-synth)
