(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_2 Int) (Start_3 Int) (StartBool_5 Bool) (Start_13 Int) (StartBool_1 Bool) (StartBool_6 Bool) (Start_12 Int) (Start_1 Int) (Start_4 Int) (StartBool_2 Bool) (Start_9 Int) (Start_7 Int) (Start_10 Int) (Start_6 Int) (Start_11 Int) (StartBool_3 Bool) (Start_5 Int) (Start_8 Int) (StartBool_4 Bool))
  ((Start Int (2 (- Start) (* Start Start) (mod Start Start_1)))
   (StartBool Bool (true false (not StartBool_6) (and StartBool_1 StartBool_1) (< Start_14 Start_1) (= Start_13 Start_8)))
   (Start_14 Int (x (- Start_8) (- Start_2 Start_13) (* Start_12 Start_5) (abs Start_2) (ite StartBool Start_8 Start_13)))
   (Start_2 Int (5 (- Start) (- Start_12 Start_8) (* Start_11 Start_14) (div Start Start_7)))
   (Start_3 Int (0 (- Start_1) (* Start_3 Start_9) (mod Start_10 Start_12) (abs Start_3)))
   (StartBool_5 Bool (true false (not StartBool_2) (and StartBool_5 StartBool) (or StartBool StartBool) (>= Start_9 Start_9) (> Start_11 Start_8)))
   (Start_13 Int (4 1 5 3 2 (div Start_1 Start_5) (abs Start_7)))
   (StartBool_1 Bool (true (not StartBool_1) (or StartBool_1 StartBool_2) (= Start_1 Start_3) (> Start_4 Start)))
   (StartBool_6 Bool (false (not StartBool_5) (or StartBool_4 StartBool_4) (< Start_12 Start_13) (= Start_2 Start_14)))
   (Start_12 Int (2 x 4 5 y 0 1 3 (- Start_2) (+ Start_2 Start_12) (mod Start_10 Start_1) (abs Start_4) (ite StartBool_3 Start_1 Start_12)))
   (Start_1 Int (5 (- Start_2) (+ Start_2 Start) (mod Start_3 Start_1) (abs Start) (ite StartBool_1 Start_1 Start_2)))
   (Start_4 Int (y 4 3 0 1 (- Start_2) (- Start_1 Start_5) (+ Start_6 Start_4) (div Start_4 Start_7) (mod Start_5 Start_2) (abs Start_6)))
   (StartBool_2 Bool (true (or StartBool_3 StartBool_5) (< Start_8 Start_7) (>= Start Start)))
   (Start_9 Int (1 (- Start_12) (* Start_10 Start_13) (div Start_7 Start_1) (mod Start Start_2) (ite StartBool Start_6 Start_4)))
   (Start_7 Int (4 (- Start_8 Start_5) (* Start_1 Start_4) (div Start_7 Start_3) (ite StartBool Start_2 Start_5)))
   (Start_10 Int (y (- Start_5) (- Start_5 Start_11) (+ Start_9 Start_9) (div Start_4 Start_7) (mod Start_6 Start_8) (ite StartBool Start_1 Start_3)))
   (Start_6 Int (y 1 (- Start_4) (- Start_8 Start) (+ Start_9 Start_7) (* Start_6 Start_7) (mod Start_2 Start_5) (ite StartBool_3 Start_8 Start_10)))
   (Start_11 Int (4 x (- Start_11 Start_12) (+ Start_6 Start_6) (div Start_9 Start_12)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_1 StartBool) (or StartBool_3 StartBool_3) (< Start_10 Start_2) (<= Start_5 Start_8) (= Start_12 Start_7)))
   (Start_5 Int (x (+ Start_3 Start_1) (div Start_7 Start_5) (abs Start) (ite StartBool Start Start_5)))
   (Start_8 Int (2 (- Start) (- Start Start_1) (+ Start_8 Start_1) (mod Start Start_1) (ite StartBool_2 Start_8 Start)))
   (StartBool_4 Bool (false (= Start Start_8) (>= Start_5 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (- y) (mod 3 x))))

(check-synth)
