(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_3 Int) (Start_7 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_2 Int) (StartBool_3 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_1 Int) (Start_6 Int) (Start_4 Int) (Start_8 Int))
  ((Start Int (1 x (- Start Start_1) (* Start_1 Start_2) (div Start Start_1) (abs Start_2)))
   (StartBool Bool (false true (not StartBool) (<= Start_1 Start_4)))
   (StartBool_5 Bool (false true (or StartBool_2 StartBool_5) (< Start_2 Start_3) (<= Start_5 Start_5) (= Start Start_2) (>= Start Start_7)))
   (Start_3 Int (2 (- Start_2 Start_2) (+ Start_2 Start_2) (* Start Start_4) (div Start_2 Start_4) (mod Start_3 Start_3) (ite StartBool_1 Start_4 Start_4)))
   (Start_7 Int (y (- Start_7) (- Start_5 Start_7) (+ Start_5 Start_3) (div Start_7 Start_2)))
   (StartBool_4 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_5) (or StartBool_3 StartBool_1) (<= Start Start_8) (> Start Start_8)))
   (StartBool_1 Bool (false (not StartBool_1) (or StartBool_2 StartBool_3) (< Start_1 Start_2) (>= Start_5 Start) (> Start_1 Start)))
   (Start_2 Int (x (- Start_3) (- Start Start) (+ Start_3 Start_1) (* Start_2 Start_1) (mod Start_3 Start_3)))
   (StartBool_3 Bool (false (< Start_5 Start_4) (>= Start_3 Start_3) (> Start_3 Start_4)))
   (Start_5 Int (1 3 5 (- Start_2) (- Start_3 Start_2) (* Start Start_1) (mod Start_1 Start_3) (abs Start_5)))
   (StartBool_2 Bool (false (< Start_1 Start)))
   (Start_1 Int (5 y 3 (- Start_5) (+ Start_3 Start) (* Start_6 Start_7) (mod Start_4 Start_7) (abs Start_2) (ite StartBool_2 Start_5 Start_2)))
   (Start_6 Int (4 (+ Start_3 Start_4) (ite StartBool_4 Start_6 Start)))
   (Start_4 Int (3 y (- Start_1) (* Start_4 Start) (abs Start)))
   (Start_8 Int (3 (mod Start Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div 1 (- (div x y) 4)))))

(check-synth)
