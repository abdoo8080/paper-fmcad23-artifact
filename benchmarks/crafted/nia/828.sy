(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_12 Int) (Start_11 Int) (StartBool_4 Bool) (Start_1 Int) (Start_7 Int) (Start_4 Int) (StartBool_1 Bool) (Start_5 Int) (Start_8 Int) (Start_2 Int) (Start_9 Int) (Start_3 Int) (Start_6 Int) (StartBool_3 Bool) (Start_10 Int) (StartBool_2 Bool))
  ((Start Int (4 2 (+ Start_1 Start_1) (div Start_1 Start_1) (abs Start)))
   (StartBool Bool (true false (<= Start_11 Start_10) (>= Start_13 Start_11)))
   (Start_13 Int (5 3 1 x y 0 2 4 (* Start_8 Start_6) (mod Start_9 Start_2) (abs Start_11)))
   (Start_12 Int (3 (- Start_4 Start_8) (+ Start_3 Start_6)))
   (Start_11 Int (5 (- Start_6) (+ Start_7 Start_1) (div Start_2 Start_9) (mod Start_8 Start_9) (ite StartBool_2 Start_5 Start_5)))
   (StartBool_4 Bool (false (not StartBool) (or StartBool_4 StartBool_1) (<= Start_10 Start_8) (= Start_4 Start_4) (>= Start_7 Start_10) (> Start_1 Start_11)))
   (Start_1 Int (3 (- Start) (- Start_2 Start_1) (+ Start_3 Start_2) (* Start_2 Start_1) (div Start_3 Start) (mod Start Start_1) (abs Start_4) (ite StartBool Start_1 Start_1)))
   (Start_7 Int (5 4 y (- Start_1 Start_8) (+ Start_6 Start_5) (div Start_6 Start_6) (abs Start_2)))
   (Start_4 Int (5 (+ Start_2 Start_4) (abs Start_3) (ite StartBool_1 Start_3 Start)))
   (StartBool_1 Bool (false true (not StartBool_1) (or StartBool StartBool) (= Start_3 Start_4) (>= Start_5 Start_6) (> Start_6 Start_6)))
   (Start_5 Int (y 1 5 (- Start_1 Start_1) (+ Start_5 Start_3) (* Start_6 Start_1) (mod Start_2 Start)))
   (Start_8 Int (2 (- Start_3 Start_7) (* Start_3 Start_1) (div Start Start_9) (mod Start_9 Start_9) (abs Start_8)))
   (Start_2 Int (5 4 3 y 1 (mod Start_7 Start_2) (abs Start_1) (ite StartBool_2 Start_3 Start_5)))
   (Start_9 Int (3 y 2 (- Start_4) (+ Start_6 Start_7) (* Start_4 Start_1) (div Start_10 Start_11) (mod Start_8 Start_11) (ite StartBool_3 Start_4 Start_3)))
   (Start_3 Int (0 (+ Start_3 Start_6) (* Start_3 Start_3)))
   (Start_6 Int (4 (- Start_1 Start_1) (+ Start_4 Start_3)))
   (StartBool_3 Bool (true false (and StartBool_1 StartBool_4) (< Start_1 Start_8) (= Start_4 Start_6) (>= Start_2 Start_5)))
   (Start_10 Int (0 (- Start_11) (- Start_7 Start_8) (* Start_12 Start_6) (div Start_6 Start_1) (abs Start_12)))
   (StartBool_2 Bool (true false (not StartBool) (>= Start Start_2) (> Start Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (mod 4 y) (* 5 (+ 5 4)))))

(check-synth)
