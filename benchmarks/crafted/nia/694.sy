(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (StartBool_2 Bool) (Start_16 Int) (Start_17 Int) (StartBool_3 Bool) (Start_15 Int) (Start_5 Int) (Start_3 Int) (Start_4 Int) (StartBool_1 Bool) (Start_11 Int) (Start_6 Int) (Start_8 Int) (Start_12 Int) (Start_10 Int) (Start_9 Int) (Start_7 Int) (Start_14 Int) (Start_13 Int))
  ((Start Int (3 1 (+ Start Start_1) (* Start Start) (mod Start Start_2) (abs Start_3) (ite StartBool Start_2 Start_2)))
   (StartBool Bool (false (<= Start Start_15)))
   (Start_1 Int (3 (* Start_8 Start_16) (div Start_14 Start_11) (mod Start_17 Start_15) (ite StartBool_2 Start_12 Start_1)))
   (Start_2 Int (y (+ Start_3 Start) (* Start Start_15) (abs Start_16) (ite StartBool Start_2 Start_8)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_2) (or StartBool_2 StartBool) (= Start_7 Start_6) (>= Start_17 Start_13) (> Start_5 Start_2)))
   (Start_16 Int (y x (- Start_10) (+ Start_11 Start) (* Start_8 Start) (ite StartBool_2 Start_1 Start_3)))
   (Start_17 Int (5 (- Start_13) (* Start_2 Start_13) (mod Start_12 Start) (abs Start_11) (ite StartBool_2 Start_4 Start_13)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool) (or StartBool StartBool_3) (< Start_6 Start_16) (>= Start_10 Start_8) (> Start_13 Start_5)))
   (Start_15 Int (0 (- Start_15) (+ Start_3 Start_5)))
   (Start_5 Int (1 5 (+ Start_5 Start_5) (* Start_5 Start_4) (mod Start_3 Start_5) (ite StartBool Start_1 Start_6)))
   (Start_3 Int (5 (- Start Start_1) (+ Start_3 Start_2) (div Start_1 Start_2) (ite StartBool_1 Start Start_2)))
   (Start_4 Int (3 2 (+ Start_9 Start_2) (* Start_1 Start_5) (mod Start_12 Start_6) (abs Start_13)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_1) (or StartBool_3 StartBool_2) (< Start_3 Start_3) (<= Start_2 Start_4) (>= Start_5 Start_2) (> Start_3 Start_3)))
   (Start_11 Int (3 5 0 y (- Start_8 Start_7) (* Start_4 Start_4) (div Start_12 Start_2) (abs Start_3)))
   (Start_6 Int (y 4 (- Start_3) (- Start Start_6) (* Start_1 Start_7) (div Start_8 Start) (abs Start_7)))
   (Start_8 Int (1 (+ Start_5 Start_2) (div Start_1 Start_7) (mod Start_8 Start_9) (abs Start_5)))
   (Start_12 Int (3 (- Start_12) (- Start_10 Start_1) (+ Start_2 Start_7) (div Start_6 Start_11) (abs Start_9) (ite StartBool_1 Start_12 Start_9)))
   (Start_10 Int (x (div Start_4 Start_12) (mod Start_9 Start_8) (abs Start_4)))
   (Start_9 Int (3 1 2 0 y (- Start_1) (div Start_10 Start_3) (mod Start_9 Start_9) (ite StartBool_2 Start_11 Start_1)))
   (Start_7 Int (4 (- Start_10) (+ Start_1 Start_13) (* Start_14 Start_6)))
   (Start_14 Int (2 3 (mod Start_11 Start_7) (ite StartBool_2 Start_4 Start_5)))
   (Start_13 Int (y 1 (- Start_10) (- Start_11 Start_9) (+ Start_3 Start_11) (* Start_15 Start_7) (div Start_5 Start_1) (abs Start_11) (ite StartBool_3 Start_11 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- (mod 3 y) y))))

(check-synth)
