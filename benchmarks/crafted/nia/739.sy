(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_13 Int) (Start_1 Int) (Start_12 Int) (Start_2 Int) (StartBool_2 Bool) (StartBool_3 Bool) (StartBool_7 Bool) (StartBool_8 Bool) (Start_3 Int) (Start_7 Int) (StartBool_4 Bool) (Start_9 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_10 Int) (StartBool_6 Bool) (Start_6 Int) (Start_5 Int) (Start_8 Int) (Start_4 Int) (Start_11 Int))
  ((Start Int (y 4 (+ Start Start_1) (* Start_2 Start_3) (ite StartBool_1 Start_3 Start_3)))
   (StartBool Bool (true (and StartBool_8 StartBool_3) (= Start_12 Start_9) (>= Start_4 Start_14) (> Start_10 Start_8)))
   (Start_14 Int (y 2 4 1 x 0 5 (+ Start_11 Start_8) (* Start_13 Start_14) (div Start_14 Start_10) (mod Start_6 Start_13) (abs Start_3) (ite StartBool_7 Start_6 Start_1)))
   (Start_13 Int (3 (- Start_13 Start_9) (mod Start_12 Start_13) (ite StartBool_5 Start_1 Start_6)))
   (Start_1 Int (5 (- Start_10 Start_3) (+ Start_5 Start_13) (mod Start_8 Start_9) (abs Start_3) (ite StartBool_2 Start_5 Start_13)))
   (Start_12 Int (5 4 y (+ Start_9 Start_12) (abs Start_5) (ite StartBool Start_6 Start_12)))
   (Start_2 Int (y 0 (- Start_7) (+ Start Start_9) (div Start_4 Start_12) (mod Start_12 Start_5) (ite StartBool_5 Start Start_8)))
   (StartBool_2 Bool (false true (not StartBool_5) (and StartBool_2 StartBool_5) (< Start_7 Start_10) (>= Start_11 Start_5)))
   (StartBool_3 Bool (true false (or StartBool_5 StartBool_7) (> Start_3 Start_1)))
   (StartBool_7 Bool (true false (not StartBool) (and StartBool_5 StartBool_1)))
   (StartBool_8 Bool (false (<= Start_2 Start_14) (= Start_13 Start_10) (> Start_5 Start_6)))
   (Start_3 Int (3 5 (- Start_6) (div Start_8 Start_1) (mod Start_5 Start_5)))
   (Start_7 Int (4 y (- Start_3) (+ Start_3 Start_6) (mod Start_3 Start_4) (abs Start_3)))
   (StartBool_4 Bool (false true (and StartBool_6 StartBool_6)))
   (Start_9 Int (1 (- Start_9 Start) (div Start_8 Start_4) (mod Start_3 Start_7)))
   (StartBool_5 Bool (false (not StartBool) (and StartBool_1 StartBool_3) (or StartBool_2 StartBool) (<= Start_4 Start) (>= Start_5 Start_2) (> Start_2 Start_7)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (or StartBool StartBool_4) (< Start_2 Start_3) (<= Start_2 Start_4) (= Start_2 Start_1) (>= Start_2 Start_1)))
   (Start_10 Int (5 1 4 3 (- Start) (- Start_10 Start_6) (+ Start_11 Start_9) (div Start_5 Start_2)))
   (StartBool_6 Bool (false true (= Start_11 Start_9) (>= Start_2 Start_5) (> Start_6 Start_1)))
   (Start_6 Int (5 (div Start Start_7) (mod Start_6 Start_2)))
   (Start_5 Int (3 0 4 1 (- Start_4) (+ Start_5 Start_7) (* Start_3 Start_8) (div Start_9 Start_9) (mod Start_4 Start_6)))
   (Start_8 Int (1 y x (- Start_9 Start_1) (+ Start_9 Start_8) (div Start_10 Start_10) (mod Start Start_4) (ite StartBool Start_6 Start_6)))
   (Start_4 Int (1 4 2 0 (- Start Start_3) (* Start Start_5) (mod Start_6 Start_6) (abs Start_5) (ite StartBool_5 Start_2 Start)))
   (Start_11 Int (y 2 4 x (- Start_1 Start_10) (+ Start Start_5) (div Start_7 Start) (abs Start) (ite StartBool_6 Start_10 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 3 (- x 2))))

(check-synth)
