(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_1 Int) (Start_12 Int) (StartBool_3 Bool) (Start_14 Int) (Start_15 Int) (StartBool_1 Bool) (Start_5 Int) (Start_2 Int) (Start_4 Int) (Start_6 Int) (Start_8 Int) (Start_9 Int) (Start_11 Int) (Start_16 Int) (Start_3 Int) (Start_7 Int) (Start_13 Int) (StartBool_2 Bool) (Start_10 Int))
  ((Start Int (y 5 4 (- Start_1) (- Start_1 Start_2) (* Start_2 Start_2) (div Start_2 Start_1) (ite StartBool Start_1 Start)))
   (StartBool Bool (true (not StartBool_3) (= Start_5 Start_15) (>= Start_10 Start_9) (> Start_4 Start_14)))
   (StartBool_4 Bool (true (not StartBool_2) (and StartBool StartBool) (< Start_6 Start_1) (<= Start_7 Start_14) (>= Start_3 Start_16)))
   (Start_1 Int (2 (- Start_12 Start_11) (+ Start_11 Start_13) (mod Start_10 Start_12) (ite StartBool_4 Start_14 Start_8)))
   (Start_12 Int (3 (- Start_4 Start_10) (+ Start_1 Start_15) (div Start_4 Start_13) (mod Start_16 Start_10) (abs Start_4)))
   (StartBool_3 Bool (true (>= Start_11 Start_8)))
   (Start_14 Int (5 (- Start_6) (- Start_9 Start_15) (* Start_1 Start_8) (mod Start_7 Start_1) (ite StartBool_3 Start_13 Start_9)))
   (Start_15 Int (5 y (div Start_5 Start_2) (mod Start_2 Start_2) (abs Start_9)))
   (StartBool_1 Bool (false true (not StartBool) (< Start_6 Start) (<= Start_7 Start_1) (= Start_5 Start_1) (> Start Start_3)))
   (Start_5 Int (x (+ Start_6 Start_1) (* Start_5 Start_5) (div Start_6 Start) (abs Start_3)))
   (Start_2 Int (3 x (+ Start_3 Start_4) (div Start_4 Start_1) (mod Start_1 Start_5) (abs Start) (ite StartBool Start_3 Start_5)))
   (Start_4 Int (3 (- Start_8 Start) (+ Start_8 Start_8) (* Start Start_5)))
   (Start_6 Int (4 (- Start Start_3) (* Start_3 Start_3) (ite StartBool_1 Start_7 Start_4)))
   (Start_8 Int (x (+ Start_2 Start_1) (* Start_6 Start_4) (ite StartBool_1 Start_7 Start_5)))
   (Start_9 Int (4 (* Start_10 Start_3) (div Start_3 Start_5) (mod Start_9 Start_3) (ite StartBool Start_11 Start_6)))
   (Start_11 Int (0 (- Start_8 Start_1) (mod Start_6 Start_11) (ite StartBool_1 Start_11 Start_10)))
   (Start_16 Int (3 (- Start_11) (+ Start_11 Start_3) (* Start_8 Start_2) (div Start_6 Start_11) (mod Start_7 Start_10) (ite StartBool_1 Start_4 Start_9)))
   (Start_3 Int (2 1 (+ Start_2 Start_4) (div Start_4 Start_2) (mod Start_6 Start_7) (ite StartBool_1 Start_9 Start_2)))
   (Start_7 Int (0 5 (- Start_4) (- Start_1 Start_6) (* Start_7 Start_4) (mod Start_6 Start_4) (abs Start_4) (ite StartBool_1 Start_3 Start_1)))
   (Start_13 Int (2 (- Start_12) (- Start_7 Start_13) (+ Start_12 Start_11) (* Start_5 Start_14) (div Start_3 Start_15) (mod Start_6 Start_5) (abs Start_13) (ite StartBool_2 Start_7 Start_14)))
   (StartBool_2 Bool (false true (not StartBool_2) (<= Start_9 Start_6)))
   (Start_10 Int (x 5 (- Start_12 Start_8) (* Start_12 Start) (abs Start_9) (ite StartBool Start_13 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (div 1 y) 5)))

(check-synth)
