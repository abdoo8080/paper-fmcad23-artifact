(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (StartBool_6 Bool) (Start_19 Int) (Start_18 Int) (Start_1 Int) (Start_4 Int) (Start_5 Int) (StartBool_4 Bool) (StartBool_5 Bool) (Start_15 Int) (Start_6 Int) (StartBool_3 Bool) (Start_8 Int) (Start_17 Int) (Start_12 Int) (Start_10 Int) (Start_3 Int) (StartBool_2 Bool) (Start_9 Int) (Start_7 Int) (Start_16 Int) (Start_11 Int) (StartBool_1 Bool) (Start_13 Int) (Start_2 Int) (Start_14 Int))
  ((Start Int (4 1 0 (+ Start_1 Start_2) (div Start_3 Start_4) (mod Start_2 Start_3) (abs Start_5) (ite StartBool_1 Start_6 Start_6)))
   (StartBool Bool (true (and StartBool_5 StartBool_5) (or StartBool_6 StartBool_2) (>= Start_3 Start_14)))
   (StartBool_7 Bool (false true (not StartBool_2) (< Start_16 Start_2) (<= Start_19 Start_9) (= Start_1 Start_17)))
   (StartBool_6 Bool (false true (not StartBool_6) (and StartBool_2 StartBool_7) (< Start_3 Start_12) (<= Start_4 Start_5)))
   (Start_19 Int (y 1 (- Start_18 Start_2) (* Start_16 Start_4) (div Start_12 Start_3) (ite StartBool_2 Start_15 Start_14)))
   (Start_18 Int (2 (- Start_3) (- Start Start_19) (+ Start_7 Start_18) (* Start_5 Start_10) (abs Start_2)))
   (Start_1 Int (x 0 5 (- Start_4 Start_10) (* Start_6 Start_7) (div Start_16 Start_9) (ite StartBool_1 Start_11 Start_4)))
   (Start_4 Int (3 (- Start_1) (- Start_2 Start_14) (mod Start_9 Start_14) (abs Start_6)))
   (Start_5 Int (x 5 (- Start_1) (- Start_9 Start_3) (div Start_12 Start_5) (abs Start_11)))
   (StartBool_4 Bool (false true (not StartBool_1) (and StartBool_1 StartBool) (<= Start_9 Start_2) (= Start_13 Start_10)))
   (StartBool_5 Bool (false (and StartBool_6 StartBool_2) (< Start_1 Start) (<= Start_5 Start_16) (= Start_6 Start_16) (> Start_4 Start_12)))
   (Start_15 Int (3 y (- Start_10) (* Start_5 Start_11) (div Start_11 Start_5) (abs Start_3) (ite StartBool_3 Start_13 Start_14)))
   (Start_6 Int (0 (- Start_5) (- Start_4 Start_2) (+ Start_7 Start_6) (* Start Start_6) (ite StartBool_1 Start_8 Start_1)))
   (StartBool_3 Bool (true (= Start_3 Start)))
   (Start_8 Int (2 (- Start_1) (+ Start_9 Start_3) (* Start_7 Start_6) (div Start_10 Start_5) (mod Start_8 Start_9)))
   (Start_17 Int (3 (- Start_8) (- Start_8 Start_1) (+ Start_1 Start) (* Start_9 Start_5) (div Start_18 Start_7) (mod Start_3 Start_8) (ite StartBool_1 Start_3 Start_5)))
   (Start_12 Int (3 (- Start_7) (+ Start_5 Start_1) (abs Start_4) (ite StartBool_3 Start_13 Start_13)))
   (Start_10 Int (0 y 3 5 (- Start_10 Start_4) (+ Start Start_7) (* Start_5 Start_5) (mod Start_7 Start) (ite StartBool_2 Start_8 Start_7)))
   (Start_3 Int (1 y (+ Start_11 Start_8) (ite StartBool_1 Start_2 Start_10)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_2 StartBool_2) (< Start_2 Start_9) (= Start_4 Start_9)))
   (Start_9 Int (y (- Start_2 Start_5) (+ Start_11 Start_11) (* Start_4 Start_2) (div Start_5 Start)))
   (Start_7 Int (3 (- Start_14) (- Start_14 Start_2) (+ Start_14 Start_6) (* Start_5 Start_8) (div Start_1 Start_6) (mod Start_8 Start_9) (ite StartBool_3 Start_5 Start_10)))
   (Start_16 Int (1 2 (- Start_11 Start) (* Start_15 Start_11) (div Start Start_2) (mod Start_9 Start_17) (ite StartBool_1 Start_7 Start_6)))
   (Start_11 Int (3 0 (- Start_5) (+ Start_10 Start_4) (* Start_9 Start_11) (div Start_11 Start_12)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_4 StartBool_3) (<= Start_15 Start_7) (= Start_3 Start_6) (>= Start_10 Start_2)))
   (Start_13 Int (3 (- Start_4 Start_3) (abs Start_1)))
   (Start_2 Int (y 2 (- Start_2) (+ Start_6 Start) (ite StartBool_4 Start_13 Start_2)))
   (Start_14 Int (y 4 1 (div Start Start_2) (ite StartBool Start_4 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- 2) (+ 2 x))))

(check-synth)
