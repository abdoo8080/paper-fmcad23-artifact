(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_2 Bool) (Start_8 Int) (Start_6 Int) (Start_7 Int) (Start_5 Int) (Start_9 Int) (Start_3 Int) (Start_4 Int) (Start_2 Int) (StartBool_1 Bool))
  ((Start Int (1 (div Start_1 Start) (ite StartBool_1 Start_2 Start_2)))
   (StartBool Bool (true false (not StartBool_1)))
   (Start_1 Int (5 x (- Start_1) (* Start_4 Start_9) (div Start_6 Start_5) (ite StartBool Start_9 Start_7)))
   (StartBool_2 Bool (false (= Start_5 Start_4) (> Start_2 Start_2)))
   (Start_8 Int (x (+ Start_2 Start_1) (div Start_7 Start) (abs Start) (ite StartBool_2 Start_8 Start_6)))
   (Start_6 Int (x (- Start_7 Start_3) (+ Start_3 Start_2) (* Start Start) (mod Start_6 Start_2)))
   (Start_7 Int (1 y 2 (- Start_2) (- Start_6 Start_3) (abs Start) (ite StartBool_1 Start_3 Start_7)))
   (Start_5 Int (0 4 (- Start_6) (div Start_1 Start_3) (mod Start_2 Start_7)))
   (Start_9 Int (4 1 (- Start_5) (div Start_9 Start_5) (ite StartBool Start_9 Start_6)))
   (Start_3 Int (y (+ Start Start_5) (div Start_3 Start_3) (mod Start_5 Start_1) (abs Start)))
   (Start_4 Int (3 4 (- Start_5) (+ Start Start_2) (div Start_1 Start_4) (abs Start_4) (ite StartBool_1 Start Start_3)))
   (Start_2 Int (5 2 (+ Start_3 Start) (* Start_2 Start_1) (div Start_4 Start) (ite StartBool Start_4 Start_4)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool StartBool) (or StartBool StartBool) (< Start_3 Start_8) (<= Start_3 Start_8) (> Start_8 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* y (+ 4 4)))))

(check-synth)
