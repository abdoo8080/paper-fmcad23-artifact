(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_10 Int) (Start_1 Int) (Start_15 Int) (Start_14 Int) (Start_13 Int) (StartBool_3 Bool) (Start_2 Int) (StartBool_2 Bool) (Start_11 Int) (Start_7 Int) (Start_3 Int) (Start_5 Int) (Start_9 Int) (Start_12 Int) (Start_4 Int) (Start_6 Int) (Start_8 Int))
  ((Start Int (4 (- Start_1) (div Start_1 Start_1) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (false true (and StartBool_3 StartBool_3) (< Start_13 Start_3) (<= Start_1 Start_9) (>= Start_14 Start_2) (> Start_12 Start_3)))
   (StartBool_1 Bool (false true (< Start_2 Start_10) (<= Start_7 Start_1) (= Start_15 Start_7) (>= Start_8 Start_8)))
   (Start_10 Int (y 1 (+ Start_2 Start_14) (* Start_12 Start_6) (div Start_1 Start_6) (abs Start_7)))
   (Start_1 Int (5 1 (- Start) (+ Start_7 Start) (* Start_14 Start_11) (mod Start Start_11)))
   (Start_15 Int (3 (- Start_14) (* Start_15 Start_2) (mod Start_8 Start_6)))
   (Start_14 Int (3 x 2 1 (- Start_4 Start_15) (div Start_4 Start_10) (ite StartBool_2 Start_12 Start_8)))
   (Start_13 Int (4 (mod Start_12 Start_14)))
   (StartBool_3 Bool (false (and StartBool_2 StartBool_3) (or StartBool_2 StartBool_3) (<= Start_6 Start_6) (= Start_1 Start_1) (> Start_4 Start_4)))
   (Start_2 Int (4 x 3 (- Start_3) (- Start Start_1) (+ Start_3 Start_2) (* Start_3 Start_2) (div Start_1 Start_3) (abs Start) (ite StartBool_2 Start_2 Start_1)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_3) (<= Start_3 Start) (= Start_4 Start_3) (> Start_2 Start_4)))
   (Start_11 Int (y (- Start_13 Start_4) (* Start_11 Start_5) (mod Start_12 Start_12) (abs Start_7) (ite StartBool_3 Start_5 Start_13)))
   (Start_7 Int (2 x (- Start_6) (+ Start Start_3) (* Start_6 Start) (mod Start_5 Start) (abs Start_6) (ite StartBool_1 Start_3 Start)))
   (Start_3 Int (2 (div Start Start_2) (abs Start_8) (ite StartBool_2 Start_9 Start)))
   (Start_5 Int (2 (- Start_5) (* Start Start_1)))
   (Start_9 Int (3 5 0 2 (+ Start_2 Start_7) (* Start_2 Start) (mod Start_2 Start_1) (abs Start_3)))
   (Start_12 Int (y 5 3 1 x (abs Start_9) (ite StartBool_1 Start_12 Start_5)))
   (Start_4 Int (0 (- Start_2) (- Start Start_4) (+ Start_5 Start_4) (div Start_6 Start_1) (mod Start_7 Start) (ite StartBool_1 Start_4 Start_4)))
   (Start_6 Int (5 3 (- Start_2) (mod Start Start_5) (ite StartBool_1 Start_7 Start_4)))
   (Start_8 Int (x (- Start_10) (- Start_3 Start_11) (+ Start_12 Start_8) (* Start_11 Start_4) (mod Start_7 Start_12) (ite StartBool Start_11 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod x 4) y)))

(check-synth)
