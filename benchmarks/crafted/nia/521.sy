(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_4 Int) (Start_18 Int) (Start_16 Int) (Start_17 Int) (StartBool_2 Bool) (Start_5 Int) (Start_20 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_3 Int) (Start_8 Int) (Start_13 Int) (Start_11 Int) (Start_6 Int) (Start_9 Int) (Start_19 Int) (Start_15 Int) (Start_10 Int) (StartBool_3 Bool) (Start_7 Int) (Start_12 Int) (StartBool_1 Bool) (Start_14 Int))
  ((Start Int (0 2 4 1 (+ Start Start) (* Start_1 Start_2) (div Start Start_3) (mod Start_2 Start_4) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (false (not StartBool_5) (<= Start_18 Start_10) (= Start_5 Start_2) (>= Start_20 Start_15)))
   (Start_1 Int (y 1 0 (- Start_1 Start) (abs Start_3) (ite StartBool_4 Start_20 Start_19)))
   (Start_2 Int (x 5 0 1 4 2 (- Start_15) (- Start_19 Start_11) (+ Start_4 Start_11) (* Start_19 Start_17) (div Start_13 Start_9) (abs Start_1) (ite StartBool_5 Start_15 Start_17)))
   (Start_4 Int (y (- Start_18) (- Start_11 Start_3) (* Start_13 Start_6) (abs Start_1) (ite StartBool_3 Start_14 Start)))
   (Start_18 Int (5 4 (- Start_7) (* Start_2 Start_1) (abs Start_13)))
   (Start_16 Int (0 (- Start_3) (* Start_18 Start_4) (div Start Start_7) (abs Start_14)))
   (Start_17 Int (2 (ite StartBool_5 Start_10 Start_13)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_3) (or StartBool_2 StartBool_4) (< Start Start_16) (= Start_14 Start_15) (>= Start_7 Start_7) (> Start_17 Start_10)))
   (Start_5 Int (x (- Start_5) (* Start_14 Start_15) (div Start_14 Start_4) (mod Start_14 Start_8)))
   (Start_20 Int (2 x 4 (- Start_14) (- Start_19 Start_4) (abs Start_3) (ite StartBool_2 Start_15 Start_16)))
   (StartBool_5 Bool (false true (not StartBool_5) (and StartBool_4 StartBool) (= Start_13 Start) (>= Start_6 Start_13) (> Start_14 Start_7)))
   (StartBool_4 Bool (false true (not StartBool_5) (< Start_10 Start_6) (<= Start_2 Start_8)))
   (Start_3 Int (5 y (- Start_13) (- Start_9 Start_1) (* Start_9 Start) (mod Start_7 Start_3) (abs Start_2)))
   (Start_8 Int (5 1 (+ Start_5 Start_9) (* Start_4 Start_6)))
   (Start_13 Int (1 5 0 (- Start_2) (- Start_9 Start) (+ Start_6 Start_10) (* Start Start_11) (mod Start_10 Start_3) (ite StartBool Start_9 Start_3)))
   (Start_11 Int (5 3 x (- Start Start_2) (+ Start_13 Start_12) (* Start_5 Start_11)))
   (Start_6 Int (x 4 1 0 (div Start_5 Start_3) (mod Start_2 Start_7) (abs Start_4)))
   (Start_9 Int (5 x y (- Start_8 Start_8) (+ Start_3 Start_6) (* Start_10 Start_3) (mod Start_4 Start_6) (abs Start_7) (ite StartBool Start_7 Start_7)))
   (Start_19 Int (1 4 y (- Start_4) (* Start_6 Start_13) (ite StartBool Start_14 Start)))
   (Start_15 Int (1 (- Start_6 Start_10) (* Start_11 Start_8) (div Start_13 Start_2) (mod Start_12 Start_1)))
   (Start_10 Int (4 (- Start_1 Start_5) (+ Start_6 Start) (* Start_4 Start_7) (div Start_10 Start_7) (mod Start_1 Start_7) (ite StartBool_3 Start_3 Start_5)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_4) (<= Start_8 Start_11) (= Start_2 Start_12) (> Start_13 Start_5)))
   (Start_7 Int (3 4 (- Start_5 Start_6) (+ Start_2 Start_2) (* Start_8 Start_1) (div Start Start_2) (abs Start_1)))
   (Start_12 Int (3 5 (- Start_8) (- Start_5 Start_3) (+ Start_6 Start_6) (div Start_5 Start_14) (mod Start_8 Start_7)))
   (StartBool_1 Bool (false true (not StartBool_2) (or StartBool StartBool_2) (<= Start Start_5) (= Start_1 Start_4) (>= Start_6 Start_6) (> Start_4 Start_6)))
   (Start_14 Int (1 (- Start_15) (- Start_15 Start_4) (* Start_5 Start_11) (ite StartBool_1 Start_3 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 5 y)))

(check-synth)
