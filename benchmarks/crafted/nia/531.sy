(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_6 Int) (Start_8 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_2 Int) (StartBool_6 Bool) (Start_1 Int) (Start_9 Int) (StartBool_1 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_4 Int) (Start_3 Int) (Start_7 Int) (Start_10 Int) (StartBool_3 Bool))
  ((Start Int (2 x 5 (- Start) (- Start_1 Start) (* Start_1 Start) (abs Start) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (true false (not StartBool_1) (or StartBool StartBool_1) (< Start Start) (<= Start_1 Start_2) (>= Start_2 Start_2) (> Start_1 Start_2)))
   (Start_11 Int (x (- Start Start_7) (+ Start Start_1)))
   (Start_6 Int (2 (- Start_8) (- Start_10 Start) (* Start_7 Start_2) (div Start_8 Start_11) (mod Start_8 Start_10)))
   (Start_8 Int (y (- Start_7) (- Start_6 Start_1) (+ Start_1 Start_4) (* Start_7 Start_7) (mod Start_4 Start_5) (abs Start_2)))
   (StartBool_5 Bool (false true (or StartBool_3 StartBool_5)))
   (StartBool_4 Bool (true (not StartBool_5) (or StartBool_4 StartBool_6) (< Start_6 Start_7) (>= Start_4 Start_9)))
   (Start_2 Int (5 (- Start_2 Start_1) (mod Start Start_1)))
   (StartBool_6 Bool (true (< Start_10 Start_1) (= Start_5 Start) (>= Start_10 Start_4)))
   (Start_1 Int (1 2 (- Start_1) (mod Start_1 Start_2)))
   (Start_9 Int (1 (+ Start_2 Start_7) (* Start_3 Start) (div Start_8 Start_8) (ite StartBool_3 Start_4 Start_10)))
   (StartBool_1 Bool (false (< Start_3 Start_3) (>= Start_3 Start_1) (> Start_4 Start_5)))
   (Start_5 Int (1 4 (- Start_1) (* Start_4 Start_5) (abs Start_1)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool) (or StartBool_2 StartBool) (>= Start_6 Start_8) (> Start_9 Start_1)))
   (Start_4 Int (2 (- Start_4 Start_1) (* Start Start_1)))
   (Start_3 Int (5 (- Start_5) (- Start_6 Start_3) (+ Start Start_5) (* Start_3 Start_5) (abs Start_3) (ite StartBool_2 Start_2 Start_7)))
   (Start_7 Int (3 (- Start_7) (mod Start_3 Start_3) (abs Start_2)))
   (Start_10 Int (2 5 4 (+ Start_6 Start_4) (abs Start_8)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool StartBool_1) (or StartBool_4 StartBool_2) (= Start_9 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* (+ (ite (= 0 x) 0 2) 3) 4))))

(check-synth)
