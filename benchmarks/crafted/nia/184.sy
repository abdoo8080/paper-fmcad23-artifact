(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_8 Int) (Start_9 Int) (Start_7 Int) (Start_5 Int) (Start_1 Int) (Start_4 Int) (StartBool_2 Bool) (Start_2 Int) (Start_3 Int) (StartBool_1 Bool) (Start_6 Int))
  ((Start Int (0 2 (- Start_1 Start) (div Start Start) (mod Start Start) (ite StartBool_1 Start Start)))
   (StartBool Bool (true (not StartBool) (or StartBool_2 StartBool_1) (< Start_2 Start_1) (<= Start_8 Start_7) (>= Start_9 Start_4) (> Start_3 Start_3)))
   (Start_8 Int (1 (- Start_2) (* Start Start_3) (div Start_7 Start_6) (mod Start_7 Start_3)))
   (Start_9 Int (4 x (- Start_1) (+ Start_9 Start_3) (* Start_2 Start_5) (div Start Start_4)))
   (Start_7 Int (1 4 (abs Start_1) (ite StartBool Start_6 Start_2)))
   (Start_5 Int (1 (- Start_2 Start_1) (+ Start Start) (* Start_4 Start_2) (div Start_3 Start_3)))
   (Start_1 Int (4 (div Start Start_1) (mod Start_3 Start_7) (abs Start_3) (ite StartBool_2 Start_1 Start_2)))
   (Start_4 Int (x 1 y (- Start_5) (- Start Start_5) (* Start Start)))
   (StartBool_2 Bool (true false (not StartBool_1) (< Start_3 Start_1) (<= Start_4 Start_4) (= Start Start)))
   (Start_2 Int (2 0 (abs Start)))
   (Start_3 Int (5 2 x (- Start_6) (- Start_2 Start_7) (+ Start_6 Start_2) (mod Start_1 Start_5) (abs Start_5)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_2) (< Start Start_1) (= Start_2 Start)))
   (Start_6 Int (x (- Start_7 Start_3) (+ Start Start_1) (* Start_1 Start_7) (div Start_5 Start_7) (mod Start_3 Start_1) (abs Start_1) (ite StartBool Start Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod y 0)))

(check-synth)
