(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (StartBool_6 Bool) (Start_1 Int) (Start_3 Int) (StartBool_5 Bool) (Start_16 Int) (Start_13 Int) (StartBool_4 Bool) (Start_11 Int) (Start_12 Int) (Start_2 Int) (StartBool_3 Bool) (Start_4 Int) (Start_5 Int) (StartBool_1 Bool) (Start_7 Int) (StartBool_2 Bool) (Start_8 Int) (Start_6 Int) (Start_10 Int) (Start_15 Int) (Start_9 Int))
  ((Start Int (x 5 (* Start_1 Start_1) (div Start_2 Start) (mod Start Start_2)))
   (StartBool Bool (false (and StartBool_5 StartBool_5) (or StartBool_6 StartBool_2) (> Start_10 Start_1)))
   (Start_14 Int (3 4 (+ Start_3 Start_11) (* Start_13 Start_12) (mod Start_4 Start_6) (ite StartBool_3 Start_7 Start_15)))
   (StartBool_6 Bool (true (or StartBool_5 StartBool_3) (< Start_15 Start_13) (<= Start_16 Start_8) (>= Start_9 Start_8)))
   (Start_1 Int (2 0 1 3 (- Start_1) (+ Start Start_10) (* Start_14 Start_12) (div Start_12 Start_1) (mod Start_5 Start_7) (abs Start_4) (ite StartBool_2 Start_14 Start_2)))
   (Start_3 Int (4 5 2 1 x 3 0 (- Start_5) (* Start_7 Start_4) (mod Start_1 Start_2) (abs Start_12) (ite StartBool_2 Start Start_9)))
   (StartBool_5 Bool (true (not StartBool_5) (and StartBool_3 StartBool_3) (or StartBool_3 StartBool_1) (< Start_8 Start_1)))
   (Start_16 Int (5 x 2 (+ Start_4 Start) (div Start_2 Start_11) (mod Start_1 Start_14) (ite StartBool_2 Start_7 Start_8)))
   (Start_13 Int (x 5 (- Start_4) (- Start Start_8) (mod Start_11 Start) (abs Start_3)))
   (StartBool_4 Bool (false true (< Start_5 Start_3) (<= Start_4 Start_6) (= Start_6 Start_5) (>= Start_9 Start_8)))
   (Start_11 Int (0 x (- Start_6) (div Start_9 Start_7) (abs Start_11) (ite StartBool_5 Start_4 Start_4)))
   (Start_12 Int (5 2 (- Start_4) (div Start_11 Start_13) (abs Start_1) (ite StartBool_3 Start_4 Start_10)))
   (Start_2 Int (3 (- Start) (+ Start_3 Start_4) (* Start Start) (abs Start_1)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_2 StartBool_4) (or StartBool_1 StartBool_1) (>= Start_5 Start_7)))
   (Start_4 Int (2 (+ Start_3 Start_2) (* Start_2 Start_2) (ite StartBool_1 Start_4 Start)))
   (Start_5 Int (4 2 3 (- Start_6) (ite StartBool_2 Start_7 Start_4)))
   (StartBool_1 Bool (true false (<= Start_4 Start_2) (= Start_3 Start_5)))
   (Start_7 Int (1 0 (- Start_3 Start) (* Start_2 Start_1) (mod Start_6 Start_1) (abs Start_5) (ite StartBool_2 Start_5 Start_2)))
   (StartBool_2 Bool (true (and StartBool StartBool) (or StartBool_1 StartBool) (< Start Start_1) (<= Start_8 Start_8)))
   (Start_8 Int (y 5 (- Start_7 Start_7) (+ Start_4 Start_7) (div Start_1 Start) (mod Start_6 Start_6) (abs Start_8) (ite StartBool_1 Start_5 Start_1)))
   (Start_6 Int (y (- Start_2 Start_9) (div Start_4 Start_1) (mod Start Start) (abs Start_10)))
   (Start_10 Int (y 5 1 (- Start_9) (- Start Start_6) (* Start_3 Start_6) (div Start_4 Start_7) (mod Start_7 Start_7)))
   (Start_15 Int (0 2 y (- Start_9 Start_7) (mod Start_13 Start_14)))
   (Start_9 Int (2 x (- Start_3) (- Start_8 Start_11) (* Start_5 Start_10) (mod Start_12 Start) (abs Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 5 (- x))))

(check-synth)
