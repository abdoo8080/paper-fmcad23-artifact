(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_13 Int) (Start_14 Int) (Start_8 Int) (Start_11 Int) (Start_7 Int) (Start_2 Int) (Start_9 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_3 Int) (Start_1 Int) (Start_4 Int) (Start_10 Int) (StartBool_2 Bool) (Start_5 Int) (Start_6 Int) (StartBool_3 Bool) (Start_12 Int))
  ((Start Int (5 (mod Start_1 Start_1) (abs Start_1) (ite StartBool_1 Start Start_2)))
   (StartBool Bool (false (not StartBool) (< Start_6 Start_8) (<= Start_7 Start_11) (= Start_6 Start_15) (> Start_8 Start_8)))
   (Start_15 Int (5 0 1 (- Start_6) (div Start_2 Start_6) (abs Start_15)))
   (Start_13 Int (y 5 (- Start_13) (* Start_9 Start_11) (div Start_2 Start_2)))
   (Start_14 Int (5 2 (- Start_13) (* Start_4 Start_7) (mod Start_2 Start_4) (abs Start_5) (ite StartBool_4 Start_7 Start_14)))
   (Start_8 Int (x y 2 0 1 5 3 (+ Start_12 Start_2) (* Start_7 Start) (mod Start_13 Start_13) (ite StartBool_2 Start_3 Start_14)))
   (Start_11 Int (0 1 x 2 5 (- Start_8) (- Start_2 Start_9) (+ Start_9 Start_2) (div Start_1 Start_3)))
   (Start_7 Int (5 1 (+ Start_4 Start_4) (div Start Start_7) (mod Start_4 Start_2)))
   (Start_2 Int (1 (- Start_1 Start_1) (+ Start_2 Start_2) (* Start_2 Start) (mod Start_1 Start_1)))
   (Start_9 Int (3 (- Start_7) (- Start_4 Start) (+ Start_6 Start_10) (ite StartBool_3 Start_10 Start_10)))
   (StartBool_4 Bool (true (and StartBool_4 StartBool_4) (= Start_12 Start_13) (>= Start_14 Start)))
   (StartBool_1 Bool (true (<= Start_2 Start) (>= Start_1 Start_3) (> Start_2 Start_4)))
   (Start_3 Int (2 (- Start_7) (+ Start_8 Start_9) (* Start_1 Start_8) (div Start_8 Start_8) (abs Start_7)))
   (Start_1 Int (2 1 (* Start_9 Start_6) (div Start_10 Start_13) (abs Start_14)))
   (Start_4 Int (3 1 2 (- Start_2 Start_4) (+ Start Start_1) (* Start_4 Start_2) (mod Start_1 Start) (abs Start_5) (ite StartBool_2 Start_5 Start_2)))
   (Start_10 Int (0 (- Start_4) (* Start_8 Start) (div Start_6 Start_1) (mod Start_11 Start_6) (abs Start_12)))
   (StartBool_2 Bool (true false (not StartBool) (< Start_3 Start_4) (= Start_1 Start) (>= Start Start_4) (> Start_5 Start_3)))
   (Start_5 Int (2 (- Start) (+ Start_6 Start_4) (abs Start)))
   (Start_6 Int (5 0 3 x y 2 (- Start_7 Start_3) (+ Start_3 Start) (ite StartBool Start_5 Start_4)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_3) (or StartBool_3 StartBool) (= Start_7 Start_8) (>= Start_7 Start_6)))
   (Start_12 Int (1 2 0 x y 4 (- Start_5 Start_2) (+ Start Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 5 (div 1 y))))

(check-synth)
