(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (StartBool_2 Bool) (Start_1 Int) (Start_20 Int) (Start_18 Int) (Start_10 Int) (Start_2 Int) (Start_17 Int) (Start_7 Int) (StartBool_3 Bool) (Start_19 Int) (StartBool_1 Bool) (Start_9 Int) (Start_8 Int) (Start_6 Int) (StartBool_4 Bool) (Start_15 Int) (Start_13 Int) (Start_4 Int) (Start_12 Int) (Start_5 Int) (Start_14 Int) (Start_21 Int) (Start_16 Int) (StartBool_5 Bool) (Start_11 Int))
  ((Start Int (2 1 (+ Start_1 Start) (* Start_1 Start_2) (div Start Start_1) (mod Start_3 Start_1) (abs Start_3) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (true (not StartBool_4) (and StartBool StartBool) (or StartBool StartBool) (< Start Start_20) (= Start_20 Start_5) (>= Start_19 Start_17)))
   (Start_3 Int (0 4 1 (- Start_21) (+ Start_13 Start_10) (abs Start_10)))
   (StartBool_2 Bool (false (or StartBool_2 StartBool_3) (< Start_15 Start_14) (= Start Start_16)))
   (Start_1 Int (0 (- Start_17) (- Start_20 Start_11) (+ Start_16 Start_4) (mod Start_18 Start_1) (abs Start_3)))
   (Start_20 Int (y 5 1 (* Start_16 Start_12) (div Start_8 Start_18)))
   (Start_18 Int (0 5 2 x (- Start_13) (div Start_13 Start_2) (abs Start_7)))
   (Start_10 Int (4 3 1 0 (- Start_4 Start_8) (* Start_3 Start_9) (mod Start_4 Start_7) (ite StartBool Start_5 Start_3)))
   (Start_2 Int (2 5 (+ Start_14 Start_19) (* Start_3 Start_11)))
   (Start_17 Int (3 1 (- Start_3 Start_15) (+ Start_1 Start_15) (* Start Start_16) (div Start_19 Start_7) (mod Start_11 Start_9)))
   (Start_7 Int (4 2 y (- Start) (- Start_3 Start_7) (+ Start_3 Start_8) (mod Start_1 Start) (ite StartBool_3 Start_1 Start_2)))
   (StartBool_3 Bool (false (not StartBool_1) (< Start_2 Start_1) (= Start_8 Start_5) (>= Start_3 Start_9)))
   (Start_19 Int (0 (- Start_15) (+ Start_19 Start_19) (mod Start_19 Start_10) (abs Start_20) (ite StartBool_4 Start_13 Start_8)))
   (StartBool_1 Bool (true false (not StartBool_2) (< Start_1 Start_4) (<= Start_5 Start_6) (= Start_2 Start_1) (>= Start_2 Start_7)))
   (Start_9 Int (x (+ Start_8 Start_10) (mod Start_7 Start_7) (abs Start) (ite StartBool Start_2 Start_10)))
   (Start_8 Int (3 (- Start_11 Start_9) (+ Start Start_1) (* Start_7 Start_12) (ite StartBool_4 Start_13 Start_7)))
   (Start_6 Int (0 (- Start_16) (- Start_17 Start_15) (* Start_17 Start_10) (mod Start_18 Start_18) (abs Start_4)))
   (StartBool_4 Bool (false true (or StartBool_5 StartBool_4) (<= Start_5 Start_1) (>= Start_11 Start_7) (> Start_5 Start_13)))
   (Start_15 Int (x 1 3 5 4 2 0 y (- Start_5) (- Start_15 Start_12) (+ Start_2 Start_14) (mod Start_7 Start_9)))
   (Start_13 Int (3 (+ Start_12 Start) (* Start_13 Start_2) (div Start_12 Start_3) (mod Start_1 Start_4) (abs Start_2)))
   (Start_4 Int (x (- Start_9 Start_11) (+ Start_6 Start_5) (* Start Start_19) (div Start_2 Start_10) (mod Start_7 Start_15)))
   (Start_12 Int (5 (- Start_14 Start_11) (* Start_6 Start_6)))
   (Start_5 Int (1 4 (div Start_13 Start_6) (abs Start_11) (ite StartBool_1 Start_1 Start_10)))
   (Start_14 Int (1 x (- Start_12 Start_6) (+ Start_14 Start_10) (* Start_4 Start_4) (abs Start_10) (ite StartBool Start_8 Start_1)))
   (Start_21 Int (x 4 (- Start_2) (* Start_9 Start_1) (div Start_14 Start_16)))
   (Start_16 Int (0 (- Start_11 Start) (+ Start_17 Start_7) (div Start_19 Start_20) (ite StartBool_2 Start_1 Start_20)))
   (StartBool_5 Bool (true (< Start_6 Start_13) (<= Start_8 Start_4) (= Start_5 Start_10) (>= Start_1 Start_11)))
   (Start_11 Int (3 x y (- Start_8 Start_4) (+ Start_3 Start_2) (* Start_14 Start_13) (div Start_9 Start_15) (ite StartBool Start_8 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* 3 y))))

(check-synth)
