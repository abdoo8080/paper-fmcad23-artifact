(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_1 Int) (Start_12 Int) (Start_15 Int) (StartBool_4 Bool) (StartBool_2 Bool) (StartBool_3 Bool) (StartBool_1 Bool) (Start_9 Int) (Start_14 Int) (Start_4 Int) (Start_5 Int) (Start_2 Int) (Start_8 Int) (Start_6 Int) (Start_17 Int) (Start_7 Int) (Start_11 Int) (Start_10 Int) (StartBool_5 Bool) (Start_3 Int) (Start_13 Int))
  ((Start Int (1 (- Start) (+ Start_1 Start_1) (* Start_1 Start) (div Start Start_2) (mod Start_2 Start_1) (abs Start)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_3 StartBool_5) (or StartBool_3 StartBool_1)))
   (Start_16 Int (x (mod Start_9 Start_9) (ite StartBool_1 Start_1 Start_17)))
   (Start_1 Int (1 4 y x 3 (+ Start_8 Start_1) (* Start_11 Start_6) (div Start_9 Start_8) (mod Start_16 Start_11)))
   (Start_12 Int (4 0 5 1 x (- Start_4) (- Start_5 Start_15) (* Start_6 Start_15) (mod Start_13 Start_5) (abs Start_10)))
   (Start_15 Int (4 (+ Start_9 Start_11) (* Start_2 Start_11) (mod Start_1 Start_11)))
   (StartBool_4 Bool (true false (not StartBool_3) (= Start_2 Start_2) (>= Start_1 Start_15) (> Start_3 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_4) (<= Start_10 Start)))
   (StartBool_3 Bool (false (or StartBool StartBool_2) (< Start_2 Start_9) (>= Start_2 Start_13)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool StartBool_3) (< Start_7 Start_10) (= Start_14 Start_4) (>= Start Start_4) (> Start_4 Start_2)))
   (Start_9 Int (0 (- Start_4 Start) (+ Start_10 Start_10) (* Start Start_4) (div Start_2 Start_8) (mod Start_1 Start_6) (ite StartBool Start_8 Start_11)))
   (Start_14 Int (5 4 y 1 (- Start_13) (+ Start_14 Start_3) (div Start_7 Start_6) (abs Start_1) (ite StartBool_1 Start_9 Start_8)))
   (Start_4 Int (4 (- Start_3) (* Start_1 Start_4) (div Start_3 Start_1) (ite StartBool Start_5 Start_4)))
   (Start_5 Int (1 (- Start_4 Start_2) (+ Start_1 Start) (* Start_6 Start_6) (div Start_5 Start_1) (mod Start_5 Start_2) (abs Start)))
   (Start_2 Int (4 (- Start_2 Start_1) (+ Start_1 Start_2) (* Start_3 Start_4) (mod Start Start_2)))
   (Start_8 Int (0 (- Start Start_7) (+ Start_6 Start_7) (ite StartBool Start_6 Start_5)))
   (Start_6 Int (5 y (- Start_2) (+ Start_2 Start) (* Start_7 Start_3) (div Start_5 Start_5) (mod Start_3 Start_4)))
   (Start_17 Int (0 5 (- Start_10 Start_3) (* Start Start_16) (div Start_12 Start_3) (mod Start_17 Start_14) (abs Start_8) (ite StartBool_5 Start_17 Start_15)))
   (Start_7 Int (5 2 (- Start_5 Start_1) (+ Start Start_6) (* Start_3 Start_5) (div Start_3 Start_8) (ite StartBool Start_4 Start_4)))
   (Start_11 Int (2 (- Start_11) (+ Start_9 Start_5) (div Start_8 Start_11) (mod Start_9 Start_4)))
   (Start_10 Int (1 5 0 3 (* Start_9 Start_5) (div Start_12 Start_1) (mod Start_2 Start_13)))
   (StartBool_5 Bool (true (not StartBool_1) (and StartBool StartBool_1) (< Start_1 Start_16) (> Start_3 Start_5)))
   (Start_3 Int (1 x (- Start_1) (- Start Start_8) (+ Start_6 Start_7) (div Start_9 Start_1) (mod Start_1 Start_2) (abs Start_1)))
   (Start_13 Int (1 (+ Start_9 Start_1) (* Start_14 Start_13) (div Start_11 Start_10) (abs Start_3) (ite StartBool Start_14 Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- (div 2 x) 1))))

(check-synth)
