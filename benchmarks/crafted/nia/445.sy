(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_11 Int) (Start_1 Int) (Start_2 Int) (StartBool_1 Bool) (Start_4 Int) (Start_6 Int) (Start_8 Int) (StartBool_2 Bool) (Start_10 Int) (StartBool_3 Bool) (Start_13 Int) (Start_9 Int) (Start_7 Int) (Start_5 Int) (StartBool_4 Bool) (Start_3 Int))
  ((Start Int (y 0 x (- Start) (+ Start Start_1)))
   (StartBool Bool (false true (and StartBool_1 StartBool_3) (or StartBool_2 StartBool_4) (= Start_5 Start_6) (>= Start_5 Start_12)))
   (Start_12 Int (1 (- Start_8) (- Start_5 Start_8) (* Start_2 Start_3) (div Start_10 Start_3) (mod Start_7 Start_8) (abs Start_5)))
   (Start_11 Int (0 1 (- Start_12) (- Start_2 Start_4) (* Start_11 Start_5) (div Start_8 Start_9) (abs Start_10) (ite StartBool Start_3 Start_11)))
   (Start_1 Int (2 (- Start Start_2) (* Start_2 Start_3) (mod Start Start_4) (abs Start_3)))
   (Start_2 Int (3 (- Start_11) (- Start_9 Start) (+ Start_1 Start) (* Start_10 Start_10) (div Start_10 Start_6) (abs Start_3)))
   (StartBool_1 Bool (false true (or StartBool_1 StartBool_1) (<= Start_5 Start_8) (= Start_2 Start) (> Start_5 Start_1)))
   (Start_4 Int (1 (- Start_1) (- Start_5 Start_6) (ite StartBool Start Start_5)))
   (Start_6 Int (x 0 1 2 (+ Start_3 Start_5) (* Start_6 Start_7) (ite StartBool_1 Start_3 Start_7)))
   (Start_8 Int (y 2 3 (div Start Start_4) (ite StartBool_2 Start_6 Start_3)))
   (StartBool_2 Bool (true false (or StartBool_3 StartBool) (< Start_3 Start_4) (<= Start_4 Start_9) (>= Start_7 Start_5) (> Start_10 Start_8)))
   (Start_10 Int (3 (- Start_7) (- Start_8 Start_9) (mod Start_3 Start_7) (abs Start_9)))
   (StartBool_3 Bool (false (not StartBool_3) (or StartBool_1 StartBool_3) (< Start_6 Start) (>= Start_7 Start_5)))
   (Start_13 Int (x (- Start_8 Start_1) (+ Start_7 Start_1) (* Start_7 Start_11) (mod Start_11 Start_1) (ite StartBool_4 Start_4 Start_13)))
   (Start_9 Int (0 (div Start_10 Start_7) (mod Start_9 Start_4)))
   (Start_7 Int (4 (- Start_8) (+ Start_3 Start_3) (div Start_5 Start_2) (mod Start_3 Start_1) (abs Start_3)))
   (Start_5 Int (3 (- Start_10) (+ Start_8 Start_9) (div Start_1 Start_4)))
   (StartBool_4 Bool (false (not StartBool) (and StartBool_4 StartBool_4) (> Start_1 Start_13)))
   (Start_3 Int (x 0 (- Start_1) (- Start_4 Start_4) (+ Start_1 Start_4) (div Start_11 Start_7) (mod Start_5 Start_2) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod (abs (+ 2 x)) 3))))

(check-synth)
