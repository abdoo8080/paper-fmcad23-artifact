(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_6 Int) (Start_7 Int) (Start_9 Int) (Start_2 Int) (Start_8 Int) (Start_4 Int) (StartBool_1 Bool) (Start_5 Int) (Start_3 Int))
  ((Start Int (5 (- Start_1 Start_2) (* Start_1 Start_3) (div Start Start) (mod Start Start_2) (abs Start_2)))
   (StartBool Bool (false true (< Start_1 Start_9) (<= Start_4 Start_7) (= Start_7 Start_6) (>= Start_6 Start_6) (> Start_1 Start_7)))
   (Start_1 Int (3 (- Start_7) (- Start_7 Start_8) (mod Start_5 Start_8)))
   (Start_6 Int (4 x 0 1 (- Start_9) (div Start_2 Start_6) (mod Start_4 Start_8) (abs Start_4)))
   (Start_7 Int (y (* Start_4 Start_3) (div Start_4 Start_6) (mod Start_8 Start_2) (abs Start_2)))
   (Start_9 Int (y 5 (- Start_1) (mod Start Start_6) (abs Start_2) (ite StartBool_1 Start_2 Start_9)))
   (Start_2 Int (5 (- Start_2 Start_6) (+ Start_1 Start_7) (* Start_7 Start_8) (mod Start Start_6) (ite StartBool Start_3 Start_5)))
   (Start_8 Int (4 1 (+ Start_6 Start_5) (* Start_7 Start_4) (div Start_6 Start_2) (mod Start_2 Start_4)))
   (Start_4 Int (0 (+ Start_5 Start_4) (* Start_1 Start_2) (div Start_5 Start) (mod Start_2 Start_2) (abs Start_2)))
   (StartBool_1 Bool (false (not StartBool) (<= Start Start_7) (= Start_6 Start_2) (> Start_5 Start_4)))
   (Start_5 Int (5 1 0 3 (- Start_5 Start_1) (+ Start_4 Start) (div Start_2 Start_4)))
   (Start_3 Int (y 0 (* Start_3 Start_4) (div Start_4 Start_2) (mod Start_4 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 4 (* x 4))))

(check-synth)
