(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_5 Int) (Start_1 Int) (Start_2 Int) (Start_4 Int) (Start_6 Int) (StartBool_1 Bool) (Start_3 Int) (Start_8 Int) (StartBool_2 Bool) (Start_7 Int) (Start_9 Int) (StartBool_3 Bool))
  ((Start Int (x (- Start) (- Start_1 Start) (div Start Start_1) (mod Start_2 Start_2) (abs Start_2) (ite StartBool Start_3 Start_1)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (>= Start_4 Start_5)))
   (Start_5 Int (4 x (- Start_1 Start_2) (+ Start_3 Start) (div Start_1 Start_5) (mod Start_2 Start_5) (ite StartBool_1 Start_4 Start)))
   (Start_1 Int (y (- Start_4 Start_1) (* Start_1 Start_4) (abs Start_6)))
   (Start_2 Int (2 (- Start_1 Start_3) (+ Start_3 Start_5) (* Start_4 Start_4) (div Start Start_3) (abs Start_3)))
   (Start_4 Int (y 2 (* Start_1 Start_1) (div Start_1 Start_4) (mod Start_3 Start_2) (abs Start_1) (ite StartBool_1 Start_4 Start_1)))
   (Start_6 Int (0 (div Start_7 Start_5) (mod Start_3 Start_5) (abs Start_2) (ite StartBool Start_3 Start_3)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_2 StartBool_2) (< Start_1 Start) (= Start_1 Start_5)))
   (Start_3 Int (3 (- Start) (* Start_1 Start) (mod Start_3 Start_4) (abs Start)))
   (Start_8 Int (5 (- Start_1 Start_1) (+ Start_5 Start_1) (div Start_2 Start_3) (mod Start_9 Start_3) (abs Start_2) (ite StartBool_2 Start_3 Start_2)))
   (StartBool_2 Bool (false (and StartBool StartBool_1) (= Start Start_2) (>= Start_2 Start_2) (> Start_3 Start_5)))
   (Start_7 Int (0 (* Start_4 Start_8) (div Start_4 Start_8) (mod Start_2 Start_4) (ite StartBool_3 Start_9 Start_5)))
   (Start_9 Int (4 2 (- Start_1) (- Start_5 Start_1) (+ Start_9 Start_2) (* Start_7 Start) (div Start_7 Start_2) (ite StartBool Start_8 Start_8)))
   (StartBool_3 Bool (false true (not StartBool_1) (or StartBool StartBool_1) (<= Start_9 Start_2) (>= Start Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 5 (+ 4 (* x 4)))))

(check-synth)
