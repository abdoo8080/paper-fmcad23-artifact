(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_13 Int) (Start_5 Int) (StartBool_2 Bool) (Start_3 Int) (Start_1 Int) (Start_12 Int) (Start_2 Int) (StartBool_3 Bool) (Start_7 Int) (StartBool_1 Bool) (Start_9 Int) (Start_6 Int) (Start_8 Int) (Start_10 Int) (Start_11 Int))
  ((Start Int (x 1 (* Start Start)))
   (StartBool Bool (false true (< Start Start_1) (<= Start_1 Start_2) (= Start Start) (>= Start_2 Start)))
   (Start_4 Int (1 (- Start_11) (div Start_12 Start_3) (mod Start_4 Start_10) (ite StartBool Start_3 Start_7)))
   (Start_13 Int (1 (- Start_2) (- Start_10 Start_11) (div Start_1 Start_8)))
   (Start_5 Int (3 y x (- Start_6 Start_2) (mod Start_12 Start_9) (ite StartBool_2 Start_2 Start_13)))
   (StartBool_2 Bool (true false (< Start_12 Start_12)))
   (Start_3 Int (x 3 (- Start_4) (- Start_1 Start_4) (* Start_5 Start_3) (ite StartBool_1 Start_4 Start_5)))
   (Start_1 Int (3 (- Start_2) (+ Start_3 Start_12) (ite StartBool_1 Start_9 Start_11)))
   (Start_12 Int (x 1 y 2 (- Start_11) (- Start Start_3) (* Start_7 Start_6) (div Start_4 Start_2) (mod Start_4 Start_9) (ite StartBool_1 Start_3 Start_12)))
   (Start_2 Int (1 0 (- Start_2) (- Start_2 Start_2) (* Start_2 Start_2) (div Start_2 Start_2) (abs Start_3) (ite StartBool Start_3 Start_1)))
   (StartBool_3 Bool (false (and StartBool StartBool) (or StartBool_3 StartBool_1) (< Start_8 Start_8) (> Start_10 Start_1)))
   (Start_7 Int (4 (- Start_4) (+ Start_1 Start_1) (div Start_3 Start) (mod Start_4 Start_8) (abs Start_9) (ite StartBool_3 Start_2 Start)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool StartBool_3) (< Start_6 Start_4) (= Start_5 Start_7) (> Start_1 Start_7)))
   (Start_9 Int (0 (- Start_2) (+ Start Start_3) (div Start_8 Start_9) (mod Start_3 Start_8) (abs Start_9) (ite StartBool_1 Start_9 Start_7)))
   (Start_6 Int (5 (- Start_6) (+ Start_5 Start_7) (* Start_9 Start_7) (abs Start_9) (ite StartBool_2 Start_7 Start_6)))
   (Start_8 Int (3 (- Start_8) (- Start_7 Start_9) (div Start_7 Start_2) (ite StartBool_2 Start_9 Start_9)))
   (Start_10 Int (x (- Start_3 Start_3) (* Start Start_11) (div Start_10 Start_9)))
   (Start_11 Int (3 y x (- Start_9) (- Start_3 Start_9) (+ Start_6 Start_8) (* Start_7 Start_12) (div Start_3 Start_2) (mod Start_3 Start_5) (ite StartBool_3 Start_3 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 1 (- x))))

(check-synth)
