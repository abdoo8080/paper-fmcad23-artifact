(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_11 Int) (Start_14 Int) (Start_12 Int) (Start_3 Int) (Start_15 Int) (Start_13 Int) (Start_8 Int) (Start_9 Int) (Start_17 Int) (Start_4 Int) (StartBool_6 Bool) (Start_2 Int) (Start_7 Int) (StartBool_2 Bool) (Start_1 Int) (Start_10 Int) (Start_5 Int) (StartBool_4 Bool) (Start_6 Int) (StartBool_1 Bool) (StartBool_3 Bool) (StartBool_7 Bool) (StartBool_5 Bool) (StartBool_8 Bool))
  ((Start Int (y (- Start) (* Start Start_1)))
   (StartBool Bool (true (< Start_17 Start_15)))
   (Start_16 Int (y (+ Start_7 Start_5) (* Start Start_1) (mod Start_8 Start_8) (abs Start_17)))
   (Start_11 Int (5 (- Start_12) (- Start_16 Start) (+ Start_16 Start_11) (* Start_6 Start_16) (mod Start_14 Start_11)))
   (Start_14 Int (3 2 (- Start_4) (- Start Start_5) (+ Start_13 Start_15) (* Start_13 Start_1) (ite StartBool_6 Start_8 Start_9)))
   (Start_12 Int (1 (- Start_11 Start_4) (+ Start_9 Start_4) (* Start_8 Start_13) (div Start_11 Start_14) (mod Start_12 Start_2) (ite StartBool_1 Start_14 Start_6)))
   (Start_3 Int (4 (- Start_2) (* Start_5 Start_3) (div Start_11 Start_11) (mod Start Start_6) (abs Start_3) (ite StartBool_2 Start_12 Start_13)))
   (Start_15 Int (2 (- Start_8 Start_5) (+ Start_13 Start_8) (div Start Start_6)))
   (Start_13 Int (1 (- Start_2) (- Start_7 Start_12) (* Start_3 Start_10) (div Start_2 Start_13) (abs Start_12) (ite StartBool_3 Start_9 Start_4)))
   (Start_8 Int (4 (- Start_9 Start_1) (mod Start_5 Start_5) (ite StartBool_8 Start Start_10)))
   (Start_9 Int (5 4 0 (- Start_3) (* Start_5 Start_2)))
   (Start_17 Int (0 2 y 1 (- Start_14) (+ Start_2 Start_11) (* Start_12 Start_3) (div Start_11 Start_3) (mod Start_8 Start_17) (abs Start_12)))
   (Start_4 Int (1 (- Start_2 Start_4) (div Start_8 Start_9) (mod Start_9 Start_1)))
   (StartBool_6 Bool (false true (or StartBool_1 StartBool_2) (= Start_3 Start_2) (>= Start_2 Start_4) (> Start Start_6)))
   (Start_2 Int (1 (- Start_1 Start) (* Start Start_2) (mod Start_3 Start_4) (abs Start_1) (ite StartBool_1 Start_1 Start_4)))
   (Start_7 Int (2 (- Start_4) (div Start Start_1) (abs Start_1) (ite StartBool_5 Start_6 Start_1)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_3 StartBool) (>= Start_4 Start_6)))
   (Start_1 Int (1 (- Start_2 Start_2) (* Start Start) (div Start Start_2)))
   (Start_10 Int (0 y (- Start_5) (+ Start_2 Start_4) (abs Start_10)))
   (Start_5 Int (2 (- Start_1) (* Start_5 Start_4) (div Start_1 Start_5)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_4 StartBool) (<= Start_7 Start_5) (>= Start_7 Start_1) (> Start_4 Start_4)))
   (Start_6 Int (3 2 5 (- Start_6) (- Start_6 Start_6) (* Start_2 Start_4)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (or StartBool StartBool_1) (< Start_4 Start) (<= Start_1 Start_2) (= Start_5 Start_5)))
   (StartBool_3 Bool (true false (not StartBool_4) (= Start_4 Start) (> Start_1 Start_1)))
   (StartBool_7 Bool (false (and StartBool_8 StartBool_8) (or StartBool_7 StartBool_3) (< Start_3 Start_6) (= Start_1 Start_3)))
   (StartBool_5 Bool (true (not StartBool_1) (and StartBool_2 StartBool_6) (or StartBool_1 StartBool_7) (= Start_6 Start_3) (>= Start_5 Start_1)))
   (StartBool_8 Bool (false (not StartBool_1) (or StartBool_5 StartBool_8) (< Start_7 Start_2) (> Start_6 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 2 (+ (mod x 4) 1))))

(check-synth)
