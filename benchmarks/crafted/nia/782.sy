(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_10 Int) (Start_11 Int) (Start_2 Int) (Start_1 Int) (Start_3 Int) (StartBool_4 Bool) (Start_4 Int) (Start_6 Int) (Start_7 Int) (StartBool_2 Bool) (Start_8 Int) (Start_9 Int) (Start_5 Int) (StartBool_3 Bool) (StartBool_1 Bool))
  ((Start Int (x 0 y 3 (* Start_1 Start) (abs Start)))
   (StartBool Bool (true (< Start_8 Start_12) (>= Start_11 Start_11) (> Start_2 Start_9)))
   (Start_12 Int (x (+ Start_1 Start_12) (mod Start_9 Start) (abs Start_7) (ite StartBool_3 Start_12 Start_8)))
   (Start_10 Int (3 4 0 (- Start_5 Start_5) (* Start_3 Start_12) (mod Start_3 Start_1) (abs Start_12)))
   (Start_11 Int (2 5 (- Start_3 Start_9) (abs Start_1)))
   (Start_2 Int (5 (+ Start_10 Start_11) (div Start_11 Start_8) (mod Start_9 Start_3)))
   (Start_1 Int (x (- Start) (* Start_2 Start_3) (mod Start_2 Start) (ite StartBool Start_2 Start_3)))
   (Start_3 Int (3 (- Start_3 Start_1) (+ Start_3 Start_1) (* Start_2 Start_1) (mod Start Start_3) (abs Start_3) (ite StartBool_1 Start_4 Start_5)))
   (StartBool_4 Bool (false (not StartBool_2) (or StartBool_4 StartBool_1) (< Start_1 Start_7) (> Start_2 Start_1)))
   (Start_4 Int (x (- Start_6) (- Start Start_6) (div Start_2 Start_4)))
   (Start_6 Int (1 (- Start_7) (* Start_7 Start_2) (div Start_4 Start_1) (mod Start_2 Start_1)))
   (Start_7 Int (4 (- Start_6 Start_8) (+ Start_4 Start_7) (* Start_5 Start_6) (mod Start_5 Start_2) (abs Start_2) (ite StartBool_2 Start_2 Start_4)))
   (StartBool_2 Bool (false (not StartBool_1) (>= Start_7 Start_2) (> Start_5 Start_4)))
   (Start_8 Int (x 0 (- Start_7) (* Start_9 Start_3) (abs Start_2) (ite StartBool_2 Start_6 Start)))
   (Start_9 Int (3 1 (- Start_6) (- Start_8 Start_9) (+ Start_8 Start_3) (* Start Start_5) (div Start_5 Start_8) (mod Start_8 Start_9) (ite StartBool_3 Start_5 Start_9)))
   (Start_5 Int (5 (- Start) (- Start_4 Start_5) (div Start_4 Start_5) (mod Start_1 Start_1) (abs Start_1)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_1) (< Start_2 Start_5)))
   (StartBool_1 Bool (false (not StartBool_4) (and StartBool_3 StartBool) (<= Start_1 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs (div 4 y)))))

(check-synth)
