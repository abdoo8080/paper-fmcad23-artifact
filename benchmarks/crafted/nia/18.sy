(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_1 Int) (Start_15 Int) (StartBool_4 Bool) (Start_4 Int) (Start_13 Int) (Start_3 Int) (Start_17 Int) (Start_5 Int) (Start_7 Int) (Start_14 Int) (Start_11 Int) (Start_8 Int) (Start_16 Int) (StartBool_1 Bool) (Start_10 Int) (Start_9 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_2 Int) (Start_12 Int) (Start_6 Int))
  ((Start Int (4 (- Start_1 Start_2) (+ Start_3 Start) (* Start Start) (div Start_2 Start) (mod Start_3 Start)))
   (StartBool Bool (true false (not StartBool) (or StartBool_5 StartBool) (= Start_3 Start_3) (>= Start_10 Start_13) (> Start_15 Start)))
   (StartBool_5 Bool (true false (or StartBool StartBool) (>= Start_8 Start_12) (> Start_9 Start_1)))
   (Start_1 Int (y (+ Start_10 Start_14) (* Start_4 Start_17) (div Start_11 Start_17) (abs Start_1) (ite StartBool_4 Start_2 Start_10)))
   (Start_15 Int (2 (- Start_10) (+ Start_4 Start_17) (div Start_5 Start_10) (mod Start_3 Start_16) (abs Start)))
   (StartBool_4 Bool (true false (< Start_15 Start_6) (>= Start_8 Start_4) (> Start_7 Start_16)))
   (Start_4 Int (4 (- Start_6) (- Start_13 Start_11) (+ Start_8 Start_2) (* Start_1 Start_1) (div Start_5 Start_9) (abs Start_13) (ite StartBool Start_11 Start_14)))
   (Start_13 Int (x (mod Start Start_7)))
   (Start_3 Int (5 0 (+ Start_4 Start_4) (* Start_5 Start_4) (abs Start_5)))
   (Start_17 Int (0 (- Start_15) (- Start_3 Start_10) (* Start_2 Start_7) (mod Start_15 Start_10)))
   (Start_5 Int (y (- Start_4) (* Start_2 Start_6) (div Start_7 Start_7) (ite StartBool Start_2 Start_7)))
   (Start_7 Int (5 3 (- Start_6) (+ Start_7 Start) (div Start_8 Start_6) (mod Start_2 Start_7) (abs Start)))
   (Start_14 Int (4 0 1 5 (- Start_1 Start_12) (mod Start_12 Start_11) (abs Start_14) (ite StartBool_4 Start_11 Start_2)))
   (Start_11 Int (x (- Start_6) (- Start_2 Start_12) (+ Start_9 Start_10) (* Start Start_5) (div Start_6 Start_9) (mod Start_3 Start_4)))
   (Start_8 Int (y 5 (- Start_8) (* Start_6 Start_1) (abs Start_5) (ite StartBool_1 Start_6 Start_6)))
   (Start_16 Int (0 y x (- Start_9) (+ Start Start_11) (mod Start_17 Start_5)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (or StartBool_2 StartBool) (< Start_9 Start_5) (<= Start_10 Start_9) (= Start_6 Start_4) (>= Start_4 Start_5)))
   (Start_10 Int (x (- Start_1) (- Start_1 Start_1) (div Start_10 Start_3) (abs Start_9) (ite StartBool Start_1 Start_10)))
   (Start_9 Int (x 5 (- Start_9) (- Start Start_2) (* Start_8 Start_10) (div Start_8 Start_2) (abs Start_7)))
   (StartBool_3 Bool (false (or StartBool_1 StartBool_3) (< Start Start_2) (>= Start_8 Start_3)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool) (<= Start_1 Start_1) (= Start_11 Start_10) (>= Start_5 Start_7) (> Start_11 Start)))
   (Start_2 Int (y 3 (- Start_6) (- Start_12 Start_13) (+ Start_4 Start_15) (* Start_10 Start_9) (div Start_3 Start_13) (ite StartBool_2 Start_12 Start_7)))
   (Start_12 Int (y (- Start_1) (+ Start_12 Start) (* Start_9 Start_2) (div Start_1 Start_11) (mod Start_10 Start_1)))
   (Start_6 Int (x 0 2 1 (+ Start_9 Start_4) (* Start_1 Start_13) (mod Start_12 Start_9) (ite StartBool_2 Start_2 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs y)))

(check-synth)
