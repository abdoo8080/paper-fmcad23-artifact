(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (StartBool_7 Bool) (Start_16 Int) (Start_13 Int) (Start_11 Int) (Start_10 Int) (Start_1 Int) (Start_2 Int) (StartBool_6 Bool) (Start_3 Int) (Start_5 Int) (Start_8 Int) (StartBool_1 Bool) (Start_4 Int) (Start_6 Int) (Start_7 Int) (StartBool_2 Bool) (Start_15 Int) (StartBool_3 Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_14 Int) (Start_9 Int))
  ((Start Int (1 3 2 (mod Start_1 Start_2) (abs Start_1)))
   (StartBool Bool (false (< Start_12 Start_6) (<= Start_10 Start_3) (= Start_7 Start_13) (>= Start_8 Start_6) (> Start_1 Start_14)))
   (Start_12 Int (3 5 (- Start_14) (- Start_2 Start_1) (+ Start_1 Start_14) (div Start_11 Start_9) (mod Start_15 Start_8) (abs Start_1)))
   (StartBool_7 Bool (false true (not StartBool_6) (<= Start_3 Start_13) (= Start_14 Start_15) (> Start_8 Start_1)))
   (Start_16 Int (5 4 (- Start Start_5) (* Start_7 Start_9) (ite StartBool_3 Start_13 Start_9)))
   (Start_13 Int (x (- Start_6 Start_9) (div Start_11 Start_2) (ite StartBool_6 Start_15 Start_10)))
   (Start_11 Int (4 2 (- Start_8 Start) (abs Start_10)))
   (Start_10 Int (y (- Start_2) (- Start_11 Start_8) (+ Start_7 Start_2) (* Start_6 Start) (div Start_8 Start_7) (mod Start_2 Start_5) (abs Start_1)))
   (Start_1 Int (4 (- Start_5) (- Start_8 Start_2) (+ Start Start_10) (mod Start_4 Start_9) (abs Start_1) (ite StartBool Start_5 Start_2)))
   (Start_2 Int (0 y 4 (- Start_1) (* Start_2 Start_2) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_6 Bool (false true (and StartBool_7 StartBool_4) (<= Start Start_6) (>= Start_7 Start_14)))
   (Start_3 Int (3 1 4 (* Start Start) (div Start_3 Start) (abs Start_1)))
   (Start_5 Int (3 1 0 (* Start_5 Start)))
   (Start_8 Int (0 (- Start_5) (- Start_6 Start_2) (+ Start_7 Start_1) (* Start_4 Start) (ite StartBool_4 Start_9 Start_9)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_1) (<= Start_4 Start_5) (>= Start_3 Start_1)))
   (Start_4 Int (y 2 (* Start_4 Start_5) (ite StartBool Start_4 Start_3)))
   (Start_6 Int (0 (- Start_4) (+ Start_4 Start_7) (div Start_1 Start_3) (ite StartBool_5 Start_1 Start_7)))
   (Start_7 Int (2 (- Start_7 Start_5) (+ Start_3 Start_8) (div Start_6 Start_8) (ite StartBool Start_9 Start_7)))
   (StartBool_2 Bool (true false (not StartBool_3) (or StartBool_3 StartBool_3) (< Start_2 Start_3) (<= Start_5 Start) (= Start_2 Start_3)))
   (Start_15 Int (x (- Start_5 Start_14) (* Start_6 Start_16) (div Start_1 Start_3) (mod Start_5 Start_2) (abs Start_2) (ite StartBool_2 Start_13 Start_14)))
   (StartBool_3 Bool (true false (not StartBool_1) (or StartBool_4 StartBool_4) (< Start_3 Start_3) (> Start_4 Start_2)))
   (StartBool_5 Bool (true false (and StartBool_5 StartBool_1) (<= Start_8 Start_8) (> Start_6 Start_4)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_3) (or StartBool_3 StartBool_5) (<= Start_6 Start_5) (= Start Start_1) (>= Start_5 Start_2) (> Start_1 Start)))
   (Start_14 Int (y (+ Start_10 Start_14) (mod Start_9 Start_5)))
   (Start_9 Int (2 1 (+ Start_7 Start_9) (div Start Start_5) (abs Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (+ (mod x (mod 0 x)) (* y (+ 4 4))))))

(check-synth)
