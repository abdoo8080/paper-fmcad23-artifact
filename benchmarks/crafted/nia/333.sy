(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_1 Int) (StartBool_1 Bool) (Start_2 Int) (Start_5 Int) (Start_4 Int) (Start_3 Int))
  ((Start Int (x (- Start Start_1) (div Start_2 Start_3) (abs Start) (ite StartBool Start Start)))
   (StartBool Bool (true (<= Start_2 Start) (= Start_1 Start_4) (>= Start_6 Start_5)))
   (Start_6 Int (3 1 (- Start_5) (- Start_4 Start_2) (+ Start_5 Start_2) (* Start_1 Start_4) (abs Start_5)))
   (Start_1 Int (4 (+ Start_5 Start_4) (div Start_3 Start_2) (abs Start_1) (ite StartBool_1 Start Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (< Start Start) (= Start Start_4)))
   (Start_2 Int (4 x 0 5 3 1 2 (- Start_3) (- Start_1 Start_1) (+ Start Start_2) (mod Start_1 Start_4) (abs Start_1) (ite StartBool Start_2 Start_3)))
   (Start_5 Int (0 (- Start_2) (- Start Start_5)))
   (Start_4 Int (2 (- Start_2 Start_3) (+ Start_1 Start_1) (mod Start_1 Start_3) (abs Start) (ite StartBool_1 Start_4 Start_3)))
   (Start_3 Int (y (- Start_1) (mod Start_1 Start_2) (abs Start) (ite StartBool Start Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod y y) x)))

(check-synth)
