(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_8 Bool) (Start_1 Int) (Start_3 Int) (StartBool_5 Bool) (StartBool_6 Bool) (Start_2 Int) (Start_6 Int) (Start_5 Int) (Start_15 Int) (StartBool_4 Bool) (Start_10 Int) (Start_7 Int) (Start_9 Int) (Start_13 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_8 Int) (StartBool_7 Bool) (Start_11 Int) (Start_12 Int) (Start_4 Int) (Start_14 Int) (StartBool_3 Bool))
  ((Start Int (3 4 (- Start_1) (- Start Start) (* Start Start_2)))
   (StartBool Bool (false (not StartBool) (and StartBool_6 StartBool_8) (or StartBool_8 StartBool_7) (< Start_15 Start_7)))
   (StartBool_8 Bool (true false (not StartBool_1) (or StartBool_7 StartBool_8)))
   (Start_1 Int (x (- Start_1) (- Start_9 Start_13) (* Start_3 Start_1) (abs Start_2) (ite StartBool_3 Start_2 Start_6)))
   (Start_3 Int (x (- Start_3) (- Start_2 Start_3) (+ Start_11 Start_12) (mod Start_5 Start_1) (abs Start_5)))
   (StartBool_5 Bool (false (not StartBool_7) (or StartBool_3 StartBool_1) (< Start_8 Start_2) (<= Start_13 Start_6) (>= Start Start_8) (> Start_12 Start_8)))
   (StartBool_6 Bool (false true (not StartBool_6) (< Start_10 Start_5) (<= Start_6 Start_7) (= Start_13 Start_2) (>= Start_13 Start_5)))
   (Start_2 Int (1 0 4 2 (- Start_3) (+ Start_2 Start_1) (mod Start_4 Start_5) (abs Start)))
   (Start_6 Int (0 (- Start_5 Start) (* Start_8 Start_8) (abs Start_8) (ite StartBool_1 Start_9 Start_8)))
   (Start_5 Int (y x (- Start_3 Start_2) (* Start_1 Start_5) (div Start_5 Start_6) (abs Start) (ite StartBool Start_7 Start)))
   (Start_15 Int (y x 1 (- Start_4) (- Start_10 Start_15) (abs Start_4)))
   (StartBool_4 Bool (false (and StartBool_5 StartBool) (or StartBool_3 StartBool_6) (<= Start_1 Start) (= Start_7 Start_12)))
   (Start_10 Int (0 (- Start_3 Start_3) (ite StartBool_2 Start Start_3)))
   (Start_7 Int (5 (- Start_7) (- Start_3 Start_3) (+ Start_7 Start_5) (* Start Start_3) (div Start_6 Start_6) (abs Start) (ite StartBool Start_6 Start)))
   (Start_9 Int (y (- Start_1) (- Start_6 Start_4) (+ Start_2 Start_1) (* Start_4 Start) (abs Start_7) (ite StartBool Start_5 Start_2)))
   (Start_13 Int (1 (- Start_1) (div Start_4 Start_9) (ite StartBool_4 Start_6 Start_5)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_3) (or StartBool_1 StartBool_1) (= Start_4 Start) (>= Start_5 Start_8)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (>= Start_1 Start_9) (> Start_4 Start_2)))
   (Start_8 Int (1 (- Start) (mod Start Start) (abs Start_2)))
   (StartBool_7 Bool (true (and StartBool_1 StartBool_2) (< Start_14 Start) (= Start_12 Start_13) (> Start_13 Start_13)))
   (Start_11 Int (5 (- Start_5) (- Start_11 Start_3) (mod Start_5 Start_4)))
   (Start_12 Int (0 (- Start_6 Start_9) (* Start_6 Start_11) (mod Start_10 Start_2)))
   (Start_4 Int (2 (- Start_3) (mod Start_9 Start_3) (abs Start_10)))
   (Start_14 Int (2 (ite StartBool_5 Start_9 Start_13)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (or StartBool_3 StartBool_4) (<= Start_7 Start_4) (>= Start_11 Start_1) (> Start_7 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- 2) (* x 5))))

(check-synth)
