(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_18 Int) (StartBool_6 Bool) (Start_8 Int) (Start_9 Int) (Start_15 Int) (Start_16 Int) (Start_10 Int) (StartBool_5 Bool) (Start_4 Int) (Start_3 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_12 Int) (Start_2 Int) (Start_7 Int) (Start_1 Int) (StartBool_4 Bool) (Start_6 Int) (Start_13 Int) (Start_5 Int) (Start_17 Int) (StartBool_2 Bool) (Start_11 Int) (Start_14 Int))
  ((Start Int (1 (- Start_1 Start_1) (mod Start Start_2) (abs Start_3)))
   (StartBool Bool (true (<= Start_7 Start_17) (>= Start_12 Start_16)))
   (Start_19 Int (0 (- Start_6) (+ Start_17 Start_4) (* Start_14 Start_3) (mod Start_13 Start_12) (abs Start_2)))
   (Start_18 Int (4 (- Start_16) (- Start Start_15) (div Start_1 Start_14)))
   (StartBool_6 Bool (true (and StartBool_5 StartBool_4) (< Start_17 Start_10) (>= Start_3 Start_5)))
   (Start_8 Int (5 1 0 (- Start_2) (+ Start_2 Start_2) (* Start_14 Start_14)))
   (Start_9 Int (y 4 (- Start_13) (- Start_1 Start_11) (+ Start_9 Start_5) (* Start_1 Start_9) (div Start_15 Start_4) (mod Start_3 Start_3) (ite StartBool_1 Start_10 Start_1)))
   (Start_15 Int (1 x (+ Start Start_9) (div Start_5 Start_4)))
   (Start_16 Int (x 3 1 5 y 4 2 0 (- Start_12 Start_16) (* Start_8 Start_16) (abs Start_5) (ite StartBool_1 Start_5 Start_2)))
   (Start_10 Int (1 3 (- Start_5 Start_9) (* Start_8 Start_15) (ite StartBool_2 Start_12 Start_16)))
   (StartBool_5 Bool (true (not StartBool_1) (and StartBool_3 StartBool_2) (or StartBool StartBool_5) (< Start_13 Start_7) (>= Start_15 Start_2) (> Start_9 Start_16)))
   (Start_4 Int (3 2 4 0 (- Start_1 Start_2) (+ Start_1 Start_5) (mod Start_4 Start_6) (ite StartBool Start_5 Start_7)))
   (Start_3 Int (y (- Start_1) (* Start_2 Start_4) (div Start_4 Start_1) (mod Start_2 Start) (abs Start_2) (ite StartBool_1 Start Start_2)))
   (StartBool_3 Bool (true (or StartBool StartBool_2) (< Start_4 Start_4) (= Start_12 Start_9) (>= Start_6 Start_10)))
   (StartBool_1 Bool (true (<= Start_2 Start_4) (= Start_4 Start_2) (> Start_3 Start_3)))
   (Start_12 Int (5 (- Start_12) (* Start_6 Start_3) (div Start_5 Start_9) (mod Start_13 Start_10) (ite StartBool_4 Start Start_2)))
   (Start_2 Int (5 1 y (+ Start_17 Start_1) (div Start_3 Start) (ite StartBool_6 Start_2 Start_17)))
   (Start_7 Int (y (- Start_6) (- Start_4 Start) (+ Start_4 Start) (mod Start_1 Start_1)))
   (Start_1 Int (4 (- Start) (* Start_19 Start_3)))
   (StartBool_4 Bool (false (not StartBool_3) (and StartBool_5 StartBool_3) (< Start_12 Start_1) (= Start_1 Start_2) (>= Start_3 Start_6) (> Start_14 Start_11)))
   (Start_6 Int (4 5 (- Start_6) (- Start_5 Start_1) (+ Start_3 Start_3)))
   (Start_13 Int (1 4 (- Start_9) (* Start_10 Start_7) (div Start_16 Start_15) (mod Start_9 Start_6) (abs Start_2)))
   (Start_5 Int (0 (- Start_1) (- Start_7 Start_8) (+ Start_6 Start_3) (* Start_7 Start_4) (mod Start_3 Start_9) (abs Start_9) (ite StartBool_2 Start Start_8)))
   (Start_17 Int (y x (- Start_16) (* Start_17 Start_1) (div Start_14 Start_6) (mod Start_13 Start_9) (ite StartBool_6 Start Start_18)))
   (StartBool_2 Bool (false (not StartBool) (or StartBool_2 StartBool) (< Start_10 Start_9) (<= Start_6 Start_10) (= Start_11 Start) (> Start_7 Start_7)))
   (Start_11 Int (0 4 y 1 2 (- Start_3 Start_8) (+ Start_6 Start_2) (mod Start_2 Start_4) (abs Start_9) (ite StartBool_3 Start_5 Start_4)))
   (Start_14 Int (y (- Start_8) (mod Start Start_9) (abs Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod (div x y) 2) (div x x))))

(check-synth)
