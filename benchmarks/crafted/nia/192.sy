(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_3 Int) (StartBool_1 Bool) (Start_6 Int) (Start_4 Int) (Start_10 Int) (Start_9 Int) (Start_8 Int) (Start_7 Int) (Start_5 Int) (Start_1 Int) (Start_11 Int))
  ((Start Int (y 0 (- Start_1) (div Start_2 Start_2) (ite StartBool Start_1 Start)))
   (StartBool Bool (true false (or StartBool StartBool_1) (<= Start_4 Start_9) (>= Start_1 Start_7) (> Start_2 Start_4)))
   (Start_2 Int (3 (+ Start_2 Start) (div Start_2 Start) (mod Start Start_3) (ite StartBool Start_1 Start_3)))
   (Start_3 Int (1 (- Start_3 Start_4) (+ Start_4 Start_5) (* Start_4 Start_1) (div Start_5 Start) (mod Start_2 Start_3)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (< Start_4 Start_1) (<= Start_5 Start_2) (= Start_2 Start_1) (>= Start_2 Start_7) (> Start_2 Start_8)))
   (Start_6 Int (x y (- Start_6) (div Start_4 Start_5)))
   (Start_4 Int (5 (* Start_3 Start_4) (abs Start_5) (ite StartBool_1 Start_2 Start_6)))
   (Start_10 Int (4 (- Start_10) (+ Start_5 Start_5) (div Start_9 Start_7) (ite StartBool Start_5 Start_4)))
   (Start_9 Int (0 (- Start_9) (- Start_10 Start_4) (+ Start_4 Start_6) (* Start_7 Start_2) (abs Start_9)))
   (Start_8 Int (x (- Start_6 Start_5) (div Start_4 Start_4) (ite StartBool Start_5 Start_6)))
   (Start_7 Int (0 (- Start_3 Start_9) (div Start_4 Start) (mod Start_5 Start_10)))
   (Start_5 Int (x (- Start_6) (* Start_3 Start_6) (div Start_1 Start_3) (mod Start_3 Start_1) (abs Start_4)))
   (Start_1 Int (3 y 2 (+ Start_7 Start_7) (div Start_7 Start_6) (mod Start_6 Start_11) (abs Start_11)))
   (Start_11 Int (5 (+ Start_3 Start_5) (* Start_8 Start) (mod Start_8 Start_6) (ite StartBool_1 Start_1 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- (abs y)))))

(check-synth)
