(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_2 Int) (Start_5 Int) (Start_7 Int) (Start_8 Int) (Start_6 Int) (Start_1 Int) (Start_9 Int) (Start_4 Int) (StartBool_2 Bool) (Start_3 Int) (Start_10 Int))
  ((Start Int (2 (- Start_1 Start_1) (div Start Start_1)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (or StartBool StartBool_2) (>= Start_2 Start)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (< Start_2 Start_9) (<= Start_2 Start_6) (>= Start_3 Start_3) (> Start_9 Start)))
   (Start_2 Int (1 (- Start_2) (- Start_3 Start) (+ Start_2 Start_3) (* Start_4 Start_2) (mod Start_5 Start_5) (abs Start_3)))
   (Start_5 Int (4 x 3 2 (- Start_6) (- Start_1 Start_2) (+ Start_5 Start_1) (* Start_6 Start_5) (div Start Start_7) (abs Start_8) (ite StartBool_1 Start_7 Start_7)))
   (Start_7 Int (y (+ Start_5 Start) (* Start_8 Start_5) (div Start_6 Start_7) (mod Start_3 Start_3) (abs Start_4)))
   (Start_8 Int (1 (- Start Start_8) (div Start_6 Start_7) (mod Start_8 Start_4)))
   (Start_6 Int (4 y (- Start_5 Start_8) (* Start_5 Start_5) (div Start_2 Start_8) (mod Start Start_8) (abs Start_7) (ite StartBool_2 Start_5 Start_5)))
   (Start_1 Int (y 3 x 0 1 4 (+ Start_1 Start_1) (abs Start)))
   (Start_9 Int (4 (+ Start_3 Start_4) (* Start_7 Start) (mod Start_1 Start_4)))
   (Start_4 Int (2 (* Start_6 Start_3) (mod Start_9 Start_5) (abs Start_6)))
   (StartBool_2 Bool (false true (= Start_3 Start_8) (>= Start_7 Start_10) (> Start_4 Start_10)))
   (Start_3 Int (2 y (- Start_5) (* Start_6 Start_3) (abs Start_7)))
   (Start_10 Int (x (* Start_8 Start_4) (div Start_4 Start) (mod Start_7 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- x 1) 4)))

(check-synth)
