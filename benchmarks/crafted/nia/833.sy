(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_17 Int) (Start_16 Int) (Start_15 Int) (Start_11 Int) (StartBool_2 Bool) (Start_14 Int) (StartBool_1 Bool) (Start_1 Int) (Start_13 Int) (Start_3 Int) (Start_9 Int) (Start_4 Int) (StartBool_4 Bool) (Start_7 Int) (Start_2 Int) (Start_6 Int) (Start_8 Int) (Start_12 Int) (StartBool_3 Bool) (Start_5 Int) (Start_10 Int))
  ((Start Int (0 x y (- Start_1 Start_1) (+ Start_1 Start) (* Start Start_2) (div Start Start_2) (mod Start_1 Start_1) (abs Start_2) (ite StartBool_1 Start Start)))
   (StartBool Bool (false true (and StartBool_4 StartBool_1) (or StartBool_2 StartBool_4) (< Start_9 Start_17) (<= Start_5 Start_3) (= Start_7 Start_18) (>= Start_16 Start_15) (> Start_2 Start_4)))
   (Start_18 Int (1 3 (* Start_16 Start_13) (div Start_2 Start_10) (mod Start_3 Start_7)))
   (Start_17 Int (2 (- Start_1) (* Start_8 Start_11) (div Start_1 Start_5) (mod Start_17 Start_13) (abs Start_11) (ite StartBool_2 Start_12 Start_15)))
   (Start_16 Int (5 (- Start_15) (- Start_15 Start_17) (+ Start_4 Start_14)))
   (Start_15 Int (4 (- Start_9 Start_14) (+ Start_12 Start_2) (div Start_6 Start_4) (abs Start_4)))
   (Start_11 Int (5 (div Start_2 Start_10) (mod Start_8 Start_3) (abs Start)))
   (StartBool_2 Bool (false (or StartBool_3 StartBool_4) (>= Start_12 Start_7) (> Start_7 Start_8)))
   (Start_14 Int (y 0 3 4 (+ Start_11 Start_5) (mod Start_13 Start_9) (abs Start_9)))
   (StartBool_1 Bool (false (or StartBool_1 StartBool_1) (<= Start_3 Start)))
   (Start_1 Int (3 (- Start_16 Start_3) (+ Start_14 Start_13) (* Start Start_11) (abs Start_10) (ite StartBool_1 Start_14 Start_8)))
   (Start_13 Int (5 (- Start_7 Start_2) (+ Start_8 Start_2) (* Start_5 Start_5) (abs Start_4) (ite StartBool_3 Start_3 Start_5)))
   (Start_3 Int (2 1 (- Start) (- Start Start) (* Start Start_3) (div Start_3 Start_2) (mod Start_3 Start_3) (abs Start_4)))
   (Start_9 Int (4 3 (+ Start Start_4) (div Start_1 Start_2) (abs Start_4) (ite StartBool Start Start_7)))
   (Start_4 Int (0 5 (- Start_3 Start_4) (+ Start_4 Start_1) (div Start_5 Start_6)))
   (StartBool_4 Bool (false (or StartBool_3 StartBool_4) (< Start Start) (>= Start Start_7) (> Start Start_12)))
   (Start_7 Int (4 5 (- Start_1) (div Start_6 Start_8) (mod Start_4 Start_1)))
   (Start_2 Int (x y 5 (- Start_2) (- Start_1 Start_6) (mod Start_14 Start_13) (ite StartBool Start Start_15)))
   (Start_6 Int (y 4 (+ Start_6 Start) (* Start_5 Start_5) (mod Start_7 Start_1)))
   (Start_8 Int (1 5 (* Start_9 Start_4) (abs Start_7)))
   (Start_12 Int (3 2 1 (* Start_11 Start_12) (abs Start_3) (ite StartBool_2 Start_13 Start_8)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_2) (or StartBool StartBool_3) (< Start_10 Start_3) (= Start_2 Start_10)))
   (Start_5 Int (3 (- Start) (+ Start_3 Start_6) (mod Start_3 Start_2) (abs Start_10)))
   (Start_10 Int (1 4 x (- Start_11 Start_12) (+ Start_9 Start_12) (* Start_6 Start_8) (mod Start_4 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- y) x)))

(check-synth)
