(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_19 Int) (Start_20 Int) (Start_3 Int) (Start_6 Int) (Start_1 Int) (Start_18 Int) (Start_9 Int) (Start_12 Int) (Start_14 Int) (Start_4 Int) (Start_5 Int) (Start_21 Int) (Start_8 Int) (Start_11 Int) (StartBool_4 Bool) (Start_10 Int) (Start_17 Int) (Start_16 Int) (Start_7 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_15 Int) (StartBool_1 Bool) (Start_13 Int))
  ((Start Int (1 4 (- Start_1) (- Start Start_1) (* Start_1 Start_2) (div Start_3 Start) (mod Start_4 Start_3)))
   (StartBool Bool (true false (not StartBool_1) (<= Start_3 Start_8) (= Start_7 Start_3)))
   (Start_2 Int (1 4 (+ Start_9 Start_4) (* Start_17 Start) (ite StartBool_4 Start_19 Start_7)))
   (Start_19 Int (4 (+ Start_3 Start_3)))
   (Start_20 Int (2 4 x 5 3 (- Start_6 Start_21) (+ Start_6 Start_15) (div Start_14 Start_9) (mod Start_20 Start_1) (ite StartBool_4 Start_1 Start_17)))
   (Start_3 Int (5 (- Start_15 Start_19) (+ Start_20 Start_2) (* Start_7 Start_6) (div Start_8 Start_14) (mod Start_6 Start_9) (abs Start_17) (ite StartBool_2 Start Start_2)))
   (Start_6 Int (5 (- Start_3) (+ Start_12 Start_9) (* Start_11 Start_1)))
   (Start_1 Int (1 (- Start_10 Start_15) (* Start_11 Start_11) (mod Start_9 Start_7) (abs Start_16)))
   (Start_18 Int (2 (- Start_6 Start_8) (* Start_18 Start_16) (div Start_17 Start_5) (mod Start_7 Start_17) (abs Start_2)))
   (Start_9 Int (1 0 2 5 4 x (- Start_10) (- Start_18 Start_7) (+ Start_8 Start_11) (* Start_15 Start_11) (div Start_7 Start_10) (abs Start_6) (ite StartBool_1 Start_16 Start_17)))
   (Start_12 Int (3 0 (- Start_2 Start_2) (+ Start_1 Start_10) (mod Start_4 Start_2) (ite StartBool_1 Start_15 Start_13)))
   (Start_14 Int (4 2 (+ Start_9 Start_2) (div Start Start_6) (ite StartBool_4 Start_7 Start_15)))
   (Start_4 Int (0 (abs Start_5)))
   (Start_5 Int (0 (- Start_5) (* Start_6 Start_2) (div Start_1 Start_3) (mod Start Start_3) (ite StartBool_1 Start_4 Start_4)))
   (Start_21 Int (5 (* Start_10 Start_8) (div Start_19 Start) (abs Start_10) (ite StartBool_3 Start_1 Start_12)))
   (Start_8 Int (y (- Start Start_8) (+ Start_7 Start_5) (ite StartBool_1 Start_8 Start_1)))
   (Start_11 Int (4 (- Start_1) (- Start_11 Start_7) (mod Start_6 Start_3) (abs Start_4) (ite StartBool Start_10 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool StartBool_3) (< Start_6 Start_13) (<= Start_7 Start_17) (>= Start_7 Start_16)))
   (Start_10 Int (2 (- Start_5 Start_12) (+ Start_6 Start_11) (div Start_11 Start_7) (ite StartBool_2 Start_3 Start_1)))
   (Start_17 Int (3 5 x y (+ Start_12 Start_4) (mod Start_11 Start) (ite StartBool_3 Start_12 Start)))
   (Start_16 Int (y 5 1 (- Start_14) (- Start_5 Start_5) (div Start_4 Start_11) (mod Start_7 Start_3) (abs Start_1)))
   (Start_7 Int (2 (- Start_6) (- Start_9 Start_2) (div Start Start_10) (abs Start_11)))
   (StartBool_3 Bool (false (and StartBool_2 StartBool_1) (< Start_13 Start_12) (= Start_11 Start_5)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_2) (or StartBool_1 StartBool_1) (<= Start_11 Start) (>= Start_10 Start_11) (> Start_2 Start)))
   (Start_15 Int (0 (- Start_16) (- Start_7 Start_12) (+ Start_7 Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (< Start_5 Start) (= Start_1 Start_7) (>= Start Start_4) (> Start Start_8)))
   (Start_13 Int (0 x 3 4 (+ Start_3 Start_7) (div Start Start_4) (abs Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- 2) (- (div (div 0 x) (div 2 0))))))

(check-synth)
