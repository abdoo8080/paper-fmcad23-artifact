(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_15 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_4 Int) (Start_6 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_2 Int) (Start_10 Int) (Start_13 Int) (Start_9 Int) (Start_8 Int) (Start_3 Int) (Start_11 Int) (Start_1 Int) (Start_5 Int) (StartBool_5 Bool) (Start_12 Int) (StartBool_6 Bool) (Start_14 Int) (Start_7 Int))
  ((Start Int (3 (- Start) (+ Start_1 Start_2) (div Start_3 Start_4) (mod Start_1 Start_4) (abs Start_3)))
   (StartBool Bool (false (and StartBool_3 StartBool_1) (<= Start_8 Start_1) (>= Start_13 Start_6)))
   (StartBool_7 Bool (false true (and StartBool_2 StartBool_3) (or StartBool_3 StartBool_3) (>= Start_5 Start_3) (> Start_1 Start_5)))
   (Start_15 Int (x (- Start_4 Start_13) (+ Start_11 Start_10) (* Start_2 Start_2) (div Start_6 Start_6) (mod Start Start_13)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool_4 StartBool_4) (or StartBool StartBool_3) (<= Start_13 Start_1)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_4) (or StartBool_3 StartBool_5) (<= Start_2 Start_13) (= Start_8 Start_3) (> Start_14 Start_9)))
   (Start_4 Int (0 x (- Start_4) (* Start Start_5) (mod Start_4 Start_2) (abs Start_5) (ite StartBool_1 Start Start_3)))
   (Start_6 Int (4 2 x 5 (- Start_7) (* Start_5 Start_7) (mod Start_8 Start) (ite StartBool_2 Start_6 Start_8)))
   (StartBool_1 Bool (false (or StartBool_1 StartBool_1) (< Start_2 Start) (<= Start_4 Start_2) (>= Start_4 Start) (> Start_6 Start_1)))
   (StartBool_2 Bool (true (<= Start_4 Start_4) (>= Start_5 Start_3)))
   (Start_2 Int (4 0 5 (- Start_1 Start_13) (* Start_7 Start_7) (mod Start_6 Start_10) (abs Start_2)))
   (Start_10 Int (5 (- Start_5) (- Start_8 Start) (+ Start_3 Start_6) (* Start_4 Start_2)))
   (Start_13 Int (2 (+ Start_9 Start_7) (mod Start_12 Start_1) (abs Start_12)))
   (Start_9 Int (x (- Start_11) (- Start_5 Start_4) (+ Start_3 Start_7) (div Start_3 Start_3) (abs Start_4) (ite StartBool_2 Start_4 Start_10)))
   (Start_8 Int (y x (* Start_6 Start_9) (div Start_2 Start_3) (mod Start Start_1) (ite StartBool_2 Start_1 Start_10)))
   (Start_3 Int (2 (- Start_4) (- Start_5 Start_5) (+ Start_9 Start_1) (* Start_4 Start) (abs Start_10)))
   (Start_11 Int (y 4 (- Start_5) (+ Start_12 Start_9) (mod Start_10 Start_12)))
   (Start_1 Int (y (- Start_7) (- Start_4 Start_7) (abs Start_4) (ite StartBool_3 Start_9 Start_6)))
   (Start_5 Int (0 1 (* Start_6 Start_12) (div Start_1 Start_6)))
   (StartBool_5 Bool (true (not StartBool_7) (and StartBool_1 StartBool_5) (= Start_3 Start_11) (>= Start_7 Start_14)))
   (Start_12 Int (4 (- Start_8) (div Start_8 Start) (abs Start)))
   (StartBool_6 Bool (false true (and StartBool_3 StartBool_1) (<= Start Start_15) (> Start_6 Start_2)))
   (Start_14 Int (2 (* Start_11 Start_3) (div Start_9 Start_5) (mod Start_12 Start_1) (abs Start_14) (ite StartBool_6 Start_10 Start_9)))
   (Start_7 Int (1 2 (- Start_2 Start_11) (* Start_11 Start_5) (div Start_5 Start_9) (abs Start_10) (ite StartBool_2 Start_9 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (+ (- 2 y) x))))

(check-synth)
