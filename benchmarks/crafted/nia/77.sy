(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_17 Int) (Start_18 Int) (StartBool_4 Bool) (Start_2 Int) (Start_14 Int) (Start_20 Int) (Start_7 Int) (Start_9 Int) (StartBool_2 Bool) (Start_1 Int) (Start_16 Int) (StartBool_1 Bool) (Start_8 Int) (Start_5 Int) (Start_3 Int) (Start_15 Int) (Start_11 Int) (Start_6 Int) (Start_12 Int) (Start_4 Int) (StartBool_3 Bool) (Start_13 Int) (Start_10 Int))
  ((Start Int (0 (- Start_1) (- Start_2 Start_3) (+ Start_3 Start) (* Start_4 Start_3) (ite StartBool_1 Start Start_1)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool StartBool_3) (or StartBool StartBool_3) (< Start_10 Start_10) (= Start_17 Start_5) (>= Start_18 Start_6) (> Start_11 Start)))
   (Start_19 Int (1 (* Start_19 Start_16) (mod Start_6 Start_20)))
   (Start_17 Int (y (- Start_19) (- Start_16 Start_5) (mod Start_1 Start_8) (ite StartBool Start_1 Start_16)))
   (Start_18 Int (3 2 (- Start_10) (- Start_3 Start_4) (mod Start_1 Start_1) (ite StartBool_3 Start Start_11)))
   (StartBool_4 Bool (true false (<= Start_11 Start) (> Start_1 Start_13)))
   (Start_2 Int (2 y (- Start_7) (- Start_2 Start_15) (+ Start_3 Start_11) (mod Start_8 Start) (abs Start_10) (ite StartBool_4 Start_16 Start_15)))
   (Start_14 Int (3 0 x (- Start_3) (* Start_13 Start_15) (div Start_9 Start_11) (mod Start_3 Start_2) (abs Start_4)))
   (Start_20 Int (y (- Start_13) (+ Start_10 Start_13) (mod Start_10 Start_1) (abs Start_3)))
   (Start_7 Int (3 x (- Start_3) (- Start_8 Start_9) (div Start Start_14) (mod Start_2 Start_13) (abs Start_9) (ite StartBool_3 Start_7 Start_7)))
   (Start_9 Int (0 (- Start_13) (- Start_7 Start) (* Start_7 Start_4) (mod Start_13 Start_8) (abs Start_1)))
   (StartBool_2 Bool (true false (and StartBool_2 StartBool) (or StartBool_1 StartBool_3) (< Start_3 Start)))
   (Start_1 Int (2 (- Start_12 Start_5)))
   (Start_16 Int (x 5 1 3 y (- Start_9) (- Start_3 Start_1) (+ Start_2 Start_5) (div Start_3 Start_2) (mod Start_1 Start_11)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (< Start_2 Start_4) (<= Start Start_4) (= Start Start_3) (>= Start_5 Start)))
   (Start_8 Int (3 2 y 1 0 5 x (- Start_8) (- Start_9 Start_1) (+ Start_8 Start_6) (* Start_6 Start_2) (div Start_10 Start) (mod Start_5 Start_8) (ite StartBool_1 Start_11 Start_9)))
   (Start_5 Int (5 (* Start_3 Start_5) (div Start_5 Start_6) (mod Start_5 Start)))
   (Start_3 Int (1 4 x (- Start Start_7) (+ Start_6 Start_3) (* Start_7 Start_8) (ite StartBool_2 Start_7 Start_3)))
   (Start_15 Int (1 x 2 3 0 4 (- Start_1 Start_15) (+ Start_8 Start_3) (* Start_15 Start_13) (div Start_9 Start_14) (mod Start_13 Start_4)))
   (Start_11 Int (1 (- Start_11 Start_1) (+ Start_9 Start_12) (* Start_5 Start_8) (mod Start_7 Start_2) (abs Start_13) (ite StartBool_3 Start_12 Start_9)))
   (Start_6 Int (x (mod Start_1 Start) (ite StartBool Start_3 Start_1)))
   (Start_12 Int (1 5 (* Start_7 Start_1) (ite StartBool_3 Start_10 Start_4)))
   (Start_4 Int (2 4 (* Start_6 Start_4) (div Start_4 Start_2) (mod Start Start_4)))
   (StartBool_3 Bool (false true (and StartBool StartBool_1) (or StartBool StartBool_1) (< Start_2 Start_1) (<= Start_8 Start) (>= Start_8 Start_8) (> Start_1 Start_2)))
   (Start_13 Int (3 (- Start_10 Start_11) (+ Start_10 Start_3)))
   (Start_10 Int (2 0 4 1 (- Start_7) (+ Start_4 Start_3) (abs Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 2 (* 5 y))))

(check-synth)
