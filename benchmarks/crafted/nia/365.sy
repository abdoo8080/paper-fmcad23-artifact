(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_1 Int) (Start_13 Int) (StartBool_4 Bool) (Start_14 Int) (StartBool_1 Bool) (Start_12 Int) (StartBool_5 Bool) (Start_9 Int) (Start_15 Int) (Start_11 Int) (Start_17 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_4 Int) (Start_16 Int) (Start_2 Int) (Start_5 Int) (Start_3 Int) (Start_6 Int) (Start_7 Int) (Start_8 Int) (Start_10 Int))
  ((Start Int (2 (+ Start Start) (div Start Start_1) (abs Start_1) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (false true (not StartBool) (and StartBool_4 StartBool_3) (or StartBool_5 StartBool) (< Start_12 Start) (>= Start_3 Start_13) (> Start_6 Start_10)))
   (Start_18 Int (2 0 3 y 1 (- Start_11 Start_18) (* Start_13 Start_17) (mod Start_3 Start_2) (ite StartBool_1 Start_7 Start_10)))
   (Start_1 Int (0 y 4 (- Start_1 Start_5) (+ Start_2 Start_13) (div Start_17 Start_2) (mod Start_14 Start_4) (abs Start_12)))
   (Start_13 Int (2 5 0 (- Start_4) (- Start_5 Start_4) (+ Start_2 Start_14) (* Start_14 Start_10) (div Start_3 Start_10) (mod Start_15 Start_11) (ite StartBool_2 Start_4 Start)))
   (StartBool_4 Bool (true (not StartBool_1) (and StartBool_1 StartBool_3) (= Start_1 Start_14) (> Start_18 Start_14)))
   (Start_14 Int (5 (- Start_4) (- Start_11 Start_10) (+ Start_3 Start_8) (* Start_7 Start) (mod Start Start_14) (ite StartBool Start_13 Start_7)))
   (StartBool_1 Bool (false (or StartBool_3 StartBool_3) (< Start_3 Start_8) (<= Start_9 Start_4) (= Start_13 Start_10) (>= Start_1 Start_14)))
   (Start_12 Int (2 x 3 4 y 5 (- Start_6 Start_6) (* Start_3 Start_9) (abs Start)))
   (StartBool_5 Bool (false true (not StartBool_2) (<= Start_8 Start_5) (= Start_18 Start_15)))
   (Start_9 Int (4 1 0 y 3 (- Start_10) (+ Start Start_7) (div Start_6 Start_2) (mod Start_9 Start_2)))
   (Start_15 Int (0 3 y x 5 (- Start_10 Start_16) (+ Start Start_8) (mod Start_9 Start_15) (abs Start_9)))
   (Start_11 Int (y (- Start_10) (+ Start_12 Start_5) (* Start_11 Start_4) (div Start Start_10) (ite StartBool_1 Start_5 Start_6)))
   (Start_17 Int (x (- Start_5 Start) (div Start_9 Start_3) (mod Start_7 Start_7) (abs Start_1)))
   (StartBool_2 Bool (true false (not StartBool_2) (< Start_5 Start_6) (= Start_7 Start_2) (> Start_7 Start)))
   (StartBool_3 Bool (false true (not StartBool_2) (or StartBool_1 StartBool) (<= Start_4 Start_3) (>= Start_5 Start_5) (> Start_1 Start)))
   (Start_4 Int (4 (+ Start_1 Start_4) (* Start Start) (div Start_2 Start_1) (mod Start_3 Start_4) (ite StartBool Start Start_5)))
   (Start_16 Int (5 3 0 (div Start_11 Start_13) (abs Start_17) (ite StartBool Start_12 Start_16)))
   (Start_2 Int (5 2 (- Start_1 Start_3) (+ Start_3 Start_3) (div Start_3 Start_3)))
   (Start_5 Int (2 0 (- Start_3 Start) (+ Start_4 Start_1) (div Start Start_1) (ite StartBool_2 Start_1 Start_1)))
   (Start_3 Int (0 (- Start_3) (- Start Start_1) (+ Start_4 Start_4) (* Start_1 Start_2) (div Start_1 Start_2) (mod Start_1 Start_2)))
   (Start_6 Int (4 (- Start_3) (* Start_4 Start_8) (div Start_7 Start_5)))
   (Start_7 Int (4 (mod Start_5 Start_5) (ite StartBool_3 Start_3 Start_1)))
   (Start_8 Int (0 (- Start_9) (+ Start_4 Start_1) (* Start_8 Start) (abs Start_3) (ite StartBool_3 Start_2 Start_2)))
   (Start_10 Int (3 (+ Start_8 Start_6) (div Start_6 Start_5) (mod Start Start_10) (abs Start_5) (ite StartBool_1 Start_11 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* y (* x 5))))

(check-synth)
