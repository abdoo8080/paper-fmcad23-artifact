(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_8 Int) (Start_6 Int) (Start_1 Int) (Start_3 Int) (Start_10 Int) (Start_4 Int) (Start_2 Int) (StartBool_1 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_7 Int) (StartBool_4 Bool) (StartBool_3 Bool) (Start_9 Int))
  ((Start Int (x (- Start_1 Start_1) (mod Start Start_2) (abs Start_1)))
   (StartBool Bool (false (or StartBool_4 StartBool_2) (< Start_2 Start_3) (= Start_10 Start_8)))
   (Start_8 Int (x 3 (- Start_7) (+ Start_9 Start_9) (* Start_1 Start_3)))
   (Start_6 Int (0 3 (+ Start_8 Start_1) (* Start_2 Start_6) (div Start_2 Start_6) (abs Start_9) (ite StartBool Start Start_6)))
   (Start_1 Int (3 (- Start_2) (- Start Start_2) (mod Start_3 Start_3)))
   (Start_3 Int (y 1 (ite StartBool Start_1 Start_4)))
   (Start_10 Int (3 (* Start_5 Start_10) (div Start_1 Start_8) (ite StartBool_4 Start_4 Start_7)))
   (Start_4 Int (0 1 5 (- Start_1 Start_4) (+ Start_3 Start_3) (* Start_4 Start_1) (div Start_5 Start) (abs Start_2)))
   (Start_2 Int (x 3 (* Start Start_1)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool_1) (<= Start_6 Start_1) (= Start_2 Start_1) (>= Start Start_6)))
   (Start_5 Int (y 4 1 x (- Start_5) (+ Start_4 Start) (mod Start_6 Start) (ite StartBool_1 Start_5 Start_3)))
   (StartBool_2 Bool (false (not StartBool_3) (or StartBool_2 StartBool_1) (<= Start_6 Start_6) (= Start_4 Start_1) (>= Start_6 Start_5) (> Start_3 Start_1)))
   (Start_7 Int (3 y 5 (- Start_5 Start) (mod Start Start_4)))
   (StartBool_4 Bool (false true (or StartBool_2 StartBool_1) (<= Start_6 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool StartBool_4) (or StartBool StartBool_2) (< Start Start_7) (<= Start_5 Start_6) (>= Start_4 Start_1) (> Start_5 Start_5)))
   (Start_9 Int (3 y 5 (+ Start_5 Start_1) (* Start_6 Start_6) (mod Start_1 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 1 (div (- 2 (mod y 0)) 2))))

(check-synth)
