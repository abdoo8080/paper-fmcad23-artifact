(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_2 Int) (Start_1 Int) (Start_11 Int) (Start_10 Int) (Start_12 Int) (Start_6 Int) (Start_4 Int) (Start_3 Int) (StartBool_4 Bool) (StartBool_1 Bool) (StartBool_7 Bool) (Start_8 Int) (Start_5 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_7 Int) (StartBool_5 Bool) (StartBool_8 Bool) (StartBool_6 Bool) (Start_9 Int))
  ((Start Int (5 (- Start) (- Start_1 Start) (+ Start_2 Start_1) (* Start_3 Start_2) (div Start_1 Start) (mod Start_1 Start) (abs Start_1) (ite StartBool Start Start_3)))
   (StartBool Bool (true (and StartBool_7 StartBool_6) (<= Start_10 Start_8) (>= Start_1 Start_11) (> Start_9 Start_1)))
   (Start_13 Int (3 (- Start_1) (div Start_10 Start) (ite StartBool_7 Start_12 Start_4)))
   (Start_2 Int (y (- Start_7) (- Start_3 Start_3) (+ Start_1 Start_10) (div Start_1 Start_1) (mod Start_1 Start) (abs Start_3)))
   (Start_1 Int (2 (mod Start_12 Start_7) (abs Start_2) (ite StartBool_6 Start_12 Start_2)))
   (Start_11 Int (3 (- Start_10) (* Start Start_9) (div Start_4 Start) (mod Start_1 Start_3) (abs Start)))
   (Start_10 Int (5 (- Start_5 Start_11) (+ Start_1 Start_4) (abs Start_2) (ite StartBool_5 Start_11 Start_9)))
   (Start_12 Int (2 3 5 1 (- Start_9) (- Start_6 Start_4) (+ Start_2 Start) (ite StartBool_6 Start_9 Start_5)))
   (Start_6 Int (0 x 2 5 (- Start_4) (+ Start_2 Start_10)))
   (Start_4 Int (1 3 (- Start_6) (mod Start_7 Start_2)))
   (Start_3 Int (2 3 4 x 0 y (div Start_3 Start_4) (mod Start Start_3) (abs Start_5) (ite StartBool_1 Start_4 Start_3)))
   (StartBool_4 Bool (false (not StartBool_4) (or StartBool_2 StartBool_6) (< Start_8 Start_9) (= Start_6 Start_9) (>= Start_5 Start_8)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (or StartBool StartBool_1) (= Start_5 Start_5) (> Start_3 Start_2)))
   (StartBool_7 Bool (false (not StartBool_3) (and StartBool_4 StartBool_1) (or StartBool_8 StartBool_2) (< Start_8 Start_3) (<= Start_13 Start_8) (= Start_2 Start_5) (> Start_10 Start_1)))
   (Start_8 Int (4 1 (- Start_2) (- Start Start_5) (* Start_4 Start_6) (div Start_7 Start_9) (mod Start_5 Start_1) (ite StartBool_3 Start_7 Start_6)))
   (Start_5 Int (x (- Start_3 Start) (div Start_4 Start_2) (ite StartBool_2 Start Start_5)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_4 StartBool_5) (or StartBool StartBool_2) (= Start_5 Start) (> Start_2 Start_1)))
   (StartBool_2 Bool (false (not StartBool_2) (< Start_3 Start_1) (= Start Start) (>= Start_4 Start_3) (> Start_3 Start_3)))
   (Start_7 Int (3 (- Start_8 Start_1) (* Start_7 Start_1) (div Start_5 Start_3) (mod Start Start_3) (abs Start_2)))
   (StartBool_5 Bool (false true (and StartBool_1 StartBool_5) (or StartBool_2 StartBool) (<= Start_4 Start_6) (> Start_2 Start_4)))
   (StartBool_8 Bool (true false (or StartBool_1 StartBool_5) (= Start_6 Start_10) (>= Start_12 Start_4) (> Start_11 Start_10)))
   (StartBool_6 Bool (false true (< Start_2 Start_3) (= Start_8 Start_7) (>= Start_4 Start_1) (> Start_5 Start_7)))
   (Start_9 Int (x 0 5 (- Start) (+ Start_2 Start_1) (* Start_8 Start_5) (ite StartBool_3 Start_7 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 4 y)))

(check-synth)
