(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_3 Int) (Start_4 Int) (Start_5 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_1 Int) (Start_2 Int))
  ((Start Int (y 0 (- Start) (+ Start_1 Start_2) (* Start_1 Start_2) (abs Start_1)))
   (StartBool Bool (true (and StartBool_2 StartBool) (< Start_3 Start) (<= Start_4 Start_6) (>= Start_4 Start_5) (> Start_2 Start_2)))
   (Start_6 Int (3 1 (+ Start_3 Start_5) (div Start_1 Start_6)))
   (Start_3 Int (2 (+ Start_4 Start_3) (div Start_1 Start_1) (mod Start_6 Start_2) (ite StartBool Start_3 Start_3)))
   (Start_4 Int (y (- Start_1) (+ Start_4 Start) (* Start_4 Start_4) (ite StartBool Start Start_5)))
   (Start_5 Int (4 (- Start_2) (- Start_1 Start) (* Start_4 Start_2) (mod Start_1 Start_1) (abs Start_3) (ite StartBool Start_3 Start_4)))
   (StartBool_1 Bool (true false (or StartBool_1 StartBool_1) (< Start Start_3)))
   (StartBool_2 Bool (false true (not StartBool_2)))
   (Start_1 Int (y (- Start_3) (div Start_2 Start_4) (ite StartBool_1 Start_2 Start_3)))
   (Start_2 Int (5 (mod Start Start_2) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (div x x) 3)))

(check-synth)
