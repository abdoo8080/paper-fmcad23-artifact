(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (Start_14 Int) (Start_13 Int) (StartBool_7 Bool) (Start_10 Int) (StartBool_5 Bool) (Start_15 Int) (Start_12 Int) (StartBool_3 Bool) (Start_3 Int) (Start_7 Int) (StartBool_2 Bool) (Start_4 Int) (Start_11 Int) (Start_5 Int) (Start_2 Int) (Start_8 Int) (Start_6 Int) (Start_1 Int) (StartBool_6 Bool) (StartBool_1 Bool) (StartBool_4 Bool))
  ((Start Int (0 (- Start Start) (+ Start_1 Start_2) (div Start_2 Start_2) (mod Start_1 Start_2) (abs Start_1) (ite StartBool_1 Start_3 Start)))
   (StartBool Bool (false (not StartBool_3) (< Start_1 Start_4) (<= Start_6 Start) (>= Start_2 Start_6)))
   (Start_9 Int (5 (- Start_7 Start) (+ Start_11 Start_8) (ite StartBool_6 Start_8 Start_10)))
   (Start_14 Int (5 (- Start_4) (+ Start_4 Start_2) (* Start_4 Start_6) (div Start_9 Start_4) (mod Start_1 Start_10)))
   (Start_13 Int (0 y (+ Start_3 Start_13) (* Start_8 Start_5)))
   (StartBool_7 Bool (false (not StartBool_5) (< Start_1 Start_12) (= Start_9 Start_9) (> Start_12 Start_3)))
   (Start_10 Int (2 0 y x (- Start_11 Start_3) (+ Start_9 Start_2) (mod Start_7 Start_7) (abs Start_2) (ite StartBool_7 Start_1 Start)))
   (StartBool_5 Bool (false (not StartBool) (and StartBool_6 StartBool_6) (<= Start_9 Start_4) (> Start_6 Start_10)))
   (Start_15 Int (0 (- Start_10) (* Start_12 Start_14)))
   (Start_12 Int (0 (- Start_6) (- Start_11 Start_2) (* Start_4 Start_9) (ite StartBool_1 Start_11 Start)))
   (StartBool_3 Bool (true (not StartBool_3) (<= Start_7 Start_3) (= Start_3 Start_1) (> Start_8 Start_2)))
   (Start_3 Int (0 (- Start_2) (* Start_3 Start_3) (abs Start_2) (ite StartBool_2 Start_1 Start)))
   (Start_7 Int (5 (+ Start_9 Start_7) (div Start_5 Start_14) (mod Start_8 Start_8) (abs Start_1) (ite StartBool_3 Start_14 Start_15)))
   (StartBool_2 Bool (false true (and StartBool StartBool_2) (or StartBool_1 StartBool) (< Start_1 Start_3) (<= Start Start_4) (>= Start Start_1) (> Start_3 Start_1)))
   (Start_4 Int (2 4 (- Start_4) (+ Start_1 Start_4) (* Start_1 Start_2) (abs Start_3) (ite StartBool Start_1 Start_3)))
   (Start_11 Int (x 1 5 (- Start_9) (- Start_5 Start_12) (+ Start_5 Start_12) (mod Start_13 Start) (ite StartBool_3 Start_4 Start_11)))
   (Start_5 Int (3 4 5 0 (- Start_1) (+ Start_3 Start_4) (mod Start_5 Start_6) (abs Start_4) (ite StartBool Start Start_5)))
   (Start_2 Int (4 (mod Start_5 Start_3) (ite StartBool_1 Start_1 Start_6)))
   (Start_8 Int (x y 1 4 (- Start_7) (* Start Start_9) (abs Start_6) (ite StartBool_4 Start_5 Start)))
   (Start_6 Int (4 (+ Start_3 Start_5) (* Start_6 Start_5) (div Start_3 Start) (abs Start_3)))
   (Start_1 Int (4 (- Start_5) (- Start_5 Start_1) (* Start_2 Start_4) (abs Start_1) (ite StartBool_2 Start_6 Start)))
   (StartBool_6 Bool (false (and StartBool StartBool_2) (< Start_10 Start_14) (>= Start_6 Start_6)))
   (StartBool_1 Bool (true (and StartBool StartBool) (= Start_2 Start_3) (> Start_3 Start_5)))
   (StartBool_4 Bool (false (or StartBool_5 StartBool) (= Start_5 Start_8) (> Start_5 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- (mod y (- (abs x) 5))))))

(check-synth)
