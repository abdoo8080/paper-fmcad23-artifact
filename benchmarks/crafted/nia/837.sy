(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_14 Int) (Start_16 Int) (Start_17 Int) (Start_15 Int) (Start_4 Int) (Start_5 Int) (Start_13 Int) (Start_6 Int) (StartBool_5 Bool) (Start_3 Int) (Start_2 Int) (Start_10 Int) (StartBool_2 Bool) (Start_12 Int) (StartBool_3 Bool) (StartBool_6 Bool) (Start_11 Int) (StartBool_4 Bool) (Start_9 Int) (Start_8 Int) (StartBool_1 Bool) (Start_7 Int))
  ((Start Int (1 (- Start_1) (- Start_1 Start) (* Start_2 Start_3) (mod Start_3 Start_1) (abs Start_1) (ite StartBool Start_1 Start)))
   (StartBool Bool (false true (not StartBool_4) (and StartBool_3 StartBool_5) (> Start_5 Start)))
   (Start_1 Int (y (- Start_14) (ite StartBool Start_2 Start_6)))
   (Start_14 Int (y (- Start_2) (- Start_3 Start_8) (+ Start_11 Start_7) (* Start_7 Start_8) (div Start_8 Start_5) (mod Start_17 Start_14) (ite StartBool_6 Start_8 Start_11)))
   (Start_16 Int (0 (* Start_2 Start_6) (div Start Start_5) (mod Start_14 Start_13)))
   (Start_17 Int (0 y 3 x 2 (- Start_9 Start_6) (+ Start_8 Start_2) (ite StartBool_5 Start_8 Start_17)))
   (Start_15 Int (5 1 (+ Start_11 Start_4) (* Start_15 Start_11) (div Start_16 Start_17) (abs Start_12) (ite StartBool_4 Start_7 Start_13)))
   (Start_4 Int (3 y (- Start_13) (- Start_13 Start_14) (+ Start_9 Start_6) (div Start_8 Start_8) (mod Start_15 Start_10) (abs Start_8)))
   (Start_5 Int (2 y 0 3 4 x 5 1 (- Start_5 Start_7) (* Start_5 Start_13) (div Start_1 Start_5) (mod Start_1 Start) (abs Start_3)))
   (Start_13 Int (y 5 x (- Start_9) (- Start Start_9) (ite StartBool_1 Start Start_11)))
   (Start_6 Int (3 (+ Start Start_7) (* Start_1 Start_4) (mod Start_3 Start_3) (abs Start_8) (ite StartBool_2 Start_3 Start_4)))
   (StartBool_5 Bool (false (not StartBool_1) (<= Start_8 Start_12) (> Start_6 Start_12)))
   (Start_3 Int (5 1 0 (- Start_3) (- Start Start_2) (div Start_1 Start) (mod Start_1 Start_1) (abs Start_1) (ite StartBool Start Start_3)))
   (Start_2 Int (x (- Start) (- Start_2 Start_3) (+ Start_4 Start) (div Start_4 Start_4) (mod Start_2 Start_5) (ite StartBool_1 Start_6 Start_3)))
   (Start_10 Int (y 1 (- Start_11) (- Start_7 Start_4) (* Start_7 Start_5) (ite StartBool_4 Start Start_12)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_3 StartBool_4) (< Start Start_5)))
   (Start_12 Int (2 (- Start_3) (+ Start_12 Start_10) (* Start_4 Start_6) (div Start_2 Start_13) (mod Start_7 Start_5) (ite StartBool_2 Start_8 Start_7)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_4 StartBool_2) (< Start_3 Start_8) (>= Start_5 Start_1) (> Start_3 Start_9)))
   (StartBool_6 Bool (true (not StartBool_1) (<= Start_8 Start)))
   (Start_11 Int (5 (- Start_6) (+ Start Start_11) (* Start_11 Start_1) (div Start Start_8) (mod Start_10 Start_7) (abs Start)))
   (StartBool_4 Bool (true false (and StartBool_1 StartBool_3) (or StartBool_4 StartBool) (<= Start_4 Start) (= Start_5 Start_3)))
   (Start_9 Int (1 4 (- Start_5 Start_1) (abs Start_6)))
   (Start_8 Int (5 2 1 4 (+ Start_6 Start) (mod Start_4 Start_1)))
   (StartBool_1 Bool (true (not StartBool_1) (<= Start_2 Start_7) (>= Start_6 Start_10)))
   (Start_7 Int (x (- Start_3) (+ Start Start_3) (div Start_2 Start_6) (abs Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod y 0) 4)))

(check-synth)
