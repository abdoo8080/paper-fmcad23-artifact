(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_5 Int) (Start_6 Int) (Start_4 Int) (Start_9 Int) (Start_3 Int) (StartBool_2 Bool) (Start_1 Int) (Start_8 Int) (Start_7 Int) (Start_2 Int))
  ((Start Int (1 (div Start Start_1) (mod Start_1 Start_1) (ite StartBool Start_2 Start_1)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (< Start_1 Start_4) (> Start_4 Start_1)))
   (StartBool_1 Bool (true (not StartBool_1) (<= Start_6 Start) (= Start_8 Start_1) (>= Start_8 Start_9)))
   (Start_5 Int (0 (- Start_4 Start_6) (div Start Start_3) (abs Start_5) (ite StartBool_1 Start_2 Start_8)))
   (Start_6 Int (0 (- Start_5) (+ Start_3 Start_5) (mod Start_7 Start_5)))
   (Start_4 Int (y (- Start_5) (mod Start_4 Start_1) (abs Start_6)))
   (Start_9 Int (4 3 5 (- Start_3 Start_9) (* Start_2 Start_5) (abs Start_9)))
   (Start_3 Int (x 1 5 (- Start_2) (- Start_1 Start_2) (* Start_1 Start) (mod Start Start) (abs Start_1)))
   (StartBool_2 Bool (true false (not StartBool_2) (or StartBool_1 StartBool) (= Start_6 Start_6)))
   (Start_1 Int (2 (- Start_3 Start_2) (+ Start_1 Start_2) (div Start Start_3) (mod Start_1 Start_3)))
   (Start_8 Int (4 2 5 (- Start_4 Start) (* Start_3 Start_3) (div Start_6 Start_2) (mod Start_4 Start_3)))
   (Start_7 Int (0 y (- Start_3 Start_5) (+ Start Start_6) (abs Start_3) (ite StartBool_2 Start_1 Start)))
   (Start_2 Int (3 1 y (- Start_1 Start_1) (div Start_1 Start_2) (ite StartBool Start_2 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- y 2))))

(check-synth)
