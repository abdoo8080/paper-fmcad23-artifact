(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_2 Int) (Start_3 Int) (Start_5 Int) (StartBool_1 Bool) (Start_10 Int) (StartBool_2 Bool) (Start_4 Int) (Start_8 Int) (Start_6 Int) (Start_1 Int) (Start_7 Int) (Start_9 Int))
  ((Start Int (2 (- Start_1 Start_1) (* Start_2 Start_1) (mod Start_2 Start_1)))
   (StartBool Bool (true false (and StartBool StartBool) (< Start Start_9) (>= Start_9 Start_1) (> Start Start_6)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool) (<= Start_5 Start_2) (>= Start_1 Start_2)))
   (Start_2 Int (5 (mod Start_3 Start_1)))
   (Start_3 Int (y (div Start Start_4) (mod Start_1 Start_4) (ite StartBool_1 Start Start_5)))
   (Start_5 Int (2 y 1 (- Start_3 Start_1) (+ Start_5 Start_4) (div Start_1 Start_5) (mod Start_4 Start_4) (abs Start_1) (ite StartBool_1 Start_2 Start_5)))
   (StartBool_1 Bool (true (or StartBool StartBool_2) (< Start_4 Start_3)))
   (Start_10 Int (y x (- Start_4 Start) (div Start_6 Start_5) (ite StartBool_3 Start_1 Start_2)))
   (StartBool_2 Bool (true (not StartBool) (or StartBool_2 StartBool_1) (<= Start_1 Start_4) (>= Start_2 Start_5) (> Start_5 Start)))
   (Start_4 Int (5 (- Start_5) (+ Start Start_4) (* Start_6 Start) (mod Start_1 Start_4) (abs Start_2)))
   (Start_8 Int (y (- Start_9 Start_7) (+ Start_1 Start) (* Start_3 Start_3) (abs Start_5)))
   (Start_6 Int (x (* Start_6 Start_7) (abs Start_5) (ite StartBool_2 Start_6 Start_3)))
   (Start_1 Int (1 x (+ Start_1 Start_2) (* Start_4 Start_2) (div Start_6 Start_8) (mod Start_6 Start_2)))
   (Start_7 Int (1 y (- Start Start_5) (ite StartBool Start_7 Start_6)))
   (Start_9 Int (2 (- Start_1 Start_5) (+ Start_5 Start_10) (div Start_9 Start_4) (mod Start_10 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= y 1) 0 3)))

(check-synth)
