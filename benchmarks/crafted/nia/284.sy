(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_3 Int) (Start_5 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_6 Int) (StartBool_2 Bool) (Start_7 Int) (Start_2 Int) (Start_10 Int) (Start_1 Int) (Start_4 Int) (Start_8 Int) (Start_9 Int))
  ((Start Int (x 1 0 (div Start Start_1) (mod Start Start_2) (ite StartBool_1 Start_3 Start_1)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_1 StartBool) (< Start_9 Start_10) (<= Start_3 Start_6) (> Start_1 Start_11)))
   (Start_11 Int (1 y (- Start_7 Start_3) (div Start Start_8)))
   (Start_3 Int (4 (- Start_1) (ite StartBool Start Start_4)))
   (Start_5 Int (y (div Start_1 Start_2) (mod Start_3 Start_3) (ite StartBool Start_3 Start_6)))
   (StartBool_3 Bool (true false (not StartBool_1) (or StartBool StartBool_2) (< Start_6 Start_7) (>= Start Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (>= Start_2 Start) (> Start_5 Start_5)))
   (Start_6 Int (1 (* Start_5 Start_3) (mod Start_6 Start_3) (abs Start_5)))
   (StartBool_2 Bool (false (or StartBool_1 StartBool_2) (<= Start_1 Start_6) (>= Start_1 Start_5) (> Start_4 Start_3)))
   (Start_7 Int (3 (+ Start_7 Start_5) (* Start_5 Start_4) (mod Start_4 Start_5) (abs Start_8)))
   (Start_2 Int (y (- Start_4) (- Start_4 Start_4) (+ Start_4 Start) (div Start_2 Start) (abs Start_3)))
   (Start_10 Int (2 x (- Start_10) (- Start_3 Start_7) (+ Start_1 Start_4) (* Start_1 Start_9) (div Start_7 Start_4) (mod Start_1 Start_4) (ite StartBool_2 Start_5 Start_6)))
   (Start_1 Int (3 1 (- Start_7 Start_5) (abs Start_5) (ite StartBool_3 Start_1 Start)))
   (Start_4 Int (x 5 4 3 (- Start_1) (* Start_3 Start_1) (abs Start)))
   (Start_8 Int (x (+ Start_8 Start_6) (* Start_9 Start_4) (div Start_3 Start_9) (mod Start_4 Start_4)))
   (Start_9 Int (1 (mod Start_8 Start_3) (ite StartBool_2 Start_1 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (+ y 3) 2)))

(check-synth)
