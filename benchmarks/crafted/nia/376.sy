(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_7 Int) (Start_6 Int) (Start_5 Int) (Start_4 Int) (Start_3 Int) (Start_2 Int))
  ((Start Int (5 0 (- Start) (- Start Start) (+ Start_1 Start_2) (mod Start Start)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool) (< Start_5 Start_3) (> Start_4 Start_4)))
   (Start_1 Int (4 (- Start_1 Start_6) (div Start_2 Start_1) (mod Start Start_6) (abs Start_7)))
   (Start_7 Int (2 1 0 4 (- Start_1) (- Start_2 Start_6) (* Start_4 Start_5) (abs Start_3)))
   (Start_6 Int (5 (div Start_2 Start_7) (mod Start_7 Start_2) (abs Start_3)))
   (Start_5 Int (x 3 (- Start_3) (+ Start_6 Start_3) (mod Start Start_3)))
   (Start_4 Int (3 (- Start_4) (- Start_5 Start_1) (+ Start_3 Start_5)))
   (Start_3 Int (x 5 (+ Start_2 Start_2) (* Start_4 Start_2) (div Start_1 Start) (mod Start_4 Start_4) (abs Start_2) (ite StartBool Start Start_2)))
   (Start_2 Int (4 x (- Start) (div Start Start) (mod Start_3 Start) (abs Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (mod 3 (abs (mod x 2))) y)))

(check-synth)
