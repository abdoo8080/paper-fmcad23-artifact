(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_5 Int) (Start_3 Int) (Start_2 Int) (Start_1 Int) (Start_4 Int) (Start_6 Int) (StartBool_3 Bool) (Start_8 Int) (Start_7 Int) (Start_9 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartBool_4 Bool))
  ((Start Int (4 3 (* Start Start_1) (mod Start_2 Start_2)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (<= Start_5 Start_8) (= Start_6 Start_8) (>= Start_5 Start_3)))
   (Start_10 Int (4 3 (mod Start_9 Start_5)))
   (Start_5 Int (4 (- Start_6 Start) (+ Start_5 Start_3) (mod Start_1 Start_6)))
   (Start_3 Int (3 (+ Start_7 Start_2) (* Start_2 Start_2) (div Start_6 Start_5) (mod Start_4 Start_1)))
   (Start_2 Int (4 x (- Start_1) (+ Start Start_2) (div Start_1 Start) (mod Start Start)))
   (Start_1 Int (1 (+ Start_1 Start_3) (* Start Start_1) (div Start_1 Start_2) (abs Start_4)))
   (Start_4 Int (x (- Start_2) (* Start_2 Start_2) (mod Start_3 Start_4) (ite StartBool Start_5 Start_6)))
   (Start_6 Int (4 2 3 (- Start_6 Start_5) (+ Start_5 Start_1) (mod Start_4 Start_2) (abs Start_5) (ite StartBool Start_1 Start_6)))
   (StartBool_3 Bool (false true (not StartBool_4) (< Start_4 Start_3) (= Start_3 Start_5)))
   (Start_8 Int (4 2 (- Start_6) (- Start_8 Start) (+ Start_2 Start_2) (div Start_6 Start) (mod Start_5 Start_7) (abs Start_6)))
   (Start_7 Int (0 (* Start_8 Start_7) (div Start_7 Start_5) (abs Start_2) (ite StartBool_1 Start_6 Start_5)))
   (Start_9 Int (4 (- Start_2 Start_3) (+ Start_9 Start_3) (* Start_5 Start_6) (mod Start_6 Start_1) (abs Start_8) (ite StartBool_4 Start_10 Start_6)))
   (StartBool_1 Bool (true (not StartBool_1) (<= Start_2 Start_3) (= Start_1 Start_5) (>= Start_4 Start_4) (> Start Start_1)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool) (or StartBool_2 StartBool_3) (< Start_8 Start_8) (<= Start_10 Start_1) (> Start_1 Start_4)))
   (StartBool_4 Bool (false true (and StartBool StartBool_1) (< Start_9 Start_4) (<= Start_2 Start_6) (>= Start_3 Start_2) (> Start_3 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- 1) y)))

(check-synth)
