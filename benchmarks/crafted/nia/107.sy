(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_6 Int) (Start_2 Int) (Start_5 Int) (Start_4 Int) (Start_7 Int) (Start_8 Int) (StartBool_1 Bool) (Start_3 Int) (Start_1 Int))
  ((Start Int (0 1 5 x (- Start) (ite StartBool Start Start_1)))
   (StartBool Bool (true (not StartBool_2)))
   (StartBool_2 Bool (true (and StartBool StartBool_1) (< Start_5 Start_7)))
   (Start_6 Int (1 (- Start_1) (+ Start_4 Start_7) (* Start Start_2) (div Start_3 Start_8) (abs Start_3) (ite StartBool_2 Start_8 Start_3)))
   (Start_2 Int (3 (- Start_6 Start_6) (+ Start_6 Start_6)))
   (Start_5 Int (3 (* Start Start) (mod Start_4 Start_6) (abs Start_3)))
   (Start_4 Int (3 1 (- Start_3 Start) (* Start_5 Start_5) (div Start_1 Start)))
   (Start_7 Int (x (+ Start_2 Start_3) (* Start Start_6) (div Start_4 Start_7)))
   (Start_8 Int (x (- Start) (- Start_2 Start_8) (div Start_8 Start_6)))
   (StartBool_1 Bool (true false (not StartBool) (or StartBool_1 StartBool_1) (= Start_2 Start_3) (>= Start_1 Start) (> Start_3 Start_3)))
   (Start_3 Int (2 (- Start_1) (mod Start_3 Start_2) (ite StartBool Start_3 Start_4)))
   (Start_1 Int (2 (- Start_2) (- Start_1 Start_2) (+ Start Start) (div Start_2 Start) (mod Start_1 Start_1) (ite StartBool_1 Start_1 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* x 5))))

(check-synth)
