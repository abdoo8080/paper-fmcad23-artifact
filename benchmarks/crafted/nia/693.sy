(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_14 Int) (Start_15 Int) (Start_1 Int) (Start_13 Int) (Start_2 Int) (StartBool_4 Bool) (StartBool_6 Bool) (Start_12 Int) (Start_4 Int) (Start_7 Int) (Start_5 Int) (Start_6 Int) (Start_3 Int) (Start_9 Int) (StartBool_1 Bool) (Start_8 Int) (StartBool_2 Bool) (Start_10 Int) (StartBool_3 Bool) (StartBool_5 Bool) (Start_11 Int))
  ((Start Int (0 (- Start_1) (- Start_2 Start_1) (+ Start_3 Start_4) (* Start_3 Start_3) (div Start_3 Start_3) (mod Start Start_3) (abs Start_1) (ite StartBool Start_4 Start_3)))
   (StartBool Bool (false (and StartBool StartBool) (or StartBool_1 StartBool) (= Start_10 Start_7) (> Start_9 Start_9)))
   (Start_16 Int (x (div Start_9 Start_1) (abs Start_2)))
   (Start_14 Int (4 0 5 (+ Start_12 Start_4) (div Start_7 Start_12) (ite StartBool_6 Start_11 Start_6)))
   (Start_15 Int (1 (- Start_11 Start_4) (mod Start_16 Start_5)))
   (Start_1 Int (0 1 y (- Start_14) (div Start_3 Start_8) (abs Start_8) (ite StartBool_4 Start_9 Start_12)))
   (Start_13 Int (3 (+ Start_6 Start_13) (abs Start_2)))
   (Start_2 Int (4 5 y (- Start_6) (- Start_5 Start_7) (+ Start_6 Start_13) (div Start_7 Start) (mod Start_1 Start_1) (abs Start_8) (ite StartBool_3 Start Start_2)))
   (StartBool_4 Bool (true (not StartBool_2) (= Start_4 Start_8)))
   (StartBool_6 Bool (false (or StartBool_1 StartBool_1) (<= Start_15 Start_15) (= Start_16 Start_15) (>= Start_3 Start_5)))
   (Start_12 Int (y 3 x (- Start_9) (div Start_8 Start) (ite StartBool_5 Start_11 Start_10)))
   (Start_4 Int (4 (- Start Start_4) (* Start_5 Start_3) (div Start_1 Start_1) (mod Start_4 Start_3)))
   (Start_7 Int (4 (- Start) (+ Start_8 Start_1) (* Start_8 Start_8) (ite StartBool_1 Start_5 Start_9)))
   (Start_5 Int (2 (- Start_2) (+ Start Start_3)))
   (Start_6 Int (3 5 1 (- Start_12 Start_6) (div Start_5 Start_9) (abs Start_1)))
   (Start_3 Int (4 (- Start_3) (- Start_2 Start_5) (+ Start Start_3) (* Start_1 Start_6) (div Start_7 Start_4) (abs Start_3)))
   (Start_9 Int (x (- Start_9 Start) (abs Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (or StartBool StartBool_1) (< Start_3 Start_2)))
   (Start_8 Int (5 (- Start_10) (- Start_9 Start_5) (+ Start_7 Start_4) (* Start_10 Start) (abs Start_7)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool StartBool) (< Start_1 Start)))
   (Start_10 Int (y (- Start_10) (- Start_7 Start_4) (+ Start_1 Start_4) (mod Start_9 Start_9) (ite StartBool_3 Start_11 Start_9)))
   (StartBool_3 Bool (true (not StartBool_1) (or StartBool_4 StartBool_5) (< Start_7 Start_2) (<= Start_6 Start_4) (> Start_6 Start_4)))
   (StartBool_5 Bool (true (or StartBool_5 StartBool_1) (= Start_3 Start) (>= Start_6 Start_9)))
   (Start_11 Int (5 3 x (* Start_7 Start_2) (div Start_1 Start_6) (abs Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- y 5) 5)))

(check-synth)
