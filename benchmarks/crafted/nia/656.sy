(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_22 Int) (Start_25 Int) (Start_12 Int) (Start_10 Int) (Start_11 Int) (Start_17 Int) (Start_6 Int) (StartBool_4 Bool) (StartBool_2 Bool) (StartBool_1 Bool) (StartBool_5 Bool) (Start_20 Int) (Start_13 Int) (Start_24 Int) (Start_5 Int) (Start_3 Int) (Start_8 Int) (Start_18 Int) (Start_14 Int) (Start_2 Int) (Start_16 Int) (StartBool_3 Bool) (Start_23 Int) (Start_7 Int) (Start_19 Int) (Start_9 Int) (Start_15 Int) (Start_4 Int) (Start_1 Int) (Start_21 Int))
  ((Start Int (4 (- Start Start_1) (* Start_2 Start_3) (div Start_2 Start_1) (mod Start_3 Start_3) (abs Start)))
   (StartBool Bool (false (and StartBool_4 StartBool_3) (or StartBool StartBool_3) (<= Start_21 Start_7) (>= Start_14 Start_19)))
   (Start_22 Int (2 1 5 (- Start_22) (- Start_1 Start_3) (mod Start_18 Start_16) (ite StartBool_2 Start_17 Start_8)))
   (Start_25 Int (x 1 (- Start_6) (abs Start_22)))
   (Start_12 Int (5 1 x (- Start_4 Start_2) (abs Start)))
   (Start_10 Int (5 (+ Start_10 Start_8) (* Start_8 Start_5) (mod Start_9 Start_7) (ite StartBool_1 Start_11 Start_12)))
   (Start_11 Int (1 0 2 (+ Start_2 Start_4) (* Start_12 Start_13) (div Start_11 Start_8) (mod Start_8 Start_8) (ite StartBool Start_11 Start_3)))
   (Start_17 Int (1 0 (- Start_13) (- Start_4 Start_6) (+ Start_4 Start_6) (* Start_7 Start_5) (div Start_5 Start_6) (ite StartBool_5 Start_14 Start_4)))
   (Start_6 Int (x (+ Start_2 Start_7) (ite StartBool_1 Start_4 Start_1)))
   (StartBool_4 Bool (true (not StartBool_3) (or StartBool_4 StartBool_5) (< Start_3 Start_5) (= Start_1 Start_3) (>= Start_7 Start_5)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_3 StartBool_3) (or StartBool_4 StartBool_4) (>= Start_6 Start_7)))
   (StartBool_1 Bool (false true (or StartBool StartBool_2) (>= Start_3 Start_6) (> Start Start)))
   (StartBool_5 Bool (true false (< Start_8 Start_3) (<= Start_2 Start_2) (> Start_2 Start_2)))
   (Start_20 Int (5 (- Start_13) (- Start_8 Start_16) (* Start_17 Start_18) (div Start_14 Start_7) (mod Start_5 Start_17) (abs Start_2) (ite StartBool_1 Start_19 Start_11)))
   (Start_13 Int (4 y (- Start_5) (* Start_10 Start_9) (ite StartBool_4 Start_11 Start_14)))
   (Start_24 Int (1 (- Start_6 Start_17) (+ Start_25 Start_10)))
   (Start_5 Int (4 (- Start_4) (+ Start_4 Start) (div Start Start_1) (mod Start_4 Start_4) (abs Start_6) (ite StartBool Start_3 Start_2)))
   (Start_3 Int (5 (- Start) (+ Start_4 Start_5) (* Start_5 Start_3) (div Start_1 Start_3) (ite StartBool Start_5 Start_2)))
   (Start_8 Int (1 (- Start_5) (+ Start_6 Start_4) (* Start_6 Start_9) (mod Start_1 Start_8) (ite StartBool_5 Start_1 Start_10)))
   (Start_18 Int (5 (* Start_12 Start_11) (mod Start_3 Start_16)))
   (Start_14 Int (3 2 (+ Start_9 Start_8) (* Start_1 Start_15) (div Start_3 Start_13) (abs Start_10)))
   (Start_2 Int (2 0 x 5 (- Start_14) (- Start_17 Start_20) (mod Start_7 Start_16)))
   (Start_16 Int (5 x 3 2 (- Start_13) (div Start_7 Start_18) (mod Start_3 Start_9)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool) (or StartBool_1 StartBool) (< Start Start_4) (<= Start_8 Start_10) (= Start_1 Start_9) (>= Start_2 Start_9)))
   (Start_23 Int (3 (- Start_12) (div Start_11 Start_21) (mod Start_21 Start_15) (ite StartBool_1 Start_15 Start_24)))
   (Start_7 Int (0 1 2 (- Start_1 Start_6) (* Start_6 Start_4) (mod Start_6 Start_19)))
   (Start_19 Int (4 2 (* Start_14 Start_7) (div Start_3 Start_20) (abs Start_2)))
   (Start_9 Int (4 (- Start) (* Start_15 Start_1)))
   (Start_15 Int (x (- Start_2) (- Start_3 Start_2) (div Start_6 Start_5) (mod Start_2 Start_3) (abs Start_16) (ite StartBool_4 Start_17 Start_15)))
   (Start_4 Int (x 1 (- Start_5) (+ Start Start_2) (abs Start_12) (ite StartBool_4 Start_5 Start_19)))
   (Start_1 Int (3 (+ Start_19 Start_19) (abs Start_5) (ite StartBool_1 Start_8 Start_15)))
   (Start_21 Int (3 1 (- Start_14) (- Start_22 Start_11) (+ Start_6 Start_4) (* Start_13 Start_20) (div Start_23 Start_3) (abs Start_15)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- y 5))))

(check-synth)
