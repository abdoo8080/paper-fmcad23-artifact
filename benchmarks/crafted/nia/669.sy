(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (Start_17 Int) (Start_22 Int) (Start_1 Int) (Start_19 Int) (Start_15 Int) (Start_2 Int) (StartBool_3 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_3 Int) (Start_4 Int) (Start_10 Int) (Start_9 Int) (Start_21 Int) (Start_7 Int) (Start_12 Int) (Start_8 Int) (Start_14 Int) (Start_11 Int) (Start_16 Int) (StartBool_1 Bool) (Start_6 Int) (Start_18 Int) (Start_13 Int))
  ((Start Int (0 1 (- Start_1 Start_2) (* Start Start) (mod Start_2 Start_3) (abs Start_2) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_2 StartBool_3) (< Start_12 Start_12) (= Start_20 Start_12) (>= Start_10 Start_2) (> Start_16 Start_2)))
   (Start_20 Int (2 (- Start_19) (* Start_19 Start_21) (mod Start_9 Start_5)))
   (Start_17 Int (3 5 (- Start_3 Start_9) (* Start_2 Start_17) (abs Start_18) (ite StartBool Start_19 Start_14)))
   (Start_22 Int (2 (- Start_14) (- Start_18 Start_4) (div Start Start_12) (mod Start_14 Start_1) (abs Start_20) (ite StartBool Start_15 Start_4)))
   (Start_1 Int (y (* Start_2 Start_3) (div Start_4 Start_17) (mod Start_17 Start) (abs Start_8)))
   (Start_19 Int (2 1 (mod Start_7 Start_6)))
   (Start_15 Int (4 (- Start_11) (+ Start_13 Start_13) (* Start_10 Start_9) (div Start_16 Start_6) (abs Start_16)))
   (Start_2 Int (5 y x 2 4 (- Start_12) (+ Start_8 Start_5) (* Start_12 Start_15) (div Start_4 Start_16)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (or StartBool_2 StartBool_1) (< Start_2 Start_4) (= Start_12 Start_4) (>= Start_14 Start_4)))
   (Start_5 Int (1 y (- Start_1 Start_5) (div Start_5 Start_5) (mod Start Start_1) (ite StartBool Start_4 Start)))
   (StartBool_2 Bool (false (not StartBool_2) (or StartBool_3 StartBool) (<= Start_1 Start_12)))
   (Start_3 Int (y (- Start_4) (- Start Start_4) (+ Start_4 Start_3) (* Start_5 Start) (div Start_4 Start_1) (abs Start_2) (ite StartBool Start Start_4)))
   (Start_4 Int (0 3 (- Start_4) (- Start Start_6) (* Start_4 Start_5) (div Start_2 Start_4) (mod Start_1 Start_5) (ite StartBool Start_7 Start_7)))
   (Start_10 Int (2 x (mod Start Start_10) (abs Start) (ite StartBool Start_4 Start_11)))
   (Start_9 Int (3 (* Start Start_6) (div Start_11 Start_10) (abs Start)))
   (Start_21 Int (x 3 (- Start_5) (- Start_2 Start_22) (div Start_14 Start_17) (abs Start_10)))
   (Start_7 Int (4 (- Start_1) (- Start Start_8) (+ Start_2 Start_2) (div Start_6 Start_7) (mod Start_8 Start_6) (abs Start_2) (ite StartBool Start_1 Start_5)))
   (Start_12 Int (y 2 0 4 1 (- Start Start_12) (+ Start_12 Start) (* Start_3 Start_11) (div Start_1 Start_5) (ite StartBool_1 Start_12 Start)))
   (Start_8 Int (y 1 (- Start_9) (- Start_1 Start_1) (* Start_5 Start_10) (div Start_10 Start) (abs Start_8)))
   (Start_14 Int (y (- Start_7) (* Start_1 Start_13) (div Start_6 Start_2) (mod Start_5 Start_9) (abs Start) (ite StartBool_2 Start_5 Start_10)))
   (Start_11 Int (1 (- Start_2 Start_8) (+ Start_5 Start_5) (* Start_2 Start_1) (mod Start_7 Start_4) (ite StartBool Start_6 Start_5)))
   (Start_16 Int (5 (- Start_9) (ite StartBool_2 Start_6 Start_2)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_1 StartBool) (or StartBool_2 StartBool_2) (< Start_8 Start_1) (<= Start_8 Start) (= Start_9 Start_6) (> Start_12 Start_13)))
   (Start_6 Int (1 (- Start_6) (+ Start Start_7) (div Start_8 Start_9) (mod Start_11 Start_1) (abs Start_12)))
   (Start_18 Int (4 (+ Start_8 Start_3) (* Start_18 Start_12) (div Start_2 Start_5) (mod Start_2 Start_20) (ite StartBool_1 Start_20 Start_17)))
   (Start_13 Int (y (- Start_11) (+ Start_8 Start_2) (* Start_10 Start_12) (div Start_6 Start_11) (mod Start_6 Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- 0 (* 3 5)) (- y))))

(check-synth)
