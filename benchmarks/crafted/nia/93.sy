(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_3 Int) (Start_5 Int) (Start_4 Int) (Start_9 Int) (Start_2 Int) (Start_7 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_14 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_12 Int) (Start_1 Int) (Start_8 Int) (Start_13 Int) (Start_6 Int) (Start_11 Int))
  ((Start Int (4 y (- Start Start_1) (+ Start_2 Start_2) (div Start Start) (ite StartBool Start Start_3)))
   (StartBool Bool (false true (< Start_13 Start_5) (<= Start_12 Start_2) (= Start_3 Start_12) (>= Start_6 Start_13) (> Start_4 Start_7)))
   (Start_10 Int (4 1 3 x (* Start_6 Start_8) (div Start_5 Start_10) (mod Start_4 Start_13)))
   (Start_3 Int (x (- Start_1) (- Start_1 Start_4) (abs Start_5)))
   (Start_5 Int (5 (- Start_3 Start_4) (abs Start_1) (ite StartBool Start_4 Start_4)))
   (Start_4 Int (1 2 y 0 (abs Start_6) (ite StartBool_1 Start_1 Start_2)))
   (Start_9 Int (2 5 4 (ite StartBool_4 Start_11 Start_1)))
   (Start_2 Int (0 (- Start_8) (+ Start_9 Start_2) (div Start_10 Start_4) (mod Start_9 Start_2) (ite StartBool Start_11 Start_12)))
   (Start_7 Int (0 y 4 (- Start_1) (div Start_1 Start_5) (abs Start_3) (ite StartBool_4 Start_7 Start_7)))
   (StartBool_1 Bool (false true (not StartBool_2) (or StartBool StartBool_2) (= Start_3 Start_6) (>= Start Start_5)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_2) (or StartBool_2 StartBool_3) (>= Start_1 Start_1)))
   (Start_14 Int (y x (* Start_14 Start_14) (mod Start_14 Start_3)))
   (StartBool_3 Bool (true false (not StartBool_2) (< Start Start_3) (>= Start_4 Start_4) (> Start_1 Start_2)))
   (StartBool_4 Bool (false (and StartBool_1 StartBool_4) (= Start_5 Start_6) (>= Start_3 Start_4) (> Start_1 Start)))
   (Start_12 Int (5 0 y 4 3 (- Start_5) (- Start Start) (+ Start_6 Start_8) (div Start_6 Start_12)))
   (Start_1 Int (4 3 1 5 2 0 (- Start_13) (* Start Start_6) (div Start_10 Start_14)))
   (Start_8 Int (5 y (- Start_13) (+ Start_7 Start_9) (mod Start_11 Start_1) (abs Start_3) (ite StartBool_1 Start_13 Start_2)))
   (Start_13 Int (2 (- Start_13) (- Start_2 Start_11) (mod Start_3 Start_12) (ite StartBool_1 Start_1 Start_10)))
   (Start_6 Int (3 (- Start_2 Start_6) (+ Start_4 Start_1) (* Start_6 Start_2) (div Start_7 Start)))
   (Start_11 Int (0 y 1 (- Start Start_13) (+ Start_6 Start_9) (mod Start_5 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod y 3)))

(check-synth)
