(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_5 Bool) (StartBool_6 Bool) (Start_18 Int) (Start_14 Int) (Start_17 Int) (Start_15 Int) (Start_1 Int) (Start_12 Int) (Start_3 Int) (StartBool_1 Bool) (Start_11 Int) (Start_7 Int) (Start_10 Int) (Start_4 Int) (Start_16 Int) (StartBool_3 Bool) (Start_13 Int) (Start_5 Int) (Start_6 Int) (Start_2 Int) (Start_8 Int) (StartBool_2 Bool) (Start_9 Int))
  ((Start Int (0 4 (- Start_1) (div Start_2 Start_1) (mod Start_2 Start_2) (ite StartBool_1 Start Start_2)))
   (StartBool Bool (true (and StartBool_4 StartBool_3) (or StartBool_5 StartBool_6) (< Start_10 Start_14) (<= Start_7 Start_3) (= Start_7 Start_7) (> Start_16 Start_2)))
   (StartBool_4 Bool (true (not StartBool_2) (< Start_2 Start_14) (>= Start_9 Start_11)))
   (StartBool_5 Bool (false (not StartBool_5) (and StartBool_5 StartBool) (>= Start_3 Start_17) (> Start_3 Start_12)))
   (StartBool_6 Bool (true (or StartBool_3 StartBool) (< Start_13 Start_14) (<= Start_5 Start_5) (>= Start_13 Start_17) (> Start_4 Start_1)))
   (Start_18 Int (3 (- Start_8) (+ Start_12 Start_11) (* Start_3 Start_12)))
   (Start_14 Int (4 (- Start_2) (- Start_13 Start_2) (+ Start Start_2) (* Start_7 Start_7) (div Start_7 Start_2) (abs Start_5) (ite StartBool_2 Start_8 Start_9)))
   (Start_17 Int (x (* Start_15 Start_18) (abs Start_18)))
   (Start_15 Int (2 (- Start_10) (- Start_7 Start_5) (ite StartBool_3 Start_13 Start_4)))
   (Start_1 Int (4 (- Start_11) (* Start_7 Start_14) (div Start_3 Start_15)))
   (Start_12 Int (5 2 x 1 4 (- Start_7 Start_6) (* Start_7 Start) (div Start_5 Start_3) (abs Start_6) (ite StartBool_2 Start Start_5)))
   (Start_3 Int (1 (- Start_4 Start_1) (* Start_2 Start_2)))
   (StartBool_1 Bool (true (not StartBool) (or StartBool StartBool_1) (< Start Start_2) (<= Start_1 Start_2) (= Start Start_3)))
   (Start_11 Int (y 3 (- Start_4 Start_3) (* Start_9 Start_4) (mod Start_9 Start_13) (abs Start_13) (ite StartBool_1 Start_9 Start)))
   (Start_7 Int (4 2 (+ Start_3 Start_1) (div Start_3 Start_7) (abs Start_1) (ite StartBool_1 Start_5 Start_2)))
   (Start_10 Int (4 (- Start Start_2) (div Start_4 Start) (mod Start_11 Start_8) (abs Start_8) (ite StartBool Start_12 Start_13)))
   (Start_4 Int (0 (* Start Start_3) (mod Start_1 Start) (abs Start_4) (ite StartBool_2 Start Start)))
   (Start_16 Int (5 x y 1 2 (- Start_5) (+ Start_12 Start_7) (div Start_4 Start) (mod Start_17 Start_15) (ite StartBool_1 Start_9 Start_11)))
   (StartBool_3 Bool (false (not StartBool_3) (or StartBool_1 StartBool_3) (= Start_5 Start_2)))
   (Start_13 Int (2 5 (- Start_12 Start_5) (div Start_9 Start_13) (ite StartBool_3 Start_2 Start_11)))
   (Start_5 Int (2 (+ Start_4 Start_4) (abs Start) (ite StartBool Start_1 Start_2)))
   (Start_6 Int (y (- Start_3) (+ Start_8 Start_6) (* Start_8 Start_5) (mod Start Start_7)))
   (Start_2 Int (5 (- Start_1) (- Start_6 Start_4) (+ Start_5 Start) (mod Start_6 Start_5) (abs Start_7)))
   (Start_8 Int (3 (- Start_1) (* Start_9 Start_6) (mod Start_4 Start_5)))
   (StartBool_2 Bool (false (and StartBool StartBool_3) (or StartBool_1 StartBool) (< Start Start_1) (<= Start_4 Start_3) (> Start_3 Start_3)))
   (Start_9 Int (3 2 y (- Start_10) (- Start_3 Start_3) (+ Start_8 Start_9) (* Start_2 Start_7) (div Start_1 Start_4) (mod Start_1 Start_9) (abs Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= 1 x) 4 0)))

(check-synth)
