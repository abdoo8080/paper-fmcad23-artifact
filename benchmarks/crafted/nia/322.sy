(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_16 Int) (StartBool_4 Bool) (Start_1 Int) (Start_13 Int) (Start_3 Int) (Start_12 Int) (Start_18 Int) (Start_17 Int) (Start_6 Int) (Start_8 Int) (StartBool_2 Bool) (Start_2 Int) (Start_15 Int) (Start_4 Int) (Start_14 Int) (Start_7 Int) (Start_11 Int) (Start_5 Int) (Start_9 Int) (Start_10 Int) (StartBool_1 Bool) (StartBool_3 Bool))
  ((Start Int (3 (+ Start Start) (div Start_1 Start_2)))
   (StartBool Bool (true (or StartBool_1 StartBool_4) (< Start_4 Start_4) (<= Start_8 Start_7) (= Start Start_11) (> Start_1 Start_11)))
   (Start_19 Int (4 (- Start_7) (* Start_7 Start_5) (mod Start_11 Start_19) (ite StartBool Start_12 Start_16)))
   (Start_16 Int (3 2 (- Start_2) (- Start Start_7) (+ Start_7 Start_11) (mod Start_13 Start_5) (abs Start_9)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool StartBool_2) (< Start_5 Start_6) (<= Start_7 Start_15) (= Start_10 Start_16) (>= Start_9 Start_8)))
   (Start_1 Int (x 4 y 5 (- Start_12) (+ Start_6 Start_1) (div Start_14 Start_12) (mod Start_7 Start_11) (abs Start_10)))
   (Start_13 Int (0 5 4 (- Start) (mod Start Start_7)))
   (Start_3 Int (5 (- Start_3) (+ Start_11 Start_2) (mod Start_9 Start_3) (abs Start_6) (ite StartBool_3 Start Start_13)))
   (Start_12 Int (0 y 3 (* Start_1 Start_4) (div Start_1 Start_11) (abs Start_8)))
   (Start_18 Int (3 0 (- Start_9) (- Start_14 Start_6) (+ Start_17 Start) (* Start_16 Start) (abs Start_19)))
   (Start_17 Int (0 1 x (- Start_18) (- Start_18 Start_3) (* Start_6 Start_14) (div Start_11 Start_13) (ite StartBool_3 Start_13 Start_4)))
   (Start_6 Int (4 (- Start) (- Start_5 Start_4) (* Start_1 Start_1)))
   (Start_8 Int (0 5 3 x (- Start_9) (+ Start_9 Start_2) (* Start_6 Start_5) (div Start Start_6) (abs Start)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_3) (or StartBool_2 StartBool_1) (> Start_1 Start_10)))
   (Start_2 Int (x (- Start_2) (+ Start_1 Start_3) (* Start_3 Start_4) (div Start_5 Start_2)))
   (Start_15 Int (y 4 0 (- Start_17) (- Start_2 Start_11) (abs Start_11) (ite StartBool_3 Start_4 Start_2)))
   (Start_4 Int (5 (- Start_5 Start_7) (div Start_4 Start_1) (mod Start_3 Start_4) (abs Start_3) (ite StartBool Start_3 Start_2)))
   (Start_14 Int (2 (+ Start_8 Start_4) (div Start_9 Start_3) (mod Start_9 Start_9)))
   (Start_7 Int (1 4 0 y x 2 (- Start_2 Start) (div Start_8 Start_1) (mod Start_6 Start_2) (ite StartBool Start_6 Start_2)))
   (Start_11 Int (4 x (- Start_2 Start_4) (* Start_7 Start_5) (div Start Start_10) (abs Start_12) (ite StartBool_2 Start_3 Start)))
   (Start_5 Int (2 x (- Start_6) (div Start_6 Start_5) (abs Start_6) (ite StartBool_1 Start_2 Start_5)))
   (Start_9 Int (1 5 (+ Start_1 Start_4) (* Start_6 Start_3) (div Start Start_10) (abs Start_10) (ite StartBool Start Start_10)))
   (Start_10 Int (2 (* Start_8 Start_11) (mod Start Start) (ite StartBool_2 Start_4 Start_9)))
   (StartBool_1 Bool (false (not StartBool_1) (= Start_5 Start) (>= Start_1 Start_6)))
   (StartBool_3 Bool (true false (<= Start_1 Start_7) (= Start_6 Start_6) (> Start_8 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (* 4 5) 4)))

(check-synth)
