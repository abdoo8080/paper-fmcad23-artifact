(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (Start_2 Int) (Start_18 Int) (Start_1 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_8 Int) (StartBool_3 Bool) (Start_7 Int) (Start_17 Int) (Start_5 Int) (Start_15 Int) (Start_9 Int) (Start_11 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_3 Int) (Start_12 Int) (Start_14 Int) (Start_4 Int) (Start_6 Int) (Start_13 Int) (Start_10 Int) (Start_19 Int) (Start_16 Int))
  ((Start Int (x (- Start) (- Start_1 Start_2) (+ Start Start) (div Start_3 Start_1)))
   (StartBool Bool (true false (and StartBool_4 StartBool_2) (or StartBool_4 StartBool_1) (< Start_7 Start_15) (<= Start_4 Start_13) (= Start_7 Start_2) (>= Start_19 Start_20) (> Start_4 Start_4)))
   (Start_20 Int (3 (* Start_7 Start_3) (div Start_6 Start_20) (mod Start_3 Start_1)))
   (Start_2 Int (1 (- Start_12 Start_6) (abs Start_1) (ite StartBool_3 Start_10 Start_4)))
   (Start_18 Int (5 3 1 (- Start_1) (- Start_5 Start_5) (* Start_3 Start)))
   (Start_1 Int (y (- Start_13 Start_13) (+ Start_16 Start_6) (div Start_1 Start_11) (abs Start_12)))
   (StartBool_5 Bool (true (not StartBool_2) (or StartBool_4 StartBool_4) (<= Start_9 Start_6) (= Start_16 Start_17) (>= Start_14 Start_11) (> Start_4 Start_13)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_2) (or StartBool_4 StartBool_5) (= Start_15 Start_3) (> Start_14 Start_12)))
   (Start_8 Int (y (- Start_10 Start_5) (+ Start_1 Start_15) (mod Start_5 Start_16)))
   (StartBool_3 Bool (false true (or StartBool_1 StartBool_4) (< Start_9 Start_10) (<= Start_16 Start_7)))
   (Start_7 Int (1 5 (- Start_6 Start_6) (* Start_2 Start_3) (ite StartBool_1 Start_4 Start_2)))
   (Start_17 Int (x 4 2 0 3 (div Start_4 Start_15)))
   (Start_5 Int (y (- Start_1 Start_6) (* Start_5 Start_1) (div Start_6 Start_7) (abs Start_2) (ite StartBool Start_5 Start_7)))
   (Start_15 Int (x (- Start_9) (- Start_16 Start_16) (div Start_10 Start) (mod Start_2 Start_1)))
   (Start_9 Int (y 0 (- Start_4 Start) (+ Start_8 Start_10) (* Start_3 Start_9) (ite StartBool Start_4 Start_11)))
   (Start_11 Int (y 2 5 (- Start_12) (- Start_4 Start_2) (* Start_9 Start_4) (mod Start_12 Start_11) (ite StartBool_2 Start_12 Start_3)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (<= Start_8 Start_9) (>= Start Start_2) (> Start_5 Start_4)))
   (StartBool_2 Bool (true (= Start_9 Start_2) (>= Start_12 Start) (> Start_11 Start_3)))
   (Start_3 Int (1 (- Start) (- Start_3 Start_4) (+ Start_3 Start_2) (mod Start_4 Start_2) (ite StartBool Start_1 Start_5)))
   (Start_12 Int (4 y (- Start_1) (- Start Start_3) (+ Start_12 Start_2) (* Start_7 Start_13) (mod Start_5 Start_4) (abs Start_10)))
   (Start_14 Int (2 (- Start_13 Start_5) (* Start_15 Start_16) (div Start_5 Start_5) (mod Start Start_11) (abs Start_4)))
   (Start_4 Int (5 2 3 (- Start) (- Start_5 Start_6) (+ Start_3 Start) (div Start_2 Start_2) (mod Start_18 Start_18) (abs Start_1) (ite StartBool_5 Start_13 Start_13)))
   (Start_6 Int (y 2 (- Start_12) (- Start Start_12) (+ Start_5 Start_18)))
   (Start_13 Int (0 (div Start_10 Start_13) (mod Start_8 Start_1) (ite StartBool_1 Start Start_13)))
   (Start_10 Int (4 1 5 0 2 (+ Start_13 Start_11) (div Start_13 Start_2) (mod Start Start_14)))
   (Start_19 Int (y (- Start_16) (- Start_9 Start_17) (div Start_4 Start_7) (mod Start_12 Start_20) (ite StartBool_2 Start_10 Start_4)))
   (Start_16 Int (4 x (- Start_4) (- Start_16 Start_7) (* Start_12 Start) (div Start_12 Start) (mod Start_13 Start_11) (abs Start_17) (ite StartBool_3 Start_14 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- (div (div 1 x) 0)))))

(check-synth)
