(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_17 Int) (Start_1 Int) (Start_2 Int) (Start_15 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_3 Int) (Start_6 Int) (Start_4 Int) (Start_10 Int) (Start_14 Int) (Start_12 Int) (StartBool_3 Bool) (Start_9 Int) (Start_7 Int) (StartBool_1 Bool) (Start_11 Int) (Start_5 Int) (Start_8 Int) (StartBool_2 Bool) (Start_13 Int))
  ((Start Int (2 (- Start) (- Start_1 Start_2) (+ Start Start_3) (* Start_1 Start_1) (div Start_1 Start) (ite StartBool Start Start_3)))
   (StartBool Bool (true false (not StartBool_4) (<= Start_3 Start_16)))
   (Start_16 Int (1 3 5 4 (mod Start_1 Start_2)))
   (Start_17 Int (1 (- Start_5) (mod Start_14 Start_7)))
   (Start_1 Int (3 (+ Start_16 Start_2) (* Start_17 Start_13) (mod Start_11 Start_1) (abs Start_10)))
   (Start_2 Int (3 (div Start_13 Start_2)))
   (Start_15 Int (x 1 (- Start_2) (- Start_11 Start_7) (+ Start_3 Start_11) (abs Start_5) (ite StartBool_5 Start_11 Start_8)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool_2) (< Start_14 Start_4) (<= Start_5 Start_7) (>= Start_5 Start_12)))
   (StartBool_4 Bool (true false (and StartBool_1 StartBool) (or StartBool_2 StartBool_3) (< Start_1 Start_11) (<= Start_7 Start_4) (>= Start_1 Start_6)))
   (Start_3 Int (x (- Start Start_3) (mod Start_4 Start_3) (ite StartBool Start_4 Start_2)))
   (Start_6 Int (3 x (- Start) (* Start_8 Start_9) (ite StartBool_5 Start_10 Start_8)))
   (Start_4 Int (0 4 (- Start) (+ Start Start_5) (div Start_4 Start_4) (abs Start_6) (ite StartBool Start_7 Start_2)))
   (Start_10 Int (x 1 (- Start_3) (- Start_10 Start_5) (+ Start_6 Start_4) (div Start_6 Start_10) (mod Start_6 Start_8) (abs Start_1)))
   (Start_14 Int (1 3 5 (- Start_4 Start_11) (+ Start_4 Start_2) (* Start_4 Start_3) (ite StartBool_5 Start_5 Start_5)))
   (Start_12 Int (0 y 5 (- Start_6) (* Start_10 Start_12) (div Start_7 Start_3) (mod Start_13 Start_8) (abs Start_9) (ite StartBool Start_8 Start_12)))
   (StartBool_3 Bool (false (not StartBool_3) (or StartBool_4 StartBool) (>= Start_5 Start_1) (> Start_3 Start_6)))
   (Start_9 Int (5 (- Start_2 Start_1) (+ Start_8 Start_5) (* Start_4 Start_7) (ite StartBool_1 Start Start_9)))
   (Start_7 Int (y (- Start) (- Start_1 Start_8) (+ Start_2 Start_9) (* Start_4 Start) (ite StartBool Start_6 Start_8)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (<= Start_7 Start_6) (= Start_10 Start_8)))
   (Start_11 Int (1 4 (+ Start_4 Start_6) (* Start_7 Start_4) (div Start_12 Start_6) (mod Start_9 Start_11) (abs Start) (ite StartBool_3 Start_13 Start_10)))
   (Start_5 Int (0 5 2 3 4 (- Start_3) (- Start_5 Start_15) (* Start_10 Start_5) (ite StartBool_4 Start_12 Start_5)))
   (Start_8 Int (1 (- Start_6) (+ Start_6 Start) (* Start_7 Start_6) (div Start_9 Start_6) (ite StartBool_2 Start_6 Start_7)))
   (StartBool_2 Bool (true false (not StartBool_1) (<= Start_11 Start_2) (> Start_12 Start_6)))
   (Start_13 Int (5 (- Start_2 Start_1) (+ Start_12 Start_5) (abs Start_10) (ite StartBool_2 Start_3 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (abs (+ x 1)) y)))

(check-synth)
