(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_13 Int) (Start_14 Int) (Start_1 Int) (Start_4 Int) (Start_2 Int) (Start_5 Int) (Start_3 Int) (Start_8 Int) (StartBool_2 Bool) (Start_10 Int) (Start_16 Int) (Start_9 Int) (Start_12 Int) (Start_17 Int) (Start_15 Int) (Start_11 Int) (Start_7 Int) (StartBool_1 Bool) (Start_6 Int) (StartBool_4 Bool) (StartBool_3 Bool))
  ((Start Int (3 (+ Start_1 Start_1) (* Start Start_2) (div Start_1 Start_1) (mod Start Start_1) (abs Start_3)))
   (StartBool Bool (true false (or StartBool_1 StartBool_5) (= Start_3 Start_10)))
   (StartBool_5 Bool (true false (< Start_16 Start_14) (<= Start_13 Start_8) (>= Start Start_13) (> Start_10 Start_5)))
   (Start_13 Int (5 (- Start) (+ Start_4 Start_5) (div Start_16 Start_17) (ite StartBool_4 Start_13 Start_7)))
   (Start_14 Int (1 (+ Start_5 Start_6) (div Start_12 Start_15) (abs Start_2)))
   (Start_1 Int (5 x (- Start_10 Start_5) (+ Start_6 Start_9) (* Start_10 Start_13) (div Start_4 Start_14) (mod Start_4 Start_2)))
   (Start_4 Int (2 0 (+ Start_8 Start_3) (mod Start_8 Start_7)))
   (Start_2 Int (2 (- Start_7) (- Start_8 Start_12)))
   (Start_5 Int (4 (- Start_4) (- Start_5 Start_3) (+ Start_2 Start_5) (abs Start_3) (ite StartBool_1 Start_3 Start_7)))
   (Start_3 Int (0 2 4 1 y x 3 (- Start_4 Start_4) (+ Start_5 Start_6) (div Start_2 Start_1) (mod Start_7 Start_8) (abs Start_5)))
   (Start_8 Int (y 0 x 4 3 (- Start_1) (- Start_3 Start_4) (+ Start_9 Start_10) (* Start_8 Start_2) (ite StartBool Start_9 Start_8)))
   (StartBool_2 Bool (false (= Start_3 Start_6)))
   (Start_10 Int (1 (div Start_2 Start_7) (mod Start_2 Start_1)))
   (Start_16 Int (0 (- Start_14 Start_11) (+ Start_16 Start_8)))
   (Start_9 Int (3 2 4 1 x y (+ Start_8 Start_1) (div Start_3 Start_6) (mod Start Start_9) (ite StartBool Start_3 Start)))
   (Start_12 Int (x (- Start_7 Start_1) (div Start_12 Start_9) (abs Start_1)))
   (Start_17 Int (y 1 (- Start_15) (+ Start_12 Start_10) (div Start_3 Start_16) (abs Start_7) (ite StartBool_5 Start_13 Start_5)))
   (Start_15 Int (4 (- Start_9 Start) (* Start_16 Start_7) (mod Start_7 Start_14) (ite StartBool_3 Start_4 Start_1)))
   (Start_11 Int (4 (+ Start_10 Start_8) (div Start_8 Start_6) (mod Start_7 Start_5) (abs Start_9) (ite StartBool_3 Start_7 Start_2)))
   (Start_7 Int (0 4 x (- Start_3) (+ Start_4 Start) (* Start_3 Start_10) (mod Start_2 Start) (abs Start_9) (ite StartBool_1 Start_8 Start_6)))
   (StartBool_1 Bool (true (not StartBool_1) (or StartBool_2 StartBool) (< Start_2 Start_2) (> Start_9 Start_9)))
   (Start_6 Int (2 (- Start_2 Start_6) (+ Start_11 Start_9) (* Start_6 Start_2) (mod Start_12 Start) (ite StartBool Start_11 Start_5)))
   (StartBool_4 Bool (false (not StartBool_1) (and StartBool_2 StartBool_1) (or StartBool_4 StartBool_4) (< Start_17 Start_1) (= Start_4 Start_2)))
   (StartBool_3 Bool (false (not StartBool_3) (<= Start_1 Start_8) (= Start_11 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div y 5)))

(check-synth)
