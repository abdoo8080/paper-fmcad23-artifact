(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_13 Int) (Start_12 Int) (Start_3 Int) (Start_10 Int) (Start_2 Int) (StartBool_1 Bool) (Start_6 Int) (Start_1 Int) (Start_7 Int) (StartBool_4 Bool) (Start_8 Int) (Start_5 Int) (Start_9 Int) (Start_4 Int) (StartBool_2 Bool) (Start_11 Int) (StartBool_3 Bool))
  ((Start Int (5 (- Start_1) (+ Start Start_2) (* Start Start_2) (mod Start Start_2)))
   (StartBool Bool (false (> Start_14 Start_12)))
   (Start_14 Int (4 y (- Start_7) (- Start_9 Start_4) (+ Start_10 Start_10) (* Start_9 Start_4) (abs Start)))
   (Start_13 Int (y (- Start_9) (div Start_8 Start_12) (abs Start_6) (ite StartBool Start_5 Start_9)))
   (Start_12 Int (4 y (- Start_11) (- Start_2 Start_10) (+ Start_12 Start_10) (* Start_11 Start_7)))
   (Start_3 Int (5 y (- Start_4) (* Start_2 Start_1)))
   (Start_10 Int (x (- Start_9 Start_9) (+ Start_9 Start_10) (div Start_11 Start_12) (abs Start_9) (ite StartBool_4 Start_2 Start_5)))
   (Start_2 Int (x (- Start_1) (- Start_1 Start_1) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_2) (or StartBool_1 StartBool_1) (< Start_5 Start_3) (= Start_3 Start_6) (> Start_4 Start_5)))
   (Start_6 Int (4 1 (- Start Start_5) (+ Start_4 Start_1) (div Start_1 Start_1) (mod Start_4 Start_6)))
   (Start_1 Int (2 (- Start_1 Start_4) (+ Start_5 Start_6) (div Start_6 Start_6) (ite StartBool_3 Start_5 Start_3)))
   (Start_7 Int (3 1 4 (- Start_3 Start_8) (* Start_7 Start_1) (div Start_2 Start_4) (mod Start_4 Start_2)))
   (StartBool_4 Bool (false (not StartBool_3) (>= Start_11 Start_8)))
   (Start_8 Int (2 x (- Start_7) (- Start_2 Start_2) (+ Start Start_5) (* Start_6 Start_5) (div Start_2 Start_9) (ite StartBool Start_2 Start_10)))
   (Start_5 Int (1 (- Start_3) (- Start_6 Start_4) (* Start_6 Start_1) (div Start Start_4)))
   (Start_9 Int (5 3 x 4 (- Start_6) (- Start_11 Start_9) (+ Start_9 Start_14) (mod Start_5 Start_4) (abs Start_14) (ite StartBool_3 Start_10 Start_5)))
   (Start_4 Int (3 (- Start) (+ Start_1 Start_1) (div Start Start_3) (abs Start)))
   (StartBool_2 Bool (true (< Start_4 Start_4) (<= Start_3 Start_4) (>= Start_2 Start_4)))
   (Start_11 Int (2 (- Start_9) (- Start_11 Start_11) (mod Start_8 Start_13) (abs Start_3) (ite StartBool_3 Start Start_9)))
   (StartBool_3 Bool (true false (not StartBool) (or StartBool_2 StartBool_2) (< Start_3 Start_4) (<= Start_6 Start_1) (>= Start Start_2) (> Start_3 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod y x) 4)))

(check-synth)
