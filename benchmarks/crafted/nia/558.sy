(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_16 Int) (Start_17 Int) (Start_2 Int) (Start_18 Int) (StartBool_3 Bool) (Start_14 Int) (Start_15 Int) (Start_1 Int) (Start_6 Int) (Start_3 Int) (Start_5 Int) (Start_13 Int) (Start_7 Int) (Start_9 Int) (Start_8 Int) (Start_4 Int) (Start_10 Int) (StartBool_2 Bool) (Start_11 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_12 Int))
  ((Start Int (2 4 0 x 5 y 3 1 (- Start_1) (div Start_1 Start_1) (abs Start_1) (ite StartBool Start Start_1)))
   (StartBool Bool (true (< Start_17 Start_14) (<= Start_18 Start_18) (= Start_14 Start_10) (>= Start_12 Start_3)))
   (StartBool_5 Bool (false (or StartBool_5 StartBool_3) (<= Start_3 Start_8) (= Start_8 Start_10) (>= Start_9 Start_2)))
   (Start_16 Int (3 (- Start_10) (- Start_1 Start_7) (+ Start_1 Start_4) (* Start Start_4) (div Start_15 Start_1) (abs Start_10) (ite StartBool_4 Start_15 Start_13)))
   (Start_17 Int (0 (- Start_4 Start_7) (+ Start_14 Start_7) (* Start_4 Start_1) (mod Start_11 Start_1)))
   (Start_2 Int (3 2 (- Start_12) (* Start_6 Start_16) (div Start_16 Start_17) (mod Start_7 Start_14) (abs Start_10)))
   (Start_18 Int (x 0 (- Start_3) (+ Start_9 Start_8) (* Start_2 Start_11) (div Start_12 Start_11) (abs Start_17)))
   (StartBool_3 Bool (true (not StartBool) (< Start_13 Start_6) (<= Start_13 Start_1)))
   (Start_14 Int (4 3 (- Start_10) (* Start_15 Start_5) (div Start_3 Start_6) (ite StartBool_3 Start_4 Start_9)))
   (Start_15 Int (x 4 2 y 3 (- Start_4) (* Start Start_1) (div Start_13 Start_6) (ite StartBool_1 Start_12 Start_6)))
   (Start_1 Int (4 5 0 y 2 x 3 1 (- Start_1 Start_2) (ite StartBool_1 Start Start_3)))
   (Start_6 Int (4 1 (ite StartBool Start_6 Start_7)))
   (Start_3 Int (y (- Start_2) (ite StartBool Start_2 Start_4)))
   (Start_5 Int (2 (- Start_1 Start_5) (+ Start_7 Start_5) (* Start_8 Start_8) (div Start_1 Start_8) (mod Start_9 Start) (abs Start_2)))
   (Start_13 Int (x (+ Start_14 Start) (* Start Start_11) (div Start_15 Start_15) (abs Start_4)))
   (Start_7 Int (5 (- Start_2 Start_1) (+ Start_7 Start_1) (* Start_5 Start_7) (mod Start_6 Start_4) (abs Start_7)))
   (Start_9 Int (1 3 x (* Start_5 Start) (mod Start_6 Start_2)))
   (Start_8 Int (x (+ Start_2 Start_10) (* Start_6 Start_5) (div Start_7 Start) (ite StartBool_1 Start_8 Start_9)))
   (Start_4 Int (5 (- Start) (+ Start_5 Start_1) (* Start_4 Start_6) (ite StartBool_1 Start_1 Start_2)))
   (Start_10 Int (0 (- Start_2) (ite StartBool Start_5 Start)))
   (StartBool_2 Bool (true (not StartBool_2) (> Start_5 Start_12)))
   (Start_11 Int (2 (+ Start_5 Start_5) (div Start_7 Start_3) (mod Start_9 Start_7) (abs Start) (ite StartBool_2 Start_4 Start_12)))
   (StartBool_4 Bool (true false (or StartBool_5 StartBool_5) (<= Start_15 Start_11) (= Start Start_7) (>= Start_4 Start)))
   (StartBool_1 Bool (false true (not StartBool) (or StartBool StartBool_1) (<= Start_6 Start_5) (>= Start_11 Start_5)))
   (Start_12 Int (5 (- Start) (mod Start_5 Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 4 (ite (< 4 y) 0 4))))

(check-synth)
