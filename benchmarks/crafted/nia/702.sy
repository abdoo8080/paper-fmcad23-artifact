(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_20 Int) (Start_19 Int) (Start_4 Int) (Start_6 Int) (Start_18 Int) (Start_3 Int) (StartBool_6 Bool) (Start_16 Int) (Start_17 Int) (Start_14 Int) (Start_15 Int) (StartBool_5 Bool) (StartBool_3 Bool) (Start_5 Int) (Start_7 Int) (StartBool_1 Bool) (Start_13 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_9 Int) (Start_8 Int) (Start_10 Int) (Start_12 Int) (Start_1 Int) (Start_11 Int))
  ((Start Int (5 3 y (- Start Start_1) (mod Start Start) (abs Start) (ite StartBool Start Start_1)))
   (StartBool Bool (false (not StartBool_2) (< Start_16 Start_15) (<= Start_20 Start_12) (>= Start_14 Start_13)))
   (Start_2 Int (y 3 2 (- Start_14 Start_17) (div Start_4 Start_3) (mod Start_17 Start_6) (abs Start_5) (ite StartBool_1 Start Start_1)))
   (Start_20 Int (4 (- Start_11) (+ Start_16 Start_20) (* Start_15 Start_2) (mod Start Start_17) (abs Start_13)))
   (Start_19 Int (4 (- Start_15 Start_4) (* Start_2 Start_11) (div Start_14 Start_16) (abs Start_19)))
   (Start_4 Int (x (- Start_8) (+ Start_15 Start) (div Start_14 Start_19)))
   (Start_6 Int (4 (- Start) (- Start_18 Start_10) (+ Start_10 Start_10) (* Start_2 Start_5) (abs Start_1) (ite StartBool_5 Start_9 Start_6)))
   (Start_18 Int (4 1 (- Start_18 Start_5) (+ Start_5 Start_15) (div Start_10 Start_11) (abs Start_9)))
   (Start_3 Int (1 (- Start_16 Start_8) (+ Start_5 Start_13) (mod Start_10 Start_16) (abs Start_2)))
   (StartBool_6 Bool (true false (and StartBool_1 StartBool) (or StartBool_4 StartBool_6) (<= Start_16 Start_4) (>= Start_7 Start_18) (> Start_18 Start_13)))
   (Start_16 Int (4 (+ Start_7 Start_3) (div Start_8 Start_14)))
   (Start_17 Int (0 (- Start_5) (- Start_17 Start_16) (+ Start_8 Start_12) (* Start_3 Start_6) (div Start_12 Start_16) (abs Start_4) (ite StartBool_2 Start_1 Start_12)))
   (Start_14 Int (5 1 y 3 2 (- Start_1 Start_13) (+ Start_10 Start_11) (* Start_3 Start) (div Start Start_5) (mod Start_12 Start_9)))
   (Start_15 Int (0 y (- Start_2) (- Start_2 Start_16) (+ Start_13 Start_17) (* Start_7 Start_6) (div Start_6 Start_9) (abs Start)))
   (StartBool_5 Bool (true (not StartBool_5) (and StartBool StartBool_2) (or StartBool_3 StartBool) (< Start_7 Start) (<= Start_13 Start_14) (= Start_3 Start_2) (>= Start_4 Start_13)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_4) (< Start_12 Start_2) (>= Start_5 Start_8) (> Start Start_1)))
   (Start_5 Int (y (* Start_4 Start_5) (abs Start_6) (ite StartBool_1 Start_5 Start_7)))
   (Start_7 Int (2 (+ Start_5 Start_1) (ite StartBool Start_3 Start_2)))
   (StartBool_1 Bool (true false (or StartBool_1 StartBool_1) (< Start_6 Start_5) (> Start Start_8)))
   (Start_13 Int (3 (mod Start Start_9) (abs Start_7) (ite StartBool_3 Start_5 Start_6)))
   (StartBool_2 Bool (false true (not StartBool_6) (or StartBool_2 StartBool) (< Start_10 Start_10) (<= Start_13 Start_1) (= Start_5 Start_15)))
   (StartBool_4 Bool (true false (not StartBool_5) (or StartBool_2 StartBool_5) (>= Start Start_8) (> Start_8 Start_3)))
   (Start_9 Int (1 (- Start_1) (- Start_9 Start_3) (+ Start_5 Start) (div Start_2 Start_10) (abs Start)))
   (Start_8 Int (x (div Start_9 Start)))
   (Start_10 Int (5 (- Start_11 Start_6) (* Start_3 Start_2) (mod Start_1 Start_11) (abs Start_4)))
   (Start_12 Int (3 1 (+ Start_3 Start_4) (mod Start_3 Start_11) (ite StartBool_2 Start_1 Start_13)))
   (Start_1 Int (4 (- Start_2) (- Start_1 Start) (* Start_3 Start_4) (div Start_5 Start_4) (abs Start_3) (ite StartBool Start_2 Start)))
   (Start_11 Int (y (- Start_7) (- Start_10 Start_1) (* Start_12 Start_7) (div Start_4 Start_6) (mod Start_10 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div 2 (mod x 4)))))

(check-synth)
