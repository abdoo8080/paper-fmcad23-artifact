(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_3 Int) (Start_4 Int) (Start_2 Int))
  ((Start Int (4 (- Start) (- Start_1 Start_1) (* Start Start_1) (abs Start_2)))
   (StartBool Bool (true (>= Start_2 Start_1)))
   (Start_1 Int (y (- Start_3) (div Start_2 Start_4) (ite StartBool Start_3 Start_4)))
   (Start_3 Int (3 (- Start_1) (- Start_4 Start_4) (mod Start_3 Start_2) (abs Start_2)))
   (Start_4 Int (4 5 (* Start_3 Start_1) (div Start_4 Start_4)))
   (Start_2 Int (0 3 5 (- Start_3 Start) (+ Start_4 Start_1) (div Start_3 Start) (abs Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod 1 (* 3 x)) 5)))

(check-synth)
