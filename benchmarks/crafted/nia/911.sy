(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (StartBool_6 Bool) (Start_13 Int) (Start_15 Int) (Start_1 Int) (StartBool_7 Bool) (StartBool_3 Bool) (Start_14 Int) (Start_12 Int) (Start_8 Int) (Start_3 Int) (Start_2 Int) (Start_4 Int) (Start_6 Int) (Start_11 Int) (StartBool_1 Bool) (Start_5 Int) (Start_7 Int) (Start_9 Int) (Start_10 Int) (StartBool_2 Bool))
  ((Start Int (y 4 x 3 2 0 (- Start_1) (div Start_1 Start) (mod Start_2 Start) (abs Start_1) (ite StartBool Start_3 Start_1)))
   (StartBool Bool (false (not StartBool_4) (and StartBool_6 StartBool_2) (<= Start_12 Start_15)))
   (StartBool_5 Bool (false true (or StartBool_6 StartBool_6) (= Start_5 Start_1) (>= Start_7 Start_15)))
   (StartBool_4 Bool (true false (not StartBool_5) (or StartBool_3 StartBool_5) (< Start_7 Start_1) (> Start_9 Start_15)))
   (StartBool_6 Bool (true false (and StartBool StartBool_4) (or StartBool_5 StartBool) (< Start Start) (<= Start_13 Start_15)))
   (Start_13 Int (4 (div Start_8 Start_9) (abs Start_5)))
   (Start_15 Int (x (- Start_3) (+ Start_6 Start_3) (mod Start_14 Start_10)))
   (Start_1 Int (y 2 5 1 (+ Start_10 Start_6) (* Start_9 Start_4) (mod Start_15 Start_13) (ite StartBool_4 Start_13 Start_5)))
   (StartBool_7 Bool (true false (and StartBool_2 StartBool_2) (or StartBool_1 StartBool_5) (< Start_13 Start_15) (> Start Start_10)))
   (StartBool_3 Bool (false (not StartBool_1) (or StartBool_7 StartBool_6) (< Start_4 Start_1) (= Start_9 Start_8) (> Start Start_4)))
   (Start_14 Int (1 (* Start_6 Start_5) (div Start_8 Start_15) (mod Start_6 Start)))
   (Start_12 Int (0 2 (- Start) (- Start_6 Start_1) (+ Start_7 Start_11) (* Start_7 Start_6) (div Start_5 Start_13) (mod Start_12 Start_12) (ite StartBool_2 Start_13 Start_14)))
   (Start_8 Int (x y 1 (- Start_8) (- Start_2 Start_7) (mod Start_7 Start_6) (abs Start_1) (ite StartBool Start_9 Start_9)))
   (Start_3 Int (0 (- Start_1) (- Start_3 Start_1) (* Start Start) (mod Start Start_4) (ite StartBool Start_4 Start_2)))
   (Start_2 Int (3 x 4 (- Start_8) (div Start_8 Start_8) (abs Start_6) (ite StartBool_2 Start_6 Start_10)))
   (Start_4 Int (x 4 (- Start) (- Start_2 Start_1) (+ Start_3 Start_4) (ite StartBool_1 Start Start_1)))
   (Start_6 Int (3 5 (- Start) (div Start_7 Start_6) (mod Start_7 Start) (ite StartBool Start Start_1)))
   (Start_11 Int (0 1 2 x 5 3 (- Start_7 Start_10) (+ Start_6 Start_9)))
   (StartBool_1 Bool (false (not StartBool) (< Start_1 Start_4) (<= Start_1 Start) (= Start_4 Start_2) (>= Start_3 Start_5)))
   (Start_5 Int (y 3 (- Start) (- Start_3 Start_2) (div Start_6 Start_3) (mod Start_4 Start_5)))
   (Start_7 Int (x (- Start_4) (+ Start Start_5) (div Start_7 Start_8) (abs Start_1)))
   (Start_9 Int (1 (+ Start_1 Start_6) (mod Start Start_3)))
   (Start_10 Int (y 1 0 (+ Start_1 Start_11) (div Start_4 Start_11)))
   (StartBool_2 Bool (true (or StartBool_3 StartBool_4) (< Start_6 Start_12) (>= Start_8 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div 4 x))))

(check-synth)
