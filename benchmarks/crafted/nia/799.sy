(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_7 Bool) (StartBool_4 Bool) (StartBool_6 Bool) (StartBool_5 Bool) (Start_10 Int) (Start_1 Int) (Start_2 Int) (Start_4 Int) (Start_9 Int) (Start_5 Int) (StartBool_1 Bool) (Start_7 Int) (Start_8 Int) (Start_3 Int) (Start_6 Int) (StartBool_2 Bool))
  ((Start Int (1 x (+ Start Start) (* Start Start) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true false (not StartBool_1) (or StartBool_3 StartBool_4) (>= Start_3 Start_10)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_4 StartBool_7) (< Start_8 Start_5) (<= Start_5 Start_10) (>= Start_2 Start_8)))
   (StartBool_7 Bool (false (> Start Start_1)))
   (StartBool_4 Bool (true false (and StartBool_7 StartBool_1) (<= Start_9 Start_5) (= Start_7 Start_5) (>= Start_4 Start_3)))
   (StartBool_6 Bool (true false (not StartBool_2) (<= Start_6 Start_6) (= Start_4 Start)))
   (StartBool_5 Bool (true (not StartBool_1) (or StartBool_6 StartBool_3) (< Start Start_8) (= Start_8 Start_3) (>= Start_10 Start_8)))
   (Start_10 Int (2 (- Start_7 Start_6) (+ Start_7 Start_1) (* Start_6 Start_2) (mod Start_2 Start_2) (abs Start_10) (ite StartBool_5 Start_7 Start_10)))
   (Start_1 Int (4 2 (- Start_1) (+ Start_2 Start) (* Start_3 Start_1)))
   (Start_2 Int (3 (- Start_1 Start_4) (* Start_5 Start)))
   (Start_4 Int (2 0 x 1 (- Start_2) (* Start_1 Start_2) (mod Start_4 Start_4)))
   (Start_9 Int (2 (- Start_3) (* Start_4 Start_5) (abs Start_8) (ite StartBool_1 Start_7 Start_2)))
   (Start_5 Int (0 (- Start) (- Start_2 Start_5) (* Start_5 Start_5) (div Start_5 Start_5) (abs Start_2) (ite StartBool_1 Start_1 Start_2)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_1 StartBool_2) (or StartBool StartBool) (<= Start_6 Start_3) (= Start_4 Start) (>= Start_7 Start_5)))
   (Start_7 Int (4 5 0 (- Start_4 Start_7) (+ Start_8 Start_1) (div Start_1 Start_7)))
   (Start_8 Int (x 3 2 (- Start_3) (+ Start_8 Start_5) (div Start_6 Start_8) (abs Start_8)))
   (Start_3 Int (2 (- Start_2) (+ Start Start_1) (* Start_1 Start_1) (div Start_3 Start) (mod Start Start_2) (ite StartBool Start Start)))
   (Start_6 Int (2 (- Start_4) (- Start_6 Start_7) (* Start_8 Start_2) (div Start_9 Start_6)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool StartBool_1) (<= Start_4 Start_7) (= Start_8 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (abs (- y)))))

(check-synth)
