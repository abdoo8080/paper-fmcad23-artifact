(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (StartBool_4 Bool) (Start_2 Int) (Start_16 Int) (Start_13 Int) (Start_17 Int) (Start_14 Int) (Start_3 Int) (Start_1 Int) (Start_15 Int) (Start_11 Int) (StartBool_1 Bool) (Start_4 Int) (Start_5 Int) (StartBool_2 Bool) (Start_6 Int) (Start_12 Int) (Start_9 Int) (Start_7 Int) (StartBool_3 Bool) (Start_10 Int) (Start_8 Int))
  ((Start Int (y (+ Start Start_1) (* Start Start_1) (div Start Start_1) (mod Start_2 Start_1) (abs Start_3) (ite StartBool Start_1 Start_4)))
   (StartBool Bool (false (not StartBool_1) (or StartBool_4 StartBool_2) (= Start_12 Start_4)))
   (Start_18 Int (5 2 (- Start_5) (- Start_15 Start_12) (* Start_11 Start_11) (div Start_9 Start_1) (mod Start_15 Start_16) (abs Start_14) (ite StartBool_3 Start_15 Start_10)))
   (StartBool_4 Bool (false true (or StartBool_2 StartBool_4) (< Start_12 Start_11) (= Start_15 Start_14)))
   (Start_2 Int (5 (+ Start_7 Start_13) (div Start_13 Start_12) (mod Start_2 Start_13) (abs Start_9) (ite StartBool_4 Start_10 Start_13)))
   (Start_16 Int (5 3 4 (* Start_3 Start) (mod Start_17 Start_7)))
   (Start_13 Int (3 y (- Start_7) (- Start_11 Start_9) (* Start_9 Start) (div Start_2 Start_3)))
   (Start_17 Int (2 (* Start_6 Start_10) (ite StartBool_2 Start_18 Start_7)))
   (Start_14 Int (y 5 (- Start_11) (+ Start_15 Start_9) (* Start_15 Start_12) (div Start_10 Start_15)))
   (Start_3 Int (5 (div Start_10 Start_7) (mod Start_13 Start_14) (abs Start_10)))
   (Start_1 Int (2 (- Start_5) (* Start_16 Start_17) (mod Start_4 Start_3)))
   (Start_15 Int (1 x y 5 2 3 (- Start_12) (- Start_12 Start_13) (+ Start_13 Start) (* Start_2 Start) (div Start_9 Start_2) (mod Start_10 Start_4) (ite StartBool Start_15 Start_4)))
   (Start_11 Int (1 (- Start_7 Start_7) (* Start_4 Start_8) (div Start_11 Start_2) (mod Start_6 Start_5) (abs Start_5)))
   (StartBool_1 Bool (false true (< Start_3 Start_2) (<= Start_5 Start_12) (= Start_12 Start_10)))
   (Start_4 Int (5 (- Start_1 Start_2) (* Start_2 Start) (div Start_3 Start_4) (ite StartBool_1 Start_1 Start_5)))
   (Start_5 Int (4 (- Start_2) (- Start_1 Start_2) (+ Start_1 Start_5) (mod Start_6 Start) (ite StartBool_2 Start_3 Start_3)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool) (= Start Start_1) (> Start_5 Start_4)))
   (Start_6 Int (5 y 3 1 2 (+ Start_4 Start_3) (* Start Start_7) (div Start_3 Start_8) (mod Start_9 Start_9) (abs Start_5)))
   (Start_12 Int (5))
   (Start_9 Int (4 2 y 1 0 x 3 5 (- Start_4) (- Start_3 Start_7) (+ Start_10 Start_3) (* Start_9 Start) (div Start_6 Start_6) (mod Start_11 Start_4) (abs Start_8) (ite StartBool_1 Start_3 Start)))
   (Start_7 Int (2 0 5 (- Start_1) (- Start_2 Start_2) (* Start_7 Start_4)))
   (StartBool_3 Bool (false true (< Start_2 Start_3) (<= Start_2 Start_4) (>= Start_5 Start_5) (> Start_3 Start_4)))
   (Start_10 Int (4 3 (- Start_5) (- Start_8 Start_9) (div Start_7 Start_8) (mod Start_2 Start_4) (abs Start_5) (ite StartBool Start_10 Start_3)))
   (Start_8 Int (1 (- Start_4) (- Start_1 Start_10) (+ Start_1 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 5 y)))

(check-synth)
