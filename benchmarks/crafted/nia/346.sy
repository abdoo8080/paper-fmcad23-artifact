(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_4 Int) (Start_13 Int) (StartBool_5 Bool) (Start_5 Int) (Start_3 Int) (StartBool_3 Bool) (Start_15 Int) (Start_7 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_12 Int) (StartBool_4 Bool) (Start_9 Int) (Start_8 Int) (Start_14 Int) (Start_11 Int) (StartBool_6 Bool) (Start_10 Int) (Start_6 Int))
  ((Start Int (0 1 (- Start_1) (- Start_2 Start) (div Start_3 Start_1) (mod Start_1 Start_3)))
   (StartBool Bool (false true (not StartBool_4) (or StartBool_6 StartBool_1) (= Start_5 Start_2) (>= Start_14 Start_4)))
   (Start_1 Int (3 y 4 x (- Start_5) (* Start_4 Start_9) (div Start_12 Start_4)))
   (Start_2 Int (5 3 (- Start_9 Start_2) (+ Start_10 Start_2) (div Start_4 Start_7) (mod Start_4 Start_13) (abs Start) (ite StartBool Start_4 Start_4)))
   (Start_4 Int (x y 0 (- Start_9) (- Start Start_3) (+ Start_13 Start_3) (* Start_10 Start_1) (div Start_11 Start) (mod Start_7 Start_5) (abs Start_4)))
   (Start_13 Int (5 (- Start_9 Start_12) (div Start_9 Start_8)))
   (StartBool_5 Bool (true false (< Start_9 Start) (= Start_12 Start_8)))
   (Start_5 Int (4 1 2 5 0 x (- Start_6) (+ Start_7 Start_5) (* Start_5 Start_6) (mod Start_2 Start_6)))
   (Start_3 Int (x (- Start_1 Start_4) (* Start_3 Start_3) (div Start_2 Start) (ite StartBool_1 Start_3 Start_5)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_4 StartBool) (< Start_1 Start_9)))
   (Start_15 Int (x (+ Start Start_15) (* Start Start_13) (div Start_10 Start_1)))
   (Start_7 Int (1 (- Start Start_4) (+ Start Start) (* Start_4 Start_2) (div Start Start_8) (ite StartBool_2 Start Start_2)))
   (StartBool_1 Bool (true (and StartBool_5 StartBool_5) (or StartBool StartBool) (= Start_8 Start_6) (>= Start_11 Start_8) (> Start_1 Start_6)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool StartBool_3) (< Start_8 Start_1) (= Start_2 Start_8) (>= Start_5 Start_6)))
   (Start_12 Int (x 3 y 4 1 5 (- Start_6) (mod Start Start_13) (abs Start_3) (ite StartBool_2 Start_5 Start_9)))
   (StartBool_4 Bool (false true (> Start_2 Start_7)))
   (Start_9 Int (3 0 4 (+ Start_4 Start_4) (* Start_3 Start_5) (div Start Start_4)))
   (Start_8 Int (1 (- Start_8) (- Start_10 Start_6) (+ Start_6 Start_10) (* Start_11 Start_3) (mod Start_1 Start) (abs Start_10) (ite StartBool_2 Start Start_5)))
   (Start_14 Int (4 3 (- Start_15 Start_13) (div Start_7 Start_1) (mod Start_12 Start_6)))
   (Start_11 Int (x y (- Start_1) (+ Start_5 Start_8)))
   (StartBool_6 Bool (false true (not StartBool_3) (and StartBool_3 StartBool_5) (< Start_12 Start_1) (<= Start_12 Start_15) (> Start_11 Start_9)))
   (Start_10 Int (1 0 (- Start_5) (- Start_10 Start_1) (+ Start_8 Start_9) (ite StartBool_2 Start_2 Start_7)))
   (Start_6 Int (0 (+ Start_3 Start_11) (* Start_4 Start_10) (div Start_5 Start_10) (mod Start_8 Start_9) (abs Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs x) 2)))

(check-synth)
