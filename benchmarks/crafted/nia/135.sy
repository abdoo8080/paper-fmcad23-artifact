(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_14 Int) (StartBool_1 Bool) (Start_12 Int) (Start_1 Int) (Start_6 Int) (Start_3 Int) (Start_4 Int) (Start_5 Int) (StartBool_2 Bool) (Start_9 Int) (Start_11 Int) (Start_7 Int) (Start_13 Int) (Start_10 Int) (Start_8 Int))
  ((Start Int (5 y (+ Start_1 Start_1) (* Start_2 Start) (mod Start Start_3) (ite StartBool Start_2 Start_1)))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (< Start_6 Start_5) (= Start_1 Start_8)))
   (Start_2 Int (2 4 3 (- Start_5 Start_7) (div Start_4 Start_14) (mod Start_6 Start_4) (abs Start_5) (ite StartBool_2 Start_3 Start_3)))
   (Start_14 Int (0 2 4 (- Start_14) (* Start_4 Start_1)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool StartBool_1) (< Start_14 Start)))
   (Start_12 Int (5 x 2 (- Start_7) (- Start_2 Start_5) (* Start_6 Start_7) (div Start_5 Start_2) (ite StartBool Start_6 Start_13)))
   (Start_1 Int (1 (- Start_3) (* Start_14 Start_10) (div Start_4 Start_13) (mod Start_1 Start_8) (abs Start_8)))
   (Start_6 Int (4 (- Start_13) (+ Start_10 Start_13) (* Start_9 Start_9) (div Start_13 Start_9) (abs Start_1)))
   (Start_3 Int (4 (- Start_1) (+ Start_1 Start) (mod Start_3 Start_3) (ite StartBool_1 Start_4 Start_1)))
   (Start_4 Int (x 2 (- Start_2 Start_2) (* Start_3 Start_3) (mod Start_1 Start_1) (abs Start_5) (ite StartBool_1 Start_2 Start_5)))
   (Start_5 Int (y (mod Start_6 Start_6) (ite StartBool_2 Start_5 Start)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool StartBool) (< Start_5 Start_7) (<= Start_8 Start_9) (= Start_6 Start_7) (>= Start_5 Start_4)))
   (Start_9 Int (0 (- Start_7 Start_7) (+ Start_10 Start_4) (* Start_11 Start_10) (mod Start_8 Start_10) (abs Start_5)))
   (Start_11 Int (4 (- Start_6) (- Start_1 Start_9) (+ Start_9 Start_8) (div Start Start_7) (mod Start_7 Start) (abs Start_12)))
   (Start_7 Int (0 (- Start_11) (div Start_4 Start_3) (mod Start_12 Start_8)))
   (Start_13 Int (x 1 2 (- Start_1 Start_4) (* Start_9 Start_9) (div Start_7 Start_6) (abs Start_8)))
   (Start_10 Int (0 4 (- Start_9) (+ Start_13 Start_5) (div Start_5 Start_5) (mod Start_12 Start_5)))
   (Start_8 Int (2 (- Start_6) (- Start_9 Start_8) (+ Start_9 Start_1) (div Start_11 Start_2) (ite StartBool_2 Start_13 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 (- y 4))))

(check-synth)
