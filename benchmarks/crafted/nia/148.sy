(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_9 Int) (Start_8 Int) (Start_3 Int) (StartBool_2 Bool) (Start_5 Int) (Start_4 Int) (Start_10 Int) (StartBool_3 Bool) (StartBool_1 Bool) (StartBool_4 Bool) (Start_2 Int) (Start_6 Int) (StartBool_5 Bool) (Start_7 Int))
  ((Start Int (2 (- Start) (- Start Start) (+ Start Start) (* Start_1 Start_2) (div Start_1 Start_3) (ite StartBool Start_2 Start_3)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_3 StartBool_5) (or StartBool_5 StartBool_1) (< Start_3 Start_10) (= Start_7 Start_10) (> Start_3 Start_9)))
   (Start_1 Int (1 (- Start_7 Start_9) (+ Start Start_6) (div Start_6 Start_4) (mod Start_5 Start_6) (ite StartBool_3 Start_9 Start)))
   (Start_9 Int (y (- Start_2 Start_2) (div Start_1 Start_5) (abs Start_9)))
   (Start_8 Int (4 (- Start_9) (+ Start_1 Start_1) (mod Start_2 Start_8) (abs Start_8) (ite StartBool_3 Start_8 Start_9)))
   (Start_3 Int (3 1 (- Start_3 Start_2) (+ Start_4 Start_1) (div Start_4 Start_3) (mod Start_5 Start_3) (abs Start_1)))
   (StartBool_2 Bool (false true (or StartBool_1 StartBool_3) (>= Start_3 Start)))
   (Start_5 Int (x (mod Start_1 Start_2) (abs Start) (ite StartBool Start Start_1)))
   (Start_4 Int (x 5 (- Start_3) (- Start Start_3) (+ Start_2 Start) (mod Start Start_2) (ite StartBool_1 Start Start_2)))
   (Start_10 Int (x y (div Start_5 Start) (mod Start_4 Start)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool StartBool_4) (or StartBool StartBool) (< Start_5 Start) (<= Start_3 Start_4) (= Start Start_2)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_1) (= Start_2 Start_2) (> Start Start_3)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_5) (< Start Start_6) (<= Start_1 Start_3) (>= Start_1 Start_2) (> Start_3 Start_1)))
   (Start_2 Int (y 5 (- Start_2) (* Start_7 Start_2) (mod Start_5 Start_1) (abs Start_7) (ite StartBool Start_4 Start_2)))
   (Start_6 Int (4 (- Start_5) (div Start_4 Start_4) (mod Start_5 Start) (abs Start_5) (ite StartBool_2 Start_4 Start_6)))
   (StartBool_5 Bool (true false (not StartBool_3) (<= Start_4 Start_1) (> Start_4 Start)))
   (Start_7 Int (0 2 (- Start_6 Start_5) (+ Start_5 Start_7) (mod Start_6 Start_8) (abs Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= x 1) 3 2)))

(check-synth)
