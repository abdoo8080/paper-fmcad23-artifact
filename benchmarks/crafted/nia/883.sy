(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_8 Bool) (Start_12 Int) (Start_13 Int) (StartBool_2 Bool) (StartBool_5 Bool) (Start_11 Int) (Start_6 Int) (Start_2 Int) (StartBool_3 Bool) (Start_4 Int) (Start_5 Int) (StartBool_9 Bool) (StartBool_7 Bool) (Start_8 Int) (StartBool_6 Bool) (StartBool_4 Bool) (Start_3 Int) (Start_10 Int) (Start_7 Int) (Start_1 Int) (Start_9 Int) (StartBool_1 Bool))
  ((Start Int (x 3 (- Start_1 Start) (* Start_1 Start) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (false (not StartBool) (and StartBool_7 StartBool_6) (< Start_6 Start_13) (<= Start Start) (>= Start_8 Start_10)))
   (StartBool_8 Bool (false true (not StartBool_1) (or StartBool StartBool_4) (= Start_2 Start_13) (>= Start_9 Start_2) (> Start_3 Start_3)))
   (Start_12 Int (x))
   (Start_13 Int (3 0 5 4 (- Start_6) (- Start_12 Start_7) (* Start_7 Start_9) (div Start_1 Start_1) (mod Start_5 Start_1) (abs Start_4)))
   (StartBool_2 Bool (true (and StartBool StartBool_2) (or StartBool StartBool_5) (<= Start_3 Start_10) (> Start_1 Start_6)))
   (StartBool_5 Bool (true (and StartBool_6 StartBool) (or StartBool_4 StartBool_5) (< Start_1 Start_7) (<= Start_2 Start_1) (= Start Start_11) (>= Start_5 Start_3)))
   (Start_11 Int (y (- Start_2) (- Start_1 Start_2) (* Start_7 Start_11) (div Start_7 Start_9) (mod Start_10 Start_1) (abs Start_2) (ite StartBool_5 Start_7 Start)))
   (Start_6 Int (x (+ Start_3 Start_3) (* Start_6 Start_7)))
   (Start_2 Int (y x 3 (- Start_2) (mod Start Start) (abs Start_2)))
   (StartBool_3 Bool (false true (< Start_2 Start_4)))
   (Start_4 Int (x (- Start_5) (div Start_4 Start_2) (mod Start_5 Start_3) (ite StartBool Start_5 Start_6)))
   (Start_5 Int (1 (- Start) (- Start_3 Start_7) (+ Start_1 Start_1) (* Start_5 Start_4) (div Start Start_2) (mod Start_5 Start_6)))
   (StartBool_9 Bool (true (not StartBool_4) (and StartBool StartBool_3) (or StartBool_5 StartBool_1) (< Start_10 Start_4) (= Start_10 Start_8)))
   (StartBool_7 Bool (false true (not StartBool_7) (and StartBool_8 StartBool_9) (= Start_13 Start_2)))
   (Start_8 Int (0 (+ Start_8 Start_2) (div Start_9 Start_2) (mod Start_4 Start_3)))
   (StartBool_6 Bool (true false (= Start_12 Start_8) (> Start_13 Start_11)))
   (StartBool_4 Bool (true false (or StartBool_1 StartBool_2) (< Start_7 Start_11) (<= Start_7 Start) (= Start_2 Start_6)))
   (Start_3 Int (y (- Start_2 Start_2) (+ Start_7 Start_8) (mod Start_6 Start_3) (abs Start_8)))
   (Start_10 Int (4 (- Start_10 Start_2) (* Start_9 Start_10) (mod Start_9 Start_4) (abs Start_3)))
   (Start_7 Int (4 (+ Start_1 Start_7) (* Start_1 Start_7) (mod Start_1 Start) (abs Start_3)))
   (Start_1 Int (0 (- Start_3) (mod Start_2 Start_4) (ite StartBool Start_3 Start_1)))
   (Start_9 Int (4 0 3 5 (* Start Start) (mod Start_4 Start_7) (abs Start_9) (ite StartBool_1 Start_9 Start_10)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_2) (or StartBool_3 StartBool_4) (< Start_1 Start_6) (<= Start_3 Start_9) (> Start_7 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (< x 5) y 2)))

(check-synth)
