(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_1 Int) (Start_17 Int) (Start_18 Int) (Start_4 Int) (Start_16 Int) (Start_5 Int) (Start_10 Int) (StartBool_2 Bool) (Start_3 Int) (Start_7 Int) (Start_2 Int) (Start_15 Int) (Start_6 Int) (Start_13 Int) (Start_8 Int) (Start_9 Int) (Start_14 Int) (StartBool_1 Bool) (Start_12 Int) (Start_11 Int))
  ((Start Int (2 5 3 0 (div Start_1 Start_2) (mod Start_2 Start) (abs Start) (ite StartBool Start_3 Start_3)))
   (StartBool Bool (true false (not StartBool_2) (< Start_18 Start_3) (<= Start_16 Start_5) (>= Start_3 Start_12) (> Start_5 Start_1)))
   (Start_19 Int (4 (+ Start_10 Start_1) (* Start_10 Start_3) (div Start_10 Start_10) (mod Start Start_3)))
   (Start_1 Int (1 (- Start_19) (- Start_17 Start_15) (+ Start_9 Start_8) (* Start_16 Start_18) (abs Start_4)))
   (Start_17 Int (5 1 3 (- Start_4) (+ Start_2 Start_1) (* Start_5 Start_11) (div Start_17 Start_7) (mod Start_16 Start_4)))
   (Start_18 Int (5 4 (- Start_2) (* Start_12 Start_3) (div Start_16 Start_2) (ite StartBool_1 Start_5 Start_14)))
   (Start_4 Int (1 4 3 (div Start_16 Start_7) (abs Start_1)))
   (Start_16 Int (1 0 (- Start_6) (+ Start_17 Start) (* Start_17 Start_4)))
   (Start_5 Int (0 (- Start_16) (div Start_1 Start_4)))
   (Start_10 Int (2 y (mod Start_8 Start_10) (abs Start_8)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_2) (= Start_15 Start_5) (>= Start_11 Start_13) (> Start_15 Start_15)))
   (Start_3 Int (5 0 (- Start_1) (div Start_1 Start_4) (mod Start_3 Start_5) (ite StartBool_1 Start_5 Start_5)))
   (Start_7 Int (3 4 5 (- Start_4 Start_10) (+ Start_11 Start_11) (* Start_12 Start_9) (div Start_8 Start_13) (abs Start_11) (ite StartBool_1 Start_2 Start_11)))
   (Start_2 Int (0 (- Start_13 Start_11) (+ Start_12 Start_3) (mod Start_12 Start_9) (abs Start_4) (ite StartBool Start_8 Start_18)))
   (Start_15 Int (3 (- Start_9) (- Start_9 Start) (+ Start_11 Start_2) (div Start_5 Start_13) (mod Start_3 Start_5) (ite StartBool Start_10 Start_12)))
   (Start_6 Int (3 2 (- Start_1) (- Start_2 Start_7) (* Start_1 Start_8) (mod Start_7 Start_5) (abs Start_8)))
   (Start_13 Int (2 x 5 (- Start_11) (- Start_8 Start_14) (+ Start_1 Start_13) (* Start_13 Start_3) (abs Start_4)))
   (Start_8 Int (5 x 4 y 3 (+ Start_2 Start_4) (* Start_3 Start_3) (div Start Start_7) (abs Start_6) (ite StartBool_1 Start_9 Start_1)))
   (Start_9 Int (3 y 0 x 4 5 2 1 (- Start) (- Start_10 Start_6) (* Start_6 Start_3) (mod Start_8 Start_7) (abs Start_6) (ite StartBool_1 Start_3 Start_10)))
   (Start_14 Int (x (+ Start_11 Start_6) (* Start_5 Start_3) (abs Start_9) (ite StartBool_1 Start_5 Start)))
   (StartBool_1 Bool (true (not StartBool_1) (<= Start_1 Start_5) (= Start_1 Start_1) (>= Start_6 Start) (> Start_3 Start_4)))
   (Start_12 Int (4 (- Start_3 Start) (+ Start Start_14) (div Start_9 Start_9) (mod Start_13 Start_12)))
   (Start_11 Int (4 (- Start_14) (- Start_15 Start_4) (* Start_11 Start_11) (abs Start) (ite StartBool_1 Start_3 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 5 (- y 2))))

(check-synth)
