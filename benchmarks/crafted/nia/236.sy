(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (StartBool_2 Bool) (Start_13 Int) (Start_12 Int) (StartBool_7 Bool) (Start_11 Int) (Start_10 Int) (Start_3 Int) (Start_1 Int) (Start_5 Int) (Start_14 Int) (StartBool_1 Bool) (Start_4 Int) (Start_7 Int) (StartBool_3 Bool) (StartBool_4 Bool) (StartBool_6 Bool) (StartBool_5 Bool) (Start_8 Int) (Start_9 Int) (Start_6 Int))
  ((Start Int (4 (- Start) (* Start Start) (abs Start_1) (ite StartBool Start_1 Start)))
   (StartBool Bool (false true (<= Start_12 Start)))
   (Start_2 Int (3 (- Start_7 Start_10) (+ Start_2 Start)))
   (StartBool_2 Bool (false true (or StartBool_6 StartBool_2) (< Start_11 Start_14) (<= Start_14 Start_14)))
   (Start_13 Int (0 (* Start_13 Start_5) (div Start Start) (abs Start_1)))
   (Start_12 Int (0 1 2 (- Start_8) (+ Start_13 Start_8) (div Start_8 Start_12) (abs Start_5)))
   (StartBool_7 Bool (false (not StartBool_1) (>= Start_10 Start_9)))
   (Start_11 Int (4 1 0 5 (+ Start_11 Start_1) (div Start_1 Start_6) (mod Start_8 Start_12) (abs Start) (ite StartBool_7 Start_4 Start_3)))
   (Start_10 Int (2 y (- Start) (* Start_11 Start_3) (div Start Start_1) (ite StartBool_3 Start_3 Start_4)))
   (Start_3 Int (1 2 0 x (- Start) (+ Start_8 Start_2) (* Start_5 Start_10) (abs Start_3) (ite StartBool_6 Start_2 Start_7)))
   (Start_1 Int (y x 4 (- Start) (* Start Start_2) (div Start_2 Start_1) (mod Start_2 Start_1) (ite StartBool_1 Start Start_2)))
   (Start_5 Int (y 2 4 1 3 x (ite StartBool Start Start_5)))
   (Start_14 Int (0 (- Start_3) (- Start Start_5) (mod Start_10 Start_8) (abs Start_8)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool StartBool_1) (<= Start_1 Start_3) (>= Start_4 Start_5)))
   (Start_4 Int (2 1 (- Start_2) (+ Start_6 Start_4) (* Start_2 Start) (ite StartBool Start_7 Start_6)))
   (Start_7 Int (3 (- Start_6) (- Start_7 Start_1) (* Start_4 Start_7) (div Start_7 Start_4) (mod Start_5 Start_4) (abs Start_5) (ite StartBool_3 Start Start_2)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool_4 StartBool_2) (< Start_1 Start_6) (> Start_4 Start)))
   (StartBool_4 Bool (true false (not StartBool_5) (>= Start_1 Start_3)))
   (StartBool_6 Bool (false (and StartBool_4 StartBool_2) (or StartBool_3 StartBool_4) (<= Start_8 Start_1) (>= Start_2 Start_7)))
   (StartBool_5 Bool (false (or StartBool StartBool_5) (< Start_8 Start_8) (<= Start Start_2) (>= Start_7 Start_1)))
   (Start_8 Int (0 1 (- Start_7) (- Start_3 Start) (* Start_2 Start_9) (div Start_3 Start_8) (ite StartBool_6 Start_8 Start_8)))
   (Start_9 Int (5 (- Start_6) (- Start_9 Start_9) (* Start_2 Start_3) (div Start_9 Start_7) (mod Start_2 Start_5)))
   (Start_6 Int (y 4 (- Start_2) (- Start_7 Start_7) (+ Start_9 Start_9) (* Start_7 Start_1) (abs Start_8) (ite StartBool_2 Start_3 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 2 (* 5 y))))

(check-synth)
