(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_5 Int) (Start_14 Int) (Start_13 Int) (Start_12 Int) (StartBool_1 Bool) (Start_2 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_1 Int) (Start_8 Int) (Start_4 Int) (Start_9 Int) (Start_7 Int) (Start_3 Int) (Start_6 Int) (Start_11 Int) (Start_10 Int))
  ((Start Int (3 (div Start_1 Start) (ite StartBool_1 Start Start)))
   (StartBool Bool (false true (not StartBool) (and StartBool_4 StartBool) (<= Start_13 Start_5) (> Start_9 Start_10)))
   (StartBool_4 Bool (true false (not StartBool) (= Start_14 Start_2) (>= Start_5 Start) (> Start_1 Start_13)))
   (Start_5 Int (5 (- Start_7 Start_3)))
   (Start_14 Int (3 (- Start_11 Start_1) (+ Start_13 Start_3) (mod Start_8 Start_7) (abs Start_13) (ite StartBool_1 Start_5 Start)))
   (Start_13 Int (5 (- Start_2 Start_1) (+ Start_14 Start_9) (* Start_13 Start_3) (mod Start Start_5)))
   (Start_12 Int (x 2 0 3 (* Start_3 Start_10) (div Start_8 Start_12) (abs Start_6) (ite StartBool_2 Start_5 Start)))
   (StartBool_1 Bool (true (not StartBool_2) (<= Start_1 Start_1)))
   (Start_2 Int (1 (- Start_3 Start_3) (+ Start_3 Start_3) (* Start_1 Start)))
   (StartBool_2 Bool (false true (not StartBool_1) (<= Start Start) (= Start_2 Start) (> Start_2 Start_1)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_2 StartBool_3) (< Start_3 Start_1) (= Start Start_4)))
   (Start_1 Int (x 2 y 0 5 4 3 (- Start_5) (+ Start_5 Start_1) (* Start_6 Start_6) (div Start_7 Start_7) (ite StartBool_3 Start_3 Start_7)))
   (Start_8 Int (0 4 x (- Start_6) (+ Start_9 Start_10) (* Start_4 Start_2) (div Start_11 Start_9) (mod Start_10 Start) (abs Start_5) (ite StartBool Start_3 Start_7)))
   (Start_4 Int (y 2 (+ Start_4 Start_1) (div Start_3 Start_4) (mod Start Start_4)))
   (Start_9 Int (x (- Start_13) (- Start_9 Start_1) (+ Start_13 Start_10) (* Start_10 Start_14) (ite StartBool_2 Start Start_10)))
   (Start_7 Int (y 3 0 (+ Start Start_5) (mod Start_1 Start_3) (abs Start_6)))
   (Start_3 Int (y (- Start_2 Start) (abs Start_1) (ite StartBool_3 Start_1 Start_1)))
   (Start_6 Int (2 (- Start) (+ Start Start_6) (* Start_6 Start_8) (mod Start_3 Start_6) (abs Start_7)))
   (Start_11 Int (3 (+ Start_2 Start_9) (div Start_9 Start_7) (mod Start_6 Start_9)))
   (Start_10 Int (x (- Start_10) (- Start_7 Start_5) (+ Start_3 Start_4) (div Start_11 Start_12) (abs Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (+ y 1) (abs x))))

(check-synth)
