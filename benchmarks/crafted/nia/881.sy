(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_15 Int) (Start_16 Int) (StartBool_2 Bool) (Start_6 Int) (Start_2 Int) (StartBool_1 Bool) (Start_5 Int) (Start_7 Int) (Start_9 Int) (Start_10 Int) (Start_11 Int) (Start_12 Int) (Start_1 Int) (Start_4 Int) (Start_14 Int) (Start_3 Int) (Start_8 Int) (Start_13 Int))
  ((Start Int (5 4 y (div Start Start_1) (ite StartBool Start Start_2)))
   (StartBool Bool (false true (or StartBool_2 StartBool_2) (< Start_17 Start_7) (>= Start_12 Start_15) (> Start_10 Start_5)))
   (Start_17 Int (3 (- Start_17 Start_2) (+ Start_5 Start_1) (div Start_1 Start_7) (abs Start_5)))
   (Start_15 Int (5 (- Start) (* Start_8 Start_13) (abs Start_15) (ite StartBool Start_10 Start_9)))
   (Start_16 Int (3 (- Start) (div Start_10 Start_8) (mod Start_8 Start_7) (ite StartBool Start_11 Start_9)))
   (StartBool_2 Bool (true false (or StartBool_2 StartBool_1) (< Start_16 Start_7) (<= Start_10 Start_11) (= Start_9 Start_13) (>= Start_11 Start_9)))
   (Start_6 Int (x 0 3 (- Start_5) (* Start_5 Start_4) (mod Start_2 Start_3) (abs Start)))
   (Start_2 Int (5 (+ Start Start) (* Start_3 Start_3) (div Start_2 Start_4) (mod Start_5 Start) (ite StartBool Start_6 Start_3)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_1 StartBool) (< Start_6 Start_5) (>= Start Start_3) (> Start_5 Start_4)))
   (Start_5 Int (0 2 3 (- Start_6) (- Start_4 Start_7) (* Start_8 Start_4) (div Start_3 Start) (abs Start_5) (ite StartBool_1 Start_7 Start_7)))
   (Start_7 Int (5 (+ Start_10 Start_7) (* Start_5 Start_10) (div Start_11 Start_12) (mod Start_3 Start_12)))
   (Start_9 Int (0 (+ Start_3 Start_9) (div Start Start_10) (mod Start_8 Start_8) (abs Start_7)))
   (Start_10 Int (1 4 3 5 0 2 (- Start_7 Start_7) (* Start_11 Start_3) (div Start_2 Start_1) (mod Start_4 Start_10)))
   (Start_11 Int (0 5 (- Start Start_2) (* Start_12 Start_3) (div Start Start_4) (abs Start_5)))
   (Start_12 Int (x (- Start_9) (+ Start_13 Start_6) (* Start Start_14) (abs Start_7)))
   (Start_1 Int (2 1 (- Start_6) (- Start_12 Start_4) (+ Start_2 Start_15) (mod Start_13 Start_9) (abs Start_2) (ite StartBool_2 Start_15 Start_2)))
   (Start_4 Int (3 x (- Start_8) (- Start_2 Start_3) (* Start_1 Start_5) (mod Start_6 Start_3)))
   (Start_14 Int (3 (+ Start_13 Start_11) (mod Start_2 Start) (abs Start_6) (ite StartBool Start Start_1)))
   (Start_3 Int (2 (- Start_9) (ite StartBool Start_8 Start_6)))
   (Start_8 Int (3 (div Start_9 Start_4) (mod Start_2 Start_9) (ite StartBool_1 Start_8 Start_7)))
   (Start_13 Int (5 4 (- Start_12 Start_6) (+ Start_6 Start_6) (div Start_10 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 2 (abs x))))

(check-synth)
