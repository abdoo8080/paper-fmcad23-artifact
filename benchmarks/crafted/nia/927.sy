(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_8 Bool) (Start_1 Int) (StartBool_2 Bool) (StartBool_6 Bool) (Start_14 Int) (Start_4 Int) (Start_11 Int) (Start_13 Int) (StartBool_1 Bool) (Start_9 Int) (Start_7 Int) (Start_2 Int) (StartBool_5 Bool) (Start_6 Int) (Start_12 Int) (Start_15 Int) (Start_8 Int) (StartBool_7 Bool) (Start_3 Int) (Start_10 Int) (Start_5 Int) (StartBool_3 Bool) (StartBool_4 Bool))
  ((Start Int (4 5 (- Start_1) (abs Start_1) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (true false (and StartBool_3 StartBool_4) (or StartBool_2 StartBool_6) (>= Start_8 Start_15) (> Start_2 Start_12)))
   (StartBool_8 Bool (true (or StartBool_5 StartBool_7) (< Start_5 Start) (= Start_12 Start_1)))
   (Start_1 Int (y (- Start_12 Start_3) (+ Start_11 Start_9) (mod Start_4 Start_14) (abs Start_1) (ite StartBool Start_14 Start_10)))
   (StartBool_2 Bool (false true))
   (StartBool_6 Bool (false (not StartBool_4) (and StartBool_3 StartBool_2) (or StartBool_4 StartBool_7) (= Start_6 Start_7) (> Start_13 Start_15)))
   (Start_14 Int (4 y 1 0 5 x (+ Start_6 Start_9) (* Start_1 Start_14) (div Start_8 Start_10) (mod Start_12 Start) (abs Start) (ite StartBool Start Start_13)))
   (Start_4 Int (0 (- Start_3 Start_4) (mod Start_8 Start_4) (abs Start_11)))
   (Start_11 Int (3 (- Start_7) (* Start_10 Start_12) (div Start_13 Start)))
   (Start_13 Int (2 y x 1 3 5 4 0 (+ Start_8 Start_10) (* Start_13 Start_4) (mod Start_6 Start_3) (ite StartBool_4 Start_1 Start_8)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_2) (< Start_1 Start_4) (<= Start_5 Start_4) (= Start_4 Start_3)))
   (Start_9 Int (y (- Start_7) (- Start_6 Start_3) (+ Start Start_6) (div Start_8 Start_2) (ite StartBool_1 Start_2 Start_6)))
   (Start_7 Int (0 (- Start_9 Start_4) (abs Start_10) (ite StartBool_3 Start_8 Start_2)))
   (Start_2 Int (3 (- Start_2 Start_1) (+ Start_2 Start_2) (abs Start_3)))
   (StartBool_5 Bool (true false (<= Start Start_13) (= Start_12 Start_5) (>= Start Start_6)))
   (Start_6 Int (3 (- Start_10) (- Start_10 Start_11) (+ Start_2 Start_12) (* Start_7 Start_12) (div Start_3 Start_1) (abs Start_9)))
   (Start_12 Int (2 (- Start_8 Start_6) (* Start_8 Start_10) (abs Start_13) (ite StartBool_5 Start_4 Start_3)))
   (Start_15 Int (2 (- Start_8) (div Start Start_10) (mod Start_10 Start) (abs Start_5) (ite StartBool_2 Start_14 Start_4)))
   (Start_8 Int (y 4 (- Start_6) (div Start_4 Start_9) (mod Start_5 Start_8) (abs Start)))
   (StartBool_7 Bool (true (and StartBool_8 StartBool_7) (or StartBool_4 StartBool_2) (< Start_11 Start_3) (> Start_11 Start_10)))
   (Start_3 Int (4 x (- Start_3 Start_3) (+ Start_1 Start_2) (abs Start_3)))
   (Start_10 Int (2 0 (- Start_3 Start_3) (mod Start Start) (abs Start_6) (ite StartBool Start_3 Start_3)))
   (Start_5 Int (x 5 (- Start) (- Start_6 Start_3) (+ Start_7 Start_6) (* Start Start_8) (div Start_1 Start_7) (mod Start Start_6) (ite StartBool_2 Start_6 Start_5)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool_4) (<= Start_4 Start_3) (= Start_3 Start_7)))
   (StartBool_4 Bool (false (not StartBool) (and StartBool_1 StartBool_2) (< Start_4 Start) (<= Start_6 Start_9) (= Start_1 Start_1) (>= Start_8 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* x (div (- 4) y))))

(check-synth)
