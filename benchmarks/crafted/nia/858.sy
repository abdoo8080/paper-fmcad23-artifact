(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_3 Bool) (StartBool_4 Bool) (Start_8 Int) (Start_19 Int) (Start_9 Int) (Start_10 Int) (StartBool_5 Bool) (Start_7 Int) (Start_16 Int) (Start_6 Int) (Start_3 Int) (Start_14 Int) (Start_12 Int) (StartBool_7 Bool) (Start_5 Int) (Start_17 Int) (StartBool_2 Bool) (Start_4 Int) (StartBool_10 Bool) (Start_11 Int) (StartBool_8 Bool) (Start_2 Int) (StartBool_9 Bool) (Start_13 Int) (Start_1 Int) (StartBool_1 Bool) (Start_15 Int) (Start_18 Int))
  ((Start Int (y 3 x (- Start Start_1) (+ Start_2 Start_3) (* Start_3 Start)))
   (StartBool Bool (true false (not StartBool_7) (or StartBool_10 StartBool_8) (< Start_16 Start_7) (= Start_10 Start_1) (> Start_6 Start_4)))
   (StartBool_6 Bool (true (not StartBool_3) (or StartBool_3 StartBool_6) (< Start_10 Start) (<= Start_11 Start_2) (> Start_8 Start_4)))
   (StartBool_3 Bool (false true (or StartBool_3 StartBool_4) (< Start_7 Start_7) (= Start_7 Start_3) (>= Start_2 Start_3) (> Start_7 Start_6)))
   (StartBool_4 Bool (true (not StartBool_4) (and StartBool_1 StartBool_4) (>= Start_10 Start_7)))
   (Start_8 Int (x (- Start_1 Start_7) (+ Start_4 Start_4) (* Start_2 Start_3) (abs Start_6) (ite StartBool_5 Start_8 Start_5)))
   (Start_19 Int (5 4 (- Start_12) (+ Start_5 Start_8) (div Start_3 Start_18)))
   (Start_9 Int (4 y (- Start_2 Start_2) (div Start_8 Start_7) (abs Start_7)))
   (Start_10 Int (0 x 5 1 y 4 2 3 (+ Start_2 Start_2) (* Start_1 Start_4) (div Start_3 Start_2) (mod Start_9 Start_8) (abs Start_4) (ite StartBool_5 Start_3 Start_2)))
   (StartBool_5 Bool (false (not StartBool) (and StartBool_3 StartBool_1) (or StartBool StartBool_4) (< Start_3 Start_4) (= Start_9 Start_9)))
   (Start_7 Int (x 5 (- Start_4) (- Start Start_6) (* Start_1 Start_8) (div Start_2 Start_4) (ite StartBool_3 Start_2 Start_1)))
   (Start_16 Int (0 (- Start_3) (* Start Start_1)))
   (Start_6 Int (x 1 (+ Start_4 Start_5) (* Start Start_4) (div Start_1 Start_6) (mod Start_5 Start_3)))
   (Start_3 Int (x 4 5 3 1 0 (div Start_2 Start_4) (mod Start Start_1) (abs Start_5) (ite StartBool_1 Start_6 Start_3)))
   (Start_14 Int (4 (- Start_1 Start_4) (+ Start_12 Start_1) (div Start_7 Start_10)))
   (Start_12 Int (2 3 (mod Start_10 Start_8) (ite StartBool_7 Start_12 Start_3)))
   (StartBool_7 Bool (true (< Start_4 Start_3) (<= Start_9 Start_8) (= Start_1 Start) (>= Start_7 Start_8)))
   (Start_5 Int (x 5 y 1 (- Start_2) (- Start_7 Start) (+ Start Start_12)))
   (Start_17 Int (y (- Start_14) (+ Start_1 Start_16) (* Start_17 Start) (div Start_15 Start_3)))
   (StartBool_2 Bool (false true (and StartBool_4 StartBool_4) (or StartBool_3 StartBool_6) (< Start Start) (= Start_7 Start_8)))
   (Start_4 Int (0 (* Start_9 Start_3) (div Start_5 Start_11) (mod Start_7 Start_10) (abs Start_10) (ite StartBool_8 Start_4 Start_4)))
   (StartBool_10 Bool (true (not StartBool_1) (or StartBool_7 StartBool) (< Start_19 Start_7) (> Start_17 Start_12)))
   (Start_11 Int (2 (+ Start_12 Start_6) (* Start Start_2) (div Start_2 Start_4) (ite StartBool_6 Start_1 Start_7)))
   (StartBool_8 Bool (false (and StartBool_7 StartBool_8)))
   (Start_2 Int (2 1 4 (- Start_13 Start) (+ Start_6 Start_1) (* Start_6 Start_12) (div Start_12 Start_7) (abs Start_2) (ite StartBool_9 Start_14 Start_12)))
   (StartBool_9 Bool (false (not StartBool_1) (and StartBool_1 StartBool_4) (or StartBool_7 StartBool) (<= Start_14 Start_11) (>= Start_10 Start_1) (> Start_13 Start_5)))
   (Start_13 Int (0 x (- Start_9) (- Start_4 Start_5) (* Start_13 Start)))
   (Start_1 Int (5 (- Start_15) (- Start_8 Start_6) (+ Start_13 Start_16) (div Start_16 Start_9) (mod Start_3 Start_10) (abs Start_16)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool) (or StartBool_2 StartBool_3) (< Start_5 Start_2) (<= Start_3 Start_5) (= Start_1 Start_6) (>= Start_1 Start_1)))
   (Start_15 Int (1 (- Start_17) (+ Start_6 Start_12) (div Start_6 Start_18) (ite StartBool_10 Start_5 Start_18)))
   (Start_18 Int (1 0 3 (- Start_15 Start_16) (abs Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (mod y 0) x)))

(check-synth)
