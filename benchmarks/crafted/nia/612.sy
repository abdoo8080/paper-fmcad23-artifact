(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_18 Int) (StartBool_4 Bool) (Start_15 Int) (Start_20 Int) (Start_7 Int) (Start_9 Int) (Start_12 Int) (Start_2 Int) (Start_10 Int) (Start_14 Int) (Start_16 Int) (Start_1 Int) (Start_5 Int) (Start_6 Int) (Start_19 Int) (Start_3 Int) (StartBool_1 Bool) (Start_11 Int) (StartBool_2 Bool) (Start_21 Int) (Start_4 Int) (StartBool_3 Bool) (Start_8 Int) (Start_17 Int) (Start_13 Int))
  ((Start Int (x 3 2 (mod Start_1 Start) (abs Start_2)))
   (StartBool Bool (false true (< Start_3 Start_4) (>= Start Start_5)))
   (StartBool_5 Bool (true (not StartBool_2) (and StartBool_1 StartBool) (< Start_21 Start_1) (> Start_19 Start_7)))
   (Start_18 Int (1 4 0 (- Start_17) (+ Start_4 Start_7) (* Start_10 Start_20) (abs Start_10) (ite StartBool_4 Start_13 Start_16)))
   (StartBool_4 Bool (true false (or StartBool_3 StartBool_5) (< Start_1 Start_15) (= Start_16 Start_13) (>= Start_1 Start_2)))
   (Start_15 Int (x (- Start_15 Start_10) (+ Start_9 Start_16)))
   (Start_20 Int (3 (- Start_18) (+ Start_8 Start_18) (ite StartBool Start_4 Start_6)))
   (Start_7 Int (0 x (- Start_8 Start_9) (* Start_4 Start_7) (mod Start_2 Start_8) (ite StartBool Start_4 Start_1)))
   (Start_9 Int (4 (+ Start_10 Start_9) (div Start_6 Start_5) (mod Start_2 Start_3) (abs Start_10)))
   (Start_12 Int (0 5 x 3 y (- Start_11 Start_7) (mod Start_11 Start_8) (abs Start_7) (ite StartBool_3 Start_2 Start_9)))
   (Start_2 Int (1 3 (+ Start_2 Start) (* Start_1 Start_2) (div Start_2 Start) (mod Start_2 Start_1) (ite StartBool Start_2 Start)))
   (Start_10 Int (1 5 x (- Start_11) (* Start_7 Start_10)))
   (Start_14 Int (4 2 (- Start_8) (- Start_8 Start_11) (ite StartBool Start_14 Start_9)))
   (Start_16 Int (2 3 5 (- Start_8) (- Start_5 Start_4) (+ Start_8 Start_11) (* Start_7 Start_10) (ite StartBool_2 Start Start_2)))
   (Start_1 Int (y (- Start_2) (* Start_2 Start_2)))
   (Start_5 Int (3 (- Start_1) (- Start_3 Start_6) (div Start_3 Start_1) (abs Start_2)))
   (Start_6 Int (x (- Start_6) (- Start Start_7) (+ Start Start_7) (div Start_8 Start_7) (ite StartBool_1 Start_2 Start)))
   (Start_19 Int (2 (mod Start_19 Start_4) (abs Start_8)))
   (Start_3 Int (y 4 (- Start_17 Start) (div Start_9 Start_6)))
   (StartBool_1 Bool (true false (not StartBool_1) (or StartBool StartBool_2) (>= Start_5 Start) (> Start_1 Start_1)))
   (Start_11 Int (3 1 y (+ Start Start_4) (* Start_12 Start_9) (div Start_4 Start_12) (mod Start_1 Start_1) (ite StartBool_2 Start_13 Start_6)))
   (StartBool_2 Bool (false true (and StartBool StartBool_3) (or StartBool StartBool_3) (<= Start_7 Start_8) (> Start Start_5)))
   (Start_21 Int (3 1 0 2 5 y (- Start) (- Start_16 Start_16) (+ Start_4 Start_1) (mod Start_18 Start_11)))
   (Start_4 Int (1 (- Start_10 Start_6) (+ Start_7 Start_14) (div Start_7 Start_3) (mod Start_13 Start_15) (abs Start_6)))
   (StartBool_3 Bool (false true (not StartBool_1) (or StartBool_3 StartBool) (<= Start Start_1) (> Start_2 Start_3)))
   (Start_8 Int (3 1 (- Start_9) (+ Start Start_7) (* Start_10 Start_1) (div Start_8 Start_4) (ite StartBool_3 Start_9 Start_7)))
   (Start_17 Int (2 0 (- Start_3) (- Start_15 Start_4) (* Start_1 Start_18) (mod Start_6 Start_19) (abs Start_17) (ite StartBool_1 Start_7 Start_19)))
   (Start_13 Int (5 1 4 (- Start_13) (+ Start_6 Start_12) (* Start_11 Start_11) (div Start_8 Start) (mod Start_1 Start_3) (ite StartBool_3 Start_2 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 0 (ite (<= 2 x) 3 (* x 2)))))

(check-synth)
