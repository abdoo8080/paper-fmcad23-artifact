(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_1 Int) (Start_14 Int) (Start_3 Int) (Start_12 Int) (Start_13 Int) (Start_6 Int) (Start_15 Int) (Start_2 Int) (Start_17 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_4 Int) (Start_7 Int) (Start_5 Int) (Start_8 Int) (Start_10 Int) (StartBool_3 Bool) (Start_11 Int) (StartBool_4 Bool) (Start_9 Int))
  ((Start Int (0 (- Start) (- Start_1 Start) (div Start_1 Start_1) (mod Start_2 Start_2)))
   (StartBool Bool (true false (and StartBool StartBool_4) (or StartBool_1 StartBool_1) (< Start_14 Start_15) (<= Start_2 Start_4) (>= Start Start_1)))
   (Start_16 Int (0 (- Start_11 Start_15) (+ Start_12 Start_14) (* Start_5 Start_17) (div Start_8 Start_13) (mod Start_4 Start_11) (abs Start_15)))
   (Start_1 Int (3 (- Start_9) (* Start_14 Start_5) (div Start_14 Start_6) (abs Start_14)))
   (Start_14 Int (3 x (- Start_3) (+ Start_3 Start_5) (* Start_15 Start_9) (div Start_5 Start_11) (mod Start_13 Start_1)))
   (Start_3 Int (5 3 (- Start_12) (* Start_8 Start)))
   (Start_12 Int (2 (- Start_12) (* Start_9 Start_4) (mod Start Start_2) (abs Start_11)))
   (Start_13 Int (2 1 3 4 x 5 (* Start Start_13) (div Start_8 Start_12) (abs Start)))
   (Start_6 Int (x y 5 (- Start_1) (div Start_1 Start_3) (mod Start_3 Start_7)))
   (Start_15 Int (x (- Start_4 Start_4) (abs Start) (ite StartBool_3 Start_12 Start_16)))
   (Start_2 Int (y 4 5 (- Start_3) (mod Start_1 Start_1) (abs Start) (ite StartBool_1 Start_3 Start_2)))
   (Start_17 Int (3 2 (- Start_4) (+ Start_8 Start_1) (* Start_1 Start_11) (div Start_13 Start_16) (abs Start_7)))
   (StartBool_1 Bool (true false (or StartBool_1 StartBool_2) (<= Start_2 Start_3) (= Start_2 Start_3) (>= Start_2 Start)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool_3) (< Start_2 Start_4) (= Start Start)))
   (Start_4 Int (y (+ Start_5 Start_2) (* Start_4 Start) (mod Start_3 Start_2)))
   (Start_7 Int (3 1 5 y (+ Start_5 Start_1) (ite StartBool_3 Start_8 Start_1)))
   (Start_5 Int (2 (- Start_5) (- Start_3 Start_6) (+ Start_7 Start_3) (* Start_3 Start_6) (div Start Start_3) (mod Start_6 Start_1) (abs Start)))
   (Start_8 Int (0 y (- Start_3 Start_5) (mod Start_1 Start_8) (ite StartBool_3 Start_3 Start_1)))
   (Start_10 Int (4 2 3 (abs Start_6) (ite StartBool Start_11 Start_6)))
   (StartBool_3 Bool (false true (and StartBool_4 StartBool_4) (< Start_2 Start_7) (<= Start_5 Start_2) (> Start_3 Start_6)))
   (Start_11 Int (1 (- Start_12) (- Start_5 Start_5) (* Start_5 Start_13) (div Start_12 Start_3) (abs Start_11) (ite StartBool_2 Start_10 Start_12)))
   (StartBool_4 Bool (true false (not StartBool_4) (and StartBool_1 StartBool_1) (or StartBool StartBool_2) (< Start_4 Start_3) (<= Start Start_3) (>= Start Start_9)))
   (Start_9 Int (4 (- Start Start_2) (* Start_9 Start_7) (ite StartBool Start_10 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div (ite (= y 3) 3 x) (+ (* (+ 4 x) 4) (- 2))))))

(check-synth)
