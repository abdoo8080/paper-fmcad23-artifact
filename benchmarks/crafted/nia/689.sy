(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_15 Int) (Start_4 Int) (Start_13 Int) (StartBool_4 Bool) (Start_1 Int) (Start_14 Int) (Start_5 Int) (Start_9 Int) (Start_3 Int) (StartBool_3 Bool) (Start_12 Int) (Start_2 Int) (Start_7 Int) (Start_11 Int) (Start_8 Int) (Start_10 Int) (Start_6 Int) (StartBool_2 Bool))
  ((Start Int (0 y 3))
   (StartBool Bool (true (and StartBool StartBool_1) (< Start_1 Start_2) (>= Start Start_2) (> Start_3 Start_3)))
   (StartBool_1 Bool (true false (< Start_14 Start_15) (<= Start_9 Start_9) (= Start_15 Start_13) (> Start_13 Start_8)))
   (Start_15 Int (3 (- Start_9 Start_10) (abs Start_6)))
   (Start_4 Int (x 2 y (* Start_9 Start_6) (div Start_7 Start_11) (ite StartBool_2 Start_7 Start_14)))
   (Start_13 Int (x (- Start_11) (* Start_6 Start_7) (abs Start_1)))
   (StartBool_4 Bool (true false (or StartBool_1 StartBool_3) (<= Start_15 Start_13) (= Start_7 Start_3) (>= Start Start_14)))
   (Start_1 Int (4 (mod Start_8 Start_3) (ite StartBool_3 Start Start_3)))
   (Start_14 Int (0 (- Start_8) (mod Start_15 Start_3) (abs Start_1) (ite StartBool_1 Start_11 Start)))
   (Start_5 Int (1 0 (- Start_6) (- Start_1 Start_6) (mod Start_7 Start_4)))
   (Start_9 Int (3 x (div Start Start_4)))
   (Start_3 Int (2 5 4 (- Start_3 Start_3) (+ Start_4 Start_5) (div Start_5 Start_1) (mod Start_3 Start_4) (abs Start_4)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool StartBool_2) (or StartBool_4 StartBool_2) (< Start_4 Start_6) (<= Start_6 Start_7) (= Start_5 Start_11) (> Start_14 Start_14)))
   (Start_12 Int (5 2 (- Start_6 Start) (* Start_11 Start_5) (div Start_11 Start_11) (abs Start_6)))
   (Start_2 Int (3 (- Start_6 Start_10) (div Start_3 Start_13) (mod Start_13 Start_2) (ite StartBool_2 Start Start_14)))
   (Start_7 Int (0 (- Start_2) (- Start_6 Start) (+ Start_1 Start_6) (* Start_8 Start_8) (div Start_4 Start_2) (abs Start_2)))
   (Start_11 Int (0 (- Start_7) (- Start_5 Start_7) (div Start_13 Start_12) (mod Start_1 Start_5)))
   (Start_8 Int (y 1 3 0 5 (- Start_7) (- Start_7 Start_4) (+ Start_9 Start_8) (div Start_6 Start_2) (mod Start Start_10)))
   (Start_10 Int (y 2 (- Start) (- Start_10 Start_3) (* Start_4 Start_1)))
   (Start_6 Int (2 x (- Start_1) (- Start_10 Start_11) (+ Start_12 Start_6) (* Start_10 Start_9) (mod Start_12 Start_10) (abs Start_5) (ite StartBool_2 Start_9 Start_10)))
   (StartBool_2 Bool (true false (not StartBool_1) (or StartBool StartBool) (< Start_7 Start_11) (<= Start_10 Start_6) (= Start_11 Start_5) (> Start_11 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 1 (abs (- y x)))))

(check-synth)
