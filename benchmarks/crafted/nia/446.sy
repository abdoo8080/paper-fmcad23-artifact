(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_5 Int) (Start_8 Int) (Start_9 Int) (Start_3 Int) (Start_1 Int) (Start_2 Int) (Start_11 Int) (Start_4 Int) (Start_6 Int) (Start_15 Int) (Start_7 Int) (Start_13 Int) (Start_10 Int) (Start_12 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartBool_4 Bool) (StartBool_3 Bool))
  ((Start Int (5 (- Start) (- Start_1 Start) (+ Start Start_1) (* Start_1 Start) (abs Start)))
   (StartBool Bool (true (not StartBool) (or StartBool StartBool_2) (<= Start_11 Start_7) (> Start_10 Start_3)))
   (Start_14 Int (4 (+ Start_4 Start_3) (* Start_13 Start_12) (mod Start_12 Start_3) (abs Start_10)))
   (Start_5 Int (1 x (+ Start_13 Start_5) (* Start_14 Start_1) (mod Start_11 Start_5) (ite StartBool_3 Start_1 Start)))
   (Start_8 Int (x 3 (- Start_5) (* Start_4 Start_6) (abs Start_9) (ite StartBool_2 Start_7 Start_1)))
   (Start_9 Int (4 (- Start_10) (- Start_8 Start_2) (* Start_3 Start_7) (div Start_7 Start_1) (abs Start_9) (ite StartBool_3 Start_7 Start_11)))
   (Start_3 Int (0 5 (- Start_13) (- Start_11 Start_5) (div Start_7 Start_11) (mod Start_13 Start_13) (ite StartBool_4 Start_4 Start_15)))
   (Start_1 Int (4 5 (- Start) (- Start_1 Start_1) (+ Start_1 Start_2) (* Start_1 Start_2) (div Start_2 Start) (abs Start_2) (ite StartBool Start_1 Start_2)))
   (Start_2 Int (2 (- Start_3) (* Start Start) (div Start_1 Start) (abs Start_4)))
   (Start_11 Int (0 5 3 (- Start_3) (- Start Start_2) (* Start_3 Start_6) (abs Start_11) (ite StartBool_1 Start_5 Start_12)))
   (Start_4 Int (5 4 3 y (+ Start_4 Start_3) (mod Start_2 Start_5) (ite StartBool_1 Start Start_6)))
   (Start_6 Int (1 (+ Start_4 Start_6) (div Start_7 Start_3) (abs Start_6)))
   (Start_15 Int (0 (- Start_3) (* Start_14 Start_10) (div Start_1 Start_11) (mod Start_4 Start_15) (abs Start_11)))
   (Start_7 Int (1 (* Start_2 Start_7) (div Start_6 Start)))
   (Start_13 Int (0 4 x 3 (- Start_15) (- Start_15 Start_6) (* Start_1 Start_2) (div Start_8 Start_3)))
   (Start_10 Int (1 2 (abs Start_3)))
   (Start_12 Int (0 (- Start_5 Start_9) (div Start_5 Start_2) (mod Start_7 Start_7) (abs Start_11) (ite StartBool Start Start_3)))
   (StartBool_1 Bool (true false (or StartBool_1 StartBool_1) (= Start_2 Start_4) (>= Start_4 Start_2) (> Start_5 Start_8)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool) (or StartBool StartBool_2) (= Start_5 Start_8) (>= Start_3 Start_3) (> Start_2 Start_3)))
   (StartBool_4 Bool (true (not StartBool_4) (> Start_1 Start_12)))
   (StartBool_3 Bool (false (not StartBool) (or StartBool_2 StartBool) (<= Start_1 Start) (>= Start_7 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div y 2)))

(check-synth)
