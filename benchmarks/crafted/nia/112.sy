(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_18 Int) (StartBool_3 Bool) (Start_7 Int) (Start_9 Int) (Start_6 Int) (Start_17 Int) (Start_16 Int) (Start_21 Int) (StartBool_1 Bool) (Start_8 Int) (Start_2 Int) (Start_13 Int) (Start_3 Int) (Start_1 Int) (Start_20 Int) (StartBool_4 Bool) (Start_11 Int) (Start_5 Int) (StartBool_2 Bool) (Start_12 Int) (Start_10 Int) (Start_15 Int) (Start_4 Int) (Start_14 Int))
  ((Start Int (4 (- Start_1) (div Start_2 Start) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool) (or StartBool_2 StartBool_3) (< Start_3 Start_1) (<= Start_3 Start_5) (>= Start Start_5)))
   (Start_19 Int (y (- Start Start_13) (+ Start_14 Start_3) (div Start_10 Start_5) (abs Start_9)))
   (Start_18 Int (4 (+ Start_17 Start) (* Start_7 Start_19) (div Start_17 Start_8) (ite StartBool Start_8 Start_20)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool_1) (or StartBool_3 StartBool) (< Start_15 Start_20) (<= Start_5 Start_10) (= Start_21 Start_13) (> Start_20 Start_10)))
   (Start_7 Int (0 (+ Start_9 Start_13) (* Start_8 Start_2) (mod Start_5 Start_17) (abs Start_18) (ite StartBool_2 Start_1 Start_9)))
   (Start_9 Int (0 (div Start_6 Start_16) (abs Start_5) (ite StartBool_4 Start_2 Start_15)))
   (Start_6 Int (4 0 y 5 (- Start_14 Start_6)))
   (Start_17 Int (3 4 2 (+ Start_12 Start_12) (mod Start_1 Start_13)))
   (Start_16 Int (y 2 x (- Start_17) (+ Start_8 Start_2) (mod Start_3 Start_6) (abs Start_4) (ite StartBool_3 Start_6 Start_2)))
   (Start_21 Int (x (- Start_12) (div Start_3 Start_9) (abs Start_4)))
   (StartBool_1 Bool (true false (< Start Start_2) (<= Start Start_2)))
   (Start_8 Int (0 5 3 (+ Start Start_7) (* Start_4 Start_5) (mod Start_11 Start_8) (abs Start_3)))
   (Start_2 Int (2 4 (ite StartBool_1 Start Start_3)))
   (Start_13 Int (1 0 (- Start_4) (div Start_16 Start_11) (abs Start_4)))
   (Start_3 Int (3 (- Start_3) (- Start_2 Start_2) (abs Start_2) (ite StartBool_1 Start_1 Start_1)))
   (Start_1 Int (3 (- Start) (- Start_1 Start_1) (* Start Start_1) (mod Start_3 Start_4) (ite StartBool Start_4 Start)))
   (Start_20 Int (5 (- Start_3) (- Start_5 Start_21) (div Start_3 Start_15) (abs Start_9)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_4 StartBool_2) (or StartBool_1 StartBool_4) (< Start_1 Start_16) (<= Start_16 Start_3) (>= Start_10 Start_2)))
   (Start_11 Int (2 (- Start_8) (- Start_9 Start_5) (* Start_11 Start_8) (div Start_11 Start_1) (mod Start_8 Start_12) (ite StartBool Start_12 Start_12)))
   (Start_5 Int (0 (- Start_6) (- Start_7 Start_8) (+ Start_6 Start_2) (div Start_9 Start_10) (mod Start_9 Start_9)))
   (StartBool_2 Bool (true false (or StartBool_4 StartBool_1) (<= Start_5 Start_1) (> Start_20 Start_4)))
   (Start_12 Int (x 3 4 (- Start_12) (- Start_2 Start_13) (* Start_13 Start_4) (mod Start_12 Start_14) (ite StartBool_3 Start_14 Start_6)))
   (Start_10 Int (5 (- Start_9 Start_9) (div Start_1 Start_5) (abs Start) (ite StartBool_2 Start_7 Start_11)))
   (Start_15 Int (4 (+ Start_3 Start_10) (* Start_10 Start_9) (abs Start_8)))
   (Start_4 Int (2 1 3 0 (- Start_2) (- Start_3 Start_2) (mod Start_2 Start_3)))
   (Start_14 Int (4 (- Start_10) (- Start_11 Start_5) (abs Start_2) (ite StartBool_3 Start_15 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 1 (+ x 1))))

(check-synth)
