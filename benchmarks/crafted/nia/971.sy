(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_13 Int) (Start_1 Int) (Start_2 Int) (Start_11 Int) (StartBool_1 Bool) (Start_7 Int) (Start_12 Int) (Start_8 Int) (StartBool_2 Bool) (Start_9 Int) (Start_10 Int) (StartBool_3 Bool) (Start_4 Int) (Start_14 Int) (Start_6 Int) (Start_5 Int) (Start_3 Int))
  ((Start Int (5 0 x 2 (+ Start_1 Start_2) (* Start_3 Start_3) (mod Start_4 Start) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (true (not StartBool_2) (or StartBool StartBool_3) (< Start_11 Start_4) (<= Start_5 Start_11) (> Start_6 Start_3)))
   (Start_15 Int (y (- Start_2) (- Start_9 Start_4) (* Start_14 Start_6) (div Start_10 Start_2) (mod Start_13 Start_12) (abs Start_12) (ite StartBool_3 Start_15 Start)))
   (Start_13 Int (x 5 4 3 (- Start_3) (- Start_14 Start_13) (+ Start_11 Start_14)))
   (Start_1 Int (3 x (+ Start_12 Start_10) (mod Start_1 Start_9) (abs Start_13)))
   (Start_2 Int (0 y 3 (- Start_6 Start_1) (* Start_3 Start_3) (ite StartBool Start_12 Start_8)))
   (Start_11 Int (y x (- Start_12) (+ Start_1 Start) (abs Start_12)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_1) (<= Start_5 Start_3) (= Start_2 Start) (>= Start_6 Start_6) (> Start_7 Start_4)))
   (Start_7 Int (x 1 4 y 5 2 (+ Start_8 Start_2) (mod Start_1 Start) (abs Start_4) (ite StartBool Start_6 Start_1)))
   (Start_12 Int (y 1 (- Start_2 Start_6) (div Start_11 Start) (abs Start_3) (ite StartBool_1 Start_7 Start_12)))
   (Start_8 Int (4 x 3 0 (- Start_2) (+ Start_5 Start_5) (* Start_9 Start_7) (mod Start_3 Start_4) (ite StartBool_2 Start Start_5)))
   (StartBool_2 Bool (false true (or StartBool_3 StartBool_3) (<= Start_10 Start_6) (= Start_6 Start_4)))
   (Start_9 Int (2 (- Start_7 Start_6) (* Start_9 Start_10) (div Start_6 Start_10) (mod Start_10 Start_9) (ite StartBool Start_2 Start_2)))
   (Start_10 Int (2 1 (+ Start_10 Start_10) (div Start_1 Start_4) (ite StartBool_2 Start_6 Start_1)))
   (StartBool_3 Bool (false (or StartBool_3 StartBool_3) (< Start_10 Start_9) (<= Start_1 Start_2) (= Start_7 Start_10) (>= Start_3 Start_9)))
   (Start_4 Int (x (div Start_9 Start_10) (ite StartBool_3 Start Start_9)))
   (Start_14 Int (4 1 y x (- Start_11 Start_1) (+ Start_13 Start_15)))
   (Start_6 Int (y (- Start_9) (- Start_8 Start_4) (* Start_7 Start_3) (mod Start_6 Start_10) (abs Start_2)))
   (Start_5 Int (0 (- Start) (div Start_3 Start_6) (mod Start_4 Start_8)))
   (Start_3 Int (0 (- Start_11) (- Start_1 Start) (+ Start_10 Start_7) (* Start_2 Start_9) (div Start_7 Start) (mod Start_12 Start_10) (abs Start_7) (ite StartBool_3 Start_10 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (div 3 x) y)))

(check-synth)
