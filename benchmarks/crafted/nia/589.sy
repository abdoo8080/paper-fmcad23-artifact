(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (StartBool_3 Bool) (Start_9 Int) (Start_16 Int) (Start_13 Int) (Start_4 Int) (StartBool_1 Bool) (Start_14 Int) (Start_12 Int) (Start_3 Int) (Start_7 Int) (StartBool_2 Bool) (Start_11 Int) (Start_5 Int) (Start_8 Int) (Start_1 Int) (Start_10 Int) (Start_2 Int) (Start_15 Int))
  ((Start Int (0 (- Start Start) (mod Start_1 Start) (ite StartBool Start_1 Start_1)))
   (StartBool Bool (true (or StartBool_1 StartBool_2) (< Start_3 Start_6) (>= Start_15 Start_9) (> Start_4 Start_12)))
   (Start_6 Int (y 1 0 (- Start_2) (* Start_9 Start_10) (div Start Start_14) (abs Start_1)))
   (StartBool_3 Bool (false true (or StartBool StartBool_2) (< Start_13 Start_6) (<= Start_15 Start_11) (= Start_1 Start_12) (>= Start Start_12)))
   (Start_9 Int (x 1 (+ Start_11 Start_15) (* Start_6 Start_5) (mod Start_15 Start_3) (ite StartBool_1 Start_6 Start)))
   (Start_16 Int (2 (- Start_1) (- Start_9 Start_1) (* Start_15 Start_5) (mod Start_2 Start_4) (abs Start_15) (ite StartBool_3 Start_13 Start)))
   (Start_13 Int (y (- Start_6) (- Start_11 Start_13) (+ Start_6 Start_14) (* Start_11 Start_2) (div Start_15 Start)))
   (Start_4 Int (2 4 1 (- Start_5 Start_5) (* Start_5 Start_4) (div Start_1 Start_6) (mod Start_4 Start_1) (abs Start_7)))
   (StartBool_1 Bool (true (< Start_4 Start_1) (> Start_5 Start_2)))
   (Start_14 Int (4 3 (+ Start_11 Start_10) (* Start_11 Start_6) (div Start_11 Start) (mod Start_6 Start) (ite StartBool_3 Start_3 Start)))
   (Start_12 Int (1 (- Start_13 Start_15) (* Start_10 Start_3)))
   (Start_3 Int (1 (+ Start_1 Start_3) (mod Start_3 Start_2)))
   (Start_7 Int (3 0 2 (- Start) (- Start_4 Start_2) (* Start_4 Start) (div Start_2 Start_2) (ite StartBool_2 Start_1 Start_1)))
   (StartBool_2 Bool (true (and StartBool StartBool_1) (or StartBool_3 StartBool_1) (< Start_5 Start) (> Start_8 Start_6)))
   (Start_11 Int (3 (- Start_6) (- Start_9 Start_11) (div Start_15 Start_11) (mod Start_13 Start_5) (abs Start) (ite StartBool_3 Start_9 Start_10)))
   (Start_5 Int (x (abs Start_4)))
   (Start_8 Int (5 (- Start Start_9) (div Start Start_4) (mod Start_2 Start_10) (ite StartBool_2 Start_8 Start_7)))
   (Start_1 Int (1 (+ Start Start) (* Start_2 Start) (div Start_2 Start_2) (abs Start) (ite StartBool_1 Start_1 Start_3)))
   (Start_10 Int (x (- Start_4) (+ Start_10 Start_10) (* Start_9 Start_5) (div Start_8 Start) (mod Start_4 Start_11) (abs Start_12) (ite StartBool Start_8 Start_13)))
   (Start_2 Int (x (+ Start_11 Start_8) (* Start_16 Start_7) (ite StartBool_1 Start_8 Start_10)))
   (Start_15 Int (y 2 (abs Start_9) (ite StartBool Start_14 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div x (- 1 y)) 3)))

(check-synth)
