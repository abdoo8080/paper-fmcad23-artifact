(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_17 Int) (StartBool_2 Bool) (Start_1 Int) (Start_16 Int) (Start_12 Int) (Start_13 Int) (Start_15 Int) (Start_9 Int) (Start_2 Int) (Start_14 Int) (Start_4 Int) (Start_3 Int) (Start_11 Int) (Start_6 Int) (StartBool_3 Bool) (Start_5 Int) (StartBool_1 Bool) (Start_7 Int) (Start_8 Int) (Start_10 Int))
  ((Start Int (y (- Start) (- Start Start) (+ Start Start_1) (ite StartBool_1 Start_2 Start_2)))
   (StartBool Bool (true (not StartBool_3) (or StartBool_2 StartBool_4) (< Start_3 Start_15) (<= Start_11 Start_2)))
   (StartBool_4 Bool (false true (and StartBool_2 StartBool_3) (or StartBool_2 StartBool) (>= Start_8 Start_4)))
   (Start_17 Int (x y 2 (- Start_13) (- Start_17 Start) (+ Start_12 Start_12) (div Start_2 Start_6) (abs Start_8) (ite StartBool_1 Start_14 Start_17)))
   (StartBool_2 Bool (true (not StartBool_3) (<= Start_3 Start_7) (= Start_3 Start_11) (> Start_11 Start_15)))
   (Start_1 Int (2 (- Start_13 Start_11) (+ Start_5 Start_4) (* Start_10 Start_1) (div Start_15 Start_17)))
   (Start_16 Int (2 4 (- Start_8) (- Start_9 Start_3) (* Start_3 Start_8) (div Start_9 Start_11)))
   (Start_12 Int (0 (- Start_4) (- Start_2 Start_11) (* Start_14 Start_11) (div Start_7 Start_3) (abs Start_10) (ite StartBool Start_14 Start_9)))
   (Start_13 Int (y (- Start_4) (- Start_5 Start_10) (+ Start_10 Start)))
   (Start_15 Int (4 (- Start_8 Start_8) (+ Start_10 Start_8) (* Start_16 Start_13) (div Start_16 Start_5) (mod Start_4 Start_7)))
   (Start_9 Int (5 2 1 (- Start_3) (- Start_10 Start_7) (* Start_7 Start_1) (div Start_5 Start_5) (mod Start_9 Start_11) (ite StartBool_2 Start_2 Start_11)))
   (Start_2 Int (5 (- Start_3) (* Start_1 Start_3) (div Start_1 Start_4) (abs Start_2)))
   (Start_14 Int (3 (+ Start_3 Start_15) (* Start_11 Start_1) (mod Start_13 Start_10) (abs Start_7)))
   (Start_4 Int (2 x (+ Start_1 Start) (* Start_3 Start) (abs Start_5) (ite StartBool Start Start_1)))
   (Start_3 Int (2 5 (- Start_2) (- Start_2 Start_3) (mod Start_2 Start_3) (ite StartBool Start_3 Start_4)))
   (Start_11 Int (0 (- Start_8) (+ Start_2 Start_3) (abs Start_9)))
   (Start_6 Int (3 0 x (- Start_12) (- Start_13 Start_8) (div Start_4 Start_6) (mod Start_8 Start_12) (ite StartBool_3 Start_3 Start_11)))
   (StartBool_3 Bool (true (= Start_12 Start_10) (> Start_1 Start_6)))
   (Start_5 Int (4 5 3 2 (mod Start_1 Start) (abs Start_3)))
   (StartBool_1 Bool (false true (not StartBool_2) (or StartBool StartBool_1) (< Start_3 Start_6) (= Start_5 Start_4) (>= Start_1 Start_3) (> Start_6 Start_7)))
   (Start_7 Int (x (- Start_2) (+ Start_8 Start_7) (div Start_6 Start_3) (mod Start_3 Start_8)))
   (Start_8 Int (4 1 0 (+ Start_8 Start_4) (* Start_2 Start_1) (div Start_2 Start_3) (mod Start_9 Start_10)))
   (Start_10 Int (5 (- Start_10) (- Start_5 Start_2) (* Start_10 Start_3) (ite StartBool_1 Start_3 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* y (- 5))))

(check-synth)
