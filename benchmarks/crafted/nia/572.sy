(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_4 Bool) (Start_11 Int) (Start_9 Int) (StartBool_5 Bool) (Start_2 Int) (Start_3 Int) (Start_4 Int) (Start_6 Int) (Start_7 Int) (Start_8 Int) (StartBool_6 Bool) (StartBool_2 Bool) (Start_10 Int) (StartBool_1 Bool) (Start_1 Int) (Start_5 Int))
  ((Start Int (2 (- Start_1) (+ Start Start_1) (div Start_1 Start) (abs Start_1) (ite StartBool Start_2 Start)))
   (StartBool Bool (true false (and StartBool StartBool_1) (or StartBool_3 StartBool_4) (< Start_1 Start_1) (<= Start_9 Start_10) (= Start_7 Start_10)))
   (StartBool_3 Bool (false (not StartBool_6) (<= Start_11 Start_2) (> Start_1 Start_9)))
   (StartBool_4 Bool (false (and StartBool_5 StartBool_4) (< Start_9 Start_4) (= Start_10 Start_3) (>= Start_9 Start_9)))
   (Start_11 Int (x 4 (+ Start Start_1) (* Start_4 Start_5) (div Start_10 Start_10)))
   (Start_9 Int (y 2 3 5 (- Start_2 Start_9) (div Start_1 Start_1) (mod Start_3 Start_8) (abs Start_8)))
   (StartBool_5 Bool (true false (and StartBool_4 StartBool_6) (< Start_11 Start_4) (>= Start_1 Start_7)))
   (Start_2 Int (2 x (- Start_1 Start_1) (+ Start_3 Start) (* Start_1 Start_4) (div Start_1 Start_3) (ite StartBool Start_3 Start_1)))
   (Start_3 Int (1 4 2 (- Start_2) (div Start_8 Start)))
   (Start_4 Int (0 (- Start_2 Start_1) (+ Start_1 Start_2) (* Start Start) (abs Start_1) (ite StartBool_1 Start_5 Start_5)))
   (Start_6 Int (x 0 (abs Start_1) (ite StartBool Start_3 Start)))
   (Start_7 Int (5 (+ Start_4 Start_3) (* Start_4 Start_2) (abs Start_7)))
   (Start_8 Int (2 0 3 (- Start_8) (ite StartBool_1 Start_5 Start)))
   (StartBool_6 Bool (false (and StartBool_1 StartBool) (< Start_11 Start_8) (<= Start Start_1) (= Start_8 Start_2) (> Start_2 Start_1)))
   (StartBool_2 Bool (true (and StartBool StartBool) (= Start_6 Start_7) (>= Start_3 Start_3)))
   (Start_10 Int (4 x 3 2 (- Start_3 Start) (* Start_8 Start_8) (div Start_6 Start_2) (abs Start)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool) (= Start_3 Start) (>= Start Start_6)))
   (Start_1 Int (3 x y (- Start_1) (- Start_3 Start_7) (+ Start Start_2) (* Start_4 Start_7) (mod Start_8 Start_6) (abs Start_5)))
   (Start_5 Int (4 y (- Start_2) (- Start_5 Start_3) (mod Start_6 Start_2) (abs Start_6) (ite StartBool_1 Start_5 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div x 0))))

(check-synth)
