(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (StartBool_4 Bool) (Start_12 Int) (Start_5 Int) (Start_4 Int) (Start_1 Int) (Start_6 Int) (StartBool_2 Bool) (Start_3 Int) (Start_8 Int) (Start_10 Int) (Start_7 Int) (Start_9 Int) (Start_13 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_11 Int))
  ((Start Int (y (- Start_1) (+ Start_1 Start) (* Start_2 Start_3) (div Start_2 Start_4) (mod Start Start_2) (ite StartBool_1 Start_4 Start_3)))
   (StartBool Bool (false (= Start_12 Start_13) (> Start_10 Start_8)))
   (Start_2 Int (3 (- Start_9) (mod Start Start_12) (abs Start) (ite StartBool Start_4 Start_8)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool_4 StartBool_2) (or StartBool_1 StartBool) (= Start_4 Start_12) (>= Start_1 Start)))
   (Start_12 Int (y x (mod Start_9 Start_4)))
   (Start_5 Int (4 (+ Start_2 Start_5) (abs Start)))
   (Start_4 Int (3 y (- Start_1 Start_1) (+ Start_6 Start) (* Start Start_7) (mod Start_8 Start_4) (abs Start_7)))
   (Start_1 Int (0 4 3 y (- Start_11) (* Start_4 Start_3) (abs Start_10) (ite StartBool_4 Start_9 Start_11)))
   (Start_6 Int (x (- Start_2 Start_12) (div Start_4 Start_6) (abs Start_2)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_3 StartBool_3) (or StartBool_1 StartBool) (= Start_4 Start) (>= Start_3 Start_1) (> Start_8 Start_11)))
   (Start_3 Int (x (- Start) (+ Start_10 Start_9) (* Start Start_10) (abs Start_7) (ite StartBool Start_11 Start)))
   (Start_8 Int (0 2 (- Start_1 Start_4) (+ Start_5 Start_9) (mod Start_2 Start_6) (ite StartBool Start_6 Start_10)))
   (Start_10 Int (5 (+ Start_6 Start_5) (* Start_2 Start_6)))
   (Start_7 Int (3 x 2 (mod Start_3 Start_9) (abs Start_2) (ite StartBool_1 Start_8 Start_4)))
   (Start_9 Int (4 (- Start_11) (abs Start) (ite StartBool_1 Start_9 Start_11)))
   (Start_13 Int (3 1 2 0 4 x (* Start_4 Start_12) (abs Start_11) (ite StartBool_4 Start_2 Start_8)))
   (StartBool_1 Bool (true false (and StartBool StartBool) (or StartBool StartBool_1) (= Start Start_3) (>= Start_3 Start_5) (> Start_4 Start)))
   (StartBool_3 Bool (false true (not StartBool_3) (or StartBool StartBool)))
   (Start_11 Int (1 4 0 5 3 (- Start_2) (- Start_1 Start_1) (+ Start_1 Start_7) (* Start_5 Start_9) (div Start_1 Start_3) (mod Start Start_9) (abs Start_7) (ite StartBool_2 Start_3 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div (mod y 0) 2) (- (abs x) 5))))

(check-synth)
