(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_13 Int) (Start_8 Int) (Start_2 Int) (StartBool_1 Bool) (Start_4 Int) (Start_3 Int) (Start_5 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_7 Int) (Start_10 Int) (Start_11 Int) (Start_1 Int) (Start_6 Int) (Start_12 Int) (Start_9 Int))
  ((Start Int (y (- Start) (- Start_1 Start_1) (+ Start_2 Start) (* Start_2 Start_3) (div Start_2 Start_2) (mod Start_1 Start_4) (ite StartBool_1 Start_4 Start_3)))
   (StartBool Bool (false true (and StartBool_3 StartBool_1) (or StartBool_1 StartBool) (= Start_4 Start_7) (>= Start_13 Start_6) (> Start Start_4)))
   (Start_14 Int (2 (- Start_2 Start_2) (* Start_7 Start_1) (mod Start_2 Start_14) (abs Start_3)))
   (Start_13 Int (2 (- Start_2) (- Start_13 Start_11) (+ Start_7 Start_14) (div Start_6 Start_9)))
   (Start_8 Int (5 x 2 1 (- Start) (+ Start_5 Start_5) (* Start_1 Start_2) (mod Start_2 Start_7) (abs Start_6) (ite StartBool_2 Start_8 Start_1)))
   (Start_2 Int (4 (+ Start_2 Start_2) (* Start_8 Start) (abs Start_2) (ite StartBool Start_1 Start_7)))
   (StartBool_1 Bool (true false (not StartBool) (< Start_2 Start_4) (<= Start_2 Start_1) (= Start_2 Start_3)))
   (Start_4 Int (1 x (- Start_4 Start_1) (* Start_4 Start)))
   (Start_3 Int (x 4 (- Start_2) (- Start_2 Start_5) (* Start_1 Start_6) (div Start_5 Start_4) (mod Start_7 Start_6) (ite StartBool_2 Start_2 Start_8)))
   (Start_5 Int (x 2 (- Start_4) (- Start Start) (div Start_6 Start_5) (abs Start_9)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_2) (<= Start_3 Start_1)))
   (StartBool_3 Bool (false true (>= Start_3 Start_2) (> Start Start_5)))
   (Start_7 Int (4 3 1 0 x 5 2 (- Start) (mod Start Start_2)))
   (Start_10 Int (2 (- Start_3) (+ Start_4 Start_11) (ite StartBool Start_3 Start_5)))
   (Start_11 Int (5 2 (- Start_5) (- Start_8 Start_2) (+ Start_12 Start_12) (* Start_6 Start) (mod Start_7 Start_7) (ite StartBool_3 Start_10 Start_6)))
   (Start_1 Int (y 0 (- Start_1) (- Start_11 Start_8) (+ Start_13 Start_1) (* Start Start_8) (div Start_3 Start_7) (mod Start_6 Start_10)))
   (Start_6 Int (5 (+ Start_6 Start_2) (div Start_3 Start_4)))
   (Start_12 Int (0 (- Start_8 Start_9) (+ Start_3 Start_2) (* Start_2 Start_8) (mod Start_7 Start_5) (abs Start_2) (ite StartBool_1 Start_10 Start_9)))
   (Start_9 Int (1 (- Start_2) (- Start_10 Start_2) (mod Start Start_4) (ite StartBool Start Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 4 (mod 0 0))))

(check-synth)
