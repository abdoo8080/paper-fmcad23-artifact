(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_14 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_13 Int) (Start_1 Int) (Start_3 Int) (Start_5 Int) (Start_4 Int) (StartBool_4 Bool) (Start_9 Int) (StartBool_1 Bool) (Start_12 Int) (Start_6 Int) (Start_7 Int) (Start_10 Int) (Start_11 Int) (StartBool_5 Bool) (Start_8 Int))
  ((Start Int (4 2 (- Start) (div Start_1 Start) (mod Start_1 Start)))
   (StartBool Bool (false (or StartBool_4 StartBool_1) (<= Start_14 Start_3) (= Start_4 Start_14) (> Start_6 Start_10)))
   (Start_2 Int (2 x 5 y (- Start_10) (- Start_3 Start_14) (ite StartBool_3 Start_8 Start_14)))
   (Start_14 Int (3 (- Start_3 Start_4) (* Start_4 Start_9)))
   (StartBool_2 Bool (false true (not StartBool_4) (= Start_8 Start_9) (>= Start_9 Start_13) (> Start Start_10)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_3) (or StartBool StartBool_2) (< Start_10 Start_9)))
   (Start_13 Int (0 (- Start_11) (+ Start_3 Start_6) (div Start_8 Start_13) (mod Start_11 Start)))
   (Start_1 Int (4 (- Start) (+ Start Start_1) (* Start_1 Start_2) (abs Start) (ite StartBool_1 Start_3 Start_3)))
   (Start_3 Int (0 (- Start_3) (+ Start_4 Start) (* Start_3 Start_2) (div Start Start_3) (mod Start_3 Start_2) (abs Start_4)))
   (Start_5 Int (2 0 (- Start_4 Start_2)))
   (Start_4 Int (2 3 0 (- Start Start_5) (div Start Start_2)))
   (StartBool_4 Bool (false (not StartBool_4) (or StartBool_3 StartBool_5) (= Start_2 Start_1) (> Start_12 Start_13)))
   (Start_9 Int (0 2 4 (- Start_2) (- Start_10 Start_11) (+ Start_9 Start_2) (div Start_5 Start_2) (abs Start_12)))
   (StartBool_1 Bool (true (not StartBool_2) (or StartBool_1 StartBool_3) (< Start_4 Start_6) (= Start_3 Start)))
   (Start_12 Int (1 (* Start_7 Start_9) (mod Start_10 Start_5)))
   (Start_6 Int (5 (- Start_7 Start_1) (+ Start_4 Start_2) (* Start Start)))
   (Start_7 Int (3 0 2 (- Start_8 Start_9) (+ Start_10 Start_5) (abs Start_4) (ite StartBool_1 Start_2 Start_7)))
   (Start_10 Int (5 (mod Start_9 Start_9) (abs Start_3)))
   (Start_11 Int (x (* Start_4 Start_12) (mod Start Start_5) (abs Start_9)))
   (StartBool_5 Bool (false true (<= Start_12 Start_14) (= Start_14 Start_12) (>= Start_10 Start_4)))
   (Start_8 Int (5 4 x y (- Start_6 Start_4) (+ Start_7 Start_11) (* Start_13 Start) (abs Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div x 5))))

(check-synth)
