(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_16 Int) (StartBool_3 Bool) (Start_15 Int) (Start_4 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_7 Int) (Start_10 Int) (Start_6 Int) (Start_5 Int) (Start_8 Int) (Start_3 Int) (Start_12 Int) (Start_9 Int) (Start_14 Int) (Start_13 Int) (Start_11 Int))
  ((Start Int (1 (mod Start_1 Start_2) (abs Start_3)))
   (StartBool Bool (false (not StartBool_1) (< Start_11 Start) (<= Start_8 Start_8) (= Start_12 Start_7) (>= Start_11 Start_9) (> Start_9 Start_13)))
   (Start_1 Int (2 y 1 (- Start_10) (- Start Start_11) (+ Start_7 Start_2) (* Start_14 Start_1) (mod Start_7 Start_11) (abs Start_16)))
   (Start_2 Int (2 (- Start_1) (- Start_12 Start) (div Start_15 Start_16) (mod Start_5 Start_8) (abs Start_9)))
   (Start_16 Int (1 (+ Start_10 Start_7) (div Start_14 Start_16) (abs Start_15) (ite StartBool_2 Start_13 Start_14)))
   (StartBool_3 Bool (true (not StartBool_3)))
   (Start_15 Int (x y 4 0 (- Start_6) (div Start_2 Start_5) (ite StartBool_2 Start_1 Start_5)))
   (Start_4 Int (2 (- Start_5) (- Start_6 Start) (+ Start_6 Start_3) (div Start_1 Start_7) (mod Start_6 Start_3) (abs Start_6) (ite StartBool_2 Start_8 Start_2)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (< Start_5 Start_3) (<= Start_4 Start_1)))
   (StartBool_2 Bool (false true (or StartBool StartBool_2) (= Start_5 Start_4) (>= Start_1 Start_3)))
   (Start_7 Int (4 5 (- Start_4) (- Start_9 Start_7) (* Start_5 Start_7) (div Start_10 Start_11) (mod Start_8 Start_9) (abs Start_4) (ite StartBool_2 Start_12 Start_4)))
   (Start_10 Int (5 (+ Start_12 Start_4) (div Start_11 Start_16) (mod Start_14 Start_9)))
   (Start_6 Int (1 (- Start) (- Start_5 Start_4) (div Start_1 Start_3) (abs Start_5) (ite StartBool_1 Start_4 Start_6)))
   (Start_5 Int (1 3 2 y 4 (- Start_3) (- Start_3 Start_2) (div Start_1 Start_4) (mod Start Start_6) (abs Start_2)))
   (Start_8 Int (2 (+ Start_6 Start)))
   (Start_3 Int (1 (+ Start_3 Start) (div Start_3 Start_1) (abs Start_4) (ite StartBool_1 Start_3 Start_2)))
   (Start_12 Int (y (- Start_11 Start_2) (* Start_3 Start_12) (mod Start_13 Start_2)))
   (Start_9 Int (x (ite StartBool_3 Start_13 Start_15)))
   (Start_14 Int (x (- Start_4) (+ Start_3 Start_5) (* Start_13 Start_12) (div Start Start_10) (ite StartBool_2 Start_13 Start_12)))
   (Start_13 Int (y 2 5 3 (mod Start_14 Start_3)))
   (Start_11 Int (1 (- Start Start_1) (+ Start_10 Start_4) (* Start_12 Start_6) (abs Start_11) (ite StartBool_3 Start_4 Start_15)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 (abs x))))

(check-synth)
