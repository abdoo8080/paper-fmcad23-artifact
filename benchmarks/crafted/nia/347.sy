(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_3 Int) (Start_5 Int) (Start_6 Int) (StartBool_1 Bool) (Start_1 Int) (Start_2 Int) (Start_4 Int) (Start_7 Int) (Start_8 Int) (Start_9 Int) (StartBool_3 Bool))
  ((Start Int (3 (- Start_1) (- Start_1 Start_1) (* Start_2 Start_1) (mod Start_3 Start_3) (abs Start) (ite StartBool Start_4 Start)))
   (StartBool Bool (true (not StartBool) (and StartBool_2 StartBool_3) (< Start_3 Start_8) (<= Start_2 Start_8) (>= Start_9 Start_3) (> Start_3 Start_2)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool_2) (or StartBool_1 StartBool_3) (< Start_1 Start_1) (= Start_6 Start_8)))
   (Start_3 Int (3 0 (- Start_4) (- Start_2 Start_2) (ite StartBool Start_4 Start_4)))
   (Start_5 Int (4 2 x (+ Start_4 Start_3) (div Start_1 Start_6) (mod Start_3 Start_3) (abs Start_4) (ite StartBool Start_4 Start_3)))
   (Start_6 Int (4 1 x 5 (- Start_3) (+ Start_2 Start_7) (* Start_4 Start_7) (div Start_4 Start) (abs Start_1) (ite StartBool_1 Start_4 Start_4)))
   (StartBool_1 Bool (false true (<= Start_3 Start_1) (= Start_1 Start_2) (> Start Start_3)))
   (Start_1 Int (3 0 4 2 (- Start_1 Start_8) (* Start_6 Start_4) (div Start_1 Start_5) (mod Start_6 Start_7)))
   (Start_2 Int (x (- Start_6 Start_6) (div Start_1 Start_4) (mod Start_1 Start_5) (abs Start_8)))
   (Start_4 Int (1 (- Start_1) (+ Start_1 Start_3) (div Start_5 Start_3) (abs Start_3) (ite StartBool_1 Start_1 Start_4)))
   (Start_7 Int (x 2 1 y (- Start_4 Start_5) (+ Start_4 Start) (div Start_3 Start_7) (mod Start_5 Start) (abs Start_3) (ite StartBool_1 Start Start)))
   (Start_8 Int (2 (div Start_7 Start_2)))
   (Start_9 Int (3 (- Start_3 Start_5) (+ Start_2 Start_1) (* Start_1 Start_3) (div Start_3 Start_2) (abs Start)))
   (StartBool_3 Bool (false (not StartBool_3) (< Start_6 Start_8) (> Start_7 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 0 (* 5 5))))

(check-synth)
