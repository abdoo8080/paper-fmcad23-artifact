(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_10 Int) (Start_14 Int) (Start_2 Int) (Start_4 Int) (Start_3 Int) (Start_11 Int) (Start_6 Int) (StartBool_3 Bool) (Start_8 Int) (Start_1 Int) (StartBool_1 Bool) (Start_7 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_9 Int) (Start_12 Int) (Start_5 Int))
  ((Start Int (2 (- Start Start_1) (mod Start_1 Start_2) (abs Start_2)))
   (StartBool Bool (false true (not StartBool_3) (or StartBool StartBool_1) (<= Start_2 Start_10)))
   (Start_13 Int (1 y (- Start_5 Start_5) (abs Start_9)))
   (Start_10 Int (4 3 x 2 1 (* Start_3 Start_6) (mod Start_2 Start_11) (abs Start_8) (ite StartBool Start_3 Start_4)))
   (Start_14 Int (5 (+ Start Start_1) (mod Start_10 Start_6) (abs Start_4)))
   (Start_2 Int (x (- Start) (- Start_2 Start_3) (* Start_4 Start_1) (abs Start_1)))
   (Start_4 Int (2 y 3 (- Start_4 Start_2) (+ Start_4 Start_1) (mod Start_4 Start_2) (abs Start_2)))
   (Start_3 Int (5 (- Start_2) (- Start_3 Start) (* Start_2 Start_3) (mod Start_4 Start)))
   (Start_11 Int (x (- Start_9) (+ Start_6 Start_12) (* Start_11 Start_3) (div Start_2 Start_4) (mod Start Start_13) (abs Start_1)))
   (Start_6 Int (1 (- Start_1) (+ Start_1 Start_8) (div Start_4 Start_3) (mod Start Start_9) (abs Start) (ite StartBool_1 Start_4 Start_4)))
   (StartBool_3 Bool (false (not StartBool_1)))
   (Start_8 Int (2 0 y (- Start_6 Start) (div Start_8 Start_2)))
   (Start_1 Int (2 (div Start_5 Start_1) (mod Start_3 Start_6) (ite StartBool Start_7 Start_2)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (< Start_5 Start_9) (= Start Start_1)))
   (Start_7 Int (1 (* Start_5 Start) (div Start_1 Start_3) (mod Start_7 Start_7) (abs Start_8) (ite StartBool Start_4 Start_6)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool StartBool) (or StartBool_2 StartBool) (< Start_14 Start_9) (<= Start_9 Start_9) (>= Start_12 Start_9) (> Start_4 Start_6)))
   (StartBool_2 Bool (true (or StartBool_1 StartBool_2) (<= Start_4 Start_1) (> Start_6 Start_8)))
   (Start_9 Int (3 2 (+ Start Start_1) (div Start_4 Start_1) (mod Start_4 Start_5) (abs Start)))
   (Start_12 Int (4 (- Start_9 Start_3) (ite StartBool_4 Start_2 Start_14)))
   (Start_5 Int (2 (- Start_8) (- Start_8 Start_8) (+ Start_4 Start_9) (* Start_8 Start_7) (mod Start_6 Start_6) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (div y 3) (* x 5))))

(check-synth)
