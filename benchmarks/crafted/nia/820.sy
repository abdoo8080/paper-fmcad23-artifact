(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_14 Int) (Start_1 Int) (Start_12 Int) (Start_13 Int) (Start_16 Int) (Start_2 Int) (Start_5 Int) (Start_3 Int) (StartBool_3 Bool) (Start_7 Int) (Start_4 Int) (Start_6 Int) (Start_9 Int) (StartBool_1 Bool) (Start_10 Int) (Start_8 Int) (StartBool_2 Bool) (Start_11 Int))
  ((Start Int (3 (- Start_1) (mod Start_1 Start) (abs Start_2) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (false (< Start_4 Start_16) (<= Start_7 Start_8) (= Start_1 Start_12)))
   (Start_15 Int (1 (- Start_3) (+ Start_15 Start_13) (* Start_9 Start_10) (div Start_5 Start_1) (abs Start_1)))
   (Start_14 Int (0 2 (+ Start_1 Start_5) (* Start_13 Start_2) (div Start_7 Start_15) (abs Start_3)))
   (Start_1 Int (x 5 3 0 1 (+ Start_13 Start_10) (* Start_10 Start_8) (div Start_2 Start_14) (mod Start_10 Start_12) (abs Start)))
   (Start_12 Int (x 4 (- Start_10 Start_7) (* Start_13 Start_8) (div Start_5 Start_2) (abs Start_9) (ite StartBool_1 Start_2 Start_2)))
   (Start_13 Int (4 3 2 (- Start_8) (- Start_11 Start_8) (abs Start_8)))
   (Start_16 Int (3 y (div Start_8 Start)))
   (Start_2 Int (1 5 y 4 (- Start) (- Start_11 Start_1) (+ Start Start_12) (* Start_12 Start_5) (div Start_2 Start_5) (ite StartBool_2 Start_1 Start_13)))
   (Start_5 Int (5 (- Start_4 Start) (+ Start_1 Start_1) (* Start Start_5) (mod Start_6 Start) (ite StartBool Start_1 Start)))
   (Start_3 Int (5 (- Start_4) (+ Start_4 Start) (div Start_1 Start_3)))
   (StartBool_3 Bool (true false (not StartBool) (< Start_1 Start_2) (<= Start Start_4) (= Start_3 Start_2) (>= Start_5 Start_4) (> Start_3 Start_5)))
   (Start_7 Int (0 2 (+ Start_3 Start_1) (mod Start_8 Start_3) (abs Start_1)))
   (Start_4 Int (5 (mod Start Start_1)))
   (Start_6 Int (y (* Start_1 Start_1) (mod Start_4 Start_6) (abs Start_2) (ite StartBool_3 Start_7 Start_6)))
   (Start_9 Int (1 x (- Start_7) (+ Start_4 Start_10) (* Start_4 Start_9) (mod Start_4 Start_2) (abs Start_1)))
   (StartBool_1 Bool (false true (not StartBool) (or StartBool_2 StartBool_3) (< Start_1 Start_2) (>= Start_1 Start_3) (> Start_3 Start_1)))
   (Start_10 Int (4 (- Start_2 Start_6) (* Start Start_7) (div Start_5 Start) (abs Start_10) (ite StartBool Start Start_6)))
   (Start_8 Int (y (- Start_7 Start_5) (+ Start_4 Start_9) (* Start_3 Start_3) (div Start Start_6) (ite StartBool_2 Start_1 Start_4)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_3) (< Start_7 Start_11) (<= Start Start_8) (= Start_7 Start_7) (> Start_10 Start_2)))
   (Start_11 Int (3 (- Start_2) (+ Start_3 Start_5) (* Start_7 Start_5) (abs Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod x x) 3)))

(check-synth)
