(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_9 Bool) (StartBool_8 Bool) (StartBool_7 Bool) (StartBool_6 Bool) (Start_11 Int) (Start_12 Int) (Start_1 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_6 Int) (Start_5 Int) (Start_10 Int) (StartBool_2 Bool) (Start_7 Int) (StartBool_4 Bool) (Start_3 Int) (Start_9 Int) (StartBool_3 Bool) (Start_2 Int) (Start_8 Int))
  ((Start Int (x (- Start) (- Start_1 Start) (+ Start Start_2) (* Start_3 Start_3)))
   (StartBool Bool (false (and StartBool_1 StartBool_4) (<= Start_10 Start_5)))
   (StartBool_9 Bool (true false (or StartBool_3 StartBool_1) (< Start Start_4) (= Start_12 Start_5) (>= Start_5 Start_10)))
   (StartBool_8 Bool (false true (not StartBool_3) (or StartBool_3 StartBool_9) (< Start_5 Start_12) (<= Start_2 Start_6) (= Start_10 Start_1) (> Start_3 Start_9)))
   (StartBool_7 Bool (true false (not StartBool_7) (<= Start_8 Start) (>= Start_10 Start_5)))
   (StartBool_6 Bool (false (not StartBool_7) (< Start_8 Start_11) (> Start_4 Start_3)))
   (Start_11 Int (y 3 (+ Start_4 Start_6) (* Start_4 Start_10) (div Start_6 Start_4) (abs Start_11) (ite StartBool_6 Start_3 Start_1)))
   (Start_12 Int (5 (- Start_7 Start_11) (+ Start_6 Start_2) (* Start_8 Start_7) (mod Start_6 Start_5)))
   (Start_1 Int (y (- Start_1) (* Start_3 Start_3) (mod Start_7 Start_8) (ite StartBool Start_8 Start_3)))
   (StartBool_5 Bool (true (and StartBool_5 StartBool_8) (or StartBool_8 StartBool) (< Start_11 Start_10) (>= Start_6 Start_1)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_1) (< Start_2 Start_4) (<= Start_2 Start_2) (>= Start Start_3) (> Start Start_2)))
   (Start_4 Int (3 (+ Start_1 Start) (ite StartBool Start_2 Start_2)))
   (Start_6 Int (0 (- Start_2 Start_6) (div Start Start_2) (mod Start_5 Start_6)))
   (Start_5 Int (2 y (- Start_4 Start_3) (+ Start Start_3) (* Start_3 Start_7) (mod Start_2 Start_5) (abs Start_3)))
   (Start_10 Int (0 (- Start_7) (- Start_2 Start_4) (div Start_3 Start_10) (mod Start Start_8) (abs Start_1) (ite StartBool_2 Start_2 Start_3)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_3) (or StartBool_2 StartBool_3) (< Start_5 Start_7) (>= Start_9 Start_2)))
   (Start_7 Int (1 (- Start) (div Start Start_4) (abs Start_8) (ite StartBool_2 Start_8 Start_4)))
   (StartBool_4 Bool (false true (or StartBool_5 StartBool_1) (< Start_2 Start_3) (<= Start_6 Start_11) (> Start_12 Start_4)))
   (Start_3 Int (1 (- Start_3) (+ Start_2 Start_1) (* Start_2 Start_1) (mod Start_2 Start_2) (abs Start_1) (ite StartBool_1 Start_1 Start_3)))
   (Start_9 Int (x 3 0 (div Start_8 Start_6)))
   (StartBool_3 Bool (true false (and StartBool StartBool) (= Start_8 Start_8) (>= Start_4 Start_8) (> Start_4 Start_8)))
   (Start_2 Int (5 1 (- Start_1 Start_5) (+ Start_3 Start_2) (div Start_2 Start_4) (mod Start_6 Start_1) (abs Start_4)))
   (Start_8 Int (3 1 (- Start_1) (- Start_9 Start_6) (mod Start_1 Start_5) (ite StartBool Start_10 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* y (+ (mod 2 0) (- 3)))))

(check-synth)
