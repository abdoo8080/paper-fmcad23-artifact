(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (StartBool_3 Bool) (Start_1 Int) (Start_3 Int) (Start_2 Int) (Start_4 Int) (StartBool_1 Bool) (Start_5 Int) (Start_7 Int) (Start_6 Int) (Start_8 Int) (Start_9 Int) (StartBool_2 Bool))
  ((Start Int (0 4 y (* Start Start) (div Start Start_1)))
   (StartBool Bool (true (or StartBool StartBool_3) (< Start_2 Start_4) (<= Start_1 Start_2) (>= Start_2 Start_7) (> Start_8 Start_4)))
   (Start_10 Int (y (- Start_10) (+ Start_2 Start_4) (* Start_5 Start_8) (div Start_5 Start_8) (ite StartBool_2 Start_5 Start_1)))
   (StartBool_3 Bool (true (or StartBool_2 StartBool) (<= Start_6 Start_9) (>= Start_10 Start_5)))
   (Start_1 Int (4 (- Start_1) (- Start_2 Start_2) (+ Start Start_1) (* Start_3 Start_3) (div Start Start_2) (abs Start_3)))
   (Start_3 Int (1 (- Start_4) (+ Start_1 Start_1) (* Start_1 Start_4) (abs Start_2) (ite StartBool_1 Start_2 Start_3)))
   (Start_2 Int (0 (- Start_8) (+ Start Start) (mod Start Start_9) (ite StartBool_2 Start_9 Start_4)))
   (Start_4 Int (3 (- Start Start_3) (+ Start_5 Start_6) (div Start_6 Start_3)))
   (StartBool_1 Bool (false true (not StartBool_1) (= Start_3 Start_3) (>= Start_2 Start_3)))
   (Start_5 Int (x 5 (- Start_7) (- Start_8 Start_6) (mod Start_4 Start_4)))
   (Start_7 Int (y (- Start_7) (+ Start_8 Start_3) (* Start_4 Start) (abs Start_7) (ite StartBool_1 Start_3 Start_8)))
   (Start_6 Int (x 4 (- Start_4) (- Start_3 Start_1) (mod Start_1 Start_2)))
   (Start_8 Int (x y 5 (- Start_3) (- Start_6 Start_8) (* Start_7 Start_1) (div Start_4 Start_9) (abs Start_5) (ite StartBool Start_7 Start_3)))
   (Start_9 Int (4 y x 2 1 3 (- Start_8) (abs Start_8)))
   (StartBool_2 Bool (false (<= Start_2 Start_2) (= Start_5 Start_4) (>= Start_8 Start_9) (> Start_9 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (div y y) x)))

(check-synth)
