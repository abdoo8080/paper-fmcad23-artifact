(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_13 Int) (StartBool_1 Bool) (Start_15 Int) (StartBool_3 Bool) (Start_2 Int) (Start_1 Int) (StartBool_2 Bool) (Start_3 Int) (Start_4 Int) (StartBool_5 Bool) (Start_10 Int) (Start_6 Int) (Start_8 Int) (Start_5 Int) (Start_7 Int) (Start_9 Int) (Start_12 Int) (StartBool_4 Bool) (Start_11 Int))
  ((Start Int (2 (- Start) (- Start Start) (* Start Start) (div Start Start) (mod Start_1 Start_2)))
   (StartBool Bool (true (or StartBool_5 StartBool_2) (> Start_12 Start_6)))
   (Start_14 Int (4 1 (- Start_14) (- Start_14 Start_6) (+ Start_2 Start_15) (* Start_2 Start) (mod Start_9 Start_10) (abs Start_2) (ite StartBool_1 Start_11 Start_3)))
   (Start_13 Int (4 (* Start_14 Start_8) (div Start_11 Start_9) (abs Start_9)))
   (StartBool_1 Bool (false (and StartBool_4 StartBool_2) (or StartBool_3 StartBool_4) (<= Start Start_12) (> Start_13 Start_10)))
   (Start_15 Int (0 2 (+ Start Start_3) (* Start_7 Start_1) (div Start_14 Start_4) (mod Start_12 Start_2)))
   (StartBool_3 Bool (true false (not StartBool_1) (<= Start_6 Start_12) (= Start Start_5) (>= Start_1 Start_3) (> Start_4 Start_8)))
   (Start_2 Int (1 (- Start_3 Start_2) (+ Start Start_3) (* Start Start) (div Start Start_2) (mod Start_1 Start)))
   (Start_1 Int (5 3 0 4 (div Start_8 Start_13) (mod Start_5 Start_10) (ite StartBool_1 Start_9 Start_13)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool) (>= Start Start_10) (> Start_7 Start_2)))
   (Start_3 Int (y 2 5 (- Start Start_4) (ite StartBool Start_4 Start)))
   (Start_4 Int (5 0 3 (+ Start_4 Start_2) (mod Start_1 Start) (ite StartBool_1 Start_5 Start_3)))
   (StartBool_5 Bool (false (and StartBool_3 StartBool_4) (or StartBool_2 StartBool_2) (< Start_13 Start_15) (= Start_4 Start_4) (>= Start_15 Start_3)))
   (Start_10 Int (4 (- Start_4 Start_9) (div Start_7 Start_2)))
   (Start_6 Int (5 2 4 0 (- Start Start_2) (* Start_1 Start_6) (mod Start_7 Start_2) (abs Start_4) (ite StartBool Start_5 Start_1)))
   (Start_8 Int (4 y 3 (- Start_2 Start_4) (+ Start_5 Start_3) (div Start_1 Start) (abs Start_12) (ite StartBool_2 Start_2 Start_6)))
   (Start_5 Int (3 2 (- Start_6) (+ Start_1 Start_2)))
   (Start_7 Int (2 3 y (- Start_3) (* Start_6 Start_7) (div Start_2 Start_8) (mod Start_2 Start_5) (abs Start_9) (ite StartBool_2 Start_8 Start_1)))
   (Start_9 Int (4 (- Start_3) (div Start_6 Start_2) (mod Start_7 Start_7) (ite StartBool_1 Start_11 Start_9)))
   (Start_12 Int (x 0 (+ Start Start_3) (* Start_4 Start_8) (div Start_7 Start_12) (abs Start_2) (ite StartBool_3 Start Start_9)))
   (StartBool_4 Bool (false true (and StartBool_1 StartBool_5) (or StartBool_4 StartBool_4) (< Start_5 Start_1) (= Start_10 Start_2) (> Start_13 Start_6)))
   (Start_11 Int (x (- Start_9 Start_11) (* Start_1 Start_12) (mod Start_1 Start_10) (abs Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- x) (div y (* 4 y)))))

(check-synth)
