(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_11 Bool) (Start_3 Int) (Start_10 Int) (Start_14 Int) (Start_11 Int) (Start_4 Int) (StartBool_3 Bool) (StartBool_9 Bool) (StartBool_10 Bool) (Start_2 Int) (StartBool_5 Bool) (Start_5 Int) (StartBool_2 Bool) (StartBool_6 Bool) (StartBool_7 Bool) (StartBool_1 Bool) (Start_12 Int) (Start_7 Int) (StartBool_4 Bool) (Start_8 Int) (Start_13 Int) (Start_9 Int) (Start_6 Int) (StartBool_8 Bool))
  ((Start Int (1 (- Start Start) (* Start Start_1) (div Start_1 Start) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true false (and StartBool_1 StartBool_7) (< Start_10 Start_6) (<= Start_6 Start_10) (> Start_3 Start_13)))
   (Start_1 Int (x (+ Start_5 Start_10) (div Start_12 Start_9) (abs Start_12)))
   (StartBool_11 Bool (false (and StartBool_4 StartBool_5) (or StartBool_11 StartBool_8) (= Start_7 Start_9)))
   (Start_3 Int (5 (- Start_11) (- Start_5 Start_2) (+ Start_12 Start_5) (* Start_6 Start_10)))
   (Start_10 Int (0 y (- Start_1) (- Start_3 Start_5) (* Start_1 Start_8) (div Start_7 Start_1) (mod Start_8 Start_8)))
   (Start_14 Int (0 2 (- Start_3 Start_14) (div Start_13 Start_11) (mod Start Start_12) (abs Start_3) (ite StartBool_9 Start_8 Start_5)))
   (Start_11 Int (5 2 y x (- Start_1) (* Start_13 Start_5) (div Start_1 Start_9) (abs Start_10) (ite StartBool_4 Start_3 Start_1)))
   (Start_4 Int (4 1 (+ Start_10 Start) (abs Start_3)))
   (StartBool_3 Bool (false true (or StartBool_7 StartBool_10) (< Start Start_6) (> Start_2 Start_1)))
   (StartBool_9 Bool (true false (< Start_9 Start)))
   (StartBool_10 Bool (false (not StartBool_5) (or StartBool StartBool_2) (< Start_9 Start_1) (= Start_1 Start_9) (> Start_3 Start_3)))
   (Start_2 Int (3 x 1 4 2 5 y (- Start_3 Start_1) (+ Start_2 Start_4) (* Start_4 Start_4) (mod Start_3 Start_3) (abs Start_2) (ite StartBool_2 Start_2 Start_4)))
   (StartBool_5 Bool (false (not StartBool_2) (and StartBool_6 StartBool_6) (>= Start_1 Start)))
   (Start_5 Int (5 2 (- Start_1) (* Start_6 Start_4) (div Start_2 Start_7) (mod Start_2 Start_4) (abs Start_7) (ite StartBool_3 Start_2 Start_8)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool StartBool_3) (or StartBool_4 StartBool_5)))
   (StartBool_6 Bool (true false (and StartBool_6 StartBool_7) (<= Start_4 Start_2) (>= Start_3 Start_2)))
   (StartBool_7 Bool (false true (or StartBool_5 StartBool_7) (< Start_3 Start_3) (= Start_2 Start_2) (>= Start Start_4) (> Start_2 Start_1)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_2) (< Start_11 Start_14) (= Start_14 Start_7) (>= Start_9 Start_6)))
   (Start_12 Int (x 5 0 (- Start_10) (- Start_5 Start_5) (mod Start_4 Start_9) (abs Start_10) (ite StartBool_4 Start_1 Start_4)))
   (Start_7 Int (1 (- Start_3)))
   (StartBool_4 Bool (true false (and StartBool_5 StartBool_3) (or StartBool_8 StartBool_3) (= Start_3 Start_1) (>= Start_1 Start_5) (> Start Start_5)))
   (Start_8 Int (2 5 0 (+ Start_2 Start) (mod Start_2 Start_3)))
   (Start_13 Int (4 2 (- Start) (- Start_6 Start_10) (* Start_5 Start_14) (abs Start_11) (ite StartBool_11 Start_10 Start_6)))
   (Start_9 Int (3 (+ Start Start_3) (div Start_9 Start_8) (mod Start_7 Start_1)))
   (Start_6 Int (3 (+ Start Start_8) (mod Start Start_8) (ite StartBool_7 Start_6 Start_8)))
   (StartBool_8 Bool (true (not StartBool_1) (and StartBool_9 StartBool_10) (< Start_9 Start_1) (<= Start_4 Start_5) (= Start_5 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* (- y) 3))))

(check-synth)
