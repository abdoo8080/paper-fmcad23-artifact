(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_16 Int) (Start_15 Int) (Start_14 Int) (Start_12 Int) (StartBool_2 Bool) (Start_4 Int) (Start_11 Int) (Start_1 Int) (Start_8 Int) (Start_7 Int) (Start_2 Int) (Start_6 Int) (StartBool_4 Bool) (Start_10 Int) (StartBool_1 Bool) (Start_13 Int) (Start_3 Int) (Start_5 Int) (Start_9 Int))
  ((Start Int (1))
   (StartBool Bool (true (not StartBool_1) (or StartBool_2 StartBool_3) (< Start_1 Start) (<= Start Start) (= Start_1 Start) (>= Start_1 Start_1)))
   (StartBool_3 Bool (false (not StartBool) (or StartBool_4 StartBool_1) (< Start_14 Start_8) (= Start_16 Start_15) (> Start_4 Start_6)))
   (Start_16 Int (5 0 1 3 (mod Start_8 Start_9) (abs Start_10) (ite StartBool_3 Start_14 Start_12)))
   (Start_15 Int (4 0 3 5 (- Start_10 Start_3) (+ Start_1 Start_10) (* Start_13 Start_14) (div Start_3 Start_5) (ite StartBool_4 Start Start)))
   (Start_14 Int (0 2 x y 1 3 (- Start_9 Start_15) (abs Start_14)))
   (Start_12 Int (3 (+ Start_3 Start_4) (* Start_12 Start_10) (mod Start_13 Start_6) (ite StartBool_2 Start_14 Start_11)))
   (StartBool_2 Bool (true false (and StartBool_4 StartBool_4) (<= Start Start_3)))
   (Start_4 Int (1 y (- Start_3) (- Start_2 Start_4) (+ Start_1 Start_5) (* Start_3 Start) (div Start_2 Start_1) (mod Start_5 Start_3)))
   (Start_11 Int (y 5 (+ Start_4 Start_10) (mod Start_9 Start_1)))
   (Start_1 Int (0 (* Start_1 Start) (mod Start_2 Start_1)))
   (Start_8 Int (5 4 (- Start_7) (- Start_8 Start_7) (+ Start_2 Start) (mod Start_7 Start)))
   (Start_7 Int (x (- Start_8) (- Start_3 Start) (mod Start_2 Start_7) (abs Start_7) (ite StartBool_1 Start_2 Start_1)))
   (Start_2 Int (y 4 5 1 (- Start_1 Start) (+ Start_2 Start_3) (div Start_4 Start_3) (mod Start Start_2)))
   (Start_6 Int (4 (- Start_8) (- Start_6 Start_3) (+ Start Start_9) (* Start_3 Start_10) (div Start_1 Start_10) (abs Start_9) (ite StartBool_4 Start_8 Start_2)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool) (or StartBool_2 StartBool_4) (<= Start_6 Start_9) (= Start_9 Start_8) (> Start_11 Start)))
   (Start_10 Int (5 x (- Start_2 Start_7) (* Start_8 Start_7) (div Start_3 Start_6) (ite StartBool_4 Start_8 Start_4)))
   (StartBool_1 Bool (true false (and StartBool StartBool_1) (< Start_13 Start_7) (<= Start_16 Start_1) (= Start_7 Start_12) (> Start_9 Start_10)))
   (Start_13 Int (2 4 (- Start_3) (- Start_16 Start_13) (* Start_15 Start_8) (div Start_3 Start_6)))
   (Start_3 Int (5 y 1 (- Start_11) (- Start_12 Start_2)))
   (Start_5 Int (2 4 (- Start_6) (- Start_4 Start_1) (* Start_3 Start_1) (div Start_4 Start_2) (abs Start_7) (ite StartBool_2 Start_1 Start_5)))
   (Start_9 Int (1 3 0 (div Start_6 Start_9) (mod Start_10 Start_1) (ite StartBool_2 Start_3 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 4)))

(check-synth)
