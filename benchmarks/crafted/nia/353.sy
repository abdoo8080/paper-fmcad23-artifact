(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_15 Int) (Start_2 Int) (Start_3 Int) (StartBool_1 Bool) (Start_4 Int) (Start_5 Int) (Start_6 Int) (StartBool_4 Bool) (Start_14 Int) (Start_7 Int) (Start_9 Int) (StartBool_3 Bool) (Start_10 Int) (Start_13 Int) (StartBool_2 Bool) (Start_11 Int) (Start_8 Int) (Start_12 Int))
  ((Start Int (y (- Start Start_1) (* Start Start_1) (abs Start_2) (ite StartBool_1 Start Start)))
   (StartBool Bool (true (not StartBool) (or StartBool_3 StartBool) (< Start_3 Start_9) (>= Start Start_1) (> Start_3 Start_11)))
   (Start_1 Int (x (- Start_11) (+ Start_4 Start_14) (div Start_6 Start_9) (abs Start_15)))
   (Start_15 Int (2 3 y 4 (- Start_13) (* Start_1 Start) (mod Start_14 Start_2) (abs Start_2)))
   (Start_2 Int (y (- Start_15 Start_4) (+ Start_9 Start_14) (div Start_5 Start_4) (mod Start_6 Start_10)))
   (Start_3 Int (4 (+ Start_1 Start_1) (* Start_3 Start_4) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_1 Bool (true (not StartBool_1) (or StartBool StartBool_2) (< Start Start) (<= Start_2 Start_1) (= Start_3 Start_1) (>= Start_3 Start_2)))
   (Start_4 Int (4 (- Start_1 Start_3) (* Start_3 Start_3) (div Start_3 Start_4) (mod Start_2 Start_5)))
   (Start_5 Int (1 4 (- Start_3 Start_4) (mod Start_6 Start_1) (ite StartBool Start_1 Start_6)))
   (Start_6 Int (2 (- Start) (- Start_2 Start_1) (+ Start_2 Start_7) (* Start_6 Start_3) (div Start_4 Start_4) (mod Start_1 Start_1) (abs Start_4) (ite StartBool_3 Start_2 Start_2)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_2) (= Start_6 Start_9) (> Start_10 Start_11)))
   (Start_14 Int (5 (- Start_4 Start_14) (* Start_2 Start_1) (div Start Start_7)))
   (Start_7 Int (3 (- Start_9 Start_5) (+ Start_3 Start_6) (div Start_1 Start_12) (mod Start Start_10) (abs Start_14) (ite StartBool Start_13 Start_2)))
   (Start_9 Int (3 0 (- Start_13) (div Start_1 Start_8) (mod Start_7 Start_6)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_4 StartBool_1) (= Start_8 Start_3) (>= Start_6 Start) (> Start_4 Start_8)))
   (Start_10 Int (x (- Start_1) (abs Start_1) (ite StartBool Start_12 Start_12)))
   (Start_13 Int (5 y 0 2 (- Start_10) (+ Start_8 Start_3) (div Start_6 Start_7) (mod Start_2 Start_3) (abs Start_12)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_4) (< Start_5 Start_7) (> Start_4 Start_3)))
   (Start_11 Int (3 (- Start_4) (- Start_10 Start_10) (* Start_10 Start_8) (ite StartBool_3 Start_7 Start_11)))
   (Start_8 Int (1 (- Start_5) (mod Start_6 Start_8) (abs Start_3)))
   (Start_12 Int (0 (- Start_10) (- Start_7 Start_8) (* Start_4 Start_13) (div Start_8 Start_13) (ite StartBool_3 Start_12 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (* 5 5) 0)))

(check-synth)
