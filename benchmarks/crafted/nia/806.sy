(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_24 Int) (StartBool_7 Bool) (Start_22 Int) (StartBool_2 Bool) (Start_18 Int) (Start_12 Int) (Start_23 Int) (Start_8 Int) (Start_9 Int) (Start_2 Int) (Start_4 Int) (Start_10 Int) (Start_20 Int) (StartBool_4 Bool) (Start_16 Int) (Start_7 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_5 Int) (Start_19 Int) (StartBool_6 Bool) (Start_1 Int) (Start_3 Int) (StartBool_5 Bool) (Start_6 Int) (Start_17 Int) (Start_14 Int) (Start_11 Int) (Start_13 Int) (Start_15 Int) (Start_21 Int))
  ((Start Int (4 1 x (- Start Start_1) (* Start_1 Start_2) (mod Start_3 Start_1) (ite StartBool Start_2 Start)))
   (StartBool Bool (true false (and StartBool StartBool_7) (or StartBool_4 StartBool_6) (< Start_17 Start_13) (<= Start_6 Start_21) (= Start_22 Start_23)))
   (Start_24 Int (y (+ Start_9 Start_4) (* Start_14 Start_5) (mod Start_15 Start_22) (abs Start_15) (ite StartBool_2 Start_12 Start_2)))
   (StartBool_7 Bool (true false (< Start_2 Start_7) (= Start_13 Start_24) (>= Start_12 Start_15)))
   (Start_22 Int (x (- Start_17) (- Start_19 Start_12) (+ Start_2 Start_16) (mod Start_14 Start_13)))
   (StartBool_2 Bool (true (or StartBool_5 StartBool_3) (< Start_3 Start_8) (>= Start Start) (> Start_3 Start_8)))
   (Start_18 Int (2 1 3 (- Start_1 Start_7) (+ Start_12 Start_3) (* Start_11 Start_1) (div Start_12 Start_6)))
   (Start_12 Int (3 2 (- Start_6) (- Start_4 Start_3) (* Start_18 Start_17) (mod Start_18 Start_18) (abs Start_20) (ite StartBool_5 Start_17 Start_11)))
   (Start_23 Int (2 x 0 (* Start_3 Start_15) (div Start_7 Start_15) (abs Start_17) (ite StartBool_7 Start_10 Start_20)))
   (Start_8 Int (y (+ Start_7 Start_10) (* Start_3 Start_5) (div Start_2 Start_7) (mod Start_5 Start_6)))
   (Start_9 Int (3 y 0 5 (- Start_3 Start_10) (div Start_9 Start_5) (mod Start_7 Start_1)))
   (Start_2 Int (0 2 y 5 3 x 4 1 (* Start_2 Start_3) (mod Start_3 Start_2)))
   (Start_4 Int (5 (- Start_2 Start_5) (+ Start_6 Start_1) (div Start_1 Start_2) (mod Start_5 Start_5) (ite StartBool_2 Start_7 Start_2)))
   (Start_10 Int (5 (- Start_3) (- Start_5 Start_8) (+ Start_10 Start_2) (mod Start_10 Start_3)))
   (Start_20 Int (0 4 (- Start_19 Start_21) (+ Start_21 Start_11) (* Start_5 Start_13) (div Start_13 Start_17)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool StartBool_4) (< Start_5 Start_3) (<= Start_10 Start_4) (>= Start_3 Start_1)))
   (Start_16 Int (0 x (- Start_12) (+ Start_17 Start_12) (mod Start_9 Start_16) (ite StartBool_1 Start_18 Start_8)))
   (Start_7 Int (5 (- Start_8) (+ Start_3 Start_5) (* Start_1 Start_9) (div Start_5 Start_2) (abs Start_8) (ite StartBool_3 Start_5 Start_6)))
   (StartBool_1 Bool (true (<= Start_2 Start_3)))
   (StartBool_3 Bool (false (not StartBool_4) (or StartBool_3 StartBool_1) (< Start_9 Start_7) (> Start Start_8)))
   (Start_5 Int (4 x (- Start_5 Start_14) (div Start_10 Start_14) (mod Start_13 Start) (abs Start_15) (ite StartBool_2 Start_4 Start_5)))
   (Start_19 Int (y (- Start) (abs Start_12) (ite StartBool_2 Start_11 Start_10)))
   (StartBool_6 Bool (true (not StartBool_6) (and StartBool_4 StartBool_2) (<= Start_18 Start_16) (>= Start_14 Start_11)))
   (Start_1 Int (4 x (- Start_4) (- Start_2 Start_3) (+ Start Start) (mod Start Start_1) (ite StartBool_1 Start_2 Start_3)))
   (Start_3 Int (y 4 3 1 0 2 (- Start_1) (+ Start_1 Start_2) (* Start_1 Start_2) (abs Start_2) (ite StartBool Start_3 Start_1)))
   (StartBool_5 Bool (false (not StartBool_4) (= Start_1 Start_1) (>= Start_11 Start_4)))
   (Start_6 Int (5 (- Start_13 Start_16) (div Start_7 Start_3) (ite StartBool_3 Start_19 Start_5)))
   (Start_17 Int (4 y 0 (+ Start_17 Start_16) (div Start_19 Start_13) (mod Start_10 Start_5)))
   (Start_14 Int (2 5 (- Start_6 Start_9) (+ Start_1 Start_6) (mod Start_6 Start_12)))
   (Start_11 Int (y (div Start_2 Start_3) (mod Start_2 Start_12) (ite StartBool_6 Start_13 Start_14)))
   (Start_13 Int (3 0 (- Start_15 Start_6) (* Start_16 Start_15) (mod Start_14 Start_1) (abs Start_15) (ite StartBool_4 Start_5 Start_7)))
   (Start_15 Int (x (mod Start_11 Start_19)))
   (Start_21 Int (5 (- Start_14) (- Start_19 Start_1) (+ Start_11 Start_7) (mod Start_6 Start_18)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 (- x 1))))

(check-synth)
