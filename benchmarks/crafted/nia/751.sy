(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_11 Int) (StartBool_5 Bool) (StartBool_2 Bool) (Start_4 Int) (Start_5 Int) (Start_13 Int) (StartBool_4 Bool) (Start_7 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_9 Int) (Start_2 Int) (Start_6 Int) (Start_8 Int) (Start_10 Int) (Start_12 Int) (Start_3 Int))
  ((Start Int (2 4 1 (- Start_1) (* Start_1 Start) (div Start_1 Start) (ite StartBool Start_2 Start)))
   (StartBool Bool (false (not StartBool_2) (= Start_6 Start_8) (>= Start_13 Start)))
   (Start_1 Int (5 y 3 (- Start_9 Start_8) (+ Start_2 Start_2) (div Start_13 Start_3) (abs Start_4)))
   (Start_11 Int (5 2 (- Start_9 Start_10) (ite StartBool_4 Start_10 Start_2)))
   (StartBool_5 Bool (true (not StartBool_3) (and StartBool_3 StartBool_1) (or StartBool_2 StartBool_4) (> Start_3 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool StartBool_1) (< Start_3 Start) (= Start_5 Start_5) (>= Start_4 Start_4)))
   (Start_4 Int (y (+ Start_4 Start_7) (* Start Start_4) (div Start_5 Start_8)))
   (Start_5 Int (x 2 (- Start_6) (* Start_6 Start_3) (div Start_7 Start) (abs Start_4) (ite StartBool_2 Start_7 Start_1)))
   (Start_13 Int (y 0 x (- Start_13) (div Start_8 Start_8)))
   (StartBool_4 Bool (false true (and StartBool_2 StartBool_4) (or StartBool_3 StartBool_5) (< Start_8 Start_11) (<= Start_9 Start_10) (>= Start_6 Start_3)))
   (Start_7 Int (2 1 x 5 0 y 3 (- Start) (* Start_3 Start_1) (ite StartBool_3 Start_2 Start_5)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_2) (> Start_2 Start_3)))
   (StartBool_3 Bool (false (< Start_2 Start_3) (<= Start_3 Start_3) (= Start_7 Start) (> Start_2 Start_7)))
   (Start_9 Int (3 (- Start_2) (- Start_2 Start_10) (+ Start_7 Start_2) (mod Start_9 Start_5) (ite StartBool_1 Start_6 Start_4)))
   (Start_2 Int (4 0 (- Start) (- Start_2 Start) (+ Start_3 Start) (div Start_4 Start_1) (mod Start_1 Start_1) (abs Start_4) (ite StartBool_1 Start_1 Start_3)))
   (Start_6 Int (1 3 4 (- Start_3) (* Start_1 Start_2) (div Start_2 Start_3) (mod Start_8 Start_6) (abs Start_4) (ite StartBool_3 Start Start_9)))
   (Start_8 Int (0 (- Start_7 Start_7) (* Start_9 Start_4) (div Start_5 Start) (mod Start_1 Start_9) (abs Start)))
   (Start_10 Int (4 1 2 x 5 (- Start_4 Start) (div Start_2 Start_1) (mod Start_7 Start_9)))
   (Start_12 Int (3 (* Start_5 Start) (abs Start_1) (ite StartBool_4 Start Start_1)))
   (Start_3 Int (4 2 (- Start_5) (+ Start_11 Start_11) (* Start_3 Start_1) (div Start_3 Start_1) (abs Start_12) (ite StartBool Start_3 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (* (- 3 y) 2) y)))

(check-synth)
