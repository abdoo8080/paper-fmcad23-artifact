(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_9 Int) (StartBool_3 Bool) (Start_2 Int) (Start_3 Int) (Start_5 Int) (Start_7 Int) (Start_8 Int) (StartBool_2 Bool) (Start_4 Int) (Start_6 Int) (Start_13 Int) (Start_1 Int) (Start_11 Int) (Start_14 Int) (Start_10 Int) (StartBool_4 Bool) (StartBool_1 Bool))
  ((Start Int (0 (+ Start_1 Start) (* Start_2 Start_2) (div Start_1 Start_1)))
   (StartBool Bool (false true (= Start_5 Start_3)))
   (Start_12 Int (1 (* Start_2 Start_9) (div Start_4 Start_1) (mod Start_4 Start_4) (abs Start_10) (ite StartBool_4 Start_8 Start_3)))
   (Start_9 Int (0 (- Start_9 Start_8) (abs Start_9) (ite StartBool_3 Start_3 Start_12)))
   (StartBool_3 Bool (false true (< Start_2 Start_11)))
   (Start_2 Int (1 (- Start_3 Start_1) (+ Start Start_3) (* Start_3 Start_2) (div Start_1 Start) (abs Start_2) (ite StartBool Start_1 Start)))
   (Start_3 Int (x (- Start_4 Start_1) (div Start Start_1) (abs Start_5)))
   (Start_5 Int (2 y 1 4 5 (+ Start Start_5)))
   (Start_7 Int (2 (- Start_1 Start_7) (* Start_5 Start_6) (mod Start_8 Start_7) (abs Start_9) (ite StartBool Start_9 Start_10)))
   (Start_8 Int (5 (+ Start Start_7) (* Start_13 Start_11) (div Start_12 Start) (mod Start_12 Start_2) (abs Start_13)))
   (StartBool_2 Bool (false true (not StartBool_3) (or StartBool StartBool_4) (<= Start_10 Start_9) (> Start_8 Start_11)))
   (Start_4 Int (0 1 (- Start_2 Start_5) (+ Start_2 Start_3) (mod Start_1 Start_6)))
   (Start_6 Int (y (div Start_6 Start_1) (mod Start_1 Start_6) (abs Start_1)))
   (Start_13 Int (0 1 (div Start_3 Start_14)))
   (Start_1 Int (5 3 1 (+ Start_2 Start_2) (div Start_6 Start_7) (mod Start Start_6) (ite StartBool Start_1 Start_1)))
   (Start_11 Int (3 (- Start_9) (abs Start_4) (ite StartBool_2 Start Start_6)))
   (Start_14 Int (4 5 (- Start_5) (- Start_8 Start_13) (* Start_12 Start_2) (mod Start_6 Start_11)))
   (Start_10 Int (2 (- Start_3 Start_1) (+ Start_5 Start_7) (* Start_2 Start_3) (div Start_9 Start_3) (mod Start_4 Start_2) (ite StartBool_1 Start_10 Start_5)))
   (StartBool_4 Bool (true (not StartBool_1) (< Start Start_8) (<= Start_10 Start_9) (>= Start Start_6)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_2) (< Start_1 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (* 3 4) 2)))

(check-synth)
