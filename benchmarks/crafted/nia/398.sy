(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_8 Int) (StartBool_5 Bool) (StartBool_6 Bool) (StartBool_2 Bool) (Start_9 Int) (Start_16 Int) (Start_12 Int) (Start_14 Int) (Start_3 Int) (StartBool_7 Bool) (Start_4 Int) (Start_11 Int) (Start_15 Int) (Start_17 Int) (Start_5 Int) (StartBool_4 Bool) (Start_13 Int) (Start_7 Int) (StartBool_1 Bool) (Start_6 Int) (Start_10 Int) (StartBool_3 Bool))
  ((Start Int (y 1 x (+ Start Start_1) (div Start_1 Start_2) (mod Start_1 Start) (abs Start_1) (ite StartBool Start Start_3)))
   (StartBool Bool (true false (not StartBool_3) (or StartBool_1 StartBool_7) (< Start_17 Start_6) (<= Start_6 Start_2) (= Start_3 Start_5)))
   (Start_1 Int (y (div Start_17 Start_1) (abs Start_1) (ite StartBool_4 Start_7 Start_15)))
   (Start_2 Int (y (- Start_7) (* Start_7 Start_12) (mod Start_3 Start_11) (abs Start_15) (ite StartBool_5 Start_8 Start_7)))
   (Start_8 Int (y (- Start_4 Start_8) (ite StartBool Start_4 Start_17)))
   (StartBool_5 Bool (false true (not StartBool_4) (and StartBool StartBool_3) (or StartBool_4 StartBool_5) (<= Start_15 Start_9)))
   (StartBool_6 Bool (false (not StartBool_6) (and StartBool_2 StartBool_6) (or StartBool_5 StartBool_2) (<= Start_3 Start_17) (>= Start_3 Start_11)))
   (StartBool_2 Bool (true (not StartBool_5) (or StartBool StartBool_6) (= Start_4 Start_8)))
   (Start_9 Int (2 4 x y (- Start_9 Start_15) (+ Start Start_14) (div Start_10 Start_4) (mod Start_4 Start_16) (ite StartBool_7 Start_9 Start_4)))
   (Start_16 Int (2 0 4 y 1 (- Start_5) (- Start_2 Start) (mod Start_12 Start_10)))
   (Start_12 Int (x (- Start_3) (+ Start_4 Start_13) (* Start_14 Start_15) (div Start_1 Start_2) (mod Start_4 Start_3)))
   (Start_14 Int (y (- Start_4) (- Start_13 Start_15) (abs Start_4) (ite StartBool Start_4 Start_10)))
   (Start_3 Int (4 3 x (div Start Start_2) (mod Start_1 Start_4) (abs Start_3)))
   (StartBool_7 Bool (false true (and StartBool_4 StartBool_7) (= Start_9 Start_4) (>= Start_12 Start_11) (> Start Start_11)))
   (Start_4 Int (y (- Start_4 Start_5) (* Start_5 Start_2) (mod Start Start)))
   (Start_11 Int (y (- Start_11 Start_15) (+ Start_2 Start_5) (* Start_16 Start_1) (div Start_6 Start_5) (mod Start_8 Start_12) (abs Start_7) (ite StartBool_4 Start Start_1)))
   (Start_15 Int (y (- Start_1) (- Start_9 Start) (* Start_16 Start_16) (abs Start_16) (ite StartBool_3 Start_6 Start_17)))
   (Start_17 Int (2 (- Start_9 Start_6) (div Start_15 Start_15) (mod Start_12 Start_4)))
   (Start_5 Int (0 1 3 x (- Start_4) (* Start_4 Start_6) (mod Start_5 Start_6) (ite StartBool Start_7 Start_6)))
   (StartBool_4 Bool (true false (and StartBool_1 StartBool_3) (<= Start Start_4)))
   (Start_13 Int (5 (- Start_4) (- Start_4 Start_2) (div Start_1 Start_6) (abs Start_12) (ite StartBool_3 Start_9 Start_3)))
   (Start_7 Int (0 (- Start_1) (div Start_4 Start_2)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_2) (<= Start_10 Start_2)))
   (Start_6 Int (0 (- Start_4) (- Start_8 Start_6) (+ Start_3 Start_9) (* Start_5 Start_5) (div Start_7 Start_9) (abs Start_4) (ite StartBool_1 Start_6 Start_4)))
   (Start_10 Int (y 5 1 0 x 2 3 4 (- Start_3) (+ Start_6 Start_6) (* Start_11 Start_1) (div Start Start_2) (mod Start_9 Start_8) (abs Start_8) (ite StartBool_3 Start_2 Start_4)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool) (= Start_4 Start_1) (>= Start_12 Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (div (- x) 0) 5)))

(check-synth)
