(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_16 Int) (Start_8 Int) (Start_10 Int) (Start_13 Int) (Start_15 Int) (Start_14 Int) (Start_4 Int) (Start_3 Int) (StartBool_3 Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_5 Int) (Start_6 Int) (Start_2 Int) (Start_7 Int) (Start_1 Int) (StartBool_1 Bool) (Start_11 Int) (Start_9 Int) (StartBool_6 Bool) (StartBool_2 Bool) (Start_12 Int))
  ((Start Int (1 (div Start_1 Start_1) (mod Start Start_2) (abs Start)))
   (StartBool Bool (false true (or StartBool_5 StartBool) (<= Start_12 Start_6) (> Start_1 Start_7)))
   (Start_17 Int (5 (* Start_3 Start_1) (abs Start_1)))
   (Start_16 Int (0 (- Start) (+ Start_10 Start_10) (* Start_7 Start_6) (ite StartBool_1 Start_12 Start_17)))
   (Start_8 Int (y x (+ Start_7 Start_6) (* Start_12 Start_4) (ite StartBool_1 Start_16 Start_5)))
   (Start_10 Int (3 0 x 5 1 4 y (div Start_2 Start_11) (abs Start) (ite StartBool_4 Start_8 Start_2)))
   (Start_13 Int (x (- Start_3) (- Start_8 Start_14) (+ Start_15 Start_12) (* Start_3 Start_6) (div Start_5 Start_8) (mod Start_3 Start_10)))
   (Start_15 Int (5 2 (- Start_10) (- Start_3 Start_7) (+ Start_10 Start_9) (* Start_5 Start_7) (div Start_8 Start_4) (abs Start_9) (ite StartBool_5 Start_8 Start_5)))
   (Start_14 Int (5 3 0 (- Start_5) (+ Start_15 Start_3) (div Start_5 Start_13) (mod Start_11 Start_10)))
   (Start_4 Int (2 x (- Start_16) (- Start_5 Start_17) (+ Start_8 Start_15) (* Start_6 Start) (div Start_16 Start_4) (abs Start_13)))
   (Start_3 Int (2 1 (- Start_3) (- Start Start_2) (* Start Start_3) (mod Start_1 Start_3) (abs Start_4) (ite StartBool_2 Start Start_5)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_2 StartBool_5) (<= Start Start) (= Start_7 Start_6) (> Start_8 Start_7)))
   (StartBool_5 Bool (true (< Start_4 Start_2) (<= Start_4 Start_2) (= Start_6 Start_5) (>= Start_7 Start_9)))
   (StartBool_4 Bool (true (= Start_5 Start_12) (>= Start_6 Start_12) (> Start Start_7)))
   (Start_5 Int (x (- Start Start) (* Start_3 Start_3) (div Start_1 Start) (abs Start_2)))
   (Start_6 Int (2 (+ Start_7 Start_3)))
   (Start_2 Int (3 1 (- Start_2) (mod Start Start_2) (abs Start_2) (ite StartBool_1 Start_1 Start_3)))
   (Start_7 Int (5 y (- Start_8) (- Start_8 Start_6) (+ Start_3 Start_8) (ite StartBool_3 Start_5 Start_4)))
   (Start_1 Int (1 (- Start_10 Start_17) (+ Start_7 Start_9) (* Start_8 Start_7) (div Start_12 Start_7) (abs Start_6)))
   (StartBool_1 Bool (true false (or StartBool_3 StartBool_4) (<= Start_12 Start_12)))
   (Start_11 Int (2 (- Start_12) (- Start_3 Start_9) (div Start_9 Start_9) (abs Start_12) (ite StartBool_6 Start_3 Start_5)))
   (Start_9 Int (x 1 (- Start_2) (- Start_10 Start_2) (+ Start_8 Start_10) (* Start_4 Start_3) (mod Start_2 Start_11) (abs Start_11)))
   (StartBool_6 Bool (true (not StartBool_1) (= Start_2 Start_12) (>= Start_10 Start_3)))
   (StartBool_2 Bool (false (or StartBool_1 StartBool_2) (< Start Start_5) (= Start Start_4) (>= Start_6 Start_2) (> Start_4 Start_2)))
   (Start_12 Int (y (- Start_5) (- Start_10 Start_12) (* Start_9 Start_5) (div Start_4 Start_7) (abs Start_2) (ite StartBool_3 Start_13 Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 3 (* 4 5))))

(check-synth)
