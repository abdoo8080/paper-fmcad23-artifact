(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_7 Int) (StartBool_1 Bool) (Start_4 Int) (Start_5 Int) (Start_6 Int) (Start_3 Int) (Start_1 Int) (Start_2 Int))
  ((Start Int (2 (- Start Start_1) (* Start Start) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (true (and StartBool_1 StartBool_2) (or StartBool StartBool_1) (< Start_6 Start_5) (>= Start_3 Start_7)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_2 StartBool) (<= Start_4 Start_5)))
   (Start_7 Int (5 4 (- Start_7 Start_2) (* Start_1 Start_5) (mod Start_3 Start_2)))
   (StartBool_1 Bool (false true))
   (Start_4 Int (1 y))
   (Start_5 Int (3 (- Start Start_3) (+ Start_5 Start_2) (mod Start_2 Start_1)))
   (Start_6 Int (1 (- Start_4) (- Start Start_7) (+ Start_3 Start_2)))
   (Start_3 Int (3 (+ Start_2 Start) (* Start_4 Start_2) (div Start Start_3) (mod Start_5 Start_2) (abs Start)))
   (Start_1 Int (x 3 0 (- Start) (+ Start_3 Start_2) (div Start_1 Start_2) (mod Start Start_3)))
   (Start_2 Int (3 1 x 2 5 0 (- Start) (- Start_2 Start_2) (* Start_1 Start) (div Start Start_1) (mod Start_2 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (div x 5) (mod y 5))))

(check-synth)
