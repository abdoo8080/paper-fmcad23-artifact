(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_14 Int) (Start_12 Int) (StartBool_4 Bool) (Start_13 Int) (Start_5 Int) (Start_4 Int) (Start_11 Int) (Start_3 Int) (Start_15 Int) (Start_1 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_7 Int) (Start_8 Int) (Start_6 Int) (StartBool_6 Bool) (StartBool_3 Bool) (StartBool_5 Bool) (Start_9 Int) (Start_2 Int))
  ((Start Int (5 y (- Start_1) (- Start_2 Start_1) (div Start_3 Start_1) (abs Start) (ite StartBool Start_4 Start_3)))
   (StartBool Bool (false (<= Start_3 Start_4) (= Start_10 Start_5) (>= Start_7 Start_15) (> Start_5 Start_14)))
   (Start_10 Int (5 3 (- Start_11 Start_9) (* Start_13 Start_14) (div Start_12 Start_7) (mod Start Start_14) (abs Start_3) (ite StartBool_2 Start_9 Start_12)))
   (Start_14 Int (5 4 y 1 x (+ Start_7 Start_7) (* Start_7 Start_2) (abs Start_6)))
   (Start_12 Int (5 1 (- Start_5 Start_4) (+ Start_9 Start_1) (* Start_10 Start_8) (div Start_2 Start_1) (mod Start_12 Start_10)))
   (StartBool_4 Bool (false (or StartBool_2 StartBool_5) (< Start_5 Start_11) (= Start_4 Start_12) (> Start_2 Start)))
   (Start_13 Int (2 5 0 (- Start_13) (+ Start_8 Start_9) (* Start_9 Start_1) (abs Start_14)))
   (Start_5 Int (4 (- Start) (+ Start_3 Start_4) (div Start_3 Start_4) (mod Start Start_5) (abs Start_3) (ite StartBool_1 Start_3 Start_1)))
   (Start_4 Int (y (+ Start_4 Start_4) (mod Start_3 Start)))
   (Start_11 Int (2 x (- Start_11 Start) (+ Start_3 Start_3) (* Start_12 Start_11) (div Start_3 Start_3) (ite StartBool_5 Start_10 Start_8)))
   (Start_3 Int (3 (- Start_3 Start_3) (+ Start_5 Start_4) (* Start_5 Start_4)))
   (Start_15 Int (5 0 (- Start_11) (- Start_11 Start_2) (+ Start_4 Start_12) (mod Start_14 Start_15) (abs Start_6) (ite StartBool_6 Start_1 Start_1)))
   (Start_1 Int (0 5 1 (- Start_8 Start_10) (+ Start_9 Start_5) (ite StartBool_4 Start_7 Start_2)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_2) (or StartBool_2 StartBool_1) (< Start_1 Start_5) (>= Start_4 Start)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_2) (< Start_1 Start_6) (<= Start_2 Start_7) (>= Start_8 Start_6) (> Start_9 Start)))
   (Start_7 Int (2 (- Start_2 Start_8) (abs Start_9) (ite StartBool_3 Start_9 Start_3)))
   (Start_8 Int (1 0 5 y (- Start) (- Start_9 Start_7) (* Start_3 Start_6) (div Start_5 Start_5) (mod Start_5 Start_4) (abs Start_5) (ite StartBool Start_7 Start_2)))
   (Start_6 Int (3 x (+ Start_3 Start_3) (div Start_2 Start_1) (mod Start_6 Start_7) (abs Start_3) (ite StartBool_3 Start_2 Start_4)))
   (StartBool_6 Bool (true false (not StartBool_4) (and StartBool_3 StartBool_5) (or StartBool_5 StartBool) (= Start_9 Start_5) (> Start_7 Start_6)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_1) (or StartBool_1 StartBool_2) (= Start_4 Start_5) (>= Start_7 Start_5)))
   (StartBool_5 Bool (false (not StartBool_4) (and StartBool_2 StartBool_5) (or StartBool_1 StartBool_3) (< Start_13 Start_4) (>= Start_6 Start_9)))
   (Start_9 Int (0 4 3 (+ Start_8 Start_6) (* Start_7 Start_3) (div Start_2 Start_7) (mod Start_1 Start_3) (ite StartBool Start_8 Start)))
   (Start_2 Int (x 3 (+ Start_7 Start_5) (* Start_3 Start_2) (mod Start_1 Start_8) (ite StartBool_3 Start_2 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (mod 1 0) 2)))

(check-synth)
