(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_18 Int) (Start_16 Int) (Start_5 Int) (Start_15 Int) (Start_7 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_14 Int) (Start_2 Int) (Start_1 Int) (Start_17 Int) (StartBool_3 Bool) (Start_13 Int) (Start_3 Int) (Start_12 Int) (Start_10 Int) (Start_19 Int) (Start_4 Int) (Start_6 Int) (Start_9 Int) (Start_8 Int) (Start_11 Int))
  ((Start Int (3 1 (- Start) (- Start_1 Start_1) (+ Start_1 Start_1) (abs Start_2)))
   (StartBool Bool (true false (not StartBool_1) (< Start Start_4) (>= Start_3 Start_3)))
   (StartBool_1 Bool (false (= Start_12 Start_9)))
   (Start_18 Int (y (- Start_19) (- Start_15 Start_17) (div Start_8 Start_17) (abs Start)))
   (Start_16 Int (x (- Start_8) (- Start_3 Start_11) (* Start_11 Start_14) (abs Start_5) (ite StartBool_4 Start_7 Start_18)))
   (Start_5 Int (y 3 (- Start_16) (- Start_5 Start_7) (+ Start_10 Start_14) (* Start_12 Start_5) (div Start_9 Start_3) (mod Start_11 Start) (ite StartBool_1 Start_17 Start)))
   (Start_15 Int (2 4 y (mod Start_10 Start_13) (abs Start_15)))
   (Start_7 Int (3 (- Start_9 Start_12) (+ Start_10 Start_7) (* Start_10 Start_2) (div Start_13 Start_4) (mod Start_10 Start_10) (abs Start_4) (ite StartBool_3 Start_3 Start_2)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_2) (or StartBool StartBool_1) (< Start_7 Start_1) (>= Start_5 Start_5)))
   (StartBool_2 Bool (true false (not StartBool_4) (or StartBool_2 StartBool_2) (>= Start_5 Start_13)))
   (Start_14 Int (y 4 3 0 (- Start_5) (- Start Start_2) (div Start_14 Start_7) (mod Start_13 Start_5) (abs Start_4)))
   (Start_2 Int (4 y 1 2 0 x 3 5 (* Start_1 Start) (ite StartBool Start Start_1)))
   (Start_1 Int (4 1 y (- Start) (+ Start_3 Start_1) (ite StartBool Start_1 Start)))
   (Start_17 Int (3 (- Start) (- Start_10 Start) (div Start_13 Start_4) (mod Start_1 Start_9)))
   (StartBool_3 Bool (true false (and StartBool StartBool_2) (or StartBool_4 StartBool_3) (< Start_4 Start) (<= Start_1 Start_9)))
   (Start_13 Int (0 (- Start_9) (+ Start_6 Start_9) (* Start_5 Start_1)))
   (Start_3 Int (x 0 4 y (div Start Start) (mod Start_1 Start_3)))
   (Start_12 Int (4 (- Start_3 Start_1) (* Start Start_1) (abs Start_8) (ite StartBool_4 Start_5 Start_2)))
   (Start_10 Int (x (- Start_3) (+ Start_9 Start_10) (* Start_14 Start) (div Start_4 Start_2) (mod Start_11 Start_4)))
   (Start_19 Int (x 2 y 5 (- Start_10) (- Start Start_10) (+ Start_18 Start_15) (ite StartBool Start_6 Start_7)))
   (Start_4 Int (3 5 (- Start_5) (- Start_3 Start_3) (+ Start_5 Start_5) (div Start_4 Start) (mod Start_6 Start_7) (ite StartBool_2 Start_6 Start_8)))
   (Start_6 Int (y 4 1 (- Start_1) (- Start_6 Start_15) (+ Start_1 Start_6) (* Start_10 Start_8) (abs Start_3)))
   (Start_9 Int (0 (* Start_10 Start_3) (mod Start_11 Start_3)))
   (Start_8 Int (1 (div Start_3 Start_6) (abs Start_3) (ite StartBool_3 Start_5 Start_2)))
   (Start_11 Int (3 (- Start_4) (+ Start_10 Start_1) (* Start_4 Start_3) (div Start_12 Start_13) (mod Start_1 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= 2 (abs y)) 3 (- y x))))

(check-synth)
