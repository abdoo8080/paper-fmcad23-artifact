(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_13 Int) (Start_4 Int) (Start_12 Int) (Start_11 Int) (Start_2 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_1 Int) (Start_10 Int) (Start_5 Int) (StartBool_6 Bool) (Start_15 Int) (Start_7 Int) (Start_8 Int) (StartBool_5 Bool) (Start_6 Int) (StartBool_3 Bool) (Start_9 Int) (Start_3 Int) (StartBool_4 Bool))
  ((Start Int (1 5 y 4 (- Start_1) (+ Start_2 Start) (div Start_2 Start_2) (mod Start_1 Start_2) (abs Start_2)))
   (StartBool Bool (true (< Start_12 Start_3) (>= Start_13 Start_12) (> Start_1 Start_4)))
   (Start_14 Int (x (- Start_6) (* Start_2 Start_11) (div Start_11 Start_8) (ite StartBool_1 Start_14 Start)))
   (Start_13 Int (5 2 (div Start_14 Start_15) (mod Start_4 Start_3) (ite StartBool Start_4 Start)))
   (Start_4 Int (x (- Start_9) (+ Start_1 Start_2) (abs Start_3) (ite StartBool_2 Start_10 Start_13)))
   (Start_12 Int (1 y 0 (- Start_9 Start_6) (div Start_4 Start_9)))
   (Start_11 Int (0 3 (- Start_8 Start_11) (+ Start_2 Start_3) (* Start_8 Start_12)))
   (Start_2 Int (y (- Start_3) (- Start_2 Start_1) (+ Start_3 Start_2) (* Start_1 Start_3) (div Start_1 Start) (abs Start_3)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool StartBool_2) (< Start_3 Start_2) (= Start_3 Start_1) (>= Start_2 Start_4) (> Start_2 Start_2)))
   (StartBool_2 Bool (false (not StartBool_1) (or StartBool StartBool) (< Start Start_4) (<= Start_4 Start_4) (>= Start_2 Start_5)))
   (Start_1 Int (0 2 3 y 5 x 4 (- Start_10) (div Start_11 Start_1)))
   (Start_10 Int (4 (- Start_9) (- Start_11 Start_6) (div Start_6 Start_7) (ite StartBool Start_7 Start_8)))
   (Start_5 Int (2 3 (- Start) (* Start_2 Start_6)))
   (StartBool_6 Bool (false (= Start_5 Start)))
   (Start_15 Int (5 (- Start_7 Start_7) (* Start_7 Start_13) (mod Start_7 Start_13)))
   (Start_7 Int (x 3 0 (- Start_1) (ite StartBool_3 Start_8 Start_4)))
   (Start_8 Int (2 (- Start_3) (div Start_7 Start_7)))
   (StartBool_5 Bool (false true (and StartBool StartBool_2) (or StartBool_3 StartBool_4) (<= Start_9 Start_3) (= Start_10 Start_7)))
   (Start_6 Int (2 3 (+ Start_6 Start_5) (div Start_4 Start_3) (mod Start_7 Start_3)))
   (StartBool_3 Bool (false (or StartBool_4 StartBool) (<= Start_9 Start) (> Start_4 Start_3)))
   (Start_9 Int (x (- Start_7) (- Start_1 Start_3) (abs Start_7) (ite StartBool_2 Start_7 Start_4)))
   (Start_3 Int (5 (- Start_1) (- Start_2 Start_2) (+ Start Start_3) (div Start_4 Start_2) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_4) (or StartBool_5 StartBool_6) (>= Start Start_2) (> Start Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (* x (- 3)) (+ 5 (div 4 y)))))

(check-synth)
