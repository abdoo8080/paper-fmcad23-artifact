(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_20 Int) (StartBool_4 Bool) (Start_19 Int) (Start_18 Int) (Start_16 Int) (Start_15 Int) (Start_9 Int) (Start_5 Int) (Start_3 Int) (Start_1 Int) (StartBool_5 Bool) (StartBool_1 Bool) (StartBool_2 Bool) (Start_17 Int) (Start_14 Int) (Start_7 Int) (Start_2 Int) (Start_8 Int) (StartBool_3 Bool) (Start_11 Int) (Start_13 Int) (Start_10 Int) (Start_4 Int) (Start_12 Int))
  ((Start Int (4 3 0 2 (+ Start_1 Start) (mod Start_2 Start_1)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_4 StartBool_3) (or StartBool_2 StartBool_2) (<= Start_13 Start_9) (>= Start_2 Start_11) (> Start_16 Start_10)))
   (Start_6 Int (0 2 (div Start_20 Start_14) (abs Start_6) (ite StartBool_3 Start_2 Start_5)))
   (Start_20 Int (1 (- Start_10) (- Start_18 Start_19) (+ Start_12 Start_13) (div Start_16 Start_10) (mod Start_1 Start_7) (abs Start_8) (ite StartBool Start_13 Start)))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_1) (= Start_7 Start_20) (> Start_1 Start_11)))
   (Start_19 Int (3 (- Start_12) (* Start_7 Start_3) (div Start_4 Start_17) (mod Start_3 Start_4) (ite StartBool_4 Start_3 Start_15)))
   (Start_18 Int (5 1 (- Start_7) (div Start_8 Start_9) (mod Start_7 Start_12) (abs Start_19) (ite StartBool_3 Start_8 Start_2)))
   (Start_16 Int (0 (- Start_7) (* Start_1 Start_17) (ite StartBool_3 Start_9 Start)))
   (Start_15 Int (4 (- Start_13 Start_15) (* Start_11 Start_16) (div Start_13 Start_3) (mod Start_3 Start_8)))
   (Start_9 Int (2 (- Start_9) (- Start_14 Start_9) (* Start Start_14) (mod Start_5 Start_5) (ite StartBool Start_6 Start_15)))
   (Start_5 Int (4 5 (- Start_15) (- Start_11 Start_2) (div Start_10 Start_13) (abs Start_1)))
   (Start_3 Int (x (+ Start_1 Start_3)))
   (Start_1 Int (1 y x (+ Start_2 Start_2) (mod Start_4 Start)))
   (StartBool_5 Bool (false (and StartBool_4 StartBool) (< Start_4 Start_14) (= Start_10 Start_20) (>= Start_15 Start_20) (> Start_20 Start_19)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (= Start_1 Start_2)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_2) (or StartBool_2 StartBool_1) (<= Start_1 Start_5) (= Start_6 Start_7) (>= Start_4 Start)))
   (Start_17 Int (1 5 2 3 0 x (- Start_9) (- Start_18 Start_5) (+ Start_6 Start_10) (* Start_14 Start_14) (div Start_3 Start_18) (abs Start_8)))
   (Start_14 Int (3 y x (div Start_4 Start_14) (mod Start_10 Start_6)))
   (Start_7 Int (2 (mod Start_4 Start_8) (abs Start_6) (ite StartBool_2 Start_3 Start_8)))
   (Start_2 Int (3 4 5 (div Start_2 Start_3) (abs Start)))
   (Start_8 Int (1 (- Start) (- Start_5 Start_5) (div Start_9 Start_10) (mod Start_11 Start_9) (ite StartBool_2 Start_11 Start_3)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool_1) (or StartBool_3 StartBool) (<= Start_8 Start) (= Start_2 Start_11) (>= Start_2 Start_4) (> Start_5 Start_3)))
   (Start_11 Int (3 (- Start_1 Start_9) (+ Start_10 Start_12) (div Start_13 Start) (mod Start_10 Start_9) (ite StartBool_3 Start_3 Start_13)))
   (Start_13 Int (4 0 2 (- Start_4) (* Start_13 Start_9) (div Start Start_1) (abs Start_12)))
   (Start_10 Int (0 (- Start_8 Start_6) (mod Start_14 Start_14) (ite StartBool_3 Start_13 Start_8)))
   (Start_4 Int (3 x 0 (- Start_3 Start_3) (* Start_4 Start) (div Start Start_2) (mod Start_2 Start_3) (ite StartBool_1 Start_4 Start_2)))
   (Start_12 Int (4 y 0 1 (- Start_9) (* Start_1 Start_3) (div Start_1 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div x (* 4 y))))

(check-synth)
