(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (StartBool_7 Bool) (StartBool_8 Bool) (Start_12 Int) (Start_2 Int) (Start_10 Int) (StartBool_6 Bool) (Start_17 Int) (StartBool_2 Bool) (Start_7 Int) (Start_4 Int) (StartBool_1 Bool) (Start_8 Int) (Start_6 Int) (StartBool_4 Bool) (Start_16 Int) (Start_19 Int) (Start_14 Int) (Start_11 Int) (StartBool_3 Bool) (Start_15 Int) (StartBool_5 Bool) (Start_18 Int) (Start_9 Int) (Start_3 Int) (Start_5 Int) (Start_1 Int) (Start_20 Int))
  ((Start Int (3 (- Start_1)))
   (StartBool Bool (false (or StartBool_1 StartBool_5) (< Start_16 Start_12) (= Start_14 Start_17) (>= Start_12 Start_10)))
   (Start_13 Int (4 (- Start_1 Start_5) (* Start Start_9) (abs Start_14)))
   (StartBool_7 Bool (false true (not StartBool_8) (and StartBool_7 StartBool_1) (<= Start_16 Start_17) (= Start_12 Start_3) (>= Start_10 Start_13) (> Start Start_13)))
   (StartBool_8 Bool (false true (and StartBool_8 StartBool_1) (or StartBool StartBool_3) (<= Start_6 Start_9)))
   (Start_12 Int (2 (- Start_2) (- Start Start_5) (+ Start_2 Start_9) (* Start_3 Start) (mod Start Start_13) (abs Start_12) (ite StartBool_4 Start_1 Start_6)))
   (Start_2 Int (y 2 5 (- Start_3) (- Start_2 Start_1) (+ Start_3 Start_4) (* Start_2 Start_4) (div Start_2 Start_2) (mod Start_3 Start_1)))
   (Start_10 Int (0 1 y (- Start_3) (* Start_8 Start_6) (mod Start_8 Start_8)))
   (StartBool_6 Bool (true (not StartBool_4) (or StartBool_7 StartBool_6) (<= Start_12 Start_8) (= Start Start_10) (>= Start_12 Start_5) (> Start_11 Start_7)))
   (Start_17 Int (x 2 3 4 0 1 y (+ Start_10 Start_15) (div Start_8 Start_10) (mod Start_10 Start) (ite StartBool_2 Start_2 Start_11)))
   (StartBool_2 Bool (true false (or StartBool_1 StartBool_3) (< Start_8 Start_8) (>= Start_9 Start_9) (> Start_6 Start_2)))
   (Start_7 Int (x (- Start_7) (+ Start_7 Start_1) (* Start_6 Start_4) (div Start_7 Start_4) (mod Start_6 Start_1)))
   (Start_4 Int (x (- Start_3) (- Start_5 Start_4) (+ Start_2 Start_3) (* Start_6 Start) (mod Start_6 Start) (abs Start_5) (ite StartBool Start Start_5)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (or StartBool StartBool) (< Start Start_3) (> Start_7 Start_1)))
   (Start_8 Int (y (- Start_2 Start) (+ Start Start_5) (* Start_11 Start_2) (ite StartBool_4 Start_15 Start_15)))
   (Start_6 Int (5 4 (- Start_4 Start_3) (+ Start_6 Start_3) (div Start Start_4) (mod Start Start_4) (ite StartBool_1 Start_4 Start_3)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_4 StartBool_2) (< Start_11 Start_10) (= Start_5 Start_2) (> Start_7 Start_12)))
   (Start_16 Int (5 (- Start_5) (- Start_12 Start_18) (+ Start_14 Start_8) (* Start Start_7) (abs Start_15) (ite StartBool_2 Start_15 Start_2)))
   (Start_19 Int (3 (+ Start_1 Start_10) (ite StartBool_1 Start_7 Start_15)))
   (Start_14 Int (4 0 (- Start_4 Start_4) (+ Start_13 Start_5) (abs Start_7)))
   (Start_11 Int (0 1 5 3 (* Start_3 Start_4) (div Start_12 Start_5) (mod Start_12 Start_15) (ite StartBool_1 Start_10 Start_11)))
   (StartBool_3 Bool (false (not StartBool_5) (and StartBool_5 StartBool_6) (or StartBool StartBool_3)))
   (Start_15 Int (3 1 4 (- Start_1) (div Start_13 Start_15) (mod Start_9 Start_1) (abs Start_13)))
   (StartBool_5 Bool (false true (and StartBool_4 StartBool_2) (or StartBool_5 StartBool_2) (<= Start_12 Start) (= Start_13 Start_2) (>= Start_7 Start_14) (> Start_7 Start_8)))
   (Start_18 Int (0 (- Start_19 Start_1) (div Start_2 Start_5) (mod Start_11 Start_16) (abs Start_14) (ite StartBool_4 Start_9 Start_3)))
   (Start_9 Int (3 2 x (- Start_3 Start_8) (mod Start_3 Start_2) (ite StartBool_4 Start_10 Start_3)))
   (Start_3 Int (3 (- Start_9) (- Start_12 Start_6) (* Start_1 Start_18) (ite StartBool_6 Start_4 Start_20)))
   (Start_5 Int (0 (- Start_4 Start_11) (* Start_15 Start_12) (mod Start_3 Start_15) (abs Start_3) (ite StartBool_2 Start_15 Start_2)))
   (Start_1 Int (0 2 3 x (div Start_1 Start_2) (mod Start_2 Start_1)))
   (Start_20 Int (0 2 (div Start Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 5 (- (+ y 3) (+ 5 5)))))

(check-synth)
