(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (StartBool_1 Bool) (Start_19 Int) (Start_4 Int) (Start_1 Int) (Start_14 Int) (Start_15 Int) (StartBool_3 Bool) (StartBool_6 Bool) (Start_10 Int) (Start_17 Int) (Start_8 Int) (Start_9 Int) (Start_2 Int) (StartBool_7 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_6 Int) (Start_18 Int) (Start_16 Int) (Start_11 Int) (StartBool_4 Bool) (Start_13 Int) (Start_7 Int) (Start_5 Int) (StartBool_5 Bool) (Start_12 Int))
  ((Start Int (3 (* Start Start_1) (mod Start Start) (abs Start) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (true (and StartBool_7 StartBool_5) (<= Start_3 Start_12)))
   (Start_20 Int (2 4 (- Start_12) (* Start_12 Start) (div Start_9 Start_8) (mod Start_10 Start_17)))
   (StartBool_1 Bool (true false (and StartBool_5 StartBool_5) (<= Start_2 Start_16) (= Start_7 Start) (> Start_18 Start_9)))
   (Start_19 Int (4 x 0 (+ Start_18 Start_14) (* Start_18 Start_19) (div Start_17 Start_9) (abs Start_7) (ite StartBool_6 Start_15 Start_6)))
   (Start_4 Int (4 3 (abs Start_5) (ite StartBool_7 Start_5 Start_3)))
   (Start_1 Int (3 1 4 2 (- Start_3 Start_7) (+ Start_4 Start_20) (mod Start_17 Start_17) (abs Start_13)))
   (Start_14 Int (1 4 2 (- Start_4) (- Start_7 Start_3)))
   (Start_15 Int (0 (- Start_10 Start_14) (abs Start_13)))
   (StartBool_3 Bool (false (not StartBool_2) (or StartBool_5 StartBool_1) (< Start_14 Start_7) (> Start_15 Start_12)))
   (StartBool_6 Bool (false true (and StartBool StartBool) (< Start_9 Start_3)))
   (Start_10 Int (x 3 (- Start_13 Start_7) (+ Start_6 Start_8)))
   (Start_17 Int (2 (- Start_16) (div Start_19 Start_7) (abs Start_8) (ite StartBool_6 Start_4 Start_9)))
   (Start_8 Int (2 (- Start_6) (+ Start_4 Start_4) (* Start_5 Start_1) (abs Start_1) (ite StartBool_6 Start_6 Start_5)))
   (Start_9 Int (2 (- Start_10) (* Start_3 Start_3) (ite StartBool_4 Start_10 Start_3)))
   (Start_2 Int (4 (+ Start Start) (* Start_2 Start) (div Start_3 Start_3) (mod Start Start_1)))
   (StartBool_7 Bool (true (and StartBool_5 StartBool_4) (<= Start_5 Start_8) (= Start_16 Start_15) (> Start_7 Start_16)))
   (Start_3 Int (3 5 y 2 (+ Start_4 Start_2) (* Start Start_2) (mod Start_5 Start_2) (abs Start_1)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_1) (or StartBool_3 StartBool_4) (<= Start_2 Start_1) (>= Start Start_3)))
   (Start_6 Int (0 x 3 y (- Start Start_7) (* Start_6 Start_3) (div Start_4 Start_8)))
   (Start_18 Int (y (- Start_10) (- Start_17 Start_13) (+ Start_1 Start_15) (ite StartBool_6 Start_3 Start_19)))
   (Start_16 Int (x 2 3 (- Start_8 Start_2) (div Start_6 Start_17) (ite StartBool_2 Start_18 Start_5)))
   (Start_11 Int (3 x (- Start_4) (+ Start_12 Start_10) (* Start_6 Start_13) (div Start_7 Start_2) (abs Start_5)))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_4) (<= Start_3 Start_4) (= Start_5 Start_2) (>= Start_1 Start_5)))
   (Start_13 Int (0 (- Start_10 Start_7) (abs Start_5)))
   (Start_7 Int (5 2 4 (- Start_9) (- Start_10 Start_11) (* Start_8 Start_12) (div Start_11 Start_1)))
   (Start_5 Int (0 (- Start_5 Start_3) (+ Start_1 Start_4) (ite StartBool_2 Start_2 Start_1)))
   (StartBool_5 Bool (false true (and StartBool_4 StartBool_5) (or StartBool_6 StartBool_2) (< Start_2 Start_1) (= Start_6 Start) (>= Start_6 Start_1)))
   (Start_12 Int (1 (- Start_7) (* Start_5 Start_6) (ite StartBool_4 Start_6 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x (* y y))))

(check-synth)
