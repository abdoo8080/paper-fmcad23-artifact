(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_10 Int) (Start_11 Int) (Start_4 Int) (Start_3 Int) (StartBool_1 Bool) (Start_5 Int) (Start_7 Int) (StartBool_2 Bool) (Start_6 Int) (Start_2 Int) (Start_1 Int) (Start_8 Int) (Start_9 Int))
  ((Start Int (y 1 (- Start_1) (- Start_2 Start_1) (+ Start_2 Start_3) (div Start_3 Start_4)))
   (StartBool Bool (true false (and StartBool StartBool_1) (> Start_10 Start_11)))
   (StartBool_3 Bool (true (<= Start_7 Start_8) (> Start_3 Start_11)))
   (Start_10 Int (3 (- Start_6) (- Start Start_10) (mod Start_9 Start) (ite StartBool_3 Start_3 Start_2)))
   (Start_11 Int (0 5 (- Start_10 Start_2) (* Start_4 Start_9) (mod Start_9 Start_7) (abs Start_9)))
   (Start_4 Int (y 2 (- Start) (- Start_1 Start) (+ Start_2 Start) (* Start Start_1) (abs Start_4)))
   (Start_3 Int (y 5 (- Start_2 Start_4) (div Start_5 Start_5) (mod Start_5 Start_1) (abs Start_2)))
   (StartBool_1 Bool (true (or StartBool_2 StartBool_1) (> Start_4 Start_6)))
   (Start_5 Int (3 (- Start_3) (- Start_6 Start_6) (+ Start_6 Start) (div Start_5 Start_4) (mod Start_4 Start_7) (abs Start_2) (ite StartBool_1 Start_5 Start_7)))
   (Start_7 Int (3 (- Start_5) (* Start_4 Start_6) (div Start_6 Start) (mod Start_2 Start) (abs Start_7) (ite StartBool_1 Start_4 Start_1)))
   (StartBool_2 Bool (true false (and StartBool StartBool_1) (or StartBool_2 StartBool_2) (<= Start_7 Start_3) (= Start_6 Start_1)))
   (Start_6 Int (0 (+ Start_7 Start_2) (div Start_6 Start_1) (abs Start_6) (ite StartBool_2 Start_6 Start_7)))
   (Start_2 Int (y (- Start) (+ Start_4 Start) (div Start_4 Start_5) (mod Start_3 Start) (abs Start_1) (ite StartBool Start_4 Start_1)))
   (Start_1 Int (0 1 3 5 4 (- Start_3) (- Start Start_4) (div Start_8 Start_7) (mod Start_5 Start_3) (ite StartBool_1 Start_8 Start_3)))
   (Start_8 Int (y 4 (- Start_1 Start_6) (* Start_4 Start_9)))
   (Start_9 Int (x 1 4 (- Start_1) (- Start Start_8) (+ Start_2 Start_7) (div Start_1 Start_4) (mod Start_1 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div y x))))

(check-synth)
