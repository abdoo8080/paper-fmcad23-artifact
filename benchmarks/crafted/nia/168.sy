(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_15 Int) (Start_13 Int) (Start_12 Int) (StartBool_6 Bool) (Start_11 Int) (Start_1 Int) (Start_9 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_8 Int) (Start_7 Int) (Start_3 Int) (Start_2 Int) (Start_10 Int) (StartBool_4 Bool) (Start_4 Int) (StartBool_3 Bool) (Start_6 Int) (StartBool_5 Bool) (Start_5 Int))
  ((Start Int (1 (* Start_1 Start_1) (div Start_2 Start_2) (ite StartBool_1 Start Start)))
   (StartBool Bool (false (or StartBool_6 StartBool_3) (< Start_14 Start_3) (= Start_11 Start) (> Start_15 Start_10)))
   (Start_14 Int (2 4 5 1 x 0 (* Start_15 Start_2) (div Start_4 Start_12) (abs Start_14) (ite StartBool_4 Start_3 Start_14)))
   (Start_15 Int (y (ite StartBool_1 Start_15 Start_3)))
   (Start_13 Int (x (- Start_13 Start_4) (+ Start_9 Start_11) (mod Start_7 Start_9)))
   (Start_12 Int (0 (- Start_13 Start_10) (+ Start_5 Start_7) (* Start_12 Start_8) (div Start_12 Start_9) (mod Start Start_8) (abs Start_1) (ite StartBool_1 Start_2 Start_13)))
   (StartBool_6 Bool (false true (or StartBool_6 StartBool_5) (< Start_7 Start_10) (<= Start_11 Start_2) (>= Start_2 Start_7)))
   (Start_11 Int (x (- Start_11 Start_1) (* Start_2 Start_4) (mod Start_12 Start_6) (ite StartBool Start_2 Start_2)))
   (Start_1 Int (y (- Start_8 Start_8) (+ Start_10 Start_8) (* Start_1 Start_11) (mod Start_10 Start_7) (abs Start_11) (ite StartBool_6 Start_4 Start_11)))
   (Start_9 Int (4 (- Start_6) (- Start_3 Start_4) (div Start_1 Start_5)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_3) (or StartBool_4 StartBool_1) (= Start_2 Start_2) (> Start_3 Start_1)))
   (StartBool_1 Bool (false true (not StartBool_2) (< Start Start) (<= Start_3 Start_1) (>= Start_2 Start_3)))
   (Start_8 Int (2 (- Start_2 Start_4) (+ Start_6 Start_3) (abs Start_5) (ite StartBool_2 Start_8 Start)))
   (Start_7 Int (y x (- Start_2 Start_1) (abs Start_6)))
   (Start_3 Int (0 1 (+ Start_2 Start_3) (mod Start Start) (abs Start_1) (ite StartBool Start_3 Start)))
   (Start_2 Int (3 (* Start_6 Start_8) (div Start_1 Start_9)))
   (Start_10 Int (2 (- Start_5) (- Start_3 Start) (abs Start_9) (ite StartBool_1 Start_11 Start_13)))
   (StartBool_4 Bool (true false (< Start_3 Start_4)))
   (Start_4 Int (4 1 (- Start_4) (* Start_4 Start_4) (div Start_1 Start_5) (mod Start_5 Start_6) (abs Start_5)))
   (StartBool_3 Bool (false (not StartBool_4)))
   (Start_6 Int (x (- Start_5) (- Start_2 Start) (* Start Start) (mod Start_4 Start_7) (ite StartBool_5 Start_1 Start_7)))
   (StartBool_5 Bool (true false (or StartBool StartBool_3) (<= Start_2 Start_7) (= Start_6 Start_4)))
   (Start_5 Int (y 4 (- Start_7) (* Start_7 Start_6) (div Start_5 Start) (mod Start_8 Start) (abs Start_4) (ite StartBool_2 Start_2 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x 4)))

(check-synth)
