(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_21 Int) (StartBool_10 Bool) (Start_22 Int) (Start_6 Int) (Start_13 Int) (Start_10 Int) (StartBool_8 Bool) (Start_9 Int) (Start_8 Int) (StartBool_4 Bool) (Start_7 Int) (Start_16 Int) (StartBool_2 Bool) (Start_2 Int) (Start_3 Int) (Start_12 Int) (Start_14 Int) (StartBool_5 Bool) (Start_11 Int) (StartBool_3 Bool) (Start_4 Int) (StartBool_6 Bool) (Start_17 Int) (StartBool_7 Bool) (Start_20 Int) (Start_5 Int) (StartBool_1 Bool) (Start_18 Int) (Start_15 Int) (Start_19 Int) (StartBool_9 Bool))
  ((Start Int (x (- Start) (abs Start_1) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (false true (and StartBool_3 StartBool_6) (or StartBool_3 StartBool_7) (< Start_10 Start_19) (<= Start Start_19) (= Start_2 Start_7) (>= Start_13 Start_8) (> Start_9 Start_16)))
   (Start_1 Int (4 (- Start_9 Start_4) (div Start_20 Start_10) (abs Start_10)))
   (Start_21 Int (2 (- Start_19) (- Start_15 Start_4) (div Start_21 Start_11) (mod Start_22 Start_1) (abs Start_3) (ite StartBool_4 Start_18 Start_15)))
   (StartBool_10 Bool (false (not StartBool_5) (and StartBool_4 StartBool_4) (or StartBool_10 StartBool_10) (= Start_10 Start_19) (>= Start_12 Start_20) (> Start_20 Start_22)))
   (Start_22 Int (y 4 1 5 0 (- Start_21 Start_20) (div Start_22 Start_2) (mod Start Start_13) (abs Start_19) (ite StartBool_10 Start_13 Start_8)))
   (Start_6 Int (4 1 (- Start_4 Start_1) (div Start_2 Start_6) (mod Start_11 Start_12) (ite StartBool_6 Start_10 Start_2)))
   (Start_13 Int (4 1 (* Start_3 Start_13) (ite StartBool_7 Start_10 Start_9)))
   (Start_10 Int (y (+ Start_4 Start_3) (* Start_6 Start_4) (div Start_9 Start_3) (mod Start_10 Start_8) (abs Start_4) (ite StartBool Start Start_7)))
   (StartBool_8 Bool (true (< Start_16 Start_3) (<= Start_2 Start_1) (> Start_8 Start_16)))
   (Start_9 Int (4 (- Start_2 Start) (+ Start_6 Start_10)))
   (Start_8 Int (0 4 1 (- Start_1) (- Start_7 Start_8) (+ Start_5 Start_8) (* Start_2 Start_1) (mod Start_4 Start_9) (abs Start_3)))
   (StartBool_4 Bool (false true (not StartBool_4) (or StartBool_5 StartBool_5) (>= Start_2 Start_6) (> Start_2 Start_7)))
   (Start_7 Int (x (- Start_1 Start_8) (+ Start_5 Start) (* Start_7 Start_4) (abs Start_6) (ite StartBool_2 Start Start_4)))
   (Start_16 Int (0 (* Start_3 Start_17)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_4) (or StartBool_2 StartBool_2) (< Start_4 Start_4) (= Start_2 Start_5)))
   (Start_2 Int (2 y x 1 (* Start_2 Start_1) (mod Start_1 Start) (abs Start) (ite StartBool_1 Start Start_3)))
   (Start_3 Int (y (+ Start_2 Start_4) (* Start_4 Start_2) (mod Start_3 Start_4) (ite StartBool_2 Start_4 Start)))
   (Start_12 Int (0 x 5 (- Start_11 Start_14) (* Start_14 Start_13) (div Start_11 Start_2) (mod Start_8 Start)))
   (Start_14 Int (y (- Start_15) (- Start_2 Start_6) (+ Start Start_7) (mod Start_3 Start_10)))
   (StartBool_5 Bool (false true (not StartBool_6) (and StartBool_4 StartBool_2) (>= Start_10 Start) (> Start_1 Start_9)))
   (Start_11 Int (y 5 4 (- Start_6) (- Start_11 Start_7) (mod Start Start_9)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_1 StartBool_7) (<= Start_7 Start) (>= Start_3 Start_3) (> Start_2 Start_14)))
   (Start_4 Int (4 3 5 (+ Start_5 Start_4) (mod Start_13 Start_2) (abs Start_12)))
   (StartBool_6 Bool (true (<= Start_2 Start) (= Start_13 Start_10) (> Start_3 Start_10)))
   (Start_17 Int (0 1 x (- Start_18 Start_17) (+ Start_19 Start_17) (* Start_4 Start_11) (div Start_12 Start_6) (abs Start_3)))
   (StartBool_7 Bool (false (= Start Start_1)))
   (Start_20 Int (3 x 2 (- Start_13 Start_2) (* Start_17 Start_13) (div Start_8 Start_19) (mod Start_8 Start) (ite StartBool_9 Start_18 Start_2)))
   (Start_5 Int (4 y 5 3 (* Start_5 Start) (abs Start_5)))
   (StartBool_1 Bool (true (not StartBool_2) (or StartBool_8 StartBool_1) (= Start_14 Start_1) (>= Start_9 Start_2)))
   (Start_18 Int (0 (- Start_18) (- Start_5 Start_16) (+ Start_7 Start_15) (* Start_16 Start_18) (div Start_12 Start_21) (ite StartBool_4 Start_8 Start_22)))
   (Start_15 Int (0 x (* Start_2 Start_3) (div Start_14 Start_8) (ite StartBool_1 Start_1 Start_13)))
   (Start_19 Int (y 0 1 x (+ Start_16 Start_20) (* Start_20 Start_17)))
   (StartBool_9 Bool (true false (not StartBool) (<= Start_19 Start_3) (>= Start_19 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod (abs y) 3) 4)))

(check-synth)
