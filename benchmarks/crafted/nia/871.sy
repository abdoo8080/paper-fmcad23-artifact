(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_11 Int) (Start_3 Int) (Start_7 Int) (Start_5 Int) (Start_4 Int) (Start_1 Int) (Start_2 Int) (Start_6 Int) (StartBool_2 Bool) (Start_9 Int) (StartBool_1 Bool) (Start_8 Int))
  ((Start Int (3 (- Start) (+ Start_1 Start_2) (div Start_3 Start_1)))
   (StartBool Bool (true false (or StartBool_2 StartBool) (<= Start_1 Start_7) (= Start_10 Start_8) (>= Start_11 Start_7)))
   (Start_10 Int (2 3 (- Start_6 Start_2) (+ Start_10 Start_2) (div Start_9 Start_11) (abs Start_5) (ite StartBool Start_9 Start_3)))
   (Start_11 Int (x 4 1 0 2 (+ Start_2 Start_4) (div Start Start_2) (mod Start Start_4) (abs Start_1)))
   (Start_3 Int (1 (- Start_4) (+ Start_4 Start_2) (div Start_5 Start_4) (abs Start_1)))
   (Start_7 Int (y (- Start_4 Start_8) (+ Start_1 Start_9) (* Start Start_2) (abs Start_4) (ite StartBool_1 Start Start_6)))
   (Start_5 Int (0 (- Start_4) (+ Start_1 Start_1) (* Start Start) (abs Start_2)))
   (Start_4 Int (4 0 (- Start) (- Start_5 Start_5) (* Start_5 Start) (mod Start_3 Start_4)))
   (Start_1 Int (4 y (- Start_4) (- Start_4 Start_2) (mod Start_6 Start_1) (abs Start_2) (ite StartBool_1 Start_1 Start)))
   (Start_2 Int (2 y (+ Start Start_3) (* Start_2 Start_3) (abs Start_2)))
   (Start_6 Int (5 (- Start) (+ Start_1 Start_2)))
   (StartBool_2 Bool (false true (< Start_7 Start_6)))
   (Start_9 Int (3 (- Start_8) (+ Start_2 Start) (div Start_6 Start_3) (mod Start_7 Start_3) (abs Start_3) (ite StartBool Start_6 Start_3)))
   (StartBool_1 Bool (true (or StartBool_1 StartBool_2) (< Start Start_2)))
   (Start_8 Int (2 (- Start_9 Start) (+ Start_7 Start_4) (* Start_4 Start_2) (div Start_6 Start_4) (mod Start_6 Start) (abs Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (= (mod 2 y) 5) 0 2)))

(check-synth)
