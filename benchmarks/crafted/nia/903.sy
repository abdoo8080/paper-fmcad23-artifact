(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_12 Int) (Start_10 Int) (Start_4 Int) (Start_3 Int) (Start_2 Int) (StartBool_1 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_6 Int) (Start_7 Int) (Start_1 Int) (Start_8 Int) (Start_9 Int))
  ((Start Int (0 (- Start_1) (* Start Start_2) (abs Start) (ite StartBool Start_2 Start_1)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (or StartBool_1 StartBool_1) (<= Start_5 Start_8) (= Start_8 Start_9) (>= Start_4 Start_2) (> Start_2 Start_9)))
   (Start_11 Int (0 (+ Start Start_9) (* Start_1 Start) (abs Start_6)))
   (Start_12 Int (x))
   (Start_10 Int (5 2 3 (- Start_10) (* Start_11 Start_2) (mod Start_12 Start_7) (abs Start_1) (ite StartBool_1 Start_11 Start_7)))
   (Start_4 Int (y 0 (- Start_4) (+ Start_1 Start_3) (* Start_1 Start_2) (div Start_3 Start_4)))
   (Start_3 Int (x (- Start_5) (- Start Start) (+ Start_1 Start_4) (* Start_5 Start_1) (mod Start_5 Start)))
   (Start_2 Int (4 0 (- Start Start_3) (div Start_1 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (<= Start_3 Start_6) (= Start_6 Start_1) (> Start_2 Start_4)))
   (Start_5 Int (5 1 (- Start_2) (- Start_2 Start) (div Start_1 Start_1) (mod Start_2 Start_2)))
   (StartBool_2 Bool (true (not StartBool) (< Start_1 Start_3) (>= Start_5 Start_6)))
   (Start_6 Int (2 1 (- Start_7 Start) (+ Start_5 Start_5)))
   (Start_7 Int (4 (- Start Start_4) (* Start_8 Start_7)))
   (Start_1 Int (3 y (- Start_6 Start_6) (* Start Start_1) (div Start_6 Start_2)))
   (Start_8 Int (x 5 (- Start_7 Start_7) (+ Start Start_6) (div Start_7 Start) (mod Start_3 Start_2) (abs Start_2) (ite StartBool_1 Start_1 Start_6)))
   (Start_9 Int (y 5 3 (- Start_6) (div Start_8 Start_4) (abs Start_10) (ite StartBool_2 Start_10 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 0 (- x 5))))

(check-synth)
