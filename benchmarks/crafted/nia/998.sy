(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_9 Int) (Start_14 Int) (Start_13 Int) (Start_15 Int) (StartBool_4 Bool) (Start_3 Int) (StartBool_5 Bool) (Start_7 Int) (Start_6 Int) (Start_1 Int) (StartBool_1 Bool) (Start_11 Int) (Start_8 Int) (Start_2 Int) (Start_10 Int) (StartBool_2 Bool) (Start_5 Int) (StartBool_3 Bool) (Start_12 Int))
  ((Start Int (4 (* Start_1 Start) (mod Start_1 Start_2) (abs Start_3) (ite StartBool Start_2 Start_1)))
   (StartBool Bool (false (or StartBool_5 StartBool_4) (< Start_4 Start_4) (>= Start_13 Start_13) (> Start_5 Start_2)))
   (Start_4 Int (y 1 (* Start_14 Start_9) (div Start_13 Start_2) (mod Start_8 Start_5) (abs Start_7)))
   (Start_9 Int (4 3 2 1 (- Start_4) (- Start_10 Start_7) (div Start_6 Start_7) (ite StartBool_3 Start_1 Start_6)))
   (Start_14 Int (5 2 y (- Start_3) (+ Start_8 Start_3) (* Start_13 Start_12) (div Start_3 Start_6)))
   (Start_13 Int (0 1 x 2 (- Start_2 Start) (+ Start_8 Start) (* Start_9 Start_1) (mod Start_2 Start_14) (abs Start_4)))
   (Start_15 Int (x y 4 0 1 2 3 5 (- Start_10) (+ Start_12 Start_12) (div Start_9 Start_15) (abs Start_10)))
   (StartBool_4 Bool (false (and StartBool_5 StartBool_5) (or StartBool_1 StartBool_2) (< Start_4 Start_8) (<= Start_11 Start_6) (>= Start_10 Start_11) (> Start_6 Start_12)))
   (Start_3 Int (0 (- Start_2) (- Start_2 Start_3) (+ Start_2 Start_3) (* Start Start_4) (div Start_3 Start_3) (abs Start) (ite StartBool Start_5 Start_5)))
   (StartBool_5 Bool (true (not StartBool_3) (<= Start_13 Start_5) (= Start_12 Start_11) (>= Start_4 Start_7) (> Start_9 Start_1)))
   (Start_7 Int (y (- Start_7) (+ Start Start_3) (mod Start_1 Start_3) (abs Start_1) (ite StartBool Start_4 Start)))
   (Start_6 Int (x 0 1 (+ Start_6 Start_1) (div Start_6 Start_4) (mod Start_8 Start_1) (abs Start_8)))
   (Start_1 Int (3 4 (- Start_8) (- Start_1 Start_15) (* Start_9 Start_1) (mod Start_3 Start_7)))
   (StartBool_1 Bool (true (or StartBool_2 StartBool_1) (< Start_6 Start_4) (<= Start_6 Start_4) (> Start_8 Start_6)))
   (Start_11 Int (4 (- Start_8) (- Start_6 Start_3) (* Start_8 Start) (div Start_13 Start_3) (mod Start_9 Start_9) (abs Start_4)))
   (Start_8 Int (0 (+ Start_4 Start_4) (* Start_5 Start_7) (abs Start_9) (ite StartBool_1 Start_4 Start_4)))
   (Start_2 Int (2 (- Start_3) (+ Start_9 Start_2) (mod Start_4 Start_6) (abs Start_14)))
   (Start_10 Int (5 0 x 4 2 y 3 (- Start_4) (- Start_7 Start_4) (+ Start Start) (* Start_8 Start_4) (div Start_2 Start_8)))
   (StartBool_2 Bool (false true (not StartBool_3) (<= Start_10 Start_1) (>= Start_2 Start_1) (> Start_4 Start_7)))
   (Start_5 Int (4 2 5 y 3 (mod Start_6 Start_7) (abs Start_2)))
   (StartBool_3 Bool (true false (not StartBool_1) (or StartBool_4 StartBool_1) (>= Start_1 Start_4)))
   (Start_12 Int (2 (- Start_12) (+ Start_5 Start_5) (abs Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 (mod 5 y))))

(check-synth)
