(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_6 Int) (Start_2 Int) (Start_8 Int) (Start_5 Int) (Start_7 Int) (Start_9 Int) (Start_4 Int) (StartBool_1 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_10 Int) (Start_11 Int))
  ((Start Int (4 2 (- Start_1) (+ Start_1 Start) (abs Start_1) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (true false (< Start_1 Start_11) (>= Start_7 Start) (> Start_2 Start_3)))
   (Start_1 Int (3 4 2 5 x (* Start_6 Start_4) (div Start_11 Start_2)))
   (Start_6 Int (y 1 5 (- Start_2 Start_4) (* Start Start_5) (div Start Start_3) (mod Start_2 Start)))
   (Start_2 Int (0 5 1 x (- Start_1) (- Start_3 Start_4) (+ Start_5 Start_1) (div Start_2 Start) (mod Start_1 Start_6) (abs Start_6)))
   (Start_8 Int (x (- Start_4 Start_7) (+ Start_3 Start_1) (* Start_7 Start_9) (mod Start_6 Start_8)))
   (Start_5 Int (1 3 (- Start Start) (div Start_7 Start_6) (abs Start_6)))
   (Start_7 Int (3 (div Start_8 Start)))
   (Start_9 Int (3 1 5 x y (- Start_6 Start_4) (+ Start_4 Start_3) (div Start_6 Start_7)))
   (Start_4 Int (3 x 5 (- Start_5 Start_4) (+ Start_3 Start_3) (mod Start Start_9)))
   (StartBool_1 Bool (true (= Start_1 Start_10)))
   (Start_3 Int (2 (mod Start_1 Start_7)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_2) (= Start_5 Start_9) (> Start_9 Start_3)))
   (Start_10 Int (4 2 3 5 x (- Start_7 Start_1) (+ Start Start_7) (div Start_11 Start_10) (abs Start_6) (ite StartBool_2 Start_3 Start_7)))
   (Start_11 Int (5 (- Start_10) (- Start_6 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- x))))

(check-synth)
