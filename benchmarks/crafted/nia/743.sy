(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_1 Int) (Start_2 Int) (StartBool_5 Bool) (Start_9 Int) (StartBool_3 Bool) (Start_4 Int) (StartBool_6 Bool) (StartBool_2 Bool) (Start_3 Int) (Start_5 Int) (Start_8 Int) (Start_6 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_7 Int))
  ((Start Int (x (- Start) (- Start Start_1) (div Start_2 Start_2)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_2 StartBool_1) (<= Start_4 Start_9)))
   (Start_10 Int (x y 2 (+ Start_8 Start) (* Start_4 Start_6) (div Start_4 Start_10) (mod Start_8 Start_8)))
   (Start_1 Int (2 (- Start_4 Start_1) (+ Start_8 Start) (div Start_5 Start_6) (ite StartBool_1 Start_9 Start_10)))
   (Start_2 Int (5 1 (- Start_2 Start_2) (abs Start_1) (ite StartBool_1 Start_2 Start_2)))
   (StartBool_5 Bool (true false (<= Start_3 Start_2) (> Start_6 Start)))
   (Start_9 Int (3 (* Start_10 Start_5) (abs Start_8) (ite StartBool_6 Start_9 Start_2)))
   (StartBool_3 Bool (true (not StartBool_4) (= Start_5 Start_5)))
   (Start_4 Int (4 y (- Start_3) (- Start_2 Start) (+ Start Start_3) (div Start_3 Start_1) (abs Start_4)))
   (StartBool_6 Bool (true false (not StartBool) (>= Start_4 Start_4) (> Start_7 Start_7)))
   (StartBool_2 Bool (false true (and StartBool StartBool_2) (< Start_3 Start_6) (<= Start_1 Start_1) (>= Start_3 Start_1) (> Start Start_1)))
   (Start_3 Int (3 (+ Start_1 Start) (* Start_4 Start_1) (abs Start_3)))
   (Start_5 Int (1 y (- Start_1) (- Start_4 Start_5) (ite StartBool_5 Start_3 Start_4)))
   (Start_8 Int (x 2 3 4 (- Start_9) (+ Start_5 Start_9)))
   (Start_6 Int (y 1 2 0 (- Start_5) (+ Start Start_5) (ite StartBool_4 Start_1 Start_2)))
   (StartBool_4 Bool (false (not StartBool_6) (and StartBool_4 StartBool_3) (< Start_6 Start) (<= Start Start_4) (> Start Start_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_3) (< Start Start) (<= Start_2 Start_1) (= Start_3 Start_4)))
   (Start_7 Int (2 (div Start_6 Start_4) (mod Start_1 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod y 3) 4)))

(check-synth)
