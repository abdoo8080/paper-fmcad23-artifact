(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_14 Int) (Start_2 Int) (Start_3 Int) (StartBool_3 Bool) (Start_12 Int) (Start_13 Int) (Start_10 Int) (Start_1 Int) (StartBool_4 Bool) (Start_6 Int) (StartBool_1 Bool) (Start_4 Int) (StartBool_5 Bool) (StartBool_2 Bool) (Start_8 Int) (Start_9 Int) (Start_5 Int) (Start_11 Int) (Start_7 Int))
  ((Start Int (4 (- Start_1) (- Start_1 Start_2) (+ Start_1 Start_3) (div Start Start_3) (mod Start_3 Start_3) (abs Start_4) (ite StartBool_1 Start_5 Start_1)))
   (StartBool Bool (false true (= Start_4 Start_7) (>= Start_5 Start_1) (> Start_3 Start_11)))
   (Start_15 Int (1 (- Start_8 Start) (mod Start_11 Start_9)))
   (Start_14 Int (2 (- Start_3) (div Start_9 Start_2) (abs Start_4)))
   (Start_2 Int (x 5 (- Start_6) (- Start Start_14) (* Start_11 Start_7) (abs Start_3) (ite StartBool_1 Start_10 Start_10)))
   (Start_3 Int (0 1 x (- Start_1) (+ Start_1 Start_13) (div Start_3 Start_5)))
   (StartBool_3 Bool (true (not StartBool_2) (or StartBool_3 StartBool_3) (< Start Start_6) (<= Start_4 Start) (> Start_8 Start_11)))
   (Start_12 Int (1 (- Start_8 Start_13) (div Start_7 Start_12) (mod Start_2 Start_7)))
   (Start_13 Int (x (- Start_12) (+ Start_12 Start_6) (div Start_3 Start_7) (abs Start_11)))
   (Start_10 Int (1 3 (- Start_11) (- Start_8 Start_4) (+ Start_6 Start_9) (* Start Start_2)))
   (Start_1 Int (1 5 (- Start_8 Start_4) (* Start_13 Start) (div Start_12 Start_6) (mod Start_1 Start_15) (abs Start_3)))
   (StartBool_4 Bool (false true (or StartBool_4 StartBool_4) (< Start_10 Start_7) (> Start Start_6)))
   (Start_6 Int (0 4 y 3 x (+ Start_6 Start_1) (div Start Start_5) (ite StartBool_2 Start_3 Start)))
   (StartBool_1 Bool (true false (or StartBool_1 StartBool_1) (<= Start_1 Start_4)))
   (Start_4 Int (x 0 3 (- Start_5) (- Start_5 Start_5) (* Start Start_1) (div Start Start_3) (mod Start_6 Start) (abs Start_6) (ite StartBool_1 Start_5 Start_6)))
   (StartBool_5 Bool (true false (< Start_12 Start_5) (<= Start_3 Start_13) (= Start_9 Start_13) (>= Start_4 Start_6) (> Start Start)))
   (StartBool_2 Bool (false (not StartBool_3) (<= Start_5 Start_5) (> Start_7 Start_8)))
   (Start_8 Int (4 (- Start_9) (+ Start_4 Start_4) (div Start_6 Start_4) (mod Start_10 Start)))
   (Start_9 Int (4 (- Start_11)))
   (Start_5 Int (1 2 y 0 (- Start_5 Start_2) (+ Start_1 Start_4) (* Start_5 Start_1) (mod Start Start_5) (abs Start)))
   (Start_11 Int (y (- Start Start_10) (div Start_4 Start_11) (mod Start_6 Start_1) (abs Start_7) (ite StartBool_4 Start Start_4)))
   (Start_7 Int (1 0 (* Start Start_11) (mod Start Start_1) (abs Start_2) (ite StartBool_5 Start_3 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (div x 0) 0)))

(check-synth)
