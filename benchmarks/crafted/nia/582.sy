(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (StartBool_1 Bool) (Start_2 Int) (Start_6 Int) (Start_3 Int) (StartBool_2 Bool) (Start_1 Int) (Start_7 Int) (Start_4 Int) (Start_8 Int) (Start_5 Int))
  ((Start Int (4 y))
   (StartBool Bool (false (not StartBool_1) (or StartBool_1 StartBool) (< Start Start) (<= Start Start_1) (= Start Start) (> Start_1 Start_1)))
   (Start_9 Int (5 0 3 x (- Start_1) (mod Start_5 Start_8) (abs Start) (ite StartBool_1 Start_4 Start_4)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_2) (< Start_8 Start_9) (<= Start_9 Start_6) (>= Start_8 Start_2)))
   (Start_2 Int (y 5 x 1 (- Start_5 Start_4) (* Start_1 Start_6) (div Start_5 Start_7) (mod Start Start_2) (abs Start_6)))
   (Start_6 Int (4 (abs Start_6) (ite StartBool Start_2 Start_2)))
   (Start_3 Int (0 1 y (- Start_4) (- Start_1 Start_4) (div Start_5 Start_4) (abs Start) (ite StartBool_1 Start_5 Start_4)))
   (StartBool_2 Bool (false (or StartBool_1 StartBool_1) (< Start_3 Start_8) (<= Start_2 Start_7) (>= Start_8 Start_5)))
   (Start_1 Int (y 3 0 5 1 x (+ Start Start) (* Start_2 Start_3) (div Start_3 Start) (abs Start_2) (ite StartBool Start_3 Start_1)))
   (Start_7 Int (5 (+ Start Start_6) (* Start Start_6) (div Start_7 Start_2) (abs Start_4) (ite StartBool Start_2 Start)))
   (Start_4 Int (5 1 y x 4 (- Start_3) (+ Start_5 Start_3) (* Start_3 Start_3) (mod Start_6 Start_6) (abs Start) (ite StartBool_1 Start_1 Start_3)))
   (Start_8 Int (y (- Start_1) (- Start Start) (+ Start_1 Start_3) (* Start Start_2) (div Start_6 Start_9)))
   (Start_5 Int (0 (abs Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div 3 0) 2)))

(check-synth)
