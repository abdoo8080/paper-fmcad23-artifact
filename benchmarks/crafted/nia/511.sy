(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_6 Bool) (Start_15 Int) (Start_13 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_14 Int) (StartBool_2 Bool) (Start_8 Int) (Start_3 Int) (Start_9 Int) (Start_2 Int) (Start_5 Int) (StartBool_3 Bool) (Start_6 Int) (Start_7 Int) (Start_4 Int) (Start_1 Int) (Start_10 Int) (Start_16 Int) (Start_11 Int) (Start_12 Int))
  ((Start Int (4 (* Start Start) (div Start Start) (mod Start Start_1)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (or StartBool StartBool) (= Start Start_3) (> Start_4 Start_5)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_4) (or StartBool_5 StartBool_6) (< Start_2 Start_15) (= Start_3 Start_13)))
   (StartBool_6 Bool (true (not StartBool_5) (and StartBool_6 StartBool) (<= Start_9 Start_5) (>= Start_9 Start_15) (> Start_7 Start_16)))
   (Start_15 Int (4 y (- Start_1 Start_9) (abs Start_1) (ite StartBool_3 Start Start_2)))
   (Start_13 Int (2 (+ Start_6 Start_3) (div Start_7 Start_8) (abs Start_3) (ite StartBool_5 Start_14 Start_4)))
   (StartBool_5 Bool (false true (not StartBool_6) (< Start_3 Start_12) (>= Start_12 Start_15)))
   (StartBool_1 Bool (false true (not StartBool) (or StartBool_4 StartBool_3) (= Start_13 Start_8)))
   (Start_14 Int (3 (- Start_9) (- Start_9 Start_11) (+ Start_3 Start_10) (div Start_15 Start_15) (mod Start_5 Start_11) (abs Start_6)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_2 StartBool) (or StartBool StartBool_1) (<= Start_12 Start) (>= Start Start_4)))
   (Start_8 Int (0 (- Start_3) (- Start_11 Start_8) (* Start_8 Start_1) (mod Start_7 Start_7) (abs Start_3)))
   (Start_3 Int (1 (- Start_7 Start_4) (+ Start_5 Start_3) (* Start_8 Start) (div Start_2 Start_12) (abs Start_12)))
   (Start_9 Int (x (- Start_8 Start_5) (+ Start_1 Start_8) (* Start_10 Start) (mod Start_7 Start_6) (abs Start_4) (ite StartBool_3 Start_11 Start_7)))
   (Start_2 Int (y 5 3 0 2 4 x 1 (+ Start_2 Start_1) (* Start_1 Start_1) (mod Start_2 Start_2)))
   (Start_5 Int (1 4 2 (- Start_6) (div Start_6 Start) (mod Start_2 Start_2) (abs Start_4)))
   (StartBool_3 Bool (false true (or StartBool_2 StartBool_2) (= Start_12 Start_7) (>= Start_6 Start_4) (> Start_8 Start)))
   (Start_6 Int (2 (- Start_6 Start_3) (div Start_5 Start_1) (mod Start_5 Start_7) (ite StartBool Start_2 Start_7)))
   (Start_7 Int (5 4 (* Start Start_2) (mod Start_1 Start_4)))
   (Start_4 Int (1 (- Start_6) (- Start_6 Start_5) (* Start_7 Start_8) (div Start_9 Start_10)))
   (Start_1 Int (x 4 1 y (- Start) (mod Start_1 Start_2) (ite StartBool Start_1 Start_2)))
   (Start_10 Int (3 4 2 (div Start_7 Start_5) (ite StartBool Start_8 Start)))
   (Start_16 Int (1 y 5 (div Start_16 Start_14) (mod Start_10 Start_2) (abs Start_7) (ite StartBool_6 Start_1 Start_14)))
   (Start_11 Int (4 (- Start) (* Start_11 Start_8) (div Start_10 Start_1) (abs Start_2)))
   (Start_12 Int (2 x (- Start_5 Start_7) (+ Start_9 Start_8) (div Start_3 Start_5) (mod Start_10 Start_5) (abs Start_11) (ite StartBool_1 Start_9 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (* 2 y) 0)))

(check-synth)
