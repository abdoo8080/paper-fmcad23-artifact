(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_12 Int) (Start_10 Int) (Start_1 Int) (Start_8 Int) (Start_11 Int) (Start_3 Int) (Start_5 Int) (Start_6 Int) (Start_4 Int) (StartBool_1 Bool) (StartBool_3 Bool) (StartBool_2 Bool) (Start_9 Int) (Start_2 Int) (Start_7 Int) (StartBool_4 Bool))
  ((Start Int (5 (- Start) (- Start Start_1) (* Start Start_2) (mod Start Start_2) (ite StartBool_1 Start_3 Start)))
   (StartBool Bool (true false (not StartBool) (and StartBool_1 StartBool) (>= Start_13 Start_12)))
   (Start_13 Int (0 4 (- Start_12 Start_4) (* Start_11 Start_13) (div Start_11 Start_12) (ite StartBool Start_5 Start_8)))
   (Start_12 Int (5 3 4 1 2 (- Start_8) (- Start_12 Start_7) (+ Start_11 Start_1) (div Start_6 Start_8) (abs Start_13)))
   (Start_10 Int (5 (- Start_1 Start_2) (* Start_11 Start_7) (div Start_12 Start_7) (abs Start_11)))
   (Start_1 Int (1 x (- Start_1) (- Start_4 Start_10) (div Start_11 Start_7) (abs Start_8) (ite StartBool_3 Start_10 Start)))
   (Start_8 Int (x y (+ Start_9 Start_3) (div Start Start_8) (ite StartBool_4 Start_8 Start)))
   (Start_11 Int (3 y 1 2 5 x 0 (- Start_10) (+ Start_3 Start_3) (div Start_4 Start_3) (mod Start_2 Start_3) (abs Start_5)))
   (Start_3 Int (4 y (- Start_2) (* Start_1 Start_4) (div Start_1 Start_5) (mod Start_2 Start_3)))
   (Start_5 Int (x 1 (- Start_1) (* Start_2 Start_6) (abs Start_4)))
   (Start_6 Int (0 (- Start_1) (- Start_1 Start_4) (div Start_3 Start_6) (abs Start_2) (ite StartBool_1 Start_6 Start_3)))
   (Start_4 Int (y 2 (* Start_2 Start)))
   (StartBool_1 Bool (true (and StartBool StartBool) (or StartBool_2 StartBool_3) (= Start Start_1)))
   (StartBool_3 Bool (true (not StartBool_1) (or StartBool_2 StartBool_3) (< Start_2 Start_2) (= Start_5 Start_4)))
   (StartBool_2 Bool (false (not StartBool) (= Start_2 Start_3)))
   (Start_9 Int (4 (* Start Start_2) (div Start_3 Start_5) (mod Start Start_7)))
   (Start_2 Int (3 x (+ Start_4 Start_5) (* Start Start_1) (ite StartBool_4 Start Start_3)))
   (Start_7 Int (5 3 4 (- Start_1 Start_8)))
   (StartBool_4 Bool (true (not StartBool) (and StartBool_2 StartBool_2) (or StartBool_2 StartBool_4) (= Start_3 Start_2) (>= Start_1 Start_7) (> Start_2 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 5 5)))

(check-synth)
