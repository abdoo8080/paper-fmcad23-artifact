(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_12 Int) (StartBool_7 Bool) (StartBool_5 Bool) (StartBool_6 Bool) (Start_17 Int) (Start_16 Int) (Start_10 Int) (Start_15 Int) (Start_14 Int) (StartBool_4 Bool) (Start_13 Int) (Start_11 Int) (Start_3 Int) (Start_5 Int) (StartBool_2 Bool) (Start_4 Int) (Start_2 Int) (Start_9 Int) (Start_18 Int) (StartBool_1 Bool) (Start_7 Int) (Start_6 Int) (StartBool_3 Bool) (Start_1 Int) (Start_8 Int))
  ((Start Int (3 (- Start) (+ Start Start) (div Start Start_1) (mod Start Start_1) (abs Start_2) (ite StartBool_1 Start Start_3)))
   (StartBool Bool (false (not StartBool) (= Start_19 Start_2) (> Start_19 Start_15)))
   (Start_19 Int (5 3 (- Start_12) (div Start_17 Start_15) (abs Start_8) (ite StartBool_6 Start_18 Start_4)))
   (Start_12 Int (y 0 2 3 (+ Start_12 Start_6) (* Start_10 Start_1) (abs Start_10)))
   (StartBool_7 Bool (true false (not StartBool_2) (and StartBool_5 StartBool) (or StartBool_7 StartBool_7) (<= Start_8 Start_13) (>= Start_6 Start_13) (> Start_13 Start_12)))
   (StartBool_5 Bool (false true (or StartBool_2 StartBool_7) (< Start_12 Start_14) (<= Start_5 Start_18)))
   (StartBool_6 Bool (true (< Start_1 Start_11) (<= Start_17 Start_10) (>= Start_7 Start_6)))
   (Start_17 Int (y (- Start_17) (- Start_12 Start_14) (+ Start_15 Start_17) (* Start_6 Start_12) (mod Start_2 Start_12)))
   (Start_16 Int (2 0 x y 4 (- Start_9) (* Start Start_2) (mod Start_5 Start)))
   (Start_10 Int (x 3 5 4 y 0 1 2 (+ Start_1 Start_1) (div Start_10 Start_14) (ite StartBool_5 Start_4 Start_3)))
   (Start_15 Int (0 (- Start_2 Start_5) (div Start_14 Start_16) (abs Start_9)))
   (Start_14 Int (0 5 2 (- Start_7 Start_8) (+ Start_6 Start_9) (* Start_12 Start_13) (mod Start_5 Start_5) (abs Start_15) (ite StartBool_4 Start_11 Start_7)))
   (StartBool_4 Bool (true (and StartBool_5 StartBool_3) (or StartBool_3 StartBool_6) (< Start_6 Start_12) (<= Start Start_7) (= Start_3 Start_12) (> Start_8 Start_14)))
   (Start_13 Int (4 2 1 (- Start_8 Start_13) (+ Start_11 Start_4) (div Start_8 Start_9) (ite StartBool_4 Start_13 Start_11)))
   (Start_11 Int (5 4 y (- Start_9) (+ Start_8 Start_6) (* Start_2 Start_12) (div Start_13 Start_7) (abs Start_7) (ite StartBool_1 Start_4 Start_8)))
   (Start_3 Int (2 (- Start_2) (- Start_2 Start_2) (* Start_4 Start_3) (abs Start_3)))
   (Start_5 Int (2 3 (- Start_3) (+ Start Start_2) (div Start Start_4) (mod Start_2 Start) (abs Start) (ite StartBool_3 Start_6 Start_7)))
   (StartBool_2 Bool (false (not StartBool) (= Start_3 Start_3)))
   (Start_4 Int (0 (+ Start_4 Start_3) (* Start_1 Start_4) (div Start_2 Start) (ite StartBool Start_3 Start_4)))
   (Start_2 Int (0 (- Start Start_1) (div Start_7 Start_1) (mod Start_5 Start_3) (ite StartBool_2 Start_5 Start_2)))
   (Start_9 Int (3 (- Start_9) (- Start_7 Start_10) (div Start_9 Start_6) (mod Start_11 Start_6) (abs Start_8)))
   (Start_18 Int (2 (- Start_17) (+ Start_10 Start_1) (* Start_12 Start_11) (div Start_6 Start_18)))
   (StartBool_1 Bool (false (or StartBool_2 StartBool_1) (< Start_4 Start_1) (<= Start_2 Start) (= Start_4 Start_3) (>= Start Start_5)))
   (Start_7 Int (4 (+ Start_3 Start) (ite StartBool_1 Start_3 Start_6)))
   (Start_6 Int (5 x 3 y (- Start_7) (div Start_3 Start_4) (abs Start_5) (ite StartBool_2 Start_3 Start)))
   (StartBool_3 Bool (false (not StartBool_3) (and StartBool_1 StartBool_3) (>= Start_7 Start_6)))
   (Start_1 Int (0 y 3 (- Start_3 Start_1) (div Start_8 Start_6) (abs Start_4)))
   (Start_8 Int (3 (- Start_6) (+ Start Start_7) (mod Start_3 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 1 (- x))))

(check-synth)
