(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_3 Int) (Start_7 Int) (Start_4 Int) (Start_6 Int) (Start_2 Int) (Start_5 Int))
  ((Start Int (2 (- Start) (- Start_1 Start) (* Start_1 Start_2) (div Start_1 Start) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (true false (not StartBool) (= Start_6 Start_5) (>= Start Start_6)))
   (Start_1 Int (2 (- Start_7) (- Start Start_5) (+ Start_1 Start_3) (* Start_4 Start_7) (div Start_4 Start) (ite StartBool Start_4 Start_3)))
   (Start_3 Int (0 (- Start) (- Start_6 Start_4) (* Start_3 Start_5) (abs Start_1)))
   (Start_7 Int (2 (- Start_1 Start_1) (div Start_2 Start_1) (mod Start_6 Start_7) (abs Start_4)))
   (Start_4 Int (1 3 (+ Start_7 Start_2) (div Start_2 Start_7) (mod Start_4 Start_3) (abs Start_6) (ite StartBool Start_4 Start_3)))
   (Start_6 Int (4 5 (* Start_3 Start_3) (mod Start_1 Start_3)))
   (Start_2 Int (y (- Start_1 Start_3) (+ Start Start) (div Start_4 Start_4) (mod Start_3 Start_4) (abs Start) (ite StartBool Start_5 Start_5)))
   (Start_5 Int (x (- Start Start_3) (* Start_3 Start_2) (div Start_3 Start_6) (mod Start_6 Start_2) (abs Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div (mod y x) 0) 4)))

(check-synth)
