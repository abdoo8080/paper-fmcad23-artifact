(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_1 Int) (Start_6 Int) (Start_7 Int) (Start_5 Int) (Start_4 Int) (StartBool_5 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_9 Int) (Start_2 Int) (StartBool_3 Bool) (Start_8 Int) (StartBool_4 Bool) (Start_10 Int))
  ((Start Int (3 x (- Start) (- Start Start) (mod Start Start_1)))
   (StartBool Bool (true (or StartBool_1 StartBool) (<= Start_5 Start) (> Start_7 Start_10)))
   (StartBool_1 Bool (true false (not StartBool_2) (< Start_7 Start_5) (<= Start_5 Start_2) (= Start_6 Start_7) (>= Start_2 Start_6)))
   (Start_1 Int (5 3 (* Start_2 Start_3) (div Start_1 Start_4) (abs Start_5)))
   (Start_6 Int (3 0 (- Start_6 Start_2) (+ Start_3 Start_2) (* Start_1 Start_7) (div Start_3 Start_6) (abs Start_6) (ite StartBool Start_4 Start_4)))
   (Start_7 Int (5 x 3 4 (- Start_3) (* Start_4 Start_2) (div Start_1 Start_4) (mod Start_3 Start_2) (abs Start_1) (ite StartBool Start_6 Start_3)))
   (Start_5 Int (y 5 (- Start) (mod Start_4 Start_3)))
   (Start_4 Int (2 (- Start_3 Start_3) (* Start_6 Start_5) (div Start_1 Start_3)))
   (StartBool_5 Bool (true (or StartBool StartBool_3) (<= Start_1 Start_3) (= Start Start_5) (> Start_3 Start_5)))
   (Start_3 Int (1 3 2 x 4 (- Start) (+ Start_4 Start_3) (* Start_3 Start_8) (div Start_5 Start_1) (ite StartBool_1 Start Start_7)))
   (StartBool_2 Bool (false true (or StartBool_3 StartBool_3) (<= Start_9 Start_2)))
   (Start_9 Int (0 (+ Start_7 Start) (* Start_4 Start_3) (mod Start_8 Start_7) (abs Start_3)))
   (Start_2 Int (x 2 1 (- Start_10) (- Start_9 Start_7) (div Start_1 Start_9) (mod Start_2 Start_9)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_4 StartBool_4) (or StartBool_4 StartBool_2) (>= Start_6 Start_1)))
   (Start_8 Int (x (- Start) (+ Start Start_8) (mod Start_9 Start_5)))
   (StartBool_4 Bool (false (not StartBool_3) (or StartBool StartBool_5) (>= Start_10 Start_3)))
   (Start_10 Int (x (- Start_6) (+ Start_5 Start_7) (mod Start_8 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod (mod 4 y) 5) y)))

(check-synth)
