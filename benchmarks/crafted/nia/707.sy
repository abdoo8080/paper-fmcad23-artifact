(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_9 Int) (StartBool_4 Bool) (Start_7 Int) (Start_1 Int) (Start_4 Int) (Start_8 Int) (Start_5 Int) (Start_2 Int) (StartBool_2 Bool) (Start_11 Int) (Start_3 Int) (Start_6 Int) (Start_10 Int))
  ((Start Int (3 (- Start_1) (* Start_1 Start_1)))
   (StartBool Bool (true false (< Start_4 Start_11) (= Start_8 Start_10) (>= Start_6 Start_9) (> Start_12 Start_1)))
   (Start_12 Int (y 3 (- Start_1) (- Start_5 Start_6) (div Start_7 Start_7)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_4) (= Start_4 Start_2)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (= Start_1 Start_4) (>= Start Start_4)))
   (Start_9 Int (2 5 4 x 0 3 y 1 (- Start_6) (+ Start_4 Start_7) (* Start_10 Start_1) (ite StartBool_3 Start_6 Start_8)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_3 StartBool_2) (<= Start_2 Start_7) (= Start_1 Start_5)))
   (Start_7 Int (4 2 1 5 y (- Start_5) (* Start_8 Start_8) (div Start_2 Start_7) (ite StartBool_4 Start_5 Start_2)))
   (Start_1 Int (2 0 (- Start_2) (- Start_2 Start_1) (div Start_2 Start) (mod Start_3 Start) (ite StartBool_1 Start_1 Start)))
   (Start_4 Int (1 (* Start_1 Start_2) (div Start_3 Start_2)))
   (Start_8 Int (1 (- Start_9) (- Start_9 Start) (+ Start_4 Start_10) (abs Start_7) (ite StartBool_1 Start_3 Start_5)))
   (Start_5 Int (1 (- Start_1) (+ Start_4 Start_2) (* Start_3 Start) (abs Start_3)))
   (Start_2 Int (x y (- Start_4) (- Start_3 Start_2) (+ Start_2 Start_1) (div Start Start_5) (mod Start_5 Start_3) (abs Start_1) (ite StartBool_2 Start_2 Start)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_1 StartBool_2) (or StartBool StartBool_4) (< Start_6 Start) (> Start_4 Start_6)))
   (Start_11 Int (4 y 1 (- Start_1) (+ Start_10 Start_12) (* Start_11 Start_5) (div Start_12 Start_4) (abs Start_1)))
   (Start_3 Int (y 5 (- Start) (- Start_2 Start_2) (+ Start_5 Start_4) (div Start_2 Start_4) (abs Start)))
   (Start_6 Int (3 0 1 (- Start) (- Start_4 Start_2) (mod Start Start_5) (ite StartBool_2 Start_4 Start_6)))
   (Start_10 Int (4 3 0 1 y 2 (- Start_2) (- Start_10 Start_1) (+ Start_8 Start_4) (* Start_7 Start_1) (abs Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- 5) 0)))

(check-synth)
