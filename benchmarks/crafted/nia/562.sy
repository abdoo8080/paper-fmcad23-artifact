(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_1 Int) (Start_6 Int) (Start_9 Int) (StartBool_1 Bool) (Start_11 Int) (Start_4 Int) (Start_3 Int) (StartBool_3 Bool) (Start_2 Int) (StartBool_4 Bool) (StartBool_5 Bool) (Start_7 Int) (Start_5 Int) (StartBool_2 Bool) (Start_10 Int) (Start_13 Int) (Start_8 Int))
  ((Start Int (4 1 (- Start_1) (- Start_2 Start) (+ Start_3 Start_2) (* Start Start_2) (div Start Start_1) (ite StartBool_1 Start_3 Start)))
   (StartBool Bool (true (not StartBool_2) (or StartBool_5 StartBool) (<= Start Start_4) (= Start_11 Start_5)))
   (Start_12 Int (1 4 x (- Start_9 Start_1) (* Start_1 Start) (abs Start_2) (ite StartBool_5 Start_10 Start_11)))
   (Start_1 Int (5 (div Start_9 Start_6)))
   (Start_6 Int (0 (- Start_1 Start_4) (+ Start_2 Start_11) (* Start_7 Start_3) (div Start_5 Start_1) (abs Start_10) (ite StartBool_2 Start_8 Start_1)))
   (Start_9 Int (5 (div Start_10 Start_4) (abs Start_7) (ite StartBool_3 Start_2 Start_10)))
   (StartBool_1 Bool (true false (< Start_3 Start_2) (<= Start_2 Start_4) (= Start_4 Start_2) (> Start_3 Start_1)))
   (Start_11 Int (0 (- Start_11) (- Start_6 Start_5) (* Start_11 Start_10) (abs Start_7)))
   (Start_4 Int (1 0 4 2 3 y (- Start_4) (- Start_4 Start) (* Start_2 Start_4) (div Start_4 Start_3) (mod Start_2 Start_2) (ite StartBool_1 Start_2 Start)))
   (Start_3 Int (4 (- Start_2) (+ Start_3 Start_4) (* Start_4 Start_1) (div Start_1 Start) (mod Start_2 Start_1) (abs Start_4) (ite StartBool Start Start_4)))
   (StartBool_3 Bool (false (and StartBool StartBool_4) (< Start_7 Start_5) (<= Start_3 Start_5)))
   (Start_2 Int (2 0 (+ Start Start_3) (* Start_2 Start_1) (div Start_4 Start_5) (abs Start_1)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_3 StartBool_2) (> Start_1 Start_4)))
   (StartBool_5 Bool (false (and StartBool_3 StartBool_2) (or StartBool_1 StartBool) (< Start_5 Start_1) (<= Start_7 Start) (>= Start_6 Start_12) (> Start_2 Start_13)))
   (Start_7 Int (x 1 3 (- Start) (- Start_1 Start_4) (* Start_8 Start) (div Start_5 Start_1) (mod Start_1 Start) (abs Start_9)))
   (Start_5 Int (0 3 y x 4 5 (- Start_3) (- Start_3 Start_1) (mod Start_6 Start_1) (abs Start_1) (ite StartBool_2 Start_3 Start_6)))
   (StartBool_2 Bool (true false (not StartBool) (or StartBool_2 StartBool_3) (<= Start_4 Start) (>= Start_6 Start_6)))
   (Start_10 Int (0 4 (+ Start Start) (div Start_9 Start_7) (mod Start Start_5) (abs Start_4)))
   (Start_13 Int (3 (- Start_10 Start) (mod Start_7 Start_13) (ite StartBool Start_13 Start)))
   (Start_8 Int (4 1 3 2 5 (- Start_4) (+ Start_10 Start_8) (mod Start_10 Start_8) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* y (mod y y))))

(check-synth)
