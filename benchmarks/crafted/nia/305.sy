(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_2 Int) (Start_6 Int) (Start_7 Int) (Start_5 Int) (Start_3 Int) (Start_4 Int) (Start_1 Int))
  ((Start Int (y))
   (StartBool Bool (true false (or StartBool StartBool_1) (< Start Start) (= Start Start) (> Start_1 Start)))
   (StartBool_1 Bool (true (<= Start_4 Start_4) (>= Start_6 Start)))
   (Start_2 Int (2 y 0 (- Start_2) (* Start_1 Start_7) (div Start_3 Start_6) (abs Start_4)))
   (Start_6 Int (y 0 4 (- Start) (- Start_4 Start_2) (div Start_5 Start_5)))
   (Start_7 Int (y (- Start_2) (+ Start_1 Start) (mod Start_2 Start_6)))
   (Start_5 Int (0 (div Start Start_5) (ite StartBool Start_6 Start_7)))
   (Start_3 Int (3 2 (div Start_5 Start_5) (mod Start_5 Start_2) (abs Start_4) (ite StartBool_1 Start_4 Start_2)))
   (Start_4 Int (0 (- Start_2 Start_1) (mod Start_1 Start_1)))
   (Start_1 Int (4 2 x (- Start_1) (- Start Start) (* Start_2 Start_3) (mod Start_1 Start_4) (ite StartBool_1 Start_2 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div 0 0))))

(check-synth)
