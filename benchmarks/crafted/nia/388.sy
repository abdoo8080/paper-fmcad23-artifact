(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_2 Int) (Start_13 Int) (StartBool_5 Bool) (Start_12 Int) (Start_7 Int) (Start_4 Int) (Start_3 Int) (Start_5 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_10 Int) (StartBool_4 Bool) (Start_1 Int) (Start_9 Int) (Start_14 Int) (Start_8 Int) (Start_11 Int) (Start_6 Int))
  ((Start Int (0 (+ Start_1 Start) (mod Start Start) (ite StartBool_1 Start_2 Start_3)))
   (StartBool Bool (false true (< Start_12 Start_2) (> Start Start_1)))
   (StartBool_1 Bool (true (not StartBool_3) (and StartBool_5 StartBool) (>= Start_1 Start_3) (> Start_9 Start_2)))
   (Start_2 Int (0 1 4 5 2 x y (- Start_8 Start_2) (+ Start_6 Start) (div Start Start_3) (abs Start_7)))
   (Start_13 Int (x 0 1 4 5 (- Start_5) (- Start_10 Start_3) (abs Start_13) (ite StartBool_4 Start_8 Start_11)))
   (StartBool_5 Bool (false (and StartBool StartBool_2) (< Start_12 Start_8) (<= Start_7 Start_7) (>= Start_14 Start_9)))
   (Start_12 Int (2 (- Start_3 Start_10) (* Start_2 Start_6) (div Start_13 Start_5) (ite StartBool Start_9 Start_13)))
   (Start_7 Int (x 0 5 3 1 4 (- Start_8) (- Start_8 Start_1) (+ Start_8 Start_9) (* Start_7 Start_6) (div Start_2 Start_2) (abs Start_6) (ite StartBool_3 Start_5 Start_7)))
   (Start_4 Int (y 3 (- Start_10) (- Start_11 Start_9) (* Start_7 Start) (div Start_2 Start) (abs Start_12) (ite StartBool_2 Start_3 Start_4)))
   (Start_3 Int (2 0 1 (- Start_4) (- Start_1 Start_4) (div Start_5 Start_1) (abs Start_5)))
   (Start_5 Int (y 4 3 2 (- Start_6) (- Start_7 Start_7) (* Start_5 Start_3) (div Start_1 Start_3) (mod Start_4 Start_4) (abs Start_7) (ite StartBool_2 Start_5 Start_1)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_1) (<= Start_7 Start_8) (>= Start_5 Start_5) (> Start_5 Start_4)))
   (StartBool_3 Bool (true (not StartBool_1) (or StartBool_2 StartBool_4) (< Start_3 Start_5) (= Start_2 Start_1) (> Start_9 Start_1)))
   (Start_10 Int (3 (- Start_3) (- Start_3 Start_9) (+ Start_1 Start_5) (* Start_11 Start_11) (div Start_5 Start_11) (mod Start_11 Start)))
   (StartBool_4 Bool (true false (= Start_9 Start_6) (> Start Start_3)))
   (Start_1 Int (x 0 (- Start_9) (- Start_12 Start_7) (+ Start_12 Start_13) (abs Start_10) (ite StartBool_5 Start_3 Start_12)))
   (Start_9 Int (4 5 x (- Start_2) (- Start_9 Start_10) (abs Start_10)))
   (Start_14 Int (1 x 2 (+ Start_13 Start_2) (div Start_10 Start_2) (ite StartBool_5 Start_14 Start_9)))
   (Start_8 Int (4 x 2 (- Start_2 Start_8) (+ Start_4 Start_6) (* Start_4 Start_3)))
   (Start_11 Int (3 (- Start_10) (+ Start_7 Start) (* Start_8 Start_3) (mod Start_2 Start_1) (abs Start_2)))
   (Start_6 Int (x (- Start_7 Start_5) (* Start Start_5) (mod Start_2 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod x 5) 5)))

(check-synth)
