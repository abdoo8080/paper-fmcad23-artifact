(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_4 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartBool_3 Bool) (Start_3 Int) (Start_2 Int) (Start_1 Int))
  ((Start Int (3 5 (- Start) (- Start Start_1) (* Start Start_1) (abs Start_1) (ite StartBool Start Start)))
   (StartBool Bool (true (and StartBool StartBool_1) (< Start_1 Start) (<= Start_2 Start_2) (= Start Start_1) (> Start_2 Start_1)))
   (StartBool_5 Bool (false (or StartBool_4 StartBool_1) (<= Start_1 Start_4) (>= Start_1 Start) (> Start_2 Start)))
   (StartBool_4 Bool (false (or StartBool_4 StartBool_5) (< Start_1 Start_3) (<= Start_4 Start_1)))
   (Start_4 Int (1 (- Start) (- Start Start_2) (* Start_2 Start_2) (ite StartBool_5 Start_2 Start_1)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_2) (<= Start_1 Start_1) (= Start_2 Start_2)))
   (StartBool_1 Bool (true (not StartBool_2) (or StartBool_1 StartBool) (< Start Start_1) (<= Start_1 Start) (= Start Start_2) (>= Start Start_2) (> Start_3 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_4) (>= Start_2 Start_3)))
   (Start_3 Int (5 (- Start_1) (+ Start_2 Start_1) (* Start_2 Start_1) (div Start_1 Start_1) (abs Start_3) (ite StartBool_1 Start Start)))
   (Start_2 Int (y (- Start_1 Start_1) (+ Start Start_2) (* Start_1 Start) (div Start Start) (mod Start Start_2) (ite StartBool Start Start_2)))
   (Start_1 Int (3 4 y 0 2 (- Start_1) (abs Start_1) (ite StartBool Start Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* (mod 1 0) (abs x)))))

(check-synth)
