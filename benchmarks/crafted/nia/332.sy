(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_12 Int) (Start_9 Int) (Start_2 Int) (Start_10 Int) (Start_3 Int) (Start_5 Int) (Start_11 Int) (StartBool_1 Bool) (Start_8 Int) (Start_7 Int) (StartBool_2 Bool) (Start_4 Int) (Start_6 Int) (Start_1 Int))
  ((Start Int (3 2 1 y (- Start Start_1) (div Start Start_2) (mod Start Start_2) (abs Start_3)))
   (StartBool Bool (false true (not StartBool) (and StartBool_1 StartBool_1) (< Start_12 Start_5) (<= Start_8 Start_10) (= Start_13 Start) (>= Start_5 Start) (> Start_2 Start_2)))
   (Start_13 Int (x 1 4 y (div Start_5 Start_11)))
   (Start_12 Int (2 1 (- Start_5) (- Start_2 Start_12) (mod Start_8 Start_13) (ite StartBool_1 Start_10 Start_1)))
   (Start_9 Int (0 y (- Start_9 Start_2) (+ Start Start_4) (mod Start Start_4)))
   (Start_2 Int (0 3 x 4 y 5 1 (- Start_10 Start_7) (div Start_8 Start_1)))
   (Start_10 Int (x (* Start_8 Start_5) (abs Start_11)))
   (Start_3 Int (5 (- Start_2 Start) (* Start_4 Start_4) (mod Start_2 Start_2) (ite StartBool Start Start_5)))
   (Start_5 Int (2 1 x y (+ Start_1 Start) (* Start_4 Start)))
   (Start_11 Int (3 y x (- Start_7) (ite StartBool Start_4 Start_9)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_1) (< Start_2 Start_1) (= Start_7 Start_10) (> Start_1 Start_5)))
   (Start_8 Int (3 (+ Start_7 Start_7) (* Start_6 Start_9) (div Start_8 Start_2) (abs Start_1)))
   (Start_7 Int (3 2 (+ Start_10 Start_4) (* Start_3 Start_7) (mod Start_3 Start_5) (ite StartBool Start_2 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_2) (< Start_4 Start_5) (<= Start_7 Start_10) (= Start_10 Start_10) (>= Start_5 Start_10) (> Start_5 Start_7)))
   (Start_4 Int (4 y 1 3 x (- Start_2) (- Start_1 Start_5) (+ Start_1 Start) (mod Start_4 Start) (ite StartBool Start_6 Start)))
   (Start_6 Int (0 (- Start_1) (- Start_7 Start_1) (* Start_5 Start_8) (mod Start_3 Start_9) (abs Start)))
   (Start_1 Int (1 3 (- Start_11) (- Start_10 Start_4) (+ Start_6 Start_3) (abs Start_5) (ite StartBool Start Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 2 (- (div 2 x)))))

(check-synth)
