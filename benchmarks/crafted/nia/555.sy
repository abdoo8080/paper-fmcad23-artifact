(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (StartBool_4 Bool) (StartBool_6 Bool) (Start_14 Int) (Start_15 Int) (Start_9 Int) (Start_18 Int) (Start_1 Int) (Start_3 Int) (StartBool_7 Bool) (StartBool_3 Bool) (Start_2 Int) (Start_5 Int) (Start_17 Int) (Start_12 Int) (StartBool_1 Bool) (Start_11 Int) (Start_13 Int) (Start_4 Int) (StartBool_5 Bool) (Start_6 Int) (StartBool_2 Bool) (Start_7 Int) (Start_10 Int) (Start_8 Int))
  ((Start Int (x 2 (+ Start Start) (* Start Start_1) (div Start Start_1) (mod Start_2 Start_2)))
   (StartBool Bool (false true (not StartBool_6) (and StartBool_2 StartBool) (or StartBool_6 StartBool_2) (< Start_18 Start_12) (= Start_14 Start_1) (>= Start_10 Start_14)))
   (Start_16 Int (4 (- Start_14) (+ Start_5 Start_7) (* Start_6 Start_7) (div Start_6 Start_12) (abs Start_17)))
   (StartBool_4 Bool (true false (and StartBool_7 StartBool_1) (>= Start_14 Start_11) (> Start_16 Start_8)))
   (StartBool_6 Bool (true false (= Start_8 Start_6) (> Start_15 Start_13)))
   (Start_14 Int (y (div Start_9 Start_14)))
   (Start_15 Int (4 (- Start_9) (- Start_9 Start_15) (* Start_4 Start_8) (mod Start_1 Start_14)))
   (Start_9 Int (0 (- Start_2) (- Start_3 Start_5) (+ Start_3 Start_4) (ite StartBool_5 Start_5 Start_12)))
   (Start_18 Int (4 (+ Start_10 Start_18) (* Start_6 Start_1) (mod Start_3 Start_9)))
   (Start_1 Int (2 x y (- Start_11 Start) (+ Start_15 Start_15) (* Start_11 Start_7) (mod Start_2 Start_4)))
   (Start_3 Int (4 (- Start_4) (- Start_1 Start_4) (+ Start Start_1) (* Start_5 Start) (div Start Start) (mod Start_6 Start_2)))
   (StartBool_7 Bool (false (or StartBool_4 StartBool_6) (< Start_5 Start_1) (<= Start Start_6)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_2 StartBool_4) (< Start_4 Start) (>= Start_8 Start_3)))
   (Start_2 Int (5 (- Start_2) (* Start_2 Start_1) (div Start_2 Start_3) (mod Start_4 Start) (abs Start_2) (ite StartBool_1 Start_2 Start_4)))
   (Start_5 Int (4 5 (- Start_6 Start_2) (mod Start_3 Start_2) (ite StartBool_2 Start_1 Start_6)))
   (Start_17 Int (5 (+ Start_4 Start_8) (* Start_8 Start_14) (div Start_1 Start_11) (abs Start_4) (ite StartBool_2 Start_6 Start_2)))
   (Start_12 Int (2 y 4 (- Start Start_3) (div Start_11 Start_4) (mod Start Start_4)))
   (StartBool_1 Bool (false (or StartBool_1 StartBool_1) (= Start Start_2)))
   (Start_11 Int (5 (- Start_7) (+ Start_9 Start_10) (abs Start) (ite StartBool_4 Start_8 Start_10)))
   (Start_13 Int (y 3 (- Start_14 Start_4) (* Start Start_3)))
   (Start_4 Int (3 (- Start_4) (div Start_2 Start_4)))
   (StartBool_5 Bool (true (not StartBool_6) (and StartBool StartBool_3) (or StartBool_4 StartBool_6) (< Start_10 Start_11) (<= Start_13 Start_4)))
   (Start_6 Int (2 (- Start) (- Start_1 Start_6) (+ Start Start_3) (* Start_3 Start) (abs Start_6) (ite StartBool_1 Start_6 Start_2)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool StartBool_1) (or StartBool_1 StartBool) (< Start_2 Start_5) (>= Start_7 Start) (> Start_4 Start_4)))
   (Start_7 Int (0 5 (- Start Start_4) (+ Start_7 Start_7) (ite StartBool_3 Start_4 Start)))
   (Start_10 Int (x (- Start_1 Start_1) (+ Start_5 Start_4) (* Start_11 Start_1) (mod Start_2 Start_11) (abs Start_3)))
   (Start_8 Int (x (- Start_9 Start_4) (+ Start_2 Start_10) (* Start_11 Start_11) (ite StartBool_4 Start_1 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 1 (mod (abs (div 2 y)) 0))))

(check-synth)
