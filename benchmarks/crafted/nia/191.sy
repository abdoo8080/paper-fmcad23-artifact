(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_12 Int) (Start_14 Int) (Start_13 Int) (Start_1 Int) (Start_8 Int) (Start_4 Int) (StartBool_2 Bool) (Start_11 Int) (Start_5 Int) (Start_16 Int) (Start_7 Int) (Start_9 Int) (Start_10 Int) (Start_6 Int) (Start_15 Int) (Start_2 Int) (StartBool_1 Bool) (Start_3 Int))
  ((Start Int (2 y (- Start) (- Start Start) (+ Start_1 Start) (* Start_1 Start_1) (abs Start_2)))
   (StartBool Bool (false (and StartBool_1 StartBool_2) (or StartBool_1 StartBool) (< Start Start_9) (<= Start_13 Start_13)))
   (Start_17 Int (x y (- Start_9) (* Start_13 Start_1) (mod Start_3 Start_10) (ite StartBool Start_1 Start_16)))
   (Start_12 Int (1 (+ Start_8 Start_5) (* Start_2 Start_17) (mod Start_3 Start_7) (ite StartBool_2 Start_17 Start_9)))
   (Start_14 Int (0 (+ Start_7 Start_10) (* Start_3 Start_15) (div Start_14 Start_1) (mod Start_5 Start_2)))
   (Start_13 Int (x (+ Start_3 Start_4) (* Start_14 Start_2)))
   (Start_1 Int (y x 3 (- Start_7) (+ Start_6 Start_8) (* Start_12 Start_1) (div Start_11 Start_9) (mod Start_10 Start_12) (ite StartBool Start_7 Start_13)))
   (Start_8 Int (x 2 (- Start_1) (mod Start_1 Start_4) (abs Start_8)))
   (Start_4 Int (0 (- Start_4 Start_1) (* Start Start_2) (mod Start_3 Start_1) (abs Start_4) (ite StartBool_1 Start_5 Start_1)))
   (StartBool_2 Bool (true (or StartBool_2 StartBool_1) (<= Start_9 Start_3) (= Start_2 Start_7) (>= Start_5 Start_8)))
   (Start_11 Int (2 y (- Start_11) (- Start_5 Start_3) (* Start_2 Start_1) (abs Start_5) (ite StartBool_1 Start_4 Start_6)))
   (Start_5 Int (x 0 (- Start_5 Start_6) (+ Start_7 Start_2) (div Start_3 Start_8) (mod Start_1 Start_3) (abs Start_8) (ite StartBool_1 Start_6 Start_3)))
   (Start_16 Int (5 0 x 4 (- Start_14 Start) (+ Start_16 Start_16) (* Start_16 Start_13)))
   (Start_7 Int (3 4 y 0 (- Start_4) (+ Start_6 Start_5) (* Start_4 Start_4) (mod Start_9 Start_9) (abs Start_1) (ite StartBool_2 Start_4 Start_3)))
   (Start_9 Int (0 (- Start) (* Start_1 Start_6) (mod Start_3 Start_10) (abs Start_4)))
   (Start_10 Int (0 (+ Start_5 Start_3) (* Start_1 Start) (mod Start_4 Start_6) (abs Start_10) (ite StartBool_1 Start_3 Start_10)))
   (Start_6 Int (2 (* Start_8 Start_6) (div Start_4 Start_8) (mod Start_4 Start_4)))
   (Start_15 Int (0 y (- Start_16) (- Start_6 Start_2) (+ Start_2 Start_7) (* Start_7 Start_16)))
   (Start_2 Int (4 1 (- Start_3 Start_2) (* Start_4 Start_2) (div Start_3 Start_2) (mod Start_2 Start_2) (abs Start_1)))
   (StartBool_1 Bool (false true (not StartBool_1) (> Start_5 Start_4)))
   (Start_3 Int (1 3 (- Start_6 Start) (+ Start_10 Start_7) (* Start_3 Start_5) (div Start_5 Start_6) (mod Start_5 Start_8) (abs Start_3) (ite StartBool Start Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod y 2) x)))

(check-synth)
