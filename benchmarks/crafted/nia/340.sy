(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_6 Int) (StartBool_2 Bool) (Start_5 Int) (Start_3 Int) (StartBool_1 Bool) (Start_1 Int) (Start_7 Int) (Start_4 Int) (Start_8 Int) (Start_10 Int) (Start_9 Int))
  ((Start Int (5 1 (- Start) (+ Start Start_1) (div Start_2 Start_1) (abs Start_3) (ite StartBool Start_4 Start_1)))
   (StartBool Bool (false (or StartBool StartBool) (< Start_6 Start_5) (<= Start_5 Start_10) (= Start_9 Start_9) (> Start_6 Start_5)))
   (Start_2 Int (x (- Start_4) (+ Start_3 Start_4) (mod Start_6 Start_2)))
   (Start_6 Int (y 0 (- Start_5 Start_6) (* Start_1 Start_3) (div Start_2 Start_4)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_2 StartBool) (or StartBool_2 StartBool_1) (< Start_4 Start_5) (<= Start_2 Start_6)))
   (Start_5 Int (y (- Start_1 Start_4) (div Start_3 Start_4) (abs Start_5) (ite StartBool Start_4 Start_1)))
   (Start_3 Int (3 0 (- Start_5) (- Start_1 Start_5) (+ Start Start_3) (* Start_5 Start_3) (ite StartBool Start_2 Start)))
   (StartBool_1 Bool (false true (not StartBool) (or StartBool_2 StartBool_2) (<= Start_6 Start_6) (> Start_3 Start)))
   (Start_1 Int (0 3 (- Start_2) (- Start_1 Start) (+ Start_7 Start_3) (div Start_6 Start_7) (mod Start_1 Start_2) (ite StartBool_1 Start_3 Start_5)))
   (Start_7 Int (0 5 3 x 1 (- Start_1 Start_8) (mod Start_7 Start_1)))
   (Start_4 Int (2 1 0 y (- Start_4 Start_1) (+ Start_1 Start_2) (div Start_4 Start_5) (abs Start_4)))
   (Start_8 Int (2 3 (- Start_6) (+ Start Start_9) (* Start Start_5) (div Start_10 Start_1) (mod Start_1 Start_3) (abs Start_8) (ite StartBool Start_10 Start_3)))
   (Start_10 Int (2 (* Start_1 Start_7) (div Start_8 Start_7) (abs Start) (ite StartBool_1 Start_3 Start_6)))
   (Start_9 Int (x 3 (- Start_7) (- Start_2 Start_5) (+ Start_9 Start_10) (mod Start_1 Start_5) (ite StartBool Start_2 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod 2 0) 2)))

(check-synth)
