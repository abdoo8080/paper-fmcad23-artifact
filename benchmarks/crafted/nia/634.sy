(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_16 Int) (Start_18 Int) (StartBool_4 Bool) (StartBool_5 Bool) (StartBool_6 Bool) (Start_14 Int) (Start_13 Int) (Start_1 Int) (StartBool_2 Bool) (Start_2 Int) (Start_5 Int) (Start_8 Int) (Start_4 Int) (Start_19 Int) (StartBool_1 Bool) (Start_3 Int) (Start_7 Int) (Start_17 Int) (Start_6 Int) (Start_10 Int) (Start_20 Int) (StartBool_3 Bool) (Start_9 Int) (Start_11 Int) (Start_15 Int) (Start_12 Int))
  ((Start Int (2 (- Start) (- Start Start) (div Start Start) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true false (and StartBool_5 StartBool_7) (< Start_18 Start_11) (>= Start_18 Start_4)))
   (StartBool_7 Bool (false true (or StartBool_4 StartBool_6) (>= Start_19 Start_14) (> Start_14 Start_5)))
   (Start_16 Int (y 4 (- Start_9) (* Start_17 Start_13) (mod Start_9 Start_16) (abs Start_17)))
   (Start_18 Int (4 3 y (+ Start_12 Start_2) (div Start_8 Start_2) (mod Start_13 Start_19) (abs Start_15)))
   (StartBool_4 Bool (true false (or StartBool_1 StartBool_3) (< Start_10 Start_16) (<= Start_6 Start_2)))
   (StartBool_5 Bool (true false (or StartBool StartBool_6)))
   (StartBool_6 Bool (false true (not StartBool_4) (and StartBool_2 StartBool_2) (= Start_13 Start_9) (> Start_12 Start_10)))
   (Start_14 Int (3 4 0 (- Start_13) (- Start_3 Start_10) (+ Start_5 Start) (mod Start_12 Start) (ite StartBool_6 Start_13 Start_6)))
   (Start_13 Int (2 (- Start_14) (mod Start Start_2) (abs Start_11) (ite StartBool_5 Start_12 Start_4)))
   (Start_1 Int (0 5 3 (- Start_2 Start_1) (+ Start Start_1) (mod Start_3 Start_3) (abs Start_2)))
   (StartBool_2 Bool (false true (<= Start_2 Start) (= Start_1 Start_5) (> Start_5 Start_1)))
   (Start_2 Int (1 (- Start_3) (- Start_3 Start_3) (+ Start Start_2) (div Start_1 Start_4) (abs Start) (ite StartBool_1 Start_1 Start_5)))
   (Start_5 Int (y (mod Start_5 Start_4) (abs Start) (ite StartBool_2 Start Start_5)))
   (Start_8 Int (y 1 x 4 5 (* Start Start_9) (div Start_1 Start_2) (abs Start_3) (ite StartBool_5 Start_9 Start_10)))
   (Start_4 Int (3 0 (- Start_1 Start) (mod Start_1 Start_3) (ite StartBool_2 Start_2 Start_1)))
   (Start_19 Int (y x (+ Start_10 Start_8) (div Start_13 Start_19) (mod Start_19 Start_19) (abs Start_20) (ite StartBool Start_10 Start_7)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_3) (or StartBool_1 StartBool_4) (< Start_4 Start) (<= Start Start_6) (> Start_7 Start_6)))
   (Start_3 Int (5 0 (- Start_2) (+ Start Start_2) (ite StartBool_1 Start_2 Start_2)))
   (Start_7 Int (5 (- Start_3 Start_4) (mod Start_3 Start_8) (abs Start_2) (ite StartBool_3 Start_7 Start_8)))
   (Start_17 Int (0 x 5 (+ Start_16 Start_13) (* Start_8 Start_11) (div Start_4 Start_4) (abs Start_1) (ite StartBool Start_6 Start_12)))
   (Start_6 Int (5 (- Start) (- Start_11 Start_11) (+ Start_15 Start) (* Start_4 Start_11)))
   (Start_10 Int (x (- Start_3) (div Start_8 Start_11) (mod Start_1 Start_7) (ite StartBool_5 Start_6 Start_11)))
   (Start_20 Int (0 y (- Start) (- Start_12 Start_6) (* Start_13 Start_20) (abs Start_17)))
   (StartBool_3 Bool (true (not StartBool_6) (or StartBool_3 StartBool_1) (< Start_9 Start_7) (= Start_6 Start_1)))
   (Start_9 Int (0 2 4 (- Start_4) (- Start_10 Start_11) (* Start_13 Start_5) (mod Start_1 Start_9) (abs Start_14)))
   (Start_11 Int (5 2 (- Start_8) (- Start_3 Start_12) (mod Start_7 Start_7)))
   (Start_15 Int (y 1 (- Start_15) (- Start_6 Start_11) (+ Start_14 Start_2) (abs Start_12)))
   (Start_12 Int (5 (- Start_13) (div Start_12 Start_5) (abs Start_4) (ite StartBool_2 Start_7 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* x 2) (mod 5 x))))

(check-synth)
