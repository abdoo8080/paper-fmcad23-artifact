(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_3 Bool) (Start_15 Int) (Start_13 Int) (Start_11 Int) (Start_10 Int) (Start_4 Int) (Start_2 Int) (Start_14 Int) (Start_8 Int) (StartBool_4 Bool) (Start_6 Int) (Start_9 Int) (Start_12 Int) (Start_3 Int) (StartBool_1 Bool) (StartBool_5 Bool) (Start_7 Int) (Start_5 Int) (StartBool_2 Bool))
  ((Start Int (4 1 (* Start Start_1) (mod Start_2 Start_3)))
   (StartBool Bool (true (< Start Start)))
   (Start_1 Int (5 (- Start_11 Start_6) (div Start_4 Start_5) (abs Start_5)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool_3) (<= Start_4 Start_9) (= Start_3 Start_5) (>= Start_2 Start_8)))
   (Start_15 Int (0 (- Start_3) (- Start_15 Start_1) (mod Start_5 Start)))
   (Start_13 Int (1 (- Start_8 Start_1) (+ Start_5 Start_6) (* Start_2 Start_10) (div Start_11 Start_15) (mod Start_7 Start_2) (abs Start_14)))
   (Start_11 Int (5 (- Start_11) (+ Start_14 Start_1) (* Start_6 Start_11) (mod Start_12 Start_4)))
   (Start_10 Int (x (- Start_8) (- Start Start_3) (+ Start_1 Start_5) (abs Start_3)))
   (Start_4 Int (2 (- Start_4 Start_4) (+ Start_2 Start_1) (* Start_1 Start_4) (mod Start_1 Start_5) (abs Start_2) (ite StartBool_1 Start_4 Start_6)))
   (Start_2 Int (2 (- Start_6 Start_6) (* Start_7 Start_8) (div Start_11 Start_7) (abs Start_4) (ite StartBool_2 Start_2 Start_12)))
   (Start_14 Int (5 4 (- Start_14) (* Start_2 Start_7) (div Start_10 Start_6) (abs Start_7) (ite StartBool_2 Start_4 Start_7)))
   (Start_8 Int (y 3 4 5 (+ Start_1 Start_4) (* Start_1 Start_8) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_4 Bool (true false (and StartBool_5 StartBool) (or StartBool_3 StartBool_1) (<= Start_10 Start_9) (= Start_14 Start_8)))
   (Start_6 Int (5 (- Start_2) (* Start_4 Start_1) (mod Start_3 Start_7) (abs Start)))
   (Start_9 Int (4 2 (- Start_4) (- Start_10 Start_5) (+ Start_1 Start_5) (* Start_6 Start_1) (abs Start) (ite StartBool_1 Start_7 Start)))
   (Start_12 Int (3 x 1 (- Start_11) (div Start Start) (ite StartBool_1 Start_9 Start_3)))
   (Start_3 Int (x (- Start_2) (- Start_4 Start_3) (+ Start_2 Start) (mod Start_1 Start)))
   (StartBool_1 Bool (false (not StartBool) (< Start_5 Start_9) (<= Start_3 Start_6) (>= Start_2 Start_9)))
   (StartBool_5 Bool (false (not StartBool_1) (< Start_13 Start_12) (<= Start_14 Start_6) (= Start_9 Start_15) (>= Start_12 Start) (> Start_8 Start_15)))
   (Start_7 Int (1 (- Start_7) (- Start_6 Start_5) (* Start_6 Start_2) (div Start_6 Start) (mod Start_3 Start_5) (abs Start_8) (ite StartBool_1 Start Start_4)))
   (Start_5 Int (x 1 4 (- Start_9) (+ Start Start) (* Start_8 Start_2) (mod Start_10 Start) (abs Start_4)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_2 StartBool_4) (or StartBool_1 StartBool_3) (<= Start_13 Start_5) (>= Start_14 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 5 (+ x 5))))

(check-synth)
