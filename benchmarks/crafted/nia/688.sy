(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (StartBool_5 Bool) (Start_2 Int) (StartBool_4 Bool) (Start_13 Int) (StartBool_3 Bool) (Start_1 Int) (Start_4 Int) (Start_15 Int) (StartBool_2 Bool) (Start_6 Int) (StartBool_1 Bool) (Start_5 Int) (Start_12 Int) (Start_10 Int) (Start_8 Int) (Start_7 Int) (Start_9 Int) (Start_11 Int) (Start_3 Int))
  ((Start Int (y 2 4 (- Start_1 Start_1) (abs Start_1)))
   (StartBool Bool (false true (and StartBool_2 StartBool_5) (<= Start_6 Start_3) (= Start_5 Start_5) (>= Start Start_2) (> Start_4 Start_8)))
   (Start_14 Int (2 (* Start_8 Start_12) (mod Start_15 Start_15) (ite StartBool Start_2 Start_11)))
   (StartBool_5 Bool (true (and StartBool_4 StartBool_1) (or StartBool_2 StartBool_3) (< Start_12 Start_3) (> Start Start_14)))
   (Start_2 Int (0 (- Start_3) (+ Start_8 Start_1) (div Start Start_9) (mod Start_1 Start) (ite StartBool_3 Start_11 Start_8)))
   (StartBool_4 Bool (false true (and StartBool_1 StartBool_4) (< Start_13 Start_4) (> Start_3 Start_4)))
   (Start_13 Int (x (- Start_10) (- Start_4 Start_8) (div Start_7 Start_3) (ite StartBool_1 Start_3 Start_4)))
   (StartBool_3 Bool (false (not StartBool_4) (or StartBool_4 StartBool_3) (<= Start_5 Start_4) (> Start Start_12)))
   (Start_1 Int (x 3 1 (- Start Start_2) (mod Start_3 Start_4) (abs Start_3)))
   (Start_4 Int (4 y (div Start_2 Start_1) (mod Start_5 Start_6) (abs Start_6)))
   (Start_15 Int (2 (* Start_5 Start) (mod Start_15 Start_1) (abs Start_14) (ite StartBool_4 Start Start_13)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool StartBool) (< Start_10 Start_2) (<= Start_2 Start) (= Start_5 Start_9) (>= Start_10 Start_8)))
   (Start_6 Int (1 (- Start_6) (ite StartBool_1 Start_6 Start_3)))
   (StartBool_1 Bool (false (not StartBool_1) (> Start_6 Start_4)))
   (Start_5 Int (y 4 0 (+ Start_7 Start_2) (div Start Start_1)))
   (Start_12 Int (4 0 y 1 5 (- Start_13) (* Start_3 Start_12) (ite StartBool_3 Start_9 Start_13)))
   (Start_10 Int (4 5 (+ Start_1 Start_7) (div Start_2 Start_9) (ite StartBool Start_7 Start_5)))
   (Start_8 Int (4 y 3 (- Start_9 Start_3) (+ Start_3 Start_6) (* Start Start_4) (mod Start Start_2) (ite StartBool_2 Start_4 Start_3)))
   (Start_7 Int (2 x (* Start_1 Start_8) (div Start_1 Start_7) (abs Start_4)))
   (Start_9 Int (4 (- Start_7) (* Start_11 Start_10)))
   (Start_11 Int (x 0 4 (abs Start_10) (ite StartBool_2 Start_11 Start_9)))
   (Start_3 Int (3 (- Start_9) (- Start_10 Start_6) (+ Start_8 Start_4) (* Start Start_10) (ite StartBool_3 Start_10 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* y y))))

(check-synth)
