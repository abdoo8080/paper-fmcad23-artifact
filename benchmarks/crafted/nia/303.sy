(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_6 Int) (StartBool_5 Bool) (StartBool_3 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_9 Int) (Start_4 Int) (Start_2 Int) (Start_10 Int) (Start_7 Int) (StartBool_1 Bool) (Start_8 Int) (Start_11 Int) (Start_5 Int) (Start_12 Int) (StartBool_4 Bool))
  ((Start Int (1 (- Start_1 Start_2) (div Start_2 Start_3) (mod Start Start_3) (ite StartBool Start_3 Start_1)))
   (StartBool Bool (false true (not StartBool_4) (and StartBool_5 StartBool) (< Start Start_10) (>= Start_10 Start) (> Start_5 Start_5)))
   (Start_1 Int (0 (- Start_4 Start_12) (* Start_5 Start_12) (div Start_12 Start_1) (abs Start_5)))
   (Start_6 Int (3 (- Start_12) (* Start_3 Start_11)))
   (StartBool_5 Bool (true (and StartBool_3 StartBool_3) (<= Start_3 Start_2) (> Start_4 Start_4)))
   (StartBool_3 Bool (false (<= Start_12 Start_9) (>= Start_6 Start_4)))
   (Start_3 Int (5 (- Start_2 Start_4) (* Start_2 Start) (abs Start_4) (ite StartBool Start_5 Start)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_5) (< Start_11 Start_3) (<= Start_9 Start_7) (= Start_12 Start_6) (>= Start_4 Start_8)))
   (Start_9 Int (2 y x (- Start_6 Start_8) (div Start_2 Start_10) (mod Start_7 Start_2) (abs Start_1)))
   (Start_4 Int (0 1 x 4 y (- Start_4 Start_4) (+ Start_2 Start_3) (div Start_5 Start_1) (ite StartBool Start_4 Start_5)))
   (Start_2 Int (5 1 x (* Start_5 Start_5) (div Start_6 Start_6) (abs Start_3) (ite StartBool_1 Start_2 Start_1)))
   (Start_10 Int (1 (- Start_2 Start_6) (* Start Start_4) (mod Start_1 Start_9) (ite StartBool_3 Start_11 Start_8)))
   (Start_7 Int (3 5 (- Start_8 Start_6) (+ Start Start_9) (div Start_1 Start_6) (mod Start_2 Start_2) (abs Start_5)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (<= Start_7 Start) (> Start Start_7)))
   (Start_8 Int (2 y x 4 1 (- Start_7 Start_12) (* Start_7 Start_5)))
   (Start_11 Int (y 4 5 (- Start_3) (- Start_1 Start) (* Start_9 Start_3) (div Start Start_11) (mod Start_4 Start_1) (ite StartBool_4 Start_6 Start_11)))
   (Start_5 Int (2 5 x 0 (- Start_3) (- Start_2 Start_4) (div Start_3 Start_4)))
   (Start_12 Int (y (- Start_6) (+ Start Start_3) (mod Start_7 Start_4) (abs Start_5)))
   (StartBool_4 Bool (false (not StartBool_2) (<= Start_11 Start_3) (>= Start_5 Start_2) (> Start_8 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 0 (* x 5))))

(check-synth)
