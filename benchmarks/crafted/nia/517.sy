(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_7 Int) (StartBool_10 Bool) (Start_1 Int) (Start_17 Int) (Start_16 Int) (StartBool_9 Bool) (Start_3 Int) (StartBool_7 Bool) (StartBool_8 Bool) (Start_11 Int) (Start_14 Int) (Start_9 Int) (StartBool_3 Bool) (Start_12 Int) (StartBool_2 Bool) (Start_5 Int) (Start_6 Int) (Start_8 Int) (Start_13 Int) (StartBool_6 Bool) (StartBool_1 Bool) (StartBool_5 Bool) (Start_4 Int) (Start_15 Int) (Start_10 Int) (StartBool_4 Bool))
  ((Start Int (0 (- Start_1) (- Start_2 Start_1) (+ Start_1 Start_3) (* Start_4 Start_4) (abs Start_4) (ite StartBool Start_2 Start_3)))
   (StartBool Bool (true false (and StartBool_6 StartBool_5) (< Start_16 Start_1) (<= Start_15 Start_1) (= Start_2 Start_10)))
   (Start_2 Int (0 (- Start_8) (- Start_3 Start_2) (* Start_11 Start_17) (div Start_12 Start_10) (mod Start_17 Start_15) (abs Start_8)))
   (Start_7 Int (1 (- Start_16) (- Start Start_11) (+ Start_9 Start_15) (* Start_17 Start_13) (div Start_6 Start_16) (abs Start_7)))
   (StartBool_10 Bool (true (or StartBool_5 StartBool_7) (>= Start_10 Start_1)))
   (Start_1 Int (0 5 y 3 (+ Start_12 Start_9) (ite StartBool_4 Start_2 Start_4)))
   (Start_17 Int (x 2 0 3 (- Start_4) (mod Start Start_17) (ite StartBool_9 Start_17 Start_4)))
   (Start_16 Int (y 2 4 0 (+ Start_2 Start_5) (abs Start_5) (ite StartBool_9 Start_13 Start_2)))
   (StartBool_9 Bool (false (not StartBool_5) (< Start Start_15) (<= Start_1 Start) (>= Start_16 Start_4) (> Start_7 Start_7)))
   (Start_3 Int (2 5 (- Start_10) (+ Start_2 Start_9) (* Start_12 Start_16) (div Start_5 Start_11) (mod Start_7 Start_10)))
   (StartBool_7 Bool (false true (not StartBool) (and StartBool_8 StartBool_9) (or StartBool_2 StartBool) (< Start_12 Start_10) (<= Start_7 Start_10) (> Start_9 Start_10)))
   (StartBool_8 Bool (false (not StartBool_1) (or StartBool_7 StartBool_1) (<= Start_5 Start_8) (>= Start_17 Start_9)))
   (Start_11 Int (4 1 5 2 0 3 (* Start_6 Start_2) (div Start_3 Start_4) (mod Start_1 Start_5) (abs Start)))
   (Start_14 Int (x 1 4 (- Start_14 Start_15) (ite StartBool_5 Start_12 Start_6)))
   (Start_9 Int (x 1 (- Start_5 Start_13) (* Start_3 Start_6) (ite StartBool_10 Start_4 Start_3)))
   (StartBool_3 Bool (true (or StartBool_4 StartBool_2) (< Start_11 Start_7) (<= Start_4 Start_3) (= Start_10 Start_9) (> Start_1 Start_7)))
   (Start_12 Int (y (- Start_6 Start_13) (+ Start_12 Start_8) (* Start_12 Start_5) (div Start_2 Start_2) (abs Start_4) (ite StartBool Start_9 Start_12)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_1 StartBool_2) (or StartBool_4 StartBool) (> Start_6 Start_12)))
   (Start_5 Int (2 5 (- Start Start_1) (* Start_4 Start_3) (mod Start_1 Start_3) (abs Start_6)))
   (Start_6 Int (x (- Start_7) (- Start_5 Start_2) (* Start_6 Start) (mod Start_1 Start_1) (ite StartBool Start_8 Start_7)))
   (Start_8 Int (2 (- Start_9) (+ Start_1 Start_2) (* Start_10 Start_5) (div Start_9 Start) (mod Start_11 Start_3) (ite StartBool_1 Start_6 Start_8)))
   (Start_13 Int (y x 3 1 5 (- Start_10) (- Start_14 Start_13) (mod Start_9 Start_15) (abs Start_6) (ite StartBool_1 Start_5 Start_9)))
   (StartBool_6 Bool (true false (not StartBool_4) (or StartBool_5 StartBool_2) (< Start_8 Start_8) (= Start_14 Start_6) (>= Start_4 Start_8) (> Start_10 Start_2)))
   (StartBool_1 Bool (false (<= Start_9 Start) (= Start_12 Start_4) (>= Start_10 Start_8)))
   (StartBool_5 Bool (true false (not StartBool_6) (= Start_7 Start_14) (>= Start_4 Start_14)))
   (Start_4 Int (4 5 0 (- Start) (- Start_4 Start_1) (+ Start_4 Start_5) (mod Start_2 Start) (abs Start_2)))
   (Start_15 Int (5 (* Start_6 Start_15) (div Start_2 Start_1) (ite StartBool_2 Start_12 Start_7)))
   (Start_10 Int (1 4 2 x (- Start_7 Start_3) (abs Start_12) (ite StartBool_7 Start Start_9)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool_4 StartBool_4) (or StartBool_5 StartBool_2) (<= Start_14 Start_1) (= Start_12 Start_1) (>= Start Start_7) (> Start_4 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 3 (mod 2 (mod x 4)))))

(check-synth)
