(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_12 Int) (Start_3 Int) (StartBool_2 Bool) (Start_2 Int) (Start_13 Int) (Start_8 Int) (Start_5 Int) (Start_1 Int) (Start_7 Int) (Start_6 Int) (Start_9 Int) (Start_10 Int) (StartBool_1 Bool) (Start_11 Int))
  ((Start Int (5 3 (- Start_1 Start_2) (+ Start_2 Start_1) (mod Start_2 Start_1) (abs Start_1)))
   (StartBool Bool (false true (and StartBool StartBool) (or StartBool StartBool) (<= Start_3 Start_2) (= Start_3 Start_2)))
   (Start_4 Int (2 3 (- Start_6) (- Start_11 Start_6) (+ Start Start_9) (* Start_10 Start_2) (div Start_6 Start_9) (mod Start_5 Start_8) (abs Start_2)))
   (Start_12 Int (5 2 x (- Start_1) (- Start_5 Start_10) (div Start_13 Start_3) (abs Start_3)))
   (Start_3 Int (y (+ Start_4 Start_2) (* Start_3 Start) (div Start_5 Start_2) (mod Start_6 Start_1) (abs Start_1)))
   (StartBool_2 Bool (false (not StartBool) (< Start_8 Start_6) (<= Start_5 Start_10) (> Start_9 Start)))
   (Start_2 Int (0 (- Start) (- Start_1 Start_2) (div Start Start_1)))
   (Start_13 Int (1 (- Start_10 Start_3) (+ Start_12 Start_11) (* Start_1 Start_10) (div Start Start_6) (abs Start_1) (ite StartBool Start_9 Start_3)))
   (Start_8 Int (2 (- Start_10) (+ Start_7 Start_7) (ite StartBool_2 Start_6 Start_1)))
   (Start_5 Int (5 (div Start_12 Start_10) (mod Start_9 Start_13)))
   (Start_1 Int (4 (- Start_2) (abs Start_2) (ite StartBool Start_2 Start_1)))
   (Start_7 Int (y 1 4 (- Start_6) (- Start_3 Start_2) (+ Start Start_8) (* Start_3 Start) (mod Start_3 Start_9)))
   (Start_6 Int (5 4 (mod Start Start_3) (ite StartBool_1 Start_2 Start_7)))
   (Start_9 Int (3 (- Start_3) (div Start_6 Start_1) (ite StartBool Start_5 Start_5)))
   (Start_10 Int (y (- Start_3 Start) (+ Start_8 Start_10) (ite StartBool_1 Start_1 Start_5)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (<= Start_1 Start_6) (>= Start_7 Start_11)))
   (Start_11 Int (4 (+ Start_6 Start_2) (mod Start_9 Start_9) (ite StartBool Start_10 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod (abs (div y 0)) x) 3)))

(check-synth)
