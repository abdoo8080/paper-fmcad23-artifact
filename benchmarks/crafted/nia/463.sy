(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_2 Bool) (StartBool_3 Bool) (StartBool_1 Bool) (Start_3 Int) (Start_7 Int) (Start_6 Int) (Start_5 Int) (Start_4 Int) (Start_2 Int) (Start_8 Int))
  ((Start Int (1 0 y (- Start) (- Start_1 Start) (+ Start_2 Start) (div Start_1 Start_3) (mod Start_4 Start_4) (abs Start_4)))
   (StartBool Bool (false true (and StartBool_2 StartBool_3) (= Start Start_4) (> Start_7 Start_3)))
   (Start_1 Int (4 (- Start_2) (- Start_4 Start_8) (* Start_4 Start_2) (mod Start_4 Start_8)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_2) (< Start_8 Start_1) (= Start_8 Start_4) (> Start_8 Start_2)))
   (StartBool_3 Bool (false (or StartBool_1 StartBool) (> Start_1 Start_2)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_3) (>= Start_4 Start_6)))
   (Start_3 Int (4 (mod Start_4 Start_4) (abs Start_2)))
   (Start_7 Int (x y 3 0 1 (- Start_7) (- Start_3 Start_6) (* Start_1 Start_5) (abs Start_4) (ite StartBool_1 Start_5 Start)))
   (Start_6 Int (4 (- Start_4) (- Start_7 Start_6) (mod Start_7 Start_5) (abs Start_4) (ite StartBool Start_5 Start_1)))
   (Start_5 Int (0 (- Start_3 Start_5) (* Start_3 Start_6) (ite StartBool Start Start)))
   (Start_4 Int (y (+ Start_3 Start_4) (mod Start Start_5) (abs Start_1) (ite StartBool Start_2 Start_5)))
   (Start_2 Int (4 (mod Start Start_6) (ite StartBool_1 Start_1 Start_2)))
   (Start_8 Int (y 4 x 1 3 (- Start_5 Start_6) (div Start_8 Start_6) (mod Start_1 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod (- 1) 0))))

(check-synth)
