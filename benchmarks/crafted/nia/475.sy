(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (Start_8 Int) (Start_4 Int) (Start_5 Int) (StartBool_3 Bool) (Start_1 Int) (Start_6 Int) (Start_7 Int) (StartBool_2 Bool) (Start_9 Int) (StartBool_1 Bool) (Start_2 Int))
  ((Start Int (4 2 (- Start) (+ Start_1 Start_2) (div Start Start) (mod Start_3 Start) (ite StartBool Start Start_3)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool_3) (or StartBool StartBool_2) (> Start_3 Start_5)))
   (Start_3 Int (2 (- Start Start_4) (* Start_2 Start_3) (ite StartBool Start_2 Start)))
   (Start_8 Int (y (- Start_5) (- Start Start_3) (* Start_8 Start_7) (div Start_8 Start_6) (mod Start_7 Start_6) (abs Start_9) (ite StartBool_1 Start_2 Start_3)))
   (Start_4 Int (5 (+ Start Start_3) (abs Start_5) (ite StartBool Start Start_1)))
   (Start_5 Int (y 3 4 2 (- Start_5) (- Start Start_4) (mod Start_5 Start_4) (abs Start_4) (ite StartBool_1 Start_4 Start_5)))
   (StartBool_3 Bool (false true (< Start_3 Start_5) (> Start_7 Start_2)))
   (Start_1 Int (2 (div Start_4 Start_9) (abs Start_2)))
   (Start_6 Int (y (- Start_2 Start) (+ Start_7 Start_3) (* Start_6 Start_1)))
   (Start_7 Int (y 1 (- Start_2) (+ Start_7 Start_6) (div Start_2 Start_4) (mod Start_2 Start_7) (abs Start_4) (ite StartBool_2 Start_5 Start_1)))
   (StartBool_2 Bool (true false (or StartBool_2 StartBool) (<= Start_2 Start) (> Start_7 Start_7)))
   (Start_9 Int (x 4 (- Start_7 Start_2) (+ Start_2 Start) (abs Start)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool) (or StartBool StartBool_1) (<= Start_1 Start_5) (= Start_6 Start_3) (>= Start_3 Start_3)))
   (Start_2 Int (0 2 (- Start_1) (div Start_3 Start_6) (mod Start_7 Start_8) (abs Start_6) (ite StartBool_3 Start_4 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs (abs y)))))

(check-synth)
