(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (Start_2 Int) (Start_15 Int) (StartBool_7 Bool) (Start_17 Int) (Start_16 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_14 Int) (Start_11 Int) (Start_6 Int) (Start_13 Int) (StartBool_1 Bool) (Start_9 Int) (Start_10 Int) (StartBool_5 Bool) (Start_4 Int) (Start_5 Int) (Start_18 Int) (StartBool_4 Bool) (Start_8 Int) (StartBool_6 Bool) (Start_7 Int) (Start_1 Int) (Start_12 Int))
  ((Start Int (5 (- Start_1) (- Start_1 Start) (* Start_1 Start) (div Start_2 Start_3) (mod Start_1 Start_3) (abs Start) (ite StartBool_1 Start Start)))
   (StartBool Bool (false true (not StartBool) (or StartBool_5 StartBool_7) (<= Start_10 Start_18) (>= Start Start_17) (> Start_19 Start_11)))
   (Start_19 Int (y 5 (- Start Start_19) (mod Start_16 Start_17)))
   (Start_2 Int (1 (* Start_4 Start_5) (mod Start_8 Start_7) (abs Start_12) (ite StartBool Start_5 Start_12)))
   (Start_15 Int (2 (- Start_5 Start_15) (* Start_17 Start_13) (div Start_17 Start) (mod Start_5 Start_15) (abs Start_10) (ite StartBool_4 Start_2 Start_6)))
   (StartBool_7 Bool (true (and StartBool_5 StartBool_2) (or StartBool_5 StartBool_1) (< Start_9 Start_1) (<= Start_2 Start_2) (> Start_16 Start_6)))
   (Start_17 Int (3 (- Start_2) (- Start_14 Start_12) (* Start_7 Start_2) (div Start_1 Start_18) (mod Start_6 Start_3) (abs Start_8)))
   (Start_16 Int (1 (ite StartBool_5 Start_17 Start_6)))
   (Start_3 Int (0 (- Start_12) (- Start_6 Start_6) (+ Start_1 Start_2) (* Start_15 Start_12) (div Start_3 Start_8) (mod Start_13 Start_6) (abs Start_9) (ite StartBool_6 Start_14 Start_16)))
   (StartBool_2 Bool (true false (not StartBool_1) (< Start_6 Start) (<= Start Start_8) (>= Start_7 Start_5) (> Start_4 Start_14)))
   (StartBool_3 Bool (false true (<= Start_10 Start_12) (> Start_3 Start_1)))
   (Start_14 Int (x 4 (- Start_5) (- Start_3 Start_7)))
   (Start_11 Int (1 4 0 y 2 5 3 x (+ Start_1 Start_11) (* Start_11 Start_12) (div Start_14 Start_14) (mod Start_4 Start_6)))
   (Start_6 Int (y 2 (- Start_7) (mod Start_5 Start_8)))
   (Start_13 Int (1 (- Start_12 Start_1) (abs Start_11)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_3 StartBool_2) (or StartBool_4 StartBool_5) (< Start_3 Start_1) (= Start Start_2) (>= Start_3 Start)))
   (Start_9 Int (2 0 5 (- Start_4 Start_5) (div Start_10 Start_7) (mod Start_3 Start_10) (ite StartBool_6 Start_6 Start_2)))
   (Start_10 Int (1 (+ Start_5 Start_10) (div Start_5 Start_4) (mod Start_6 Start_10) (abs Start_10)))
   (StartBool_5 Bool (true false (not StartBool_5) (or StartBool_5 StartBool_3) (< Start_4 Start_2) (<= Start Start) (>= Start Start_4)))
   (Start_4 Int (2 (- Start_2 Start_1) (* Start_2 Start_3) (ite StartBool_5 Start_3 Start_5)))
   (Start_5 Int (4 (- Start_4) (- Start_5 Start) (+ Start_2 Start_5) (div Start_5 Start_4) (abs Start_4)))
   (Start_18 Int (y (- Start_1) (- Start_6 Start_12) (+ Start_17 Start_18) (div Start_3 Start_14) (ite StartBool_7 Start_5 Start_7)))
   (StartBool_4 Bool (true (and StartBool StartBool_3) (or StartBool_1 StartBool_6) (< Start_4 Start_1) (<= Start_2 Start_1) (= Start_3 Start_6) (> Start Start_4)))
   (Start_8 Int (2 (- Start_2) (+ Start_8 Start) (* Start_6 Start_7) (div Start_9 Start_7)))
   (StartBool_6 Bool (false true (< Start_11 Start_4) (<= Start_6 Start_12) (= Start_5 Start) (>= Start_11 Start_12) (> Start_8 Start_2)))
   (Start_7 Int (x 3 4 (- Start_4) (+ Start_2 Start_5) (abs Start)))
   (Start_1 Int (4 (- Start_12) (abs Start_14)))
   (Start_12 Int (4 (* Start_9 Start_2) (div Start_5 Start_12) (mod Start_13 Start_3) (abs Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 4 (- y 1))))

(check-synth)
