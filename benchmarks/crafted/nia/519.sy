(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_12 Int) (Start_14 Int) (Start_11 Int) (Start_1 Int) (Start_8 Int) (StartBool_1 Bool) (StartBool_6 Bool) (Start_13 Int) (Start_2 Int) (StartBool_2 Bool) (Start_4 Int) (Start_3 Int) (StartBool_4 Bool) (Start_10 Int) (Start_5 Int) (StartBool_3 Bool) (StartBool_5 Bool) (Start_9 Int) (Start_6 Int) (Start_7 Int))
  ((Start Int (1 x (* Start Start_1) (abs Start) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true false (not StartBool_3) (< Start_15 Start_2) (= Start_3 Start_11)))
   (Start_15 Int (x (- Start_4 Start_14) (mod Start_1 Start_4)))
   (Start_12 Int (1 5 4 (- Start_4) (* Start_1 Start_13) (abs Start_11) (ite StartBool_2 Start_7 Start_5)))
   (Start_14 Int (0 (- Start_9) (* Start Start_14) (div Start_1 Start_11) (abs Start_2) (ite StartBool_1 Start_11 Start_7)))
   (Start_11 Int (4 (+ Start Start_10) (mod Start_11 Start_2)))
   (Start_1 Int (4 3 x 0 (- Start_12) (+ Start_13 Start_2) (* Start_11 Start_7) (div Start_6 Start) (abs Start_3)))
   (Start_8 Int (3 4 (- Start_9 Start_3) (* Start_5 Start_5) (mod Start_11 Start_11) (abs Start_6) (ite StartBool_2 Start_5 Start_11)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_6 StartBool_1) (or StartBool_1 StartBool) (< Start_11 Start_2) (= Start_9 Start_5) (>= Start_4 Start_2)))
   (StartBool_6 Bool (false true (not StartBool_6) (<= Start_2 Start_3) (= Start_10 Start_10)))
   (Start_13 Int (4 3 y 1 (- Start_12 Start_3) (mod Start_14 Start_7) (ite StartBool Start_8 Start_6)))
   (Start_2 Int (x (- Start_1) (- Start_3 Start_3) (div Start_1 Start_3) (mod Start_4 Start_5) (abs Start_4) (ite StartBool_2 Start Start_5)))
   (StartBool_2 Bool (false (not StartBool_1) (<= Start_1 Start_3) (> Start_1 Start_2)))
   (Start_4 Int (2 3 (- Start_1 Start_3) (abs Start_3) (ite StartBool_3 Start_4 Start_2)))
   (Start_3 Int (y (- Start_8 Start_8) (* Start Start_2) (div Start_2 Start) (mod Start_8 Start_1) (abs Start_1) (ite StartBool_4 Start_9 Start_2)))
   (StartBool_4 Bool (true (not StartBool_5) (or StartBool StartBool_6) (>= Start_1 Start_9) (> Start_2 Start_1)))
   (Start_10 Int (3 y (- Start_8 Start_1) (div Start_4 Start_5) (abs Start_8)))
   (Start_5 Int (3 y x (- Start_4 Start_6) (+ Start_5 Start_4) (ite StartBool Start_5 Start)))
   (StartBool_3 Bool (true (and StartBool StartBool) (<= Start_4 Start_5) (= Start_6 Start_5) (>= Start_7 Start_6) (> Start_5 Start_1)))
   (StartBool_5 Bool (true false (not StartBool_4) (and StartBool_6 StartBool_2) (< Start_9 Start_5) (>= Start_4 Start)))
   (Start_9 Int (1 4 3 0 (- Start_3 Start) (* Start_7 Start_9) (abs Start_8) (ite StartBool Start_9 Start_4)))
   (Start_6 Int (5 4 (- Start_6) (- Start_2 Start_3) (abs Start_3)))
   (Start_7 Int (y (- Start_5 Start_6) (mod Start Start_5) (ite StartBool_2 Start_6 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 (div 2 0))))

(check-synth)
