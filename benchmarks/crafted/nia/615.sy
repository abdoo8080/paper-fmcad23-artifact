(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_17 Int) (Start_1 Int) (Start_14 Int) (Start_6 Int) (StartBool_4 Bool) (StartBool_5 Bool) (Start_16 Int) (Start_3 Int) (Start_10 Int) (Start_4 Int) (Start_7 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_2 Int) (Start_5 Int) (Start_18 Int) (StartBool_2 Bool) (Start_9 Int) (Start_15 Int) (Start_13 Int) (Start_11 Int) (Start_8 Int) (Start_12 Int))
  ((Start Int (y 4 (- Start) (+ Start Start_1) (* Start_2 Start_2) (div Start Start_1) (mod Start_3 Start_1) (abs Start_1) (ite StartBool_1 Start_4 Start)))
   (StartBool Bool (true false (not StartBool_5) (or StartBool_2 StartBool_6) (< Start_7 Start_2) (<= Start_7 Start_12) (>= Start_4 Start_8)))
   (StartBool_6 Bool (true false (and StartBool_3 StartBool_1)))
   (Start_17 Int (y (- Start_18) (+ Start_12 Start_5) (* Start_4 Start_17) (div Start Start_16) (mod Start_5 Start_18)))
   (Start_1 Int (1 (- Start_11) (+ Start_15 Start_16) (* Start_6 Start_9)))
   (Start_14 Int (3 4 0 5 x y 1 2 (- Start_8) (div Start_5 Start_9) (ite StartBool Start_2 Start_2)))
   (Start_6 Int (0 4 1 y 3 (- Start_13) (div Start_12 Start_8) (mod Start_6 Start_5)))
   (StartBool_4 Bool (false (< Start_2 Start) (<= Start_7 Start_9) (>= Start_5 Start_9)))
   (StartBool_5 Bool (true false (not StartBool_4) (< Start Start_1) (<= Start_9 Start_9) (= Start_5 Start_8) (> Start_12 Start_10)))
   (Start_16 Int (3 5 x (- Start_9) (- Start_5 Start_6) (+ Start_13 Start_11) (div Start_13 Start_9) (mod Start_5 Start_7)))
   (Start_3 Int (x 0 (div Start_1 Start_3) (ite StartBool_1 Start Start_4)))
   (Start_10 Int (2 1 (- Start_4) (div Start_10 Start_2) (mod Start_3 Start_4) (abs Start_7)))
   (Start_4 Int (2 y 3 (- Start_3) (* Start Start_4) (div Start_2 Start)))
   (Start_7 Int (1 (- Start_9) (- Start_4 Start_5) (+ Start_12 Start_12) (div Start Start_4) (ite StartBool Start_10 Start_4)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_2 StartBool_5) (< Start_6 Start_8) (> Start_12 Start_4)))
   (StartBool_1 Bool (true false (or StartBool_1 StartBool_2) (<= Start_3 Start_1) (= Start_1 Start_1)))
   (Start_2 Int (3 1 4 y 5 2 (- Start_4) (+ Start_3 Start_4) (mod Start_5 Start_4) (abs Start_1)))
   (Start_5 Int (2 0 y 4 1 5 (- Start Start_6) (+ Start_5 Start_5) (* Start_2 Start) (div Start_7 Start_8) (mod Start_9 Start_2) (abs Start_5) (ite StartBool Start_8 Start_7)))
   (Start_18 Int (1 x (- Start_17 Start_17) (* Start Start_2) (div Start_8 Start_16) (mod Start_3 Start_16) (abs Start_2) (ite StartBool_1 Start_9 Start_18)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool) (<= Start_2 Start) (= Start_1 Start_4) (> Start_2 Start_4)))
   (Start_9 Int (3 (abs Start_10) (ite StartBool_1 Start_6 Start_10)))
   (Start_15 Int (y 3 (- Start_13) (* Start Start_15) (div Start_9 Start_3) (mod Start_5 Start_8) (ite StartBool_3 Start_17 Start_14)))
   (Start_13 Int (y 1 (* Start_8 Start_7) (div Start_4 Start) (mod Start_14 Start_12)))
   (Start_11 Int (3 (- Start_1 Start_3) (div Start_8 Start_11) (abs Start_4)))
   (Start_8 Int (5 (- Start_6 Start_1) (+ Start Start_10) (* Start_9 Start_11) (mod Start_10 Start_3) (abs Start_9) (ite StartBool_1 Start_7 Start_3)))
   (Start_12 Int (2 (ite StartBool_3 Start_12 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- x 1) 3)))

(check-synth)
