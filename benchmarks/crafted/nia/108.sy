(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_1 Int) (Start_12 Int) (Start_10 Int) (Start_2 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_6 Int) (Start_15 Int) (Start_4 Int) (Start_13 Int) (Start_8 Int) (Start_5 Int) (Start_9 Int) (Start_7 Int) (Start_3 Int) (Start_11 Int))
  ((Start Int (2 (- Start_1 Start_2) (* Start_1 Start_2) (div Start Start_1) (mod Start Start_1)))
   (StartBool Bool (false true (and StartBool_2 StartBool) (or StartBool StartBool) (< Start_1 Start_1) (= Start_4 Start) (>= Start_9 Start_7) (> Start_5 Start_2)))
   (Start_14 Int (y 1 (abs Start_13) (ite StartBool_2 Start_15 Start_7)))
   (Start_1 Int (4 (- Start_5 Start_13) (+ Start_14 Start_4) (* Start Start_4) (div Start_13 Start_6)))
   (Start_12 Int (2 (- Start_7) (* Start_13 Start_13) (div Start_5 Start_7) (mod Start_4 Start)))
   (Start_10 Int (x 3 2 5 (- Start_4 Start_11) (+ Start_5 Start_7) (div Start_10 Start_10) (abs Start_9)))
   (Start_2 Int (x (+ Start_2 Start_3) (* Start_4 Start_5) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_2 Bool (true (< Start_13 Start_5) (<= Start_13 Start_5) (= Start_12 Start_7)))
   (StartBool_1 Bool (false true (<= Start_3 Start_5) (= Start_3 Start_2) (>= Start_2 Start_2)))
   (Start_6 Int (x (- Start) (- Start_2 Start_6) (* Start_2 Start_4) (abs Start_6)))
   (Start_15 Int (0 5 (+ Start_7 Start_2) (* Start_5 Start_3) (ite StartBool Start_14 Start_6)))
   (Start_4 Int (x (- Start_7 Start_2) (* Start_8 Start_8) (mod Start_2 Start_5)))
   (Start_13 Int (x (- Start_9) (div Start Start_6) (mod Start_11 Start_12) (ite StartBool Start_7 Start)))
   (Start_8 Int (0 1 (- Start_4) (- Start_1 Start_8) (div Start_5 Start_1) (abs Start)))
   (Start_5 Int (3 (+ Start_6 Start_1) (div Start_4 Start) (mod Start_5 Start_6)))
   (Start_9 Int (2 x 3 y 4 0 5 1 (- Start Start_8) (+ Start_2 Start_10) (* Start_7 Start_7) (div Start_1 Start_3) (abs Start_4)))
   (Start_7 Int (y 5 (+ Start_6 Start_7) (ite StartBool_1 Start_9 Start_6)))
   (Start_3 Int (0 x 1 (- Start) (- Start_4 Start_8) (+ Start_12 Start_3) (mod Start_11 Start_4) (abs Start_1) (ite StartBool_2 Start_7 Start_12)))
   (Start_11 Int (3 4 2 (- Start Start_3) (+ Start Start_1) (abs Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 y)))

(check-synth)
