(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_6 Int) (Start_14 Int) (Start_15 Int) (Start_13 Int) (StartBool_6 Bool) (StartBool_3 Bool) (Start_12 Int) (Start_3 Int) (StartBool_2 Bool) (Start_4 Int) (Start_10 Int) (Start_2 Int) (Start_1 Int) (StartBool_1 Bool) (StartBool_4 Bool) (Start_11 Int) (Start_5 Int) (Start_7 Int) (Start_8 Int) (StartBool_5 Bool) (Start_9 Int))
  ((Start Int (4 5 2 1 0 3 y (- Start_1) (- Start_1 Start_2) (+ Start Start_1) (* Start_3 Start)))
   (StartBool Bool (true (not StartBool_4) (or StartBool_7 StartBool_5) (= Start_4 Start) (>= Start_2 Start_2)))
   (StartBool_7 Bool (true false (not StartBool_7) (or StartBool_6 StartBool_4) (< Start_11 Start_3) (<= Start_6 Start_14) (= Start_7 Start_3) (>= Start_8 Start_1) (> Start_7 Start_4)))
   (Start_6 Int (y 2 (- Start_1) (- Start_12 Start_9) (* Start_5 Start_13) (mod Start_7 Start_4) (abs Start_4)))
   (Start_14 Int (y 2 5 (- Start_4 Start_14) (* Start_7 Start_13) (mod Start_15 Start_8) (ite StartBool_3 Start_14 Start_8)))
   (Start_15 Int (x (* Start_7 Start_13) (div Start_9 Start_9) (mod Start_9 Start_7) (abs Start_6)))
   (Start_13 Int (5 4 x y 0 1 (mod Start_11 Start_3) (abs Start_3) (ite StartBool_1 Start_14 Start_15)))
   (StartBool_6 Bool (false true (not StartBool_1) (and StartBool_5 StartBool_3) (<= Start_13 Start_11) (= Start_2 Start_3) (>= Start_6 Start_3) (> Start_2 Start_9)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_6) (< Start_12 Start_11) (<= Start_11 Start_3) (>= Start_12 Start_6)))
   (Start_12 Int (y 0 (- Start_12 Start_4) (+ Start_11 Start_4) (mod Start_11 Start_11) (abs Start_2) (ite StartBool_3 Start_9 Start_11)))
   (Start_3 Int (y (+ Start_4 Start) (* Start Start_5) (div Start_5 Start_3)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_4) (= Start_6 Start) (> Start_6 Start_4)))
   (Start_4 Int (x 2 (- Start_1) (- Start_5 Start_5) (* Start_4 Start_1) (abs Start)))
   (Start_10 Int (5 4 0 3 (- Start_7 Start_1) (* Start Start_2)))
   (Start_2 Int (x (- Start_6 Start_2) (+ Start Start_4) (div Start_6 Start_2) (mod Start Start_2) (ite StartBool_1 Start_1 Start_4)))
   (Start_1 Int (0 y 5 (- Start_14) (- Start_9 Start_2) (* Start_11 Start) (mod Start_13 Start_5) (abs Start_6)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (= Start Start_4) (> Start_5 Start_6)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool_5 StartBool) (or StartBool_5 StartBool_1) (= Start_3 Start_7)))
   (Start_11 Int (x (- Start_8) (+ Start_4 Start_2) (* Start_12 Start_4) (mod Start_4 Start_6)))
   (Start_5 Int (y (* Start_5 Start) (div Start_4 Start_5) (mod Start_5 Start_5) (ite StartBool Start Start_4)))
   (Start_7 Int (2 (- Start_7 Start_2) (+ Start_7 Start_8) (* Start_1 Start_7)))
   (Start_8 Int (0 1 (- Start_8 Start_7) (* Start_5 Start_7) (div Start_7 Start_2) (abs Start_5) (ite StartBool_2 Start Start_1)))
   (StartBool_5 Bool (false true (not StartBool_2) (< Start_5 Start_9) (<= Start_5 Start) (= Start_4 Start_7) (>= Start_5 Start_7) (> Start Start_9)))
   (Start_9 Int (2 4 (- Start_10 Start_9) (+ Start_11 Start_11) (abs Start_3) (ite StartBool Start_6 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div 3 0))))

(check-synth)
