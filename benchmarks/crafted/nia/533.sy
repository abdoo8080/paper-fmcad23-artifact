(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_14 Int) (Start_13 Int) (Start_12 Int) (StartBool_5 Bool) (Start_10 Int) (StartBool_2 Bool) (Start_7 Int) (Start_11 Int) (Start_3 Int) (StartBool_1 Bool) (StartBool_7 Bool) (Start_8 Int) (Start_1 Int) (Start_9 Int) (Start_4 Int) (Start_2 Int) (Start_5 Int) (StartBool_3 Bool) (Start_6 Int) (StartBool_6 Bool) (StartBool_4 Bool))
  ((Start Int (x (- Start Start) (+ Start_1 Start_1) (* Start Start_1)))
   (StartBool Bool (false true (not StartBool) (or StartBool_1 StartBool_1) (>= Start_6 Start)))
   (Start_15 Int (4 3 1 2 0 x (+ Start_15 Start_9) (div Start_11 Start_2) (abs Start_4) (ite StartBool_1 Start_12 Start)))
   (Start_14 Int (2 y 0 5 (- Start_9) (+ Start_2 Start) (mod Start_11 Start_8) (abs Start_14) (ite StartBool_3 Start_13 Start_14)))
   (Start_13 Int (x (- Start_8) (- Start_7 Start_12) (+ Start Start_7) (* Start_4 Start_2) (div Start_2 Start_3) (mod Start Start_14) (abs Start_5) (ite StartBool_5 Start_3 Start_12)))
   (Start_12 Int (y (div Start_12 Start_13) (ite StartBool_4 Start_10 Start_7)))
   (StartBool_5 Bool (true (and StartBool_6 StartBool_4) (or StartBool_5 StartBool_5) (< Start_2 Start_7) (<= Start Start_2) (= Start_7 Start_7) (>= Start_8 Start_11) (> Start_7 Start_3)))
   (Start_10 Int (x 4 (- Start_10 Start_9) (+ Start_3 Start_4) (* Start_8 Start_6) (ite StartBool_5 Start_4 Start_2)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool_1 StartBool_3) (< Start_1 Start_8) (<= Start_3 Start_5)))
   (Start_7 Int (5 2 (+ Start_8 Start_6) (* Start_8 Start_7) (div Start_5 Start_2) (abs Start_11) (ite StartBool_7 Start_8 Start_12)))
   (Start_11 Int (4 y 3 (- Start_9) (abs Start_10)))
   (Start_3 Int (x (+ Start_4 Start_3) (* Start_3 Start_1)))
   (StartBool_1 Bool (true (< Start_1 Start_1) (<= Start_1 Start_8) (>= Start_15 Start_9) (> Start_3 Start_7)))
   (StartBool_7 Bool (false (not StartBool_5) (< Start_3 Start) (= Start_10 Start_1)))
   (Start_8 Int (4 (- Start_7) (* Start_5 Start_8) (div Start_5 Start_1) (mod Start_9 Start_3) (abs Start_4) (ite StartBool_4 Start_8 Start_6)))
   (Start_1 Int (0 5 (- Start) (- Start_1 Start_1) (* Start_1 Start) (div Start Start_1) (mod Start Start_2) (abs Start_2)))
   (Start_9 Int (0 (- Start_9) (- Start_9 Start) (+ Start_7 Start_7) (div Start_3 Start_7)))
   (Start_4 Int (x (- Start_5 Start_1) (* Start_2 Start_2) (mod Start_5 Start_4) (abs Start_4)))
   (Start_2 Int (x (* Start_2 Start_3)))
   (Start_5 Int (5 (- Start_4)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_5 StartBool_6) (= Start_6 Start_7)))
   (Start_6 Int (1 (- Start_7) (- Start_1 Start_6) (+ Start_4 Start_5) (* Start_5 Start_2) (abs Start_4) (ite StartBool_2 Start_6 Start_3)))
   (StartBool_6 Bool (true (not StartBool_1) (and StartBool_1 StartBool) (or StartBool_7 StartBool_4) (< Start_3 Start_5) (= Start_2 Start_9) (>= Start Start_10)))
   (StartBool_4 Bool (true false (and StartBool_4 StartBool_1) (or StartBool_4 StartBool) (<= Start_6 Start_1) (>= Start_9 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (* 3 4) x)))

(check-synth)
