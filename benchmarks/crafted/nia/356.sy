(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_18 Int) (Start_15 Int) (StartBool_7 Bool) (Start_14 Int) (Start_16 Int) (Start_10 Int) (Start_3 Int) (Start_9 Int) (StartBool_6 Bool) (Start_17 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_1 Int) (Start_5 Int) (StartBool_5 Bool) (Start_11 Int) (Start_4 Int) (Start_12 Int) (Start_2 Int) (Start_13 Int) (Start_8 Int) (Start_7 Int) (Start_6 Int) (StartBool_2 Bool))
  ((Start Int (0 (- Start) (- Start_1 Start_1) (div Start Start_1) (abs Start_1) (ite StartBool_1 Start_1 Start_1)))
   (StartBool Bool (true (and StartBool_1 StartBool_4) (or StartBool StartBool_4) (< Start_7 Start_2) (<= Start_12 Start_14) (= Start_3 Start_7) (> Start_14 Start_13)))
   (StartBool_4 Bool (false (and StartBool_5 StartBool_2) (or StartBool_4 StartBool_1) (< Start_12 Start_8) (<= Start_1 Start_16) (>= Start_1 Start_15) (> Start_3 Start_16)))
   (Start_18 Int (x (+ Start_5 Start_4) (* Start_14 Start) (mod Start_8 Start_5) (ite StartBool Start_16 Start_5)))
   (Start_15 Int (0 (div Start_6 Start_15) (mod Start Start_12)))
   (StartBool_7 Bool (false true (= Start_16 Start_1) (> Start_10 Start_3)))
   (Start_14 Int (4 (- Start_7) (- Start_8 Start_10) (abs Start_15)))
   (Start_16 Int (y (- Start_9) (mod Start_17 Start_17) (abs Start_14)))
   (Start_10 Int (4 (- Start_8 Start_10) (* Start_4 Start_3) (div Start_6 Start_13) (abs Start_10)))
   (Start_3 Int (x (- Start_4 Start) (+ Start Start_2) (mod Start_4 Start_4) (abs Start_4) (ite StartBool Start_1 Start_2)))
   (Start_9 Int (4 3 1 0 5 x (- Start_10) (- Start_3 Start_9) (+ Start_1 Start_3) (* Start_11 Start_9)))
   (StartBool_6 Bool (true (not StartBool_1) (and StartBool_4 StartBool_7) (<= Start_15 Start_1) (>= Start Start_9)))
   (Start_17 Int (x 2 5 (- Start_18 Start_6) (* Start_9 Start_10) (ite StartBool_1 Start_2 Start_16)))
   (StartBool_1 Bool (true false (and StartBool StartBool_1) (or StartBool StartBool_1) (<= Start_1 Start_1)))
   (StartBool_3 Bool (true (not StartBool) (or StartBool_2 StartBool_1) (= Start Start_6) (>= Start Start_10) (> Start_13 Start_5)))
   (Start_1 Int (4 3 2 (mod Start_2 Start_3) (ite StartBool_1 Start Start_3)))
   (Start_5 Int (4 (+ Start_1 Start_2) (* Start_9 Start_2)))
   (StartBool_5 Bool (false true (or StartBool_6 StartBool_3) (< Start_18 Start_2) (<= Start_12 Start_11) (= Start_7 Start_18) (> Start_11 Start_11)))
   (Start_11 Int (x (* Start_7 Start_10) (mod Start_3 Start_10) (abs Start_4) (ite StartBool_3 Start_5 Start_12)))
   (Start_4 Int (1 3 2 (- Start) (- Start_1 Start_5) (div Start_1 Start_3) (mod Start_1 Start_6) (abs Start_2)))
   (Start_12 Int (0 1 4 x (+ Start_8 Start_9) (* Start_12 Start_5) (abs Start_12)))
   (Start_2 Int (x 2 (div Start_6 Start_8) (mod Start_3 Start_14) (abs Start_14)))
   (Start_13 Int (5 4 2 0 (- Start_4) (+ Start_7 Start_13) (* Start_4 Start_10) (div Start_5 Start) (abs Start_2) (ite StartBool_3 Start_2 Start_7)))
   (Start_8 Int (x (* Start Start_6) (div Start_1 Start_8) (mod Start_4 Start_8)))
   (Start_7 Int (4 2 y 5 (- Start_7) (mod Start_5 Start_2) (ite StartBool_2 Start_3 Start_7)))
   (Start_6 Int (x 3 (- Start_4 Start_6) (div Start_6 Start_4) (mod Start_7 Start_8)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_2) (or StartBool StartBool) (< Start_8 Start_7) (<= Start_3 Start_6) (>= Start_1 Start_7) (> Start_8 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (div y x) (div 4 y))))

(check-synth)
