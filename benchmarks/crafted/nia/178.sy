(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_2 Bool) (Start_7 Int) (StartBool_4 Bool) (Start_9 Int) (Start_18 Int) (Start_17 Int) (Start_11 Int) (Start_16 Int) (StartBool_1 Bool) (Start_8 Int) (StartBool_3 Bool) (Start_10 Int) (Start_5 Int) (Start_1 Int) (Start_3 Int) (StartBool_5 Bool) (Start_2 Int) (Start_6 Int) (Start_4 Int) (Start_12 Int) (Start_13 Int) (Start_15 Int) (Start_14 Int))
  ((Start Int (1 (- Start_1) (* Start_2 Start_1) (div Start_1 Start) (abs Start_1)))
   (StartBool Bool (false (not StartBool_3) (or StartBool StartBool_1) (>= Start_18 Start_18) (> Start_16 Start_18)))
   (StartBool_6 Bool (false true (or StartBool_5 StartBool_1) (> Start_17 Start_4)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_4) (or StartBool_6 StartBool) (< Start_1 Start_16) (= Start_17 Start_9) (>= Start_2 Start_14)))
   (Start_7 Int (0 3 x 4 y 5 2 1 (- Start_15 Start_9) (+ Start_15 Start_18) (mod Start_8 Start_18) (ite StartBool_5 Start Start_13)))
   (StartBool_4 Bool (false (< Start_3 Start_4) (<= Start_5 Start_12) (>= Start_1 Start_2) (> Start_3 Start_4)))
   (Start_9 Int (3 5 1 4 (- Start_7) (- Start_1 Start_16) (+ Start_14 Start_18) (* Start Start_5) (abs Start_5) (ite StartBool_4 Start_5 Start_5)))
   (Start_18 Int (3 1 2 y (- Start_18) (- Start Start_8) (+ Start_5 Start_7) (div Start_8 Start_4) (mod Start_11 Start_18) (abs Start_16) (ite StartBool Start_10 Start_12)))
   (Start_17 Int (5 (- Start) (+ Start_13 Start_5) (* Start_17 Start_11) (div Start_12 Start_10) (mod Start_2 Start_4) (abs Start_13) (ite StartBool_1 Start_15 Start_16)))
   (Start_11 Int (y (- Start_5) (- Start_15 Start_10) (+ Start_10 Start_16) (* Start_13 Start_15) (div Start_17 Start_1) (mod Start_6 Start_4) (ite StartBool_2 Start_9 Start_7)))
   (Start_16 Int (2 5 (- Start_8) (- Start_15 Start_1) (* Start_11 Start_10) (div Start_2 Start_12) (abs Start_7) (ite StartBool_3 Start_2 Start_11)))
   (StartBool_1 Bool (false (<= Start_1 Start_1) (>= Start_4 Start_2) (> Start_1 Start)))
   (Start_8 Int (2 3 (* Start_9 Start_6) (div Start_9 Start_3) (ite StartBool_3 Start_5 Start)))
   (StartBool_3 Bool (false (not StartBool_4) (< Start_1 Start_10) (<= Start_11 Start_12) (= Start_10 Start_9) (>= Start_9 Start_7) (> Start_12 Start)))
   (Start_10 Int (1 (div Start_15 Start_13) (mod Start_13 Start_13) (ite StartBool_5 Start_12 Start)))
   (Start_5 Int (4 (- Start) (+ Start_5 Start_5)))
   (Start_1 Int (y 1 2 3 x 0 (- Start_9 Start_14) (+ Start_4 Start_15) (div Start_14 Start_6) (abs Start_1) (ite StartBool_3 Start_1 Start_16)))
   (Start_3 Int (3 y (- Start_3 Start_2) (+ Start_4 Start_3) (ite StartBool_2 Start_1 Start_6)))
   (StartBool_5 Bool (true (and StartBool_4 StartBool) (or StartBool_1 StartBool_4) (< Start_5 Start_11) (<= Start_12 Start_10) (= Start_11 Start_13) (> Start_18 Start)))
   (Start_2 Int (5 0 1 (+ Start Start_2) (mod Start_1 Start_3) (ite StartBool_1 Start_2 Start)))
   (Start_6 Int (4 y (- Start_7) (+ Start Start_3) (* Start_1 Start) (div Start Start_7) (ite StartBool_2 Start_2 Start_8)))
   (Start_4 Int (0 y x 5 2 (- Start) (- Start_2 Start_1) (+ Start_5 Start_3) (div Start_5 Start_5) (abs Start_3) (ite StartBool_1 Start_5 Start_1)))
   (Start_12 Int (3 1 x (- Start_11 Start_10) (+ Start_6 Start_9) (abs Start_13) (ite StartBool_2 Start_5 Start_1)))
   (Start_13 Int (2 3 (* Start_1 Start_11) (div Start_14 Start_3) (mod Start_7 Start_11) (abs Start_14) (ite StartBool_1 Start_3 Start)))
   (Start_15 Int (5 1 3 (- Start_14 Start_9) (div Start_10 Start_12) (mod Start_10 Start_16)))
   (Start_14 Int (y (div Start_7 Start_11) (abs Start_15) (ite StartBool_1 Start_13 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 2 (abs y))))

(check-synth)
