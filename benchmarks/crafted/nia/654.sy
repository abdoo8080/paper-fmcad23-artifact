(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_4 Int) (StartBool_2 Bool) (Start_1 Int) (Start_7 Int) (Start_3 Int) (StartBool_4 Bool) (Start_2 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_8 Int) (Start_5 Int) (Start_6 Int) (Start_9 Int))
  ((Start Int (4 0 2 (div Start Start_1) (abs Start) (ite StartBool Start_1 Start_1)))
   (StartBool Bool (false (not StartBool) (and StartBool_2 StartBool_5) (<= Start_2 Start_3) (= Start_3 Start_5) (>= Start_4 Start_9) (> Start_5 Start_5)))
   (StartBool_5 Bool (true (not StartBool_2) (or StartBool_5 StartBool_1) (< Start_9 Start_5)))
   (Start_4 Int (4 x 1 (div Start_6 Start_2) (mod Start_2 Start_8) (abs Start_1)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_2) (or StartBool_2 StartBool_3) (<= Start_5 Start_7) (>= Start_7 Start) (> Start_6 Start_3)))
   (Start_1 Int (4 (- Start) (+ Start Start_2) (* Start_1 Start_1) (div Start_2 Start_1) (mod Start_1 Start_2) (abs Start) (ite StartBool Start Start_2)))
   (Start_7 Int (2 0 4 3 (* Start Start_5) (abs Start_6)))
   (Start_3 Int (3 4 0 1 (- Start_1 Start_4) (* Start_1 Start_4) (div Start_5 Start) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_4 Bool (true (not StartBool) (or StartBool_1 StartBool_2) (= Start_1 Start_4) (> Start_5 Start_2)))
   (Start_2 Int (y 4 0 (- Start_2) (+ Start Start_2) (* Start_3 Start_3) (div Start_2 Start_2) (ite StartBool Start_1 Start)))
   (StartBool_1 Bool (true false (not StartBool) (<= Start_4 Start_3) (= Start_3 Start_1)))
   (StartBool_3 Bool (true false (not StartBool) (or StartBool_2 StartBool_4) (< Start_6 Start_4) (> Start_5 Start_3)))
   (Start_8 Int (1 2 x (- Start_7 Start_4) (+ Start_1 Start_3) (div Start_4 Start_6) (ite StartBool_1 Start Start_9)))
   (Start_5 Int (4 (- Start_6) (- Start_2 Start_4) (mod Start_5 Start_5) (abs Start_7) (ite StartBool_2 Start_3 Start_7)))
   (Start_6 Int (4 2 (+ Start_5 Start_6) (abs Start_8)))
   (Start_9 Int (3 y 0 4 x (- Start) (- Start_1 Start_7) (+ Start_2 Start_4) (div Start_8 Start_8) (mod Start_4 Start_8) (abs Start_2) (ite StartBool_2 Start_2 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* x (- 3))))

(check-synth)
