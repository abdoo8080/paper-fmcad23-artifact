(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_3 Bool) (StartBool_2 Bool) (Start_2 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_1 Int) (Start_3 Int) (Start_4 Int) (Start_5 Int) (Start_11 Int) (StartBool_4 Bool) (Start_6 Int) (Start_9 Int) (Start_8 Int) (Start_7 Int) (Start_10 Int))
  ((Start Int (1 3 (- Start_1) (+ Start_2 Start_2) (div Start Start_1)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (or StartBool StartBool) (>= Start_9 Start_7) (> Start_7 Start_10)))
   (StartBool_6 Bool (false true (not StartBool_3) (or StartBool StartBool_1) (< Start_1 Start_9) (= Start_8 Start_9) (>= Start_11 Start_9) (> Start_5 Start_10)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_2) (or StartBool_4 StartBool_1) (<= Start_8 Start_4) (= Start_3 Start_6) (>= Start_6 Start_6)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_1 StartBool_5) (< Start_4 Start_3) (<= Start Start)))
   (Start_2 Int (x 4 (- Start_3) (- Start Start_1) (+ Start_1 Start_3) (abs Start) (ite StartBool_1 Start Start)))
   (StartBool_5 Bool (true (and StartBool_4 StartBool_6) (>= Start_4 Start_1)))
   (StartBool_1 Bool (false (not StartBool_1) (< Start Start) (<= Start_1 Start_1) (>= Start_3 Start_2)))
   (Start_1 Int (1 (- Start_6 Start) (mod Start_3 Start_3) (abs Start_1)))
   (Start_3 Int (2 3 (+ Start_4 Start) (* Start_3 Start_4) (mod Start_4 Start_4) (abs Start_1) (ite StartBool Start_2 Start)))
   (Start_4 Int (3 (+ Start_3 Start_4) (* Start_3 Start_2) (div Start_2 Start_5) (mod Start Start_5) (abs Start_4)))
   (Start_5 Int (x 1 5 (- Start_2) (- Start_4 Start_2) (+ Start_4 Start_4) (* Start_2 Start_3) (div Start Start_4) (mod Start_1 Start) (abs Start_4)))
   (Start_11 Int (1 (- Start_5 Start_1) (+ Start_9 Start_11) (div Start_6 Start_3) (mod Start_7 Start) (abs Start_4) (ite StartBool_1 Start_7 Start)))
   (StartBool_4 Bool (true (not StartBool_5) (<= Start_7 Start_5) (= Start_10 Start) (>= Start_10 Start_6) (> Start_5 Start_6)))
   (Start_6 Int (5 (- Start_5) (+ Start_7 Start_5) (div Start_6 Start_3)))
   (Start_9 Int (0 (- Start_1 Start_3) (* Start_5 Start_2) (div Start_9 Start_8) (mod Start_4 Start_1) (abs Start_5) (ite StartBool Start_2 Start_3)))
   (Start_8 Int (2 0 (mod Start_8 Start_4) (abs Start_7) (ite StartBool Start_9 Start_3)))
   (Start_7 Int (2 5 y 0 3 x (- Start_1 Start_6) (* Start_1 Start_4) (ite StartBool Start_1 Start_8)))
   (Start_10 Int (y (- Start_6) (- Start_10 Start_5) (+ Start_9 Start_1) (div Start Start_6) (mod Start Start_10) (abs Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* x (div 3 y))))

(check-synth)
