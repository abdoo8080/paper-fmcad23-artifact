(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_8 Int) (Start_13 Int) (Start_11 Int) (StartBool_5 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_10 Int) (StartBool_1 Bool) (Start_4 Int) (Start_6 Int) (Start_12 Int) (Start_9 Int) (Start_1 Int) (Start_7 Int) (StartBool_3 Bool) (Start_3 Int) (StartBool_4 Bool) (Start_2 Int))
  ((Start Int (3 2 (- Start) (div Start Start) (abs Start_1)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_5 StartBool_1) (= Start Start_5) (>= Start_8 Start_10) (> Start_3 Start_9)))
   (Start_8 Int (4 (* Start_9 Start_11) (div Start_9 Start_4) (abs Start_10) (ite StartBool_5 Start_1 Start_5)))
   (Start_13 Int (0 1 x 4 3 2 (- Start) (+ Start_8 Start_3) (* Start Start_11) (abs Start_6) (ite StartBool_2 Start_13 Start_12)))
   (Start_11 Int (4 x (- Start_7) (- Start_12 Start_9) (mod Start_1 Start_2)))
   (StartBool_5 Bool (true false (not StartBool_5) (< Start_4 Start_5) (<= Start_3 Start_6) (> Start_10 Start_3)))
   (Start_5 Int (2 (- Start_3) (- Start_6 Start_6) (div Start_1 Start_6) (abs Start_2)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_3 StartBool_1) (< Start_1 Start_3) (> Start_6 Start_6)))
   (Start_10 Int (4 2 5 x (+ Start_9 Start_5) (* Start_1 Start_2) (div Start_3 Start_11) (mod Start_11 Start_13) (ite StartBool_5 Start_12 Start_2)))
   (StartBool_1 Bool (false (and StartBool StartBool_1) (or StartBool StartBool_1) (< Start_3 Start) (>= Start_4 Start_2)))
   (Start_4 Int (4 0 (- Start_1) (- Start_1 Start_4) (+ Start_5 Start_3) (* Start_6 Start_2) (div Start Start_2)))
   (Start_6 Int (x 3 y 4 (mod Start_3 Start_1) (abs Start_6)))
   (Start_12 Int (1 (- Start_5 Start_4) (* Start_11 Start_4) (div Start_6 Start_10) (mod Start_13 Start_10) (abs Start_6) (ite StartBool_4 Start_8 Start)))
   (Start_9 Int (x (- Start_1) (* Start_10 Start_4) (div Start_8 Start_11) (mod Start_5 Start_2) (abs Start_10) (ite StartBool_5 Start_11 Start_1)))
   (Start_1 Int (4 (- Start) (- Start Start_2) (div Start_1 Start) (abs Start_2) (ite StartBool_1 Start_1 Start_2)))
   (Start_7 Int (1 x (+ Start_4 Start_1) (* Start Start_7) (ite StartBool_2 Start_5 Start_6)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool_4) (< Start_7 Start_1) (>= Start_7 Start_5)))
   (Start_3 Int (5 (- Start_3 Start_7) (+ Start_4 Start) (mod Start Start_4) (abs Start_7) (ite StartBool_1 Start_2 Start_3)))
   (StartBool_4 Bool (false (< Start Start_2) (<= Start_6 Start_6)))
   (Start_2 Int (y (- Start_1 Start_8) (+ Start_9 Start_8) (div Start_7 Start_1) (mod Start_8 Start_6) (ite StartBool_1 Start_8 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- x (+ y 4)) 2)))

(check-synth)
