(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (Start_5 Int) (Start_1 Int) (Start_4 Int) (Start_8 Int) (StartBool_1 Bool) (Start_6 Int) (Start_2 Int) (Start_7 Int) (StartBool_2 Bool) (Start_9 Int) (StartBool_3 Bool))
  ((Start Int (5 4 0 (- Start Start) (+ Start Start) (* Start_1 Start_1) (div Start Start_2) (ite StartBool Start_3 Start)))
   (StartBool Bool (true (not StartBool) (or StartBool_2 StartBool_3) (< Start_8 Start_4) (= Start_3 Start_7)))
   (Start_3 Int (3 (- Start_1) (- Start_1 Start_1) (* Start_2 Start) (div Start_4 Start_5) (mod Start_2 Start_1)))
   (Start_5 Int (5 (- Start_1) (- Start_4 Start_4) (* Start_2 Start) (mod Start_3 Start_2) (abs Start) (ite StartBool Start_3 Start_4)))
   (Start_1 Int (y (- Start_2) (- Start_4 Start_3) (* Start_8 Start_2) (mod Start Start_9) (abs Start_8) (ite StartBool Start_4 Start_7)))
   (Start_4 Int (y (- Start_4) (- Start_6 Start_3) (+ Start Start_5) (* Start_4 Start_1) (div Start_1 Start) (mod Start_7 Start_3) (abs Start_4) (ite StartBool_1 Start_1 Start_8)))
   (Start_8 Int (0 1 3 y (- Start_5) (mod Start_7 Start_5) (abs Start_8) (ite StartBool Start_6 Start_2)))
   (StartBool_1 Bool (true false (not StartBool_2) (>= Start_1 Start_8) (> Start_8 Start_4)))
   (Start_6 Int (1 (- Start_3) (* Start_1 Start_5) (div Start Start_9) (abs Start_5) (ite StartBool Start_3 Start_1)))
   (Start_2 Int (y (- Start_9 Start_3) (+ Start Start) (* Start_6 Start_6) (div Start_7 Start_9)))
   (Start_7 Int (3 (div Start_2 Start) (abs Start_3) (ite StartBool_2 Start_8 Start_5)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool) (= Start_5 Start_8)))
   (Start_9 Int (2 (* Start_4 Start_3) (ite StartBool_3 Start_3 Start_5)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool_2) (> Start Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (mod 5 0) y)))

(check-synth)
