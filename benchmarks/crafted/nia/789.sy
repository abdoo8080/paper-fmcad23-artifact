(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_6 Int) (Start_2 Int) (Start_17 Int) (Start_7 Int) (Start_12 Int) (Start_8 Int) (Start_13 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_4 Int) (Start_10 Int) (Start_5 Int) (Start_14 Int) (Start_9 Int) (Start_1 Int) (StartBool_1 Bool) (Start_11 Int) (Start_15 Int) (Start_16 Int) (StartBool_3 Bool))
  ((Start Int (0 1 (+ Start_1 Start_1)))
   (StartBool Bool (false true (not StartBool_2) (or StartBool_4 StartBool) (< Start_3 Start_15) (<= Start_8 Start) (= Start_18 Start_4) (> Start_12 Start_12)))
   (Start_18 Int (y 1 (- Start_9) (- Start_1 Start_3) (+ Start_10 Start_4) (* Start_3 Start_8) (mod Start_15 Start_13) (abs Start_8) (ite StartBool_5 Start_16 Start_4)))
   (Start_6 Int (4 3 (- Start_17 Start_14) (+ Start_3 Start_1) (* Start_6 Start_13) (ite StartBool_4 Start_15 Start_17)))
   (Start_2 Int (1 (- Start_4 Start_8) (* Start_3 Start) (div Start_2 Start_16)))
   (Start_17 Int (3 (- Start_14) (- Start_17 Start) (* Start_12 Start_8) (div Start_14 Start_10) (ite StartBool_2 Start_15 Start_3)))
   (Start_7 Int (3 4 (+ Start_15 Start_11) (mod Start_7 Start_5) (ite StartBool_2 Start_7 Start_7)))
   (Start_12 Int (x (- Start_17 Start_11) (+ Start_11 Start_8) (mod Start_6 Start_3)))
   (Start_8 Int (1 (- Start_17) (- Start_14 Start) (+ Start_13 Start_15) (mod Start_13 Start_3) (abs Start_6) (ite StartBool_5 Start_14 Start_9)))
   (Start_13 Int (3 (- Start_8) (- Start_1 Start) (div Start_10 Start_2)))
   (StartBool_5 Bool (true false (>= Start_10 Start_1) (> Start_3 Start_1)))
   (StartBool_4 Bool (false (not StartBool) (or StartBool_5 StartBool_1) (<= Start_1 Start_5) (= Start Start_12) (>= Start Start_4)))
   (Start_3 Int (2 y (- Start_6) (+ Start_15 Start_3) (* Start Start_15) (ite StartBool_4 Start_11 Start_15)))
   (StartBool_2 Bool (true (<= Start Start) (= Start_4 Start_1)))
   (Start_4 Int (3 5 (- Start_2 Start_1) (div Start_5 Start_2) (ite StartBool_1 Start_1 Start)))
   (Start_10 Int (1 (- Start_11 Start_8) (* Start_2 Start_12) (div Start Start_13) (mod Start_14 Start_15)))
   (Start_5 Int (x (- Start) (- Start_6 Start_1) (+ Start Start_4) (* Start_7 Start_2) (div Start_8 Start_5) (mod Start_5 Start_6) (abs Start_7) (ite StartBool Start_9 Start_8)))
   (Start_14 Int (0 3 (* Start_14 Start_7) (mod Start_5 Start_8) (abs Start_6) (ite StartBool_3 Start_8 Start_2)))
   (Start_9 Int (2 1 x (- Start_8) (+ Start Start_8) (* Start Start_3) (div Start_7 Start_10) (mod Start_1 Start_11) (abs Start_8)))
   (Start_1 Int (x 2 (- Start) (- Start Start) (* Start_2 Start_3) (div Start Start) (mod Start_1 Start_2) (ite StartBool Start_1 Start_4)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool) (or StartBool_2 StartBool_1) (<= Start Start) (>= Start_5 Start_3)))
   (Start_11 Int (0 (- Start_1 Start_2) (* Start_11 Start_3) (abs Start_9)))
   (Start_15 Int (4 0 (+ Start_8 Start_5) (* Start_6 Start_16)))
   (Start_16 Int (2 y (- Start_9 Start_1) (mod Start_4 Start_14) (abs Start_2) (ite StartBool Start_4 Start_10)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_1 StartBool) (<= Start_13 Start_1) (= Start_11 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 0 (+ y 4))))

(check-synth)
