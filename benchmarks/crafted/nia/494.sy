(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_19 Int) (StartBool_3 Bool) (Start_16 Int) (Start_13 Int) (Start_15 Int) (Start_12 Int) (Start_2 Int) (Start_6 Int) (StartBool_1 Bool) (Start_9 Int) (Start_8 Int) (Start_3 Int) (Start_14 Int) (Start_10 Int) (Start_1 Int) (StartBool_2 Bool) (Start_17 Int) (Start_7 Int) (Start_11 Int) (Start_4 Int) (Start_5 Int))
  ((Start Int (4 (- Start_1) (+ Start_1 Start_1) (* Start Start_2) (div Start_1 Start_1) (mod Start_2 Start_2)))
   (StartBool Bool (true false (< Start_1 Start_15) (= Start_14 Start_15) (>= Start_3 Start_12)))
   (Start_18 Int (2 5 3 (- Start_10) (- Start_15 Start_19) (+ Start_10 Start_17) (* Start_6 Start_1) (div Start_18 Start_9) (abs Start_12) (ite StartBool_2 Start_8 Start_2)))
   (Start_19 Int (0 (+ Start_12 Start) (div Start Start_5)))
   (StartBool_3 Bool (true false (or StartBool_3 StartBool_3) (< Start_9 Start) (<= Start_13 Start_9) (>= Start_17 Start_9) (> Start_10 Start_19)))
   (Start_16 Int (3 (* Start_8 Start_6) (div Start_1 Start_16) (mod Start_6 Start_11) (abs Start_17) (ite StartBool_2 Start_2 Start_7)))
   (Start_13 Int (y (- Start_11) (- Start_3 Start) (+ Start Start_1) (div Start_3 Start_15) (mod Start_3 Start_16)))
   (Start_15 Int (x (- Start_11) (- Start_9 Start_1) (+ Start_1 Start) (mod Start_10 Start_2) (ite StartBool Start_1 Start)))
   (Start_12 Int (x (- Start_13) (- Start_14 Start_12) (mod Start_3 Start_9)))
   (Start_2 Int (5 0 x y 2 1 (- Start Start_2) (+ Start Start_2) (mod Start_2 Start_1) (ite StartBool Start_2 Start)))
   (Start_6 Int (y 4 1 3 0 (- Start_3) (- Start Start_3) (+ Start_1 Start_5) (div Start_5 Start_7) (mod Start_5 Start_6) (abs Start_3)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_2) (or StartBool_1 StartBool) (< Start Start_8) (<= Start_9 Start_1) (>= Start_9 Start)))
   (Start_9 Int (y (- Start_5) (+ Start_3 Start_8) (abs Start) (ite StartBool Start_7 Start_9)))
   (Start_8 Int (4 (abs Start_6) (ite StartBool_2 Start_8 Start_4)))
   (Start_3 Int (y (- Start_9) (- Start_10 Start_4) (* Start_18 Start_9) (div Start_9 Start_19) (mod Start_9 Start_14) (abs Start_7) (ite StartBool_3 Start_17 Start_8)))
   (Start_14 Int (3 (- Start_15) (+ Start_15 Start_2)))
   (Start_10 Int (5 (- Start_1) (+ Start_2 Start_11) (mod Start_10 Start_4)))
   (Start_1 Int (1 5 0 3 4 y (+ Start_2 Start_3) (mod Start_4 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_1) (<= Start_6 Start_4) (= Start_9 Start_6) (>= Start_7 Start_7) (> Start Start_10)))
   (Start_17 Int (4 1 (- Start_6) (- Start_3 Start_1) (+ Start_5 Start_14) (* Start_7 Start_7) (div Start_16 Start_4) (mod Start_5 Start_6) (abs Start_7) (ite StartBool_1 Start Start_2)))
   (Start_7 Int (x (+ Start Start_8) (* Start Start_3) (div Start_8 Start_8) (mod Start_5 Start_9) (abs Start_4) (ite StartBool Start_4 Start_3)))
   (Start_11 Int (y (- Start_9) (abs Start_3) (ite StartBool_1 Start Start_11)))
   (Start_4 Int (y (- Start_3) (- Start_2 Start) (+ Start_2 Start) (* Start Start_3) (mod Start Start_5) (ite StartBool_1 Start_4 Start_6)))
   (Start_5 Int (3 2 (- Start_8) (* Start_12 Start_7) (mod Start_11 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- 2 x))))

(check-synth)
