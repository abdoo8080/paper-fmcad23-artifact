(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (Start_17 Int) (Start_16 Int) (StartBool_1 Bool) (Start_1 Int) (StartBool_2 Bool) (Start_15 Int) (Start_6 Int) (Start_7 Int) (Start_11 Int) (Start_9 Int) (Start_4 Int) (Start_8 Int) (Start_18 Int) (Start_2 Int) (Start_12 Int) (Start_5 Int) (Start_14 Int) (Start_13 Int) (Start_10 Int))
  ((Start Int (5 (- Start Start_1) (* Start_1 Start_1) (div Start Start) (abs Start_2)))
   (StartBool Bool (false true (>= Start_14 Start_13) (> Start_5 Start_2)))
   (Start_3 Int (5 0 (- Start_10) (* Start_17 Start_4) (div Start_15 Start_1) (mod Start_6 Start_15) (abs Start_14) (ite StartBool_1 Start_12 Start_17)))
   (Start_17 Int (x (* Start_3 Start_13)))
   (Start_16 Int (1 (+ Start_15 Start_6) (div Start_17 Start_16) (abs Start_3)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (or StartBool_2 StartBool_2) (< Start_13 Start) (>= Start_7 Start) (> Start_11 Start)))
   (Start_1 Int (1 x 2 0 y (mod Start_9 Start_18) (abs Start_13)))
   (StartBool_2 Bool (true false (<= Start_11 Start_6) (= Start_12 Start_7) (>= Start_4 Start_8) (> Start_12 Start_11)))
   (Start_15 Int (1 (- Start_9) (- Start_5 Start_13) (* Start_1 Start_6) (div Start_16 Start_6) (abs Start) (ite StartBool_1 Start_1 Start_9)))
   (Start_6 Int (y (- Start_6) (mod Start_7 Start_6)))
   (Start_7 Int (1 y 3 4 (* Start_8 Start_9) (div Start_5 Start_5) (abs Start_1) (ite StartBool_1 Start Start_3)))
   (Start_11 Int (y 2 (- Start_8 Start_10) (div Start_12 Start_12) (abs Start_13) (ite StartBool_1 Start_5 Start_6)))
   (Start_9 Int (2 0 (- Start_2) (* Start_2 Start_9) (ite StartBool_1 Start_6 Start)))
   (Start_4 Int (5 (- Start_14) (- Start_15 Start_15) (+ Start_12 Start_5) (div Start Start_5)))
   (Start_8 Int (x (- Start_8) (+ Start_3 Start_3) (mod Start_8 Start_5)))
   (Start_18 Int (2 (- Start_12 Start_14) (* Start_5 Start_1) (mod Start_12 Start_9) (ite StartBool Start_4 Start_7)))
   (Start_2 Int (3 1 (- Start_3 Start_1) (+ Start Start_2) (* Start_2 Start_1) (mod Start_4 Start_4) (ite StartBool_1 Start_5 Start_6)))
   (Start_12 Int (5 0 3 4 1 (- Start_2) (abs Start_1)))
   (Start_5 Int (y (+ Start_9 Start_4) (* Start_6 Start_10) (abs Start_2) (ite StartBool_2 Start_8 Start)))
   (Start_14 Int (2 4 x 3 5 1 y 0 (- Start_6 Start_13) (* Start Start_5) (div Start_10 Start_5) (mod Start_7 Start_11)))
   (Start_13 Int (x (- Start_8 Start_12) (+ Start_13 Start_13) (* Start_2 Start_11) (mod Start_7 Start_3) (abs Start_5) (ite StartBool Start_11 Start_4)))
   (Start_10 Int (1 (- Start_9) (- Start_14 Start_5) (+ Start_5 Start_10) (* Start_1 Start_7) (div Start_9 Start_4) (mod Start_13 Start_11) (ite StartBool_1 Start_6 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 2 (- (- (mod 2 x) 2) 5))))

(check-synth)
