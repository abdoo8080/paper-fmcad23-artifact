(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (StartBool_7 Bool) (Start_14 Int) (Start_13 Int) (Start_1 Int) (StartBool_6 Bool) (StartBool_4 Bool) (StartBool_5 Bool) (Start_5 Int) (Start_4 Int) (StartBool_1 Bool) (Start_3 Int) (Start_6 Int) (Start_9 Int) (Start_8 Int) (StartBool_3 Bool) (StartBool_8 Bool) (Start_15 Int) (Start_10 Int) (Start_11 Int) (Start_2 Int) (Start_7 Int) (Start_12 Int) (StartBool_2 Bool))
  ((Start Int (3 4 0 5 (- Start_1) (* Start_2 Start) (div Start_2 Start_1) (mod Start_1 Start_3) (ite StartBool_1 Start_4 Start_3)))
   (StartBool Bool (false (or StartBool_3 StartBool_8) (> Start_5 Start_6)))
   (Start_16 Int (0 5 4 (- Start_9) (mod Start_14 Start_7) (ite StartBool_4 Start_5 Start_10)))
   (StartBool_7 Bool (true false (and StartBool_8 StartBool_8) (>= Start_8 Start_11)))
   (Start_14 Int (3 x (+ Start_13 Start_8) (div Start_13 Start_1) (abs Start_3) (ite StartBool_7 Start_6 Start_15)))
   (Start_13 Int (3 (- Start) (- Start_11 Start) (* Start_11 Start_14) (div Start_8 Start_7)))
   (Start_1 Int (1 y 5 (* Start_7 Start_6) (div Start_5 Start_2) (mod Start_13 Start_1)))
   (StartBool_6 Bool (false (not StartBool_2) (and StartBool_4 StartBool_3) (<= Start_11 Start_5) (>= Start_12 Start_9)))
   (StartBool_4 Bool (false true (not StartBool) (and StartBool_3 StartBool_1) (or StartBool_1 StartBool_6) (= Start_4 Start_1) (>= Start Start_8)))
   (StartBool_5 Bool (true false (and StartBool_2 StartBool_2) (or StartBool StartBool_3) (< Start_10 Start_5) (= Start_5 Start_8) (>= Start_7 Start_1)))
   (Start_5 Int (3 y x (- Start_1) (- Start_1 Start_10) (+ Start_11 Start_11) (* Start_1 Start_1) (div Start_6 Start_8) (mod Start_11 Start_5) (ite StartBool Start_11 Start_9)))
   (Start_4 Int (0 y x 3 4 1 5 2 (- Start_4) (+ Start_1 Start_2) (* Start_2 Start) (abs Start) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_2 StartBool) (< Start Start) (<= Start_5 Start_6) (>= Start_4 Start_3)))
   (Start_3 Int (x (- Start_10) (mod Start_1 Start_2) (ite StartBool_2 Start_3 Start_9)))
   (Start_6 Int (0 2 y 5 3 (- Start_2) (+ Start_7 Start_4) (* Start_8 Start_7) (div Start_6 Start_4) (ite StartBool_1 Start Start_4)))
   (Start_9 Int (y (- Start_3) (+ Start_5 Start_7) (* Start_5 Start) (div Start_6 Start_4) (mod Start_9 Start_6) (ite StartBool_3 Start_4 Start)))
   (Start_8 Int (5 y (- Start_4 Start_4) (* Start_7 Start_2) (div Start_1 Start_2)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_3 StartBool) (< Start_1 Start_2) (>= Start_5 Start_3) (> Start_3 Start_10)))
   (StartBool_8 Bool (true false (not StartBool_4) (< Start_10 Start_2) (<= Start_1 Start_15) (= Start_5 Start_11) (>= Start_16 Start_8)))
   (Start_15 Int (2 (+ Start_5 Start_8) (* Start_3 Start_2) (abs Start_5) (ite StartBool_4 Start_5 Start_13)))
   (Start_10 Int (1 3 5 2 (- Start_10) (- Start_8 Start_9) (div Start_3 Start_7) (mod Start_5 Start_1) (abs Start_3)))
   (Start_11 Int (5 (- Start_4) (- Start_11 Start_2) (mod Start_2 Start_12) (ite StartBool_1 Start_5 Start_11)))
   (Start_2 Int (3 (div Start_8 Start_2) (mod Start_7 Start_10)))
   (Start_7 Int (4 (- Start_4) (+ Start_3 Start_9) (* Start_8 Start_7) (abs Start_4)))
   (Start_12 Int (1 (- Start_1) (+ Start_11 Start_2) (* Start_8 Start_1) (div Start_6 Start_7) (abs Start_5)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_1 StartBool_1) (or StartBool_4 StartBool_5) (= Start_8 Start_7) (>= Start_10 Start_5) (> Start_6 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 0 0))))

(check-synth)
