(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_11 Int) (StartBool_4 Bool) (Start_2 Int) (StartBool_2 Bool) (Start_3 Int) (StartBool_1 Bool) (Start_4 Int) (Start_8 Int) (Start_5 Int) (Start_1 Int) (Start_6 Int) (Start_7 Int) (Start_9 Int) (Start_10 Int) (StartBool_3 Bool))
  ((Start Int (x y 2 4 3 (- Start) (- Start Start_1) (+ Start_1 Start_1) (* Start_1 Start_1) (div Start_2 Start_2) (mod Start_1 Start_1)))
   (StartBool Bool (true (not StartBool_3) (or StartBool_4 StartBool_2) (< Start_5 Start_8) (= Start_10 Start_4)))
   (StartBool_5 Bool (true (and StartBool StartBool_2) (< Start_8 Start_1) (<= Start_1 Start_4) (>= Start_4 Start_8)))
   (Start_11 Int (y (- Start_6) (- Start_1 Start_8) (+ Start_4 Start_1) (* Start_4 Start_3) (ite StartBool_4 Start_6 Start_5)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool StartBool_3) (or StartBool_5 StartBool_4) (<= Start_2 Start_2) (= Start_1 Start_3)))
   (Start_2 Int (y (- Start_1 Start_1) (+ Start_1 Start_2) (div Start_2 Start_1) (ite StartBool Start Start_3)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool_1) (or StartBool StartBool) (< Start_2 Start_1) (<= Start_5 Start_4) (>= Start_2 Start_6) (> Start_5 Start_7)))
   (Start_3 Int (0 1 x (- Start) (- Start Start_4) (mod Start Start) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_1 Bool (false true (not StartBool_1) (> Start_4 Start)))
   (Start_4 Int (0 (+ Start Start_5) (div Start_2 Start) (mod Start_3 Start_3) (ite StartBool_1 Start_1 Start_4)))
   (Start_8 Int (0 4 3 x 2 (* Start Start_3) (div Start_7 Start_7)))
   (Start_5 Int (5 1 (- Start_2) (abs Start_5)))
   (Start_1 Int (1 (- Start_2 Start_5) (* Start_4 Start_5) (div Start_3 Start) (abs Start) (ite StartBool_2 Start_1 Start)))
   (Start_6 Int (1 (- Start_9 Start_7) (div Start_6 Start_4) (mod Start_8 Start_5) (ite StartBool_2 Start_2 Start_4)))
   (Start_7 Int (0 x 3 (- Start_6) (- Start_6 Start_4) (+ Start_1 Start_8) (mod Start_2 Start_8) (abs Start_9)))
   (Start_9 Int (3 (- Start Start_5) (+ Start_7 Start_4) (mod Start_9 Start_2) (ite StartBool_3 Start_6 Start_4)))
   (Start_10 Int (2 (- Start_3) (- Start_11 Start_6) (* Start_4 Start_1) (div Start_11 Start_4) (mod Start_2 Start_4)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool) (< Start_3 Start_9) (>= Start Start_7) (> Start_8 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (div (- y 1) (+ 1 5)) 4)))

(check-synth)
