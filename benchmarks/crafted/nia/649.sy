(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_1 Int) (StartBool_1 Bool) (Start_7 Int) (Start_5 Int) (Start_6 Int) (Start_3 Int) (StartBool_2 Bool) (Start_4 Int))
  ((Start Int (0 (- Start_1 Start) (+ Start_1 Start_2) (mod Start Start_3)))
   (StartBool Bool (false (not StartBool) (< Start_6 Start_5) (<= Start Start_7) (= Start_2 Start_2) (> Start_7 Start_7)))
   (Start_2 Int (5 (- Start_2) (* Start Start) (div Start_5 Start_2)))
   (Start_1 Int (1 (- Start_1) (* Start_5 Start_6) (div Start_3 Start_3) (mod Start_5 Start_2) (abs Start_2)))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (or StartBool StartBool) (> Start_5 Start_4)))
   (Start_7 Int (3 (- Start_4) (- Start_2 Start_5) (mod Start_6 Start_3) (ite StartBool Start Start_7)))
   (Start_5 Int (2 x (- Start_2) (+ Start_5 Start_4) (mod Start_3 Start_4) (abs Start_3) (ite StartBool_1 Start_3 Start_4)))
   (Start_6 Int (2 (- Start_1) (- Start_2 Start_2) (+ Start_1 Start_3) (* Start_5 Start_7) (mod Start_7 Start_3) (abs Start_6)))
   (Start_3 Int (1 3 (+ Start_2 Start_4) (div Start_4 Start_3) (abs Start)))
   (StartBool_2 Bool (false (< Start_4 Start_4) (<= Start_5 Start_5) (>= Start_1 Start_1) (> Start_5 Start)))
   (Start_4 Int (y (- Start) (* Start_5 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (* 5 y) 2)))

(check-synth)
