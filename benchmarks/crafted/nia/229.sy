(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_8 Bool) (Start_17 Int) (StartBool_6 Bool) (Start_1 Int) (Start_2 Int) (Start_16 Int) (Start_10 Int) (StartBool_2 Bool) (StartBool_5 Bool) (StartBool_7 Bool) (Start_15 Int) (Start_13 Int) (Start_14 Int) (Start_6 Int) (StartBool_4 Bool) (Start_4 Int) (StartBool_1 Bool) (Start_3 Int) (Start_8 Int) (Start_9 Int) (Start_7 Int) (Start_5 Int) (Start_12 Int) (Start_11 Int) (StartBool_3 Bool))
  ((Start Int (2 (- Start_1) (- Start_2 Start_2) (+ Start_3 Start_2) (* Start_3 Start_4) (div Start_1 Start_1) (abs Start)))
   (StartBool Bool (true (and StartBool_5 StartBool_6) (< Start_12 Start_6) (<= Start_8 Start_14) (= Start_7 Start_12)))
   (StartBool_8 Bool (true (< Start_7 Start_9) (<= Start_6 Start_6) (>= Start_1 Start_7)))
   (Start_17 Int (5 3 (- Start_9) (+ Start_16 Start) (div Start_15 Start_14) (ite StartBool_3 Start_15 Start_7)))
   (StartBool_6 Bool (true false (not StartBool_3) (or StartBool_5 StartBool_7) (< Start_7 Start_13) (= Start_8 Start_7) (>= Start_17 Start_5)))
   (Start_1 Int (4 5 y 0 3 2 x 1 (+ Start_12 Start_10) (div Start_9 Start_9) (mod Start_11 Start_3) (ite StartBool_4 Start_12 Start_12)))
   (Start_2 Int (4 2 1 (- Start_13) (+ Start_6 Start_11) (* Start_3 Start_4) (div Start_7 Start_1) (mod Start_7 Start)))
   (Start_16 Int (y 2 (- Start_13) (* Start_3 Start_2) (div Start_5 Start_10)))
   (Start_10 Int (3 2 0 (- Start_3) (mod Start_16 Start_6)))
   (StartBool_2 Bool (true (or StartBool_3 StartBool_4) (< Start_13 Start_1) (<= Start_7 Start_11) (> Start_1 Start_8)))
   (StartBool_5 Bool (false true (and StartBool_2 StartBool_7) (> Start_15 Start_2)))
   (StartBool_7 Bool (false true (not StartBool_8) (or StartBool_7 StartBool_8) (<= Start_17 Start_6) (= Start_14 Start_5)))
   (Start_15 Int (y (- Start_12 Start_10) (+ Start_11 Start_13) (* Start_3 Start_11) (div Start_11 Start_1) (mod Start Start_7)))
   (Start_13 Int (y 3 2 5 x 1 (- Start_7) (+ Start_3 Start_10) (* Start_13 Start_10) (div Start_14 Start_15) (mod Start_14 Start_5) (abs Start)))
   (Start_14 Int (x y 4 3 5 1 2 0 (+ Start_3 Start_12) (* Start_11 Start_14) (div Start_13 Start_8)))
   (Start_6 Int (5 2 (- Start_6 Start_4) (+ Start_6 Start_5) (* Start Start_7) (div Start Start_2) (abs Start_8) (ite StartBool_1 Start_6 Start_4)))
   (StartBool_4 Bool (true false (not StartBool_3) (< Start Start_1) (<= Start_5 Start_2) (>= Start_7 Start_9)))
   (Start_4 Int (3 (- Start_5) (- Start_6 Start_1) (abs Start)))
   (StartBool_1 Bool (true false (< Start_5 Start_2) (= Start_8 Start_8) (>= Start Start_7) (> Start_1 Start)))
   (Start_3 Int (0 (+ Start_8 Start_4) (mod Start_9 Start_6) (abs Start_10) (ite StartBool_2 Start_9 Start_11)))
   (Start_8 Int (x 3 (- Start_6) (div Start Start_1) (abs Start_2)))
   (Start_9 Int (1 x (- Start_6) (- Start_8 Start) (+ Start_3 Start_5) (* Start_9 Start_2) (abs Start_2)))
   (Start_7 Int (x 4 (- Start_9 Start_2) (* Start_3 Start_3) (mod Start_5 Start_2)))
   (Start_5 Int (2 1 3 (- Start_5) (div Start_7 Start_6) (mod Start_8 Start) (abs Start_5) (ite StartBool Start_6 Start_6)))
   (Start_12 Int (3 (- Start_2 Start_11) (+ Start_7 Start_12) (div Start_11 Start) (mod Start_2 Start_10) (ite StartBool_4 Start_3 Start_6)))
   (Start_11 Int (5 4 (div Start_1 Start_9) (ite StartBool_3 Start_6 Start_12)))
   (StartBool_3 Bool (false (not StartBool_1) (= Start_8 Start_7) (>= Start_3 Start_6) (> Start_13 Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod 2 (- 2 y)) 1)))

(check-synth)
