(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_4 Bool) (Start_1 Int) (Start_12 Int) (Start_2 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_5 Int) (Start_4 Int) (Start_8 Int) (Start_6 Int) (Start_7 Int) (Start_13 Int) (Start_9 Int) (StartBool_3 Bool) (Start_10 Int) (StartBool_7 Bool) (StartBool_5 Bool) (Start_11 Int))
  ((Start Int (x (- Start_1) (+ Start Start_2) (* Start_2 Start_1) (ite StartBool Start_3 Start_2)))
   (StartBool Bool (true (or StartBool_7 StartBool_2) (< Start_4 Start_13) (<= Start_10 Start_10)))
   (StartBool_6 Bool (true (not StartBool_1) (and StartBool_4 StartBool_4) (<= Start_10 Start_4) (>= Start_11 Start_4)))
   (StartBool_4 Bool (false (not StartBool_3) (or StartBool_3 StartBool_5) (= Start Start_11)))
   (Start_1 Int (1 (- Start_7) (+ Start_11 Start_6) (* Start_9 Start_3) (mod Start_9 Start_11) (ite StartBool_3 Start_1 Start_11)))
   (Start_12 Int (5 (- Start_1 Start_8) (* Start_3 Start_5) (div Start_3 Start) (mod Start_4 Start_11) (ite StartBool_4 Start_3 Start_8)))
   (Start_2 Int (x 0 5 2 y (+ Start_4 Start_2) (div Start_6 Start_12) (mod Start_2 Start_12) (abs Start_5)))
   (Start_3 Int (3 y (* Start_3 Start_3) (abs Start_3) (ite StartBool_1 Start Start_3)))
   (StartBool_2 Bool (true (or StartBool StartBool_1) (= Start_4 Start_2) (>= Start_4 Start_1) (> Start_5 Start_5)))
   (StartBool_1 Bool (true false (or StartBool_2 StartBool_1) (= Start_1 Start_3) (> Start_2 Start)))
   (Start_5 Int (2 0 (- Start_6) (mod Start Start_3) (ite StartBool_3 Start_3 Start_2)))
   (Start_4 Int (1 (- Start_10) (- Start_11 Start_9) (abs Start_3) (ite StartBool_2 Start_11 Start_5)))
   (Start_8 Int (1 (- Start_8) (abs Start)))
   (Start_6 Int (2 0 1 (- Start_5) (- Start_6 Start_6) (* Start_3 Start_1) (abs Start_10)))
   (Start_7 Int (1 4 (- Start_2 Start_9) (* Start_9 Start_3) (ite StartBool_1 Start_10 Start_3)))
   (Start_13 Int (5 (- Start_9 Start_3)))
   (Start_9 Int (4 0 x (* Start_7 Start_10) (ite StartBool_2 Start_1 Start_4)))
   (StartBool_3 Bool (false true (not StartBool_1) (or StartBool_1 StartBool) (< Start_7 Start_2) (<= Start_5 Start_8) (> Start_4 Start_5)))
   (Start_10 Int (1 (- Start_7) (- Start_3 Start_9) (+ Start_5 Start) (mod Start_3 Start_10)))
   (StartBool_7 Bool (false (and StartBool_7 StartBool_3) (or StartBool_5 StartBool_3) (< Start_1 Start_11) (= Start_5 Start_6)))
   (StartBool_5 Bool (false true (not StartBool_1) (or StartBool_6 StartBool_1) (<= Start_12 Start_8) (= Start_3 Start_12) (> Start_10 Start_3)))
   (Start_11 Int (x 2 1 y 0 (+ Start_3 Start_3) (abs Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div y 0))))

(check-synth)
