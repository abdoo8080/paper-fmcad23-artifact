(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_7 Int) (StartBool_1 Bool) (Start_9 Int) (Start_8 Int) (Start_10 Int) (Start_3 Int) (Start_4 Int) (Start_5 Int) (Start_6 Int) (Start_2 Int) (Start_1 Int))
  ((Start Int (y 0 (* Start Start) (div Start_1 Start)))
   (StartBool Bool (false (not StartBool_1) (< Start_7 Start) (= Start_5 Start_1) (> Start_1 Start_7)))
   (Start_7 Int (4 y (+ Start_1 Start_7) (div Start Start_1) (ite StartBool Start_1 Start_10)))
   (StartBool_1 Bool (true (not StartBool_1) (< Start_3 Start_8) (= Start_5 Start_8) (>= Start_2 Start) (> Start_3 Start)))
   (Start_9 Int (3 x (- Start_6) (- Start_9 Start_9) (+ Start_7 Start_3) (* Start_1 Start) (mod Start_7 Start_7) (ite StartBool_1 Start_8 Start_6)))
   (Start_8 Int (5 4 0 (- Start_9) (+ Start Start_5) (* Start_5 Start_9) (div Start_4 Start_4) (mod Start Start_7) (ite StartBool Start_1 Start_4)))
   (Start_10 Int (y (- Start_10) (- Start_8 Start_3) (+ Start_7 Start_2) (mod Start Start_4) (abs Start_10)))
   (Start_3 Int (1 (- Start_6) (- Start_7 Start_8) (mod Start Start_5) (ite StartBool Start_4 Start_8)))
   (Start_4 Int (y (- Start_1 Start_2) (+ Start_3 Start) (div Start_2 Start_1)))
   (Start_5 Int (x 4 3 0 y 1 5 2 (+ Start_3 Start_5) (div Start Start_2) (mod Start_3 Start_2) (ite StartBool Start Start_4)))
   (Start_6 Int (2 (- Start_4) (- Start_3 Start_10) (+ Start_4 Start_7) (div Start_8 Start_1) (mod Start_4 Start)))
   (Start_2 Int (y (- Start_3 Start_4) (+ Start_4 Start_2) (mod Start_4 Start_5)))
   (Start_1 Int (2 (- Start_1 Start_2) (* Start_2 Start) (abs Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div x 2) 2)))

(check-synth)
