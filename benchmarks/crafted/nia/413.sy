(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_15 Int) (Start_2 Int) (Start_16 Int) (Start_11 Int) (Start_12 Int) (Start_3 Int) (Start_19 Int) (Start_1 Int) (Start_4 Int) (Start_5 Int) (Start_18 Int) (StartBool_1 Bool) (Start_13 Int) (Start_6 Int) (Start_17 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_7 Int) (Start_8 Int) (Start_9 Int) (Start_10 Int) (Start_14 Int))
  ((Start Int (1 3 y x (- Start Start) (div Start_1 Start_1) (ite StartBool Start_1 Start_1)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_3 StartBool_4) (< Start_9 Start_5) (<= Start_8 Start_11) (>= Start_2 Start_5) (> Start_3 Start_11)))
   (StartBool_4 Bool (true (not StartBool_3) (or StartBool_3 StartBool_1) (< Start_14 Start_4)))
   (Start_15 Int (2 x (- Start_1) (+ Start_8 Start_17) (* Start_13 Start_3) (div Start_5 Start_5) (abs Start_18) (ite StartBool_1 Start_8 Start_15)))
   (Start_2 Int (4 (- Start_4) (* Start_13 Start_7) (div Start_7 Start_1) (abs Start_18) (ite StartBool Start_10 Start_17)))
   (Start_16 Int (2 (- Start_7) (- Start_11 Start_9) (+ Start_4 Start_5) (* Start_5 Start_11) (ite StartBool_1 Start_10 Start_17)))
   (Start_11 Int (4 0 (- Start_9) (- Start_13 Start_15) (+ Start_9 Start_10) (* Start_10 Start_8) (div Start_5 Start_11) (mod Start_16 Start_11)))
   (Start_12 Int (2 (* Start Start_11) (div Start_8 Start_9) (mod Start_2 Start_2)))
   (Start_3 Int (2 0 5 1 (- Start_12 Start_5) (mod Start Start_4)))
   (Start_19 Int (x (+ Start_16 Start_17) (* Start_8 Start_15) (div Start_9 Start_6) (mod Start_18 Start_11) (ite StartBool_4 Start_14 Start_16)))
   (Start_1 Int (4 (- Start_2 Start_1) (div Start_1 Start_2) (mod Start_3 Start_1) (abs Start_4)))
   (Start_4 Int (0 4 5 2 1 (- Start_5) (- Start Start_5) (mod Start Start_2) (abs Start_2) (ite StartBool Start_4 Start_4)))
   (Start_5 Int (1 (- Start_5) (- Start Start_4) (* Start_2 Start_6) (div Start_2 Start_2) (mod Start_1 Start) (ite StartBool_1 Start Start_2)))
   (Start_18 Int (2 3 (- Start_14) (ite StartBool_1 Start_9 Start)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (<= Start Start) (= Start_2 Start_5) (>= Start_2 Start_2)))
   (Start_13 Int (0 5 4 (- Start_12) (- Start_3 Start_12) (+ Start_14 Start_10) (* Start_1 Start) (abs Start_9)))
   (Start_6 Int (1 3 (- Start_10) (- Start_2 Start_10) (+ Start_18 Start_14) (* Start_18 Start_4) (div Start_19 Start_7) (abs Start) (ite StartBool_1 Start_12 Start_8)))
   (Start_17 Int (4 1 (- Start_15 Start_8) (+ Start_8 Start_1) (* Start_16 Start_4) (div Start_6 Start_13)))
   (StartBool_2 Bool (true (not StartBool_1) (< Start_1 Start_7) (<= Start_5 Start_6) (= Start_4 Start_5)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool_3 StartBool_3) (or StartBool_3 StartBool_2) (< Start_4 Start_12) (<= Start_3 Start_4) (>= Start_6 Start_4) (> Start_5 Start_2)))
   (Start_7 Int (y (- Start) (+ Start_1 Start) (* Start_8 Start_5) (mod Start_2 Start_9) (abs Start) (ite StartBool_1 Start_9 Start_5)))
   (Start_8 Int (3 x (- Start_2) (- Start_10 Start_1) (div Start_2 Start_9) (mod Start_3 Start_5) (abs Start_2) (ite StartBool_1 Start_4 Start_6)))
   (Start_9 Int (x 2 (* Start_1 Start_7) (abs Start_3)))
   (Start_10 Int (5 (+ Start_7 Start_11) (div Start_12 Start_10) (mod Start_13 Start) (ite StartBool_2 Start_6 Start_10)))
   (Start_14 Int (3 5 x 0 1 (- Start_10 Start_13) (* Start_1 Start_10) (mod Start_13 Start_6) (ite StartBool_3 Start_8 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 5 (mod 4 (+ y x)))))

(check-synth)
