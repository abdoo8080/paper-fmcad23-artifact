(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (Start_18 Int) (Start_10 Int) (StartBool_2 Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_2 Int) (Start_17 Int) (Start_3 Int) (Start_11 Int) (Start_6 Int) (StartBool_1 Bool) (Start_13 Int) (Start_5 Int) (Start_7 Int) (Start_15 Int) (Start_9 Int) (Start_1 Int) (Start_19 Int) (Start_8 Int) (Start_4 Int) (Start_12 Int) (Start_16 Int) (Start_14 Int))
  ((Start Int (5 3 y 1 (- Start_1 Start_2) (+ Start_3 Start_3) (* Start_4 Start_3) (div Start_2 Start_1) (abs Start_3)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool_1) (< Start_4 Start_3) (<= Start_8 Start_7) (= Start_8 Start) (>= Start_3 Start_9)))
   (Start_20 Int (0 4 (+ Start_1 Start_20) (div Start Start_3) (abs Start_2)))
   (Start_18 Int (3 (- Start_7 Start_15) (+ Start_8 Start_5) (* Start_11 Start_1) (abs Start_18) (ite StartBool_1 Start_11 Start_18)))
   (Start_10 Int (1 (* Start_18 Start_12) (ite StartBool_4 Start_6 Start_1)))
   (StartBool_2 Bool (true (not StartBool) (< Start_11 Start_9) (= Start_3 Start_10) (>= Start_7 Start_2) (> Start_3 Start_10)))
   (StartBool_4 Bool (true (not StartBool_2) (and StartBool_2 StartBool) (or StartBool StartBool_1) (< Start_1 Start_13) (> Start_12 Start_16)))
   (StartBool_3 Bool (false (>= Start_6 Start_11) (> Start_8 Start_9)))
   (Start_2 Int (y (* Start_3 Start_5) (div Start_4 Start_2) (mod Start_5 Start_2)))
   (Start_17 Int (x (* Start Start_2) (mod Start_7 Start_1) (ite StartBool_3 Start_8 Start_5)))
   (Start_3 Int (y (- Start_2) (- Start_3 Start_5) (abs Start_3) (ite StartBool_1 Start_6 Start_4)))
   (Start_11 Int (4 (- Start_16 Start_15) (div Start_6 Start_6) (mod Start_10 Start_17)))
   (Start_6 Int (2 3 5 0 (div Start_2 Start_5) (abs Start_5) (ite StartBool_1 Start_5 Start_6)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (or StartBool_1 StartBool_1) (= Start_6 Start) (>= Start_4 Start_1)))
   (Start_13 Int (y (- Start_16) (+ Start_3 Start_1) (div Start_10 Start_8) (mod Start_3 Start_6) (ite StartBool Start_12 Start_5)))
   (Start_5 Int (0 4 2 (+ Start_6 Start_6) (* Start_5 Start_5) (mod Start Start_7)))
   (Start_7 Int (2 (* Start_1 Start_7) (div Start Start_1) (mod Start_6 Start_3)))
   (Start_15 Int (3 0 (- Start_10 Start_4) (+ Start_12 Start_7) (* Start_1 Start_16) (div Start_12 Start_7) (ite StartBool_1 Start_16 Start_11)))
   (Start_9 Int (5 x 3 (+ Start Start_10) (div Start_11 Start_12) (ite StartBool Start_10 Start_4)))
   (Start_1 Int (0))
   (Start_19 Int (y (+ Start_20 Start_13) (* Start_18 Start_14) (mod Start_6 Start_14)))
   (Start_8 Int (2 (+ Start_12 Start_1) (* Start_2 Start_4) (abs Start_19) (ite StartBool_3 Start_2 Start_20)))
   (Start_4 Int (2 1 3 5 y (+ Start_1 Start) (div Start_2 Start_3) (abs Start_2) (ite StartBool Start_2 Start_2)))
   (Start_12 Int (y 5 0 (+ Start_13 Start_2) (* Start_11 Start_1) (div Start_4 Start_9) (mod Start_14 Start_3)))
   (Start_16 Int (x (- Start_2) (abs Start_11) (ite StartBool_1 Start_12 Start_14)))
   (Start_14 Int (5 (- Start_1 Start_1) (+ Start_9 Start_10) (div Start_10 Start_12) (mod Start_8 Start_9) (abs Start_12) (ite StartBool_2 Start_15 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div x x)))

(check-synth)
