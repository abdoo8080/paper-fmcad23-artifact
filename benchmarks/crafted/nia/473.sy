(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_3 Int) (StartBool_4 Bool) (Start_17 Int) (StartBool_3 Bool) (Start_6 Int) (Start_16 Int) (StartBool_1 Bool) (Start_2 Int) (Start_5 Int) (StartBool_2 Bool) (Start_4 Int) (Start_8 Int) (Start_10 Int) (Start_7 Int) (Start_12 Int) (Start_13 Int) (Start_14 Int) (Start_9 Int) (Start_11 Int) (Start_15 Int))
  ((Start Int (x 2 (- Start) (- Start Start) (+ Start Start) (* Start Start) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (false true (not StartBool) (and StartBool_2 StartBool_1) (<= Start_2 Start_5)))
   (Start_1 Int (5 (- Start_4) (- Start Start) (* Start_14 Start_3) (mod Start_9 Start_1)))
   (Start_3 Int (1 (- Start_10) (- Start_10 Start_3) (+ Start Start_17) (* Start_2 Start_17) (ite StartBool_1 Start_16 Start_10)))
   (StartBool_4 Bool (true false (or StartBool_3 StartBool) (< Start_9 Start) (<= Start Start_13) (= Start_16 Start_11) (>= Start_7 Start_12) (> Start_9 Start_4)))
   (Start_17 Int (2 4 (- Start) (+ Start_17 Start_5) (* Start_2 Start_7) (abs Start_17) (ite StartBool_3 Start_13 Start_11)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_1 StartBool) (or StartBool_4 StartBool) (= Start_6 Start) (>= Start_1 Start_10)))
   (Start_6 Int (1 3 0 5 4 2 (- Start_16 Start_4) (* Start_17 Start_16) (div Start_7 Start_16) (mod Start_11 Start_15) (abs Start_5) (ite StartBool_2 Start Start_14)))
   (Start_16 Int (4 (div Start_2 Start_3) (mod Start_10 Start_10)))
   (StartBool_1 Bool (true false (or StartBool StartBool) (< Start_6 Start_11) (<= Start Start_16) (= Start_1 Start_14) (>= Start_14 Start_10) (> Start_14 Start_16)))
   (Start_2 Int (x 5 0 y 4 2 (- Start_3) (- Start_4 Start_3) (+ Start_4 Start_2) (div Start_5 Start_1)))
   (Start_5 Int (4 5 y x (- Start_5 Start_4) (+ Start Start_3) (* Start_5 Start_2) (div Start_3 Start_4) (mod Start_4 Start_5) (abs Start_5) (ite StartBool Start Start_1)))
   (StartBool_2 Bool (true false (not StartBool_3) (< Start Start_7) (>= Start_5 Start_3) (> Start Start)))
   (Start_4 Int (0 (- Start_6) (- Start_1 Start_5) (+ Start_7 Start_8) (div Start_2 Start) (mod Start Start_8)))
   (Start_8 Int (0 (- Start_9) (div Start_9 Start_10) (mod Start_8 Start_2) (abs Start_8)))
   (Start_10 Int (2 1 (- Start_3 Start_5) (* Start_4 Start_5) (abs Start_3) (ite StartBool Start_9 Start)))
   (Start_7 Int (1 3 (- Start_6) (- Start_1 Start_5) (+ Start Start_1) (mod Start_7 Start_2) (ite StartBool_1 Start_11 Start_12)))
   (Start_12 Int (1 (- Start_13) (* Start_12 Start_12) (abs Start_1)))
   (Start_13 Int (2 (- Start_12) (+ Start_10 Start) (* Start_9 Start_11) (mod Start Start_12) (abs Start_6)))
   (Start_14 Int (2 0 (- Start_6) (- Start_13 Start_3) (mod Start_15 Start_7) (abs Start_10) (ite StartBool Start Start_1)))
   (Start_9 Int (4 2 3 y x (- Start_9 Start) (* Start_3 Start_4) (div Start_8 Start_1)))
   (Start_11 Int (1 5 (- Start_8 Start_11) (+ Start Start_14) (* Start_1 Start_1) (mod Start_8 Start_10) (ite StartBool_1 Start_7 Start_3)))
   (Start_15 Int (4 (- Start_15 Start_12) (+ Start_12 Start_7) (* Start_9 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div 0 (div x 5)))))

(check-synth)
