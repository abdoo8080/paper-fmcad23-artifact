(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_10 Int) (StartBool_2 Bool) (Start_5 Int) (StartBool_1 Bool) (Start_1 Int) (StartBool_4 Bool) (Start_3 Int) (Start_6 Int) (Start_4 Int) (StartBool_5 Bool) (Start_7 Int) (Start_8 Int) (StartBool_3 Bool) (Start_9 Int))
  ((Start Int (2 y 3 5 (- Start_1)))
   (StartBool Bool (true (or StartBool_3 StartBool_3) (= Start Start_7) (>= Start_8 Start_2) (> Start_5 Start_8)))
   (Start_2 Int (y (- Start_1) (+ Start_2 Start_8) (* Start_3 Start_3) (div Start_6 Start_6) (ite StartBool Start_8 Start_5)))
   (Start_10 Int (4 3 2 5 (mod Start_2 Start_8) (abs Start_4)))
   (StartBool_2 Bool (false (and StartBool_5 StartBool) (or StartBool_2 StartBool_1) (< Start_4 Start_7) (<= Start Start_8) (>= Start_5 Start_2)))
   (Start_5 Int (y (- Start_3) (- Start_1 Start_1) (+ Start_4 Start_1) (* Start_5 Start_6) (mod Start_5 Start_4) (ite StartBool_1 Start_2 Start_7)))
   (StartBool_1 Bool (false true (or StartBool_2 StartBool_3) (= Start_3 Start) (>= Start_1 Start_3)))
   (Start_1 Int (3 2 (+ Start_2 Start_2) (ite StartBool_1 Start_1 Start)))
   (StartBool_4 Bool (true (and StartBool_4 StartBool_1) (or StartBool StartBool_2) (<= Start_5 Start) (> Start_5 Start_2)))
   (Start_3 Int (x y (+ Start Start_4) (* Start_1 Start_5)))
   (Start_6 Int (2 0 (+ Start_7 Start_4) (* Start_5 Start_4) (div Start Start_2) (mod Start_3 Start_1) (ite StartBool_4 Start_6 Start)))
   (Start_4 Int (0 5 2 4 3 1 x y (mod Start_2 Start_7)))
   (StartBool_5 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_2) (or StartBool StartBool_3) (= Start_8 Start_5) (> Start_1 Start_7)))
   (Start_7 Int (y (- Start_5) (+ Start_2 Start_2) (* Start Start_6) (div Start_7 Start_7) (abs Start_1)))
   (Start_8 Int (1 4 0 (- Start) (* Start_2 Start_3) (div Start_4 Start_9) (mod Start_1 Start)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_4) (or StartBool_3 StartBool_5) (< Start_4 Start) (<= Start_3 Start_3) (= Start_4 Start_4) (>= Start_4 Start_2)))
   (Start_9 Int (y (- Start_7) (- Start_4 Start_10) (* Start_7 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (mod 5 y) x)))

(check-synth)
