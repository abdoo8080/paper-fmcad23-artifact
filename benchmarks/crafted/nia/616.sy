(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_16 Int) (Start_1 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_7 Int) (Start_12 Int) (Start_11 Int) (Start_5 Int) (Start_14 Int) (StartBool_1 Bool) (Start_3 Int) (Start_8 Int) (Start_15 Int) (Start_2 Int) (Start_4 Int) (Start_6 Int) (Start_10 Int) (Start_13 Int) (StartBool_7 Bool) (Start_9 Int))
  ((Start Int (x y 3 5 1 (- Start) (- Start Start_1) (+ Start Start_1) (* Start Start) (mod Start_1 Start) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (true false (and StartBool_3 StartBool_2) (or StartBool_4 StartBool) (<= Start Start_6) (= Start Start_11)))
   (StartBool_6 Bool (true false (not StartBool_7) (< Start_2 Start_9) (<= Start_6 Start_8)))
   (StartBool_5 Bool (true (not StartBool_6) (< Start_4 Start_14) (<= Start_2 Start_6) (= Start_13 Start_7) (>= Start_16 Start_6)))
   (StartBool_4 Bool (false true (not StartBool_4) (and StartBool_5 StartBool_2) (or StartBool_3 StartBool_1)))
   (Start_16 Int (1 (- Start_7) (- Start_4 Start_2) (mod Start_1 Start_16) (abs Start_4)))
   (Start_1 Int (y 5 (* Start_4 Start_10) (div Start_11 Start_15)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_1) (<= Start_1 Start_7) (>= Start_2 Start_11) (> Start_5 Start_7)))
   (StartBool_2 Bool (true false (not StartBool_1) (or StartBool_3 StartBool_1) (<= Start_1 Start_12) (= Start_12 Start_5)))
   (Start_7 Int (2 (- Start_12) (- Start_4 Start_13) (ite StartBool_2 Start Start_1)))
   (Start_12 Int (1 0 y (- Start_1) (* Start_2 Start_11) (ite StartBool_1 Start_13 Start_10)))
   (Start_11 Int (4 5 (- Start_6) (- Start_11 Start_5) (+ Start_11 Start_8) (ite StartBool_1 Start_7 Start_8)))
   (Start_5 Int (x 1 (+ Start_6 Start_6) (ite StartBool Start_6 Start_5)))
   (Start_14 Int (x 3 (* Start_8 Start_13) (mod Start_5 Start_8) (abs Start_6)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (or StartBool_1 StartBool_1) (>= Start_5 Start_1)))
   (Start_3 Int (2 (- Start_3 Start_2) (* Start_7 Start_7) (div Start_6 Start_8) (mod Start_9 Start_2) (abs Start_10) (ite StartBool_1 Start Start_3)))
   (Start_8 Int (2 y (+ Start_6 Start_14) (* Start_4 Start_5) (mod Start_10 Start_7)))
   (Start_15 Int (5 (+ Start Start_8) (* Start_8 Start_4) (mod Start_2 Start_4) (abs Start_4)))
   (Start_2 Int (2 (- Start_2) (- Start_1 Start_1) (* Start_2 Start_1) (abs Start) (ite StartBool_1 Start_3 Start_4)))
   (Start_4 Int (0 x 3 (- Start_2 Start_2) (+ Start_5 Start) (div Start_5 Start_4) (ite StartBool_1 Start_5 Start_6)))
   (Start_6 Int (1 x (- Start_5) (* Start_1 Start_6) (abs Start_5)))
   (Start_10 Int (y 1 5 4 3 2 0 (- Start_5) (- Start_11 Start_12) (div Start_4 Start_6) (mod Start_3 Start_11) (abs Start_10)))
   (Start_13 Int (x 3 (- Start_12) (div Start_2 Start_6) (mod Start_3 Start_8) (abs Start_3)))
   (StartBool_7 Bool (false true (and StartBool StartBool) (or StartBool_2 StartBool_5) (= Start_1 Start_2)))
   (Start_9 Int (4 (mod Start_4 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- 4) (mod y 3))))

(check-synth)
