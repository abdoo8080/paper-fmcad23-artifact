(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_10 Bool) (StartBool_9 Bool) (Start_7 Int) (StartBool_6 Bool) (StartBool_7 Bool) (Start_10 Int) (Start_2 Int) (StartBool_8 Bool) (Start_9 Int) (Start_11 Int) (Start_3 Int) (Start_6 Int) (Start_1 Int) (Start_12 Int) (Start_5 Int) (Start_14 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartBool_3 Bool) (Start_13 Int) (Start_4 Int) (Start_8 Int) (StartBool_4 Bool) (StartBool_5 Bool))
  ((Start Int (3 (- Start) (+ Start Start) (* Start Start_1) (abs Start) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (false (not StartBool_5) (and StartBool StartBool_9) (or StartBool_1 StartBool_8) (<= Start_13 Start_2) (= Start_13 Start_13) (> Start_3 Start_14)))
   (StartBool_10 Bool (true (and StartBool_10 StartBool_6) (or StartBool_2 StartBool_3) (<= Start_12 Start_7) (>= Start_1 Start_2) (> Start_1 Start_10)))
   (StartBool_9 Bool (true false (and StartBool_9 StartBool) (< Start_12 Start_6) (= Start_10 Start_3) (> Start_4 Start_12)))
   (Start_7 Int (2 (- Start_10) (+ Start_9 Start_1) (* Start_12 Start_7) (mod Start_1 Start_7) (ite StartBool_9 Start_8 Start_6)))
   (StartBool_6 Bool (false (and StartBool_7 StartBool) (or StartBool_7 StartBool_2) (< Start_2 Start_12) (<= Start_3 Start_10) (= Start_8 Start_11) (>= Start_5 Start_3) (> Start_7 Start)))
   (StartBool_7 Bool (false (not StartBool_2) (and StartBool_8 StartBool) (or StartBool StartBool_1) (<= Start_2 Start_8) (= Start_7 Start_1) (>= Start_9 Start_4)))
   (Start_10 Int (4 1 3 y x (div Start_3 Start_7) (mod Start_8 Start_8) (ite StartBool Start_11 Start_11)))
   (Start_2 Int (1 5 (- Start_2) (* Start_1 Start_2) (div Start_2 Start_1) (abs Start) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_8 Bool (true false (not StartBool_6) (< Start_11 Start_1) (>= Start_11 Start_8)))
   (Start_9 Int (3 (- Start_12) (* Start_8 Start_8) (div Start_3 Start_9) (mod Start_8 Start_7)))
   (Start_11 Int (5 0 (- Start_6) (- Start_11 Start) (div Start_7 Start) (abs Start_9) (ite StartBool Start_2 Start_8)))
   (Start_3 Int (4 (- Start_3 Start_2) (mod Start_4 Start_3) (abs Start_4)))
   (Start_6 Int (5 (- Start_5) (+ Start_3 Start_2) (div Start_3 Start) (mod Start_3 Start_4) (abs Start)))
   (Start_1 Int (x (* Start_2 Start_7) (div Start_6 Start_1) (mod Start_8 Start_1) (abs Start_7)))
   (Start_12 Int (2))
   (Start_5 Int (x 2 1 4 y 3 0 (+ Start_6 Start_2) (mod Start_2 Start_1)))
   (Start_14 Int (y (- Start) (div Start_11 Start_2) (mod Start_5 Start_6)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_2) (or StartBool_1 StartBool_3) (<= Start_5 Start_5)))
   (StartBool_2 Bool (true false (not StartBool_3) (<= Start_1 Start_4) (= Start_5 Start_2) (>= Start Start_6)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_4 StartBool_1) (< Start_3 Start_3) (<= Start_1 Start) (= Start_2 Start_1)))
   (Start_13 Int (2 (- Start_9 Start_13) (+ Start_1 Start_5) (mod Start_5 Start_4) (ite StartBool_10 Start_2 Start_3)))
   (Start_4 Int (4 x (* Start_4 Start_4) (ite StartBool_1 Start_5 Start_3)))
   (Start_8 Int (4 (- Start Start) (* Start_5 Start_7) (ite StartBool_5 Start_2 Start_7)))
   (StartBool_4 Bool (true false (< Start_3 Start_1) (<= Start_4 Start_1) (= Start_3 Start_4) (>= Start_6 Start_6) (> Start_6 Start_5)))
   (StartBool_5 Bool (true (or StartBool_6 StartBool_7) (< Start_8 Start_6) (<= Start_9 Start_4) (>= Start_1 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 3 (* 4 5))))

(check-synth)
