(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_15 Int) (Start_13 Int) (Start_14 Int) (StartBool_5 Bool) (Start_1 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_5 Int) (Start_7 Int) (Start_9 Int) (Start_2 Int) (StartBool_4 Bool) (Start_8 Int) (Start_10 Int) (Start_6 Int) (Start_3 Int) (Start_11 Int) (StartBool_6 Bool) (Start_4 Int) (StartBool_2 Bool))
  ((Start Int (0 4 (- Start) (- Start Start_1) (mod Start_1 Start_1) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true false (< Start_6 Start_13) (= Start Start_3)))
   (Start_12 Int (5 3 y x (+ Start_3 Start_9) (div Start_8 Start_5) (mod Start_11 Start_7) (abs Start_9) (ite StartBool Start_8 Start_15)))
   (Start_15 Int (1 (mod Start_12 Start_5) (abs Start_6) (ite StartBool_2 Start_12 Start_10)))
   (Start_13 Int (x 1 (- Start_12 Start_9) (+ Start_2 Start) (mod Start_15 Start_12) (abs Start_8)))
   (Start_14 Int (x 4 3 0 1 y 2 (* Start_5 Start_2) (mod Start_10 Start_13) (ite StartBool_1 Start_3 Start)))
   (StartBool_5 Bool (false (not StartBool_6) (and StartBool_2 StartBool_1) (or StartBool_1 StartBool_2) (< Start_2 Start_5) (= Start_1 Start_11) (>= Start_3 Start_1) (> Start_4 Start_11)))
   (Start_1 Int (x 1 (- Start_5 Start_11) (+ Start Start_5) (* Start_10 Start_12) (div Start_5 Start_7) (mod Start_13 Start_14) (abs Start_12) (ite StartBool_4 Start_7 Start_3)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool_2 StartBool_3) (= Start_9 Start_1) (>= Start_5 Start)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_1) (or StartBool_2 StartBool) (<= Start_1 Start_2) (> Start Start)))
   (Start_5 Int (1 (- Start_6) (- Start Start_3) (+ Start_2 Start_3) (* Start_7 Start_1) (div Start_5 Start_3) (mod Start_5 Start_7) (ite StartBool_1 Start_5 Start_8)))
   (Start_7 Int (1 (- Start_6) (- Start_3 Start_7) (+ Start_5 Start_9) (div Start_5 Start_10) (abs Start_1)))
   (Start_9 Int (4 x 3 0 y (- Start_1) (- Start_3 Start_6) (div Start_8 Start_6) (mod Start_8 Start_3)))
   (Start_2 Int (0 4 (- Start_2) (- Start_3 Start_2) (+ Start_4 Start) (div Start_5 Start_2) (abs Start_2)))
   (StartBool_4 Bool (true false (and StartBool_5 StartBool_4) (or StartBool_1 StartBool_3) (<= Start_11 Start_12) (> Start_9 Start_3)))
   (Start_8 Int (x 4 y (- Start_3 Start_4) (+ Start_3 Start) (mod Start_3 Start_6) (ite StartBool_1 Start_6 Start)))
   (Start_10 Int (x (* Start_3 Start) (mod Start_2 Start_4) (ite StartBool Start_4 Start_6)))
   (Start_6 Int (1 2 4 (- Start_1) (* Start_5 Start_2) (abs Start_1) (ite StartBool Start_5 Start_2)))
   (Start_3 Int (2 0 4 (- Start_5) (- Start_7 Start_11) (* Start_11 Start_1) (abs Start_2)))
   (Start_11 Int (3 1 y (+ Start_11 Start_1) (mod Start_4 Start_4) (ite StartBool_2 Start_9 Start_8)))
   (StartBool_6 Bool (false (and StartBool_3 StartBool_2) (or StartBool_5 StartBool_1) (< Start_9 Start_10) (<= Start_3 Start_3) (> Start_10 Start_1)))
   (Start_4 Int (5 x y 2 3 (- Start_1 Start_5) (div Start_8 Start_3) (mod Start_10 Start_3) (ite StartBool_1 Start_7 Start)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_3) (< Start_7 Start_3) (> Start_3 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 0 (div y 2))))

(check-synth)
