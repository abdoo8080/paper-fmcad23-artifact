(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_6 Int) (Start_3 Int) (Start_4 Int) (Start_5 Int) (Start_1 Int) (Start_2 Int))
  ((Start Int (3 y (- Start) (- Start Start) (* Start Start_1) (div Start Start_2) (abs Start)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_1 StartBool) (< Start_2 Start_3) (>= Start_4 Start_5) (> Start_2 Start)))
   (StartBool_1 Bool (false (< Start_1 Start_3) (<= Start_6 Start_6) (= Start_5 Start) (>= Start Start_4)))
   (Start_6 Int (2 (- Start_4) (mod Start_3 Start_6) (ite StartBool_1 Start Start_2)))
   (Start_3 Int (3 (- Start_3) (- Start_5 Start_4) (+ Start_4 Start_3) (div Start_4 Start_3) (abs Start_6)))
   (Start_4 Int (x 4 (- Start_5 Start_5) (abs Start_2) (ite StartBool_1 Start Start_5)))
   (Start_5 Int (0 (+ Start_5 Start) (* Start Start_3) (ite StartBool Start_2 Start_3)))
   (Start_1 Int (0 1 4 y (- Start) (+ Start_1 Start_2) (div Start_2 Start) (mod Start Start_2) (abs Start)))
   (Start_2 Int (3 5 (+ Start Start_1) (abs Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 1 (* 5 (abs (mod 4 0))))))

(check-synth)
