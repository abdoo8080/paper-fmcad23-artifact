(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_15 Int) (Start_16 Int) (Start_11 Int) (Start_12 Int) (Start_13 Int) (StartBool_4 Bool) (Start_3 Int) (Start_2 Int) (Start_5 Int) (Start_7 Int) (StartBool_6 Bool) (Start_1 Int) (Start_6 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_17 Int) (Start_8 Int) (StartBool_2 Bool) (Start_14 Int) (Start_10 Int) (Start_9 Int) (StartBool_3 Bool))
  ((Start Int (x 4 5 (- Start) (* Start_1 Start) (ite StartBool Start Start)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool StartBool) (or StartBool_2 StartBool_6) (< Start_14 Start_2) (= Start_14 Start_15) (> Start_16 Start_16)))
   (Start_18 Int (x (+ Start_11 Start_10) (abs Start_12)))
   (Start_15 Int (1 x 3 (- Start_9) (- Start_5 Start_6) (* Start_6 Start_16) (ite StartBool Start_13 Start_17)))
   (Start_16 Int (x (- Start_13) (- Start_14 Start_9) (+ Start_7 Start_3) (* Start_14 Start_16) (div Start_3 Start_16) (abs Start_13)))
   (Start_11 Int (4 (- Start_9) (+ Start_13 Start_12) (* Start_3 Start_7) (div Start_2 Start_12) (ite StartBool_4 Start_9 Start_11)))
   (Start_12 Int (y 3 5 (- Start_2) (* Start_13 Start_12) (abs Start_3) (ite StartBool_4 Start_1 Start_7)))
   (Start_13 Int (4 (- Start) (- Start_13 Start_3) (abs Start_6)))
   (StartBool_4 Bool (true false (not StartBool_5) (and StartBool_1 StartBool_2) (< Start_11 Start_12) (<= Start_1 Start_8) (= Start_12 Start_4) (>= Start_7 Start_13) (> Start_1 Start_2)))
   (Start_3 Int (y 0 (- Start_4) (- Start_5 Start_1) (+ Start_6 Start_2) (abs Start) (ite StartBool Start Start_3)))
   (Start_2 Int (4 (- Start_5 Start) (+ Start_1 Start_3) (* Start_2 Start_7) (div Start_3 Start_2) (mod Start_7 Start_3) (abs Start_6) (ite StartBool Start_1 Start_3)))
   (Start_5 Int (1 4 y (+ Start_3 Start_6) (* Start_3 Start_2) (abs Start_6) (ite StartBool Start_2 Start_1)))
   (Start_7 Int (0 1 (* Start_5 Start_3) (div Start_8 Start_3) (mod Start Start_8)))
   (StartBool_6 Bool (false true (not StartBool_3) (and StartBool_2 StartBool_4) (or StartBool_2 StartBool_6) (< Start_16 Start_11) (<= Start_18 Start_3) (>= Start_4 Start_5)))
   (Start_1 Int (1 4 (- Start_2) (- Start Start_1) (+ Start_1 Start_3) (* Start_1 Start) (div Start_2 Start_4) (abs Start_5) (ite StartBool Start_5 Start_4)))
   (Start_6 Int (2 (- Start_6) (- Start Start_6) (div Start_3 Start_4) (mod Start_3 Start) (abs Start_2) (ite StartBool Start_3 Start_2)))
   (StartBool_5 Bool (true false (< Start_5 Start_13) (= Start_5 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (or StartBool_1 StartBool_2) (= Start_1 Start_8) (> Start_4 Start_6)))
   (Start_4 Int (y (- Start_6) (- Start_3 Start_3) (div Start_4 Start_4) (mod Start Start_2) (abs Start_4) (ite StartBool Start_1 Start_2)))
   (Start_17 Int (0 x (- Start_9) (ite StartBool Start Start_16)))
   (Start_8 Int (3 0 5 y 4 (- Start_3 Start_4) (+ Start_5 Start_1) (div Start_3 Start_8) (ite StartBool_1 Start_8 Start_1)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_3) (or StartBool StartBool_1) (= Start_9 Start) (> Start_7 Start_5)))
   (Start_14 Int (4 x 2 3 1 0 y (- Start_4) (- Start_17 Start_11) (ite StartBool_5 Start_9 Start_15)))
   (Start_10 Int (0 (- Start_4 Start) (+ Start_5 Start_1) (* Start_7 Start_11) (ite StartBool_4 Start_8 Start_11)))
   (Start_9 Int (2 4 (- Start_8 Start_8) (mod Start_4 Start_6) (abs Start_3)))
   (StartBool_3 Bool (true (= Start_1 Start_10) (>= Start_6 Start_10) (> Start_2 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- (div 2 (- x))))))

(check-synth)
