(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_15 Int) (StartBool_3 Bool) (Start_13 Int) (Start_14 Int) (Start_3 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_1 Int) (Start_12 Int) (Start_5 Int) (Start_6 Int) (Start_4 Int) (Start_7 Int) (Start_2 Int) (Start_9 Int) (Start_11 Int) (StartBool_4 Bool) (Start_8 Int) (Start_10 Int))
  ((Start Int (3 4 x 0 (- Start_1 Start_2) (+ Start_2 Start_3) (* Start_1 Start_2) (abs Start_1) (ite StartBool_1 Start_3 Start)))
   (StartBool Bool (true (not StartBool) (and StartBool_1 StartBool_4) (or StartBool_2 StartBool_2) (< Start_6 Start_7) (<= Start_3 Start_12) (= Start_4 Start_6) (>= Start_10 Start_16) (> Start Start_15)))
   (Start_16 Int (1 (- Start Start_4) (* Start_16 Start_7) (mod Start_6 Start_6) (abs Start_8) (ite StartBool_1 Start_5 Start)))
   (Start_15 Int (3 5 (- Start Start_15) (* Start_7 Start_4) (div Start_3 Start_3)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool StartBool) (or StartBool_1 StartBool_2)))
   (Start_13 Int (3 (- Start_9 Start_5) (abs Start_2)))
   (Start_14 Int (1 (- Start Start_2) (+ Start_3 Start) (* Start_7 Start_7) (mod Start_3 Start_10) (abs Start) (ite StartBool_4 Start Start_14)))
   (Start_3 Int (1 (- Start_4) (- Start Start_2) (+ Start_2 Start_1) (div Start_4 Start_5) (mod Start_1 Start_1)))
   (StartBool_1 Bool (true false (not StartBool_1) (<= Start_1 Start_1) (>= Start_3 Start_3)))
   (StartBool_2 Bool (true (or StartBool StartBool_3) (<= Start_3 Start_1) (= Start_8 Start_5) (>= Start_3 Start_9)))
   (Start_1 Int (5 (- Start_3) (- Start_8 Start_2) (* Start_14 Start_5) (mod Start_3 Start_15) (abs Start_1)))
   (Start_12 Int (1 (- Start_5 Start_3) (+ Start_3 Start) (div Start_1 Start_10) (abs Start) (ite StartBool Start_1 Start_8)))
   (Start_5 Int (1 (- Start_4) (+ Start_1 Start_3) (ite StartBool_1 Start_2 Start_1)))
   (Start_6 Int (2 (- Start_1 Start_1) (* Start_5 Start_2) (mod Start_4 Start_6) (ite StartBool_2 Start_5 Start_7)))
   (Start_4 Int (1 (div Start_6 Start_6) (mod Start_5 Start_3) (abs Start_3)))
   (Start_7 Int (1 y 2 (- Start_1) (- Start_5 Start_2) (div Start_7 Start_7)))
   (Start_2 Int (2 y 1 3 (- Start_2 Start) (+ Start_11 Start_6) (* Start_1 Start_12) (div Start_9 Start_2) (abs Start) (ite StartBool_2 Start_5 Start)))
   (Start_9 Int (y (- Start Start) (+ Start_2 Start_10) (div Start_11 Start) (abs Start_10) (ite StartBool_2 Start_8 Start_11)))
   (Start_11 Int (5 (- Start_7) (- Start_7 Start_5) (+ Start_5 Start_4) (mod Start_9 Start_4) (abs Start_4) (ite StartBool Start_4 Start_10)))
   (StartBool_4 Bool (false (and StartBool_2 StartBool) (= Start_3 Start_1)))
   (Start_8 Int (4 (- Start_12 Start_13)))
   (Start_10 Int (x 3 1 4 y 2 (- Start_2) (+ Start_1 Start_11) (* Start_8 Start_6) (div Start_12 Start_4) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- (+ 1 5)) 2)))

(check-synth)
