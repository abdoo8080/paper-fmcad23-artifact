(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_7 Int) (Start_1 Int) (StartBool_2 Bool) (Start_3 Int) (StartBool_1 Bool) (Start_6 Int) (Start_5 Int) (Start_4 Int) (StartBool_3 Bool) (Start_2 Int))
  ((Start Int (4 y x 0 1 5 2 3 (- Start) (- Start_1 Start) (* Start_1 Start_1) (div Start Start_2) (mod Start Start_1) (ite StartBool Start Start_1)))
   (StartBool Bool (false (and StartBool_2 StartBool_3) (< Start_3 Start_6) (<= Start_5 Start_4) (= Start_2 Start_1)))
   (StartBool_4 Bool (false true (and StartBool_3 StartBool_3) (or StartBool_2 StartBool_3) (<= Start_3 Start_4) (= Start_2 Start_5) (> Start_2 Start_2)))
   (Start_7 Int (3 1 (- Start_3) (div Start_3 Start_5) (abs Start_7)))
   (Start_1 Int (y (- Start_7) (+ Start_6 Start) (* Start_4 Start_1) (div Start_2 Start_2) (abs Start_2) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_2 Bool (true (or StartBool StartBool_2) (= Start_2 Start_2) (> Start Start_1)))
   (Start_3 Int (2 5 0 (+ Start Start) (abs Start_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (< Start_5 Start_1) (> Start_3 Start_2)))
   (Start_6 Int (y x (- Start_5 Start_1) (+ Start_5 Start_2) (mod Start_5 Start_6) (abs Start_2) (ite StartBool_1 Start_2 Start)))
   (Start_5 Int (2 y 3 (+ Start_2 Start) (div Start_3 Start_6) (mod Start_1 Start_6) (abs Start_5)))
   (Start_4 Int (3 x 4 5 1 2 y (+ Start_5 Start_2) (mod Start Start) (ite StartBool Start Start_1)))
   (StartBool_3 Bool (false true (not StartBool_1) (or StartBool StartBool_4) (<= Start_4 Start_7) (= Start_7 Start_6) (> Start_4 Start_4)))
   (Start_2 Int (3 (- Start_3 Start_2) (div Start_3 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 4 (- x 5))))

(check-synth)
