(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_3 Int) (Start_15 Int) (Start_12 Int) (Start_10 Int) (Start_4 Int) (Start_5 Int) (Start_14 Int) (StartBool_1 Bool) (Start_1 Int) (Start_7 Int) (Start_6 Int) (StartBool_4 Bool) (Start_13 Int) (StartBool_5 Bool) (Start_8 Int) (Start_9 Int) (StartBool_3 Bool) (StartBool_6 Bool) (Start_11 Int) (StartBool_2 Bool))
  ((Start Int (5 (- Start) (- Start_1 Start_2) (+ Start Start_2) (* Start_2 Start_2) (div Start_1 Start_3) (mod Start_4 Start_3)))
   (StartBool Bool (true (and StartBool_6 StartBool_3) (< Start_7 Start_13) (<= Start_15 Start_13) (= Start_6 Start_13)))
   (Start_2 Int (2 (* Start_4 Start_2) (mod Start_12 Start_4) (ite StartBool_3 Start_7 Start_4)))
   (Start_3 Int (1 x (- Start_4) (- Start_6 Start) (+ Start_2 Start_7) (abs Start_8) (ite StartBool Start_10 Start_5)))
   (Start_15 Int (x 1 (- Start_12) (- Start_7 Start_12) (+ Start_1 Start_4) (abs Start_4) (ite StartBool_5 Start_1 Start_6)))
   (Start_12 Int (1 (- Start_13) (- Start_7 Start) (+ Start_4 Start_10) (* Start_2 Start_10) (mod Start_4 Start_3) (abs Start_1) (ite StartBool_4 Start_2 Start_6)))
   (Start_10 Int (5 4 (- Start_6) (+ Start_10 Start_5) (* Start_11 Start_12) (div Start_9 Start_6) (mod Start_8 Start_4) (abs Start_8) (ite StartBool_4 Start_12 Start_1)))
   (Start_4 Int (x 4 2 (* Start_3 Start_5) (mod Start Start_1) (abs Start_2)))
   (Start_5 Int (y (- Start Start_2) (abs Start_3) (ite StartBool_1 Start_3 Start_5)))
   (Start_14 Int (3 (+ Start_2 Start_15) (* Start_14 Start_12) (div Start_6 Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (or StartBool_3 StartBool) (< Start_2 Start_6) (<= Start_7 Start_1) (>= Start Start_1) (> Start_6 Start)))
   (Start_1 Int (0 1 y 2 (- Start_1) (* Start_7 Start) (div Start_14 Start_10)))
   (Start_7 Int (3 (- Start_6 Start_5) (+ Start_1 Start_5) (* Start_2 Start_1) (mod Start_5 Start_2) (abs Start_1)))
   (Start_6 Int (y 2 3 x 1 0 (- Start Start_2) (div Start Start_3) (ite StartBool_4 Start_4 Start_7)))
   (StartBool_4 Bool (false (and StartBool_2 StartBool_5) (< Start Start) (> Start_3 Start_2)))
   (Start_13 Int (2 x (- Start Start_4)))
   (StartBool_5 Bool (false true (not StartBool_3) (and StartBool_4 StartBool) (or StartBool_5 StartBool_5) (= Start_1 Start_4) (> Start_2 Start_8)))
   (Start_8 Int (4 3 (* Start_5 Start_8) (div Start_8 Start_9) (ite StartBool_1 Start_9 Start_5)))
   (Start_9 Int (3 4 (- Start_5) (* Start_4 Start_4) (div Start_8 Start_7)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_6) (or StartBool_3 StartBool_3) (< Start_5 Start_8) (<= Start_4 Start_1) (>= Start_9 Start_7)))
   (StartBool_6 Bool (true false (and StartBool_2 StartBool_4) (= Start_1 Start_9) (>= Start_6 Start_1)))
   (Start_11 Int (5 (- Start_3) (- Start_9 Start_5) (* Start_3 Start_10) (div Start_10 Start_8) (mod Start Start_3) (ite StartBool_5 Start_8 Start_5)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_1) (or StartBool_5 StartBool_6) (< Start_2 Start_7) (= Start_3 Start_10) (> Start_10 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div x 5) y)))

(check-synth)
