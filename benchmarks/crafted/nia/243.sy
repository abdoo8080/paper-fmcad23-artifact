(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_5 Int) (Start_1 Int) (Start_11 Int) (Start_3 Int) (Start_10 Int) (Start_7 Int) (Start_8 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_9 Int) (Start_4 Int) (Start_6 Int))
  ((Start Int (y 0 (+ Start Start_1)))
   (StartBool Bool (false (< Start Start) (<= Start Start_2) (= Start_3 Start_4)))
   (Start_2 Int (0 (- Start_1) (+ Start_11 Start_5) (* Start_3 Start_7) (div Start_1 Start_6) (abs Start_3)))
   (Start_5 Int (1 0 (mod Start_1 Start_1) (abs Start_6) (ite StartBool Start_7 Start_3)))
   (Start_1 Int (y 0 x (- Start) (div Start_1 Start_1)))
   (Start_11 Int (y x 4 2 1 0 5 3 (- Start_4 Start_1) (abs Start_7) (ite StartBool Start_9 Start_9)))
   (Start_3 Int (y (- Start_1) (- Start_4 Start) (div Start_4 Start_5) (ite StartBool_2 Start_9 Start_10)))
   (Start_10 Int (y x (- Start_1) (- Start_2 Start) (abs Start_10)))
   (Start_7 Int (3 4 (abs Start) (ite StartBool_1 Start_8 Start_2)))
   (Start_8 Int (4 (+ Start Start_6) (* Start_1 Start_4) (mod Start_2 Start_3) (ite StartBool Start_3 Start_5)))
   (StartBool_1 Bool (true (not StartBool_2) (or StartBool StartBool) (<= Start_5 Start_3) (>= Start_4 Start_8) (> Start_6 Start_7)))
   (StartBool_2 Bool (true (< Start Start_8) (>= Start_8 Start_2)))
   (Start_9 Int (3 (- Start_6) (- Start_1 Start_10) (+ Start_7 Start_8) (div Start_4 Start_2) (mod Start_11 Start_10) (ite StartBool Start_9 Start_11)))
   (Start_4 Int (3 y (- Start_4 Start) (* Start_1 Start_2) (mod Start Start_5)))
   (Start_6 Int (3 (- Start) (- Start_5 Start_3) (+ Start_1 Start_8) (mod Start_7 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (* 2 y) 3)))

(check-synth)
