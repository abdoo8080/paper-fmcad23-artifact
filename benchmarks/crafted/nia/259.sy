(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_13 Int) (Start_10 Int) (Start_11 Int) (Start_2 Int) (Start_3 Int) (StartBool_6 Bool) (Start_4 Int) (StartBool_2 Bool) (Start_1 Int) (Start_6 Int) (StartBool_4 Bool) (Start_7 Int) (StartBool_3 Bool) (Start_9 Int) (StartBool_5 Bool) (Start_8 Int) (Start_5 Int) (StartBool_1 Bool) (StartBool_7 Bool))
  ((Start Int (2 x 4 y 3 (- Start Start_1) (* Start_2 Start_1) (mod Start_3 Start_3) (abs Start) (ite StartBool_1 Start_4 Start_2)))
   (StartBool Bool (false (and StartBool StartBool) (>= Start_1 Start_8)))
   (Start_12 Int (3 (+ Start_4 Start_13) (* Start_5 Start_9)))
   (Start_13 Int (2 (- Start_12) (+ Start_10 Start_5) (* Start Start_5) (div Start_7 Start_8) (mod Start_2 Start_6)))
   (Start_10 Int (1 5 y (- Start_12) (- Start_8 Start_4) (div Start_5 Start_13) (mod Start_2 Start_2) (abs Start_8) (ite StartBool_7 Start_10 Start_8)))
   (Start_11 Int (3))
   (Start_2 Int (x y (- Start_5) (- Start_7 Start_9) (+ Start_10 Start_2) (* Start_3 Start_11) (div Start_2 Start_4) (mod Start_8 Start_10) (abs Start_2)))
   (Start_3 Int (2 (+ Start_3 Start_6) (div Start_6 Start_1) (ite StartBool_6 Start_7 Start_4)))
   (StartBool_6 Bool (false (not StartBool_4) (and StartBool_4 StartBool_1) (< Start_4 Start_1) (> Start_2 Start_7)))
   (Start_4 Int (3 (- Start_5) (+ Start_5 Start) (abs Start_5) (ite StartBool_2 Start_5 Start_4)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_4) (or StartBool_1 StartBool_1) (< Start_5 Start_1)))
   (Start_1 Int (4 x 5 (- Start_9) (+ Start_4 Start_6) (div Start_4 Start_11) (mod Start Start_1) (abs Start_10)))
   (Start_6 Int (x (- Start_4 Start_4)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_3 StartBool_5) (<= Start_5 Start_6) (> Start_3 Start_5)))
   (Start_7 Int (1 5 3 0 y 4 x (- Start_1 Start) (abs Start_3)))
   (StartBool_3 Bool (true (not StartBool_6) (< Start_1 Start_8) (<= Start Start_4) (>= Start_2 Start_3)))
   (Start_9 Int (3 5 (- Start_7) (* Start_11 Start_13) (mod Start_9 Start) (ite StartBool_7 Start_4 Start_11)))
   (StartBool_5 Bool (false (= Start_7 Start) (>= Start_2 Start_3)))
   (Start_8 Int (0 2 (- Start_1) (- Start_1 Start_1) (+ Start_3 Start_2)))
   (Start_5 Int (y (- Start_2) (* Start_6 Start_5) (mod Start_2 Start_2)))
   (StartBool_1 Bool (false (not StartBool_7) (< Start_8 Start_3) (= Start_7 Start) (>= Start_1 Start_8) (> Start_1 Start_6)))
   (StartBool_7 Bool (true (not StartBool) (and StartBool_2 StartBool_5) (< Start_4 Start_6) (<= Start_5 Start_2) (>= Start_6 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 3 (* 3 y))))

(check-synth)
