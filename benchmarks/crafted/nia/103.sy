(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_1 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_2 Int) (Start_6 Int) (StartBool_8 Bool) (Start_4 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_4 Bool) (StartBool_5 Bool) (Start_5 Int) (StartBool_6 Bool))
  ((Start Int (1 3 x 5 (- Start) (+ Start Start) (div Start Start_1)))
   (StartBool Bool (true false (not StartBool) (and StartBool_7 StartBool_8) (or StartBool StartBool) (< Start_5 Start_1)))
   (StartBool_7 Bool (true (not StartBool_4) (< Start_6 Start)))
   (Start_1 Int (4 (- Start) (div Start_1 Start_1) (ite StartBool_1 Start Start)))
   (StartBool_3 Bool (false true (and StartBool StartBool_4) (or StartBool_4 StartBool_1) (>= Start_1 Start_4) (> Start_2 Start_5)))
   (StartBool_1 Bool (false true (or StartBool_2 StartBool_3) (<= Start_2 Start) (= Start Start_1) (>= Start_2 Start_1)))
   (Start_2 Int (5 4 (* Start_3 Start_2) (abs Start_4) (ite StartBool_3 Start_2 Start_4)))
   (Start_6 Int (2 (- Start) (* Start_5 Start_5) (mod Start_5 Start_6) (abs Start_3) (ite StartBool_5 Start_2 Start_3)))
   (StartBool_8 Bool (false (and StartBool_4 StartBool) (<= Start_2 Start_3) (> Start_3 Start_4)))
   (Start_4 Int (0 (- Start_3) (div Start_4 Start_3) (mod Start_3 Start_1)))
   (Start_3 Int (1 2 (- Start_1 Start_2) (abs Start_3)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_6) (or StartBool_4 StartBool_2)))
   (StartBool_4 Bool (true false (or StartBool_3 StartBool_3) (< Start_1 Start_6) (<= Start_3 Start) (= Start_2 Start) (>= Start_6 Start_6) (> Start_1 Start)))
   (StartBool_5 Bool (false (or StartBool_1 StartBool) (= Start_6 Start)))
   (Start_5 Int (2 (- Start) (- Start_1 Start_2) (+ Start_1 Start_4) (* Start_3 Start_5) (div Start_2 Start_2) (ite StartBool_1 Start_1 Start)))
   (StartBool_6 Bool (false (< Start_4 Start_5) (> Start_5 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 1 (div x 2))))

(check-synth)
