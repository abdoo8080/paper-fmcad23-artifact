(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_21 Int) (Start_13 Int) (Start_11 Int) (StartBool_5 Bool) (Start_7 Int) (Start_12 Int) (Start_8 Int) (StartBool_1 Bool) (Start_4 Int) (Start_14 Int) (Start_9 Int) (StartBool_8 Bool) (Start_3 Int) (StartBool_4 Bool) (Start_6 Int) (Start_15 Int) (Start_10 Int) (Start_2 Int) (Start_20 Int) (Start_16 Int) (Start_1 Int) (StartBool_6 Bool) (StartBool_7 Bool) (Start_5 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_17 Int) (Start_18 Int) (Start_19 Int))
  ((Start Int (2 (* Start_1 Start_2) (div Start Start_1) (ite StartBool Start_2 Start_3)))
   (StartBool Bool (true (not StartBool_6) (and StartBool_3 StartBool_6) (or StartBool_1 StartBool_8) (>= Start_20 Start_12)))
   (Start_21 Int (y 5 1 3 0 x (- Start_11 Start_15) (* Start_7 Start_14) (div Start_2 Start_20) (abs Start_20) (ite StartBool_3 Start_6 Start_19)))
   (Start_13 Int (4 (+ Start_3 Start_2) (* Start_8 Start_14)))
   (Start_11 Int (y 5 (- Start_5 Start_6) (+ Start_11 Start_8) (* Start_5 Start_7) (div Start_9 Start_2) (ite StartBool_4 Start_11 Start_7)))
   (StartBool_5 Bool (false (not StartBool_7) (and StartBool StartBool_2) (< Start_14 Start_15) (>= Start_5 Start_11) (> Start_3 Start_12)))
   (Start_7 Int (3 x 4 5 (- Start_1 Start_8) (* Start Start_7) (div Start_6 Start_7) (mod Start_3 Start) (abs Start_6) (ite StartBool_1 Start_8 Start_2)))
   (Start_12 Int (2 (- Start_3 Start_7) (mod Start_4 Start_3) (ite StartBool_5 Start_2 Start_15)))
   (Start_8 Int (y 5 3 1 (* Start_7 Start_4) (mod Start_2 Start_9) (abs Start_5)))
   (StartBool_1 Bool (false true (not StartBool_1) (or StartBool_2 StartBool_3) (< Start_1 Start_9) (<= Start_4 Start_11) (>= Start_10 Start_1)))
   (Start_4 Int (5 1 (- Start) (+ Start_5 Start_3) (* Start_6 Start_4) (div Start_2 Start_4) (abs Start_4) (ite StartBool Start_2 Start)))
   (Start_14 Int (5 2 (- Start_9 Start) (div Start_3 Start_6) (abs Start_8)))
   (Start_9 Int (x (- Start_2) (- Start_8 Start_2) (* Start_10 Start_1) (div Start_7 Start_8) (mod Start_3 Start_10)))
   (StartBool_8 Bool (true false (not StartBool_4) (or StartBool StartBool_5) (= Start_7 Start) (>= Start_7 Start_6) (> Start_1 Start_5)))
   (Start_3 Int (5 y (- Start_4) (- Start Start) (mod Start_2 Start_4)))
   (StartBool_4 Bool (true (not StartBool_4) (or StartBool_2 StartBool_3) (= Start_12 Start) (>= Start_2 Start_5) (> Start_6 Start_13)))
   (Start_6 Int (4 5 x 2 y 0 1 3 (- Start) (+ Start_2 Start_6) (* Start Start_6) (abs Start_6)))
   (Start_15 Int (y 2 (- Start_4) (* Start_9 Start_12) (div Start_14 Start_8) (abs Start) (ite StartBool_6 Start_2 Start_16)))
   (Start_10 Int (y 0 2 5 (* Start_10 Start_5) (ite StartBool_1 Start_6 Start_3)))
   (Start_2 Int (2 3 4 0 y 5 x (- Start_14) (* Start_17 Start_18) (mod Start_6 Start_14) (abs Start_5)))
   (Start_20 Int (4 (- Start_13 Start_17) (+ Start_20 Start_5) (mod Start_21 Start_10) (abs Start_3)))
   (Start_16 Int (1 2 0 (+ Start_11 Start_4) (* Start_9 Start_11) (div Start_9 Start_16) (mod Start_6 Start_5)))
   (Start_1 Int (x (- Start_18) (abs Start_17)))
   (StartBool_6 Bool (true false (<= Start_9 Start_3) (>= Start_4 Start_11) (> Start_8 Start)))
   (StartBool_7 Bool (true (not StartBool_8) (<= Start_5 Start_2) (= Start_4 Start)))
   (Start_5 Int (5 (- Start_3) (+ Start Start_5) (div Start_5 Start) (abs Start_4) (ite StartBool_1 Start_7 Start_1)))
   (StartBool_3 Bool (false (not StartBool_4) (or StartBool_7 StartBool) (<= Start_6 Start_6) (>= Start_1 Start_5) (> Start_1 Start_10)))
   (StartBool_2 Bool (false (not StartBool) (< Start_17 Start_18) (<= Start_18 Start_1) (= Start_9 Start) (> Start_16 Start_8)))
   (Start_17 Int (2 (- Start_4) (- Start_17 Start) (+ Start_5 Start_3) (* Start_7 Start_19) (div Start Start_12) (mod Start_10 Start_4) (abs Start_5)))
   (Start_18 Int (0 (* Start_2 Start_4) (div Start_1 Start_1) (ite StartBool_1 Start_6 Start_9)))
   (Start_19 Int (4 0 (- Start_17) (+ Start_2 Start_7) (* Start_4 Start_8) (mod Start_16 Start_16) (ite StartBool_7 Start_13 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div x (div 1 0))))

(check-synth)
