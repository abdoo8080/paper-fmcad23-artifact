(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_1 Int) (Start_2 Int) (Start_5 Int) (Start_3 Int) (Start_4 Int))
  ((Start Int (x 2 (- Start Start_1) (+ Start_2 Start_2) (* Start_2 Start_3) (mod Start_1 Start_4) (ite StartBool Start_4 Start_4)))
   (StartBool Bool (false true (< Start_2 Start_5) (<= Start_6 Start_6) (>= Start_4 Start_2)))
   (Start_6 Int (3 x (- Start_5) (- Start Start) (mod Start Start_3)))
   (Start_1 Int (0 4 x (- Start_5 Start_5) (+ Start_4 Start_3) (abs Start_6)))
   (Start_2 Int (2 0 3 y 5 (- Start_2) (div Start Start) (mod Start_1 Start_1) (abs Start_4)))
   (Start_5 Int (0 (- Start_3 Start_4) (abs Start_4)))
   (Start_3 Int (x 0 3 (- Start_1 Start_3) (* Start_5 Start_1) (mod Start_4 Start_5) (ite StartBool Start_4 Start)))
   (Start_4 Int (4 0 5 (- Start_2) (- Start Start) (* Start_1 Start_2) (mod Start_1 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x (div 0 x))))

(check-synth)
