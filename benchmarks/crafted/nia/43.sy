(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_13 Int) (Start_1 Int) (StartBool_3 Bool) (Start_14 Int) (StartBool_4 Bool) (Start_6 Int) (Start_4 Int) (Start_11 Int) (StartBool_5 Bool) (Start_3 Int) (StartBool_1 Bool) (Start_16 Int) (Start_7 Int) (Start_2 Int) (Start_5 Int) (Start_8 Int) (Start_12 Int) (Start_10 Int) (Start_9 Int) (StartBool_2 Bool))
  ((Start Int (4 3 0 5 (- Start_1) (- Start_1 Start_2) (* Start_3 Start_4) (mod Start_4 Start_3) (abs Start_2)))
   (StartBool Bool (true false (and StartBool_3 StartBool_3) (< Start_2 Start_5) (<= Start_9 Start_10) (>= Start_13 Start_10) (> Start_11 Start)))
   (Start_15 Int (4 0 1 x (- Start_4) (* Start_14 Start)))
   (Start_13 Int (4 (+ Start_8 Start_10) (div Start_6 Start_14) (mod Start_5 Start_15)))
   (Start_1 Int (x (- Start_11) (- Start_4 Start_12) (* Start_6 Start_5) (abs Start_2)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_3 StartBool_2) (< Start_5 Start_4) (<= Start Start_6) (> Start_10 Start_9)))
   (Start_14 Int (2 3 4 0 x (- Start_3) (- Start_15 Start_14) (* Start_10 Start_4) (div Start_2 Start_4) (mod Start_9 Start_16) (abs Start_13)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_4) (or StartBool_5 StartBool_3) (= Start_2 Start_7) (>= Start_7 Start_2) (> Start_1 Start)))
   (Start_6 Int (5 0 4 2 y (- Start_3) (- Start_2 Start_3) (+ Start_9 Start_5) (* Start_11 Start_10)))
   (Start_4 Int (5 1 4 (+ Start_2 Start_3) (div Start_5 Start_3) (mod Start Start_4)))
   (Start_11 Int (5 4 2 (- Start) (+ Start_12 Start_9) (* Start_9 Start_10) (div Start_2 Start_9)))
   (StartBool_5 Bool (false true (< Start_12 Start_7) (<= Start_2 Start_11)))
   (Start_3 Int (3 4 (- Start_2) (- Start_2 Start_1) (+ Start Start_1) (* Start_2 Start_1) (ite StartBool_1 Start Start)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool_2) (<= Start_6 Start_3) (> Start_6 Start_7)))
   (Start_16 Int (5 2 y (+ Start_16 Start_1) (mod Start_11 Start_15) (abs Start_9) (ite StartBool Start_9 Start_9)))
   (Start_7 Int (x (+ Start_2 Start_2) (* Start Start_8) (div Start Start_6) (mod Start_3 Start_6) (abs Start_4)))
   (Start_2 Int (y 1 x (+ Start_5 Start_12) (mod Start_12 Start_9) (abs Start_9) (ite StartBool Start_7 Start_9)))
   (Start_5 Int (4 (* Start_3 Start) (mod Start Start_1)))
   (Start_8 Int (x 3 (+ Start_1 Start_2) (div Start_9 Start_1) (abs Start_1) (ite StartBool Start_10 Start_1)))
   (Start_12 Int (0 (- Start_3) (* Start_11 Start_1) (div Start_3 Start_10) (mod Start_2 Start_8)))
   (Start_10 Int (y (+ Start_3 Start_5) (* Start_10 Start_4) (mod Start_1 Start_10) (abs Start_8)))
   (Start_9 Int (3 2 4 (- Start_6) (- Start Start_2) (abs Start_9)))
   (StartBool_2 Bool (true false (not StartBool_2) (or StartBool_3 StartBool_4) (< Start_3 Start_9) (<= Start_2 Start_7) (= Start_8 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod 5 y) 1)))

(check-synth)
