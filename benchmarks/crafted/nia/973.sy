(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_12 Int) (Start_11 Int) (Start_2 Int) (Start_13 Int) (StartBool_5 Bool) (Start_4 Int) (StartBool_2 Bool) (Start_3 Int) (Start_5 Int) (Start_7 Int) (Start_1 Int) (Start_9 Int) (StartBool_1 Bool) (Start_8 Int) (StartBool_3 Bool) (Start_10 Int) (Start_6 Int) (StartBool_6 Bool) (StartBool_4 Bool))
  ((Start Int (y (- Start) (+ Start Start_1) (div Start_2 Start_2) (mod Start Start_1) (abs Start_2) (ite StartBool Start Start_2)))
   (StartBool Bool (true (and StartBool_7 StartBool_3) (or StartBool_7 StartBool_5) (<= Start_7 Start_9)))
   (StartBool_7 Bool (false true (and StartBool_2 StartBool_3) (< Start_6 Start_2) (> Start_6 Start_13)))
   (Start_12 Int (2 (+ Start_9 Start_2) (div Start_8 Start_10) (abs Start_4)))
   (Start_11 Int (2 1 x (div Start_5 Start_8)))
   (Start_2 Int (2 (- Start Start_3) (+ Start_1 Start_3) (* Start_3 Start) (mod Start_3 Start)))
   (Start_13 Int (1 (- Start_9) (* Start Start_8)))
   (StartBool_5 Bool (false true (not StartBool_3) (and StartBool_1 StartBool_4) (< Start_3 Start_8) (<= Start_4 Start_9) (>= Start_9 Start_8)))
   (Start_4 Int (y (div Start_4 Start_2) (mod Start_3 Start_5)))
   (StartBool_2 Bool (false true (not StartBool_3) (< Start_3 Start_2) (<= Start_3 Start_3) (> Start_1 Start_3)))
   (Start_3 Int (4 5 (- Start_1) (- Start Start) (* Start_3 Start_2) (div Start_3 Start_2) (mod Start_4 Start_2)))
   (Start_5 Int (y 3 2 0 5 4 x 1 (- Start_3 Start_5) (+ Start_1 Start_3) (* Start_1 Start)))
   (Start_7 Int (y 1 (- Start_6 Start_3) (+ Start_2 Start) (* Start_4 Start_7)))
   (Start_1 Int (x (- Start_2 Start_2) (* Start_2 Start_1) (mod Start_2 Start_4) (abs Start) (ite StartBool_1 Start_2 Start_1)))
   (Start_9 Int (y 4 (- Start_9) (- Start_9 Start_9) (+ Start_5 Start_9) (mod Start_10 Start) (abs Start_11) (ite StartBool_4 Start_8 Start_11)))
   (StartBool_1 Bool (true (not StartBool_2) (< Start_1 Start_1) (>= Start_5 Start_1)))
   (Start_8 Int (0 1 (- Start_11 Start_1) (div Start_9 Start_10) (abs Start_10) (ite StartBool_2 Start_7 Start_8)))
   (StartBool_3 Bool (true false (not StartBool_4) (>= Start_5 Start_5) (> Start_6 Start_2)))
   (Start_10 Int (x 4 (+ Start_1 Start_3) (* Start_10 Start_6) (mod Start_6 Start_12) (ite StartBool_6 Start_9 Start_13)))
   (Start_6 Int (1 (- Start) (- Start_2 Start_3) (div Start_4 Start_7) (mod Start_5 Start_3) (abs Start_1)))
   (StartBool_6 Bool (true false (not StartBool_5) (< Start_1 Start_3) (<= Start_7 Start_12) (= Start_8 Start_6) (> Start_1 Start_9)))
   (StartBool_4 Bool (true false (or StartBool_5 StartBool_2) (< Start_6 Start_1) (= Start Start_4) (> Start_6 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div (* 3 5) (- (div x x) (div 1 x))))))

(check-synth)
