(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_18 Int) (StartBool_1 Bool) (StartBool_6 Bool) (Start_16 Int) (Start_1 Int) (Start_10 Int) (StartBool_3 Bool) (Start_17 Int) (Start_9 Int) (Start_14 Int) (StartBool_2 Bool) (Start_3 Int) (Start_5 Int) (StartBool_5 Bool) (Start_7 Int) (Start_2 Int) (Start_13 Int) (Start_4 Int) (Start_6 Int) (Start_8 Int) (Start_12 Int) (Start_11 Int) (StartBool_4 Bool) (Start_15 Int))
  ((Start Int (x (+ Start Start)))
   (StartBool Bool (true (not StartBool_1) (or StartBool_2 StartBool_3) (<= Start Start_1) (>= Start_2 Start_2) (> Start_1 Start)))
   (StartBool_7 Bool (true false (<= Start_14 Start_12) (>= Start_9 Start_13)))
   (Start_18 Int (x 0 (- Start_10) (div Start_16 Start_3) (mod Start_11 Start_4) (abs Start_10) (ite StartBool_7 Start_2 Start_14)))
   (StartBool_1 Bool (false true (< Start_17 Start_18) (>= Start_12 Start_11)))
   (StartBool_6 Bool (false true (not StartBool) (or StartBool StartBool_2) (<= Start_4 Start_6)))
   (Start_16 Int (2 (- Start_13 Start_17) (+ Start_5 Start_2) (* Start_7 Start_6) (div Start_15 Start_5) (abs Start_4) (ite StartBool Start_6 Start)))
   (Start_1 Int (0 (div Start_12 Start_4) (ite StartBool_5 Start_15 Start_15)))
   (Start_10 Int (x y (- Start_11) (- Start_5 Start_2) (+ Start_7 Start_3) (* Start_1 Start_14) (abs Start_14) (ite StartBool Start_12 Start)))
   (StartBool_3 Bool (false (< Start_9 Start_10) (= Start_8 Start_12) (>= Start_6 Start_7)))
   (Start_17 Int (y (- Start_6) (- Start_7 Start_3) (div Start_3 Start_1) (abs Start_6) (ite StartBool_2 Start_15 Start_11)))
   (Start_9 Int (3 (- Start_3) (- Start_3 Start_10) (div Start_8 Start_11) (abs Start_6) (ite StartBool_2 Start_1 Start_12)))
   (Start_14 Int (1 0 2 x 5 3 (* Start_6 Start_8) (mod Start_6 Start_8)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_4 StartBool_5) (<= Start_3 Start_13) (= Start_13 Start_17) (>= Start_16 Start_16) (> Start_16 Start_12)))
   (Start_3 Int (x (- Start_2 Start_4) (+ Start_1 Start_4) (mod Start_4 Start_5) (abs Start_5) (ite StartBool_3 Start_5 Start_4)))
   (Start_5 Int (y (- Start_6) (- Start Start_2) (+ Start_5 Start_5) (ite StartBool_3 Start_7 Start_3)))
   (StartBool_5 Bool (true false (not StartBool_6) (<= Start_3 Start_16)))
   (Start_7 Int (y (- Start_7 Start_8) (* Start_6 Start_5) (div Start_9 Start_7) (mod Start_6 Start_5) (ite StartBool_2 Start_3 Start_6)))
   (Start_2 Int (5 (+ Start Start_3) (div Start Start_3) (mod Start Start_2)))
   (Start_13 Int (3 (- Start_8) (abs Start_10) (ite StartBool Start_5 Start_15)))
   (Start_4 Int (0 5 (* Start_1 Start_7) (abs Start_12)))
   (Start_6 Int (0 y 1 4 (+ Start_10 Start_7) (* Start_11 Start_9) (div Start_1 Start_5) (mod Start_11 Start_5) (ite StartBool_3 Start_11 Start_5)))
   (Start_8 Int (1 5 0 4 y (- Start_5) (+ Start_4 Start_14) (* Start_5 Start_2)))
   (Start_12 Int (1 2 (- Start_4 Start_4) (* Start_1 Start_4) (div Start_1 Start) (mod Start_1 Start_13) (abs Start) (ite StartBool_4 Start_3 Start_10)))
   (Start_11 Int (4 (+ Start_14 Start_2) (div Start_4 Start_8) (mod Start Start) (abs Start_8)))
   (StartBool_4 Bool (true (not StartBool_3) (<= Start_10 Start_3) (= Start_10 Start_8) (>= Start_8 Start_14) (> Start_4 Start_2)))
   (Start_15 Int (x (+ Start_2 Start_11) (* Start_8 Start_4) (div Start_1 Start_13) (mod Start_13 Start_14) (abs Start_2) (ite StartBool Start_10 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 0 (abs (* (* 4 y) (abs x)))))))

(check-synth)
