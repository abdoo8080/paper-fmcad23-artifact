(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_15 Int) (StartBool_6 Bool) (StartBool_8 Bool) (Start_12 Int) (StartBool_5 Bool) (StartBool_2 Bool) (Start_9 Int) (Start_2 Int) (StartBool_7 Bool) (Start_3 Int) (Start_1 Int) (Start_4 Int) (Start_16 Int) (StartBool_4 Bool) (Start_6 Int) (Start_11 Int) (Start_7 Int) (Start_5 Int) (Start_13 Int) (Start_8 Int) (StartBool_3 Bool) (Start_10 Int) (StartBool_1 Bool))
  ((Start Int (y 5 (- Start) (mod Start_1 Start_1) (abs Start_2)))
   (StartBool Bool (false true (< Start_13 Start_2) (= Start_13 Start_2) (> Start_7 Start_3)))
   (Start_14 Int (3 (+ Start_15 Start_9) (abs Start_13) (ite StartBool_8 Start_12 Start_10)))
   (Start_15 Int (4 2 (- Start_3) (* Start Start_7) (div Start_3 Start_15) (abs Start_6)))
   (StartBool_6 Bool (true (and StartBool_2 StartBool_7) (or StartBool_3 StartBool_2) (< Start_7 Start_13) (<= Start_5 Start_13) (>= Start_7 Start_11)))
   (StartBool_8 Bool (false (not StartBool_2)))
   (Start_12 Int (3 (- Start_6 Start_7) (* Start Start_7) (abs Start_2) (ite StartBool_8 Start_5 Start_7)))
   (StartBool_5 Bool (false true (not StartBool_6) (or StartBool_7 StartBool_2) (< Start_2 Start_5) (<= Start_6 Start_1) (= Start_10 Start_11) (>= Start_9 Start_11) (> Start_10 Start_7)))
   (StartBool_2 Bool (true false (not StartBool) (<= Start_5 Start_7) (= Start_1 Start_3) (>= Start_2 Start_3) (> Start_6 Start)))
   (Start_9 Int (0 (div Start_4 Start_2) (mod Start_2 Start_8)))
   (Start_2 Int (4 x 0 (+ Start_1 Start_2) (mod Start_1 Start_3) (ite StartBool_1 Start_3 Start_4)))
   (StartBool_7 Bool (true (and StartBool_4 StartBool_2) (< Start_6 Start_6) (<= Start_3 Start_9) (> Start Start_12)))
   (Start_3 Int (2 5 (abs Start_10) (ite StartBool_4 Start_5 Start_4)))
   (Start_1 Int (5 3 2 (- Start_14) (div Start_6 Start_6) (abs Start_14) (ite StartBool_7 Start_7 Start_14)))
   (Start_4 Int (0 1 3 x 2 y (- Start_3) (+ Start_5 Start_1) (* Start_6 Start_6) (div Start_4 Start_2) (abs Start_3)))
   (Start_16 Int (2 (- Start_5) (- Start_15 Start_2) (+ Start_14 Start_14) (abs Start_6)))
   (StartBool_4 Bool (false (or StartBool_5 StartBool_5) (<= Start_1 Start_2) (>= Start_3 Start_1)))
   (Start_6 Int (4 2 5 (- Start Start_3) (div Start_7 Start_1) (mod Start_5 Start_2) (abs Start_5) (ite StartBool_2 Start_7 Start_3)))
   (Start_11 Int (3 x 5 4 (- Start_2) (- Start_3 Start_9) (+ Start_1 Start_9) (* Start_9 Start_9) (abs Start_7)))
   (Start_7 Int (x 0 (- Start_2) (div Start_7 Start_7)))
   (Start_5 Int (0 (- Start_7) (+ Start_7 Start_3) (* Start Start_5) (div Start_1 Start_8) (mod Start_9 Start_8) (abs Start_8) (ite StartBool_1 Start Start_4)))
   (Start_13 Int (3 (- Start_5) (+ Start Start_14) (* Start_12 Start_11) (mod Start_3 Start_13) (abs Start_15) (ite StartBool_3 Start_16 Start_15)))
   (Start_8 Int (3 (- Start_5) (- Start_5 Start_8) (ite StartBool_2 Start_3 Start_10)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_2) (or StartBool_1 StartBool_2) (< Start_8 Start_7) (<= Start_1 Start_1) (> Start_2 Start_6)))
   (Start_10 Int (1 2 (- Start_6) (- Start_1 Start_6) (div Start_9 Start_6) (mod Start_2 Start) (ite StartBool_3 Start_6 Start_3)))
   (StartBool_1 Bool (false (or StartBool_1 StartBool_1) (>= Start_7 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* x 5) 5)))

(check-synth)
