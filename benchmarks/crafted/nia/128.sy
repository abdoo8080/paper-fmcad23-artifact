(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_8 Bool) (StartBool_6 Bool) (Start_18 Int) (StartBool_3 Bool) (Start_17 Int) (Start_16 Int) (Start_14 Int) (StartBool_5 Bool) (Start_12 Int) (Start_15 Int) (Start_1 Int) (StartBool_7 Bool) (Start_11 Int) (StartBool_1 Bool) (Start_7 Int) (Start_3 Int) (Start_8 Int) (Start_13 Int) (Start_4 Int) (Start_5 Int) (Start_10 Int) (Start_9 Int) (Start_6 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_2 Int))
  ((Start Int (5 0 (- Start_1 Start_1) (* Start_2 Start_3) (div Start_4 Start_3) (mod Start_4 Start_3) (abs Start) (ite StartBool_1 Start Start)))
   (StartBool Bool (false true (and StartBool_2 StartBool_3) (or StartBool_4 StartBool_3) (< Start_1 Start_11) (<= Start_4 Start_1) (= Start_7 Start_12) (>= Start_10 Start_2) (> Start_10 Start_12)))
   (StartBool_8 Bool (false true (not StartBool_1) (or StartBool_7 StartBool_5) (< Start_2 Start_18) (= Start_13 Start_18) (> Start_11 Start_1)))
   (StartBool_6 Bool (false (or StartBool_8 StartBool_7) (< Start_3 Start_15) (>= Start_5 Start_11)))
   (Start_18 Int (y x (- Start_12 Start_18) (mod Start_1 Start_5) (abs Start_13) (ite StartBool_7 Start_7 Start_7)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_2 StartBool_6) (or StartBool_7 StartBool_7) (>= Start_10 Start_12) (> Start_6 Start_10)))
   (Start_17 Int (3 (- Start_14 Start_9) (div Start_17 Start) (abs Start_12)))
   (Start_16 Int (x (+ Start_6 Start_5) (ite StartBool_1 Start_1 Start_17)))
   (Start_14 Int (y 4 x 5 (- Start_4) (- Start_13 Start_6) (mod Start_11 Start_11) (ite StartBool_4 Start Start_15)))
   (StartBool_5 Bool (true (and StartBool_4 StartBool_5) (or StartBool StartBool) (< Start_13 Start_9) (<= Start_2 Start_4) (>= Start_8 Start_11)))
   (Start_12 Int (0 3 (+ Start_8 Start_4) (div Start_6 Start_7) (mod Start_6 Start_1) (ite StartBool_3 Start Start_3)))
   (Start_15 Int (1 (- Start_16) (- Start_17 Start_8)))
   (Start_1 Int (1 4 y 2 0 5 3 x (- Start Start_3) (+ Start_7 Start_11) (div Start Start_2)))
   (StartBool_7 Bool (false true (and StartBool_1 StartBool_6) (<= Start Start_18)))
   (Start_11 Int (0 (* Start_10 Start_4) (ite StartBool Start_11 Start_6)))
   (StartBool_1 Bool (true (not StartBool_1) (or StartBool_1 StartBool_1) (< Start_4 Start_3) (<= Start_3 Start) (= Start_3 Start_1)))
   (Start_7 Int (4 (- Start_1) (- Start_2 Start_2) (+ Start_5 Start_6) (mod Start Start_7) (abs Start_4) (ite StartBool_2 Start_8 Start_7)))
   (Start_3 Int (3 y 1 (* Start_5 Start_6) (abs Start_6)))
   (Start_8 Int (2 0 4 (- Start_3) (* Start_7 Start) (div Start_7 Start) (abs Start_8) (ite StartBool_1 Start_4 Start_7)))
   (Start_13 Int (3 (- Start_9 Start_8) (+ Start_3 Start_3) (* Start_2 Start_13) (div Start_4 Start_10) (mod Start_13 Start_6) (abs Start_14)))
   (Start_4 Int (0 2 3 (- Start_2 Start) (+ Start_5 Start_3) (* Start Start_6) (ite StartBool Start_7 Start_2)))
   (Start_5 Int (0 (+ Start_4 Start_5)))
   (Start_10 Int (1 5 y 3 (* Start_10 Start_2) (mod Start_7 Start_10) (ite StartBool_2 Start_5 Start_4)))
   (Start_9 Int (x 5 (- Start_5) (+ Start_3 Start_8) (* Start_8 Start) (div Start_5 Start_8) (ite StartBool Start Start_7)))
   (Start_6 Int (3 4 5 2 x y 0 1 (- Start_9) (- Start_3 Start_11) (mod Start Start_9)))
   (StartBool_4 Bool (true (and StartBool_5 StartBool_5) (<= Start_12 Start_2) (= Start_6 Start_5)))
   (StartBool_2 Bool (true false (< Start_2 Start_2) (<= Start_7 Start_9) (>= Start_3 Start_3) (> Start_7 Start_10)))
   (Start_2 Int (x 5 0 (- Start_1) (mod Start_10 Start_11) (abs Start_4) (ite StartBool_2 Start_8 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= y 1) (- 2) 4)))

(check-synth)
