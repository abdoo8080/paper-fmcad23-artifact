(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (StartBool_9 Bool) (StartBool_8 Bool) (Start_5 Int) (Start_11 Int) (StartBool_2 Bool) (Start_10 Int) (StartBool_3 Bool) (Start_2 Int) (StartBool_5 Bool) (Start_13 Int) (Start_3 Int) (Start_1 Int) (Start_12 Int) (StartBool_1 Bool) (Start_6 Int) (StartBool_4 Bool) (Start_7 Int) (StartBool_6 Bool) (Start_9 Int) (StartBool_7 Bool) (Start_8 Int))
  ((Start Int (y (- Start) (* Start Start_1) (div Start_2 Start_2) (mod Start Start_2) (ite StartBool Start_1 Start_3)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_6 StartBool_3) (= Start_1 Start_9)))
   (Start_4 Int (0 x 5 3 1 y 4 (* Start_7 Start_7) (ite StartBool_2 Start_13 Start_3)))
   (StartBool_9 Bool (false true (and StartBool_2 StartBool_6) (<= Start_11 Start_12) (= Start_1 Start_8)))
   (StartBool_8 Bool (true false (or StartBool_1 StartBool_9) (<= Start_11 Start_4) (= Start_2 Start_10) (>= Start_1 Start_2) (> Start_7 Start_4)))
   (Start_5 Int (x (div Start Start_7) (abs Start)))
   (Start_11 Int (5 y x (+ Start_2 Start_10) (* Start_1 Start_11) (mod Start_9 Start_9) (abs Start_4)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_6 StartBool_8) (or StartBool_2 StartBool_7) (< Start_2 Start_5)))
   (Start_10 Int (3 1 0 x (- Start_9 Start_10) (+ Start_10 Start_7) (* Start_9 Start_2) (div Start_3 Start_7) (mod Start_11 Start_4)))
   (StartBool_3 Bool (true (or StartBool_2 StartBool_2) (> Start_2 Start_11)))
   (Start_2 Int (4 1 2 (- Start) (+ Start Start_1) (* Start_3 Start_1) (mod Start_1 Start_2)))
   (StartBool_5 Bool (false true (< Start_8 Start_9) (> Start Start_1)))
   (Start_13 Int (4 (+ Start_3 Start_5) (* Start_10 Start_2) (div Start_4 Start_6) (ite StartBool_2 Start_12 Start_2)))
   (Start_3 Int (4 (- Start) (- Start Start_1) (mod Start_1 Start_3) (abs Start) (ite StartBool Start_2 Start_3)))
   (Start_1 Int (x y (- Start Start_4) (ite StartBool_1 Start_2 Start)))
   (Start_12 Int (3 2 (- Start_8) (- Start_6 Start_12) (+ Start_12 Start_6) (* Start_3 Start_13) (abs Start_11)))
   (StartBool_1 Bool (true false (or StartBool_2 StartBool_3) (< Start_5 Start) (<= Start_6 Start_2) (>= Start_4 Start) (> Start_3 Start_4)))
   (Start_6 Int (0 1 (- Start_1 Start_2) (+ Start_4 Start_1) (* Start_7 Start_1) (div Start_1 Start_5) (mod Start_4 Start_3)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (or StartBool_5 StartBool_6) (< Start_8 Start_3) (>= Start_7 Start_6)))
   (Start_7 Int (x (- Start_8) (+ Start_3 Start_5) (abs Start_6) (ite StartBool_4 Start Start_4)))
   (StartBool_6 Bool (true false (not StartBool_7) (or StartBool_7 StartBool_5) (< Start_5 Start_9) (<= Start_2 Start_4) (= Start_2 Start_4) (> Start_4 Start_1)))
   (Start_9 Int (1 4 3 (- Start_5) (+ Start_5 Start_2) (* Start_7 Start_8)))
   (StartBool_7 Bool (false (< Start_3 Start) (>= Start Start) (> Start_1 Start_7)))
   (Start_8 Int (1 (+ Start_4 Start_5) (* Start_6 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (abs (div 4 0)))))

(check-synth)
