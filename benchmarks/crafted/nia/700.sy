(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_11 Int) (Start_13 Int) (Start_1 Int) (Start_9 Int) (StartBool_3 Bool) (Start_7 Int) (Start_8 Int) (Start_4 Int) (StartBool_4 Bool) (Start_2 Int) (Start_14 Int) (StartBool_1 Bool) (Start_22 Int) (Start_6 Int) (Start_5 Int) (StartBool_6 Bool) (Start_19 Int) (Start_15 Int) (Start_18 Int) (StartBool_2 Bool) (StartBool_5 Bool) (Start_10 Int) (Start_3 Int) (Start_17 Int) (Start_16 Int) (Start_20 Int) (Start_21 Int))
  ((Start Int (x (- Start) (- Start Start_1) (* Start_1 Start_1) (div Start_1 Start) (mod Start_1 Start_1) (abs Start_1)))
   (StartBool Bool (false true (not StartBool) (<= Start_16 Start_5) (= Start_8 Start_4) (>= Start_17 Start_4)))
   (Start_12 Int (5 0 (- Start_8) (- Start_5 Start_1) (+ Start_1 Start_3) (div Start Start_13) (mod Start_14 Start_2) (abs Start_9) (ite StartBool_4 Start_6 Start_11)))
   (Start_11 Int (2 0 (- Start_4) (- Start_11 Start_2) (* Start_4 Start_1) (div Start_6 Start_2) (mod Start_11 Start_7) (abs Start_11) (ite StartBool_1 Start_7 Start_4)))
   (Start_13 Int (x y 4 (+ Start_5 Start_9) (* Start_10 Start_3) (mod Start_14 Start_10) (ite StartBool_3 Start_10 Start_12)))
   (Start_1 Int (2 (- Start_2) (+ Start_1 Start_3) (* Start Start_2) (div Start_3 Start) (ite StartBool Start Start_4)))
   (Start_9 Int (y x 3 4 0 1 (- Start_9 Start_9) (+ Start_4 Start_4) (div Start Start_10) (mod Start_6 Start_11) (abs Start_4)))
   (StartBool_3 Bool (true (not StartBool_3) (or StartBool_2 StartBool_4) (= Start_12 Start_3) (> Start_10 Start_7)))
   (Start_7 Int (4 5 (- Start_1 Start_9) (* Start_3 Start_9) (abs Start_3)))
   (Start_8 Int (1 (- Start_2 Start) (div Start_1 Start) (mod Start_2 Start_6) (abs Start_6)))
   (Start_4 Int (0 2 (- Start_4) (+ Start_5 Start_3) (div Start_5 Start_6) (abs Start_1) (ite StartBool Start_4 Start_6)))
   (StartBool_4 Bool (true (not StartBool) (and StartBool_1 StartBool_5) (or StartBool_1 StartBool) (< Start_11 Start_9) (<= Start Start_9) (= Start_15 Start_15) (>= Start_6 Start_4) (> Start_8 Start_9)))
   (Start_2 Int (4 (* Start_6 Start_8) (div Start_1 Start_6) (mod Start_9 Start_1) (abs Start_13)))
   (Start_14 Int (3 (- Start_2) (- Start_9 Start_8) (+ Start_2 Start_10) (mod Start_6 Start_8)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_2 StartBool_3) (or StartBool_2 StartBool_2) (<= Start_4 Start_5) (= Start_9 Start_8) (> Start_3 Start_8)))
   (Start_22 Int (y 0 (* Start_19 Start_17) (mod Start_5 Start_10)))
   (Start_6 Int (x 4 2 3 (- Start Start_1) (+ Start_4 Start_4) (div Start_6 Start_4) (abs Start_7) (ite StartBool Start_8 Start_5)))
   (Start_5 Int (1 y 5 (- Start_5 Start_1) (+ Start_1 Start_14) (* Start_14 Start_14) (div Start_8 Start_3) (ite StartBool_6 Start_6 Start_7)))
   (StartBool_6 Bool (false true (not StartBool_1) (or StartBool_2 StartBool_1) (< Start_9 Start_5) (<= Start_2 Start_2)))
   (Start_19 Int (4 (- Start_18) (* Start Start_13) (div Start_15 Start_2)))
   (Start_15 Int (x 4 y (- Start_15) (* Start_14 Start_9) (div Start_3 Start_11) (mod Start_3 Start_11) (abs Start_15)))
   (Start_18 Int (x (* Start_5 Start_15) (div Start_6 Start_8) (mod Start_19 Start_17)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_1) (<= Start_2 Start_12) (>= Start_12 Start_7)))
   (StartBool_5 Bool (false true (< Start_15 Start_11) (<= Start_8 Start_10) (= Start_7 Start_2) (>= Start_4 Start_14) (> Start_15 Start_12)))
   (Start_10 Int (1 (- Start) (div Start_1 Start_12) (mod Start_11 Start_6) (abs Start_6) (ite StartBool_2 Start_9 Start_3)))
   (Start_3 Int (0 2 (+ Start Start_6) (* Start_3 Start_9) (abs Start_11)))
   (Start_17 Int (1 (- Start_10 Start_12) (+ Start_12 Start_7) (div Start_8 Start_18)))
   (Start_16 Int (2 (- Start_4) (+ Start_2 Start_11) (div Start_18 Start_8) (mod Start_20 Start_5)))
   (Start_20 Int (3 1 0 5 y (- Start_4) (+ Start_16 Start_21) (div Start_2 Start_9) (abs Start_5)))
   (Start_21 Int (5 (- Start_15) (- Start_2 Start_17) (+ Start_22 Start_7) (abs Start_14) (ite StartBool_4 Start_10 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div y 5))))

(check-synth)
