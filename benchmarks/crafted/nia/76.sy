(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_10 Int) (Start_8 Int) (Start_13 Int) (Start_11 Int) (Start_9 Int) (Start_3 Int) (Start_4 Int) (Start_5 Int) (Start_12 Int) (Start_6 Int) (StartBool_2 Bool) (StartBool_6 Bool) (Start_2 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_1 Int) (StartBool_4 Bool) (Start_7 Int))
  ((Start Int (3 (- Start_1) (- Start Start_2) (* Start Start_1) (div Start_2 Start) (mod Start_2 Start_3) (ite StartBool Start_2 Start_2)))
   (StartBool Bool (true false (not StartBool) (and StartBool_1 StartBool) (or StartBool_2 StartBool_1) (< Start_4 Start_5) (<= Start_5 Start_5) (= Start_1 Start_1)))
   (StartBool_5 Bool (true false (< Start_12 Start_5) (<= Start Start_5) (= Start Start_11) (>= Start_1 Start_5)))
   (Start_10 Int (4 5 2 (- Start_6) (- Start_4 Start_6) (+ Start_11 Start_3) (* Start_11 Start_10) (mod Start_10 Start_11) (ite StartBool_2 Start_4 Start_12)))
   (Start_8 Int (3 (- Start_3) (- Start_5 Start) (* Start_4 Start_3) (div Start_8 Start_5) (mod Start_9 Start_6) (abs Start_7) (ite StartBool_4 Start_7 Start_8)))
   (Start_13 Int (5 (* Start_2 Start_8) (div Start_1 Start_8) (abs Start_13) (ite StartBool_6 Start_1 Start_9)))
   (Start_11 Int (x 1 4 (+ Start_11 Start_10) (* Start Start_5) (mod Start_13 Start_11) (abs Start) (ite StartBool_2 Start_3 Start_9)))
   (Start_9 Int (5 y 1 2 (- Start_1 Start_7) (* Start_4 Start_3) (div Start_7 Start_8) (abs Start_4) (ite StartBool_4 Start_10 Start_9)))
   (Start_3 Int (1 5 (- Start) (* Start_1 Start_3) (div Start Start_4)))
   (Start_4 Int (y 2 (- Start Start_2) (mod Start_4 Start_3)))
   (Start_5 Int (y 5 (- Start_4 Start_3) (div Start_5 Start_4)))
   (Start_12 Int (0 3 (- Start_12) (mod Start_9 Start_1) (abs Start_6) (ite StartBool_3 Start_3 Start_9)))
   (Start_6 Int (0 x 4 1 (- Start_7) (- Start_3 Start_3) (+ Start_1 Start) (* Start_3 Start_3) (div Start_2 Start_7) (mod Start_7 Start_1) (abs Start_2) (ite StartBool_2 Start_1 Start_3)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_3)))
   (StartBool_6 Bool (true false (< Start_4 Start_4) (<= Start_10 Start_12) (= Start_4 Start_5) (> Start_9 Start_9)))
   (Start_2 Int (0 3 (- Start_2) (mod Start_3 Start_4)))
   (StartBool_3 Bool (true (not StartBool_3) (= Start_3 Start) (>= Start_1 Start)))
   (StartBool_1 Bool (true false (or StartBool_4 StartBool_2) (>= Start_5 Start_1)))
   (Start_1 Int (5 (- Start) (- Start_4 Start_5) (* Start_3 Start_1) (div Start_4 Start_1) (mod Start_3 Start_5) (abs Start_3)))
   (StartBool_4 Bool (true false (and StartBool_5 StartBool_5) (= Start_6 Start)))
   (Start_7 Int (1 2 x 0 (- Start Start_8) (div Start_2 Start_5) (mod Start_4 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 y)))

(check-synth)
