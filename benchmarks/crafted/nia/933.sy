(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_13 Int) (Start_12 Int) (StartBool_4 Bool) (Start_2 Int) (StartBool_3 Bool) (StartBool_5 Bool) (Start_3 Int) (StartBool_1 Bool) (Start_11 Int) (Start_9 Int) (Start_15 Int) (Start_14 Int) (Start_5 Int) (Start_6 Int) (Start_1 Int) (Start_7 Int) (Start_10 Int) (Start_8 Int) (StartBool_2 Bool) (Start_4 Int))
  ((Start Int (5 (- Start) (- Start Start_1) (mod Start_2 Start_3) (abs Start_2)))
   (StartBool Bool (false (or StartBool StartBool) (< Start_15 Start_14)))
   (StartBool_6 Bool (true false (not StartBool_3) (or StartBool_1 StartBool_3) (> Start_14 Start_1)))
   (Start_13 Int (2 x (- Start_1) (- Start_7 Start_4) (ite StartBool_2 Start_4 Start_8)))
   (Start_12 Int (x 5 0 4 3 (- Start_1 Start_9) (div Start_13 Start) (mod Start_10 Start_8)))
   (StartBool_4 Bool (false true (not StartBool_1) (or StartBool_3 StartBool_2) (= Start_5 Start_3) (>= Start Start_4) (> Start_10 Start_2)))
   (Start_2 Int (y 0 4 x (mod Start_1 Start_4) (ite StartBool_1 Start_3 Start)))
   (StartBool_3 Bool (false true (not StartBool_2) (<= Start Start_7) (= Start_7 Start_2) (>= Start Start_2)))
   (StartBool_5 Bool (true false (not StartBool_3) (and StartBool_1 StartBool_6) (or StartBool_6 StartBool_3) (< Start_5 Start_6) (<= Start_5 Start_5) (> Start_12 Start_4)))
   (Start_3 Int (x 5 (- Start_3) (- Start_3 Start) (* Start_3 Start_1) (mod Start_1 Start_3)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (< Start_3 Start) (>= Start_5 Start)))
   (Start_11 Int (3 4 0 5 (- Start_7) (- Start Start_8) (+ Start_7 Start_11) (mod Start_1 Start_2) (abs Start_1) (ite StartBool_5 Start_4 Start_2)))
   (Start_9 Int (4 5 2 (- Start_9) (+ Start_10 Start_8) (* Start_3 Start_3) (mod Start_1 Start_2) (ite StartBool Start_4 Start_5)))
   (Start_15 Int (y 2 (- Start_12) (- Start_3 Start_7) (+ Start_15 Start_1) (* Start_7 Start_3) (mod Start_1 Start_13) (abs Start_7)))
   (Start_14 Int (0 x (- Start_7) (div Start_8 Start_8) (ite StartBool Start_5 Start_3)))
   (Start_5 Int (2 x 3 (- Start Start_4) (+ Start_3 Start_2) (mod Start_4 Start_1) (abs Start_4) (ite StartBool_2 Start_1 Start)))
   (Start_6 Int (3 (- Start_6) (- Start_5 Start_3) (+ Start_4 Start_5) (* Start_3 Start_6) (div Start_1 Start_1) (mod Start_3 Start_4) (ite StartBool_3 Start_5 Start_3)))
   (Start_1 Int (5 (- Start_11) (div Start_2 Start_1) (mod Start_3 Start_1) (abs Start_9) (ite StartBool_4 Start_5 Start_8)))
   (Start_7 Int (0 y 3 4 (- Start_3) (+ Start_3 Start_8) (div Start_5 Start_3) (mod Start_7 Start_6) (ite StartBool_2 Start_9 Start_5)))
   (Start_10 Int (3 (- Start_8) (- Start_8 Start_4) (mod Start_10 Start_4) (ite StartBool Start_8 Start_7)))
   (Start_8 Int (y (- Start Start_2) (+ Start_6 Start_1) (abs Start_6)))
   (StartBool_2 Bool (false (not StartBool_1) (<= Start_1 Start_2) (= Start_6 Start_3) (>= Start_3 Start_6)))
   (Start_4 Int (4 (* Start_7 Start_8) (mod Start_2 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* x (+ 5 2))))

(check-synth)
