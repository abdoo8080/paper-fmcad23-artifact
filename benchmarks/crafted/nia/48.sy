(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_13 Int) (StartBool_4 Bool) (Start_9 Int) (Start_10 Int) (Start_11 Int) (StartBool_5 Bool) (Start_5 Int) (StartBool_1 Bool) (Start_3 Int) (Start_2 Int) (Start_12 Int) (Start_6 Int) (Start_1 Int) (Start_4 Int) (Start_7 Int) (Start_8 Int) (StartBool_2 Bool) (StartBool_3 Bool))
  ((Start Int (x (- Start_1) (+ Start Start_2) (* Start Start_1) (div Start_2 Start_3)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_1 StartBool) (< Start_4 Start_1) (<= Start_7 Start_1) (= Start_1 Start_5) (> Start_3 Start_8)))
   (StartBool_6 Bool (true false (not StartBool) (and StartBool_6 StartBool_5) (<= Start_12 Start_7) (= Start_12 Start_3) (>= Start_6 Start_11)))
   (Start_13 Int (0 2 (- Start_13) (div Start_2 Start_4)))
   (StartBool_4 Bool (false (not StartBool_2) (or StartBool StartBool_5) (<= Start_13 Start_5) (= Start_1 Start_2)))
   (Start_9 Int (5 2 x 3 (div Start_1 Start_12) (mod Start_11 Start_2) (ite StartBool_4 Start_9 Start_9)))
   (Start_10 Int (0 1 (- Start_2) (- Start_2 Start_5) (div Start_8 Start) (mod Start_7 Start_10)))
   (Start_11 Int (3 4 (+ Start_9 Start_1) (* Start_2 Start_9) (abs Start_3) (ite StartBool_2 Start_1 Start_2)))
   (StartBool_5 Bool (false true (and StartBool StartBool_4) (or StartBool StartBool_2) (< Start_9 Start_6) (<= Start_4 Start_13) (= Start_10 Start_4) (> Start_12 Start)))
   (Start_5 Int (y 0 4 (- Start_1) (- Start_5 Start_4) (+ Start_5 Start_4) (* Start_4 Start_6)))
   (StartBool_1 Bool (false true (or StartBool_6 StartBool_4) (< Start_13 Start_4) (<= Start_10 Start_8) (> Start_2 Start_13)))
   (Start_3 Int (5 y x 4 (- Start_4) (- Start_3 Start_2) (* Start_3 Start_5) (div Start_3 Start_6) (mod Start Start_4)))
   (Start_2 Int (2 (+ Start_3 Start_3) (div Start_3 Start)))
   (Start_12 Int (y 1 (- Start_7 Start_5) (div Start Start_3) (abs Start) (ite StartBool_3 Start_10 Start_8)))
   (Start_6 Int (3 (- Start_5) (* Start Start_1) (mod Start_1 Start_1) (abs Start) (ite StartBool Start_2 Start)))
   (Start_1 Int (x 5 (- Start_5) (+ Start_1 Start_1) (* Start_2 Start_1) (abs Start_7)))
   (Start_4 Int (1 0 3 (mod Start Start_1) (ite StartBool Start_5 Start)))
   (Start_7 Int (4 x (- Start_2) (- Start_4 Start_1) (* Start Start_5) (div Start_6 Start_6)))
   (Start_8 Int (0 (- Start_9 Start_9) (+ Start_10 Start_2) (* Start_7 Start_6) (div Start_3 Start_7) (ite StartBool_2 Start_6 Start)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_3) (< Start_4 Start_2) (> Start_5 Start_7)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_1 StartBool) (<= Start_9 Start_3) (= Start_11 Start_1) (>= Start_12 Start) (> Start_8 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (div x x) 5)))

(check-synth)
