(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_18 Int) (StartBool_4 Bool) (StartBool_5 Bool) (StartBool_3 Bool) (Start_17 Int) (Start_2 Int) (StartBool_7 Bool) (Start_3 Int) (Start_16 Int) (Start_15 Int) (StartBool_1 Bool) (Start_4 Int) (Start_7 Int) (Start_5 Int) (Start_9 Int) (Start_1 Int) (Start_6 Int) (StartBool_2 Bool) (Start_10 Int) (Start_14 Int) (Start_8 Int) (Start_11 Int) (Start_12 Int) (Start_13 Int))
  ((Start Int (0 y 4 1 (div Start Start_1) (abs Start_1)))
   (StartBool Bool (false (or StartBool_1 StartBool_4) (>= Start_7 Start_5) (> Start_12 Start_12)))
   (StartBool_6 Bool (true (not StartBool_5) (<= Start_14 Start_11) (>= Start_2 Start_2)))
   (Start_18 Int (0 (+ Start Start_18) (* Start_10 Start_3) (abs Start_7)))
   (StartBool_4 Bool (true false (not StartBool_6) (and StartBool_7 StartBool_1) (or StartBool_2 StartBool_2) (< Start_8 Start_13) (>= Start_10 Start_1)))
   (StartBool_5 Bool (true false (not StartBool_5) (and StartBool_3 StartBool_2) (= Start_9 Start_4) (>= Start_15 Start_1) (> Start_6 Start_5)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_4 StartBool_5) (or StartBool_1 StartBool_1) (<= Start_16 Start_17) (= Start Start_16) (>= Start_8 Start_4)))
   (Start_17 Int (4 5 (- Start_17) (+ Start_12 Start_16) (abs Start_3) (ite StartBool_3 Start Start_5)))
   (Start_2 Int (1 (- Start_4) (+ Start_15 Start_9) (div Start_17 Start) (abs Start)))
   (StartBool_7 Bool (false (and StartBool_5 StartBool_5) (< Start_18 Start_4) (<= Start_8 Start) (= Start_3 Start_6)))
   (Start_3 Int (4 (+ Start_7 Start_4) (* Start_7 Start_3) (div Start_5 Start_8)))
   (Start_16 Int (0 (- Start_6) (div Start Start_9) (abs Start_3)))
   (Start_15 Int (3 (- Start_10) (+ Start_9 Start_16) (mod Start_7 Start_13) (abs Start_2) (ite StartBool Start_11 Start)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool_1) (<= Start_8 Start_1) (= Start_1 Start_7) (> Start_1 Start_14)))
   (Start_4 Int (x y 4 (mod Start_5 Start_4) (abs Start_3) (ite StartBool Start_3 Start_6)))
   (Start_7 Int (y 1 (- Start_5) (+ Start_3 Start_8) (* Start_3 Start_9) (div Start_9 Start_6)))
   (Start_5 Int (4 2 (- Start_4) (- Start_1 Start_1) (mod Start_4 Start_5) (ite StartBool_1 Start_6 Start_7)))
   (Start_9 Int (3 x y 2 0 (abs Start_10) (ite StartBool_2 Start_8 Start)))
   (Start_1 Int (5 (- Start Start) (+ Start_2 Start_2) (* Start_2 Start_3) (div Start_3 Start_3) (mod Start_3 Start_4) (abs Start_4)))
   (Start_6 Int (y (- Start Start_1) (+ Start_2 Start_4) (* Start_6 Start_2) (mod Start Start_5) (abs Start_1)))
   (StartBool_2 Bool (true (not StartBool_2) (or StartBool StartBool_1) (<= Start_2 Start_5) (> Start_9 Start_1)))
   (Start_10 Int (y (- Start_8) (+ Start Start_5) (* Start_5 Start_1) (div Start Start_7) (abs Start_7) (ite StartBool_1 Start Start_5)))
   (Start_14 Int (2 0 4 (- Start) (- Start_7 Start_9) (div Start_14 Start_1) (abs Start_11) (ite StartBool Start_13 Start_15)))
   (Start_8 Int (1 (- Start_2) (* Start_8 Start_11) (div Start_7 Start_8) (abs Start_6) (ite StartBool Start_6 Start_8)))
   (Start_11 Int (x (- Start_5) (- Start_3 Start_4) (+ Start_7 Start_11) (* Start_6 Start_12) (div Start_3 Start_4) (mod Start_4 Start_2) (abs Start_2) (ite StartBool_2 Start_13 Start_10)))
   (Start_12 Int (5 (- Start_12) (- Start_8 Start_10)))
   (Start_13 Int (y (- Start_4 Start_11) (* Start Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (* y y) 5)))

(check-synth)
