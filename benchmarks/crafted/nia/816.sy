(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (StartBool_4 Bool) (StartBool_3 Bool) (StartBool_6 Bool) (Start_16 Int) (StartBool_2 Bool) (Start_15 Int) (Start_11 Int) (Start_9 Int) (Start_10 Int) (StartBool_5 Bool) (Start_4 Int) (Start_6 Int) (StartBool_1 Bool) (Start_3 Int) (Start_5 Int) (Start_7 Int) (Start_8 Int) (Start_2 Int) (Start_1 Int) (Start_14 Int) (Start_13 Int) (Start_12 Int))
  ((Start Int (2 5 (+ Start_1 Start) (* Start Start_1) (div Start_2 Start_3) (mod Start_1 Start_1) (abs Start_4)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_2 StartBool_1) (or StartBool_3 StartBool) (< Start_5 Start_3) (= Start_12 Start_11) (>= Start_13 Start_6) (> Start_12 Start_2)))
   (Start_17 Int (4 (- Start_11 Start_5) (+ Start_13 Start_14) (mod Start_8 Start_14) (ite StartBool_2 Start_14 Start_17)))
   (StartBool_4 Bool (true false (not StartBool_2) (or StartBool_3 StartBool_5) (<= Start_5 Start_9) (= Start_14 Start_14) (>= Start_8 Start_14) (> Start_14 Start_2)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_5 StartBool_3) (= Start_13 Start_17)))
   (StartBool_6 Bool (false true (< Start_5 Start_12) (<= Start_1 Start_5) (> Start_12 Start_10)))
   (Start_16 Int (5 (* Start_4 Start_13) (div Start_15 Start_9) (mod Start_14 Start_16) (abs Start_9) (ite StartBool_2 Start_9 Start_14)))
   (StartBool_2 Bool (false true (not StartBool_1) (= Start_16 Start_8) (>= Start_15 Start_3) (> Start_11 Start_15)))
   (Start_15 Int (y (- Start_5) (+ Start_6 Start) (* Start_1 Start_9) (abs Start_10) (ite StartBool_2 Start_4 Start_3)))
   (Start_11 Int (3 1 (* Start_12 Start_10) (div Start_7 Start_12) (abs Start_9) (ite StartBool Start_12 Start_2)))
   (Start_9 Int (x 4 (+ Start_1 Start_14) (div Start_10 Start_14) (abs Start_3)))
   (Start_10 Int (x (- Start_8) (- Start_11 Start_9) (+ Start_8 Start) (div Start_6 Start_12) (ite StartBool_1 Start_13 Start_8)))
   (StartBool_5 Bool (false true (not StartBool_6) (or StartBool_2 StartBool_5) (= Start_16 Start_6) (> Start_9 Start_16)))
   (Start_4 Int (4 2 (ite StartBool Start Start_1)))
   (Start_6 Int (x (+ Start_7 Start) (abs Start_1) (ite StartBool Start_1 Start_6)))
   (StartBool_1 Bool (true (or StartBool_1 StartBool_1) (<= Start_9 Start_7) (>= Start_9 Start_15)))
   (Start_3 Int (x 3 2 (- Start_3) (+ Start_3 Start_5) (* Start_5 Start_2) (ite StartBool Start_3 Start_1)))
   (Start_5 Int (x (* Start_2 Start_2) (div Start_1 Start_2) (mod Start_4 Start_4) (abs Start_1) (ite StartBool Start_2 Start_6)))
   (Start_7 Int (1 (- Start_3) (+ Start_7 Start_2) (div Start_2 Start_3)))
   (Start_8 Int (y 0 1 5 (- Start_7) (* Start_1 Start_5) (div Start_4 Start_9) (mod Start_2 Start_6) (abs Start_1) (ite StartBool_1 Start_10 Start_1)))
   (Start_2 Int (1 x 4 (- Start_4 Start_5) (abs Start_2) (ite StartBool Start_2 Start_4)))
   (Start_1 Int (y (- Start_7) (* Start_5 Start_1) (ite StartBool Start_5 Start_8)))
   (Start_14 Int (4 (- Start_2 Start_3) (* Start_10 Start_7) (div Start_5 Start_5)))
   (Start_13 Int (1 (- Start_2) (- Start_14 Start_13) (+ Start_4 Start_6) (abs Start_2) (ite StartBool_1 Start_10 Start_4)))
   (Start_12 Int (2 (- Start_11) (+ Start_5 Start_11) (div Start_3 Start_8) (mod Start_10 Start_6) (abs Start_14) (ite StartBool_1 Start_8 Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod y 2))))

(check-synth)
