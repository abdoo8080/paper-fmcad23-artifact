(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_20 Int) (Start_18 Int) (Start_16 Int) (Start_12 Int) (StartBool_5 Bool) (Start_13 Int) (Start_17 Int) (StartBool_4 Bool) (StartBool_7 Bool) (Start_14 Int) (Start_9 Int) (Start_4 Int) (Start_7 Int) (Start_3 Int) (Start_5 Int) (Start_11 Int) (Start_6 Int) (StartBool_3 Bool) (Start_19 Int) (Start_15 Int) (Start_10 Int) (StartBool_2 Bool) (StartBool_6 Bool) (Start_2 Int) (Start_8 Int) (StartBool_1 Bool))
  ((Start Int (1 2 y 4 (- Start_1) (div Start_1 Start) (abs Start) (ite StartBool Start_2 Start_3)))
   (StartBool Bool (true false (and StartBool_4 StartBool_7) (< Start_3 Start_20) (<= Start Start_8) (>= Start_6 Start_6) (> Start_4 Start_9)))
   (Start_1 Int (4 (- Start_11 Start_3) (* Start_18 Start_10) (mod Start_11 Start_19) (abs Start_12) (ite StartBool_5 Start_18 Start_11)))
   (Start_20 Int (1 x (* Start_7 Start_3) (mod Start Start)))
   (Start_18 Int (0 (- Start_2 Start_8) (* Start_12 Start_13) (div Start_19 Start_15) (mod Start_2 Start_6) (abs Start_14)))
   (Start_16 Int (x (- Start_11) (* Start_1 Start_5) (div Start_10 Start_17) (mod Start_1 Start_5) (abs Start_1)))
   (Start_12 Int (1 (- Start_2 Start) (+ Start_6 Start_14) (* Start_14 Start_1) (abs Start_8)))
   (StartBool_5 Bool (true false (not StartBool_6) (and StartBool_7 StartBool_5) (<= Start_13 Start_16) (= Start_10 Start_8) (> Start_12 Start_14)))
   (Start_13 Int (y 0 (div Start_14 Start_6) (mod Start Start_12) (abs Start) (ite StartBool_1 Start_5 Start_5)))
   (Start_17 Int (2 (* Start_8 Start_1) (abs Start_12) (ite StartBool_2 Start_5 Start_6)))
   (StartBool_4 Bool (false true (< Start Start_12) (<= Start_12 Start_13) (> Start_5 Start_7)))
   (StartBool_7 Bool (true (< Start_19 Start_9) (= Start_8 Start_5) (>= Start_17 Start_9)))
   (Start_14 Int (1 (- Start_4 Start_8) (* Start_3 Start_5) (mod Start_4 Start_15) (abs Start_6)))
   (Start_9 Int (5 (- Start_9) (- Start_5 Start_4) (mod Start_1 Start_2) (abs Start_7) (ite StartBool_1 Start_11 Start_5)))
   (Start_4 Int (3 y (- Start_2) (ite StartBool_1 Start_5 Start_5)))
   (Start_7 Int (5 1 (* Start_4 Start_4) (mod Start_5 Start_8) (abs Start)))
   (Start_3 Int (2 (- Start_4 Start_3) (+ Start_3 Start_3) (abs Start_1)))
   (Start_5 Int (3 4 (- Start_3) (- Start_4 Start_4) (* Start Start_6) (div Start Start_1) (mod Start_1 Start) (abs Start_4) (ite StartBool_2 Start_7 Start_1)))
   (Start_11 Int (1 (- Start) (+ Start_7 Start) (* Start_9 Start_9) (abs Start_4) (ite StartBool_3 Start_9 Start_1)))
   (Start_6 Int (x (- Start Start_3) (+ Start_6 Start_7) (* Start_7 Start) (mod Start_11 Start_6)))
   (StartBool_3 Bool (false (<= Start_4 Start_3)))
   (Start_19 Int (1 (- Start_6) (div Start_18 Start_13) (mod Start_8 Start_19) (abs Start_5)))
   (Start_15 Int (x 1 0 3 4 y (mod Start Start_5) (ite StartBool_2 Start Start_4)))
   (Start_10 Int (y (- Start_10) (abs Start_7)))
   (StartBool_2 Bool (false true (or StartBool StartBool) (= Start_8 Start_5) (> Start_7 Start_8)))
   (StartBool_6 Bool (true false (not StartBool_2) (<= Start_1 Start_11) (>= Start_8 Start_4) (> Start_16 Start_15)))
   (Start_2 Int (4 (div Start_11 Start_15) (mod Start_16 Start_3) (abs Start_15)))
   (Start_8 Int (0 1 (- Start_9) (* Start_9 Start_10) (mod Start Start_5) (abs Start_7) (ite StartBool_1 Start Start_10)))
   (StartBool_1 Bool (false (and StartBool_4 StartBool_2) (< Start_4 Start_2) (>= Start_3 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (* 5 5) (mod 0 y))))

(check-synth)
