(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_10 Int) (Start_1 Int) (Start_2 Int) (Start_3 Int) (Start_4 Int) (Start_6 Int) (Start_5 Int) (Start_8 Int) (Start_7 Int) (StartBool_2 Bool) (Start_9 Int) (StartBool_1 Bool))
  ((Start Int (3 4 y (- Start_1) (* Start Start_1) (abs Start_1) (ite StartBool Start Start)))
   (StartBool Bool (true false (not StartBool) (and StartBool StartBool_1) (>= Start_3 Start_4) (> Start Start_3)))
   (Start_11 Int (3 5 (- Start_2) (+ Start_10 Start_3) (* Start_6 Start_2) (div Start_10 Start_10) (abs Start_2)))
   (Start_10 Int (0 5 (- Start_5 Start_2)))
   (Start_1 Int (1 (- Start_1) (* Start_2 Start_2) (ite StartBool Start_1 Start)))
   (Start_2 Int (y 3 1 x (- Start) (+ Start_1 Start_3) (mod Start_1 Start_2)))
   (Start_3 Int (1 (- Start_3 Start) (ite StartBool Start_3 Start_3)))
   (Start_4 Int (2 (- Start_5 Start_3) (+ Start_2 Start_1) (* Start_6 Start_1) (div Start_5 Start_1) (mod Start_4 Start) (ite StartBool_1 Start Start)))
   (Start_6 Int (4 5 (- Start_7 Start_1) (* Start_5 Start) (div Start_8 Start_1) (mod Start_3 Start_8) (abs Start) (ite StartBool Start_5 Start_7)))
   (Start_5 Int (x 4 (- Start_3) (+ Start_6 Start_7) (div Start_3 Start_5) (mod Start_7 Start_5) (abs Start_6) (ite StartBool_1 Start_4 Start_7)))
   (Start_8 Int (3 x y (+ Start_4 Start_5) (ite StartBool_1 Start_3 Start_8)))
   (Start_7 Int (4 1 x y 0 (+ Start_2 Start_3) (* Start Start_6) (div Start_1 Start_6) (abs Start_9)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool) (< Start Start_5) (<= Start_8 Start_3)))
   (Start_9 Int (y (- Start_10) (- Start Start_3) (+ Start_7 Start_8) (* Start Start_1) (div Start_4 Start_6) (mod Start Start_5) (ite StartBool_1 Start_1 Start_2)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool) (< Start_7 Start_11) (<= Start_7 Start_6) (> Start_1 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* (ite (< 5 x) 3 x) (mod (abs x) 5)))))

(check-synth)
