(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_8 Int) (Start_12 Int) (Start_3 Int) (Start_1 Int) (Start_14 Int) (Start_7 Int) (StartBool_6 Bool) (Start_9 Int) (Start_2 Int) (Start_5 Int) (StartBool_5 Bool) (Start_4 Int) (Start_13 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartBool_3 Bool) (StartBool_4 Bool) (Start_10 Int) (Start_11 Int))
  ((Start Int (4 2 (+ Start_1 Start) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (false (not StartBool_6) (and StartBool_3 StartBool_1) (< Start_3 Start_2) (= Start_12 Start) (>= Start_8 Start_11)))
   (Start_6 Int (3 (- Start_11) (+ Start_5 Start_6) (div Start_8 Start_11) (abs Start_10) (ite StartBool_4 Start_12 Start_14)))
   (Start_8 Int (2 3 1 (- Start_2 Start_6) (mod Start_13 Start_3) (ite StartBool_3 Start_6 Start_3)))
   (Start_12 Int (0 5 (- Start_7) (+ Start_9 Start_5) (div Start Start_5) (mod Start_1 Start_6) (ite StartBool_1 Start_1 Start_12)))
   (Start_3 Int (x 3 5 (- Start_4) (- Start_4 Start_4) (* Start_5 Start_1) (div Start_2 Start_3)))
   (Start_1 Int (y (- Start_4) (- Start_8 Start_7) (+ Start_8 Start_4) (ite StartBool_2 Start_9 Start_8)))
   (Start_14 Int (y (* Start_5 Start_1) (div Start_10 Start_1) (mod Start_3 Start_11)))
   (Start_7 Int (4 (+ Start_7 Start_4) (* Start_4 Start_2) (mod Start_8 Start) (abs Start_3) (ite StartBool_2 Start_2 Start_5)))
   (StartBool_6 Bool (false (or StartBool_6 StartBool_6)))
   (Start_9 Int (y 3 2 0 (* Start_8 Start_5) (mod Start_3 Start_1) (ite StartBool Start_4 Start_7)))
   (Start_2 Int (5 2 (- Start_1) (- Start_1 Start_3) (mod Start_3 Start_3)))
   (Start_5 Int (3 (- Start_1) (- Start Start)))
   (StartBool_5 Bool (false (>= Start_10 Start_6)))
   (Start_4 Int (0 (- Start_6 Start_5) (div Start Start_1) (mod Start_5 Start_5) (ite StartBool_1 Start_3 Start_7)))
   (Start_13 Int (4 1 (- Start_8 Start_7) (+ Start_13 Start_1) (* Start_14 Start_7) (div Start_4 Start_2) (ite StartBool_5 Start_10 Start_11)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool) (or StartBool_1 StartBool_2) (>= Start_8 Start_9) (> Start_2 Start_3)))
   (StartBool_1 Bool (false (or StartBool_2 StartBool_4) (< Start_9 Start_1) (<= Start_11 Start_2) (= Start_13 Start_13)))
   (StartBool_3 Bool (true false (not StartBool_2) (or StartBool StartBool_4) (< Start_5 Start_1) (<= Start Start_8) (>= Start_6 Start_4) (> Start Start_1)))
   (StartBool_4 Bool (true false (and StartBool_4 StartBool_3) (or StartBool_1 StartBool_5) (<= Start_9 Start_1) (>= Start_5 Start_9)))
   (Start_10 Int (2 x 0 (- Start_7 Start_1) (+ Start_11 Start) (mod Start_2 Start_11) (abs Start) (ite StartBool_1 Start_7 Start_11)))
   (Start_11 Int (4 3 (mod Start_7 Start_12) (ite StartBool Start_10 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (+ x 3) 3)))

(check-synth)
