(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_8 Int) (Start_9 Int) (StartBool_1 Bool) (Start_3 Int) (StartBool_3 Bool) (Start_10 Int) (Start_2 Int) (Start_4 Int) (Start_5 Int) (Start_1 Int) (Start_6 Int) (Start_7 Int) (StartBool_2 Bool))
  ((Start Int (2 5 (- Start_1) (- Start Start_2) (+ Start_1 Start_1) (div Start_1 Start_3) (abs Start_2) (ite StartBool Start_3 Start_3)))
   (StartBool Bool (true false (not StartBool_1) (or StartBool StartBool) (>= Start_2 Start_3) (> Start_5 Start_6)))
   (Start_8 Int (1 y (- Start_10) (- Start_6 Start_5) (* Start_9 Start_1)))
   (Start_9 Int (y (- Start) (+ Start_2 Start) (abs Start_7)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (< Start_3 Start_4) (>= Start_1 Start_5) (> Start_3 Start_4)))
   (Start_3 Int (x (* Start Start_1)))
   (StartBool_3 Bool (false (not StartBool) (or StartBool_2 StartBool) (< Start_5 Start_2) (>= Start_4 Start_10)))
   (Start_10 Int (2 (- Start) (- Start_5 Start) (+ Start_2 Start) (* Start_1 Start_3)))
   (Start_2 Int (x (- Start_2) (- Start_1 Start) (* Start Start_3) (abs Start_2) (ite StartBool_1 Start_4 Start_1)))
   (Start_4 Int (2 1 x (mod Start_4 Start_4)))
   (Start_5 Int (2 (* Start_5 Start) (abs Start_4)))
   (Start_1 Int (x (- Start_5 Start_3) (+ Start_1 Start_4) (div Start_3 Start) (mod Start_2 Start_1) (abs Start_4) (ite StartBool Start_2 Start_1)))
   (Start_6 Int (3 x 5 (- Start_7) (* Start_5 Start) (div Start_2 Start_6) (mod Start_7 Start_2) (ite StartBool_1 Start Start_4)))
   (Start_7 Int (2 4 5 (- Start_8) (+ Start_2 Start) (* Start_9 Start) (ite StartBool_2 Start_1 Start_8)))
   (StartBool_2 Bool (false (not StartBool) (or StartBool StartBool_3) (= Start_1 Start_2) (>= Start Start_6) (> Start_4 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- x 1) (mod x 5))))

(check-synth)
