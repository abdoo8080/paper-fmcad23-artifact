(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_13 Int) (Start_1 Int) (Start_10 Int) (StartBool_6 Bool) (Start_2 Int) (Start_11 Int) (StartBool_1 Bool) (Start_6 Int) (StartBool_3 Bool) (Start_7 Int) (Start_3 Int) (Start_8 Int) (StartBool_2 Bool) (Start_5 Int) (Start_4 Int) (Start_9 Int) (Start_12 Int))
  ((Start Int (4 (- Start_1 Start_2) (abs Start) (ite StartBool Start_2 Start)))
   (StartBool Bool (true (and StartBool_4 StartBool) (< Start_12 Start_4) (<= Start Start_8) (= Start_5 Start_13) (> Start_9 Start_5)))
   (StartBool_5 Bool (false (or StartBool_6 StartBool_6) (>= Start Start_5)))
   (StartBool_4 Bool (true (or StartBool_1 StartBool_5) (< Start_6 Start_1) (<= Start_2 Start_12) (= Start_5 Start_7) (> Start_5 Start_4)))
   (Start_13 Int (5 (- Start) (- Start_1 Start_7) (div Start_1 Start_2) (mod Start_4 Start_8) (ite StartBool_3 Start_7 Start_1)))
   (Start_1 Int (5 (- Start_5) (+ Start_1 Start_12) (* Start_9 Start_2) (abs Start_1) (ite StartBool_1 Start_6 Start_1)))
   (Start_10 Int (0 (- Start_9) (+ Start_3 Start_8)))
   (StartBool_6 Bool (false (or StartBool_5 StartBool) (< Start_6 Start_2) (= Start_8 Start_11)))
   (Start_2 Int (y (- Start_2 Start_1) (div Start_3 Start_3) (mod Start_3 Start_2) (ite StartBool Start Start_2)))
   (Start_11 Int (2 0 (- Start_4) (+ Start_5 Start_7) (mod Start_2 Start_9) (abs Start_12)))
   (StartBool_1 Bool (true false (not StartBool_1) (or StartBool_2 StartBool_3) (< Start_4 Start_5) (= Start_5 Start_3)))
   (Start_6 Int (3 x (- Start_6 Start_3) (+ Start_2 Start_1) (* Start_7 Start) (div Start_3 Start_6) (ite StartBool_1 Start_7 Start_4)))
   (StartBool_3 Bool (true false (not StartBool_3) (or StartBool_1 StartBool_2) (< Start_7 Start) (<= Start_3 Start) (>= Start_4 Start)))
   (Start_7 Int (3 0 x 2 1 4 5 y (- Start_3 Start_7) (+ Start_7 Start_8)))
   (Start_3 Int (5 3 1 4 (- Start_2) (- Start_3 Start_3) (* Start_2 Start_4) (div Start_5 Start_6) (abs Start_4) (ite StartBool Start_2 Start_4)))
   (Start_8 Int (x 4 (- Start_2) (div Start_1 Start_5) (ite StartBool Start_2 Start_4)))
   (StartBool_2 Bool (true (and StartBool StartBool_3) (< Start_2 Start_2) (= Start_1 Start_7) (> Start_1 Start)))
   (Start_5 Int (5 y 0 (- Start_7) (+ Start_8 Start_1) (div Start_7 Start_9) (mod Start_2 Start_4)))
   (Start_4 Int (0 3 5 2 (div Start_4 Start_5) (mod Start_4 Start_7) (abs Start)))
   (Start_9 Int (4 3 x (- Start_3) (- Start_7 Start_8) (+ Start_8 Start_10) (div Start_11 Start_3) (mod Start_8 Start_1) (ite StartBool_2 Start_2 Start_5)))
   (Start_12 Int (1 4 x (- Start_7 Start_7) (* Start_4 Start_12) (div Start_3 Start_2) (mod Start Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs (mod y 0)))))

(check-synth)
