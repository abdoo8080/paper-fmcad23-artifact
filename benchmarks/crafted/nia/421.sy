(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_3 Int) (Start_5 Int) (Start_4 Int) (Start_11 Int) (Start_2 Int) (StartBool_1 Bool) (Start_8 Int) (Start_7 Int) (Start_10 Int) (Start_14 Int) (Start_12 Int) (Start_13 Int) (Start_9 Int) (Start_6 Int))
  ((Start Int (3 y 2 x 1 (- Start Start_1) (* Start Start) (abs Start_1) (ite StartBool_1 Start_2 Start_3)))
   (StartBool Bool (false true (not StartBool) (or StartBool_1 StartBool_2) (<= Start_11 Start_12) (= Start_5 Start_14) (>= Start_2 Start_3)))
   (Start_1 Int (2 (- Start_5) (abs Start_11) (ite StartBool_1 Start_5 Start_8)))
   (StartBool_3 Bool (false (= Start_6 Start_11) (> Start_3 Start_6)))
   (StartBool_2 Bool (false (or StartBool_1 StartBool_2) (>= Start Start_7)))
   (Start_3 Int (2 1 (- Start_3 Start_3) (+ Start_2 Start_4) (* Start_1 Start_4) (div Start Start_2) (ite StartBool_1 Start_3 Start_3)))
   (Start_5 Int (1 (div Start_3 Start_4) (mod Start_5 Start_5) (abs Start)))
   (Start_4 Int (2 y 5 3 4 (- Start_2) (- Start_2 Start_3) (* Start Start_4) (abs Start_1) (ite StartBool Start_5 Start_1)))
   (Start_11 Int (y (- Start_10) (- Start_6 Start_6) (* Start_8 Start_1) (mod Start_6 Start_7) (abs Start_8) (ite StartBool_2 Start_1 Start_1)))
   (Start_2 Int (y 0 (- Start_4 Start_5) (* Start_3 Start_6) (mod Start_1 Start) (abs Start_3) (ite StartBool_2 Start_2 Start_6)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_2 StartBool_3) (or StartBool_3 StartBool_3) (< Start_11 Start_8) (<= Start_1 Start_13) (>= Start_9 Start) (> Start_8 Start_4)))
   (Start_8 Int (1 5 2 x 3 (+ Start_9 Start_8) (div Start_3 Start_10) (abs Start_11)))
   (Start_7 Int (2 0 (- Start_4) (+ Start_1 Start_4) (* Start_7 Start_3) (div Start_8 Start_5) (mod Start_7 Start_6) (abs Start_9) (ite StartBool_2 Start Start_10)))
   (Start_10 Int (1 y (- Start_3) (* Start_4 Start_2) (abs Start_9) (ite StartBool_2 Start_10 Start_5)))
   (Start_14 Int (2 3 0 1 y (- Start_14 Start_14) (+ Start_14 Start_11) (div Start_11 Start_13) (mod Start_7 Start_4) (ite StartBool_3 Start Start_14)))
   (Start_12 Int (5 1 3 4 y (abs Start_7) (ite StartBool_3 Start Start_3)))
   (Start_13 Int (y (- Start_5) (- Start_8 Start_9) (mod Start_2 Start_13) (abs Start_2) (ite StartBool_2 Start_6 Start_4)))
   (Start_9 Int (0 (+ Start_5 Start_2) (abs Start_10) (ite StartBool Start_4 Start_2)))
   (Start_6 Int (4 3 (- Start_12) (- Start_10 Start_7) (* Start_11 Start_12) (mod Start_7 Start_5) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (mod x x) x)))

(check-synth)
