(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_14 Int) (Start_18 Int) (Start_17 Int) (Start_15 Int) (Start_3 Int) (Start_16 Int) (Start_2 Int) (StartBool_1 Bool) (Start_6 Int) (Start_7 Int) (StartBool_2 Bool) (Start_9 Int) (Start_8 Int) (Start_10 Int) (Start_5 Int) (Start_12 Int) (Start_11 Int) (Start_1 Int) (StartBool_3 Bool) (Start_13 Int))
  ((Start Int (y 2 0 (- Start_1) (- Start Start) (+ Start_1 Start_1) (div Start Start) (ite StartBool Start_2 Start)))
   (StartBool Bool (true false (and StartBool_1 StartBool) (<= Start_15 Start_11) (= Start_6 Start_16) (>= Start_8 Start_3) (> Start_13 Start_16)))
   (Start_4 Int (x 2 3 (- Start_16 Start_10) (* Start_14 Start_4) (mod Start_13 Start_5)))
   (Start_14 Int (3 (- Start_16) (* Start_6 Start_6) (abs Start_11)))
   (Start_18 Int (5 (- Start_11 Start_9) (* Start_12 Start_18) (mod Start_17 Start_9) (ite StartBool_3 Start_1 Start)))
   (Start_17 Int (4 (- Start_13) (- Start_5 Start_1) (+ Start_18 Start_7)))
   (Start_15 Int (2 (- Start_7) (+ Start_16 Start_3) (* Start_14 Start_17) (mod Start_3 Start_3) (ite StartBool_3 Start_9 Start_14)))
   (Start_3 Int (2 (- Start_2 Start_4) (+ Start_2 Start_6) (* Start_1 Start_1) (div Start_4 Start_18) (mod Start_17 Start_2) (abs Start_14) (ite StartBool_2 Start_7 Start)))
   (Start_16 Int (2 0 4 5 3 1 y (- Start_2) (* Start_6 Start_1) (mod Start_7 Start_1) (abs Start_6) (ite StartBool_3 Start Start_14)))
   (Start_2 Int (x 0 (- Start_3) (- Start_1 Start_2) (+ Start_2 Start) (* Start_4 Start_1) (div Start_5 Start_3) (ite StartBool_1 Start_6 Start_1)))
   (StartBool_1 Bool (true (or StartBool_2 StartBool) (< Start_1 Start_6) (<= Start_6 Start_8) (= Start_1 Start_1) (> Start Start_7)))
   (Start_6 Int (y (- Start Start_7) (+ Start_1 Start_2) (div Start_4 Start_7) (mod Start_6 Start_1) (abs Start_3)))
   (Start_7 Int (0 (- Start_8) (* Start_7 Start_4) (abs Start_6)))
   (StartBool_2 Bool (false true (not StartBool) (or StartBool StartBool_2) (< Start_9 Start_4) (<= Start_10 Start_9)))
   (Start_9 Int (1 5 x y 4 0 (- Start_4 Start_6) (+ Start_1 Start_1) (* Start_5 Start_11) (div Start_11 Start_1) (mod Start_11 Start) (abs Start_11) (ite StartBool_2 Start_3 Start_5)))
   (Start_8 Int (y (* Start_8 Start_7) (div Start_8 Start_5)))
   (Start_10 Int (2 0 5 3 4 1 (- Start_10) (* Start_3 Start_1) (div Start_2 Start_2) (mod Start_7 Start) (ite StartBool_2 Start_4 Start_6)))
   (Start_5 Int (y (- Start_10 Start_5) (* Start_3 Start_12) (abs Start_2) (ite StartBool_3 Start_4 Start_5)))
   (Start_12 Int (x 0 (- Start_7 Start_6) (* Start_13 Start_18) (mod Start_5 Start_7)))
   (Start_11 Int (2 x y 1 (* Start_6 Start_10) (mod Start_7 Start_1) (ite StartBool Start_11 Start_8)))
   (Start_1 Int (4 x (* Start_6 Start_3)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool StartBool_2) (or StartBool_3 StartBool_1) (< Start Start_13) (<= Start_12 Start_4) (= Start_10 Start_12) (> Start_4 Start_12)))
   (Start_13 Int (5 (- Start_14) (+ Start_4 Start_5) (* Start_8 Start) (mod Start_10 Start_15) (ite StartBool_2 Start_10 Start_15)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod 5 0))))

(check-synth)
