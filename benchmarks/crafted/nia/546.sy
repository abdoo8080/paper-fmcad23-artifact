(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_14 Int) (StartBool_4 Bool) (Start_16 Int) (Start_15 Int) (Start_13 Int) (StartBool_1 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_6 Int) (Start_11 Int) (StartBool_3 Bool) (Start_10 Int) (Start_9 Int) (Start_8 Int) (Start_5 Int) (Start_4 Int) (Start_7 Int) (Start_12 Int) (Start_1 Int) (Start_2 Int))
  ((Start Int (3 (- Start Start) (* Start_1 Start_1) (abs Start_1) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (false true (not StartBool) (and StartBool_5 StartBool_2) (or StartBool_3 StartBool_3) (< Start_5 Start_6) (>= Start_8 Start_14)))
   (StartBool_5 Bool (false true (< Start_3 Start_3)))
   (Start_14 Int (2 (- Start_3 Start_15)))
   (StartBool_4 Bool (true false (or StartBool_2 StartBool_4) (< Start_7 Start) (> Start_9 Start_4)))
   (Start_16 Int (3 (- Start_5) (- Start_9 Start_12) (mod Start_3 Start_14) (abs Start_10) (ite StartBool_1 Start_4 Start_8)))
   (Start_15 Int (4 (- Start_8) (- Start_11 Start_13) (div Start_10 Start) (abs Start_2)))
   (Start_13 Int (1 (- Start_6) (+ Start_2 Start_10) (* Start_14 Start_10) (div Start_11 Start_8) (ite StartBool_2 Start_7 Start_3)))
   (StartBool_1 Bool (true false (not StartBool) (or StartBool_1 StartBool_1) (<= Start_1 Start_2) (= Start_2 Start_2) (> Start_3 Start)))
   (Start_3 Int (2 x (- Start_4) (- Start_2 Start_4) (+ Start Start_5) (div Start_4 Start_4) (abs Start_1) (ite StartBool_1 Start_6 Start_6)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_3 StartBool_4) (< Start_13 Start_9) (<= Start Start_6) (= Start_3 Start_1) (> Start_3 Start_12)))
   (Start_6 Int (2 3 4 (+ Start_7 Start_2) (abs Start_8)))
   (Start_11 Int (1 (* Start_10 Start_6) (mod Start_10 Start_2) (abs Start_10)))
   (StartBool_3 Bool (false true (and StartBool StartBool_3) (< Start_15 Start_8) (<= Start Start) (= Start_13 Start_9) (>= Start_5 Start_8) (> Start_8 Start_9)))
   (Start_10 Int (5 0 x 2 (- Start_7) (- Start_2 Start_3) (* Start_5 Start_7) (abs Start_10)))
   (Start_9 Int (5 (- Start_8 Start) (* Start_2 Start_10) (div Start Start_8) (mod Start_11 Start_4) (ite StartBool Start_7 Start_4)))
   (Start_8 Int (x 3 2 (- Start_2) (- Start_3 Start_9) (+ Start_9 Start_5) (* Start_9 Start_10)))
   (Start_5 Int (0 (* Start_7 Start_11) (mod Start_2 Start_9) (ite StartBool Start_7 Start_3)))
   (Start_4 Int (2 3 (+ Start_8 Start_12) (* Start_8 Start_10) (mod Start_3 Start_7) (abs Start_1)))
   (Start_7 Int (5 (* Start_7 Start_9) (abs Start_1)))
   (Start_12 Int (x 4 3 5 (- Start) (* Start_6 Start_7) (mod Start_3 Start_1) (ite StartBool_1 Start_5 Start_5)))
   (Start_1 Int (4 (+ Start_11 Start_4) (abs Start_16)))
   (Start_2 Int (1 x 5 (- Start_12) (+ Start_13 Start_12) (div Start_8 Start_7) (abs Start_3) (ite StartBool_1 Start_11 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- 3 x) 4)))

(check-synth)
