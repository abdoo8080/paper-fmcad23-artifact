(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (StartBool_2 Bool) (Start_17 Int) (StartBool_3 Bool) (Start_16 Int) (Start_15 Int) (Start_5 Int) (Start_18 Int) (StartBool_4 Bool) (Start_1 Int) (Start_3 Int) (Start_7 Int) (Start_2 Int) (Start_4 Int) (Start_9 Int) (Start_8 Int) (Start_10 Int) (Start_13 Int) (Start_11 Int) (StartBool_5 Bool) (Start_14 Int) (Start_12 Int) (Start_6 Int))
  ((Start Int (3 (* Start Start)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_2 StartBool_3) (< Start Start) (>= Start_1 Start_1) (> Start Start)))
   (StartBool_1 Bool (false (not StartBool_4) (or StartBool_1 StartBool_5) (< Start_2 Start_9) (<= Start_1 Start_11) (>= Start Start_12) (> Start_16 Start_7)))
   (StartBool_2 Bool (false (or StartBool_4 StartBool_1) (= Start_8 Start_16) (>= Start_16 Start_18)))
   (Start_17 Int (0 (- Start_6) (div Start_18 Start_4)))
   (StartBool_3 Bool (true (and StartBool_2 StartBool) (or StartBool StartBool_1) (= Start_17 Start_13)))
   (Start_16 Int (2 (- Start_2) (+ Start_1 Start) (* Start_6 Start_3) (mod Start_4 Start_13) (abs Start_9) (ite StartBool_3 Start_11 Start)))
   (Start_15 Int (3 x (- Start_1) (- Start_13 Start_11) (div Start_6 Start_7) (mod Start_5 Start_11) (abs Start_1)))
   (Start_5 Int (4 0 (- Start_5 Start_7) (* Start_14 Start) (div Start_13 Start_11) (mod Start_15 Start_7) (ite StartBool_1 Start_2 Start_3)))
   (Start_18 Int (1 4 (- Start_1) (abs Start_5)))
   (StartBool_4 Bool (false (not StartBool) (or StartBool StartBool_4) (< Start_5 Start_15) (>= Start_9 Start_2) (> Start_12 Start_10)))
   (Start_1 Int (y 1 (+ Start Start) (mod Start_1 Start) (abs Start_2) (ite StartBool_4 Start_2 Start_3)))
   (Start_3 Int (4 x 2 y (- Start_1) (* Start_3 Start_3) (ite StartBool_1 Start_4 Start)))
   (Start_7 Int (3 (- Start_5 Start_3) (+ Start_5 Start_3) (* Start_2 Start_7) (div Start Start_2) (abs Start_8) (ite StartBool_4 Start_2 Start)))
   (Start_2 Int (3 1 0 (* Start_3 Start_1) (div Start_6 Start_8)))
   (Start_4 Int (x y 1 2 5 (- Start Start) (+ Start_4 Start_5) (* Start_6 Start_7) (mod Start_2 Start_6) (abs Start)))
   (Start_9 Int (4 (- Start_1) (- Start_8 Start_3) (+ Start_9 Start_9) (* Start Start_7) (div Start_8 Start_2) (mod Start_2 Start) (abs Start_10)))
   (Start_8 Int (0 (+ Start_5 Start_1) (* Start_9 Start_7) (abs Start_7)))
   (Start_10 Int (1 4 5 (- Start_9) (+ Start_4 Start_11) (div Start_3 Start_12) (mod Start_4 Start_2) (abs Start_10)))
   (Start_13 Int (1 (+ Start Start_5) (* Start_4 Start_1) (div Start_3 Start_8) (mod Start_9 Start_6) (abs Start_12)))
   (Start_11 Int (4 (- Start_7 Start_12) (+ Start_4 Start_10) (* Start_7 Start_1) (div Start_8 Start_1) (abs Start_2) (ite StartBool_3 Start_13 Start_1)))
   (StartBool_5 Bool (true false (and StartBool_2 StartBool_4) (<= Start_17 Start_18) (>= Start_10 Start_14) (> Start_3 Start_7)))
   (Start_14 Int (5 (- Start_4) (+ Start_16 Start) (* Start_6 Start_6) (mod Start_3 Start_6) (abs Start_11)))
   (Start_12 Int (1 (- Start_13) (ite StartBool_1 Start_8 Start_10)))
   (Start_6 Int (2 3 0 (- Start_6) (- Start_5 Start_2) (div Start Start_9) (mod Start_3 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (div (- (+ x 1)) 3) y)))

(check-synth)
