(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (Start_1 Int) (Start_2 Int))
  ((Start Int (2 y 3 (+ Start_1 Start_1) (abs Start)))
   (StartBool Bool (true (not StartBool) (< Start_2 Start_1) (>= Start_3 Start_1)))
   (Start_3 Int (2 1 (- Start) (- Start_3 Start_1) (mod Start_2 Start_2) (abs Start)))
   (Start_1 Int (x (- Start_2 Start_1) (ite StartBool Start_3 Start)))
   (Start_2 Int (x 4 5 y (- Start_3 Start) (* Start_3 Start_2) (div Start_3 Start_3) (abs Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- (mod y 2) 4))))

(check-synth)
