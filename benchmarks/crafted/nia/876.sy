(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_2 Int) (Start_3 Int) (StartBool_1 Bool) (Start_4 Int) (Start_1 Int) (Start_5 Int))
  ((Start Int (x (- Start) (- Start_1 Start) (abs Start) (ite StartBool Start_1 Start_1)))
   (StartBool Bool (false (or StartBool_1 StartBool_1) (< Start_2 Start_6) (> Start_2 Start_4)))
   (Start_6 Int (2 5 0 (* Start_6 Start_3)))
   (Start_2 Int (y 5 (- Start_3) (* Start Start_2) (mod Start_5 Start_2) (abs Start_4)))
   (Start_3 Int (0 3 2 5 y (- Start_5) (- Start Start_3) (+ Start_3 Start_2) (* Start Start_3) (div Start Start_4) (abs Start_2) (ite StartBool Start Start_4)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (<= Start_6 Start_3) (>= Start_3 Start_2)))
   (Start_4 Int (1 3 (- Start_4 Start_2) (* Start Start_3) (div Start_3 Start_2) (abs Start_1)))
   (Start_1 Int (4 (+ Start Start_2) (* Start Start_2) (div Start_2 Start_2) (mod Start_3 Start_4) (ite StartBool Start Start)))
   (Start_5 Int (2 0 4 (- Start_5 Start_3) (+ Start Start_1) (* Start_4 Start_1) (mod Start_3 Start_3) (abs Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (+ y (- 3 x)))))

(check-synth)
