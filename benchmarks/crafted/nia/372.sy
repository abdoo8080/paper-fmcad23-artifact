(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_5 Int) (Start_8 Int) (Start_7 Int) (StartBool_1 Bool) (Start_10 Int) (StartBool_3 Bool) (Start_2 Int) (Start_6 Int) (Start_9 Int) (StartBool_4 Bool) (Start_1 Int) (Start_4 Int) (StartBool_2 Bool) (Start_3 Int))
  ((Start Int (5 3 y x (- Start_1) (- Start_2 Start_2) (+ Start Start_2) (div Start Start_3) (ite StartBool Start_4 Start_5)))
   (StartBool Bool (false true (or StartBool_4 StartBool_1) (< Start_3 Start_8) (>= Start_3 Start_5)))
   (Start_5 Int (0 1 (- Start_6) (- Start_6 Start_3) (+ Start_7 Start_5) (* Start_3 Start_6) (div Start_6 Start_1) (abs Start_6)))
   (Start_8 Int (1 2 5 4 x (abs Start_7)))
   (Start_7 Int (3 (- Start Start_6) (div Start_7 Start_8)))
   (StartBool_1 Bool (false (or StartBool_2 StartBool_3) (< Start_6 Start) (= Start_6 Start_8) (>= Start_2 Start_9)))
   (Start_10 Int (5 x y (div Start_3 Start_3) (ite StartBool_1 Start_10 Start_1)))
   (StartBool_3 Bool (true false (not StartBool_1) (= Start_7 Start_4) (>= Start_6 Start_2)))
   (Start_2 Int (1 (- Start_10) (+ Start_2 Start_2) (* Start_5 Start_1) (mod Start Start_9) (abs Start_3)))
   (Start_6 Int (3 x (- Start_3 Start_1) (mod Start_9 Start_9) (abs Start_5)))
   (Start_9 Int (5 (- Start_10) (* Start_10 Start_10) (mod Start_1 Start_4) (abs Start_4)))
   (StartBool_4 Bool (false (not StartBool_4) (< Start_10 Start_6) (<= Start_6 Start_2)))
   (Start_1 Int (0 (- Start_6) (* Start_9 Start_1) (div Start_2 Start_8) (mod Start_3 Start_2) (abs Start_7) (ite StartBool_3 Start Start_6)))
   (Start_4 Int (1 x y 2 (+ Start_8 Start_3) (mod Start_6 Start_2) (abs Start) (ite StartBool Start_4 Start_2)))
   (StartBool_2 Bool (false (not StartBool_1) (or StartBool_4 StartBool_1) (< Start_3 Start_3) (<= Start_10 Start_3) (> Start_10 Start_7)))
   (Start_3 Int (3 x (- Start_1 Start_8) (+ Start_8 Start_1) (* Start_8 Start_3) (div Start_2 Start_7) (mod Start_1 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div 1 0) x)))

(check-synth)
