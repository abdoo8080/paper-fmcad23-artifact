(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_17 Int) (Start_2 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_5 Bool) (Start_14 Int) (StartBool_4 Bool) (Start_16 Int) (Start_10 Int) (Start_4 Int) (Start_7 Int) (Start_1 Int) (Start_6 Int) (Start_15 Int) (Start_5 Int) (Start_12 Int) (Start_9 Int) (StartBool_3 Bool) (Start_11 Int) (Start_8 Int) (StartBool_1 Bool) (Start_13 Int))
  ((Start Int (x (- Start_1) (- Start Start_2) (+ Start_1 Start) (mod Start Start_1) (abs Start_3) (ite StartBool Start_4 Start_3)))
   (StartBool Bool (false (and StartBool_5 StartBool_3) (or StartBool_6 StartBool_3) (< Start Start_16) (= Start_16 Start_10) (>= Start_9 Start_17)))
   (StartBool_6 Bool (true (< Start_9 Start_3) (<= Start_3 Start_5) (>= Start_4 Start_8) (> Start_15 Start_11)))
   (Start_17 Int (y 5 x (- Start_1) (+ Start_16 Start_8) (div Start_2 Start_1) (mod Start_14 Start_1) (abs Start_10)))
   (Start_2 Int (5 y (- Start_13 Start_5) (div Start_2 Start_1)))
   (Start_3 Int (2 (- Start_5 Start_13) (* Start_2 Start_14) (mod Start_6 Start_5) (abs Start_8) (ite StartBool Start_2 Start_3)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_3) (< Start_2 Start_12)))
   (StartBool_5 Bool (false (not StartBool_5) (< Start_14 Start_4) (<= Start_9 Start_12) (= Start_2 Start_11)))
   (Start_14 Int (y (- Start_1) (+ Start_5 Start_13) (* Start_15 Start_1) (div Start_11 Start_13) (mod Start Start_4) (ite StartBool_3 Start_3 Start_16)))
   (StartBool_4 Bool (false true (> Start_4 Start_3)))
   (Start_16 Int (x (- Start_9 Start_14) (+ Start_9 Start_7) (div Start_12 Start_16) (mod Start_5 Start_3) (abs Start_7)))
   (Start_10 Int (2 y 5 x 3 1 4 (* Start_10 Start_4) (mod Start_4 Start_11) (ite StartBool_4 Start_5 Start_3)))
   (Start_4 Int (0 (- Start) (- Start_2 Start_2) (+ Start Start_4) (div Start_2 Start_5) (mod Start_5 Start_5) (abs Start_5)))
   (Start_7 Int (4 5 3 (- Start_2 Start_2) (+ Start Start) (div Start_8 Start_9) (abs Start_3) (ite StartBool_4 Start_9 Start_5)))
   (Start_1 Int (4 5 1 (- Start_13) (+ Start_2 Start)))
   (Start_6 Int (x 2 (- Start_1 Start_5) (div Start_5 Start_4) (mod Start_3 Start_1) (abs Start_2)))
   (Start_15 Int (4 (- Start_6 Start_4) (ite StartBool_4 Start_3 Start_5)))
   (Start_5 Int (3 4 (+ Start Start_5) (* Start_2 Start_2) (abs Start) (ite StartBool_1 Start_6 Start_1)))
   (Start_12 Int (5 4 (+ Start_9 Start_8) (mod Start_2 Start_11)))
   (Start_9 Int (y (- Start_9 Start_1) (* Start_9 Start_1) (div Start_10 Start_1)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool_3) (< Start_6 Start_2) (<= Start Start_9) (= Start_4 Start_5) (> Start_5 Start)))
   (Start_11 Int (0 y (* Start_8 Start_2) (mod Start_12 Start_1) (ite StartBool Start_6 Start_9)))
   (Start_8 Int (5 2 (- Start_3) (- Start_13 Start_6) (+ Start_1 Start_7) (* Start_6 Start_4) (div Start Start_8) (abs Start_3)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool StartBool_3) (or StartBool_2 StartBool_2) (< Start_7 Start_6) (> Start_4 Start_7)))
   (Start_13 Int (4 x (* Start_13 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- 1 y) x)))

(check-synth)
