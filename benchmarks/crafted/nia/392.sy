(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_25 Int) (Start_23 Int) (Start_7 Int) (Start_6 Int) (Start_12 Int) (Start_10 Int) (StartBool_4 Bool) (Start_5 Int) (Start_15 Int) (Start_17 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_3 Int) (Start_20 Int) (Start_26 Int) (Start_4 Int) (Start_11 Int) (StartBool_3 Bool) (Start_21 Int) (Start_8 Int) (Start_13 Int) (Start_2 Int) (Start_18 Int) (Start_24 Int) (Start_16 Int) (Start_9 Int) (Start_19 Int) (StartBool_5 Bool) (Start_1 Int) (Start_14 Int) (Start_22 Int))
  ((Start Int (0 3 (- Start_1) (* Start_2 Start_1) (mod Start Start_1) (abs Start_3) (ite StartBool_1 Start_2 Start_4)))
   (StartBool Bool (false (> Start_7 Start_26)))
   (Start_25 Int (x (+ Start_18 Start_5) (* Start_22 Start_6) (div Start_20 Start)))
   (Start_23 Int (y (- Start_18 Start_8) (* Start_23 Start_21) (div Start_5 Start_7) (ite StartBool_5 Start_15 Start_25)))
   (Start_7 Int (1 (- Start_4 Start_5) (abs Start_3)))
   (Start_6 Int (0 (- Start_6) (- Start_3 Start) (div Start_6 Start_1) (ite StartBool_1 Start_6 Start_7)))
   (Start_12 Int (5 (+ Start_6 Start) (* Start_9 Start_1) (ite StartBool_3 Start_6 Start_11)))
   (Start_10 Int (2 x 5 (- Start_5 Start_9) (* Start_9 Start_5) (ite StartBool_3 Start_10 Start_9)))
   (StartBool_4 Bool (true false (< Start_5 Start_10) (<= Start Start_3) (= Start_14 Start_13) (> Start_5 Start)))
   (Start_5 Int (1 (- Start Start_5) (div Start_1 Start_1) (mod Start_2 Start_6)))
   (Start_15 Int (1 y 0 (- Start_13 Start_13) (+ Start Start_1) (mod Start_7 Start_3) (abs Start_10)))
   (Start_17 Int (3 (- Start_10) (+ Start_1 Start_11) (* Start_7 Start_14) (mod Start_14 Start_12) (abs Start_14) (ite StartBool_4 Start_4 Start_18)))
   (StartBool_1 Bool (false true (< Start_4 Start_4) (= Start Start) (>= Start_2 Start_5)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_2) (or StartBool_3 StartBool) (> Start_7 Start_1)))
   (Start_3 Int (0 (- Start_5 Start_6) (+ Start_1 Start_8) (div Start_8 Start_2) (mod Start_9 Start_10) (abs Start_3) (ite StartBool_2 Start_10 Start_6)))
   (Start_20 Int (3 (- Start_15 Start_11) (* Start_7 Start_9) (mod Start_11 Start_5) (abs Start_3)))
   (Start_26 Int (4 (- Start_12 Start_26) (* Start_23 Start_21) (mod Start_16 Start_10) (abs Start_10) (ite StartBool_2 Start_10 Start_24)))
   (Start_4 Int (4 5 (- Start_3) (abs Start_1)))
   (Start_11 Int (5 2 0 (- Start_7 Start) (+ Start_13 Start_1) (mod Start_13 Start_12)))
   (StartBool_3 Bool (false true (not StartBool_3) (or StartBool_3 StartBool_2) (<= Start_3 Start_9) (> Start Start_10)))
   (Start_21 Int (1 2 (- Start_14 Start_15) (+ Start_2 Start_8) (* Start_17 Start_17) (div Start_1 Start_1) (abs Start_12) (ite StartBool_1 Start_22 Start)))
   (Start_8 Int (y (- Start_7) (- Start_4 Start_8) (* Start_4 Start_2) (ite StartBool_4 Start_8 Start_7)))
   (Start_13 Int (2 0 (* Start Start_4) (mod Start_10 Start_10) (abs Start_2) (ite StartBool_3 Start_2 Start)))
   (Start_2 Int (1 3 x 2 5 (- Start_16) (+ Start_9 Start_8) (mod Start_14 Start_10) (ite StartBool_4 Start Start_1)))
   (Start_18 Int (5 (+ Start_9 Start_14) (div Start_12 Start_19) (mod Start_20 Start_10) (abs Start_5)))
   (Start_24 Int (2 (- Start_21) (- Start_7 Start_12) (* Start_12 Start_23) (div Start_14 Start_12) (mod Start_18 Start_20)))
   (Start_16 Int (2 (- Start_1) (- Start Start_7) (+ Start_9 Start_13) (div Start_17 Start_13) (mod Start_16 Start_6)))
   (Start_9 Int (y x 3 0 5 (* Start_4 Start_9) (ite StartBool_2 Start_11 Start_12)))
   (Start_19 Int (3 (- Start_20 Start_6) (* Start_8 Start_9) (mod Start_10 Start) (abs Start_12) (ite StartBool_5 Start_2 Start_14)))
   (StartBool_5 Bool (false true (< Start_17 Start_6) (= Start_13 Start_2) (>= Start_14 Start_7)))
   (Start_1 Int (y (- Start_9) (- Start_20 Start_12) (mod Start Start_9) (abs Start_2) (ite StartBool_2 Start_9 Start_21)))
   (Start_14 Int (1 (- Start_10 Start_15) (* Start_4 Start_5) (mod Start Start_10) (ite StartBool_4 Start_10 Start_2)))
   (Start_22 Int (1 y x 4 (- Start_23 Start_1) (+ Start_11 Start_20) (mod Start_22 Start_24) (abs Start_13) (ite StartBool_1 Start_17 Start_21)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod 0 y) y)))

(check-synth)
