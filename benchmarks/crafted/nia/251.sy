(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_3 Bool) (Start_5 Int) (Start_8 Int) (Start_20 Int) (StartBool_2 Bool) (Start_18 Int) (Start_10 Int) (Start_3 Int) (Start_2 Int) (Start_19 Int) (Start_14 Int) (Start_7 Int) (Start_16 Int) (Start_17 Int) (Start_4 Int) (Start_15 Int) (Start_6 Int) (Start_9 Int) (StartBool_1 Bool) (Start_12 Int) (Start_11 Int) (Start_13 Int))
  ((Start Int (4 0 (mod Start_1 Start_2) (abs Start_1) (ite StartBool Start_3 Start)))
   (StartBool Bool (true false (and StartBool_1 StartBool) (or StartBool StartBool_3) (<= Start Start_20) (= Start_5 Start_8)))
   (Start_1 Int (2 (- Start_11) (+ Start_8 Start_17) (mod Start_17 Start_15)))
   (StartBool_3 Bool (false (or StartBool_1 StartBool_3) (< Start_20 Start_9) (<= Start_8 Start_8) (= Start_19 Start_2) (>= Start_12 Start_14)))
   (Start_5 Int (3 (+ Start_2 Start_18) (* Start_12 Start_17) (div Start_19 Start_9)))
   (Start_8 Int (5 (+ Start_4 Start_13) (* Start_1 Start_11) (div Start_16 Start_6) (abs Start_14)))
   (Start_20 Int (3 2 (- Start_19 Start) (+ Start_3 Start_11) (* Start_5 Start_15) (div Start_11 Start_20) (mod Start_9 Start_15) (ite StartBool_2 Start_5 Start_14)))
   (StartBool_2 Bool (false (or StartBool_1 StartBool_2) (<= Start_16 Start) (= Start_5 Start_3) (> Start_10 Start_13)))
   (Start_18 Int (3 5 (- Start_10) (+ Start_10 Start_4) (* Start_20 Start) (div Start_17 Start_18) (abs Start_1) (ite StartBool_3 Start_2 Start_16)))
   (Start_10 Int (0 3 2 (- Start_12 Start_16) (mod Start_2 Start_11) (ite StartBool_2 Start_17 Start_10)))
   (Start_3 Int (4 (- Start Start) (* Start_1 Start_1) (div Start Start_3) (mod Start_3 Start)))
   (Start_2 Int (1 (* Start_4 Start_3) (abs Start_1)))
   (Start_19 Int (0 (- Start_17) (- Start_8 Start) (+ Start_13 Start_4) (div Start_17 Start_4) (abs Start_4)))
   (Start_14 Int (2 (- Start_7 Start_15) (div Start_5 Start_7) (mod Start_6 Start_7) (abs Start_1)))
   (Start_7 Int (4 (- Start_9 Start_1) (* Start_7 Start_8) (div Start_10 Start_1) (mod Start Start) (ite StartBool_1 Start_8 Start_11)))
   (Start_16 Int (y 1 (- Start_10 Start_1) (+ Start_4 Start_12) (div Start_5 Start_10) (mod Start_15 Start_16) (ite StartBool_1 Start_10 Start_11)))
   (Start_17 Int (4 1 (- Start Start_2) (* Start Start_9) (abs Start_16)))
   (Start_4 Int (0 (* Start_5 Start_6) (abs Start_5)))
   (Start_15 Int (4 y 1 2 (+ Start_12 Start_7) (* Start_13 Start_7)))
   (Start_6 Int (y 4 2 1 (- Start_7) (- Start_7 Start_3) (+ Start_8 Start_9) (* Start_1 Start_8)))
   (Start_9 Int (y 5 (- Start_5) (mod Start_6 Start_1) (ite StartBool_1 Start_4 Start_6)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_2) (< Start_10 Start_3) (= Start_11 Start_5)))
   (Start_12 Int (y (- Start) (- Start_6 Start_11) (+ Start_1 Start_6) (* Start_11 Start_11) (div Start_11 Start_4) (mod Start_13 Start_11) (abs Start_14) (ite StartBool Start_11 Start_14)))
   (Start_11 Int (y (- Start Start_12) (+ Start Start_7) (abs Start_7) (ite StartBool_1 Start_1 Start_6)))
   (Start_13 Int (y (- Start_9) (* Start_11 Start_16) (mod Start_6 Start_16) (ite StartBool_1 Start Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* y (div (abs (mod 0 y)) x))))

(check-synth)
