(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_16 Int) (Start_5 Int) (StartBool_5 Bool) (Start_13 Int) (Start_14 Int) (Start_3 Int) (Start_15 Int) (StartBool_4 Bool) (Start_8 Int) (StartBool_1 Bool) (Start_4 Int) (Start_9 Int) (Start_7 Int) (Start_12 Int) (Start_10 Int) (StartBool_2 Bool) (Start_11 Int) (StartBool_7 Bool) (StartBool_6 Bool) (StartBool_3 Bool) (Start_6 Int))
  ((Start Int (1 3 (- Start) (+ Start_1 Start_2) (* Start_2 Start_1) (mod Start_3 Start)))
   (StartBool Bool (true (< Start_9 Start_12) (= Start_2 Start_14) (> Start_5 Start_7)))
   (Start_1 Int (5 2 4 0 (- Start_9 Start_1) (* Start_16 Start_4) (abs Start_7)))
   (Start_2 Int (y 1 (- Start_4) (- Start_1 Start_14) (+ Start_15 Start_15) (mod Start_5 Start_16) (ite StartBool_7 Start_16 Start_16)))
   (Start_16 Int (0 (+ Start_5 Start_6) (div Start_3 Start_6) (mod Start_2 Start_15)))
   (Start_5 Int (0 (- Start_13 Start_7) (* Start_4 Start_2) (abs Start_1) (ite StartBool_4 Start_14 Start_13)))
   (StartBool_5 Bool (false true (not StartBool_3) (or StartBool_2 StartBool_3) (> Start_3 Start_5)))
   (Start_13 Int (0 1 (- Start_8) (+ Start_4 Start_10) (* Start_5 Start_2) (div Start_7 Start_4) (mod Start_10 Start_1) (abs Start_11) (ite StartBool_3 Start_6 Start_6)))
   (Start_14 Int (y (+ Start_5 Start_2) (mod Start_2 Start_1) (ite StartBool_5 Start_14 Start_4)))
   (Start_3 Int (x y 4 (+ Start_2 Start_2) (mod Start_2 Start_4) (abs Start)))
   (Start_15 Int (4 2 (- Start_6) (- Start Start_7) (+ Start_11 Start_10) (* Start_10 Start_7) (div Start_13 Start_2) (mod Start_2 Start_1) (ite StartBool_7 Start_11 Start_16)))
   (StartBool_4 Bool (false (not StartBool) (and StartBool_6 StartBool_5) (or StartBool_2 StartBool) (= Start_11 Start_4)))
   (Start_8 Int (1 y 0 (- Start_4 Start) (+ Start_2 Start) (* Start_8 Start_3) (mod Start_3 Start_3)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_1) (or StartBool_1 StartBool_1) (< Start_9 Start_2) (>= Start_3 Start_4)))
   (Start_4 Int (2 x 1 (- Start_1) (+ Start_4 Start_5) (* Start Start_6) (div Start_7 Start_6) (mod Start_6 Start_4) (ite StartBool_1 Start_8 Start_6)))
   (Start_9 Int (y (- Start_8 Start_3) (+ Start_9 Start_9) (div Start_10 Start_9) (mod Start_10 Start_7)))
   (Start_7 Int (0 (- Start_3) (+ Start_2 Start_10) (div Start_1 Start_5) (abs Start_11)))
   (Start_12 Int (4 (- Start_4) (* Start_10 Start_3) (div Start_3 Start_1) (ite StartBool_3 Start_8 Start_1)))
   (Start_10 Int (y 0 (+ Start Start_2) (div Start_7 Start_6) (ite StartBool_2 Start Start_10)))
   (StartBool_2 Bool (false true (or StartBool_2 StartBool_3) (<= Start_11 Start_7) (= Start_10 Start_9) (>= Start_1 Start_1)))
   (Start_11 Int (x 3 4 5 (- Start_12) (abs Start_3)))
   (StartBool_7 Bool (false true (not StartBool_6) (and StartBool_7 StartBool_7) (= Start_11 Start_11) (>= Start_10 Start_2)))
   (StartBool_6 Bool (false true (not StartBool_1) (and StartBool StartBool_6) (or StartBool_4 StartBool_5) (<= Start_6 Start_10) (= Start_15 Start_8) (> Start_6 Start_5)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_1) (<= Start_11 Start_8) (>= Start Start_10)))
   (Start_6 Int (0 (+ Start_11 Start_13) (abs Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod 2 0) 2)))

(check-synth)
