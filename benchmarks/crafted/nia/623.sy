(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_7 Bool) (StartBool_6 Bool) (StartBool_2 Bool) (Start_15 Int) (Start_2 Int) (Start_16 Int) (Start_5 Int) (Start_11 Int) (Start_14 Int) (StartBool_4 Bool) (Start_13 Int) (StartBool_1 Bool) (Start_4 Int) (Start_17 Int) (Start_7 Int) (Start_3 Int) (StartBool_3 Bool) (Start_6 Int) (Start_10 Int) (Start_9 Int) (Start_8 Int) (StartBool_5 Bool) (Start_12 Int))
  ((Start Int (3 4 1 y (- Start) (- Start_1 Start) (+ Start_2 Start) (ite StartBool_1 Start Start_1)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (or StartBool_3 StartBool_3) (< Start_15 Start_13)))
   (Start_1 Int (x (* Start Start_10) (div Start_3 Start_9) (mod Start_16 Start_4) (abs Start_6)))
   (StartBool_7 Bool (false (or StartBool_4 StartBool) (= Start_7 Start_6)))
   (StartBool_6 Bool (false true (not StartBool_1) (< Start_14 Start_7) (<= Start_11 Start_2) (= Start_4 Start)))
   (StartBool_2 Bool (true (not StartBool_6) (or StartBool_5 StartBool_1) (< Start_3 Start) (<= Start_4 Start_13) (> Start_6 Start_1)))
   (Start_15 Int (1 (abs Start)))
   (Start_2 Int (y (- Start) (* Start_17 Start) (div Start_7 Start_15) (mod Start_7 Start_15) (ite StartBool_7 Start_11 Start_12)))
   (Start_16 Int (3 0 (+ Start_10 Start_2) (abs Start_10) (ite StartBool_5 Start_3 Start_1)))
   (Start_5 Int (3 (- Start_2 Start_7) (+ Start_9 Start_14) (* Start_11 Start_15) (div Start_6 Start_11) (abs Start_7) (ite StartBool_3 Start_12 Start_7)))
   (Start_11 Int (4 (- Start_5 Start_6) (+ Start_3 Start)))
   (Start_14 Int (4 (- Start_9 Start_5) (* Start_16 Start_6)))
   (StartBool_4 Bool (true (or StartBool_2 StartBool) (< Start_8 Start_5) (<= Start_9 Start_1) (= Start_1 Start_10) (>= Start_10 Start_4)))
   (Start_13 Int (3 1 4 (- Start_8) (- Start_7 Start_6) (+ Start_8 Start_4) (* Start_9 Start_9) (div Start_13 Start_4) (abs Start_5)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (or StartBool_1 StartBool_2) (< Start Start_1) (<= Start_1 Start) (= Start Start_3) (>= Start_1 Start_4) (> Start_3 Start_3)))
   (Start_4 Int (1 (- Start_1) (+ Start_1 Start_4)))
   (Start_17 Int (1 x 0 2 (- Start_14) (div Start_14 Start_17) (mod Start_9 Start_8) (ite StartBool_1 Start Start_17)))
   (Start_7 Int (3 (- Start_6) (- Start_6 Start_5) (mod Start_2 Start_1)))
   (Start_3 Int (y (- Start_2) (- Start_2 Start) (* Start_2 Start_2) (div Start Start_5) (mod Start_2 Start_4) (ite StartBool_3 Start_1 Start)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool StartBool_1) (or StartBool_4 StartBool_3) (<= Start_6 Start_2) (= Start_6 Start_2)))
   (Start_6 Int (4 (- Start_6) (+ Start_3 Start_3) (* Start_3 Start_7) (div Start_1 Start) (mod Start_7 Start_4) (ite StartBool_4 Start_5 Start_1)))
   (Start_10 Int (4 2 (- Start_9) (- Start_1 Start_7)))
   (Start_9 Int (x (+ Start_3 Start_5) (abs Start_6) (ite StartBool_1 Start Start_10)))
   (Start_8 Int (3 (+ Start_11 Start_12) (* Start_12 Start_3) (abs Start_13) (ite StartBool_3 Start_4 Start_11)))
   (StartBool_5 Bool (false (or StartBool_3 StartBool_4) (= Start_16 Start)))
   (Start_12 Int (0 (- Start_2) (div Start_12 Start_8) (mod Start Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod (abs (- x)) 0))))

(check-synth)
