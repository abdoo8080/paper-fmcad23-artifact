(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (StartBool_4 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_6 Int) (Start_4 Int) (Start_3 Int) (Start_7 Int) (Start_8 Int) (StartBool_1 Bool) (Start_2 Int) (Start_1 Int) (StartBool_3 Bool))
  ((Start Int (x 5 (- Start_1) (- Start_2 Start_3) (div Start_4 Start_3) (mod Start Start_2) (abs Start_5) (ite StartBool Start_5 Start_2)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool StartBool) (or StartBool_2 StartBool_3) (>= Start_1 Start_8) (> Start_4 Start_1)))
   (Start_9 Int (x 5 y 3 (- Start_6 Start_3) (* Start_6 Start_6) (mod Start_8 Start_4)))
   (StartBool_4 Bool (false true (and StartBool StartBool_2) (or StartBool_3 StartBool_1) (= Start_2 Start_5) (>= Start_3 Start_9)))
   (Start_5 Int (y 1 (- Start_3 Start_6) (div Start_3 Start_4)))
   (StartBool_2 Bool (false true (< Start_8 Start_7) (<= Start_7 Start_3) (= Start_6 Start_4) (>= Start_6 Start_7) (> Start_5 Start_2)))
   (Start_6 Int (x 5 (- Start_5) (* Start_3 Start_3) (abs Start_2) (ite StartBool Start_1 Start_3)))
   (Start_4 Int (x 1 0 (+ Start Start_6) (* Start_3 Start_1) (div Start_3 Start_2) (mod Start_1 Start_2)))
   (Start_3 Int (1 (- Start_3 Start_6) (* Start_1 Start_4) (mod Start_5 Start_2) (abs Start_3) (ite StartBool Start_7 Start_3)))
   (Start_7 Int (y (+ Start_5 Start_1) (mod Start_4 Start_6)))
   (Start_8 Int (3 (- Start_8 Start_1) (mod Start Start_3) (abs Start_3) (ite StartBool_1 Start_6 Start_7)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_1) (or StartBool_1 StartBool_2) (< Start_7 Start)))
   (Start_2 Int (x (- Start_6) (div Start_1 Start) (ite StartBool_1 Start_4 Start_5)))
   (Start_1 Int (3 5 (+ Start_8 Start_1) (* Start_7 Start_4) (div Start_6 Start_4) (ite StartBool_2 Start_5 Start_3)))
   (StartBool_3 Bool (true false (and StartBool_1 StartBool_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (< (- y x) x) 3 2)))

(check-synth)
