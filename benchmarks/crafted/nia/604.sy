(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_10 Int) (Start_4 Int) (Start_8 Int) (Start_5 Int) (Start_1 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_7 Int) (Start_3 Int) (Start_9 Int) (Start_11 Int) (Start_6 Int))
  ((Start Int (3 (- Start_1 Start_2) (* Start_2 Start_2) (div Start Start) (mod Start_3 Start_3)))
   (StartBool Bool (true (not StartBool) (or StartBool_2 StartBool) (< Start_7 Start_1) (<= Start_2 Start_11) (> Start_9 Start_10)))
   (Start_2 Int (y 4 (- Start_3) (* Start_4 Start) (mod Start_4 Start_4) (abs Start_3)))
   (Start_10 Int (5 3 (- Start_5 Start_3)))
   (Start_4 Int (0 3 5 (- Start_2) (- Start_4 Start_4) (* Start_5 Start_3)))
   (Start_8 Int (0 4 x y (+ Start_2 Start_7) (* Start_6 Start_9) (div Start Start_8) (abs Start_2)))
   (Start_5 Int (4 y (* Start_6 Start_5) (div Start Start_1) (mod Start Start_6) (abs Start_4) (ite StartBool_1 Start_5 Start)))
   (Start_1 Int (x 1 (- Start_11 Start_11) (mod Start_9 Start_9) (abs Start_3) (ite StartBool_2 Start_10 Start_7)))
   (StartBool_2 Bool (true (not StartBool) (or StartBool_1 StartBool) (< Start_5 Start_1) (<= Start_10 Start_4) (> Start Start_6)))
   (StartBool_1 Bool (true false (not StartBool) (< Start_3 Start_7) (<= Start Start_2) (= Start_4 Start_1) (> Start_2 Start_7)))
   (Start_7 Int (1 2 x 5 4 (- Start_8 Start_4) (div Start_6 Start_2)))
   (Start_3 Int (4 (- Start_3 Start) (+ Start_2 Start) (* Start_3 Start_1) (mod Start_2 Start_2)))
   (Start_9 Int (3 4 (- Start) (- Start_3 Start_7) (div Start_6 Start_3) (mod Start_6 Start_5)))
   (Start_11 Int (1 2 5 (- Start) (+ Start_9 Start_10) (* Start_5 Start_1) (mod Start_4 Start_8) (abs Start_1)))
   (Start_6 Int (y 5 0 x (- Start_10) (* Start_4 Start_7) (div Start_3 Start_7) (ite StartBool_1 Start_4 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div (abs x) (mod 2 y)) (- x))))

(check-synth)
