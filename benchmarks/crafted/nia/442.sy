(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_7 Int) (StartBool_3 Bool) (Start_1 Int) (StartBool_4 Bool) (Start_9 Int) (StartBool_2 Bool) (Start_6 Int) (Start_2 Int) (Start_10 Int) (Start_5 Int) (Start_12 Int) (Start_4 Int) (Start_14 Int) (Start_3 Int) (Start_8 Int) (StartBool_1 Bool) (Start_15 Int) (Start_11 Int) (Start_13 Int))
  ((Start Int (x y 4 (div Start_1 Start_2)))
   (StartBool Bool (true (not StartBool_3) (< Start_10 Start_8) (<= Start_2 Start_5) (= Start_12 Start_3) (> Start_10 Start_4)))
   (Start_7 Int (x (- Start_7) (* Start_2 Start_8) (ite StartBool_4 Start_15 Start)))
   (StartBool_3 Bool (false true (= Start_8 Start_2) (>= Start_11 Start_15)))
   (Start_1 Int (0 2 4 (- Start_1 Start_5) (+ Start_9 Start_3) (* Start_8 Start_1) (abs Start_14) (ite StartBool_1 Start Start_7)))
   (StartBool_4 Bool (true (not StartBool_3) (and StartBool_2 StartBool_4) (<= Start_2 Start_4) (> Start_6 Start_15)))
   (Start_9 Int (5 (- Start_12 Start_14) (+ Start_11 Start_4) (* Start_3 Start_8) (div Start_2 Start_11) (abs Start_6) (ite StartBool_3 Start_4 Start)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_1 StartBool_1) (< Start_8 Start_10) (>= Start_3 Start_5)))
   (Start_6 Int (y 0 (- Start_5 Start_3) (+ Start_5 Start) (* Start_7 Start_4) (div Start_6 Start_1) (ite StartBool Start_2 Start_8)))
   (Start_2 Int (3 (- Start_3) (- Start_2 Start) (* Start_1 Start_3) (div Start_4 Start_1) (mod Start Start_1) (ite StartBool Start_2 Start_1)))
   (Start_10 Int (0 1 (ite StartBool_2 Start_3 Start_8)))
   (Start_5 Int (5 (+ Start_4 Start_5) (* Start_2 Start_5) (mod Start_3 Start_3) (abs Start_4) (ite StartBool Start_6 Start_4)))
   (Start_12 Int (4 y 2 (- Start_3) (+ Start_9 Start_12) (div Start_1 Start_12) (mod Start_12 Start_1) (abs Start_6) (ite StartBool_1 Start_5 Start_2)))
   (Start_4 Int (1 (+ Start_4 Start_2) (* Start Start_1) (abs Start_4)))
   (Start_14 Int (2 (* Start_11 Start_15) (div Start_3 Start_6) (ite StartBool Start_13 Start_6)))
   (Start_3 Int (x 1 (+ Start_1 Start) (* Start_5 Start) (abs Start_2)))
   (Start_8 Int (5 (- Start_6) (+ Start_9 Start_4) (div Start_9 Start_5) (mod Start_7 Start_1) (ite StartBool_1 Start Start_1)))
   (StartBool_1 Bool (true (not StartBool) (< Start_7 Start_2) (<= Start_7 Start_10) (>= Start_11 Start_4) (> Start_10 Start_12)))
   (Start_15 Int (4 1 (mod Start_7 Start_15) (ite StartBool_1 Start_4 Start_10)))
   (Start_11 Int (0 (+ Start_4 Start_1) (* Start_6 Start_1) (mod Start_13 Start_9)))
   (Start_13 Int (4 5 (- Start_11) (- Start_8 Start_14) (+ Start_4 Start_14) (div Start_9 Start_13) (abs Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (* 4 5) (abs (- x)))))

(check-synth)
