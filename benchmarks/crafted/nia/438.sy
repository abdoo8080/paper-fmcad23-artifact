(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_13 Int) (Start_12 Int) (StartBool_4 Bool) (Start_11 Int) (Start_7 Int) (Start_9 Int) (Start_1 Int) (StartBool_1 Bool) (Start_8 Int) (Start_10 Int) (Start_3 Int) (Start_2 Int) (Start_4 Int) (Start_5 Int) (Start_6 Int) (StartBool_2 Bool))
  ((Start Int (y (- Start) (- Start Start_1) (* Start_1 Start_2) (div Start Start) (abs Start_3) (ite StartBool_1 Start_4 Start_4)))
   (StartBool Bool (true false (and StartBool StartBool_2) (or StartBool StartBool_2) (<= Start_1 Start_1) (= Start_2 Start_5)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool StartBool_1) (< Start_11 Start_9) (<= Start_12 Start_1) (= Start_5 Start_3) (>= Start_6 Start_9)))
   (Start_13 Int (y 1 0 (- Start_9 Start_9) (+ Start_5 Start_7) (div Start_3 Start_12) (mod Start_7 Start_12)))
   (Start_12 Int (0 1 (- Start_6) (- Start_6 Start_7) (+ Start_13 Start_2) (* Start_2 Start_3) (div Start_13 Start_5) (abs Start_13)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_4 StartBool) (< Start_12 Start_12) (<= Start_5 Start_3) (= Start_7 Start_1) (> Start_7 Start_7)))
   (Start_11 Int (x (- Start_5) (- Start_1 Start_5) (div Start_12 Start_12) (mod Start_12 Start_11) (ite StartBool_4 Start_12 Start)))
   (Start_7 Int (1 0 y x 4 (- Start_9) (- Start_8 Start_5) (* Start_7 Start_5) (ite StartBool_1 Start_2 Start_7)))
   (Start_9 Int (5 (div Start_1 Start_3) (mod Start_5 Start_2)))
   (Start_1 Int (3 (- Start_5 Start_5) (mod Start_9 Start_1)))
   (StartBool_1 Bool (false (or StartBool StartBool) (>= Start_4 Start_3) (> Start_2 Start_1)))
   (Start_8 Int (2 (+ Start_1 Start_4) (abs Start_5) (ite StartBool Start_6 Start_6)))
   (Start_10 Int (3 5 0 (- Start_3 Start_6) (+ Start_8 Start_2) (div Start_12 Start_9) (abs Start_7)))
   (Start_3 Int (x 2 (- Start_1 Start_2) (+ Start_4 Start_4) (* Start_5 Start_2)))
   (Start_2 Int (5 (- Start_6) (- Start_4 Start_6) (* Start_4 Start) (div Start_7 Start_5) (abs Start_8)))
   (Start_4 Int (0 (- Start_5) (- Start_2 Start_2) (mod Start_2 Start_3) (abs Start_5) (ite StartBool Start_2 Start)))
   (Start_5 Int (4 (- Start_3 Start_5) (+ Start Start_1) (div Start Start_5) (mod Start_1 Start_5)))
   (Start_6 Int (1 (- Start_9) (- Start_6 Start_4) (+ Start_7 Start_1) (div Start_3 Start_8) (mod Start_6 Start_7) (abs Start_6)))
   (StartBool_2 Bool (true false (not StartBool_1) (or StartBool_3 StartBool_2) (< Start_10 Start_4) (<= Start_11 Start_10) (= Start_7 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- y (* (* 4 5) 4))))

(check-synth)
