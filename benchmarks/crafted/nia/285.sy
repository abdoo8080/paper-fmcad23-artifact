(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_5 Int) (Start_13 Int) (StartBool_8 Bool) (Start_15 Int) (StartBool_7 Bool) (StartBool_6 Bool) (Start_14 Int) (StartBool_1 Bool) (Start_9 Int) (StartBool_4 Bool) (Start_8 Int) (Start_4 Int) (StartBool_3 Bool) (Start_7 Int) (StartBool_10 Bool) (Start_3 Int) (StartBool_5 Bool) (Start_11 Int) (StartBool_9 Bool) (StartBool_2 Bool) (Start_6 Int) (Start_12 Int) (Start_10 Int))
  ((Start Int (x 3 (- Start_1 Start_2) (+ Start_2 Start_3) (div Start_3 Start_2) (mod Start_1 Start_4)))
   (StartBool Bool (true (<= Start_9 Start_13) (> Start_15 Start_2)))
   (Start_1 Int (x (* Start_11 Start_13)))
   (Start_2 Int (x (- Start_11 Start_11) (+ Start_9 Start_7) (div Start_8 Start_14) (mod Start_14 Start_14) (abs Start_7) (ite StartBool_9 Start_12 Start_4)))
   (Start_5 Int (5 (- Start_3) (* Start_10 Start_5) (abs Start_6)))
   (Start_13 Int (y (- Start_7) (div Start_3 Start) (abs Start_10) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_8 Bool (true false (not StartBool) (>= Start_5 Start_3)))
   (Start_15 Int (y (- Start_3) (- Start_7 Start_9) (+ Start_2 Start_6) (div Start_4 Start)))
   (StartBool_7 Bool (false true (or StartBool_8 StartBool_8) (< Start_13 Start_7) (<= Start_1 Start_4) (= Start_8 Start_5) (> Start_10 Start_12)))
   (StartBool_6 Bool (false (not StartBool_5) (or StartBool_1 StartBool_7)))
   (Start_14 Int (3 (- Start_14 Start_1) (* Start Start_3) (div Start_14 Start_4) (mod Start_9 Start_4) (ite StartBool_3 Start_9 Start_13)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool) (< Start_6 Start_2) (= Start_1 Start) (>= Start_9 Start_5)))
   (Start_9 Int (2 (- Start_3 Start_4) (+ Start_8 Start_1) (div Start_9 Start_5) (abs Start_4)))
   (StartBool_4 Bool (false true (not StartBool_4) (and StartBool StartBool_4) (or StartBool_6 StartBool_1) (< Start_14 Start_11)))
   (Start_8 Int (x 0 (- Start_4) (- Start_7 Start_5) (+ Start_5 Start_7) (div Start_3 Start)))
   (Start_4 Int (0 x (- Start) (+ Start_2 Start_1) (* Start_5 Start_5) (ite StartBool Start_1 Start_6)))
   (StartBool_3 Bool (true (and StartBool_4 StartBool_3) (or StartBool_3 StartBool_5) (< Start_5 Start) (> Start Start)))
   (Start_7 Int (0 x y 5 3 (* Start_10 Start_10) (div Start_2 Start_11)))
   (StartBool_10 Bool (true (or StartBool_7 StartBool_1) (<= Start_6 Start_2) (>= Start_9 Start_14) (> Start_9 Start_7)))
   (Start_3 Int (0 (- Start_10) (- Start_2 Start_8) (+ Start_10 Start_7) (* Start_4 Start_13) (div Start_14 Start_4) (ite StartBool_5 Start_4 Start_4)))
   (StartBool_5 Bool (false true (<= Start_2 Start_1)))
   (Start_11 Int (2 5 (- Start_6) (+ Start_7 Start_2) (* Start_10 Start_3) (div Start_12 Start) (ite StartBool_2 Start_1 Start)))
   (StartBool_9 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_10) (= Start_2 Start_9) (> Start_4 Start_13)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool) (< Start_10 Start_11) (= Start_1 Start_1) (>= Start_10 Start_2)))
   (Start_6 Int (x y (- Start_4) (- Start_4 Start_6) (+ Start_6 Start_5) (* Start_6 Start_4) (div Start_4 Start) (abs Start_7) (ite StartBool_1 Start_8 Start_9)))
   (Start_12 Int (y 4 (- Start_10) (* Start_5 Start_2) (abs Start_10) (ite StartBool Start_4 Start_6)))
   (Start_10 Int (4 y (- Start_8) (+ Start Start) (* Start_4 Start_5) (div Start_12 Start_13) (mod Start_8 Start_3) (ite StartBool_3 Start_13 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div 0 0) (div x 4))))

(check-synth)
