(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_14 Int) (Start_16 Int) (Start_15 Int) (Start_3 Int) (Start_9 Int) (Start_1 Int) (Start_10 Int) (Start_5 Int) (Start_13 Int) (Start_8 Int) (Start_4 Int) (Start_7 Int) (Start_2 Int) (Start_6 Int) (StartBool_1 Bool) (Start_11 Int) (StartBool_2 Bool) (Start_12 Int))
  ((Start Int (y (- Start) (+ Start Start_1) (* Start_1 Start) (mod Start Start_1) (abs Start_1)))
   (StartBool Bool (false (not StartBool) (and StartBool_2 StartBool_3) (or StartBool StartBool_1) (< Start_5 Start_15) (<= Start_9 Start_4) (= Start_8 Start_3) (> Start_7 Start_8)))
   (StartBool_3 Bool (true (not StartBool_2) (= Start_4 Start_4) (>= Start_12 Start_9) (> Start_13 Start_8)))
   (Start_14 Int (0 (- Start_3 Start_4) (+ Start_1 Start_4) (* Start_4 Start_14) (mod Start_5 Start_8) (abs Start_8) (ite StartBool_2 Start_11 Start_12)))
   (Start_16 Int (2 (* Start_4 Start_9) (div Start_1 Start) (abs Start_11) (ite StartBool_2 Start_5 Start_11)))
   (Start_15 Int (4 (- Start_13 Start_13) (div Start_13 Start_4) (ite StartBool Start_16 Start_1)))
   (Start_3 Int (x 0 3 (- Start_8) (* Start_8 Start_5) (div Start_7 Start_13) (mod Start_10 Start_4) (abs Start)))
   (Start_9 Int (4 1 y 5 (* Start_7 Start_7) (mod Start_7 Start_8) (abs Start_12)))
   (Start_1 Int (3 (- Start) (- Start_1 Start) (+ Start Start) (div Start Start_2) (mod Start Start_1)))
   (Start_10 Int (4 (- Start_5) (div Start_3 Start) (abs Start_11) (ite StartBool_2 Start Start_4)))
   (Start_5 Int (5 4 3 (+ Start_5 Start) (div Start_3 Start) (mod Start_3 Start_6) (ite StartBool Start_5 Start_6)))
   (Start_13 Int (1 (- Start_12) (- Start_11 Start_14) (+ Start_13 Start_8) (mod Start_15 Start_5)))
   (Start_8 Int (3 (- Start_9) (- Start_10 Start_5) (+ Start_8 Start_11) (* Start Start_3) (mod Start_6 Start_8) (ite StartBool_1 Start Start)))
   (Start_4 Int (y (- Start) (+ Start_4 Start_5) (abs Start_1)))
   (Start_7 Int (3 (- Start) (* Start_6 Start_7) (div Start_8 Start_7) (ite StartBool Start_3 Start_7)))
   (Start_2 Int (2 y 0 1 (- Start Start_3) (+ Start_3 Start) (mod Start_2 Start_4) (abs Start_3)))
   (Start_6 Int (1 y 3 (- Start_5) (abs Start_2) (ite StartBool Start_4 Start_7)))
   (StartBool_1 Bool (true (< Start_3 Start_3) (<= Start_4 Start_1) (>= Start_11 Start_8)))
   (Start_11 Int (1 5 (- Start_1 Start_10) (* Start Start_3) (mod Start_4 Start) (ite StartBool Start_7 Start_8)))
   (StartBool_2 Bool (true false (and StartBool StartBool_1) (or StartBool_2 StartBool) (<= Start Start_12) (= Start_2 Start_1)))
   (Start_12 Int (1 (+ Start_7 Start_12) (* Start_6 Start_11) (div Start_4 Start_3) (mod Start_7 Start_1) (ite StartBool_1 Start_4 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (abs (+ 4 x)))))

(check-synth)
