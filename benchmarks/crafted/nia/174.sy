(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (StartBool_8 Bool) (Start_15 Int) (Start_14 Int) (Start_1 Int) (Start_2 Int) (Start_13 Int) (StartBool_6 Bool) (StartBool_3 Bool) (StartBool_7 Bool) (Start_3 Int) (StartBool_4 Bool) (StartBool_5 Bool) (Start_4 Int) (Start_7 Int) (StartBool_1 Bool) (Start_12 Int) (Start_5 Int) (Start_8 Int) (Start_9 Int) (Start_10 Int) (Start_6 Int) (StartBool_2 Bool) (Start_11 Int))
  ((Start Int (1 (- Start_1) (- Start_1 Start_2) (+ Start Start) (abs Start_3) (ite StartBool Start_4 Start_1)))
   (StartBool Bool (true (not StartBool_7) (< Start_1 Start_1) (<= Start_4 Start_11) (> Start_1 Start_14)))
   (Start_16 Int (4 (mod Start_7 Start_6) (ite StartBool Start_3 Start_10)))
   (StartBool_8 Bool (true false (< Start_11 Start_12) (<= Start_16 Start_4) (>= Start_3 Start_5) (> Start_6 Start_13)))
   (Start_15 Int (x (+ Start_14 Start_4) (abs Start_10)))
   (Start_14 Int (0 4 (- Start_9) (- Start_12 Start_8) (div Start_3 Start_2) (mod Start_1 Start_3)))
   (Start_1 Int (x 5 y (- Start_9) (div Start_4 Start_12) (mod Start Start_10) (abs Start_5) (ite StartBool_4 Start_12 Start_1)))
   (Start_2 Int (4 x 5 y (+ Start_1 Start_7) (div Start_6 Start_3)))
   (Start_13 Int (x (* Start_8 Start_13) (div Start_11 Start_2) (mod Start_7 Start) (abs Start_5)))
   (StartBool_6 Bool (true false (not StartBool_3) (< Start_2 Start_6) (>= Start_7 Start_8) (> Start_4 Start_13)))
   (StartBool_3 Bool (false (not StartBool_5) (and StartBool_1 StartBool) (or StartBool_4 StartBool_3) (< Start_10 Start_7)))
   (StartBool_7 Bool (false (not StartBool_6) (and StartBool_8 StartBool_3) (or StartBool_2 StartBool_3) (>= Start_10 Start_3) (> Start_15 Start)))
   (Start_3 Int (y 3 (- Start_1 Start_9) (abs Start_11) (ite StartBool_4 Start_7 Start_3)))
   (StartBool_4 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_3) (<= Start_3 Start_2) (= Start Start_8) (>= Start_5 Start_4)))
   (StartBool_5 Bool (false true (not StartBool_6) (or StartBool_5 StartBool_2) (>= Start_3 Start_6)))
   (Start_4 Int (3 (- Start_3 Start_1) (+ Start_4 Start) (abs Start_1) (ite StartBool_1 Start_1 Start_2)))
   (Start_7 Int (2 (- Start_1 Start) (mod Start_4 Start_8) (abs Start)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_1 StartBool_2) (<= Start_3 Start_2) (= Start_4 Start_2) (> Start_5 Start_3)))
   (Start_12 Int (x 1 3 2 5 (- Start Start_11) (mod Start_9 Start_10) (abs Start) (ite StartBool_4 Start_2 Start_2)))
   (Start_5 Int (x 1 (- Start_6) (- Start_7 Start_6) (* Start_7 Start_3) (div Start_1 Start) (mod Start_6 Start_6) (ite StartBool_2 Start_8 Start_3)))
   (Start_8 Int (y 1 3 x 5 2 (- Start Start_4) (+ Start_1 Start_4) (div Start_5 Start_8) (mod Start_3 Start_5) (abs Start_9)))
   (Start_9 Int (4 3 2 (abs Start_8)))
   (Start_10 Int (x y (- Start_4) (- Start_9 Start_1) (+ Start_2 Start) (mod Start_10 Start_4) (abs Start_1) (ite StartBool_2 Start_4 Start_3)))
   (Start_6 Int (5 (abs Start_3) (ite StartBool_2 Start_10 Start_1)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_4) (< Start_7 Start_11) (<= Start_9 Start_11) (>= Start_2 Start_11) (> Start_12 Start_1)))
   (Start_11 Int (0 4 2 (- Start_6 Start_5) (* Start_10 Start_6) (mod Start_10 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs (mod x (- 1 y))))))

(check-synth)
