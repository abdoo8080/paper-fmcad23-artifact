(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (StartBool_6 Bool) (StartBool_3 Bool) (Start_18 Int) (StartBool_2 Bool) (Start_17 Int) (Start_16 Int) (Start_14 Int) (Start_13 Int) (Start_4 Int) (Start_12 Int) (Start_1 Int) (StartBool_1 Bool) (Start_9 Int) (Start_2 Int) (StartBool_4 Bool) (Start_8 Int) (Start_5 Int) (Start_3 Int) (Start_10 Int) (StartBool_5 Bool) (Start_7 Int) (Start_6 Int) (Start_11 Int))
  ((Start Int (2 y (- Start Start) (mod Start Start_1)))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (< Start_8 Start_14) (>= Start_11 Start_2) (> Start_14 Start_12)))
   (Start_15 Int (3 (- Start_5) (- Start_9 Start_3) (* Start_7 Start_10) (mod Start_12 Start_12) (ite StartBool_4 Start_5 Start_2)))
   (StartBool_6 Bool (true (not StartBool_3) (and StartBool_3 StartBool_3) (< Start_15 Start_5) (<= Start_8 Start_11) (= Start_13 Start_13) (>= Start_17 Start_3) (> Start_18 Start_6)))
   (StartBool_3 Bool (true false (not StartBool_4) (or StartBool_3 StartBool_5) (<= Start_15 Start_4) (> Start_9 Start_15)))
   (Start_18 Int (x (+ Start_5 Start_13) (div Start_2 Start_2) (mod Start_6 Start_12) (ite StartBool_1 Start_12 Start_13)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_3) (< Start_7 Start_5)))
   (Start_17 Int (x 5 1 (- Start) (+ Start_10 Start_11) (div Start_2 Start_11) (mod Start_12 Start_9) (abs Start_7) (ite StartBool_2 Start_10 Start_12)))
   (Start_16 Int (2 4 (- Start_15 Start_8) (mod Start_17 Start_2) (abs Start_13)))
   (Start_14 Int (4 (- Start_6) (- Start_1 Start_10) (+ Start_13 Start_13) (div Start_15 Start_14) (abs Start_1) (ite StartBool_2 Start_16 Start_12)))
   (Start_13 Int (3 x 4 (- Start_7) (- Start_12 Start_6) (div Start_2 Start_13) (mod Start_1 Start_4) (abs Start_1)))
   (Start_4 Int (5 (- Start_1) (+ Start_5 Start_5) (* Start_6 Start_6) (div Start_4 Start) (ite StartBool_1 Start Start_2)))
   (Start_12 Int (0 (- Start_12 Start_3) (* Start_13 Start_1) (abs Start_11) (ite StartBool Start_9 Start_7)))
   (Start_1 Int (1 (- Start_2) (- Start_2 Start) (+ Start Start_3) (div Start_1 Start) (abs Start_4)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (<= Start_7 Start_7) (= Start_6 Start_5) (>= Start_7 Start_4)))
   (Start_9 Int (4 (- Start_10 Start_5) (+ Start_10 Start_7) (div Start Start_5)))
   (Start_2 Int (2 (+ Start_2 Start_2) (div Start_4 Start_11) (abs Start_4)))
   (StartBool_4 Bool (false (not StartBool_5) (or StartBool_1 StartBool_6) (< Start_6 Start_14) (>= Start_7 Start_2)))
   (Start_8 Int (0 (- Start_1 Start_6) (* Start_8 Start_6) (mod Start_7 Start_2)))
   (Start_5 Int (5 (- Start_1 Start_1) (+ Start_2 Start_4) (div Start_6 Start_7) (ite StartBool_1 Start_1 Start_7)))
   (Start_3 Int (y (- Start_8 Start_1) (+ Start_8 Start_7) (* Start_1 Start_9) (div Start_3 Start_2) (ite StartBool Start_10 Start_2)))
   (Start_10 Int (y 4 5 (- Start_2) (+ Start_6 Start_4) (div Start_2 Start_4) (mod Start_1 Start_6) (abs Start_9)))
   (StartBool_5 Bool (true false (not StartBool_2) (and StartBool_5 StartBool_4) (<= Start_16 Start_3) (>= Start_4 Start_8) (> Start_6 Start_9)))
   (Start_7 Int (4 3 (- Start_1) (+ Start_3 Start_8) (* Start_6 Start_7)))
   (Start_6 Int (4 (- Start_7) (div Start_8 Start_3) (abs Start_6)))
   (Start_11 Int (2 (- Start_5 Start_7) (+ Start_7 Start_12) (mod Start_12 Start) (abs Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 (* (mod 4 0) (- 1)))))

(check-synth)
