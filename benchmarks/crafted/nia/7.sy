(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_17 Int) (Start_15 Int) (StartBool_5 Bool) (Start_13 Int) (Start_16 Int) (Start_1 Int) (Start_11 Int) (Start_10 Int) (StartBool_6 Bool) (StartBool_1 Bool) (Start_9 Int) (Start_5 Int) (Start_4 Int) (Start_12 Int) (StartBool_3 Bool) (Start_6 Int) (Start_21 Int) (Start_18 Int) (Start_8 Int) (Start_20 Int) (StartBool_2 Bool) (Start_7 Int) (Start_3 Int) (Start_19 Int) (StartBool_4 Bool) (Start_2 Int))
  ((Start Int (2 (- Start_1 Start_2) (div Start_3 Start) (mod Start Start_1) (ite StartBool_1 Start_3 Start_2)))
   (StartBool Bool (false true (and StartBool_5 StartBool_5) (<= Start_12 Start_12) (= Start_12 Start_12) (> Start_8 Start_8)))
   (Start_14 Int (1 x (- Start_5) (+ Start_8 Start_12) (* Start_1 Start_1) (mod Start_6 Start_14)))
   (Start_17 Int (5 x 1 y 3 0 4 (- Start_11) (mod Start_18 Start_18) (ite StartBool Start_3 Start_14)))
   (Start_15 Int (1 (- Start_2) (* Start_14 Start_15) (mod Start_16 Start_1)))
   (StartBool_5 Bool (false (< Start_12 Start_5) (<= Start_13 Start_1) (= Start_4 Start) (> Start_14 Start_15)))
   (Start_13 Int (5 2 (- Start_5) (- Start_19 Start_20) (+ Start_15 Start_19) (mod Start_2 Start_8) (ite StartBool_1 Start_19 Start_12)))
   (Start_16 Int (4 0 (- Start_11) (- Start_7 Start_4) (div Start_17 Start_2) (ite StartBool_3 Start_5 Start_2)))
   (Start_1 Int (y x (- Start_8) (- Start_4 Start_2) (+ Start_5 Start_4) (div Start_2 Start_1) (mod Start_12 Start) (ite StartBool_1 Start_11 Start)))
   (Start_11 Int (4 0 (- Start_1) (mod Start_6 Start_10)))
   (Start_10 Int (3 x 2 5 0 (- Start_5) (- Start_6 Start_10) (* Start_11 Start_8) (div Start_10 Start_1) (abs Start_6) (ite StartBool_1 Start_9 Start_8)))
   (StartBool_6 Bool (false true (not StartBool_5) (or StartBool StartBool_4) (< Start_17 Start_3) (= Start_15 Start) (>= Start_19 Start_7)))
   (StartBool_1 Bool (false true (not StartBool) (or StartBool_2 StartBool_1) (< Start_4 Start_3) (= Start_4 Start) (> Start_5 Start_5)))
   (Start_9 Int (3 2 y 1 5 0 (- Start_9 Start_9) (abs Start_3)))
   (Start_5 Int (3 (- Start_3) (- Start_3 Start_3) (mod Start_1 Start_2) (ite StartBool_3 Start_5 Start)))
   (Start_4 Int (2 4 3 (+ Start_7 Start_8) (* Start_5 Start_8) (mod Start_4 Start_5)))
   (Start_12 Int (y 5 (- Start_12) (- Start_9 Start_8) (+ Start_7 Start_4) (mod Start_10 Start_7)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool StartBool_1) (< Start_3 Start_6) (<= Start_4 Start_1) (= Start_6 Start_3) (> Start_6 Start_3)))
   (Start_6 Int (4 (- Start_6) (- Start_5 Start_7) (+ Start_5 Start_1) (div Start_7 Start_2) (mod Start Start_2) (ite StartBool_2 Start Start_8)))
   (Start_21 Int (0 (- Start_6) (+ Start_3 Start_4) (div Start_11 Start_8) (abs Start_1)))
   (Start_18 Int (1 (- Start_4 Start_2) (+ Start_11 Start_16) (* Start_12 Start_15)))
   (Start_8 Int (x 1))
   (Start_20 Int (5 (- Start_14) (mod Start_21 Start_12) (abs Start_20)))
   (StartBool_2 Bool (true false (not StartBool_3)))
   (Start_7 Int (5 3 (- Start_8 Start_4) (+ Start_4 Start_3) (mod Start_1 Start_6) (ite StartBool_4 Start_6 Start_2)))
   (Start_3 Int (y 2 3 (- Start) (- Start_5 Start_6) (* Start_7 Start_3) (div Start Start_7) (abs Start_4)))
   (Start_19 Int (1 (- Start_15) (- Start_17 Start_20) (div Start_11 Start_7) (abs Start_7) (ite StartBool_6 Start_19 Start_18)))
   (StartBool_4 Bool (false (not StartBool) (or StartBool_2 StartBool_4) (< Start_9 Start_1)))
   (Start_2 Int (4 x 0 (+ Start_10 Start_7) (div Start_2 Start_9) (mod Start_10 Start) (abs Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 2 (- 5))))

(check-synth)
