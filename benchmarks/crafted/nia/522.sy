(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_1 Int) (Start_12 Int) (Start_14 Int) (Start_3 Int) (Start_8 Int) (Start_2 Int) (Start_11 Int) (Start_10 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_7 Int) (Start_4 Int) (StartBool_4 Bool) (Start_5 Int) (StartBool_1 Bool) (Start_9 Int) (Start_6 Int))
  ((Start Int (y 2 1 3 (- Start_1) (- Start_1 Start_2) (+ Start_1 Start_2) (div Start_2 Start_3) (abs Start_1) (ite StartBool_1 Start Start)))
   (StartBool Bool (false (and StartBool_1 StartBool_4) (>= Start_6 Start) (> Start_6 Start)))
   (Start_13 Int (0 (- Start) (- Start_11 Start_14) (* Start_10 Start) (mod Start_13 Start_14)))
   (Start_1 Int (4 0 x 1 2 (- Start_13) (- Start_6 Start_7) (div Start_7 Start_14)))
   (Start_12 Int (y (mod Start_10 Start_7) (ite StartBool_1 Start_8 Start_2)))
   (Start_14 Int (4 2 (+ Start_9 Start_1) (div Start_2 Start_14) (mod Start_11 Start_1) (abs Start_11) (ite StartBool_2 Start_12 Start_7)))
   (Start_3 Int (0 (- Start_6) (* Start_3 Start_12)))
   (Start_8 Int (3 (- Start_8) (+ Start_9 Start_9) (* Start_7 Start_7) (div Start_5 Start_3) (ite StartBool_2 Start Start_2)))
   (Start_2 Int (x (- Start_3 Start_9) (mod Start_7 Start_3)))
   (Start_11 Int (0 (- Start_6 Start_7) (abs Start_10) (ite StartBool_3 Start_9 Start_10)))
   (Start_10 Int (0 (- Start_8) (* Start_1 Start_1)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_1 StartBool_2) (= Start_3 Start) (> Start_2 Start_3)))
   (StartBool_3 Bool (true false (or StartBool_3 StartBool_2) (<= Start_1 Start_4) (= Start Start_2) (> Start_1 Start_2)))
   (Start_7 Int (3 (- Start_6 Start_4) (div Start_8 Start_1) (mod Start_3 Start_8) (ite StartBool_1 Start_8 Start_11)))
   (Start_4 Int (x (- Start_2) (- Start_4 Start_4) (+ Start_4 Start_4) (* Start_3 Start_2) (abs Start_5) (ite StartBool_4 Start_2 Start_2)))
   (StartBool_4 Bool (false (not StartBool_3) (and StartBool_4 StartBool_3) (< Start Start_1) (<= Start_5 Start_5)))
   (Start_5 Int (4 (+ Start_4 Start_3) (* Start_3 Start_6) (mod Start_7 Start_8) (abs Start_6)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_2) (or StartBool_2 StartBool) (<= Start_3 Start_2) (= Start_3 Start_2) (>= Start_1 Start_1) (> Start_3 Start_2)))
   (Start_9 Int (5 1 3 x (+ Start_2 Start_9) (* Start_10 Start_10) (div Start_5 Start_10) (mod Start_8 Start_4) (ite StartBool_2 Start_8 Start_8)))
   (Start_6 Int (3 5 2 (- Start_2) (- Start_2 Start_1) (* Start_10 Start_5) (div Start_1 Start_11) (ite StartBool Start_11 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div 1 0))))

(check-synth)
