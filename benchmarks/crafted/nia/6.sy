(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (StartBool_1 Bool) (Start_3 Int) (Start_7 Int) (Start_4 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_1 Int) (StartBool_5 Bool) (Start_5 Int) (Start_6 Int) (StartBool_4 Bool))
  ((Start Int (3 2 5 1 4 x (* Start_1 Start_1)))
   (StartBool Bool (true (not StartBool) (and StartBool_2 StartBool_2) (or StartBool StartBool_2) (< Start_3 Start_1) (> Start_3 Start_4)))
   (Start_2 Int (1 2 (- Start_2 Start) (+ Start Start_2) (abs Start_2) (ite StartBool Start_4 Start_4)))
   (StartBool_1 Bool (true (= Start_1 Start_3) (>= Start_4 Start_1)))
   (Start_3 Int (2 (- Start_2) (* Start Start_2) (abs Start_2)))
   (Start_7 Int (3 2 (abs Start_5)))
   (Start_4 Int (0 x (mod Start Start_3) (ite StartBool_1 Start_4 Start_1)))
   (StartBool_3 Bool (false true (<= Start_5 Start)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_3) (or StartBool_4 StartBool_5) (< Start_1 Start_1) (<= Start_2 Start_4) (= Start_4 Start_3)))
   (Start_1 Int (4 (+ Start_1 Start) (div Start_2 Start_3)))
   (StartBool_5 Bool (false (= Start_3 Start_5) (>= Start_4 Start_1)))
   (Start_5 Int (2 (+ Start_2 Start_6) (mod Start_3 Start_6)))
   (Start_6 Int (y (- Start_7) (- Start_3 Start_4) (+ Start_5 Start_6) (* Start_1 Start_4)))
   (StartBool_4 Bool (false (not StartBool_1) (or StartBool_5 StartBool_5) (< Start_3 Start_3) (> Start_6 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div y 3)))

(check-synth)
