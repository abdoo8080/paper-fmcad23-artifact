(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_15 Int) (Start_3 Int) (Start_14 Int) (Start_4 Int) (Start_13 Int) (Start_12 Int) (Start_1 Int) (StartBool_6 Bool) (StartBool_5 Bool) (StartBool_1 Bool) (Start_2 Int) (Start_5 Int) (StartBool_2 Bool) (Start_6 Int) (Start_7 Int) (StartBool_3 Bool) (Start_8 Int) (Start_9 Int) (StartBool_4 Bool) (Start_10 Int) (Start_11 Int))
  ((Start Int (2 x y (- Start) (+ Start_1 Start_1) (div Start_1 Start) (mod Start_1 Start_2) (abs Start) (ite StartBool Start_1 Start)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_4 StartBool) (or StartBool_1 StartBool_5) (< Start_13 Start_6) (= Start_14 Start_2) (>= Start_8 Start_16)))
   (Start_16 Int (0 4 2 y (- Start_1) (- Start_13 Start_13) (div Start_9 Start_8) (mod Start_7 Start_6)))
   (Start_15 Int (4 2 0 1 (- Start_1) (- Start_12 Start_16) (abs Start_10)))
   (Start_3 Int (0 4 (- Start_9 Start_2) (* Start_13 Start_15) (abs Start_14)))
   (Start_14 Int (2 1 0 (- Start_9 Start_3) (+ Start_4 Start) (* Start_7 Start_7) (div Start_14 Start_9) (abs Start_1) (ite StartBool_5 Start_7 Start_6)))
   (Start_4 Int (4 (- Start_8 Start_14) (mod Start_9 Start_11) (ite StartBool_1 Start_13 Start_10)))
   (Start_13 Int (0 (- Start_13) (abs Start_5)))
   (Start_12 Int (0 4 y 3 (+ Start_11 Start_11) (div Start_13 Start_2)))
   (Start_1 Int (2 0 (- Start_12) (+ Start_6 Start) (* Start_13 Start_11) (abs Start_1)))
   (StartBool_6 Bool (false (and StartBool_5 StartBool_3) (or StartBool_6 StartBool_5) (> Start_4 Start_10)))
   (StartBool_5 Bool (true false (< Start_8 Start_2) (= Start_8 Start_11) (>= Start_8 Start_5) (> Start_9 Start_12)))
   (StartBool_1 Bool (false (or StartBool_1 StartBool_2) (< Start_2 Start_2) (<= Start_2 Start_5) (= Start_5 Start) (>= Start_2 Start_3) (> Start_4 Start_3)))
   (Start_2 Int (0 x (- Start_2) (- Start Start_3) (* Start_1 Start_4) (div Start_2 Start_4) (abs Start_2) (ite StartBool_1 Start_4 Start)))
   (Start_5 Int (y x 3 0 (- Start Start_2) (* Start_3 Start_3) (div Start_3 Start_1) (mod Start_5 Start_3)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_4) (< Start_5 Start_6) (<= Start_6 Start_6) (= Start_1 Start_5) (> Start_5 Start_2)))
   (Start_6 Int (y 5 (- Start_7 Start_7) (+ Start_7 Start_4) (* Start_6 Start_3)))
   (Start_7 Int (3 (abs Start_4)))
   (StartBool_3 Bool (true (and StartBool_5 StartBool_5) (> Start_11 Start_2)))
   (Start_8 Int (0 2 (- Start_7) (+ Start_2 Start_5) (* Start_5 Start_8) (div Start_4 Start_9)))
   (Start_9 Int (0 3 (- Start_3) (- Start_8 Start_6) (* Start_10 Start_3) (div Start_3 Start) (mod Start_2 Start_6)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool_1) (or StartBool_4 StartBool_2) (< Start_3 Start_5) (>= Start_8 Start) (> Start_2 Start_8)))
   (Start_10 Int (2 5 0 (+ Start Start_3) (* Start Start) (div Start_2 Start_9) (mod Start_9 Start_10)))
   (Start_11 Int (5 (- Start_7 Start_10) (mod Start_2 Start_2) (ite StartBool_6 Start_11 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ y (* (mod 3 0) 2))))

(check-synth)
