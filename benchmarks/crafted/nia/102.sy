(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_5 Int) (StartBool_2 Bool) (Start_13 Int) (StartBool_6 Bool) (StartBool_4 Bool) (StartBool_5 Bool) (Start_3 Int) (Start_2 Int) (Start_4 Int) (Start_9 Int) (StartBool_3 Bool) (Start_6 Int) (Start_7 Int) (Start_1 Int) (Start_8 Int) (Start_11 Int) (StartBool_1 Bool) (Start_10 Int) (Start_12 Int))
  ((Start Int (4 1 (- Start Start) (+ Start Start_1) (div Start Start_2) (mod Start_1 Start_3) (ite StartBool Start Start)))
   (StartBool Bool (false (not StartBool_3) (or StartBool StartBool_1) (= Start_10 Start_12) (>= Start_13 Start_2)))
   (Start_5 Int (1 (- Start_2 Start_11) (+ Start_6 Start_13) (mod Start Start_10) (ite StartBool_1 Start_10 Start_8)))
   (StartBool_2 Bool (true false (< Start_4 Start_2) (> Start_2 Start_12)))
   (Start_13 Int (2 4 0 1 (+ Start_6 Start_13) (div Start_10 Start_12) (abs Start_4) (ite StartBool_5 Start_2 Start_12)))
   (StartBool_6 Bool (false (not StartBool_4) (and StartBool_2 StartBool_2) (<= Start_1 Start_13)))
   (StartBool_4 Bool (true false (not StartBool_4) (or StartBool_6 StartBool) (> Start_5 Start_9)))
   (StartBool_5 Bool (true (not StartBool_2) (>= Start_4 Start_3)))
   (Start_3 Int (1 0 y 4 (* Start Start) (abs Start) (ite StartBool Start_2 Start_1)))
   (Start_2 Int (0 5 x 2 1 4 (- Start_2 Start_1) (div Start_3 Start_1) (mod Start_4 Start_1) (abs Start_3)))
   (Start_4 Int (5 (mod Start_5 Start) (abs Start_5) (ite StartBool_1 Start Start_2)))
   (Start_9 Int (x (- Start_9) (- Start_5 Start_6) (* Start_4 Start_10) (div Start_3 Start_5) (mod Start_3 Start_8)))
   (StartBool_3 Bool (true (< Start_2 Start_1) (<= Start_2 Start_2) (= Start Start_6) (> Start_4 Start)))
   (Start_6 Int (1 4 (* Start Start_3) (div Start_3 Start_6) (ite StartBool_4 Start_1 Start_7)))
   (Start_7 Int (1 (- Start_3) (+ Start_2 Start) (ite StartBool_5 Start_2 Start_8)))
   (Start_1 Int (5 (- Start_11) (* Start Start_13) (mod Start_1 Start_9) (ite StartBool_4 Start Start_9)))
   (Start_8 Int (x (- Start_8 Start_7) (+ Start_9 Start_5) (div Start_2 Start_10) (mod Start_5 Start_3) (ite StartBool_4 Start_7 Start_10)))
   (Start_11 Int (1 2 3 (- Start_11 Start_11) (+ Start_1 Start_2) (div Start_6 Start_7) (mod Start_7 Start_5) (abs Start_11) (ite StartBool Start_4 Start_11)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (< Start_2 Start_5) (<= Start_2 Start) (> Start_2 Start)))
   (Start_10 Int (2 (- Start_11) (mod Start_10 Start_12) (abs Start_6) (ite StartBool_3 Start_2 Start_11)))
   (Start_12 Int (3 (- Start_2 Start_6) (* Start_2 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod y x)))

(check-synth)
