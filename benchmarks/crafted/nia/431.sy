(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (StartBool_2 Bool) (Start_2 Int) (Start_4 Int) (Start_7 Int) (StartBool_7 Bool) (StartBool_3 Bool) (Start_3 Int) (Start_8 Int) (Start_1 Int) (Start_5 Int) (Start_6 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_9 Int) (StartBool_6 Bool))
  ((Start Int (2 (- Start) (- Start Start_1) (+ Start_2 Start_2) (* Start_1 Start) (mod Start_1 Start) (abs Start_2)))
   (StartBool Bool (true false (not StartBool_1) (or StartBool_2 StartBool_3) (= Start_5 Start_5) (> Start_6 Start_2)))
   (StartBool_1 Bool (true false (and StartBool StartBool_3) (or StartBool_5 StartBool_4) (<= Start_9 Start_6)))
   (StartBool_2 Bool (false (and StartBool_4 StartBool_3) (= Start_6 Start) (>= Start Start_4) (> Start_8 Start_9)))
   (Start_2 Int (0 (- Start Start_2) (* Start_2 Start) (div Start_3 Start_2)))
   (Start_4 Int (0 (- Start_4 Start) (+ Start Start_4)))
   (Start_7 Int (2 1 x (* Start_3 Start_7) (div Start Start_7)))
   (StartBool_7 Bool (false true (and StartBool_6 StartBool_2)))
   (StartBool_3 Bool (false (not StartBool_2) (< Start Start_3) (>= Start_7 Start_7) (> Start_8 Start)))
   (Start_3 Int (0 (- Start_4) (mod Start_1 Start_1) (abs Start_2)))
   (Start_8 Int (1 (- Start_8) (- Start Start_2) (div Start_1 Start_2) (abs Start_4) (ite StartBool_7 Start Start_5)))
   (Start_1 Int (5 (* Start_1 Start_3) (div Start Start_4) (ite StartBool Start_2 Start_3)))
   (Start_5 Int (5 (- Start_5) (* Start_2 Start_4) (mod Start_5 Start)))
   (Start_6 Int (3 (- Start_1) (* Start_6 Start_1) (div Start_3 Start_5) (mod Start_4 Start) (ite StartBool_4 Start_5 Start_3)))
   (StartBool_5 Bool (true (or StartBool_6 StartBool_2) (<= Start_7 Start_5) (= Start_2 Start_2)))
   (StartBool_4 Bool (true false (or StartBool_4 StartBool_5) (< Start_4 Start_1) (>= Start_6 Start_6)))
   (Start_9 Int (1 (- Start_2) (- Start_6 Start_4) (mod Start_8 Start_4) (ite StartBool_2 Start_4 Start_5)))
   (StartBool_6 Bool (false (or StartBool_4 StartBool_7) (<= Start_4 Start_5) (= Start_2 Start_5) (> Start_4 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= y 1) 3 x)))

(check-synth)
