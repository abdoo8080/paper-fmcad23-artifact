(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_13 Int) (StartBool_4 Bool) (Start_3 Int) (Start_14 Int) (Start_12 Int) (Start_5 Int) (Start_2 Int) (Start_10 Int) (StartBool_3 Bool) (Start_1 Int) (Start_7 Int) (Start_6 Int) (Start_15 Int) (StartBool_2 Bool) (StartBool_5 Bool) (Start_9 Int) (Start_4 Int) (Start_8 Int) (StartBool_1 Bool))
  ((Start Int (2 0 1 3 (- Start_1) (* Start_1 Start_2) (div Start_1 Start_3) (ite StartBool Start_4 Start)))
   (StartBool Bool (true (not StartBool_3) (< Start_8 Start_15) (= Start_6 Start) (>= Start_9 Start_8) (> Start_15 Start_9)))
   (Start_11 Int (5 (- Start_9 Start_14) (* Start_2 Start_3) (mod Start_9 Start_1) (ite StartBool_4 Start_4 Start_12)))
   (Start_13 Int (x (- Start_4) (div Start_1 Start) (mod Start_14 Start_14) (ite StartBool_4 Start_6 Start_11)))
   (StartBool_4 Bool (false true (not StartBool_5) (< Start Start_7) (= Start_3 Start_9) (>= Start_4 Start) (> Start_7 Start_10)))
   (Start_3 Int (0 1 y 2 4 5 (- Start) (- Start Start_1) (+ Start_1 Start_5) (mod Start_3 Start_4) (ite StartBool Start Start_3)))
   (Start_14 Int (0 5 (- Start_9 Start_9) (div Start_15 Start_10) (mod Start_5 Start_15)))
   (Start_12 Int (y (+ Start_7 Start_10) (* Start_6 Start_10) (div Start_7 Start_13) (mod Start_14 Start_11) (abs Start_9) (ite StartBool_1 Start_15 Start_9)))
   (Start_5 Int (2 (mod Start_5 Start_5)))
   (Start_2 Int (4 5 x (- Start_1) (+ Start_4 Start) (div Start_4 Start_5) (abs Start_3)))
   (Start_10 Int (1 y 3 4 0 2 (- Start_11 Start_7) (+ Start_3 Start_8) (* Start_4 Start_2) (mod Start_12 Start_8) (abs Start_6)))
   (StartBool_3 Bool (false (not StartBool_4) (or StartBool_3 StartBool_4) (< Start_5 Start_8) (<= Start_7 Start_4) (= Start_1 Start_5) (>= Start_1 Start_9) (> Start_3 Start_8)))
   (Start_1 Int (3 5 2 (- Start_6 Start_1) (+ Start_3 Start_4) (* Start_3 Start_7) (div Start_8 Start_6) (mod Start_2 Start_2)))
   (Start_7 Int (5 x (- Start_6) (+ Start_6 Start_4) (* Start_9 Start_1) (div Start_3 Start_6) (mod Start_6 Start_5) (abs Start_4)))
   (Start_6 Int (0 2 (- Start) (- Start_9 Start_3) (div Start_3 Start_6) (ite StartBool_1 Start_4 Start_4)))
   (Start_15 Int (2 (- Start_12 Start_14) (+ Start_4 Start_6) (* Start Start_8) (abs Start_9)))
   (StartBool_2 Bool (false true (or StartBool StartBool_3) (< Start_6 Start_7) (= Start_6 Start_1) (> Start_8 Start_5)))
   (StartBool_5 Bool (false (= Start_2 Start_9) (> Start_9 Start_2)))
   (Start_9 Int (1 (- Start_3) (* Start Start_9) (ite StartBool Start_8 Start_6)))
   (Start_4 Int (2 x 1 y (- Start) (+ Start_3 Start_4)))
   (Start_8 Int (3 1 4 5 (- Start_5) (- Start_6 Start_4) (+ Start_4 Start_4) (* Start_4 Start) (div Start_2 Start) (abs Start_5) (ite StartBool Start_4 Start_1)))
   (StartBool_1 Bool (false (or StartBool_2 StartBool_1) (= Start_2 Start_4) (>= Start_6 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- y 3) 5)))

(check-synth)
