(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_18 Int) (Start_17 Int) (Start_3 Int) (Start_4 Int) (Start_7 Int) (StartBool_6 Bool) (Start_15 Int) (Start_1 Int) (Start_16 Int) (StartBool_3 Bool) (Start_6 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_12 Int) (Start_5 Int) (Start_9 Int) (StartBool_5 Bool) (Start_8 Int) (StartBool_1 Bool) (Start_10 Int) (Start_11 Int) (Start_13 Int) (Start_14 Int))
  ((Start Int (3 (- Start_1) (- Start_2 Start_3) (* Start_2 Start_4) (div Start_5 Start) (mod Start_5 Start) (abs Start_4) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (true (or StartBool_4 StartBool_5) (= Start Start_2) (>= Start_15 Start_13)))
   (Start_2 Int (1 5 (- Start_1) (- Start_13 Start_12) (+ Start_12 Start_8) (ite StartBool_4 Start_18 Start_6)))
   (Start_18 Int (x 0 (- Start_1) (+ Start_11 Start_3) (* Start_1 Start_9) (mod Start_12 Start_5)))
   (Start_17 Int (x 1 0 (- Start_18) (- Start_13 Start_1) (+ Start_4 Start_6) (* Start_8 Start_18) (mod Start_1 Start_14)))
   (Start_3 Int (x 2 (- Start_2) (div Start_3 Start_9) (mod Start_4 Start_17) (abs Start_17)))
   (Start_4 Int (x (- Start_2) (- Start_15 Start_15) (div Start_1 Start_8) (mod Start_3 Start)))
   (Start_7 Int (5 y (- Start_1) (- Start_11 Start_12) (+ Start_10 Start_7) (div Start_14 Start_12) (mod Start_3 Start_15) (abs Start_4)))
   (StartBool_6 Bool (true false (and StartBool_4 StartBool_4) (= Start_12 Start_3) (>= Start_4 Start_7)))
   (Start_15 Int (2 (- Start_4 Start_3) (* Start_8 Start_14) (div Start_8 Start_7) (ite StartBool_6 Start_12 Start_9)))
   (Start_1 Int (x 1 (- Start_16) (* Start_6 Start_4) (abs Start_10)))
   (Start_16 Int (x (div Start_11 Start_7) (mod Start_13 Start_9) (ite StartBool_5 Start_15 Start_7)))
   (StartBool_3 Bool (false (<= Start_6 Start_1) (= Start_2 Start_4) (>= Start Start_6) (> Start Start_3)))
   (Start_6 Int (x (- Start_2) (- Start_5 Start_3) (* Start_2 Start_6) (div Start Start_4) (mod Start_1 Start_2)))
   (StartBool_4 Bool (false (or StartBool_3 StartBool_2) (<= Start_8 Start_10)))
   (StartBool_2 Bool (true false (not StartBool_2) (< Start_1 Start_1) (>= Start_6 Start_5)))
   (Start_12 Int (y 2 x (- Start_4) (- Start Start_10) (div Start_7 Start_2) (ite StartBool_1 Start_1 Start_12)))
   (Start_5 Int (5 (- Start_5 Start_6) (* Start_6 Start_7) (div Start_2 Start_2) (mod Start_6 Start_2) (ite StartBool_1 Start_3 Start_8)))
   (Start_9 Int (0 (- Start_11) (- Start Start_12) (+ Start_4 Start_8) (* Start_12 Start_13) (div Start_9 Start_7) (mod Start_3 Start_12)))
   (StartBool_5 Bool (false true (not StartBool_3) (>= Start_8 Start_1) (> Start_4 Start_16)))
   (Start_8 Int (2 3 0 (+ Start_9 Start_9) (div Start_10 Start_8) (mod Start_8 Start_3) (abs Start_2) (ite StartBool_4 Start_4 Start_8)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_2 StartBool_3) (< Start_3 Start_6) (= Start_3 Start_2) (> Start_6 Start_2)))
   (Start_10 Int (x (- Start) (- Start_2 Start_2) (* Start_7 Start) (mod Start_5 Start_9) (abs Start_9) (ite StartBool_1 Start_10 Start_11)))
   (Start_11 Int (2 x 3 1 (- Start_10) (- Start_11 Start_10) (+ Start_3 Start_4) (* Start_10 Start_2) (abs Start_9)))
   (Start_13 Int (x (- Start_1) (div Start_14 Start_4) (mod Start_8 Start_5) (abs Start_7)))
   (Start_14 Int (4 (- Start_3) (- Start_12 Start_9) (+ Start_1 Start_15) (* Start Start_16) (div Start Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 (- y))))

(check-synth)
