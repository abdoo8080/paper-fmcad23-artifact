(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_21 Int) (Start_12 Int) (Start_11 Int) (Start_10 Int) (Start_5 Int) (StartBool_2 Bool) (Start_17 Int) (StartBool_8 Bool) (Start_3 Int) (Start_14 Int) (Start_7 Int) (Start_1 Int) (Start_6 Int) (StartBool_1 Bool) (Start_2 Int) (Start_15 Int) (Start_4 Int) (Start_9 Int) (StartBool_3 Bool) (StartBool_5 Bool) (Start_18 Int) (StartBool_6 Bool) (Start_13 Int) (Start_8 Int) (Start_16 Int) (StartBool_4 Bool) (Start_19 Int) (Start_20 Int) (StartBool_7 Bool))
  ((Start Int (y (- Start Start) (mod Start_1 Start_2) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true false (not StartBool_8) (<= Start_17 Start_17)))
   (Start_21 Int (x 0 5 (div Start_4 Start_19) (abs Start_10)))
   (Start_12 Int (2 (- Start_12 Start) (* Start_3 Start_11) (abs Start_12)))
   (Start_11 Int (3 2 1 (* Start_6 Start_9) (abs Start_2) (ite StartBool_3 Start_11 Start_7)))
   (Start_10 Int (0 1 (- Start_4) (+ Start Start_10) (* Start_8 Start_8) (div Start Start_4) (abs Start_7) (ite StartBool_4 Start_11 Start_11)))
   (Start_5 Int (1 (- Start_1) (div Start_1 Start_5) (ite StartBool_2 Start Start_2)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_4) (or StartBool_2 StartBool_3) (>= Start_8 Start_1) (> Start_9 Start)))
   (Start_17 Int (x (- Start_12 Start_11) (+ Start_16 Start_18) (* Start_17 Start_15) (abs Start_17) (ite StartBool Start_1 Start_1)))
   (StartBool_8 Bool (false true (>= Start_6 Start_18) (> Start_21 Start_6)))
   (Start_3 Int (4 (- Start_3 Start) (+ Start_5 Start_7) (* Start Start_2) (mod Start_4 Start_3) (abs Start_1) (ite StartBool_1 Start_7 Start_3)))
   (Start_14 Int (0 3 (- Start_2) (- Start_15 Start_11) (+ Start_6 Start_14) (mod Start_8 Start_15)))
   (Start_7 Int (0 (- Start_3) (+ Start_6 Start_3) (div Start_7 Start_6) (mod Start_1 Start_3) (ite StartBool_2 Start_7 Start_2)))
   (Start_1 Int (4 (- Start_15) (- Start_6 Start_20) (* Start_19 Start_1) (div Start_18 Start_1) (abs Start_3)))
   (Start_6 Int (2 (- Start_3 Start_3) (* Start_6 Start_4) (abs Start) (ite StartBool Start_3 Start_5)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_2) (< Start Start_3) (<= Start_4 Start) (= Start_5 Start_6) (> Start_5 Start_5)))
   (Start_2 Int (3 (- Start_9) (- Start_14 Start_7) (+ Start_18 Start_11) (* Start_2 Start_5) (div Start_11 Start_13) (mod Start_19 Start_11)))
   (Start_15 Int (y 5 (- Start_11 Start_9) (mod Start_5 Start_16) (abs Start_7)))
   (Start_4 Int (3 (- Start_6) (- Start_6 Start) (+ Start_4 Start_6) (* Start_3 Start_6) (div Start_7 Start_3)))
   (Start_9 Int (0 (+ Start_10 Start) (* Start_3 Start_2) (div Start_9 Start_7) (ite StartBool_2 Start_9 Start_5)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_5) (< Start_9 Start_3) (<= Start_3 Start)))
   (StartBool_5 Bool (false (not StartBool_3) (and StartBool_5 StartBool_6) (or StartBool_6 StartBool_1) (<= Start_2 Start_3) (= Start_2 Start_1) (>= Start_5 Start_5)))
   (Start_18 Int (y (- Start_7) (+ Start_17 Start_16) (mod Start_1 Start_12)))
   (StartBool_6 Bool (false (not StartBool_5) (and StartBool_3 StartBool_6) (<= Start_12 Start_6) (= Start_13 Start_12) (>= Start_13 Start_1) (> Start_8 Start_5)))
   (Start_13 Int (1 x 2 (* Start_1 Start_8) (abs Start_11) (ite StartBool_4 Start_14 Start_1)))
   (Start_8 Int (x 1 (- Start_6) (- Start_8 Start_10) (+ Start_2 Start_11) (div Start_12 Start_12) (mod Start_7 Start_11)))
   (Start_16 Int (3 2 0 (div Start_6 Start_6) (mod Start_1 Start_17) (abs Start_15) (ite StartBool_5 Start_11 Start_13)))
   (StartBool_4 Bool (false (or StartBool_2 StartBool_4) (< Start_2 Start_10) (= Start_12 Start_5) (>= Start_2 Start_10)))
   (Start_19 Int (5 1 (- Start_8 Start_16) (mod Start_5 Start_16) (ite StartBool_3 Start_5 Start_9)))
   (Start_20 Int (4 3 0 x 2 y 1 5 (- Start_5) (* Start_4 Start_14) (abs Start_14) (ite StartBool_7 Start_11 Start_18)))
   (StartBool_7 Bool (true false (not StartBool_4) (and StartBool StartBool) (or StartBool_2 StartBool_8) (< Start_7 Start_18) (<= Start_4 Start_14) (>= Start_8 Start_12) (> Start_7 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 5 (div x 3))))

(check-synth)
