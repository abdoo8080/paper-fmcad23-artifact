(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_7 Int) (StartBool_1 Bool) (Start_3 Int) (Start_1 Int) (Start_4 Int) (Start_5 Int) (Start_2 Int) (Start_6 Int))
  ((Start Int (y x 4 (+ Start Start_1) (* Start Start_1) (mod Start_2 Start) (abs Start)))
   (StartBool Bool (false (< Start_7 Start_6)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_1) (<= Start_2 Start_1) (> Start_3 Start_4)))
   (Start_7 Int (y 5 (- Start_2) (- Start_5 Start_1) (+ Start_4 Start_7) (mod Start_7 Start_4) (abs Start_5) (ite StartBool_1 Start Start)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool)))
   (Start_3 Int (0 (- Start_4 Start_3) (+ Start_6 Start_2) (mod Start Start)))
   (Start_1 Int (0 (- Start_7) (* Start_6 Start_3) (div Start_5 Start_5) (abs Start_3)))
   (Start_4 Int (5 (* Start Start_3) (mod Start Start_4) (ite StartBool Start_4 Start_1)))
   (Start_5 Int (2 (- Start_1) (+ Start_4 Start_1) (* Start_3 Start_5) (div Start_1 Start_6) (mod Start Start_4) (ite StartBool Start Start_4)))
   (Start_2 Int (3 2 (- Start_2) (- Start_3 Start_4) (+ Start_1 Start_3) (* Start_1 Start_5) (abs Start_1) (ite StartBool Start_4 Start)))
   (Start_6 Int (2 0 (- Start_3 Start_2) (div Start_1 Start_1) (mod Start_1 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- (div (- 4) (abs x))) 2)))

(check-synth)
