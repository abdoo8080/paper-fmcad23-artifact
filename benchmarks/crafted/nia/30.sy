(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_3 Int) (Start_5 Int) (Start_4 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_7 Int) (Start_6 Int) (Start_2 Int))
  ((Start Int (0 2 x (- Start Start_1) (+ Start Start) (* Start Start) (mod Start_1 Start) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true (or StartBool_1 StartBool) (< Start_4 Start_3) (<= Start Start_4) (>= Start_2 Start_1)))
   (Start_1 Int (1 (* Start_4 Start) (abs Start_6) (ite StartBool Start_6 Start_5)))
   (Start_3 Int (5 (div Start_3 Start_5)))
   (Start_5 Int (0 (- Start Start_3) (* Start_4 Start_3) (abs Start) (ite StartBool_2 Start Start_5)))
   (Start_4 Int (4 y (- Start Start_1) (+ Start_3 Start_2) (abs Start_5) (ite StartBool_1 Start_3 Start_5)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (or StartBool_2 StartBool) (>= Start_4 Start_5)))
   (StartBool_2 Bool (true (< Start Start_4) (= Start_4 Start) (>= Start_2 Start_2) (> Start Start_3)))
   (Start_7 Int (2 (* Start_1 Start_2)))
   (Start_6 Int (5 2 (- Start_7) (div Start_1 Start) (mod Start_6 Start_7) (abs Start_5)))
   (Start_2 Int (3 5 4 (- Start_2 Start_1) (+ Start_3 Start_3) (* Start_4 Start_4) (mod Start_1 Start) (abs Start_4) (ite StartBool_2 Start Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 x)))

(check-synth)
