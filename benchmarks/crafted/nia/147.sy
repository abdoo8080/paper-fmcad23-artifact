(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_1 Int) (Start_4 Int) (Start_2 Int) (Start_14 Int) (Start_10 Int) (Start_3 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_6 Int) (Start_13 Int) (Start_5 Int) (Start_12 Int) (Start_7 Int) (StartBool_2 Bool) (Start_9 Int) (Start_8 Int) (StartBool_4 Bool) (Start_11 Int))
  ((Start Int (1 y 0 x 4 (- Start Start_1) (+ Start Start_2) (* Start_2 Start_3) (mod Start_4 Start_3) (ite StartBool Start_2 Start_2)))
   (StartBool Bool (true false (not StartBool_3) (or StartBool_3 StartBool_3) (<= Start_11 Start)))
   (Start_15 Int (2 (- Start_14 Start_2) (* Start_9 Start_12) (ite StartBool_2 Start_11 Start_7)))
   (Start_1 Int (x (- Start_6 Start_8) (+ Start_6 Start_9) (* Start_6 Start_12) (div Start_8 Start_5) (abs Start_13)))
   (Start_4 Int (y x (- Start Start_1) (ite StartBool Start_1 Start_4)))
   (Start_2 Int (0 x 5 1 (- Start_3) (+ Start_8 Start_5) (* Start_2 Start_8) (div Start_3 Start_1) (ite StartBool_2 Start_4 Start_1)))
   (Start_14 Int (y (- Start_10)))
   (Start_10 Int (y 3 x (- Start_4) (- Start_5 Start_5) (+ Start_11 Start_4) (mod Start_4 Start_5)))
   (Start_3 Int (y 1 2 5 4 (- Start Start) (+ Start_2 Start_5) (div Start_1 Start_1) (mod Start Start_3) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_3 Bool (true (or StartBool_2 StartBool_4) (>= Start_12 Start_15) (> Start_14 Start_1)))
   (StartBool_1 Bool (false (< Start_2 Start_3) (= Start_6 Start)))
   (Start_6 Int (0 (+ Start Start_1) (mod Start_1 Start_4) (abs Start_5)))
   (Start_13 Int (5 (- Start_12 Start_3) (* Start_11 Start_7) (div Start_11 Start_7) (mod Start_14 Start_9) (ite StartBool_1 Start_1 Start_10)))
   (Start_5 Int (5 (- Start_1) (- Start_4 Start_6) (+ Start_6 Start_6) (* Start_5 Start_5) (div Start_7 Start_2) (abs Start_2)))
   (Start_12 Int (3 1 (- Start_6) (mod Start Start_3)))
   (Start_7 Int (y (- Start_5) (+ Start_1 Start_2) (abs Start_5) (ite StartBool Start_1 Start_7)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_2) (< Start_7 Start_7) (<= Start_6 Start_4) (>= Start_6 Start_4)))
   (Start_9 Int (x y (- Start_8 Start_6) (+ Start_5 Start_2) (ite StartBool_1 Start_3 Start_10)))
   (Start_8 Int (3 y (- Start_1 Start_4) (+ Start_2 Start_9) (* Start_7 Start_6)))
   (StartBool_4 Bool (false true (and StartBool_4 StartBool_4) (< Start_6 Start_7) (<= Start_8 Start_2) (= Start_5 Start_2) (> Start_15 Start_12)))
   (Start_11 Int (0 3 x (- Start_7) (* Start_7 Start_1) (abs Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div 4 0) y)))

(check-synth)
