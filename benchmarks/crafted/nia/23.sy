(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_16 Int) (StartBool_3 Bool) (Start_9 Int) (Start_10 Int) (StartBool_1 Bool) (StartBool_6 Bool) (Start_3 Int) (Start_6 Int) (Start_5 Int) (Start_4 Int) (Start_13 Int) (Start_1 Int) (Start_2 Int) (Start_11 Int) (Start_12 Int) (StartBool_2 Bool) (Start_15 Int) (Start_7 Int) (StartBool_5 Bool) (Start_8 Int) (StartBool_4 Bool))
  ((Start Int (0 2 5 (- Start) (+ Start Start) (* Start Start_1) (abs Start) (ite StartBool Start_1 Start_1)))
   (StartBool Bool (true (not StartBool_6) (or StartBool StartBool_2) (<= Start_5 Start_14) (= Start_9 Start_3) (>= Start_15 Start_2) (> Start_4 Start_16)))
   (Start_14 Int (2 (- Start_5) (- Start_1 Start_2) (+ Start_11 Start_10) (* Start_5 Start_14) (abs Start_16) (ite StartBool_4 Start_15 Start_1)))
   (Start_16 Int (5 (- Start_1) (+ Start_3 Start_10) (div Start_4 Start_16) (abs Start_13) (ite StartBool_4 Start_5 Start_15)))
   (StartBool_3 Bool (true (not StartBool_2) (< Start_7 Start_4) (> Start_11 Start_4)))
   (Start_9 Int (0 1 3 2 (+ Start_9 Start_4) (mod Start_4 Start_10) (abs Start_2)))
   (Start_10 Int (x y (abs Start_2) (ite StartBool_3 Start_11 Start_3)))
   (StartBool_1 Bool (false true (or StartBool_2 StartBool_2) (<= Start_2 Start_3) (= Start_1 Start_1) (>= Start Start)))
   (StartBool_6 Bool (false true (not StartBool_5) (or StartBool_3 StartBool_2) (<= Start_9 Start_11) (= Start_10 Start_5) (>= Start_9 Start_11)))
   (Start_3 Int (0 2 (- Start Start_3) (+ Start_1 Start) (mod Start_4 Start_1) (abs Start_3) (ite StartBool_1 Start_2 Start_5)))
   (Start_6 Int (5 (- Start_2 Start_1) (mod Start_4 Start)))
   (Start_5 Int (0 5 (- Start_4) (* Start_1 Start_6) (mod Start_6 Start_3)))
   (Start_4 Int (2 (+ Start_4 Start_4) (* Start_2 Start_3) (mod Start_1 Start_2) (abs Start_6) (ite StartBool Start_2 Start_2)))
   (Start_13 Int (0 2 4 (- Start_5 Start_2) (+ Start_1 Start_4) (mod Start_2 Start_1) (ite StartBool_4 Start_13 Start_11)))
   (Start_1 Int (3 (- Start Start_1) (+ Start_1 Start) (div Start Start_1) (mod Start_1 Start_1) (ite StartBool_1 Start_1 Start)))
   (Start_2 Int (5 (- Start_5) (+ Start_3 Start_1) (* Start Start) (div Start_2 Start_4)))
   (Start_11 Int (0 (- Start_6 Start) (+ Start_4 Start_11) (* Start_7 Start_8) (abs Start_11) (ite StartBool_3 Start_8 Start_10)))
   (Start_12 Int (2 0 4 5 1 y (- Start) (* Start_13 Start_10) (mod Start_13 Start_8)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_2 StartBool_4) (< Start_1 Start_7) (<= Start Start) (= Start_7 Start_3)))
   (Start_15 Int (x (- Start_14) (* Start_1 Start_2) (ite StartBool_5 Start_11 Start_7)))
   (Start_7 Int (3 1 (- Start_2) (- Start_6 Start_1) (mod Start_8 Start_4)))
   (StartBool_5 Bool (false true (not StartBool_3) (and StartBool_6 StartBool) (or StartBool_6 StartBool_2) (<= Start_3 Start_5) (= Start_8 Start_12) (> Start_9 Start_13)))
   (Start_8 Int (x 2 y 3 5 1 (- Start_3) (- Start_3 Start_8) (mod Start_4 Start_8)))
   (StartBool_4 Bool (true false (and StartBool StartBool_1) (or StartBool_1 StartBool_5) (< Start_4 Start_3) (<= Start_9 Start_8) (= Start_10 Start) (>= Start_11 Start_8) (> Start_2 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs (* y y)))))

(check-synth)
