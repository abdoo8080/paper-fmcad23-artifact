(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_1 Int) (Start_13 Int) (StartBool_4 Bool) (Start_4 Int) (Start_8 Int) (Start_15 Int) (Start_7 Int) (StartBool_3 Bool) (Start_9 Int) (Start_2 Int) (StartBool_2 Bool) (Start_3 Int) (Start_6 Int) (Start_14 Int) (Start_5 Int) (StartBool_1 Bool) (Start_10 Int) (Start_11 Int) (Start_12 Int))
  ((Start Int (0 (- Start_1) (+ Start_2 Start_2) (* Start Start_1) (div Start_1 Start_3) (mod Start Start_1)))
   (StartBool Bool (true (not StartBool_4) (and StartBool_2 StartBool_5) (or StartBool_2 StartBool_5) (<= Start_6 Start_11) (= Start_13 Start_14) (>= Start_10 Start) (> Start_15 Start_6)))
   (StartBool_5 Bool (true (not StartBool_3) (and StartBool_1 StartBool_2) (< Start_3 Start_15) (<= Start_15 Start_2) (= Start_4 Start_9) (> Start_9 Start_14)))
   (Start_1 Int (x (- Start_13) (+ Start_5 Start_6) (* Start_13 Start_5) (div Start_13 Start_1) (mod Start_6 Start_14) (ite StartBool_2 Start_4 Start_3)))
   (Start_13 Int (x (- Start_9) (* Start_7 Start_4) (div Start_6 Start_12) (mod Start Start_6) (abs Start_9)))
   (StartBool_4 Bool (false true (<= Start_10 Start_1) (>= Start_12 Start_15)))
   (Start_4 Int (2 (- Start_9) (+ Start_5 Start_8) (ite StartBool Start_13 Start_13)))
   (Start_8 Int (1 y (- Start_4 Start_2) (+ Start_3 Start_10)))
   (Start_15 Int (3 0 5 2))
   (Start_7 Int (4 (- Start_6) (- Start_6 Start_3) (+ Start_8 Start_9) (mod Start_7 Start_10)))
   (StartBool_3 Bool (true (< Start_3 Start_5) (<= Start_4 Start_3) (= Start_6 Start_3) (> Start_5 Start_2)))
   (Start_9 Int (y 0 (* Start_5 Start_5) (div Start_7 Start_6) (abs Start_5) (ite StartBool Start_11 Start_4)))
   (Start_2 Int (y (- Start_3 Start_2) (abs Start_4) (ite StartBool_1 Start_1 Start_1)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_3) (or StartBool StartBool) (= Start_1 Start_3)))
   (Start_3 Int (0 (+ Start Start) (* Start Start)))
   (Start_6 Int (x (- Start) (abs Start_4)))
   (Start_14 Int (5 (- Start Start_3) (+ Start_2 Start_15) (abs Start_14) (ite StartBool_2 Start_13 Start_2)))
   (Start_5 Int (2 y (- Start_5) (- Start_5 Start_7) (+ Start_5 Start_7) (* Start_7 Start_3) (mod Start Start_2)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool) (> Start Start)))
   (Start_10 Int (2 3 (- Start_4 Start_6) (+ Start_2 Start_4) (div Start_2 Start) (mod Start_7 Start_2)))
   (Start_11 Int (y (- Start_7) (+ Start_7 Start_9) (mod Start_5 Start_6) (ite StartBool_2 Start_12 Start_1)))
   (Start_12 Int (x 3 (- Start_10) (+ Start_10 Start_6) (* Start_12 Start) (div Start_11 Start_7) (ite StartBool_2 Start_11 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 5 (+ 2 x))))

(check-synth)
