(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_20 Int) (Start_19 Int) (Start_18 Int) (Start_14 Int) (Start_15 Int) (Start_16 Int) (Start_12 Int) (StartBool_3 Bool) (Start_1 Int) (Start_13 Int) (Start_2 Int) (Start_17 Int) (Start_6 Int) (Start_3 Int) (Start_10 Int) (Start_5 Int) (StartBool_1 Bool) (Start_9 Int) (Start_4 Int) (Start_7 Int) (Start_8 Int) (Start_11 Int) (StartBool_2 Bool))
  ((Start Int (4 5 (- Start_1) (- Start_1 Start) (+ Start_1 Start) (* Start_1 Start_1) (div Start Start_2) (abs Start_1)))
   (StartBool Bool (true false (or StartBool_3 StartBool_4) (< Start_20 Start_15)))
   (StartBool_5 Bool (true (and StartBool_5 StartBool_5) (or StartBool_4 StartBool_3) (< Start_4 Start_2) (<= Start_20 Start_17) (>= Start_2 Start_4)))
   (StartBool_4 Bool (false true (and StartBool StartBool_5) (< Start_15 Start_18) (<= Start_1 Start_16) (= Start_7 Start_6) (>= Start_11 Start_5)))
   (Start_20 Int (y (- Start_17) (mod Start_7 Start_1) (abs Start_6) (ite StartBool Start_8 Start_13)))
   (Start_19 Int (2 (+ Start Start_6) (div Start_13 Start_3) (mod Start_9 Start_1) (ite StartBool_2 Start_7 Start_8)))
   (Start_18 Int (y 1 x 2 (- Start_18) (* Start_7 Start_13) (mod Start_19 Start_7) (abs Start_3) (ite StartBool_2 Start_10 Start_13)))
   (Start_14 Int (3 y (- Start_12) (- Start_1 Start_6) (* Start Start_9) (ite StartBool_3 Start_18 Start_1)))
   (Start_15 Int (1 (+ Start_5 Start_11) (mod Start_12 Start_1) (abs Start_16) (ite StartBool Start_8 Start_11)))
   (Start_16 Int (3 (- Start_17 Start_12) (+ Start_13 Start_2) (div Start Start_10) (mod Start_10 Start_3)))
   (Start_12 Int (5 3 (- Start_5) (- Start_11 Start_1) (+ Start_7 Start_11) (div Start Start_7) (ite StartBool_2 Start_2 Start)))
   (StartBool_3 Bool (true false (not StartBool_1) (or StartBool_1 StartBool_3) (<= Start_18 Start_10) (= Start_20 Start_17)))
   (Start_1 Int (0 2 4 (- Start_1) (- Start_7 Start_10) (* Start_14 Start_15)))
   (Start_13 Int (5 (- Start_6) (+ Start_10 Start) (* Start_5 Start_2) (mod Start_8 Start_8) (ite StartBool_2 Start_2 Start_3)))
   (Start_2 Int (2 3 4 (- Start_1 Start_2) (div Start_3 Start_3) (ite StartBool Start_3 Start)))
   (Start_17 Int (1 (- Start_16 Start_8) (+ Start_13 Start_3) (div Start_17 Start_6) (mod Start_15 Start_16) (abs Start_13)))
   (Start_6 Int (3 (- Start_2 Start_7) (div Start Start_2) (ite StartBool_1 Start Start_3)))
   (Start_3 Int (1 x (+ Start Start_4) (div Start_4 Start_1)))
   (Start_10 Int (2 (- Start_3) (- Start_10 Start_11) (+ Start_9 Start_8) (div Start_3 Start_9) (mod Start Start_10) (abs Start_4)))
   (Start_5 Int (0 (- Start_12) (- Start_3 Start_11) (+ Start_8 Start_8) (* Start_10 Start_10) (mod Start_11 Start_13)))
   (StartBool_1 Bool (false (and StartBool StartBool_1) (or StartBool_2 StartBool_2) (< Start_3 Start_6) (<= Start_5 Start_3) (= Start_8 Start_5) (>= Start Start_4)))
   (Start_9 Int (x (- Start_5) (- Start_7 Start_2) (+ Start_10 Start_4) (div Start Start_3) (mod Start_10 Start_7)))
   (Start_4 Int (y 4 (div Start_1 Start_5) (mod Start_2 Start_6) (abs Start_1)))
   (Start_7 Int (4 (- Start_9 Start_11) (abs Start)))
   (Start_8 Int (5 4 (- Start) (+ Start_6 Start_4) (abs Start_5)))
   (Start_11 Int (0 2 (div Start_1 Start_5)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_1 StartBool_2) (< Start_6 Start_2) (<= Start_7 Start_6) (= Start_4 Start_9) (>= Start_10 Start_6) (> Start_6 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 0 (- (div x 2)))))

(check-synth)
