(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_2 Bool) (Start_9 Int) (Start_2 Int) (Start_8 Int) (Start_6 Int) (Start_3 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_1 Int) (Start_5 Int) (Start_4 Int) (Start_7 Int) (StartBool_3 Bool) (StartBool_4 Bool))
  ((Start Int (0 (- Start_1) (+ Start_1 Start) (* Start Start_1) (div Start_1 Start) (mod Start Start_1) (abs Start_2)))
   (StartBool Bool (true (and StartBool_5 StartBool_1) (or StartBool_6 StartBool_3) (<= Start_1 Start_6) (= Start_6 Start_8) (>= Start Start)))
   (StartBool_6 Bool (true (and StartBool_5 StartBool_5) (or StartBool_2 StartBool_6) (= Start_9 Start) (>= Start_7 Start_5)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_1) (< Start_4 Start_5) (>= Start_2 Start)))
   (Start_9 Int (2 0 4 1 x 5 y 3 (+ Start Start_1) (mod Start Start_4) (abs Start_8) (ite StartBool_6 Start Start_3)))
   (Start_2 Int (3 5 2 (div Start_1 Start) (mod Start_3 Start)))
   (Start_8 Int (2 (- Start_2) (* Start_2 Start_5) (div Start_6 Start_3) (abs Start_7) (ite StartBool_4 Start_5 Start)))
   (Start_6 Int (0 2 5 x 3 (- Start_3) (- Start_3 Start_5) (div Start_3 Start_7) (ite StartBool_5 Start_2 Start_4)))
   (Start_3 Int (1 x (- Start_1 Start) (+ Start_3 Start_1) (* Start_1 Start) (div Start Start_2) (mod Start Start) (ite StartBool_1 Start_2 Start)))
   (StartBool_5 Bool (false (< Start_2 Start_4) (= Start_5 Start_6) (>= Start_1 Start_2)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_2) (<= Start Start_2) (= Start_1 Start)))
   (Start_1 Int (2 y (- Start_1) (+ Start_7 Start_7) (div Start_9 Start_6) (abs Start)))
   (Start_5 Int (1 0 5 4 y x 2 (div Start_3 Start) (abs Start_4) (ite StartBool_3 Start_5 Start_1)))
   (Start_4 Int (0 (* Start_5 Start_5) (div Start_4 Start_1) (mod Start_2 Start_2)))
   (Start_7 Int (2 y (- Start_6) (+ Start_2 Start_3) (* Start Start_6) (div Start_8 Start) (ite StartBool_1 Start_5 Start_8)))
   (StartBool_3 Bool (true (or StartBool_2 StartBool_4) (< Start Start_3) (<= Start_3 Start) (> Start_3 Start_6)))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool) (<= Start Start_8) (> Start_7 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div x (div 5 y))))

(check-synth)
