(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_6 Int) (StartBool_4 Bool) (Start_15 Int) (Start_13 Int) (Start_4 Int) (Start_3 Int) (Start_12 Int) (Start_7 Int) (Start_2 Int) (Start_9 Int) (Start_5 Int) (Start_10 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_8 Int) (Start_1 Int) (Start_11 Int) (StartBool_2 Bool))
  ((Start Int (x 2 (- Start Start_1) (mod Start_1 Start_2) (abs Start_3)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool_3) (< Start_14 Start_11) (<= Start_10 Start_4)))
   (Start_14 Int (4 (- Start_1) (+ Start_6 Start_5) (div Start_4 Start_2) (abs Start_13)))
   (Start_6 Int (5 4 (- Start_12) (mod Start_14 Start_11)))
   (StartBool_4 Bool (false true (or StartBool_4 StartBool_4) (>= Start_6 Start_14) (> Start_13 Start_5)))
   (Start_15 Int (5 (- Start_4 Start_15) (abs Start_7)))
   (Start_13 Int (0 (div Start_7 Start_6) (mod Start_9 Start_3) (abs Start_1)))
   (Start_4 Int (2 5 (- Start) (+ Start_1 Start_4) (* Start_2 Start_2) (abs Start_4) (ite StartBool Start_4 Start_1)))
   (Start_3 Int (x 5))
   (Start_12 Int (5 (- Start_7) (- Start Start_6) (div Start_8 Start_9) (abs Start_1)))
   (Start_7 Int (1 (- Start_8) (- Start_7 Start) (+ Start_9 Start_8) (div Start_6 Start_1) (abs Start_5)))
   (Start_2 Int (1 x 0 3 (ite StartBool Start_1 Start_4)))
   (Start_9 Int (3 (- Start_4) (- Start_5 Start_10) (+ Start_1 Start_9)))
   (Start_5 Int (0 (- Start_2) (+ Start_3 Start_5) (* Start_1 Start_15) (div Start_1 Start_7) (mod Start_7 Start_1) (abs Start_12) (ite StartBool_2 Start_4 Start_11)))
   (Start_10 Int (x 4 2 1 0 (- Start_7) (- Start_7 Start) (ite StartBool_1 Start_8 Start_6)))
   (StartBool_3 Bool (true false (not StartBool_4) (or StartBool_4 StartBool_3)))
   (StartBool_1 Bool (false (not StartBool) (or StartBool_2 StartBool) (<= Start_6 Start_12) (= Start_7 Start_12) (>= Start_4 Start_4) (> Start_12 Start_12)))
   (Start_8 Int (2 0 (- Start_4) (+ Start_11 Start_1) (abs Start_9)))
   (Start_1 Int (1 (- Start_2) (- Start_5 Start_4) (mod Start_6 Start_5) (abs Start_1) (ite StartBool_1 Start_7 Start_3)))
   (Start_11 Int (3 y 4 (- Start_9) (+ Start_4 Start_1) (div Start_5 Start_6) (abs Start)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_2) (or StartBool_2 StartBool) (< Start_13 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- (- 2) x) 2)))

(check-synth)
