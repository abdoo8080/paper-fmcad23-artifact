(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_3 Int) (StartBool_4 Bool) (Start_4 Int) (Start_5 Int) (Start_13 Int) (Start_14 Int) (Start_6 Int) (StartBool_1 Bool) (Start_1 Int) (Start_7 Int) (StartBool_5 Bool) (Start_12 Int) (Start_2 Int) (Start_9 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_15 Int) (Start_8 Int) (Start_10 Int) (Start_11 Int))
  ((Start Int (2 (- Start) (- Start_1 Start_1) (mod Start_1 Start)))
   (StartBool Bool (false true (not StartBool_5) (and StartBool_4 StartBool_4) (<= Start_15 Start_15) (= Start_9 Start_13)))
   (Start_16 Int (5 (- Start_8 Start_10) (+ Start_4 Start_4) (* Start_5 Start_11)))
   (Start_3 Int (x (- Start_15) (- Start_4 Start_15) (+ Start_15 Start_7) (abs Start_6)))
   (StartBool_4 Bool (true (and StartBool_1 StartBool_5) (< Start_8 Start_10)))
   (Start_4 Int (1 (- Start_4) (- Start_10 Start_11) (* Start_9 Start_3) (abs Start_1) (ite StartBool_4 Start_11 Start_13)))
   (Start_5 Int (1 (- Start_13) (- Start Start_7) (+ Start_10 Start_3) (* Start_13 Start_5)))
   (Start_13 Int (1 2 y 5 (- Start_12) (* Start_8 Start_2) (div Start_7 Start_4) (mod Start_9 Start_1) (ite StartBool_2 Start_6 Start_2)))
   (Start_14 Int (x 0 3 (- Start_12) (- Start_9 Start_7) (* Start_10 Start_14) (ite StartBool Start_8 Start)))
   (Start_6 Int (0 x 1 5 (* Start_2 Start_1) (abs Start_3) (ite StartBool_1 Start_1 Start_6)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (< Start Start_1) (>= Start_7 Start_3) (> Start_1 Start_3)))
   (Start_1 Int (4 0 5 (- Start_1) (- Start_1 Start) (+ Start_2 Start_1) (* Start_2 Start_2) (div Start_2 Start_1)))
   (Start_7 Int (2 3 4 x (- Start_6) (+ Start_4 Start_2) (mod Start_7 Start_8) (ite StartBool_2 Start_9 Start_2)))
   (StartBool_5 Bool (true (not StartBool) (<= Start_14 Start_13) (= Start_8 Start_12) (>= Start_11 Start_7)))
   (Start_12 Int (3 (- Start_7) (* Start_13 Start_8) (div Start_11 Start_8) (mod Start_3 Start_7)))
   (Start_2 Int (x 4 (- Start_1) (- Start_3 Start_2) (+ Start_4 Start_5) (* Start_3 Start_6) (div Start_5 Start_6) (abs Start_1)))
   (Start_9 Int (3 (- Start_9) (+ Start_4 Start_5) (* Start_6 Start_3) (abs Start_8)))
   (StartBool_2 Bool (false true (not StartBool_3) (= Start Start_4)))
   (StartBool_3 Bool (true (and StartBool StartBool) (<= Start_8 Start_8) (> Start Start_3)))
   (Start_15 Int (1 (- Start_16) (- Start_4 Start_2) (* Start_12 Start_8) (div Start_9 Start_1)))
   (Start_8 Int (0 (- Start_10) (* Start_1 Start_4) (div Start_6 Start_1)))
   (Start_10 Int (x (- Start_9) (+ Start_3 Start) (* Start_11 Start_5) (div Start_5 Start) (mod Start_10 Start_8) (abs Start_5)))
   (Start_11 Int (y 0 (- Start_2) (* Start_4 Start_2) (mod Start Start_4) (abs Start_12) (ite StartBool_2 Start_5 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div (- 4) (+ x 5)))))

(check-synth)
