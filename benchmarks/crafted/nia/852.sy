(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_2 Bool) (Start_2 Int) (Start_6 Int) (Start_4 Int) (Start_7 Int) (Start_5 Int) (Start_3 Int) (StartBool_3 Bool) (StartBool_1 Bool))
  ((Start Int (0 x (- Start_1 Start) (ite StartBool_1 Start_1 Start_1)))
   (StartBool Bool (false (and StartBool StartBool_2) (< Start_2 Start_5) (> Start Start)))
   (Start_1 Int (x 5 (+ Start_4 Start) (mod Start_7 Start_4) (abs Start_6)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_3 StartBool_3) (or StartBool_1 StartBool_2) (= Start_1 Start_1)))
   (Start_2 Int (y 0 (- Start_4) (+ Start_3 Start_2) (* Start_4 Start_3) (abs Start_1) (ite StartBool_2 Start_6 Start_2)))
   (Start_6 Int (3 4 x (- Start_6) (- Start Start_2) (div Start_4 Start_4) (abs Start_6)))
   (Start_4 Int (y (- Start_3 Start_6) (+ Start_3 Start_2) (div Start_1 Start_1) (abs Start_5)))
   (Start_7 Int (2 x 4 (- Start_4) (abs Start_5)))
   (Start_5 Int (1 4 (- Start_5)))
   (Start_3 Int (x 2 y (- Start_3) (+ Start_2 Start_4) (abs Start_5) (ite StartBool_1 Start_5 Start_1)))
   (StartBool_3 Bool (true (not StartBool_1) (<= Start_2 Start_3) (>= Start_5 Start_5) (> Start Start_3)))
   (StartBool_1 Bool (true false (not StartBool_1) (or StartBool_2 StartBool_3) (< Start_2 Start_3) (= Start_3 Start_2) (>= Start Start_1) (> Start_1 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod (div 5 (+ y 2)) 5))))

(check-synth)
