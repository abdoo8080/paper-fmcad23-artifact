(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_2 Bool) (StartBool_4 Bool) (Start_4 Int) (Start_8 Int) (Start_5 Int) (Start_9 Int) (Start_10 Int) (StartBool_3 Bool) (Start_3 Int) (Start_6 Int) (StartBool_1 Bool) (Start_2 Int) (Start_1 Int) (Start_7 Int) (Start_11 Int))
  ((Start Int (y (- Start_1) (- Start Start_2) (+ Start_2 Start) (* Start_3 Start_4) (mod Start_3 Start_3)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_2 StartBool_3) (< Start_10 Start_1) (>= Start_5 Start_8) (> Start_10 Start_4)))
   (StartBool_5 Bool (true false (and StartBool_3 StartBool_3) (or StartBool_4 StartBool) (< Start Start_10) (> Start_2 Start)))
   (StartBool_2 Bool (false (and StartBool_5 StartBool_5) (or StartBool_5 StartBool_1) (< Start_5 Start_5) (<= Start_1 Start)))
   (StartBool_4 Bool (false true (not StartBool_3) (and StartBool_4 StartBool) (< Start_2 Start_1) (>= Start_7 Start_1)))
   (Start_4 Int (5 1 2 0 (- Start_3) (- Start_3 Start) (+ Start_4 Start_5) (mod Start_5 Start_3)))
   (Start_8 Int (5 (- Start_1 Start_1) (+ Start_7 Start_7) (div Start_3 Start) (abs Start_9)))
   (Start_5 Int (2 0 (- Start_6) (- Start_1 Start_7) (+ Start_5 Start_4) (div Start_1 Start_8)))
   (Start_9 Int (1 (+ Start_1 Start_9) (* Start_9 Start_3) (div Start_9 Start_3) (abs Start) (ite StartBool_1 Start_9 Start_6)))
   (Start_10 Int (3 (+ Start_5 Start_1) (div Start_3 Start_5)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_1 StartBool_4) (or StartBool_3 StartBool_3) (>= Start_9 Start_5) (> Start_6 Start_6)))
   (Start_3 Int (3 5 x (- Start_9) (+ Start_4 Start_10) (* Start_7 Start_10) (div Start_10 Start) (mod Start_7 Start_9) (abs Start_1)))
   (Start_6 Int (4 (- Start_1 Start_4) (* Start_3 Start_6) (div Start Start_3) (abs Start_6) (ite StartBool Start_6 Start_5)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool StartBool_1) (< Start_7 Start_5) (> Start_8 Start)))
   (Start_2 Int (2 (+ Start_10 Start) (abs Start_3)))
   (Start_1 Int (x (- Start_11 Start_3) (+ Start_7 Start_6)))
   (Start_7 Int (4))
   (Start_11 Int (3 y x 2 (- Start Start_5) (+ Start_3 Start_1) (mod Start_9 Start_8) (abs Start_3) (ite StartBool Start Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 2 (div 1 0))))

(check-synth)
