(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_5 Bool) (Start_13 Int) (Start_3 Int) (Start_12 Int) (Start_9 Int) (Start_1 Int) (StartBool_1 Bool) (Start_2 Int) (Start_4 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_5 Int) (Start_7 Int) (Start_14 Int) (StartBool_2 Bool) (Start_6 Int) (Start_8 Int) (Start_10 Int) (Start_11 Int))
  ((Start Int (y 5 1 2 (div Start_1 Start_2) (abs Start_2) (ite StartBool Start_1 Start)))
   (StartBool Bool (false (not StartBool_5) (and StartBool StartBool) (< Start_13 Start_10) (<= Start Start_10) (>= Start_13 Start_13)))
   (StartBool_6 Bool (false (or StartBool_6 StartBool_1)))
   (StartBool_5 Bool (true false (or StartBool_6 StartBool_2) (<= Start Start_1)))
   (Start_13 Int (x (+ Start_3 Start_5) (* Start_4 Start_5) (div Start_10 Start_12)))
   (Start_3 Int (1 (- Start_10) (div Start_2 Start_3) (abs Start_3) (ite StartBool_4 Start_1 Start)))
   (Start_12 Int (2 (- Start_1) (abs Start_1) (ite StartBool Start_3 Start_9)))
   (Start_9 Int (0 4 x 3 2 (- Start_12 Start_12) (mod Start Start_7) (abs Start_8) (ite StartBool Start_4 Start_11)))
   (Start_1 Int (2 (- Start_13 Start_2) (+ Start_14 Start_14) (* Start Start_2) (abs Start_10) (ite StartBool_2 Start_14 Start_12)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool) (or StartBool_2 StartBool_1) (< Start_3 Start) (= Start_3 Start) (>= Start Start_5)))
   (Start_2 Int (2 4 y (- Start_2) (- Start_3 Start_1) (+ Start_3 Start) (* Start_3 Start_3) (div Start_1 Start_4) (mod Start Start_4) (ite StartBool Start Start_3)))
   (Start_4 Int (y (- Start_2) (- Start_2 Start) (+ Start_3 Start_4) (div Start_5 Start_1) (ite StartBool_1 Start_5 Start_2)))
   (StartBool_3 Bool (true (not StartBool_4) (or StartBool_3 StartBool_1) (< Start_4 Start_5) (<= Start_5 Start_5) (= Start_3 Start_1)))
   (StartBool_4 Bool (true false (not StartBool_4) (<= Start_5 Start_1) (= Start_6 Start_3) (> Start_6 Start_1)))
   (Start_5 Int (3 (+ Start_9 Start) (div Start Start_5) (mod Start_5 Start_10) (abs Start_6) (ite StartBool_3 Start_5 Start_9)))
   (Start_7 Int (5 (- Start_6) (+ Start_8 Start_3) (* Start Start_4)))
   (Start_14 Int (0 3 4 5 2 1 y x (- Start_1 Start_14) (+ Start_13 Start_10) (* Start_3 Start_7) (div Start_3 Start)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_1 StartBool_1) (or StartBool_3 StartBool) (= Start_3 Start)))
   (Start_6 Int (5 1 (- Start_7) (div Start_5 Start_5) (abs Start_7)))
   (Start_8 Int (y 1 x 2 4 3 (- Start_3)))
   (Start_10 Int (1 (- Start_11) (+ Start_9 Start_2) (* Start_6 Start_5) (div Start Start_10) (mod Start_1 Start_9) (abs Start_11) (ite StartBool_2 Start_3 Start_4)))
   (Start_11 Int (0 4 1 (- Start_6 Start_7) (* Start_7 Start_8) (mod Start_7 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod x 3))))

(check-synth)
