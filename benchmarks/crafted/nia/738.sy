(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_12 Int) (Start_11 Int) (Start_13 Int) (Start_3 Int) (StartBool_1 Bool) (StartBool_4 Bool) (StartBool_2 Bool) (StartBool_3 Bool) (Start_2 Int) (Start_10 Int) (Start_1 Int) (Start_8 Int) (Start_6 Int) (Start_15 Int) (Start_4 Int) (Start_7 Int) (StartBool_5 Bool) (Start_9 Int) (Start_5 Int))
  ((Start Int (4 (- Start Start_1) (div Start Start_1) (mod Start Start_2) (abs Start_1) (ite StartBool_1 Start_1 Start_3)))
   (StartBool Bool (true false (or StartBool_1 StartBool_2) (< Start_1 Start_12) (= Start_4 Start_12) (>= Start_3 Start_13)))
   (Start_14 Int (y (- Start_2) (- Start_10 Start_11) (* Start_2 Start_12) (mod Start_11 Start_15)))
   (Start_12 Int (x 0 2 1 3 (- Start_7 Start_11) (+ Start Start_3) (* Start_12 Start_3) (abs Start)))
   (Start_11 Int (4 3 0 2 1 (- Start_8) (div Start_6 Start_9)))
   (Start_13 Int (1 3 4 y 5 2 (+ Start_13 Start_12) (mod Start_14 Start_4) (abs Start_13) (ite StartBool_4 Start_15 Start_2)))
   (Start_3 Int (2 3 (- Start_1) (- Start_3 Start_2) (div Start_1 Start_1) (ite StartBool_1 Start_2 Start_3)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_2 StartBool_1) (<= Start_2 Start_3) (= Start_2 Start_2) (>= Start_2 Start_1) (> Start_1 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_1) (> Start_3 Start_2)))
   (StartBool_2 Bool (false true (or StartBool_2 StartBool_3) (< Start_1 Start_2) (= Start_3 Start_2) (> Start_2 Start)))
   (StartBool_3 Bool (false true (and StartBool_4 StartBool_2) (<= Start_4 Start_4) (= Start_1 Start_3)))
   (Start_2 Int (x (- Start_4) (+ Start_3 Start_2) (* Start_4 Start) (div Start_3 Start_1) (ite StartBool Start_4 Start_4)))
   (Start_10 Int (5 (- Start_11) (- Start_5 Start_12) (* Start_10 Start_9) (mod Start_2 Start_8) (ite StartBool_2 Start_3 Start_4)))
   (Start_1 Int (2 3 (- Start_3) (- Start_2 Start_2) (div Start_3 Start_4) (mod Start_4 Start_4) (abs Start_5) (ite StartBool_5 Start_2 Start_6)))
   (Start_8 Int (x (- Start_1 Start_7) (+ Start_5 Start) (* Start_2 Start_1) (div Start_5 Start_8) (mod Start_13 Start_11) (abs Start_1) (ite StartBool_2 Start_7 Start_3)))
   (Start_6 Int (5 3 4 (- Start Start_2) (+ Start_5 Start_5) (* Start_1 Start_3) (abs Start)))
   (Start_15 Int (1 x 4 (- Start_7 Start_11) (+ Start_7 Start_2) (* Start_8 Start_3) (mod Start_15 Start_3)))
   (Start_4 Int (2 (- Start Start_2) (mod Start_4 Start_2)))
   (Start_7 Int (y 4 (- Start_3) (+ Start_7 Start_3) (* Start_4 Start) (abs Start_7)))
   (StartBool_5 Bool (false true (or StartBool_5 StartBool_5) (<= Start_7 Start_4) (= Start_2 Start_4)))
   (Start_9 Int (x 5 y (- Start_10) (- Start_10 Start_6) (mod Start_11 Start_1) (abs Start_11) (ite StartBool_2 Start_9 Start_3)))
   (Start_5 Int (0 x (- Start_8) (- Start_8 Start_3) (* Start_2 Start_8) (div Start_9 Start_8) (mod Start Start_3) (abs Start) (ite StartBool_4 Start_3 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (+ y (* y (ite (< x 5) 3 2))))))

(check-synth)
