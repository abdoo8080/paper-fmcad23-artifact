(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_15 Int) (Start_1 Int) (Start_14 Int) (Start_2 Int) (Start_3 Int) (Start_5 Int) (StartBool_8 Bool) (Start_11 Int) (StartBool_6 Bool) (Start_4 Int) (Start_13 Int) (StartBool_7 Bool) (StartBool_1 Bool) (Start_8 Int) (StartBool_3 Bool) (Start_6 Int) (Start_12 Int) (StartBool_5 Bool) (Start_9 Int) (StartBool_4 Bool) (Start_7 Int) (StartBool_2 Bool) (Start_10 Int))
  ((Start Int (3 (- Start_1) (* Start Start_2) (mod Start_1 Start) (abs Start_3) (ite StartBool Start_1 Start_4)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_2 StartBool_5) (or StartBool_8 StartBool_6) (< Start_11 Start_7) (> Start_16 Start_16)))
   (Start_16 Int (5 (+ Start_4 Start_3) (mod Start_6 Start_14) (abs Start_14)))
   (Start_15 Int (x 4 (- Start_7) (- Start_8 Start_5) (+ Start_6 Start_1) (* Start_15 Start_6) (div Start_11 Start_3) (mod Start_7 Start_16) (abs Start_3) (ite StartBool Start_9 Start_1)))
   (Start_1 Int (3 1 (- Start_8) (- Start_14 Start_14) (div Start_2 Start_9) (mod Start_15 Start_13) (abs Start_4) (ite StartBool_4 Start_6 Start_4)))
   (Start_14 Int (5 (- Start_6) (+ Start_13 Start_9) (div Start_5 Start_10) (ite StartBool_6 Start_14 Start_3)))
   (Start_2 Int (5 (+ Start_13 Start_8) (abs Start_5)))
   (Start_3 Int (4 (- Start_4) (+ Start Start_11) (* Start Start_11) (div Start_2 Start_9) (mod Start_12 Start_5) (ite StartBool Start_2 Start_2)))
   (Start_5 Int (0 y (- Start_10) (+ Start_7 Start_3) (abs Start_8)))
   (StartBool_8 Bool (true (not StartBool) (= Start_11 Start_12) (> Start_11 Start_5)))
   (Start_11 Int (2 (- Start_5 Start_1) (* Start_8 Start_12) (div Start_8 Start_6) (mod Start_2 Start_6) (abs Start_9) (ite StartBool_8 Start_2 Start_6)))
   (StartBool_6 Bool (true false (not StartBool_7) (<= Start_7 Start_2) (= Start_11 Start_9) (> Start_2 Start_12)))
   (Start_4 Int (1 x (+ Start_5 Start) (div Start_1 Start_1) (mod Start_3 Start_1) (abs Start_5) (ite StartBool_1 Start_2 Start)))
   (Start_13 Int (x 3 2 0 (- Start_7 Start_3) (+ Start Start_1) (mod Start_10 Start) (abs Start_9) (ite StartBool_5 Start_14 Start_6)))
   (StartBool_7 Bool (true false (<= Start_5 Start_8) (= Start_6 Start) (> Start_9 Start_10)))
   (StartBool_1 Bool (true false (not StartBool_1) (or StartBool_2 StartBool_3) (< Start_1 Start_5) (>= Start_1 Start_4) (> Start Start_5)))
   (Start_8 Int (0 3 (- Start_9) (- Start_6 Start_3) (* Start_4 Start_2) (div Start Start_8) (ite StartBool_5 Start_3 Start_6)))
   (StartBool_3 Bool (false (or StartBool_3 StartBool_1) (> Start_3 Start_6)))
   (Start_6 Int (x 4 y (div Start_4 Start_1) (mod Start_5 Start) (abs Start_4) (ite StartBool_4 Start_7 Start_5)))
   (Start_12 Int (5 2 3 (- Start_10 Start_11) (div Start_2 Start_2)))
   (StartBool_5 Bool (false true (not StartBool_1) (>= Start_3 Start_2)))
   (Start_9 Int (x 0 (* Start Start_4) (div Start_9 Start_2)))
   (StartBool_4 Bool (true (not StartBool_1) (and StartBool StartBool_3) (< Start_1 Start_8) (<= Start_6 Start_4) (= Start_4 Start_7) (> Start Start_2)))
   (Start_7 Int (4 2 1 (- Start_6) (- Start_3 Start_2) (div Start_1 Start_7)))
   (StartBool_2 Bool (true false (and StartBool_6 StartBool_7) (or StartBool_2 StartBool_4) (<= Start_6 Start_6) (>= Start_3 Start_4)))
   (Start_10 Int (2 (- Start_9) (- Start_10 Start_10) (+ Start_8 Start_8) (* Start_8 Start_3) (mod Start_7 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (+ 1 5) 3)))

(check-synth)
