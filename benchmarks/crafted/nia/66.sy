(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_1 Int) (Start_14 Int) (Start_15 Int) (Start_2 Int) (Start_13 Int) (Start_6 Int) (Start_11 Int) (Start_8 Int) (StartBool_1 Bool) (Start_10 Int) (Start_5 Int) (Start_7 Int) (Start_3 Int) (Start_9 Int) (Start_4 Int) (StartBool_2 Bool) (Start_12 Int))
  ((Start Int (1 3 y 0 (- Start_1) (- Start_2 Start_1) (+ Start_2 Start_2) (* Start_2 Start_3) (div Start_4 Start_4) (mod Start_5 Start_2) (abs Start_2) (ite StartBool_1 Start_6 Start_7)))
   (StartBool Bool (true false (not StartBool_1) (< Start_13 Start_15) (= Start_1 Start_9) (>= Start_16 Start_6)))
   (Start_16 Int (x (- Start_12 Start_7) (* Start_2 Start_9) (div Start_8 Start_11) (mod Start_14 Start_7) (abs Start_16) (ite StartBool Start_14 Start_1)))
   (Start_1 Int (3 (+ Start_1 Start_3) (* Start_7 Start_10) (mod Start_1 Start_15) (abs Start_8) (ite StartBool_2 Start_4 Start_10)))
   (Start_14 Int (1 (- Start_13 Start_14) (* Start_11 Start_4)))
   (Start_15 Int (1 (* Start_11 Start) (div Start_3 Start_3) (abs Start_12) (ite StartBool Start Start_4)))
   (Start_2 Int (3 y (- Start_9) (+ Start_5 Start_7) (* Start_14 Start_11) (mod Start_15 Start) (ite StartBool Start_3 Start_7)))
   (Start_13 Int (2 1 (+ Start_12 Start_9) (* Start_6 Start_8) (mod Start_1 Start_1) (abs Start_4) (ite StartBool_2 Start_3 Start_1)))
   (Start_6 Int (3 5 y 2 (- Start_8) (+ Start_6 Start_8) (* Start_1 Start_8) (div Start_6 Start_3) (mod Start_7 Start) (ite StartBool_1 Start_5 Start_3)))
   (Start_11 Int (3 (- Start_5) (+ Start_8 Start_7) (mod Start_5 Start_9) (ite StartBool_2 Start_3 Start_12)))
   (Start_8 Int (5 (- Start_1) (+ Start_5 Start) (div Start Start_7) (mod Start Start_4) (abs Start_7) (ite StartBool_1 Start_7 Start_2)))
   (StartBool_1 Bool (false (< Start_9 Start_6) (<= Start_2 Start_7) (>= Start_10 Start_9) (> Start_1 Start_7)))
   (Start_10 Int (0 x (- Start_10 Start_1) (div Start_1 Start_7) (ite StartBool Start_8 Start_6)))
   (Start_5 Int (0 (mod Start_7 Start_2)))
   (Start_7 Int (3 (+ Start_1 Start_2) (* Start_7 Start) (mod Start_2 Start_5)))
   (Start_3 Int (3 (- Start_11) (* Start_1 Start_7) (div Start_2 Start_4) (abs Start_11) (ite StartBool_2 Start_1 Start)))
   (Start_9 Int (4 0 (* Start_2 Start_9) (mod Start_1 Start_2) (abs Start_9)))
   (Start_4 Int (2 (* Start_9 Start_7) (mod Start_1 Start_8) (ite StartBool_2 Start Start_4)))
   (StartBool_2 Bool (true false (not StartBool_1) (or StartBool StartBool) (< Start_9 Start_6) (<= Start_1 Start) (>= Start_1 Start_3)))
   (Start_12 Int (2 (- Start_1) (- Start_10 Start_3) (+ Start_1 Start_10) (div Start_8 Start_3) (mod Start Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (+ 4 4) y)))

(check-synth)
