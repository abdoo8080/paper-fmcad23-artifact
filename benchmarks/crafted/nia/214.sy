(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (Start_1 Int) (Start_2 Int) (StartBool_4 Bool) (Start_3 Int) (Start_16 Int) (Start_13 Int) (Start_12 Int) (Start_4 Int) (Start_9 Int) (Start_19 Int) (Start_15 Int) (Start_7 Int) (StartBool_2 Bool) (Start_8 Int) (StartBool_5 Bool) (StartBool_1 Bool) (StartBool_3 Bool) (Start_6 Int) (Start_10 Int) (Start_18 Int) (Start_11 Int) (Start_17 Int) (Start_5 Int) (Start_14 Int))
  ((Start Int (y (- Start_1) (+ Start_2 Start_1) (* Start_1 Start) (mod Start Start_1) (abs Start_3) (ite StartBool_1 Start_4 Start_2)))
   (StartBool Bool (false (< Start_18 Start_18) (<= Start_4 Start_7) (>= Start_10 Start_5)))
   (Start_20 Int (2 (- Start_2) (* Start_4 Start) (ite StartBool Start_8 Start_12)))
   (Start_1 Int (1 (- Start_1 Start_13) (div Start_13 Start_20) (mod Start Start_7)))
   (Start_2 Int (2 5 (- Start_2 Start_10) (div Start_15 Start_12) (ite StartBool_5 Start_5 Start_8)))
   (StartBool_4 Bool (false (not StartBool_3) (and StartBool_3 StartBool_1) (or StartBool_2 StartBool) (<= Start_2 Start_13) (= Start Start_15) (>= Start Start_10) (> Start_9 Start_17)))
   (Start_3 Int (0 1 (- Start_3) (- Start_6 Start_19) (+ Start_7 Start_19) (div Start_18 Start_19) (mod Start_13 Start_4) (abs Start_12)))
   (Start_16 Int (1 2 (+ Start_10 Start_2) (div Start_9 Start_11) (abs Start_17) (ite StartBool Start_13 Start_10)))
   (Start_13 Int (3 2 (- Start_16) (* Start_5 Start_17) (div Start Start_1) (mod Start_17 Start_13) (abs Start_11)))
   (Start_12 Int (4 y (- Start_4) (- Start_11 Start_11) (+ Start_11 Start_5) (* Start_13 Start_7) (div Start_1 Start_9) (mod Start_11 Start_3) (ite StartBool_2 Start_4 Start_6)))
   (Start_4 Int (1 x (- Start_4) (+ Start_4 Start_5) (div Start Start_4) (mod Start_5 Start_2) (ite StartBool Start_6 Start_5)))
   (Start_9 Int (2 y x (- Start Start_5) (abs Start_10)))
   (Start_19 Int (x (* Start_6 Start_18) (mod Start_10 Start_2) (ite StartBool_4 Start_5 Start_5)))
   (Start_15 Int (2 3 x 5 4 (- Start_13 Start_9) (mod Start_9 Start_9) (ite StartBool_1 Start_6 Start_15)))
   (Start_7 Int (4 (- Start_8) (div Start_1 Start_3)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool StartBool_2) (or StartBool_3 StartBool_2) (< Start_8 Start_2) (<= Start_10 Start_10)))
   (Start_8 Int (3 5 1 (- Start_9) (- Start_10 Start_2) (+ Start Start_8) (div Start_6 Start_1) (mod Start_7 Start_1)))
   (StartBool_5 Bool (true false (and StartBool_4 StartBool_5) (or StartBool_5 StartBool_4) (< Start_1 Start_19) (= Start_3 Start_18) (> Start_4 Start_18)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_2) (>= Start_4 Start_6) (> Start_18 Start_16)))
   (StartBool_3 Bool (false true (< Start_8 Start_2) (<= Start_14 Start_11) (>= Start_13 Start_1)))
   (Start_6 Int (1 (- Start_3) (- Start_2 Start_3) (+ Start_5 Start_5) (* Start_5 Start_3) (div Start_2 Start_3) (ite StartBool_1 Start_5 Start_7)))
   (Start_10 Int (x (mod Start_11 Start_11) (ite StartBool_1 Start_11 Start_3)))
   (Start_18 Int (3 (- Start_15 Start_10) (* Start_4 Start_5) (div Start_1 Start_3) (mod Start_15 Start_5) (ite StartBool_3 Start_12 Start_10)))
   (Start_11 Int (0 (* Start_11 Start_3) (abs Start)))
   (Start_17 Int (4 (- Start Start_3) (+ Start_2 Start_4) (mod Start_12 Start_4)))
   (Start_5 Int (x 2 0 3 (+ Start_10 Start_8) (* Start_3 Start_4) (mod Start_12 Start_7) (abs Start_10) (ite StartBool Start_5 Start_4)))
   (Start_14 Int (0 5 2 (+ Start_3 Start_2) (* Start_15 Start_15) (div Start_13 Start_13) (mod Start_5 Start_12) (abs Start_7) (ite StartBool_2 Start_4 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (ite (= x y) (- (+ y 3) (mod 2 y)) x))))

(check-synth)
