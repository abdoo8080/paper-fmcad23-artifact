(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_4 Bool) (Start_10 Int) (StartBool_5 Bool) (Start_7 Int) (Start_1 Int) (Start_6 Int) (Start_2 Int) (Start_11 Int) (Start_4 Int) (Start_3 Int) (Start_8 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_9 Int) (StartBool_2 Bool) (Start_5 Int))
  ((Start Int (0 (- Start) (- Start_1 Start) (* Start_1 Start_1) (mod Start_1 Start)))
   (StartBool Bool (true (not StartBool_2) (or StartBool_4 StartBool_5) (< Start_1 Start_2) (<= Start_6 Start_1) (>= Start_3 Start_7) (> Start_1 Start_1)))
   (StartBool_6 Bool (false (or StartBool_4 StartBool_2) (<= Start_3 Start_3) (= Start_8 Start_9) (>= Start Start_10) (> Start_5 Start_11)))
   (StartBool_4 Bool (false (not StartBool_1) (and StartBool StartBool_6) (or StartBool_5 StartBool_5) (<= Start_11 Start_4) (= Start_7 Start_6)))
   (Start_10 Int (y (- Start_11) (div Start_9 Start_3) (abs Start_7) (ite StartBool Start Start_8)))
   (StartBool_5 Bool (false true (and StartBool_2 StartBool_5) (<= Start Start_9) (= Start_3 Start_10) (>= Start_1 Start_1) (> Start_5 Start_5)))
   (Start_7 Int (0 (+ Start_5 Start_8) (* Start_4 Start_6) (div Start_4 Start_3) (abs Start)))
   (Start_1 Int (5 (- Start_1) (- Start Start) (abs Start_2)))
   (Start_6 Int (1 (- Start_2 Start_3) (+ Start_7 Start_1) (mod Start_5 Start_7) (abs Start)))
   (Start_2 Int (5 (- Start_1) (* Start_2 Start_3)))
   (Start_11 Int (2 (- Start_10) (+ Start_6 Start_3) (* Start_5 Start_2) (div Start_1 Start_8) (mod Start_5 Start_1) (abs Start)))
   (Start_4 Int (3 4 y x 2 (- Start_1 Start_6) (mod Start_4 Start_9)))
   (Start_3 Int (2 (- Start_4) (+ Start_5 Start_3) (* Start_3 Start_6) (ite StartBool Start Start)))
   (Start_8 Int (4 (abs Start_7) (ite StartBool_1 Start_6 Start_3)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_2 StartBool_2) (< Start_5 Start_5) (= Start_1 Start_8) (>= Start_1 Start_9) (> Start_8 Start_8)))
   (StartBool_1 Bool (true (not StartBool_2) (< Start_5 Start_9)))
   (Start_9 Int (5 (- Start_5) (* Start_4 Start_2)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_3) (or StartBool_2 StartBool_2) (< Start Start_7) (<= Start_3 Start_5) (> Start Start)))
   (Start_5 Int (y 0 (- Start_2) (+ Start_2 Start_9) (div Start Start_1) (mod Start_9 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod y 5))))

(check-synth)
