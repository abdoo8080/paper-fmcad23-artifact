(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_10 Int) (Start_11 Int) (Start_2 Int) (StartBool_1 Bool) (Start_7 Int) (Start_4 Int) (Start_3 Int) (Start_8 Int) (Start_1 Int) (StartBool_2 Bool) (Start_6 Int) (Start_5 Int) (Start_9 Int))
  ((Start Int (5 (- Start Start_1) (* Start_2 Start_1) (abs Start_1)))
   (StartBool Bool (true false (and StartBool_2 StartBool_3) (< Start_1 Start_2) (<= Start_7 Start_10) (>= Start_8 Start_6) (> Start_7 Start_11)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool StartBool_3) (< Start_7 Start_1) (= Start_2 Start_9) (> Start_1 Start_10)))
   (Start_10 Int (1 (- Start_1 Start_5) (+ Start_10 Start) (abs Start_11)))
   (Start_11 Int (1 (- Start_4) (div Start_8 Start_3) (ite StartBool_2 Start_11 Start_7)))
   (Start_2 Int (y (- Start_3) (div Start Start_1) (mod Start_4 Start_2) (abs Start_4) (ite StartBool Start_1 Start_1)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool StartBool_1) (<= Start_6 Start_5) (= Start_1 Start) (> Start_6 Start_8)))
   (Start_7 Int (3 (+ Start Start_4) (* Start_3 Start_5) (mod Start_3 Start_2) (ite StartBool_1 Start_5 Start)))
   (Start_4 Int (3 4 5 0 1 2 (+ Start_3 Start_4) (div Start_4 Start_4) (mod Start_2 Start_1)))
   (Start_3 Int (1 2 3 (- Start_1) (- Start Start_5) (* Start_2 Start_6) (div Start_6 Start_1) (abs Start_7)))
   (Start_8 Int (3 2 (+ Start_5 Start_6) (* Start_6 Start_8) (mod Start_7 Start_1)))
   (Start_1 Int (x (- Start_2) (+ Start_4 Start_6) (div Start_7 Start_3)))
   (StartBool_2 Bool (true (or StartBool_1 StartBool_2) (<= Start_5 Start_1) (= Start_5 Start_6)))
   (Start_6 Int (2 0 5 y 3 1 x (- Start_5 Start_3) (* Start_8 Start_3) (abs Start_6)))
   (Start_5 Int (0 y 1 x (- Start_9 Start_9) (+ Start_4 Start) (abs Start_4)))
   (Start_9 Int (1 3 (- Start_1) (div Start_4 Start_2) (abs Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 3 0))))

(check-synth)
