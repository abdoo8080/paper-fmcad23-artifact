(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (Start_2 Int) (Start_1 Int))
  ((Start Int (0 (+ Start Start_1) (* Start_1 Start_1) (mod Start Start)))
   (StartBool Bool (true false (<= Start Start) (> Start_2 Start_3)))
   (Start_3 Int (5 (- Start_1) (div Start_2 Start_1) (abs Start_2) (ite StartBool Start_1 Start_2)))
   (Start_2 Int (1 4 (- Start_3 Start) (* Start Start_1) (div Start_2 Start_1) (abs Start_1)))
   (Start_1 Int (4 (- Start Start_1) (+ Start Start) (* Start_2 Start_2) (div Start_2 Start_1) (mod Start_2 Start_1) (abs Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod x y) (abs y))))

(check-synth)
