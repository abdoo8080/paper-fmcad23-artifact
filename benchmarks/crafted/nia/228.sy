(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_7 Int) (StartBool_1 Bool) (Start_3 Int) (Start_11 Int) (Start_2 Int) (StartBool_2 Bool) (Start_5 Int) (Start_6 Int) (Start_4 Int) (Start_1 Int) (Start_8 Int) (Start_9 Int) (Start_10 Int))
  ((Start Int (0 (- Start_1) (+ Start_2 Start_2) (mod Start_1 Start_3) (abs Start_2)))
   (StartBool Bool (false (and StartBool_1 StartBool) (or StartBool_1 StartBool_1) (= Start_3 Start_3)))
   (Start_7 Int (2 (- Start_10 Start) (mod Start_9 Start_9)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (< Start_3 Start_7) (<= Start Start_4) (>= Start_8 Start_2)))
   (Start_3 Int (1 0 (mod Start Start_2)))
   (Start_11 Int (0 1 x 2 5 4 y (- Start_9) (- Start_5 Start_7) (* Start_3 Start)))
   (Start_2 Int (3 x 5 (- Start Start) (mod Start_4 Start_2)))
   (StartBool_2 Bool (false (not StartBool) (= Start Start_9) (>= Start Start_11) (> Start_11 Start_6)))
   (Start_5 Int (2 x 4 (- Start_4 Start_5) (+ Start_6 Start_3) (* Start_6 Start_1) (div Start_6 Start_2) (mod Start_6 Start_1) (abs Start) (ite StartBool Start_6 Start_2)))
   (Start_6 Int (1 (- Start) (- Start Start_5)))
   (Start_4 Int (y (- Start_2) (- Start_2 Start_4) (div Start_4 Start_1) (abs Start_4)))
   (Start_1 Int (3 1 0 (- Start_3 Start) (+ Start_3 Start_3) (* Start_5 Start_1)))
   (Start_8 Int (x (+ Start_1 Start_4) (abs Start_5) (ite StartBool_1 Start_1 Start_9)))
   (Start_9 Int (1 (- Start_10) (div Start_10 Start_11) (mod Start_5 Start_4)))
   (Start_10 Int (4 (- Start_2) (- Start Start_2) (+ Start_11 Start_3) (* Start_11 Start_2) (ite StartBool_2 Start_7 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 x)))

(check-synth)
