(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_3 Int) (StartBool_1 Bool) (Start_1 Int) (Start_2 Int))
  ((Start Int (3 1 5 0 4 2 (+ Start_1 Start_2) (* Start_1 Start) (mod Start Start)))
   (StartBool Bool (true (not StartBool_1) (= Start_2 Start_1)))
   (Start_4 Int (4 (- Start_1) (* Start_2 Start_2) (mod Start_4 Start_2)))
   (Start_3 Int (2 (div Start_4 Start_4) (abs Start_1)))
   (StartBool_1 Bool (true (not StartBool_1) (or StartBool_1 StartBool) (>= Start_3 Start_3) (> Start_1 Start_3)))
   (Start_1 Int (3 (+ Start Start_2) (ite StartBool Start_2 Start_1)))
   (Start_2 Int (1 (- Start_2) (* Start Start_1) (abs Start_1) (ite StartBool Start Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (- 1 (div x y)))))

(check-synth)
