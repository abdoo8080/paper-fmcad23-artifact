(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (Start_11 Int) (StartBool_5 Bool) (Start_10 Int) (StartBool_1 Bool) (Start_7 Int) (Start_4 Int) (StartBool_4 Bool) (Start_5 Int) (Start_2 Int) (Start_6 Int) (Start_3 Int) (Start_12 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_8 Int) (Start_1 Int))
  ((Start Int (1 2 (+ Start_1 Start_2) (* Start Start_1) (mod Start_2 Start_2)))
   (StartBool Bool (false true (< Start_8 Start_3) (<= Start_3 Start_12) (> Start_6 Start_10)))
   (Start_9 Int (2 y (- Start_8 Start_12) (+ Start_7 Start) (div Start_12 Start_11) (mod Start Start_5)))
   (Start_11 Int (5 (- Start_6 Start_3) (+ Start_8 Start_10) (* Start Start_11) (abs Start_8) (ite StartBool Start_11 Start)))
   (StartBool_5 Bool (true (not StartBool_2) (and StartBool StartBool_2) (<= Start_11 Start_8) (>= Start_5 Start_7)))
   (Start_10 Int (1 5 y x (mod Start_8 Start_7) (abs Start_10)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_2 StartBool) (< Start_1 Start_3) (<= Start_4 Start_2) (= Start_2 Start_3)))
   (Start_7 Int (3 (- Start_8) (- Start_2 Start_4) (* Start_8 Start) (mod Start Start_1)))
   (Start_4 Int (3 1 0 4 (- Start_4) (- Start_5 Start_1) (* Start_6 Start) (abs Start_2)))
   (StartBool_4 Bool (false (and StartBool_5 StartBool) (or StartBool_5 StartBool_3) (< Start_3 Start_10) (<= Start_8 Start_7)))
   (Start_5 Int (x (- Start_6 Start_5) (abs Start_4)))
   (Start_2 Int (5 4 y (- Start) (- Start_2 Start_1) (+ Start_1 Start_2) (* Start_2 Start) (ite StartBool_1 Start_2 Start)))
   (Start_6 Int (0 1 (- Start Start_3) (div Start_5 Start_7) (mod Start_6 Start)))
   (Start_3 Int (2 x (- Start_3) (* Start_6 Start_4) (ite StartBool Start_6 Start_7)))
   (Start_12 Int (y x 2 0 (- Start_9 Start) (+ Start_1 Start_5) (div Start_7 Start_7) (mod Start_10 Start_12) (ite StartBool_3 Start_12 Start_2)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool_2 StartBool) (or StartBool StartBool_4) (> Start_1 Start_2)))
   (StartBool_2 Bool (true (not StartBool_1) (< Start_4 Start_3) (<= Start Start_7) (= Start_7 Start_5) (>= Start_1 Start_8)))
   (Start_8 Int (x 4 (- Start_7) (mod Start Start_2) (abs Start_7)))
   (Start_1 Int (x 0 1 (* Start_4 Start_2) (div Start_8 Start_8) (mod Start_2 Start_1) (abs Start_9) (ite StartBool_3 Start Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- y 1) x)))

(check-synth)
