(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_4 Int) (StartBool_2 Bool) (Start_5 Int) (Start_3 Int) (Start_9 Int) (Start_6 Int) (StartBool_1 Bool) (Start_8 Int) (Start_7 Int) (Start_10 Int) (Start_1 Int))
  ((Start Int (1 3 (- Start) (+ Start_1 Start_1) (div Start_2 Start_3) (ite StartBool Start_4 Start)))
   (StartBool Bool (true false (not StartBool_1) (< Start_5 Start_6) (<= Start_4 Start_9) (= Start_3 Start_3)))
   (Start_2 Int (5 0 (- Start_8) (- Start_9 Start_6) (div Start_2 Start) (mod Start_7 Start_2) (abs Start_2)))
   (Start_4 Int (5 2 (- Start_1) (- Start Start_3) (+ Start_3 Start_5) (div Start_2 Start_3) (abs Start_1) (ite StartBool Start Start_1)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool StartBool) (<= Start_6 Start_3) (>= Start_7 Start_6)))
   (Start_5 Int (4 0 (- Start) (+ Start_4 Start_2) (* Start_1 Start_5) (div Start_3 Start_1) (abs Start_2)))
   (Start_3 Int (5 4 y 3 (- Start) (- Start_1 Start_1) (div Start_2 Start) (mod Start_6 Start_4) (abs Start_3)))
   (Start_9 Int (4 0 (- Start) (+ Start_1 Start_2) (div Start_1 Start) (ite StartBool_1 Start_5 Start_3)))
   (Start_6 Int (5 x (- Start_1 Start_4) (div Start_3 Start_7) (mod Start_3 Start_8) (ite StartBool_1 Start_5 Start_2)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_1) (< Start_4 Start_3) (<= Start_1 Start_6) (>= Start Start_7) (> Start_5 Start_3)))
   (Start_8 Int (0 (- Start_5) (- Start_1 Start_7) (+ Start_3 Start_3) (* Start_7 Start_5) (div Start_8 Start_2) (abs Start_1)))
   (Start_7 Int (y (- Start_4) (+ Start_9 Start_10) (* Start_9 Start_1) (div Start Start_5) (mod Start_9 Start_7)))
   (Start_10 Int (1 2 3 (- Start_6) (- Start_10 Start) (+ Start Start_2) (div Start_10 Start_4) (ite StartBool Start_10 Start)))
   (Start_1 Int (2 3 (- Start_3) (+ Start Start_2) (* Start_8 Start_8) (mod Start_7 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (< 5 y) 4 y)))

(check-synth)
