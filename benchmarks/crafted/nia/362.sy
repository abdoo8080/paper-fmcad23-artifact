(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_17 Int) (Start_15 Int) (Start_13 Int) (Start_2 Int) (Start_10 Int) (Start_12 Int) (Start_4 Int) (Start_14 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartBool_3 Bool) (StartBool_4 Bool) (Start_7 Int) (Start_16 Int) (Start_6 Int) (Start_1 Int) (Start_9 Int) (Start_5 Int) (Start_3 Int) (Start_8 Int) (StartBool_5 Bool) (Start_11 Int))
  ((Start Int (x y 4 (- Start_1 Start_2) (div Start_3 Start_2) (mod Start Start_4) (abs Start_4) (ite StartBool Start_3 Start_4)))
   (StartBool Bool (true (or StartBool StartBool_5) (<= Start Start_4) (= Start_13 Start_14) (>= Start_12 Start_15) (> Start_5 Start_10)))
   (Start_18 Int (2 (- Start_3) (+ Start_5 Start_18) (* Start_5 Start_4) (div Start_13 Start_18) (abs Start_17) (ite StartBool_1 Start Start_7)))
   (Start_17 Int (1 2 (- Start_5) (- Start_18 Start_7) (+ Start_18 Start_13) (div Start_17 Start_3) (mod Start_11 Start_10) (abs Start_3) (ite StartBool Start_2 Start_6)))
   (Start_15 Int (0 (- Start_16 Start_13) (* Start_16 Start_8) (div Start_11 Start_9) (abs Start_11)))
   (Start_13 Int (x y 5 (- Start_3) (- Start_5 Start_2) (+ Start_11 Start_4) (* Start_8 Start_10) (mod Start_1 Start_13)))
   (Start_2 Int (3 (- Start_8) (- Start Start_7) (+ Start_5 Start_4) (div Start_2 Start_9) (mod Start_12 Start_11)))
   (Start_10 Int (3 (- Start_7) (+ Start_12 Start_7) (* Start_7 Start_11) (div Start_3 Start) (ite StartBool_2 Start_3 Start_11)))
   (Start_12 Int (2 (- Start) (- Start_1 Start_2) (+ Start_3 Start_1) (abs Start_5)))
   (Start_4 Int (x 4 3 y 2 0 5 1 (- Start_2) (- Start_5 Start_3) (+ Start_4 Start_3) (* Start_5 Start_2) (div Start Start_5) (mod Start_6 Start_7) (ite StartBool_1 Start_1 Start_1)))
   (Start_14 Int (1 3 (- Start_17) (* Start Start) (div Start_6 Start_8) (mod Start_4 Start_2)))
   (StartBool_1 Bool (false true (not StartBool_2) (< Start_6 Start) (= Start_5 Start_6)))
   (StartBool_2 Bool (false true (and StartBool StartBool_3) (or StartBool_1 StartBool_1) (< Start_1 Start_2) (= Start_1 Start_6)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool StartBool_2) (< Start_2 Start_3) (> Start Start_3)))
   (StartBool_4 Bool (false true (= Start_10 Start_7) (> Start_6 Start_11)))
   (Start_7 Int (5 x 1 (- Start_7) (* Start_3 Start_6) (mod Start_3 Start_4)))
   (Start_16 Int (y 3 (+ Start_2 Start_1) (abs Start_6) (ite StartBool_4 Start_17 Start_4)))
   (Start_6 Int (2 1 4 (- Start_4 Start_5) (* Start_6 Start_4) (div Start_1 Start_1) (mod Start_3 Start)))
   (Start_1 Int (x 0 1 (- Start_1) (- Start_1 Start_10) (+ Start_13 Start_5) (* Start_13 Start_5) (div Start_2 Start_3) (mod Start_9 Start_12) (ite StartBool_2 Start_6 Start_4)))
   (Start_9 Int (1 (- Start_1 Start_7) (* Start_4 Start_3) (mod Start_6 Start_1)))
   (Start_5 Int (y (- Start_5) (+ Start_1 Start) (* Start_5 Start_4) (div Start_4 Start_8) (mod Start_1 Start_9) (abs Start_7)))
   (Start_3 Int (y (- Start Start_9) (+ Start_3 Start_4) (* Start_10 Start_2) (div Start_5 Start_10) (mod Start_11 Start_5) (ite StartBool_3 Start_9 Start)))
   (Start_8 Int (y 2 x 0 (- Start_9) (- Start Start_3) (+ Start_3 Start_9) (* Start_6 Start_7) (div Start_3 Start_6) (ite StartBool_1 Start_7 Start_9)))
   (StartBool_5 Bool (true (and StartBool_5 StartBool_1) (< Start Start_14) (= Start_11 Start)))
   (Start_11 Int (4 (- Start_11 Start_1) (* Start_12 Start_10) (div Start_10 Start_6) (abs Start_1) (ite StartBool_4 Start_2 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 5 (* 3 4))))

(check-synth)
