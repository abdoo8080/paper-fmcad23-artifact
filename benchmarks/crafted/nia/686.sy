(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_11 Int) (StartBool_4 Bool) (Start_12 Int) (Start_1 Int) (Start_4 Int) (Start_6 Int) (StartBool_1 Bool) (Start_8 Int) (Start_3 Int) (StartBool_3 Bool) (Start_7 Int) (Start_5 Int) (Start_9 Int) (Start_2 Int) (StartBool_2 Bool) (Start_10 Int))
  ((Start Int (4 (- Start Start_1) (+ Start_2 Start_2) (div Start_3 Start)))
   (StartBool Bool (false true (not StartBool) (or StartBool_4 StartBool_3)))
   (Start_13 Int (x 2 1 (- Start_13 Start_5) (mod Start_4 Start_2) (abs Start_8) (ite StartBool_1 Start_13 Start_5)))
   (Start_11 Int (1 2 3 4 (- Start_8) (- Start_9 Start_3) (* Start_11 Start_7) (div Start_3 Start_13)))
   (StartBool_4 Bool (true false (not StartBool_4) (and StartBool_2 StartBool_3) (< Start_6 Start_10) (<= Start_9 Start_8) (= Start_11 Start)))
   (Start_12 Int (4 (* Start_12 Start_3) (mod Start_10 Start_10) (ite StartBool_4 Start_1 Start)))
   (Start_1 Int (y 1 4 2 (+ Start_11 Start) (div Start_2 Start_5) (ite StartBool Start_12 Start_6)))
   (Start_4 Int (0 (- Start_3) (- Start_2 Start_3) (div Start Start_5) (abs Start_6)))
   (Start_6 Int (1 (- Start_7) (+ Start_6 Start) (* Start_1 Start) (abs Start_1) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_1 Bool (true false (not StartBool) (or StartBool StartBool_2) (< Start_3 Start_2) (= Start Start_4) (>= Start_3 Start_3)))
   (Start_8 Int (5 (- Start_2 Start_6) (+ Start_8 Start_5) (mod Start_8 Start_4) (ite StartBool_3 Start_7 Start_4)))
   (Start_3 Int (1 3 4 (mod Start_2 Start_3) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_3 Bool (false (or StartBool_3 StartBool_3) (<= Start_1 Start_9) (> Start_2 Start_4)))
   (Start_7 Int (0 4 3 5 (+ Start_5 Start_1) (* Start_7 Start_2) (div Start Start_7) (abs Start_7)))
   (Start_5 Int (2 (- Start_3 Start_5) (+ Start_4 Start) (div Start_3 Start_2) (mod Start_2 Start_4) (abs Start_4)))
   (Start_9 Int (5 3 4 (- Start_2) (- Start_6 Start_9) (* Start_7 Start_9) (div Start_4 Start_7) (abs Start_7)))
   (Start_2 Int (3 (- Start_6 Start_1) (+ Start_2 Start_7) (* Start_6 Start_3) (abs Start_9) (ite StartBool Start_4 Start_10)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool StartBool_1) (<= Start_3 Start_8)))
   (Start_10 Int (5 (- Start_6 Start_10) (+ Start_6 Start_3) (div Start_2 Start) (mod Start_5 Start_1) (abs Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (div 5 0) 0)))

(check-synth)
