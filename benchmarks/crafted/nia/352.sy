(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_12 Int) (StartBool_5 Bool) (Start_3 Int) (Start_1 Int) (StartBool_2 Bool) (Start_13 Int) (StartBool_4 Bool) (Start_6 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_8 Int) (StartBool_6 Bool) (Start_2 Int) (Start_7 Int) (Start_5 Int) (Start_11 Int) (Start_10 Int) (Start_9 Int))
  ((Start Int (0 y (+ Start Start) (div Start_1 Start) (mod Start_1 Start_2) (abs Start) (ite StartBool_1 Start_3 Start_2)))
   (StartBool Bool (false (not StartBool_5) (and StartBool_4 StartBool) (or StartBool StartBool_2) (<= Start_10 Start_6) (= Start_7 Start_13) (> Start_14 Start_9)))
   (Start_14 Int (4 (- Start_8) (div Start_13 Start_14) (ite StartBool_1 Start_9 Start_7)))
   (Start_12 Int (1 0 (+ Start_2 Start) (abs Start_4)))
   (StartBool_5 Bool (true (or StartBool_2 StartBool_6) (<= Start_9 Start_1) (= Start_9 Start_12) (> Start_6 Start_4)))
   (Start_3 Int (1 0 (- Start_1) (- Start_4 Start_2) (+ Start_5 Start_4) (* Start Start_3) (mod Start_4 Start_5) (ite StartBool_2 Start_3 Start_4)))
   (Start_1 Int (5 (- Start_9)))
   (StartBool_2 Bool (true false (not StartBool_2) (or StartBool_1 StartBool_3) (<= Start_1 Start_6) (>= Start_1 Start_3) (> Start_1 Start_1)))
   (Start_13 Int (3 1 (div Start_6 Start_6) (ite StartBool_4 Start_5 Start_13)))
   (StartBool_4 Bool (true false (not StartBool_3) (< Start_10 Start_12) (= Start_2 Start_4)))
   (Start_6 Int (3 (+ Start_7 Start) (mod Start_1 Start_6) (abs Start_5)))
   (StartBool_3 Bool (true (and StartBool StartBool_3) (< Start Start_3) (<= Start_5 Start_6) (= Start_6 Start_6) (>= Start_2 Start_6) (> Start_8 Start_8)))
   (StartBool_1 Bool (false (or StartBool_1 StartBool_3) (= Start_9 Start_5) (>= Start_6 Start_10) (> Start_9 Start_2)))
   (Start_4 Int (y (- Start_4) (* Start_2 Start_3) (abs Start_3)))
   (Start_8 Int (1 0 y (- Start_1) (- Start_4 Start_4) (* Start_6 Start_4) (div Start_2 Start_4) (abs Start_5)))
   (StartBool_6 Bool (false (and StartBool_6 StartBool) (or StartBool_1 StartBool_2) (< Start_8 Start) (= Start_3 Start_2) (> Start_11 Start_11)))
   (Start_2 Int (1 0 2 (- Start_9) (* Start_5 Start_10) (div Start_4 Start_4) (ite StartBool_4 Start_12 Start_6)))
   (Start_7 Int (2 4 x y (- Start_6) (abs Start)))
   (Start_5 Int (y x (- Start_7) (- Start_4 Start_9) (+ Start_7 Start_1) (* Start_5 Start_5) (mod Start Start)))
   (Start_11 Int (x (div Start_1 Start_3) (ite StartBool_2 Start_11 Start_10)))
   (Start_10 Int (2 0 x (- Start_5) (* Start_10 Start_3) (div Start_2 Start) (abs Start_6)))
   (Start_9 Int (y (- Start_4) (- Start_1 Start_10) (+ Start_9 Start_7) (mod Start_7 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (ite (< 4 y) (mod 3 0) y))))

(check-synth)
