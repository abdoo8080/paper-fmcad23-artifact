(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (StartBool_1 Bool) (Start_1 Int) (Start_4 Int) (Start_2 Int) (Start_3 Int))
  ((Start Int (4 (- Start_1) (+ Start_2 Start) (div Start Start) (mod Start Start_3)))
   (StartBool Bool (true false (and StartBool StartBool_2) (<= Start Start_2) (= Start_1 Start_3) (>= Start_4 Start_2)))
   (StartBool_2 Bool (false true (not StartBool) (< Start_2 Start) (<= Start Start_3)))
   (StartBool_1 Bool (true (not StartBool_1) (< Start Start_4)))
   (Start_1 Int (y (- Start_1 Start_4) (+ Start Start_4) (mod Start_4 Start_3)))
   (Start_4 Int (2 y 1 (- Start Start_1) (+ Start_2 Start_3) (div Start_3 Start_3)))
   (Start_2 Int (0 (- Start_4 Start) (+ Start_2 Start_2) (div Start_2 Start) (abs Start_1) (ite StartBool_1 Start_3 Start_3)))
   (Start_3 Int (x 4 (- Start Start_4) (* Start_1 Start_3) (div Start_4 Start_2) (mod Start_1 Start_1) (abs Start_3) (ite StartBool Start_1 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (div 1 x) (+ 5 4))))

(check-synth)
