(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_6 Int) (Start_9 Int) (StartBool_2 Bool) (Start_16 Int) (Start_13 Int) (Start_4 Int) (Start_2 Int) (Start_5 Int) (Start_8 Int) (StartBool_3 Bool) (Start_7 Int) (Start_10 Int) (StartBool_6 Bool) (StartBool_4 Bool) (StartBool_1 Bool) (Start_15 Int) (StartBool_5 Bool) (Start_17 Int) (Start_14 Int) (Start_11 Int) (Start_3 Int) (Start_12 Int))
  ((Start Int (3 y 4 (- Start_1) (- Start_2 Start_1) (div Start_2 Start_1) (mod Start_2 Start_1)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_6 StartBool_6)))
   (Start_1 Int (y 2 3 (- Start_1) (+ Start_11 Start_17) (div Start Start_13) (mod Start_5 Start_4) (abs Start_1) (ite StartBool_2 Start_9 Start_14)))
   (Start_6 Int (y 2 (- Start_13) (- Start_12 Start_3) (+ Start_1 Start_17)))
   (Start_9 Int (2 (- Start_12 Start_16) (+ Start_8 Start_13) (div Start_12 Start_2) (ite StartBool Start_7 Start_3)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool StartBool_2) (< Start_4 Start_9) (<= Start_13 Start_5) (= Start_4 Start_5)))
   (Start_16 Int (1 y 0 3 5 (- Start_14) (- Start_12 Start_5) (+ Start_7 Start_3) (ite StartBool_2 Start_8 Start_5)))
   (Start_13 Int (3 (- Start_12) (- Start_6 Start_3) (+ Start_1 Start_16) (* Start_4 Start_14) (mod Start_16 Start_15) (abs Start_14)))
   (Start_4 Int (1 5 x (- Start_5) (div Start_2 Start_5) (abs Start_4)))
   (Start_2 Int (y 3 5 x 2 (+ Start Start_3) (* Start_3 Start) (div Start_1 Start_1) (mod Start_3 Start_2)))
   (Start_5 Int (4 (- Start_5) (- Start_6 Start_3) (+ Start_7 Start_8) (div Start_7 Start_7) (mod Start_7 Start_4) (abs Start_5) (ite StartBool Start_5 Start_4)))
   (Start_8 Int (0 (- Start_2) (- Start_2 Start_4) (+ Start_1 Start_7) (div Start_5 Start) (abs Start_8)))
   (StartBool_3 Bool (true (or StartBool_2 StartBool_4) (< Start_7 Start) (>= Start_7 Start_15) (> Start_3 Start_2)))
   (Start_7 Int (1 5 y 4 2 (- Start_9) (- Start_4 Start_1) (+ Start_1 Start_2) (* Start_4 Start_2) (div Start_10 Start_2) (mod Start_4 Start_9) (abs Start_3) (ite StartBool_1 Start_10 Start_2)))
   (Start_10 Int (y 4 (- Start_1) (- Start_8 Start_10) (+ Start Start_11) (* Start_4 Start) (abs Start_4) (ite StartBool Start_1 Start_10)))
   (StartBool_6 Bool (false (not StartBool_1) (or StartBool_4 StartBool_3) (< Start_17 Start_5) (<= Start_16 Start_6) (>= Start Start_15) (> Start_10 Start)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool_5 StartBool_6) (or StartBool StartBool) (< Start_3 Start_9) (>= Start Start_16)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool_1) (< Start_1 Start_5) (<= Start_3 Start_5) (= Start_4 Start_6) (>= Start_2 Start_7) (> Start_7 Start)))
   (Start_15 Int (x y 3 (- Start_14) (- Start_9 Start_13) (mod Start_10 Start_3) (abs Start_5)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool_3) (< Start_14 Start_14) (= Start_4 Start_12) (> Start_11 Start_7)))
   (Start_17 Int (5 (* Start_17 Start) (div Start_8 Start) (abs Start_15) (ite StartBool_3 Start_14 Start_1)))
   (Start_14 Int (4 (- Start_14 Start_10) (div Start_15 Start_12) (mod Start_12 Start_5) (abs Start_15) (ite StartBool_1 Start_11 Start_10)))
   (Start_11 Int (5 y (- Start_11 Start_6) (+ Start_5 Start_5) (* Start_10 Start_7) (div Start_12 Start_4) (mod Start_1 Start_1)))
   (Start_3 Int (x 1 (+ Start_4 Start_4) (mod Start_2 Start_4) (ite StartBool Start_4 Start_4)))
   (Start_12 Int (4 (- Start_13) (+ Start_14 Start_8) (abs Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div y (- x)) 4)))

(check-synth)
