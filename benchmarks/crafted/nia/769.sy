(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_1 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_20 Int) (Start_22 Int) (Start_19 Int) (StartBool_1 Bool) (Start_16 Int) (Start_18 Int) (Start_10 Int) (Start_5 Int) (Start_13 Int) (Start_7 Int) (StartBool_4 Bool) (Start_6 Int) (Start_3 Int) (Start_4 Int) (Start_14 Int) (Start_9 Int) (Start_2 Int) (Start_11 Int) (Start_21 Int) (Start_12 Int) (Start_17 Int) (Start_8 Int) (Start_15 Int))
  ((Start Int (1 (- Start) (+ Start_1 Start_1) (* Start_2 Start_2) (div Start_3 Start_4) (mod Start_5 Start_5) (abs Start_5)))
   (StartBool Bool (false (and StartBool StartBool_5) (or StartBool_4 StartBool_5) (< Start_22 Start_1) (= Start_22 Start_17) (>= Start_8 Start)))
   (StartBool_5 Bool (false true (< Start_9 Start_6) (= Start_3 Start_11)))
   (Start_1 Int (0 4 (- Start_2 Start_5) (* Start_8 Start_11) (abs Start_5)))
   (StartBool_2 Bool (true false (>= Start_15 Start_1)))
   (StartBool_3 Bool (false true (<= Start_5 Start_17) (= Start_15 Start_21) (>= Start_9 Start_15)))
   (Start_20 Int (y 1 2 (- Start_6) (- Start_12 Start_8) (+ Start_1 Start_8) (mod Start_12 Start) (abs Start_1) (ite StartBool_1 Start_6 Start)))
   (Start_22 Int (x (- Start_15) (+ Start_20 Start_2) (* Start_13 Start_6) (div Start_19 Start_3) (ite StartBool Start_7 Start_19)))
   (Start_19 Int (x 2 (+ Start_4 Start_11) (* Start_4 Start_11) (div Start_14 Start_17) (mod Start_18 Start_2)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool_3) (or StartBool_3 StartBool_4) (<= Start_9 Start_8) (= Start_9 Start_15) (>= Start_10 Start_17) (> Start_18 Start_19)))
   (Start_16 Int (x 0 4 (- Start) (+ Start_8 Start_3)))
   (Start_18 Int (2 (- Start_3 Start_8) (+ Start_3 Start_11) (* Start Start_7) (div Start_1 Start_12) (mod Start_6 Start) (abs Start_17) (ite StartBool_3 Start_2 Start_13)))
   (Start_10 Int (x (- Start_5) (- Start_14 Start) (* Start_13 Start) (mod Start_12 Start_13) (abs Start_16)))
   (Start_5 Int (3 1 y 5 0 (- Start_2) (- Start_5 Start_4) (* Start_4 Start_5) (mod Start_1 Start_3) (abs Start_3) (ite StartBool Start_1 Start)))
   (Start_13 Int (3 (+ Start_8 Start_5) (ite StartBool Start_15 Start_6)))
   (Start_7 Int (4 (- Start_6) (+ Start_8 Start_3) (div Start_5 Start_2) (mod Start_6 Start) (ite StartBool Start_8 Start_3)))
   (StartBool_4 Bool (true false (and StartBool StartBool_2) (< Start_15 Start_6) (>= Start_11 Start_2) (> Start_2 Start_5)))
   (Start_6 Int (5 (mod Start Start_4) (ite StartBool Start_7 Start_5)))
   (Start_3 Int (0 (- Start_4) (ite StartBool_1 Start_9 Start_3)))
   (Start_4 Int (4 5 (- Start_6) (* Start_4 Start_7) (abs Start_1) (ite StartBool Start_8 Start)))
   (Start_14 Int (x 2 (+ Start_1 Start_10) (div Start_14 Start_2) (ite StartBool_1 Start_10 Start_13)))
   (Start_9 Int (0 (- Start_7) (+ Start_3 Start_4) (* Start_7 Start_10) (mod Start_11 Start_8)))
   (Start_2 Int (4 0 1 (- Start_9) (- Start_21 Start_12) (* Start_20 Start_11) (div Start_16 Start_9) (ite StartBool_2 Start_20 Start_10)))
   (Start_11 Int (x (+ Start_11 Start_5) (* Start_8 Start) (div Start_2 Start_10) (mod Start_3 Start_12) (abs Start_9) (ite StartBool_1 Start_12 Start_5)))
   (Start_21 Int (3 (abs Start_3) (ite StartBool_2 Start_14 Start_10)))
   (Start_12 Int (3 x (- Start_13 Start) (+ Start_8 Start_3) (div Start_7 Start_3) (abs Start) (ite StartBool_1 Start_14 Start_14)))
   (Start_17 Int (0 4 y x 5 1 (* Start Start_20) (mod Start_4 Start_13)))
   (Start_8 Int (y x 1 5 3 2 (- Start Start_4) (* Start Start_5) (div Start_6 Start_1)))
   (Start_15 Int (5 (div Start_14 Start_7) (abs Start_8) (ite StartBool Start Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (abs (abs x)) 5)))

(check-synth)
