(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_8 Int) (StartBool_1 Bool) (Start_9 Int) (Start_6 Int) (StartBool_2 Bool) (Start_5 Int) (Start_7 Int) (Start_1 Int) (Start_2 Int) (Start_4 Int) (Start_3 Int))
  ((Start Int (5 x (- Start_1) (- Start_2 Start_2) (div Start Start_3) (mod Start_2 Start_1)))
   (StartBool Bool (false true (or StartBool StartBool_2) (< Start_5 Start_4) (= Start_3 Start_1)))
   (Start_8 Int (2 0 (- Start_2 Start_4) (* Start_4 Start_9)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool) (<= Start_1 Start_5) (>= Start Start_4) (> Start_4 Start_3)))
   (Start_9 Int (3 5 2 0 (- Start_7) (div Start_8 Start_1) (abs Start_4)))
   (Start_6 Int (3 (- Start_8 Start_7) (div Start_6 Start_3) (abs Start_3)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_1 StartBool) (< Start_4 Start_6) (<= Start_6 Start_6) (= Start_5 Start_4) (> Start_5 Start_7)))
   (Start_5 Int (1 (- Start_3) (+ Start_2 Start_1) (* Start_4 Start_4) (abs Start_5)))
   (Start_7 Int (3 5 0 4 (* Start_2 Start_5) (div Start_6 Start_2) (mod Start_3 Start_5) (abs Start_6) (ite StartBool Start_3 Start_6)))
   (Start_1 Int (y (+ Start_3 Start) (* Start_3 Start_2) (div Start_4 Start_3) (mod Start_3 Start) (ite StartBool_1 Start_5 Start_2)))
   (Start_2 Int (0 1 2 (- Start_2) (- Start Start) (* Start_4 Start_1) (div Start_2 Start) (mod Start_1 Start_1) (abs Start_1)))
   (Start_4 Int (1 x (* Start_3 Start_3) (div Start_1 Start) (ite StartBool Start_4 Start_3)))
   (Start_3 Int (1 (- Start) (- Start_1 Start_1) (+ Start_2 Start) (* Start_4 Start) (div Start_4 Start_2) (mod Start_4 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- 3) (div 1 0))))

(check-synth)
