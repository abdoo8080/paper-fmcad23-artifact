(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_9 Bool) (Start_15 Int) (Start_2 Int) (Start_3 Int) (StartBool_4 Bool) (Start_8 Int) (Start_11 Int) (Start_12 Int) (StartBool_6 Bool) (Start_1 Int) (Start_13 Int) (StartBool_2 Bool) (StartBool_3 Bool) (StartBool_7 Bool) (StartBool_1 Bool) (StartBool_5 Bool) (Start_4 Int) (Start_6 Int) (StartBool_8 Bool) (Start_5 Int) (Start_7 Int) (Start_14 Int) (Start_9 Int) (Start_10 Int))
  ((Start Int (0 3 (- Start) (mod Start Start_1)))
   (StartBool Bool (false true (and StartBool_5 StartBool_4) (or StartBool_2 StartBool_8)))
   (StartBool_9 Bool (false (not StartBool_9) (and StartBool StartBool_3) (< Start_9 Start_10) (> Start_13 Start_1)))
   (Start_15 Int (1 (- Start_7 Start_9) (+ Start_13 Start_8) (abs Start_6) (ite StartBool_8 Start_2 Start_3)))
   (Start_2 Int (5 (- Start_15) (- Start_12 Start_8) (+ Start Start_10) (div Start_3 Start_15) (ite StartBool_1 Start_13 Start_5)))
   (Start_3 Int (5 2 (- Start_12) (- Start_1 Start_6) (div Start Start_2) (abs Start_1) (ite StartBool Start_4 Start_2)))
   (StartBool_4 Bool (false true (not StartBool_4) (and StartBool_4 StartBool_1) (<= Start_7 Start_2) (>= Start_9 Start_6)))
   (Start_8 Int (5 (- Start_3 Start_9) (* Start_8 Start_10) (abs Start_3) (ite StartBool_3 Start_9 Start_3)))
   (Start_11 Int (y 1 (+ Start Start_10) (* Start_8 Start) (div Start_6 Start_13) (mod Start_14 Start_14) (abs Start_5) (ite StartBool_5 Start_1 Start_11)))
   (Start_12 Int (1 x (- Start_1) (* Start_9 Start_5) (div Start_10 Start_4) (abs Start_9)))
   (StartBool_6 Bool (true (and StartBool StartBool_5) (or StartBool_2 StartBool_4) (= Start_12 Start_3)))
   (Start_1 Int (5 (- Start_2 Start_2) (div Start_3 Start_3) (mod Start Start_1) (ite StartBool_1 Start_2 Start_1)))
   (Start_13 Int (5 3 (mod Start_10 Start_8) (ite StartBool_6 Start_5 Start_7)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_2) (or StartBool StartBool) (< Start_4 Start_2) (>= Start_3 Start_2) (> Start Start_4)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_4 StartBool_4) (or StartBool StartBool_4) (= Start_1 Start) (> Start_5 Start_4)))
   (StartBool_7 Bool (false true (or StartBool_3 StartBool_3) (= Start_2 Start) (> Start_10 Start_3)))
   (StartBool_1 Bool (false true (not StartBool_1) (or StartBool StartBool_2) (< Start_3 Start_2) (= Start_1 Start) (>= Start_1 Start_2)))
   (StartBool_5 Bool (true (not StartBool_6) (or StartBool_7 StartBool_2) (< Start_7 Start_6) (= Start_4 Start_9) (>= Start_8 Start_1) (> Start_4 Start_8)))
   (Start_4 Int (0 x (- Start_3) (- Start Start_4) (div Start Start) (mod Start_3 Start_3)))
   (Start_6 Int (x 2 (+ Start_4 Start) (div Start_7 Start_6) (mod Start_6 Start) (abs Start)))
   (StartBool_8 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_4) (or StartBool_9 StartBool_4) (= Start_14 Start_13)))
   (Start_5 Int (y x 0 (- Start_6) (* Start_3 Start) (div Start Start)))
   (Start_7 Int (4 (- Start_7) (- Start_8 Start_2) (+ Start_9 Start_4) (mod Start_7 Start_7) (abs Start_2)))
   (Start_14 Int (y 0 (- Start_3) (* Start_12 Start)))
   (Start_9 Int (x (- Start_7) (- Start_5 Start_7) (+ Start_7 Start_8) (ite StartBool_5 Start_9 Start_7)))
   (Start_10 Int (3 4 (- Start_7) (- Start Start_8) (+ Start_8 Start_4) (* Start Start_6) (div Start_11 Start) (mod Start_4 Start_12) (ite StartBool_3 Start_10 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div x (abs y))))

(check-synth)
