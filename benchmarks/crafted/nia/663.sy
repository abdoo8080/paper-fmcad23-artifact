(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_8 Int) (StartBool_1 Bool) (Start_1 Int) (StartBool_2 Bool) (Start_5 Int) (Start_6 Int) (StartBool_3 Bool) (Start_4 Int) (StartBool_4 Bool) (Start_7 Int) (Start_9 Int) (Start_10 Int) (Start_2 Int) (StartBool_5 Bool) (Start_3 Int) (Start_11 Int))
  ((Start Int (1 (- Start Start_1) (div Start_2 Start_3) (mod Start Start_4) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true (and StartBool_2 StartBool_1) (<= Start_8 Start_1) (= Start_3 Start_7) (> Start_5 Start_11)))
   (Start_12 Int (5 (- Start_5) (- Start_11 Start_11) (+ Start_4 Start) (div Start_12 Start_11) (abs Start_11)))
   (Start_8 Int (2 0 x (- Start_2 Start_2) (+ Start_4 Start_5) (div Start_9 Start_6) (mod Start_3 Start_2)))
   (StartBool_1 Bool (false true (not StartBool_2) (or StartBool_1 StartBool_2) (<= Start_3 Start_1)))
   (Start_1 Int (1 (- Start_7 Start_3) (+ Start_3 Start_7) (* Start_6 Start_12) (div Start_3 Start_3) (mod Start_10 Start_10)))
   (StartBool_2 Bool (true false (not StartBool_3) (or StartBool_3 StartBool_2) (< Start Start_5) (<= Start_2 Start_3) (= Start_1 Start_4) (> Start_5 Start_4)))
   (Start_5 Int (2 1 5 y (- Start) (+ Start_6 Start) (div Start_3 Start_3) (abs Start_3) (ite StartBool_4 Start_6 Start_3)))
   (Start_6 Int (x (- Start_10) (+ Start_5 Start_4) (* Start_7 Start_10) (abs Start_4) (ite StartBool_2 Start_4 Start_6)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool_5) (< Start_4 Start_3) (<= Start_10 Start_9) (= Start_7 Start)))
   (Start_4 Int (3 0 (- Start_4 Start_10) (* Start_7 Start_6)))
   (StartBool_4 Bool (false (< Start Start_7) (> Start_6 Start_2)))
   (Start_7 Int (5 (div Start_1 Start_2) (mod Start_4 Start_7) (ite StartBool_4 Start_8 Start_6)))
   (Start_9 Int (1 3 5 y (- Start_4) (* Start_6 Start_5) (div Start_3 Start_8)))
   (Start_10 Int (y (+ Start_4 Start_8) (* Start_5 Start_1) (div Start_8 Start_1) (mod Start_5 Start_3)))
   (Start_2 Int (5 (- Start_10) (+ Start_7 Start_9) (ite StartBool_3 Start Start_7)))
   (StartBool_5 Bool (false (and StartBool_3 StartBool_4) (< Start_8 Start_11) (>= Start_5 Start_8) (> Start_2 Start_2)))
   (Start_3 Int (1 (abs Start_2)))
   (Start_11 Int (4 y (+ Start_10 Start_5) (* Start_6 Start_1) (mod Start_7 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ y (mod 4 0))))

(check-synth)
