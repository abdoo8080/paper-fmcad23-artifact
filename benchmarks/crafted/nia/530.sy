(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (StartBool_4 Bool) (StartBool_3 Bool) (Start_8 Int) (Start_2 Int) (Start_4 Int) (Start_6 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_3 Int) (Start_1 Int) (StartBool_2 Bool) (Start_7 Int) (Start_9 Int) (Start_5 Int) (Start_10 Int))
  ((Start Int (3 (- Start) (- Start Start) (* Start Start) (div Start Start) (abs Start_1) (ite StartBool Start_2 Start_2)))
   (StartBool Bool (true false (not StartBool_2) (< Start_1 Start) (>= Start_4 Start_2)))
   (Start_11 Int (5 3 4 (- Start_7 Start_3) (+ Start_4 Start_3) (div Start_8 Start_3) (ite StartBool_2 Start_9 Start_3)))
   (StartBool_4 Bool (true false (and StartBool_3 StartBool_5) (or StartBool_1 StartBool_2) (= Start_1 Start_2) (>= Start_6 Start_6) (> Start_1 Start_7)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_1 StartBool_2) (or StartBool_4 StartBool_1) (<= Start_7 Start_2) (>= Start_7 Start_5) (> Start_7 Start_1)))
   (Start_8 Int (5 x))
   (Start_2 Int (x (- Start Start_1) (* Start_1 Start_3) (div Start_2 Start_2) (mod Start_4 Start_3) (abs Start_5)))
   (Start_4 Int (2 1 y (+ Start_5 Start_1) (* Start_1 Start_5) (div Start_4 Start_1)))
   (Start_6 Int (2 (+ Start_1 Start_1) (* Start_5 Start_5) (div Start_3 Start_4) (abs Start_6)))
   (StartBool_5 Bool (true (not StartBool_1) (or StartBool_4 StartBool) (<= Start_4 Start_6) (= Start_1 Start_1) (> Start_1 Start_11)))
   (StartBool_1 Bool (true false (>= Start_3 Start_2)))
   (Start_3 Int (0 1 y (- Start_2) (- Start_6 Start) (div Start_6 Start_6)))
   (Start_1 Int (5 x (- Start_2) (* Start_5 Start) (abs Start)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_1) (< Start Start_3) (= Start_4 Start_5) (>= Start_3 Start_7) (> Start_2 Start_1)))
   (Start_7 Int (x 4 (- Start_2 Start) (* Start_1 Start_8) (div Start_5 Start_9) (ite StartBool_3 Start_3 Start_8)))
   (Start_9 Int (4 (abs Start_10)))
   (Start_5 Int (4 1 3 (- Start_3) (mod Start Start_1) (ite StartBool_1 Start_5 Start_2)))
   (Start_10 Int (3 (+ Start Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (+ x (abs x)))))

(check-synth)
