(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (Start_3 Int) (Start_8 Int) (Start_4 Int) (Start_1 Int) (Start_6 Int) (StartBool_2 Bool) (Start_5 Int) (Start_7 Int) (StartBool_1 Bool) (Start_2 Int))
  ((Start Int (0 5 (- Start_1) (- Start Start) (+ Start_2 Start) (* Start_1 Start_1)))
   (StartBool Bool (true false (<= Start_9 Start_4) (= Start_3 Start) (>= Start_4 Start)))
   (Start_9 Int (y 1 (- Start_9 Start_2) (abs Start_8) (ite StartBool_2 Start_3 Start_2)))
   (Start_3 Int (2 x (+ Start_9 Start_9) (abs Start_4) (ite StartBool_2 Start_5 Start_7)))
   (Start_8 Int (4 2 (- Start Start_3) (* Start_2 Start_3) (div Start_7 Start_8) (mod Start_1 Start_6) (ite StartBool_1 Start Start_3)))
   (Start_4 Int (4 x 1 2 5 (- Start_7) (- Start_4 Start_5) (* Start_8 Start_4) (mod Start_8 Start_4) (abs Start) (ite StartBool_1 Start_4 Start_2)))
   (Start_1 Int (4 3 (- Start_8 Start_4) (+ Start_8 Start_7) (abs Start_1)))
   (Start_6 Int (4 (- Start_5) (abs Start_2) (ite StartBool_1 Start_6 Start_5)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_1 StartBool_1) (or StartBool StartBool_2) (> Start Start_5)))
   (Start_5 Int (0 (- Start_2) (- Start_2 Start_4) (abs Start_6) (ite StartBool_2 Start_3 Start_4)))
   (Start_7 Int (1 (- Start_7 Start_1) (* Start_7 Start) (ite StartBool_2 Start Start_2)))
   (StartBool_1 Bool (false true (not StartBool) (or StartBool StartBool_1) (< Start_2 Start_1) (<= Start_1 Start_1) (> Start_3 Start_5)))
   (Start_2 Int (y 0 1 3 (- Start_3) (+ Start Start_1) (div Start_1 Start_1) (mod Start_4 Start_5) (ite StartBool_1 Start Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod y 3) (* x 4))))

(check-synth)
