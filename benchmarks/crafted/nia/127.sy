(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_12 Int) (Start_15 Int) (Start_2 Int) (Start_11 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_5 Int) (Start_13 Int) (Start_8 Int) (Start_3 Int) (Start_14 Int) (Start_7 Int) (Start_9 Int) (Start_4 Int) (Start_10 Int) (StartBool_2 Bool) (Start_6 Int))
  ((Start Int (0 (- Start Start) (+ Start Start_1) (* Start Start) (div Start_2 Start)))
   (StartBool Bool (true false (or StartBool_2 StartBool_1) (< Start_3 Start_4) (> Start_15 Start_4)))
   (Start_1 Int (1 4 (- Start_4) (+ Start_11 Start_9) (* Start_5 Start_13) (mod Start_4 Start_8) (abs Start_13) (ite StartBool_2 Start Start_1)))
   (Start_12 Int (3 (- Start_10) (- Start_4 Start_8) (div Start_11 Start_12) (mod Start_4 Start_8) (abs Start_9) (ite StartBool_3 Start_1 Start_11)))
   (Start_15 Int (4 (- Start_11) (- Start Start_11) (+ Start_8 Start_11) (mod Start_3 Start_12) (ite StartBool Start_10 Start_3)))
   (Start_2 Int (0 3 2 (- Start_2) (+ Start Start_2) (div Start_2 Start) (ite StartBool_1 Start Start_2)))
   (Start_11 Int (2 (- Start_12) (* Start_11 Start_6) (div Start_4 Start_2) (mod Start_12 Start_2) (abs Start_11)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (or StartBool StartBool)))
   (StartBool_3 Bool (true false (and StartBool StartBool_3) (<= Start_1 Start_3) (= Start_4 Start_2) (>= Start_5 Start_5) (> Start_3 Start_4)))
   (Start_5 Int (1 (- Start_1) (+ Start_1 Start_2)))
   (Start_13 Int (5 x 2 (- Start_14 Start_4) (+ Start_12 Start_4) (* Start_5 Start_7) (div Start_6 Start_6) (abs Start_4) (ite StartBool_3 Start_15 Start_1)))
   (Start_8 Int (y (* Start_2 Start) (div Start_6 Start_2) (mod Start Start_2) (ite StartBool_1 Start_2 Start_8)))
   (Start_3 Int (x (+ Start_3 Start_8) (mod Start_6 Start_3) (ite StartBool_1 Start_4 Start_8)))
   (Start_14 Int (3 x y 2 4 0 5 (- Start_2) (- Start_6 Start_4) (abs Start_2)))
   (Start_7 Int (4 (- Start_1) (* Start_7 Start_9) (mod Start_6 Start_8)))
   (Start_9 Int (y 2 (- Start_7) (+ Start_9 Start_2) (mod Start_10 Start_3)))
   (Start_4 Int (y (- Start_4) (+ Start_6 Start_6) (div Start_4 Start_7) (mod Start_8 Start_6) (abs Start_4) (ite StartBool_1 Start_4 Start_7)))
   (Start_10 Int (0 3 5 1 2 (+ Start_5 Start_4) (* Start Start_2) (ite StartBool_3 Start_9 Start_5)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool) (< Start_7 Start_6) (= Start_4 Start_1) (>= Start_11 Start_6) (> Start_8 Start)))
   (Start_6 Int (y (- Start_4) (- Start_3 Start_5) (+ Start_8 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- 5) (+ x 1))))

(check-synth)
