(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_16 Int) (Start_15 Int) (Start_14 Int) (StartBool_2 Bool) (Start_11 Int) (Start_2 Int) (StartBool_1 Bool) (Start_3 Int) (Start_4 Int) (Start_17 Int) (Start_5 Int) (Start_6 Int) (Start_8 Int) (Start_9 Int) (Start_7 Int) (Start_13 Int) (Start_1 Int) (Start_10 Int) (Start_12 Int))
  ((Start Int (3 5 1 x (- Start) (- Start Start) (+ Start_1 Start_2) (div Start_2 Start_1) (abs Start_2) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true (not StartBool_1) (< Start_11 Start_9) (<= Start_15 Start_15) (= Start_5 Start_6) (>= Start_10 Start_10) (> Start Start_2)))
   (StartBool_3 Bool (false (and StartBool StartBool) (or StartBool StartBool_3) (< Start_3 Start_8) (<= Start_11 Start_8) (>= Start_9 Start_7)))
   (Start_16 Int (y (- Start_5) (+ Start_11 Start_12) (div Start_2 Start_13) (abs Start_3) (ite StartBool_3 Start_7 Start_17)))
   (Start_15 Int (y (- Start_10) (+ Start_15 Start_16) (abs Start_14) (ite StartBool_3 Start_14 Start_9)))
   (Start_14 Int (1 (+ Start Start_9) (* Start_1 Start_7) (div Start_14 Start_4) (ite StartBool_2 Start_5 Start_14)))
   (StartBool_2 Bool (false (< Start_14 Start_8) (<= Start_3 Start_5) (>= Start_3 Start_6) (> Start_6 Start_4)))
   (Start_11 Int (4 1 (+ Start_2 Start_4) (* Start_8 Start_9) (abs Start) (ite StartBool Start_12 Start_13)))
   (Start_2 Int (4 3 y 0 1 (- Start_2 Start_2) (* Start_1 Start_3) (div Start_3 Start_3)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (or StartBool_1 StartBool_1) (= Start_2 Start_1) (>= Start Start_2) (> Start_2 Start)))
   (Start_3 Int (4 5 3 x (+ Start_3 Start_4) (* Start_5 Start) (div Start_2 Start_5)))
   (Start_4 Int (3 (* Start_4 Start_9) (div Start_7 Start_9) (mod Start_4 Start_2)))
   (Start_17 Int (x 1 0 (div Start_9 Start_9) (mod Start Start_17) (abs Start_14)))
   (Start_5 Int (3 y (+ Start_2 Start_5) (abs Start_6)))
   (Start_6 Int (0 (- Start_7) (- Start_2 Start_6) (+ Start Start_6) (* Start_7 Start_8) (div Start_2 Start_3) (mod Start_6 Start_5) (abs Start_5) (ite StartBool_1 Start_5 Start_4)))
   (Start_8 Int (5 (- Start_8) (mod Start_9 Start_3) (ite StartBool_1 Start_7 Start_6)))
   (Start_9 Int (1 (+ Start_6 Start_7)))
   (Start_7 Int (5 3 (- Start_9 Start_6) (mod Start_10 Start) (abs Start)))
   (Start_13 Int (y x (- Start_11) (- Start_3 Start_6) (+ Start_1 Start_8) (mod Start_14 Start_11) (abs Start_14) (ite StartBool_2 Start_3 Start_13)))
   (Start_1 Int (2 y (- Start_11) (- Start_7 Start_1) (+ Start_12 Start_3)))
   (Start_10 Int (0 1 x 2 (- Start_3) (- Start_10 Start) (+ Start_1 Start_6) (mod Start_7 Start_1)))
   (Start_12 Int (3 x 5 (- Start_4 Start_7) (* Start_5 Start_12) (abs Start_12) (ite StartBool Start_8 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (= (+ y 3) 2) 1 2)))

(check-synth)
