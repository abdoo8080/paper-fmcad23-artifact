(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_17 Int) (StartBool_2 Bool) (Start_6 Int) (Start_7 Int) (Start_16 Int) (Start_1 Int) (Start_8 Int) (Start_18 Int) (Start_4 Int) (StartBool_1 Bool) (Start_10 Int) (Start_5 Int) (Start_11 Int) (Start_12 Int) (Start_9 Int) (StartBool_4 Bool) (Start_13 Int) (Start_3 Int) (Start_15 Int) (Start_2 Int) (Start_14 Int))
  ((Start Int (x 3 (- Start) (* Start_1 Start_2) (div Start_3 Start_2) (ite StartBool Start_3 Start_2)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_3 StartBool_2) (= Start_16 Start_14)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool_4 StartBool_2) (>= Start_1 Start_17) (> Start_4 Start_10)))
   (Start_17 Int (2 (- Start_3 Start_5) (* Start_14 Start_18) (div Start_14 Start_5) (abs Start_5)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_1)))
   (Start_6 Int (x (- Start_14 Start_10) (* Start_6 Start) (div Start_12 Start_17) (mod Start Start_10) (abs Start_17) (ite StartBool_2 Start_9 Start_7)))
   (Start_7 Int (y (mod Start_12 Start_3) (ite StartBool_1 Start_15 Start_4)))
   (Start_16 Int (3 0 (- Start_3) (div Start_6 Start_16) (abs Start_12)))
   (Start_1 Int (4 0 (- Start_12) (- Start_8 Start_3) (* Start_4 Start_16) (div Start_18 Start_3) (mod Start_10 Start_11)))
   (Start_8 Int (y x (- Start_4 Start_11) (+ Start_2 Start_2) (mod Start_5 Start_5) (ite StartBool_1 Start_13 Start_16)))
   (Start_18 Int (1 (- Start_3) (- Start_14 Start_14) (div Start_18 Start_14) (mod Start_14 Start_18) (ite StartBool_2 Start_12 Start_10)))
   (Start_4 Int (5 0 4 1 (- Start_3) (- Start_3 Start_1) (+ Start_3 Start_2)))
   (StartBool_1 Bool (true false (or StartBool_1 StartBool_1) (<= Start Start_7) (= Start_7 Start_9) (>= Start_9 Start_10) (> Start_1 Start_9)))
   (Start_10 Int (1 5 3 4 (- Start_2 Start) (mod Start_5 Start_3) (abs Start_2)))
   (Start_5 Int (y (- Start_6 Start_7) (div Start_8 Start_4) (mod Start_1 Start_7) (abs Start_2) (ite StartBool_1 Start_8 Start_6)))
   (Start_11 Int (y 1 0 2 3 (- Start_11 Start_12) (+ Start_10 Start_12) (mod Start_12 Start_7) (abs Start_13)))
   (Start_12 Int (4 (- Start_8) (- Start_2 Start_14) (+ Start_15 Start_5)))
   (Start_9 Int (3 2 (- Start_11 Start_2) (* Start_7 Start_5) (div Start_2 Start_1) (mod Start Start)))
   (StartBool_4 Bool (false true (or StartBool_3 StartBool_4) (< Start_7 Start_11) (<= Start Start_16)))
   (Start_13 Int (x (+ Start_1 Start_7) (* Start_6 Start_2) (div Start_4 Start_1) (mod Start_13 Start_7)))
   (Start_3 Int (0 (+ Start_4 Start_4) (* Start_1 Start_3)))
   (Start_15 Int (2 x (- Start_9 Start_9) (* Start Start) (ite StartBool_1 Start_5 Start_5)))
   (Start_2 Int (5 x (- Start_4) (+ Start Start_4) (* Start Start_1) (abs Start) (ite StartBool Start_5 Start_4)))
   (Start_14 Int (y (- Start) (- Start_2 Start_6) (+ Start_11 Start_12) (div Start_6 Start_10) (ite StartBool Start_11 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod y 2) (abs x))))

(check-synth)
