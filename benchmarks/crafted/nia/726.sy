(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (StartBool_2 Bool) (Start_13 Int) (StartBool_4 Bool) (Start_7 Int) (Start_12 Int) (Start_3 Int) (Start_5 Int) (StartBool_1 Bool) (StartBool_5 Bool) (Start_4 Int) (Start_8 Int) (Start_6 Int) (StartBool_6 Bool) (Start_2 Int) (Start_14 Int) (Start_10 Int) (Start_1 Int) (StartBool_3 Bool) (Start_11 Int))
  ((Start Int (4 (- Start_1) (* Start_2 Start_2) (div Start_1 Start_3)))
   (StartBool Bool (true (not StartBool_6) (and StartBool_6 StartBool_4) (<= Start_2 Start_11) (= Start_2 Start_6) (> Start_7 Start)))
   (Start_9 Int (1 (- Start_2) (- Start_4 Start_3) (+ Start_1 Start_5) (div Start_2 Start_10)))
   (StartBool_2 Bool (true false (not StartBool_5) (and StartBool_3 StartBool_5) (or StartBool_2 StartBool_3) (< Start_12 Start_14) (<= Start_9 Start_12)))
   (Start_13 Int (0 3 5 (- Start_2) (+ Start_7 Start_4) (abs Start_6) (ite StartBool_2 Start_10 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_2 StartBool_4) (or StartBool_1 StartBool_6) (= Start_8 Start) (>= Start_10 Start_1) (> Start_8 Start_7)))
   (Start_7 Int (0 1 3 4 x 5 2 y (- Start_1 Start_7) (+ Start_8 Start) (* Start_5 Start_2) (mod Start_1 Start) (abs Start_2)))
   (Start_12 Int (5 1 (- Start_1) (+ Start_4 Start_6) (div Start_10 Start_6)))
   (Start_3 Int (3 0 (- Start) (- Start Start_4) (div Start_3 Start) (mod Start_2 Start_1) (abs Start)))
   (Start_5 Int (0 (- Start_6) (- Start_7 Start_6) (+ Start_4 Start_2) (ite StartBool Start Start_1)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (or StartBool_3 StartBool_1) (= Start_1 Start_6)))
   (StartBool_5 Bool (true false (not StartBool_6) (or StartBool_4 StartBool) (<= Start_11 Start_7) (= Start_12 Start_3) (>= Start_9 Start_9) (> Start_13 Start_14)))
   (Start_4 Int (5 1 (- Start_4) (* Start_4 Start_1) (div Start Start_5)))
   (Start_8 Int (x 1 (+ Start_7 Start_8) (mod Start_5 Start_8) (abs Start) (ite StartBool Start_6 Start_2)))
   (Start_6 Int (5 x (+ Start_2 Start_2) (div Start_1 Start_4) (mod Start_2 Start_8)))
   (StartBool_6 Bool (false (not StartBool) (<= Start_10 Start_12) (= Start_3 Start_13) (>= Start_5 Start_3)))
   (Start_2 Int (1 5 2 x (+ Start_8 Start_2) (* Start Start_9) (div Start_5 Start_2) (mod Start_2 Start_1) (abs Start_8) (ite StartBool_1 Start_9 Start_10)))
   (Start_14 Int (3 y 1 0 5 x (- Start_12) (ite StartBool Start_10 Start_13)))
   (Start_10 Int (y 1 (mod Start_2 Start_4) (abs Start_1)))
   (Start_1 Int (2 (- Start_9) (+ Start_11 Start_5) (div Start_4 Start_7) (ite StartBool_4 Start_13 Start_6)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_2 StartBool_4) (< Start_8 Start_3) (<= Start_7 Start) (> Start_11 Start_12)))
   (Start_11 Int (3 2 0 y 4 5 x (- Start_2) (+ Start Start_10) (abs Start_12) (ite StartBool_1 Start_7 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (mod y 4) 3)))

(check-synth)
