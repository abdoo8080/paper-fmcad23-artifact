(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_18 Int) (Start_1 Int) (Start_6 Int) (Start_16 Int) (StartBool_6 Bool) (Start_14 Int) (Start_15 Int) (Start_13 Int) (StartBool_4 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_2 Int) (Start_8 Int) (StartBool_1 Bool) (Start_4 Int) (Start_9 Int) (Start_5 Int) (Start_12 Int) (StartBool_5 Bool) (StartBool_3 Bool) (Start_7 Int) (Start_10 Int) (Start_11 Int))
  ((Start Int (1 4 (- Start Start) (div Start_1 Start_2) (abs Start_1)))
   (StartBool Bool (false true (<= Start_13 Start_10) (= Start_7 Start_4)))
   (Start_17 Int (5 0 x y 4 (- Start_10) (- Start_9 Start_12) (+ Start_18 Start_2) (* Start_4 Start_2) (mod Start_9 Start_7) (abs Start_2)))
   (Start_18 Int (1 5 x (- Start_2 Start_5) (abs Start_13)))
   (Start_1 Int (2 y 0 1 (- Start_1 Start_13) (+ Start_2 Start_10) (div Start_17 Start_18)))
   (Start_6 Int (3 1 (- Start_8) (* Start_14 Start_8) (mod Start_5 Start_10) (abs Start_10) (ite StartBool Start Start_16)))
   (Start_16 Int (y 2 5 (- Start_1) (mod Start_12 Start_6) (abs Start_10) (ite StartBool_2 Start_16 Start_13)))
   (StartBool_6 Bool (false (and StartBool_1 StartBool_6) (<= Start_10 Start_16) (>= Start_8 Start_14) (> Start_12 Start_15)))
   (Start_14 Int (2 4 3 (- Start_7) (+ Start_6 Start_2) (mod Start_9 Start_7) (ite StartBool_6 Start_15 Start)))
   (Start_15 Int (x 0 4 (+ Start_11 Start_8) (* Start_15 Start_8) (div Start_2 Start_11) (abs Start_4) (ite StartBool_3 Start_14 Start_14)))
   (Start_13 Int (1 (- Start_8) (+ Start_10 Start_14) (div Start Start) (mod Start_11 Start_15)))
   (StartBool_4 Bool (false (or StartBool StartBool_4) (> Start_8 Start_4)))
   (Start_3 Int (3 4 (- Start_13) (div Start_3 Start_12) (ite StartBool_1 Start_1 Start_16)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_2 StartBool_1) (<= Start_4 Start_1) (= Start_3 Start_4)))
   (Start_2 Int (1 (- Start_2) (- Start_3 Start_1) (* Start_2 Start_3) (div Start Start_2) (ite StartBool_1 Start_1 Start)))
   (Start_8 Int (4 (- Start_8 Start_8) (* Start_9 Start_10) (ite StartBool_4 Start_13 Start_13)))
   (StartBool_1 Bool (true false (or StartBool_2 StartBool_1) (< Start_2 Start_3)))
   (Start_4 Int (5 (- Start_5) (- Start_5 Start_1) (mod Start_1 Start_1)))
   (Start_9 Int (0 (- Start Start_6) (+ Start_7 Start_10) (* Start_10 Start_9) (div Start Start_3) (abs Start_9)))
   (Start_5 Int (5 (- Start_4 Start_2) (+ Start_3 Start_3) (* Start_4 Start_5) (mod Start_6 Start_7) (abs Start_3) (ite StartBool_2 Start_1 Start_1)))
   (Start_12 Int (0 y (- Start_6) (+ Start_1 Start_9) (div Start_6 Start_6) (abs Start_2) (ite StartBool_5 Start_2 Start_4)))
   (StartBool_5 Bool (false (and StartBool_1 StartBool_2) (<= Start Start_5) (= Start_1 Start_1) (>= Start_7 Start_11) (> Start_12 Start_11)))
   (StartBool_3 Bool (false true (< Start_4 Start_1) (= Start_1 Start_2) (>= Start_1 Start_9) (> Start_6 Start_6)))
   (Start_7 Int (4 2 (+ Start_5 Start_1) (* Start_5 Start_1) (div Start_1 Start_6) (mod Start_5 Start_8) (abs Start_3) (ite StartBool_3 Start Start_2)))
   (Start_10 Int (x (div Start_6 Start_2) (abs Start_10) (ite StartBool_4 Start_11 Start_5)))
   (Start_11 Int (5 (- Start_2 Start_6) (div Start Start_9) (ite StartBool_1 Start_1 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div y 0))))

(check-synth)
