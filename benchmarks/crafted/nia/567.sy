(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_1 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_3 Int) (Start_2 Int) (Start_5 Int) (StartBool_2 Bool))
  ((Start Int (y (- Start_1) (* Start_1 Start_1) (mod Start Start_1) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true))
   (Start_6 Int (x (- Start_3) (+ Start_4 Start_3) (mod Start Start_3)))
   (Start_1 Int (5 y (- Start_3) (- Start_4 Start_3) (+ Start_3 Start_3) (* Start_6 Start_5)))
   (StartBool_3 Bool (false (< Start_1 Start) (> Start Start)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_3) (< Start_2 Start) (= Start_2 Start_3) (>= Start_5 Start_1)))
   (Start_4 Int (y (- Start_3 Start_5) (abs Start_5)))
   (Start_3 Int (2 1 5 0 (* Start_2 Start_4) (mod Start_1 Start_5) (abs Start_4)))
   (Start_2 Int (5 3 y (* Start_2 Start) (div Start_1 Start_3) (mod Start_3 Start_1) (ite StartBool_2 Start_2 Start_2)))
   (Start_5 Int (0 (- Start_2) (+ Start_1 Start_3) (* Start_5 Start_2) (div Start_2 Start_1) (abs Start) (ite StartBool_2 Start_2 Start_5)))
   (StartBool_2 Bool (true false (or StartBool_2 StartBool) (<= Start Start) (= Start_1 Start_2) (>= Start_3 Start_2) (> Start_2 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (+ 5 4) (div (- 1) y))))

(check-synth)
