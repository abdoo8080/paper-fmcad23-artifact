(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (Start_1 Int) (Start_4 Int) (Start_2 Int) (StartBool_2 Bool) (Start_12 Int) (Start_6 Int) (Start_5 Int) (Start_9 Int) (Start_8 Int) (Start_7 Int) (Start_13 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_10 Int) (Start_11 Int))
  ((Start Int (3 y (- Start Start_1)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_2 StartBool_1) (or StartBool_2 StartBool_3) (< Start Start_12) (>= Start_6 Start_4)))
   (Start_3 Int (y 1 (+ Start_2 Start_5) (div Start_6 Start_4) (abs Start_6)))
   (Start_1 Int (5 x 0 (- Start_1 Start_2) (+ Start_1 Start_1) (abs Start_1)))
   (Start_4 Int (x (- Start_2) (+ Start_2 Start_2) (* Start_1 Start_4) (div Start_5 Start) (mod Start Start_5)))
   (Start_2 Int (4 (+ Start_3 Start_1) (mod Start_3 Start_3) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_2 Bool (false (or StartBool_1 StartBool_2) (< Start_6 Start_7) (<= Start_11 Start_6) (= Start_5 Start_7) (>= Start_13 Start_5) (> Start_1 Start_3)))
   (Start_12 Int (y 5 1 4 3 0 x (- Start_1) (div Start_6 Start_8)))
   (Start_6 Int (1 (- Start) (div Start Start_8)))
   (Start_5 Int (0 y 1 5 (- Start_6 Start_7) (* Start_1 Start_6) (div Start_8 Start_9)))
   (Start_9 Int (x 5 3 2 0 (- Start_8) (+ Start_2 Start_4) (mod Start_4 Start_5) (abs Start_1) (ite StartBool Start_2 Start_1)))
   (Start_8 Int (5 (- Start_9) (- Start_1 Start_8) (mod Start_7 Start_9) (ite StartBool_1 Start_4 Start_4)))
   (Start_7 Int (1 4 (div Start_6 Start_8) (abs Start)))
   (Start_13 Int (4 (- Start_1 Start_6) (* Start_6 Start_5) (div Start_12 Start_2) (mod Start_11 Start_8) (abs Start_10) (ite StartBool Start_2 Start_1)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_1) (or StartBool_1 StartBool) (< Start_9 Start_1) (>= Start_10 Start_6)))
   (StartBool_3 Bool (true (not StartBool_3) (< Start_2 Start_10) (<= Start_9 Start_12)))
   (Start_10 Int (y 4 (- Start_8 Start_1) (* Start_4 Start_11) (div Start_3 Start_6) (abs Start_5) (ite StartBool_1 Start_10 Start_5)))
   (Start_11 Int (3 (+ Start_6 Start_7) (mod Start_5 Start_12) (abs Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* 3 (* x x)))))

(check-synth)
