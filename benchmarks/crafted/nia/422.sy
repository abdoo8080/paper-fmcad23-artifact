(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_12 Int) (Start_11 Int) (StartBool_2 Bool) (Start_7 Int) (StartBool_4 Bool) (Start_5 Int) (Start_6 Int) (Start_2 Int) (Start_4 Int) (Start_10 Int) (Start_3 Int) (Start_9 Int) (Start_1 Int) (StartBool_3 Bool) (StartBool_1 Bool) (StartBool_6 Bool) (Start_8 Int))
  ((Start Int (x 1 (- Start_1) (+ Start Start_2) (div Start_1 Start_2) (mod Start_2 Start_2) (abs Start_2)))
   (StartBool Bool (false (not StartBool_5) (<= Start_10 Start_10)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool_6) (>= Start Start_9)))
   (Start_12 Int (5 (- Start_1) (+ Start_7 Start) (div Start_6 Start_6) (mod Start_3 Start_5) (ite StartBool_5 Start_5 Start_3)))
   (Start_11 Int (2 (+ Start_9 Start) (* Start_6 Start_2) (mod Start_3 Start_8) (ite StartBool_2 Start_7 Start_8)))
   (StartBool_2 Bool (false true (or StartBool_4 StartBool_2) (< Start_7 Start_3) (<= Start_1 Start_9) (= Start_2 Start_5) (> Start_9 Start_4)))
   (Start_7 Int (5 y (+ Start_3 Start_5) (div Start_1 Start_1)))
   (StartBool_4 Bool (true (not StartBool_2) (and StartBool_1 StartBool_3) (< Start Start_3) (>= Start_7 Start_7) (> Start_9 Start)))
   (Start_5 Int (y x (- Start_2 Start_2) (+ Start_5 Start_2) (* Start_1 Start_4) (mod Start_6 Start) (abs Start_3) (ite StartBool Start_3 Start)))
   (Start_6 Int (5 3 2 0 1 x 4 (* Start_4 Start_2) (div Start_7 Start_4) (mod Start_3 Start_3) (abs Start_2) (ite StartBool Start_5 Start_4)))
   (Start_2 Int (5 (- Start_3 Start) (+ Start_3 Start_4) (* Start_5 Start_4) (mod Start Start_2)))
   (Start_4 Int (y (- Start_6) (abs Start_7)))
   (Start_10 Int (x 5 (- Start_8) (+ Start_11 Start_4)))
   (Start_3 Int (4 (- Start_6) (- Start_5 Start_2) (+ Start_2 Start_3)))
   (Start_9 Int (0 (- Start_9 Start_4) (* Start_6 Start_6) (div Start_10 Start_8) (mod Start_8 Start_8) (abs Start_1) (ite StartBool_4 Start_1 Start_5)))
   (Start_1 Int (1 (+ Start_3 Start_2) (* Start_5 Start_2) (div Start_7 Start_5) (mod Start_4 Start_6) (abs Start_1) (ite StartBool_1 Start Start_2)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool) (< Start_3 Start) (= Start_5 Start_5) (>= Start_7 Start)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_2 StartBool_3) (or StartBool_3 StartBool_1) (< Start_5 Start_1) (<= Start_8 Start_3) (= Start_3 Start_6)))
   (StartBool_6 Bool (true false (not StartBool_6) (or StartBool_3 StartBool_5) (< Start_12 Start_6) (= Start_3 Start) (> Start Start_11)))
   (Start_8 Int (0 y 5 (- Start_8) (+ Start_2 Start_4) (* Start_8 Start_1) (ite StartBool Start_2 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 3 (* (* (div (- 2) 0) 2) 3))))

(check-synth)
