(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_15 Int) (Start_16 Int) (Start_13 Int) (Start_2 Int) (StartBool_6 Bool) (Start_12 Int) (Start_4 Int) (StartBool_1 Bool) (Start_3 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_11 Int) (Start_5 Int) (Start_17 Int) (StartBool_5 Bool) (Start_18 Int) (Start_14 Int) (StartBool_4 Bool) (Start_6 Int) (Start_7 Int) (Start_9 Int) (Start_1 Int) (Start_10 Int) (Start_8 Int))
  ((Start Int (1 y 2 4 (- Start_1 Start) (div Start Start) (abs Start)))
   (StartBool Bool (true false (<= Start_6 Start_17) (= Start Start_18) (>= Start_5 Start_6) (> Start_9 Start_1)))
   (StartBool_7 Bool (true false (not StartBool_6) (and StartBool_4 StartBool_4) (< Start_15 Start_16) (> Start_6 Start_18)))
   (Start_15 Int (x 1 y 3 2 (- Start_15) (- Start_8 Start_7) (div Start_3 Start_3) (abs Start_7)))
   (Start_16 Int (y (- Start_9)))
   (Start_13 Int (2 (- Start_2) (+ Start_12 Start) (div Start Start_4) (ite StartBool_6 Start_6 Start_10)))
   (Start_2 Int (5 0 x (+ Start_8 Start_11) (mod Start Start_1) (abs Start_13) (ite StartBool_2 Start_14 Start_12)))
   (StartBool_6 Bool (false (not StartBool_2) (and StartBool_1 StartBool_1) (<= Start_12 Start_3) (= Start_3 Start_12) (>= Start_9 Start_15) (> Start_6 Start_16)))
   (Start_12 Int (0 (- Start_8 Start_9) (* Start_10 Start_9) (div Start_2 Start_1) (mod Start_12 Start_5)))
   (Start_4 Int (4 3 2 x (- Start_8) (+ Start_12 Start_5) (* Start Start_7) (div Start_2 Start_4) (mod Start_4 Start_8) (abs Start_12)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_1) (or StartBool_1 StartBool) (< Start_1 Start) (<= Start_2 Start_3) (= Start_2 Start_1) (> Start_3 Start_3)))
   (Start_3 Int (y 2 (- Start) (- Start_3 Start_1) (+ Start_3 Start_1) (div Start_3 Start_3) (mod Start_4 Start_3) (ite StartBool_2 Start_2 Start)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool) (= Start_1 Start_4) (>= Start Start_4)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_4) (< Start_1 Start_1) (>= Start_5 Start)))
   (Start_11 Int (5 (- Start Start_6) (+ Start_10 Start_4) (* Start_5 Start_10) (mod Start_10 Start)))
   (Start_5 Int (5 3 y 1 x (- Start_4 Start_4) (+ Start_4 Start_2) (abs Start_6)))
   (Start_17 Int (y (- Start_7 Start_14) (div Start_16 Start_4) (mod Start_2 Start_17) (abs Start_14)))
   (StartBool_5 Bool (true (not StartBool_5) (< Start_6 Start_6) (= Start_7 Start_3) (>= Start_7 Start_6) (> Start_1 Start_4)))
   (Start_18 Int (2 x y 1 4 5 0 3 (- Start_12) (- Start_5 Start_10) (abs Start_7) (ite StartBool_7 Start_2 Start_5)))
   (Start_14 Int (0 4 (- Start_5) (- Start_10 Start_9) (* Start_2 Start_13) (div Start_6 Start_6)))
   (StartBool_4 Bool (false true (and StartBool_1 StartBool) (or StartBool_4 StartBool) (>= Start_11 Start_4)))
   (Start_6 Int (y 4 5 (- Start_5 Start_3) (* Start_6 Start) (abs Start) (ite StartBool_5 Start_1 Start)))
   (Start_7 Int (2 3 (+ Start_2 Start_6) (* Start Start_5) (mod Start_7 Start_8) (ite StartBool_4 Start_8 Start_9)))
   (Start_9 Int (4 1 5 (- Start_6 Start_7) (+ Start_10 Start_4) (* Start_5 Start_3) (mod Start_6 Start_2) (abs Start_8) (ite StartBool_1 Start_3 Start)))
   (Start_1 Int (4 2 3 (* Start Start) (div Start Start_2) (abs Start_3) (ite StartBool_1 Start_2 Start)))
   (Start_10 Int (1 x 2 (+ Start_9 Start_2) (div Start_10 Start_2) (abs Start_8) (ite StartBool_5 Start_6 Start_9)))
   (Start_8 Int (2 x 1 (- Start_1) (+ Start_3 Start_8) (* Start_1 Start) (div Start_4 Start_8) (mod Start_9 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 2 0)))

(check-synth)
