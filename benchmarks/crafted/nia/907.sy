(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_11 Int) (Start_12 Int) (Start_4 Int) (StartBool_1 Bool) (Start_8 Int) (Start_3 Int) (Start_10 Int) (Start_7 Int) (StartBool_2 Bool) (Start_6 Int) (Start_5 Int) (StartBool_3 Bool) (Start_9 Int) (Start_1 Int) (StartBool_6 Bool) (StartBool_4 Bool) (StartBool_5 Bool))
  ((Start Int (2 0 5 (- Start_1) (- Start_1 Start_2) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (true false (<= Start_6 Start_6) (>= Start_2 Start_4)))
   (Start_2 Int (4 (- Start_9) (- Start_8 Start_2) (+ Start_3 Start_2) (* Start Start_7) (mod Start_10 Start_12) (abs Start_4) (ite StartBool_6 Start_2 Start_3)))
   (Start_11 Int (2 (- Start_11 Start_2) (* Start_11 Start_5) (div Start_3 Start_12) (mod Start_7 Start_2) (abs Start_9) (ite StartBool_2 Start_2 Start_12)))
   (Start_12 Int (0 (- Start Start_1) (div Start_12 Start_4) (mod Start_1 Start_4) (ite StartBool_4 Start_11 Start_12)))
   (Start_4 Int (0 2 (- Start_2) (- Start_5 Start_3) (+ Start_6 Start_7) (mod Start_8 Start) (abs Start_1) (ite StartBool_2 Start Start_4)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_2) (or StartBool StartBool) (= Start_3 Start_4)))
   (Start_8 Int (1 (+ Start_3 Start_5) (mod Start Start_1) (abs Start_8)))
   (Start_3 Int (2 (* Start_7 Start_10) (div Start_7 Start_4) (mod Start_10 Start_6)))
   (Start_10 Int (0 2 4 (- Start_2) (- Start_8 Start_3) (+ Start_3 Start_6) (div Start_11 Start_9) (abs Start_9) (ite StartBool_5 Start_6 Start_9)))
   (Start_7 Int (1 5 (- Start_4) (- Start Start_1) (+ Start_8 Start_6) (ite StartBool_1 Start_1 Start)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_2 StartBool_5) (< Start_7 Start_7) (<= Start_6 Start_11) (> Start_10 Start_8)))
   (Start_6 Int (1 3 0 (- Start_6) (div Start_4 Start_8) (abs Start_3)))
   (Start_5 Int (y (- Start_7) (+ Start_5 Start_9) (* Start_3 Start_4) (mod Start_3 Start)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_3 StartBool_4) (= Start_6 Start_4) (>= Start_5 Start_7) (> Start_6 Start_3)))
   (Start_9 Int (x (div Start_7 Start_4) (abs Start_8) (ite StartBool_3 Start_1 Start_2)))
   (Start_1 Int (y (- Start_5 Start_6) (+ Start_5 Start_5) (* Start_3 Start_9) (mod Start_4 Start_3) (abs Start_10) (ite StartBool_2 Start_11 Start_8)))
   (StartBool_6 Bool (false (not StartBool_4) (and StartBool_2 StartBool_3) (or StartBool_2 StartBool) (< Start_9 Start_12) (> Start_11 Start_9)))
   (StartBool_4 Bool (true (or StartBool_3 StartBool_1) (<= Start_9 Start) (= Start_6 Start_9)))
   (StartBool_5 Bool (false (<= Start_7 Start_6) (>= Start_2 Start_2) (> Start_5 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 4 (- (mod 2 (mod 3 0))))))

(check-synth)
