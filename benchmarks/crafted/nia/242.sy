(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_17 Int) (StartBool_5 Bool) (Start_14 Int) (Start_3 Int) (StartBool_2 Bool) (Start_4 Int) (Start_18 Int) (Start_5 Int) (StartBool_1 Bool) (Start_2 Int) (Start_7 Int) (Start_8 Int) (Start_6 Int) (Start_15 Int) (StartBool_4 Bool) (Start_13 Int) (StartBool_3 Bool) (Start_16 Int) (Start_12 Int) (Start_10 Int) (Start_9 Int) (Start_11 Int))
  ((Start Int (2 0 y (+ Start Start) (* Start_1 Start_2) (div Start_1 Start_2) (abs Start_3) (ite StartBool_1 Start_4 Start_4)))
   (StartBool Bool (false (>= Start_17 Start_4)))
   (Start_1 Int (3 x y (- Start_1) (+ Start_17 Start_9) (* Start_15 Start) (div Start_18 Start_14) (mod Start_9 Start_8)))
   (Start_17 Int (2 5 4 1 x (- Start_15 Start_10) (+ Start_15 Start_17) (* Start_18 Start_7) (div Start_1 Start_12) (abs Start_1) (ite StartBool Start Start_1)))
   (StartBool_5 Bool (false (< Start Start_6) (<= Start_6 Start_13) (= Start_17 Start_11)))
   (Start_14 Int (x 2 (- Start_16 Start_1) (+ Start_7 Start_13) (div Start_8 Start) (abs Start_14)))
   (Start_3 Int (5 0 (- Start_6) (- Start_10 Start_1) (+ Start_7 Start) (* Start_3 Start_1) (div Start_4 Start_4) (ite StartBool_5 Start_8 Start_13)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_1) (or StartBool StartBool_1) (< Start_10 Start_12) (<= Start_6 Start_8) (= Start_5 Start_5)))
   (Start_4 Int (y x 4 (- Start Start_2) (+ Start_4 Start_5) (div Start Start_1) (mod Start_3 Start)))
   (Start_18 Int (4 5 (- Start) (* Start Start_3) (div Start_4 Start_6) (mod Start_6 Start_13) (abs Start_3)))
   (Start_5 Int (5 x 4 0 (- Start_5 Start_5) (mod Start_2 Start_3) (abs Start_2)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_2) (< Start_4 Start_6) (<= Start_3 Start_1) (= Start_7 Start_6) (> Start_5 Start_4)))
   (Start_2 Int (1 (- Start_6 Start_18) (div Start_15 Start_13) (mod Start_3 Start_11) (abs Start_8)))
   (Start_7 Int (0 5 4 (- Start_6) (- Start_6 Start_6) (+ Start_5 Start_4) (* Start_4 Start_1) (div Start_4 Start_6) (mod Start_4 Start_1)))
   (Start_8 Int (x 3 (mod Start_1 Start) (ite StartBool_2 Start_3 Start_4)))
   (Start_6 Int (4 (- Start_3) (+ Start_4 Start_5) (div Start_4 Start_3) (ite StartBool_3 Start Start_8)))
   (Start_15 Int (x (- Start_6 Start_14) (mod Start_4 Start_1)))
   (StartBool_4 Bool (true (not StartBool) (or StartBool_1 StartBool_1) (= Start_3 Start_8) (> Start_4 Start_10)))
   (Start_13 Int (y 3 (div Start_14 Start_15) (mod Start_6 Start_16)))
   (StartBool_3 Bool (false (or StartBool_1 StartBool) (> Start_8 Start_9)))
   (Start_16 Int (4 (- Start_14) (- Start_15 Start_11) (+ Start_6 Start_11) (* Start_11 Start_11) (abs Start_12) (ite StartBool Start_15 Start_6)))
   (Start_12 Int (0 (- Start_3) (+ Start_12 Start_12) (div Start_12 Start_9) (mod Start_6 Start_8) (abs Start_1)))
   (Start_10 Int (x 3 2 (- Start_3 Start_4) (mod Start_1 Start_5) (abs Start_10) (ite StartBool_2 Start_7 Start)))
   (Start_9 Int (x 5 (- Start_7 Start_1) (* Start_3 Start_10) (div Start_9 Start_10) (mod Start Start_2) (abs Start_11) (ite StartBool_2 Start_1 Start_8)))
   (Start_11 Int (4 3 (- Start_4 Start_7) (+ Start_3 Start_6) (* Start_2 Start_7) (ite StartBool_4 Start_10 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* 5 (mod 2 x)))))

(check-synth)
