(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_5 Int) (Start_6 Int) (Start_9 Int) (Start_1 Int) (Start_3 Int) (StartBool_2 Bool) (Start_2 Int) (StartBool_1 Bool) (Start_8 Int) (Start_7 Int) (Start_4 Int))
  ((Start Int (0 (- Start) (+ Start Start_1) (* Start Start) (div Start_2 Start_3) (abs Start_1) (ite StartBool_1 Start_1 Start_3)))
   (StartBool Bool (false true (not StartBool_1) (<= Start_4 Start_4) (= Start_8 Start_4)))
   (Start_5 Int (y (- Start_5 Start_7) (+ Start_1 Start_4) (ite StartBool_2 Start_8 Start_1)))
   (Start_6 Int (4 5 3 y (- Start_1) (- Start_5 Start_4) (div Start_7 Start_7) (mod Start_6 Start_4) (abs Start_2)))
   (Start_9 Int (3 (* Start_4 Start_4) (mod Start_4 Start_7)))
   (Start_1 Int (1 0 (- Start_2 Start_3) (* Start_2 Start_8) (div Start_9 Start_4) (ite StartBool_2 Start_4 Start_6)))
   (Start_3 Int (5 (- Start_3 Start_3) (+ Start_3 Start_2) (mod Start Start_2)))
   (StartBool_2 Bool (false true (or StartBool StartBool) (<= Start_3 Start) (> Start_2 Start_2)))
   (Start_2 Int (4 5 y 2 3 (* Start Start_4) (mod Start_1 Start) (abs Start_1) (ite StartBool_2 Start_4 Start)))
   (StartBool_1 Bool (false (not StartBool_2) (< Start_1 Start_2) (>= Start_2 Start)))
   (Start_8 Int (4 y 0 x 1 (- Start) (div Start_2 Start_6) (mod Start_8 Start_1) (abs Start_1) (ite StartBool Start_2 Start_7)))
   (Start_7 Int (1 (- Start_2) (- Start_5 Start_2) (+ Start_2 Start_8) (div Start_1 Start_7) (abs Start_2)))
   (Start_4 Int (2 (- Start_1) (* Start_4 Start) (div Start_3 Start_4) (mod Start Start_4) (abs Start_1) (ite StartBool_2 Start_5 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (+ (mod 2 (- x (div 1 (- 2 y)))) 2))))

(check-synth)
