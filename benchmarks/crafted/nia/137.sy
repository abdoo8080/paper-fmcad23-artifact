(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_15 Int) (Start_16 Int) (Start_13 Int) (Start_1 Int) (StartBool_4 Bool) (Start_7 Int) (Start_5 Int) (Start_4 Int) (Start_14 Int) (StartBool_1 Bool) (Start_2 Int) (Start_6 Int) (Start_8 Int) (Start_11 Int) (StartBool_3 Bool) (Start_10 Int) (Start_3 Int) (StartBool_2 Bool) (Start_9 Int) (Start_12 Int))
  ((Start Int (x (div Start Start) (mod Start Start_1)))
   (StartBool Bool (false (< Start_15 Start_14) (<= Start_13 Start_8) (> Start_12 Start_8)))
   (Start_17 Int (y 3 2 1 (- Start_5) (+ Start_11 Start_5) (mod Start_17 Start_16)))
   (Start_15 Int (2 y (* Start_9 Start_4) (div Start_3 Start_13) (mod Start_14 Start_12) (abs Start_14) (ite StartBool_2 Start_6 Start_1)))
   (Start_16 Int (2 (- Start) (- Start_1 Start_8) (* Start_16 Start_15) (div Start_14 Start_7) (mod Start_9 Start_16)))
   (Start_13 Int (2 0 (- Start_4) (- Start_10 Start_15) (+ Start_10 Start_3) (* Start_15 Start_8) (div Start_15 Start_2) (mod Start_14 Start_4) (abs Start_4) (ite StartBool_4 Start_8 Start_16)))
   (Start_1 Int (3 4 (- Start) (- Start Start_2) (+ Start_1 Start) (* Start_2 Start_1) (div Start_2 Start_2) (mod Start Start) (abs Start_1) (ite StartBool Start Start_1)))
   (StartBool_4 Bool (true false (and StartBool_1 StartBool_2) (>= Start Start) (> Start_5 Start_15)))
   (Start_7 Int (5 (* Start_7 Start_7) (div Start Start_6) (abs Start_5) (ite StartBool Start_5 Start_4)))
   (Start_5 Int (2 3 (+ Start_3 Start_5)))
   (Start_4 Int (1 2 4 x 3 y (- Start_10) (- Start_2 Start_11) (+ Start_3 Start_11) (* Start_2 Start_4) (div Start_10 Start_4) (mod Start_9 Start_3) (abs Start_12)))
   (Start_14 Int (5 (- Start_13) (- Start_11 Start_6) (* Start_14 Start) (div Start_1 Start_12) (mod Start_7 Start_4) (abs Start_7)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_2) (< Start Start_4) (= Start_7 Start_5) (> Start_6 Start_8)))
   (Start_2 Int (3 (- Start_3) (mod Start_4 Start_1) (ite StartBool_1 Start_5 Start_6)))
   (Start_6 Int (4 0 3 (- Start_3 Start_5) (+ Start_6 Start_3) (* Start_5 Start_2) (ite StartBool_1 Start_7 Start_7)))
   (Start_8 Int (2 (+ Start Start_7) (* Start_5 Start_4) (mod Start Start_4) (abs Start_2)))
   (Start_11 Int (2 1 5 (- Start_8 Start_6) (* Start_11 Start_16)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_3 StartBool_2) (< Start_10 Start_11)))
   (Start_10 Int (x 2 (- Start_2) (- Start_6 Start_3) (mod Start_3 Start_2) (abs Start_5) (ite StartBool_1 Start Start_2)))
   (Start_3 Int (3 (- Start_6) (mod Start_12 Start_1) (abs Start_17) (ite StartBool_1 Start_1 Start_10)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_1 StartBool) (<= Start_5 Start_9) (> Start_3 Start_5)))
   (Start_9 Int (2 5 (- Start_2) (+ Start_1 Start_10) (* Start Start_10) (div Start_10 Start_3) (abs Start_1) (ite StartBool_1 Start_7 Start_10)))
   (Start_12 Int (0 (- Start_13) (+ Start_9 Start_13) (* Start_4 Start_1) (div Start_4 Start) (ite StartBool_3 Start_14 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- (- x y) 3) (+ 2 x))))

(check-synth)
