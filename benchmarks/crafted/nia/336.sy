(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_2 Int) (StartBool_4 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_5 Int) (Start_7 Int) (Start_6 Int) (Start_9 Int) (Start_8 Int) (StartBool_1 Bool) (Start_4 Int) (Start_11 Int) (Start_1 Int) (Start_10 Int) (Start_13 Int) (Start_14 Int) (Start_12 Int))
  ((Start Int (2 (- Start_1 Start) (* Start Start) (ite StartBool Start_2 Start_3)))
   (StartBool Bool (true false (and StartBool StartBool_3) (<= Start_5 Start_4) (>= Start_3 Start_14) (> Start_6 Start_11)))
   (StartBool_3 Bool (false (and StartBool_2 StartBool) (or StartBool_2 StartBool_4) (= Start_4 Start_3) (> Start_9 Start_1)))
   (Start_2 Int (4 5 (- Start_3) (* Start_14 Start_11)))
   (StartBool_4 Bool (false (not StartBool) (and StartBool_1 StartBool_1) (<= Start_13 Start_5) (> Start_3 Start_9)))
   (Start_3 Int (3 (- Start_4) (* Start_5 Start) (mod Start_2 Start_4)))
   (StartBool_2 Bool (true false (or StartBool StartBool_1) (< Start_12 Start_6) (= Start_12 Start_6) (>= Start_4 Start_2) (> Start_5 Start_13)))
   (Start_5 Int (y 1 (- Start_6 Start_4) (* Start_2 Start_6) (mod Start_2 Start_3)))
   (Start_7 Int (1 3 y (- Start_4 Start_8) (+ Start_1 Start_2) (div Start_4 Start_9) (mod Start_1 Start_7) (ite StartBool_1 Start_8 Start_9)))
   (Start_6 Int (2 0 x (- Start_6) (- Start_2 Start_1) (+ Start_3 Start_7) (* Start Start_2) (div Start_4 Start_4) (mod Start_7 Start_6) (abs Start) (ite StartBool Start_6 Start_2)))
   (Start_9 Int (2 (+ Start_6 Start_5) (* Start_6 Start_4) (div Start_4 Start_7) (ite StartBool_1 Start_9 Start)))
   (Start_8 Int (0 (+ Start_4 Start_7) (* Start_3 Start_2) (div Start_6 Start_2) (abs Start_9) (ite StartBool_1 Start_7 Start_8)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool StartBool) (or StartBool_1 StartBool_1) (< Start_6 Start_3) (= Start_3 Start_1)))
   (Start_4 Int (y (+ Start_5 Start) (ite StartBool_2 Start_10 Start_3)))
   (Start_11 Int (x 2 0 5 y 3 1 (- Start_6 Start_1) (* Start_9 Start_11) (div Start_6 Start_12) (abs Start_13) (ite StartBool_2 Start_4 Start_1)))
   (Start_1 Int (4 2 (- Start_2 Start_7) (div Start_2 Start) (mod Start_7 Start_9) (ite StartBool Start_9 Start_2)))
   (Start_10 Int (0 (- Start_7) (- Start_11 Start_4) (+ Start_5 Start_8) (* Start_4 Start_4) (mod Start_10 Start_2) (ite StartBool Start_3 Start_2)))
   (Start_13 Int (4 (mod Start_9 Start_11) (abs Start_1)))
   (Start_14 Int (4 2 (- Start_3 Start_12) (+ Start_10 Start_8) (* Start_8 Start_10) (mod Start_11 Start_3) (ite StartBool_2 Start_4 Start_7)))
   (Start_12 Int (4 5 (- Start_6 Start_14) (+ Start_6 Start_2) (* Start Start) (div Start_12 Start_12) (ite StartBool_2 Start_13 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* x y))))

(check-synth)
