(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (StartBool_2 Bool) (StartBool_3 Bool) (Start_15 Int) (Start_17 Int) (Start_16 Int) (Start_19 Int) (Start_14 Int) (StartBool_1 Bool) (Start_13 Int) (Start_2 Int) (Start_5 Int) (Start_12 Int) (Start_7 Int) (Start_6 Int) (Start_9 Int) (Start_18 Int) (Start_1 Int) (Start_10 Int) (Start_3 Int) (Start_8 Int) (Start_4 Int) (Start_11 Int))
  ((Start Int (5 3 4 1 y 2 x (- Start_1) (+ Start Start_2) (div Start_1 Start_2) (mod Start_2 Start)))
   (StartBool Bool (false (not StartBool_3) (and StartBool_3 StartBool_1) (or StartBool_4 StartBool_3) (< Start Start_1) (= Start_12 Start_3)))
   (StartBool_5 Bool (false (or StartBool StartBool_3) (< Start_6 Start_10) (= Start Start) (>= Start_8 Start_19) (> Start_15 Start_18)))
   (StartBool_4 Bool (true false (and StartBool_4 StartBool) (or StartBool_4 StartBool_3) (<= Start_12 Start_5) (= Start_19 Start_17)))
   (StartBool_2 Bool (true false (< Start_13 Start_1) (= Start_6 Start_10) (>= Start_13 Start_12)))
   (StartBool_3 Bool (true (not StartBool_5) (and StartBool_3 StartBool_5) (< Start_1 Start_13) (= Start_13 Start_2) (> Start_3 Start_6)))
   (Start_15 Int (4 x 1 2 (- Start_13) (* Start_5 Start_3) (div Start_12 Start_15) (mod Start_9 Start_12) (abs Start) (ite StartBool_2 Start_15 Start_3)))
   (Start_17 Int (3 (- Start_5) (* Start_2 Start_13) (div Start_18 Start_13)))
   (Start_16 Int (4 (- Start_4 Start_10) (* Start_17 Start_3)))
   (Start_19 Int (0 (+ Start_17 Start_14) (* Start_1 Start_18) (abs Start_8) (ite StartBool_3 Start_1 Start_1)))
   (Start_14 Int (1 (* Start_3 Start_15) (div Start_11 Start_15) (mod Start_15 Start_16) (abs Start_11)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (< Start_6 Start_10) (<= Start_2 Start_13) (>= Start_8 Start_5)))
   (Start_13 Int (0 (- Start_8) (- Start_11 Start_1) (+ Start_1 Start_7) (* Start_2 Start_2) (mod Start_8 Start_14) (abs Start_8)))
   (Start_2 Int (1 3 4 (- Start Start_1) (* Start_3 Start) (mod Start_4 Start)))
   (Start_5 Int (y (+ Start_1 Start) (* Start Start_4) (mod Start_6 Start_7) (abs Start_4) (ite StartBool Start Start_3)))
   (Start_12 Int (y (div Start_10 Start_12) (abs Start_3)))
   (Start_7 Int (2 5 4 x (- Start_4 Start_1) (+ Start_6 Start_6) (div Start_4 Start_3) (abs Start_3) (ite StartBool Start_2 Start_2)))
   (Start_6 Int (y 4 x 3 (- Start_1) (- Start_4 Start_2) (* Start Start_2) (mod Start_5 Start_4) (abs Start_5)))
   (Start_9 Int (2 (- Start_11 Start_12) (* Start_7 Start_11) (div Start_8 Start_8)))
   (Start_18 Int (y 4 (- Start_15 Start) (div Start_18 Start_2) (mod Start_18 Start)))
   (Start_1 Int (1 4 (- Start_5) (div Start_9 Start_1) (abs Start_12) (ite StartBool_1 Start_8 Start_4)))
   (Start_10 Int (y (- Start_6) (ite StartBool Start_5 Start_2)))
   (Start_3 Int (2 x (- Start_6) (- Start_8 Start_3) (+ Start_8 Start_3)))
   (Start_8 Int (4 5 (- Start_6) (+ Start_9 Start_8) (* Start_10 Start) (mod Start_5 Start_8) (abs Start_7) (ite StartBool Start_10 Start_9)))
   (Start_4 Int (2 y 4 (- Start_5 Start_1) (* Start_4 Start) (mod Start_3 Start) (abs Start)))
   (Start_11 Int (4 (- Start_8) (+ Start Start_7) (* Start_2 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 0 (mod 3 x))))

(check-synth)
