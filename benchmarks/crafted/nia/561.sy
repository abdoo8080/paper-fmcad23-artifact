(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_15 Int) (Start_1 Int) (Start_3 Int) (StartBool_5 Bool) (Start_16 Int) (Start_14 Int) (Start_2 Int) (Start_4 Int) (StartBool_1 Bool) (Start_12 Int) (StartBool_6 Bool) (Start_9 Int) (Start_6 Int) (Start_10 Int) (Start_5 Int) (StartBool_2 Bool) (Start_8 Int) (Start_7 Int) (StartBool_3 Bool) (Start_11 Int) (StartBool_4 Bool))
  ((Start Int (y (+ Start Start) (div Start_1 Start_1) (abs Start_2)))
   (StartBool Bool (false (not StartBool_6) (< Start_13 Start_6) (= Start_4 Start_10) (>= Start_4 Start_14) (> Start_9 Start_11)))
   (Start_13 Int (0 x y 1 (- Start Start_5) (+ Start_15 Start_2) (div Start_9 Start_2) (mod Start_12 Start_4) (ite StartBool_4 Start_15 Start_16)))
   (Start_15 Int (2 (- Start_13) (- Start_4 Start_12) (+ Start_10 Start_15) (div Start_16 Start_9) (mod Start_5 Start_5) (abs Start) (ite StartBool_6 Start Start_2)))
   (Start_1 Int (5 2 x 1 (- Start Start_12) (abs Start_5) (ite StartBool_1 Start_7 Start_11)))
   (Start_3 Int (x (- Start_11 Start_7) (* Start_4 Start_6) (ite StartBool_2 Start_7 Start_11)))
   (StartBool_5 Bool (false true (not StartBool_5) (and StartBool_5 StartBool_2) (or StartBool_3 StartBool_6) (< Start_2 Start_2) (> Start_1 Start_7)))
   (Start_16 Int (1 x 2 0 5 (- Start Start_9) (+ Start_14 Start_10) (mod Start_4 Start_1) (abs Start_8) (ite StartBool_2 Start_5 Start_3)))
   (Start_14 Int (3 (- Start) (+ Start_9 Start_9) (ite StartBool Start_14 Start_2)))
   (Start_2 Int (5 x (* Start_2 Start_3) (div Start_4 Start_1) (mod Start_5 Start_4) (abs Start_4) (ite StartBool_1 Start_1 Start_2)))
   (Start_4 Int (y 4 0 (- Start_7 Start_3) (div Start_11 Start_5) (abs Start_8) (ite StartBool_5 Start_7 Start_2)))
   (StartBool_1 Bool (false (<= Start_4 Start_1) (>= Start_6 Start_5)))
   (Start_12 Int (x (- Start Start_2) (+ Start_11 Start_3) (* Start_4 Start_12)))
   (StartBool_6 Bool (true (< Start_4 Start_4) (>= Start_1 Start_7)))
   (Start_9 Int (0 3 (- Start_7) (+ Start_6 Start_2) (div Start_9 Start_5) (mod Start Start_5) (abs Start_3) (ite StartBool_3 Start_6 Start_4)))
   (Start_6 Int (3 (- Start_4) (- Start_6 Start_7) (+ Start Start) (ite StartBool_2 Start_6 Start_2)))
   (Start_10 Int (4 5 (- Start) (div Start Start_5) (mod Start Start_9)))
   (Start_5 Int (y (- Start_5) (mod Start_5 Start_5) (abs Start_1)))
   (StartBool_2 Bool (true (or StartBool StartBool_1) (< Start_1 Start) (<= Start_7 Start) (>= Start_8 Start_3)))
   (Start_8 Int (1 (* Start_5 Start_7) (div Start_3 Start_9) (mod Start_6 Start_7) (abs Start) (ite StartBool Start_6 Start_3)))
   (Start_7 Int (1 (mod Start_1 Start_10) (ite StartBool_3 Start Start_4)))
   (StartBool_3 Bool (false true (or StartBool_4 StartBool_3) (= Start_8 Start_6)))
   (Start_11 Int (3 1 2 (div Start_8 Start_8)))
   (StartBool_4 Bool (true (not StartBool_3) (or StartBool StartBool) (< Start_9 Start_1) (= Start_10 Start_4) (> Start_7 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (+ y 2) 3)))

(check-synth)
