(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_13 Int) (Start_2 Int) (Start_1 Int) (Start_5 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_8 Int) (Start_9 Int) (Start_14 Int) (Start_10 Int) (Start_6 Int) (Start_11 Int) (Start_3 Int) (Start_7 Int) (Start_4 Int))
  ((Start Int (2 (* Start Start_1) (ite StartBool Start Start_1)))
   (StartBool Bool (true false (or StartBool_2 StartBool) (< Start_8 Start_12) (<= Start_6 Start_10) (= Start_12 Start_8) (>= Start_11 Start_13)))
   (Start_12 Int (0 (- Start_11) (* Start_11 Start_3) (div Start_4 Start_12) (mod Start_10 Start_6) (abs Start_13)))
   (Start_13 Int (2 (- Start_2) (+ Start_7 Start_14) (div Start_6 Start_9) (mod Start_4 Start_4) (abs Start_9) (ite StartBool_1 Start_5 Start_5)))
   (Start_2 Int (x 5 (- Start_5) (- Start_8 Start) (* Start Start_1) (div Start_7 Start_7) (abs Start_6)))
   (Start_1 Int (4 0 5 (- Start) (- Start_1 Start_2) (* Start_3 Start_2) (mod Start_3 Start_2) (ite StartBool Start Start)))
   (Start_5 Int (0 (- Start_1) (- Start_4 Start_1) (+ Start Start_4) (* Start_1 Start_3) (mod Start_1 Start_5) (abs Start_1) (ite StartBool_1 Start_1 Start_4)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (< Start_6 Start_5) (<= Start_1 Start_7) (>= Start_2 Start_4)))
   (StartBool_2 Bool (true (and StartBool StartBool) (< Start_3 Start_4) (= Start_6 Start_1) (>= Start_6 Start_2)))
   (Start_8 Int (1 (- Start_9 Start_1) (div Start_3 Start_2)))
   (Start_9 Int (1 5 0 x (- Start_3 Start_2) (* Start_5 Start_7) (div Start_2 Start_6) (mod Start_3 Start_8)))
   (Start_14 Int (3 (- Start_13) (+ Start_14 Start_1) (* Start_12 Start_2) (mod Start_11 Start_1) (ite StartBool_2 Start_4 Start_1)))
   (Start_10 Int (5 0 3 (div Start_10 Start_10) (abs Start_11)))
   (Start_6 Int (1 (- Start_7) (- Start_3 Start_2) (* Start_3 Start_9) (div Start_6 Start_10) (mod Start_9 Start_9)))
   (Start_11 Int (5 2 y 4 (- Start_10) (- Start_2 Start_5) (+ Start Start_5) (div Start_10 Start_4) (mod Start_2 Start_6)))
   (Start_3 Int (1 (- Start_2) (- Start_1 Start_2) (+ Start_4 Start_2) (* Start_2 Start_4) (mod Start Start_4) (abs Start_3) (ite StartBool Start_5 Start_2)))
   (Start_7 Int (4 (- Start_2) (- Start_8 Start_4) (mod Start_2 Start_7) (abs Start) (ite StartBool_2 Start_8 Start)))
   (Start_4 Int (y (+ Start_6 Start_9) (ite StartBool Start_10 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 1 0))))

(check-synth)
