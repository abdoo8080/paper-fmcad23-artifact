(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_12 Int) (Start_14 Int) (Start_2 Int) (Start_4 Int) (Start_5 Int) (StartBool_4 Bool) (Start_1 Int) (Start_7 Int) (Start_15 Int) (Start_13 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartBool_3 Bool) (Start_8 Int) (Start_6 Int) (StartBool_5 Bool) (StartBool_6 Bool) (StartBool_7 Bool) (Start_9 Int) (Start_11 Int) (Start_3 Int) (Start_10 Int))
  ((Start Int (1 (- Start) (- Start_1 Start_1) (+ Start Start_1) (div Start_2 Start) (mod Start_2 Start_1) (abs Start_3)))
   (StartBool Bool (false true (or StartBool_3 StartBool_3) (>= Start_15 Start_6) (> Start_10 Start_13)))
   (Start_16 Int (3 y 1 4 2 5 0 x (- Start_6 Start_7) (abs Start_13) (ite StartBool_5 Start_15 Start_9)))
   (Start_12 Int (y (+ Start_7 Start_5) (div Start Start_6) (mod Start_9 Start_12) (abs Start_2)))
   (Start_14 Int (y (- Start_5 Start_1) (+ Start_5 Start) (mod Start_10 Start_7) (abs Start_1) (ite StartBool_7 Start_7 Start_7)))
   (Start_2 Int (x (- Start_10) (+ Start_11 Start_9) (* Start_10 Start_5) (div Start_10 Start_1) (mod Start_1 Start_5) (abs Start_10)))
   (Start_4 Int (y 5 1 (- Start_4) (- Start_6 Start_5) (* Start_4 Start_3) (div Start Start_3) (abs Start_2) (ite StartBool_4 Start_3 Start_2)))
   (Start_5 Int (3 1 0 2 y x (- Start_8 Start_9) (* Start_4 Start) (mod Start_7 Start_8)))
   (StartBool_4 Bool (false (not StartBool_1) (= Start_6 Start_2) (> Start_3 Start_7)))
   (Start_1 Int (3 (- Start_10 Start_4) (+ Start_2 Start_1) (* Start_5 Start) (mod Start_12 Start_4) (abs Start_9) (ite StartBool_2 Start_13 Start_13)))
   (Start_7 Int (1 (- Start_11 Start_8) (abs Start_10) (ite StartBool_3 Start_7 Start_1)))
   (Start_15 Int (1 5 (- Start_7) (+ Start_6 Start_3) (mod Start_14 Start_16) (ite StartBool_2 Start_4 Start_10)))
   (Start_13 Int (4 y (- Start) (+ Start_8 Start) (* Start_5 Start_5) (mod Start_3 Start_14) (abs Start_14)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_4) (or StartBool_5 StartBool_2) (< Start_6 Start) (> Start_5 Start_1)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_3) (< Start_1 Start) (= Start_3 Start_3)))
   (StartBool_3 Bool (false (not StartBool_1) (< Start_3 Start_3)))
   (Start_8 Int (4 3 (* Start Start_2) (div Start_9 Start_9) (mod Start_4 Start_1) (abs Start_4) (ite StartBool_6 Start_3 Start_6)))
   (Start_6 Int (4 (- Start_3 Start_6) (+ Start Start_4)))
   (StartBool_5 Bool (true false (or StartBool_6 StartBool_5) (< Start_1 Start_2) (<= Start_3 Start_1)))
   (StartBool_6 Bool (false true (not StartBool_7) (<= Start_2 Start_1) (>= Start_6 Start_5)))
   (StartBool_7 Bool (false true (not StartBool_7) (and StartBool_7 StartBool_3) (< Start_7 Start_5) (= Start_5 Start_8)))
   (Start_9 Int (4 (- Start) (- Start_6 Start_3) (+ Start_10 Start_8) (div Start_3 Start) (ite StartBool_2 Start_1 Start_3)))
   (Start_11 Int (0 y 4 2 3 (- Start Start_8) (+ Start_5 Start_11) (* Start_2 Start_4)))
   (Start_3 Int (x 3 (- Start_2) (+ Start_4 Start_4) (* Start_1 Start_1) (mod Start_2 Start_5) (ite StartBool_1 Start Start_2)))
   (Start_10 Int (y 2 (- Start_1 Start_5) (div Start_6 Start_8) (mod Start_1 Start_3) (abs Start_4) (ite StartBool_4 Start_11 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* (mod 1 (- 5 x)) 2))))

(check-synth)
