(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (StartBool_9 Bool) (Start_12 Int) (Start_1 Int) (Start_2 Int) (StartBool_8 Bool) (Start_4 Int) (Start_14 Int) (StartBool_2 Bool) (StartBool_6 Bool) (Start_9 Int) (Start_11 Int) (StartBool_1 Bool) (Start_5 Int) (Start_8 Int) (Start_3 Int) (StartBool_7 Bool) (StartBool_3 Bool) (StartBool_5 Bool) (Start_7 Int) (Start_6 Int) (StartBool_4 Bool) (Start_10 Int))
  ((Start Int (0 5 1 4 (+ Start Start_1) (mod Start_2 Start) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true false (not StartBool_9) (or StartBool_7 StartBool_6) (< Start_7 Start_6) (> Start_6 Start_12)))
   (Start_13 Int (4 0 y (- Start_11) (+ Start_8 Start_3) (* Start_11 Start_11) (mod Start_14 Start)))
   (StartBool_9 Bool (true (not StartBool_7) (and StartBool StartBool_6) (< Start_10 Start_10) (= Start_9 Start_13)))
   (Start_12 Int (0 x (- Start) (- Start_6 Start_8) (* Start_7 Start_4) (mod Start_6 Start_4) (abs Start_12)))
   (Start_1 Int (1 0 y 2 (- Start_6) (+ Start Start_8) (div Start_6 Start) (abs Start_9)))
   (Start_2 Int (3 (- Start_2 Start_10) (* Start_2 Start_10) (div Start_11 Start_4) (mod Start Start) (ite StartBool_6 Start_8 Start_10)))
   (StartBool_8 Bool (true (and StartBool_4 StartBool_1)))
   (Start_4 Int (1 y (- Start_3 Start_11) (mod Start_11 Start) (abs Start_6)))
   (Start_14 Int (0 3 x (- Start_5) (- Start_4 Start_10) (mod Start_12 Start_14)))
   (StartBool_2 Bool (false (not StartBool_8) (< Start_3 Start_5) (<= Start Start)))
   (StartBool_6 Bool (false true (and StartBool StartBool_6) (or StartBool_4 StartBool_2) (>= Start_6 Start_1)))
   (Start_9 Int (2 y (- Start_3) (- Start_5 Start) (div Start_3 Start_6) (mod Start_7 Start_7) (ite StartBool_4 Start_7 Start_10)))
   (Start_11 Int (x 0 y (* Start_7 Start_6) (mod Start_4 Start_3) (abs Start_3)))
   (StartBool_1 Bool (false (or StartBool_2 StartBool_1) (< Start_3 Start) (<= Start_3 Start) (> Start Start)))
   (Start_5 Int (3 (- Start_1 Start_3) (* Start_1 Start_3) (div Start_4 Start_4) (mod Start Start_3) (abs Start_2) (ite StartBool_3 Start_2 Start_2)))
   (Start_8 Int (0 (- Start_4) (+ Start_8 Start_5) (mod Start_7 Start_2) (abs Start_6)))
   (Start_3 Int (1 y 3 (- Start_4 Start_4) (div Start_2 Start) (mod Start_5 Start_4) (abs Start_1) (ite StartBool Start_1 Start_5)))
   (StartBool_7 Bool (true false (not StartBool_5) (and StartBool_2 StartBool_7) (= Start_8 Start_6) (> Start_1 Start_9)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_5 StartBool_3)))
   (StartBool_5 Bool (false (not StartBool_5) (< Start_1 Start_3) (<= Start_1 Start_4) (>= Start_2 Start_6) (> Start_7 Start_4)))
   (Start_7 Int (2 (- Start_4) (- Start_5 Start_5) (+ Start_2 Start) (div Start_5 Start_4) (mod Start_3 Start_6) (abs Start_7)))
   (Start_6 Int (4 (- Start_1 Start_7) (* Start_1 Start_2)))
   (StartBool_4 Bool (false (not StartBool_6) (and StartBool_3 StartBool_7) (< Start_1 Start_4) (<= Start_5 Start_8)))
   (Start_10 Int (x 1 y (- Start_5) (+ Start_1 Start_4) (mod Start_7 Start_2) (ite StartBool Start_4 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* (mod 3 0) (- (mod x 5))))))

(check-synth)
