(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (StartBool_6 Bool) (Start_2 Int) (Start_3 Int) (Start_11 Int) (Start_10 Int) (Start_7 Int) (Start_1 Int) (Start_9 Int) (Start_4 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_6 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_8 Int) (Start_5 Int) (StartBool_4 Bool))
  ((Start Int (4 5 x 2 (- Start_1) (* Start_1 Start_1) (abs Start_1)))
   (StartBool Bool (true (and StartBool StartBool_6) (< Start_8 Start_10) (= Start_3 Start_1)))
   (StartBool_7 Bool (true (and StartBool_1 StartBool_7) (or StartBool_5 StartBool)))
   (StartBool_6 Bool (true (not StartBool_5) (and StartBool_7 StartBool) (or StartBool StartBool_5) (= Start_3 Start_9)))
   (Start_2 Int (5 0 (- Start_5 Start_3) (mod Start_11 Start_6)))
   (Start_3 Int (5 1 0 (- Start_11 Start_9) (+ Start_2 Start) (div Start_3 Start_8) (abs Start_4)))
   (Start_11 Int (1 2 4 (- Start_7 Start_5) (* Start_5 Start_4)))
   (Start_10 Int (1 (- Start_11 Start_3) (div Start_8 Start) (abs Start_9)))
   (Start_7 Int (x (- Start_5) (- Start_4 Start) (* Start_1 Start_4) (mod Start_7 Start_6) (abs Start_1) (ite StartBool Start_5 Start_6)))
   (Start_1 Int (0 (- Start_2) (+ Start_3 Start) (* Start_4 Start_5) (mod Start Start) (abs Start_1)))
   (Start_9 Int (x 4 (- Start_7) (* Start_7 Start_4) (ite StartBool_4 Start_3 Start_1)))
   (Start_4 Int (4 (- Start_5 Start_7) (+ Start_2 Start_5) (* Start_2 Start_2) (mod Start_10 Start_3) (abs Start_1)))
   (StartBool_5 Bool (true (and StartBool StartBool) (or StartBool StartBool_5) (= Start_8 Start_2)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_2) (or StartBool StartBool_1) (< Start_6 Start_3) (<= Start_3 Start_3) (= Start_4 Start_5) (>= Start_4 Start) (> Start_7 Start_6)))
   (Start_6 Int (y 3 (- Start_8) (- Start Start_5) (* Start_2 Start_3) (div Start_2 Start_8) (abs Start_4) (ite StartBool_3 Start_3 Start_3)))
   (StartBool_2 Bool (false (not StartBool_4) (and StartBool_4 StartBool_4) (<= Start_3 Start_5) (= Start_8 Start_9) (> Start_2 Start_1)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_2) (or StartBool StartBool) (= Start_4 Start_3)))
   (Start_8 Int (y 4 5 x 3 (div Start_1 Start_1) (mod Start_6 Start_6) (abs Start_8) (ite StartBool Start_7 Start)))
   (Start_5 Int (1 (ite StartBool_1 Start_4 Start_5)))
   (StartBool_4 Bool (true false (not StartBool_5) (or StartBool_3 StartBool_5) (> Start_4 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 (mod (mod 2 x) (- (mod 5 0) y)))))

(check-synth)
