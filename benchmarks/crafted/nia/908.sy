(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_2 Int) (StartBool_6 Bool) (Start_3 Int) (StartBool_4 Bool) (Start_11 Int) (StartBool_2 Bool) (Start_9 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_8 Int) (Start_5 Int) (Start_7 Int) (Start_6 Int) (Start_10 Int) (Start_1 Int) (Start_4 Int) (StartBool_5 Bool))
  ((Start Int (2 3 1 (- Start Start_1) (mod Start_1 Start) (abs Start_2) (ite StartBool Start_3 Start_3)))
   (StartBool Bool (true (or StartBool_6 StartBool_6) (< Start_12 Start_9) (<= Start_6 Start_4) (= Start_5 Start) (>= Start_3 Start_7) (> Start_9 Start_7)))
   (Start_12 Int (1 (- Start_3) (- Start_2 Start_7) (abs Start_8)))
   (Start_2 Int (1 x (- Start_4) (* Start_2 Start_6) (div Start Start_9) (abs Start)))
   (StartBool_6 Bool (true (and StartBool_1 StartBool_3) (<= Start Start_6) (>= Start_3 Start_10)))
   (Start_3 Int (5 3 (- Start_3) (- Start_4 Start_1) (+ Start_3 Start_2) (div Start_1 Start) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_4 Bool (true false (not StartBool_2) (< Start_8 Start_8) (> Start_3 Start_7)))
   (Start_11 Int (4 (- Start_9) (* Start_12 Start_3) (div Start_11 Start_9) (abs Start_11) (ite StartBool_1 Start_2 Start_12)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_2) (or StartBool_2 StartBool_2)))
   (Start_9 Int (0 4 (- Start_7) (+ Start_7 Start_5) (* Start_9 Start_2) (div Start_8 Start_10) (mod Start_3 Start_1)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_1 StartBool_4) (or StartBool_4 StartBool_4) (= Start_5 Start_4) (>= Start_5 Start_3) (> Start_5 Start)))
   (StartBool_1 Bool (false (not StartBool_2) (or StartBool_2 StartBool_2) (= Start_1 Start)))
   (Start_8 Int (1 2 (- Start_7) (mod Start_1 Start) (ite StartBool_3 Start_4 Start_7)))
   (Start_5 Int (1 x 2 (- Start) (* Start_6 Start_2) (mod Start_4 Start_7) (abs Start_4) (ite StartBool_3 Start_7 Start)))
   (Start_7 Int (3 y (- Start_2 Start_3) (* Start_1 Start_7) (mod Start_4 Start)))
   (Start_6 Int (1 (div Start_8 Start_3) (mod Start_1 Start_8) (abs Start_4)))
   (Start_10 Int (2 (+ Start_1 Start_2) (div Start_7 Start_4) (mod Start Start_8)))
   (Start_1 Int (0 (- Start_2) (+ Start_11 Start_11) (* Start Start_11) (div Start_6 Start_3) (abs Start_3) (ite StartBool_2 Start_9 Start_11)))
   (Start_4 Int (4 (- Start_7 Start_5) (* Start_2 Start_9) (div Start_2 Start_3) (ite StartBool_5 Start_7 Start_7)))
   (StartBool_5 Bool (true (not StartBool_5) (and StartBool_1 StartBool_6) (< Start_8 Start_10) (> Start_10 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod 1 (- y 1)))))

(check-synth)
