(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_17 Int) (StartBool_2 Bool) (Start_16 Int) (Start_12 Int) (Start_15 Int) (Start_1 Int) (Start_7 Int) (Start_9 Int) (Start_2 Int) (Start_11 Int) (Start_13 Int) (Start_6 Int) (StartBool_3 Bool) (Start_3 Int) (StartBool_4 Bool) (Start_8 Int) (Start_4 Int) (Start_10 Int) (Start_5 Int) (StartBool_1 Bool))
  ((Start Int (0 3 (- Start) (- Start_1 Start_1) (div Start Start_2) (mod Start Start_2) (ite StartBool Start Start_2)))
   (StartBool Bool (false true (< Start_1 Start_3) (<= Start_7 Start_13) (= Start_12 Start_2) (> Start_5 Start_9)))
   (Start_14 Int (2 3 x 5 0 (- Start_9 Start_4) (div Start_10 Start_16) (mod Start_13 Start_1)))
   (Start_17 Int (y (+ Start_11 Start_9) (* Start_3 Start_10) (div Start_9 Start_13) (abs Start_2)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool StartBool_3) (<= Start Start)))
   (Start_16 Int (x 5 1 0 (div Start_7 Start_6) (mod Start_17 Start_1) (abs Start_7)))
   (Start_12 Int (5 x 0 (abs Start_9) (ite StartBool_2 Start_6 Start_2)))
   (Start_15 Int (x 3 4 (- Start_6 Start) (* Start_1 Start_7) (div Start_8 Start_16) (abs Start_2)))
   (Start_1 Int (0 (- Start_3 Start_4) (mod Start_4 Start) (abs Start_1)))
   (Start_7 Int (2 (+ Start_2 Start_2) (* Start_5 Start_6) (div Start_2 Start)))
   (Start_9 Int (0 (+ Start_10 Start_1) (* Start_10 Start_8) (div Start_7 Start_3) (mod Start_9 Start_11) (ite StartBool Start_6 Start_11)))
   (Start_2 Int (y x (- Start_2) (+ Start_1 Start_1) (* Start_2 Start_1)))
   (Start_11 Int (y x 5 4 0 1 2 (- Start_2 Start_4) (mod Start_1 Start)))
   (Start_13 Int (2 3 (+ Start_14 Start_8) (* Start_4 Start_11) (abs Start_5) (ite StartBool_4 Start_7 Start_2)))
   (Start_6 Int (0 (* Start_1 Start) (div Start_1 Start_7) (abs Start_3)))
   (StartBool_3 Bool (false true (not StartBool_1) (or StartBool_3 StartBool_1) (<= Start_7 Start_9) (> Start_4 Start_3)))
   (Start_3 Int (y x (- Start_2 Start_8) (+ Start_3 Start_8) (div Start Start_3) (mod Start_4 Start_4)))
   (StartBool_4 Bool (true (not StartBool_1) (and StartBool StartBool) (or StartBool StartBool) (< Start_14 Start_5) (<= Start_15 Start_12) (= Start_2 Start_15) (>= Start_1 Start) (> Start_1 Start_11)))
   (Start_8 Int (y 2 0 (- Start_1) (- Start_8 Start) (+ Start_3 Start_1) (abs Start_9)))
   (Start_4 Int (x 1 (+ Start Start) (div Start_4 Start_1) (abs Start_4) (ite StartBool Start Start_5)))
   (Start_10 Int (2 5 x (- Start_4) (+ Start_12 Start_1) (abs Start_12) (ite StartBool_1 Start_3 Start_10)))
   (Start_5 Int (0 3 5 (- Start_6) (- Start_2 Start_6) (* Start_2 Start) (div Start_4 Start_3) (mod Start_7 Start_7)))
   (StartBool_1 Bool (true (and StartBool StartBool) (or StartBool_1 StartBool) (= Start_5 Start_1) (>= Start_2 Start_2) (> Start_9 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod y 5)))

(check-synth)
