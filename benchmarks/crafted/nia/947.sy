(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_8 Int) (Start_7 Int) (Start_9 Int) (Start_4 Int) (Start_1 Int) (Start_5 Int) (StartBool_1 Bool) (Start_6 Int) (Start_3 Int))
  ((Start Int (x 1 4 (- Start) (- Start_1 Start_1) (+ Start_1 Start_2) (div Start Start_3) (mod Start_2 Start_2) (abs Start_3)))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (or StartBool StartBool_1) (< Start_6 Start_3) (>= Start_3 Start_3) (> Start_9 Start_3)))
   (Start_2 Int (5 0 3 (- Start_9) (* Start_3 Start_5) (mod Start_9 Start_4) (abs Start_6)))
   (Start_8 Int (x (- Start_1 Start_4) (+ Start_7 Start_2) (* Start_4 Start_5) (mod Start Start_2) (ite StartBool Start_9 Start)))
   (Start_7 Int (4 x y (- Start_8 Start_3) (* Start_6 Start_2) (div Start_2 Start_2) (abs Start_8)))
   (Start_9 Int (0 (* Start_3 Start_3)))
   (Start_4 Int (x (+ Start_5 Start_1) (ite StartBool_1 Start_5 Start_6)))
   (Start_1 Int (y 3 2 4 0 (- Start Start_3) (div Start_2 Start_7) (mod Start_6 Start_3)))
   (Start_5 Int (1 (- Start_2 Start_2) (abs Start_1) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_1 Bool (false true (< Start_3 Start_2) (<= Start_5 Start) (> Start_1 Start)))
   (Start_6 Int (x 2 (abs Start_7) (ite StartBool Start_3 Start_5)))
   (Start_3 Int (4 x 2 5 1 y 3 0 (* Start_2 Start_4) (div Start_3 Start_3) (mod Start_3 Start_4) (ite StartBool_1 Start_4 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* 5 y) 2)))

(check-synth)
