(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_1 Bool) (Start_4 Int) (Start_12 Int) (StartBool_5 Bool) (StartBool_3 Bool) (Start_2 Int) (Start_3 Int) (Start_6 Int) (Start_9 Int) (StartBool_6 Bool) (Start_11 Int) (Start_7 Int) (Start_10 Int) (Start_8 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_5 Int))
  ((Start Int (x 5 (- Start_1 Start_1) (+ Start_1 Start) (* Start_1 Start) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true false (not StartBool_6) (and StartBool_3 StartBool_6) (or StartBool_5 StartBool_4) (< Start_3 Start_5) (<= Start_9 Start_8) (= Start_11 Start_5) (>= Start_7 Start_3) (> Start_1 Start_5)))
   (Start_1 Int (3 0 2 4 1 (- Start_1 Start_8) (div Start_7 Start_7) (mod Start_9 Start_6) (ite StartBool_4 Start_8 Start_2)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_5) (or StartBool_2 StartBool_3) (< Start_10 Start_8) (<= Start Start_6) (= Start_7 Start_4) (>= Start_2 Start_6) (> Start_12 Start_11)))
   (Start_4 Int (y 3 (- Start_10) (+ Start_5 Start_12) (* Start Start_2) (ite StartBool Start Start_2)))
   (Start_12 Int (1 (+ Start_6 Start_8) (mod Start_6 Start_8)))
   (StartBool_5 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_3) (or StartBool StartBool_2) (= Start_6 Start_7) (>= Start_7 Start_6)))
   (StartBool_3 Bool (false true (or StartBool_3 StartBool_4) (= Start_7 Start_9)))
   (Start_2 Int (x 3 (- Start_2) (- Start_1 Start_3) (+ Start_1 Start) (mod Start Start_3) (ite StartBool_1 Start Start_3)))
   (Start_3 Int (0 1 3 (- Start Start_4) (+ Start_4 Start_5) (div Start_6 Start_5)))
   (Start_6 Int (y (+ Start_5 Start_2) (* Start_3 Start_5) (div Start_7 Start) (mod Start_3 Start)))
   (Start_9 Int (3 (- Start_6 Start_10) (* Start_4 Start_2) (div Start_5 Start_4) (mod Start_10 Start_11)))
   (StartBool_6 Bool (true false (and StartBool_5 StartBool) (< Start_8 Start_5) (<= Start_9 Start_11)))
   (Start_11 Int (5 3 (- Start_9) (- Start_8 Start_3) (div Start_2 Start_7) (mod Start_10 Start_4) (abs Start_7) (ite StartBool Start_8 Start_4)))
   (Start_7 Int (3 (- Start_6) (- Start_2 Start_8) (mod Start Start_8) (ite StartBool_1 Start_1 Start_2)))
   (Start_10 Int (3 2 x 4 y 0 (- Start_1) (- Start_1 Start_11) (* Start_1 Start_9) (mod Start_8 Start) (abs Start_1) (ite StartBool Start_8 Start)))
   (Start_8 Int (x 5 2 (- Start_6) (- Start_8 Start_2) (mod Start_3 Start_1) (ite StartBool_2 Start_8 Start_1)))
   (StartBool_2 Bool (false (not StartBool_3) (or StartBool StartBool_4) (>= Start_1 Start_6)))
   (StartBool_4 Bool (true (and StartBool_4 StartBool_2) (< Start Start_8)))
   (Start_5 Int (3 4 0 (+ Start_6 Start) (* Start_4 Start_6) (div Start_5 Start_4) (ite StartBool_1 Start_1 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 5 (- x))))

(check-synth)
