(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_9 Int) (Start_3 Int) (StartBool_1 Bool) (Start_1 Int) (Start_4 Int) (Start_12 Int) (Start_5 Int) (Start_6 Int) (Start_7 Int) (Start_8 Int) (Start_10 Int) (Start_11 Int))
  ((Start Int (y 2 (- Start) (+ Start Start_1) (* Start_2 Start_1) (mod Start_3 Start) (abs Start)))
   (StartBool Bool (true false (not StartBool_1) (<= Start_5 Start_3) (>= Start_8 Start_9)))
   (Start_2 Int (1 (- Start_1 Start) (div Start Start) (mod Start Start_5)))
   (Start_9 Int (1 (- Start_8 Start_10) (ite StartBool_1 Start_4 Start)))
   (Start_3 Int (5 (- Start_4 Start) (+ Start_3 Start) (* Start_4 Start) (abs Start)))
   (StartBool_1 Bool (true false (<= Start_5 Start_6) (>= Start_12 Start_6) (> Start_6 Start_6)))
   (Start_1 Int (1 (- Start_1) (- Start Start_6) (+ Start Start_6) (* Start Start_3) (mod Start Start_4)))
   (Start_4 Int (x (+ Start_1 Start_2) (div Start_2 Start_1) (mod Start_4 Start) (abs Start)))
   (Start_12 Int (x (- Start_3) (div Start_3 Start_11)))
   (Start_5 Int (4 (- Start Start_2) (+ Start_5 Start_1) (* Start_5 Start_1) (abs Start_5)))
   (Start_6 Int (1 (- Start_7) (- Start_7 Start_2) (div Start_5 Start_7) (ite StartBool Start_4 Start_4)))
   (Start_7 Int (x (- Start_6) (- Start_4 Start_2) (* Start_2 Start_4) (mod Start_1 Start_6)))
   (Start_8 Int (3 (- Start_7) (- Start_8 Start_3) (+ Start_11 Start_9) (div Start_11 Start_6) (abs Start_3) (ite StartBool Start_11 Start_7)))
   (Start_10 Int (1 0 3 2 (+ Start_3 Start_8)))
   (Start_11 Int (4 y 2 (- Start_12 Start_10) (+ Start_8 Start_10) (* Start_1 Start_10) (mod Start_7 Start_8) (ite StartBool Start_12 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 2 x)))

(check-synth)
