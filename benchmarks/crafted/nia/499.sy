(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_19 Int) (StartBool_5 Bool) (Start_1 Int) (StartBool_6 Bool) (Start_6 Int) (Start_12 Int) (Start_17 Int) (Start_16 Int) (StartBool_4 Bool) (Start_3 Int) (Start_5 Int) (StartBool_3 Bool) (Start_4 Int) (Start_8 Int) (Start_10 Int) (Start_2 Int) (StartBool_1 Bool) (Start_11 Int) (Start_18 Int) (Start_14 Int) (StartBool_2 Bool) (Start_7 Int) (Start_13 Int) (Start_9 Int) (Start_15 Int))
  ((Start Int (x 4 (* Start_1 Start_2) (div Start_3 Start)))
   (StartBool Bool (false true (<= Start_5 Start_18)))
   (Start_19 Int (5 3 2 x 4 (- Start_6) (div Start_11 Start_16) (mod Start_18 Start_5)))
   (StartBool_5 Bool (true false (not StartBool_5) (and StartBool_5 StartBool_3) (< Start_15 Start_12) (<= Start_3 Start_2) (>= Start_3 Start_11)))
   (Start_1 Int (3 (- Start_9) (- Start_7 Start_17) (* Start_11 Start) (div Start_6 Start_15) (mod Start_6 Start_10) (abs Start_6) (ite StartBool_2 Start_1 Start_15)))
   (StartBool_6 Bool (true false (not StartBool_1) (and StartBool StartBool) (< Start_16 Start_8) (<= Start_3 Start_2) (> Start_2 Start_7)))
   (Start_6 Int (2 y (+ Start_8 Start_4) (mod Start_10 Start_1)))
   (Start_12 Int (2 0 (- Start_14 Start_17) (* Start_6 Start_17)))
   (Start_17 Int (4 2 (- Start_3) (+ Start_11 Start_13) (div Start_9 Start_17) (ite StartBool_2 Start_1 Start_3)))
   (Start_16 Int (4 (- Start_5 Start_9) (div Start_15 Start_16) (mod Start_17 Start_3)))
   (StartBool_4 Bool (true false (not StartBool_2) (or StartBool_4 StartBool_2) (< Start_8 Start_16) (<= Start_4 Start_1) (>= Start_15 Start_16)))
   (Start_3 Int (0 (- Start) (- Start_1 Start_3) (+ Start Start_4) (mod Start_4 Start_4)))
   (Start_5 Int (4 1 y 0 5 (- Start Start_2) (+ Start_3 Start_5) (* Start_2 Start_6) (abs Start_7) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_1 StartBool_4) (< Start_8 Start_6) (<= Start_7 Start_13) (= Start_6 Start_4) (> Start_9 Start_6)))
   (Start_4 Int (5 y 1 (- Start_3 Start) (div Start_2 Start_3) (mod Start_4 Start_3)))
   (Start_8 Int (2 5 (- Start_9) (- Start_8 Start_9) (div Start_10 Start) (ite StartBool_1 Start Start_11)))
   (Start_10 Int (1 x 2 3 (- Start Start_8) (mod Start Start_12) (ite StartBool_1 Start_14 Start_8)))
   (Start_2 Int (0 1 (+ Start_2 Start) (mod Start_1 Start_2) (abs Start_4) (ite StartBool_1 Start_5 Start_1)))
   (StartBool_1 Bool (false (not StartBool_2) (or StartBool_5 StartBool_6)))
   (Start_11 Int (x (- Start_6) (- Start Start_12) (+ Start_4 Start_7) (abs Start_4) (ite StartBool_2 Start_5 Start_4)))
   (Start_18 Int (4 (- Start_10 Start_19) (+ Start_12 Start_4) (abs Start_12) (ite StartBool_6 Start_3 Start_10)))
   (Start_14 Int (4 1 (- Start_5) (* Start_15 Start_11) (mod Start_13 Start_11) (abs Start_4)))
   (StartBool_2 Bool (false true (not StartBool_3) (or StartBool_2 StartBool_2) (< Start_4 Start_12) (= Start_5 Start) (> Start_1 Start_1)))
   (Start_7 Int (4 (- Start_7) (- Start_8 Start_6) (+ Start_4 Start_1) (mod Start_7 Start_5) (abs Start_1)))
   (Start_13 Int (5 0 (- Start_5 Start_13) (+ Start_7 Start_7) (ite StartBool Start_11 Start_14)))
   (Start_9 Int (y (- Start_16) (* Start_15 Start_11) (div Start_13 Start_5)))
   (Start_15 Int (1 (- Start_4) (- Start_15 Start_15) (+ Start_14 Start_10) (div Start_6 Start_13) (mod Start_8 Start_12) (ite StartBool_4 Start_1 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod 1 y))))

(check-synth)
