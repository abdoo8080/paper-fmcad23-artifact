(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_8 Bool) (Start_14 Int) (StartBool_3 Bool) (Start_13 Int) (Start_11 Int) (StartBool_4 Bool) (Start_12 Int) (Start_7 Int) (Start_10 Int) (Start_4 Int) (StartBool_5 Bool) (Start_5 Int) (Start_17 Int) (Start_15 Int) (StartBool_1 Bool) (Start_9 Int) (Start_1 Int) (Start_6 Int) (StartBool_6 Bool) (Start_16 Int) (Start_8 Int) (StartBool_7 Bool))
  ((Start Int (1 5 (- Start_1) (- Start_2 Start_3) (+ Start_1 Start_3) (mod Start_1 Start_2) (ite StartBool_1 Start_3 Start)))
   (StartBool Bool (true false (or StartBool_3 StartBool_6) (= Start_14 Start_13)))
   (Start_2 Int (x 3 4 0))
   (Start_3 Int (0 (- Start_13 Start_8) (* Start_15 Start_8) (div Start_5 Start_11)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_4 StartBool_7) (or StartBool_8 StartBool_5) (= Start_8 Start_2)))
   (StartBool_8 Bool (false (or StartBool_1 StartBool_3) (<= Start_14 Start) (= Start_2 Start_1)))
   (Start_14 Int (1 (- Start_9) (- Start_8 Start_15) (+ Start_15 Start_8) (* Start_9 Start_9) (div Start_15 Start_13) (mod Start_8 Start_2)))
   (StartBool_3 Bool (true (and StartBool_8 StartBool_5) (or StartBool_4 StartBool) (< Start_3 Start_12) (<= Start_5 Start_4) (= Start_3 Start_7) (> Start_2 Start)))
   (Start_13 Int (2 x 3 (- Start_4 Start_12) (* Start_4 Start_10) (abs Start_11)))
   (Start_11 Int (2 (- Start_1) (* Start_12 Start_13)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_6 StartBool_5) (or StartBool StartBool_6) (< Start_3 Start) (= Start Start_4) (>= Start_2 Start_4) (> Start_2 Start_1)))
   (Start_12 Int (y 4 (- Start_10 Start_3) (div Start_10 Start_1) (mod Start_5 Start_8)))
   (Start_7 Int (y (+ Start_6 Start_7) (* Start_1 Start_6) (mod Start_4 Start_6) (abs Start_6)))
   (Start_10 Int (y (+ Start_9 Start_9) (* Start_8 Start_2) (div Start_1 Start_2) (abs Start_6) (ite StartBool Start_9 Start_6)))
   (Start_4 Int (2 3 (- Start_2) (- Start_5 Start_4) (+ Start_2 Start_3) (* Start_5 Start_4) (mod Start_3 Start_3) (ite StartBool_4 Start_2 Start_4)))
   (StartBool_5 Bool (false (and StartBool_3 StartBool_5) (or StartBool_4 StartBool_7) (<= Start Start_7) (= Start_1 Start_9) (>= Start_3 Start_4)))
   (Start_5 Int (x 2 5 (- Start_1 Start) (+ Start Start_1) (mod Start_6 Start) (abs Start_2) (ite StartBool_6 Start_2 Start_7)))
   (Start_17 Int (x (- Start_6) (- Start_13 Start_10) (* Start_12 Start_15) (div Start_16 Start_5) (abs Start_3)))
   (Start_15 Int (1 (div Start_12 Start_12) (mod Start_11 Start_5) (abs Start_11)))
   (StartBool_1 Bool (true false (not StartBool_2) (or StartBool_3 StartBool_4) (< Start_2 Start_3)))
   (Start_9 Int (0 (- Start_7) (+ Start_6 Start_3) (mod Start_1 Start_5) (ite StartBool_2 Start_1 Start_8)))
   (Start_1 Int (2 (- Start_16) (div Start_10 Start_17) (abs Start_17) (ite StartBool_8 Start Start_11)))
   (Start_6 Int (0 (* Start_6 Start_6) (ite StartBool_3 Start_8 Start_8)))
   (StartBool_6 Bool (false true (not StartBool_5) (< Start_3 Start_1) (<= Start_7 Start_3) (>= Start_9 Start_10) (> Start Start_6)))
   (Start_16 Int (3 (- Start_11) (mod Start_6 Start_12) (abs Start_14) (ite StartBool_6 Start_12 Start_16)))
   (Start_8 Int (1 (- Start_9 Start_5) (mod Start_8 Start_8) (ite StartBool_6 Start Start_2)))
   (StartBool_7 Bool (true false (or StartBool_3 StartBool_3) (<= Start_11 Start_11) (= Start_6 Start_4) (>= Start_11 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* x (mod x 3))))

(check-synth)
