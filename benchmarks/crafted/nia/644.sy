(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_8 Bool) (Start_22 Int) (Start_11 Int) (Start_3 Int) (Start_13 Int) (Start_4 Int) (Start_5 Int) (Start_16 Int) (Start_21 Int) (StartBool_2 Bool) (Start_15 Int) (Start_8 Int) (Start_9 Int) (Start_6 Int) (Start_10 Int) (StartBool_1 Bool) (StartBool_5 Bool) (Start_1 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_17 Int) (StartBool_6 Bool) (Start_7 Int) (Start_14 Int) (Start_19 Int) (Start_18 Int) (Start_2 Int) (Start_20 Int) (Start_12 Int) (StartBool_7 Bool))
  ((Start Int (2 5 3 x 1 (- Start) (- Start Start) (* Start_1 Start_2) (div Start_3 Start_4) (mod Start_1 Start_4) (abs Start_3) (ite StartBool_1 Start_3 Start)))
   (StartBool Bool (true false (or StartBool_1 StartBool_6) (< Start_19 Start_4) (<= Start_17 Start_7) (>= Start_20 Start_11)))
   (StartBool_8 Bool (true false (not StartBool) (or StartBool_7 StartBool_2) (< Start_2 Start_20) (<= Start_1 Start_14) (= Start_5 Start_8) (> Start_19 Start_21)))
   (Start_22 Int (0 2 (- Start) (- Start_6 Start_2) (+ Start_16 Start_2) (* Start_10 Start_12) (mod Start_13 Start_1) (abs Start_17)))
   (Start_11 Int (3 (* Start_7 Start_4) (ite StartBool_4 Start_2 Start)))
   (Start_3 Int (5 x 1 4 2 y (+ Start_2 Start_5) (ite StartBool_5 Start_11 Start_11)))
   (Start_13 Int (x 0 (- Start_7) (+ Start_1 Start_6) (mod Start_4 Start_14) (abs Start_11) (ite StartBool_3 Start_15 Start_6)))
   (Start_4 Int (3 4 1 (div Start_11 Start_6) (mod Start_8 Start_10) (abs Start_8) (ite StartBool Start_5 Start_8)))
   (Start_5 Int (1 (- Start_5) (- Start_3 Start_6) (+ Start_6 Start_6) (div Start_5 Start) (ite StartBool_1 Start_6 Start_3)))
   (Start_16 Int (y (- Start_17) (div Start_2 Start_9)))
   (Start_21 Int (4 y 0 1 (- Start_13) (+ Start_22 Start_17) (div Start_13 Start_7) (abs Start_15) (ite StartBool_6 Start_12 Start_7)))
   (StartBool_2 Bool (false (not StartBool_2) (< Start Start_4) (>= Start_2 Start_10)))
   (Start_15 Int (x (- Start_8) (- Start_10 Start_9) (+ Start_3 Start_3) (* Start_3 Start_10) (abs Start_3) (ite StartBool_1 Start_16 Start)))
   (Start_8 Int (x (- Start_9 Start_8) (mod Start Start_5)))
   (Start_9 Int (1 4 5 3 (- Start_5) (- Start_1 Start_5) (+ Start_2 Start_4) (div Start_3 Start_9) (ite StartBool Start_2 Start_3)))
   (Start_6 Int (3 (- Start_7 Start_7) (+ Start_1 Start_6) (* Start_7 Start_7) (div Start_6 Start_5) (mod Start_8 Start_4)))
   (Start_10 Int (5 (* Start Start_7) (div Start_5 Start_10)))
   (StartBool_1 Bool (true false (or StartBool_2 StartBool_3) (= Start_3 Start_1) (>= Start_1 Start_2)))
   (StartBool_5 Bool (false true (not StartBool_4) (and StartBool_3 StartBool_5) (< Start_10 Start_2) (<= Start_10 Start_10) (= Start_4 Start_8) (>= Start_6 Start_12) (> Start_4 Start_3)))
   (Start_1 Int (4 y 5 2 (- Start_8 Start_18) (mod Start_6 Start_16) (abs Start_1)))
   (StartBool_3 Bool (false true (and StartBool StartBool_3) (= Start_4 Start_4) (>= Start_2 Start_5)))
   (StartBool_4 Bool (false true (or StartBool_1 StartBool_4) (= Start_9 Start_2) (>= Start Start) (> Start_5 Start_9)))
   (Start_17 Int (4 (+ Start_14 Start_11) (* Start_15 Start_16)))
   (StartBool_6 Bool (true (not StartBool_4) (and StartBool_7 StartBool_4) (or StartBool_3 StartBool_1) (<= Start Start_10) (= Start_8 Start_15) (> Start_13 Start_14)))
   (Start_7 Int (x 3 4 (- Start_4) (- Start_7 Start_10) (div Start_7 Start_6) (mod Start_5 Start_3) (abs Start_5) (ite StartBool_3 Start_10 Start)))
   (Start_14 Int (y 0 (- Start_18 Start_15) (* Start_1 Start_17) (div Start_12 Start_12) (mod Start_9 Start_10) (abs Start_7)))
   (Start_19 Int (2 x (* Start_15 Start_17) (div Start_5 Start_9) (abs Start_13) (ite StartBool_2 Start_1 Start_17)))
   (Start_18 Int (y (- Start_8) (- Start_8 Start) (* Start_17 Start_18) (div Start_14 Start_19) (ite StartBool_3 Start_10 Start_12)))
   (Start_2 Int (1 2 (+ Start_14 Start_13) (* Start Start_4) (div Start_5 Start_17) (mod Start Start_11)))
   (Start_20 Int (y 0 1 (* Start_14 Start_12) (div Start_4 Start_20) (ite StartBool Start_18 Start_19)))
   (Start_12 Int (5 (- Start_6) (- Start Start_4) (* Start_12 Start) (div Start_4 Start) (mod Start_6 Start_2) (abs Start_13)))
   (StartBool_7 Bool (true (not StartBool_6) (or StartBool_8 StartBool_7) (< Start_21 Start_15) (<= Start_20 Start_16) (> Start_18 Start_16)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- x) 0)))

(check-synth)
