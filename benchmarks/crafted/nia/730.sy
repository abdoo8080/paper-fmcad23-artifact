(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_9 Bool) (Start_1 Int) (Start_2 Int) (StartBool_2 Bool) (StartBool_8 Bool) (StartBool_7 Bool) (StartBool_5 Bool) (Start_3 Int) (Start_4 Int) (Start_12 Int) (Start_8 Int) (Start_6 Int) (Start_7 Int) (Start_13 Int) (Start_9 Int) (Start_5 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_10 Int) (StartBool_4 Bool) (Start_11 Int) (StartBool_6 Bool))
  ((Start Int (x (+ Start_1 Start_1) (* Start Start_1) (div Start_2 Start) (ite StartBool Start_3 Start_3)))
   (StartBool Bool (false true (not StartBool_9) (and StartBool_7 StartBool_9) (<= Start_12 Start_13) (>= Start_5 Start_3)))
   (StartBool_9 Bool (true (< Start_6 Start_1) (<= Start_1 Start_6) (>= Start_6 Start_6)))
   (Start_1 Int (3 (- Start_5) (- Start_9 Start_7) (* Start Start_5) (mod Start_10 Start_1) (abs Start_6)))
   (Start_2 Int (4 2 x 0 (* Start_4 Start_5) (mod Start_10 Start) (abs Start_4) (ite StartBool_8 Start_7 Start_11)))
   (StartBool_2 Bool (false true (< Start_2 Start_9) (<= Start_12 Start_11) (>= Start_7 Start_3)))
   (StartBool_8 Bool (true false (not StartBool) (and StartBool StartBool_7) (or StartBool_7 StartBool_1) (< Start_9 Start_5) (<= Start_9 Start_8)))
   (StartBool_7 Bool (false (not StartBool_3) (or StartBool_5 StartBool_8) (< Start_11 Start_4) (= Start Start_6) (> Start_9 Start_8)))
   (StartBool_5 Bool (true (or StartBool StartBool_7) (< Start_3 Start_8) (<= Start_4 Start_7) (= Start Start_10) (>= Start_5 Start_7)))
   (Start_3 Int (0 (- Start) (+ Start_4 Start_1) (abs Start_2)))
   (Start_4 Int (3 x (- Start_3) (- Start_5 Start_1) (* Start_5 Start_6) (div Start_7 Start_4) (mod Start_8 Start_5) (abs Start_7) (ite StartBool Start_6 Start_3)))
   (Start_12 Int (x (- Start_2) (- Start_3 Start_4) (+ Start_12 Start_8) (mod Start_10 Start_11) (abs Start_5) (ite StartBool_6 Start_2 Start_4)))
   (Start_8 Int (1 (- Start_6 Start_2) (div Start Start) (mod Start_2 Start_5)))
   (Start_6 Int (4 (- Start_4) (+ Start_1 Start) (div Start_8 Start_1) (mod Start_7 Start_1) (ite StartBool_1 Start_2 Start_8)))
   (Start_7 Int (5 x (- Start_5) (- Start_2 Start_7) (+ Start_5 Start_9) (div Start_1 Start) (mod Start_3 Start_1) (abs Start_6) (ite StartBool Start_1 Start_3)))
   (Start_13 Int (3 2 (- Start_3) (- Start_3 Start_6) (+ Start_5 Start_13) (* Start Start_13) (div Start_4 Start_8)))
   (Start_9 Int (y (- Start_5) (abs Start_9) (ite StartBool Start Start)))
   (Start_5 Int (1 (+ Start_13 Start_13) (div Start_2 Start_2) (mod Start_9 Start_3) (abs Start_2) (ite StartBool_8 Start_4 Start_5)))
   (StartBool_3 Bool (false (and StartBool_4 StartBool_5) (or StartBool StartBool_6) (>= Start_4 Start_8) (> Start_10 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_4) (< Start_4 Start_3)))
   (Start_10 Int (3 5 x 1 (- Start_7 Start_4) (* Start_6 Start_11) (abs Start_7) (ite StartBool_4 Start_10 Start)))
   (StartBool_4 Bool (false (and StartBool StartBool_3) (> Start_1 Start_6)))
   (Start_11 Int (5 x (- Start_3) (- Start_1 Start_5) (+ Start_11 Start_10) (* Start_10 Start_6) (mod Start_5 Start_11) (abs Start_10)))
   (StartBool_6 Bool (false (not StartBool_1) (and StartBool StartBool_2) (or StartBool_4 StartBool_6) (>= Start_9 Start_3) (> Start_1 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod 1 x) x)))

(check-synth)
