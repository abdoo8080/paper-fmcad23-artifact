(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_3 Int) (Start_1 Int) (StartBool_4 Bool) (Start_11 Int) (Start_8 Int) (Start_2 Int) (StartBool_5 Bool) (StartBool_2 Bool) (Start_5 Int) (Start_6 Int) (Start_12 Int) (Start_7 Int) (Start_4 Int) (StartBool_1 Bool) (Start_9 Int) (StartBool_3 Bool) (StartBool_6 Bool) (Start_10 Int))
  ((Start Int (y 1 5 0 2 4 (- Start) (mod Start_1 Start) (ite StartBool_1 Start Start_1)))
   (StartBool Bool (true false (or StartBool_5 StartBool_3) (= Start_12 Start_5)))
   (Start_13 Int (x 4 1 (- Start_5) (* Start_6 Start_8) (mod Start_5 Start_3) (abs Start_9)))
   (Start_3 Int (y (* Start_5 Start_7) (div Start_5 Start_13) (mod Start_8 Start_12)))
   (Start_1 Int (y (- Start_8 Start_5)))
   (StartBool_4 Bool (true false (<= Start_9 Start_11) (= Start_9 Start_5)))
   (Start_11 Int (0 (- Start_7 Start_1) (+ Start_2 Start_2) (div Start_5 Start_12)))
   (Start_8 Int (3 (- Start_7) (+ Start_6 Start_9) (* Start_8 Start_5) (div Start_6 Start_2)))
   (Start_2 Int (3 (- Start_1) (- Start_1 Start_1) (div Start_3 Start) (mod Start_1 Start_2) (ite StartBool_2 Start_1 Start)))
   (StartBool_5 Bool (true false (not StartBool_6) (>= Start_4 Start_8) (> Start_10 Start_8)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_3) (or StartBool_2 StartBool_4) (<= Start_1 Start_2) (= Start_4 Start_4) (>= Start_4 Start_5)))
   (Start_5 Int (3 (- Start_2) (+ Start_2 Start_6) (* Start_6 Start) (abs Start_5)))
   (Start_6 Int (4 5 (- Start_7) (- Start_1 Start_1) (div Start Start_4) (mod Start Start_7) (ite StartBool_1 Start_5 Start_5)))
   (Start_12 Int (y 4 x 5 (+ Start_5 Start_12) (div Start_11 Start_2) (mod Start_7 Start_3) (abs Start_2)))
   (Start_7 Int (5 (+ Start_7 Start_7) (* Start_4 Start) (abs Start_4) (ite StartBool_2 Start_4 Start_7)))
   (Start_4 Int (0 1 4 (- Start_7) (- Start Start_8) (div Start_3 Start) (mod Start Start_3) (abs Start_3)))
   (StartBool_1 Bool (false (not StartBool) (or StartBool_1 StartBool_1) (< Start_1 Start) (<= Start Start_1) (>= Start_2 Start_1)))
   (Start_9 Int (1 2 (- Start) (- Start Start_7) (* Start_8 Start_10) (abs Start_1) (ite StartBool_4 Start_10 Start_2)))
   (StartBool_3 Bool (false true (not StartBool_6)))
   (StartBool_6 Bool (true false (and StartBool_5 StartBool_1) (<= Start_2 Start_2) (>= Start_4 Start_11) (> Start_10 Start_6)))
   (Start_10 Int (y (- Start_8 Start_9) (* Start_8 Start_4) (ite StartBool_5 Start_4 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x (* 4 5))))

(check-synth)
