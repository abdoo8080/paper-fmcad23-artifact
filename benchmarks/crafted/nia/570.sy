(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_1 Int) (Start_12 Int) (Start_11 Int) (Start_5 Int) (Start_2 Int) (Start_7 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_9 Int) (Start_6 Int) (Start_10 Int) (Start_3 Int) (StartBool_3 Bool) (Start_8 Int) (Start_4 Int))
  ((Start Int (x (- Start_1 Start_2) (+ Start_1 Start)))
   (StartBool Bool (true (and StartBool_4 StartBool_4) (= Start_12 Start)))
   (StartBool_4 Bool (false (not StartBool_4)))
   (Start_1 Int (2 (- Start_9) (- Start Start_3) (+ Start_9 Start_3) (* Start_4 Start_10) (div Start_8 Start_9)))
   (Start_12 Int (5 y 1 2 (- Start_7) (- Start_4 Start_12) (+ Start_3 Start_11) (div Start_12 Start_1) (mod Start_3 Start_6)))
   (Start_11 Int (5 (- Start_4) (+ Start_2 Start_12) (* Start_3 Start_11) (div Start_6 Start) (abs Start_12) (ite StartBool_1 Start_9 Start_1)))
   (Start_5 Int (4 (- Start_1) (+ Start_2 Start_4) (div Start_3 Start_6) (mod Start_7 Start_1) (abs Start_7)))
   (Start_2 Int (2 x 3 4 (* Start_3 Start_4) (div Start Start_2) (mod Start_5 Start_3) (ite StartBool Start_5 Start_1)))
   (Start_7 Int (y 0 x 3 1 2 5 (- Start_2) (- Start_6 Start_5) (* Start_7 Start_2) (div Start Start_2) (mod Start Start_4) (abs Start) (ite StartBool_1 Start_1 Start_8)))
   (StartBool_1 Bool (false true (not StartBool) (or StartBool StartBool_2) (< Start_9 Start_6) (= Start_9 Start) (> Start_5 Start_2)))
   (StartBool_2 Bool (false true (not StartBool_3) (< Start_8 Start_4) (>= Start_2 Start_1)))
   (Start_9 Int (3 2 (- Start_8) (* Start_3 Start_8) (div Start Start_5) (mod Start_6 Start_10)))
   (Start_6 Int (4 3 5 (- Start_10) (- Start_8 Start_8) (mod Start_9 Start_9)))
   (Start_10 Int (1 2 3 (- Start_2) (mod Start_4 Start)))
   (Start_3 Int (5 (- Start_9) (* Start_7 Start_5) (div Start_5 Start_9) (abs Start_8) (ite StartBool_2 Start_11 Start_5)))
   (StartBool_3 Bool (true (not StartBool_3) (< Start_4 Start) (<= Start_5 Start_2) (>= Start_7 Start_4) (> Start_7 Start_3)))
   (Start_8 Int (3 5 1 x (- Start_1) (+ Start_3 Start) (div Start_6 Start_2) (abs Start_3)))
   (Start_4 Int (3 (- Start_5 Start_8) (* Start_7 Start) (ite StartBool Start Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- 2) (div (+ 1 5) y))))

(check-synth)
