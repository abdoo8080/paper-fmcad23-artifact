(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (StartBool_1 Bool) (Start_15 Int) (StartBool_5 Bool) (Start_13 Int) (Start_14 Int) (StartBool_3 Bool) (Start_12 Int) (StartBool_4 Bool) (Start_2 Int) (Start_18 Int) (Start_4 Int) (Start_6 Int) (Start_5 Int) (Start_9 Int) (Start_7 Int) (Start_8 Int) (Start_17 Int) (Start_3 Int) (Start_11 Int) (StartBool_2 Bool) (Start_1 Int) (Start_10 Int))
  ((Start Int (2 3 y (- Start) (- Start Start) (+ Start Start_1) (* Start_1 Start_2) (ite StartBool Start_1 Start)))
   (StartBool Bool (true false (or StartBool_1 StartBool_2) (<= Start_8 Start_7) (= Start_11 Start_12) (> Start_1 Start_4)))
   (Start_16 Int (5 0 4 (* Start_4 Start_17) (div Start_5 Start_18)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (or StartBool_5 StartBool_3) (< Start_5 Start_12) (<= Start_11 Start_12) (>= Start_16 Start_9)))
   (Start_15 Int (1 2 (- Start_11) (- Start_10 Start_5) (ite StartBool_2 Start_13 Start_3)))
   (StartBool_5 Bool (false true (not StartBool_1) (and StartBool StartBool_4) (or StartBool_3 StartBool) (= Start_7 Start_11) (>= Start_13 Start_17) (> Start_14 Start_2)))
   (Start_13 Int (4 (+ Start_12 Start_15) (* Start_7 Start_8) (div Start_1 Start_11)))
   (Start_14 Int (1 (+ Start Start_10) (mod Start_1 Start_8)))
   (StartBool_3 Bool (false (or StartBool_4 StartBool) (< Start_4 Start_13) (<= Start_4 Start_6) (>= Start_2 Start_14) (> Start_6 Start_7)))
   (Start_12 Int (4 1 3 (- Start) (- Start_9 Start_6) (div Start_11 Start_8) (ite StartBool_3 Start_7 Start_2)))
   (StartBool_4 Bool (true (< Start_8 Start_9) (<= Start_2 Start_4)))
   (Start_2 Int (1 0 (- Start_2) (+ Start_2 Start_3) (div Start_2 Start_4) (mod Start_5 Start_3) (abs Start_2) (ite StartBool Start_6 Start_6)))
   (Start_18 Int (4 0 y (* Start_1 Start_6) (abs Start_12)))
   (Start_4 Int (0 (- Start) (- Start_5 Start_1) (+ Start_3 Start_8) (div Start_10 Start_11) (mod Start_1 Start_2) (abs Start_1) (ite StartBool Start_6 Start_11)))
   (Start_6 Int (4 0 (div Start_6 Start_4) (mod Start Start_4) (abs Start_7) (ite StartBool Start_1 Start_4)))
   (Start_5 Int (4 5 (- Start_2) (- Start_10 Start_9) (+ Start_8 Start_7) (div Start_4 Start_5) (abs Start_9) (ite StartBool Start_6 Start_7)))
   (Start_9 Int (x (- Start_6 Start_4) (* Start_2 Start_6) (div Start_2 Start_4)))
   (Start_7 Int (y (- Start Start_2) (+ Start_3 Start_2) (* Start_8 Start_9) (abs Start_7) (ite StartBool Start_6 Start_6)))
   (Start_8 Int (1 3 (+ Start_5 Start_8) (div Start_2 Start)))
   (Start_17 Int (4 5 3 (+ Start_17 Start_1) (mod Start Start_15) (abs Start_14)))
   (Start_3 Int (0 (- Start_6) (- Start_8 Start_5) (mod Start_6 Start_4) (abs Start_3)))
   (Start_11 Int (4 (- Start_9) (+ Start_1 Start) (* Start_8 Start_7) (abs Start_7)))
   (StartBool_2 Bool (true false (< Start_10 Start_14) (<= Start_9 Start_2) (= Start_13 Start_7) (> Start_11 Start_5)))
   (Start_1 Int (4 (+ Start Start_1) (div Start_7 Start_6) (mod Start_9 Start_3) (abs Start_5) (ite StartBool Start_11 Start_9)))
   (Start_10 Int (4 (mod Start_5 Start) (abs Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (mod y x) (- 4))))

(check-synth)
