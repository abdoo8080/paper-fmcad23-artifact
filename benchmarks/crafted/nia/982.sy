(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (Start_12 Int) (Start_2 Int) (Start_13 Int) (Start_4 Int) (StartBool_2 Bool) (Start_5 Int) (Start_9 Int) (Start_8 Int) (StartBool_3 Bool) (Start_7 Int) (Start_3 Int) (Start_1 Int) (StartBool_1 Bool) (Start_6 Int) (Start_11 Int) (Start_10 Int))
  ((Start Int (0 (- Start) (+ Start_1 Start) (mod Start_2 Start)))
   (StartBool Bool (false true (or StartBool_1 StartBool_2) (<= Start_6 Start_6) (>= Start_2 Start_7)))
   (StartBool_4 Bool (true false (and StartBool StartBool_3) (or StartBool_2 StartBool_4) (< Start_4 Start_2) (<= Start_1 Start_6) (= Start_7 Start_10) (> Start_13 Start_6)))
   (Start_12 Int (3 (- Start_6 Start) (* Start_4 Start_9) (div Start_6 Start_5) (mod Start_12 Start)))
   (Start_2 Int (2 4 x (+ Start_3 Start) (div Start_1 Start) (ite StartBool Start_4 Start_1)))
   (Start_13 Int (y 1 4 0 (- Start_10) (* Start_9 Start_8) (mod Start_11 Start_3) (abs Start_13) (ite StartBool_4 Start_1 Start_12)))
   (Start_4 Int (0 3 2 x 4 1 (- Start_2 Start) (+ Start_3 Start_4) (div Start_3 Start_3) (mod Start Start_1) (abs Start_3) (ite StartBool Start_3 Start_5)))
   (StartBool_2 Bool (false (not StartBool_3) (or StartBool_1 StartBool) (<= Start_11 Start_4) (= Start_2 Start_3) (>= Start_1 Start_1) (> Start_8 Start)))
   (Start_5 Int (3 (- Start_5) (- Start_1 Start_3) (+ Start_5 Start_3) (* Start_6 Start_3) (div Start Start_2) (ite StartBool Start Start_7)))
   (Start_9 Int (5 3 (- Start_2 Start_10) (* Start_7 Start_2)))
   (Start_8 Int (3 4 (+ Start_13 Start_7) (* Start_7 Start_8) (mod Start_1 Start_13) (abs Start_7) (ite StartBool_2 Start_4 Start_9)))
   (StartBool_3 Bool (true false (or StartBool_2 StartBool_1) (<= Start_12 Start_9) (= Start_1 Start_4) (>= Start_13 Start_2)))
   (Start_7 Int (1 y (- Start Start_5) (+ Start_3 Start) (* Start_3 Start_4) (abs Start_4)))
   (Start_3 Int (2 y (div Start_2 Start_1) (mod Start_1 Start_4)))
   (Start_1 Int (5 (- Start_2 Start) (+ Start Start) (div Start_2 Start_5) (mod Start_2 Start) (abs Start_8) (ite StartBool_1 Start_6 Start_3)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_2) (or StartBool_2 StartBool) (<= Start_4 Start_7) (= Start_2 Start) (>= Start_2 Start_9)))
   (Start_6 Int (5 (- Start_6 Start_6) (* Start Start_3) (div Start_6 Start_7) (abs Start_1) (ite StartBool Start_6 Start_2)))
   (Start_11 Int (5 (* Start_7 Start_4) (div Start Start_8) (mod Start_2 Start_12)))
   (Start_10 Int (1 y 4 (- Start_6) (- Start_3 Start_9) (+ Start_2 Start_9) (abs Start_7) (ite StartBool Start_3 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ y (div 3 0))))

(check-synth)
