(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_5 Bool) (Start_15 Int) (Start_14 Int) (Start_1 Int) (Start_2 Int) (StartBool_3 Bool) (StartBool_6 Bool) (Start_4 Int) (Start_5 Int) (Start_10 Int) (StartBool_7 Bool) (Start_7 Int) (Start_12 Int) (Start_6 Int) (Start_9 Int) (Start_13 Int) (Start_11 Int) (Start_8 Int) (Start_3 Int) (StartBool_1 Bool) (StartBool_2 Bool))
  ((Start Int (5 (- Start_1 Start_1) (+ Start Start_2) (* Start_2 Start_3) (mod Start Start_4) (abs Start_5) (ite StartBool Start_4 Start)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_4 StartBool_2) (<= Start_13 Start_7) (= Start_6 Start_6) (>= Start_4 Start_2)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool) (or StartBool_2 StartBool_6) (< Start_9 Start_8) (<= Start_12 Start_9) (> Start_3 Start_2)))
   (StartBool_5 Bool (false true (and StartBool_4 StartBool_5)))
   (Start_15 Int (2 4 (+ Start_3 Start_9) (div Start_5 Start_7) (mod Start_10 Start_7) (ite StartBool_1 Start_13 Start_9)))
   (Start_14 Int (y (- Start_3 Start_11) (+ Start_15 Start_10) (* Start_8 Start_6) (div Start_5 Start) (ite StartBool_4 Start_3 Start)))
   (Start_1 Int (2 x 5 0 (+ Start_12 Start_3) (* Start_12 Start_7) (div Start_4 Start_2) (mod Start_8 Start_6)))
   (Start_2 Int (y 1 x 2 0 (- Start_1 Start_6) (+ Start_5 Start_2) (* Start_3 Start) (mod Start_11 Start)))
   (StartBool_3 Bool (false true (not StartBool_1) (or StartBool_2 StartBool_7)))
   (StartBool_6 Bool (true false (not StartBool_5) (< Start_11 Start_11) (= Start_12 Start_8)))
   (Start_4 Int (y 1 (- Start_8) (- Start_4 Start_8) (div Start_6 Start_12)))
   (Start_5 Int (3 (- Start) (* Start_6 Start) (mod Start_5 Start_5) (ite StartBool Start_3 Start_1)))
   (Start_10 Int (5 (div Start_8 Start_5) (abs Start_1)))
   (StartBool_7 Bool (false true (not StartBool_7) (or StartBool StartBool_2) (<= Start_8 Start_9)))
   (Start_7 Int (5 (- Start_5) (- Start_2 Start_11) (div Start Start_9) (mod Start_11 Start_7) (ite StartBool_1 Start_9 Start_10)))
   (Start_12 Int (3 (+ Start Start_8) (* Start_3 Start_11) (abs Start) (ite StartBool Start_7 Start_12)))
   (Start_6 Int (1 (- Start_7 Start_8) (* Start_3 Start_8) (div Start_9 Start_8) (abs Start_3)))
   (Start_9 Int (1 (- Start_4) (+ Start Start_5) (* Start_7 Start_9) (div Start_10 Start_5) (abs Start_6) (ite StartBool Start_7 Start_5)))
   (Start_13 Int (3 (- Start_4) (- Start_11 Start) (+ Start_8 Start_1) (div Start_12 Start_8) (abs Start_4) (ite StartBool_5 Start_4 Start_14)))
   (Start_11 Int (4 (- Start_11) (- Start_9 Start_3) (+ Start_6 Start_10) (* Start Start_6) (div Start_4 Start_11) (mod Start_10 Start_9) (ite StartBool Start_10 Start_10)))
   (Start_8 Int (4 5 2 0 x (* Start_5 Start_10) (mod Start_9 Start_3) (ite StartBool Start_3 Start)))
   (Start_3 Int (5 (- Start_12) (- Start_3 Start_4) (mod Start Start_2)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool) (<= Start_3 Start_5) (>= Start_8 Start_4) (> Start_4 Start_7)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_1) (or StartBool_1 StartBool_1) (<= Start_10 Start_7) (> Start Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (abs y) 2)))

(check-synth)
