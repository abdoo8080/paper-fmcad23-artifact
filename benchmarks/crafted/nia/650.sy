(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_11 Int) (Start_10 Int) (Start_4 Int) (Start_2 Int) (Start_3 Int) (Start_6 Int) (StartBool_7 Bool) (StartBool_1 Bool) (Start_5 Int) (StartBool_3 Bool) (StartBool_6 Bool) (StartBool_4 Bool) (Start_9 Int) (Start_8 Int) (Start_7 Int) (Start_13 Int) (Start_12 Int) (StartBool_2 Bool) (StartBool_5 Bool))
  ((Start Int (3 2 x 5 y (- Start_1) (+ Start_1 Start) (div Start_1 Start_2) (abs Start_2)))
   (StartBool Bool (true (and StartBool_7 StartBool_4) (<= Start_13 Start_12) (= Start_8 Start_4) (>= Start_13 Start_6)))
   (Start_1 Int (3 y 2 5 0 x (- Start_12) (abs Start)))
   (Start_11 Int (3 5 2 x 0 (- Start_12) (- Start_5 Start_4) (+ Start_9 Start_11) (mod Start_6 Start_12) (abs Start_10)))
   (Start_10 Int (4 (- Start) (- Start Start_4) (* Start_4 Start) (mod Start_4 Start_8) (abs Start_3) (ite StartBool_7 Start_3 Start_5)))
   (Start_4 Int (y (- Start_10) (- Start_9 Start_3) (+ Start_10 Start_9) (* Start_3 Start_10) (mod Start_4 Start_9) (abs Start_6) (ite StartBool_3 Start_3 Start_5)))
   (Start_2 Int (y (- Start_3) (- Start_2 Start_4) (* Start_4 Start_3) (div Start_5 Start_5) (abs Start_3) (ite StartBool_1 Start Start_1)))
   (Start_3 Int (y 3 (- Start_3) (* Start_5 Start_3) (div Start_3 Start_11) (mod Start_3 Start_9) (ite StartBool_1 Start_1 Start_11)))
   (Start_6 Int (2 (- Start_5) (- Start_5 Start_3) (div Start_2 Start_5) (abs Start_6) (ite StartBool Start_3 Start_6)))
   (StartBool_7 Bool (true (and StartBool_4 StartBool_5) (< Start_8 Start_7) (<= Start_6 Start_8) (= Start_1 Start_4) (>= Start_5 Start_9)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_1) (< Start Start) (<= Start_1 Start_3) (= Start_6 Start_1) (>= Start Start_6)))
   (Start_5 Int (y (- Start_1 Start_5) (+ Start_4 Start_2) (div Start_3 Start_4) (mod Start_6 Start_1) (ite StartBool_2 Start Start)))
   (StartBool_3 Bool (true (or StartBool_5 StartBool_6) (< Start_2 Start_6) (<= Start_1 Start_3) (>= Start_7 Start_4)))
   (StartBool_6 Bool (true false (and StartBool_2 StartBool_5) (< Start_5 Start_1) (<= Start_1 Start_4) (= Start_3 Start)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool StartBool_3) (or StartBool_1 StartBool) (< Start Start_5) (= Start_6 Start_6) (>= Start_3 Start_5)))
   (Start_9 Int (0 5 3 (- Start) (+ Start_5 Start_9) (* Start_1 Start_6) (div Start_8 Start_3) (mod Start_5 Start_3) (abs Start)))
   (Start_8 Int (4 (div Start_3 Start_2) (mod Start_4 Start_6) (abs Start_4)))
   (Start_7 Int (0 2 5 4 (- Start_6) (+ Start_5 Start_7) (div Start_4 Start_2) (ite StartBool_6 Start_6 Start_5)))
   (Start_13 Int (x (- Start Start_12) (+ Start_2 Start_8) (* Start_6 Start_9) (div Start_2 Start_13)))
   (Start_12 Int (3 (- Start Start_8) (+ Start_6 Start_1) (mod Start_10 Start_5) (abs Start_12)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_3 StartBool_3) (or StartBool_4 StartBool_3) (< Start_5 Start_2) (<= Start_6 Start_2) (= Start_3 Start_1) (>= Start_1 Start_5) (> Start_5 Start_1)))
   (StartBool_5 Bool (false (and StartBool_2 StartBool_1) (or StartBool_1 StartBool_7) (< Start Start_2) (<= Start_2 Start_2) (= Start_3 Start_8) (>= Start_1 Start_4) (> Start_6 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (* x 5) 0)))

(check-synth)
