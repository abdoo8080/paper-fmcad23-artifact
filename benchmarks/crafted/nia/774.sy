(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_2 Int) (Start_3 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_10 Int) (Start_15 Int) (Start_11 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_1 Int) (Start_5 Int) (Start_6 Int) (Start_12 Int) (Start_7 Int) (Start_13 Int) (StartBool_2 Bool) (Start_8 Int) (Start_9 Int) (Start_14 Int))
  ((Start Int (4 (- Start) (+ Start_1 Start) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (false true (and StartBool_1 StartBool_4) (< Start_12 Start_10) (<= Start_6 Start_7) (= Start_14 Start_10) (> Start_6 Start_11)))
   (StartBool_6 Bool (false (not StartBool_6) (and StartBool_3 StartBool_3) (<= Start_13 Start_3) (= Start_11 Start_6) (>= Start_14 Start_11) (> Start_11 Start_14)))
   (Start_2 Int (1 2 (- Start_12) (- Start_4 Start_5) (* Start_11 Start_2) (div Start_10 Start_9)))
   (Start_3 Int (4 (- Start_11 Start_8) (+ Start_6 Start_12) (mod Start_14 Start_10)))
   (StartBool_3 Bool (false true (not StartBool_3) (or StartBool_5 StartBool_4) (<= Start_11 Start_1) (>= Start_8 Start_6)))
   (StartBool_4 Bool (false (not StartBool) (and StartBool StartBool_2) (<= Start_6 Start)))
   (Start_10 Int (5 (- Start_8) (- Start_6 Start_7) (+ Start_13 Start_4) (div Start_15 Start_13) (ite StartBool Start_4 Start_13)))
   (Start_15 Int (5 (- Start_13 Start_2) (* Start_10 Start_13) (div Start Start_9) (mod Start_12 Start_12) (abs Start_10) (ite StartBool_4 Start_8 Start_1)))
   (Start_11 Int (5 y (+ Start_12 Start_3) (* Start_13 Start_7) (ite StartBool_1 Start_1 Start_6)))
   (StartBool_5 Bool (false true (= Start_7 Start_2) (>= Start_10 Start_2)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (< Start Start_2) (<= Start_3 Start_1) (>= Start Start_2) (> Start_4 Start_3)))
   (Start_4 Int (4 (abs Start_3) (ite StartBool_2 Start_4 Start_5)))
   (Start_1 Int (2 (div Start_4 Start_9) (ite StartBool_6 Start_2 Start_11)))
   (Start_5 Int (0 4 (- Start_4 Start_4) (* Start_2 Start_6) (mod Start_2 Start_7)))
   (Start_6 Int (3 5 0 (- Start) (* Start_7 Start_3) (div Start_4 Start_3) (ite StartBool_1 Start_5 Start_2)))
   (Start_12 Int (0 (mod Start_4 Start_10) (abs Start_4) (ite StartBool_3 Start_15 Start_6)))
   (Start_7 Int (2 (* Start_3 Start) (mod Start_1 Start_6)))
   (Start_13 Int (1 (- Start_12) (- Start_1 Start_5) (* Start_3 Start_4) (ite StartBool_4 Start_14 Start)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_4 StartBool_5) (or StartBool_1 StartBool_2) (= Start_4 Start_8)))
   (Start_8 Int (1 (- Start_3 Start) (+ Start_7 Start_9) (* Start_7 Start_2) (mod Start_9 Start) (ite StartBool_3 Start_6 Start_1)))
   (Start_9 Int (y 3 1 2 x 4 0 (- Start_1) (+ Start_6 Start_10) (div Start_3 Start_11) (mod Start_8 Start)))
   (Start_14 Int (y (- Start_7) (mod Start_9 Start_1) (abs Start_14)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (+ 5 2) (mod 0 y))))

(check-synth)
