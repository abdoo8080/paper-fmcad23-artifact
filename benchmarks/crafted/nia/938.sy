(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_5 Int) (StartBool_3 Bool) (Start_11 Int) (Start_7 Int) (Start_10 Int) (Start_9 Int) (Start_4 Int) (Start_8 Int) (Start_6 Int) (Start_2 Int) (Start_1 Int) (Start_3 Int))
  ((Start Int (2 1 (* Start_1 Start) (div Start_1 Start_1)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool) (< Start_9 Start_9) (> Start_11 Start_5)))
   (Start_12 Int (0 y x (- Start_11) (+ Start_5 Start_1) (abs Start_12)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_3 StartBool_2) (or StartBool StartBool) (< Start_1 Start_3) (= Start_2 Start_7) (>= Start_7 Start) (> Start_9 Start_8)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_2 StartBool) (< Start_10 Start_6) (= Start_6 Start_1)))
   (Start_5 Int (3 5 (- Start_3 Start_10) (+ Start_6 Start_3) (div Start_7 Start_2) (abs Start_6) (ite StartBool Start_2 Start_5)))
   (StartBool_3 Bool (true false (< Start_10 Start_12) (= Start_1 Start_10) (>= Start_4 Start_6) (> Start_7 Start_7)))
   (Start_11 Int (3 (- Start_11) (+ Start Start_3) (mod Start_10 Start_11) (abs Start_5) (ite StartBool_1 Start_6 Start_4)))
   (Start_7 Int (4 (- Start_5) (- Start Start) (+ Start_6 Start_7) (* Start_1 Start_8) (div Start_8 Start) (mod Start_8 Start_9) (abs Start_8)))
   (Start_10 Int (2 (- Start_3 Start_5) (* Start_9 Start_8) (div Start_8 Start) (abs Start_2)))
   (Start_9 Int (2 (div Start_3 Start_6) (abs Start_3)))
   (Start_4 Int (x (- Start_5 Start_6) (+ Start_4 Start_5) (* Start_1 Start_3) (div Start_7 Start) (mod Start_7 Start_7) (abs Start_4)))
   (Start_8 Int (5 (- Start_6) (+ Start_7 Start_10) (div Start_5 Start_5) (abs Start_3) (ite StartBool Start_9 Start_5)))
   (Start_6 Int (4 (- Start_2 Start_2) (* Start_10 Start_10) (div Start_2 Start_2) (abs Start_5) (ite StartBool Start_4 Start)))
   (Start_2 Int (x (+ Start_4 Start) (div Start_6 Start_2) (mod Start_2 Start_1) (abs Start_8)))
   (Start_1 Int (5 y 1 0 (+ Start_1 Start_2) (div Start_1 Start_1) (mod Start Start_1) (abs Start_3)))
   (Start_3 Int (2 (- Start Start_2) (* Start_4 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod y 0) 2)))

(check-synth)
