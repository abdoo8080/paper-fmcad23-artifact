(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_12 Int) (Start_1 Int) (StartBool_1 Bool) (Start_11 Int) (StartBool_5 Bool) (Start_14 Int) (Start_5 Int) (Start_4 Int) (Start_3 Int) (Start_2 Int) (Start_9 Int) (Start_15 Int) (Start_6 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_7 Int) (StartBool_4 Bool) (Start_10 Int) (Start_8 Int))
  ((Start Int (2 (- Start) (- Start Start) (abs Start_1) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true (and StartBool_2 StartBool_1) (or StartBool_2 StartBool) (< Start_3 Start_14) (<= Start_5 Start_14) (> Start_2 Start_3)))
   (Start_13 Int (1 (- Start_2 Start_8) (abs Start_3)))
   (Start_12 Int (0 x (mod Start_11 Start_2)))
   (Start_1 Int (5 (- Start_4) (- Start_12 Start_2) (* Start_13 Start_8) (div Start_14 Start_11) (abs Start_3) (ite StartBool_1 Start_1 Start_11)))
   (StartBool_1 Bool (false (and StartBool_5 StartBool_2) (= Start Start_6)))
   (Start_11 Int (0 (- Start_8) (- Start_9 Start_8) (div Start Start_3) (mod Start_3 Start_4) (ite StartBool_5 Start_2 Start_9)))
   (StartBool_5 Bool (true (and StartBool_5 StartBool_1) (= Start_5 Start_4)))
   (Start_14 Int (3 1 0 5 x (- Start_9) (- Start_12 Start_4) (+ Start_11 Start_7) (div Start_3 Start_15) (mod Start_1 Start_2) (ite StartBool_5 Start_6 Start_2)))
   (Start_5 Int (4 3 x 5 1 y 0 (- Start_4 Start_1)))
   (Start_4 Int (3 4 (- Start) (* Start_5 Start_1) (div Start_3 Start_5)))
   (Start_3 Int (y (- Start_2) (+ Start Start_4) (div Start_3 Start_4) (mod Start_2 Start_6)))
   (Start_2 Int (0 1 (- Start) (- Start_3 Start_2) (div Start Start_3) (mod Start Start_4) (abs Start)))
   (Start_9 Int (x 1 3 (+ Start_7 Start_7) (* Start_7 Start_9) (mod Start_10 Start_7) (ite StartBool Start Start_10)))
   (Start_15 Int (0 (+ Start_10 Start) (div Start_5 Start_12) (mod Start_7 Start_8) (abs Start_9) (ite StartBool_1 Start_6 Start_13)))
   (Start_6 Int (x 0 (- Start_6 Start_4) (+ Start_5 Start_5) (* Start_1 Start) (mod Start_1 Start_4) (abs Start_4) (ite StartBool_2 Start Start_1)))
   (StartBool_2 Bool (false (not StartBool_3) (< Start_4 Start_6) (= Start_1 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_4 StartBool_2) (or StartBool_4 StartBool_4) (<= Start_4 Start_4) (> Start_1 Start)))
   (Start_7 Int (y x (- Start_8) (+ Start_4 Start_1) (* Start_2 Start_4) (div Start_1 Start_6) (mod Start_9 Start_3) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_4 Bool (false (not StartBool_4) (<= Start_5 Start_7) (= Start_1 Start_1) (>= Start_5 Start_1) (> Start_1 Start_3)))
   (Start_10 Int (5 (div Start_4 Start_8) (abs Start_2)))
   (Start_8 Int (1 (- Start_1) (div Start_3 Start) (mod Start_2 Start_9) (ite StartBool Start_9 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 5 (- 1 x))))

(check-synth)
