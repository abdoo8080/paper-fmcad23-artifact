(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_1 Int) (Start_11 Int) (Start_9 Int) (Start_10 Int) (Start_15 Int) (Start_3 Int) (StartBool_8 Bool) (StartBool_1 Bool) (StartBool_7 Bool) (Start_5 Int) (StartBool_6 Bool) (Start_14 Int) (Start_4 Int) (StartBool_3 Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_13 Int) (Start_6 Int) (StartBool_2 Bool) (Start_7 Int) (Start_12 Int) (Start_2 Int) (Start_8 Int))
  ((Start Int (5 3 (- Start_1) (- Start Start) (+ Start_1 Start_1) (* Start Start_2) (mod Start_2 Start_1) (abs Start_1) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true false (< Start_2 Start_11) (<= Start_7 Start_12) (> Start_10 Start_10)))
   (Start_16 Int (5 1 (abs Start_14)))
   (Start_1 Int (2 y 4 5 1 (- Start_2) (- Start_9 Start_10) (+ Start_14 Start_5) (* Start_8 Start_15) (abs Start_7)))
   (Start_11 Int (x 2 3 5 (* Start_5 Start_9) (div Start_4 Start_2)))
   (Start_9 Int (5 y 4 1 x 3 (- Start_11) (+ Start_11 Start_4) (* Start Start_7) (div Start_12 Start_13) (mod Start Start_10) (abs Start_1)))
   (Start_10 Int (0 (- Start_7 Start) (abs Start_9)))
   (Start_15 Int (0 (- Start_13) (- Start Start_5) (+ Start_8 Start_5) (div Start_11 Start_14) (mod Start_5 Start_16) (abs Start_5)))
   (Start_3 Int (2 (- Start_3) (- Start_1 Start_3) (+ Start_9 Start_10) (* Start_1 Start_10) (abs Start_10)))
   (StartBool_8 Bool (true (and StartBool_1 StartBool_1) (>= Start_4 Start_4)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1)))
   (StartBool_7 Bool (true false (not StartBool_8) (< Start_3 Start_4)))
   (Start_5 Int (1 x (- Start_6) (* Start_5 Start_1) (abs Start) (ite StartBool_3 Start_3 Start)))
   (StartBool_6 Bool (false true (not StartBool_4) (and StartBool_1 StartBool_7) (or StartBool_5 StartBool_6) (= Start_4 Start_3) (>= Start_8 Start_7)))
   (Start_14 Int (4 x 1 2 (+ Start_9 Start_8) (div Start Start_4) (mod Start_4 Start_9) (ite StartBool_2 Start_13 Start_16)))
   (Start_4 Int (1 2 (- Start_4 Start) (mod Start_3 Start_2) (abs Start_3) (ite StartBool_3 Start_3 Start_3)))
   (StartBool_3 Bool (true false (or StartBool_4 StartBool_3)))
   (StartBool_5 Bool (true false (not StartBool_4) (<= Start_6 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_5) (or StartBool_4 StartBool_3) (< Start_4 Start_4) (<= Start Start_5) (= Start Start_2)))
   (Start_13 Int (3 (- Start_13 Start) (* Start_7 Start_6) (mod Start Start_5) (abs Start)))
   (Start_6 Int (y (- Start_3) (mod Start_5 Start_6)))
   (StartBool_2 Bool (true (or StartBool StartBool_6) (< Start_3 Start_7) (<= Start_5 Start_2) (>= Start_1 Start)))
   (Start_7 Int (y 3 (- Start_5 Start_4) (+ Start_3 Start_1) (* Start_5 Start_4) (div Start_4 Start_8)))
   (Start_12 Int (x 4 (- Start_12) (- Start_11 Start_5) (+ Start_7 Start_13) (abs Start_5) (ite StartBool Start_5 Start_10)))
   (Start_2 Int (3 0 4 1 (- Start) (+ Start_3 Start_1) (mod Start Start_3) (abs Start_2) (ite StartBool_2 Start Start_4)))
   (Start_8 Int (1 (- Start_2) (ite StartBool_6 Start Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 3 (- (mod y 4) 3))))

(check-synth)
