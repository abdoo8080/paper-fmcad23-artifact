(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_9 Int) (Start_10 Int) (Start_2 Int) (Start_4 Int) (Start_1 Int) (Start_6 Int) (StartBool_1 Bool) (Start_3 Int) (Start_5 Int) (Start_7 Int) (StartBool_2 Bool) (Start_8 Int))
  ((Start Int (4 2 (- Start_1) (- Start_1 Start)))
   (StartBool Bool (true (not StartBool) (and StartBool_1 StartBool) (= Start_1 Start_2)))
   (Start_9 Int (4 (- Start_8 Start_10) (+ Start_9 Start_2) (* Start_8 Start_4) (div Start_2 Start_10)))
   (Start_10 Int (0 (div Start_8 Start_8)))
   (Start_2 Int (y (+ Start Start_1) (mod Start_3 Start_4) (abs Start_4) (ite StartBool Start_4 Start_3)))
   (Start_4 Int (5 (- Start_2) (+ Start_2 Start) (* Start_1 Start_3) (mod Start_1 Start_3) (abs Start_2) (ite StartBool Start Start_1)))
   (Start_1 Int (1 3 (- Start Start) (* Start Start_1) (div Start Start) (abs Start)))
   (Start_6 Int (0 3 y (- Start_1) (- Start_2 Start_5) (+ Start_1 Start_4) (mod Start_2 Start_7) (abs Start) (ite StartBool Start_1 Start)))
   (StartBool_1 Bool (false (not StartBool) (or StartBool StartBool_2) (< Start_4 Start_3) (= Start_4 Start_1) (>= Start_4 Start) (> Start_4 Start_5)))
   (Start_3 Int (4 5 3 y (mod Start_1 Start_4)))
   (Start_5 Int (5 4 (- Start_1) (abs Start_6)))
   (Start_7 Int (4 0 (- Start_3) (* Start_6 Start_8) (mod Start Start_4) (ite StartBool_1 Start_7 Start_6)))
   (StartBool_2 Bool (false (or StartBool StartBool_1) (< Start_9 Start_10) (= Start_9 Start_7) (> Start_1 Start_4)))
   (Start_8 Int (1 (- Start_7) (* Start_7 Start_7) (div Start_2 Start_5) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- 2) (+ (* (mod 1 x) (- y)) 1))))

(check-synth)
