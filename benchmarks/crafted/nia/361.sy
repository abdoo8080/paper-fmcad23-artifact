(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_13 Int) (StartBool_7 Bool) (Start_12 Int) (Start_2 Int) (StartBool_5 Bool) (Start_3 Int) (Start_4 Int) (Start_14 Int) (Start_5 Int) (StartBool_4 Bool) (Start_9 Int) (StartBool_1 Bool) (Start_6 Int) (StartBool_6 Bool) (Start_7 Int) (StartBool_2 Bool) (Start_11 Int) (Start_10 Int) (StartBool_3 Bool) (Start_8 Int))
  ((Start Int (y (- Start_1) (- Start Start) (mod Start_1 Start_2) (abs Start_1) (ite StartBool_1 Start_2 Start_2)))
   (StartBool Bool (false (= Start_3 Start_9) (>= Start_3 Start_11) (> Start_8 Start_5)))
   (Start_1 Int (1 2 0 (- Start_2) (* Start_7 Start_14) (div Start_4 Start_1) (abs Start_11)))
   (Start_13 Int (x y (+ Start_7 Start_6) (div Start_8 Start_1) (mod Start Start_9) (ite StartBool_3 Start_6 Start_6)))
   (StartBool_7 Bool (true false (or StartBool_7 StartBool_4) (= Start_9 Start_11)))
   (Start_12 Int (2 (- Start_1 Start_11) (+ Start_4 Start_1) (div Start_5 Start_5) (abs Start_6) (ite StartBool Start_10 Start)))
   (Start_2 Int (3 (+ Start_10 Start_4) (* Start_10 Start_5) (div Start_5 Start_10) (ite StartBool_4 Start_3 Start_2)))
   (StartBool_5 Bool (false true (and StartBool_1 StartBool_1) (or StartBool_6 StartBool_1) (>= Start_6 Start_5) (> Start_4 Start_2)))
   (Start_3 Int (5 2 (- Start_2) (- Start Start_3) (+ Start_1 Start_3) (* Start_2 Start_2) (abs Start_3) (ite StartBool_3 Start Start_1)))
   (Start_4 Int (1 (- Start_4 Start_5) (+ Start Start_5) (div Start_1 Start_3) (mod Start_2 Start_4) (abs Start_4) (ite StartBool_1 Start Start_4)))
   (Start_14 Int (3 (- Start_10 Start_7) (* Start_1 Start_11) (div Start_1 Start) (mod Start_8 Start_3) (ite StartBool_7 Start Start_12)))
   (Start_5 Int (4 (- Start_1) (div Start_3 Start)))
   (StartBool_4 Bool (false (not StartBool_3) (and StartBool_2 StartBool_5) (or StartBool_2 StartBool_2) (<= Start_5 Start_4) (>= Start_5 Start_3) (> Start_5 Start)))
   (Start_9 Int (1 0 (+ Start_5 Start_4) (div Start_8 Start_4) (mod Start_8 Start_3)))
   (StartBool_1 Bool (false (or StartBool_2 StartBool_1) (> Start_3 Start)))
   (Start_6 Int (x (- Start_1) (- Start_2 Start_2) (+ Start_4 Start_6) (* Start_6 Start) (abs Start_3) (ite StartBool_4 Start_3 Start_5)))
   (StartBool_6 Bool (false true (< Start_2 Start) (<= Start_1 Start_3) (= Start_3 Start_2) (>= Start_1 Start_2) (> Start Start_4)))
   (Start_7 Int (5 (* Start_7 Start_2) (ite StartBool_3 Start_8 Start_6)))
   (StartBool_2 Bool (false true (or StartBool StartBool_5) (< Start_4 Start_2) (= Start_7 Start_6) (> Start_1 Start_1)))
   (Start_11 Int (1 (- Start_3) (+ Start_5 Start_1) (* Start_5 Start_10) (div Start_12 Start_9) (abs Start_10) (ite StartBool_6 Start_13 Start_10)))
   (Start_10 Int (0 (- Start_2 Start_11) (ite StartBool_7 Start Start_12)))
   (StartBool_3 Bool (true false (or StartBool_2 StartBool_4) (< Start_2 Start) (<= Start_4 Start_1) (>= Start_1 Start_2)))
   (Start_8 Int (0 (- Start_3) (+ Start_9 Start) (* Start_5 Start) (mod Start_9 Start_6) (abs Start_4) (ite StartBool Start_6 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (ite (<= y 0) x 1))))

(check-synth)
