(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_16 Int) (Start_19 Int) (Start_17 Int) (Start_2 Int) (Start_5 Int) (Start_1 Int) (Start_14 Int) (StartBool_2 Bool) (Start_4 Int) (Start_15 Int) (Start_6 Int) (Start_3 Int) (Start_7 Int) (Start_8 Int) (StartBool_1 Bool) (Start_12 Int) (Start_20 Int) (Start_10 Int) (Start_18 Int) (StartBool_3 Bool) (Start_11 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_13 Int) (Start_9 Int))
  ((Start Int (4 y 2 (- Start_1 Start_2) (* Start Start_3) (div Start Start_1) (mod Start Start_4) (abs Start_4) (ite StartBool Start_2 Start)))
   (StartBool Bool (false (or StartBool_3 StartBool) (< Start_3 Start_16) (= Start_15 Start_17) (> Start_16 Start_18)))
   (StartBool_6 Bool (false true (< Start_2 Start_10) (<= Start_11 Start_4) (= Start_17 Start_20) (>= Start_19 Start_19)))
   (Start_16 Int (x 5 2 (- Start_18 Start_7) (+ Start_4 Start_18) (mod Start_11 Start_3) (abs Start_17) (ite StartBool_5 Start_5 Start_18)))
   (Start_19 Int (3 y 0 1 x (- Start_6) (- Start_6 Start_7) (+ Start Start_12) (ite StartBool_2 Start_2 Start_3)))
   (Start_17 Int (x 0 5 (- Start_12) (div Start_7 Start_17) (ite StartBool_3 Start_18 Start_19)))
   (Start_2 Int (1 (* Start_10 Start_12) (div Start_7 Start_9) (abs Start_11) (ite StartBool_2 Start_15 Start_12)))
   (Start_5 Int (3 (- Start_1 Start_6) (div Start_7 Start_8) (mod Start_11 Start_11) (abs Start_6) (ite StartBool_2 Start_8 Start_3)))
   (Start_1 Int (2 0 (- Start_6)))
   (Start_14 Int (1 (- Start_3) (- Start_8 Start_9) (div Start_5 Start_7) (abs Start_4)))
   (StartBool_2 Bool (true false (and StartBool StartBool_3) (<= Start_14 Start_12) (= Start_5 Start_9)))
   (Start_4 Int (1 (- Start_1 Start_5) (* Start_5 Start_6) (div Start_2 Start_3) (abs Start_5) (ite StartBool Start_6 Start_7)))
   (Start_15 Int (2 (- Start_8) (- Start_1 Start_6) (+ Start_3 Start_11) (ite StartBool_3 Start_3 Start_7)))
   (Start_6 Int (3 (- Start_2 Start_5) (ite StartBool_1 Start_4 Start_6)))
   (Start_3 Int (2 4 (- Start_7 Start_12) (div Start_2 Start_6) (mod Start_14 Start_10) (abs Start_12) (ite StartBool_4 Start_5 Start_13)))
   (Start_7 Int (1 4 (- Start_7 Start_2) (div Start_7 Start_3) (abs Start_8) (ite StartBool Start_6 Start_1)))
   (Start_8 Int (5 2 (- Start_3) (- Start_5 Start_7) (* Start_2 Start_6) (div Start_5 Start_7) (mod Start Start_6) (abs Start) (ite StartBool Start_1 Start_2)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (or StartBool_2 StartBool_3) (= Start_1 Start_1) (>= Start_8 Start_6)))
   (Start_12 Int (5 (- Start_12) (+ Start Start) (* Start_7 Start_12) (div Start_5 Start) (ite StartBool_4 Start_11 Start_1)))
   (Start_20 Int (5 (- Start_3) (- Start_2 Start) (+ Start_18 Start_3) (* Start_6 Start_18) (mod Start Start_1) (ite StartBool_4 Start_20 Start)))
   (Start_10 Int (0 (- Start_11) (- Start_11 Start_7) (+ Start_1 Start_3) (* Start_5 Start) (div Start_8 Start_4) (mod Start_12 Start_8) (abs Start_1) (ite StartBool_4 Start_8 Start_1)))
   (Start_18 Int (x (- Start_10 Start_2) (+ Start_6 Start_18) (* Start_15 Start_2) (div Start_17 Start) (abs Start_12) (ite StartBool Start_18 Start_10)))
   (StartBool_3 Bool (false (and StartBool_4 StartBool_3) (or StartBool_4 StartBool_3) (< Start_3 Start_7)))
   (Start_11 Int (5 4 (- Start_9) (- Start_11 Start_10) (+ Start Start_8) (* Start_12 Start_5) (div Start_12 Start_7) (mod Start_1 Start_3) (ite StartBool_1 Start Start_10)))
   (StartBool_5 Bool (true (not StartBool_4) (and StartBool_6 StartBool_6) (>= Start_7 Start_18)))
   (StartBool_4 Bool (false (not StartBool_4) (or StartBool_3 StartBool_1) (< Start_1 Start_9) (>= Start_5 Start_10)))
   (Start_13 Int (x 3 4 (- Start_13) (- Start_11 Start_4) (+ Start_9 Start_5) (* Start_1 Start_11) (mod Start_12 Start_11)))
   (Start_9 Int (1 0 3 (- Start_3) (- Start_4 Start_11) (* Start_1 Start_11) (div Start_13 Start_12) (mod Start_2 Start_6) (ite StartBool_3 Start_8 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (* 4 (+ 5 5)) 4)))

(check-synth)
