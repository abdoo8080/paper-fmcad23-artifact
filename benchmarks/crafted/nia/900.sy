(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_8 Int) (Start_5 Int) (Start_6 Int) (Start_2 Int) (Start_7 Int) (Start_3 Int) (Start_1 Int) (Start_4 Int))
  ((Start Int (1 5 y 4 3 x (- Start) (- Start Start) (* Start Start_1) (div Start Start_1)))
   (StartBool Bool (true false (not StartBool) (< Start_3 Start_7) (= Start_6 Start_5)))
   (Start_8 Int (y 1 2 0 4 x (* Start_4 Start_4)))
   (Start_5 Int (3 4 0 (- Start_7) (- Start_5 Start_2) (* Start_7 Start_6) (abs Start_8)))
   (Start_6 Int (3 0 (- Start_4) (- Start_5 Start_6)))
   (Start_2 Int (y (- Start_1) (* Start_1 Start_3) (mod Start_4 Start_2) (abs Start_4)))
   (Start_7 Int (2 (- Start_8) (- Start_6 Start) (+ Start_7 Start_4) (div Start_1 Start) (mod Start_3 Start_6) (abs Start_4) (ite StartBool Start_8 Start)))
   (Start_3 Int (4 0))
   (Start_1 Int (2 5 (- Start) (- Start_1 Start_1) (* Start_2 Start_2) (abs Start_3)))
   (Start_4 Int (1 (- Start_3) (* Start_1 Start_5) (mod Start_6 Start_1) (abs Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 4 (- 1 y))))

(check-synth)
