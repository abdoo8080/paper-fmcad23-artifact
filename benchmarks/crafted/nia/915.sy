(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_15 Int) (StartBool_2 Bool) (Start_14 Int) (StartBool_3 Bool) (Start_2 Int) (Start_5 Int) (Start_6 Int) (Start_4 Int) (Start_8 Int) (StartBool_6 Bool) (StartBool_4 Bool) (Start_13 Int) (Start_10 Int) (Start_9 Int) (Start_7 Int) (Start_3 Int) (StartBool_5 Bool) (Start_1 Int) (StartBool_1 Bool) (Start_11 Int))
  ((Start Int (2 4 1 (- Start) (div Start_1 Start) (abs Start_2)))
   (StartBool Bool (true false (not StartBool_1) (or StartBool_4 StartBool_4)))
   (Start_12 Int (5 (* Start Start_10) (div Start_10 Start_6) (abs Start_1)))
   (Start_15 Int (5 (- Start_14 Start_3) (+ Start_7 Start_10) (* Start_4 Start_1) (div Start_7 Start_7) (abs Start) (ite StartBool_6 Start_13 Start_13)))
   (StartBool_2 Bool (false true (<= Start_5 Start_4) (= Start_1 Start_8) (>= Start_4 Start_14) (> Start_4 Start)))
   (Start_14 Int (0 x 5 (- Start_8 Start_15)))
   (StartBool_3 Bool (true false (not StartBool_4) (or StartBool_2 StartBool_2) (<= Start_9 Start_3)))
   (Start_2 Int (4 1 y x 3 2 5 (- Start) (mod Start_3 Start_4) (abs Start_4) (ite StartBool Start_5 Start_5)))
   (Start_5 Int (4 3 (- Start_3 Start) (* Start_6 Start) (abs Start_1)))
   (Start_6 Int (2 (- Start_4 Start_4) (* Start_2 Start_6) (div Start_1 Start_3) (mod Start_6 Start_1) (abs Start_1)))
   (Start_4 Int (2 x (- Start_4) (+ Start_2 Start_4) (* Start_3 Start_7) (div Start_5 Start_8) (ite StartBool Start_3 Start)))
   (Start_8 Int (x 3 (+ Start_9 Start_2) (div Start_6 Start_6) (mod Start_4 Start_1) (abs Start_8) (ite StartBool_1 Start_9 Start_2)))
   (StartBool_6 Bool (true false (not StartBool_4) (< Start_14 Start_10) (> Start Start_9)))
   (StartBool_4 Bool (false (not StartBool_1) (and StartBool StartBool_5) (or StartBool_5 StartBool_6) (< Start_11 Start_3) (= Start Start_10) (> Start_5 Start_6)))
   (Start_13 Int (3 (- Start_8) (- Start_11 Start_5) (+ Start_3 Start_4) (ite StartBool_3 Start_9 Start_5)))
   (Start_10 Int (1 (- Start_8 Start_10) (+ Start_2 Start_4) (* Start_4 Start_1) (mod Start_1 Start) (abs Start_7)))
   (Start_9 Int (x (div Start_9 Start_7) (abs Start_10)))
   (Start_7 Int (3 1 0 2))
   (Start_3 Int (3 x 1 (- Start_7) (+ Start_4 Start) (* Start_3 Start_9) (div Start_10 Start_2) (mod Start_5 Start) (abs Start_11) (ite StartBool Start_5 Start_2)))
   (StartBool_5 Bool (true false (>= Start_6 Start_2) (> Start_11 Start_2)))
   (Start_1 Int (y 4 2 (- Start_4) (- Start_8 Start_9) (+ Start_12 Start_11) (* Start_10 Start_6) (div Start_6 Start_3) (abs Start_7) (ite StartBool_2 Start_6 Start_13)))
   (StartBool_1 Bool (true (< Start_6 Start_1) (>= Start_6 Start) (> Start_10 Start_9)))
   (Start_11 Int (2 0 3 5 (- Start_6) (- Start_4 Start_9) (+ Start_6 Start_4) (* Start_8 Start) (mod Start_7 Start_6) (abs Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div y (* (abs y) y))))

(check-synth)
