(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (Start_3 Int) (Start_17 Int) (Start_18 Int) (Start_2 Int) (Start_16 Int) (Start_15 Int) (StartBool_2 Bool) (Start_12 Int) (Start_4 Int) (StartBool_5 Bool) (Start_6 Int) (StartBool_1 Bool) (Start_14 Int) (Start_9 Int) (StartBool_4 Bool) (StartBool_3 Bool) (Start_1 Int) (Start_19 Int) (Start_8 Int) (Start_13 Int) (Start_11 Int) (Start_10 Int) (Start_5 Int) (Start_7 Int))
  ((Start Int (2 (- Start_1 Start_2) (+ Start Start_3) (ite StartBool Start_4 Start)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_1 StartBool) (or StartBool_5 StartBool_1) (<= Start_10 Start_13) (= Start Start_10) (>= Start_5 Start_3) (> Start Start_16)))
   (Start_20 Int (5 (- Start_13) (- Start_17 Start_4) (+ Start_14 Start_6) (* Start_20 Start_11) (div Start Start_8) (mod Start_11 Start_2) (abs Start_19)))
   (Start_3 Int (x 2 1 3 4 y 0 5 (div Start_6 Start_7) (mod Start_6 Start_6) (abs Start_9)))
   (Start_17 Int (5 y (- Start_15) (- Start_14 Start) (+ Start_9 Start_9) (div Start_7 Start_15) (mod Start_9 Start_17) (abs Start_11) (ite StartBool_3 Start_13 Start_15)))
   (Start_18 Int (x (- Start_18) (* Start_17 Start_11) (mod Start_6 Start_13)))
   (Start_2 Int (5 3 (- Start_19 Start_7) (+ Start_2 Start_4) (* Start_2 Start_4) (div Start_7 Start_4) (abs Start_1)))
   (Start_16 Int (0 (- Start_9) (* Start_17 Start_2) (div Start_5 Start_12) (abs Start_17) (ite StartBool Start_18 Start)))
   (Start_15 Int (3 4 (- Start_16) (- Start_10 Start_14) (mod Start_14 Start_4)))
   (StartBool_2 Bool (false (and StartBool StartBool_2) (< Start_4 Start_5) (<= Start_5 Start_7) (= Start_5 Start_2) (> Start Start_1)))
   (Start_12 Int (x (mod Start_10 Start) (abs Start_2)))
   (Start_4 Int (x 4 1 (* Start_5 Start_6) (div Start_5 Start_5)))
   (StartBool_5 Bool (false (< Start_16 Start_8) (<= Start_20 Start_15) (= Start_17 Start_15) (> Start_13 Start_7)))
   (Start_6 Int (4 (- Start) (- Start_6 Start_4) (* Start_6 Start_5) (mod Start_4 Start_7) (abs Start_8) (ite StartBool_1 Start_4 Start)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_1) (or StartBool_2 StartBool_3) (< Start_6 Start) (<= Start_9 Start_3) (>= Start_6 Start_7)))
   (Start_14 Int (x 1 (- Start_9 Start_4) (abs Start_11) (ite StartBool_4 Start_15 Start_3)))
   (Start_9 Int (5 (* Start Start_9) (div Start_5 Start_5) (abs Start_8) (ite StartBool_2 Start_5 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_4) (< Start_13 Start_7) (<= Start_9 Start_16) (= Start_9 Start_11) (> Start_9 Start_8)))
   (StartBool_3 Bool (true false (> Start_2 Start)))
   (Start_1 Int (5 2 1 0 (- Start_8) (- Start_8 Start_19) (* Start_11 Start_10) (ite StartBool Start_5 Start_2)))
   (Start_19 Int (5 1 (- Start_11) (* Start_15 Start_18) (mod Start_8 Start_6) (ite StartBool_4 Start_17 Start_10)))
   (Start_8 Int (4 (- Start_6 Start_10) (+ Start_10 Start_6) (mod Start_4 Start_11) (abs Start_3)))
   (Start_13 Int (y (- Start_12) (- Start Start) (+ Start_5 Start_4) (* Start_6 Start_1) (div Start_9 Start_1) (mod Start_5 Start_10) (abs Start_12) (ite StartBool_1 Start_5 Start_14)))
   (Start_11 Int (2 5 (- Start_5) (* Start_12 Start_6) (div Start_9 Start_1)))
   (Start_10 Int (2 (+ Start_4 Start_10) (mod Start_2 Start_4) (ite StartBool_2 Start_1 Start_2)))
   (Start_5 Int (4 1 x (+ Start_1 Start_11) (div Start_4 Start_18) (mod Start_13 Start_16) (abs Start_14) (ite StartBool_3 Start_11 Start_6)))
   (Start_7 Int (0 4 x y (- Start_10) (- Start_13 Start_4) (* Start_2 Start_1) (ite StartBool_2 Start_5 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* x 5)))

(check-synth)
