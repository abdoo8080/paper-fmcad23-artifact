(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_14 Int) (StartBool_2 Bool) (Start_11 Int) (Start_2 Int) (Start_4 Int) (Start_6 Int) (Start_5 Int) (Start_3 Int) (Start_9 Int) (Start_7 Int) (Start_12 Int) (StartBool_1 Bool) (Start_1 Int) (Start_10 Int) (Start_8 Int))
  ((Start Int (y 5 0 2 (- Start_1) (* Start Start) (div Start_2 Start_2) (ite StartBool Start_2 Start)))
   (StartBool Bool (false (< Start_7 Start) (<= Start Start_2) (= Start_7 Start_1) (> Start_10 Start)))
   (Start_13 Int (2 (* Start_9 Start_10) (mod Start_10 Start_11) (ite StartBool_1 Start_2 Start_6)))
   (Start_14 Int (5 2 3 4 (* Start_11 Start_10) (div Start_1 Start_14) (ite StartBool Start_4 Start_13)))
   (StartBool_2 Bool (false (not StartBool_1) (or StartBool_2 StartBool_1) (< Start_11 Start_4) (= Start_6 Start_12) (>= Start_2 Start)))
   (Start_11 Int (0 2 (div Start_8 Start_11) (ite StartBool_2 Start_4 Start_8)))
   (Start_2 Int (x 5 (* Start_1 Start_3) (mod Start Start_4)))
   (Start_4 Int (5 3 x 1 (- Start_3) (- Start_5 Start_5) (* Start_2 Start_3) (div Start_2 Start_3) (abs Start_2) (ite StartBool Start_5 Start_4)))
   (Start_6 Int (x (+ Start Start_3) (div Start Start_2) (mod Start_1 Start_6)))
   (Start_5 Int (3 (- Start) (+ Start Start_3) (* Start_4 Start_1) (mod Start_2 Start_4) (abs Start_5) (ite StartBool Start_4 Start_6)))
   (Start_3 Int (3 0 (- Start_2) (+ Start_5 Start_7) (* Start Start_4) (abs Start_3)))
   (Start_9 Int (0 y (- Start_8 Start_8) (+ Start_6 Start_6) (* Start_6 Start_1) (div Start_8 Start_3) (mod Start_7 Start_1) (ite StartBool Start_1 Start_8)))
   (Start_7 Int (1 (+ Start_5 Start_7) (* Start_5 Start_5) (div Start_6 Start_6)))
   (Start_12 Int (y (- Start_13) (* Start_14 Start_2) (mod Start_1 Start_4)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool) (<= Start_2 Start_6) (= Start_6 Start) (>= Start_11 Start_6)))
   (Start_1 Int (0 (div Start_6 Start_8) (ite StartBool Start_9 Start_6)))
   (Start_10 Int (y (- Start_6) (- Start_1 Start_7) (* Start_10 Start_1) (div Start_9 Start_4) (mod Start_8 Start_4) (ite StartBool_1 Start Start_3)))
   (Start_8 Int (y (div Start_7 Start_4) (mod Start_6 Start_1) (abs Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (+ x 1) 3)))

(check-synth)
