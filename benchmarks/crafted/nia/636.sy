(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_11 Int) (Start_10 Int) (StartBool_5 Bool) (StartBool_6 Bool) (Start_9 Int) (StartBool_1 Bool) (Start_5 Int) (Start_6 Int) (StartBool_3 Bool) (Start_2 Int) (StartBool_2 Bool) (Start_8 Int) (StartBool_4 Bool) (Start_12 Int) (Start_7 Int) (Start_1 Int) (Start_3 Int) (StartBool_7 Bool))
  ((Start Int (1 5 (- Start_1) (- Start Start_1) (div Start_2 Start_2) (abs Start)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_5 StartBool_6) (> Start_1 Start)))
   (Start_4 Int (1 3 (- Start Start_10) (* Start_8 Start) (mod Start_9 Start_3) (ite StartBool_6 Start_12 Start_1)))
   (Start_11 Int (5 (- Start_5) (- Start_9 Start_11) (+ Start_10 Start_12) (div Start_4 Start_12) (abs Start_10)))
   (Start_10 Int (3 (- Start_7 Start_1) (+ Start Start_4) (div Start_11 Start_6) (abs Start_8) (ite StartBool_4 Start_7 Start_3)))
   (StartBool_5 Bool (true (and StartBool_7 StartBool_6) (<= Start_10 Start_1) (= Start_2 Start_5) (>= Start_8 Start_7)))
   (StartBool_6 Bool (true (< Start_6 Start_7)))
   (Start_9 Int (0 5 (- Start_4 Start_1) (div Start Start_2) (mod Start_2 Start_6) (abs Start_4)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_3) (< Start_1 Start_2) (<= Start Start) (>= Start_1 Start)))
   (Start_5 Int (1 x 4 y (- Start_4) (- Start_2 Start_4) (* Start_1 Start) (div Start_2 Start_5) (ite StartBool_1 Start_1 Start_3)))
   (Start_6 Int (0 (- Start_6 Start_6) (+ Start_3 Start_4) (* Start_1 Start_4) (mod Start_1 Start_6) (abs Start) (ite StartBool_7 Start_1 Start)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_2) (or StartBool StartBool_3) (<= Start_3 Start)))
   (Start_2 Int (2 (- Start) (+ Start Start_1) (* Start_3 Start_2) (div Start_3 Start_4) (mod Start_2 Start_5) (abs Start_1) (ite StartBool Start_2 Start_5)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_3) (or StartBool_4 StartBool_4) (<= Start_2 Start_2) (= Start_4 Start) (> Start Start_4)))
   (Start_8 Int (x (- Start_5) (- Start_5 Start_7) (+ Start_5 Start_7) (* Start_9 Start_1) (abs Start_6) (ite StartBool_2 Start_7 Start_2)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool_5) (or StartBool_3 StartBool_3) (<= Start_6 Start_6) (= Start_5 Start_7)))
   (Start_12 Int (x (- Start_7) (div Start_3 Start_8) (ite StartBool_7 Start_8 Start_2)))
   (Start_7 Int (4 (- Start_4) (+ Start_7 Start_5) (mod Start_2 Start_7) (ite StartBool_6 Start_5 Start_7)))
   (Start_1 Int (1 y 3 (* Start_3 Start_6) (abs Start_10)))
   (Start_3 Int (2 0 (* Start_4 Start_2) (abs Start_3)))
   (StartBool_7 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_2) (or StartBool_7 StartBool) (< Start_4 Start_5) (<= Start_4 Start_6) (= Start_8 Start_7) (>= Start_5 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs (mod y y)))))

(check-synth)
