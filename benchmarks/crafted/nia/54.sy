(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_18 Int) (Start_17 Int) (Start_15 Int) (StartBool_6 Bool) (Start_20 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_14 Int) (Start_2 Int) (StartBool_3 Bool) (Start_16 Int) (Start_6 Int) (Start_3 Int) (Start_5 Int) (Start_8 Int) (Start_10 Int) (Start_13 Int) (Start_7 Int) (Start_1 Int) (StartBool_2 Bool) (Start_19 Int) (Start_4 Int) (Start_9 Int) (StartBool_1 Bool) (Start_11 Int))
  ((Start Int (2 (- Start_1 Start_1) (+ Start_2 Start_2) (div Start_1 Start_1) (mod Start_2 Start)))
   (StartBool Bool (false (and StartBool_3 StartBool_1) (or StartBool StartBool_3) (<= Start_18 Start_3) (= Start_15 Start_18) (> Start_3 Start_10)))
   (Start_12 Int (1 (- Start_12 Start_1) (+ Start_17 Start_8) (* Start_4 Start_3) (ite StartBool_5 Start_4 Start_1)))
   (Start_18 Int (5 x (div Start_2 Start_3) (mod Start_14 Start_1) (abs Start_18) (ite StartBool Start_14 Start_16)))
   (Start_17 Int (y (+ Start_18 Start_2) (div Start_2 Start_15)))
   (Start_15 Int (x (- Start_1) (+ Start_6 Start_13) (mod Start_6 Start_15) (ite StartBool_6 Start_13 Start_13)))
   (StartBool_6 Bool (false true (< Start_13 Start_7) (>= Start_11 Start_2) (> Start_5 Start_2)))
   (Start_20 Int (5 x (- Start_4) (* Start_2 Start_15) (div Start_9 Start) (mod Start_3 Start_10) (abs Start_10)))
   (StartBool_5 Bool (false (not StartBool_6) (< Start_10 Start_2) (<= Start_2 Start_8) (= Start_8 Start_8) (> Start_11 Start_6)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_5) (or StartBool_1 StartBool_1) (= Start_10 Start_11) (>= Start_13 Start_5)))
   (Start_14 Int (0 1 2 5 x (- Start_9) (+ Start Start_2) (* Start_15 Start_7) (abs Start_2) (ite StartBool_4 Start_1 Start_12)))
   (Start_2 Int (3 4 (+ Start_3 Start) (* Start_2 Start) (div Start_3 Start_1) (abs Start_1)))
   (StartBool_3 Bool (true false (< Start Start_7) (= Start_4 Start_11) (>= Start_4 Start_10)))
   (Start_16 Int (5 (- Start_3) (- Start_17 Start_11) (* Start_17 Start_7) (mod Start_16 Start_10) (ite StartBool_2 Start_2 Start_16)))
   (Start_6 Int (0 (- Start_2) (+ Start_6 Start_4) (* Start_1 Start_6) (mod Start_5 Start_1) (abs Start_6) (ite StartBool Start_5 Start_4)))
   (Start_3 Int (1 4 (- Start Start_4) (* Start_5 Start_6) (mod Start Start_3) (ite StartBool Start Start_3)))
   (Start_5 Int (x (- Start_3 Start_7) (+ Start_1 Start_7) (mod Start_3 Start) (ite StartBool Start_3 Start_8)))
   (Start_8 Int (5 (- Start_5 Start_2) (+ Start Start_1) (mod Start_4 Start_1) (abs Start_4)))
   (Start_10 Int (y 0 (- Start_1) (+ Start_7 Start_8) (div Start_11 Start_5)))
   (Start_13 Int (2 1 (- Start) (+ Start_14 Start_6) (* Start_4 Start_11) (abs Start_16) (ite StartBool_3 Start Start_14)))
   (Start_7 Int (3 5 (- Start_6) (- Start_8 Start_9) (+ Start_6 Start_2) (div Start Start) (mod Start_7 Start_8) (abs Start_10) (ite StartBool_1 Start_1 Start_7)))
   (Start_1 Int (3 (- Start_1 Start_11) (* Start_7 Start_10) (div Start_7 Start_19) (abs Start_3) (ite StartBool_2 Start_13 Start_2)))
   (StartBool_2 Bool (false true (or StartBool StartBool_3) (<= Start_11 Start_7) (= Start_6 Start) (>= Start_7 Start_4) (> Start_1 Start_8)))
   (Start_19 Int (5 (+ Start_17 Start_20) (abs Start_10)))
   (Start_4 Int (1 (- Start_1 Start_2) (mod Start_7 Start_18) (abs Start)))
   (Start_9 Int (3 (- Start_12) (- Start_9 Start_6) (+ Start Start_3) (* Start_6 Start_3) (mod Start_13 Start_14) (abs Start_6)))
   (StartBool_1 Bool (false (or StartBool_1 StartBool_2) (< Start_4 Start_9) (<= Start_1 Start_10) (= Start_6 Start_5) (>= Start_8 Start_2)))
   (Start_11 Int (y 2 5 (- Start_8) (+ Start_6 Start_9) (* Start Start_8) (ite StartBool Start_11 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- 4 y) 4)))

(check-synth)
