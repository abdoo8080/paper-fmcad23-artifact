(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_11 Int) (Start_3 Int) (Start_10 Int) (Start_7 Int) (StartBool_2 Bool) (Start_4 Int) (Start_6 Int) (Start_2 Int) (StartBool_1 Bool) (Start_1 Int) (Start_5 Int) (Start_9 Int) (Start_8 Int))
  ((Start Int (y 1 4 2 3 5 0 x (- Start_1 Start) (mod Start Start_1)))
   (StartBool Bool (true (and StartBool_2 StartBool_2) (< Start_2 Start_8) (<= Start_9 Start_7) (= Start_1 Start_8)))
   (Start_11 Int (0 (- Start_1) (mod Start_8 Start) (abs Start)))
   (Start_3 Int (y (- Start_1 Start_4) (* Start_2 Start_3) (mod Start Start_1) (abs Start)))
   (Start_10 Int (1 (- Start_1) (div Start_8 Start_6) (mod Start_6 Start_7) (abs Start_11) (ite StartBool_1 Start_7 Start_10)))
   (Start_7 Int (0 (- Start_4) (div Start_4 Start) (abs Start_1) (ite StartBool_1 Start_4 Start)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool) (< Start_5 Start_1) (<= Start_8 Start_5) (>= Start_2 Start_3) (> Start_7 Start_9)))
   (Start_4 Int (5 y x (- Start) (- Start_3 Start) (mod Start_5 Start_6) (abs Start_3) (ite StartBool_1 Start_7 Start_3)))
   (Start_6 Int (1 (- Start_3 Start_4) (* Start_5 Start_7) (div Start_11 Start_10) (mod Start_9 Start_7) (abs Start_9) (ite StartBool Start_11 Start_8)))
   (Start_2 Int (1 3 (- Start_9) (div Start_8 Start_3) (abs Start_1) (ite StartBool_2 Start_1 Start_3)))
   (StartBool_1 Bool (false true (not StartBool_2) (or StartBool StartBool_2) (<= Start_5 Start_5) (= Start Start_5) (>= Start_6 Start)))
   (Start_1 Int (1 (div Start_2 Start) (ite StartBool Start_3 Start_1)))
   (Start_5 Int (2 1 4 x (- Start_10) (- Start Start_2) (+ Start_4 Start_4) (abs Start_6) (ite StartBool_1 Start_9 Start_4)))
   (Start_9 Int (5 (- Start_10 Start_6) (+ Start_1 Start_4) (* Start_1 Start_1) (mod Start_5 Start_7) (ite StartBool_1 Start_4 Start_7)))
   (Start_8 Int (2 (- Start_4) (+ Start_5 Start_1) (* Start_6 Start_3) (div Start_9 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod 1 0) 4)))

(check-synth)
