(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_9 Int) (Start_8 Int) (Start_2 Int) (Start_7 Int) (Start_3 Int) (Start_4 Int) (StartBool_2 Bool) (Start_5 Int) (StartBool_1 Bool) (Start_6 Int))
  ((Start Int (4 (- Start_1) (+ Start_1 Start) (* Start_2 Start) (div Start Start_2) (ite StartBool_1 Start_2 Start_2)))
   (StartBool Bool (true (not StartBool_1) (<= Start_3 Start_6) (>= Start_9 Start_2)))
   (Start_1 Int (4 (* Start Start_2) (div Start_9 Start_2) (abs Start_5)))
   (Start_9 Int (y (- Start_5) (* Start_9 Start_8) (div Start Start_2) (abs Start_3) (ite StartBool_1 Start_9 Start_6)))
   (Start_8 Int (x (- Start_8) (* Start_2 Start_8)))
   (Start_2 Int (5 1 (- Start_3 Start) (+ Start_1 Start_3) (* Start_7 Start_4) (ite StartBool_2 Start_7 Start)))
   (Start_7 Int (4 5 (- Start_8) (- Start_8 Start_7)))
   (Start_3 Int (4 (+ Start_2 Start) (* Start_5 Start) (div Start_4 Start_3) (abs Start) (ite StartBool Start_5 Start)))
   (Start_4 Int (4 y 2 (- Start_1) (abs Start_6) (ite StartBool_1 Start_4 Start_5)))
   (StartBool_2 Bool (true false (or StartBool StartBool) (< Start_3 Start_4) (<= Start_4 Start_3) (= Start_1 Start) (>= Start_1 Start_5) (> Start_3 Start_3)))
   (Start_5 Int (x (+ Start_1 Start_4) (* Start_2 Start_1) (abs Start_1) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_1) (or StartBool_2 StartBool_2) (<= Start Start)))
   (Start_6 Int (x 2 4 (- Start) (- Start_6 Start_5) (ite StartBool_1 Start_4 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (+ 1 5) 0)))

(check-synth)
