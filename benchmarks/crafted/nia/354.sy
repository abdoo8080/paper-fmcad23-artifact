(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_8 Int) (Start_4 Int) (Start_5 Int) (Start_2 Int) (Start_7 Int) (Start_3 Int) (Start_1 Int) (StartBool_1 Bool) (Start_6 Int))
  ((Start Int (y x (- Start Start) (mod Start Start)))
   (StartBool Bool (false true (and StartBool_1 StartBool) (<= Start Start_1) (= Start Start) (>= Start Start_1) (> Start Start_1)))
   (StartBool_2 Bool (false true (and StartBool StartBool) (or StartBool_1 StartBool) (<= Start Start_1) (> Start_8 Start_8)))
   (Start_8 Int (2 3 4 (- Start_5 Start) (+ Start_3 Start_4) (* Start Start_8) (div Start_1 Start) (mod Start_6 Start_6) (abs Start_8) (ite StartBool_2 Start_2 Start_4)))
   (Start_4 Int (5 (- Start_2) (- Start_3 Start_7) (* Start Start_6) (mod Start_3 Start_1) (abs Start_6) (ite StartBool_1 Start_8 Start_8)))
   (Start_5 Int (4 (- Start_1) (- Start_4 Start) (+ Start_3 Start_3) (div Start_4 Start) (ite StartBool Start_6 Start)))
   (Start_2 Int (2 (- Start_1 Start_4) (* Start_3 Start_2) (mod Start_4 Start_5)))
   (Start_7 Int (1 3 (- Start_8 Start_4) (+ Start_1 Start_1) (div Start_4 Start_8) (ite StartBool Start_5 Start_1)))
   (Start_3 Int (5 (- Start_1) (+ Start_2 Start) (* Start_1 Start_1) (div Start_1 Start) (mod Start Start_1) (ite StartBool Start_1 Start_2)))
   (Start_1 Int (1 (- Start_2) (* Start_2 Start_1) (div Start_3 Start) (abs Start_1)))
   (StartBool_1 Bool (true false (not StartBool) (< Start_6 Start_1) (= Start_8 Start_6) (>= Start_7 Start_7)))
   (Start_6 Int (5 (- Start_5) (+ Start_2 Start_2) (* Start_2 Start) (abs Start_6) (ite StartBool_1 Start_7 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod x 0)))

(check-synth)
