(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_13 Int) (StartBool_6 Bool) (Start_16 Int) (Start_18 Int) (Start_14 Int) (Start_17 Int) (Start_12 Int) (StartBool_4 Bool) (Start_1 Int) (Start_2 Int) (Start_15 Int) (Start_4 Int) (StartBool_5 Bool) (StartBool_3 Bool) (Start_6 Int) (Start_10 Int) (Start_5 Int) (Start_8 Int) (StartBool_1 Bool) (Start_11 Int) (Start_7 Int) (Start_3 Int) (Start_9 Int))
  ((Start Int (3 y 4 5 (- Start) (+ Start Start_1) (* Start Start_1) (div Start Start_1) (mod Start Start)))
   (StartBool Bool (true false (or StartBool_2 StartBool_3) (< Start_5 Start_10) (<= Start_7 Start_9) (= Start Start_10) (> Start_4 Start_1)))
   (StartBool_2 Bool (true (and StartBool_5 StartBool_4)))
   (Start_13 Int (3 0 (- Start_10) (- Start_17 Start_15) (mod Start_8 Start_11) (abs Start)))
   (StartBool_6 Bool (false true (not StartBool_4) (or StartBool_6 StartBool_4) (< Start_1 Start_12) (= Start Start_8) (> Start_2 Start_16)))
   (Start_16 Int (2 (- Start_10) (+ Start_4 Start_2) (abs Start_18)))
   (Start_18 Int (3 1 (- Start_14) (- Start_12 Start_3) (ite StartBool_3 Start_10 Start_3)))
   (Start_14 Int (1 2 3 x (- Start_2) (+ Start_5 Start_9) (div Start_7 Start_12) (abs Start_16)))
   (Start_17 Int (y 1 x 0 3 (- Start_7) (- Start_11 Start_12) (* Start_2 Start_14) (abs Start_15) (ite StartBool Start_5 Start_18)))
   (Start_12 Int (2 (- Start_6) (- Start Start_3) (+ Start_4 Start_7) (* Start_7 Start) (div Start_6 Start_12) (mod Start_2 Start_12) (abs Start_1)))
   (StartBool_4 Bool (false (and StartBool StartBool_5) (< Start_2 Start_6) (<= Start_17 Start_2) (= Start_13 Start_16) (> Start_4 Start_9)))
   (Start_1 Int (y 2 (- Start_1) (- Start_1 Start_1) (+ Start_1 Start_2) (div Start Start_2) (ite StartBool Start_2 Start_1)))
   (Start_2 Int (0 (- Start_3) (abs Start_2) (ite StartBool Start Start_1)))
   (Start_15 Int (5 (* Start Start_9) (div Start_8 Start_3) (ite StartBool_5 Start_10 Start_7)))
   (Start_4 Int (0 5 (- Start_3 Start_5) (div Start_2 Start_2) (abs Start_2)))
   (StartBool_5 Bool (false true (not StartBool_3) (and StartBool_6 StartBool) (< Start_14 Start_16) (= Start_4 Start_17)))
   (StartBool_3 Bool (false (not StartBool_3) (and StartBool_4 StartBool) (< Start_13 Start_3) (<= Start_7 Start_12) (= Start_9 Start_14) (>= Start_4 Start_15) (> Start_10 Start_5)))
   (Start_6 Int (5 3 0 y 2 4 (- Start_4) (div Start_8 Start_9) (mod Start_4 Start_5) (abs Start_8)))
   (Start_10 Int (x (- Start_11 Start_7) (mod Start_6 Start_8) (ite StartBool Start_1 Start_7)))
   (Start_5 Int (1 (- Start_6) (* Start_6 Start_7) (mod Start_6 Start_6) (ite StartBool_1 Start_8 Start_5)))
   (Start_8 Int (4 (- Start_1) (div Start_3 Start) (mod Start_1 Start) (abs Start_1) (ite StartBool Start Start_1)))
   (StartBool_1 Bool (false (= Start_5 Start_5)))
   (Start_11 Int (5 (mod Start_12 Start_5)))
   (Start_7 Int (3 1 (- Start_5) (+ Start_4 Start_3) (* Start_6 Start_8) (ite StartBool_1 Start_7 Start_3)))
   (Start_3 Int (2 x 5 3 y (+ Start_3 Start) (* Start_3 Start_3) (div Start_4 Start) (mod Start Start_4)))
   (Start_9 Int (y x 1 (+ Start_10 Start_10) (* Start_4 Start_1) (div Start_10 Start) (mod Start_6 Start_10) (ite StartBool_1 Start_3 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (mod x 2) y)))

(check-synth)
