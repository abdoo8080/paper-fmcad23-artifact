(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_14 Int) (StartBool_6 Bool) (Start_2 Int) (StartBool_1 Bool) (Start_4 Int) (Start_13 Int) (Start_3 Int) (Start_5 Int) (StartBool_2 Bool) (Start_15 Int) (Start_6 Int) (Start_8 Int) (StartBool_3 Bool) (Start_7 Int) (Start_12 Int) (Start_9 Int) (Start_16 Int) (Start_10 Int) (StartBool_4 Bool) (StartBool_7 Bool) (Start_11 Int) (StartBool_5 Bool))
  ((Start Int (5 (- Start Start_1) (+ Start_1 Start_1) (* Start_1 Start) (div Start Start_1) (mod Start Start_2) (abs Start) (ite StartBool_1 Start_3 Start_1)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool StartBool_1) (or StartBool_2 StartBool_7) (= Start_14 Start_16) (>= Start_14 Start_13) (> Start_12 Start_4)))
   (Start_1 Int (4 (- Start_14) (* Start Start_15) (mod Start_2 Start_6)))
   (Start_14 Int (x (- Start_5) (- Start_4 Start_11) (+ Start_14 Start_14) (mod Start_6 Start_9) (abs Start_1) (ite StartBool_4 Start_4 Start_7)))
   (StartBool_6 Bool (true (and StartBool_1 StartBool_3) (<= Start_1 Start_9) (> Start_4 Start_8)))
   (Start_2 Int (x 4 (- Start_10 Start_11) (+ Start_14 Start_13) (abs Start_1)))
   (StartBool_1 Bool (false (< Start_12 Start_6) (<= Start_4 Start_6)))
   (Start_4 Int (5 (- Start_4) (- Start_5 Start_1) (mod Start_11 Start_6) (abs Start_1)))
   (Start_13 Int (2 (- Start_13) (- Start Start) (+ Start_2 Start_12) (* Start_12 Start) (div Start_6 Start_8) (mod Start Start_9)))
   (Start_3 Int (4 (- Start_2) (- Start Start_1) (* Start_4 Start_4) (mod Start_5 Start_4) (ite StartBool Start_3 Start_5)))
   (Start_5 Int (0 (- Start_1) (* Start_4 Start_4) (mod Start_3 Start) (ite StartBool_2 Start_5 Start_2)))
   (StartBool_2 Bool (true false (or StartBool_3 StartBool_1) (< Start_6 Start_2)))
   (Start_15 Int (5 (- Start_3) (- Start_8 Start_5) (+ Start_5 Start_14) (mod Start_10 Start_14) (ite StartBool_6 Start_7 Start_7)))
   (Start_6 Int (5 (+ Start_4 Start_5) (* Start Start_2) (ite StartBool_3 Start_7 Start_4)))
   (Start_8 Int (x 1 2 (- Start_7) (- Start_9 Start_3) (* Start_6 Start_4) (mod Start_4 Start_8) (ite StartBool Start_7 Start_6)))
   (StartBool_3 Bool (false true (< Start_6 Start_10) (<= Start Start_11) (>= Start Start_2)))
   (Start_7 Int (x 1 (- Start_8) (+ Start_4 Start_8) (div Start_3 Start_3) (abs Start_4)))
   (Start_12 Int (x (+ Start_7 Start_6) (abs Start_9)))
   (Start_9 Int (4 3 0 (- Start_10) (+ Start_6 Start_7) (* Start_1 Start_4) (mod Start_4 Start_1) (abs Start_11) (ite StartBool_4 Start_12 Start_7)))
   (Start_16 Int (2 (- Start_15 Start_11) (* Start_14 Start_5) (mod Start_2 Start_7) (abs Start_3) (ite StartBool_2 Start_1 Start_3)))
   (Start_10 Int (y 3 (- Start_11) (+ Start_10 Start_9) (* Start_10 Start_5) (mod Start_2 Start_11) (abs Start_13) (ite StartBool_5 Start_7 Start_7)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_3) (< Start_5 Start_9) (<= Start_6 Start_7) (= Start_6 Start_4) (>= Start_3 Start_2)))
   (StartBool_7 Bool (true false (not StartBool_4) (<= Start_2 Start_8) (= Start_14 Start_1) (>= Start_11 Start_1) (> Start_7 Start_2)))
   (Start_11 Int (1 (div Start_3 Start_6) (mod Start_6 Start_8) (abs Start_5)))
   (StartBool_5 Bool (true (and StartBool StartBool_1) (>= Start_3 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 (+ y 4))))

(check-synth)
