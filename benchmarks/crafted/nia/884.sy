(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (StartBool_2 Bool) (Start_15 Int) (Start_2 Int) (Start_5 Int) (Start_6 Int) (StartBool_5 Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_13 Int) (Start_14 Int) (StartBool_1 Bool) (Start_11 Int) (Start_1 Int) (Start_3 Int) (Start_4 Int) (Start_17 Int) (Start_7 Int) (Start_9 Int) (Start_10 Int) (Start_16 Int) (Start_8 Int) (StartBool_6 Bool) (Start_12 Int))
  ((Start Int (0 (- Start_1 Start_2) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (false true (not StartBool) (and StartBool_4 StartBool_1) (<= Start Start_15) (>= Start_6 Start_4)))
   (StartBool_7 Bool (false true (and StartBool_7 StartBool_6) (<= Start_9 Start_15) (> Start_8 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_7) (or StartBool_7 StartBool) (>= Start_14 Start_12) (> Start_4 Start_4)))
   (Start_15 Int (2 (- Start_8) (* Start_4 Start_16) (mod Start_3 Start_3) (ite StartBool_5 Start_6 Start_5)))
   (Start_2 Int (1 (+ Start_16 Start_14) (* Start_7 Start_1) (div Start_11 Start_16)))
   (Start_5 Int (1 (+ Start_7 Start_5) (* Start_13 Start_9) (abs Start_15) (ite StartBool_2 Start Start_14)))
   (Start_6 Int (0 (* Start_4 Start_1) (div Start_4 Start_10) (mod Start_13 Start_10) (ite StartBool_6 Start_3 Start_8)))
   (StartBool_5 Bool (true (>= Start_14 Start_14) (> Start Start_3)))
   (StartBool_4 Bool (true false (not StartBool_5) (and StartBool_3 StartBool) (<= Start_2 Start_12) (>= Start_12 Start_6)))
   (StartBool_3 Bool (false true (<= Start_2 Start_5) (= Start_6 Start) (>= Start_7 Start_7) (> Start_4 Start_7)))
   (Start_13 Int (y 1 (+ Start_7 Start_5) (div Start_8 Start_8) (mod Start_8 Start_6) (abs Start_11) (ite StartBool_3 Start_13 Start_8)))
   (Start_14 Int (3 (- Start_8) (+ Start_6 Start_10) (div Start_3 Start_13) (ite StartBool Start Start_9)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_3) (<= Start_3 Start) (> Start_3 Start_2)))
   (Start_11 Int (3 y (- Start_14) (* Start_7 Start_7) (div Start_1 Start_5)))
   (Start_1 Int (3 5 (- Start_8 Start_7) (+ Start_17 Start_13) (* Start_17 Start_2) (div Start_4 Start_14) (abs Start_4) (ite StartBool_5 Start_16 Start_14)))
   (Start_3 Int (4 1 3 (- Start_3 Start_2) (* Start_3 Start_3) (div Start_3 Start_3) (ite StartBool_3 Start_4 Start_2)))
   (Start_4 Int (0 (+ Start_2 Start_1) (* Start_3 Start_1) (div Start Start_2)))
   (Start_17 Int (4 (+ Start_12 Start_4) (* Start_15 Start_1) (div Start_14 Start_15)))
   (Start_7 Int (y 5 (- Start Start_1) (+ Start_7 Start_8) (* Start_9 Start_2) (mod Start_5 Start_9) (abs Start_6) (ite StartBool_2 Start_4 Start_10)))
   (Start_9 Int (4 0 5 3 (- Start_8) (+ Start_4 Start_7) (* Start_10 Start_12) (mod Start_1 Start_9)))
   (Start_10 Int (y 4 3 (- Start Start_2) (+ Start_2 Start_6) (div Start_11 Start_1) (mod Start_12 Start_12) (abs Start_13)))
   (Start_16 Int (0 (- Start) (mod Start_2 Start_14) (abs Start_14)))
   (Start_8 Int (4 x (- Start_6) (- Start Start_13) (+ Start_1 Start_14) (* Start_11 Start_2) (ite StartBool_4 Start_6 Start_8)))
   (StartBool_6 Bool (true false (and StartBool_6 StartBool_1) (or StartBool_3 StartBool) (< Start_13 Start_9) (<= Start_13 Start_9) (>= Start_2 Start_4)))
   (Start_12 Int (3 5 (- Start_6) (* Start_2 Start_8) (ite StartBool_1 Start_12 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod x 4) y)))

(check-synth)
