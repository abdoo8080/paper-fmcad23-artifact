(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (StartBool_1 Bool) (Start_4 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_2 Int) (Start_7 Int) (Start_8 Int) (Start_3 Int) (Start_9 Int) (Start_5 Int) (Start_11 Int) (Start_1 Int) (Start_6 Int))
  ((Start Int (x (- Start) (+ Start_1 Start) (* Start_2 Start_1) (div Start_1 Start_2) (mod Start Start_3) (abs Start_3) (ite StartBool Start_2 Start_2)))
   (StartBool Bool (true (not StartBool_2) (> Start Start_1)))
   (Start_10 Int (5 (- Start_10) (- Start_6 Start_8) (+ Start_6 Start_2) (* Start_9 Start_3) (div Start_11 Start_8) (mod Start_8 Start_9) (ite StartBool_2 Start_7 Start_2)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_2) (or StartBool_1 StartBool)))
   (Start_4 Int (5 4 y x (- Start_7) (- Start_11 Start_9) (ite StartBool_1 Start_11 Start_1)))
   (StartBool_2 Bool (true false (or StartBool_1 StartBool_2) (< Start_3 Start_1)))
   (StartBool_3 Bool (true false (and StartBool_1 StartBool_1) (or StartBool StartBool) (<= Start_6 Start_6) (= Start_7 Start_2) (>= Start_5 Start_7)))
   (Start_2 Int (1 5 (- Start_3 Start_3) (+ Start_2 Start_4) (div Start_3 Start_1) (mod Start Start_5) (ite StartBool_1 Start Start_4)))
   (Start_7 Int (x y (+ Start_6 Start_5) (div Start_3 Start) (mod Start_3 Start_4) (abs Start_3) (ite StartBool Start_8 Start_5)))
   (Start_8 Int (3 2 (+ Start_9 Start) (* Start_8 Start_5)))
   (Start_3 Int (2 (- Start_1) (- Start_3 Start) (* Start_1 Start)))
   (Start_9 Int (5 (+ Start_4 Start) (* Start_2 Start_10) (div Start_4 Start_2)))
   (Start_5 Int (y 2 x (- Start_4 Start_1) (abs Start_1) (ite StartBool_3 Start_2 Start_2)))
   (Start_11 Int (0 3 y (ite StartBool_1 Start Start)))
   (Start_1 Int (0 2 (- Start_7 Start_6) (mod Start_9 Start_6)))
   (Start_6 Int (0 1 (- Start_1) (mod Start_8 Start_7) (abs Start_7) (ite StartBool_2 Start_1 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod 5 y) (- 5 x))))

(check-synth)
