(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (StartBool_5 Bool) (Start_13 Int) (Start_2 Int) (Start_11 Int) (StartBool_1 Bool) (Start_6 Int) (Start_5 Int) (Start_12 Int) (Start_15 Int) (Start_1 Int) (Start_7 Int) (StartBool_2 Bool) (Start_17 Int) (Start_8 Int) (Start_16 Int) (Start_4 Int) (StartBool_3 Bool) (StartBool_4 Bool) (StartBool_6 Bool) (Start_3 Int) (Start_10 Int) (Start_9 Int))
  ((Start Int (3 4 x (+ Start_1 Start) (* Start_2 Start_1) (abs Start_3) (ite StartBool_1 Start_2 Start_2)))
   (StartBool Bool (false (or StartBool_5 StartBool_5)))
   (Start_14 Int (3 x (- Start_15) (- Start_9 Start_6) (div Start_8 Start_4) (mod Start_11 Start_6)))
   (StartBool_5 Bool (false (and StartBool_1 StartBool_3) (> Start_1 Start_15)))
   (Start_13 Int (3 (- Start_14 Start_5) (+ Start_9 Start_7) (* Start_9 Start_1) (div Start_5 Start_11) (ite StartBool_5 Start_1 Start_3)))
   (Start_2 Int (5 (- Start_7 Start_11)))
   (Start_11 Int (y 3 5 x 1 (- Start_2 Start_11) (* Start_10 Start_9) (div Start Start_1) (mod Start Start_4)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (or StartBool_1 StartBool_1) (< Start_3 Start_4) (<= Start_2 Start_3) (= Start_1 Start_5) (> Start Start_3)))
   (Start_6 Int (0 2 (- Start_6 Start_8) (div Start_5 Start_2) (mod Start_2 Start_1) (abs Start_1) (ite StartBool_2 Start_3 Start_5)))
   (Start_5 Int (x 3 (+ Start Start_3) (div Start_4 Start_5) (abs Start_2) (ite StartBool_1 Start_6 Start_7)))
   (Start_12 Int (x (- Start_13) (- Start_16 Start_17) (div Start_4 Start)))
   (Start_15 Int (1 5 y (+ Start_14 Start_2) (mod Start_2 Start_2)))
   (Start_1 Int (1 y (- Start_11) (- Start Start_9) (* Start Start_12) (div Start_13 Start_12) (abs Start_12)))
   (Start_7 Int (1 4 x 3 y (- Start_5) (div Start_6 Start_4) (mod Start_8 Start_1)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_2) (or StartBool StartBool_1) (<= Start_3 Start) (= Start_1 Start_4) (>= Start_6 Start_8) (> Start_6 Start_1)))
   (Start_17 Int (4 x (- Start_13 Start_8) (mod Start_12 Start_9) (ite StartBool_6 Start_10 Start_7)))
   (Start_8 Int (5 2 (- Start_8) (- Start_2 Start_3) (+ Start_7 Start_1) (* Start_6 Start_4) (div Start_1 Start_1)))
   (Start_16 Int (2 (- Start_13 Start_9) (+ Start_17 Start_12) (* Start_7 Start_5) (ite StartBool_3 Start_6 Start_2)))
   (Start_4 Int (4 (- Start_3 Start_4) (div Start_1 Start) (ite StartBool_2 Start_4 Start_7)))
   (StartBool_3 Bool (true (and StartBool_2 StartBool) (or StartBool_2 StartBool_2) (< Start_6 Start_9) (>= Start_8 Start_2) (> Start_3 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_4) (<= Start_3 Start_6) (= Start_1 Start_1) (> Start_11 Start_8)))
   (StartBool_6 Bool (true))
   (Start_3 Int (x 1 5 (* Start_4 Start_3) (div Start_1 Start_8) (mod Start Start_9) (abs Start_2) (ite StartBool_3 Start_2 Start_9)))
   (Start_10 Int (y (- Start_5) (- Start_3 Start_2) (+ Start_4 Start_8) (* Start_4 Start_6) (div Start_5 Start_3) (abs Start_10) (ite StartBool_4 Start_2 Start_6)))
   (Start_9 Int (3 1 (- Start_1) (+ Start_5 Start) (* Start_6 Start_7) (div Start_10 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 2 (mod 1 0))))

(check-synth)
