(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (StartBool_4 Bool) (Start_1 Int) (Start_2 Int) (Start_4 Int) (Start_14 Int) (Start_12 Int) (Start_3 Int) (Start_13 Int) (Start_16 Int) (Start_5 Int) (Start_10 Int) (Start_6 Int) (Start_7 Int) (StartBool_1 Bool) (Start_9 Int) (Start_8 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_17 Int) (Start_11 Int) (Start_15 Int))
  ((Start Int (0 (- Start_1) (div Start_2 Start_2) (mod Start_3 Start_4) (ite StartBool_1 Start_5 Start_1)))
   (StartBool Bool (false true (and StartBool_4 StartBool_4) (< Start_5 Start_16)))
   (Start_18 Int (0 (+ Start_3 Start) (div Start_10 Start_16) (mod Start_5 Start_18) (abs Start_10) (ite StartBool_4 Start_17 Start_4)))
   (StartBool_4 Bool (false true (not StartBool_3) (and StartBool_4 StartBool) (< Start_18 Start_13) (= Start_15 Start_10) (> Start_14 Start_5)))
   (Start_1 Int (y (+ Start_9 Start_12) (* Start_2 Start) (div Start_16 Start_12) (mod Start_1 Start_8) (abs Start_14) (ite StartBool Start_5 Start_11)))
   (Start_2 Int (3 (- Start_7 Start_4) (+ Start_1 Start_14) (* Start_5 Start_12) (div Start_13 Start_13)))
   (Start_4 Int (2 5 (- Start_7) (- Start_7 Start) (+ Start_4 Start_1) (mod Start_14 Start_8) (ite StartBool Start_13 Start_8)))
   (Start_14 Int (y x (- Start_11) (div Start_17 Start_17) (mod Start Start_17) (abs Start_14) (ite StartBool Start_10 Start_9)))
   (Start_12 Int (3 (- Start_10) (+ Start_8 Start_9) (div Start_11 Start_4) (mod Start_10 Start_10) (abs Start_10) (ite StartBool_1 Start_10 Start_4)))
   (Start_3 Int (4 (- Start_10) (- Start_11 Start_4) (+ Start_14 Start_4) (div Start Start_3)))
   (Start_13 Int (2 (+ Start_8 Start_11) (div Start_9 Start_1) (abs Start_7)))
   (Start_16 Int (2 x (- Start_1) (* Start_8 Start_2) (mod Start_14 Start_1) (ite StartBool_1 Start_2 Start_17)))
   (Start_5 Int (5 4 (- Start_1 Start_2) (mod Start_6 Start_3) (ite StartBool_1 Start_5 Start_7)))
   (Start_10 Int (5 y 3 (- Start_6) (- Start_7 Start_11) (* Start_12 Start_9) (div Start_5 Start_4) (ite StartBool_2 Start_2 Start_4)))
   (Start_6 Int (2 (- Start_5) (- Start_8 Start_3) (* Start_10 Start_3) (mod Start_8 Start_9) (ite StartBool_3 Start_13 Start_4)))
   (Start_7 Int (4 (- Start_8 Start_7) (+ Start_2 Start_7) (* Start Start_6) (abs Start_4) (ite StartBool Start_1 Start_9)))
   (StartBool_1 Bool (true false (not StartBool) (or StartBool_1 StartBool_3) (= Start_3 Start_5) (> Start_4 Start_16)))
   (Start_9 Int (x (- Start_2) (* Start_10 Start_11) (div Start_6 Start_6) (mod Start_11 Start_4)))
   (Start_8 Int (1 4 (* Start_12 Start_6) (mod Start_6 Start_11)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_1 StartBool_2)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool StartBool_1) (< Start_4 Start_14) (<= Start_13 Start_10) (= Start_4 Start_2) (>= Start_15 Start_5) (> Start_11 Start_12)))
   (Start_17 Int (5 x 1 (- Start_3) (- Start_17 Start_16)))
   (Start_11 Int (2 y 4 x (- Start_2 Start_10) (mod Start Start_11) (abs Start_6) (ite StartBool Start_12 Start_8)))
   (Start_15 Int (0 (- Start_3 Start_2) (* Start_15 Start_16) (div Start_13 Start_7) (mod Start_1 Start_12) (abs Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod 0 0) y)))

(check-synth)
