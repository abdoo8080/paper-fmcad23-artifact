(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_5 Int) (Start_7 Int) (Start_6 Int) (Start_4 Int) (Start_1 Int) (Start_3 Int) (Start_2 Int))
  ((Start Int (0 y (- Start) (- Start Start_1) (+ Start_2 Start) (div Start_3 Start_3) (abs Start_2) (ite StartBool Start Start_3)))
   (StartBool Bool (false true (< Start_5 Start) (= Start_1 Start_6) (>= Start_6 Start_7) (> Start_5 Start_3)))
   (Start_5 Int (3 x 1 (- Start_7 Start_5) (+ Start_4 Start_6) (* Start_1 Start_5) (div Start Start_1)))
   (Start_7 Int (5 (- Start_1) (div Start_4 Start) (mod Start_5 Start_5) (abs Start_3)))
   (Start_6 Int (1 0 2 x (- Start_4) (+ Start_1 Start) (abs Start_7)))
   (Start_4 Int (4 1 3 x 5 (* Start_2 Start_3) (mod Start_2 Start_1) (abs Start) (ite StartBool Start_2 Start_4)))
   (Start_1 Int (5 1 (* Start_1 Start_2) (mod Start_3 Start_3) (ite StartBool Start Start_3)))
   (Start_3 Int (y (- Start) (- Start_2 Start_2) (div Start_3 Start_3) (abs Start_4)))
   (Start_2 Int (2 4 (div Start Start_3) (mod Start_3 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (mod (+ y x) 2) 5)))

(check-synth)
