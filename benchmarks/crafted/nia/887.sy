(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_1 Int) (Start_14 Int) (StartBool_1 Bool) (Start_3 Int) (Start_2 Int) (Start_7 Int) (Start_11 Int) (Start_5 Int) (Start_8 Int) (Start_10 Int) (Start_9 Int) (StartBool_2 Bool) (Start_12 Int) (Start_6 Int) (Start_4 Int) (Start_13 Int))
  ((Start Int (2 (- Start) (+ Start_1 Start_2) (* Start_2 Start) (div Start_1 Start_3) (abs Start_2)))
   (StartBool Bool (false (not StartBool_1) (< Start_8 Start_4) (<= Start_11 Start_4) (= Start_2 Start_11) (>= Start Start_13) (> Start_6 Start_6)))
   (Start_15 Int (x 1 5 (- Start_13 Start_6) (div Start Start_14) (mod Start_12 Start_3) (abs Start_5) (ite StartBool_2 Start_12 Start_15)))
   (Start_1 Int (1 (- Start_15) (- Start_1 Start_9) (+ Start_1 Start_5) (* Start_15 Start_2) (ite StartBool Start_9 Start_15)))
   (Start_14 Int (0 (- Start) (- Start_10 Start_1) (div Start_12 Start_14) (mod Start_14 Start_8) (ite StartBool_2 Start_12 Start_12)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (< Start_7 Start_11) (<= Start_9 Start_6) (= Start_11 Start_6) (>= Start_11 Start_1)))
   (Start_3 Int (2 (- Start_1) (abs Start_4) (ite StartBool_1 Start Start_5)))
   (Start_2 Int (0 2 5 (- Start_2) (- Start_8 Start) (+ Start_4 Start_4) (div Start_12 Start_1) (mod Start_4 Start_4) (ite StartBool_1 Start_1 Start_13)))
   (Start_7 Int (0 y 1 x (- Start_4 Start_3) (ite StartBool_1 Start_8 Start_3)))
   (Start_11 Int (2 (div Start_11 Start_9) (abs Start_3) (ite StartBool Start_1 Start_7)))
   (Start_5 Int (y (+ Start_2 Start_3) (* Start_3 Start_2) (mod Start_6 Start_2) (abs Start_4)))
   (Start_8 Int (3 (- Start_9) (+ Start_2 Start_4) (mod Start_8 Start_5) (abs Start) (ite StartBool Start_7 Start_10)))
   (Start_10 Int (5 (- Start_6) (- Start_9 Start_6) (* Start_1 Start_8) (div Start_8 Start) (mod Start_2 Start_5)))
   (Start_9 Int (2 (- Start_8) (* Start_11 Start_6) (abs Start_9)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool StartBool_1) (<= Start_1 Start_13) (> Start Start_5)))
   (Start_12 Int (x (- Start) (- Start_10 Start_13) (+ Start_7 Start_11) (* Start_14 Start_9) (ite StartBool Start_3 Start_5)))
   (Start_6 Int (0 (- Start_2) (- Start_1 Start_2) (abs Start_6) (ite StartBool Start_7 Start_4)))
   (Start_4 Int (4 y x 5 1 (- Start_4 Start_8) (+ Start Start_7) (* Start_5 Start_6) (div Start_11 Start_11) (abs Start_2)))
   (Start_13 Int (x (- Start_2 Start) (* Start_13 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div y 2) 3)))

(check-synth)
