(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_13 Int) (Start_11 Int) (StartBool_11 Bool) (Start_18 Int) (StartBool_2 Bool) (Start_12 Int) (Start_8 Int) (StartBool_1 Bool) (Start_4 Int) (Start_14 Int) (StartBool_4 Bool) (Start_17 Int) (Start_9 Int) (Start_15 Int) (StartBool_7 Bool) (Start_2 Int) (StartBool_8 Bool) (StartBool_6 Bool) (Start_16 Int) (StartBool_5 Bool) (StartBool_3 Bool) (Start_10 Int) (StartBool_9 Bool) (Start_6 Int) (StartBool_10 Bool) (Start_5 Int) (Start_7 Int) (Start_3 Int))
  ((Start Int (4 y (- Start Start) (+ Start Start_1) (mod Start_2 Start_3) (abs Start_3) (ite StartBool Start_4 Start)))
   (StartBool Bool (false (not StartBool_9) (and StartBool_11 StartBool_7) (= Start_17 Start_7) (>= Start_5 Start_13)))
   (Start_1 Int (x (- Start_14) (- Start_8 Start_15) (* Start_5 Start_14) (div Start_18 Start_16) (mod Start_4 Start_6)))
   (Start_13 Int (1 (- Start_10) (+ Start_4 Start_12) (mod Start_9 Start_2) (abs Start_8) (ite StartBool_5 Start_2 Start_2)))
   (Start_11 Int (0 (- Start_6 Start_6) (div Start_5 Start_10) (mod Start_5 Start_1) (abs Start_4) (ite StartBool_4 Start_3 Start_10)))
   (StartBool_11 Bool (false true (<= Start_17 Start_15) (= Start_12 Start_6) (>= Start_8 Start_17) (> Start_15 Start_12)))
   (Start_18 Int (1 (* Start_17 Start_16) (ite StartBool_1 Start_15 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_2) (or StartBool_3 StartBool_3) (= Start_1 Start_10) (>= Start_11 Start_8)))
   (Start_12 Int (5 (- Start_5) (- Start_12 Start_13)))
   (Start_8 Int (x (- Start_4 Start) (+ Start_4 Start_6) (* Start_9 Start_3) (div Start_4 Start_2) (mod Start_2 Start) (abs Start_8) (ite StartBool Start_9 Start_2)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_2 StartBool) (>= Start_7 Start_2)))
   (Start_4 Int (4 1 5 (* Start_5 Start_5) (div Start_6 Start_1) (mod Start_3 Start_3) (ite StartBool_1 Start_5 Start_3)))
   (Start_14 Int (0 (- Start_15) (- Start_12 Start_12) (+ Start_3 Start_3) (* Start_12 Start_4) (div Start_12 Start_12) (abs Start_14)))
   (StartBool_4 Bool (false (not StartBool_5) (and StartBool_5 StartBool_5) (or StartBool_6 StartBool) (< Start_11 Start_1) (>= Start_6 Start_12)))
   (Start_17 Int (0 (- Start_17) (- Start_10 Start_10) (+ Start_6 Start_4) (mod Start_14 Start_2) (abs Start_6) (ite StartBool_6 Start_9 Start_18)))
   (Start_9 Int (x 2 5 4 3 y 0 (- Start_6) (div Start_10 Start_3) (ite StartBool Start_1 Start_5)))
   (Start_15 Int (y (* Start_16 Start_13) (mod Start_2 Start_4) (abs Start_9) (ite StartBool_7 Start_6 Start_13)))
   (StartBool_7 Bool (true false (not StartBool_4) (and StartBool_8 StartBool_4) (< Start_15 Start) (= Start_7 Start_3) (> Start_4 Start_12)))
   (Start_2 Int (5 (* Start_15 Start_3) (div Start_15 Start_13) (ite StartBool_10 Start_5 Start_16)))
   (StartBool_8 Bool (true false (not StartBool_5) (and StartBool_7 StartBool_2) (or StartBool_7 StartBool_4) (< Start_2 Start_14) (<= Start_9 Start_16) (>= Start_11 Start_13) (> Start_9 Start_12)))
   (StartBool_6 Bool (false (or StartBool_1 StartBool_4) (< Start_5 Start_14) (<= Start_4 Start) (= Start_10 Start_1) (>= Start Start_1)))
   (Start_16 Int (0 2 (- Start_12 Start_14) (* Start_11 Start_5) (div Start_6 Start_1) (abs Start_2)))
   (StartBool_5 Bool (true false (<= Start_14 Start_8) (= Start_6 Start_9)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_3 StartBool) (or StartBool_2 StartBool_9) (<= Start_2 Start_3) (> Start_4 Start_2)))
   (Start_10 Int (2 (+ Start_3 Start_1) (mod Start_2 Start_1) (abs Start_8) (ite StartBool_1 Start_1 Start_7)))
   (StartBool_9 Bool (true false (or StartBool_10 StartBool_11)))
   (Start_6 Int (1 4 (- Start_3) (+ Start Start_13) (* Start_12 Start_3) (div Start_15 Start_11) (abs Start_7)))
   (StartBool_10 Bool (false true (or StartBool StartBool) (> Start_4 Start_3)))
   (Start_5 Int (4 (- Start_7 Start_10) (+ Start_18 Start_10) (* Start_18 Start_8) (div Start_2 Start) (abs Start_17)))
   (Start_7 Int (y (- Start_6) (- Start_6 Start_8) (+ Start_1 Start_4) (mod Start_3 Start_5) (abs Start_1)))
   (Start_3 Int (1 5 (+ Start_15 Start_8) (mod Start_16 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ y (* x 2))))

(check-synth)
