(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_12 Int) (StartBool_1 Bool) (StartBool_10 Bool) (StartBool_9 Bool) (StartBool_7 Bool) (Start_3 Int) (StartBool_2 Bool) (StartBool_8 Bool) (Start_10 Int) (StartBool_5 Bool) (Start_2 Int) (StartBool_4 Bool) (Start_4 Int) (StartBool_3 Bool) (Start_11 Int) (Start_5 Int) (Start_6 Int) (Start_8 Int) (Start_7 Int) (StartBool_6 Bool) (Start_9 Int))
  ((Start Int (5 (+ Start_1 Start_1) (mod Start_1 Start_1) (abs Start_2) (ite StartBool_1 Start_3 Start)))
   (StartBool Bool (false (and StartBool_7 StartBool_2) (< Start_5 Start_10) (= Start_5 Start_1) (>= Start_6 Start_1) (> Start_7 Start_1)))
   (Start_1 Int (5 y 3 (- Start Start_2) (* Start_6 Start_5) (div Start_8 Start_7) (mod Start_5 Start_2) (abs Start_12) (ite StartBool Start_12 Start_10)))
   (Start_12 Int (1 x 4 5 2 y (- Start_7 Start_3) (* Start_12 Start_2) (div Start_6 Start_1) (mod Start_11 Start_6) (ite StartBool_5 Start Start_12)))
   (StartBool_1 Bool (false true (not StartBool_10) (and StartBool_5 StartBool_2) (< Start_1 Start_4) (<= Start_7 Start_8) (= Start_5 Start_8)))
   (StartBool_10 Bool (false (and StartBool_7 StartBool_6) (or StartBool_10 StartBool_1) (< Start_4 Start_6) (<= Start_6 Start) (= Start_2 Start_8)))
   (StartBool_9 Bool (false (not StartBool_2) (and StartBool_4 StartBool_7) (or StartBool_2 StartBool_10) (< Start_3 Start_7)))
   (StartBool_7 Bool (false (or StartBool_9 StartBool_7) (< Start_5 Start) (> Start_7 Start_11)))
   (Start_3 Int (1 (- Start_2) (- Start_1 Start) (+ Start_1 Start) (* Start_2 Start_1) (ite StartBool_2 Start Start_2)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool StartBool_3) (or StartBool_4 StartBool_3) (< Start_1 Start_1) (<= Start_3 Start_1) (= Start_3 Start_3)))
   (StartBool_8 Bool (true (and StartBool_3 StartBool_8) (<= Start_10 Start_2) (= Start_6 Start_1) (> Start_1 Start_3)))
   (Start_10 Int (4 (+ Start Start_10) (* Start_9 Start) (div Start_7 Start_5) (mod Start_3 Start_11) (abs Start_3)))
   (StartBool_5 Bool (true (not StartBool_3) (and StartBool_1 StartBool_5) (or StartBool_2 StartBool_6) (< Start_3 Start_1) (= Start_4 Start_3) (>= Start_6 Start_2)))
   (Start_2 Int (5 0 (- Start_8) (* Start_10 Start) (div Start_3 Start_5) (mod Start_11 Start_12) (abs Start_8) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_4 Bool (true (< Start_4 Start) (>= Start_4 Start_3)))
   (Start_4 Int (2 (- Start_1) (+ Start_3 Start_3) (* Start_4 Start_1) (div Start_2 Start_3) (abs Start_3)))
   (StartBool_3 Bool (false true (not StartBool_5) (and StartBool_2 StartBool) (or StartBool StartBool_1) (<= Start_3 Start_3) (= Start_3 Start_5) (>= Start Start_5)))
   (Start_11 Int (1 (- Start_9) (- Start_3 Start_5) (+ Start_9 Start_11) (div Start_4 Start_7) (mod Start_6 Start_6) (abs Start) (ite StartBool_1 Start_5 Start_4)))
   (Start_5 Int (y 3 2 (div Start_3 Start_3) (mod Start Start) (abs Start)))
   (Start_6 Int (2 (- Start_6) (div Start_5 Start_2) (mod Start_5 Start_6) (abs Start_5) (ite StartBool Start_6 Start_6)))
   (Start_8 Int (3 1 0 y 5 4 (* Start_3 Start_2)))
   (Start_7 Int (4 x y (- Start_5) (div Start_1 Start_6) (mod Start_6 Start_9)))
   (StartBool_6 Bool (true false (not StartBool_7) (and StartBool_3 StartBool_8) (or StartBool_8 StartBool_7) (< Start_1 Start_7) (<= Start_5 Start) (= Start Start_8) (>= Start Start_6) (> Start Start_4)))
   (Start_9 Int (4 2 (- Start_5) (- Start_1 Start_3) (+ Start_5 Start_2) (* Start_5 Start_9) (mod Start_7 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 4 0)))

(check-synth)
