(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_1 Int) (Start_14 Int) (StartBool_5 Bool) (Start_16 Int) (StartBool_2 Bool) (Start_18 Int) (Start_8 Int) (Start_2 Int) (StartBool_1 Bool) (Start_15 Int) (Start_6 Int) (Start_7 Int) (StartBool_4 Bool) (Start_10 Int) (Start_11 Int) (Start_13 Int) (Start_9 Int) (Start_4 Int) (Start_12 Int) (Start_3 Int) (Start_5 Int) (StartBool_3 Bool))
  ((Start Int (3 (- Start_1) (- Start Start_2) (+ Start Start_2) (div Start_2 Start) (mod Start_2 Start_3) (abs Start_1) (ite StartBool Start_3 Start_4)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_4 StartBool_5) (<= Start_16 Start_6) (= Start_9 Start_17)))
   (Start_17 Int (1 0 y 2 x 4 3 (- Start_2 Start_12) (* Start Start_18) (div Start_4 Start_15) (mod Start_10 Start_15) (ite StartBool Start_15 Start_18)))
   (Start_1 Int (5 y 0 (+ Start_11 Start_9) (* Start_2 Start_13) (div Start_10 Start_1) (mod Start_1 Start_15) (ite StartBool_1 Start_5 Start_14)))
   (Start_14 Int (x 3 y 0 1 (- Start_12 Start_9) (+ Start_11 Start_16) (div Start_13 Start_7) (abs Start_10)))
   (StartBool_5 Bool (true false (or StartBool_1 StartBool) (<= Start_5 Start_5) (>= Start_5 Start_16) (> Start_5 Start_16)))
   (Start_16 Int (3 0 (- Start_13) (+ Start_10 Start_6) (div Start_12 Start_11) (ite StartBool_3 Start_14 Start_10)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_4 StartBool_1) (or StartBool_1 StartBool_3) (<= Start_3 Start_13) (= Start Start_1) (>= Start_6 Start_11)))
   (Start_18 Int (y 5 (- Start_9) (* Start_6 Start_12) (mod Start_14 Start_5)))
   (Start_8 Int (x 3 (+ Start_5 Start) (* Start_3 Start_3) (abs Start_3)))
   (Start_2 Int (2 (- Start_11 Start_6) (+ Start_7 Start_13) (* Start_12 Start_8) (div Start_6 Start_15) (mod Start_9 Start_1) (abs Start_15) (ite StartBool_5 Start_2 Start_6)))
   (StartBool_1 Bool (true (not StartBool_2) (or StartBool_3 StartBool) (< Start_5 Start_3) (<= Start_6 Start_1) (> Start_1 Start_1)))
   (Start_15 Int (5 x 1 3 y (- Start_13) (+ Start_2 Start_13) (ite StartBool_1 Start_3 Start_3)))
   (Start_6 Int (5 (- Start_5) (+ Start_6 Start_7) (div Start_7 Start_8) (ite StartBool_2 Start_6 Start_5)))
   (Start_7 Int (4 y (- Start) (* Start_5 Start_7) (div Start_2 Start_3) (abs Start) (ite StartBool_4 Start_7 Start)))
   (StartBool_4 Bool (false true (and StartBool_1 StartBool_2) (= Start_9 Start_8) (>= Start_5 Start_8) (> Start_7 Start_10)))
   (Start_10 Int (1 5 x (- Start_8 Start_10) (abs Start_1) (ite StartBool Start_3 Start_8)))
   (Start_11 Int (1 y (+ Start_12 Start_1) (div Start_9 Start_9) (mod Start_2 Start_11) (abs Start_7) (ite StartBool_1 Start_4 Start_12)))
   (Start_13 Int (3 (+ Start_13 Start_8) (* Start Start_11) (div Start_7 Start_3)))
   (Start_9 Int (x y 3 (- Start_2) (- Start_1 Start_4) (* Start_8 Start_4) (div Start_8 Start_11) (mod Start_8 Start_4)))
   (Start_4 Int (3 5 (- Start Start_3) (+ Start_3 Start) (mod Start_4 Start_2) (ite StartBool_1 Start_1 Start_4)))
   (Start_12 Int (4 (- Start_9) (+ Start_3 Start_2) (* Start_9 Start_9) (div Start_2 Start_9) (abs Start_8)))
   (Start_3 Int (4 (+ Start_11 Start_2) (* Start_3 Start_6) (mod Start_11 Start_14) (ite StartBool_5 Start_15 Start_10)))
   (Start_5 Int (x (- Start_9) (- Start_7 Start_1) (* Start_6 Start_3) (mod Start_4 Start_11)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_1) (>= Start_9 Start_7) (> Start_10 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- (- 1) (div 0 0)))))

(check-synth)
