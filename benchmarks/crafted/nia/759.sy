(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_4 Bool) (Start_14 Int) (Start_13 Int) (Start_4 Int) (Start_12 Int) (Start_10 Int) (Start_2 Int) (Start_3 Int) (Start_5 Int) (Start_9 Int) (Start_6 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_7 Int) (StartBool_2 Bool) (Start_8 Int) (Start_11 Int))
  ((Start Int (x (- Start_1 Start_2) (abs Start_1)))
   (StartBool Bool (false (and StartBool StartBool_4) (< Start_2 Start_2) (= Start_3 Start_13)))
   (Start_1 Int (2 y 1 5 (- Start_11) (- Start_10 Start) (* Start_9 Start_14)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_2 StartBool) (< Start Start_10)))
   (Start_14 Int (y (- Start_7) (div Start_8 Start_14) (abs Start) (ite StartBool_4 Start_14 Start_11)))
   (Start_13 Int (0 3 (- Start_11 Start_1) (+ Start_1 Start_7) (* Start_13 Start_9) (div Start_6 Start_2) (mod Start_13 Start_9) (abs Start_7) (ite StartBool_4 Start_7 Start_8)))
   (Start_4 Int (y 3 (+ Start_6 Start_13) (* Start_10 Start_12) (div Start_6 Start_11) (abs Start_4)))
   (Start_12 Int (4 (- Start_5) (abs Start_5)))
   (Start_10 Int (3 1 4 0 (- Start_7) (+ Start_10 Start_7) (abs Start) (ite StartBool_1 Start_6 Start_7)))
   (Start_2 Int (4 0 (- Start Start) (+ Start_3 Start_2) (mod Start_1 Start) (abs Start_3)))
   (Start_3 Int (4 x (- Start_4 Start_5) (* Start_3 Start_2) (div Start_2 Start_5)))
   (Start_5 Int (0 4 (- Start_5) (div Start Start_6) (mod Start_7 Start_4) (abs Start_5)))
   (Start_9 Int (0 3 y 4 2 1 (- Start_1) (+ Start Start_8) (* Start_8 Start_9) (div Start_4 Start_9) (abs Start_10) (ite StartBool Start_10 Start_5)))
   (Start_6 Int (y (- Start_12 Start_8) (div Start_3 Start_12) (abs Start_1)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (or StartBool_3 StartBool_1) (= Start Start_2) (>= Start_4 Start_2)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool_2) (or StartBool_1 StartBool_3) (< Start_1 Start_5) (<= Start_3 Start) (= Start_6 Start_3)))
   (Start_7 Int (0 2 3 (- Start_3) (+ Start_8 Start_8) (div Start_9 Start_9) (mod Start_7 Start_4)))
   (StartBool_2 Bool (true false (and StartBool_2 StartBool) (< Start_5 Start_9) (<= Start_8 Start_1)))
   (Start_8 Int (x (- Start_11) (+ Start_1 Start) (* Start_1 Start_5) (mod Start_7 Start_11)))
   (Start_11 Int (y (- Start_11) (+ Start_7 Start_3) (abs Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- x (* 2 y))))

(check-synth)
