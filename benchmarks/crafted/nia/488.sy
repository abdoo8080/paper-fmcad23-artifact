(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_10 Int) (StartBool_1 Bool) (Start_3 Int) (Start_4 Int) (Start_6 Int) (StartBool_2 Bool) (Start_5 Int) (Start_7 Int) (Start_2 Int) (Start_9 Int) (StartBool_3 Bool) (Start_8 Int) (StartBool_4 Bool))
  ((Start Int (x 4 (+ Start_1 Start_2) (* Start_3 Start_4) (abs Start_3) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (true (< Start_9 Start_4) (>= Start_7 Start_1) (> Start_6 Start_10)))
   (Start_1 Int (y x (- Start_5) (+ Start_9 Start_5) (* Start_9 Start_9) (div Start_7 Start_3) (mod Start Start_2) (abs Start_9)))
   (Start_10 Int (3 (+ Start_9 Start_10) (mod Start_9 Start_6) (ite StartBool Start_2 Start_5)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_2) (or StartBool_2 StartBool) (< Start_4 Start_1) (= Start_4 Start_3) (> Start_3 Start)))
   (Start_3 Int (0 (+ Start_5 Start_1)))
   (Start_4 Int (0 3 (* Start_2 Start_2) (div Start_2 Start) (abs Start_1)))
   (Start_6 Int (2 (- Start_6 Start_6) (+ Start_4 Start) (* Start_8 Start_9) (div Start_5 Start) (abs Start_3) (ite StartBool Start_3 Start_5)))
   (StartBool_2 Bool (false (>= Start Start_1) (> Start_1 Start_3)))
   (Start_5 Int (0 1 (- Start_2) (- Start_1 Start_4) (* Start_1 Start_2)))
   (Start_7 Int (3 (- Start_3 Start_8) (div Start_7 Start_8) (ite StartBool_3 Start_2 Start_3)))
   (Start_2 Int (3 x 2 (- Start_4) (- Start_1 Start_3) (+ Start_2 Start_5) (* Start_6 Start_7) (div Start_8 Start_6) (mod Start_4 Start_2) (ite StartBool_3 Start_7 Start)))
   (Start_9 Int (5 3 y (- Start_7 Start_5) (+ Start_3 Start_4) (* Start Start) (mod Start_9 Start_7) (ite StartBool_4 Start_2 Start_6)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool StartBool_2) (or StartBool_1 StartBool_1)))
   (Start_8 Int (y (- Start_2) (- Start_2 Start_5) (* Start_7 Start_3) (div Start Start_6) (ite StartBool_3 Start_6 Start_6)))
   (StartBool_4 Bool (false (not StartBool_1) (and StartBool StartBool) (or StartBool StartBool) (< Start_4 Start_5) (<= Start_8 Start_6) (= Start_10 Start_9) (> Start_8 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div y (mod y 2))))

(check-synth)
