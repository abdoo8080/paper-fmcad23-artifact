(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_14 Int) (Start_12 Int) (Start_1 Int) (Start_6 Int) (Start_11 Int) (Start_4 Int) (Start_2 Int) (StartBool_1 Bool) (Start_7 Int) (Start_8 Int) (Start_5 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_9 Int) (Start_13 Int) (StartBool_3 Bool))
  ((Start Int (4 3 y (- Start_1) (- Start Start_1) (+ Start_2 Start_2) (abs Start)))
   (StartBool Bool (false true (and StartBool StartBool_3) (<= Start_4 Start_10) (= Start_10 Start_11) (> Start_6 Start_7)))
   (Start_10 Int (1 0 (abs Start_10)))
   (Start_14 Int (5 4 y 0 (* Start_14 Start_11) (div Start_3 Start_3) (abs Start_4)))
   (Start_12 Int (x y (- Start_6) (- Start_1 Start_14) (+ Start_14 Start_7) (mod Start_3 Start)))
   (Start_1 Int (1 y (- Start_8 Start_6) (mod Start_6 Start_3) (ite StartBool_1 Start_5 Start_5)))
   (Start_6 Int (2 (- Start) (- Start_2 Start_5) (* Start Start_7) (div Start_4 Start_8) (mod Start_8 Start_1) (ite StartBool_2 Start_7 Start_1)))
   (Start_11 Int (2 x 4 (- Start_11) (- Start_4 Start_12) (* Start Start_13) (div Start_1 Start_4) (ite StartBool_2 Start_7 Start_11)))
   (Start_4 Int (y 2 (- Start_2) (- Start_5 Start_7) (div Start_1 Start) (mod Start_4 Start_4)))
   (Start_2 Int (2 x (+ Start_1 Start) (div Start_1 Start_2) (mod Start Start) (ite StartBool_1 Start_2 Start)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_1) (< Start_3 Start_4) (<= Start_4 Start_3) (= Start_3 Start) (>= Start_3 Start_5) (> Start_5 Start_6)))
   (Start_7 Int (0 (- Start_1) (- Start_8 Start_5) (div Start_4 Start_3) (mod Start_5 Start_5) (abs Start_2) (ite StartBool_1 Start_1 Start_2)))
   (Start_8 Int (3 0 (- Start_2) (* Start_3 Start_5) (div Start_1 Start_2) (mod Start_3 Start_7)))
   (Start_5 Int (x 2 (- Start_1) (mod Start_5 Start_1)))
   (Start_3 Int (x (- Start_1) (* Start_5 Start_3) (abs Start) (ite StartBool_2 Start_1 Start)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_3) (or StartBool StartBool_4) (>= Start_6 Start_5) (> Start_6 Start_5)))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool_2) (< Start_7 Start_8) (= Start_3 Start_9)))
   (Start_9 Int (0 (- Start_8 Start_2) (+ Start_1 Start_5) (* Start_6 Start_1) (div Start_8 Start_9) (mod Start_8 Start_8) (abs Start_4)))
   (Start_13 Int (0 3 y (mod Start_9 Start_4) (abs Start_1) (ite StartBool_4 Start_2 Start_5)))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool_1 StartBool_3) (< Start_3 Start_2) (<= Start_6 Start) (= Start Start) (>= Start_6 Start_9) (> Start Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 1 y)))

(check-synth)
