(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_5 Bool) (Start_12 Int) (Start_11 Int) (Start_3 Int) (Start_4 Int) (StartBool_2 Bool) (Start_6 Int) (Start_7 Int) (StartBool_3 Bool) (Start_5 Int) (Start_10 Int) (Start_2 Int) (Start_8 Int) (Start_1 Int) (StartBool_1 Bool) (Start_9 Int))
  ((Start Int (5 x (- Start) (+ Start Start_1) (* Start_1 Start) (div Start_2 Start) (mod Start_3 Start) (ite StartBool Start_3 Start_1)))
   (StartBool Bool (false (and StartBool StartBool) (or StartBool StartBool_1) (> Start_1 Start_8)))
   (StartBool_4 Bool (true (not StartBool_5) (or StartBool_5 StartBool) (> Start_3 Start_8)))
   (StartBool_5 Bool (true (not StartBool) (or StartBool_5 StartBool_5) (< Start_4 Start_12) (<= Start_7 Start_4) (= Start_11 Start_4)))
   (Start_12 Int (4 2 y (- Start_10 Start_12) (* Start_11 Start_3)))
   (Start_11 Int (x 1 5 3 y 4 0 2 (- Start_9) (div Start_6 Start_4)))
   (Start_3 Int (4 0 (+ Start_4 Start)))
   (Start_4 Int (x 2 (+ Start_3 Start_1) (* Start_3 Start_1) (div Start Start_1) (mod Start_5 Start_6) (abs Start_4) (ite StartBool Start_3 Start_6)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_3) (< Start_10 Start_9) (= Start_6 Start_11) (>= Start_7 Start_10) (> Start Start_10)))
   (Start_6 Int (2 (- Start) (- Start Start_6) (+ Start_7 Start_4) (mod Start_7 Start_4)))
   (Start_7 Int (0 2 5 (- Start Start_5) (+ Start_3 Start_7) (* Start_7 Start) (div Start_2 Start_3) (abs Start_1) (ite StartBool Start_1 Start_7)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_2 StartBool_4) (or StartBool_5 StartBool_1) (>= Start_8 Start_2)))
   (Start_5 Int (2 4 (* Start Start_2) (mod Start_3 Start_3) (abs Start_3)))
   (Start_10 Int (2 (- Start_9) (* Start_1 Start_2) (div Start_3 Start_2) (abs Start_3)))
   (Start_2 Int (5 0 (- Start_3) (+ Start_8 Start_8) (div Start_1 Start_6) (abs Start) (ite StartBool Start_8 Start_1)))
   (Start_8 Int (3 (- Start_8 Start) (+ Start_1 Start_6) (div Start_6 Start) (abs Start_8) (ite StartBool Start_6 Start_1)))
   (Start_1 Int (3 (- Start_2) (* Start_2 Start_1)))
   (StartBool_1 Bool (false true (not StartBool) (< Start Start_3) (<= Start_8 Start_6) (= Start_9 Start) (> Start_4 Start_7)))
   (Start_9 Int (5 1 (ite StartBool_2 Start Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 4 (+ 3 (- (div 2 x))))))

(check-synth)
