(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_1 Bool) (Start_2 Int) (Start_6 Int) (Start_3 Int) (Start_5 Int) (Start_4 Int) (Start_7 Int))
  ((Start Int (x (- Start_1) (* Start Start_1) (div Start_1 Start_1) (mod Start_1 Start_2) (abs Start_3) (ite StartBool Start_3 Start_4)))
   (StartBool Bool (true (not StartBool) (< Start_5 Start_2) (<= Start_2 Start_3) (= Start_1 Start_5) (>= Start Start_1) (> Start Start_1)))
   (Start_1 Int (3 x (- Start_2) (- Start_7 Start_2) (+ Start_1 Start) (mod Start_2 Start_1) (abs Start_4)))
   (StartBool_1 Bool (true (not StartBool_1) (or StartBool_1 StartBool_1) (= Start_6 Start)))
   (Start_2 Int (y (+ Start_1 Start_4) (* Start_6 Start_1) (div Start_3 Start_6) (mod Start_3 Start_3) (abs Start_3) (ite StartBool_1 Start_4 Start_5)))
   (Start_6 Int (3 4 (mod Start_1 Start_5)))
   (Start_3 Int (5 (mod Start Start_2)))
   (Start_5 Int (y (- Start_2) (- Start Start_4) (+ Start_5 Start_5) (div Start_5 Start) (ite StartBool Start_6 Start_4)))
   (Start_4 Int (x 0 (- Start_4) (- Start_1 Start) (+ Start_1 Start_5) (abs Start_4)))
   (Start_7 Int (2 (div Start_6 Start_6) (abs Start) (ite StartBool Start_7 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 3 (abs (- y)))))

(check-synth)
