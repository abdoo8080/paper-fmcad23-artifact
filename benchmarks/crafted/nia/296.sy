(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_16 Int) (Start_2 Int) (Start_14 Int) (StartBool_4 Bool) (StartBool_6 Bool) (Start_6 Int) (Start_13 Int) (Start_12 Int) (Start_15 Int) (Start_3 Int) (Start_4 Int) (Start_7 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_8 Int) (Start_11 Int) (StartBool_1 Bool) (StartBool_5 Bool) (Start_5 Int) (Start_9 Int) (Start_10 Int))
  ((Start Int (4 (- Start) (- Start_1 Start_1) (+ Start Start_2) (* Start_3 Start_1) (abs Start) (ite StartBool Start_3 Start_2)))
   (StartBool Bool (true false (not StartBool_6) (and StartBool_6 StartBool_1) (< Start_12 Start_1) (> Start_12 Start_16)))
   (Start_1 Int (1 0 5 4 y x (- Start_5) (- Start_3 Start_15) (+ Start_14 Start_9) (abs Start_6)))
   (Start_16 Int (5 4 (- Start_3 Start_7) (+ Start_10 Start_14) (* Start_10 Start_11) (div Start_4 Start_11)))
   (Start_2 Int (3 y 2 x (- Start_5) (+ Start_4 Start) (* Start_10 Start_15) (mod Start_9 Start_16) (abs Start_3) (ite StartBool_4 Start_8 Start_6)))
   (Start_14 Int (4 (+ Start_8 Start_8) (* Start_5 Start) (abs Start_14)))
   (StartBool_4 Bool (false (not StartBool_5) (or StartBool_2 StartBool_4) (<= Start Start_10) (>= Start_8 Start)))
   (StartBool_6 Bool (false true (not StartBool_4) (< Start_7 Start_10) (<= Start_13 Start_7) (= Start Start_10)))
   (Start_6 Int (2 (- Start_14 Start_11) (* Start_7 Start_10) (mod Start_1 Start_12) (ite StartBool_1 Start_14 Start_7)))
   (Start_13 Int (2 (+ Start_6 Start_9) (* Start_5 Start_8) (div Start Start) (abs Start_8)))
   (Start_12 Int (0 (- Start_3 Start_5) (+ Start_8 Start_13) (abs Start_10)))
   (Start_15 Int (0 (+ Start_15 Start) (abs Start_7)))
   (Start_3 Int (3 x 4 (div Start Start_3) (mod Start_4 Start_4) (ite StartBool Start_1 Start_3)))
   (Start_4 Int (x (- Start_3) (- Start_2 Start_3) (* Start_5 Start_3) (mod Start_4 Start_2)))
   (Start_7 Int (y 4 5 (* Start_2 Start_5) (div Start_7 Start) (mod Start_5 Start) (abs Start_3) (ite StartBool_2 Start_2 Start_6)))
   (StartBool_2 Bool (true (or StartBool_3 StartBool) (< Start_6 Start_3) (<= Start_1 Start_5) (>= Start_5 Start) (> Start_4 Start_1)))
   (StartBool_3 Bool (true (not StartBool_3) (<= Start_2 Start)))
   (Start_8 Int (1 x (- Start_5 Start_8) (mod Start_4 Start_4)))
   (Start_11 Int (x (- Start_1) (* Start_12 Start_7) (div Start_11 Start_4) (abs Start_2)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_4) (or StartBool_5 StartBool_2) (< Start_1 Start_7) (= Start Start_8) (>= Start_7 Start_6)))
   (StartBool_5 Bool (true false (and StartBool_4 StartBool_6) (or StartBool_4 StartBool_1) (<= Start_9 Start_9) (= Start_7 Start) (>= Start_4 Start_7) (> Start_7 Start_7)))
   (Start_5 Int (1 (+ Start Start_6) (* Start Start_2) (div Start_3 Start_1) (abs Start_6) (ite StartBool_1 Start_4 Start_7)))
   (Start_9 Int (0 5 (+ Start_9 Start_10) (* Start_4 Start_1) (mod Start_8 Start_10) (abs Start_1)))
   (Start_10 Int (5 (- Start_5) (+ Start_9 Start_7) (* Start_2 Start_9) (div Start_10 Start_3) (mod Start_11 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (+ (* 4 y) (* (div 0 y) 2)) (- (* (+ 5 2) 5)))))

(check-synth)
