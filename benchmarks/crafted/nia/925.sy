(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_15 Int) (Start_16 Int) (StartBool_5 Bool) (Start_3 Int) (Start_5 Int) (Start_13 Int) (Start_12 Int) (Start_14 Int) (Start_6 Int) (StartBool_1 Bool) (Start_4 Int) (Start_8 Int) (StartBool_4 Bool) (Start_9 Int) (StartBool_3 Bool) (Start_11 Int) (Start_2 Int) (Start_10 Int) (Start_7 Int) (StartBool_2 Bool))
  ((Start Int (y 3 2 (- Start_1 Start) (div Start Start_1) (mod Start_2 Start_1)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_4 StartBool_4) (or StartBool StartBool_2) (= Start_11 Start) (>= Start_1 Start_9)))
   (Start_1 Int (2 4 x (- Start_15) (+ Start_14 Start_14)))
   (Start_15 Int (y 3 5 0 2 (- Start_8 Start_9) (+ Start_12 Start_16) (mod Start_5 Start_5) (abs Start_3) (ite StartBool_3 Start_5 Start_12)))
   (Start_16 Int (2 (- Start_5) (- Start_12 Start_12) (div Start_6 Start_7) (abs Start_14)))
   (StartBool_5 Bool (false true (< Start_15 Start_4) (<= Start_11 Start_1) (>= Start_14 Start_12) (> Start_16 Start_1)))
   (Start_3 Int (0 (div Start_1 Start_8) (mod Start_11 Start_12) (ite StartBool_5 Start_13 Start_14)))
   (Start_5 Int (y (- Start_14 Start_10) (* Start_2 Start_5) (ite StartBool_2 Start_3 Start_8)))
   (Start_13 Int (y 2 5 (- Start_13) (+ Start_1 Start_2) (mod Start_8 Start_5) (abs Start_4)))
   (Start_12 Int (5 (- Start_13) (+ Start_2 Start_10) (* Start_1 Start_1) (abs Start_12)))
   (Start_14 Int (x 4 2 1 5 0 y (* Start_4 Start_2) (abs Start_9) (ite StartBool_4 Start_9 Start_13)))
   (Start_6 Int (1 (- Start_1) (+ Start_11 Start_10) (abs Start_5) (ite StartBool_4 Start Start_5)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (or StartBool_2 StartBool_3) (>= Start_7 Start_8) (> Start_1 Start_3)))
   (Start_4 Int (x (- Start_4) (- Start_5 Start_4) (+ Start_1 Start_6) (* Start_7 Start_6) (abs Start_2) (ite StartBool_1 Start Start_5)))
   (Start_8 Int (0 2 (- Start_4) (+ Start_4 Start_8) (* Start_8 Start_8) (div Start_2 Start_8) (mod Start_4 Start_3) (abs Start_9)))
   (StartBool_4 Bool (true false (< Start_11 Start_12)))
   (Start_9 Int (x y (* Start_9 Start_7)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_1) (or StartBool_2 StartBool_1) (= Start Start_2) (>= Start_10 Start_11) (> Start_10 Start_10)))
   (Start_11 Int (1 (- Start_5) (- Start_9 Start_3) (div Start Start_1)))
   (Start_2 Int (2 (- Start_1) (* Start_3 Start_3) (mod Start Start_4)))
   (Start_10 Int (3 x 1 0 2 (- Start_6 Start_8) (div Start_2 Start_7)))
   (Start_7 Int (1 (- Start_1) (- Start_7 Start_1) (* Start_11 Start_4) (div Start_4 Start_10) (mod Start_11 Start_8) (abs Start_8)))
   (StartBool_2 Bool (true (< Start_9 Start_4) (= Start_8 Start_5) (>= Start Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- x 5) x)))

(check-synth)
