(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_5 Int) (Start_9 Int) (Start_8 Int) (Start_7 Int) (Start_2 Int) (StartBool_1 Bool) (Start_3 Int) (Start_6 Int) (Start_1 Int) (Start_4 Int))
  ((Start Int (1 5 (- Start_1) (+ Start Start) (div Start Start_1) (ite StartBool Start Start_1)))
   (StartBool Bool (true (= Start_1 Start_2) (>= Start Start_1) (> Start Start_3)))
   (StartBool_2 Bool (false (not StartBool) (< Start_6 Start_2)))
   (Start_5 Int (y (- Start_4 Start_4) (+ Start_8 Start_1) (mod Start Start) (ite StartBool Start_9 Start_2)))
   (Start_9 Int (0 (- Start_2) (* Start_7 Start_2) (ite StartBool_2 Start_8 Start_9)))
   (Start_8 Int (5 (- Start_8) (+ Start_3 Start_7) (* Start_8 Start_4) (div Start Start_4) (ite StartBool Start_3 Start_3)))
   (Start_7 Int (y (+ Start_7 Start_1)))
   (Start_2 Int (4 (- Start_1 Start_1) (+ Start_1 Start) (* Start_7 Start_3) (mod Start Start_7) (abs Start_1) (ite StartBool_2 Start_8 Start_3)))
   (StartBool_1 Bool (true false (= Start_6 Start_7) (> Start_5 Start_4)))
   (Start_3 Int (3 4 5 (- Start) (+ Start_1 Start_2) (mod Start_1 Start_4) (abs Start_2)))
   (Start_6 Int (x y 3 4 (- Start_5) (- Start_3 Start_8) (+ Start_3 Start_4) (abs Start_5)))
   (Start_1 Int (4 (- Start) (- Start Start_1) (+ Start Start) (div Start_1 Start) (abs Start)))
   (Start_4 Int (1 (- Start_3) (- Start_5 Start_6) (+ Start_2 Start_3) (* Start Start_5) (abs Start_4) (ite StartBool_1 Start_3 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= y x) 3 y)))

(check-synth)
