(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_14 Int) (Start_15 Int) (Start_13 Int) (Start_1 Int) (Start_11 Int) (Start_8 Int) (Start_18 Int) (StartBool_1 Bool) (Start_3 Int) (Start_16 Int) (Start_6 Int) (Start_5 Int) (StartBool_2 Bool) (Start_4 Int) (Start_10 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_12 Int) (Start_7 Int) (Start_2 Int) (Start_9 Int))
  ((Start Int (5 2 (- Start_1) (mod Start_2 Start_1) (ite StartBool_1 Start Start_1)))
   (StartBool Bool (true (or StartBool_3 StartBool_1) (< Start_3 Start_16) (<= Start_12 Start_8) (>= Start_5 Start_9) (> Start_1 Start_17)))
   (Start_17 Int (y (* Start Start_1) (div Start_4 Start_18) (mod Start Start_8)))
   (Start_14 Int (2 (- Start_15) (* Start_16 Start_6) (mod Start_12 Start_6) (abs Start_15)))
   (Start_15 Int (4 (- Start_2) (- Start_13 Start_2) (+ Start Start_13) (div Start_5 Start_12) (ite StartBool_3 Start_3 Start)))
   (Start_13 Int (4 1 (* Start_3 Start) (ite StartBool_1 Start_14 Start_11)))
   (Start_1 Int (5 y 4 3 x 1 (- Start_1) (+ Start_9 Start_9) (* Start_1 Start_12) (mod Start_9 Start_9) (abs Start_13) (ite StartBool_1 Start_8 Start_7)))
   (Start_11 Int (1 5 x 2 4 0 3 y (- Start_7 Start_8) (mod Start_1 Start) (abs Start_5) (ite StartBool_1 Start_1 Start_4)))
   (Start_8 Int (x (- Start_2 Start_2) (ite StartBool_3 Start_1 Start_2)))
   (Start_18 Int (x (- Start_15) (+ Start_11 Start_14) (* Start_15 Start_2) (mod Start_11 Start_1) (abs Start_5)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (or StartBool_2 StartBool_3) (<= Start Start) (>= Start_1 Start_3)))
   (Start_3 Int (5 (- Start_2 Start_1) (* Start_4 Start_2) (div Start_5 Start_3) (mod Start_1 Start_2) (ite StartBool_1 Start_2 Start_5)))
   (Start_16 Int (4 (- Start_1 Start_5) (+ Start_5 Start_5) (* Start_8 Start_4) (mod Start_8 Start_13) (ite StartBool_2 Start_1 Start_9)))
   (Start_6 Int (x 4 y (+ Start_5 Start_6) (* Start_4 Start_4) (abs Start_6)))
   (Start_5 Int (4 (- Start_6) (+ Start_2 Start_2) (* Start Start_2) (mod Start Start_3) (abs Start_6)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_4 StartBool) (or StartBool_2 StartBool_2) (= Start_7 Start_8) (> Start_4 Start_8)))
   (Start_4 Int (x (+ Start_1 Start) (* Start_2 Start_6) (mod Start_5 Start) (abs Start_5)))
   (Start_10 Int (0 (- Start_9) (* Start_9 Start_1) (div Start_4 Start_11) (mod Start_5 Start_10)))
   (StartBool_3 Bool (false (and StartBool StartBool_2) (or StartBool_4 StartBool_1) (< Start_2 Start_2) (<= Start_2 Start) (= Start_2 Start_2)))
   (StartBool_4 Bool (true (<= Start_4 Start_5) (> Start_1 Start_7)))
   (Start_12 Int (0 5 y 3 x (- Start_16) (- Start_13 Start_17) (+ Start_7 Start_16) (* Start_2 Start_13)))
   (Start_7 Int (5 2 (- Start_6 Start_3) (+ Start_5 Start_2) (* Start Start_4) (mod Start_8 Start_7) (abs Start_1)))
   (Start_2 Int (3 (- Start_8) (- Start_4 Start_2) (* Start_1 Start_9) (ite StartBool_1 Start_5 Start_7)))
   (Start_9 Int (3 5 0 4 (- Start_2) (- Start_10 Start_3) (div Start_2 Start_9) (abs Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (- (div 5 0) 5) 3)))

(check-synth)
