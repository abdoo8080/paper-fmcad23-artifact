(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_1 Int) (Start_2 Int) (Start_12 Int) (Start_14 Int) (Start_11 Int) (StartBool_6 Bool) (Start_10 Int) (Start_4 Int) (Start_9 Int) (StartBool_3 Bool) (Start_7 Int) (Start_6 Int) (Start_5 Int) (StartBool_7 Bool) (StartBool_5 Bool) (Start_8 Int) (Start_3 Int) (StartBool_1 Bool) (StartBool_4 Bool) (Start_13 Int) (StartBool_2 Bool))
  ((Start Int (x (- Start) (- Start_1 Start_2) (+ Start Start_3) (* Start_2 Start_2) (div Start_2 Start_3) (mod Start Start_1) (abs Start_2) (ite StartBool_1 Start Start_4)))
   (StartBool Bool (false (and StartBool StartBool_5) (= Start_2 Start_15)))
   (Start_15 Int (1 5 (- Start_4) (+ Start_8 Start_2) (* Start_1 Start_1) (div Start_8 Start_11) (abs Start_2)))
   (Start_1 Int (x (- Start_12 Start_3) (+ Start_7 Start_15) (* Start_8 Start_7) (mod Start_9 Start_6) (abs Start_12)))
   (Start_2 Int (1 4 0 (- Start_6 Start_6) (abs Start_9) (ite StartBool_6 Start_1 Start_11)))
   (Start_12 Int (x (+ Start_12 Start_9) (div Start_3 Start_7) (abs Start_2)))
   (Start_14 Int (1 4 y 3 (* Start_9 Start_11) (div Start_14 Start_12) (mod Start_12 Start_11) (ite StartBool_7 Start_11 Start_5)))
   (Start_11 Int (4 (- Start_7) (* Start_4 Start_7) (mod Start_1 Start_10) (abs Start_7) (ite StartBool_6 Start_6 Start_5)))
   (StartBool_6 Bool (false (not StartBool_2) (< Start_8 Start_11) (= Start_1 Start_5) (> Start_4 Start_5)))
   (Start_10 Int (0 x 3 (- Start_6) (abs Start_4)))
   (Start_4 Int (x (- Start) (- Start Start_2) (+ Start_5 Start_2) (* Start Start_6) (div Start_7 Start_2) (abs Start_4) (ite StartBool Start_5 Start)))
   (Start_9 Int (3 2 y (- Start_8) (+ Start_2 Start_9) (* Start_6 Start_7) (div Start_7 Start_9) (abs Start_3)))
   (StartBool_3 Bool (false (and StartBool StartBool_4) (= Start_3 Start_1) (>= Start Start_1) (> Start_1 Start_9)))
   (Start_7 Int (0 (- Start_6) (div Start_7 Start_1) (mod Start_2 Start_6)))
   (Start_6 Int (2 (* Start_4 Start_6) (mod Start_5 Start_2)))
   (Start_5 Int (2 (- Start_3) (div Start_5 Start_5) (mod Start Start_4) (abs Start_7) (ite StartBool Start_8 Start_5)))
   (StartBool_7 Bool (true false (>= Start_13 Start)))
   (StartBool_5 Bool (false true (not StartBool_1) (and StartBool_6 StartBool_2) (or StartBool_3 StartBool_2) (= Start_10 Start_8) (>= Start_5 Start)))
   (Start_8 Int (1 3 (- Start_4) (+ Start_6 Start_3) (* Start_8 Start) (mod Start_9 Start_3) (abs Start_10) (ite StartBool Start_9 Start_6)))
   (Start_3 Int (x (- Start_1 Start_10) (+ Start_8 Start) (* Start_10 Start_12) (div Start_1 Start_13) (abs Start_8) (ite StartBool_4 Start_10 Start_10)))
   (StartBool_1 Bool (false true (not StartBool_2) (or StartBool_3 StartBool_1) (< Start_2 Start_6) (>= Start_6 Start_9)))
   (StartBool_4 Bool (true (and StartBool StartBool_2) (< Start_1 Start_7) (<= Start_2 Start_8) (>= Start_5 Start_9)))
   (Start_13 Int (1 0 y (- Start_11 Start) (+ Start_11 Start_10) (* Start_12 Start_4) (div Start_3 Start_12) (ite StartBool_5 Start_14 Start_3)))
   (StartBool_2 Bool (false (not StartBool_5) (or StartBool_1 StartBool_2) (< Start_2 Start) (<= Start_2 Start_2) (>= Start_8 Start_8) (> Start_6 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 2 y)))

(check-synth)
