(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_5 Bool) (Start_1 Int) (Start_12 Int) (Start_3 Int) (Start_4 Int) (StartBool_4 Bool) (Start_2 Int) (Start_7 Int) (StartBool_1 Bool) (Start_8 Int) (Start_9 Int) (StartBool_2 Bool) (Start_10 Int) (Start_6 Int) (Start_5 Int) (StartBool_3 Bool) (Start_11 Int))
  ((Start Int (x (+ Start_1 Start_1) (mod Start_1 Start) (ite StartBool Start_2 Start_3)))
   (StartBool Bool (true false (and StartBool_4 StartBool_2) (or StartBool_5 StartBool_1) (<= Start_5 Start_12) (= Start_10 Start_6)))
   (StartBool_6 Bool (true false (and StartBool_5 StartBool_6) (or StartBool StartBool) (< Start_9 Start_11) (>= Start_10 Start_6)))
   (StartBool_5 Bool (true (and StartBool_5 StartBool_6)))
   (Start_1 Int (3 (- Start_5 Start_8) (div Start_8 Start_4) (mod Start_6 Start) (abs Start_12)))
   (Start_12 Int (2 0 x (- Start_1) (- Start_10 Start_3) (abs Start_11) (ite StartBool_2 Start_7 Start_3)))
   (Start_3 Int (1 (- Start_2 Start_4) (+ Start_2 Start) (ite StartBool Start_1 Start)))
   (Start_4 Int (y (- Start_2 Start_2) (* Start_2 Start_3) (mod Start_3 Start_4)))
   (StartBool_4 Bool (true (or StartBool_5 StartBool) (< Start_1 Start_10) (>= Start_6 Start_3)))
   (Start_2 Int (y (- Start_4 Start_4) (+ Start_2 Start_5) (* Start_1 Start_1) (mod Start_4 Start_6) (ite StartBool_1 Start_7 Start_1)))
   (Start_7 Int (4 0 y x (- Start_3) (- Start Start_4) (+ Start_1 Start_3) (div Start_6 Start_4) (abs Start_2)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool) (or StartBool_1 StartBool_2) (< Start_6 Start_4) (<= Start_3 Start_4) (= Start_1 Start_7) (> Start_7 Start_8)))
   (Start_8 Int (2 (- Start_4 Start_6) (* Start_6 Start_4) (div Start_4 Start_9) (abs Start_1) (ite StartBool Start_3 Start_4)))
   (Start_9 Int (3 (- Start_9) (+ Start Start_6) (div Start Start_7) (ite StartBool_1 Start_9 Start_6)))
   (StartBool_2 Bool (false true (not StartBool_3) (or StartBool_3 StartBool) (< Start_8 Start_9) (= Start_1 Start_5) (>= Start_8 Start_2) (> Start_4 Start_3)))
   (Start_10 Int (1 2 (- Start_11 Start_6) (abs Start_6) (ite StartBool_3 Start_3 Start_1)))
   (Start_6 Int (3 (+ Start_1 Start_1) (* Start_10 Start_8) (div Start_5 Start_6) (mod Start_9 Start_6) (abs Start_9)))
   (Start_5 Int (1 (- Start_12) (+ Start Start_12) (* Start_1 Start_8) (mod Start_5 Start) (abs Start_4)))
   (StartBool_3 Bool (false (and StartBool_2 StartBool_2) (or StartBool_1 StartBool_3) (< Start_3 Start_5) (= Start_5 Start_7)))
   (Start_11 Int (1 2 y (- Start_1) (abs Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (ite (<= (div 3 y) 4) x 4) x)))

(check-synth)
