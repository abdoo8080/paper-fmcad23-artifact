(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_14 Int) (Start_15 Int) (StartBool_1 Bool) (Start_4 Int) (StartBool_5 Bool) (StartBool_8 Bool) (Start_11 Int) (Start_12 Int) (Start_2 Int) (Start_8 Int) (Start_16 Int) (Start_3 Int) (Start_9 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_1 Int) (StartBool_7 Bool) (Start_5 Int) (StartBool_3 Bool) (Start_6 Int) (Start_7 Int) (StartBool_6 Bool) (Start_10 Int))
  ((Start Int (3 (+ Start_1 Start) (* Start Start_2) (div Start Start) (mod Start Start_1)))
   (StartBool Bool (true false (<= Start_3 Start_12) (= Start_4 Start_9) (>= Start Start_7) (> Start_12 Start_1)))
   (Start_13 Int (2 (- Start_10 Start_8) (+ Start_2 Start_6) (mod Start_3 Start_12) (abs Start_5)))
   (Start_14 Int (y (- Start_13) (* Start_8 Start_14) (mod Start_5 Start_12) (abs Start_10) (ite StartBool_7 Start_15 Start_12)))
   (Start_15 Int (y (- Start_7 Start_8) (+ Start_4 Start_14) (* Start_11 Start_10) (div Start_7 Start_2) (mod Start_11 Start_16)))
   (StartBool_1 Bool (false true (not StartBool_5) (and StartBool_5 StartBool_2) (< Start_9 Start_2) (<= Start_9 Start_5) (= Start_8 Start_10) (> Start_1 Start_10)))
   (Start_4 Int (y (- Start_13) (- Start_14 Start_11) (+ Start_8 Start_14) (div Start_7 Start_4)))
   (StartBool_5 Bool (false (and StartBool_6 StartBool_2)))
   (StartBool_8 Bool (false (not StartBool_7) (and StartBool_3 StartBool_6) (or StartBool_6 StartBool_7) (< Start_2 Start_3) (<= Start_1 Start_11) (>= Start_10 Start_7) (> Start_1 Start_4)))
   (Start_11 Int (3 2 (- Start_11 Start_11) (abs Start_1) (ite StartBool_7 Start Start_3)))
   (Start_12 Int (1 (- Start_2) (+ Start_11 Start_7) (* Start_1 Start_2) (div Start_3 Start_3) (mod Start_5 Start_6) (abs Start_11)))
   (Start_2 Int (0 (- Start Start) (+ Start_1 Start_2) (div Start_3 Start_1)))
   (Start_8 Int (y 5 3 (- Start_7) (- Start_9 Start_5) (* Start_6 Start_7) (abs Start) (ite StartBool_7 Start_7 Start_5)))
   (Start_16 Int (0 (+ Start_3 Start_16) (* Start_9 Start_5) (abs Start_9) (ite StartBool_8 Start_1 Start_11)))
   (Start_3 Int (5 (- Start_2) (- Start_3 Start_2) (+ Start_1 Start) (mod Start Start_3) (abs Start)))
   (Start_9 Int (0 2 (- Start_11 Start) (+ Start_4 Start_2) (div Start_2 Start_12) (abs Start_1)))
   (StartBool_2 Bool (false true (not StartBool) (or StartBool_1 StartBool_3) (< Start_3 Start_7) (<= Start_2 Start_4) (= Start_1 Start_1)))
   (StartBool_4 Bool (true false (not StartBool_5) (and StartBool_1 StartBool_6) (or StartBool_6 StartBool) (<= Start_3 Start_8) (> Start Start_7)))
   (Start_1 Int (0 3 2 1 5 (- Start_1 Start) (+ Start Start) (* Start_2 Start_4) (abs Start_2) (ite StartBool Start_1 Start_5)))
   (StartBool_7 Bool (true (and StartBool_7 StartBool_7) (<= Start_10 Start_8)))
   (Start_5 Int (x (- Start) (+ Start_3 Start_1) (* Start_1 Start_1) (div Start_4 Start_1) (abs Start_2) (ite StartBool_1 Start_6 Start)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_2 StartBool_3) (or StartBool_4 StartBool_4) (>= Start_6 Start_4) (> Start Start_7)))
   (Start_6 Int (5 (- Start_5) (mod Start_2 Start) (ite StartBool_2 Start_1 Start_1)))
   (Start_7 Int (2 (- Start) (- Start Start_4) (abs Start_6) (ite StartBool Start_5 Start_3)))
   (StartBool_6 Bool (true (and StartBool_8 StartBool_6) (or StartBool_3 StartBool_8) (< Start_5 Start_1) (= Start_1 Start_11) (> Start_11 Start_8)))
   (Start_10 Int (y 4 5 0 3 (- Start_8) (mod Start_3 Start_1) (abs Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 4 (mod 3 y))))

(check-synth)
