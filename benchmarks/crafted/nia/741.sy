(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_7 Int) (Start_6 Int) (Start_5 Int) (Start_4 Int) (Start_2 Int) (StartBool_1 Bool) (Start_1 Int) (Start_3 Int))
  ((Start Int (y 0 (- Start) (- Start_1 Start_1)))
   (StartBool Bool (true false (= Start_7 Start_2) (>= Start_3 Start_6) (> Start_4 Start_6)))
   (Start_7 Int (x (div Start_2 Start_6) (mod Start_4 Start_7) (ite StartBool Start_4 Start_1)))
   (Start_6 Int (5 2 (- Start_5) (- Start_6 Start_6) (* Start_6 Start_5) (ite StartBool_1 Start_6 Start_2)))
   (Start_5 Int (5 (- Start_6 Start_6) (+ Start_3 Start_1) (* Start_1 Start_1) (div Start_5 Start_5) (mod Start_6 Start_2)))
   (Start_4 Int (3 (- Start_2) (+ Start_4 Start_3) (* Start Start_3) (div Start_4 Start_3) (mod Start_4 Start_5) (ite StartBool Start Start_3)))
   (Start_2 Int (0 3 y 4 5 (+ Start_6 Start_5) (div Start Start_4) (abs Start_3)))
   (StartBool_1 Bool (false (< Start Start_3) (= Start_1 Start_4)))
   (Start_1 Int (1 5 (- Start Start_1) (+ Start_2 Start_1) (div Start_3 Start) (abs Start_3)))
   (Start_3 Int (3 5 x 0 4 (- Start_4) (- Start_1 Start_4) (mod Start_1 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (mod 2 (- (+ (div y 2) y))) (- 1))))

(check-synth)
