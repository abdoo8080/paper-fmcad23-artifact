(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_5 Int) (Start_4 Int) (Start_1 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_2 Int) (Start_3 Int))
  ((Start Int (0 (+ Start Start) (mod Start Start)))
   (StartBool Bool (true false (or StartBool StartBool_1) (<= Start Start_1) (= Start_2 Start)))
   (Start_6 Int (y (div Start_2 Start_5) (abs Start_6) (ite StartBool Start_2 Start_3)))
   (Start_5 Int (5 0 y (+ Start_5 Start_3) (div Start_4 Start_6) (mod Start_2 Start_5) (abs Start_5) (ite StartBool Start_3 Start_2)))
   (Start_4 Int (4 0 1 5 (- Start_2 Start) (* Start_2 Start_2) (mod Start Start_4) (abs Start_5)))
   (Start_1 Int (4 (- Start) (- Start_3 Start) (+ Start_3 Start_2) (* Start_1 Start)))
   (StartBool_2 Bool (false (< Start_1 Start_3) (> Start_5 Start_5)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_2) (< Start_2 Start_3) (= Start_1 Start_2) (> Start_1 Start_4)))
   (Start_2 Int (2 1 (+ Start_1 Start) (abs Start_3)))
   (Start_3 Int (x (* Start_2 Start_2) (ite StartBool Start_3 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (div x x))))

(check-synth)
