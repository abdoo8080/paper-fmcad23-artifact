(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_14 Int) (Start_18 Int) (Start_15 Int) (Start_13 Int) (Start_3 Int) (Start_17 Int) (StartBool_6 Bool) (Start_12 Int) (Start_11 Int) (StartBool_2 Bool) (Start_5 Int) (Start_16 Int) (Start_4 Int) (StartBool_5 Bool) (Start_6 Int) (StartBool_4 Bool) (Start_8 Int) (Start_10 Int) (Start_9 Int) (StartBool_3 Bool) (Start_2 Int) (Start_7 Int) (StartBool_1 Bool))
  ((Start Int (2 (- Start Start) (+ Start Start) (* Start Start_1) (mod Start_2 Start) (abs Start_3) (ite StartBool_1 Start_3 Start_4)))
   (StartBool Bool (true false (not StartBool_6) (or StartBool_6 StartBool_1) (> Start_4 Start_17)))
   (Start_1 Int (2 (- Start_16) (* Start_7 Start_12) (abs Start_2)))
   (Start_14 Int (y (+ Start_9 Start_13) (* Start_16 Start) (ite StartBool_6 Start_9 Start_12)))
   (Start_18 Int (5 0 (- Start_8 Start_7) (* Start_12 Start_12) (abs Start_9) (ite StartBool_4 Start_2 Start_18)))
   (Start_15 Int (x 5 (abs Start_9)))
   (Start_13 Int (x (+ Start_3 Start_8) (* Start_2 Start_3) (mod Start Start_6) (abs Start_3)))
   (Start_3 Int (y 4 (+ Start_3 Start_2) (div Start_8 Start_8) (mod Start_9 Start_13) (abs Start_12) (ite StartBool_1 Start_5 Start_6)))
   (Start_17 Int (4 (- Start_14 Start_18) (+ Start_18 Start_16) (abs Start_16) (ite StartBool_4 Start_13 Start_18)))
   (StartBool_6 Bool (true (and StartBool StartBool_5) (or StartBool_6 StartBool_2) (< Start_3 Start_4) (= Start_12 Start_6)))
   (Start_12 Int (4 0 y 3 1 5 (- Start_11) (- Start_4 Start_10) (abs Start_6)))
   (Start_11 Int (4 3 x y (- Start Start_12) (* Start_3 Start_12) (div Start Start_11) (mod Start_1 Start_2) (abs Start_8)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_3) (or StartBool_4 StartBool_5) (< Start_6 Start_6) (<= Start_3 Start_6) (= Start_4 Start_2) (>= Start_4 Start_1)))
   (Start_5 Int (2 (+ Start_6 Start_2) (* Start Start_5)))
   (Start_16 Int (2 0 4 3 (- Start_8) (* Start_7 Start_8) (div Start_12 Start_3) (mod Start_16 Start_6)))
   (Start_4 Int (x (- Start_1) (+ Start_5 Start_1) (div Start_2 Start_1) (abs Start_4)))
   (StartBool_5 Bool (false (not StartBool) (and StartBool StartBool_4) (= Start Start_5)))
   (Start_6 Int (5 x (- Start_4) (- Start_1 Start_7) (+ Start_6 Start_2) (div Start Start_6) (mod Start Start_2) (ite StartBool_2 Start_7 Start_2)))
   (StartBool_4 Bool (true (and StartBool_4 StartBool_5) (> Start Start_8)))
   (Start_8 Int (5 (- Start_9 Start_6) (+ Start_1 Start_4) (div Start_10 Start_9) (abs Start_7)))
   (Start_10 Int (3 (- Start_3) (- Start_4 Start_4) (+ Start_6 Start_9) (div Start_6 Start_1) (abs Start_1)))
   (Start_9 Int (x (- Start) (* Start Start_6) (div Start Start_4) (mod Start_1 Start_5)))
   (StartBool_3 Bool (false (not StartBool_5) (or StartBool StartBool_3) (= Start_7 Start_8) (>= Start_10 Start_1)))
   (Start_2 Int (y (- Start_9) (- Start_14 Start_15) (mod Start_2 Start_1)))
   (Start_7 Int (x 1 0 (- Start_8 Start_5) (+ Start Start_2) (* Start_5 Start_5) (div Start_9 Start_10) (mod Start_7 Start_1)))
   (StartBool_1 Bool (false (and StartBool_6 StartBool_5) (or StartBool_2 StartBool_2) (< Start_5 Start_11) (>= Start_8 Start_11) (> Start_2 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- y (* y (+ 2 x)))))

(check-synth)
