(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_3 Int) (Start_14 Int) (Start_16 Int) (Start_17 Int) (Start_15 Int) (StartBool_3 Bool) (Start_18 Int) (Start_5 Int) (Start_8 Int) (Start_4 Int) (Start_7 Int) (Start_13 Int) (Start_20 Int) (Start_10 Int) (Start_11 Int) (Start_9 Int) (StartBool_2 Bool) (Start_6 Int) (Start_19 Int) (Start_12 Int) (StartBool_1 Bool))
  ((Start Int (2 (- Start_1) (mod Start Start_2) (abs Start_3) (ite StartBool_1 Start_4 Start_5)))
   (StartBool Bool (true false (or StartBool_3 StartBool_2) (< Start_2 Start_19) (= Start_9 Start_1) (>= Start_9 Start_14)))
   (Start_1 Int (4 y 1 x 3 (* Start_10 Start_8) (div Start_7 Start_6) (mod Start_11 Start_13) (ite StartBool Start_17 Start_18)))
   (Start_2 Int (2 (- Start_11) (- Start_14 Start_14) (* Start_17 Start_4) (mod Start_5 Start_11)))
   (Start_3 Int (x (- Start_1 Start_6) (* Start_10 Start_16) (abs Start_12) (ite StartBool_3 Start_1 Start_12)))
   (Start_14 Int (y x 1 (- Start_3 Start_5) (+ Start_15 Start_1) (mod Start_4 Start_11) (abs Start_4)))
   (Start_16 Int (2 (- Start_3) (- Start_14 Start_13) (div Start_5 Start_10) (mod Start_9 Start_15) (ite StartBool_3 Start_7 Start_1)))
   (Start_17 Int (y (- Start_10) (+ Start_10 Start_3) (div Start_14 Start_8) (mod Start_5 Start_16) (abs Start_12) (ite StartBool_3 Start_5 Start_11)))
   (Start_15 Int (2 (- Start_16) (- Start_16 Start_2) (+ Start_12 Start_13) (div Start_17 Start_3) (ite StartBool Start_12 Start_8)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_1 StartBool_2) (or StartBool_3 StartBool_3) (<= Start_3 Start) (= Start_15 Start_5) (>= Start_7 Start_4)))
   (Start_18 Int (4 (- Start_15 Start_11) (+ Start_7 Start_15) (abs Start_12) (ite StartBool_1 Start_11 Start_12)))
   (Start_5 Int (5 x 3 (- Start_4 Start_2) (* Start_5 Start_5) (div Start_6 Start_7) (mod Start Start_7) (ite StartBool_1 Start Start_7)))
   (Start_8 Int (x (- Start_4) (+ Start_8 Start_1) (* Start_1 Start_9) (mod Start_10 Start_7) (abs Start_3)))
   (Start_4 Int (3 (- Start_1) (- Start_10 Start) (+ Start_7 Start_12) (* Start_4 Start_10) (abs Start_12) (ite StartBool_2 Start_7 Start_1)))
   (Start_7 Int (2 x y 4 0 (- Start_4) (+ Start_3 Start) (* Start_8 Start_7) (mod Start_7 Start_7) (abs Start_4) (ite StartBool_1 Start_5 Start_4)))
   (Start_13 Int (x (- Start_7 Start_12) (* Start_4 Start_14) (ite StartBool_3 Start_2 Start_2)))
   (Start_20 Int (x 3 (- Start_15 Start_7) (div Start_6 Start_11) (abs Start_19)))
   (Start_10 Int (1 (- Start_10) (+ Start_4 Start_11) (* Start_8 Start_9) (div Start_8 Start)))
   (Start_11 Int (4 3 (- Start_10) (+ Start_1 Start_11)))
   (Start_9 Int (3 4 2 (- Start_5) (- Start_6 Start_11) (+ Start_7 Start_4) (div Start_10 Start_3) (mod Start_10 Start_9) (ite StartBool Start_4 Start_11)))
   (StartBool_2 Bool (false (or StartBool_2 StartBool) (< Start_12 Start_9) (<= Start_6 Start_7) (= Start Start_4) (>= Start_3 Start_1) (> Start_6 Start_9)))
   (Start_6 Int (3 (- Start_1 Start_4) (+ Start_6 Start_5) (* Start_2 Start_4) (div Start_8 Start_5) (abs Start_5) (ite StartBool Start_7 Start_2)))
   (Start_19 Int (0 1 y (* Start_11 Start_18) (mod Start_16 Start_20) (abs Start_8)))
   (Start_12 Int (0 (mod Start_11 Start_12) (abs Start) (ite StartBool Start_10 Start)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_1 StartBool) (<= Start_11 Start_9) (= Start_4 Start_6) (> Start_6 Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (+ (mod (div y x) 0) (* (* 3 x) 5)))))

(check-synth)
