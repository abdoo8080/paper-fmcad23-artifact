(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (Start_19 Int) (Start_16 Int) (Start_15 Int) (Start_2 Int) (Start_6 Int) (StartBool_6 Bool) (Start_14 Int) (Start_1 Int) (Start_8 Int) (Start_18 Int) (Start_13 Int) (StartBool_4 Bool) (Start_4 Int) (Start_7 Int) (Start_5 Int) (StartBool_2 Bool) (StartBool_5 Bool) (Start_17 Int) (Start_9 Int) (Start_3 Int) (StartBool_3 Bool) (Start_10 Int) (StartBool_1 Bool) (Start_11 Int) (Start_12 Int))
  ((Start Int (y (+ Start_1 Start_2) (div Start_2 Start) (mod Start Start_3) (abs Start) (ite StartBool_1 Start_2 Start_4)))
   (StartBool Bool (true (or StartBool_6 StartBool_5) (<= Start_8 Start_3) (>= Start_8 Start_8)))
   (Start_20 Int (y 4 (* Start_4 Start_7) (div Start_13 Start_20) (mod Start_18 Start_4) (abs Start_16)))
   (Start_19 Int (x 1 y (- Start_9) (- Start_1 Start_7) (+ Start_2 Start_9) (* Start_12 Start_15) (div Start_10 Start_7) (mod Start_9 Start_7)))
   (Start_16 Int (2 y 3 5 (- Start_5) (* Start_11 Start_2) (abs Start_13)))
   (Start_15 Int (y (- Start_2) (- Start_1 Start_5) (+ Start_2 Start_6) (div Start_5 Start_16) (mod Start_5 Start_14)))
   (Start_2 Int (5 (- Start_6 Start_1) (+ Start_12 Start_12) (abs Start_15) (ite StartBool_1 Start_9 Start_13)))
   (Start_6 Int (4 (- Start) (- Start_6 Start_1) (ite StartBool_4 Start_13 Start_13)))
   (StartBool_6 Bool (true (not StartBool_3) (or StartBool_4 StartBool_5)))
   (Start_14 Int (x 4 (- Start_4) (+ Start_12 Start_9)))
   (Start_1 Int (x (- Start_11) (- Start_15 Start_1) (* Start_17 Start_15) (div Start_18 Start_17) (mod Start_12 Start_9) (abs Start_13)))
   (Start_8 Int (2 y (- Start_7) (- Start_1 Start_2) (* Start_7 Start) (div Start Start_2) (abs Start_3) (ite StartBool Start_4 Start_1)))
   (Start_18 Int (y (- Start_7) (- Start_6 Start) (+ Start_15 Start_16) (div Start_7 Start_9) (mod Start Start_17) (ite StartBool_1 Start Start_19)))
   (Start_13 Int (5 (- Start_9) (* Start Start_8) (div Start_6 Start_11) (mod Start_13 Start_2) (ite StartBool_6 Start_14 Start_14)))
   (StartBool_4 Bool (true false (not StartBool_4) (or StartBool_3 StartBool_2) (< Start_3 Start_3) (>= Start_9 Start_1) (> Start_4 Start_5)))
   (Start_4 Int (3 1 (- Start_4 Start_2) (* Start_5 Start_1)))
   (Start_7 Int (2 (- Start_8) (- Start Start_6) (* Start_6 Start_6) (div Start_1 Start) (mod Start_8 Start_3) (abs Start_6) (ite StartBool_4 Start_1 Start_6)))
   (Start_5 Int (0 4 (div Start_5 Start_6) (abs Start_5) (ite StartBool_2 Start_1 Start_5)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_1) (or StartBool_3 StartBool_2) (<= Start_7 Start_5) (= Start_8 Start_3) (>= Start_1 Start_7)))
   (StartBool_5 Bool (true false (< Start_9 Start_13) (= Start_8 Start_6) (> Start_6 Start_9)))
   (Start_17 Int (2 (+ Start_7 Start_12) (div Start_3 Start_20) (mod Start_14 Start_17) (ite StartBool_4 Start Start_6)))
   (Start_9 Int (2 1 4 (* Start_3 Start_3) (mod Start_8 Start_1)))
   (Start_3 Int (5 x 4 (- Start_5) (- Start_8 Start_13) (* Start_14 Start_7) (ite StartBool_5 Start_5 Start_14)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool_5 StartBool_5) (or StartBool_3 StartBool_4) (< Start_2 Start_10)))
   (Start_10 Int (y 1 (- Start_1) (- Start_5 Start) (+ Start Start_8) (* Start_9 Start_8) (div Start_3 Start_11) (mod Start_8 Start_2) (abs Start_10) (ite StartBool_3 Start_11 Start_9)))
   (StartBool_1 Bool (true false (not StartBool_2) (<= Start_13 Start_10) (> Start_14 Start_9)))
   (Start_11 Int (4 (- Start_10) (* Start_5 Start_6) (mod Start_9 Start) (ite StartBool_2 Start_12 Start_11)))
   (Start_12 Int (x (abs Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (+ y 2) 4)))

(check-synth)
