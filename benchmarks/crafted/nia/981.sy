(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_12 Int) (Start_3 Int) (Start_2 Int) (Start_1 Int) (Start_10 Int) (Start_5 Int) (Start_6 Int) (StartBool_2 Bool) (Start_7 Int) (Start_9 Int) (Start_11 Int) (Start_4 Int) (Start_8 Int))
  ((Start Int (2 1 y (+ Start_1 Start_2) (* Start_3 Start_2) (div Start_1 Start_2)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_1 StartBool_2) (or StartBool_1 StartBool_1) (< Start_8 Start_7) (<= Start_9 Start_10) (= Start_2 Start_1) (>= Start_12 Start_8) (> Start_5 Start_12)))
   (StartBool_1 Bool (true (and StartBool StartBool) (or StartBool_1 StartBool_1) (< Start_5 Start) (<= Start_5 Start_12) (= Start_6 Start_3) (>= Start_6 Start_7) (> Start_4 Start_11)))
   (Start_12 Int (5 (- Start_5) (- Start_7 Start_11) (+ Start_6 Start_7) (mod Start_4 Start_6) (abs Start_6) (ite StartBool_1 Start_10 Start_10)))
   (Start_3 Int (2 (- Start_3 Start) (+ Start_1 Start_4) (mod Start_4 Start)))
   (Start_2 Int (2 y 5 3 1 0 x 4 (- Start_2 Start_3) (+ Start_3 Start_5) (* Start Start_2) (mod Start Start_1)))
   (Start_1 Int (4 (mod Start_2 Start_12) (abs Start_10) (ite StartBool_2 Start_1 Start)))
   (Start_10 Int (x (- Start_1) (+ Start_2 Start_5) (* Start Start_6) (mod Start_10 Start_9) (abs Start_1) (ite StartBool_1 Start_6 Start_2)))
   (Start_5 Int (y (- Start_6) (- Start_2 Start_4) (abs Start_2) (ite StartBool Start Start_6)))
   (Start_6 Int (0 (- Start_3) (mod Start_7 Start_4)))
   (StartBool_2 Bool (true (<= Start_4 Start_2) (>= Start_2 Start_10) (> Start_3 Start_3)))
   (Start_7 Int (1 3 (- Start_8 Start_5) (div Start Start_1) (mod Start_2 Start_2) (ite StartBool Start_9 Start_4)))
   (Start_9 Int (0 (+ Start_5 Start_10) (abs Start_11)))
   (Start_11 Int (5 1 0 4 x (- Start_2) (- Start_10 Start_11) (abs Start_3)))
   (Start_4 Int (x (- Start_1) (- Start Start_2) (+ Start_1 Start_3) (abs Start_3)))
   (Start_8 Int (2 3 5 1 (+ Start_6 Start_7) (div Start_9 Start_6) (mod Start_11 Start_10) (ite StartBool Start Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (+ 1 5) (* 3 y))))

(check-synth)
