(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_17 Int) (Start_15 Int) (Start_1 Int) (Start_11 Int) (Start_12 Int) (Start_10 Int) (Start_2 Int) (Start_14 Int) (Start_4 Int) (StartBool_4 Bool) (Start_3 Int) (Start_5 Int) (StartBool_1 Bool) (Start_18 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_7 Int) (StartBool_6 Bool) (Start_8 Int) (Start_6 Int) (StartBool_7 Bool) (Start_13 Int) (StartBool_8 Bool) (StartBool_5 Bool) (Start_9 Int))
  ((Start Int (1 4 x 2 0 3 (- Start) (- Start Start_1) (+ Start Start_1) (div Start_2 Start_2) (mod Start_3 Start_2)))
   (StartBool Bool (true false (or StartBool_3 StartBool_7) (< Start_13 Start_12) (= Start_5 Start_10) (> Start_13 Start_13)))
   (Start_16 Int (4 (- Start_1) (* Start_3 Start_11) (div Start_14 Start_9) (abs Start_13)))
   (Start_17 Int (x 2 3 (+ Start_10 Start_18) (* Start_2 Start_16) (div Start_3 Start_9) (mod Start_3 Start_13)))
   (Start_15 Int (4 (- Start_2) (+ Start_10 Start_9) (* Start_1 Start_12) (div Start_1 Start_4) (abs Start) (ite StartBool_6 Start_10 Start_11)))
   (Start_1 Int (y (- Start_1) (+ Start_8 Start_8) (div Start_8 Start_12) (ite StartBool_1 Start_3 Start_9)))
   (Start_11 Int (1 (- Start_3) (- Start_3 Start_6) (+ Start_5 Start_12) (div Start_7 Start_11) (mod Start_10 Start_2) (abs Start_1) (ite StartBool_8 Start_9 Start_6)))
   (Start_12 Int (5 1 (+ Start_5 Start_11) (* Start_3 Start_1) (mod Start_1 Start)))
   (Start_10 Int (3 4 (- Start_2) (- Start_3 Start_2) (* Start_11 Start_12) (div Start_4 Start_1) (ite StartBool_1 Start Start)))
   (Start_2 Int (x 5 0 (- Start_4) (- Start_4 Start_4) (abs Start) (ite StartBool_2 Start_1 Start_10)))
   (Start_14 Int (4 1 3 x 2 (- Start_16) (- Start_8 Start_10) (+ Start_13 Start_4) (* Start_13 Start_17) (div Start_1 Start_3) (abs Start_7) (ite StartBool_1 Start_17 Start_3)))
   (Start_4 Int (3 (- Start_2 Start_8) (abs Start_9) (ite StartBool_5 Start_6 Start_7)))
   (StartBool_4 Bool (false (< Start_1 Start_1) (<= Start_6 Start_9) (> Start_2 Start_5)))
   (Start_3 Int (4 (- Start_4) (- Start Start) (+ Start_3 Start_4) (mod Start_4 Start_4) (abs Start_4) (ite StartBool_1 Start Start)))
   (Start_5 Int (3 x 0 (mod Start Start_6) (abs Start_8)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool_3) (<= Start_3 Start_2)))
   (Start_18 Int (y x (- Start_1) (- Start_8 Start_4) (div Start_12 Start_6) (mod Start_11 Start_7) (ite StartBool_6 Start_4 Start_11)))
   (StartBool_3 Bool (true (> Start_2 Start_3)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_2 StartBool_4) (or StartBool StartBool_2) (< Start_4 Start_1) (<= Start_1 Start_3) (= Start_5 Start_3) (>= Start_5 Start_6)))
   (Start_7 Int (0 y (- Start_2) (- Start_7 Start_3) (* Start_5 Start_1) (ite StartBool_1 Start_6 Start_2)))
   (StartBool_6 Bool (true (or StartBool_7 StartBool_7) (< Start_2 Start_4) (= Start_7 Start_5) (>= Start_4 Start_6)))
   (Start_8 Int (y (- Start_6) (+ Start_2 Start_4) (* Start_7 Start_2) (mod Start_4 Start_6) (ite StartBool_5 Start_9 Start_7)))
   (Start_6 Int (0 3 1 (- Start_1) (+ Start_4 Start_6) (* Start_5 Start_6) (ite StartBool_5 Start_1 Start)))
   (StartBool_7 Bool (true false (not StartBool_6) (and StartBool_3 StartBool_5)))
   (Start_13 Int (1 0 (- Start_11) (- Start_9 Start_3) (+ Start_14 Start_5) (div Start_7 Start_13) (abs Start_9) (ite StartBool_8 Start_11 Start_15)))
   (StartBool_8 Bool (true false (not StartBool_4) (<= Start_11 Start_6) (= Start Start_11) (>= Start_1 Start_3)))
   (StartBool_5 Bool (false true (not StartBool_3) (and StartBool_1 StartBool_6) (or StartBool_2 StartBool_1) (>= Start_2 Start_7)))
   (Start_9 Int (y 1 2 x 5 (+ Start_8 Start_9) (mod Start_1 Start_3) (abs Start_2) (ite StartBool_3 Start_5 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod 2 x))))

(check-synth)
