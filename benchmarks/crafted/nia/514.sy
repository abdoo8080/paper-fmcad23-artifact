(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (StartBool_5 Bool) (Start_6 Int) (Start_10 Int) (Start_14 Int) (Start_13 Int) (Start_16 Int) (StartBool_2 Bool) (Start_4 Int) (Start_1 Int) (StartBool_4 Bool) (Start_7 Int) (Start_15 Int) (Start_5 Int) (Start_11 Int) (StartBool_3 Bool) (Start_17 Int) (Start_3 Int) (Start_12 Int) (Start_8 Int) (StartBool_1 Bool) (Start_9 Int))
  ((Start Int (x (- Start_1) (- Start_1 Start_1)))
   (StartBool Bool (true (< Start_5 Start_3) (<= Start_10 Start_6) (= Start_16 Start_16) (>= Start_16 Start_1)))
   (Start_2 Int (4 3 0 (- Start_1) (- Start_2 Start_2) (abs Start_13)))
   (StartBool_5 Bool (true false (and StartBool_5 StartBool_2) (<= Start Start_15) (= Start_15 Start_6)))
   (Start_6 Int (3 (- Start_8 Start_14) (+ Start_15 Start_9) (div Start_16 Start_10) (mod Start_11 Start_11)))
   (Start_10 Int (4 x (+ Start_12 Start_1) (* Start_3 Start_1) (mod Start_7 Start_2) (ite StartBool Start_1 Start_15)))
   (Start_14 Int (5 (+ Start_6 Start) (mod Start_12 Start) (abs Start_6)))
   (Start_13 Int (2 5 (+ Start_14 Start_2) (* Start_8 Start_1) (div Start_10 Start_8) (mod Start_7 Start_11) (ite StartBool Start_10 Start_6)))
   (Start_16 Int (0 (- Start_6 Start_7) (* Start Start_7) (ite StartBool_5 Start_11 Start_15)))
   (StartBool_2 Bool (false (< Start_3 Start_10) (>= Start_2 Start_3) (> Start_2 Start_11)))
   (Start_4 Int (4 3 (abs Start_17)))
   (Start_1 Int (0 3 x 4 1 (- Start_2) (* Start_1 Start) (div Start_2 Start_3)))
   (StartBool_4 Bool (false true (and StartBool StartBool_2) (or StartBool StartBool_2) (= Start_8 Start_3) (> Start_8 Start_5)))
   (Start_7 Int (3 x (- Start_3) (+ Start_5 Start_7) (div Start_3 Start_3) (mod Start Start_4)))
   (Start_15 Int (2 1 0 (- Start_14) (+ Start_11 Start) (* Start_1 Start_4) (div Start_14 Start_4) (abs Start_4)))
   (Start_5 Int (2 4 (- Start_2) (- Start_5 Start) (+ Start_1 Start_6) (* Start_1 Start) (ite StartBool_1 Start_5 Start_7)))
   (Start_11 Int (y (mod Start_12 Start_7) (abs Start_6)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_3) (< Start_4 Start_1) (> Start_3 Start_1)))
   (Start_17 Int (3 1 x 5 (div Start_4 Start_14) (ite StartBool Start_3 Start_11)))
   (Start_3 Int (3 (+ Start_4 Start_3) (mod Start_3 Start_1) (ite StartBool Start Start_5)))
   (Start_12 Int (y 1 (- Start_7) (+ Start Start_10) (* Start_3 Start_8) (div Start_4 Start_13) (ite StartBool Start_7 Start_5)))
   (Start_8 Int (4 1 (+ Start_6 Start_3) (* Start_8 Start_1) (div Start_4 Start_6) (mod Start_3 Start_9) (abs Start)))
   (StartBool_1 Bool (true false (not StartBool_2) (or StartBool StartBool_3) (>= Start_2 Start_2) (> Start_1 Start)))
   (Start_9 Int (2 (- Start_3 Start_1) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (* 4 (- x 3)))))

(check-synth)
