(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_11 Int) (Start_5 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_21 Int) (Start_9 Int) (Start_23 Int) (Start_10 Int) (Start_6 Int) (Start_1 Int) (Start_7 Int) (Start_2 Int) (Start_22 Int) (StartBool_2 Bool) (Start_12 Int) (Start_3 Int) (Start_14 Int) (Start_13 Int) (Start_15 Int) (Start_18 Int) (Start_20 Int) (Start_8 Int) (StartBool_4 Bool) (Start_19 Int) (StartBool_5 Bool) (Start_17 Int) (Start_16 Int) (Start_24 Int))
  ((Start Int (2 x 5 3 y (- Start_1) (- Start Start_2) (+ Start_1 Start_1) (* Start Start_1) (mod Start_2 Start_2)))
   (StartBool Bool (true (and StartBool_4 StartBool) (< Start_19 Start_14) (<= Start_19 Start_14) (= Start_8 Start_5) (>= Start_12 Start_24)))
   (Start_4 Int (x 2 y (- Start_6) (- Start_11 Start_8) (* Start_4 Start_12) (div Start_10 Start_10)))
   (Start_11 Int (x (- Start_4) (- Start_5 Start_5) (+ Start_5 Start_5) (* Start_2 Start_1) (mod Start_10 Start_3) (abs Start_2) (ite StartBool_3 Start_4 Start_5)))
   (Start_5 Int (4 (- Start_1 Start_10) (* Start_5 Start_8) (div Start_5 Start_6) (abs Start_5) (ite StartBool_2 Start_1 Start_11)))
   (StartBool_1 Bool (false true (<= Start_10 Start_9) (= Start_3 Start_6) (>= Start_10 Start_5) (> Start Start_2)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool) (or StartBool_1 StartBool) (< Start_6 Start_3) (= Start Start_6)))
   (Start_21 Int (5 2 (- Start_14) (div Start_6 Start_6) (abs Start_18)))
   (Start_9 Int (3 4 (- Start_4) (- Start_9 Start_6) (+ Start_9 Start_1)))
   (Start_23 Int (4 (- Start_18 Start_2) (+ Start_21 Start_16) (mod Start_9 Start_19) (abs Start_4) (ite StartBool_1 Start_17 Start_24)))
   (Start_10 Int (5 0 (- Start_3) (div Start_8 Start_2) (mod Start_9 Start_4) (abs Start_9) (ite StartBool_2 Start_6 Start_2)))
   (Start_6 Int (5 2 0 1 x (- Start_7 Start_8) (+ Start_5 Start_6) (mod Start_1 Start_3) (ite StartBool_1 Start_4 Start_9)))
   (Start_1 Int (2 x (- Start_18) (+ Start_19 Start_20) (div Start_14 Start_4)))
   (Start_7 Int (3 x (+ Start_2 Start) (* Start_2 Start_3) (div Start Start_2)))
   (Start_2 Int (2 (- Start_3) (div Start Start_1) (mod Start_4 Start_5) (ite StartBool Start_2 Start_6)))
   (Start_22 Int (3 (- Start_14) (- Start_1 Start_19) (* Start_10 Start_18) (mod Start_23 Start_19) (ite StartBool Start_19 Start_10)))
   (StartBool_2 Bool (true (or StartBool_2 StartBool_2) (>= Start_8 Start_4) (> Start_5 Start_9)))
   (Start_12 Int (3 y (* Start_12 Start_1) (mod Start_9 Start_10) (ite StartBool_2 Start_13 Start_4)))
   (Start_3 Int (x (- Start_14) (- Start_9 Start_9) (+ Start_11 Start_11)))
   (Start_14 Int (5 2 (- Start_15 Start_3) (+ Start_1 Start_3) (div Start_2 Start) (mod Start Start_2) (ite StartBool Start_1 Start_3)))
   (Start_13 Int (1 2 (- Start_8 Start) (+ Start_3 Start_12) (* Start_2 Start_13) (div Start_9 Start_13) (abs Start_12) (ite StartBool_2 Start_11 Start_4)))
   (Start_15 Int (0 (- Start_10) (- Start_12 Start_15) (* Start_16 Start) (div Start_10 Start_17) (abs Start_6) (ite StartBool_4 Start_1 Start_18)))
   (Start_18 Int (2 (+ Start_14 Start_18) (div Start_11 Start_10) (mod Start_4 Start_6) (abs Start_8)))
   (Start_20 Int (2 1 5 x (- Start_18) (+ Start_19 Start_15) (* Start_6 Start_6) (mod Start_5 Start_9) (abs Start_8) (ite StartBool_1 Start_10 Start_8)))
   (Start_8 Int (4 (- Start Start_1) (* Start_3 Start_3) (div Start_10 Start) (abs Start_5) (ite StartBool_1 Start_10 Start_3)))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_4) (< Start_16 Start_15) (<= Start_2 Start_14) (>= Start_17 Start_14)))
   (Start_19 Int (0 (- Start_9) (+ Start_7 Start_4) (div Start_7 Start_7) (ite StartBool_1 Start_15 Start_20)))
   (StartBool_5 Bool (true (not StartBool_4) (< Start_19 Start_4) (>= Start_15 Start_1)))
   (Start_17 Int (0 2 y 5 3 (- Start_19) (- Start_9 Start_16) (abs Start_9)))
   (Start_16 Int (y 4 (- Start_21 Start_10) (* Start_5 Start_22) (div Start_10 Start_4) (mod Start_16 Start_10) (abs Start_8) (ite StartBool_2 Start Start_10)))
   (Start_24 Int (0 (- Start_8) (mod Start_4 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div x 5) 2)))

(check-synth)
