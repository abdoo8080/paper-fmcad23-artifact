(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_9 Bool) (StartBool_7 Bool) (Start_13 Int) (StartBool_8 Bool) (StartBool_5 Bool) (StartBool_2 Bool) (Start_1 Int) (Start_8 Int) (Start_10 Int) (Start_4 Int) (Start_7 Int) (StartBool_4 Bool) (Start_2 Int) (Start_5 Int) (StartBool_6 Bool) (StartBool_1 Bool) (Start_6 Int) (Start_9 Int) (Start_12 Int) (Start_3 Int) (Start_11 Int))
  ((Start Int (2 (- Start) (+ Start Start) (div Start_1 Start_2) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true false (not StartBool_5) (and StartBool_6 StartBool_6) (> Start_2 Start_10)))
   (StartBool_3 Bool (true false (not StartBool_7) (<= Start_8 Start_6) (>= Start_8 Start) (> Start_3 Start_7)))
   (StartBool_9 Bool (false (and StartBool StartBool_5) (< Start_5 Start_1) (<= Start_5 Start_9) (= Start_8 Start_1) (> Start_8 Start_9)))
   (StartBool_7 Bool (true (and StartBool_9 StartBool_3) (or StartBool_6 StartBool_8) (<= Start_3 Start_1)))
   (Start_13 Int (1 3 (mod Start_1 Start_11)))
   (StartBool_8 Bool (true false (not StartBool_5) (<= Start_12 Start_2) (>= Start_2 Start_5)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool_3) (or StartBool_2 StartBool_6) (= Start_11 Start_7) (>= Start_2 Start_12)))
   (StartBool_2 Bool (false true (not StartBool_5) (and StartBool_2 StartBool_1) (or StartBool_7 StartBool_8) (< Start_11 Start_7) (<= Start_12 Start_12)))
   (Start_1 Int (0 2 (- Start_13) (- Start_4 Start) (+ Start_10 Start_7) (* Start_3 Start_9) (mod Start_1 Start_9) (ite StartBool_2 Start_12 Start_4)))
   (Start_8 Int (0 (+ Start_7 Start_9) (* Start_3 Start_8) (abs Start_8) (ite StartBool Start_1 Start_9)))
   (Start_10 Int (0 (- Start_10) (- Start_11 Start_6) (* Start_4 Start_8) (div Start_4 Start_1) (abs Start_10) (ite StartBool_2 Start_6 Start_12)))
   (Start_4 Int (4 (- Start_1 Start_7) (+ Start_5 Start_9) (* Start_7 Start_6) (abs Start_3) (ite StartBool_4 Start_7 Start_1)))
   (Start_7 Int (x 5 y 4 2 (- Start_3) (+ Start_4 Start_1) (* Start_2 Start_2) (div Start_1 Start_1) (ite StartBool_3 Start_5 Start_3)))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_2) (< Start_11 Start_1) (<= Start_10 Start_1) (= Start_11 Start_9)))
   (Start_2 Int (1 0 (- Start) (- Start_11 Start_10) (* Start_2 Start_7) (abs Start_7)))
   (Start_5 Int (1 x (- Start_3 Start_6) (+ Start_7 Start_1) (* Start_3 Start_4) (div Start_6 Start_7) (mod Start_5 Start_5) (ite StartBool Start_7 Start_7)))
   (StartBool_6 Bool (false true (and StartBool_3 StartBool) (or StartBool_7 StartBool_8) (<= Start_4 Start_12) (= Start_13 Start)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_3) (< Start_1 Start) (> Start_3 Start_3)))
   (Start_6 Int (x (- Start_1 Start_2) (* Start_2 Start_8) (div Start_8 Start) (mod Start_3 Start_3) (abs Start) (ite StartBool_1 Start_3 Start_8)))
   (Start_9 Int (1 (- Start_2 Start_2) (+ Start_1 Start_1) (* Start_3 Start) (div Start_1 Start_10) (abs Start) (ite StartBool_2 Start Start_4)))
   (Start_12 Int (x 0 (- Start_7 Start_12) (* Start_10 Start_10) (div Start_9 Start_11) (mod Start_6 Start_5)))
   (Start_3 Int (4 0 (+ Start Start_2) (* Start Start_4) (abs Start) (ite StartBool_1 Start_5 Start_1)))
   (Start_11 Int (y (- Start_6) (- Start Start_1) (+ Start_2 Start_11) (* Start_8 Start_2) (mod Start_7 Start_11) (abs Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (- x) x)))

(check-synth)
