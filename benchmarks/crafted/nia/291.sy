(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_10 Int) (Start_12 Int) (Start_1 Int) (Start_2 Int) (Start_5 Int) (Start_3 Int) (Start_6 Int) (Start_7 Int) (Start_9 Int) (Start_8 Int) (Start_4 Int) (StartBool_1 Bool) (Start_11 Int))
  ((Start Int (1 2 (- Start) (+ Start Start) (mod Start_1 Start)))
   (StartBool Bool (true (not StartBool) (or StartBool_1 StartBool_1) (<= Start_3 Start_2)))
   (StartBool_2 Bool (true (>= Start_8 Start_12)))
   (Start_10 Int (4 (+ Start_7 Start_6) (mod Start_5 Start_7) (ite StartBool_2 Start Start_3)))
   (Start_12 Int (4 (- Start_1) (+ Start_12 Start_10) (abs Start)))
   (Start_1 Int (3 (* Start_1 Start) (div Start_2 Start_1) (mod Start Start_1)))
   (Start_2 Int (1 3 (* Start_2 Start) (ite StartBool Start_1 Start_1)))
   (Start_5 Int (1 x (- Start_3) (- Start_4 Start_2) (* Start_4 Start_7) (mod Start_3 Start_3) (abs Start_8) (ite StartBool Start Start_8)))
   (Start_3 Int (4 1 5 (- Start_3) (- Start_4 Start_1) (+ Start_2 Start_5) (mod Start_4 Start_4) (ite StartBool_1 Start_2 Start_6)))
   (Start_6 Int (2 x 4 (- Start_7) (mod Start_6 Start_6) (abs Start_1) (ite StartBool Start_3 Start)))
   (Start_7 Int (2 (- Start_3 Start) (+ Start Start_2) (mod Start_2 Start_5)))
   (Start_9 Int (5 (- Start_2) (+ Start_8 Start_3) (abs Start_8)))
   (Start_8 Int (3 1 (- Start Start_5) (* Start_4 Start_4) (div Start_3 Start) (mod Start_5 Start_8) (abs Start_3)))
   (Start_4 Int (3 2 (- Start_2) (+ Start_8 Start_8) (* Start_7 Start_5) (mod Start_8 Start_9) (abs Start_5) (ite StartBool_1 Start_1 Start_8)))
   (StartBool_1 Bool (true false (not StartBool_1) (or StartBool StartBool_2) (>= Start_10 Start_11)))
   (Start_11 Int (2 (- Start_9 Start_5) (ite StartBool_2 Start_12 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod y 2))))

(check-synth)
