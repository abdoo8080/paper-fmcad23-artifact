(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_14 Int) (Start_15 Int) (Start_11 Int) (Start_1 Int) (Start_12 Int) (Start_2 Int) (Start_10 Int) (Start_5 Int) (StartBool_3 Bool) (Start_9 Int) (Start_6 Int) (Start_7 Int) (StartBool_1 Bool) (Start_4 Int) (StartBool_2 Bool) (StartBool_8 Bool) (Start_13 Int) (Start_3 Int) (Start_8 Int) (StartBool_6 Bool) (StartBool_4 Bool) (StartBool_5 Bool))
  ((Start Int (5 3 (- Start_1 Start_2) (* Start Start_3) (mod Start_3 Start_2) (ite StartBool_1 Start Start_1)))
   (StartBool Bool (true (not StartBool_6) (and StartBool_7 StartBool_7) (<= Start_11 Start_12) (= Start_6 Start_8)))
   (StartBool_7 Bool (true (not StartBool_5) (or StartBool_8 StartBool_8) (<= Start_11 Start) (> Start_15 Start_14)))
   (Start_14 Int (0 3 (- Start_2 Start_5) (+ Start_11 Start_5) (* Start_15 Start_11) (abs Start) (ite StartBool_5 Start_7 Start_8)))
   (Start_15 Int (3 (- Start_1 Start_1) (* Start_6 Start_2) (div Start_10 Start_14) (abs Start_5)))
   (Start_11 Int (3 (- Start_14) (+ Start_10 Start_7) (* Start_9 Start_6) (div Start Start_8) (mod Start_13 Start_7)))
   (Start_1 Int (5 (- Start_2 Start_15) (+ Start_11 Start_5) (* Start_7 Start_1) (ite StartBool_2 Start_5 Start_3)))
   (Start_12 Int (4 5 2 1 (- Start_7) (+ Start Start_13) (* Start_11 Start_1) (div Start_11 Start_13) (ite StartBool Start_6 Start_8)))
   (Start_2 Int (4 (- Start_11 Start_8) (+ Start_10 Start_6) (* Start_1 Start_3) (ite StartBool_5 Start_6 Start_12)))
   (Start_10 Int (y (mod Start_9 Start_6) (abs Start_7) (ite StartBool_4 Start_8 Start_3)))
   (Start_5 Int (0 (- Start_7) (* Start_5 Start_2) (mod Start_4 Start_2) (ite StartBool Start_1 Start)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_4) (< Start_4 Start_8)))
   (Start_9 Int (y 5 (- Start_6) (+ Start_3 Start_10) (* Start_3 Start_9) (abs Start_1)))
   (Start_6 Int (y 4 (- Start_4) (+ Start_3 Start_1) (* Start Start_6) (div Start_5 Start_5) (abs Start_3)))
   (Start_7 Int (x (div Start_5 Start_2) (mod Start_2 Start_1) (abs Start_5) (ite StartBool_1 Start_5 Start_2)))
   (StartBool_1 Bool (false (not StartBool) (or StartBool_1 StartBool_1) (< Start_2 Start_1) (<= Start_3 Start_2) (> Start_3 Start_4)))
   (Start_4 Int (4 (- Start_1) (+ Start_5 Start_2) (* Start_5 Start_6) (mod Start_5 Start_4) (abs Start_2)))
   (StartBool_2 Bool (false true (>= Start_2 Start_6) (> Start_6 Start_8)))
   (StartBool_8 Bool (false true (not StartBool_7) (or StartBool_3 StartBool_3) (< Start_3 Start_6) (<= Start_8 Start_13) (= Start_6 Start_9) (>= Start_3 Start_1) (> Start_9 Start_9)))
   (Start_13 Int (0 x 4 y 5 2 (- Start_8) (+ Start_12 Start_7) (* Start_10 Start_10) (abs Start)))
   (Start_3 Int (0 x (- Start_3) (* Start_6 Start_1) (ite StartBool_2 Start_1 Start_2)))
   (Start_8 Int (x (+ Start_1 Start_5) (div Start_9 Start_8) (ite StartBool_3 Start_5 Start_1)))
   (StartBool_6 Bool (true false (and StartBool_6 StartBool_1) (< Start_6 Start_5) (<= Start_5 Start_1) (> Start_4 Start_10)))
   (StartBool_4 Bool (true false (not StartBool_4) (and StartBool_5 StartBool_3) (< Start_2 Start_6) (= Start_1 Start_3) (>= Start Start_9) (> Start_3 Start_3)))
   (StartBool_5 Bool (false (and StartBool_5 StartBool_3) (or StartBool_2 StartBool_2) (<= Start_8 Start_3) (>= Start_1 Start_1) (> Start Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (abs y) y)))

(check-synth)
