(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_10 Int) (Start_12 Int) (Start_13 Int) (Start_15 Int) (Start_11 Int) (Start_3 Int) (StartBool_2 Bool) (Start_5 Int) (Start_8 Int) (Start_1 Int) (StartBool_4 Bool) (StartBool_6 Bool) (Start_9 Int) (StartBool_5 Bool) (Start_2 Int) (StartBool_1 Bool) (Start_4 Int) (Start_6 Int) (Start_14 Int) (Start_7 Int))
  ((Start Int (4 x y (- Start Start) (* Start_1 Start) (div Start_2 Start_1)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (= Start_14 Start_11) (>= Start_11 Start_10)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_2) (<= Start_9 Start_10) (= Start_15 Start_6) (>= Start_5 Start_4) (> Start_3 Start_7)))
   (Start_10 Int (4 0 5 (- Start_8) (+ Start_2 Start_1) (div Start_15 Start_4)))
   (Start_12 Int (1 4 x 2 y 3 (- Start_14 Start_15) (* Start_6 Start_8) (div Start_2 Start_6) (ite StartBool_3 Start_2 Start)))
   (Start_13 Int (1 (* Start_6 Start_10) (mod Start_10 Start_13) (abs Start_3)))
   (Start_15 Int (y (- Start_2) (- Start_2 Start_11) (* Start_14 Start_14) (div Start_11 Start_14) (mod Start_14 Start_3)))
   (Start_11 Int (x 5 1 (+ Start Start_9) (* Start_3 Start_12) (div Start_3 Start_8) (mod Start_2 Start_3) (ite StartBool_5 Start_5 Start_13)))
   (Start_3 Int (2 (- Start_2 Start_7) (* Start_7 Start_3) (div Start_2 Start_12)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_3 StartBool_4) (< Start Start_4) (<= Start_4 Start_3) (= Start_2 Start_4) (>= Start_2 Start_2) (> Start_5 Start_1)))
   (Start_5 Int (4 (- Start_6) (* Start_2 Start_5) (mod Start_6 Start_4) (ite StartBool_5 Start Start_3)))
   (Start_8 Int (y (- Start_5) (- Start_4 Start_10) (+ Start_9 Start_6) (mod Start_2 Start_11)))
   (Start_1 Int (2 x (- Start_3) (+ Start_3 Start) (div Start_2 Start_4) (mod Start_1 Start_4) (abs Start_4)))
   (StartBool_4 Bool (false (not StartBool_6) (<= Start_5 Start_4)))
   (StartBool_6 Bool (true false (and StartBool_2 StartBool_1) (< Start_7 Start_2) (>= Start_1 Start_3)))
   (Start_9 Int (0 (- Start_7)))
   (StartBool_5 Bool (false true (not StartBool) (<= Start_2 Start_4) (= Start_3 Start) (> Start_2 Start)))
   (Start_2 Int (3 y 5 (* Start Start) (div Start_1 Start)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_2) (< Start_2 Start_4) (= Start_2 Start_2) (>= Start_1 Start_3) (> Start Start_1)))
   (Start_4 Int (2 4 0 (- Start_4 Start_1) (mod Start_3 Start_2) (ite StartBool_1 Start_3 Start_1)))
   (Start_6 Int (1 (- Start_6 Start_6) (+ Start Start) (* Start_5 Start_4) (abs Start_1)))
   (Start_14 Int (1 (- Start_14 Start_11) (mod Start_9 Start_11) (abs Start_1)))
   (Start_7 Int (x (+ Start_6 Start_1) (* Start Start_4) (div Start_2 Start_8) (mod Start_1 Start_4) (abs Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 2 (div 3 0))))

(check-synth)
