(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_19 Int) (Start_17 Int) (Start_18 Int) (Start_13 Int) (StartBool_3 Bool) (StartBool_7 Bool) (Start_16 Int) (Start_14 Int) (Start_1 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_4 Int) (StartBool_1 Bool) (Start_15 Int) (Start_5 Int) (Start_6 Int) (Start_7 Int) (Start_10 Int) (Start_8 Int) (StartBool_5 Bool) (Start_3 Int) (Start_9 Int) (Start_2 Int) (Start_11 Int) (Start_12 Int))
  ((Start Int (y 2 (- Start Start_1) (* Start_2 Start_3) (div Start Start_2) (mod Start Start_4) (ite StartBool Start_3 Start_2)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_6 StartBool_4) (< Start_17 Start_18) (<= Start_8 Start_14) (= Start_7 Start_3)))
   (StartBool_6 Bool (false (not StartBool_7) (and StartBool_4 StartBool_6) (<= Start_15 Start_14) (> Start_7 Start_7)))
   (Start_19 Int (y (- Start_11) (+ Start_16 Start_18) (* Start_18 Start_16) (div Start_2 Start_5) (ite StartBool_4 Start_3 Start_8)))
   (Start_17 Int (4 2 (- Start_15 Start_19) (* Start_9 Start_18) (div Start_8 Start_2) (abs Start_3)))
   (Start_18 Int (x (- Start_17) (- Start_14 Start_3) (div Start_14 Start_12) (abs Start_6)))
   (Start_13 Int (x 0 (- Start_16) (- Start_16 Start_3) (div Start_5 Start_16) (mod Start_10 Start_15)))
   (StartBool_3 Bool (false (not StartBool_4) (or StartBool_4 StartBool_3) (>= Start_9 Start_9)))
   (StartBool_7 Bool (false (< Start_3 Start_6) (>= Start_16 Start_1) (> Start_18 Start_10)))
   (Start_16 Int (1 (- Start_6 Start_13) (* Start_13 Start_16) (mod Start_15 Start_13)))
   (Start_14 Int (2 4 y 1 (- Start_2 Start) (mod Start_10 Start_8) (abs Start_14) (ite StartBool_3 Start_9 Start_3)))
   (Start_1 Int (5 y 0 (- Start_3 Start_13) (+ Start Start) (* Start_3 Start_14) (ite StartBool_5 Start_2 Start_9)))
   (StartBool_2 Bool (true (or StartBool_2 StartBool_3) (<= Start_6 Start_10) (> Start Start_14)))
   (StartBool_4 Bool (false (not StartBool_5) (< Start_3 Start_15) (<= Start_14 Start_5) (= Start_11 Start_12)))
   (Start_4 Int (4 5 2 (- Start_1 Start) (+ Start_4 Start_3) (div Start_4 Start_2) (abs Start) (ite StartBool Start_4 Start_3)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool) (or StartBool_1 StartBool) (= Start_2 Start_3)))
   (Start_15 Int (2 0 3 (- Start_14 Start_10) (+ Start_8 Start_2)))
   (Start_5 Int (y (- Start) (- Start_6 Start_8) (* Start_6 Start_2) (div Start_2 Start) (abs Start_6)))
   (Start_6 Int (1 0 (- Start_5) (- Start_3 Start_6) (mod Start_5 Start_1) (ite StartBool Start_7 Start_4)))
   (Start_7 Int (0 x (+ Start_7 Start_2) (* Start_2 Start_1) (abs Start_1)))
   (Start_10 Int (x 0 (+ Start_7 Start_7) (* Start_5 Start_4) (mod Start_5 Start_4) (abs Start_3)))
   (Start_8 Int (y (- Start) (+ Start_8 Start_9) (mod Start_4 Start_3)))
   (StartBool_5 Bool (false true (and StartBool_2 StartBool_1) (= Start_16 Start_3) (>= Start_10 Start_5)))
   (Start_3 Int (4 x 0 1 2 (- Start) (- Start_3 Start_1) (* Start_5 Start_6) (abs Start_5) (ite StartBool_1 Start_5 Start_4)))
   (Start_9 Int (1 5 3 (- Start_6) (* Start_9 Start_10) (div Start_2 Start_4) (mod Start_8 Start_5) (ite StartBool Start_2 Start_10)))
   (Start_2 Int (4 y 2 (abs Start_9) (ite StartBool_1 Start_11 Start_7)))
   (Start_11 Int (1 5 (- Start_4 Start_3) (* Start_8 Start_2) (div Start_4 Start_12) (ite StartBool_1 Start_7 Start_7)))
   (Start_12 Int (3 (- Start_2) (- Start_6 Start_9) (* Start_1 Start_7) (div Start_7 Start) (mod Start_13 Start_2) (abs Start_5) (ite StartBool_2 Start_12 Start_13)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (* 2 y) (* (mod 4 0) 4))))

(check-synth)
