(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_5 Int) (Start_7 Int) (Start_4 Int) (Start_6 Int) (Start_8 Int) (Start_1 Int) (StartBool_1 Bool) (Start_3 Int) (Start_9 Int) (StartBool_2 Bool) (Start_10 Int))
  ((Start Int (0 1 4 y (- Start Start) (+ Start_1 Start_2) (* Start_2 Start_1)))
   (StartBool Bool (false true (not StartBool_1) (>= Start_10 Start_10)))
   (Start_2 Int (y 4 1 2 x 5 (- Start_1) (- Start_3 Start_4) (div Start_2 Start) (mod Start_2 Start_4) (abs Start_5)))
   (Start_5 Int (5 (- Start_5 Start_4) (+ Start_1 Start_2) (* Start Start_3)))
   (Start_7 Int (4 1 3 (+ Start_4 Start_7) (div Start_1 Start_8) (mod Start_6 Start_2) (abs Start_3) (ite StartBool Start_2 Start_5)))
   (Start_4 Int (5 1 3 (div Start_3 Start_5) (abs Start_4)))
   (Start_6 Int (0 (- Start_4) (+ Start_2 Start_1) (* Start_7 Start_5) (div Start_2 Start_2)))
   (Start_8 Int (y 4 (- Start_4) (+ Start_8 Start_7) (abs Start_3)))
   (Start_1 Int (3 y 0 x 2 (- Start_7) (- Start_3 Start_3) (+ Start_8 Start_5) (div Start_7 Start_2) (mod Start_2 Start) (ite StartBool_1 Start_5 Start_6)))
   (StartBool_1 Bool (true false (not StartBool_2) (< Start_4 Start_2) (<= Start_3 Start_2) (= Start_3 Start) (>= Start_2 Start_2) (> Start_7 Start_9)))
   (Start_3 Int (2 (- Start_4) (- Start_4 Start_1) (+ Start_6 Start_1) (mod Start_1 Start) (abs Start_2)))
   (Start_9 Int (4 5 x 1 (- Start) (- Start_5 Start_2) (+ Start_9 Start_3) (mod Start_8 Start_4) (ite StartBool Start_1 Start_3)))
   (StartBool_2 Bool (false (< Start_10 Start_4) (<= Start_8 Start_9)))
   (Start_10 Int (y 3 4 (- Start_4 Start_10) (* Start_2 Start_3) (ite StartBool Start_10 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 2 (- x))))

(check-synth)
