(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_13 Int) (Start_14 Int) (Start_16 Int) (Start_15 Int) (Start_11 Int) (StartBool_3 Bool) (Start_6 Int) (Start_4 Int) (Start_9 Int) (StartBool_4 Bool) (Start_3 Int) (StartBool_1 Bool) (Start_5 Int) (Start_7 Int) (Start_1 Int) (Start_10 Int) (Start_2 Int) (Start_8 Int) (Start_12 Int) (StartBool_2 Bool))
  ((Start Int (1 2 (- Start) (- Start Start_1) (+ Start_2 Start_2) (* Start_1 Start) (div Start_1 Start_1)))
   (StartBool Bool (true false (not StartBool_4) (and StartBool_3 StartBool_1) (= Start_2 Start_5) (> Start_11 Start_3)))
   (Start_13 Int (y 5 (+ Start_16 Start_3) (div Start_3 Start_14) (mod Start_1 Start_3) (abs Start) (ite StartBool_4 Start_14 Start_1)))
   (Start_14 Int (2 (+ Start_6 Start_12) (* Start_10 Start_7) (div Start_16 Start_6) (mod Start_13 Start_13) (abs Start_1)))
   (Start_16 Int (5 y (- Start_7 Start_14) (+ Start Start_8) (* Start_10 Start_7) (mod Start_15 Start_6) (abs Start_11)))
   (Start_15 Int (x 3 (- Start_11) (- Start_2 Start_3) (div Start_8 Start_16) (mod Start_7 Start)))
   (Start_11 Int (5 2 0 y (- Start_11) (+ Start_6 Start_5) (div Start_3 Start_9) (abs Start_12) (ite StartBool_1 Start_6 Start)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool) (< Start_5 Start_6) (> Start_8 Start_10)))
   (Start_6 Int (y (abs Start_3) (ite StartBool Start_1 Start_1)))
   (Start_4 Int (y (- Start_3) (- Start_4 Start_2) (* Start_2 Start_1) (div Start Start_1) (mod Start Start_3)))
   (Start_9 Int (5 (* Start_8 Start_5) (div Start_2 Start_10)))
   (StartBool_4 Bool (true false (not StartBool_4) (or StartBool_4 StartBool_3) (<= Start_6 Start_8)))
   (Start_3 Int (0 1 3 (- Start_1) (- Start_2 Start_3) (+ Start_2 Start_1) (* Start_5 Start_4) (abs Start_6) (ite StartBool_1 Start Start)))
   (StartBool_1 Bool (true (< Start_6 Start_1) (<= Start_1 Start_3)))
   (Start_5 Int (2 1 (+ Start_3 Start_4) (div Start_2 Start_7) (abs Start_4)))
   (Start_7 Int (x (div Start_3 Start_7) (ite StartBool Start_7 Start_2)))
   (Start_1 Int (3 (- Start_8 Start_6) (* Start_1 Start_1) (div Start_8 Start_5)))
   (Start_10 Int (3 (- Start_10) (- Start_5 Start_1) (div Start_1 Start_8) (mod Start_7 Start_1) (ite StartBool Start Start_10)))
   (Start_2 Int (x (- Start_3 Start_1) (+ Start_3 Start_4) (* Start_4 Start_4) (div Start_3 Start_3) (abs Start_1) (ite StartBool Start_1 Start_2)))
   (Start_8 Int (4 (* Start_5 Start_4) (div Start_1 Start_3) (mod Start_7 Start_8) (ite StartBool_2 Start_7 Start_6)))
   (Start_12 Int (x (- Start_3 Start_5) (* Start_2 Start_13) (div Start_14 Start_4) (mod Start_11 Start_1) (ite StartBool_4 Start_15 Start_1)))
   (StartBool_2 Bool (false true (or StartBool_3 StartBool_4) (<= Start Start_6) (>= Start_6 Start_9) (> Start_5 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (+ 2 (abs x)) (+ y 2))))

(check-synth)
