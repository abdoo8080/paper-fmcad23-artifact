(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_15 Int) (Start_14 Int) (Start_13 Int) (StartBool_4 Bool) (Start_12 Int) (Start_11 Int) (Start_1 Int) (Start_5 Int) (Start_2 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_4 Int) (Start_3 Int) (StartBool_2 Bool) (Start_6 Int) (Start_9 Int) (Start_7 Int) (StartBool_3 Bool) (Start_8 Int) (Start_10 Int))
  ((Start Int (x (- Start) (- Start Start_1) (+ Start_2 Start_2) (div Start_3 Start_1) (abs Start_2) (ite StartBool_1 Start Start_1)))
   (StartBool Bool (true))
   (StartBool_6 Bool (true false (and StartBool_2 StartBool_1) (or StartBool_6 StartBool_3) (= Start_3 Start_14) (>= Start Start)))
   (Start_15 Int (1 (- Start_12) (abs Start_13) (ite StartBool_5 Start_2 Start_2)))
   (Start_14 Int (2 (- Start_2) (+ Start_3 Start_7) (div Start_14 Start) (mod Start_1 Start_11) (abs Start_11) (ite StartBool Start_2 Start_14)))
   (Start_13 Int (0 3 (- Start_14) (* Start_12 Start_5) (div Start_2 Start_1) (abs Start_4) (ite StartBool Start_13 Start_9)))
   (StartBool_4 Bool (false true (>= Start_9 Start_1) (> Start_2 Start_13)))
   (Start_12 Int (x (+ Start_6 Start_5)))
   (Start_11 Int (y x (- Start_1) (- Start_3 Start_7) (+ Start_7 Start_8) (* Start_4 Start_5) (div Start_12 Start_7) (mod Start_3 Start_5)))
   (Start_1 Int (y (- Start) (- Start_3 Start_15) (+ Start_12 Start_6) (* Start_5 Start_6) (ite StartBool_1 Start_8 Start_2)))
   (Start_5 Int (1 (- Start_4 Start_5) (* Start_3 Start_1) (div Start_1 Start_5)))
   (Start_2 Int (3 (- Start_1) (- Start_8 Start_9) (+ Start_1 Start) (div Start_4 Start_2) (abs Start_9)))
   (StartBool_5 Bool (false true (and StartBool_6 StartBool) (<= Start_3 Start_13) (>= Start_13 Start_6)))
   (StartBool_1 Bool (true false (or StartBool StartBool_1) (< Start Start_2) (<= Start_1 Start) (> Start_2 Start_4)))
   (Start_4 Int (x (* Start_5 Start) (mod Start_5 Start_5)))
   (Start_3 Int (0 x (- Start Start_3) (+ Start_3 Start_1) (* Start_3 Start_5) (ite StartBool_2 Start Start_2)))
   (StartBool_2 Bool (true (or StartBool_1 StartBool_3) (< Start_1 Start_6) (>= Start_2 Start_1) (> Start_1 Start_2)))
   (Start_6 Int (4 x 0 5 (- Start_1) (- Start_3 Start_7) (+ Start Start_5) (* Start_2 Start_3) (abs Start_5)))
   (Start_9 Int (4 (- Start_3 Start) (div Start_9 Start_5) (mod Start_3 Start_4) (ite StartBool_4 Start Start_10)))
   (Start_7 Int (1 (+ Start_1 Start_8) (mod Start_8 Start) (abs Start_2)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_3) (= Start_4 Start_1) (> Start_1 Start_5)))
   (Start_8 Int (3 4 5 0 (- Start_7) (mod Start_5 Start_5)))
   (Start_10 Int (1 3 (- Start_9) (div Start_2 Start_3) (mod Start_11 Start_1) (abs Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div 5 x) x)))

(check-synth)
