(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_1 Int) (Start_4 Int) (Start_3 Int) (StartBool_1 Bool) (Start_2 Int) (Start_6 Int) (Start_5 Int) (Start_7 Int) (Start_9 Int) (Start_11 Int) (Start_8 Int) (Start_10 Int) (StartBool_2 Bool))
  ((Start Int (4 1 2 y (- Start_1 Start_2) (* Start_3 Start_3) (div Start_3 Start_4) (mod Start Start) (abs Start) (ite StartBool Start Start_4)))
   (StartBool Bool (false true (and StartBool_2 StartBool_2) (or StartBool_2 StartBool_1) (< Start_11 Start_9) (= Start_2 Start_11)))
   (Start_12 Int (2 (- Start_8) (+ Start_6 Start_11) (* Start_12 Start_2) (mod Start_4 Start_10) (ite StartBool_2 Start_4 Start_10)))
   (Start_1 Int (2 y 0 4 (- Start_9 Start_5) (mod Start_6 Start_1) (abs Start_7) (ite StartBool Start Start_12)))
   (Start_4 Int (1 0 (- Start_3) (* Start_3 Start_4)))
   (Start_3 Int (4 0 5 1 2 (- Start_3 Start_2) (div Start_1 Start_3) (mod Start_1 Start_3) (ite StartBool_1 Start_2 Start)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool StartBool) (< Start_4 Start_5) (= Start_6 Start_3)))
   (Start_2 Int (0 (+ Start_3 Start_3) (* Start_1 Start_3) (div Start_4 Start) (abs Start_11)))
   (Start_6 Int (5 4 0 (- Start_3) (+ Start_6 Start_2) (mod Start Start_4)))
   (Start_5 Int (3 2 4 (- Start_5) (+ Start_3 Start_7) (div Start Start_6) (mod Start Start) (abs Start)))
   (Start_7 Int (0 (- Start_8) (- Start_6 Start_6) (div Start_1 Start_9) (abs Start_5) (ite StartBool Start_7 Start)))
   (Start_9 Int (2 y (- Start_4) (- Start_1 Start_7) (* Start_9 Start_2) (div Start_2 Start_4) (abs Start_4) (ite StartBool_2 Start_4 Start_4)))
   (Start_11 Int (2 0 (- Start_1) (- Start_1 Start_3) (mod Start_10 Start_7) (ite StartBool_1 Start_7 Start)))
   (Start_8 Int (x 3 1 (- Start_6) (* Start_8 Start_9) (div Start_2 Start_6) (mod Start_10 Start) (ite StartBool_2 Start_6 Start_3)))
   (Start_10 Int (y (+ Start_2 Start_2) (* Start Start_10) (div Start_6 Start_2) (ite StartBool_2 Start_2 Start_9)))
   (StartBool_2 Bool (false (>= Start_8 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (abs (mod (div 2 y) 0)))))

(check-synth)
