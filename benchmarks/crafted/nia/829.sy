(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_19 Int) (Start_18 Int) (Start_16 Int) (Start_2 Int) (StartBool_6 Bool) (StartBool_2 Bool) (Start_14 Int) (Start_15 Int) (StartBool_3 Bool) (Start_10 Int) (Start_13 Int) (Start_1 Int) (Start_5 Int) (Start_11 Int) (Start_20 Int) (Start_3 Int) (StartBool_5 Bool) (Start_6 Int) (StartBool_4 Bool) (Start_4 Int) (Start_7 Int) (StartBool_1 Bool) (Start_12 Int) (Start_9 Int) (Start_8 Int))
  ((Start Int (0 (- Start_1) (- Start_2 Start) (* Start Start_3) (div Start Start_1) (ite StartBool Start_3 Start_4)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (= Start_5 Start_20) (> Start_16 Start_14)))
   (Start_17 Int (0 (- Start_11 Start_12) (* Start_19 Start_11)))
   (Start_19 Int (0 (+ Start_9 Start_7) (mod Start_19 Start_2) (abs Start_13) (ite StartBool_3 Start_19 Start_6)))
   (Start_18 Int (0 5 y (- Start_10) (+ Start_15 Start_3) (* Start_16 Start_7) (mod Start_18 Start_9) (ite StartBool_5 Start_8 Start_11)))
   (Start_16 Int (0 3 (- Start_17 Start_4) (* Start_6 Start_1) (div Start_17 Start_16) (mod Start_9 Start_13) (abs Start_18) (ite StartBool_4 Start_16 Start_15)))
   (Start_2 Int (2 (- Start_19 Start_2) (+ Start_3 Start_5) (* Start_3 Start_10) (div Start_8 Start_17) (abs Start_10)))
   (StartBool_6 Bool (true (or StartBool_5 StartBool_1) (< Start_1 Start) (= Start_3 Start_4) (>= Start_19 Start_5)))
   (StartBool_2 Bool (true (not StartBool_1) (or StartBool_3 StartBool_1) (> Start Start_16)))
   (Start_14 Int (3 (- Start_10 Start_5) (+ Start_11 Start_9) (div Start_10 Start_13) (mod Start_6 Start_6) (abs Start_5)))
   (Start_15 Int (0 y 3 (- Start_9) (- Start_2 Start_15) (+ Start_14 Start_8) (mod Start_10 Start_8)))
   (StartBool_3 Bool (true false (not StartBool_3) (< Start_13 Start_3) (<= Start_14 Start_3) (>= Start_2 Start_15)))
   (Start_10 Int (1 (- Start_12 Start_10) (div Start_7 Start_9) (abs Start_4) (ite StartBool Start_8 Start_13)))
   (Start_13 Int (2 5 y 4 x 0 (* Start_1 Start_2) (abs Start_9)))
   (Start_1 Int (4 (- Start_18) (- Start_11 Start_3) (+ Start_5 Start_7) (div Start_14 Start_16) (mod Start_10 Start_19)))
   (Start_5 Int (2 y 0 x 3 (- Start_4) (+ Start_5 Start_3) (mod Start_1 Start_2) (abs Start_2)))
   (Start_11 Int (4 (- Start_6) (- Start_1 Start_10) (+ Start_11 Start_1) (div Start_8 Start_6) (abs Start_5)))
   (Start_20 Int (4 (- Start_10) (+ Start_3 Start_9) (* Start_6 Start_10) (div Start_4 Start_6) (abs Start_6) (ite StartBool_6 Start_20 Start_6)))
   (Start_3 Int (5 (- Start_5) (- Start_6 Start_4) (* Start_5 Start_4) (div Start_6 Start_3) (mod Start_1 Start_1)))
   (StartBool_5 Bool (true (and StartBool_6 StartBool_1) (or StartBool_6 StartBool_3) (< Start_19 Start) (>= Start Start_2) (> Start_7 Start_18)))
   (Start_6 Int (2 y (- Start_5 Start_4) (div Start_3 Start_7)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool) (<= Start_2 Start_12) (= Start_5 Start_13) (>= Start_2 Start_4)))
   (Start_4 Int (4 (- Start_1 Start_4) (+ Start_4 Start_1) (div Start_1 Start_3) (ite StartBool Start_2 Start_5)))
   (Start_7 Int (4 5 (- Start_2) (- Start_1 Start_5) (mod Start_3 Start_1) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_1 Bool (true false (not StartBool_1) (or StartBool_2 StartBool_2) (<= Start_8 Start_1) (= Start_9 Start_6) (>= Start_1 Start_1)))
   (Start_12 Int (5 (+ Start_10 Start_9) (mod Start_1 Start_12)))
   (Start_9 Int (4 (- Start_5 Start_7) (* Start_9 Start_1) (div Start_9 Start_3)))
   (Start_8 Int (y (* Start_6 Start_4) (mod Start_1 Start_9) (ite StartBool_3 Start_10 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (abs (div 0 0)))))

(check-synth)
