(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_6 Int) (Start_15 Int) (Start_12 Int) (Start_9 Int) (Start_2 Int) (StartBool_1 Bool) (Start_8 Int) (Start_1 Int) (Start_7 Int) (StartBool_3 Bool) (Start_10 Int) (Start_14 Int) (StartBool_2 Bool) (Start_11 Int) (Start_5 Int) (Start_3 Int) (Start_13 Int))
  ((Start Int (0 (- Start_1) (- Start_2 Start) (div Start_1 Start_1)))
   (StartBool Bool (true (= Start_13 Start_14) (> Start_2 Start_11)))
   (Start_4 Int (y x (- Start_14) (+ Start_12 Start) (ite StartBool_2 Start_12 Start_4)))
   (Start_6 Int (3 4 5 (+ Start_6 Start_13) (* Start_13 Start_9) (div Start_12 Start_13) (mod Start_13 Start_8) (abs Start_14)))
   (Start_15 Int (5 1 (+ Start_3 Start_13) (div Start_13 Start_11) (mod Start_13 Start_14)))
   (Start_12 Int (4 (- Start_8) (- Start_3 Start_6) (* Start_14 Start_4) (mod Start_6 Start_5)))
   (Start_9 Int (3 (- Start_1 Start_9) (+ Start_5 Start_7) (mod Start_1 Start_6) (abs Start_14) (ite StartBool Start Start_10)))
   (Start_2 Int (1 3 (- Start_1) (* Start_3 Start)))
   (StartBool_1 Bool (true false (or StartBool_2 StartBool_1) (>= Start_4 Start_4) (> Start_8 Start_3)))
   (Start_8 Int (3 (- Start_11 Start_7) (+ Start_1 Start_8) (div Start_15 Start_14) (mod Start_3 Start_1)))
   (Start_1 Int (0 (* Start_4 Start_3) (mod Start_3 Start_1) (ite StartBool Start_5 Start_2)))
   (Start_7 Int (3 x (- Start_8) (* Start_9 Start_8) (mod Start_1 Start_2) (abs Start_3) (ite StartBool_1 Start_1 Start_1)))
   (StartBool_3 Bool (false true (or StartBool_3 StartBool_1) (= Start_2 Start_8) (>= Start_4 Start_7) (> Start_10 Start_9)))
   (Start_10 Int (3 (- Start_2) (* Start Start_9) (div Start_7 Start_2) (mod Start_4 Start_4) (abs Start_1) (ite StartBool_3 Start_8 Start_11)))
   (Start_14 Int (x (div Start_13 Start_5) (abs Start_7)))
   (StartBool_2 Bool (false true (not StartBool_3) (< Start_1 Start_6) (<= Start_2 Start_6)))
   (Start_11 Int (x 1 (- Start_12 Start_2) (* Start_2 Start_3) (mod Start_13 Start_6)))
   (Start_5 Int (1 (- Start_4) (- Start Start_1) (* Start_4 Start_6) (div Start_4 Start) (mod Start_1 Start_2) (abs Start_7)))
   (Start_3 Int (2 (- Start_3) (abs Start_1)))
   (Start_13 Int (1 2 y (- Start_12) (- Start_14 Start_14) (+ Start_7 Start_6) (div Start_12 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* (mod (- x) x) 5))))

(check-synth)
