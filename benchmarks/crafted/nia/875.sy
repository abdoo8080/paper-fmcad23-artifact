(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_14 Int) (Start_8 Int) (Start_3 Int) (Start_11 Int) (Start_12 Int) (Start_5 Int) (StartBool_2 Bool) (Start_4 Int) (Start_7 Int) (Start_6 Int) (StartBool_1 Bool) (Start_9 Int) (Start_2 Int) (Start_13 Int) (Start_10 Int))
  ((Start Int (3 (- Start_1) (* Start_2 Start_3) (mod Start_1 Start_2)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_2 StartBool_1) (or StartBool_1 StartBool_1) (<= Start_7 Start_3)))
   (Start_1 Int (0 3 y 2 x (+ Start Start_14) (mod Start_14 Start_7) (ite StartBool_2 Start_9 Start_8)))
   (Start_14 Int (4 1 5 (- Start_3 Start_12) (div Start_1 Start_2) (mod Start_8 Start_9) (ite StartBool_1 Start_8 Start_6)))
   (Start_8 Int (x (* Start_9 Start) (div Start_4 Start_1) (mod Start_6 Start_5) (ite StartBool Start_9 Start_4)))
   (Start_3 Int (3 4 x (+ Start_4 Start_2) (* Start Start) (div Start Start_5) (mod Start_2 Start_5) (ite StartBool Start_5 Start_4)))
   (Start_11 Int (0 (- Start_6) (+ Start_2 Start_2) (div Start_1 Start_2)))
   (Start_12 Int (y (+ Start_4 Start_11) (* Start_1 Start_10) (div Start_10 Start_4) (ite StartBool Start_11 Start_1)))
   (Start_5 Int (1 2 4 (- Start_6 Start_2) (mod Start_2 Start_2)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool StartBool_2) (< Start_14 Start_9) (= Start_6 Start_9) (> Start Start)))
   (Start_4 Int (2 (* Start_7 Start_1) (mod Start_1 Start_3) (ite StartBool Start_7 Start_8)))
   (Start_7 Int (2 (- Start_2) (- Start_4 Start_7) (+ Start_2 Start_3) (* Start_13 Start_9) (div Start_6 Start_4)))
   (Start_6 Int (x (- Start_1 Start_2) (+ Start_5 Start_1) (* Start_6 Start_2)))
   (StartBool_1 Bool (false true (not StartBool) (= Start_8 Start_9) (>= Start_14 Start_6) (> Start_10 Start_9)))
   (Start_9 Int (x 4 (- Start_9) (- Start_1 Start_6) (* Start_8 Start_2) (mod Start Start_1) (abs Start_10) (ite StartBool Start_11 Start_11)))
   (Start_2 Int (4 (- Start) (- Start_9 Start_12)))
   (Start_13 Int (1 (* Start_8 Start_9) (abs Start_9) (ite StartBool_1 Start_5 Start_4)))
   (Start_10 Int (y (- Start_10) (* Start_9 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div 2 0))))

(check-synth)
