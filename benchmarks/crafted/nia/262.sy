(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_17 Int) (Start_18 Int) (Start_16 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_14 Int) (Start_9 Int) (Start_3 Int) (Start_5 Int) (Start_13 Int) (StartBool_2 Bool) (Start_15 Int) (StartBool_1 Bool) (Start_2 Int) (Start_6 Int) (Start_11 Int) (Start_4 Int) (StartBool_5 Bool) (Start_7 Int) (Start_10 Int) (Start_1 Int) (Start_8 Int) (Start_12 Int))
  ((Start Int (0 1 (- Start_1) (- Start_1 Start_2) (div Start_1 Start_2) (mod Start_3 Start_3)))
   (StartBool Bool (true false (not StartBool_1) (< Start_15 Start_11) (<= Start_11 Start_9) (= Start_15 Start_10) (> Start_14 Start_14)))
   (Start_17 Int (2 1 4 0 y (* Start_14 Start) (div Start_7 Start_18) (mod Start_12 Start) (abs Start_14)))
   (Start_18 Int (1 3 y 4 0 (- Start_18) (* Start_12 Start_15) (div Start_6 Start_12) (mod Start_18 Start_11) (abs Start_7)))
   (Start_16 Int (0 1 5 (- Start_6) (+ Start_12 Start_1) (div Start_9 Start_8) (mod Start_17 Start_15)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_5 StartBool_3) (or StartBool_5 StartBool_2) (= Start_7 Start_10)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool StartBool_4) (or StartBool StartBool_4) (= Start_9 Start_13)))
   (Start_14 Int (2 (- Start Start_4) (mod Start_2 Start_14) (abs Start_4)))
   (Start_9 Int (y 0 x 1 (- Start_5) (- Start_3 Start) (* Start_5 Start_11) (abs Start_3) (ite StartBool_4 Start_8 Start_10)))
   (Start_3 Int (1 4 0 y (- Start_2) (* Start_2 Start_4) (div Start_4 Start_1) (ite StartBool_1 Start_5 Start_4)))
   (Start_5 Int (1 (+ Start_4 Start_4) (* Start_4 Start_1) (abs Start_2) (ite StartBool_2 Start_4 Start_1)))
   (Start_13 Int (x 2 (+ Start_8 Start_14) (* Start_13 Start_3) (abs Start_8)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool StartBool) (> Start_4 Start_5)))
   (Start_15 Int (5 (+ Start_16 Start_3) (* Start_16 Start_12) (div Start_5 Start_11) (abs Start) (ite StartBool_1 Start_15 Start_15)))
   (StartBool_1 Bool (false true (not StartBool_2) (= Start_6 Start_6) (>= Start_3 Start_6) (> Start_1 Start_6)))
   (Start_2 Int (y (div Start_6 Start_4) (abs Start_5)))
   (Start_6 Int (y 3 (- Start_6) (mod Start_5 Start_1) (ite StartBool_2 Start Start_1)))
   (Start_11 Int (3 y 1 5 2 (- Start_2) (- Start_3 Start_9) (abs Start_4) (ite StartBool_2 Start_9 Start_9)))
   (Start_4 Int (1 (- Start_5 Start_6) (+ Start_5 Start_7) (div Start_5 Start_7) (mod Start_5 Start_2)))
   (StartBool_5 Bool (false true (or StartBool_1 StartBool_2) (< Start Start_9) (= Start_7 Start_10) (>= Start_8 Start_14) (> Start_14 Start_14)))
   (Start_7 Int (0 (- Start Start) (+ Start_3 Start_2) (abs Start) (ite StartBool_1 Start_1 Start_2)))
   (Start_10 Int (5 (- Start_2) (- Start_3 Start_8) (* Start_9 Start) (div Start_2 Start_11) (ite StartBool_1 Start_6 Start_12)))
   (Start_1 Int (y (- Start_5 Start) (* Start_2 Start_4) (mod Start_7 Start_6) (ite StartBool_3 Start_4 Start_8)))
   (Start_8 Int (2 (+ Start_2 Start_4) (div Start_6 Start_9) (mod Start_2 Start_10) (abs Start_10) (ite StartBool_2 Start_3 Start_1)))
   (Start_12 Int (y (+ Start_5 Start_7) (* Start_11 Start_11) (mod Start_3 Start) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (+ 5 4) x)))

(check-synth)
