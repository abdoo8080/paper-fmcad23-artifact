(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_11 Int) (Start_1 Int) (Start_10 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartBool_5 Bool) (Start_3 Int) (StartBool_4 Bool) (Start_9 Int) (Start_7 Int) (Start_5 Int) (Start_6 Int) (Start_4 Int) (StartBool_3 Bool) (Start_8 Int) (Start_2 Int))
  ((Start Int (3 2 (- Start Start) (+ Start Start_1) (* Start_1 Start_2) (abs Start) (ite StartBool_1 Start_2 Start)))
   (StartBool Bool (false true (not StartBool_5) (and StartBool_1 StartBool_3) (>= Start_11 Start_12)))
   (Start_12 Int (0 3 (- Start) (- Start_9 Start_2) (+ Start_9 Start) (* Start_7 Start_10)))
   (Start_11 Int (x (- Start_10) (abs Start_6) (ite StartBool_3 Start_2 Start)))
   (Start_1 Int (3 (- Start_7) (div Start_3 Start_9) (abs Start_11) (ite StartBool_4 Start Start_2)))
   (Start_10 Int (y (- Start_3) (+ Start_12 Start_5) (ite StartBool_5 Start_3 Start_9)))
   (StartBool_2 Bool (false (or StartBool_3 StartBool_1) (< Start Start_3) (<= Start Start_1) (> Start Start_4)))
   (StartBool_1 Bool (false (not StartBool_1) (or StartBool StartBool_2) (< Start Start) (= Start_1 Start) (>= Start Start_1) (> Start_3 Start_2)))
   (StartBool_5 Bool (true (<= Start_5 Start_10) (= Start_9 Start_11) (> Start_7 Start_10)))
   (Start_3 Int (x 4 3 0 (- Start_4) (- Start_4 Start_5) (+ Start_4 Start_4) (mod Start Start_2) (ite StartBool_2 Start_5 Start_6)))
   (StartBool_4 Bool (true (or StartBool_5 StartBool_1) (<= Start_2 Start_1) (>= Start_4 Start_1) (> Start_1 Start_9)))
   (Start_9 Int (0 3 (div Start_10 Start_6) (mod Start_10 Start_4) (ite StartBool_4 Start_7 Start_3)))
   (Start_7 Int (y 3 (- Start_6) (- Start_3 Start_6) (+ Start_1 Start_4)))
   (Start_5 Int (1 (+ Start_6 Start_1) (abs Start_7)))
   (Start_6 Int (y 5 2 1 4 (- Start_3 Start_6) (+ Start_1 Start_7) (div Start_1 Start_6) (mod Start_5 Start_6)))
   (Start_4 Int (0 (- Start_2) (div Start_4 Start_5) (mod Start_5 Start_7) (abs Start_6) (ite StartBool_1 Start_4 Start_4)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool_3) (or StartBool_3 StartBool_2) (<= Start_6 Start_8) (>= Start Start_5)))
   (Start_8 Int (5 1 (- Start_4) (+ Start_3 Start_8) (* Start_1 Start_8)))
   (Start_2 Int (y 0 (- Start_8) (- Start_3 Start) (+ Start_1 Start_8) (* Start Start_9) (mod Start_3 Start_4) (abs Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (abs (div 2 (* x (div x y)))) y)))

(check-synth)
