(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_7 Int) (StartBool_3 Bool) (Start_3 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_6 Int) (Start_4 Int) (Start_5 Int) (Start_2 Int))
  ((Start Int (5 3 (- Start_1) (+ Start_2 Start_1) (* Start Start) (mod Start Start)))
   (StartBool Bool (false true (not StartBool) (< Start_3 Start_7) (= Start Start_5)))
   (Start_1 Int (0 (- Start_3 Start_7) (mod Start_6 Start) (ite StartBool_1 Start_6 Start_1)))
   (Start_7 Int (y 5 4 (div Start_1 Start_3) (ite StartBool Start Start_6)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_1 StartBool_3) (<= Start_7 Start) (= Start_1 Start_3) (>= Start_5 Start) (> Start_2 Start_4)))
   (Start_3 Int (0 (abs Start_7)))
   (StartBool_2 Bool (false true (or StartBool_3 StartBool) (= Start_2 Start_6) (>= Start_1 Start_2)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (or StartBool StartBool_2) (< Start_2 Start_5) (<= Start_3 Start_5) (>= Start_1 Start_2) (> Start Start_1)))
   (Start_6 Int (1 5 (- Start_1) (- Start_7 Start) (mod Start_5 Start_5) (ite StartBool_1 Start_7 Start_6)))
   (Start_4 Int (5 (- Start_6 Start_2) (+ Start_6 Start_5) (* Start Start_4) (abs Start)))
   (Start_5 Int (x (- Start) (- Start_4 Start_1) (+ Start_5 Start_4) (mod Start_1 Start_5) (abs Start_4)))
   (Start_2 Int (0 (* Start_3 Start) (div Start_4 Start_5) (mod Start_5 Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (+ (div y 3) 4) y)))

(check-synth)
