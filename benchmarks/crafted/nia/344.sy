(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (StartBool_1 Bool) (Start_3 Int) (Start_1 Int) (Start_2 Int))
  ((Start Int (1 (- Start) (+ Start_1 Start) (abs Start_2)))
   (StartBool Bool (false (and StartBool StartBool_1) (= Start_2 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_1) (< Start_2 Start_2) (<= Start_1 Start_1) (> Start_2 Start)))
   (StartBool_1 Bool (false (or StartBool StartBool_2) (< Start_2 Start_3) (= Start Start_2) (> Start_1 Start_3)))
   (Start_3 Int (3 (div Start_1 Start) (mod Start_1 Start_2) (abs Start_3) (ite StartBool Start Start)))
   (Start_1 Int (2 (+ Start_1 Start) (* Start_1 Start_2) (div Start_1 Start_3) (mod Start Start_1)))
   (Start_2 Int (1 (- Start_2) (+ Start_1 Start) (div Start_1 Start_1) (abs Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (* 4 (div 0 y)) (+ x (abs (div y (+ 5 y)))))))

(check-synth)
