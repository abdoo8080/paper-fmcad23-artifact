(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_17 Int) (Start_13 Int) (Start_14 Int) (Start_16 Int) (Start_15 Int) (StartBool_6 Bool) (Start_12 Int) (Start_11 Int) (Start_10 Int) (Start_3 Int) (Start_1 Int) (StartBool_1 Bool) (Start_9 Int) (Start_7 Int) (Start_2 Int) (StartBool_3 Bool) (Start_5 Int) (StartBool_2 Bool) (Start_8 Int) (StartBool_4 Bool) (Start_6 Int) (StartBool_5 Bool) (StartBool_7 Bool) (Start_4 Int))
  ((Start Int (0 (- Start_1 Start) (+ Start_2 Start_3) (* Start_3 Start_3) (mod Start_3 Start) (ite StartBool_1 Start_1 Start_3)))
   (StartBool Bool (true (< Start_8 Start_2) (<= Start_5 Start_14) (= Start_10 Start_10) (> Start Start_14)))
   (Start_18 Int (0 y 2 (- Start_18 Start_13) (* Start_18 Start_3) (div Start_15 Start_17) (abs Start_2)))
   (Start_17 Int (2 5 (- Start_12 Start_8) (* Start_6 Start_5) (div Start_9 Start_6) (abs Start_8)))
   (Start_13 Int (1 (- Start_18 Start_15) (abs Start_16)))
   (Start_14 Int (1 y x 5 (* Start_11 Start_3) (mod Start_7 Start_17) (ite StartBool_7 Start_11 Start_5)))
   (Start_16 Int (x 0 2 5 y (- Start) (+ Start_13 Start_11) (* Start_1 Start_13) (div Start_5 Start_11) (mod Start_5 Start_13)))
   (Start_15 Int (2 x (+ Start_5 Start_12) (mod Start_9 Start_10) (abs Start_16)))
   (StartBool_6 Bool (false true (and StartBool_4 StartBool_6) (or StartBool_6 StartBool_6) (< Start_14 Start_2) (<= Start_14 Start_15) (= Start_13 Start_7)))
   (Start_12 Int (5 0 (- Start_6 Start_2) (* Start_11 Start_3) (mod Start_13 Start_13) (ite StartBool_6 Start_2 Start_10)))
   (Start_11 Int (5 (mod Start_7 Start_7)))
   (Start_10 Int (y 5 (- Start_3) (* Start_9 Start_3) (div Start_10 Start_10) (mod Start_3 Start_4) (abs Start_9) (ite StartBool_5 Start_3 Start_9)))
   (Start_3 Int (x (- Start_1 Start_1) (* Start_4 Start) (abs Start_5)))
   (Start_1 Int (3 2 1 5 x y (- Start_6 Start) (+ Start_6 Start_3) (* Start_2 Start_10) (mod Start_10 Start) (abs Start_12)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool StartBool_1) (> Start_1 Start_2)))
   (Start_9 Int (y 3 (* Start_9 Start_1) (abs Start_6)))
   (Start_7 Int (2 x 3 1 (+ Start_2 Start_9) (* Start_3 Start_4)))
   (Start_2 Int (y 2 0 3 4 (- Start_6 Start_7) (* Start_3 Start) (div Start_6 Start_4) (mod Start Start_10) (abs Start_5) (ite StartBool Start_5 Start_11)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_4 StartBool_4) (or StartBool_5 StartBool_3) (<= Start_1 Start_8)))
   (Start_5 Int (1 4 (- Start_3) (+ Start Start_1) (* Start_4 Start_5) (abs Start_1) (ite StartBool_2 Start_4 Start_1)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_1 StartBool_4) (or StartBool_1 StartBool_1) (< Start_5 Start) (<= Start_6 Start)))
   (Start_8 Int (x (- Start_6) (* Start Start_8) (div Start_9 Start_6) (mod Start_1 Start)))
   (StartBool_4 Bool (true (not StartBool_3) (< Start_7 Start_4) (<= Start_4 Start_5) (>= Start_7 Start_4) (> Start_1 Start_3)))
   (Start_6 Int (4 (- Start_6 Start_4) (+ Start_6 Start_7) (* Start Start_8) (div Start_8 Start) (abs Start_7) (ite StartBool_3 Start_3 Start)))
   (StartBool_5 Bool (true false (and StartBool_4 StartBool_1) (< Start_7 Start_5) (<= Start_3 Start_9) (> Start_2 Start)))
   (StartBool_7 Bool (true false (not StartBool_1) (or StartBool_7 StartBool_2) (< Start_1 Start_4) (<= Start_16 Start_9) (>= Start_2 Start)))
   (Start_4 Int (5 0 (- Start_1) (+ Start_8 Start) (div Start_2 Start) (ite StartBool_5 Start_4 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 4 (* 3 4))))

(check-synth)
