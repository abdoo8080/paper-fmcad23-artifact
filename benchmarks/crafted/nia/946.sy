(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_10 Int) (Start_2 Int) (StartBool_2 Bool) (Start_9 Int) (Start_5 Int) (Start_7 Int) (StartBool_1 Bool) (Start_4 Int) (Start_3 Int) (StartBool_3 Bool) (Start_11 Int) (Start_6 Int) (Start_8 Int))
  ((Start Int (0 (- Start) (- Start_1 Start) (+ Start Start) (div Start_2 Start) (abs Start_1)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (<= Start_5 Start_5) (>= Start_11 Start_5)))
   (Start_1 Int (5 (- Start_10) (+ Start_9 Start_9) (div Start_6 Start_2) (mod Start_2 Start_6) (abs Start_6)))
   (Start_10 Int (0 4 (+ Start_8 Start) (* Start_1 Start_8) (mod Start_6 Start_2)))
   (Start_2 Int (y (- Start_3 Start_2) (+ Start_1 Start) (* Start Start_4) (div Start_2 Start_5) (mod Start Start_1) (abs Start_3)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_3) (or StartBool StartBool_1) (< Start_4 Start_2) (<= Start_6 Start) (= Start_2 Start_5)))
   (Start_9 Int (2 1 3 y 0 5 4 x (+ Start_8 Start_1)))
   (Start_5 Int (4 (+ Start_3 Start_2) (ite StartBool_1 Start_4 Start_2)))
   (Start_7 Int (5 4 (* Start_7 Start_3) (ite StartBool Start_9 Start_5)))
   (StartBool_1 Bool (false (and StartBool StartBool) (or StartBool StartBool) (< Start_4 Start_6) (= Start Start_1) (>= Start_4 Start_3) (> Start Start_4)))
   (Start_4 Int (2 (+ Start Start_1)))
   (Start_3 Int (4 (- Start_2) (- Start_5 Start_6) (mod Start_6 Start) (ite StartBool_2 Start_4 Start)))
   (StartBool_3 Bool (true false (not StartBool) (< Start_7 Start_8) (<= Start_9 Start_2) (= Start_6 Start_9)))
   (Start_11 Int (4 y 5 x 3 2 (- Start_6) (- Start_5 Start_7) (div Start_1 Start_10) (mod Start_1 Start_10)))
   (Start_6 Int (x (- Start_2 Start) (+ Start_5 Start) (* Start Start_6) (mod Start_6 Start)))
   (Start_8 Int (1 4 (- Start_6) (- Start_7 Start_2) (* Start_9 Start_7) (div Start_10 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- y (* 3 x)))))

(check-synth)
