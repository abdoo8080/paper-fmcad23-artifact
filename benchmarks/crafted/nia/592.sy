(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_14 Int) (Start_17 Int) (Start_15 Int) (Start_16 Int) (Start_11 Int) (Start_13 Int) (Start_1 Int) (Start_4 Int) (Start_18 Int) (Start_9 Int) (StartBool_1 Bool) (Start_12 Int) (Start_8 Int) (Start_7 Int) (Start_6 Int) (Start_5 Int) (Start_10 Int) (Start_3 Int) (Start_2 Int))
  ((Start Int (5 (- Start) (- Start_1 Start_1)))
   (StartBool Bool (true false (= Start_4 Start_1) (> Start_15 Start_6)))
   (StartBool_2 Bool (false true (<= Start_2 Start)))
   (Start_14 Int (x 2 0 1 (- Start_16) (mod Start_7 Start_2) (ite StartBool_1 Start_18 Start)))
   (Start_17 Int (1 4 (- Start_1) (- Start_10 Start_11) (div Start_4 Start_17) (mod Start_17 Start_9) (ite StartBool Start_5 Start_8)))
   (Start_15 Int (2 1 x 4 3 0 (- Start_10 Start_4) (+ Start_16 Start_4) (* Start_13 Start_14) (abs Start_9)))
   (Start_16 Int (5 0 3 (- Start_17) (mod Start_8 Start_12) (abs Start)))
   (Start_11 Int (y 3 (- Start Start_12) (* Start_14 Start_7) (div Start_12 Start_15) (abs Start_5)))
   (Start_13 Int (2 1 x (- Start_5 Start_9) (+ Start_9 Start_4) (* Start_13 Start_4) (div Start_10 Start_7) (mod Start_6 Start_1) (abs Start_5)))
   (Start_1 Int (2 (- Start) (- Start_2 Start) (* Start_2 Start_3) (div Start_2 Start_2) (ite StartBool Start_4 Start_4)))
   (Start_4 Int (x 2 y 0 (div Start Start_2) (mod Start_5 Start_3)))
   (Start_18 Int (0 (abs Start_16)))
   (Start_9 Int (4 2 (- Start_8) (- Start_1 Start_4) (div Start_3 Start_6) (abs Start_3)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool_2) (or StartBool_1 StartBool_2) (= Start_2 Start_3) (> Start_7 Start_16)))
   (Start_12 Int (0 (- Start_11) (- Start_7 Start_8) (* Start_1 Start_3) (div Start_8 Start_10) (mod Start_13 Start_2) (abs Start_6) (ite StartBool Start_1 Start_2)))
   (Start_8 Int (3 (- Start_4) (+ Start_9 Start_1) (abs Start_7)))
   (Start_7 Int (4 y (mod Start_8 Start_4) (ite StartBool Start_9 Start_4)))
   (Start_6 Int (5 x (- Start) (- Start_3 Start_9) (+ Start_8 Start_3) (* Start_9 Start) (div Start_9 Start_6) (mod Start_5 Start_2) (ite StartBool Start_2 Start_1)))
   (Start_5 Int (y 3 (- Start_6) (- Start_3 Start_6) (+ Start_4 Start_2) (div Start_4 Start_5) (mod Start_2 Start_1) (abs Start_6) (ite StartBool Start_7 Start_8)))
   (Start_10 Int (2 (- Start_3) (* Start_11 Start_9) (div Start Start_7) (abs Start_12)))
   (Start_3 Int (x 0 (- Start_1 Start_2) (+ Start Start_1) (* Start Start_4) (div Start_6 Start_6) (mod Start Start) (abs Start_5)))
   (Start_2 Int (5 (+ Start_5 Start) (mod Start_10 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (mod x 2) 4)))

(check-synth)
