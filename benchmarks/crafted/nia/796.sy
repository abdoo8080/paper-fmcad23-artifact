(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_20 Int) (Start_3 Int) (Start_19 Int) (Start_18 Int) (Start_16 Int) (Start_7 Int) (Start_2 Int) (Start_15 Int) (Start_17 Int) (Start_5 Int) (Start_12 Int) (Start_4 Int) (Start_9 Int) (Start_11 Int) (Start_10 Int) (Start_13 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_1 Int) (Start_8 Int) (Start_6 Int) (Start_14 Int) (StartBool_3 Bool))
  ((Start Int (4 (- Start) (+ Start_1 Start_2) (* Start Start_3) (div Start Start_4) (ite StartBool Start_5 Start_1)))
   (StartBool Bool (false (not StartBool_3) (and StartBool_1 StartBool) (< Start_2 Start_11) (= Start_11 Start_5)))
   (Start_20 Int (4 (- Start_19 Start_7) (+ Start_14 Start_20) (* Start_15 Start_12) (ite StartBool_1 Start_10 Start_13)))
   (Start_3 Int (3 y (- Start_17) (- Start_15 Start_11) (+ Start_1 Start_4) (div Start_15 Start_1) (mod Start_20 Start) (abs Start_18)))
   (Start_19 Int (4 (- Start_12) (+ Start_9 Start_12) (* Start_1 Start_15) (div Start_5 Start_11) (mod Start_18 Start_4) (ite StartBool_3 Start_4 Start_11)))
   (Start_18 Int (1 (- Start_10) (+ Start_19 Start_13) (div Start Start_1) (abs Start_2)))
   (Start_16 Int (x (- Start_17) (div Start Start_1) (abs Start_15) (ite StartBool_2 Start_2 Start_14)))
   (Start_7 Int (5 (- Start_3 Start_1) (+ Start_4 Start_12) (* Start_6 Start_16)))
   (Start_2 Int (x 0 (- Start_6 Start_5) (+ Start_17 Start_12) (* Start_19 Start_6) (div Start_6 Start_4) (ite StartBool Start_16 Start_1)))
   (Start_15 Int (x (* Start_10 Start_8) (div Start_8 Start_3) (abs Start_7) (ite StartBool_3 Start_3 Start_14)))
   (Start_17 Int (4 x 5 (- Start_12 Start_11) (+ Start_8 Start_13) (* Start_2 Start_10) (div Start_18 Start_11) (mod Start_14 Start_1) (abs Start_6) (ite StartBool Start_14 Start_6)))
   (Start_5 Int (1 (- Start_1 Start) (div Start_2 Start_5) (abs Start_6)))
   (Start_12 Int (4 x (- Start_7) (+ Start_11 Start_6) (div Start_7 Start_1) (mod Start_13 Start_12) (abs Start_5)))
   (Start_4 Int (4 0 3 x 5 2 1 y (- Start_18) (- Start_11 Start_10) (+ Start_3 Start_14) (* Start_1 Start_11) (mod Start_11 Start_5)))
   (Start_9 Int (2 x (- Start_10) (- Start Start_11) (+ Start_3 Start_5) (div Start_6 Start_1) (mod Start_8 Start_11) (abs Start_3)))
   (Start_11 Int (2 (- Start_7 Start_8) (+ Start_9 Start_5) (div Start_6 Start_8) (mod Start_6 Start_11) (abs Start_4)))
   (Start_10 Int (3 (* Start_4 Start_2) (div Start Start_11) (abs Start_5) (ite StartBool Start_3 Start_12)))
   (Start_13 Int (5 (- Start_13 Start_9) (div Start_3 Start_3) (mod Start_4 Start_13) (ite StartBool_1 Start_2 Start_10)))
   (StartBool_1 Bool (true false (not StartBool_2) (< Start_8 Start_13)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_1) (< Start_2 Start) (<= Start_13 Start_3) (= Start_14 Start_14) (>= Start_10 Start_10) (> Start_14 Start_1)))
   (Start_1 Int (0 4 (- Start_4) (* Start_20 Start_13) (abs Start_8) (ite StartBool_3 Start_3 Start_5)))
   (Start_8 Int (1 x (- Start_15) (- Start_6 Start)))
   (Start_6 Int (y (- Start_7) (- Start_4 Start_1) (+ Start_8 Start_1) (* Start_3 Start_7) (ite StartBool Start_9 Start_5)))
   (Start_14 Int (2 (- Start_5) (- Start_1 Start) (+ Start Start_11) (* Start_9 Start_13) (mod Start_6 Start_5) (abs Start)))
   (StartBool_3 Bool (false true (not StartBool_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 5 (mod 2 x))))

(check-synth)
