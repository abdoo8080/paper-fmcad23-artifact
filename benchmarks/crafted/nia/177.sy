(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (StartBool_1 Bool) (Start_6 Int) (StartBool_3 Bool) (StartBool_5 Bool) (StartBool_2 Bool) (Start_4 Int) (Start_1 Int) (StartBool_4 Bool) (Start_2 Int) (Start_5 Int))
  ((Start Int (1 5 y x 0 (mod Start Start_1) (abs Start_1) (ite StartBool Start Start_2)))
   (StartBool Bool (true false (and StartBool_4 StartBool) (or StartBool_2 StartBool_3) (< Start_4 Start_4) (>= Start_6 Start_1)))
   (Start_3 Int (x (- Start_3) (+ Start_6 Start_3) (* Start_3 Start_1) (div Start_1 Start_5) (abs Start_6)))
   (StartBool_1 Bool (true false (not StartBool_2) (<= Start_6 Start_4) (= Start Start_1) (>= Start_6 Start)))
   (Start_6 Int (4 0 2 (- Start_2) (+ Start Start_5) (div Start_1 Start_2) (abs Start_4)))
   (StartBool_3 Bool (false true (or StartBool_4 StartBool_2) (>= Start_4 Start_5) (> Start_1 Start_2)))
   (StartBool_5 Bool (false true (= Start_6 Start_6) (>= Start_3 Start_2)))
   (StartBool_2 Bool (true false (not StartBool_3) (<= Start_1 Start) (> Start Start)))
   (Start_4 Int (1 (- Start) (* Start_1 Start_4) (div Start_2 Start_2) (mod Start_3 Start_4) (ite StartBool_2 Start_2 Start_4)))
   (Start_1 Int (3 x (- Start_4 Start_4) (+ Start_5 Start_5) (* Start_3 Start_1)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool_5) (or StartBool_4 StartBool_1) (< Start_6 Start) (<= Start_3 Start_1) (>= Start_2 Start_1) (> Start_5 Start_3)))
   (Start_2 Int (y 5 (- Start_1 Start_2) (* Start_3 Start_2) (abs Start_3) (ite StartBool_1 Start_1 Start_4)))
   (Start_5 Int (2 1 (- Start_6) (* Start_1 Start_2) (div Start_5 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod y 2)))

(check-synth)
