(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_13 Int) (Start_1 Int) (Start_12 Int) (Start_2 Int) (Start_10 Int) (Start_5 Int) (Start_3 Int) (Start_11 Int) (Start_4 Int) (Start_8 Int) (Start_7 Int) (StartBool_5 Bool) (StartBool_2 Bool) (Start_9 Int) (Start_6 Int) (StartBool_3 Bool) (StartBool_1 Bool) (StartBool_4 Bool))
  ((Start Int (2 (- Start) (- Start_1 Start_2) (+ Start_3 Start_1) (* Start Start_3) (div Start_1 Start_1) (abs Start_4) (ite StartBool Start_5 Start_4)))
   (StartBool Bool (true (not StartBool_4) (and StartBool_2 StartBool_5) (or StartBool_6 StartBool_2) (<= Start_12 Start_12) (= Start_3 Start_2) (>= Start Start_7)))
   (StartBool_6 Bool (false (and StartBool_2 StartBool) (or StartBool StartBool) (<= Start_6 Start)))
   (Start_13 Int (5 4 (- Start_2) (- Start_13 Start_13) (* Start_5 Start_7) (ite StartBool_2 Start_13 Start_8)))
   (Start_1 Int (2 3 (- Start_12) (mod Start_3 Start_8) (abs Start_13)))
   (Start_12 Int (y (+ Start_4 Start_11) (* Start_4 Start_10) (abs Start) (ite StartBool_1 Start_8 Start_7)))
   (Start_2 Int (1 (- Start_2) (+ Start_1 Start_4) (* Start_2 Start_6) (ite StartBool_4 Start_8 Start_5)))
   (Start_10 Int (5 x 3 (- Start_8) (abs Start_9)))
   (Start_5 Int (0 (- Start_2 Start_1) (* Start_3 Start_3) (mod Start_3 Start_2)))
   (Start_3 Int (2 1 y (- Start_6) (- Start_6 Start_6) (* Start_6 Start_5) (div Start_7 Start_7) (mod Start_8 Start_6) (abs Start_8) (ite StartBool_1 Start_1 Start_3)))
   (Start_11 Int (2 x (- Start) (- Start_4 Start) (* Start_9 Start) (mod Start_8 Start) (abs Start_10) (ite StartBool_3 Start_10 Start_6)))
   (Start_4 Int (1 0 y (* Start_2 Start_4) (div Start_3 Start_5) (abs Start_5) (ite StartBool_1 Start Start_4)))
   (Start_8 Int (4 y (* Start Start_6) (div Start_5 Start_6)))
   (Start_7 Int (5 (abs Start_1)))
   (StartBool_5 Bool (false true (not StartBool_2) (>= Start_6 Start)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_2 StartBool) (or StartBool_1 StartBool_3) (<= Start Start_5) (>= Start_8 Start_7)))
   (Start_9 Int (2 x (- Start_2 Start_3) (+ Start_10 Start_2) (* Start_5 Start_8) (div Start_11 Start_3) (abs Start_1)))
   (Start_6 Int (5 (- Start) (- Start_2 Start_8) (+ Start_1 Start_3) (* Start_7 Start_6) (div Start_6 Start) (mod Start_2 Start_8) (abs Start_2) (ite StartBool_2 Start_1 Start_1)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_4 StartBool_2) (< Start_2 Start_1) (= Start_7 Start_6) (> Start_5 Start_1)))
   (StartBool_1 Bool (false true (<= Start_3 Start)))
   (StartBool_4 Bool (false (not StartBool_1) (< Start_9 Start_9) (<= Start_7 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 0 (div y 4))))

(check-synth)
