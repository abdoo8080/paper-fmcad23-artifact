(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_8 Int) (Start_2 Int) (Start_6 Int) (Start_7 Int) (Start_5 Int) (Start_3 Int) (Start_1 Int) (StartBool_1 Bool) (Start_4 Int))
  ((Start Int (5 y (- Start) (- Start_1 Start_2) (div Start_3 Start_3) (mod Start_2 Start) (abs Start_1) (ite StartBool_1 Start_2 Start_2)))
   (StartBool Bool (false (and StartBool StartBool_1) (<= Start_7 Start_6) (>= Start_5 Start_8)))
   (Start_8 Int (4 (- Start_4) (abs Start_3) (ite StartBool Start_1 Start_8)))
   (Start_2 Int (4 3 5 x 2 1 y 0 (- Start_2) (abs Start_7) (ite StartBool_1 Start_3 Start_5)))
   (Start_6 Int (5 3 (- Start Start) (+ Start_1 Start_5) (mod Start Start_1) (ite StartBool_1 Start_7 Start_7)))
   (Start_7 Int (3 (- Start_1) (div Start_6 Start_2) (ite StartBool_1 Start_3 Start_7)))
   (Start_5 Int (1 3 (- Start_3) (- Start_6 Start_1) (div Start_7 Start_3)))
   (Start_3 Int (1 (- Start_5) (- Start_1 Start_4) (+ Start_4 Start_3) (* Start Start_5) (div Start_1 Start_4) (abs Start_2)))
   (Start_1 Int (y 2 0 (- Start_3 Start_2) (+ Start_2 Start_8) (div Start Start_8) (abs Start_3) (ite StartBool_1 Start_8 Start_1)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (>= Start_1 Start_3) (> Start_4 Start)))
   (Start_4 Int (1 3 2 0 (- Start_2 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div x 4)))

(check-synth)
