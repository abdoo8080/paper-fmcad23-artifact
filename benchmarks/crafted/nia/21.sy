(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (StartBool_6 Bool) (StartBool_5 Bool) (Start_18 Int) (StartBool_4 Bool) (Start_7 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_10 Int) (Start_14 Int) (Start_4 Int) (Start_6 Int) (Start_15 Int) (Start_9 Int) (Start_2 Int) (Start_17 Int) (Start_8 Int) (Start_16 Int) (Start_13 Int) (Start_11 Int) (Start_5 Int) (StartBool_3 Bool) (Start_12 Int))
  ((Start Int (3 x (- Start Start) (+ Start Start) (* Start_1 Start_2) (div Start_3 Start) (abs Start_4) (ite StartBool_1 Start_1 Start_2)))
   (StartBool Bool (true false (or StartBool_6 StartBool) (> Start_17 Start_2)))
   (Start_1 Int (2 (+ Start_12 Start_10) (* Start_11 Start_7) (div Start_11 Start_7) (mod Start_12 Start_10) (abs Start_18)))
   (StartBool_6 Bool (false (< Start_14 Start_8) (= Start_2 Start_13) (>= Start_7 Start_7) (> Start_13 Start_7)))
   (StartBool_5 Bool (false (or StartBool StartBool_5) (< Start_15 Start_17) (<= Start_4 Start_14) (>= Start_15 Start_2) (> Start_13 Start_16)))
   (Start_18 Int (2 4 x (- Start_14 Start_1) (+ Start_17 Start_3) (* Start_5 Start_1) (div Start_13 Start_14) (mod Start_10 Start_14)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_3 StartBool_3) (< Start_5 Start_17) (= Start Start) (>= Start Start_17) (> Start_11 Start_8)))
   (Start_7 Int (x 1 (* Start_1 Start_5) (div Start_3 Start_1) (mod Start_4 Start_2) (abs Start_6)))
   (Start_3 Int (5 0 3 (+ Start_7 Start_11) (mod Start_13 Start_17)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_3) (or StartBool_1 StartBool) (<= Start_11 Start_5)))
   (StartBool_1 Bool (true false (not StartBool) (< Start_1 Start) (= Start_3 Start_1)))
   (Start_10 Int (x 2 5 (- Start_2) (+ Start_11 Start_10) (* Start_4 Start)))
   (Start_14 Int (1 (- Start_3) (- Start_5 Start_11) (+ Start_14 Start_15) (* Start_14 Start_16) (div Start_7 Start_10) (mod Start_6 Start) (abs Start_7) (ite StartBool_2 Start_16 Start_1)))
   (Start_4 Int (3 y 0 (- Start_2) (- Start_5 Start) (* Start_2 Start_1) (mod Start_6 Start) (abs Start_7)))
   (Start_6 Int (3 (- Start_8) (+ Start_7 Start_9) (mod Start_4 Start_5) (abs Start_4)))
   (Start_15 Int (y (- Start_8 Start_15) (div Start_15 Start_5) (mod Start_10 Start_2) (ite StartBool_5 Start_2 Start_12)))
   (Start_9 Int (x (- Start_4 Start_1) (div Start_5 Start_1) (mod Start_5 Start_4) (abs Start_7) (ite StartBool Start_1 Start_3)))
   (Start_2 Int (4 (- Start_16 Start_10) (+ Start_5 Start_6) (* Start_1 Start_8)))
   (Start_17 Int (5 (- Start_9 Start_8) (+ Start_1 Start_15) (* Start_7 Start_6) (div Start_6 Start_13) (mod Start_7 Start_11)))
   (Start_8 Int (4 1 y (- Start_3 Start) (+ Start_8 Start_1) (* Start_9 Start_8) (abs Start_3) (ite StartBool Start_8 Start_10)))
   (Start_16 Int (0 1 (div Start_11 Start_6) (mod Start_16 Start_18) (ite StartBool_5 Start_5 Start_2)))
   (Start_13 Int (y 0 x 1 2 4 (- Start_11) (+ Start_13 Start_14) (div Start_3 Start_14) (mod Start_5 Start_14)))
   (Start_11 Int (y (- Start_11 Start_7) (+ Start_12 Start_1) (* Start_3 Start_9) (ite StartBool_1 Start_1 Start_1)))
   (Start_5 Int (4 (- Start_3) (- Start_5 Start_15) (+ Start_3 Start_17) (* Start_14 Start_8) (div Start_9 Start_3) (mod Start_13 Start_8) (abs Start_1) (ite StartBool_6 Start_15 Start_8)))
   (StartBool_3 Bool (false true (not StartBool_4) (< Start_16 Start_6) (= Start_6 Start_2)))
   (Start_12 Int (1 0 5 (- Start_2 Start_3) (+ Start_13 Start_7) (* Start_8 Start_1) (mod Start_9 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div 1 (+ y x)))))

(check-synth)
