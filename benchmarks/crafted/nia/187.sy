(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_14 Int) (Start_5 Int) (Start_9 Int) (Start_13 Int) (Start_3 Int) (Start_4 Int) (StartBool_1 Bool) (StartBool_5 Bool) (Start_1 Int) (Start_8 Int) (Start_7 Int) (Start_10 Int) (StartBool_3 Bool) (Start_6 Int) (Start_11 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_12 Int))
  ((Start Int (3 x (- Start Start_1) (div Start_2 Start_3) (abs Start_3)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_1 StartBool_3) (or StartBool_4 StartBool_4) (< Start_8 Start_11) (<= Start_13 Start_10) (= Start_12 Start_13)))
   (Start_2 Int (0 (- Start_13) (* Start_3 Start_11) (mod Start_8 Start_6) (abs Start_2)))
   (Start_14 Int (5 (- Start_13 Start_8) (* Start_4 Start_12)))
   (Start_5 Int (3 (- Start_13) (div Start_10 Start_9) (mod Start_7 Start_5) (abs Start_13)))
   (Start_9 Int (4 (- Start_13) (+ Start_6 Start_6)))
   (Start_13 Int (4 (mod Start_10 Start_3) (abs Start_12) (ite StartBool Start_1 Start_5)))
   (Start_3 Int (5 (+ Start_4 Start_3) (* Start Start_5) (div Start Start_6) (mod Start_5 Start_3) (ite StartBool_1 Start Start_1)))
   (Start_4 Int (x (- Start_3) (- Start_9 Start_3) (* Start_13 Start_5) (div Start_9 Start_10) (mod Start_14 Start_7) (ite StartBool_3 Start_4 Start)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (or StartBool_3 StartBool_2) (= Start_1 Start_2) (> Start_5 Start_6)))
   (StartBool_5 Bool (false (not StartBool_5) (>= Start_8 Start_3)))
   (Start_1 Int (3 (+ Start_14 Start_12) (div Start_12 Start_12) (mod Start_14 Start_1)))
   (Start_8 Int (1 y (+ Start_5 Start_1) (* Start_7 Start) (abs Start_2)))
   (Start_7 Int (2 (- Start_4 Start_6) (+ Start_5 Start_8) (ite StartBool_2 Start_6 Start_3)))
   (Start_10 Int (y (- Start_5) (div Start_10 Start_4) (abs Start_6) (ite StartBool_1 Start_11 Start_9)))
   (StartBool_3 Bool (true (> Start Start_1)))
   (Start_6 Int (1 2 (- Start_2) (- Start_2 Start_8) (* Start_9 Start_2) (div Start_5 Start) (ite StartBool_1 Start_10 Start_5)))
   (Start_11 Int (0 y (- Start_1) (- Start_9 Start_6) (* Start_9 Start_7) (mod Start_6 Start_12) (abs Start_8)))
   (StartBool_2 Bool (true false (not StartBool_4) (and StartBool_4 StartBool) (< Start_2 Start_7) (>= Start_1 Start_6)))
   (StartBool_4 Bool (false true (not StartBool) (or StartBool_1 StartBool_5) (<= Start_3 Start_6) (= Start_5 Start_8) (>= Start_1 Start) (> Start_8 Start_2)))
   (Start_12 Int (5 y 4 2 x 1 0 3 (- Start_2 Start_9) (* Start_1 Start_13) (mod Start Start_7) (abs Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (+ x 1) 3)))

(check-synth)
