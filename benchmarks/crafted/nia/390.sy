(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_7 Bool) (Start_4 Int) (StartBool_5 Bool) (Start_5 Int) (StartBool_6 Bool) (Start_13 Int) (Start_12 Int) (Start_11 Int) (Start_9 Int) (Start_16 Int) (Start_14 Int) (Start_2 Int) (StartBool_1 Bool) (Start_1 Int) (StartBool_8 Bool) (Start_3 Int) (StartBool_4 Bool) (Start_17 Int) (Start_6 Int) (StartBool_2 Bool) (Start_15 Int) (Start_7 Int) (StartBool_3 Bool) (Start_8 Int) (Start_10 Int))
  ((Start Int (4 2 (- Start) (- Start Start_1) (+ Start Start) (div Start_1 Start) (ite StartBool Start_2 Start_1)))
   (StartBool Bool (false (not StartBool) (and StartBool_7 StartBool_5) (or StartBool_3 StartBool_3) (< Start_16 Start_11) (<= Start_11 Start_8) (= Start_11 Start_16) (>= Start_8 Start_16) (> Start_4 Start_6)))
   (StartBool_7 Bool (false true (and StartBool_3 StartBool_8) (or StartBool_2 StartBool_2) (< Start_12 Start_11) (= Start_6 Start_15) (>= Start_12 Start_15) (> Start_9 Start)))
   (Start_4 Int (4 (- Start_3 Start_6) (div Start_15 Start_1) (abs Start_13) (ite StartBool_5 Start_8 Start_14)))
   (StartBool_5 Bool (false true (and StartBool_6 StartBool_4) (<= Start Start_2) (>= Start_10 Start_10)))
   (Start_5 Int (1 (div Start_12 Start_4) (ite StartBool_2 Start_3 Start_8)))
   (StartBool_6 Bool (true false (and StartBool_6 StartBool) (<= Start_11 Start_15) (>= Start_10 Start_3)))
   (Start_13 Int (3 2 x y 5 (- Start_10 Start_4) (+ Start_8 Start_12) (div Start Start_1) (abs Start_3)))
   (Start_12 Int (4 (- Start_10 Start_12) (+ Start Start_5) (abs Start_13)))
   (Start_11 Int (5 (- Start_14 Start_11) (div Start Start_9) (ite StartBool_4 Start_4 Start_13)))
   (Start_9 Int (1 (* Start_5 Start_2) (mod Start_5 Start_6) (abs Start_7)))
   (Start_16 Int (4 0 x 3 5 (- Start_7) (+ Start_2 Start_7) (div Start_15 Start_7) (mod Start_2 Start_3) (ite StartBool_5 Start_3 Start_13)))
   (Start_14 Int (1 (- Start_1 Start_5) (* Start_5 Start_10) (mod Start_7 Start_13) (ite StartBool_4 Start_9 Start_3)))
   (Start_2 Int (x (mod Start Start_1) (abs Start) (ite StartBool_1 Start_1 Start_1)))
   (StartBool_1 Bool (true (not StartBool)))
   (Start_1 Int (2 3 4 (+ Start_2 Start_2) (* Start_3 Start_1) (abs Start)))
   (StartBool_8 Bool (false (and StartBool_1 StartBool_7) (< Start_14 Start_3) (<= Start_3 Start_10) (= Start_9 Start_17) (>= Start_4 Start_16)))
   (Start_3 Int (y (- Start) (- Start_3 Start_4) (+ Start_3 Start_5) (* Start_4 Start_6) (mod Start Start_2) (abs Start_5) (ite StartBool_2 Start Start)))
   (StartBool_4 Bool (true false (and StartBool StartBool_1) (< Start_3 Start_5) (>= Start Start_3) (> Start_8 Start_4)))
   (Start_17 Int (4 5 (- Start_6 Start_9) (+ Start_15 Start_10) (div Start_16 Start_9) (abs Start_13)))
   (Start_6 Int (y 2 1 (- Start_6) (+ Start_6 Start_3) (mod Start_4 Start_5) (abs Start_10) (ite StartBool_4 Start_4 Start)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_1 StartBool) (or StartBool_2 StartBool_3) (<= Start_7 Start_6)))
   (Start_15 Int (1 4 2 5 3 y (- Start_13) (- Start_12 Start) (* Start_9 Start_15) (div Start_1 Start_2) (abs Start_14) (ite StartBool Start_2 Start_12)))
   (Start_7 Int (3 0 (- Start_3 Start_2) (+ Start_2 Start_2) (div Start_2 Start_5) (abs Start_7)))
   (StartBool_3 Bool (true (not StartBool_4) (< Start_2 Start_7) (= Start_5 Start_2) (>= Start_3 Start)))
   (Start_8 Int (5 2 (- Start) (- Start_2 Start_2) (mod Start_9 Start_3) (ite StartBool_3 Start_1 Start_6)))
   (Start_10 Int (4 1 y 5 (- Start_11 Start) (* Start_12 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div 5 0))))

(check-synth)
