(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_4 Bool) (Start_4 Int) (Start_3 Int) (Start_5 Int) (Start_9 Int) (StartBool_2 Bool) (Start_7 Int) (Start_2 Int) (StartBool_1 Bool) (Start_11 Int) (Start_10 Int) (Start_1 Int) (Start_6 Int) (Start_8 Int))
  ((Start Int (3 5 4 x 1 2 (- Start_1) (* Start_2 Start_3) (abs Start_4)))
   (StartBool Bool (false (and StartBool_2 StartBool) (or StartBool_3 StartBool_4)))
   (StartBool_3 Bool (false (not StartBool_1) (< Start_3 Start_10) (<= Start Start_8) (= Start_1 Start)))
   (StartBool_4 Bool (false true (<= Start_3 Start)))
   (Start_4 Int (0 3 (- Start_3) (+ Start_4 Start_2) (div Start Start_1) (ite StartBool Start Start)))
   (Start_3 Int (1 (* Start_1 Start_2) (mod Start_5 Start_3) (abs Start_3) (ite StartBool Start Start_3)))
   (Start_5 Int (2 1 y (- Start_3) (+ Start_6 Start_2) (abs Start_5)))
   (Start_9 Int (3 5 2 (- Start_3) (+ Start Start_9) (* Start_10 Start_10) (div Start_3 Start_1)))
   (StartBool_2 Bool (true (or StartBool StartBool_2) (<= Start_4 Start_5) (= Start_9 Start_1) (> Start_6 Start_6)))
   (Start_7 Int (x (- Start_1) (* Start_2 Start_2) (div Start_4 Start_4) (abs Start_3) (ite StartBool Start_4 Start_7)))
   (Start_2 Int (y (+ Start_4 Start_8) (* Start_5 Start_3) (mod Start_9 Start_9) (ite StartBool_1 Start Start_8)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool StartBool_2) (or StartBool StartBool_2) (< Start_5 Start_2)))
   (Start_11 Int (5 x 4 2 (- Start_10) (* Start_7 Start_1) (mod Start_8 Start_9) (abs Start_1)))
   (Start_10 Int (5 4 (+ Start_1 Start_2) (mod Start_2 Start_7) (abs Start)))
   (Start_1 Int (y 5 (- Start_10 Start_4) (+ Start_5 Start_4) (* Start_7 Start_10) (mod Start_6 Start_11) (abs Start_4) (ite StartBool_1 Start_5 Start_10)))
   (Start_6 Int (5 1 (- Start_6) (+ Start_1 Start_6) (* Start Start_4) (mod Start_7 Start_6)))
   (Start_8 Int (1 (- Start_1) (- Start_8 Start_9) (+ Start Start_4) (* Start_1 Start_6) (div Start_2 Start) (mod Start_4 Start_10) (ite StartBool_2 Start_8 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 4 (div 2 x))))

(check-synth)
