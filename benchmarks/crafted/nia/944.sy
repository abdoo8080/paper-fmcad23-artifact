(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_22 Int) (Start_7 Int) (StartBool_3 Bool) (Start_3 Int) (Start_2 Int) (Start_13 Int) (Start_21 Int) (Start_9 Int) (StartBool_1 Bool) (Start_16 Int) (Start_11 Int) (Start_20 Int) (Start_5 Int) (Start_1 Int) (Start_6 Int) (Start_10 Int) (Start_15 Int) (Start_4 Int) (StartBool_5 Bool) (StartBool_6 Bool) (Start_12 Int) (StartBool_4 Bool) (Start_8 Int) (Start_17 Int) (Start_18 Int) (Start_14 Int) (StartBool_2 Bool) (Start_19 Int))
  ((Start Int (y x (- Start_1 Start_2) (+ Start_1 Start) (* Start Start_3) (div Start_2 Start_1) (mod Start_4 Start_4) (abs Start_1)))
   (StartBool Bool (true (<= Start_21 Start) (> Start_14 Start_8)))
   (Start_22 Int (3 (- Start_3) (* Start_8 Start_6) (mod Start_17 Start_2) (ite StartBool_3 Start_16 Start_10)))
   (Start_7 Int (0 (- Start_4) (mod Start Start_5) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool_2 StartBool) (or StartBool StartBool_4) (< Start_12 Start_13) (<= Start_9 Start_2) (= Start_14 Start_6) (> Start_5 Start_3)))
   (Start_3 Int (5 0 y 1 x (* Start Start_1) (ite StartBool_2 Start_5 Start_6)))
   (Start_2 Int (x y (mod Start_10 Start_17)))
   (Start_13 Int (3 (* Start_15 Start_5) (div Start_11 Start_8) (ite StartBool_3 Start_10 Start_13)))
   (Start_21 Int (5 (- Start_9) (- Start_2 Start_19) (+ Start_17 Start_18) (* Start_8 Start_15) (abs Start_11) (ite StartBool_6 Start_18 Start_22)))
   (Start_9 Int (x (- Start_10 Start_9) (+ Start_9 Start_2) (* Start_2 Start) (mod Start_10 Start_9) (abs Start_11) (ite StartBool Start_5 Start_1)))
   (StartBool_1 Bool (false true (not StartBool_1) (< Start_2 Start_2) (<= Start_4 Start_1) (>= Start_3 Start_4) (> Start_1 Start)))
   (Start_16 Int (4 x (- Start_4) (* Start_16 Start_16) (abs Start)))
   (Start_11 Int (3 (- Start_7) (- Start_4 Start_5) (abs Start_10) (ite StartBool_3 Start_2 Start_5)))
   (Start_20 Int (3 2 (- Start_4 Start_8) (div Start_18 Start_16) (mod Start_18 Start_16) (ite StartBool_5 Start_15 Start_20)))
   (Start_5 Int (2 1 (- Start Start_5) (* Start_9 Start_1) (mod Start_7 Start_9)))
   (Start_1 Int (5 4 x 3))
   (Start_6 Int (2 (+ Start Start_7) (* Start_5 Start_6) (div Start_8 Start_1) (abs Start_8)))
   (Start_10 Int (2 (+ Start_15 Start_5) (* Start_17 Start_4) (div Start_16 Start_12) (ite StartBool_5 Start_9 Start_9)))
   (Start_15 Int (x y 5 4 (- Start_4) (abs Start_6) (ite StartBool_5 Start_2 Start_1)))
   (Start_4 Int (3 x 5 (- Start_3) (ite StartBool_1 Start_1 Start)))
   (StartBool_5 Bool (false (not StartBool_2) (and StartBool_5 StartBool_2) (or StartBool_2 StartBool_2) (<= Start_11 Start_16)))
   (StartBool_6 Bool (false true (and StartBool StartBool_3) (or StartBool StartBool_2) (<= Start_17 Start_9) (= Start_11 Start_14) (>= Start_13 Start_16)))
   (Start_12 Int (2 (- Start_13) (- Start_4 Start_12) (+ Start_2 Start_8) (* Start_10 Start_16)))
   (StartBool_4 Bool (false true (not StartBool_2) (<= Start_7 Start_4) (= Start_3 Start_8)))
   (Start_8 Int (0 2 x 4 (- Start_1 Start_7) (* Start_2 Start_8) (mod Start Start_4)))
   (Start_17 Int (4 (* Start Start_4) (div Start_18 Start_4) (abs Start_7)))
   (Start_18 Int (5 1 y (- Start_19) (* Start Start_13) (div Start_8 Start_3)))
   (Start_14 Int (4 (+ Start_2 Start_5) (* Start_9 Start_2) (div Start_10 Start_14)))
   (StartBool_2 Bool (true false (or StartBool_1 StartBool_6) (<= Start_7 Start)))
   (Start_19 Int (y 0 5 (- Start_2) (- Start_1 Start_16) (* Start_19 Start_11) (div Start_12 Start_6) (mod Start_3 Start_7) (abs Start_13) (ite StartBool_4 Start_2 Start_20)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- 3 x) 3)))

(check-synth)
