(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_12 Int) (StartBool_8 Bool) (Start_5 Int) (StartBool_7 Bool) (StartBool_5 Bool) (Start_2 Int) (Start_14 Int) (Start_4 Int) (Start_10 Int) (StartBool_1 Bool) (Start_3 Int) (Start_9 Int) (Start_11 Int) (Start_8 Int) (Start_13 Int) (Start_7 Int) (Start_6 Int) (StartBool_3 Bool) (StartBool_2 Bool) (StartBool_4 Bool) (StartBool_6 Bool))
  ((Start Int (y 2 4 (- Start_1) (- Start Start) (* Start Start) (div Start_2 Start) (mod Start Start) (ite StartBool Start Start_1)))
   (StartBool Bool (true false (< Start Start_14)))
   (Start_1 Int (x 1 (- Start_2 Start_4) (* Start_13 Start_9) (mod Start_13 Start_4) (abs Start_6)))
   (Start_12 Int (1 3 5 4 (+ Start_1 Start_8) (* Start_6 Start_12) (mod Start_10 Start_10) (abs Start_6) (ite StartBool_4 Start_11 Start_8)))
   (StartBool_8 Bool (false true (not StartBool_6) (> Start_9 Start_2)))
   (Start_5 Int (2 (mod Start_3 Start_1) (abs Start_11)))
   (StartBool_7 Bool (false (and StartBool_4 StartBool_7) (< Start_8 Start_2)))
   (StartBool_5 Bool (true false (and StartBool StartBool_7) (< Start Start_7) (<= Start_10 Start_5)))
   (Start_2 Int (4 (- Start_3) (+ Start_2 Start_4) (div Start_3 Start_4) (mod Start_2 Start_3) (abs Start)))
   (Start_14 Int (4 (- Start_11) (div Start_11 Start_12) (ite StartBool_3 Start_11 Start_12)))
   (Start_4 Int (2 5 (* Start_4 Start_2) (div Start_2 Start) (mod Start_1 Start_2)))
   (Start_10 Int (3 y 1 x (- Start_1) (+ Start_6 Start_10) (* Start_8 Start_8) (div Start_1 Start_1) (ite StartBool_7 Start Start_4)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_1) (<= Start_2 Start_2) (>= Start_2 Start_4) (> Start_2 Start_4)))
   (Start_3 Int (5 (- Start) (- Start_5 Start_1) (+ Start_6 Start_3) (* Start_1 Start_6) (abs Start_7) (ite StartBool_1 Start_6 Start_7)))
   (Start_9 Int (3 5 (* Start Start_8) (abs Start_10) (ite StartBool_4 Start_3 Start)))
   (Start_11 Int (y 5 1 (- Start_1) (+ Start Start_10) (* Start_12 Start_4) (div Start_4 Start_13) (mod Start_12 Start_9) (ite StartBool_8 Start_4 Start_10)))
   (Start_8 Int (1 (+ Start_4 Start_1) (abs Start_1)))
   (Start_13 Int (0 (* Start_12 Start_9)))
   (Start_7 Int (5 4 2 (- Start_8) (- Start_6 Start_3) (div Start Start_8) (mod Start_2 Start_1)))
   (Start_6 Int (0 1 x y 5 (- Start_2) (* Start_6 Start) (ite StartBool_3 Start_3 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_3) (or StartBool_3 StartBool_2) (< Start_7 Start_9) (<= Start_8 Start_2) (>= Start_7 Start_4)))
   (StartBool_2 Bool (false (or StartBool_1 StartBool_1) (<= Start_2 Start_6) (= Start_4 Start) (>= Start_7 Start) (> Start_8 Start_4)))
   (StartBool_4 Bool (true (not StartBool_1) (and StartBool_5 StartBool_1) (or StartBool_6 StartBool_4) (> Start_5 Start_4)))
   (StartBool_6 Bool (false true (< Start_9 Start_5) (>= Start_2 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- 2) (div 4 y))))

(check-synth)
