(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (Start_15 Int) (Start_17 Int) (Start_16 Int) (Start_1 Int) (Start_2 Int) (Start_18 Int) (Start_14 Int) (Start_13 Int) (Start_20 Int) (Start_19 Int) (StartBool_4 Bool) (Start_6 Int) (Start_5 Int) (Start_10 Int) (StartBool_1 Bool) (Start_7 Int) (Start_4 Int) (Start_3 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_8 Int) (Start_9 Int) (StartBool_5 Bool) (Start_11 Int) (Start_12 Int))
  ((Start Int (x (- Start_1) (div Start_1 Start_2) (ite StartBool_1 Start_3 Start_1)))
   (StartBool Bool (true (or StartBool_6 StartBool_4) (< Start_5 Start_1) (>= Start_7 Start_13)))
   (StartBool_6 Bool (false (not StartBool) (and StartBool_5 StartBool_5) (or StartBool StartBool_4) (<= Start_11 Start_18) (= Start_20 Start_14) (>= Start_6 Start_3) (> Start_6 Start_14)))
   (Start_15 Int (y 2 (+ Start Start_17) (* Start_7 Start_19) (div Start Start_13) (mod Start_2 Start_12) (ite StartBool_3 Start_10 Start_14)))
   (Start_17 Int (0 x 2 (- Start_15) (div Start_3 Start_9) (mod Start_3 Start_3) (abs Start_18)))
   (Start_16 Int (x (- Start_1) (- Start_13 Start_17) (div Start_12 Start_15) (abs Start_12) (ite StartBool_1 Start_1 Start_1)))
   (Start_1 Int (y (- Start_4 Start_9) (+ Start_3 Start_15) (mod Start_13 Start_10) (abs Start_16) (ite StartBool_3 Start_1 Start_2)))
   (Start_2 Int (1 (- Start_5) (* Start_2 Start_7) (div Start_3 Start_11) (mod Start_13 Start_4) (ite StartBool_4 Start_9 Start_5)))
   (Start_18 Int (0 y x 4 (- Start_16 Start_14) (* Start_5 Start_10)))
   (Start_14 Int (2 3 5 (- Start_6)))
   (Start_13 Int (3 (+ Start_3 Start_1) (* Start_8 Start_9) (div Start_8 Start) (abs Start_12) (ite StartBool_5 Start_8 Start_3)))
   (Start_20 Int (3 1 0 (- Start_1) (* Start_13 Start_17) (ite StartBool_5 Start_10 Start_17)))
   (Start_19 Int (x 2 (- Start_16 Start_12) (+ Start_10 Start_8) (ite StartBool Start Start_5)))
   (StartBool_4 Bool (true false (or StartBool_5 StartBool_5) (< Start_8 Start_13) (= Start Start_13) (>= Start_4 Start_2) (> Start_3 Start_4)))
   (Start_6 Int (2 y (- Start_3) (- Start_7 Start_4) (* Start_5 Start_3) (abs Start_4)))
   (Start_5 Int (4 (+ Start_6 Start_5) (div Start_7 Start_1) (mod Start_4 Start_4)))
   (Start_10 Int (2 4 y (- Start_5) (+ Start_9 Start_4) (* Start_11 Start_2) (div Start_6 Start_11) (mod Start_7 Start_8)))
   (StartBool_1 Bool (true (or StartBool_4 StartBool_1) (< Start_3 Start_11) (<= Start_10 Start_9) (> Start_10 Start)))
   (Start_7 Int (2 4 (abs Start_7) (ite StartBool_1 Start_1 Start_6)))
   (Start_4 Int (3 (- Start_1 Start_3) (mod Start_4 Start_1) (abs Start_6) (ite StartBool_2 Start Start_3)))
   (Start_3 Int (x (- Start_1) (div Start_4 Start_5) (abs Start_3)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_3 StartBool_3) (<= Start_6 Start_7) (= Start Start_6) (>= Start_5 Start_6)))
   (StartBool_3 Bool (true false (not StartBool_1) (< Start_5 Start_5) (= Start_8 Start_2) (>= Start_5 Start_3)))
   (Start_8 Int (x (- Start_4) (- Start Start_9) (+ Start_8 Start_5)))
   (Start_9 Int (y 0 (+ Start_4 Start_5) (* Start_10 Start_9) (mod Start_4 Start_3) (ite StartBool_2 Start_6 Start_6)))
   (StartBool_5 Bool (true false (or StartBool_5 StartBool_4) (< Start_14 Start_10) (<= Start_12 Start_4)))
   (Start_11 Int (5 4 (- Start_8) (- Start_9 Start) (* Start_12 Start_5) (div Start_8 Start) (abs Start_1)))
   (Start_12 Int (2 y (- Start_11 Start_9) (* Start_8 Start_9) (div Start_1 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (= x 2) 3 x)))

(check-synth)
