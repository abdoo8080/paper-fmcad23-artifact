(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_11 Int) (Start_5 Int) (Start_7 Int) (Start_3 Int) (Start_10 Int) (Start_6 Int) (Start_8 Int) (StartBool_2 Bool) (Start_2 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_9 Int) (Start_4 Int))
  ((Start Int (0 x 3 4 5 (* Start_1 Start_2) (div Start_3 Start_1)))
   (StartBool Bool (true (and StartBool_2 StartBool_2) (< Start_10 Start_1) (>= Start_2 Start_4)))
   (Start_1 Int (3 (+ Start_5 Start_9) (* Start_8 Start_8) (div Start_4 Start_7) (abs Start_11)))
   (Start_11 Int (2 (- Start_4) (* Start_9 Start) (mod Start_11 Start_5)))
   (Start_5 Int (2 0 (- Start Start_6) (+ Start_7 Start_3) (* Start_7 Start_2) (div Start_5 Start_3) (abs Start_7)))
   (Start_7 Int (x 4 (- Start_4) (mod Start_4 Start_5)))
   (Start_3 Int (2 4 5 1 3 (- Start_2) (div Start_3 Start) (mod Start_4 Start_2) (ite StartBool_1 Start_5 Start)))
   (Start_10 Int (5 (+ Start_8 Start_3) (* Start_8 Start_10)))
   (Start_6 Int (1 (- Start_3) (mod Start_8 Start_4) (abs Start_5) (ite StartBool_1 Start_8 Start_5)))
   (Start_8 Int (3 x (+ Start_1 Start_6) (div Start_3 Start_1) (abs Start_9) (ite StartBool_2 Start_8 Start_4)))
   (StartBool_2 Bool (false true (not StartBool) (< Start_7 Start_8) (= Start_8 Start_5) (>= Start_7 Start_4) (> Start Start_3)))
   (Start_2 Int (2 0 y (- Start_4) (* Start_6 Start_3) (div Start_11 Start) (abs Start_2) (ite StartBool Start_7 Start_4)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_1 StartBool_3) (< Start_7 Start_5) (= Start_8 Start_1) (>= Start_2 Start_10)))
   (StartBool_1 Bool (true (not StartBool_1) (or StartBool StartBool_3) (> Start_3 Start_1)))
   (Start_9 Int (3 1 2 (mod Start_10 Start_1) (abs Start)))
   (Start_4 Int (2 (- Start_5 Start_6) (div Start_1 Start_5) (mod Start_6 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (* x 5) 0)))

(check-synth)
