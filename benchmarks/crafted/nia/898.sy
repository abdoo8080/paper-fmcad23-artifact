(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_7 Bool) (Start_11 Int) (StartBool_5 Bool) (Start_9 Int) (Start_6 Int) (Start_2 Int) (Start_3 Int) (Start_12 Int) (Start_4 Int) (StartBool_6 Bool) (Start_5 Int) (Start_7 Int) (Start_8 Int) (Start_1 Int) (StartBool_1 Bool) (StartBool_3 Bool) (StartBool_2 Bool) (Start_10 Int))
  ((Start Int (4 1 y 0 (- Start Start_1) (+ Start Start_1) (div Start_2 Start)))
   (StartBool Bool (false (or StartBool_3 StartBool_4) (< Start_10 Start_4) (>= Start_2 Start_2) (> Start_12 Start_7)))
   (StartBool_4 Bool (false true (not StartBool_4) (or StartBool_4 StartBool_6) (< Start_11 Start_2) (<= Start_8 Start_7) (>= Start_7 Start_2) (> Start_6 Start_11)))
   (StartBool_7 Bool (false (not StartBool_1) (and StartBool_2 StartBool_5) (<= Start_1 Start_8) (= Start_9 Start_3) (> Start_8 Start_6)))
   (Start_11 Int (2 x y 0 (- Start_2) (+ Start_7 Start_11) (* Start_4 Start_6) (div Start_1 Start_10) (mod Start_6 Start_2) (abs Start_3)))
   (StartBool_5 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_6) (< Start_6 Start_7) (<= Start_7 Start_9) (> Start_1 Start_4)))
   (Start_9 Int (5 (+ Start_2 Start_9) (mod Start_5 Start_6) (abs Start_8)))
   (Start_6 Int (5 2 y (- Start_5) (- Start_6 Start_9) (+ Start_7 Start_1) (* Start_1 Start_6) (div Start Start_7) (abs Start)))
   (Start_2 Int (3 0 1 2 (- Start_2) (div Start_3 Start_1) (abs Start) (ite StartBool Start_3 Start)))
   (Start_3 Int (1 (- Start) (- Start_2 Start_4) (+ Start_3 Start_1) (* Start Start_3) (div Start_4 Start) (ite StartBool Start_2 Start_3)))
   (Start_12 Int (y 2 3 4 0 (- Start_1 Start_6) (* Start Start_11) (div Start Start_7) (mod Start Start_9)))
   (Start_4 Int (2 (- Start_3) (- Start_5 Start_5) (+ Start_2 Start_3) (div Start_3 Start_5) (abs Start_4)))
   (StartBool_6 Bool (false (not StartBool_4) (and StartBool_7 StartBool_5) (or StartBool_5 StartBool_2) (< Start_6 Start_6) (<= Start_5 Start_11) (= Start_6 Start_9)))
   (Start_5 Int (2 (- Start_6) (+ Start_6 Start_5) (* Start Start_7) (ite StartBool Start_1 Start)))
   (Start_7 Int (y 1 4 (- Start_3) (- Start_7 Start_1) (+ Start_3 Start_1) (* Start_6 Start_8)))
   (Start_8 Int (2 3 y (+ Start_3 Start_7) (abs Start_9)))
   (Start_1 Int (3 (- Start_4) (mod Start_5 Start_4) (abs Start) (ite StartBool_1 Start_8 Start_6)))
   (StartBool_1 Bool (true false (not StartBool_2) (or StartBool_1 StartBool_3) (< Start_8 Start_7) (<= Start_2 Start_2) (= Start_5 Start_2) (>= Start_7 Start_6) (> Start_9 Start_2)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_4) (or StartBool_5 StartBool_1) (< Start_6 Start_10) (= Start_2 Start_1) (> Start_10 Start_5)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_3 StartBool_5) (or StartBool_7 StartBool_5) (< Start_1 Start_3) (= Start_12 Start_9)))
   (Start_10 Int (5 (- Start_7) (+ Start_1 Start) (abs Start_4)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 4 (abs (mod y x)))))

(check-synth)
