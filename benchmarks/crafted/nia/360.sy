(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_11 Int) (Start_5 Int) (Start_10 Int) (Start_3 Int) (Start_4 Int) (Start_7 Int) (Start_9 Int) (Start_1 Int) (StartBool_2 Bool) (Start_8 Int) (Start_6 Int) (StartBool_1 Bool) (StartBool_3 Bool))
  ((Start Int (y (- Start Start) (+ Start Start_1) (* Start_1 Start) (div Start_1 Start_1)))
   (StartBool Bool (false true (>= Start_1 Start_10) (> Start_4 Start_1)))
   (Start_2 Int (4 (- Start_2 Start_7) (div Start_3 Start_8) (ite StartBool_3 Start_9 Start_2)))
   (Start_11 Int (4 3 (+ Start_10 Start_9)))
   (Start_5 Int (5 (- Start) (+ Start_7 Start_7) (* Start Start_10) (div Start_8 Start_10) (mod Start Start_8) (abs Start_10) (ite StartBool_1 Start_8 Start_3)))
   (Start_10 Int (x 4 y (- Start_7 Start_1) (* Start_5 Start_5) (mod Start_10 Start_5) (ite StartBool_2 Start_7 Start_2)))
   (Start_3 Int (x (- Start) (div Start Start_1) (mod Start_4 Start_2)))
   (Start_4 Int (0 3 4 (- Start_3) (+ Start_5 Start_2) (div Start_6 Start) (mod Start_1 Start_7) (abs Start_4)))
   (Start_7 Int (0 5 y 3 2 (- Start_4) (+ Start_5 Start_2) (div Start_8 Start_9) (ite StartBool_1 Start_6 Start_4)))
   (Start_9 Int (0 (- Start_7) (ite StartBool_1 Start_6 Start_7)))
   (Start_1 Int (2 y (- Start) (- Start_2 Start_1) (mod Start_2 Start_3) (abs Start_2)))
   (StartBool_2 Bool (false true (not StartBool) (or StartBool_3 StartBool_2)))
   (Start_8 Int (y (- Start_1) (+ Start Start_4) (div Start_5 Start_9)))
   (Start_6 Int (0 y 5 4 (- Start_6) (- Start Start_1) (abs Start)))
   (StartBool_1 Bool (false true (or StartBool StartBool_1) (< Start_4 Start_4) (= Start_8 Start_4) (>= Start_4 Start_8) (> Start_2 Start_9)))
   (StartBool_3 Bool (false (and StartBool StartBool) (>= Start_4 Start_8) (> Start_11 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 4 (* (mod y 5) 2))))

(check-synth)
