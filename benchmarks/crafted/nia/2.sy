(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_13 Int) (StartBool_2 Bool) (Start_11 Int) (Start_6 Int) (Start_7 Int) (StartBool_1 Bool) (Start_10 Int) (Start_2 Int) (StartBool_3 Bool) (StartBool_7 Bool) (Start_8 Int) (StartBool_4 Bool) (Start_12 Int) (Start_9 Int) (Start_1 Int) (Start_5 Int) (StartBool_8 Bool) (Start_14 Int) (Start_3 Int) (Start_4 Int) (StartBool_6 Bool) (StartBool_5 Bool))
  ((Start Int (3 0 2 5 (- Start_1) (- Start_1 Start_2) (+ Start_2 Start_2)))
   (StartBool Bool (true false (and StartBool_8 StartBool_8) (or StartBool_2 StartBool_8) (>= Start_15 Start_14) (> Start_7 Start_12)))
   (Start_15 Int (x 5 (mod Start_12 Start_3) (abs Start_12) (ite StartBool_4 Start_13 Start_2)))
   (Start_13 Int (y 1 (- Start_2 Start_1) (mod Start_11 Start_9) (ite StartBool_1 Start_1 Start_9)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_7 StartBool_5) (<= Start_1 Start_3) (= Start_10 Start_3) (> Start_9 Start_9)))
   (Start_11 Int (2 4 (+ Start_9 Start_11) (* Start_4 Start_1)))
   (Start_6 Int (5 (- Start_5 Start_11) (* Start_10 Start_7) (mod Start_3 Start_2)))
   (Start_7 Int (5 2 (- Start_6) (* Start_7 Start_2) (abs Start_3) (ite StartBool_1 Start_9 Start_9)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_2 StartBool) (or StartBool_3 StartBool_3) (= Start_2 Start) (>= Start_2 Start_2)))
   (Start_10 Int (1 (- Start_4 Start) (+ Start_8 Start_2) (div Start_8 Start_6) (abs Start_1) (ite StartBool_6 Start_4 Start_7)))
   (Start_2 Int (5 (- Start_1) (- Start_3 Start_1) (+ Start_2 Start_3) (* Start Start) (div Start_1 Start_1) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_3 Bool (false (and StartBool_4 StartBool_1) (< Start_3 Start_1) (= Start_2 Start)))
   (StartBool_7 Bool (false true (not StartBool_7) (and StartBool_7 StartBool_2) (or StartBool_4 StartBool_3) (<= Start_11 Start_4) (= Start_4 Start_1) (>= Start_10 Start_2)))
   (Start_8 Int (y (- Start Start_5) (+ Start Start_7) (* Start_7 Start_8) (mod Start_10 Start_1) (ite StartBool_1 Start_9 Start_2)))
   (StartBool_4 Bool (false true (or StartBool StartBool_2) (>= Start_4 Start) (> Start_4 Start_5)))
   (Start_12 Int (0 (div Start_2 Start_4) (mod Start_9 Start_13) (ite StartBool Start_8 Start_14)))
   (Start_9 Int (x (- Start_2) (- Start_5 Start_2) (+ Start_1 Start) (* Start_8 Start_2) (mod Start_8 Start_4) (abs Start_9)))
   (Start_1 Int (y 5 1 x (+ Start_14 Start) (div Start_6 Start_4) (abs Start_9) (ite StartBool_7 Start_4 Start_3)))
   (Start_5 Int (5 1 (- Start Start_5) (* Start_5 Start_3) (ite StartBool_2 Start_4 Start_3)))
   (StartBool_8 Bool (true (or StartBool_8 StartBool_2) (< Start_8 Start) (<= Start_11 Start_8) (>= Start_4 Start_8)))
   (Start_14 Int (5 4 x 2 1 y (- Start_14) (- Start_6 Start_12) (+ Start_12 Start_11) (mod Start_10 Start_3) (ite StartBool_8 Start_6 Start_7)))
   (Start_3 Int (0 (- Start_6 Start_8) (+ Start_12 Start) (abs Start_7) (ite StartBool_7 Start_4 Start_2)))
   (Start_4 Int (x y 3 (- Start_5) (+ Start_5 Start_6) (* Start_1 Start_7) (abs Start_6) (ite StartBool_5 Start_6 Start_3)))
   (StartBool_6 Bool (true (< Start_2 Start) (> Start_2 Start_4)))
   (StartBool_5 Bool (true (not StartBool_2) (or StartBool_4 StartBool_5) (< Start_7 Start_8) (= Start_9 Start_5)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 2 0))))

(check-synth)
