(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_10 Int) (Start_2 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_5 Int) (Start_8 Int) (Start_3 Int) (Start_9 Int) (Start_6 Int) (Start_1 Int) (Start_4 Int) (Start_7 Int))
  ((Start Int (5 x (- Start Start_1) (+ Start_1 Start_2) (* Start_3 Start_2) (div Start_4 Start) (abs Start_1)))
   (StartBool Bool (false true (not StartBool) (or StartBool StartBool_1) (< Start_7 Start_8) (> Start_5 Start_1)))
   (Start_10 Int (1 0 3 (- Start_7) (- Start_2 Start_5) (+ Start_4 Start_9) (mod Start_9 Start_6)))
   (Start_2 Int (3 5 y 2 1 x 0 (- Start Start_6) (+ Start_7 Start_4)))
   (StartBool_1 Bool (true (or StartBool_2 StartBool_1) (< Start_2 Start_2) (<= Start_1 Start_3) (> Start_4 Start)))
   (StartBool_2 Bool (true (and StartBool StartBool_2) (< Start Start_4) (= Start_3 Start)))
   (Start_5 Int (4 2 (* Start_1 Start) (mod Start_4 Start_5)))
   (Start_8 Int (0 4 1 2 (- Start_9) (* Start_2 Start_7) (abs Start_5)))
   (Start_3 Int (2 0 3 y 5 1 (- Start_4) (- Start_5 Start_2) (* Start_2 Start_5) (abs Start_5)))
   (Start_9 Int (0 1 y (- Start_1 Start_8) (+ Start_6 Start_10) (div Start_2 Start_1) (mod Start_8 Start) (abs Start_2)))
   (Start_6 Int (4 (- Start_3 Start_1) (* Start Start) (mod Start_4 Start_1)))
   (Start_1 Int (1 y 5 3 (- Start_1 Start_9) (div Start_9 Start_2) (abs Start_6)))
   (Start_4 Int (x (- Start_2) (* Start_3 Start_1) (mod Start_1 Start_5) (ite StartBool_1 Start_5 Start_4)))
   (Start_7 Int (5 (- Start_5 Start_8) (div Start_1 Start_2) (mod Start_5 Start_6) (ite StartBool_2 Start_4 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod x 3) 4)))

(check-synth)
