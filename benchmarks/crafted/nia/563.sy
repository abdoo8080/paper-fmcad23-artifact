(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_3 Int) (StartBool_5 Bool) (StartBool_6 Bool) (Start_6 Int) (StartBool_7 Bool) (Start_14 Int) (Start_1 Int) (Start_2 Int) (StartBool_2 Bool) (Start_11 Int) (Start_5 Int) (StartBool_3 Bool) (Start_9 Int) (Start_8 Int) (Start_7 Int) (Start_4 Int) (Start_10 Int) (StartBool_4 Bool) (Start_12 Int) (Start_15 Int) (Start_13 Int) (StartBool_1 Bool))
  ((Start Int (0 4 2 5 1 y (- Start_1 Start_1) (+ Start Start_1) (* Start Start) (mod Start Start) (ite StartBool Start Start_1)))
   (StartBool Bool (false true (not StartBool) (and StartBool_4 StartBool_3) (<= Start_7 Start_10) (>= Start_9 Start_11)))
   (Start_3 Int (3 (- Start_15) (* Start_14 Start) (div Start_1 Start_1) (abs Start_2) (ite StartBool_1 Start_9 Start_9)))
   (StartBool_5 Bool (false (not StartBool) (and StartBool_4 StartBool_6)))
   (StartBool_6 Bool (false true (not StartBool_6) (or StartBool_6 StartBool_5) (<= Start_5 Start_14) (= Start_9 Start_8) (>= Start Start_6)))
   (Start_6 Int (1 (- Start_5) (- Start_7 Start_2) (+ Start_8 Start_3) (mod Start_14 Start_10) (abs Start_10) (ite StartBool_7 Start_14 Start_6)))
   (StartBool_7 Bool (true (< Start_4 Start_6) (<= Start_13 Start) (= Start_12 Start_10) (> Start_1 Start_14)))
   (Start_14 Int (3 (- Start) (- Start_8 Start_5) (div Start Start_11) (abs Start) (ite StartBool Start_13 Start_9)))
   (Start_1 Int (0 5 (- Start_2) (+ Start_2 Start_1) (* Start_3 Start) (div Start_4 Start_4) (mod Start_5 Start_1)))
   (Start_2 Int (3 (- Start_5 Start_7) (mod Start_9 Start) (abs Start_6)))
   (StartBool_2 Bool (false (or StartBool_7 StartBool_5) (= Start_11 Start_13)))
   (Start_11 Int (4 0 y (- Start_4) (+ Start_4 Start_3) (div Start_10 Start_5) (mod Start_11 Start_3)))
   (Start_5 Int (4 5 (+ Start_6 Start) (abs Start_1) (ite StartBool_1 Start_7 Start_6)))
   (StartBool_3 Bool (true false (and StartBool_5 StartBool_5) (or StartBool StartBool_6) (< Start_10 Start) (= Start_8 Start_3) (> Start_3 Start_8)))
   (Start_9 Int (0 5 3 (+ Start_8 Start_3) (* Start_7 Start) (div Start Start_6) (abs Start_12) (ite StartBool_1 Start_7 Start_13)))
   (Start_8 Int (y 5 3 x 1 (* Start_13 Start_6) (mod Start_4 Start_9)))
   (Start_7 Int (x (- Start_8) (- Start_7 Start_3) (* Start_2 Start_9) (div Start_5 Start_5) (mod Start_10 Start) (ite StartBool_1 Start_11 Start_1)))
   (Start_4 Int (4 5 (- Start_12) (- Start_5 Start_14) (+ Start Start_14)))
   (Start_10 Int (5 3 (+ Start_5 Start_6) (* Start Start_1) (div Start_12 Start_3) (mod Start_1 Start_4) (ite StartBool_1 Start_12 Start_3)))
   (StartBool_4 Bool (false (< Start_7 Start_14) (<= Start_13 Start) (>= Start_4 Start_5) (> Start_2 Start_5)))
   (Start_12 Int (5 (- Start_3) (- Start_9 Start_6) (* Start_6 Start_5) (abs Start_4) (ite StartBool_1 Start_4 Start_7)))
   (Start_15 Int (y 1 2 (- Start_3) (- Start_2 Start_13) (* Start_10 Start_7) (div Start Start_9) (mod Start_13 Start_10) (abs Start_7) (ite StartBool_4 Start_3 Start_11)))
   (Start_13 Int (2 (* Start_5 Start_4) (ite StartBool_1 Start_4 Start_10)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_1 StartBool_3) (or StartBool_1 StartBool_4) (<= Start_9 Start_13) (= Start_6 Start_11)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- 5 x) 4)))

(check-synth)
