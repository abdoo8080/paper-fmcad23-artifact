(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_4 Int) (Start_7 Int) (Start_6 Int) (Start_5 Int) (Start_1 Int) (Start_3 Int) (Start_2 Int))
  ((Start Int (y 3 1 (+ Start_1 Start_2) (mod Start Start_1) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (true (not StartBool) (> Start_5 Start_2)))
   (Start_4 Int (0 1 2 (+ Start_1 Start_1) (* Start_5 Start) (div Start_1 Start_3) (mod Start_1 Start)))
   (Start_7 Int (0 2 (- Start_3) (+ Start_4 Start_3) (* Start_4 Start_7) (div Start_3 Start_2) (abs Start_5)))
   (Start_6 Int (1 (+ Start Start_7) (div Start_4 Start_2) (mod Start_1 Start_4) (ite StartBool Start_6 Start)))
   (Start_5 Int (4 (- Start Start_5) (mod Start_5 Start_6)))
   (Start_1 Int (5 3 (- Start_2 Start_4) (mod Start_5 Start_3)))
   (Start_3 Int (5 0 1 (- Start_1) (* Start_2 Start) (div Start Start_2) (mod Start_3 Start_3) (ite StartBool Start_1 Start_2)))
   (Start_2 Int (2 4 (- Start) (* Start_2 Start) (mod Start_3 Start_3) (ite StartBool Start_3 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs (abs x)) 4)))

(check-synth)
