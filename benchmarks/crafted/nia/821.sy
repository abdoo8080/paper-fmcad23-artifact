(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_6 Int) (Start_1 Int) (Start_3 Int) (Start_5 Int) (StartBool_1 Bool) (Start_4 Int) (Start_2 Int) (StartBool_2 Bool))
  ((Start Int (3 (+ Start_1 Start) (mod Start Start_2) (ite StartBool Start_1 Start)))
   (StartBool Bool (false true (= Start_5 Start_1) (>= Start_2 Start_3) (> Start_3 Start_5)))
   (Start_6 Int (1 3 4 y (div Start_1 Start_2) (mod Start_2 Start_6) (abs Start) (ite StartBool_2 Start_1 Start_5)))
   (Start_1 Int (1 4 (- Start_4) (div Start_5 Start_1) (mod Start_4 Start_3)))
   (Start_3 Int (2 (+ Start_2 Start_2) (* Start_3 Start_1) (mod Start_6 Start)))
   (Start_5 Int (0 (+ Start_4 Start_5) (* Start_4 Start_2) (abs Start_4)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool) (>= Start_5 Start_4)))
   (Start_4 Int (x (+ Start_1 Start_3)))
   (Start_2 Int (0 (- Start) (- Start Start_3) (+ Start_3 Start_1) (mod Start Start_3) (ite StartBool_1 Start_1 Start_4)))
   (StartBool_2 Bool (false true (not StartBool_1) (< Start_3 Start_5) (<= Start_2 Start) (= Start_6 Start) (>= Start_4 Start_2) (> Start Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* y (- 5)) y)))

(check-synth)
