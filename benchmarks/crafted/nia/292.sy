(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (Start_9 Int) (Start_11 Int) (StartBool_5 Bool) (Start_5 Int) (Start_14 Int) (Start_3 Int) (StartBool_7 Bool) (Start_2 Int) (Start_13 Int) (Start_10 Int) (StartBool_2 Bool) (Start_8 Int) (StartBool_1 Bool) (Start_1 Int) (Start_4 Int) (Start_6 Int) (StartBool_3 Bool) (Start_16 Int) (Start_12 Int) (StartBool_4 Bool) (Start_7 Int) (StartBool_6 Bool))
  ((Start Int (2 x 1 (+ Start Start_1) (div Start Start_2) (mod Start Start_3) (abs Start_1)))
   (StartBool Bool (false true (and StartBool_2 StartBool_7) (<= Start_16 Start_5) (= Start_13 Start_2) (> Start_14 Start_5)))
   (Start_15 Int (3 2 (- Start_10) (- Start_14 Start_10) (* Start_12 Start_11) (abs Start_1)))
   (Start_9 Int (y (* Start_3 Start_5) (div Start Start_10) (ite StartBool_3 Start_10 Start_15)))
   (Start_11 Int (3 1 x y 5 0 4 2 (div Start_6 Start_12) (mod Start_1 Start_5) (abs Start_12)))
   (StartBool_5 Bool (false (and StartBool_7 StartBool_7) (or StartBool_4 StartBool_6) (< Start_9 Start_3) (>= Start_9 Start)))
   (Start_5 Int (x (- Start_6) (div Start_8 Start_5)))
   (Start_14 Int (0 x (- Start_3) (- Start_12 Start_10) (* Start_12 Start_1) (div Start_5 Start_3) (mod Start_13 Start) (ite StartBool_2 Start_13 Start_1)))
   (Start_3 Int (y (- Start_3) (- Start_2 Start_2) (* Start_1 Start_2) (div Start_3 Start_2) (abs Start) (ite StartBool Start_2 Start_1)))
   (StartBool_7 Bool (false (or StartBool_7 StartBool_2) (< Start_6 Start_2) (<= Start_7 Start_2) (= Start_11 Start_10) (> Start_8 Start_1)))
   (Start_2 Int (x 4 2 (- Start_3) (- Start_1 Start_4) (div Start_3 Start) (abs Start_3) (ite StartBool Start_4 Start_2)))
   (Start_13 Int (y 4 (- Start_13 Start_9) (+ Start_12 Start_14) (abs Start_11) (ite StartBool_2 Start_2 Start_13)))
   (Start_10 Int (2 (- Start_4) (- Start_8 Start_9) (+ Start Start_3) (div Start_6 Start_1) (ite StartBool_3 Start_3 Start)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool) (or StartBool StartBool) (< Start_2 Start_4) (<= Start_8 Start_5) (>= Start_3 Start)))
   (Start_8 Int (3 (- Start_6 Start_4) (abs Start_6) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool_1) (or StartBool_1 StartBool_2) (<= Start_1 Start_5) (= Start_5 Start_8)))
   (Start_1 Int (x 1 (- Start_5 Start_6) (div Start_4 Start_13) (mod Start_3 Start_6)))
   (Start_4 Int (y (- Start_1) (- Start_5 Start_6) (* Start_7 Start_1) (abs Start_7) (ite StartBool Start_3 Start_5)))
   (Start_6 Int (x (- Start_8) (- Start_7 Start_4) (* Start_9 Start_10) (abs Start_7) (ite StartBool Start_9 Start)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_4 StartBool_2) (< Start_6 Start_3) (<= Start_8 Start_1) (= Start_4 Start)))
   (Start_16 Int (5 (- Start_13) (- Start_8 Start_10) (* Start Start_15)))
   (Start_12 Int (3 (+ Start_6 Start_2) (* Start_5 Start_8) (mod Start_10 Start_4) (ite StartBool_4 Start_13 Start_5)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool_5 StartBool_6) (= Start Start_2)))
   (Start_7 Int (4 (- Start_5) (- Start_6 Start_6) (div Start_8 Start_6) (abs Start)))
   (StartBool_6 Bool (false true (or StartBool_5 StartBool_6) (< Start_3 Start) (>= Start_9 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 0 (abs y))))

(check-synth)
