(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_7 Int) (Start_5 Int) (StartBool_1 Bool) (Start_4 Int) (Start_3 Int) (Start_8 Int) (Start_6 Int) (Start_2 Int))
  ((Start Int (4 y (+ Start_1 Start) (div Start Start_2) (ite StartBool Start_1 Start_2)))
   (StartBool Bool (true false (not StartBool_1) (< Start_4 Start_1) (= Start_7 Start_7)))
   (Start_1 Int (4 0 5 (- Start_1) (+ Start Start_2) (abs Start_2) (ite StartBool_1 Start_7 Start_2)))
   (Start_7 Int (2 (- Start_8) (- Start_6 Start_8) (* Start_6 Start_5) (mod Start_6 Start_4) (ite StartBool Start_2 Start)))
   (Start_5 Int (5 (- Start_5) (- Start_2 Start_4) (div Start_4 Start_1) (abs Start_4)))
   (StartBool_1 Bool (false true (not StartBool) (< Start Start_1)))
   (Start_4 Int (0 (- Start_3) (* Start Start_4) (mod Start_5 Start_4) (abs Start_6) (ite StartBool Start_2 Start_5)))
   (Start_3 Int (5 y 4 (- Start_1) (- Start_1 Start_3) (+ Start_2 Start_4)))
   (Start_8 Int (5 (- Start_8) (+ Start_8 Start_1) (* Start Start_6) (mod Start_8 Start_7) (ite StartBool Start_3 Start_3)))
   (Start_6 Int (3 (+ Start_1 Start_4) (div Start_2 Start_6)))
   (Start_2 Int (3 (- Start_3 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 4 (+ (abs y) 2))))

(check-synth)
