(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_2 Int) (Start_11 Int) (Start_3 Int) (Start_6 Int) (Start_7 Int) (Start_8 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_1 Int) (Start_9 Int) (Start_5 Int) (Start_10 Int) (Start_4 Int))
  ((Start Int (3 4 (- Start) (- Start_1 Start) (div Start Start) (abs Start)))
   (StartBool Bool (true false (= Start_4 Start) (> Start_11 Start_6)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_1) (> Start Start_2)))
   (Start_2 Int (2 5 0 1 4 (- Start_3 Start_1) (+ Start_4 Start_1) (* Start_5 Start_2) (abs Start_4) (ite StartBool_1 Start_3 Start_6)))
   (Start_11 Int (2 (- Start_1 Start_9) (* Start_5 Start_9) (div Start_9 Start_7)))
   (Start_3 Int (3 4 y (mod Start_7 Start_3) (ite StartBool_3 Start_3 Start_9)))
   (Start_6 Int (x y 4 (- Start_5 Start) (+ Start_4 Start_4) (* Start_7 Start) (mod Start_1 Start_2)))
   (Start_7 Int (1 3 2 (* Start Start_3) (mod Start_2 Start_7)))
   (Start_8 Int (x 2 1 (- Start_3) (+ Start_8 Start_7) (mod Start_4 Start_9) (abs Start_1)))
   (StartBool_2 Bool (false (not StartBool) (< Start_1 Start_1) (<= Start_7 Start_5) (>= Start_6 Start_2) (> Start_8 Start_9)))
   (StartBool_1 Bool (true (> Start_7 Start_8)))
   (Start_1 Int (0 1 x 3 (* Start_1 Start_1) (div Start_2 Start_1)))
   (Start_9 Int (x 2 (* Start_2 Start_5) (mod Start_4 Start_6)))
   (Start_5 Int (x 4 5 1 2 y 3 0 (- Start_2) (+ Start_7 Start_10) (div Start_1 Start_7) (ite StartBool_1 Start_9 Start)))
   (Start_10 Int (5 (- Start_8 Start_9) (div Start_7 Start_9) (mod Start_4 Start) (ite StartBool Start_9 Start_10)))
   (Start_4 Int (3 0 (- Start_10 Start_9) (+ Start_11 Start_4) (ite StartBool_2 Start_7 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 0 (mod 5 y))))

(check-synth)
