(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_2 Int) (Start_20 Int) (Start_3 Int) (Start_18 Int) (Start_16 Int) (Start_13 Int) (Start_5 Int) (StartBool_1 Bool) (Start_17 Int) (Start_15 Int) (Start_14 Int) (Start_4 Int) (Start_21 Int) (Start_8 Int) (Start_9 Int) (StartBool_3 Bool) (Start_7 Int) (Start_10 Int) (Start_6 Int) (Start_19 Int) (StartBool_2 Bool) (Start_11 Int) (Start_12 Int))
  ((Start Int (2 (- Start) (* Start_1 Start_2) (mod Start Start_3) (abs Start_4) (ite StartBool Start_5 Start_3)))
   (StartBool Bool (false (not StartBool_1) (< Start_3 Start_21) (<= Start_21 Start_10) (> Start_12 Start_12)))
   (Start_1 Int (1 (- Start_12) (- Start_19 Start_7) (* Start_16 Start_7) (mod Start_20 Start_11) (abs Start_18) (ite StartBool Start_10 Start_7)))
   (Start_2 Int (1 y 2 (- Start_2) (- Start_16 Start_16) (* Start_18 Start_13)))
   (Start_20 Int (y 0 3 (- Start_19 Start_2) (* Start_7 Start_8) (div Start Start_6) (abs Start_8)))
   (Start_3 Int (5 (- Start Start_1) (+ Start_7 Start_3) (* Start_16 Start_10) (div Start_19 Start_6) (mod Start_7 Start_1)))
   (Start_18 Int (2 (- Start_17) (+ Start_17 Start_12) (* Start_4 Start_6) (div Start_14 Start_15) (abs Start_12)))
   (Start_16 Int (2 (- Start_18 Start_5) (+ Start_12 Start_1) (div Start_13 Start_8) (abs Start_2)))
   (Start_13 Int (3 y 4 5 1 2 x (- Start_4) (+ Start Start_5) (* Start_6 Start_15) (mod Start_6 Start_4) (abs Start_11) (ite StartBool_2 Start_11 Start_11)))
   (Start_5 Int (4 y 5 (- Start_6) (- Start_5 Start_2) (+ Start_2 Start) (* Start_1 Start_2) (div Start_7 Start_4) (mod Start_7 Start_3) (ite StartBool_1 Start_1 Start_6)))
   (StartBool_1 Bool (false true (< Start_8 Start_8) (= Start_8 Start_3) (>= Start_7 Start_3)))
   (Start_17 Int (x (- Start_5) (- Start_7 Start_15) (* Start_5 Start_13) (div Start_15 Start_7) (mod Start_4 Start_13) (abs Start_1)))
   (Start_15 Int (1 (- Start_16) (- Start_9 Start_17) (+ Start_3 Start_4) (div Start_2 Start_5) (abs Start_17) (ite StartBool Start_3 Start_7)))
   (Start_14 Int (5 3 x (- Start_6 Start_11)))
   (Start_4 Int (5 (- Start_5 Start_3) (+ Start_8 Start_11) (* Start_8 Start_8) (div Start_7 Start_8) (mod Start_5 Start_10) (abs Start_2)))
   (Start_21 Int (x 3 1 4 5 (- Start_15 Start_8) (div Start_2 Start_6) (abs Start_13)))
   (Start_8 Int (x (- Start_3) (- Start_9 Start_8) (+ Start_1 Start_8) (div Start_2 Start_9) (mod Start_2 Start_3) (ite StartBool Start_3 Start_2)))
   (Start_9 Int (x 0 1 2 5 4 (- Start_9) (- Start_3 Start_4) (* Start_3 Start_6) (mod Start Start_9) (abs Start_8) (ite StartBool_1 Start_9 Start_6)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool StartBool_2) (< Start_14 Start_9) (= Start_9 Start_12)))
   (Start_7 Int (y 1 (- Start_5) (+ Start_6 Start_1) (mod Start_8 Start_4) (abs Start_10)))
   (Start_10 Int (0 1 (+ Start_8 Start_1) (div Start Start_4) (mod Start Start_10)))
   (Start_6 Int (0 4 (* Start_8 Start_1) (div Start_4 Start) (mod Start_9 Start_1) (abs Start_6) (ite StartBool_2 Start_10 Start)))
   (Start_19 Int (1 4 (- Start_3 Start_20) (+ Start_6 Start_3) (* Start_7 Start_14) (div Start_12 Start) (abs Start_4)))
   (StartBool_2 Bool (false (not StartBool_2) (< Start_9 Start) (> Start_2 Start_4)))
   (Start_11 Int (2 (- Start_1) (- Start_5 Start_7) (+ Start_5 Start_12) (mod Start_12 Start_1)))
   (Start_12 Int (5 (- Start_8) (+ Start_4 Start_6) (abs Start_13) (ite StartBool_3 Start_5 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 3 (div (div y y) 2))))

(check-synth)
