(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (Start_8 Int) (Start_5 Int) (Start_4 Int) (Start_7 Int) (Start_6 Int) (Start_2 Int) (StartBool_1 Bool) (Start_1 Int) (Start_3 Int))
  ((Start Int (3 (- Start) (- Start Start_1) (+ Start_1 Start_2) (div Start_3 Start_3) (abs Start_1)))
   (StartBool Bool (true (not StartBool_2) (= Start Start) (> Start_4 Start_5)))
   (StartBool_2 Bool (false true (not StartBool_1) (< Start_4 Start_4) (<= Start Start_4) (= Start_2 Start_1)))
   (Start_8 Int (1 (+ Start_7 Start_4) (div Start_8 Start_6) (mod Start Start_5) (abs Start_7) (ite StartBool_2 Start_8 Start_5)))
   (Start_5 Int (y 0 (- Start_3 Start_4) (abs Start_6)))
   (Start_4 Int (x 2 (- Start_3) (* Start Start_2) (mod Start_3 Start) (abs Start)))
   (Start_7 Int (3 x (- Start_2 Start_8) (* Start_2 Start_7) (ite StartBool Start_6 Start_1)))
   (Start_6 Int (5 3 y (div Start_1 Start_2) (mod Start_1 Start_7) (abs Start_6)))
   (Start_2 Int (y x 4 2 (- Start_2) (* Start_1 Start_3) (div Start_4 Start_3) (mod Start_4 Start_1) (abs Start_2)))
   (StartBool_1 Bool (false (and StartBool StartBool_1) (= Start_2 Start_3) (> Start_1 Start_2)))
   (Start_1 Int (5 (* Start_3 Start_4) (div Start_3 Start) (abs Start) (ite StartBool_1 Start_1 Start_1)))
   (Start_3 Int (5 (- Start_2) (- Start_3 Start_3) (* Start_2 Start_2) (ite StartBool_1 Start_3 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (abs y) 4)))

(check-synth)
