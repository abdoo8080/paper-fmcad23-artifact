(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_7 Int) (Start_15 Int) (Start_14 Int) (Start_13 Int) (Start_8 Int) (Start_5 Int) (StartBool_4 Bool) (Start_11 Int) (Start_2 Int) (Start_3 Int) (Start_4 Int) (Start_1 Int) (Start_12 Int) (StartBool_6 Bool) (StartBool_3 Bool) (StartBool_2 Bool) (Start_10 Int) (StartBool_1 Bool) (Start_6 Int) (Start_9 Int) (StartBool_5 Bool))
  ((Start Int (x (mod Start_1 Start) (abs Start_1) (ite StartBool_1 Start_1 Start_1)))
   (StartBool Bool (false (not StartBool) (< Start_11 Start_14) (> Start_13 Start_3)))
   (Start_16 Int (3 (- Start_3 Start_12) (+ Start_14 Start_8) (* Start_8 Start_5) (abs Start_11)))
   (Start_7 Int (5 (- Start_11) (- Start_14 Start_7) (+ Start_11 Start_2) (* Start_14 Start_7) (mod Start_14 Start_8) (ite StartBool_4 Start_2 Start_3)))
   (Start_15 Int (5 (ite StartBool_3 Start_8 Start_7)))
   (Start_14 Int (y 3 2 (- Start_8) (- Start_14 Start_15) (* Start_6 Start_14) (mod Start_6 Start_8) (ite StartBool_1 Start_11 Start_6)))
   (Start_13 Int (5 2 x (- Start_10) (+ Start_3 Start_2) (* Start_4 Start_14) (div Start_1 Start_7) (mod Start_12 Start_2) (abs Start_8) (ite StartBool_5 Start_14 Start_13)))
   (Start_8 Int (x y (- Start_1) (- Start_7 Start_8) (div Start_1 Start_12) (mod Start_8 Start) (abs Start_10)))
   (Start_5 Int (4 0 5 y 2 3 (- Start_13 Start_13) (+ Start_13 Start_15) (* Start_7 Start_9) (div Start_7 Start_3) (mod Start_16 Start_9)))
   (StartBool_4 Bool (true (and StartBool_5 StartBool_2) (or StartBool StartBool_1) (< Start_4 Start) (<= Start_1 Start_7) (> Start_9 Start_3)))
   (Start_11 Int (0 (- Start_2) (+ Start_11 Start_2) (abs Start_11) (ite StartBool_2 Start_10 Start_11)))
   (Start_2 Int (4 (mod Start_2 Start) (ite StartBool_2 Start_1 Start_1)))
   (Start_3 Int (0 2 (mod Start_2 Start_2) (abs Start_3) (ite StartBool_2 Start_1 Start_2)))
   (Start_4 Int (2 4 1 y x 3))
   (Start_1 Int (x 5 (- Start Start_2) (* Start_4 Start) (div Start_5 Start_4) (abs Start_6) (ite StartBool_3 Start_4 Start_4)))
   (Start_12 Int (2 1 (- Start Start) (+ Start_13 Start_8) (* Start_2 Start_5)))
   (StartBool_6 Bool (true false (and StartBool_3 StartBool) (< Start_8 Start_2)))
   (StartBool_3 Bool (false true (not StartBool_2) (or StartBool StartBool) (< Start_6 Start_5) (<= Start Start_4) (= Start_2 Start_5) (>= Start_6 Start_1) (> Start_1 Start_4)))
   (StartBool_2 Bool (false (< Start Start_2) (<= Start_1 Start) (= Start_1 Start_2) (>= Start_2 Start_2) (> Start_2 Start_3)))
   (Start_10 Int (2 (- Start_6) (- Start_2 Start_9) (* Start_5 Start_2) (div Start_4 Start_11)))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (<= Start_1 Start_2) (>= Start_2 Start) (> Start_1 Start_1)))
   (Start_6 Int (3 (- Start_7) (- Start_7 Start_8) (+ Start_9 Start_6) (mod Start_2 Start_6) (abs Start_3) (ite StartBool_4 Start_4 Start_8)))
   (Start_9 Int (5 x 3 (- Start_7 Start_1) (ite StartBool_6 Start_6 Start_6)))
   (StartBool_5 Bool (false true (not StartBool_4) (<= Start_6 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (div x 5) 3)))

(check-synth)
