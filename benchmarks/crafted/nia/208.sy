(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_1 Bool) (Start_12 Int) (Start_3 Int) (Start_2 Int) (Start_7 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_6 Int) (Start_4 Int) (Start_10 Int) (Start_5 Int) (Start_1 Int) (Start_8 Int) (Start_11 Int) (Start_9 Int))
  ((Start Int (3 1 4 (- Start) (+ Start Start) (* Start Start_1) (abs Start_2)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_1 StartBool) (>= Start_1 Start_3) (> Start_7 Start_6)))
   (StartBool_1 Bool (false true (= Start_7 Start)))
   (Start_12 Int (3 (* Start_4 Start) (div Start_7 Start_6) (ite StartBool_3 Start_9 Start_11)))
   (Start_3 Int (0 (- Start_4) (ite StartBool Start_5 Start_4)))
   (Start_2 Int (3 5 4 (- Start_1) (- Start_2 Start_3) (abs Start)))
   (Start_7 Int (y (- Start) (* Start_8 Start_4) (div Start_7 Start_6) (abs Start) (ite StartBool_2 Start_9 Start_7)))
   (StartBool_3 Bool (false (or StartBool StartBool_1) (< Start_9 Start_5) (= Start_5 Start_9) (>= Start_9 Start_8) (> Start_8 Start_1)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool StartBool_3) (or StartBool_1 StartBool_2) (<= Start_8 Start_8) (= Start_5 Start_5) (>= Start_9 Start_8)))
   (Start_6 Int (2 (div Start_4 Start_4) (mod Start_4 Start_2)))
   (Start_4 Int (x 5 (- Start_3) (abs Start)))
   (Start_10 Int (4 x (- Start_5 Start_8) (+ Start_11 Start_9) (* Start_7 Start_4)))
   (Start_5 Int (3 (- Start_6) (* Start_1 Start_6) (mod Start_5 Start_2) (abs Start)))
   (Start_1 Int (4 (- Start_6) (mod Start_5 Start_1)))
   (Start_8 Int (2 (- Start_10) (+ Start_5 Start_8) (* Start Start_6) (div Start_7 Start_1) (mod Start_1 Start_10)))
   (Start_11 Int (0 (- Start_2) (- Start_6 Start_5) (* Start_8 Start_7) (mod Start_12 Start_4) (abs Start)))
   (Start_9 Int (4 5 3 1 0 2 y (- Start_9 Start_8) (mod Start_3 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 4 (* 3 x))))

(check-synth)
