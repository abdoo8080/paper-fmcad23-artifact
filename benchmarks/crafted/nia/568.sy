(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_15 Int) (StartBool_6 Bool) (Start_14 Int) (Start_11 Int) (Start_13 Int) (Start_3 Int) (Start_2 Int) (StartBool_1 Bool) (Start_4 Int) (Start_6 Int) (StartBool_4 Bool) (StartBool_7 Bool) (StartBool_3 Bool) (Start_8 Int) (Start_10 Int) (Start_1 Int) (Start_9 Int) (Start_5 Int) (StartBool_2 Bool) (Start_12 Int) (StartBool_5 Bool) (Start_7 Int))
  ((Start Int (1 (+ Start Start_1) (div Start_2 Start) (mod Start_1 Start) (abs Start)))
   (StartBool Bool (false true (and StartBool_6 StartBool_7) (= Start_6 Start_10) (>= Start_1 Start_11)))
   (Start_15 Int (0 3 1 2 5 4 (- Start_8) (- Start_2 Start_8) (* Start_7 Start_2) (div Start Start_5) (mod Start_10 Start)))
   (StartBool_6 Bool (true false (not StartBool_6) (or StartBool_5 StartBool) (< Start_4 Start_8)))
   (Start_14 Int (2 3 (- Start_15) (- Start_8 Start_9) (+ Start_2 Start_10) (mod Start_6 Start_10) (abs Start_1) (ite StartBool_6 Start_5 Start_4)))
   (Start_11 Int (2 5 x 1 3 (- Start_1) (- Start_12 Start_8) (* Start_8 Start_8) (mod Start_12 Start_13) (abs Start)))
   (Start_13 Int (3 (- Start_13) (- Start_12 Start_10) (* Start_5 Start_7) (div Start_7 Start_7) (mod Start_6 Start_3) (abs Start_13)))
   (Start_3 Int (0 2 (- Start_8) (+ Start Start_1) (* Start_7 Start_2) (div Start_3 Start_5) (mod Start_3 Start_9)))
   (Start_2 Int (0 x 3 5 (mod Start_3 Start) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_2) (<= Start_4 Start_3) (= Start_2 Start_3) (> Start_4 Start_1)))
   (Start_4 Int (x 3 (- Start_5 Start) (+ Start_6 Start_4) (div Start_5 Start_2)))
   (Start_6 Int (0 (- Start_1) (+ Start_6 Start_7) (abs Start_1) (ite StartBool_3 Start_4 Start_6)))
   (StartBool_4 Bool (false true (not StartBool_2) (or StartBool_2 StartBool_5) (< Start_9 Start_8) (= Start_9 Start_6) (>= Start_2 Start_1)))
   (StartBool_7 Bool (false (<= Start_7 Start_2) (= Start_12 Start_6)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_1 StartBool_4) (< Start_1 Start_5) (= Start_6 Start_2) (> Start_8 Start)))
   (Start_8 Int (x 5 (- Start_5 Start_5) (mod Start_6 Start_9) (abs Start_1)))
   (Start_10 Int (4 5 1 (- Start_7) (+ Start_7 Start_3) (* Start_4 Start_3) (div Start_6 Start) (mod Start_9 Start_4) (ite StartBool_2 Start_5 Start_9)))
   (Start_1 Int (4 1 (- Start_8) (- Start_6 Start_3) (* Start_7 Start_8) (ite StartBool_5 Start_4 Start_10)))
   (Start_9 Int (5 (- Start_8) (- Start_4 Start_4) (+ Start_2 Start_9) (mod Start_6 Start_6) (abs Start_2)))
   (Start_5 Int (5 (+ Start Start_8) (* Start_6 Start_4) (div Start_4 Start_8) (mod Start_4 Start_7)))
   (StartBool_2 Bool (false (not StartBool_3) (or StartBool_3 StartBool_2) (< Start_6 Start_4) (>= Start_8 Start_4)))
   (Start_12 Int (5 3 (- Start_2 Start_3) (+ Start_5 Start_5) (* Start_14 Start_7) (div Start_13 Start_5) (mod Start_3 Start_8) (abs Start_1)))
   (StartBool_5 Bool (false true (and StartBool_4 StartBool_4) (or StartBool_5 StartBool_3) (<= Start_3 Start_5) (= Start_5 Start_9) (>= Start_8 Start_7)))
   (Start_7 Int (2 (- Start_2) (- Start_5 Start) (* Start_4 Start_7) (abs Start) (ite StartBool_4 Start_2 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (abs (* 4 (mod (mod 1 x) 0))))))

(check-synth)
