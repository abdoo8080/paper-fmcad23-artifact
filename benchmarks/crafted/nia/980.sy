(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_3 Bool) (Start_17 Int) (Start_16 Int) (Start_14 Int) (Start_13 Int) (Start_10 Int) (Start_2 Int) (Start_5 Int) (Start_12 Int) (Start_3 Int) (StartBool_1 Bool) (Start_15 Int) (Start_7 Int) (Start_6 Int) (StartBool_2 Bool) (Start_1 Int) (Start_11 Int) (Start_8 Int) (Start_4 Int) (Start_9 Int))
  ((Start Int (0 5 (+ Start_1 Start) (ite StartBool Start_2 Start_1)))
   (StartBool Bool (true false (or StartBool_2 StartBool) (< Start_7 Start_4) (<= Start_8 Start) (>= Start_14 Start_5)))
   (StartBool_3 Bool (false true (or StartBool_1 StartBool_1) (<= Start_11 Start_1) (= Start_5 Start_17) (> Start_16 Start_10)))
   (Start_17 Int (y (ite StartBool_1 Start_5 Start_8)))
   (Start_16 Int (2 (- Start_17) (mod Start_8 Start_13) (ite StartBool_1 Start_12 Start_11)))
   (Start_14 Int (4 (- Start_8) (+ Start_10 Start_1) (* Start_15 Start_13) (mod Start Start_5) (ite StartBool_3 Start_16 Start_4)))
   (Start_13 Int (4 2 (* Start_10 Start_11) (mod Start_4 Start_3) (abs Start_9)))
   (Start_10 Int (3 0 (- Start_4) (* Start_7 Start_12) (div Start_13 Start_4) (ite StartBool_1 Start_12 Start_7)))
   (Start_2 Int (0 (- Start_2) (+ Start_1 Start) (* Start Start_1) (mod Start_2 Start_1) (abs Start)))
   (Start_5 Int (5 1 y (+ Start_3 Start_2) (* Start_6 Start_3) (mod Start Start)))
   (Start_12 Int (4 (- Start_11) (+ Start_11 Start_4) (* Start_12 Start_4) (div Start_1 Start_8) (mod Start_4 Start_9)))
   (Start_3 Int (2 1 x 0 4 (- Start_6) (+ Start Start_2) (* Start_5 Start_6) (mod Start Start_6) (abs Start_9)))
   (StartBool_1 Bool (false (not StartBool_2) (<= Start_5 Start_4) (= Start_5 Start_7) (>= Start_3 Start_5) (> Start_2 Start_2)))
   (Start_15 Int (2 (* Start_9 Start_8) (abs Start_16)))
   (Start_7 Int (5 4 (- Start_1) (- Start Start_2) (+ Start_7 Start_1) (mod Start_3 Start_7) (ite StartBool Start_2 Start_1)))
   (Start_6 Int (1 (- Start_5) (div Start_3 Start_4) (ite StartBool_1 Start_4 Start)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool StartBool) (< Start_8 Start) (= Start_5 Start_5)))
   (Start_1 Int (x (- Start_3) (* Start_3 Start_4) (mod Start_5 Start_2)))
   (Start_11 Int (y 1 2 3 (- Start_7 Start) (mod Start_11 Start_4) (abs Start_10)))
   (Start_8 Int (5 x (- Start_3) (- Start_2 Start_2) (* Start_3 Start_6) (div Start_2 Start_6) (mod Start_6 Start_1) (abs Start_7)))
   (Start_4 Int (5 (+ Start_1 Start_3) (div Start_3 Start_8) (mod Start_7 Start_8)))
   (Start_9 Int (y (- Start_4) (- Start Start_5) (div Start Start_10) (mod Start_11 Start_9) (abs Start_11) (ite StartBool_2 Start_3 Start_10)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 5 (- y x))))

(check-synth)
