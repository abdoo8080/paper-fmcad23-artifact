(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_6 Int) (Start_2 Int) (Start_5 Int) (StartBool_1 Bool) (Start_7 Int) (StartBool_2 Bool) (Start_1 Int) (Start_4 Int) (Start_3 Int))
  ((Start Int (5 (- Start_1) (* Start Start_1) (ite StartBool_1 Start_2 Start_3)))
   (StartBool Bool (false true (and StartBool_1 StartBool_2) (or StartBool_4 StartBool_2) (<= Start_1 Start_5) (= Start_6 Start_2) (>= Start_2 Start_3)))
   (StartBool_4 Bool (false (< Start_4 Start_1) (= Start_5 Start_2) (>= Start_6 Start_7) (> Start_3 Start)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool StartBool_3) (or StartBool_2 StartBool_1) (>= Start_2 Start_7)))
   (Start_6 Int (5 (- Start) (- Start_3 Start) (+ Start_3 Start_2) (* Start_6 Start_5) (div Start_7 Start_7) (mod Start Start)))
   (Start_2 Int (2 (- Start_5) (+ Start_6 Start_4) (mod Start Start_5)))
   (Start_5 Int (2 y (- Start_4 Start_1) (mod Start_5 Start_4) (abs Start_5) (ite StartBool Start Start_1)))
   (StartBool_1 Bool (true false (not StartBool_3) (and StartBool StartBool_1) (< Start_3 Start_7) (= Start_7 Start_5) (> Start Start_4)))
   (Start_7 Int (1 4 y 0 (- Start_3) (+ Start_6 Start_4) (ite StartBool_1 Start_5 Start_2)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool) (<= Start_4 Start_3) (= Start_5 Start_4) (> Start_5 Start_3)))
   (Start_1 Int (5 2 3 (- Start_2) (- Start_4 Start_2) (+ Start_2 Start_7) (* Start_7 Start) (div Start_6 Start_4) (abs Start_3) (ite StartBool Start_4 Start_6)))
   (Start_4 Int (2 (* Start_4 Start_5) (div Start_3 Start) (abs Start_5) (ite StartBool_2 Start_1 Start)))
   (Start_3 Int (4 y (- Start_1) (- Start_4 Start_3) (+ Start_2 Start_1) (ite StartBool Start_1 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* 4 (ite (<= y 1) 1 5))))

(check-synth)
