(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_8 Bool) (StartBool_5 Bool) (StartBool_6 Bool) (Start_11 Int) (Start_10 Int) (StartBool_10 Bool) (StartBool_1 Bool) (Start_15 Int) (Start_4 Int) (StartBool_2 Bool) (Start_14 Int) (Start_16 Int) (Start_12 Int) (Start_7 Int) (StartBool_7 Bool) (Start_3 Int) (StartBool_11 Bool) (Start_6 Int) (StartBool_9 Bool) (Start_5 Int) (Start_8 Int) (Start_13 Int) (StartBool_4 Bool) (Start_2 Int) (Start_9 Int) (StartBool_3 Bool) (Start_1 Int))
  ((Start Int (4 (abs Start_1) (ite StartBool_1 Start_1 Start_1)))
   (StartBool Bool (true (not StartBool) (and StartBool StartBool_4) (< Start_10 Start_5)))
   (StartBool_8 Bool (false (not StartBool) (and StartBool_9 StartBool_1) (or StartBool_4 StartBool_3) (< Start Start_1) (<= Start_10 Start_12) (= Start_3 Start_4) (>= Start_5 Start_12) (> Start_1 Start_12)))
   (StartBool_5 Bool (true (not StartBool_6) (and StartBool_3 StartBool_1) (or StartBool_7 StartBool_8) (>= Start_8 Start_10) (> Start_4 Start_4)))
   (StartBool_6 Bool (true (and StartBool_9 StartBool_7) (= Start_13 Start_11) (>= Start_5 Start_12) (> Start_13 Start_11)))
   (Start_11 Int (y (- Start_12 Start_4) (div Start Start_2) (mod Start_3 Start_5) (abs Start) (ite StartBool_1 Start Start_10)))
   (Start_10 Int (5 4 (- Start_2 Start_5) (+ Start_11 Start_1) (abs Start_7) (ite StartBool_4 Start_2 Start_9)))
   (StartBool_10 Bool (true false (and StartBool StartBool_11) (or StartBool_10 StartBool_5) (<= Start_8 Start_3) (>= Start_10 Start_15)))
   (StartBool_1 Bool (false true (< Start_2 Start_3) (<= Start_3 Start) (>= Start_4 Start_4)))
   (Start_15 Int (y 2 3 (- Start_4) (- Start_1 Start_15) (+ Start_15 Start_16) (div Start_12 Start_4)))
   (Start_4 Int (0 (- Start_3) (* Start_5 Start_1) (div Start Start_6) (ite StartBool_2 Start_5 Start_3)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_1) (< Start_3 Start_2) (= Start_4 Start_7) (>= Start_7 Start_6) (> Start_3 Start_4)))
   (Start_14 Int (2 (- Start_12) (- Start_3 Start_2) (+ Start_10 Start_9) (* Start_12 Start_1) (mod Start_5 Start_2) (ite StartBool_8 Start_16 Start_6)))
   (Start_16 Int (1 (- Start_4 Start_1) (+ Start_12 Start_2) (* Start Start_8) (div Start_1 Start_5) (mod Start_16 Start_1) (abs Start_7)))
   (Start_12 Int (y (- Start_4) (- Start_11 Start_10)))
   (Start_7 Int (2 (- Start) (* Start_6 Start_5) (div Start_1 Start_2) (abs Start_3) (ite StartBool Start_5 Start_3)))
   (StartBool_7 Bool (false (and StartBool StartBool_3) (<= Start_13 Start_2) (= Start_3 Start_5) (>= Start_7 Start_8)))
   (Start_3 Int (1 (+ Start Start_8) (* Start_8 Start_4) (abs Start) (ite StartBool_2 Start_3 Start_4)))
   (StartBool_11 Bool (false true (= Start_1 Start_4) (>= Start_13 Start_10)))
   (Start_6 Int (4 (- Start_1) (- Start_5 Start_5) (* Start_5 Start_2) (ite StartBool_2 Start_6 Start_7)))
   (StartBool_9 Bool (true (and StartBool_3 StartBool_2) (or StartBool_10 StartBool_10) (>= Start_9 Start_4) (> Start_1 Start_13)))
   (Start_5 Int (y 2 1 (- Start Start) (+ Start_4 Start_1) (* Start_8 Start_4) (mod Start_7 Start_3)))
   (Start_8 Int (x 4 (- Start_8) (- Start Start_5) (+ Start_7 Start_2) (mod Start_7 Start_3) (abs Start_3)))
   (Start_13 Int (y (- Start_5) (* Start_14 Start_12) (abs Start_15) (ite StartBool_7 Start_4 Start_3)))
   (StartBool_4 Bool (true (or StartBool StartBool_5) (< Start_10 Start_7) (<= Start_10 Start_5) (= Start_8 Start_9) (>= Start_8 Start_6)))
   (Start_2 Int (3 x 5 1 (- Start Start) (* Start_1 Start_3) (div Start_3 Start_9) (mod Start_5 Start_4) (abs Start_5) (ite StartBool_2 Start_6 Start_1)))
   (Start_9 Int (1 5 (- Start_9) (+ Start_6 Start_8) (* Start_7 Start_7) (mod Start_5 Start_8) (abs Start_9)))
   (StartBool_3 Bool (true false (or StartBool_2 StartBool_1)))
   (Start_1 Int (2 (div Start_3 Start_6) (abs Start_8) (ite StartBool_3 Start Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (- 1 x) (abs (+ (div 2 0) 5)))))

(check-synth)
