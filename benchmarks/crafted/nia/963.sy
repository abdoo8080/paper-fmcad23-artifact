(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (StartBool_6 Bool) (Start_1 Int) (Start_15 Int) (Start_13 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_17 Int) (StartBool_1 Bool) (Start_14 Int) (StartBool_2 Bool) (Start_9 Int) (Start_3 Int) (Start_5 Int) (Start_2 Int) (Start_6 Int) (Start_7 Int) (Start_10 Int) (Start_11 Int) (Start_12 Int) (Start_8 Int) (StartBool_3 Bool) (Start_4 Int))
  ((Start Int (x (- Start Start) (mod Start_1 Start_1) (ite StartBool_1 Start Start_2)))
   (StartBool Bool (true (not StartBool_6) (< Start_5 Start_2) (> Start_7 Start_9)))
   (Start_16 Int (1 (- Start_13) (- Start_6 Start_3) (* Start_1 Start_10) (mod Start_1 Start_9) (abs Start_2)))
   (StartBool_6 Bool (false true (or StartBool_1 StartBool_5) (< Start Start_13) (= Start_7 Start_1) (> Start_14 Start_2)))
   (Start_1 Int (2 y x (- Start) (- Start_1 Start_4) (abs Start) (ite StartBool_5 Start_7 Start_2)))
   (Start_15 Int (2 (- Start_16) (- Start_10 Start) (* Start_17 Start_4) (abs Start_15) (ite StartBool_5 Start_16 Start)))
   (Start_13 Int (5 0 1 (- Start_1) (- Start_10 Start_9) (+ Start_8 Start_15) (div Start Start) (mod Start_14 Start_1)))
   (StartBool_5 Bool (false true (or StartBool_3 StartBool_3) (< Start_4 Start_8) (<= Start_2 Start_10) (= Start_3 Start_4) (> Start_7 Start_9)))
   (StartBool_4 Bool (false true (not StartBool_4) (or StartBool_1 StartBool_5) (< Start Start) (= Start_11 Start_8) (>= Start_6 Start_7)))
   (Start_17 Int (4 3 (- Start_16 Start_3) (+ Start_17 Start_12) (div Start_16 Start_13) (mod Start_16 Start_17)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool_1) (or StartBool_3 StartBool_4) (<= Start_8 Start_4) (> Start_6 Start_12)))
   (Start_14 Int (1 3 (- Start_8 Start) (+ Start_4 Start_4) (div Start_11 Start_13) (abs Start_14) (ite StartBool_6 Start_9 Start_7)))
   (StartBool_2 Bool (true false (< Start Start_1) (<= Start_2 Start_3) (>= Start_2 Start_1) (> Start_1 Start_2)))
   (Start_9 Int (4 5 (- Start_11) (- Start_1 Start_8) (mod Start_11 Start_1) (abs Start_4) (ite StartBool_2 Start_7 Start_9)))
   (Start_3 Int (4 (- Start_3) (* Start_1 Start) (abs Start_4) (ite StartBool Start_5 Start_4)))
   (Start_5 Int (0 (- Start_4) (+ Start_5 Start_5) (* Start_6 Start_4) (mod Start_2 Start_6) (abs Start_3)))
   (Start_2 Int (0 (- Start) (- Start Start_2) (div Start Start_2) (ite StartBool_2 Start_2 Start_1)))
   (Start_6 Int (2 (+ Start_1 Start_3) (* Start_2 Start_5) (mod Start_4 Start_7)))
   (Start_7 Int (3 1 (- Start_7) (+ Start_2 Start_6) (* Start_3 Start_8) (div Start_4 Start_9) (mod Start_3 Start_10) (abs Start_4)))
   (Start_10 Int (y 0 (+ Start_2 Start_8) (abs Start_10) (ite StartBool Start_1 Start_1)))
   (Start_11 Int (1 5 0 (div Start_12 Start)))
   (Start_12 Int (4 (- Start_12 Start_5) (+ Start Start_8) (* Start_10 Start_7) (div Start Start_4)))
   (Start_8 Int (2 0 1 4 (- Start_3 Start_3) (div Start_5 Start_12) (mod Start_11 Start_6)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_3) (or StartBool_3 StartBool_3) (< Start_9 Start_9) (> Start_10 Start_11)))
   (Start_4 Int (4 3 (- Start_1) (- Start_8 Start_8)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (- 4 (abs (* x 4))))))

(check-synth)
