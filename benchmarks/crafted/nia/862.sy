(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_16 Int) (Start_14 Int) (Start_15 Int) (Start_12 Int) (Start_10 Int) (StartBool_5 Bool) (StartBool_7 Bool) (StartBool_6 Bool) (Start_9 Int) (Start_2 Int) (StartBool_4 Bool) (Start_5 Int) (Start_7 Int) (StartBool_1 Bool) (Start_6 Int) (Start_1 Int) (Start_4 Int) (StartBool_3 Bool) (Start_3 Int) (StartBool_2 Bool) (Start_13 Int) (Start_11 Int) (Start_8 Int))
  ((Start Int (4 (- Start_1) (div Start Start) (ite StartBool_1 Start_2 Start_1)))
   (StartBool Bool (false (and StartBool_3 StartBool_2) (< Start_5 Start) (<= Start_7 Start_5) (>= Start_1 Start_1) (> Start_4 Start_6)))
   (Start_16 Int (4 y x (- Start) (- Start_16 Start_14) (mod Start_15 Start_6) (abs Start_14) (ite StartBool_6 Start_9 Start_8)))
   (Start_14 Int (2 (+ Start_9 Start_3) (* Start_1 Start_2) (mod Start_12 Start_5) (ite StartBool_7 Start_13 Start_4)))
   (Start_15 Int (0 3 (+ Start_7 Start_16) (* Start_11 Start_12) (div Start_5 Start_9)))
   (Start_12 Int (2 (- Start_9 Start_1) (abs Start_8) (ite StartBool_4 Start_5 Start_8)))
   (Start_10 Int (2 y (+ Start_1 Start_9) (* Start_5 Start_11) (div Start_9 Start_12)))
   (StartBool_5 Bool (false (and StartBool_4 StartBool_1) (or StartBool_4 StartBool_2) (<= Start_5 Start) (= Start_5 Start_4)))
   (StartBool_7 Bool (true (< Start Start_10) (<= Start_11 Start_15)))
   (StartBool_6 Bool (false true (not StartBool) (or StartBool_4 StartBool_2) (< Start_10 Start_14) (= Start_3 Start_11) (> Start_2 Start_4)))
   (Start_9 Int (x (- Start_2 Start) (div Start_7 Start_8)))
   (Start_2 Int (4 (div Start_3 Start_3) (mod Start_4 Start_2) (ite StartBool Start_5 Start_2)))
   (StartBool_4 Bool (true false (not StartBool_6) (or StartBool_4 StartBool_5) (<= Start_2 Start_7) (= Start_8 Start_9) (> Start_3 Start_10)))
   (Start_5 Int (1 0 (- Start_5) (- Start_6 Start_2) (+ Start_2 Start_6) (ite StartBool_1 Start_5 Start)))
   (Start_7 Int (1 3 0 2 5 (- Start_7) (- Start Start_3) (abs Start_4)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_1 StartBool) (> Start_3 Start_1)))
   (Start_6 Int (2 (- Start_1) (* Start_2 Start_1) (div Start_3 Start_5) (abs Start) (ite StartBool_1 Start_2 Start_4)))
   (Start_1 Int (2 1 (- Start_2) (+ Start Start_5) (div Start_1 Start_4) (mod Start_7 Start_6) (abs Start_1) (ite StartBool_2 Start_3 Start)))
   (Start_4 Int (5 3 x (- Start_6) (- Start Start_1) (* Start_5 Start_3) (mod Start_1 Start_3)))
   (StartBool_3 Bool (false true (or StartBool_4 StartBool_5) (<= Start_3 Start_8) (= Start_8 Start_4)))
   (Start_3 Int (x (+ Start_6 Start_2) (mod Start_2 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_1) (< Start_1 Start) (<= Start_7 Start_2) (= Start_1 Start_1)))
   (Start_13 Int (4 0 3 (- Start_3 Start_12) (+ Start Start_10) (div Start_8 Start_4) (mod Start_10 Start_5) (abs Start_11) (ite StartBool_2 Start_3 Start_5)))
   (Start_11 Int (0 (* Start Start_4) (mod Start_9 Start_3) (abs Start_13) (ite StartBool_2 Start_5 Start_2)))
   (Start_8 Int (1 (- Start_3) (- Start_1 Start_3) (+ Start_9 Start_3) (mod Start_6 Start_2) (abs Start) (ite StartBool_1 Start_1 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div (* 4 (- y)) x)))

(check-synth)
