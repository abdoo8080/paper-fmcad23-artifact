(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_8 Int) (Start_3 Int) (Start_9 Int) (Start_4 Int) (StartBool_1 Bool) (Start_6 Int) (Start_7 Int) (Start_5 Int) (Start_2 Int) (Start_1 Int) (StartBool_3 Bool) (StartBool_2 Bool))
  ((Start Int (4 1 (- Start_1) (+ Start_2 Start_3) (div Start_2 Start_1) (mod Start_3 Start)))
   (StartBool Bool (true false (not StartBool_3) (< Start_6 Start_1) (>= Start_2 Start_7)))
   (Start_8 Int (5 (+ Start_9 Start_4) (div Start_1 Start_8) (mod Start_4 Start_3) (abs Start_4) (ite StartBool_1 Start Start)))
   (Start_3 Int (1 4 (- Start_1) (- Start_2 Start_3) (+ Start_2 Start_2) (abs Start_4) (ite StartBool Start_3 Start_1)))
   (Start_9 Int (2 5 3 (- Start_4) (* Start Start_2) (div Start_9 Start_9) (mod Start_4 Start_7)))
   (Start_4 Int (1 y 2 3 (- Start_1) (- Start_3 Start_5) (div Start_3 Start_5) (mod Start Start_2) (ite StartBool_1 Start_1 Start_4)))
   (StartBool_1 Bool (false (not StartBool_1) (< Start Start_4) (<= Start_2 Start_3) (= Start Start_5) (>= Start_6 Start_3) (> Start_5 Start_2)))
   (Start_6 Int (y (- Start_1) (- Start Start_4) (+ Start_6 Start_1) (div Start_1 Start)))
   (Start_7 Int (2 (- Start_1) (- Start_7 Start_7) (div Start_1 Start_7) (abs Start_1) (ite StartBool_1 Start_1 Start_4)))
   (Start_5 Int (1 0 (+ Start_6 Start_6) (div Start_1 Start_6) (abs Start_6) (ite StartBool Start Start_7)))
   (Start_2 Int (0 (- Start_2 Start_7) (abs Start_3) (ite StartBool Start_3 Start_2)))
   (Start_1 Int (0 (* Start_8 Start_4) (abs Start_4) (ite StartBool_2 Start_8 Start_1)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_2 StartBool_2) (or StartBool StartBool) (< Start_5 Start) (<= Start_5 Start_1) (> Start_2 Start_7)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_1) (or StartBool StartBool_1) (< Start_4 Start_4) (<= Start_7 Start_3) (= Start_2 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod (- 4) (div x 2))))

(check-synth)
