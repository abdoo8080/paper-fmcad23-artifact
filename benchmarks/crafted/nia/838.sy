(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_2 Int) (Start_1 Int) (Start_7 Int) (Start_6 Int) (Start_5 Int) (StartBool_2 Bool) (Start_3 Int) (Start_4 Int) (StartBool_3 Bool) (StartBool_1 Bool))
  ((Start Int (4 (- Start) (+ Start_1 Start_1) (div Start_1 Start_1) (ite StartBool_1 Start_1 Start_1)))
   (StartBool Bool (false true (and StartBool_2 StartBool_2) (or StartBool_2 StartBool) (<= Start_5 Start_7) (>= Start_3 Start_7) (> Start_1 Start)))
   (Start_2 Int (2 0 (- Start_4) (- Start_6 Start_1)))
   (Start_1 Int (5 0 1 2 (- Start_2) (* Start_5 Start_4) (div Start_3 Start_3) (mod Start_5 Start_1) (abs Start_1) (ite StartBool_3 Start Start_3)))
   (Start_7 Int (y (+ Start_6 Start_3) (* Start_4 Start_7)))
   (Start_6 Int (3 1 5 (- Start_6) (* Start Start_4)))
   (Start_5 Int (1 2 (- Start_5 Start_3) (div Start_3 Start_3) (ite StartBool_2 Start_2 Start_5)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_2 StartBool_3) (or StartBool StartBool_1) (>= Start_2 Start_4)))
   (Start_3 Int (0 (+ Start Start_1) (* Start Start_1) (div Start_4 Start_1) (mod Start_1 Start_5)))
   (Start_4 Int (0 2 3 1 5 (- Start_5 Start_4) (+ Start_6 Start_6) (* Start_6 Start_7) (div Start_7 Start_4) (mod Start_4 Start_6) (abs Start_1) (ite StartBool_1 Start_1 Start_7)))
   (StartBool_3 Bool (true (and StartBool StartBool) (< Start_6 Start_2) (<= Start Start) (= Start_1 Start_5)))
   (StartBool_1 Bool (false true (<= Start_1 Start_2) (= Start_3 Start_1) (> Start Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (ite (< 2 x) x (div 2 0)))))

(check-synth)
