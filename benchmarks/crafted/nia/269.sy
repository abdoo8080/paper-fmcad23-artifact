(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_8 Int) (Start_7 Int) (Start_5 Int) (Start_4 Int) (Start_1 Int) (Start_3 Int) (Start_6 Int) (Start_2 Int) (StartBool_1 Bool) (StartBool_2 Bool))
  ((Start Int (2 y 0 (- Start) (mod Start Start)))
   (StartBool Bool (true false (not StartBool) (or StartBool StartBool_1)))
   (Start_8 Int (y (- Start) (- Start_4 Start) (div Start_2 Start_5) (ite StartBool_2 Start Start_4)))
   (Start_7 Int (3 1 (- Start_5) (+ Start_7 Start_3) (* Start_1 Start_7) (div Start_2 Start_3) (mod Start_7 Start_6) (abs Start_5)))
   (Start_5 Int (0 (- Start_3) (- Start_2 Start_5) (* Start_5 Start_2) (div Start_3 Start_6) (abs Start_5) (ite StartBool Start_5 Start_5)))
   (Start_4 Int (5 (- Start_3 Start_4) (+ Start Start_2) (div Start Start_4) (ite StartBool Start_2 Start_5)))
   (Start_1 Int (0 x (- Start) (- Start Start_4) (* Start_1 Start_1) (div Start_3 Start_2)))
   (Start_3 Int (y 1 4 (+ Start_3 Start_1) (abs Start_1)))
   (Start_6 Int (y 0 1 5 x (- Start_2) (abs Start_1) (ite StartBool_1 Start_4 Start_7)))
   (Start_2 Int (5 (- Start_1) (- Start_3 Start_2) (div Start Start_1) (abs Start_1)))
   (StartBool_1 Bool (false (and StartBool StartBool) (or StartBool StartBool_2) (< Start_1 Start) (<= Start_1 Start_2) (= Start_2 Start)))
   (StartBool_2 Bool (true false (not StartBool) (< Start_4 Start_1) (= Start Start_4) (>= Start_8 Start_2) (> Start_7 Start_1)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (* (- (* x (+ 5 2))) y)))

(check-synth)
