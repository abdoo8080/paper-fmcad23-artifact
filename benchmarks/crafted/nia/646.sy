(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_3 Int) (Start_7 Int) (StartBool_1 Bool) (Start_5 Int) (Start_11 Int) (Start_9 Int) (Start_4 Int) (Start_10 Int) (StartBool_4 Bool) (Start_8 Int) (Start_2 Int) (Start_12 Int) (Start_13 Int) (Start_6 Int) (StartBool_3 Bool) (StartBool_2 Bool))
  ((Start Int (0 1 (- Start_1) (- Start_2 Start) (* Start_3 Start_3) (div Start Start_1) (mod Start_2 Start_3) (abs Start) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (true false (and StartBool_4 StartBool_1) (or StartBool_3 StartBool_3) (<= Start_1 Start_13) (= Start_13 Start_1) (>= Start_3 Start_5) (> Start_3 Start_13)))
   (Start_1 Int (3 0 2 (+ Start_9 Start_6) (* Start_13 Start_1) (div Start_8 Start_2) (mod Start_12 Start_12)))
   (Start_3 Int (0 x (- Start_4 Start_9) (* Start_10 Start_13) (div Start_4 Start_5) (mod Start_6 Start_4)))
   (Start_7 Int (4 0 x 2 (- Start_3) (- Start_3 Start) (+ Start_13 Start_6) (* Start_4 Start_3) (div Start_13 Start_8) (mod Start_5 Start_11)))
   (StartBool_1 Bool (true false (< Start_4 Start_5) (> Start Start_3)))
   (Start_5 Int (y (- Start_1) (- Start_2 Start_3) (+ Start Start_4) (mod Start_6 Start_1) (ite StartBool_1 Start_5 Start_6)))
   (Start_11 Int (y 1 (- Start_8) (div Start_1 Start_4) (mod Start_6 Start_12) (abs Start_1)))
   (Start_9 Int (0 2 x y (- Start_9 Start_5) (+ Start Start_4) (* Start_6 Start_4) (mod Start_6 Start_1) (abs Start_10)))
   (Start_4 Int (2 x 5 (- Start_7) (- Start_1 Start_7) (+ Start_4 Start_2) (* Start_1 Start_3) (div Start_1 Start_4) (abs Start_5) (ite StartBool_2 Start_8 Start_9)))
   (Start_10 Int (x (+ Start_4 Start_7) (* Start_8 Start_5) (div Start_2 Start_7) (mod Start_2 Start) (abs Start_9)))
   (StartBool_4 Bool (true (not StartBool) (< Start_7 Start_2) (<= Start_11 Start_9)))
   (Start_8 Int (0 5 (- Start_1) (- Start_3 Start) (+ Start_3 Start_11) (mod Start_8 Start_12) (ite StartBool_3 Start_2 Start_1)))
   (Start_2 Int (x (- Start_7) (+ Start_10 Start_2) (div Start Start_12) (mod Start_12 Start_4) (abs Start_5)))
   (Start_12 Int (2 x))
   (Start_13 Int (2 1 3 (- Start_8) (- Start Start_11) (* Start_7 Start_6) (mod Start_6 Start_6) (abs Start_2)))
   (Start_6 Int (1 (- Start_6) (- Start_5 Start_2)))
   (StartBool_3 Bool (false (and StartBool_4 StartBool_4) (= Start_11 Start_3) (>= Start_10 Start_11) (> Start_12 Start_5)))
   (StartBool_2 Bool (true false (not StartBool_4) (< Start Start_3) (= Start_1 Start_12)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (* 4 (* 2 (+ 4 (div x (- (div (mod 4 x) 2)))))) 1)))

(check-synth)
