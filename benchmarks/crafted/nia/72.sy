(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_15 Int) (Start_14 Int) (Start_7 Int) (Start_10 Int) (Start_11 Int) (Start_3 Int) (Start_4 Int) (StartBool_4 Bool) (Start_13 Int) (Start_5 Int) (Start_9 Int) (Start_6 Int) (Start_2 Int) (StartBool_1 Bool) (Start_8 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_12 Int))
  ((Start Int (3 1 (- Start_1) (- Start_2 Start_2) (+ Start_3 Start) (* Start Start_4) (div Start_3 Start_3) (mod Start_1 Start_3) (abs Start)))
   (StartBool Bool (false (and StartBool_4 StartBool_1) (or StartBool_2 StartBool_4) (= Start_5 Start_11) (> Start_12 Start_4)))
   (Start_1 Int (5 y (+ Start_11 Start_7) (div Start_3 Start)))
   (Start_15 Int (1 (- Start_8) (+ Start_7 Start_6) (div Start_10 Start_11) (mod Start_12 Start_4) (abs Start_11) (ite StartBool_2 Start_1 Start_1)))
   (Start_14 Int (0 1 (- Start_11 Start_6) (abs Start_4)))
   (Start_7 Int (2 x (- Start_12) (- Start_10 Start_3) (+ Start_14 Start_9)))
   (Start_10 Int (y 0 (- Start_7) (+ Start_10 Start_7) (div Start Start_5) (abs Start_5)))
   (Start_11 Int (3 (- Start_4) (+ Start_2 Start_1) (* Start_13 Start_9) (mod Start_10 Start_4) (ite StartBool_3 Start_4 Start_9)))
   (Start_3 Int (5 0 (- Start_5) (- Start Start) (div Start_5 Start_3) (ite StartBool Start Start_3)))
   (Start_4 Int (1 (- Start_1) (* Start_4 Start_3) (abs Start)))
   (StartBool_4 Bool (false true (< Start_12 Start_7) (<= Start_6 Start_1) (>= Start_5 Start_13) (> Start_9 Start_7)))
   (Start_13 Int (2 5 (* Start_13 Start_4) (div Start_12 Start_10) (mod Start_12 Start_4) (ite StartBool_4 Start_10 Start_7)))
   (Start_5 Int (x (- Start_2 Start_3) (mod Start Start_5) (abs Start_6)))
   (Start_9 Int (1 0 (- Start Start_12) (+ Start_8 Start_5) (ite StartBool_2 Start_11 Start_9)))
   (Start_6 Int (1 (+ Start_6 Start_7) (* Start_4 Start_6) (div Start_4 Start_8) (mod Start_2 Start) (abs Start_5) (ite StartBool_1 Start_7 Start_4)))
   (Start_2 Int (3 (- Start) (+ Start_15 Start_5) (div Start_12 Start_2) (abs Start_11) (ite StartBool Start Start_4)))
   (StartBool_1 Bool (true (< Start Start_3)))
   (Start_8 Int (0 (+ Start_6 Start_8) (* Start_3 Start_9) (div Start_10 Start_9) (abs Start_11) (ite StartBool_2 Start_1 Start_4)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool) (<= Start_4 Start_8) (= Start_10 Start_1) (>= Start_9 Start_8)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_2) (or StartBool_3 StartBool_3) (< Start_2 Start_10) (>= Start_2 Start_2)))
   (Start_12 Int (0 (* Start Start_8) (mod Start_10 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (mod 4 0)))

(check-synth)
