(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_12 Int) (Start_6 Int) (StartBool_4 Bool) (Start_9 Int) (Start_1 Int) (Start_7 Int) (Start_4 Int) (Start_3 Int) (StartBool_2 Bool) (Start_14 Int) (Start_2 Int) (Start_11 Int) (Start_10 Int) (Start_5 Int) (Start_13 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_8 Int))
  ((Start Int (5 0 (+ Start_1 Start_2) (div Start Start_3) (abs Start_2) (ite StartBool Start_2 Start)))
   (StartBool Bool (true false (<= Start_5 Start_10) (>= Start_9 Start_3) (> Start_14 Start_12)))
   (Start_12 Int (2 (- Start_7 Start_13) (* Start_3 Start_5) (div Start_10 Start_6) (abs Start_13) (ite StartBool_3 Start_2 Start_7)))
   (Start_6 Int (4 2 y 0 3 (- Start_10) (+ Start_8 Start) (div Start_3 Start_4)))
   (StartBool_4 Bool (false true (not StartBool_4) (< Start_8 Start_6)))
   (Start_9 Int (2 (- Start_9) (- Start_8 Start_6) (+ Start Start_8) (div Start_11 Start_6) (abs Start)))
   (Start_1 Int (2 (* Start_12 Start_10) (abs Start_6)))
   (Start_7 Int (4 (- Start_7) (+ Start_2 Start_5) (div Start_7 Start_6) (abs Start_3) (ite StartBool_4 Start_6 Start_8)))
   (Start_4 Int (4 0 (- Start_2) (+ Start_2 Start_2) (* Start_3 Start_4) (div Start_1 Start_1)))
   (Start_3 Int (0 5 y (+ Start Start_3) (* Start_1 Start_4) (mod Start_4 Start_1)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool) (<= Start_10 Start_3)))
   (Start_14 Int (3 2 (- Start_7 Start_1) (+ Start_8 Start_3) (* Start_9 Start_14) (mod Start_14 Start_5) (abs Start_8)))
   (Start_2 Int (4 5 2 (- Start_2) (abs Start_3) (ite StartBool Start_2 Start_5)))
   (Start_11 Int (0 (- Start_5) (+ Start_6 Start_7) (abs Start_6)))
   (Start_10 Int (1 y (+ Start_3 Start_5) (* Start_8 Start) (div Start_6 Start_7) (mod Start_6 Start_2) (abs Start_1) (ite StartBool Start_4 Start_1)))
   (Start_5 Int (2 1 (- Start_1) (- Start_6 Start_7) (+ Start_7 Start_8) (div Start_9 Start_5) (abs Start_3) (ite StartBool_1 Start_5 Start_2)))
   (Start_13 Int (x (- Start_8) (- Start_3 Start_9) (div Start_11 Start_11) (mod Start_1 Start_5) (abs Start_1)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (or StartBool_2 StartBool_3) (= Start_2 Start_9) (>= Start_1 Start_9)))
   (StartBool_3 Bool (true false (not StartBool) (< Start_8 Start_6) (<= Start_6 Start_6) (>= Start_2 Start_3)))
   (Start_8 Int (1 4 y (- Start_2) (abs Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- 2 (mod x 5))))

(check-synth)
