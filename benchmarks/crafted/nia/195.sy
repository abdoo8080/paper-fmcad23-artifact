(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (StartBool_4 Bool) (Start_13 Int) (StartBool_5 Bool) (Start_12 Int) (Start_10 Int) (Start_11 Int) (StartBool_1 Bool) (Start_3 Int) (Start_2 Int) (Start_6 Int) (Start_7 Int) (Start_8 Int) (Start_5 Int) (Start_4 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_1 Int) (Start_9 Int))
  ((Start Int (4 y 0 (+ Start_1 Start_1) (mod Start_2 Start_2) (abs Start_1) (ite StartBool Start_3 Start_1)))
   (StartBool Bool (true false (not StartBool) (or StartBool_3 StartBool) (< Start_10 Start_1) (>= Start_9 Start_2)))
   (Start_14 Int (2 (+ Start_6 Start_1) (mod Start_13 Start_13)))
   (StartBool_4 Bool (true false (not StartBool_5) (or StartBool_1 StartBool_2) (<= Start Start_7) (>= Start_12 Start_11)))
   (Start_13 Int (2 x 0 (- Start_12) (- Start_6 Start_14) (ite StartBool_4 Start_5 Start_10)))
   (StartBool_5 Bool (false true (and StartBool_1 StartBool_3) (or StartBool_1 StartBool) (< Start_9 Start_13) (> Start_7 Start_5)))
   (Start_12 Int (2 5 0 (- Start_8) (* Start_2 Start_1) (div Start_4 Start_12)))
   (Start_10 Int (x (div Start_11 Start_5) (abs Start_1) (ite StartBool_2 Start_12 Start_8)))
   (Start_11 Int (x (- Start_7) (- Start_8 Start_6) (div Start_2 Start_5) (mod Start_1 Start_8)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool) (or StartBool StartBool_1) (= Start_5 Start_4) (> Start_6 Start_8)))
   (Start_3 Int (1 5 x 3 (- Start) (- Start_2 Start_2) (abs Start)))
   (Start_2 Int (x 4 0 (- Start) (- Start_4 Start) (* Start Start_1) (mod Start_5 Start_3) (ite StartBool_1 Start_6 Start_5)))
   (Start_6 Int (3 (- Start_1 Start_2) (div Start_7 Start_6) (mod Start_3 Start)))
   (Start_7 Int (3 0 (- Start_7) (* Start_7 Start_8) (div Start Start_6) (mod Start_3 Start) (ite StartBool_1 Start_2 Start_7)))
   (Start_8 Int (4 (- Start_4) (- Start_6 Start_4) (+ Start Start_3) (div Start_8 Start_5) (mod Start_5 Start_5) (abs Start_8) (ite StartBool_1 Start_5 Start_6)))
   (Start_5 Int (4 x 2 (- Start_7) (- Start_7 Start_2) (* Start_1 Start_7) (div Start_7 Start_4) (mod Start_6 Start_9)))
   (Start_4 Int (3 (- Start_1 Start_3) (+ Start_1 Start_9) (* Start_4 Start_4) (div Start_3 Start_8) (ite StartBool_2 Start Start_3)))
   (StartBool_3 Bool (false (not StartBool) (or StartBool_3 StartBool_2) (<= Start_3 Start_13) (= Start_3 Start) (>= Start_4 Start)))
   (StartBool_2 Bool (true false (and StartBool_2 StartBool) (or StartBool_2 StartBool) (<= Start_9 Start_6) (= Start_5 Start_1) (> Start Start_5)))
   (Start_1 Int (2 (- Start_2 Start_6) (abs Start_5) (ite StartBool Start_3 Start_3)))
   (Start_9 Int (4 1 3 2 (ite StartBool Start_4 Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (ite (<= (abs y) 1) 0 (- 1))))

(check-synth)
