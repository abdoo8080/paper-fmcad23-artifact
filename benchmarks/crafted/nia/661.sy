(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_5 Bool) (Start_6 Int) (Start_13 Int) (Start_3 Int) (Start_4 Int) (Start_9 Int) (Start_2 Int) (Start_1 Int) (Start_7 Int) (Start_11 Int) (Start_8 Int) (StartBool_4 Bool) (Start_14 Int) (Start_5 Int) (StartBool_3 Bool) (Start_12 Int) (Start_10 Int) (StartBool_1 Bool) (StartBool_2 Bool))
  ((Start Int (1 (- Start_1) (* Start Start) (div Start Start) (mod Start_1 Start_1) (abs Start_1) (ite StartBool Start_2 Start_3)))
   (StartBool Bool (true false (and StartBool_2 StartBool_2) (> Start_14 Start_8)))
   (StartBool_6 Bool (false true (<= Start Start_10)))
   (StartBool_5 Bool (false (not StartBool_4) (or StartBool_6 StartBool_1) (<= Start_4 Start_6)))
   (Start_6 Int (3 5 1 2 (- Start_6) (- Start_2 Start_13) (mod Start_8 Start_5)))
   (Start_13 Int (y (- Start_13) (- Start_1 Start_10) (div Start_5 Start_11)))
   (Start_3 Int (2 3 5 0 x 4 y 1 (- Start_2) (+ Start_3 Start_1) (* Start_3 Start_2) (mod Start_1 Start) (abs Start)))
   (Start_4 Int (2 (- Start_1) (- Start_5 Start_6) (+ Start_4 Start_7) (div Start_8 Start_8) (mod Start_7 Start_2) (ite StartBool Start_2 Start_4)))
   (Start_9 Int (0 5 (- Start_4 Start) (+ Start_6 Start_4) (* Start_1 Start_4) (div Start_7 Start_4) (mod Start_9 Start_10)))
   (Start_2 Int (5 1 x 3 4 (* Start_3 Start) (abs Start_2)))
   (Start_1 Int (0 (- Start_1 Start_4) (+ Start Start) (* Start_2 Start_1) (abs Start_2) (ite StartBool Start_4 Start_2)))
   (Start_7 Int (1 (- Start_1) (- Start_6 Start_9) (div Start_6 Start_3) (mod Start_4 Start_13) (ite StartBool_3 Start Start_13)))
   (Start_11 Int (x 5 0 4 3 (- Start_3) (- Start_11 Start_12) (div Start_4 Start) (abs Start_12) (ite StartBool_1 Start_2 Start)))
   (Start_8 Int (y 3 x 5 1 (- Start_9) (- Start_6 Start_6) (* Start Start_9) (abs Start_4) (ite StartBool Start_9 Start_9)))
   (StartBool_4 Bool (true false (and StartBool_5 StartBool_2) (or StartBool_1 StartBool_5) (< Start_3 Start_7) (> Start_4 Start_14)))
   (Start_14 Int (1 (+ Start_10 Start_13) (div Start_10 Start_5) (mod Start_5 Start_3) (abs Start_12) (ite StartBool_4 Start_6 Start_4)))
   (Start_5 Int (0 5 4 2 (- Start_2) (* Start_7 Start_10) (div Start_3 Start) (abs Start)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_2) (or StartBool_3 StartBool_2) (< Start_3 Start_12)))
   (Start_12 Int (x 4 y 3 (- Start_10) (div Start_7 Start_2) (abs Start_11) (ite StartBool_1 Start_6 Start_10)))
   (Start_10 Int (1 (+ Start_11 Start_3) (div Start_1 Start_8) (mod Start_4 Start) (ite StartBool_1 Start_11 Start_3)))
   (StartBool_1 Bool (true false (not StartBool_1) (or StartBool_2 StartBool) (< Start_7 Start_8) (<= Start_1 Start_5)))
   (StartBool_2 Bool (true (not StartBool_3) (or StartBool_1 StartBool_3) (= Start_3 Start_4) (>= Start Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ (* 2 y) 4)))

(check-synth)
