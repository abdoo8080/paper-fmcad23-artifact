(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_8 Bool) (Start_9 Int) (Start_11 Int) (Start_14 Int) (StartBool_5 Bool) (Start_16 Int) (StartBool_4 Bool) (StartBool_2 Bool) (StartBool_7 Bool) (Start_10 Int) (Start_13 Int) (Start_12 Int) (Start_3 Int) (Start_6 Int) (StartBool_3 Bool) (Start_2 Int) (StartBool_1 Bool) (Start_15 Int) (Start_7 Int) (Start_4 Int) (StartBool_6 Bool) (Start_5 Int) (Start_1 Int) (Start_8 Int))
  ((Start Int (0 y (+ Start Start_1) (div Start_2 Start_2) (mod Start_3 Start_3) (abs Start_1)))
   (StartBool Bool (true false (not StartBool_6) (and StartBool_2 StartBool_4) (<= Start_7 Start_10) (= Start_7 Start_3) (>= Start Start_16) (> Start_11 Start_13)))
   (StartBool_8 Bool (true false (< Start_16 Start_16) (>= Start_12 Start)))
   (Start_9 Int (2 (+ Start_7 Start_5) (abs Start)))
   (Start_11 Int (1 2 4 y 3 x 5 0 (- Start_12) (- Start_8 Start_15) (+ Start_4 Start_2) (div Start_4 Start_7) (mod Start_12 Start_9) (abs Start_11)))
   (Start_14 Int (x (- Start) (- Start_4 Start_2) (div Start_8 Start_8)))
   (StartBool_5 Bool (true false (not StartBool) (or StartBool_6 StartBool_1) (= Start_14 Start_13) (>= Start_8 Start_8)))
   (Start_16 Int (x (- Start Start) (+ Start_10 Start_12) (div Start_15 Start) (mod Start Start_13) (abs Start) (ite StartBool_8 Start_7 Start_14)))
   (StartBool_4 Bool (false (and StartBool_1 StartBool_3) (< Start Start_13) (<= Start_6 Start_8) (= Start_9 Start_12) (>= Start_8 Start_5) (> Start_4 Start_11)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_3) (or StartBool_4 StartBool_2) (< Start_4 Start_3) (<= Start_1 Start_7) (>= Start_1 Start_10)))
   (StartBool_7 Bool (false true (not StartBool) (or StartBool StartBool_6) (<= Start_1 Start_14)))
   (Start_10 Int (0 (- Start Start_11) (div Start_11 Start_10) (abs Start_6) (ite StartBool_2 Start_12 Start_1)))
   (Start_13 Int (y 1 (- Start_10 Start) (* Start_11 Start_8) (div Start_6 Start_14) (mod Start_10 Start_3) (abs Start_3) (ite StartBool_1 Start_14 Start_15)))
   (Start_12 Int (3 (- Start_6) (* Start_9 Start_6) (ite StartBool_3 Start_7 Start_7)))
   (Start_3 Int (0 3 (- Start_1 Start_1) (* Start Start_1) (div Start Start_3) (mod Start_2 Start)))
   (Start_6 Int (0 (- Start_2) (- Start Start_3) (+ Start_6 Start_1) (ite StartBool_1 Start_7 Start_4)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_1) (< Start_12 Start) (= Start_7 Start_8) (> Start_1 Start_3)))
   (Start_2 Int (x y 2 (+ Start_1 Start) (* Start_3 Start_3) (mod Start_4 Start_5) (ite StartBool_1 Start_5 Start_2)))
   (StartBool_1 Bool (true (>= Start_4 Start_6) (> Start Start_7)))
   (Start_15 Int (5 (- Start_4) (+ Start Start_5) (div Start_12 Start_1) (abs Start) (ite StartBool_5 Start_11 Start_4)))
   (Start_7 Int (0 (- Start_6 Start) (* Start_2 Start_6) (mod Start_4 Start_1) (abs Start_2)))
   (Start_4 Int (1 (- Start_3) (- Start_6 Start_2) (div Start_2 Start) (mod Start_7 Start_4) (ite StartBool Start_4 Start)))
   (StartBool_6 Bool (false true (not StartBool_4) (and StartBool_5 StartBool_7) (or StartBool_7 StartBool) (<= Start_6 Start_13) (= Start_11 Start_12)))
   (Start_5 Int (4 (- Start_4) (- Start_1 Start_2) (* Start_8 Start_5) (div Start_8 Start_8)))
   (Start_1 Int (0 (- Start_1 Start_4) (div Start_2 Start_6) (mod Start_4 Start_9) (ite StartBool Start_4 Start_10)))
   (Start_8 Int (3 5 2 1 0 4 (* Start_6 Start_8) (abs Start_8) (ite StartBool Start_2 Start_3)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 3 (- (mod 4 x) 3))))

(check-synth)
