(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_2 Bool) (StartBool_6 Bool) (Start_20 Int) (Start_21 Int) (StartBool_4 Bool) (Start_19 Int) (Start_18 Int) (StartBool_5 Bool) (Start_13 Int) (Start_15 Int) (StartBool_3 Bool) (Start_11 Int) (Start_5 Int) (Start_1 Int) (Start_3 Int) (Start_17 Int) (Start_16 Int) (Start_10 Int) (Start_2 Int) (Start_8 Int) (Start_9 Int) (StartBool_1 Bool) (Start_7 Int) (Start_14 Int) (Start_12 Int) (Start_4 Int) (Start_6 Int))
  ((Start Int (1 3 (- Start Start) (abs Start) (ite StartBool Start_1 Start_1)))
   (StartBool Bool (false true (or StartBool StartBool_1) (<= Start_3 Start_5) (= Start_1 Start_2) (> Start_5 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_4) (and StartBool StartBool_1) (or StartBool_1 StartBool_6) (< Start_12 Start_6) (<= Start_14 Start_7)))
   (StartBool_6 Bool (true (not StartBool_5) (and StartBool StartBool_4) (< Start_13 Start_5) (= Start_18 Start_9) (>= Start_18 Start_6)))
   (Start_20 Int (3 (- Start) (* Start_12 Start_17) (ite StartBool_4 Start_19 Start)))
   (Start_21 Int (5 0 (- Start_10) (* Start_16 Start_9) (div Start_15 Start_6)))
   (StartBool_4 Bool (false (not StartBool_6) (and StartBool StartBool_4) (or StartBool_6 StartBool_5) (>= Start_6 Start_20) (> Start_21 Start_14)))
   (Start_19 Int (0 1 5 (- Start_8) (+ Start_9 Start_1) (* Start_1 Start_12) (ite StartBool_3 Start_16 Start_11)))
   (Start_18 Int (5 y x (+ Start_7 Start_15) (div Start_19 Start_2) (mod Start_6 Start_17) (abs Start_13)))
   (StartBool_5 Bool (false true (not StartBool_2) (< Start_13 Start_18) (<= Start_12 Start_5) (= Start_11 Start_13) (>= Start_11 Start_11) (> Start_1 Start_9)))
   (Start_13 Int (3 (- Start_14 Start_13) (+ Start_7 Start_17) (div Start_8 Start_4) (abs Start_8)))
   (Start_15 Int (x 2 y 3 (+ Start_15 Start_16) (* Start Start_10) (div Start_13 Start_4)))
   (StartBool_3 Bool (true (and StartBool_4 StartBool_5) (<= Start_3 Start_8) (= Start_9 Start_7) (>= Start_6 Start_13) (> Start_14 Start_2)))
   (Start_11 Int (x 1 5 y 2 (- Start_2 Start_8) (+ Start_12 Start_7) (* Start_8 Start) (div Start_7 Start_9) (abs Start_12)))
   (Start_5 Int (3 4 (- Start_2) (+ Start_3 Start_1) (div Start_2 Start_2) (abs Start_1)))
   (Start_1 Int (x 4 (- Start_1 Start_1) (div Start Start_2) (mod Start_1 Start_2) (abs Start_1) (ite StartBool Start Start_2)))
   (Start_3 Int (0 (- Start) (- Start_4 Start_1) (mod Start_2 Start_4) (ite StartBool Start_4 Start_5)))
   (Start_17 Int (0 (- Start_8 Start_1) (div Start_9 Start_1) (ite StartBool_3 Start_8 Start_15)))
   (Start_16 Int (4 (- Start_9 Start_13) (* Start_5 Start_9) (div Start_5 Start_13) (mod Start_10 Start_15) (ite StartBool_4 Start Start_3)))
   (Start_10 Int (2 (div Start_7 Start) (abs Start_7) (ite StartBool_1 Start Start_1)))
   (Start_2 Int (2 0 1 y 3 (- Start_2) (abs Start_3)))
   (Start_8 Int (x (- Start_6) (abs Start_1) (ite StartBool_3 Start_11 Start_12)))
   (Start_9 Int (0 (- Start_1 Start_7) (+ Start Start_8) (ite StartBool_1 Start_1 Start_10)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (or StartBool StartBool_3) (< Start_6 Start) (>= Start_6 Start_4)))
   (Start_7 Int (4 (- Start Start_7) (+ Start_1 Start_4) (* Start_5 Start_8) (div Start_7 Start_1) (mod Start_3 Start_9) (abs Start_7) (ite StartBool Start_10 Start_10)))
   (Start_14 Int (4 1 y 5 (+ Start Start_3) (* Start_7 Start_1) (div Start_6 Start_4) (abs Start_15)))
   (Start_12 Int (4 0 2 x 1 (- Start_12) (- Start_12 Start_1) (mod Start_4 Start_6) (abs Start_10) (ite StartBool Start_5 Start_1)))
   (Start_4 Int (4 (* Start_1 Start_3) (abs Start_2)))
   (Start_6 Int (3 y 0 2 (mod Start_5 Start_7) (abs Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (div x x))))

(check-synth)
