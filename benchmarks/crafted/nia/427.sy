(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_16 Int) (Start_1 Int) (Start_11 Int) (Start_14 Int) (Start_12 Int) (Start_17 Int) (Start_10 Int) (StartBool_1 Bool) (Start_4 Int) (StartBool_3 Bool) (Start_5 Int) (Start_15 Int) (Start_9 Int) (Start_2 Int) (Start_6 Int) (Start_7 Int) (Start_13 Int) (Start_8 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_3 Int))
  ((Start Int (y 0 (- Start_1) (* Start Start_1) (div Start_2 Start) (mod Start_3 Start_3) (ite StartBool_1 Start_1 Start_3)))
   (StartBool Bool (false (<= Start_15 Start_14) (>= Start_1 Start_8)))
   (StartBool_5 Bool (true false (not StartBool_3) (and StartBool_4 StartBool_2) (>= Start_17 Start_8)))
   (Start_16 Int (y (- Start_12) (- Start_3 Start_6) (* Start_4 Start_16) (div Start_9 Start_17) (mod Start_11 Start_11) (ite StartBool_5 Start_11 Start)))
   (Start_1 Int (4 y (- Start_7) (- Start_2 Start_4) (* Start_7 Start_13) (mod Start_8 Start) (ite StartBool_3 Start_12 Start_5)))
   (Start_11 Int (x 1 5 0 (- Start_12 Start_13) (mod Start_8 Start_1) (ite StartBool Start Start_4)))
   (Start_14 Int (3 4 (- Start_3 Start_8) (* Start_14 Start_3) (mod Start_14 Start_11) (abs Start_13) (ite StartBool_1 Start_13 Start_3)))
   (Start_12 Int (1 0 4 (- Start_13 Start_12) (+ Start_2 Start_14) (abs Start_1)))
   (Start_17 Int (y (+ Start_10 Start_17) (* Start_12 Start) (div Start_2 Start_9) (abs Start_3) (ite StartBool Start_6 Start_3)))
   (Start_10 Int (y 1 5 (- Start_11 Start_2) (+ Start_10 Start_10) (* Start_3 Start_4) (mod Start_4 Start_12) (abs Start_3) (ite StartBool Start_13 Start_12)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool_2) (or StartBool_3 StartBool_4) (< Start Start) (<= Start_2 Start_3) (>= Start_1 Start_1) (> Start Start_4)))
   (Start_4 Int (0 (* Start Start_4) (div Start Start_4) (mod Start_5 Start) (abs Start) (ite StartBool_1 Start_4 Start)))
   (StartBool_3 Bool (false true (not StartBool) (< Start_5 Start_6) (> Start_7 Start_2)))
   (Start_5 Int (x y 1 2 5 3 (- Start_1 Start_6) (+ Start_4 Start_1) (* Start_6 Start)))
   (Start_15 Int (5 0 4 (- Start_16) (+ Start_12 Start_10) (mod Start_17 Start_9) (abs Start_4)))
   (Start_9 Int (1 4 5 y (+ Start_1 Start_7) (* Start_5 Start_1) (abs Start_8)))
   (Start_2 Int (x (- Start_7) (- Start_2 Start_10) (+ Start_3 Start_4) (div Start_6 Start_8)))
   (Start_6 Int (0))
   (Start_7 Int (x (- Start_2 Start_3) (+ Start_1 Start) (div Start_8 Start_2) (mod Start_1 Start_7) (ite StartBool_2 Start_8 Start_3)))
   (Start_13 Int (4 (- Start_3) (- Start_8 Start) (div Start_2 Start_11) (abs Start_7) (ite StartBool Start_10 Start_9)))
   (Start_8 Int (5 (- Start_7 Start_7) (+ Start_4 Start_8) (* Start_6 Start_6)))
   (StartBool_2 Bool (false (not StartBool_3) (>= Start_9 Start_4) (> Start_4 Start_8)))
   (StartBool_4 Bool (false (< Start_5 Start_5) (= Start Start_4) (> Start_6 Start_6)))
   (Start_3 Int (x (- Start_7) (- Start_4 Start_5) (abs Start_5) (ite StartBool_2 Start_3 Start_2)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (+ (+ 4 4) (+ (mod 4 y) 3)))))

(check-synth)
