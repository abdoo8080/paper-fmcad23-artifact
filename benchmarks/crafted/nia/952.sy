(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_18 Int) (Start_1 Int) (StartBool_6 Bool) (StartBool_5 Bool) (Start_14 Int) (Start_3 Int) (StartBool_1 Bool) (Start_12 Int) (StartBool_3 Bool) (Start_17 Int) (Start_4 Int) (Start_5 Int) (Start_2 Int) (Start_13 Int) (Start_7 Int) (Start_6 Int) (Start_10 Int) (Start_15 Int) (Start_8 Int) (Start_16 Int) (StartBool_2 Bool) (Start_11 Int) (StartBool_4 Bool) (Start_9 Int))
  ((Start Int (0 (+ Start_1 Start) (* Start_1 Start_1) (mod Start_1 Start_2) (abs Start_3) (ite StartBool_1 Start_4 Start_3)))
   (StartBool Bool (true (not StartBool_3) (or StartBool_3 StartBool_5) (<= Start_5 Start_3) (= Start_7 Start_17) (>= Start_15 Start_12) (> Start_9 Start_9)))
   (Start_18 Int (1 0 3 (- Start_18) (div Start_18 Start_16) (ite StartBool_6 Start_12 Start_18)))
   (Start_1 Int (3 x (+ Start_5 Start_15) (div Start_6 Start_13) (ite StartBool_1 Start_10 Start_8)))
   (StartBool_6 Bool (false true (<= Start_10 Start_6) (>= Start_15 Start_15) (> Start_10 Start_18)))
   (StartBool_5 Bool (true false (not StartBool_1) (or StartBool StartBool_4) (>= Start_9 Start_16)))
   (Start_14 Int (5 (- Start_11 Start_7) (+ Start_9 Start_14) (div Start_1 Start_6) (abs Start_4) (ite StartBool_1 Start_3 Start_15)))
   (Start_3 Int (0 1 5 (- Start_4) (- Start_14 Start_8) (+ Start_2 Start_5) (* Start_9 Start_10) (mod Start_10 Start_10) (ite StartBool Start_14 Start_2)))
   (StartBool_1 Bool (false true (not StartBool_4) (<= Start_6 Start_6) (= Start_1 Start_1)))
   (Start_12 Int (5 2 y 0 1 4 (- Start_5 Start_12) (* Start Start_5) (div Start_8 Start_11) (abs Start_1)))
   (StartBool_3 Bool (true false (not StartBool_2) (= Start_5 Start_1) (> Start_5 Start)))
   (Start_17 Int (y (- Start_2) (- Start_1 Start_6) (+ Start_16 Start_18) (* Start_10 Start_2) (abs Start_7) (ite StartBool_1 Start_15 Start)))
   (Start_4 Int (4 (- Start_3) (- Start_4 Start) (* Start_5 Start) (div Start_4 Start_1) (abs Start)))
   (Start_5 Int (3 5 (- Start_2 Start_6) (+ Start_4 Start_6) (div Start_2 Start_2) (ite StartBool_2 Start_1 Start_6)))
   (Start_2 Int (2 3 (- Start_5 Start_5) (* Start_9 Start_5) (mod Start Start_11) (abs Start_5) (ite StartBool_5 Start_8 Start_3)))
   (Start_13 Int (x (* Start_5 Start_8) (mod Start_10 Start_6) (ite StartBool_3 Start_11 Start_8)))
   (Start_7 Int (4 2 (- Start) (- Start_8 Start_1) (div Start_6 Start_8) (abs Start_5) (ite StartBool_3 Start_1 Start_7)))
   (Start_6 Int (2 1 (- Start_6) (+ Start_3 Start_5) (* Start_9 Start_9) (div Start_9 Start_10) (mod Start_11 Start_11)))
   (Start_10 Int (y 3 (- Start_1) (* Start_10 Start) (div Start_3 Start_2) (mod Start_8 Start_4) (ite StartBool_1 Start_7 Start_10)))
   (Start_15 Int (3 0 y (- Start_12 Start_14) (* Start_1 Start_11) (div Start_12 Start_13) (abs Start) (ite StartBool_4 Start_9 Start_8)))
   (Start_8 Int (1 y (+ Start_3 Start_5) (div Start Start_5)))
   (Start_16 Int (4 (- Start_15 Start_8) (+ Start_6 Start_13) (ite StartBool_3 Start_6 Start_4)))
   (StartBool_2 Bool (true false (or StartBool_1 StartBool_2) (< Start_3 Start_1) (<= Start Start_1) (= Start_4 Start_4) (> Start_7 Start_4)))
   (Start_11 Int (x (- Start_4 Start_7) (+ Start_11 Start_8) (abs Start_6) (ite StartBool_4 Start_2 Start_6)))
   (StartBool_4 Bool (true false (not StartBool_2) (or StartBool_1 StartBool) (< Start_1 Start_8) (= Start_3 Start_3)))
   (Start_9 Int (y (- Start_7 Start_3) (+ Start_12 Start_6) (* Start_5 Start_5) (div Start_6 Start_5) (mod Start_10 Start_13) (abs Start_6) (ite StartBool_4 Start_3 Start_9)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (abs (mod 3 x))))

(check-synth)
