(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_14 Int) (Start_13 Int) (Start_1 Int) (Start_16 Int) (Start_15 Int) (StartBool_4 Bool) (Start_4 Int) (Start_10 Int) (Start_5 Int) (Start_12 Int) (Start_9 Int) (Start_3 Int) (StartBool_2 Bool) (Start_8 Int) (Start_11 Int) (Start_6 Int) (Start_2 Int) (StartBool_1 Bool) (Start_7 Int) (StartBool_3 Bool))
  ((Start Int (2 (- Start) (+ Start Start_1) (div Start_2 Start_3) (mod Start_4 Start_2)))
   (StartBool Bool (false true (and StartBool_3 StartBool_1) (or StartBool_4 StartBool) (>= Start_14 Start_13) (> Start Start_6)))
   (Start_14 Int (5 0 (- Start_6) (- Start_11 Start_11) (+ Start_13 Start_1) (* Start_14 Start_4) (div Start_11 Start_3) (mod Start_15 Start_5)))
   (Start_13 Int (x 3 y (+ Start_7 Start_13) (* Start_7 Start_7) (mod Start_12 Start_10) (abs Start_2)))
   (Start_1 Int (x 1 2 (- Start_4 Start_10) (+ Start_12 Start_4) (* Start_5 Start_4)))
   (Start_16 Int (3 1 (- Start_10) (- Start_10 Start_11) (+ Start_2 Start_5) (* Start_13 Start) (div Start_5 Start_8) (abs Start_7)))
   (Start_15 Int (5 (- Start_11) (- Start_10 Start_3) (+ Start_14 Start_1) (* Start_3 Start_13) (div Start_14 Start_16) (mod Start_3 Start_4) (abs Start_6)))
   (StartBool_4 Bool (true (not StartBool_2)))
   (Start_4 Int (y (- Start_4) (- Start_3 Start_1) (+ Start_1 Start_1) (* Start_2 Start_4) (div Start_5 Start_4) (abs Start_2)))
   (Start_10 Int (4 y 0 x 3 5 (- Start_9) (* Start_8 Start_8) (div Start_5 Start_4) (mod Start_11 Start_3) (abs Start_6)))
   (Start_5 Int (5 y (* Start_5 Start_4) (div Start_4 Start_5) (mod Start_5 Start_2)))
   (Start_12 Int (1 2 (- Start_12) (- Start_4 Start_5) (+ Start_7 Start) (* Start Start_8) (div Start_3 Start_11) (mod Start_11 Start_13) (abs Start_6)))
   (Start_9 Int (0 4 x 1 2 3 y 5 (- Start_4 Start_5) (* Start_6 Start_8) (abs Start_2) (ite StartBool_1 Start_6 Start_4)))
   (Start_3 Int (0 y (- Start_5) (- Start_1 Start_4) (+ Start_5 Start_2) (div Start_4 Start_2) (abs Start_2) (ite StartBool Start_5 Start_1)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_1) (< Start_10 Start_2) (<= Start_7 Start_4) (= Start_9 Start)))
   (Start_8 Int (0 2 5 4 3 (mod Start_5 Start_11)))
   (Start_11 Int (5 (- Start_2) (* Start_8 Start_7) (abs Start_5) (ite StartBool_1 Start Start_11)))
   (Start_6 Int (2 0 (- Start_3) (* Start_7 Start_5)))
   (Start_2 Int (x (- Start_5 Start_5) (+ Start_1 Start_5) (* Start_4 Start_6) (abs Start)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_2 StartBool_2) (< Start_3 Start_3) (<= Start_3 Start_4) (> Start_6 Start)))
   (Start_7 Int (x y (- Start_5 Start_3) (div Start_8 Start_6) (mod Start_9 Start_1) (abs Start_2) (ite StartBool Start Start_4)))
   (StartBool_3 Bool (true (and StartBool StartBool_3) (or StartBool_1 StartBool_4) (>= Start_1 Start_7)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (div 3 0)))

(check-synth)
