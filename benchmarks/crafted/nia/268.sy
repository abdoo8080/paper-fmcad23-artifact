(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (Start_1 Int) (Start_11 Int) (Start_2 Int) (StartBool_1 Bool) (Start_3 Int) (StartBool_3 Bool) (Start_8 Int) (Start_10 Int) (Start_4 Int) (Start_6 Int) (Start_7 Int) (StartBool_4 Bool) (Start_9 Int) (StartBool_2 Bool) (Start_5 Int))
  ((Start Int (1 2 4 (- Start) (- Start_1 Start) (div Start_1 Start_2) (mod Start_1 Start_1) (ite StartBool_1 Start_2 Start_2)))
   (StartBool Bool (true (= Start_4 Start_10)))
   (Start_1 Int (5 (- Start_10) (div Start_5 Start_1) (mod Start_11 Start_4) (ite StartBool_1 Start Start_3)))
   (Start_11 Int (5 1 (- Start_9) (- Start Start_10) (div Start Start_6)))
   (Start_2 Int (5 (- Start_10) (+ Start_7 Start_8) (div Start_4 Start_9) (mod Start Start_7)))
   (StartBool_1 Bool (false (or StartBool_2 StartBool_3) (< Start_2 Start_1) (= Start_1 Start_3) (>= Start_3 Start_3) (> Start Start_1)))
   (Start_3 Int (y (ite StartBool_2 Start Start)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool) (<= Start Start) (= Start_4 Start_3)))
   (Start_8 Int (0 y 4 2 (- Start_6) (* Start_9 Start_3) (div Start_3 Start_9) (abs Start_1) (ite StartBool Start_5 Start_2)))
   (Start_10 Int (4 (- Start_3) (* Start_8 Start_2) (div Start_6 Start_2) (mod Start_6 Start_8) (abs Start_5)))
   (Start_4 Int (y (- Start_5) (+ Start_3 Start_2) (abs Start_2) (ite StartBool_4 Start_2 Start_6)))
   (Start_6 Int (5 x 3 4 (+ Start_2 Start_1) (* Start_7 Start) (mod Start_7 Start_4) (abs Start_6)))
   (Start_7 Int (2 5 (- Start_8 Start_1) (+ Start Start_4) (* Start_1 Start_4) (mod Start_6 Start_8) (abs Start_6) (ite StartBool_1 Start_2 Start_8)))
   (StartBool_4 Bool (false (<= Start_8 Start_1) (>= Start_10 Start_5)))
   (Start_9 Int (1 (- Start_4) (- Start_6 Start_5) (+ Start_2 Start_7) (* Start_1 Start_6)))
   (StartBool_2 Bool (true (and StartBool_4 StartBool_3) (or StartBool StartBool_1) (<= Start_1 Start_5)))
   (Start_5 Int (3 (- Start_2) (* Start_5 Start) (div Start_9 Start_8) (mod Start Start_5) (abs Start)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (+ 4 (div 4 (abs y)))))

(check-synth)
