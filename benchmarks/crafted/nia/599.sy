(set-logic NIA)

(synth-fun f ((x Int) (y Int)) Int
  ((Start Int) (StartBool Bool) (StartBool_5 Bool) (Start_2 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_11 Int) (Start_5 Int) (Start_12 Int) (Start_7 Int) (Start_6 Int) (Start_4 Int) (Start_3 Int) (StartBool_2 Bool) (Start_1 Int) (Start_9 Int) (Start_13 Int) (StartBool_4 Bool) (Start_8 Int) (Start_10 Int))
  ((Start Int (5 (- Start_1 Start_1) (mod Start Start_1) (abs Start_2) (ite StartBool_1 Start_1 Start)))
   (StartBool Bool (false (not StartBool_4) (or StartBool_3 StartBool_5) (< Start_1 Start_11) (= Start Start_10) (> Start_12 Start_3)))
   (StartBool_5 Bool (false (and StartBool StartBool_3) (<= Start_2 Start_2) (= Start_11 Start_13) (>= Start_7 Start_3) (> Start_11 Start)))
   (Start_2 Int (x (div Start_4 Start_11) (mod Start_11 Start_10)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (or StartBool_1 StartBool_2) (< Start_2 Start_11) (= Start_2 Start_12) (>= Start_2 Start_13) (> Start_12 Start)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_2) (or StartBool_2 StartBool) (< Start_3 Start_1) (<= Start_3 Start) (= Start_4 Start) (>= Start_3 Start_5)))
   (Start_11 Int (1 x 3 5 (div Start_8 Start_7) (ite StartBool_2 Start_10 Start_10)))
   (Start_5 Int (0 (- Start_4) (+ Start_1 Start) (* Start Start_6) (div Start Start_3) (mod Start_4 Start_6) (abs Start_5)))
   (Start_12 Int (3 (* Start_10 Start_6) (div Start_12 Start_6) (ite StartBool Start Start_2)))
   (Start_7 Int (x (- Start_7 Start_7) (mod Start_4 Start_8) (abs Start_1)))
   (Start_6 Int (3 4 (- Start_3) (+ Start_3 Start_1) (mod Start_2 Start_6)))
   (Start_4 Int (0 (- Start_4 Start_5) (div Start_1 Start_4) (mod Start Start_7) (abs Start) (ite StartBool Start Start_3)))
   (Start_3 Int (3 (* Start_4 Start_5) (div Start Start) (mod Start_2 Start_4) (abs Start_2)))
   (StartBool_2 Bool (true (not StartBool_2) (or StartBool_2 StartBool_3) (< Start Start_1) (>= Start_9 Start_3)))
   (Start_1 Int (3 (* Start_4 Start_9) (div Start_10 Start_9) (mod Start_13 Start_7) (abs Start_6)))
   (Start_9 Int (5 (- Start_7 Start_10) (+ Start_7 Start_1) (* Start_9 Start_3) (div Start_9 Start_9)))
   (Start_13 Int (0 (- Start_5) (* Start_4 Start_10) (div Start_1 Start_8) (abs Start_1) (ite StartBool_1 Start_8 Start_3)))
   (StartBool_4 Bool (true false (not StartBool) (or StartBool_1 StartBool_3) (< Start_1 Start_1) (> Start_9 Start_4)))
   (Start_8 Int (1 3 (- Start Start_4)))
   (Start_10 Int (1 (- Start_5) (* Start_4 Start_6) (ite StartBool Start_5 Start_6)))))

(declare-var x Int)
(declare-var y Int)

(constraint (= (f x y) (- (mod (- 2) 0))))

(check-synth)
