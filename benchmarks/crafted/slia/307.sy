(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_6 String) (Start_1 String) (StartInt_3 Int) (StartInt_2 Int) (StartInt_4 Int) (StartInt_1 Int) (Start_5 String) (Start_3 String) (Start_4 String) (Start_8 String) (Start_7 String) (Start_2 String) (StartBool_1 Bool))
  ((Start String ("1" (str.replace Start Start_1 Start_1) (str.from_int StartInt) (ite StartBool Start Start_2)))
   (StartInt Int (0 (str.len Start_1) (str.to_int Start_4)))
   (StartBool Bool (true false (and StartBool StartBool_1) (str.< Start_8 Start_3) (str.prefixof Start_2 Start_1) (= Start Start_5)))
   (Start_9 String ("0"))
   (Start_6 String ("b" y "1" "0" "a" (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_3 Start_8 Start) (ite StartBool Start_8 Start_9)))
   (Start_1 String ("1" "" (str.at Start_3 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.indexof Start Start_1 StartInt_1) (str.to_int Start_1)))
   (StartInt_2 Int (1 (str.to_int Start_2)))
   (StartInt_4 Int (1 0 (str.indexof Start_8 Start_8 StartInt_4) (str.to_int Start_3)))
   (StartInt_1 Int (1 (str.to_int Start_2)))
   (Start_5 String ("0" (str.substr Start_6 StartInt_2 StartInt_4) (str.replace Start_8 Start_7 Start_9) (str.from_int StartInt_3)))
   (Start_3 String ("1" "0" (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt_2 StartInt) (str.from_int StartInt_1)))
   (Start_4 String ("0" (str.at Start_5 StartInt) (str.replace Start_6 Start_6 Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_3)))
   (Start_8 String ("" "0" "a" y "1" x "b" (ite StartBool Start_6 Start_5)))
   (Start_7 String (y "1" (str.++ Start_1 Start_6) (str.at Start_4 StartInt_2)))
   (Start_2 String ("b" (str.from_int StartInt)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_6 Start_7) (str.<= Start_4 Start_3) (str.suffixof Start_3 Start_8) (str.contains Start_7 Start_3) (= Start_7 Start) (<= StartInt_1 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" x "0")))

(check-synth)
