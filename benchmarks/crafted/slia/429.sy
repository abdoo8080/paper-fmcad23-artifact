(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (StartInt_4 Int) (Start_1 String) (StartBool_1 Bool) (Start_5 String) (StartInt_5 Int) (Start_15 String) (StartBool_3 Bool) (StartInt_2 Int) (StartInt_3 Int) (Start_13 String) (StartInt_1 Int) (Start_6 String) (Start_8 String) (Start_9 String) (StartInt_6 Int) (Start_2 String) (StartInt_7 Int) (StartBool_4 Bool) (StartInt_8 Int) (StartInt_10 Int) (StartInt_9 Int) (Start_11 String) (Start_10 String) (StartBool_2 Bool) (Start_12 String) (StartBool_5 Bool) (Start_14 String) (Start_4 String) (Start_3 String))
  ((Start String ("0" "b" (str.substr Start StartInt_1 StartInt_1)))
   (StartInt Int (1 (str.to_int Start_3)))
   (StartBool Bool (false true (and StartBool_3 StartBool_2) (str.prefixof Start_11 Start_1) (str.suffixof Start_4 Start_7) (= Start Start) (<= StartInt_9 StartInt_9)))
   (Start_7 String (x (str.at Start_1 StartInt_6) (str.substr Start_5 StartInt_1 StartInt_1) (str.replace Start_1 Start_4 Start_6) (ite StartBool_4 Start_7 Start_9)))
   (StartInt_4 Int (0 (str.indexof Start_7 Start_8 StartInt_1)))
   (Start_1 String ("a" "1" (str.++ Start Start) (str.at Start_2 StartInt_2) (str.replace Start Start_2 Start_1)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_1) (str.prefixof Start_2 Start_1) (str.suffixof Start_1 Start) (= Start_1 Start_2)))
   (Start_5 String (y (str.replace Start_3 Start_6 Start_3) (str.from_int StartInt_4) (ite StartBool Start_6 Start_3)))
   (StartInt_5 Int (1 0 (str.len Start_5) (str.to_int Start)))
   (Start_15 String ("1" y "0" "a" x "" "b" (str.at Start_11 StartInt_5)))
   (StartBool_3 Bool (false true (not StartBool) (str.prefixof Start_4 Start_1) (str.suffixof Start_6 Start_6) (str.contains Start_9 Start) (<= StartInt_10 StartInt_1)))
   (StartInt_2 Int (0))
   (StartInt_3 Int (1 (str.to_int Start)))
   (Start_13 String ("1" (str.++ Start_5 Start_13) (str.at Start StartInt_5) (str.substr Start_3 StartInt_1 StartInt_2) (ite StartBool_2 Start_1 Start_12)))
   (StartInt_1 Int (0 1 (str.to_int Start_1)))
   (Start_6 String ("0" (str.++ Start_13 Start_13) (str.at Start_9 StartInt_8) (str.substr Start_6 StartInt_1 StartInt) (str.replace Start_1 Start_4 Start_9) (str.from_int StartInt_9) (ite StartBool_4 Start_10 Start_3)))
   (Start_8 String (y x (str.at Start_4 StartInt_3) (str.substr Start_4 StartInt_3 StartInt_5) (ite StartBool_2 Start_1 Start)))
   (Start_9 String (y "1" (str.from_int StartInt_5) (ite StartBool_4 Start_1 Start_4)))
   (StartInt_6 Int (1 0 (str.to_int Start_13)))
   (Start_2 String ("" "a" (str.++ Start Start) (ite StartBool_1 Start Start_2)))
   (StartInt_7 Int (1 (str.indexof Start_10 Start_4 StartInt_8)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool_5) (str.< Start_1 Start_2) (str.suffixof Start_10 Start_10) (str.contains Start_11 Start_11) (<= StartInt_7 StartInt_2)))
   (StartInt_8 Int (0 1))
   (StartInt_10 Int (1 0 (str.indexof Start_8 Start_6 StartInt_4)))
   (StartInt_9 Int (1 (str.len Start_9) (str.indexof Start_14 Start_7 StartInt_2)))
   (Start_11 String ("" (str.substr Start_6 StartInt_1 StartInt_4)))
   (Start_10 String ("b" y "1" "a" (str.++ Start_8 Start_4) (str.at Start_12 StartInt_4) (str.substr Start_4 StartInt_4 StartInt_5) (str.replace Start_6 Start_3 Start_11) (ite StartBool_3 Start_4 Start_8)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_3) (str.<= Start Start_3) (str.suffixof Start_4 Start_3) (= Start_2 Start_5) (<= StartInt_3 StartInt_3)))
   (Start_12 String (x y (str.++ Start_12 Start_3) (str.replace Start_2 Start_4 Start_8)))
   (StartBool_5 Bool (true false (not StartBool_3) (str.< Start_13 Start_3) (str.prefixof Start_2 Start_13) (str.suffixof Start_11 Start_2) (= Start Start_10)))
   (Start_14 String ("a" (str.at Start_12 StartInt_9) (str.substr Start_1 StartInt_7 StartInt_2) (str.replace Start_7 Start_3 Start_9)))
   (Start_4 String ("0" y "1" (str.++ Start_3 Start_6) (str.at Start_15 StartInt) (str.substr Start_1 StartInt_9 StartInt) (ite StartBool Start_12 Start)))
   (Start_3 String ("" y "0" x "b" (ite StartBool_2 Start_11 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at x (str.to_int (str.++ "1" "1")))))))

(check-synth)
