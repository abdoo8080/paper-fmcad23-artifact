(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (StartInt_6 Int) (StartBool_1 Bool) (Start_2 String) (Start_4 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_2 Int) (Start_6 String) (StartInt_3 Int) (StartInt_5 Int) (Start_5 String) (Start_3 String) (Start_7 String) (StartBool_3 Bool))
  ((Start String ("a" (str.++ Start Start) (str.replace Start Start_1 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 (str.indexof Start_5 Start StartInt_1) (str.to_int Start_7)))
   (StartBool Bool (false true (not StartBool) (str.< Start Start_2) (str.prefixof Start_7 Start_6) (str.contains Start_1 Start_5) (= StartInt_4 StartInt_5)))
   (Start_1 String ("b" (str.++ Start_1 Start_3) (ite StartBool Start_7 Start_1)))
   (StartInt_1 Int (0 1 (str.len Start_5) (str.to_int Start_4)))
   (StartInt_6 Int (1 0))
   (StartBool_1 Bool (true (and StartBool StartBool) (str.suffixof Start_2 Start_2) (= Start Start_2) (<= StartInt_2 StartInt_1)))
   (Start_2 String ("" "0" "a" x y "1" (str.++ Start_3 Start_1) (str.substr Start_1 StartInt_3 StartInt) (str.replace Start_4 Start_2 Start_1)))
   (Start_4 String ("0" (str.substr Start_3 StartInt StartInt_4) (ite StartBool Start Start_2)))
   (StartBool_2 Bool (false true (not StartBool_3) (str.< Start_3 Start_4) (str.<= Start_5 Start_3) (str.prefixof Start Start_6) (= Start_1 Start_7) (= StartInt_5 StartInt_5)))
   (StartInt_4 Int (0 (str.len Start) (str.indexof Start_2 Start_3 StartInt)))
   (StartInt_2 Int (1 0))
   (Start_6 String (y (str.++ Start_7 Start_6) (str.substr Start_2 StartInt_4 StartInt_3) (str.from_int StartInt_4)))
   (StartInt_3 Int (0 1 (str.indexof Start Start_4 StartInt_3) (str.to_int Start_5)))
   (StartInt_5 Int (0))
   (Start_5 String ("b" x y "" (str.substr Start_5 StartInt_1 StartInt_4) (str.from_int StartInt_3) (ite StartBool_2 Start_4 Start)))
   (Start_3 String ("b" "" "0" (str.from_int StartInt_2)))
   (Start_7 String (x "0" (str.at Start_2 StartInt_5) (str.substr Start_7 StartInt StartInt_5) (str.replace Start_3 Start_2 Start) (ite StartBool Start Start_5)))
   (StartBool_3 Bool (true (not StartBool_2) (str.< Start_2 Start_1) (str.prefixof Start_5 Start_3) (str.suffixof Start_3 Start) (= StartInt_1 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "a" (str.at "1" (str.indexof y "1" 1)))))

(check-synth)
