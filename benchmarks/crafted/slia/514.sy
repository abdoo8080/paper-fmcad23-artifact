(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartBool_2 Bool) (Start_6 String) (Start_10 String) (StartInt_7 Int) (Start_3 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_2 String) (StartInt_3 Int) (Start_1 String) (Start_5 String) (StartInt_6 Int) (Start_8 String) (Start_4 String) (Start_15 String) (StartInt_4 Int) (Start_9 String) (StartInt_8 Int) (Start_11 String) (Start_7 String) (StartInt_1 Int) (Start_13 String) (Start_12 String) (Start_14 String) (StartInt_9 Int) (StartBool_3 Bool))
  ((Start String (y (str.++ Start Start) (str.at Start StartInt_1) (str.replace Start Start_1 Start)))
   (StartInt Int (0 (str.indexof Start_4 Start StartInt_2)))
   (StartBool Bool (true (str.prefixof Start_1 Start_9) (str.suffixof Start_7 Start_6) (str.contains Start_10 Start_4) (= StartInt_2 StartInt_7)))
   (StartInt_5 Int (0 (str.len Start_6) (str.to_int Start_6)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool StartBool_1) (str.< Start_1 Start_1) (str.prefixof Start_7 Start) (str.suffixof Start_1 Start_8) (= Start_4 Start_5) (= StartInt_3 StartInt_5)))
   (Start_6 String (x (str.++ Start_3 Start_7) (str.at Start_8 StartInt_2) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_7 Start_4 Start_4)))
   (Start_10 String ("1" "a" x y (str.substr Start_6 StartInt StartInt_3) (str.from_int StartInt_5)))
   (StartInt_7 Int (0 1 (str.to_int Start_1)))
   (Start_3 String (y (str.++ Start Start_4) (str.replace Start_2 Start_3 Start_3) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_1 Bool (true (str.<= Start Start_2) (str.suffixof Start_5 Start_4) (= Start_2 Start_6) (<= StartInt_3 StartInt_4)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.indexof Start_1 Start_3 StartInt_2)))
   (Start_2 String ("b" "1" (str.from_int StartInt_2)))
   (StartInt_3 Int (0 (str.len Start_1) (str.indexof Start_1 Start_1 StartInt_1) (str.to_int Start_2)))
   (Start_1 String (x "1" (str.++ Start Start_1) (str.at Start_1 StartInt_2) (str.from_int StartInt_3)))
   (Start_5 String (x (str.++ Start_7 Start_4) (str.substr Start_5 StartInt StartInt_7) (str.replace Start_2 Start_10 Start_8)))
   (StartInt_6 Int (0 (str.len Start_7)))
   (Start_8 String ("1" (str.at Start StartInt_3) (str.substr Start_1 StartInt StartInt_3) (str.from_int StartInt_4) (ite StartBool_2 Start_2 Start_8)))
   (Start_4 String ("0" "" "a" "b" (str.++ Start_11 Start_6) (ite StartBool_1 Start_3 Start_5)))
   (Start_15 String ("1" (str.at Start_4 StartInt) (str.substr Start_14 StartInt_1 StartInt_1) (str.from_int StartInt_5) (ite StartBool_3 Start_13 Start)))
   (StartInt_4 Int (0 1))
   (Start_9 String ("1" (str.at Start_2 StartInt_3) (str.replace Start_2 Start Start_8)))
   (StartInt_8 Int (1 (str.to_int Start)))
   (Start_11 String (x (str.substr Start_5 StartInt StartInt_8) (str.from_int StartInt_5)))
   (Start_7 String ("1" x (str.++ Start_7 Start_8) (str.at Start_9 StartInt_4) (str.substr Start_2 StartInt_6 StartInt) (str.replace Start_8 Start_10 Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_10)))
   (StartInt_1 Int (1 0 (str.indexof Start_8 Start_11 StartInt_9)))
   (Start_13 String (y "0" "" (str.++ Start Start) (str.replace Start_10 Start_11 Start) (ite StartBool_1 Start_9 Start_14)))
   (Start_12 String (x "a" "b" (str.++ Start_3 Start_1) (str.substr Start_7 StartInt_9 StartInt_4) (str.replace Start_7 Start_13 Start_11) (ite StartBool_1 Start_6 Start_8)))
   (Start_14 String (y (str.at Start_3 StartInt_3) (str.replace Start_13 Start_15 Start_2) (ite StartBool_1 Start_10 Start_11)))
   (StartInt_9 Int (0 1 (str.indexof Start_3 Start_12 StartInt_3)))
   (StartBool_3 Bool (true false (str.< Start_3 Start_2) (str.<= Start_9 Start_7) (str.prefixof Start_4 Start) (str.suffixof Start_9 Start_2) (str.contains Start_11 Start_11) (<= StartInt_7 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at (str.++ y y) 0) "0")))

(check-synth)
