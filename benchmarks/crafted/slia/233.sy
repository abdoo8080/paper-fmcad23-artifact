(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_7 Int) (Start_3 String) (Start_1 String) (Start_8 String) (Start_2 String) (Start_5 String) (Start_10 String) (StartBool_1 Bool) (Start_6 String) (StartInt_2 Int) (StartInt_1 Int) (StartInt_3 Int) (Start_4 String) (StartInt_5 Int) (StartInt_4 Int) (StartBool_2 Bool) (Start_9 String) (StartInt_6 Int) (Start_7 String))
  ((Start String ("1" "b" "a" (str.++ Start Start) (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.to_int Start_7)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.<= Start_5 Start_3) (str.prefixof Start_9 Start) (= StartInt_2 StartInt_2)))
   (Start_11 String ("1" (str.at Start_6 StartInt) (str.replace Start Start Start_10) (ite StartBool_2 Start Start_2)))
   (StartInt_7 Int (0 (str.len Start_8) (str.to_int Start)))
   (Start_3 String ("b" "0" (str.from_int StartInt_5) (ite StartBool Start_2 Start_6)))
   (Start_1 String (x (str.++ Start_3 Start_7) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_9)))
   (Start_8 String (x (str.at Start_2 StartInt_1) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_2 Start_2 Start_2) (ite StartBool_1 Start_4 Start_6)))
   (Start_2 String (x (str.at Start_2 StartInt) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_3 Start_3) (ite StartBool_1 Start_2 Start_1)))
   (Start_5 String ("" (str.at Start_3 StartInt_3) (str.replace Start_4 Start_4 Start_4)))
   (Start_10 String ("0" "a" (str.++ Start_6 Start_7) (str.at Start_11 StartInt_5) (str.replace Start_5 Start_4 Start_7) (str.from_int StartInt_7)))
   (StartBool_1 Bool (false (not StartBool) (str.prefixof Start Start_1) (str.suffixof Start_4 Start_1) (str.contains Start_2 Start_3) (= Start_4 Start_5) (<= StartInt_1 StartInt_2)))
   (Start_6 String ("a" x (str.++ Start_4 Start_7) (str.at Start_9 StartInt_1) (str.substr Start_2 StartInt StartInt_1) (str.from_int StartInt_2)))
   (StartInt_2 Int (1))
   (StartInt_1 Int (0 1 (str.indexof Start_2 Start StartInt)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.to_int Start_4)))
   (Start_4 String ("0" (str.++ Start_6 Start_7) (str.substr Start_5 StartInt_1 StartInt_4) (str.replace Start Start_6 Start_1)))
   (StartInt_5 Int (0 (str.indexof Start_2 Start_2 StartInt_6) (str.to_int Start_2)))
   (StartInt_4 Int (1 (str.len Start_4) (str.indexof Start_8 Start_9 StartInt)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool StartBool_2) (str.<= Start_5 Start_8) (str.prefixof Start_2 Start_3) (= Start_6 Start_10) (= StartInt StartInt_5)))
   (Start_9 String (y (str.++ Start_3 Start_1) (str.at Start_1 StartInt) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_8)))
   (StartInt_6 Int (0 (str.to_int Start_2)))
   (Start_7 String ("b" (str.substr Start_1 StartInt_4 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "b" "b") y "b")))

(check-synth)
