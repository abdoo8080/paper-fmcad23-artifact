(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_6 String) (Start_2 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_4 String) (Start_8 String) (Start_5 String) (StartInt_6 Int) (Start_9 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_5 Int) (Start_10 String) (StartInt_7 Int) (StartInt_4 Int) (Start_3 String) (Start_1 String) (Start_7 String))
  ((Start String (y "1" "b" (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt)))
   (StartInt Int (0 1))
   (StartBool Bool (true (and StartBool_1 StartBool) (str.prefixof Start_10 Start) (= Start_3 Start_2)))
   (StartInt_8 Int (0 1 (str.len Start_6) (str.to_int Start_3)))
   (Start_6 String ("a" "1" (str.substr Start_8 StartInt StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start_1)))
   (Start_2 String (y "1" "a" (str.++ Start_10 Start_5) (str.at Start_5 StartInt_6) (str.substr Start StartInt_1 StartInt_8) (str.from_int StartInt_4)))
   (StartBool_1 Bool (true (str.< Start_9 Start_5) (str.<= Start_4 Start) (= Start_10 Start_7) (= StartInt StartInt_6) (<= StartInt_1 StartInt_7)))
   (StartInt_2 Int (1 0 (str.len Start_4)))
   (Start_4 String (x (str.at Start_5 StartInt_3) (str.substr Start_4 StartInt_3 StartInt) (str.from_int StartInt_3)))
   (Start_8 String ("0" (str.at Start_1 StartInt_4) (str.substr Start_3 StartInt_5 StartInt_6) (ite StartBool_1 Start_7 Start_8)))
   (Start_5 String ("a" "1" (str.substr Start StartInt StartInt_2) (str.replace Start_6 Start_2 Start_6) (str.from_int StartInt_3) (ite StartBool_1 Start_7 Start_8)))
   (StartInt_6 Int (0 1 (str.indexof Start_7 Start StartInt_1)))
   (Start_9 String ("1" "b" "" (str.at Start_10 StartInt_4) (str.substr Start_5 StartInt_3 StartInt_7) (ite StartBool Start_8 Start_4)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_9 Start_7 StartInt_7) (str.to_int Start_9)))
   (StartInt_3 Int (1 (str.indexof Start_4 Start StartInt_3) (str.to_int Start_1)))
   (StartInt_5 Int (0 (str.indexof Start_4 Start_9 StartInt) (str.to_int Start_10)))
   (Start_10 String ("" (str.++ Start Start_8) (str.at Start_2 StartInt_2) (str.substr Start_9 StartInt_1 StartInt_2) (str.replace Start_1 Start_3 Start_6) (str.from_int StartInt_2)))
   (StartInt_7 Int (0 (str.to_int Start)))
   (StartInt_4 Int (0 (str.len Start_4) (str.to_int Start_3)))
   (Start_3 String (x "" "b" "a" (str.at Start StartInt_2) (str.substr Start_2 StartInt StartInt_3) (str.replace Start_3 Start_2 Start_2) (ite StartBool Start_2 Start_4)))
   (Start_1 String ("b" "0" "a" "" "1" y x (str.++ Start Start) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_2 Start_3 Start_2)))
   (Start_7 String ("b" "1" "a" y x (str.substr Start_1 StartInt_5 StartInt_5) (str.from_int StartInt_2) (ite StartBool_1 Start_10 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.substr y 0 1) "0")))

(check-synth)
