(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_19 String) (Start_20 String) (StartInt_6 Int) (StartBool_3 Bool) (Start_8 String) (Start_17 String) (StartInt_3 Int) (Start_18 String) (Start_1 String) (Start_11 String) (StartBool_1 Bool) (Start_6 String) (StartBool_6 Bool) (StartInt_1 Int) (Start_7 String) (Start_4 String) (Start_3 String) (Start_2 String) (Start_13 String) (StartInt_5 Int) (Start_16 String) (StartInt_7 Int) (StartInt_2 Int) (Start_9 String) (Start_5 String) (Start_10 String) (StartBool_2 Bool) (StartBool_4 Bool) (Start_14 String) (Start_15 String) (Start_12 String) (StartInt_4 Int))
  ((Start String (x "" (str.++ Start Start_1) (str.substr Start StartInt_1 StartInt) (str.replace Start_2 Start_1 Start_1)))
   (StartInt Int (1 (str.len Start_2) (str.indexof Start_17 Start_4 StartInt_2)))
   (StartBool Bool (true (not StartBool_5) (and StartBool_6 StartBool_6) (str.suffixof Start_3 Start) (= Start_17 Start_6) (<= StartInt_4 StartInt_3)))
   (StartBool_5 Bool (true (str.< Start_3 Start_15) (str.<= Start_6 Start_4) (str.prefixof Start_16 Start_4) (str.contains Start_14 Start_1) (= Start_20 Start_1)))
   (Start_19 String ("a" x "1" (str.substr Start_3 StartInt_5 StartInt_1) (str.from_int StartInt_2) (ite StartBool_3 Start_8 Start)))
   (Start_20 String ("b" (str.++ Start_14 Start_3) (str.at Start_2 StartInt) (str.replace Start_6 Start_4 Start_17)))
   (StartInt_6 Int (0 1 (str.to_int Start_9)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (str.< Start_7 Start_3) (str.<= Start_3 Start_3) (str.prefixof Start Start_8) (str.suffixof Start_1 Start_2) (= Start_4 Start_5) (= StartInt_5 StartInt_4)))
   (Start_8 String (x (str.++ Start Start_7) (str.from_int StartInt)))
   (Start_17 String ("0" (str.++ Start_5 Start_17) (str.substr Start_10 StartInt_7 StartInt_4) (str.replace Start_11 Start_6 Start_4) (str.from_int StartInt_6) (ite StartBool_2 Start_4 Start_3)))
   (StartInt_3 Int (0 (str.indexof Start_5 Start_18 StartInt) (str.to_int Start_17)))
   (Start_18 String ("1" (str.substr Start_3 StartInt_3 StartInt_7) (str.replace Start_6 Start_1 Start_13) (str.from_int StartInt_6)))
   (Start_1 String ("b" "0" (str.replace Start_1 Start_4 Start_5) (str.from_int StartInt) (ite StartBool Start_4 Start_4)))
   (Start_11 String ("a" "1" (str.++ Start_13 Start_6) (str.substr Start_7 StartInt_4 StartInt_3) (str.replace Start_8 Start_4 Start_3) (ite StartBool_2 Start_10 Start_7)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_3) (str.< Start_3 Start_3)))
   (Start_6 String ("0" (str.++ Start_4 Start_6) (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt_2 StartInt_2) (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start)))
   (StartBool_6 Bool (false (and StartBool_3 StartBool_4) (str.< Start_17 Start_17) (str.suffixof Start_18 Start_11) (= Start_19 Start_6) (= StartInt_5 StartInt)))
   (StartInt_1 Int (0 1))
   (Start_7 String (y "" "0" x "1" (str.at Start_3 StartInt_4) (str.substr Start_10 StartInt_3 StartInt_4) (str.from_int StartInt)))
   (Start_4 String (y (str.replace Start_2 Start_1 Start_1) (ite StartBool Start_2 Start)))
   (Start_3 String ("0" "b" (ite StartBool Start_1 Start_4)))
   (Start_2 String ("b" x (str.++ Start_2 Start_3) (str.at Start_2 StartInt) (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (Start_13 String ("1" (str.++ Start_11 Start_1) (str.substr Start_11 StartInt_5 StartInt_5) (str.replace Start_4 Start_13 Start_10) (str.from_int StartInt_1) (ite StartBool_4 Start_9 Start_4)))
   (StartInt_5 Int (1 0 (str.indexof Start_9 Start_2 StartInt_6)))
   (Start_16 String (y (str.at Start_14 StartInt_4) (str.substr Start_3 StartInt_4 StartInt_5) (str.replace Start_3 Start_6 Start_17) (ite StartBool Start_5 Start_6)))
   (StartInt_7 Int (0))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start Start_3 StartInt_1)))
   (Start_9 String ("a" (str.++ Start_6 Start_5)))
   (Start_5 String ("0" "" "b" "a" y x (str.replace Start_6 Start_1 Start_3) (str.from_int StartInt_2)))
   (Start_10 String ("" "a" x (str.++ Start Start_10) (str.at Start_5 StartInt_5) (str.substr Start_4 StartInt_2 StartInt_2) (ite StartBool_2 Start_8 Start_8)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_1 StartBool_1) (str.<= Start_7 Start_4) (str.prefixof Start_3 Start_4) (str.suffixof Start_11 Start_12) (str.contains Start_6 Start_2) (= StartInt_4 StartInt_5)))
   (StartBool_4 Bool (true (str.< Start_14 Start_5) (str.prefixof Start_13 Start_5) (str.suffixof Start_7 Start_6) (str.contains Start_14 Start_12) (= Start_5 Start_6)))
   (Start_14 String ("0" (str.substr Start_15 StartInt_6 StartInt_4) (ite StartBool_2 Start_14 Start_7)))
   (Start_15 String ("b" (str.++ Start_10 Start_5) (str.at Start_12 StartInt_3) (str.substr Start_4 StartInt_5 StartInt_4) (str.replace Start_10 Start_16 Start_7) (ite StartBool_3 Start_14 Start_15)))
   (Start_12 String ("0" (str.at Start_6 StartInt) (str.replace Start_2 Start_12 Start_1) (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_1)))
   (StartInt_4 Int (0 1 (str.len Start_10) (str.indexof Start_14 Start_18 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x y "1")))

(check-synth)
