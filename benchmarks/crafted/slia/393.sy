(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (Start_8 String) (StartInt_3 Int) (Start_5 String) (StartInt_2 Int) (Start_12 String) (StartInt_1 Int) (Start_1 String) (StartBool_3 Bool) (Start_14 String) (StartBool_4 Bool) (Start_9 String) (Start_2 String) (Start_15 String) (Start_3 String) (Start_10 String) (Start_13 String) (Start_6 String) (StartInt_5 Int) (StartBool_2 Bool) (Start_11 String) (StartBool_5 Bool) (Start_7 String) (StartInt_6 Int) (StartInt_7 Int) (StartBool_1 Bool) (StartInt_4 Int))
  ((Start String ("1" "0" (str.substr Start StartInt StartInt) (str.replace Start_1 Start_1 Start) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (0 (str.len Start_15)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_1 StartBool_4) (str.< Start_15 Start_14) (str.prefixof Start_6 Start_8)))
   (Start_4 String ("a" (str.++ Start_7 Start) (str.replace Start_7 Start Start_6) (ite StartBool_2 Start_8 Start_8)))
   (Start_8 String ("a" "" (str.at Start_7 StartInt) (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_5 Start_7 Start_1) (str.from_int StartInt_1) (ite StartBool_3 Start_1 Start_4)))
   (StartInt_3 Int (0 1 (str.to_int Start)))
   (Start_5 String ("0" (str.substr Start_6 StartInt_3 StartInt)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.to_int Start_2)))
   (Start_12 String (x (str.at Start StartInt_5)))
   (StartInt_1 Int (1 (str.indexof Start_5 Start StartInt_2) (str.to_int Start_3)))
   (Start_1 String (x (str.++ Start_13 Start_1) (str.substr Start_8 StartInt_7 StartInt_1) (str.replace Start_12 Start_15 Start_4) (str.from_int StartInt_4) (ite StartBool Start_11 Start_5)))
   (StartBool_3 Bool (true (str.<= Start_9 Start_7) (str.suffixof Start_6 Start_6) (= Start_7 Start_9) (= StartInt StartInt_3)))
   (Start_14 String ("" y "1" x (str.replace Start_10 Start_5 Start_4) (ite StartBool_5 Start_3 Start_4)))
   (StartBool_4 Bool (false true (not StartBool_4) (and StartBool_2 StartBool_1) (str.< Start_11 Start_11) (str.<= Start_4 Start_8) (str.suffixof Start_7 Start_2) (= Start_9 Start_1) (= StartInt_1 StartInt_4)))
   (Start_9 String ("1" (str.++ Start_2 Start_10) (str.at Start_9 StartInt_3) (str.substr Start_7 StartInt StartInt_1) (str.from_int StartInt_3) (ite StartBool_4 Start_5 Start_3)))
   (Start_2 String ("" "1" y "b" (str.substr Start_10 StartInt StartInt_2) (str.replace Start_6 Start_4 Start_9) (str.from_int StartInt_7)))
   (Start_15 String (x (str.++ Start_11 Start_5) (str.substr Start StartInt_6 StartInt) (str.replace Start_4 Start_11 Start_7) (str.from_int StartInt_7)))
   (Start_3 String ("b" x y "a" (str.++ Start_4 Start_5) (str.at Start_1 StartInt_1) (str.replace Start_6 Start_4 Start_1)))
   (Start_10 String ("b" (str.++ Start_7 Start_7) (str.replace Start_7 Start_3 Start_10) (ite StartBool_4 Start_12 Start_13)))
   (Start_13 String (y "1" (str.++ Start_9 Start_5) (str.replace Start_6 Start_3 Start_10) (ite StartBool_2 Start_2 Start_6)))
   (Start_6 String (y (str.++ Start_4 Start_4) (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 1 (str.len Start_7) (str.to_int Start_5)))
   (StartBool_2 Bool (false true (and StartBool_5 StartBool_2) (str.< Start_5 Start_9) (str.<= Start_13 Start_11) (str.prefixof Start Start_10) (str.suffixof Start_6 Start_3)))
   (Start_11 String ("a" "0" (str.++ Start_5 Start_10) (str.at Start_10 StartInt_3) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_1)))
   (StartBool_5 Bool (false (not StartBool_1) (str.<= Start_12 Start_13) (str.suffixof Start_8 Start_14) (= Start_5 Start_4) (= StartInt_4 StartInt_1)))
   (Start_7 String ("" y (str.++ Start_8 Start_10) (str.at Start_13 StartInt_4) (str.substr Start_11 StartInt_2 StartInt_3) (str.from_int StartInt_6) (ite StartBool_1 Start_6 Start_11)))
   (StartInt_6 Int (1 0 (str.to_int Start_10)))
   (StartInt_7 Int (0 (str.len Start_10) (str.indexof Start Start_9 StartInt_6)))
   (StartBool_1 Bool (true (str.<= Start_7 Start_13) (str.suffixof Start_10 Start_12) (= Start_2 Start_11) (<= StartInt_3 StartInt)))
   (StartInt_4 Int (1 0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace x "b" "0") 0)))

(check-synth)
