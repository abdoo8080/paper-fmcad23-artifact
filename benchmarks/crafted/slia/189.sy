(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (StartBool_4 Bool) (Start_18 String) (Start_15 String) (StartInt_4 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_14 String) (Start_8 String) (StartInt_7 Int) (StartInt_3 Int) (Start_10 String) (StartInt_6 Int) (Start_9 String) (Start_2 String) (Start_5 String) (Start_13 String) (Start_6 String) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_2 Int) (Start_16 String) (Start_3 String) (Start_11 String) (Start_12 String) (Start_4 String) (StartInt_1 Int) (Start_1 String) (Start_7 String) (StartInt_8 Int))
  ((Start String ("1" (str.++ Start Start_1) (str.at Start StartInt) (str.substr Start_2 StartInt StartInt) (str.from_int StartInt_1) (ite StartBool Start_3 Start_2)))
   (StartInt Int (0 1 (str.len Start) (str.to_int Start_1)))
   (StartBool Bool (true false (not StartBool_4) (str.< Start_6 Start_15) (str.prefixof Start_6 Start_12) (str.contains Start_2 Start_16) (= Start_16 Start_8) (= StartInt_2 StartInt_2) (<= StartInt_7 StartInt_6)))
   (Start_17 String ("a" x "0" "" "b" y "1" (str.++ Start Start_6) (str.at Start_18 StartInt_4) (str.substr Start_17 StartInt_8 StartInt_1)))
   (StartBool_4 Bool (false (not StartBool_3) (str.<= Start_1 Start_8) (str.prefixof Start_2 Start_3) (str.suffixof Start_17 Start_15) (str.contains Start_18 Start_1) (= Start_1 Start_13) (<= StartInt_6 StartInt_5)))
   (Start_18 String ("b" (str.replace Start_3 Start_13 Start_1) (ite StartBool_4 Start_16 Start_12)))
   (Start_15 String (x y "1" "0" (str.++ Start_13 Start_4) (str.at Start_15 StartInt_6) (str.replace Start_11 Start_15 Start_13) (ite StartBool Start_15 Start_11)))
   (StartInt_4 Int (0 1))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool_3) (str.< Start Start_3) (str.suffixof Start Start_2) (str.contains Start_10 Start_3) (= Start_11 Start) (= StartInt_4 StartInt_1)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_1 StartBool) (str.< Start_5 Start_3) (str.<= Start_5 Start_6) (str.contains Start_8 Start_5) (= StartInt_2 StartInt) (<= StartInt_3 StartInt_3)))
   (Start_14 String (x "1" (str.++ Start_12 Start) (str.at Start_10 StartInt_2) (str.from_int StartInt_6)))
   (Start_8 String (y "b" ""))
   (StartInt_7 Int (1 (str.to_int Start_9)))
   (StartInt_3 Int (0 1))
   (Start_10 String (y (str.at Start_6 StartInt_3) (str.replace Start_11 Start_7 Start_8) (str.from_int StartInt) (ite StartBool_2 Start_10 Start_4)))
   (StartInt_6 Int (0 (str.len Start_1)))
   (Start_9 String (y "b" (str.++ Start_4 Start_7) (str.substr Start StartInt_3 StartInt_1) (str.from_int StartInt_3) (ite StartBool_2 Start_8 Start_4)))
   (Start_2 String (x "" (str.++ Start_6 Start_12) (ite StartBool_1 Start_4 Start_6)))
   (Start_5 String ("b" "1" "0" x "a" (str.at Start_5 StartInt_2) (str.replace Start_6 Start_6 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_6)))
   (Start_13 String (x (str.++ Start_7 Start_1) (str.substr Start_9 StartInt_3 StartInt_2) (str.replace Start_9 Start_14 Start_13) (str.from_int StartInt_3)))
   (Start_6 String (x (str.at Start_4 StartInt)))
   (StartInt_5 Int (1 (str.len Start_9) (str.indexof Start_3 Start_6 StartInt_3) (str.to_int Start_3)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_1) (str.< Start_9 Start_6) (str.suffixof Start_8 Start_2) (= StartInt_1 StartInt) (<= StartInt StartInt_2)))
   (StartInt_2 Int (1 (str.indexof Start_7 Start_3 StartInt)))
   (Start_16 String ("b" (str.++ Start_12 Start_8) (str.at Start_4 StartInt_8) (ite StartBool_4 Start_1 Start_2)))
   (Start_3 String ("a" "1" x "0" "" (str.++ Start_2 Start_4) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_1 Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_5)))
   (Start_11 String ("1" "0" (str.++ Start_3 Start_5) (str.at Start StartInt_5) (str.substr Start_6 StartInt StartInt_2) (ite StartBool_3 Start Start_12)))
   (Start_12 String ("a" (str.++ Start Start) (str.replace Start_11 Start_1 Start_5) (str.from_int StartInt_1)))
   (Start_4 String ("b" (str.at Start_11 StartInt_1) (str.replace Start_11 Start_13 Start_10) (str.from_int StartInt_3) (ite StartBool_2 Start_13 Start_2)))
   (StartInt_1 Int (1))
   (Start_1 String ("" (str.substr Start_13 StartInt StartInt_3)))
   (Start_7 String ("b" (str.at Start_2 StartInt_1) (str.replace Start_2 Start_5 Start_3) (str.from_int StartInt_2)))
   (StartInt_8 Int (1 (str.len Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x y "b")))

(check-synth)
