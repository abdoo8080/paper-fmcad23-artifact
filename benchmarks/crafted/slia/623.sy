(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_15 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_11 String) (StartInt_5 Int) (Start_8 String) (Start_2 String) (Start_9 String) (Start_1 String) (Start_13 String) (StartInt_2 Int) (StartInt_3 Int) (Start_14 String) (StartInt_6 Int) (StartBool_1 Bool) (Start_7 String) (Start_12 String) (Start_3 String) (Start_4 String) (Start_10 String) (Start_6 String) (StartInt_1 Int) (StartInt_4 Int) (Start_5 String) (StartBool_3 Bool))
  ((Start String ("0" x "1" (str.substr Start StartInt_1 StartInt) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (0 1 (str.indexof Start_11 Start_12 StartInt_5) (str.to_int Start_13)))
   (StartBool Bool (false true (str.<= Start_14 Start_9) (str.prefixof Start_15 Start_11) (str.contains Start_7 Start_12) (= Start_4 Start_8) (<= StartInt_6 StartInt_7)))
   (StartInt_8 Int (0 (str.to_int Start_10)))
   (Start_15 String ("a" "b" (str.at Start_11 StartInt_3) (str.substr Start_1 StartInt_5 StartInt_8) (str.from_int StartInt_6)))
   (StartInt_7 Int (0 (str.len Start_7) (str.indexof Start_5 Start_15 StartInt_5) (str.to_int Start_11)))
   (StartBool_2 Bool (false (not StartBool_2) (str.< Start_1 Start_9) (str.<= Start_6 Start_7) (str.prefixof Start_9 Start) (<= StartInt_4 StartInt_2)))
   (Start_11 String ("" (str.at Start_9 StartInt_3) (str.substr Start StartInt_5 StartInt_3) (ite StartBool_1 Start Start_8)))
   (StartInt_5 Int (1 0 (str.len Start_12) (str.indexof Start_1 Start_13 StartInt_5) (str.to_int Start_9)))
   (Start_8 String ("0" (str.++ Start_2 Start_6) (str.substr Start_9 StartInt_2 StartInt_2)))
   (Start_2 String ("a" (str.++ Start_10 Start_5) (str.at Start_3 StartInt_5)))
   (Start_9 String ("0" "" (str.++ Start_1 Start_5) (str.at Start_4 StartInt) (ite StartBool_1 Start_10 Start_5)))
   (Start_1 String ("0" "" (str.++ Start_2 Start_3) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_2 Start_2 Start_1)))
   (Start_13 String (x (str.from_int StartInt_3)))
   (StartInt_2 Int (0 (str.len Start_3) (str.to_int Start_3)))
   (StartInt_3 Int (1 (str.len Start_3)))
   (Start_14 String ("0" (str.at Start_15 StartInt_6)))
   (StartInt_6 Int (0 (str.len Start) (str.to_int Start_10)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_3) (str.< Start_4 Start_5) (str.prefixof Start_5 Start_1) (str.suffixof Start_2 Start_6) (str.contains Start_7 Start_4) (= Start_3 Start_3)))
   (Start_7 String ("0" "b" "" (str.at Start_1 StartInt) (str.from_int StartInt_2)))
   (Start_12 String ("" "a" (str.at Start_6 StartInt_6) (str.substr Start_7 StartInt_2 StartInt_5) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_4)))
   (Start_3 String ("b" (str.substr Start_4 StartInt_3 StartInt_3) (str.from_int StartInt_3) (ite StartBool Start_3 Start_3)))
   (Start_4 String ("b" (str.at Start_4 StartInt) (str.substr Start StartInt_4 StartInt_1) (ite StartBool_1 Start Start)))
   (Start_10 String ("b" (str.substr Start_7 StartInt_5 StartInt) (str.replace Start_9 Start_3 Start_11) (str.from_int StartInt_6) (ite StartBool Start_1 Start_8)))
   (Start_6 String ("0" x "a" y (str.at Start StartInt_4) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_5)))
   (StartInt_1 Int (0 1 (str.len Start_7) (str.to_int Start_8)))
   (StartInt_4 Int (0))
   (Start_5 String (x y (str.++ Start_6 Start_5) (str.replace Start_4 Start_2 Start_2) (str.from_int StartInt_2)))
   (StartBool_3 Bool (false (str.contains Start_3 Start) (= Start_8 Start_4) (= StartInt_4 StartInt) (<= StartInt StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace (str.from_int (str.len x)) (str.substr "a" (str.to_int x) 1) "0")))))

(check-synth)
