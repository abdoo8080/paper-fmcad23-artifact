(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartBool_1 Bool) (Start_5 String) (StartInt_9 Int) (StartBool_2 Bool) (Start_9 String) (StartInt_7 Int) (Start_11 String) (StartInt_8 Int) (Start_6 String) (StartInt_1 Int) (Start_4 String) (Start_3 String) (Start_1 String) (Start_8 String) (StartInt_4 Int) (Start_7 String) (StartInt_2 Int) (Start_10 String) (StartInt_5 Int) (StartInt_6 Int) (Start_12 String) (Start_2 String) (StartInt_3 Int))
  ((Start String (x (str.from_int StartInt_1)))
   (StartInt Int (0 (str.to_int Start_4)))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (str.< Start_8 Start_2) (str.prefixof Start_1 Start_1) (str.suffixof Start_1 Start_3) (= Start_6 Start_7) (= StartInt_8 StartInt_1) (<= StartInt_7 StartInt_7)))
   (Start_13 String ("" (str.++ Start_8 Start_10) (str.substr Start_8 StartInt_8 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_13 Start_4)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (str.< Start_11 Start_1) (str.<= Start_11 Start_8) (str.prefixof Start_3 Start_12) (str.suffixof Start_6 Start_4) (= Start_4 Start_10) (<= StartInt_9 StartInt_5)))
   (Start_5 String (y (str.at Start_6 StartInt_4) (str.replace Start_6 Start_10 Start_9)))
   (StartInt_9 Int (0))
   (StartBool_2 Bool (false true (str.< Start_10 Start) (str.<= Start_13 Start_9) (str.suffixof Start_7 Start_5) (str.contains Start Start_13) (<= StartInt_4 StartInt_9)))
   (Start_9 String ("a" x (str.substr Start_4 StartInt_9 StartInt_1) (str.from_int StartInt_5)))
   (StartInt_7 Int (0 1 (str.len Start_2) (str.indexof Start_4 Start_4 StartInt_7) (str.to_int Start)))
   (Start_11 String ("" x "b" (str.++ Start_12 Start_6) (str.substr Start_4 StartInt_7 StartInt_8) (str.replace Start_2 Start_3 Start_4) (ite StartBool_2 Start_3 Start_3)))
   (StartInt_8 Int (0 (str.len Start) (str.indexof Start_3 Start_1 StartInt_5)))
   (Start_6 String ("a" "0" "1" x (str.++ Start_2 Start_1) (str.substr Start_6 StartInt StartInt_6)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start_1)))
   (Start_4 String ("0" "b" (str.++ Start_2 Start_5) (str.substr Start_1 StartInt_3 StartInt_4) (ite StartBool Start Start_1)))
   (Start_3 String ("1" "a" "0" (str.++ Start_1 Start_2) (str.from_int StartInt)))
   (Start_1 String ("1" y "a" (str.++ Start_1 Start_4) (str.from_int StartInt_2)))
   (Start_8 String ("a" (str.++ Start_5 Start_4) (str.at Start_7 StartInt) (str.replace Start_9 Start_1 Start_8) (str.from_int StartInt_8)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start_5 Start StartInt_5) (str.to_int Start)))
   (Start_7 String ("a" (str.++ Start_1 Start_6) (str.at Start_7 StartInt_5) (str.replace Start_6 Start_3 Start_5) (ite StartBool Start_5 Start_3)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_1 Start_4 StartInt_2)))
   (Start_10 String ("0" "1" (str.++ Start_3 Start_10) (str.from_int StartInt_1) (ite StartBool Start_2 Start_1)))
   (StartInt_5 Int (1 0 (str.len Start_7)))
   (StartInt_6 Int (1 0 (str.to_int Start_2)))
   (Start_12 String ("a" (str.at Start_11 StartInt_7) (str.substr Start_9 StartInt_1 StartInt_3) (str.replace Start_10 Start_6 Start_4) (str.from_int StartInt_3)))
   (Start_2 String (x (str.at Start_3 StartInt)))
   (StartInt_3 Int (1 0 (str.indexof Start_7 Start_8 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof x "0") "" "a")))

(check-synth)
