(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_11 String) (StartInt_7 Int) (Start_12 String) (StartInt_5 Int) (StartInt_6 Int) (Start_4 String) (Start_8 String) (StartInt_2 Int) (Start_13 String) (StartInt_1 Int) (Start_10 String) (Start_7 String) (Start_3 String) (Start_1 String) (Start_6 String) (Start_5 String) (StartInt_4 Int) (StartInt_3 Int) (Start_2 String) (StartBool_1 Bool))
  ((Start String ("a" (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 0 (str.indexof Start Start_6 StartInt_3) (str.to_int Start_2)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool_1) (str.prefixof Start_7 Start_8) (str.suffixof Start_6 Start_4) (= Start Start_8) (= StartInt_3 StartInt_5) (<= StartInt StartInt_5)))
   (Start_9 String ("b" (str.++ Start_13 Start_12) (str.at Start_13 StartInt_7) (str.substr Start_5 StartInt_6 StartInt_6) (str.replace Start_2 Start_3 Start_10) (str.from_int StartInt_5)))
   (Start_11 String ("1" "a" "0" (str.++ Start_1 Start_1) (str.substr Start_9 StartInt_6 StartInt_7) (ite StartBool_1 Start_12 Start_8)))
   (StartInt_7 Int (1 0 (str.to_int Start)))
   (Start_12 String ("1" "a" (str.++ Start_7 Start_10) (str.at Start_1 StartInt_1) (str.substr Start_11 StartInt_4 StartInt_5) (str.replace Start_10 Start_11 Start_7) (ite StartBool_1 Start Start_10)))
   (StartInt_5 Int (0))
   (StartInt_6 Int (0 1 (str.len Start_4) (str.to_int Start_11)))
   (Start_4 String ("0" (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start Start_3 Start) (str.from_int StartInt)))
   (Start_8 String ("a" "" (str.++ Start_3 Start_9) (str.substr Start_3 StartInt_6 StartInt_7) (str.replace Start_1 Start_10 Start_2) (str.from_int StartInt_7)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_4 Start StartInt_2)))
   (Start_13 String ("0" y "a" "b" (str.++ Start_9 Start_6) (str.at Start_12 StartInt_7) (str.substr Start_13 StartInt_4 StartInt_1) (str.replace Start_10 Start_4 Start_13) (str.from_int StartInt_2)))
   (StartInt_1 Int (1))
   (Start_10 String ("" (str.substr Start_6 StartInt_3 StartInt_5) (str.replace Start_3 Start_3 Start_1)))
   (Start_7 String ("0" (str.replace Start_6 Start Start_7) (ite StartBool_1 Start_6 Start_6)))
   (Start_3 String ("b" x "1" (str.at Start_2 StartInt_3) (str.replace Start Start_1 Start_5) (ite StartBool_1 Start_6 Start)))
   (Start_1 String ("" "a" (str.++ Start_2 Start_3) (str.at Start_3 StartInt_1) (str.replace Start_1 Start Start_4) (str.from_int StartInt_1)))
   (Start_6 String ("" y (str.at Start_1 StartInt_1) (str.replace Start_3 Start_6 Start_1) (str.from_int StartInt_4)))
   (Start_5 String ("1" (str.at Start_6 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.indexof Start_3 Start_7 StartInt_4) (str.to_int Start_6)))
   (StartInt_3 Int (1 (str.indexof Start_4 Start_3 StartInt_2)))
   (Start_2 String (y (str.++ Start_5 Start_4) (str.at Start_7 StartInt_3) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_5 Start_5 Start_6)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool) (str.< Start_7 Start_7) (str.contains Start_5 Start_2) (= Start Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.at (str.++ y "0") 0)))))

(check-synth)
