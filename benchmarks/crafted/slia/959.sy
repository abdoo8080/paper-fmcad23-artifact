(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_1 String) (StartInt_1 Int) (StartInt_3 Int) (Start_10 String) (StartInt_7 Int) (Start_9 String) (Start_8 String) (Start_6 String) (Start_7 String) (Start_11 String) (Start_3 String) (Start_4 String) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_3 Bool) (Start_5 String) (Start_2 String) (StartInt_4 Int) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_6 Int))
  ((Start String ("" (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_2) (str.from_int StartInt) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 (str.indexof Start_5 Start_3 StartInt_3)))
   (StartBool Bool (true (str.< Start_1 Start_3) (str.<= Start Start_11) (str.prefixof Start_1 Start_5) (str.contains Start_11 Start_11) (= StartInt_8 StartInt_5)))
   (StartInt_8 Int (1 0 (str.len Start_1) (str.indexof Start_8 Start_1 StartInt_7) (str.to_int Start_4)))
   (Start_1 String ("0" (str.substr Start StartInt_3 StartInt_6) (str.from_int StartInt) (ite StartBool Start Start_8)))
   (StartInt_1 Int (0 (str.len Start_5) (str.to_int Start)))
   (StartInt_3 Int (0 (str.len Start_7) (str.indexof Start_4 Start_2 StartInt_3)))
   (Start_10 String ("0" (str.from_int StartInt_2)))
   (StartInt_7 Int (0 1 (str.len Start_5) (str.indexof Start_9 Start_10 StartInt) (str.to_int Start_5)))
   (Start_9 String (y (str.++ Start_1 Start_8) (str.from_int StartInt_5)))
   (Start_8 String ("b" (str.++ Start_1 Start_6) (str.at Start_7 StartInt_7) (str.replace Start_8 Start_6 Start_7) (str.from_int StartInt) (ite StartBool Start_2 Start_9)))
   (Start_6 String ("b" (str.at Start_7 StartInt_5) (str.substr Start_6 StartInt_1 StartInt_4) (str.replace Start_5 Start_5 Start_4) (str.from_int StartInt_1) (ite StartBool Start_3 Start_8)))
   (Start_7 String ("1" (str.++ Start_7 Start_7) (str.from_int StartInt_3) (ite StartBool_1 Start_5 Start_3)))
   (Start_11 String ("a" "" "0" (str.at Start_10 StartInt_5) (str.substr Start_6 StartInt_4 StartInt_6)))
   (Start_3 String ("a" "" (str.at Start_3 StartInt) (str.replace Start_3 Start_4 Start_4) (str.from_int StartInt)))
   (Start_4 String ("1" "" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_2) (str.from_int StartInt)))
   (StartBool_1 Bool (false (not StartBool_2) (str.<= Start_6 Start_4) (str.contains Start_4 Start_5) (= Start_6 Start_5) (= StartInt_5 StartInt_3) (<= StartInt_5 StartInt_4)))
   (StartInt_2 Int (1 (str.indexof Start_3 Start StartInt) (str.to_int Start_5)))
   (StartBool_3 Bool (false (str.< Start_6 Start_5) (str.<= Start_1 Start_2) (str.prefixof Start Start_1) (= StartInt_6 StartInt_2) (<= StartInt_4 StartInt_4)))
   (Start_5 String ("b" x "1" (str.++ Start_5 Start_1) (str.substr Start_4 StartInt_3 StartInt_4) (str.from_int StartInt_2)))
   (Start_2 String ("0" y (ite StartBool Start_3 Start)))
   (StartInt_4 Int (1 0 (str.len Start_6) (str.to_int Start_7)))
   (StartInt_5 Int (1 0 (str.to_int Start_3)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool_3) (str.<= Start_5 Start_5) (str.suffixof Start Start_5) (str.contains Start_2 Start_2)))
   (StartInt_6 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "b" x) "1" "b")))

(check-synth)
