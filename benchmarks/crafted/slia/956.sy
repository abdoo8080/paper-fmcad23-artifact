(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (StartBool_3 Bool) (Start_6 String) (Start_9 String) (Start_8 String) (Start_7 String) (Start_1 String) (StartInt_1 Int) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int) (Start_4 String) (Start_2 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_5 String))
  ((Start String ("" (str.replace Start Start Start) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start) (str.indexof Start Start_1 StartInt) (str.to_int Start)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.< Start Start_4) (str.prefixof Start_2 Start_1) (str.contains Start Start_3) (= Start_5 Start_3) (= StartInt_1 StartInt_3) (<= StartInt_4 StartInt)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.suffixof Start_3 Start_7) (str.contains Start_3 Start_7) (= StartInt StartInt_4)))
   (StartBool_3 Bool (true false (str.<= Start_3 Start_3) (str.suffixof Start_3 Start_4) (<= StartInt_1 StartInt_1)))
   (Start_6 String (x "a" (str.++ Start_8 Start) (str.replace Start_2 Start_1 Start_4) (str.from_int StartInt_3) (ite StartBool_3 Start_7 Start_8)))
   (Start_9 String ("b" (str.at Start_6 StartInt_2) (str.replace Start_7 Start_5 Start_6)))
   (Start_8 String ("1" (str.++ Start_5 Start_4) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt_2)))
   (Start_7 String ("1" (str.++ Start_9 Start) (str.from_int StartInt)))
   (Start_1 String ("" "1" "0" (str.++ Start_2 Start_1) (str.from_int StartInt_1)))
   (StartInt_1 Int (1 (str.to_int Start_3)))
   (Start_3 String ("b" (str.at Start_2 StartInt) (str.substr Start StartInt_1 StartInt_2) (ite StartBool Start_1 Start_1)))
   (StartInt_2 Int (1 (str.indexof Start_4 Start_3 StartInt_1)))
   (StartInt_4 Int (0 (str.len Start_5)))
   (Start_4 String ("" x "a"))
   (Start_2 String ("1"))
   (StartBool_2 Bool (true (and StartBool StartBool) (str.<= Start_3 Start) (str.prefixof Start_1 Start_6) (str.suffixof Start_7 Start_8) (str.contains Start_7 Start_2) (= Start_6 Start_4) (<= StartInt_1 StartInt)))
   (StartInt_3 Int (0 (str.len Start_1) (str.indexof Start_2 Start_4 StartInt_1)))
   (Start_5 String (y "1" (str.++ Start Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.replace "0" y "1") "a")))

(check-synth)
