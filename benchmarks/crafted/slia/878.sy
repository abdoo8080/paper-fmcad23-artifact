(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_7 Int) (Start_2 String) (StartInt_6 Int) (Start_6 String) (Start_3 String) (StartInt_3 Int) (StartInt_4 Int) (StartBool_4 Bool) (StartInt_5 Int) (Start_4 String) (Start_7 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_9 String) (Start_8 String) (Start_1 String) (Start_5 String) (Start_10 String) (Start_12 String) (Start_11 String) (StartBool_2 Bool))
  ((Start String (y "b" "1" (str.at Start StartInt_1) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.indexof Start_10 Start StartInt_6)))
   (StartBool Bool (true (not StartBool_3) (and StartBool StartBool_4) (str.<= Start_1 Start_2) (= Start_4 Start) (<= StartInt_7 StartInt_7)))
   (StartBool_3 Bool (true (not StartBool_4) (str.< Start Start_10) (str.contains Start_2 Start_9) (= StartInt StartInt_5) (<= StartInt_3 StartInt_4)))
   (StartInt_1 Int (1 (str.len Start_8) (str.to_int Start_9)))
   (StartInt_7 Int (1 0 (str.to_int Start_6)))
   (Start_2 String ("" "b" "a" (str.++ Start_10 Start_7) (str.at Start_4 StartInt_6) (str.substr Start_1 StartInt_2 StartInt_2)))
   (StartInt_6 Int (0 1 (str.len Start) (str.indexof Start_7 Start_12 StartInt_1)))
   (Start_6 String ("a" x "b" (str.replace Start_9 Start_1 Start_5) (str.from_int StartInt_3)))
   (Start_3 String ("1" (str.++ Start_2 Start_2) (str.at Start_3 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_3) (ite StartBool Start_1 Start_1)))
   (StartInt_3 Int (1 (str.len Start_2) (str.to_int Start_4)))
   (StartInt_4 Int (0 1 (str.len Start_3)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_1) (str.< Start_4 Start_6) (str.<= Start_1 Start_3) (str.contains Start_3 Start_5) (= Start_7 Start_9) (= StartInt_7 StartInt_1)))
   (StartInt_5 Int (1 0 (str.indexof Start_7 Start_3 StartInt_4) (str.to_int Start_2)))
   (Start_4 String (x (str.++ Start_4 Start_1) (str.at Start_5 StartInt_3) (str.substr Start_6 StartInt_4 StartInt_3) (ite StartBool_1 Start_7 Start_5)))
   (Start_7 String ("" (str.at Start_5 StartInt_3) (str.replace Start_5 Start_7 Start)))
   (StartInt_2 Int (0 (str.to_int Start_12)))
   (StartBool_1 Bool (false (str.< Start_8 Start_9) (str.<= Start_9 Start_8) (str.prefixof Start_1 Start_6) (str.suffixof Start_7 Start_4) (str.contains Start_8 Start_8) (= Start_2 Start_1) (= StartInt StartInt) (<= StartInt_1 StartInt_1)))
   (Start_9 String ("0" "a" (str.at Start_8 StartInt_1) (str.substr Start_8 StartInt_2 StartInt_1) (str.replace Start_3 Start_4 Start_2)))
   (Start_8 String ("a" "1" "b" y "0" x "" (str.++ Start_10 Start_3) (str.at Start_7 StartInt_4) (str.substr Start_4 StartInt_4 StartInt_5) (ite StartBool_1 Start Start_10)))
   (Start_1 String ("a" (str.at Start_7 StartInt_2) (str.substr Start_3 StartInt_1 StartInt_7) (ite StartBool_2 Start_3 Start_6)))
   (Start_5 String (x "a" "b" "1" (str.++ Start_6 Start_7) (str.at Start_8 StartInt_6) (str.substr Start_5 StartInt_6 StartInt) (str.replace Start_8 Start_8 Start_2) (ite StartBool_1 Start_8 Start_11)))
   (Start_10 String ("b" x (str.at Start_6 StartInt_4) (str.replace Start_5 Start_5 Start_6) (ite StartBool_2 Start_11 Start)))
   (Start_12 String ("" (str.replace Start_9 Start Start_2) (str.from_int StartInt) (ite StartBool_1 Start_6 Start_8)))
   (Start_11 String ("0" "1" (str.at Start_8 StartInt_1) (str.substr Start_9 StartInt_3 StartInt_2) (ite StartBool_1 Start_7 Start_5)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.prefixof Start_3 Start) (str.contains Start_6 Start_4) (= Start_7 Start_6) (<= StartInt_2 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (ite (str.<= x "b") y "0")))))

(check-synth)
