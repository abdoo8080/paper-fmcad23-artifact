(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_1 String) (StartInt_6 Int) (StartBool_5 Bool) (Start_12 String) (Start_10 String) (Start_11 String) (Start_9 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_4 String) (StartInt_1 Int) (Start_7 String) (Start_2 String) (StartInt_2 Int) (Start_5 String) (StartBool_2 Bool) (StartInt_4 Int) (StartBool_4 Bool) (StartInt_3 Int) (StartBool_3 Bool) (Start_8 String) (Start_3 String) (Start_6 String))
  ((Start String (y "a" (str.++ Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (0 1 (str.indexof Start_8 Start_6 StartInt)))
   (StartBool Bool (true (not StartBool) (and StartBool StartBool_2) (str.< Start_3 Start_12) (str.contains Start_5 Start_6) (= StartInt_2 StartInt_4)))
   (StartInt_7 Int (0 1 (str.len Start_8) (str.to_int Start_11)))
   (Start_1 String ("b" (str.at Start StartInt_2) (str.substr Start_12 StartInt_7 StartInt_4) (str.replace Start_2 Start_7 Start_4)))
   (StartInt_6 Int (0 1))
   (StartBool_5 Bool (true (not StartBool_2) (str.< Start Start_11) (str.contains Start_5 Start_3) (= Start_2 Start_12)))
   (Start_12 String (x "1" (str.++ Start_5 Start_11) (str.at Start_2 StartInt_6) (str.replace Start_3 Start_8 Start_12) (ite StartBool_5 Start_5 Start_9)))
   (Start_10 String ("1" y "0" (str.substr Start_1 StartInt_6 StartInt_3) (str.replace Start_12 Start_9 Start_9) (str.from_int StartInt_4)))
   (Start_11 String ("0" (str.++ Start_9 Start_10) (ite StartBool_3 Start_9 Start_7)))
   (Start_9 String ("1" (str.at Start_3 StartInt_1) (str.substr Start_7 StartInt_6 StartInt_2) (str.replace Start_8 Start_10 Start) (ite StartBool Start_11 Start_4)))
   (StartBool_1 Bool (true false (str.<= Start_3 Start_2) (str.contains Start Start_1) (= StartInt_4 StartInt_3) (<= StartInt_2 StartInt_5)))
   (StartInt_5 Int (0 1 (str.indexof Start_9 Start_1 StartInt_3)))
   (Start_4 String ("a"))
   (StartInt_1 Int (1 0 (str.len Start_6) (str.indexof Start_11 Start_11 StartInt_1)))
   (Start_7 String (y "a" "" "0" (str.++ Start_8 Start_1) (str.from_int StartInt_2) (ite StartBool_4 Start_4 Start)))
   (Start_2 String ("b" "a" "1" (str.++ Start_2 Start) (str.at Start StartInt) (str.substr Start_2 StartInt_2 StartInt_2) (str.from_int StartInt)))
   (StartInt_2 Int (1 (str.len Start_4) (str.to_int Start_5)))
   (Start_5 String ("1" "" y "a" (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start_3 Start Start_6) (str.from_int StartInt_1) (ite StartBool_2 Start Start_4)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_1 StartBool_1) (str.< Start_4 Start_1) (str.<= Start_2 Start_3) (str.prefixof Start Start_6) (str.suffixof Start_7 Start_7) (str.contains Start Start_6) (= StartInt_1 StartInt)))
   (StartInt_4 Int (0 (str.to_int Start_7)))
   (StartBool_4 Bool (true false (not StartBool_2) (str.< Start_3 Start_4) (str.<= Start_8 Start_5) (str.contains Start_6 Start_5) (= StartInt_2 StartInt_3)))
   (StartInt_3 Int (1))
   (StartBool_3 Bool (true (not StartBool_3) (str.< Start_7 Start_1) (= Start Start_5)))
   (Start_8 String ("b" (str.++ Start_6 Start_4) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_4 Start_3 Start_4) (str.from_int StartInt_4)))
   (Start_3 String ("0" (str.++ Start_2 Start_3) (str.from_int StartInt_1)))
   (Start_6 String ("1" (str.++ Start Start_8) (str.at Start_1 StartInt_4) (str.replace Start_5 Start_4 Start_7) (str.from_int StartInt_2) (ite StartBool_4 Start_6 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y "a") 0)))

(check-synth)
