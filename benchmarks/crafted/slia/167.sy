(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_7 String) (StartBool_3 Bool) (StartInt_6 Int) (StartInt_1 Int) (Start_10 String) (Start_9 String) (StartInt_4 Int) (StartInt_3 Int) (Start_8 String) (StartInt_2 Int) (Start_2 String) (Start_1 String) (Start_12 String) (Start_4 String) (Start_5 String) (StartInt_5 Int) (StartInt_8 Int) (Start_3 String) (Start_11 String) (Start_6 String) (StartBool_2 Bool) (StartBool_1 Bool))
  ((Start String (x "" "b" y (str.at Start StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start Start Start) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.len Start) (str.indexof Start Start_1 StartInt)))
   (StartBool Bool (true false (not StartBool) (str.prefixof Start_2 Start_3) (str.suffixof Start_7 Start_1) (= Start_7 Start_11)))
   (StartInt_7 Int (0 1 (str.len Start_10) (str.to_int Start_7)))
   (Start_7 String ("b" "0" y x "1" (str.++ Start_8 Start_5) (ite StartBool Start_9 Start_9)))
   (StartBool_3 Bool (false true (str.< Start_5 Start_5) (str.<= Start_8 Start_5) (str.prefixof Start_1 Start_8) (= Start_9 Start_12) (= StartInt_6 StartInt_6)))
   (StartInt_6 Int (1 (str.indexof Start_1 Start_6 StartInt_7) (str.to_int Start_7)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start Start StartInt_2) (str.to_int Start)))
   (Start_10 String ("a" (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_8 Start_8 Start_1)))
   (Start_9 String ("0" (str.++ Start_5 Start_7) (str.at Start_2 StartInt_4) (str.substr Start_7 StartInt_2 StartInt_7) (str.replace Start_1 Start_5 Start_7)))
   (StartInt_4 Int (1 0 (str.indexof Start_5 Start StartInt_5)))
   (StartInt_3 Int (1 0 (str.len Start_4)))
   (Start_8 String (x (str.++ Start_7 Start_2) (str.at Start_9 StartInt_3) (str.replace Start_8 Start_6 Start_7) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 1 (str.to_int Start)))
   (Start_2 String ("0" (str.substr Start_6 StartInt_1 StartInt) (str.replace Start_9 Start_6 Start_2)))
   (Start_1 String (x (str.++ Start_2 Start_3) (ite StartBool_1 Start_4 Start_2)))
   (Start_12 String (x "a" "1" y "0" (str.substr Start_3 StartInt StartInt_2) (str.from_int StartInt_8)))
   (Start_4 String (x "" "0" "b" "1" (str.at Start_1 StartInt_3) (str.substr Start_4 StartInt StartInt_3) (ite StartBool Start_5 Start_3)))
   (Start_5 String ("a" (str.at Start_3 StartInt_4) (str.replace Start_2 Start_5 Start_4) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 (str.indexof Start_1 Start_6 StartInt_5) (str.to_int Start_3)))
   (StartInt_8 Int (0 (str.to_int Start_1)))
   (Start_3 String (y "b" (str.at Start_4 StartInt_6)))
   (Start_11 String (x (str.++ Start_8 Start_7) (str.at Start_4 StartInt_8) (ite StartBool_2 Start_4 Start_8)))
   (Start_6 String ("0" y "b" (str.at Start_6 StartInt_3)))
   (StartBool_2 Bool (false true (not StartBool_3) (str.<= Start_11 Start_1) (str.prefixof Start Start_7) (str.suffixof Start_6 Start_2) (= Start_1 Start_6) (= StartInt_2 StartInt)))
   (StartBool_1 Bool (false true (str.<= Start_2 Start_5) (str.prefixof Start_2 Start_6) (str.suffixof Start_4 Start_3) (= Start_5 Start_4) (= StartInt_2 StartInt) (<= StartInt_5 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "1" x "1") x)))

(check-synth)
