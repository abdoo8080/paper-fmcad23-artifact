(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (Start_3 String) (StartInt_6 Int) (Start_6 String) (StartInt_2 Int) (Start_4 String) (Start_2 String) (StartInt_3 Int) (Start_5 String) (StartBool_3 Bool) (StartBool_2 Bool) (StartInt_5 Int) (Start_8 String) (StartBool_1 Bool) (Start_7 String) (StartInt_4 Int) (Start_10 String) (Start_9 String))
  ((Start String (y "a" x "b" "" (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_2 Start_1)))
   (StartInt Int (0 (str.len Start_6) (str.to_int Start_7)))
   (StartBool Bool (true false (and StartBool_3 StartBool_2)))
   (Start_1 String ("a" "b" (str.replace Start_2 Start_6 Start_9)))
   (StartInt_1 Int (0 1 (str.to_int Start_10)))
   (Start_3 String ("1" y "b" (str.++ Start_1 Start_5) (str.from_int StartInt_1) (ite StartBool Start_7 Start_10)))
   (StartInt_6 Int (1 (str.to_int Start_7)))
   (Start_6 String ("a" "" (str.++ Start_3 Start_10) (str.substr Start_3 StartInt_5 StartInt_5) (str.replace Start_5 Start_6 Start_8) (str.from_int StartInt_6)))
   (StartInt_2 Int (0 1 (str.to_int Start_4)))
   (Start_4 String (x "" (str.++ Start_5 Start_6) (str.substr Start_6 StartInt_2 StartInt) (ite StartBool_1 Start_1 Start_1)))
   (Start_2 String ("" "a" "1" x (str.++ Start_1 Start_2) (str.at Start_2 StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt) (ite StartBool Start_4 Start_5)))
   (StartInt_3 Int (0))
   (Start_5 String ("1" "b" y (str.++ Start_5 Start) (str.at Start_4 StartInt_1) (ite StartBool Start_4 Start_2)))
   (StartBool_3 Bool (false (str.prefixof Start_9 Start) (str.suffixof Start_9 Start) (= Start_5 Start_10) (<= StartInt_4 StartInt_2)))
   (StartBool_2 Bool (true (not StartBool_2) (str.< Start_7 Start_5) (str.prefixof Start_3 Start_8) (<= StartInt StartInt_2)))
   (StartInt_5 Int (1 0 (str.len Start_4)))
   (Start_8 String ("a" "0" x (str.++ Start Start_5) (str.at Start_3 StartInt_1)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (str.<= Start Start) (= StartInt_2 StartInt_2)))
   (Start_7 String (y "b" (str.substr Start_3 StartInt_3 StartInt) (str.replace Start_3 Start_6 Start) (str.from_int StartInt) (ite StartBool_3 Start_3 Start_4)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_10 StartInt)))
   (Start_10 String ("0" (str.at Start_6 StartInt) (str.substr Start_4 StartInt StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (Start_9 String ("b" (str.++ Start_4 Start_1) (str.at Start_2 StartInt_3) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace "" (str.at x (str.len y)) y)))))

(check-synth)
