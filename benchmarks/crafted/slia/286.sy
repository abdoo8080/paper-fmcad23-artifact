(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_7 Int) (Start_9 String) (Start_8 String) (StartInt_5 Int) (Start_2 String) (Start_1 String) (Start_4 String) (StartInt_4 Int) (StartInt_2 Int) (Start_7 String) (StartInt_3 Int) (Start_5 String) (Start_6 String) (StartInt_1 Int) (Start_3 String) (StartBool_1 Bool))
  ((Start String (x (str.++ Start Start_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_1)))
   (StartInt Int (1))
   (StartBool Bool (true (str.< Start_9 Start_6) (str.prefixof Start_6 Start_9) (= Start_5 Start_8) (<= StartInt_6 StartInt_6)))
   (StartInt_6 Int (0 (str.len Start_6) (str.to_int Start_7)))
   (StartInt_7 Int (1 0 (str.len Start_8) (str.indexof Start_8 Start_9 StartInt)))
   (Start_9 String ("" "b" (str.++ Start_1 Start_2) (str.substr Start_8 StartInt_2 StartInt_3) (str.replace Start_2 Start_7 Start) (str.from_int StartInt_2)))
   (Start_8 String (x "0" (str.++ Start_3 Start_8) (ite StartBool Start_7 Start_9)))
   (StartInt_5 Int (1 (str.to_int Start_1)))
   (Start_2 String ("" "0" (str.++ Start_6 Start_9) (str.at Start_4 StartInt_6) (str.replace Start_7 Start_4 Start_1) (str.from_int StartInt_7)))
   (Start_1 String ("0" (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_3 Start_2 Start_3) (ite StartBool Start_2 Start)))
   (Start_4 String ("b" "1" (ite StartBool Start_6 Start_7)))
   (StartInt_4 Int (0 1))
   (StartInt_2 Int (1))
   (Start_7 String ("" y (str.++ Start Start_2) (str.replace Start_3 Start Start_4) (str.from_int StartInt_5)))
   (StartInt_3 Int (0 (str.len Start_3) (str.indexof Start_2 Start_1 StartInt_3)))
   (Start_5 String (y "b" "a" (str.at Start_4 StartInt) (str.from_int StartInt_4) (ite StartBool Start Start_3)))
   (Start_6 String (x (str.substr Start_3 StartInt_5 StartInt) (str.replace Start_4 Start_7 Start_8)))
   (StartInt_1 Int (0 1 (str.indexof Start_1 Start_1 StartInt_2)))
   (Start_3 String ("0" x "1" (str.++ Start_4 Start_2) (str.at Start StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_5)))
   (StartBool_1 Bool (false (str.<= Start_4 Start) (str.prefixof Start_5 Start) (str.suffixof Start_5 Start_3) (= StartInt_5 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "1" "a") "" "1")))

(check-synth)
