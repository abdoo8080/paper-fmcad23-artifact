(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartInt_3 Int) (Start_4 String) (Start_1 String) (StartInt_1 Int) (Start_6 String) (StartInt_2 Int) (Start_3 String) (Start_5 String) (Start_7 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_2 String) (StartBool_1 Bool))
  ((Start String (x "a" (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start) (str.to_int Start_1)))
   (StartBool Bool (true false (str.< Start_5 Start_4) (= Start_4 Start)))
   (StartInt_5 Int (0 (str.to_int Start_6)))
   (StartInt_3 Int (1 0 (str.len Start_2)))
   (Start_4 String ("b" (str.replace Start_3 Start_3 Start_1) (str.from_int StartInt_2) (ite StartBool Start_3 Start)))
   (Start_1 String ("b" "" "0" "a" (str.at Start StartInt) (str.replace Start_2 Start_3 Start_4) (str.from_int StartInt_1)))
   (StartInt_1 Int (1 0 (str.len Start_1)))
   (Start_6 String (y (str.++ Start_4 Start_7) (str.replace Start Start_1 Start_5) (ite StartBool_1 Start_7 Start_4)))
   (StartInt_2 Int (1 (str.len Start)))
   (Start_3 String ("" (str.++ Start_3 Start_4) (str.at Start_4 StartInt_3) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_5)))
   (Start_5 String ("" "0" (str.++ Start_4 Start_3) (str.at Start_6 StartInt_3) (str.substr Start_2 StartInt_4 StartInt) (str.replace Start_3 Start_1 Start_1)))
   (Start_7 String (x))
   (StartInt_4 Int (1))
   (StartBool_2 Bool (true (and StartBool_2 StartBool) (str.contains Start Start_3) (= StartInt_4 StartInt) (<= StartInt_1 StartInt_3)))
   (Start_2 String ("0" (str.at Start StartInt_5)))
   (StartBool_1 Bool (false (not StartBool_2) (str.<= Start_2 Start_7) (= StartInt_3 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.substr x (str.to_int y) 1) y)))

(check-synth)
