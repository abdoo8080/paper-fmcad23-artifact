(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_12 String) (Start_10 String) (Start_9 String) (StartInt_8 Int) (StartInt_7 Int) (Start_1 String) (StartInt_1 Int) (StartInt_6 Int) (StartInt_2 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_11 String) (Start_6 String) (StartInt_4 Int) (Start_2 String) (Start_5 String) (Start_4 String) (StartInt_3 Int) (StartInt_5 Int) (Start_3 String) (Start_7 String) (Start_8 String))
  ((Start String (y "1" (str.at Start_1 StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (1))
   (StartBool Bool (false (str.<= Start_6 Start_3) (str.prefixof Start_7 Start_9) (str.suffixof Start_5 Start) (str.contains Start_4 Start_8) (<= StartInt_8 StartInt_8)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.<= Start_6 Start_4) (= Start_8 Start_6) (= StartInt_5 StartInt_7) (<= StartInt_2 StartInt_7)))
   (Start_12 String ("" (str.replace Start_7 Start_7 Start_10) (ite StartBool_2 Start_4 Start_2)))
   (Start_10 String ("b" (str.++ Start_9 Start_11) (str.replace Start Start_1 Start_1) (ite StartBool Start_4 Start_12)))
   (Start_9 String (x (str.++ Start_1 Start_2) (str.replace Start_10 Start_10 Start_2) (str.from_int StartInt_2)))
   (StartInt_8 Int (1 (str.len Start_8) (str.to_int Start_3)))
   (StartInt_7 Int (0))
   (Start_1 String ("1" "a" (str.substr Start_4 StartInt_7 StartInt_5) (str.replace Start_6 Start_2 Start_7)))
   (StartInt_1 Int (1 (str.len Start_5) (str.indexof Start_2 Start_5 StartInt_4)))
   (StartInt_6 Int (0 1 (str.len Start_3)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_2 Start StartInt) (str.to_int Start_2)))
   (StartBool_3 Bool (false (not StartBool) (str.< Start_3 Start_10) (str.prefixof Start_11 Start_4) (str.suffixof Start_12 Start_4) (str.contains Start_7 Start_2)))
   (StartBool_1 Bool (false (not StartBool_1) (str.< Start_3 Start_4) (str.prefixof Start_2 Start_3) (str.contains Start_5 Start_3) (= StartInt_3 StartInt_2)))
   (Start_11 String ("a" "b" (str.++ Start Start_11) (str.substr Start_9 StartInt_5 StartInt_7) (ite StartBool Start_12 Start_7)))
   (Start_6 String ("a" (str.substr Start_4 StartInt_3 StartInt_4)))
   (StartInt_4 Int (1 (str.indexof Start_1 Start_6 StartInt_5)))
   (Start_2 String ("b" "a" (str.at Start_3 StartInt_3) (str.substr Start_4 StartInt_1 StartInt) (str.replace Start_1 Start_2 Start_5) (str.from_int StartInt_2)))
   (Start_5 String ("1" (str.++ Start_1 Start) (str.substr Start_4 StartInt_2 StartInt) (ite StartBool Start_1 Start_4)))
   (Start_4 String ("0" (str.substr Start_6 StartInt_2 StartInt) (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start_3)))
   (StartInt_3 Int (1 (str.len Start) (str.to_int Start_5)))
   (StartInt_5 Int (1 0))
   (Start_3 String ("0" x "" (str.++ Start_1 Start_7) (str.at Start_8 StartInt_3)))
   (Start_7 String (x (str.substr Start_2 StartInt_6 StartInt_3) (str.replace Start_6 Start_6 Start_2) (str.from_int StartInt_6)))
   (Start_8 String (y "b" (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof y (str.replace "1" y "") 0))))

(check-synth)
