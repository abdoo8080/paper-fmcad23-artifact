(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartBool_7 Bool) (StartBool_8 Bool) (StartBool_5 Bool) (StartInt_1 Int) (StartInt_2 Int) (StartBool_4 Bool) (Start_6 String) (StartInt_4 Int) (Start_3 String) (StartBool_1 Bool) (StartInt_9 Int) (Start_8 String) (StartBool_6 Bool) (StartInt_3 Int) (Start_12 String) (Start_4 String) (StartInt_8 Int) (StartBool_2 Bool) (Start_2 String) (Start_9 String) (StartBool_3 Bool) (StartInt_6 Int) (Start_7 String) (Start_10 String) (Start_5 String) (StartInt_5 Int) (Start_1 String) (Start_11 String) (StartInt_7 Int))
  ((Start String (x y (str.at Start_1 StartInt_1) (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (1 (str.len Start_6) (str.indexof Start_8 Start_11 StartInt_5) (str.to_int Start_2)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool StartBool_4) (str.< Start_1 Start_5) (str.prefixof Start_4 Start_7) (str.suffixof Start_8 Start_10) (str.contains Start_1 Start_11) (= Start_1 Start_12) (= StartInt_7 StartInt_3)))
   (Start_13 String (y (str.++ Start_3 Start_10) (str.from_int StartInt_1)))
   (StartBool_7 Bool (true (not StartBool_8) (str.suffixof Start_9 Start_6) (str.contains Start_7 Start_11) (= Start_3 Start_1)))
   (StartBool_8 Bool (true false (str.< Start_13 Start) (str.prefixof Start_3 Start_10) (= Start_1 Start_7)))
   (StartBool_5 Bool (true false (not StartBool_3) (and StartBool_7 StartBool) (str.< Start_3 Start_5) (str.prefixof Start Start_2) (= Start_12 Start_2) (= StartInt StartInt_8) (<= StartInt_3 StartInt)))
   (StartInt_1 Int (1 (str.len Start_8)))
   (StartInt_2 Int (1 (str.indexof Start_7 Start_6 StartInt)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_5 StartBool_6) (str.prefixof Start_2 Start_3) (str.suffixof Start_7 Start_9) (str.contains Start_6 Start_4)))
   (Start_6 String ("b" (str.replace Start_7 Start_6 Start_5) (str.from_int StartInt_1)))
   (StartInt_4 Int (1 (str.indexof Start_7 Start_11 StartInt_2) (str.to_int Start_2)))
   (Start_3 String ("" (str.substr Start_2 StartInt_2 StartInt_3) (str.replace Start_2 Start_4 Start_2)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start_3 Start_5) (str.<= Start_1 Start_4) (str.prefixof Start_3 Start_2) (str.suffixof Start_6 Start_2) (str.contains Start_3 Start_4) (<= StartInt_3 StartInt_3)))
   (StartInt_9 Int (0 1 (str.len Start_12) (str.to_int Start_4)))
   (Start_8 String ("a" (str.++ Start Start_4) (str.at Start_6 StartInt_4) (str.substr Start_1 StartInt StartInt_3) (str.replace Start_4 Start_2 Start_9)))
   (StartBool_6 Bool (false (not StartBool_1) (str.<= Start Start_10) (str.suffixof Start_3 Start_9) (str.contains Start_6 Start_2) (= StartInt_8 StartInt_3) (<= StartInt_9 StartInt)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start_3 Start_3 StartInt_1) (str.to_int Start)))
   (Start_12 String (y "" (str.++ Start_8 Start_2)))
   (Start_4 String ("b" "" (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_1 Start_1 Start_1) (ite StartBool_1 Start Start_5)))
   (StartInt_8 Int (1 (str.indexof Start_1 Start_8 StartInt_1) (str.to_int Start_2)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.< Start_5 Start_5) (str.prefixof Start_7 Start_4) (str.contains Start_6 Start_1) (<= StartInt_2 StartInt_1)))
   (Start_2 String (x y "" "b" (str.at Start_3 StartInt_3) (ite StartBool_1 Start_1 Start_2)))
   (Start_9 String (x y (str.at Start_8 StartInt_5) (str.substr Start StartInt_5 StartInt_5) (str.replace Start_10 Start_7 Start_9) (str.from_int StartInt_2)))
   (StartBool_3 Bool (false (not StartBool_3) (str.< Start_6 Start_10) (str.<= Start_2 Start_5) (str.suffixof Start Start_7) (= StartInt_6 StartInt_1)))
   (StartInt_6 Int (1 0 (str.len Start_5) (str.to_int Start_11)))
   (Start_7 String ("1" "a" (str.at Start_2 StartInt) (str.substr Start_5 StartInt StartInt_1) (str.from_int StartInt)))
   (Start_10 String (y "a" x "0" "b" (str.++ Start_1 Start_2) (str.at Start_9 StartInt_3) (str.replace Start_11 Start_5 Start_9) (ite StartBool_3 Start_4 Start_7)))
   (Start_5 String (y (str.at Start_3 StartInt_2) (str.substr Start_4 StartInt_1 StartInt_1) (str.from_int StartInt_3) (ite StartBool Start_2 Start_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_12 Start_6 StartInt_3) (str.to_int Start_9)))
   (Start_1 String (y (str.substr Start_5 StartInt StartInt_4) (ite StartBool_2 Start_8 Start_9)))
   (Start_11 String ("a" y (str.++ Start_7 Start_5)))
   (StartInt_7 Int (0 1 (str.indexof Start_1 Start_2 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "0" y)))

(check-synth)
