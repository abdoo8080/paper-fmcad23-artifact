(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_11 String) (Start_9 String) (Start_1 String) (Start_5 String) (StartBool_3 Bool) (Start_2 String) (Start_6 String) (StartInt_2 Int) (StartInt_1 Int) (StartBool_2 Bool) (StartInt_3 Int) (Start_7 String) (StartBool_1 Bool) (Start_4 String) (Start_8 String) (Start_10 String) (Start_3 String))
  ((Start String ("" (str.replace Start_1 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_5) (str.indexof Start_1 Start_5 StartInt_2) (str.to_int Start_2)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_2 StartBool_3) (str.< Start_5 Start_8) (str.<= Start_9 Start_8) (str.prefixof Start_2 Start_2) (str.suffixof Start_2 Start_8) (= Start_3 Start_2) (<= StartInt StartInt_3)))
   (Start_12 String ("a" "0" (str.++ Start_9 Start_6) (str.replace Start_9 Start_6 Start_7) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start)))
   (Start_11 String ("1" "a" "0" (str.++ Start_8 Start_10) (str.replace Start_8 Start_1 Start_7)))
   (Start_9 String ("" (str.++ Start_1 Start_8) (str.at Start_10 StartInt) (str.substr Start_7 StartInt_3 StartInt_3) (str.replace Start_2 Start_10 Start_5)))
   (Start_1 String ("" (str.++ Start_1 Start) (str.replace Start_2 Start_3 Start_4) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_4)))
   (Start_5 String ("a" (str.++ Start_5 Start_3) (str.at Start_6 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_3)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_3) (str.<= Start_12 Start_7)))
   (Start_2 String (y (str.++ Start_6 Start) (str.substr Start_2 StartInt StartInt_3) (str.replace Start_1 Start_9 Start)))
   (Start_6 String (y (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_5 Start_1 Start_2) (str.from_int StartInt_3) (ite StartBool Start Start_5)))
   (StartInt_2 Int (0 (str.len Start_6) (str.to_int Start)))
   (StartInt_1 Int (1 (str.to_int Start_5)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_2 StartBool) (str.< Start_2 Start_4) (str.<= Start_3 Start_8) (str.contains Start_5 Start_4) (= StartInt_2 StartInt_2) (<= StartInt_3 StartInt)))
   (StartInt_3 Int (0 1 (str.to_int Start_7)))
   (Start_7 String (y (str.at Start StartInt_3)))
   (StartBool_1 Bool (false (str.<= Start_4 Start) (str.contains Start_2 Start_2) (= Start_6 Start_6) (= StartInt_3 StartInt_3)))
   (Start_4 String ("b" (ite StartBool_2 Start_7 Start_4)))
   (Start_8 String ("a" "1" (str.replace Start_3 Start_6 Start_5) (ite StartBool_2 Start_4 Start_8)))
   (Start_10 String (y (str.++ Start_10 Start_8) (str.at Start_6 StartInt_3) (str.substr Start_10 StartInt_3 StartInt_2) (ite StartBool_1 Start_4 Start_11)))
   (Start_3 String ("0" (str.at Start_4 StartInt_3) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_6 Start Start_9) (str.from_int StartInt_2) (ite StartBool Start_9 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= y "b") "" y)))

(check-synth)
