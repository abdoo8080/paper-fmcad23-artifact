(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (StartInt_8 Int) (StartBool_1 Bool) (Start_11 String) (Start_1 String) (Start_5 String) (Start_6 String) (StartInt_1 Int) (Start_3 String) (StartInt_4 Int) (Start_7 String) (Start_9 String) (StartBool_4 Bool) (StartBool_2 Bool) (StartInt_6 Int) (Start_4 String) (StartInt_5 Int) (Start_17 String) (Start_10 String) (StartInt_3 Int) (Start_12 String) (Start_13 String) (StartBool_3 Bool) (StartInt_9 Int) (StartInt_10 Int) (Start_8 String) (Start_2 String) (Start_15 String) (StartInt_2 Int) (Start_14 String) (StartInt_7 Int) (Start_16 String))
  ((Start String ("b" (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_2 Start_3 Start_4) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start_17) (str.indexof Start_6 Start_10 StartInt_3) (str.to_int Start_12)))
   (StartBool Bool (true (str.<= Start_18 Start_9) (str.contains Start_9 Start_3) (= StartInt_1 StartInt_10) (<= StartInt_8 StartInt_8)))
   (Start_18 String ("0" (str.at Start_16 StartInt_4) (str.substr Start_1 StartInt_9 StartInt_4) (str.replace Start_17 Start_3 Start_6) (str.from_int StartInt_7)))
   (StartInt_8 Int (1))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_2) (str.< Start_6 Start_7) (str.<= Start_7 Start_7) (= Start_7 Start_1) (= StartInt_2 StartInt_3)))
   (Start_11 String ("b" "1" (str.at Start_5 StartInt_5) (str.substr Start_8 StartInt_7 StartInt_8)))
   (Start_1 String ("1" (str.at Start_7 StartInt_6) (str.substr Start_7 StartInt StartInt_1) (str.replace Start_9 Start_17 Start_9) (ite StartBool_2 Start_14 Start_10)))
   (Start_5 String ("a" (str.++ Start_3 Start) (str.at Start_4 StartInt_3) (str.substr Start StartInt_2 StartInt_5)))
   (Start_6 String ("b" "0" (str.++ Start_2 Start_2) (str.substr Start_4 StartInt_2 StartInt_5) (str.from_int StartInt_6) (ite StartBool_1 Start Start_7)))
   (StartInt_1 Int (1 0 (str.to_int Start_16)))
   (Start_3 String (x "b" (str.++ Start_6 Start_5) (str.at Start_1 StartInt)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.to_int Start_1)))
   (Start_7 String ("b" "" y x (str.replace Start_7 Start_1 Start_2) (str.from_int StartInt_3)))
   (Start_9 String ("b" (str.at Start_2 StartInt_5) (str.from_int StartInt_5) (ite StartBool_3 Start_1 Start_3)))
   (StartBool_4 Bool (true (not StartBool_2) (str.< Start_14 Start_9) (str.<= Start_5 Start_3) (str.prefixof Start_2 Start_10) (str.contains Start_10 Start_5) (= StartInt_2 StartInt_9)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_8 Start_4) (str.<= Start_2 Start_9) (str.prefixof Start_1 Start_2) (str.contains Start_10 Start_4) (= Start_11 Start_11) (= StartInt_3 StartInt)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.indexof Start Start_12 StartInt_6) (str.to_int Start_11)))
   (Start_4 String ("" "a" "0" (str.++ Start_3 Start_3) (str.at Start_3 StartInt_3) (str.substr Start_3 StartInt_4 StartInt_2) (str.replace Start_2 Start_1 Start_1) (ite StartBool Start_5 Start_2)))
   (StartInt_5 Int (1 0 (str.indexof Start_4 Start StartInt)))
   (Start_17 String ("" (str.++ Start_3 Start_12) (str.replace Start_9 Start_18 Start_7) (str.from_int StartInt_9) (ite StartBool Start_3 Start_2)))
   (Start_10 String (x "" (str.++ Start_13 Start_13) (str.at Start_4 StartInt_6) (str.replace Start_1 Start_6 Start_7) (ite StartBool_2 Start_11 Start_13)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start_2 Start_3 StartInt) (str.to_int Start_5)))
   (Start_12 String (y (str.at Start_7 StartInt_1)))
   (Start_13 String (y "b" "" (str.replace Start_14 Start_7 Start_9) (str.from_int StartInt)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool StartBool_4) (str.< Start_14 Start_7) (str.prefixof Start_2 Start_14) (= StartInt_6 StartInt_3) (<= StartInt_8 StartInt_7)))
   (StartInt_9 Int (1 0))
   (StartInt_10 Int (1 (str.len Start_4) (str.indexof Start_9 Start_8 StartInt_2) (str.to_int Start_6)))
   (Start_8 String (y (str.++ Start_9 Start_4) (str.at Start_12 StartInt_7) (str.from_int StartInt_9)))
   (Start_2 String ("0" (str.replace Start_15 Start_5 Start_13) (str.from_int StartInt_8) (ite StartBool_4 Start_8 Start_11)))
   (Start_15 String ("1" ""))
   (StartInt_2 Int (0 (str.indexof Start Start StartInt_1) (str.to_int Start_8)))
   (Start_14 String ("1" (str.substr Start_4 StartInt_2 StartInt_6) (ite StartBool Start_14 Start_7)))
   (StartInt_7 Int (1 0 (str.len Start_4) (str.indexof Start_12 Start_7 StartInt_6)))
   (Start_16 String ("0" "" (str.at Start_7 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.replace "0" y "0"))))

(check-synth)
