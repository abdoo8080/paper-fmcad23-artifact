(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_6 Int) (Start_10 String) (Start_8 String) (StartBool_1 Bool) (Start_2 String) (Start_13 String) (Start_5 String) (Start_11 String) (StartInt_3 Int) (Start_3 String) (Start_9 String) (Start_1 String) (Start_6 String) (StartInt_2 Int) (Start_4 String) (Start_7 String) (StartInt_1 Int) (StartInt_5 Int) (StartInt_4 Int))
  ((Start String ("a" "b" (str.at Start StartInt)))
   (StartInt Int (0 (str.len Start)))
   (StartBool Bool (true false (not StartBool) (and StartBool_1 StartBool) (str.< Start_1 Start) (str.prefixof Start_2 Start) (= StartInt_1 StartInt_2)))
   (Start_12 String (x (str.++ Start_11 Start_3) (str.at Start_3 StartInt_5)))
   (StartInt_6 Int (1 (str.len Start)))
   (Start_10 String ("b" (str.replace Start_1 Start_8 Start_4) (str.from_int StartInt_5) (ite StartBool Start_10 Start_3)))
   (Start_8 String ("b" (str.++ Start_12 Start_7) (str.substr Start_13 StartInt_4 StartInt_6)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool) (str.prefixof Start_8 Start_7) (str.suffixof Start_9 Start_10) (= StartInt_1 StartInt_3) (<= StartInt StartInt)))
   (Start_2 String ("1" "b" (str.replace Start_3 Start_5 Start_3) (str.from_int StartInt_3)))
   (Start_13 String ("a" (str.at Start_11 StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_13)))
   (Start_5 String ("0" (str.at Start_7 StartInt_2) (str.substr Start_1 StartInt StartInt) (str.replace Start_5 Start_4 Start_1)))
   (Start_11 String ("1" (str.++ Start_5 Start_3) (str.at Start_7 StartInt_1)))
   (StartInt_3 Int (1 0 (str.len Start_2)))
   (Start_3 String ("b" "a" "0" (str.++ Start_2 Start_1) (str.at Start_4 StartInt_4) (str.replace Start_5 Start_4 Start_6)))
   (Start_9 String ("1" (str.at Start_9 StartInt_1) (str.substr Start StartInt_3 StartInt_3) (str.replace Start Start_5 Start_5) (ite StartBool Start Start_11)))
   (Start_1 String ("1" y "0" (str.at Start_3 StartInt_4) (str.substr Start_5 StartInt_4 StartInt_3) (ite StartBool_1 Start_5 Start_3)))
   (Start_6 String ("b" (str.from_int StartInt) (ite StartBool_1 Start Start_3)))
   (StartInt_2 Int (1 (str.indexof Start_3 Start_1 StartInt_3) (str.to_int Start_2)))
   (Start_4 String ("" x))
   (Start_7 String ("1" "a" (str.at Start_1 StartInt_5) (ite StartBool Start Start_4)))
   (StartInt_1 Int (0 1 (str.to_int Start_7)))
   (StartInt_5 Int (1 (str.to_int Start_7)))
   (StartInt_4 Int (0 1 (str.len Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.at "b" (str.len x)) (str.indexof "0" y 1))))

(check-synth)
