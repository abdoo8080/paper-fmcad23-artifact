(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartBool_2 Bool) (Start_1 String) (Start_13 String) (Start_10 String) (Start_9 String) (Start_2 String) (Start_5 String) (StartInt_3 Int) (StartInt_7 Int) (Start_3 String) (StartInt_6 Int) (StartInt_2 Int) (Start_14 String) (Start_4 String) (Start_12 String) (Start_7 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_6 String) (StartInt_4 Int) (Start_8 String) (StartBool_3 Bool) (StartInt_1 Int) (StartBool_4 Bool))
  ((Start String ("0" (str.from_int StartInt) (ite StartBool_1 Start Start)))
   (StartInt Int (0 (str.indexof Start_11 Start_7 StartInt_4) (str.to_int Start_5)))
   (StartBool Bool (false true (not StartBool) (str.prefixof Start_11 Start_10) (str.suffixof Start_4 Start_6) (str.contains Start_4 Start_5) (= Start_9 Start_14) (<= StartInt_4 StartInt_6)))
   (Start_11 String ("1" "" (str.++ Start_8 Start_3) (str.at Start_2 StartInt_5) (str.replace Start_8 Start_2 Start_7) (ite StartBool_4 Start_11 Start_12)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_2) (str.<= Start_8 Start_10) (str.contains Start_9 Start_1) (= Start_3 Start_3)))
   (Start_1 String (x "0" "" (str.at Start_7 StartInt_2) (str.replace Start_2 Start_2 Start_4) (str.from_int StartInt)))
   (Start_13 String ("1" x (str.substr Start_12 StartInt_2 StartInt_7) (str.replace Start_8 Start_14 Start_14)))
   (Start_10 String ("0" "a" x "1" "b" (str.++ Start_6 Start) (str.from_int StartInt_6)))
   (Start_9 String ("a" "0" (str.++ Start_6 Start_7) (str.substr Start_1 StartInt_7 StartInt_7) (str.replace Start_10 Start_8 Start_9) (str.from_int StartInt_7)))
   (Start_2 String ("" "0" y (str.++ Start_8 Start_4) (str.at Start_1 StartInt_6) (str.from_int StartInt_4) (ite StartBool_2 Start_5 Start_3)))
   (Start_5 String (x "1" "a"))
   (StartInt_3 Int (1 (str.len Start) (str.indexof Start_3 Start_5 StartInt_4) (str.to_int Start_2)))
   (StartInt_7 Int (0 1 (str.indexof Start_2 Start_8 StartInt_5) (str.to_int Start_6)))
   (Start_3 String ("a" y "" (str.at Start_1 StartInt_1) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_3 Start Start_1) (str.from_int StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.indexof Start_9 Start_7 StartInt_4) (str.to_int Start_5)))
   (StartInt_2 Int (0 (str.indexof Start Start_4 StartInt)))
   (Start_14 String ("0" (str.at Start_14 StartInt_5) (str.substr Start_13 StartInt StartInt_6) (str.from_int StartInt_1)))
   (Start_4 String ("a" "b" (str.++ Start_4 Start_5) (str.at Start StartInt) (str.substr Start_2 StartInt_3 StartInt_2) (ite StartBool_2 Start_5 Start_6)))
   (Start_12 String ("a" x (str.++ Start_10 Start_13) (str.at Start_11 StartInt_1) (str.replace Start_11 Start_9 Start_5) (str.from_int StartInt_4) (ite StartBool Start_12 Start_1)))
   (Start_7 String ("" (str.replace Start Start_8 Start_2)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool) (str.< Start_1 Start) (str.<= Start_1 Start) (str.prefixof Start_2 Start_2) (= Start_1 Start_3) (= StartInt StartInt_1) (<= StartInt_1 StartInt)))
   (StartInt_5 Int (0 (str.indexof Start_8 Start_3 StartInt_4) (str.to_int Start_3)))
   (Start_6 String (y (str.++ Start Start_1) (str.at Start_6 StartInt_4) (str.substr Start_4 StartInt_3 StartInt_3) (ite StartBool Start_6 Start_7)))
   (StartInt_4 Int (0 1 (str.len Start_8) (str.to_int Start_6)))
   (Start_8 String ("0" (str.at Start_4 StartInt_3) (ite StartBool_3 Start_6 Start_4)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool_4 StartBool_2) (str.<= Start_8 Start) (str.prefixof Start_3 Start) (= Start_5 Start_5) (<= StartInt_2 StartInt_1)))
   (StartInt_1 Int (0 (str.len Start_3)))
   (StartBool_4 Bool (true (str.< Start_6 Start_7) (= Start_5 Start_8) (= StartInt StartInt_5) (<= StartInt_5 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.substr y 0 1) "")))

(check-synth)
