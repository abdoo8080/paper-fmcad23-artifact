(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (StartInt_11 Int) (Start_19 String) (Start_12 String) (Start_18 String) (Start_11 String) (Start_16 String) (Start_1 String) (StartInt_1 Int) (Start_8 String) (Start_15 String) (StartBool_1 Bool) (Start_20 String) (Start_3 String) (StartInt_5 Int) (Start_21 String) (Start_10 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_5 String) (StartBool_3 Bool) (StartInt_6 Int) (StartInt_3 Int) (StartBool_4 Bool) (Start_4 String) (StartInt_4 Int) (StartInt_10 Int) (Start_9 String) (Start_17 String) (StartInt_7 Int) (StartInt_8 Int) (Start_13 String) (Start_2 String) (StartInt_9 Int) (Start_14 String) (Start_7 String) (StartBool_5 Bool))
  ((Start String ("1" "" "b" (str.++ Start_1 Start_2) (str.substr Start StartInt StartInt) (str.from_int StartInt) (ite StartBool Start Start_3)))
   (StartInt Int (0 1 (str.to_int Start_9)))
   (StartBool Bool (true false (and StartBool_2 StartBool_4) (str.suffixof Start_21 Start_8) (<= StartInt_10 StartInt_3)))
   (Start_6 String ("0" "a" y (str.at Start_7 StartInt_2) (str.from_int StartInt_8)))
   (StartInt_11 Int (1 0 (str.to_int Start_9)))
   (Start_19 String ("0" (str.substr Start_2 StartInt_3 StartInt_2)))
   (Start_12 String ("a" (str.++ Start_10 Start_19) (str.replace Start_9 Start_6 Start_5) (ite StartBool Start_19 Start_3)))
   (Start_18 String (y (str.++ Start_9 Start_6) (str.replace Start_7 Start_17 Start_11) (str.from_int StartInt) (ite StartBool_2 Start_12 Start_13)))
   (Start_11 String ("" x "1" "0" (str.at Start_15 StartInt_11) (str.replace Start_7 Start Start_20) (ite StartBool_5 Start_14 Start_12)))
   (Start_16 String ("b" (str.++ Start_8 Start_2) (str.replace Start_5 Start_7 Start_18)))
   (Start_1 String ("" (str.replace Start_3 Start_2 Start_6) (str.from_int StartInt_6) (ite StartBool_1 Start_6 Start_3)))
   (StartInt_1 Int (1 0 (str.to_int Start_4)))
   (Start_8 String ("0" (str.substr Start_7 StartInt StartInt) (str.replace Start_11 Start_1 Start_12) (ite StartBool_3 Start_8 Start_11)))
   (Start_15 String (x "a"))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_1) (str.< Start Start_1) (str.<= Start_7 Start_3) (str.prefixof Start_5 Start_2)))
   (Start_20 String ("0" y (str.at Start_5 StartInt) (str.substr Start StartInt_4 StartInt_5) (str.from_int StartInt_2) (ite StartBool Start_21 Start_11)))
   (Start_3 String ("1" (str.at Start StartInt_1) (str.substr Start_3 StartInt_2 StartInt_3) (str.from_int StartInt_4)))
   (StartInt_5 Int (0 1 (str.len Start_1)))
   (Start_21 String ("b" (str.at Start_13 StartInt_6) (str.replace Start_5 Start_21 Start) (str.from_int StartInt_5)))
   (Start_10 String ("a" (str.at Start_4 StartInt) (str.substr Start_7 StartInt_8 StartInt_1) (ite StartBool_2 Start_4 Start)))
   (StartBool_2 Bool (true false (not StartBool_2) (str.< Start_4 Start_1) (str.<= Start_9 Start_7)))
   (StartInt_2 Int (0 (str.len Start) (str.to_int Start_2)))
   (Start_5 String ("0" "b" (ite StartBool Start_3 Start_2)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool_4) (str.< Start_9 Start_10) (str.<= Start_13 Start) (str.prefixof Start_14 Start_11) (= StartInt_9 StartInt_6)))
   (StartInt_6 Int (0 1 (str.len Start_2) (str.indexof Start Start_5 StartInt) (str.to_int Start)))
   (StartInt_3 Int (1 (str.len Start_5)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool_3) (str.< Start_16 Start_4) (str.<= Start_7 Start_17) (str.suffixof Start_4 Start_15) (= StartInt StartInt_7) (<= StartInt_7 StartInt_8)))
   (Start_4 String ("0" (str.++ Start_4 Start_2)))
   (StartInt_4 Int (1 (str.indexof Start_2 Start_3 StartInt_3) (str.to_int Start_4)))
   (StartInt_10 Int (1 (str.indexof Start_1 Start_12 StartInt_10) (str.to_int Start)))
   (Start_9 String ("0" y "b" "" (str.at Start_8 StartInt_7) (str.substr Start StartInt StartInt_4) (str.replace Start_3 Start Start_2) (ite StartBool Start_3 Start_8)))
   (Start_17 String ("b" (str.at Start_1 StartInt_9)))
   (StartInt_7 Int (0 (str.indexof Start_10 Start_7 StartInt_1) (str.to_int Start_8)))
   (StartInt_8 Int (0 1 (str.indexof Start_7 Start_7 StartInt_2) (str.to_int Start_6)))
   (Start_13 String ("b" "1" (str.++ Start_14 Start_12) (str.at Start_2 StartInt_2) (str.substr Start_6 StartInt_5 StartInt_2) (str.replace Start_15 Start_12 Start_6) (ite StartBool_4 Start_10 Start)))
   (Start_2 String (x "1" (str.at Start_3 StartInt_5) (str.substr Start_1 StartInt_6 StartInt_1)))
   (StartInt_9 Int (1 (str.len Start_10) (str.indexof Start_8 Start_13 StartInt)))
   (Start_14 String (x (str.substr Start_4 StartInt_3 StartInt_10) (str.replace Start_8 Start_2 Start_7) (ite StartBool_5 Start_14 Start_7)))
   (Start_7 String ("a" (str.++ Start_1 Start_8) (str.replace Start Start_2 Start_9) (ite StartBool_1 Start_1 Start_8)))
   (StartBool_5 Bool (true false (not StartBool_2) (str.<= Start_11 Start_8) (str.contains Start_6 Start_1) (= Start_7 Start_10) (= StartInt_6 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.at (str.replace x "b" y) 1) y)))

(check-synth)
