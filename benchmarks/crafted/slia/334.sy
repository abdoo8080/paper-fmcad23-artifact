(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (StartInt_8 Int) (StartBool_5 Bool) (Start_1 String) (StartInt_5 Int) (Start_13 String) (Start_6 String) (Start_10 String) (StartInt_2 Int) (Start_7 String) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_4 Int) (Start_11 String) (StartBool_3 Bool) (Start_4 String) (Start_15 String) (Start_8 String) (Start_3 String) (Start_5 String) (Start_17 String) (Start_12 String) (Start_2 String) (StartInt_7 Int) (StartInt_3 Int) (StartBool_2 Bool) (Start_9 String) (StartBool_4 Bool) (Start_14 String) (Start_16 String) (StartInt_9 Int) (Start_18 String) (StartInt_1 Int))
  ((Start String ("0" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start_2 Start_2 Start_3)))
   (StartInt Int (0 (str.indexof Start_5 Start StartInt_8)))
   (StartBool Bool (true (not StartBool) (and StartBool_5 StartBool_3) (str.< Start_4 Start) (str.prefixof Start_19 Start_3) (str.contains Start_11 Start_3) (<= StartInt_3 StartInt_9)))
   (Start_19 String ("1" (str.++ Start Start_5) (str.at Start_10 StartInt_2) (str.replace Start_14 Start_7 Start_3) (str.from_int StartInt_7) (ite StartBool_3 Start_13 Start_16)))
   (StartInt_8 Int (1))
   (StartBool_5 Bool (true false (not StartBool_5) (str.<= Start_17 Start_15) (str.prefixof Start_3 Start_12) (= StartInt_8 StartInt_8) (<= StartInt_2 StartInt_4)))
   (Start_1 String (y x (str.++ Start_8 Start_8) (str.substr Start_2 StartInt_4 StartInt_3) (str.replace Start_1 Start_13 Start_8)))
   (StartInt_5 Int (1 0 (str.indexof Start_11 Start_1 StartInt_4)))
   (Start_13 String ("" "0" (str.++ Start_7 Start_9) (str.substr Start_11 StartInt_4 StartInt) (str.from_int StartInt_5) (ite StartBool Start_5 Start_2)))
   (Start_6 String (y (str.replace Start_6 Start_7 Start_3) (ite StartBool_1 Start_7 Start_8)))
   (Start_10 String ("1" x "" (str.replace Start_9 Start_2 Start_2) (str.from_int StartInt_2)))
   (StartInt_2 Int (1 (str.to_int Start_15)))
   (Start_7 String ("" (str.++ Start_8 Start_1) (str.replace Start Start_5 Start_4) (ite StartBool Start_7 Start_9)))
   (StartInt_6 Int (0 (str.len Start_10) (str.to_int Start_1)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start Start_5) (str.prefixof Start_2 Start_4) (str.suffixof Start_3 Start_4) (= StartInt_4 StartInt_4) (<= StartInt StartInt_4)))
   (StartInt_4 Int (0 (str.to_int Start)))
   (Start_11 String (y "a" "" (str.replace Start_10 Start_9 Start_10)))
   (StartBool_3 Bool (true (and StartBool_2 StartBool_4) (str.< Start_7 Start_10) (str.<= Start_3 Start_15) (= Start_6 Start_9) (= StartInt_6 StartInt_3) (<= StartInt_6 StartInt_7)))
   (Start_4 String (x y "b" (str.replace Start_1 Start Start_2) (str.from_int StartInt_4) (ite StartBool Start Start_3)))
   (Start_15 String ("0" (str.at Start_4 StartInt_5) (str.substr Start_8 StartInt_4 StartInt_7) (ite StartBool_2 Start_5 Start_15)))
   (Start_8 String ("b" y (str.substr Start StartInt_1 StartInt)))
   (Start_3 String ("a" (str.++ Start_3 Start) (str.substr Start_1 StartInt_3 StartInt) (ite StartBool_1 Start Start_4)))
   (Start_5 String (x (str.at Start_5 StartInt_3) (str.substr Start_1 StartInt_2 StartInt_2) (ite StartBool Start_6 Start_1)))
   (Start_17 String ("b" (str.++ Start_5 Start_14) (str.substr Start_10 StartInt_5 StartInt_3) (str.replace Start_2 Start_7 Start_18) (str.from_int StartInt_7)))
   (Start_12 String (x (str.replace Start_6 Start_11 Start_3)))
   (Start_2 String ("0" x "" (str.++ Start_11 Start_14) (str.at Start_3 StartInt_5) (str.replace Start_6 Start_9 Start_9) (str.from_int StartInt_7) (ite StartBool Start_3 Start_12)))
   (StartInt_7 Int (1 0 (str.len Start_6) (str.indexof Start_1 Start_1 StartInt_7) (str.to_int Start_2)))
   (StartInt_3 Int (0 1 (str.indexof Start_12 Start_13 StartInt_6) (str.to_int Start_1)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_3) (str.prefixof Start_4 Start) (str.suffixof Start_3 Start_1)))
   (Start_9 String (y "1" "a" "" "b" "0" (str.substr Start_6 StartInt_5 StartInt_2) (str.from_int StartInt_6) (ite StartBool Start_3 Start_5)))
   (StartBool_4 Bool (false true (not StartBool_4) (and StartBool_3 StartBool_4) (str.< Start_13 Start_12) (str.<= Start_6 Start_11) (str.prefixof Start Start_16) (str.contains Start_1 Start_17) (= StartInt_1 StartInt_6) (<= StartInt_2 StartInt_3)))
   (Start_14 String ("a" (str.at Start_4 StartInt) (str.substr Start_9 StartInt_4 StartInt_3) (str.from_int StartInt_1)))
   (Start_16 String ("a" (str.at Start_8 StartInt_3) (str.from_int StartInt_7) (ite StartBool_2 Start Start_17)))
   (StartInt_9 Int (0 1 (str.len Start_15)))
   (Start_18 String ("a" (str.++ Start_13 Start_1) (str.from_int StartInt_3) (ite StartBool Start Start_14)))
   (StartInt_1 Int (0 1 (str.indexof Start_15 Start_6 StartInt) (str.to_int Start_18)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace x "1" "a") (ite (= "a" y) x y))))

(check-synth)
