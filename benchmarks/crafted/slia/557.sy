(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_12 String) (Start_9 String) (StartBool_4 Bool) (StartBool_3 Bool) (StartBool_2 Bool) (StartBool_1 Bool) (Start_1 String) (Start_11 String) (StartInt_2 Int) (Start_4 String) (Start_10 String) (Start_2 String) (StartInt_3 Int) (Start_6 String) (StartInt_4 Int) (Start_7 String) (StartInt_1 Int) (Start_3 String) (Start_5 String) (Start_8 String))
  ((Start String ("1" (str.at Start StartInt_1)))
   (StartInt Int (1 0 (str.len Start_1)))
   (StartBool Bool (true false (and StartBool_2 StartBool_1) (str.< Start_1 Start_12) (str.<= Start_5 Start_8) (str.suffixof Start_6 Start_5) (str.contains Start_2 Start_9) (= Start_9 Start_9)))
   (StartInt_5 Int (1 0 (str.len Start_9) (str.to_int Start_7)))
   (Start_12 String (x (str.++ Start_11 Start_1) (str.substr Start_12 StartInt_3 StartInt_5) (str.from_int StartInt_3) (ite StartBool_2 Start_10 Start_5)))
   (Start_9 String ("a" (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_4) (ite StartBool_3 Start_10 Start_11)))
   (StartBool_4 Bool (false (not StartBool_3) (str.<= Start_10 Start_9) (<= StartInt_3 StartInt_1)))
   (StartBool_3 Bool (false true (and StartBool_4 StartBool) (str.< Start_7 Start) (str.prefixof Start_4 Start_4) (str.contains Start_3 Start_9) (= StartInt_4 StartInt_4) (<= StartInt_3 StartInt_2)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_3) (str.prefixof Start_6 Start_9) (str.suffixof Start Start_6) (= Start_5 Start_1) (<= StartInt_2 StartInt_1)))
   (StartBool_1 Bool (false true (str.<= Start Start_8) (str.prefixof Start_3 Start_3) (str.suffixof Start_5 Start_6) (= StartInt_3 StartInt_2)))
   (Start_1 String (x (str.replace Start Start_1 Start_1) (ite StartBool Start_1 Start_2)))
   (Start_11 String (y "1" "a" "b" x (str.++ Start Start_4) (str.from_int StartInt)))
   (StartInt_2 Int (1 0 (str.len Start_4)))
   (Start_4 String ("0" (str.substr Start_1 StartInt StartInt_3) (str.replace Start Start_2 Start_5) (str.from_int StartInt_1) (ite StartBool Start_4 Start)))
   (Start_10 String (x "" "0" (str.++ Start_7 Start_10) (str.at Start StartInt_2) (str.substr Start_7 StartInt StartInt_4) (ite StartBool Start Start_6)))
   (Start_2 String (y (str.at Start_3 StartInt_2) (ite StartBool Start Start_2)))
   (StartInt_3 Int (0 1 (str.indexof Start_3 Start_6 StartInt)))
   (Start_6 String ("" y (str.++ Start_6 Start_4) (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_4 Start_6 Start_3)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.to_int Start_5)))
   (Start_7 String (x (str.substr Start_9 StartInt_2 StartInt_3) (ite StartBool_2 Start_2 Start)))
   (StartInt_1 Int (1 0))
   (Start_3 String (x (str.++ Start Start_7) (str.at Start_3 StartInt_3) (str.substr Start_3 StartInt_4 StartInt) (str.replace Start_3 Start Start_6) (ite StartBool_1 Start_4 Start_8)))
   (Start_5 String ("1" "b" "0" (str.at Start_2 StartInt_2) (ite StartBool Start Start_3)))
   (Start_8 String ("b" "1" "a" "0" x (str.replace Start_5 Start_6 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.substr (str.++ x "0") 0 (str.len y)) 1)))

(check-synth)
