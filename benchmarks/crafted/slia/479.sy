(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_9 String) (Start_10 String) (StartInt_5 Int) (Start_2 String) (StartInt_2 Int) (Start_7 String) (StartInt_8 Int) (StartInt_6 Int) (Start_3 String) (StartBool_3 Bool) (StartInt_4 Int) (StartInt_3 Int) (Start_4 String) (Start_8 String) (StartBool_1 Bool) (Start_6 String) (Start_5 String) (StartInt_1 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_1 String))
  ((Start String ("a" "1" (str.at Start_1 StartInt_1) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (1 (str.len Start_1)))
   (StartBool Bool (true false (and StartBool_1 StartBool_3) (str.contains Start_6 Start_2) (= Start_7 Start_10) (= StartInt_8 StartInt) (<= StartInt_8 StartInt_1)))
   (StartInt_7 Int (1 (str.len Start_10) (str.to_int Start_10)))
   (Start_9 String ("a" (str.substr Start StartInt_1 StartInt_3) (str.from_int StartInt_1)))
   (Start_10 String ("b" (str.at Start_4 StartInt_5) (str.replace Start_6 Start_6 Start_1) (str.from_int StartInt_6)))
   (StartInt_5 Int (1 0 (str.to_int Start_5)))
   (Start_2 String ("1" (str.at Start_3 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_3 Start_3)))
   (StartInt_2 Int (1 0))
   (Start_7 String ("b" (str.at Start_4 StartInt_1) (str.substr Start_6 StartInt_1 StartInt)))
   (StartInt_8 Int (0 (str.to_int Start_5)))
   (StartInt_6 Int (0 (str.len Start_6) (str.indexof Start_1 Start_8 StartInt_3) (str.to_int Start)))
   (Start_3 String (x "b" "a" (str.++ Start Start_4) (str.at Start_4 StartInt_1) (str.substr Start StartInt_3 StartInt_1) (ite StartBool Start_3 Start_1)))
   (StartBool_3 Bool (true (and StartBool StartBool_1) (str.<= Start_3 Start_10) (str.suffixof Start_5 Start) (str.contains Start_6 Start_10) (<= StartInt StartInt_7)))
   (StartInt_4 Int (0 (str.len Start_1) (str.indexof Start_2 Start_3 StartInt_4)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_3 Start_3 StartInt_2)))
   (Start_4 String (y (str.at Start_3 StartInt_4)))
   (Start_8 String ("1" y "0" x "" (str.++ Start_6 Start_9) (str.at Start_3 StartInt_2) (str.substr Start_6 StartInt_2 StartInt_3) (str.from_int StartInt_4) (ite StartBool_4 Start_2 Start_6)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (str.<= Start_1 Start_5) (str.suffixof Start_2 Start_5) (= StartInt_3 StartInt_4)))
   (Start_6 String ("0" (str.at Start_2 StartInt_1) (str.from_int StartInt_4) (ite StartBool_2 Start_2 Start_7)))
   (Start_5 String (y (str.at Start_3 StartInt_3) (str.substr Start_5 StartInt_3 StartInt) (str.replace Start_1 Start_5 Start)))
   (StartInt_1 Int (1 0 (str.to_int Start_2)))
   (StartBool_4 Bool (true false (not StartBool) (str.<= Start_1 Start_3) (str.suffixof Start_9 Start_8) (= Start_7 Start_10) (<= StartInt_3 StartInt_2)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool StartBool_3) (str.prefixof Start_7 Start_7) (str.contains Start_2 Start_8) (= StartInt_3 StartInt_3) (<= StartInt_5 StartInt_4)))
   (Start_1 String (x "0" (str.++ Start_6 Start_2) (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_2 Start_6 Start_2) (ite StartBool Start_4 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "1" "0")))

(check-synth)
