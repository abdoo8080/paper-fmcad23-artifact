(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_12 Int) (StartInt_11 Int) (Start_9 String) (Start_3 String) (Start_7 String) (Start_5 String) (StartBool_1 Bool) (Start_8 String) (Start_2 String) (Start_10 String) (StartInt_5 Int) (StartInt_9 Int) (Start_12 String) (StartInt_2 Int) (StartInt_10 Int) (Start_1 String) (Start_11 String) (StartBool_2 Bool) (Start_13 String) (StartBool_3 Bool) (StartInt_7 Int) (StartInt_1 Int) (Start_4 String) (StartInt_4 Int) (Start_14 String) (StartInt_6 Int) (StartBool_4 Bool) (Start_6 String) (StartInt_8 Int) (StartInt_3 Int) (Start_15 String))
  ((Start String ("0" "b" (str.replace Start Start Start_1) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_8) (str.to_int Start_14)))
   (StartBool Bool (true false (str.<= Start Start_13) (str.prefixof Start_13 Start_6) (str.suffixof Start_6 Start_4) (= Start_13 Start_1) (<= StartInt_12 StartInt_10)))
   (StartInt_12 Int (0 1 (str.len Start_3) (str.indexof Start_7 Start_13 StartInt_10)))
   (StartInt_11 Int (0 1 (str.indexof Start_12 Start_14 StartInt_12) (str.to_int Start_8)))
   (Start_9 String ("" x "1" "0" y (str.replace Start_6 Start_6 Start_6) (str.from_int StartInt_1) (ite StartBool Start_10 Start_1)))
   (Start_3 String ("1" x (str.++ Start Start_4) (str.at Start_1 StartInt_2)))
   (Start_7 String (y x (str.at Start_8 StartInt_6) (str.substr Start_9 StartInt_5 StartInt_3) (str.from_int StartInt_3) (ite StartBool Start Start_5)))
   (Start_5 String ("" x (str.at Start_6 StartInt_3) (str.substr Start_7 StartInt_4 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start Start_4)))
   (StartBool_1 Bool (false true (str.< Start_7 Start_8) (= Start_3 Start_8) (<= StartInt_3 StartInt)))
   (Start_8 String ("" y (str.at Start_1 StartInt_10) (str.substr Start_10 StartInt_3 StartInt_3) (str.from_int StartInt_9) (ite StartBool_1 Start_5 Start_12)))
   (Start_2 String ("" (str.from_int StartInt_11)))
   (Start_10 String ("0" (str.++ Start_9 Start_1) (ite StartBool_1 Start_7 Start_10)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.to_int Start_7)))
   (StartInt_9 Int (1 (str.indexof Start_10 Start_13 StartInt_4)))
   (Start_12 String (y "0" (str.++ Start_3 Start_7) (str.from_int StartInt_3)))
   (StartInt_2 Int (0 (str.len Start_3) (str.indexof Start_1 Start_3 StartInt_2)))
   (StartInt_10 Int (0 (str.len Start_10) (str.indexof Start_14 Start_10 StartInt)))
   (Start_1 String ("1" "0" "b" (str.++ Start_2 Start) (str.at Start_2 StartInt_1) (str.substr Start StartInt StartInt_1) (str.replace Start Start_2 Start_3)))
   (Start_11 String ("0" (str.at Start_9 StartInt_4) (str.substr Start_7 StartInt_5 StartInt_7) (ite StartBool_2 Start_11 Start_8)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.suffixof Start_10 Start_6) (str.contains Start Start_12) (= Start_2 Start_13)))
   (Start_13 String (x "1" (str.substr Start_7 StartInt_5 StartInt)))
   (StartBool_3 Bool (true (str.< Start_2 Start_11) (str.suffixof Start_10 Start_8) (str.contains Start_9 Start_5) (= Start_3 Start_7) (<= StartInt_2 StartInt_6)))
   (StartInt_7 Int (0 (str.indexof Start_14 Start_1 StartInt_3) (str.to_int Start_13)))
   (StartInt_1 Int (1 (str.len Start_1)))
   (Start_4 String ("b" "0" (str.++ Start_3 Start) (str.at Start_4 StartInt_1) (ite StartBool Start_3 Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.indexof Start_5 Start_7 StartInt_5) (str.to_int Start_2)))
   (Start_14 String ("" "0" (str.++ Start_13 Start) (str.substr Start_14 StartInt_8 StartInt_9) (str.replace Start_9 Start_8 Start_7) (str.from_int StartInt_8) (ite StartBool_4 Start_5 Start_12)))
   (StartInt_6 Int (1 (str.len Start_4) (str.indexof Start_7 Start_11 StartInt_1)))
   (StartBool_4 Bool (false true (str.< Start_3 Start_10) (str.prefixof Start_11 Start) (= Start_1 Start_9) (= StartInt_6 StartInt_9)))
   (Start_6 String ("1" "0" "a" "" (str.at Start StartInt_5) (str.replace Start_4 Start_6 Start_13) (str.from_int StartInt_6) (ite StartBool Start_15 Start_5)))
   (StartInt_8 Int (0 1 (str.len Start_3) (str.to_int Start_3)))
   (StartInt_3 Int (0 1 (str.len Start_8) (str.indexof Start_10 Start_7 StartInt_2) (str.to_int Start_13)))
   (Start_15 String ("0" (str.at Start_1 StartInt_4) (str.from_int StartInt) (ite StartBool_4 Start_10 Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof "b" y) "a" "b")))

(check-synth)
