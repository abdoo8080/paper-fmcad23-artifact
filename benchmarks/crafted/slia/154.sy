(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_10 String) (Start_1 String) (Start_8 String) (StartBool_5 Bool) (StartBool_2 Bool) (StartBool_4 Bool) (StartBool_1 Bool) (Start_7 String) (StartInt_2 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_9 String) (Start_3 String) (Start_4 String) (Start_5 String) (StartInt_5 Int) (Start_2 String) (StartBool_3 Bool) (Start_6 String))
  ((Start String ("a" (str.substr Start StartInt StartInt_1) (str.replace Start Start_1 Start) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 (str.len Start_5)))
   (StartBool Bool (false (str.contains Start_4 Start_10) (= Start_8 Start_10) (= StartInt_5 StartInt_2) (<= StartInt_2 StartInt_3)))
   (StartInt_1 Int (0 1 (str.indexof Start_3 Start_6 StartInt_5) (str.to_int Start_10)))
   (Start_10 String ("1" (str.at Start_1 StartInt_2)))
   (Start_1 String (y (str.++ Start_4 Start_1) (ite StartBool_1 Start_1 Start_6)))
   (Start_8 String ("1" (str.++ Start Start_8) (str.replace Start Start_4 Start_7) (str.from_int StartInt_1)))
   (StartBool_5 Bool (true false (str.prefixof Start_8 Start_2) (str.suffixof Start_5 Start_4) (str.contains Start_2 Start_7) (= StartInt_1 StartInt_4)))
   (StartBool_2 Bool (true (str.< Start_7 Start_8) (str.prefixof Start_6 Start_4) (str.suffixof Start_5 Start_2) (str.contains Start_9 Start) (= Start_1 Start_3) (= StartInt_3 StartInt_1) (<= StartInt_4 StartInt_4)))
   (StartBool_4 Bool (false (str.< Start_1 Start_4) (str.<= Start_2 Start_2) (= StartInt_3 StartInt_5)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.prefixof Start_2 Start_3) (<= StartInt StartInt)))
   (Start_7 String ("1" "b" (str.++ Start_5 Start_1) (str.from_int StartInt_5) (ite StartBool_4 Start_6 Start_5)))
   (StartInt_2 Int (0 1 (str.indexof Start Start_2 StartInt_3)))
   (StartInt_4 Int (0 1 (str.to_int Start_1)))
   (StartInt_3 Int (1 (str.len Start_3) (str.to_int Start_1)))
   (Start_9 String ("1" "b" "0" "" "a" (str.substr Start_2 StartInt_2 StartInt_3) (str.replace Start_9 Start Start_2) (str.from_int StartInt_4) (ite StartBool_5 Start_5 Start_7)))
   (Start_3 String ("0" "b" (str.++ Start_1 Start) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_3 Start_4 Start_2) (str.from_int StartInt_2) (ite StartBool Start_4 Start_4)))
   (Start_4 String ("a" "0" "b" x (str.++ Start_2 Start) (str.at Start_5 StartInt) (str.substr Start_5 StartInt_2 StartInt_3) (str.replace Start_1 Start Start_5)))
   (Start_5 String (y (str.substr Start_2 StartInt_3 StartInt) (str.from_int StartInt)))
   (StartInt_5 Int (1 0 (str.len Start_7) (str.to_int Start_3)))
   (Start_2 String ("b" "" "0" (str.from_int StartInt_1) (ite StartBool_3 Start Start_2)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_3 StartBool_4) (str.< Start_2 Start_5) (str.<= Start_4 Start_5) (str.prefixof Start_6 Start_1) (= Start_6 Start_6) (= StartInt_2 StartInt_3)))
   (Start_6 String ("" x (str.++ Start_5 Start_2) (str.substr Start_1 StartInt_4 StartInt) (str.replace Start_7 Start_3 Start_6) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.at (str.substr (ite (str.contains x "1") "a" y) 1 (str.indexof x "b" 0)) 1) "0")))

(check-synth)
