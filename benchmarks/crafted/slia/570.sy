(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartBool_7 Bool) (Start_11 String) (StartInt_4 Int) (StartBool_6 Bool) (Start_8 String) (Start_9 String) (StartBool_3 Bool) (StartBool_5 Bool) (Start_3 String) (StartInt_2 Int) (StartInt_6 Int) (Start_5 String) (StartInt_5 Int) (StartInt_3 Int) (StartInt_1 Int) (StartBool_2 Bool) (Start_10 String) (StartBool_1 Bool) (Start_1 String) (Start_4 String) (StartBool_4 Bool) (StartInt_7 Int) (Start_7 String) (Start_2 String) (Start_6 String))
  ((Start String ("b" (str.substr Start StartInt StartInt) (str.replace Start Start Start_1) (str.from_int StartInt)))
   (StartInt Int (0 (str.indexof Start_5 Start_4 StartInt_7)))
   (StartBool Bool (false true (str.< Start Start_5)))
   (Start_12 String ("" (str.++ Start_11 Start) (str.substr Start_6 StartInt_2 StartInt_3) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt) (ite StartBool_3 Start_2 Start_10)))
   (StartBool_7 Bool (true (str.< Start_11 Start_4) (str.<= Start_12 Start_3) (str.prefixof Start_3 Start_10) (str.suffixof Start_8 Start) (str.contains Start_3 Start_3) (= Start_11 Start_7) (<= StartInt_3 StartInt_2)))
   (Start_11 String ("" y))
   (StartInt_4 Int (0))
   (StartBool_6 Bool (false true (str.contains Start_10 Start_4) (<= StartInt StartInt_4)))
   (Start_8 String ("0" "a" (str.++ Start_8 Start_4) (str.at Start StartInt_6) (ite StartBool_3 Start_8 Start_5)))
   (Start_9 String ("b" x (str.at Start_2 StartInt_6) (str.replace Start_5 Start_1 Start_4)))
   (StartBool_3 Bool (true false (not StartBool_7) (str.< Start_5 Start_8) (str.<= Start_11 Start_8) (str.suffixof Start_4 Start) (str.contains Start_7 Start_7) (= Start Start_4) (= StartInt_3 StartInt)))
   (StartBool_5 Bool (false (not StartBool_2) (and StartBool_6 StartBool_2) (str.<= Start_8 Start) (str.prefixof Start_4 Start) (= StartInt_2 StartInt) (<= StartInt_5 StartInt_4)))
   (Start_3 String ("" (str.substr Start_7 StartInt_4 StartInt_1) (ite StartBool_5 Start_5 Start)))
   (StartInt_2 Int (1 0 (str.len Start) (str.indexof Start_2 Start_2 StartInt_3)))
   (StartInt_6 Int (1 (str.to_int Start_1)))
   (Start_5 String ("b" "" x "0" "1" y (str.++ Start_3 Start_7) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_3)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.to_int Start_9)))
   (StartInt_3 Int (0))
   (StartInt_1 Int (1 (str.len Start_2)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.< Start_1 Start_2) (str.prefixof Start_2 Start_3) (str.suffixof Start_3 Start_3) (= Start_4 Start_3) (= StartInt_3 StartInt_3) (<= StartInt_2 StartInt_3)))
   (Start_10 String ("0" (str.++ Start Start_7) (str.at Start StartInt_5) (str.substr Start_3 StartInt_4 StartInt_6) (str.replace Start_8 Start_2 Start_8) (str.from_int StartInt_5)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_1) (= Start_2 Start) (<= StartInt_1 StartInt_3)))
   (Start_1 String ("0" (str.++ Start_1 Start_2) (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt_2) (str.from_int StartInt_1)))
   (Start_4 String (x "b" "1" (str.++ Start_2 Start_4) (str.substr Start_5 StartInt_2 StartInt) (str.replace Start_4 Start_6 Start_6) (ite StartBool_4 Start_3 Start)))
   (StartBool_4 Bool (false (str.suffixof Start_6 Start_2) (str.contains Start_7 Start_4)))
   (StartInt_7 Int (1 (str.len Start_5) (str.indexof Start_4 Start_4 StartInt_4) (str.to_int Start_2)))
   (Start_7 String ("1" (str.++ Start_5 Start_3) (str.at Start_2 StartInt_2) (str.substr Start StartInt StartInt_3) (ite StartBool Start_7 Start_3)))
   (Start_2 String (x (str.at Start_2 StartInt_3) (str.substr Start StartInt StartInt) (ite StartBool_1 Start Start)))
   (Start_6 String ("" (str.substr Start_4 StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "1" y) "1" "a")))

(check-synth)
