(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_21 String) (Start_23 String) (StartInt_8 Int) (StartBool_9 Bool) (Start_24 String) (Start_1 String) (StartInt_1 Int) (Start_2 String) (Start_18 String) (StartInt_7 Int) (Start_3 String) (StartInt_9 Int) (StartBool_6 Bool) (StartBool_3 Bool) (Start_6 String) (Start_14 String) (Start_9 String) (StartBool_4 Bool) (StartBool_2 Bool) (Start_15 String) (Start_7 String) (StartBool_7 Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_22 String) (Start_17 String) (StartBool_1 Bool) (Start_10 String) (Start_5 String) (Start_19 String) (Start_13 String) (StartBool_5 Bool) (Start_4 String) (Start_11 String) (StartInt_2 Int) (Start_12 String) (StartInt_5 Int) (Start_20 String) (StartBool_8 Bool) (Start_16 String) (Start_8 String) (StartInt_6 Int))
  ((Start String ("a" (str.++ Start_1 Start) (str.at Start StartInt_1) (str.replace Start_2 Start_3 Start_1) (str.from_int StartInt) (ite StartBool Start Start)))
   (StartInt Int (0 (str.indexof Start_12 Start_8 StartInt_5) (str.to_int Start_19)))
   (StartBool Bool (true (and StartBool_2 StartBool_3) (str.< Start_10 Start_6) (str.prefixof Start Start_20) (<= StartInt StartInt_1)))
   (Start_21 String (x (str.++ Start_11 Start_6) (str.at Start_9 StartInt_2) (str.substr Start_13 StartInt_2 StartInt_1) (str.replace Start_10 Start_14 Start_24) (str.from_int StartInt_8)))
   (Start_23 String (y (str.at Start_24 StartInt_4) (str.substr Start_11 StartInt_8 StartInt_9)))
   (StartInt_8 Int (1 0 (str.to_int Start_21)))
   (StartBool_9 Bool (true false (and StartBool_9 StartBool_9) (str.< Start_8 Start_19) (str.<= Start_12 Start_4) (str.prefixof Start_4 Start_23) (str.suffixof Start_3 Start_14) (str.contains Start_6 Start_1) (<= StartInt_8 StartInt_2)))
   (Start_24 String ("a" "" y "b" (str.substr Start_6 StartInt_4 StartInt_4) (str.replace Start_19 Start_14 Start_12) (ite StartBool Start_11 Start)))
   (Start_1 String ("a" "0" (str.++ Start_3 Start_7) (str.at Start_16 StartInt_4) (str.substr Start_18 StartInt StartInt) (str.replace Start_17 Start_17 Start_2) (ite StartBool_4 Start_5 Start_8)))
   (StartInt_1 Int (0 1 (str.len Start_10) (str.indexof Start_1 Start_1 StartInt_6)))
   (Start_2 String ("1" y "b" "a" (str.substr Start_14 StartInt_7 StartInt_1) (ite StartBool Start_5 Start_15)))
   (Start_18 String ("1" y (str.++ Start_1 Start_4) (str.at Start_11 StartInt_3) (str.from_int StartInt_1) (ite StartBool_7 Start_5 Start_9)))
   (StartInt_7 Int (1 (str.indexof Start_18 Start_11 StartInt)))
   (Start_3 String ("b" "a" "0" x "" (str.substr Start_4 StartInt StartInt) (str.replace Start_3 Start_5 Start_5) (str.from_int StartInt_1)))
   (StartInt_9 Int (0 (str.len Start_17) (str.to_int Start_19)))
   (StartBool_6 Bool (true false (and StartBool_2 StartBool_8) (str.< Start_6 Start_14) (= StartInt_5 StartInt_7) (<= StartInt_1 StartInt_5)))
   (StartBool_3 Bool (false true (str.< Start_3 Start_1) (str.<= Start_7 Start_8) (str.prefixof Start_1 Start_3) (str.suffixof Start_8 Start_5)))
   (Start_6 String ("a" (str.++ Start_1 Start) (str.substr Start StartInt_1 StartInt_2)))
   (Start_14 String ("0" "b" "" (ite StartBool_1 Start_9 Start_12)))
   (Start_9 String ("" (str.++ Start_4 Start_2) (str.substr Start_8 StartInt_1 StartInt_3) (ite StartBool_4 Start_5 Start_6)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool StartBool_3) (str.< Start_6 Start_7) (str.<= Start_8 Start_6) (str.prefixof Start_8 Start_7) (str.suffixof Start_4 Start_3) (str.contains Start_3 Start_2) (= Start_5 Start_1)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_3) (str.< Start_6 Start) (str.suffixof Start_4 Start_7) (= Start_1 Start_4)))
   (Start_15 String ("1" (str.at Start_6 StartInt_5) (str.replace Start_2 Start_5 Start_14) (ite StartBool_1 Start_16 Start_6)))
   (Start_7 String ("" (str.++ Start_9 Start_9) (str.at Start_8 StartInt) (str.replace Start_9 Start Start_5)))
   (StartBool_7 Bool (false (not StartBool_5) (str.< Start_4 Start_2) (str.<= Start_13 Start_9) (str.contains Start_1 Start_12)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.to_int Start_3)))
   (StartInt_4 Int (0 (str.len Start_3)))
   (Start_22 String ("a" (str.at Start_23 StartInt_4) (str.substr Start_22 StartInt_5 StartInt_8)))
   (Start_17 String ("" (str.at Start StartInt_6) (str.from_int StartInt_3)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_2) (str.suffixof Start_7 Start_6) (str.contains Start_2 Start_3) (= StartInt_3 StartInt_4) (<= StartInt_4 StartInt_2)))
   (Start_10 String (y (str.++ Start_9 Start_8) (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start_12 Start_4 Start_2) (str.from_int StartInt_2) (ite StartBool_5 Start_9 Start_9)))
   (Start_5 String (x "1" y (str.++ Start_3 Start) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_6 Start_7 Start_1) (ite StartBool_1 Start_7 Start_5)))
   (Start_19 String ("b" (str.++ Start_11 Start_14) (str.replace Start_2 Start_7 Start_11) (ite StartBool_3 Start_4 Start_19)))
   (Start_13 String ("a" "b" x (str.++ Start_13 Start_9) (str.substr Start_12 StartInt_2 StartInt_3) (str.replace Start_14 Start_15 Start_8) (str.from_int StartInt) (ite StartBool_8 Start_6 Start_2)))
   (StartBool_5 Bool (true (and StartBool_6 StartBool_7) (str.contains Start_11 Start_2) (= Start_7 Start_8) (= StartInt_1 StartInt_1)))
   (Start_4 String (y (str.substr Start_2 StartInt StartInt_1) (str.replace Start_10 Start_11 Start_7) (str.from_int StartInt_3)))
   (Start_11 String ("" (ite StartBool_4 Start_12 Start_7)))
   (StartInt_2 Int (1 (str.indexof Start_8 Start_7 StartInt_1)))
   (Start_12 String ("b" "a" "" y x "0" "1" (str.++ Start_11 Start_7) (str.replace Start_4 Start_4 Start_7) (str.from_int StartInt_3)))
   (StartInt_5 Int (0 1 (str.len Start_14) (str.indexof Start_15 Start_17 StartInt_6)))
   (Start_20 String ("" x y "0" (str.++ Start_20 Start_8) (str.replace Start_21 Start_22 Start_17) (str.from_int StartInt_3) (ite StartBool_9 Start_1 Start_20)))
   (StartBool_8 Bool (false true (not StartBool_3) (str.<= Start_1 Start_3) (= Start_1 Start_4) (= StartInt StartInt_1) (<= StartInt StartInt_4)))
   (Start_16 String (y (str.at Start_14 StartInt_3) (ite StartBool_1 Start_7 Start_15)))
   (Start_8 String ("1" "b" "" (str.++ Start_5 Start_2) (str.substr Start_2 StartInt_3 StartInt_2) (str.replace Start_5 Start_5 Start_4) (ite StartBool_4 Start_1 Start)))
   (StartInt_6 Int (0 (str.len Start_13) (str.indexof Start_17 Start_7 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.replace "1" x "a"))))

(check-synth)
