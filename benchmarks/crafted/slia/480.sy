(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_5 Int) (Start_1 String) (Start_9 String) (Start_5 String) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_1 Int) (Start_3 String) (Start_10 String) (Start_7 String) (StartInt_4 Int) (Start_6 String) (Start_8 String) (StartInt_3 Int) (Start_4 String) (Start_2 String))
  ((Start String ("1" (str.++ Start Start_1) (str.replace Start_1 Start_2 Start_1) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (1 0 (str.indexof Start_1 Start StartInt_5) (str.to_int Start_5)))
   (StartBool Bool (true false (and StartBool_1 StartBool_1) (str.<= Start_2 Start_3) (str.prefixof Start_4 Start_8) (str.suffixof Start_9 Start_6) (str.contains Start_4 Start_6) (= Start_2 Start_6) (= StartInt StartInt_2) (<= StartInt_4 StartInt_6)))
   (StartInt_6 Int (1 (str.len Start_5)))
   (StartInt_5 Int (0 1 (str.indexof Start_2 Start_1 StartInt_2)))
   (Start_1 String (x (str.++ Start_9 Start_7) (str.at Start_4 StartInt) (str.replace Start_10 Start_2 Start_8) (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start_3)))
   (Start_9 String ("b" "1" "0" (str.at Start_4 StartInt_2) (str.replace Start_4 Start_9 Start_9) (str.from_int StartInt_2)))
   (Start_5 String ("1" (str.++ Start Start_6) (str.at Start_7 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start_4 Start_3 Start_4) (str.from_int StartInt_4) (ite StartBool Start_7 Start_5)))
   (StartBool_1 Bool (true false (str.<= Start Start) (str.contains Start_2 Start_3) (= Start_4 Start_1)))
   (StartInt_2 Int (0 (str.len Start)))
   (StartInt_1 Int (1 0 (str.len Start_3)))
   (Start_3 String ("1" (str.substr Start StartInt_2 StartInt_3) (str.replace Start_5 Start_2 Start)))
   (Start_10 String ("a" (str.substr Start_8 StartInt_1 StartInt_2) (str.from_int StartInt_5)))
   (Start_7 String ("b" x "0" (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_5 Start_2 Start_4) (str.from_int StartInt_2)))
   (StartInt_4 Int (1 (str.len Start_5) (str.to_int Start_4)))
   (Start_6 String (x "0" (str.at Start_1 StartInt_1) (str.substr Start_5 StartInt StartInt_2) (str.replace Start Start_8 Start_2)))
   (Start_8 String ("0" "" (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_1 Start_3 Start_2) (str.from_int StartInt_2) (ite StartBool Start_5 Start_8)))
   (StartInt_3 Int (1 0))
   (Start_4 String ("0" "" "b" (str.++ Start_3 Start_3) (str.substr Start_4 StartInt StartInt_1) (str.from_int StartInt_2)))
   (Start_2 String ("1" "a" (str.at Start_4 StartInt_3) (str.replace Start_7 Start_5 Start_9) (ite StartBool_1 Start_9 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "a" "")))

(check-synth)
