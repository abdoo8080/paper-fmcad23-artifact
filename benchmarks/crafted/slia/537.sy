(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_6 String) (StartInt_7 Int) (StartInt_6 Int) (StartInt_5 Int) (Start_7 String) (Start_1 String) (StartInt_1 Int) (Start_12 String) (StartBool_3 Bool) (Start_2 String) (Start_5 String) (StartBool_1 Bool) (Start_11 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_4 String) (Start_10 String) (Start_3 String) (StartInt_3 Int) (Start_9 String) (StartInt_4 Int))
  ((Start String ("b"))
   (StartInt Int (1 (str.len Start_1) (str.to_int Start_1)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_3 StartBool_1) (str.suffixof Start_2 Start) (str.contains Start Start_5) (= Start_6 Start_9) (= StartInt_4 StartInt_7) (<= StartInt_2 StartInt_7)))
   (Start_8 String (x (str.at Start StartInt) (str.replace Start Start_9 Start_2) (str.from_int StartInt_1) (ite StartBool_3 Start_3 Start_6)))
   (Start_6 String ("" "1" (str.at Start_8 StartInt) (str.substr Start_7 StartInt_4 StartInt_6) (str.replace Start_8 Start_7 Start_2)))
   (StartInt_7 Int (0 1 (str.indexof Start_8 Start_9 StartInt_7)))
   (StartInt_6 Int (1 0 (str.indexof Start_7 Start StartInt_3)))
   (StartInt_5 Int (0 (str.len Start) (str.indexof Start_5 Start_7 StartInt_3)))
   (Start_7 String (y (str.at Start_4 StartInt_1) (str.substr Start_7 StartInt_5 StartInt_6) (ite StartBool_1 Start_3 Start_3)))
   (Start_1 String (y (str.++ Start_1 Start) (str.at Start_1 StartInt) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_1) (ite StartBool Start_1 Start_1)))
   (StartInt_1 Int (0))
   (Start_12 String ("1" (str.++ Start_10 Start_3)))
   (StartBool_3 Bool (true false (not StartBool_1) (str.< Start Start) (str.prefixof Start Start_10) (str.suffixof Start_10 Start_4) (str.contains Start_2 Start_1) (= StartInt StartInt_2)))
   (Start_2 String ("1" (str.from_int StartInt) (ite StartBool_1 Start Start)))
   (Start_5 String (y "0" "1" "" x "b" "a" (str.replace Start Start_4 Start_4) (str.from_int StartInt)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.<= Start_2 Start) (str.prefixof Start_1 Start_3) (str.suffixof Start_2 Start_3) (str.contains Start_2 Start_4) (= Start_4 Start_2) (= StartInt_2 StartInt_2)))
   (Start_11 String ("0" y (str.++ Start_9 Start_8) (str.substr Start_8 StartInt_1 StartInt_3) (ite StartBool_3 Start_12 Start)))
   (StartInt_2 Int (1 0 (str.indexof Start_4 Start_4 StartInt_1)))
   (StartBool_2 Bool (false (str.< Start_1 Start_3) (str.contains Start_6 Start) (= StartInt_5 StartInt_2)))
   (Start_4 String ("" "1" y (str.replace Start_3 Start Start_5) (str.from_int StartInt_3)))
   (Start_10 String ("1" "0" (str.++ Start_7 Start_11) (str.substr Start_5 StartInt_4 StartInt_2) (str.replace Start_9 Start_1 Start_4) (str.from_int StartInt_2)))
   (Start_3 String ("0" y (str.++ Start_2 Start_1) (str.substr Start_3 StartInt_1 StartInt_4) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.len Start_5) (str.indexof Start_3 Start_4 StartInt_3)))
   (Start_9 String ("a" "1" x (str.at Start_4 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_4 Int (1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "a" (str.indexof y "b" 0))))

(check-synth)
