(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_15 String) (StartInt_1 Int) (Start_11 String) (StartInt_2 Int) (Start_12 String) (StartInt_5 Int) (Start_1 String) (Start_10 String) (Start_13 String) (StartBool_2 Bool) (Start_4 String) (StartInt_6 Int) (Start_2 String) (Start_5 String) (Start_6 String) (Start_8 String) (StartInt_3 Int) (Start_3 String) (StartBool_1 Bool) (StartBool_3 Bool) (Start_7 String) (Start_14 String) (StartInt_4 Int) (Start_9 String))
  ((Start String (x "1" (str.at Start_1 StartInt_1) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (true false (not StartBool_1) (str.< Start_6 Start_10) (str.<= Start_10 Start_3) (str.contains Start_15 Start_10) (= StartInt_7 StartInt_6) (<= StartInt StartInt_3)))
   (StartInt_7 Int (1 0 (str.len Start_3) (str.indexof Start_8 Start_1 StartInt_2) (str.to_int Start_7)))
   (Start_15 String ("a" (str.from_int StartInt)))
   (StartInt_1 Int (0 (str.indexof Start_15 Start_12 StartInt_4) (str.to_int Start_10)))
   (Start_11 String ("1" "0" x "" "b" (str.at Start_5 StartInt_3) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_2 Int (1 0 (str.indexof Start_12 Start_14 StartInt_2)))
   (Start_12 String ("b" (str.substr Start_8 StartInt_5 StartInt_6) (str.from_int StartInt)))
   (StartInt_5 Int (1 (str.len Start_13)))
   (Start_1 String ("b" "a" (str.++ Start_10 Start_4) (str.substr Start_1 StartInt_4 StartInt) (str.from_int StartInt_5)))
   (Start_10 String ("" x "a" "0" y "b" "1" (str.++ Start_11 Start_3) (str.at Start_8 StartInt_4) (str.substr Start_12 StartInt_5 StartInt_5) (str.from_int StartInt_5) (ite StartBool_2 Start_13 Start_7)))
   (Start_13 String ("1" "a" (str.replace Start_3 Start_12 Start_13) (ite StartBool_2 Start_10 Start_6)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_3 StartBool_2) (str.<= Start_3 Start_1) (str.contains Start_2 Start_7) (= Start_1 Start_10)))
   (Start_4 String ("0" (str.++ Start_3 Start_5) (str.at Start_5 StartInt_1)))
   (StartInt_6 Int (1 0 (str.indexof Start_11 Start_8 StartInt_2)))
   (Start_2 String ("b" (str.at Start_2 StartInt_2) (str.replace Start_1 Start_3 Start_4)))
   (Start_5 String ("a" "b" y x (str.++ Start_2 Start_5) (str.at Start_4 StartInt_1) (str.substr Start_3 StartInt_3 StartInt_1) (str.from_int StartInt) (ite StartBool Start_6 Start_6)))
   (Start_6 String ("1" y x "b" (str.at Start_2 StartInt_2) (str.from_int StartInt_2)))
   (Start_8 String ("" (str.++ Start_9 Start_5) (str.at Start_7 StartInt_2) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_1 Start_9 Start_8) (str.from_int StartInt_4)))
   (StartInt_3 Int (0 1 (str.len Start_4)))
   (Start_3 String ("b" "" "a" (str.at Start_1 StartInt) (str.replace Start_5 Start_3 Start_6) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_5)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_2) (str.< Start Start_2) (str.<= Start_1 Start_6) (str.suffixof Start_7 Start_7)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.< Start_5 Start) (str.<= Start_4 Start_6) (str.suffixof Start_8 Start) (str.contains Start_7 Start_6) (= Start_5 Start_9) (<= StartInt_3 StartInt_2)))
   (Start_7 String ("" (str.from_int StartInt_3) (ite StartBool_3 Start_8 Start_4)))
   (Start_14 String (x "0"))
   (StartInt_4 Int (1 (str.len Start) (str.indexof Start_5 Start_6 StartInt_4) (str.to_int Start_5)))
   (Start_9 String (x "1" (str.substr Start StartInt_2 StartInt_3) (str.replace Start_4 Start_1 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace x "a" y) "b" "1")))

(check-synth)
