(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_9 String) (Start_7 String) (StartBool_5 Bool) (Start_10 String) (StartBool_4 Bool) (StartInt_6 Int) (StartBool_2 Bool) (Start_12 String) (StartInt_4 Int) (Start_11 String) (Start_2 String) (StartBool_3 Bool) (Start_3 String) (StartInt_9 Int) (Start_1 String) (Start_5 String) (StartInt_5 Int) (StartInt_2 Int) (Start_8 String) (StartInt_8 Int) (StartBool_1 Bool) (Start_4 String) (StartInt_7 Int) (StartInt_3 Int) (Start_6 String) (Start_13 String) (StartInt_1 Int) (StartInt_10 Int) (Start_14 String))
  ((Start String ("b" (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_8) (str.indexof Start_2 Start_14 StartInt_3)))
   (StartBool Bool (true (<= StartInt_6 StartInt_10)))
   (Start_15 String ("0" (str.replace Start_10 Start_2 Start_8) (ite StartBool_1 Start_13 Start_15)))
   (Start_9 String ("b" (str.at Start StartInt_5) (str.substr Start_5 StartInt_5 StartInt) (str.replace Start Start_5 Start_1) (str.from_int StartInt_4) (ite StartBool_4 Start_2 Start_2)))
   (Start_7 String (x "1" (str.++ Start_8 Start_3) (str.at Start_7 StartInt_3) (str.substr Start_2 StartInt_4 StartInt_1) (str.replace Start_7 Start_1 Start_7) (ite StartBool_2 Start_4 Start_1)))
   (StartBool_5 Bool (true false (and StartBool StartBool_5) (str.< Start_12 Start_11) (str.<= Start_8 Start_12) (= StartInt_8 StartInt_1)))
   (Start_10 String ("b" (str.at Start_3 StartInt_1) (str.replace Start_10 Start_3 Start)))
   (StartBool_4 Bool (false true (not StartBool_3) (str.< Start_9 Start_3) (str.<= Start_7 Start_10) (str.contains Start_2 Start_4) (<= StartInt StartInt_2)))
   (StartInt_6 Int (1 0))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool StartBool_3) (str.<= Start_6 Start_2) (str.contains Start_5 Start) (= Start_6 Start_8) (<= StartInt_1 StartInt_4)))
   (Start_12 String ("a" y (str.++ Start_3 Start_6) (str.substr Start_3 StartInt_8 StartInt_7) (ite StartBool_3 Start Start_6)))
   (StartInt_4 Int (1 0))
   (Start_11 String (x (str.++ Start_7 Start_4) (str.substr Start_11 StartInt_6 StartInt_3) (str.replace Start_10 Start_1 Start_3) (str.from_int StartInt_2)))
   (Start_2 String (y "0" (str.at Start StartInt) (str.replace Start_3 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_2)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_3 StartBool_1) (str.prefixof Start_8 Start_1) (str.suffixof Start_3 Start_4) (<= StartInt StartInt_1)))
   (Start_3 String ("" (str.++ Start_4 Start_1) (str.at Start_1 StartInt_3) (str.replace Start_2 Start_5 Start_6)))
   (StartInt_9 Int (1 0 (str.to_int Start_5)))
   (Start_1 String ("b" y x "1" (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start Start_2)))
   (Start_5 String ("0" (str.replace Start_10 Start_6 Start_8) (str.from_int StartInt_7) (ite StartBool_5 Start_5 Start_3)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_4 StartInt_3) (str.to_int Start_7)))
   (StartInt_2 Int (1 (str.to_int Start_2)))
   (Start_8 String ("1" "a" (str.++ Start_11 Start_5) (str.at Start_9 StartInt_5)))
   (StartInt_8 Int (1 0 (str.indexof Start_9 Start_11 StartInt_9)))
   (StartBool_1 Bool (true false (not StartBool_4) (str.< Start_1 Start_1) (str.prefixof Start_6 Start_8) (str.suffixof Start_1 Start_11) (= Start_10 Start_5) (= StartInt_4 StartInt_4)))
   (Start_4 String ("0" (str.substr Start_13 StartInt_7 StartInt_9) (str.replace Start_13 Start_13 Start_11) (str.from_int StartInt_3)))
   (StartInt_7 Int (1 (str.len Start_5) (str.to_int Start_2)))
   (StartInt_3 Int (0 1 (str.to_int Start_12)))
   (Start_6 String (x "1" (str.++ Start_1 Start_6) (str.at Start_7 StartInt_4) (str.from_int StartInt_1)))
   (Start_13 String ("0" "a" (str.++ Start_6 Start_1) (str.substr Start_6 StartInt StartInt_9) (str.from_int StartInt_6) (ite StartBool_4 Start_1 Start_1)))
   (StartInt_1 Int (0 (str.indexof Start Start_14 StartInt_7)))
   (StartInt_10 Int (1 0 (str.to_int Start_8)))
   (Start_14 String ("" (str.substr Start_1 StartInt_5 StartInt) (str.replace Start_10 Start_2 Start_15) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof x "0") x "b")))

(check-synth)
