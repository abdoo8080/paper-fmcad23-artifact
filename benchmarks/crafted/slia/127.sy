(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_8 Int) (Start_8 String) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_6 Int) (StartBool_4 Bool) (Start_1 String) (StartInt_1 Int) (Start_6 String) (Start_3 String) (StartBool_1 Bool) (Start_4 String) (Start_2 String) (StartInt_7 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_5 String) (StartBool_3 Bool) (StartInt_5 Int) (Start_7 String))
  ((Start String ("1" "b" (str.at Start StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start Start_1 Start_1) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_1)))
   (StartBool Bool (false (not StartBool_4) (str.prefixof Start_4 Start_5) (= StartInt_1 StartInt_5) (<= StartInt_6 StartInt_5)))
   (Start_9 String ("0" "b" "" (str.at Start_8 StartInt_5) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_3)))
   (StartInt_8 Int (1))
   (Start_8 String (x "b" "a" (str.++ Start_5 Start_3) (str.at Start_4 StartInt_7) (str.substr Start_7 StartInt_8 StartInt)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_8 StartInt_7) (str.to_int Start_7)))
   (StartBool_2 Bool (true (not StartBool_3) (str.< Start_1 Start_4) (str.prefixof Start_1 Start_7) (<= StartInt_3 StartInt_2)))
   (StartInt_6 Int (1 (str.len Start) (str.indexof Start_4 Start_1 StartInt_3)))
   (StartBool_4 Bool (false true (and StartBool StartBool_3) (str.< Start_6 Start) (str.suffixof Start Start_9) (= Start Start) (= StartInt StartInt_3) (<= StartInt_3 StartInt_5)))
   (Start_1 String ("0" "a" (str.++ Start Start_1) (str.from_int StartInt)))
   (StartInt_1 Int (0 1 (str.indexof Start Start_1 StartInt_1) (str.to_int Start_2)))
   (Start_6 String ("" y (str.++ Start_1 Start_4) (str.at Start_3 StartInt_4) (str.replace Start_4 Start Start_1) (str.from_int StartInt_5) (ite StartBool Start_4 Start_5)))
   (Start_3 String ("a" (str.at Start_2 StartInt_2) (str.substr Start_3 StartInt StartInt_3) (ite StartBool_1 Start_1 Start_2)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start_2 Start_4) (str.<= Start Start_2) (= Start_5 Start_5) (<= StartInt_4 StartInt_3)))
   (Start_4 String ("1" "a" (str.++ Start_1 Start_2) (str.at Start_2 StartInt_6) (str.substr Start_6 StartInt_7 StartInt)))
   (Start_2 String (x (str.substr Start StartInt_2 StartInt_1) (str.from_int StartInt_3) (ite StartBool Start_3 Start_3)))
   (StartInt_7 Int (1 0 (str.to_int Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_3) (str.indexof Start_1 Start_3 StartInt_4) (str.to_int Start)))
   (StartInt_3 Int (0 1 (str.indexof Start_3 Start_5 StartInt_7)))
   (Start_5 String (y (str.++ Start_2 Start_4) (str.replace Start Start Start_6)))
   (StartBool_3 Bool (false (not StartBool_1) (str.< Start_6 Start_7) (str.prefixof Start_1 Start_1) (str.suffixof Start_7 Start_1) (str.contains Start Start_7) (<= StartInt_6 StartInt_1)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_2 Start_5 StartInt_1)))
   (Start_7 String ("" (str.++ Start_5 Start_4) (str.at Start_3 StartInt) (str.replace Start_1 Start_7 Start_3) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ x (str.replace x (str.replace "1" "" "0") ""))))

(check-synth)
