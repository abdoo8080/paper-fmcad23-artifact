(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (StartInt_2 Int) (Start_2 String) (Start_4 String) (Start_3 String) (Start_1 String) (StartInt_1 Int))
  ((Start String (x y "" "b" (str.++ Start Start_1) (str.replace Start_1 Start_1 Start) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.to_int Start_1)))
   (StartBool Bool (true false (str.< Start_2 Start_2) (str.<= Start_1 Start_3) (str.prefixof Start Start) (= StartInt StartInt_3)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.to_int Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_1 Start_2 StartInt)))
   (Start_2 String ("a" "1" (str.++ Start_1 Start) (str.substr Start StartInt_2 StartInt_2)))
   (Start_4 String (x "0" (str.++ Start_4 Start_4) (str.replace Start Start_4 Start_2) (str.from_int StartInt_2)))
   (Start_3 String (x (str.at Start_1 StartInt_2) (str.from_int StartInt)))
   (Start_1 String ("b" "0" "1" (str.from_int StartInt_2) (ite StartBool Start_2 Start_3)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "b" "a")))

(check-synth)
