(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (StartInt_11 Int) (Start_13 String) (Start_12 String) (StartInt_7 Int) (StartInt_5 Int) (StartInt_8 Int) (Start_9 String) (Start_1 String) (StartInt_10 Int) (Start_7 String) (StartBool_2 Bool) (Start_2 String) (StartInt_1 Int) (Start_10 String) (StartBool_1 Bool) (StartInt_6 Int) (StartInt_9 Int) (Start_3 String) (Start_8 String) (Start_5 String) (StartInt_2 Int) (Start_6 String) (Start_4 String) (StartInt_4 Int) (Start_11 String))
  ((Start String ("b" (str.replace Start Start_1 Start) (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start_11) (str.indexof Start_5 Start_10 StartInt_9) (str.to_int Start_1)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.<= Start_13 Start_10) (str.contains Start_1 Start_6) (= StartInt_11 StartInt_4)))
   (StartInt_3 Int (0 (str.len Start)))
   (StartInt_11 Int (1 0))
   (Start_13 String ("b" (str.++ Start_2 Start_12) (str.at Start_11 StartInt_7) (str.substr Start_5 StartInt_8 StartInt_7) (str.from_int StartInt_3)))
   (Start_12 String ("0" x (str.at Start_13 StartInt_4)))
   (StartInt_7 Int (0 (str.indexof Start_12 Start_6 StartInt_1)))
   (StartInt_5 Int (0 1 (str.to_int Start)))
   (StartInt_8 Int (0 (str.len Start) (str.indexof Start_6 Start_8 StartInt_9)))
   (Start_9 String ("b" "0" x "1" (str.++ Start_1 Start_7) (str.substr Start_2 StartInt_5 StartInt_6) (str.from_int StartInt_7)))
   (Start_1 String (x (str.++ Start_2 Start_1) (str.at Start_2 StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt_10 Int (1 (str.len Start_9)))
   (Start_7 String ("1" x (str.replace Start_1 Start Start) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false true (str.< Start_12 Start_12) (str.<= Start_3 Start_7) (str.prefixof Start_5 Start_12) (str.suffixof Start_8 Start_10) (<= StartInt_1 StartInt_3)))
   (Start_2 String (y (str.++ Start_1 Start_2) (str.at Start_3 StartInt_1) (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.to_int Start_1)))
   (Start_10 String (x y (str.at Start_11 StartInt) (str.substr Start StartInt StartInt) (ite StartBool Start_6 Start_8)))
   (StartBool_1 Bool (false true (str.<= Start_4 Start_5) (str.contains Start_7 Start) (= StartInt_8 StartInt_5)))
   (StartInt_6 Int (0 (str.len Start_12) (str.indexof Start_7 Start_5 StartInt_10) (str.to_int Start_10)))
   (StartInt_9 Int (1 (str.len Start) (str.indexof Start_2 Start StartInt_9) (str.to_int Start_6)))
   (Start_3 String (y "0" (str.++ Start_1 Start_2) (str.replace Start Start_4 Start_5)))
   (Start_8 String ("b" (str.++ Start_2 Start_6) (str.at Start_3 StartInt_1) (str.substr Start_4 StartInt_4 StartInt_2) (str.replace Start_8 Start_9 Start_6) (str.from_int StartInt_2) (ite StartBool Start_5 Start_10)))
   (Start_5 String ("1" y (str.++ Start_4 Start_2) (str.at Start_3 StartInt) (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_4 Start_4 Start_5)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_2 StartInt) (str.to_int Start)))
   (Start_6 String ("b" (str.replace Start_8 Start_6 Start_2) (ite StartBool Start_2 Start)))
   (Start_4 String (y (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_6 Start_7 Start_6) (str.from_int StartInt_2) (ite StartBool Start Start)))
   (StartInt_4 Int (1 0 (str.to_int Start_9)))
   (Start_11 String ("a" "0" x (str.at Start StartInt_2) (str.replace Start_8 Start_6 Start_4) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.at (str.++ x "a") 1)))))

(check-synth)
