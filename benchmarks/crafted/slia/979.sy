(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_7 String) (Start_5 String) (StartBool_4 Bool) (StartInt_1 Int) (StartInt_6 Int) (Start_13 String) (StartBool_2 Bool) (Start_2 String) (StartInt_9 Int) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_5 Int) (StartBool_3 Bool) (Start_11 String) (Start_10 String) (Start_4 String) (Start_3 String) (StartInt_7 Int) (Start_9 String) (StartInt_3 Int) (Start_12 String) (Start_1 String) (StartBool_5 Bool) (StartInt_8 Int) (Start_6 String) (Start_14 String))
  ((Start String ("1" "" "0" "b" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.replace Start_3 Start_3 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_1)))
   (StartInt Int (0 1))
   (StartBool Bool (true (str.<= Start_6 Start_8) (str.prefixof Start_8 Start_4) (= StartInt_8 StartInt_9) (<= StartInt_7 StartInt_3)))
   (Start_8 String ("" (str.substr Start_8 StartInt_5 StartInt_3)))
   (Start_7 String ("1" "a" (str.replace Start_6 Start_6 Start_3) (ite StartBool Start_3 Start_6)))
   (Start_5 String ("b" "" (str.++ Start_6 Start_5) (str.at Start_2 StartInt_4)))
   (StartBool_4 Bool (false true (str.< Start_1 Start_8) (str.prefixof Start_3 Start_7) (str.suffixof Start_6 Start_7) (= Start_2 Start_1)))
   (StartInt_1 Int (0))
   (StartInt_6 Int (0 1))
   (Start_13 String ("" (str.++ Start_7 Start_4) (str.at Start_14 StartInt_8) (str.from_int StartInt_5)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_3) (str.< Start_1 Start_1) (str.prefixof Start_4 Start_2) (= StartInt_2 StartInt_3)))
   (Start_2 String (x y "1" (str.++ Start_7 Start_1) (str.at Start_14 StartInt_7) (str.substr Start_8 StartInt StartInt_1) (str.from_int StartInt_1)))
   (StartInt_9 Int (1 0 (str.to_int Start_8)))
   (StartInt_2 Int (0 (str.indexof Start_5 Start_2 StartInt_3) (str.to_int Start_1)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_1) (str.< Start_3 Start_2) (= Start_1 Start_1) (<= StartInt StartInt_1)))
   (StartInt_4 Int (1 (str.len Start) (str.to_int Start_2)))
   (StartInt_5 Int (0 1 (str.len Start_2) (str.to_int Start_3)))
   (StartBool_3 Bool (false (str.< Start_4 Start_5) (str.prefixof Start_4 Start_8) (str.contains Start_9 Start_10) (= Start Start) (= StartInt_4 StartInt_2)))
   (Start_11 String ("" (str.++ Start_1 Start_3) (str.replace Start_4 Start_6 Start_6)))
   (Start_10 String (y (str.++ Start_11 Start_3) (str.substr Start_6 StartInt_5 StartInt) (str.replace Start_11 Start_9 Start_6) (str.from_int StartInt_6)))
   (Start_4 String (y (str.at Start_2 StartInt_2) (str.substr Start_5 StartInt StartInt) (str.from_int StartInt) (ite StartBool_4 Start_7 Start)))
   (Start_3 String ("" (str.++ Start_4 Start_8) (str.at Start_12 StartInt) (str.substr Start_10 StartInt_3 StartInt) (ite StartBool_5 Start_5 Start_11)))
   (StartInt_7 Int (1 (str.len Start_12)))
   (Start_9 String ("" x y "0" "1" (str.substr Start_6 StartInt_6 StartInt) (str.replace Start_12 Start_7 Start_7)))
   (StartInt_3 Int (1 (str.indexof Start_1 Start StartInt_3) (str.to_int Start_1)))
   (Start_12 String ("a" x (str.replace Start_8 Start_2 Start_6)))
   (Start_1 String ("b" (str.++ Start_4 Start_6) (str.replace Start_13 Start_12 Start_6) (str.from_int StartInt_4)))
   (StartBool_5 Bool (true false (str.prefixof Start_12 Start_8) (str.suffixof Start_9 Start_13) (str.contains Start_13 Start_11) (= Start_6 Start_8) (= StartInt_7 StartInt_1)))
   (StartInt_8 Int (0 (str.to_int Start_8)))
   (Start_6 String ("0" "" (str.at Start StartInt_3) (ite StartBool_1 Start_3 Start_1)))
   (Start_14 String ("b" (str.replace Start Start_14 Start_13) (ite StartBool_5 Start_5 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "a" y "0") 0)))

(check-synth)
