(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_1 String) (StartBool_4 Bool) (Start_10 String) (Start_11 String) (StartInt_8 Int) (StartBool_3 Bool) (Start_8 String) (StartBool_1 Bool) (Start_13 String) (StartInt_3 Int) (StartInt_7 Int) (StartInt_4 Int) (StartInt_1 Int) (Start_14 String) (StartInt_6 Int) (Start_2 String) (Start_3 String) (Start_5 String) (Start_4 String) (Start_9 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_7 String) (Start_6 String) (StartInt_5 Int))
  ((Start String ("b" y (str.++ Start Start) (str.at Start StartInt) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_1 Start Start) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1))
   (StartBool Bool (true false (and StartBool StartBool_3) (str.< Start_2 Start_6) (str.suffixof Start_3 Start_7) (= Start_1 Start_3) (= StartInt_6 StartInt_2) (<= StartInt_8 StartInt_6)))
   (Start_12 String ("0" "1" (str.++ Start_10 Start_11) (str.replace Start_13 Start_10 Start_14) (str.from_int StartInt_7) (ite StartBool Start_3 Start_11)))
   (Start_1 String ("b" (str.++ Start Start_11) (str.at Start StartInt_6) (str.substr Start_6 StartInt_5 StartInt_1) (str.replace Start_14 Start_3 Start_1) (ite StartBool_3 Start_12 Start_2)))
   (StartBool_4 Bool (false (str.< Start_6 Start_11) (str.prefixof Start_11 Start_7) (str.suffixof Start_11 Start_10) (str.contains Start_3 Start_11) (= StartInt_5 StartInt_3) (<= StartInt_6 StartInt_1)))
   (Start_10 String (x (str.++ Start_6 Start_11) (ite StartBool_4 Start_10 Start_7)))
   (Start_11 String ("" (str.++ Start_9 Start_1) (str.substr Start_8 StartInt_4 StartInt_2) (str.replace Start_5 Start_2 Start_3) (str.from_int StartInt_2) (ite StartBool_3 Start_9 Start)))
   (StartInt_8 Int (1 (str.len Start_10)))
   (StartBool_3 Bool (true (not StartBool_1) (str.<= Start_2 Start) (str.suffixof Start_10 Start_5) (str.contains Start_11 Start_8) (= Start_1 Start_11) (<= StartInt_2 StartInt_4)))
   (Start_8 String ("b" x "" "a" "0" y (str.at Start_7 StartInt_1) (str.substr Start_8 StartInt_3 StartInt)))
   (StartBool_1 Bool (false (not StartBool_1) (str.< Start_1 Start_1) (str.<= Start_1 Start_2) (<= StartInt_2 StartInt_2)))
   (Start_13 String ("1" (str.substr Start_4 StartInt_1 StartInt_4) (str.replace Start_6 Start_5 Start_4)))
   (StartInt_3 Int (1 0 (str.len Start_4) (str.indexof Start_2 Start_5 StartInt_3) (str.to_int Start_6)))
   (StartInt_7 Int (1 (str.len Start_10) (str.to_int Start_13)))
   (StartInt_4 Int (0 1 (str.len Start_7) (str.indexof Start_7 Start_5 StartInt_5)))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.indexof Start_2 Start_2 StartInt_2)))
   (Start_14 String ("a" (str.at Start_13 StartInt_7) (ite StartBool_3 Start_4 Start_12)))
   (StartInt_6 Int (1 0 (str.len Start_2)))
   (Start_2 String ("b" (str.++ Start Start_1) (str.replace Start Start_2 Start)))
   (Start_3 String ("" y (str.++ Start_1 Start) (str.at Start_4 StartInt) (str.substr Start_4 StartInt_2 StartInt_1)))
   (Start_5 String (y (str.replace Start_12 Start_4 Start_13) (ite StartBool_4 Start_8 Start_1)))
   (Start_4 String ("" (str.++ Start Start_3) (str.at Start StartInt_3) (str.substr Start StartInt_2 StartInt_3) (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start)))
   (Start_9 String ("a" (str.replace Start_4 Start_9 Start_9)))
   (StartInt_2 Int (1 (str.len Start_1)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_1) (str.< Start_2 Start_2) (str.<= Start_2 Start_3) (str.suffixof Start_4 Start_3) (= Start_2 Start)))
   (Start_7 String ("1" (str.++ Start_1 Start_9) (str.substr Start_2 StartInt_5 StartInt_4) (str.replace Start_4 Start_9 Start_1) (ite StartBool_3 Start_6 Start_3)))
   (Start_6 String (x (str.at Start_3 StartInt_4) (str.substr Start_1 StartInt_3 StartInt_2) (ite StartBool_1 Start_1 Start_3)))
   (StartInt_5 Int (1 0 (str.len Start_8) (str.indexof Start_9 Start_8 StartInt_3) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "1" (str.replace "" x "a")) "1" (str.at y (str.len (str.++ x "1"))))))

(check-synth)
