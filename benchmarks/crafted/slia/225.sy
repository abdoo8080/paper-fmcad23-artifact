(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_8 Bool) (StartBool_7 Bool) (StartBool_2 Bool) (Start_10 String) (Start_9 String) (StartInt_6 Int) (Start_7 String) (Start_2 String) (Start_6 String) (StartInt_2 Int) (Start_1 String) (StartInt_4 Int) (Start_8 String) (StartInt_5 Int) (Start_5 String) (StartBool_5 Bool) (Start_3 String) (StartInt_3 Int) (StartBool_3 Bool) (StartInt_7 Int) (Start_12 String) (StartBool_1 Bool) (StartBool_4 Bool) (Start_11 String) (StartInt_1 Int) (Start_13 String) (Start_4 String) (StartBool_6 Bool) (Start_15 String) (Start_14 String))
  ((Start String (y (str.from_int StartInt)))
   (StartInt Int (1 (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_3)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_3 StartBool_4) (str.< Start_5 Start_12) (str.contains Start_2 Start_8) (<= StartInt_4 StartInt)))
   (StartBool_8 Bool (false true (not StartBool_4) (<= StartInt StartInt_1)))
   (StartBool_7 Bool (false (and StartBool_8 StartBool_2) (str.<= Start_5 Start_10) (str.suffixof Start_4 Start_6) (= Start_1 Start_10)))
   (StartBool_2 Bool (false (not StartBool_1) (str.< Start Start_2) (str.<= Start_8 Start_10) (= StartInt_4 StartInt_3) (<= StartInt StartInt_3)))
   (Start_10 String ("1" (str.++ Start_7 Start_2) (str.at Start_8 StartInt_1) (str.substr Start_3 StartInt_3 StartInt)))
   (Start_9 String ("a" (str.++ Start_8 Start_6)))
   (StartInt_6 Int (1 0 (str.indexof Start_10 Start_1 StartInt_3)))
   (Start_7 String ("0" (str.replace Start_5 Start_8 Start_4) (ite StartBool Start_1 Start_9)))
   (Start_2 String (x (str.++ Start_3 Start_11) (str.at Start_4 StartInt) (str.substr Start_4 StartInt_1 StartInt_6) (str.replace Start_2 Start_7 Start_10) (str.from_int StartInt) (ite StartBool_2 Start_5 Start_6)))
   (Start_6 String ("a" (str.++ Start_3 Start_4) (ite StartBool_2 Start Start_7)))
   (StartInt_2 Int (0 (str.len Start_3) (str.indexof Start_5 Start_6 StartInt)))
   (Start_1 String ("0" "1" x (str.at Start_1 StartInt_6) (str.replace Start_10 Start_11 Start_7) (str.from_int StartInt_4)))
   (StartInt_4 Int (0 (str.len Start)))
   (Start_8 String (x (str.from_int StartInt_3)))
   (StartInt_5 Int (0 1 (str.indexof Start_10 Start_11 StartInt_5) (str.to_int Start_4)))
   (Start_5 String ("" (str.at Start_1 StartInt_5) (str.replace Start_10 Start Start_7) (str.from_int StartInt_3) (ite StartBool_3 Start_8 Start_10)))
   (StartBool_5 Bool (true false (and StartBool_5 StartBool_8) (str.suffixof Start Start_11) (= Start_12 Start_9)))
   (Start_3 String (y (str.++ Start Start_4) (ite StartBool_1 Start_1 Start)))
   (StartInt_3 Int (1 (str.indexof Start_3 Start_9 StartInt_3)))
   (StartBool_3 Bool (true (str.prefixof Start_9 Start_8) (str.suffixof Start_11 Start_11)))
   (StartInt_7 Int (0 (str.indexof Start_14 Start_1 StartInt_1) (str.to_int Start_11)))
   (Start_12 String ("0" (str.at Start StartInt_3) (str.substr Start_8 StartInt_4 StartInt_5) (ite StartBool_4 Start Start_5)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool_1) (str.<= Start_3 Start_4) (str.prefixof Start_1 Start_3) (str.contains Start_1 Start_1) (<= StartInt_1 StartInt_2)))
   (StartBool_4 Bool (false (not StartBool_3) (and StartBool_5 StartBool_6) (str.< Start_8 Start_12) (str.suffixof Start_5 Start_6) (= Start_10 Start_11) (<= StartInt_6 StartInt)))
   (Start_11 String ("0" (str.substr Start_3 StartInt_4 StartInt_1) (str.replace Start_8 Start_11 Start_5)))
   (StartInt_1 Int (0 (str.len Start_6) (str.indexof Start_6 Start_7 StartInt_2) (str.to_int Start_11)))
   (Start_13 String ("1" x y "" "b" (str.at Start_3 StartInt_7) (str.replace Start_10 Start_14 Start_14) (str.from_int StartInt_3) (ite StartBool_6 Start_10 Start_15)))
   (Start_4 String (x (str.at Start_6 StartInt) (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start_3 Start_10 Start_4)))
   (StartBool_6 Bool (true (not StartBool_7) (and StartBool_6 StartBool_2) (str.< Start_13 Start_7) (str.prefixof Start_5 Start_9) (str.suffixof Start_2 Start_13) (= Start_9 Start_7) (<= StartInt_4 StartInt_6)))
   (Start_15 String ("1" (str.++ Start_3 Start_6) (str.substr Start_11 StartInt_2 StartInt_2) (str.replace Start_3 Start_13 Start_7)))
   (Start_14 String (x "a" y (str.substr Start_1 StartInt_2 StartInt_5) (str.from_int StartInt_1) (ite StartBool_6 Start_15 Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "a" "b")))

(check-synth)
