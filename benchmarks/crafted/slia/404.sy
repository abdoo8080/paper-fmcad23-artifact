(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_10 String) (Start_9 String) (Start_5 String) (Start_8 String) (Start_12 String) (StartInt_2 Int) (StartInt_7 Int) (Start_3 String) (StartInt_1 Int) (Start_1 String) (StartInt_4 Int) (Start_4 String) (StartInt_8 Int) (Start_6 String) (StartInt_5 Int) (StartInt_3 Int) (StartBool_1 Bool) (Start_2 String) (Start_11 String) (StartInt_6 Int) (Start_7 String) (StartBool_2 Bool))
  ((Start String ("a" y "0" "" (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_2) (ite StartBool Start_1 Start)))
   (StartInt Int (0))
   (StartBool Bool (true (str.< Start_12 Start_7) (str.prefixof Start Start_7) (str.suffixof Start_9 Start_9) (str.contains Start_4 Start) (<= StartInt_9 StartInt_6)))
   (StartInt_9 Int (0 (str.indexof Start_3 Start_5 StartInt_2)))
   (Start_10 String (x (str.++ Start_2 Start_11)))
   (Start_9 String ("a" (str.++ Start_2 Start_6) (str.at Start_10 StartInt_3) (str.replace Start_5 Start_10 Start_4)))
   (Start_5 String ("a" x (str.at Start_6 StartInt_4) (str.substr Start_5 StartInt_7 StartInt_6) (str.replace Start_7 Start_2 Start_6) (str.from_int StartInt_8)))
   (Start_8 String ("" "0" y (str.++ Start_7 Start_7) (str.replace Start_2 Start_7 Start_3) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_8)))
   (Start_12 String (y (str.at Start_5 StartInt_4) (str.replace Start_12 Start_3 Start_8)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start)))
   (StartInt_7 Int (1 (str.indexof Start_3 Start_12 StartInt_1)))
   (Start_3 String (y "" "b" "0" x (str.at Start_1 StartInt_2) (str.substr Start_4 StartInt_4 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_2 Start_3 StartInt_3)))
   (Start_1 String ("1" (str.++ Start_7 Start_11) (str.from_int StartInt_7) (ite StartBool Start_8 Start_11)))
   (StartInt_4 Int (0 (str.indexof Start_2 Start_4 StartInt_4)))
   (Start_4 String ("" "0" (str.++ Start_2 Start) (str.from_int StartInt_5)))
   (StartInt_8 Int (0 1 (str.len Start_6) (str.indexof Start_8 Start_9 StartInt_6)))
   (Start_6 String ("" (str.at Start StartInt_5) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_4)))
   (StartInt_5 Int (1 (str.len Start) (str.indexof Start_3 Start_5 StartInt_6) (str.to_int Start_1)))
   (StartInt_3 Int (0 (str.len Start_1)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (str.< Start_2 Start) (str.prefixof Start_4 Start_7) (str.suffixof Start_3 Start_2) (= Start Start_1)))
   (Start_2 String ("1" (str.at Start_5 StartInt_6) (ite StartBool_2 Start_4 Start_2)))
   (Start_11 String ("b" x (str.at Start_9 StartInt_7) (str.from_int StartInt_2)))
   (StartInt_6 Int (1 (str.indexof Start_3 Start_5 StartInt_5) (str.to_int Start_6)))
   (Start_7 String ("a" (str.at Start_4 StartInt_2)))
   (StartBool_2 Bool (false true (and StartBool StartBool) (str.<= Start_6 Start_7) (str.suffixof Start_3 Start_4) (= Start_1 Start_8) (= StartInt StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y "b") (str.indexof "b" "" (str.indexof y "" 1)))))

(check-synth)
