(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_7 Int) (Start_10 String) (Start_9 String) (Start_7 String) (Start_5 String) (Start_1 String) (Start_8 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_2 String) (StartInt_1 Int) (Start_3 String) (Start_4 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_6 String) (StartInt_5 Int) (StartInt_4 Int))
  ((Start String ("a" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start_3) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0 1 (str.indexof Start_7 Start_4 StartInt_1) (str.to_int Start_4)))
   (StartBool Bool (true (not StartBool_2) (str.suffixof Start_4 Start_4) (str.contains Start_6 Start_2) (= StartInt_2 StartInt_6) (<= StartInt_2 StartInt_7)))
   (StartInt_6 Int (0 1 (str.len Start)))
   (StartInt_7 Int (1 0 (str.len Start_7) (str.to_int Start_10)))
   (Start_10 String ("" "b" (str.at Start_4 StartInt_7) (str.from_int StartInt_4)))
   (Start_9 String ("a" (str.at Start_8 StartInt_2)))
   (Start_7 String ("a" "" "0" "b" "1" (str.++ Start_8 Start_6) (str.at Start_2 StartInt_1) (str.substr Start_9 StartInt_6 StartInt_1) (str.replace Start_6 Start_9 Start_1) (str.from_int StartInt) (ite StartBool_2 Start_4 Start_3)))
   (Start_5 String ("" "0" (str.at Start_6 StartInt_6) (str.replace Start_5 Start_5 Start_4) (ite StartBool Start_7 Start_7)))
   (Start_1 String (x (str.from_int StartInt_1) (ite StartBool_2 Start_3 Start_2)))
   (Start_8 String ("a" (str.++ Start_5 Start_8) (str.at Start_6 StartInt_6) (str.substr Start_3 StartInt_6 StartInt_2) (str.replace Start_7 Start_10 Start_4) (str.from_int StartInt_1) (ite StartBool Start_1 Start_6)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_1) (str.<= Start_1 Start_2) (str.suffixof Start_2 Start_4) (str.contains Start_2 Start) (= Start Start_2) (= StartInt StartInt) (<= StartInt StartInt_1)))
   (StartInt_2 Int (1 0))
   (Start_2 String (y (str.++ Start Start_3) (str.from_int StartInt)))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.indexof Start_1 Start_4 StartInt) (str.to_int Start_4)))
   (Start_3 String ("0" "1" "a" x "b" (str.from_int StartInt_2) (ite StartBool Start_3 Start)))
   (Start_4 String ("b" "0" "1" "a" y "" x (str.++ Start_4 Start_4) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt)))
   (StartInt_3 Int (1 (str.len Start_6) (str.indexof Start_5 Start_4 StartInt_2)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool_1) (str.<= Start_2 Start_5) (str.prefixof Start_4 Start_4) (<= StartInt_3 StartInt)))
   (Start_6 String (y (str.at Start_4 StartInt_4) (str.substr Start_3 StartInt_1 StartInt_5) (str.replace Start_6 Start_6 Start_6)))
   (StartInt_5 Int (0 1 (str.indexof Start_3 Start_5 StartInt_4) (str.to_int Start)))
   (StartInt_4 Int (1 0 (str.indexof Start_3 Start_2 StartInt) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof (str.at x 0) "0" 0))))

(check-synth)
