(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_2 Int) (StartInt_6 Int) (Start_9 String) (StartBool_4 Bool) (Start_8 String) (Start_7 String) (Start_3 String) (StartInt_3 Int) (Start_6 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_1 Int) (Start_10 String) (Start_5 String) (Start_4 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_2 String) (StartBool_3 Bool))
  ((Start String (x "1" "0" "b" (str.++ Start Start_1) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start Start_1) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 0))
   (StartBool Bool (false true (not StartBool) (str.< Start_1 Start_9) (str.<= Start_5 Start) (str.contains Start Start_3) (= Start_4 Start_8)))
   (Start_1 String ("b" "1" (str.++ Start_4 Start_6) (str.at Start StartInt_5) (str.substr Start_10 StartInt_6 StartInt_2) (str.replace Start_5 Start_6 Start)))
   (StartInt_2 Int (1 0 (str.to_int Start_2)))
   (StartInt_6 Int (1 (str.len Start_7) (str.to_int Start_6)))
   (Start_9 String ("a" (str.++ Start_1 Start_4) (str.at Start_4 StartInt_3) (ite StartBool_3 Start Start_8)))
   (StartBool_4 Bool (true (not StartBool_3) (str.< Start_2 Start) (str.<= Start_5 Start_7) (str.prefixof Start_1 Start_8) (str.suffixof Start_3 Start) (= Start_9 Start_5) (<= StartInt_1 StartInt_1)))
   (Start_8 String ("b" (str.++ Start_3 Start_7) (str.at Start_4 StartInt_6) (ite StartBool_4 Start_2 Start_2)))
   (Start_7 String (x (str.++ Start_2 Start_5) (str.substr Start_7 StartInt_3 StartInt_2) (str.from_int StartInt_2)))
   (Start_3 String (y "" "1" (str.++ Start_2 Start_4) (str.at Start_3 StartInt_3) (str.from_int StartInt) (ite StartBool_2 Start_1 Start_3)))
   (StartInt_3 Int (1 (str.len Start_9) (str.to_int Start_10)))
   (Start_6 String ("" (str.replace Start_1 Start_1 Start_4)))
   (StartBool_2 Bool (true false (<= StartInt_4 StartInt_1)))
   (StartInt_4 Int (1 0 (str.len Start_5) (str.indexof Start_5 Start_1 StartInt_3)))
   (StartInt_1 Int (1 (str.len Start_8) (str.indexof Start_5 Start_9 StartInt)))
   (Start_10 String (y "a" x "b" "0" "" (str.at Start_5 StartInt_1) (str.from_int StartInt_5) (ite StartBool_4 Start_4 Start_2)))
   (Start_5 String (x "1" "b" "" "0" (str.++ Start_6 Start_5) (str.from_int StartInt_1)))
   (Start_4 String (y "a" "" (str.at Start_6 StartInt_5) (str.substr Start_7 StartInt StartInt_3) (str.from_int StartInt_2) (ite StartBool Start_7 Start_6)))
   (StartInt_5 Int (0 1))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool StartBool_3) (str.<= Start_3 Start_6) (str.contains Start_6 Start_6) (<= StartInt StartInt_2)))
   (Start_2 String ("" (str.++ Start Start_2) (str.replace Start Start_1 Start) (ite StartBool_1 Start_3 Start)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_1 StartBool_3) (str.<= Start_5 Start_5) (str.suffixof Start Start_5) (str.contains Start_8 Start) (= StartInt_3 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "b" "0")))

(check-synth)
