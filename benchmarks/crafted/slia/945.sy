(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_13 String) (Start_2 String) (Start_3 String) (StartBool_3 Bool) (StartInt_3 Int) (StartBool_2 Bool) (StartInt_6 Int) (Start_12 String) (Start_4 String) (StartInt_4 Int) (StartInt_7 Int) (Start_5 String) (StartInt_1 Int) (Start_10 String) (Start_6 String) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_9 String) (Start_11 String) (Start_8 String) (Start_7 String))
  ((Start String ("0" "a" "b" (str.++ Start_1 Start_1) (str.replace Start_2 Start_3 Start_4)))
   (StartInt Int (1 (str.len Start_9) (str.to_int Start_4)))
   (StartBool Bool (false true (and StartBool_2 StartBool_3) (str.<= Start_1 Start) (str.prefixof Start_1 Start_9) (= StartInt_1 StartInt_1)))
   (Start_1 String ("0" x (str.substr Start_4 StartInt_6 StartInt_4) (str.replace Start_1 Start Start_10) (str.from_int StartInt_3)))
   (Start_13 String ("b" (str.substr Start_4 StartInt_1 StartInt_7) (str.from_int StartInt_3)))
   (Start_2 String ("0" "" "b" y "1" (str.++ Start_11 Start_7) (str.from_int StartInt_7)))
   (Start_3 String (y))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_3 StartBool) (str.< Start_1 Start) (str.prefixof Start_7 Start_13) (str.contains Start_1 Start_3) (= Start_12 Start_11) (= StartInt_1 StartInt_7)))
   (StartInt_3 Int (1 (str.indexof Start_10 Start_2 StartInt_2)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_1) (str.<= Start_10 Start_7) (str.suffixof Start Start_3) (str.contains Start_6 Start_11) (= StartInt_4 StartInt_5) (<= StartInt_6 StartInt_1)))
   (StartInt_6 Int (1 (str.len Start) (str.indexof Start_3 Start_9 StartInt_1)))
   (Start_12 String (y "1" (str.++ Start Start_6) (str.replace Start_11 Start_5 Start_6) (str.from_int StartInt) (ite StartBool Start_3 Start_2)))
   (Start_4 String (x (str.++ Start Start_5) (str.from_int StartInt_1)))
   (StartInt_4 Int (0 (str.indexof Start_8 Start_10 StartInt)))
   (StartInt_7 Int (0 1 (str.to_int Start_1)))
   (Start_5 String ("" x "0" "1" (str.at Start_2 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_1 Int (1 (str.len Start_4) (str.indexof Start_1 Start_5 StartInt_2)))
   (Start_10 String (x y "1" (str.++ Start_10 Start_9) (str.substr Start_7 StartInt_1 StartInt_2)))
   (Start_6 String ("0" (str.++ Start_4 Start) (str.substr Start_4 StartInt_5 StartInt_2)))
   (StartInt_5 Int (1 0 (str.indexof Start_2 Start_9 StartInt)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_2) (str.<= Start_6 Start_7) (str.prefixof Start_2 Start_8) (str.suffixof Start_7 Start_9) (= StartInt_3 StartInt_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_2 Start_3 StartInt_2)))
   (Start_9 String (x "" "b" "0" "1" "a" y (str.substr Start StartInt StartInt_5) (str.from_int StartInt_5) (ite StartBool Start_7 Start_9)))
   (Start_11 String ("a" (str.at Start_4 StartInt) (ite StartBool_1 Start_9 Start_8)))
   (Start_8 String (x (str.++ Start_6 Start_5) (str.at Start_10 StartInt_3) (str.substr Start_6 StartInt_3 StartInt_4) (str.replace Start_7 Start_7 Start) (str.from_int StartInt) (ite StartBool_1 Start_11 Start_7)))
   (Start_7 String ("" (str.at Start_12 StartInt) (str.substr Start_12 StartInt_4 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x (ite (= x "0") "b" "1"))))

(check-synth)
