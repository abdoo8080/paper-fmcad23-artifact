(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (Start_3 String) (StartInt_1 Int) (Start_5 String) (StartInt_4 Int) (Start_4 String) (StartInt_3 Int) (StartInt_2 Int) (StartInt_5 Int) (Start_6 String) (Start_1 String))
  ((Start String ("1" (str.at Start_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (StartInt Int (1 0 (str.len Start_1) (str.indexof Start Start_4 StartInt_4) (str.to_int Start_3)))
   (StartBool Bool (true (and StartBool StartBool) (str.< Start_1 Start_5) (= Start_2 Start_3) (= StartInt_1 StartInt_1)))
   (Start_2 String (y "1" (str.++ Start_1 Start) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt_1) (ite StartBool Start_1 Start_2)))
   (Start_3 String ("" "0" (str.replace Start_4 Start_1 Start_5)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_1 StartInt_5)))
   (Start_5 String (x "1" (str.++ Start_3 Start) (str.at Start StartInt_4) (str.replace Start_5 Start_3 Start_6)))
   (StartInt_4 Int (0 (str.len Start_1)))
   (Start_4 String ("" y (str.++ Start_3 Start) (str.at Start_1 StartInt_2) (str.substr Start StartInt_4 StartInt_1) (str.replace Start_6 Start_6 Start_5) (str.from_int StartInt_4)))
   (StartInt_3 Int (0 (str.len Start_6) (str.indexof Start_3 Start StartInt)))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_1 StartInt_2) (str.to_int Start_2)))
   (StartInt_5 Int (1 (str.indexof Start_4 Start_2 StartInt_2)))
   (Start_6 String (x "" "0" "a" (str.at Start_6 StartInt_4) (str.substr Start_3 StartInt_3 StartInt_1) (str.from_int StartInt_4) (ite StartBool Start_2 Start_3)))
   (Start_1 String ("" (str.substr Start_2 StartInt StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.replace x y "b")))))

(check-synth)
