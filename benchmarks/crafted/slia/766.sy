(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_9 Int) (StartInt_11 Int) (StartInt_10 Int) (Start_9 String) (StartInt_2 Int) (Start_11 String) (StartInt_1 Int) (Start_7 String) (Start_3 String) (StartBool_2 Bool) (Start_12 String) (Start_10 String) (StartInt_3 Int) (Start_8 String) (StartInt_4 Int) (Start_2 String) (StartInt_5 Int) (Start_6 String) (StartBool_1 Bool) (Start_1 String) (Start_14 String) (Start_13 String) (Start_18 String) (Start_17 String) (Start_16 String) (Start_15 String) (StartInt_6 Int) (Start_5 String) (Start_19 String) (StartInt_7 Int) (StartInt_8 Int) (Start_4 String) (StartBool_3 Bool) (Start_20 String))
  ((Start String (x y (str.++ Start_1 Start_2) (str.at Start_2 StartInt_1) (str.replace Start Start_2 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (StartInt Int (0 1 (str.len Start_3) (str.indexof Start_6 Start_20 StartInt_11)))
   (StartBool Bool (true false (not StartBool_4) (and StartBool StartBool_3) (str.suffixof Start_11 Start_19) (str.contains Start Start_5)))
   (StartBool_4 Bool (false (not StartBool_2) (str.<= Start_13 Start_17) (str.prefixof Start_12 Start_10) (str.suffixof Start_1 Start_10) (= StartInt_6 StartInt_8)))
   (StartInt_9 Int (0 1))
   (StartInt_11 Int (0))
   (StartInt_10 Int (1 (str.len Start_7) (str.indexof Start_19 Start_16 StartInt_11)))
   (Start_9 String ("0" "" x "b" y (str.++ Start_12 Start_12) (str.at Start_12 StartInt_2) (str.replace Start_9 Start_3 Start) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 (str.len Start_4) (str.indexof Start_8 Start_5 StartInt_3)))
   (Start_11 String ("" "a" "0" y (str.++ Start_4 Start) (str.substr Start StartInt_1 StartInt_3) (str.replace Start_5 Start_2 Start_10)))
   (StartInt_1 Int (0 1 (str.indexof Start_18 Start_9 StartInt_3)))
   (Start_7 String (x (str.substr Start_2 StartInt_6 StartInt_5) (str.replace Start_13 Start_4 Start_14) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_5)))
   (Start_3 String ("b" (str.at Start_13 StartInt_3) (str.substr Start_7 StartInt_8 StartInt_2) (str.replace Start_2 Start_10 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.< Start_6 Start_6) (str.<= Start_9 Start_3) (str.suffixof Start_4 Start_9) (str.contains Start_2 Start_8) (= Start_10 Start_11) (= StartInt_4 StartInt_1)))
   (Start_12 String ("0" "1" (str.++ Start_8 Start_1) (str.at Start_10 StartInt_3) (str.replace Start_4 Start_8 Start_11) (str.from_int StartInt_3) (ite StartBool Start_1 Start_2)))
   (Start_10 String (x "a" "" "1" "b" (str.++ Start_7 Start_5) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_4 Start_2 Start_1) (str.from_int StartInt)))
   (StartInt_3 Int (1 0 (str.len Start_4)))
   (Start_8 String ("a" "" "1" (str.++ Start_8 Start_3) (ite StartBool_2 Start_5 Start_2)))
   (StartInt_4 Int (1))
   (Start_2 String ("1" (str.++ Start_12 Start_9) (str.at Start_6 StartInt_6) (str.replace Start_15 Start_10 Start_12) (ite StartBool_2 Start Start_12)))
   (StartInt_5 Int (1 0 (str.to_int Start_3)))
   (Start_6 String ("1" (str.++ Start_3 Start_7) (str.at Start_8 StartInt_2) (str.replace Start_7 Start_8 Start_3) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true (not StartBool) (str.< Start_3 Start_3) (str.<= Start_4 Start_5) (str.prefixof Start_3 Start_3) (str.contains Start_2 Start_6)))
   (Start_1 String (y "a" (str.++ Start_20 Start_5) (str.at Start_9 StartInt_9) (str.substr Start_18 StartInt_5 StartInt_10) (str.from_int StartInt_4)))
   (Start_14 String ("" "b" x (str.at Start_2 StartInt_6) (str.from_int StartInt_1)))
   (Start_13 String ("1" "" (str.at Start_12 StartInt_3) (str.substr Start_12 StartInt_2 StartInt_2) (str.from_int StartInt) (ite StartBool_3 Start_5 Start_14)))
   (Start_18 String (x "" (str.++ Start_13 Start_15) (str.at Start_9 StartInt_6) (ite StartBool Start_19 Start_18)))
   (Start_17 String ("a" "b" "0" x (str.++ Start_13 Start_1) (str.replace Start_14 Start_12 Start_3) (str.from_int StartInt_1)))
   (Start_16 String (y "" (str.at Start_11 StartInt_6) (str.replace Start_15 Start_1 Start_9) (str.from_int StartInt_1) (ite StartBool Start_5 Start_6)))
   (Start_15 String ("" x (str.++ Start_7 Start_7) (ite StartBool_2 Start_15 Start_4)))
   (StartInt_6 Int (0 (str.to_int Start_12)))
   (Start_5 String (y (str.at Start_13 StartInt_7) (str.substr Start_17 StartInt_5 StartInt) (str.replace Start_13 Start_18 Start_2) (str.from_int StartInt_5)))
   (Start_19 String (x "" (str.substr Start_7 StartInt_3 StartInt_6) (str.from_int StartInt)))
   (StartInt_7 Int (0 1 (str.len Start_2) (str.indexof Start Start_3 StartInt_2)))
   (StartInt_8 Int (1 (str.len Start_4) (str.to_int Start_19)))
   (Start_4 String ("a" "1" (str.++ Start_18 Start_12) (str.replace Start_20 Start_4 Start_13) (str.from_int StartInt_4) (ite StartBool Start_17 Start_8)))
   (StartBool_3 Bool (false (str.<= Start_15 Start_2) (str.suffixof Start_12 Start_16) (str.contains Start_15 Start_16) (= StartInt_6 StartInt_4)))
   (Start_20 String ("a" (str.substr Start_17 StartInt StartInt_4) (str.replace Start_7 Start_18 Start_18)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof y "1") "a" (str.++ "1" "1"))))

(check-synth)
