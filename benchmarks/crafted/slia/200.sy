(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_6 Int) (Start_6 String) (Start_7 String) (StartInt_5 Int) (StartBool_3 Bool) (StartInt_1 Int) (Start_11 String) (Start_10 String) (StartBool_1 Bool) (Start_3 String) (StartInt_4 Int) (StartInt_3 Int) (Start_4 String) (Start_5 String) (Start_2 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_9 String) (Start_1 String) (Start_8 String))
  ((Start String ("a" x y (str.++ Start_1 Start_2) (str.substr Start StartInt StartInt_1)))
   (StartInt Int (1 (str.to_int Start_4)))
   (StartBool Bool (true (and StartBool_2 StartBool_1) (str.< Start_5 Start_2) (str.prefixof Start_6 Start_7) (str.suffixof Start_8 Start_1) (= Start_3 Start_7) (= StartInt StartInt_2)))
   (Start_12 String ("b" y "0" (str.at Start_3 StartInt_2) (str.substr Start_11 StartInt_5 StartInt_1) (str.from_int StartInt_5) (ite StartBool Start_11 Start)))
   (StartInt_6 Int (1 (str.indexof Start_11 Start_1 StartInt) (str.to_int Start_9)))
   (Start_6 String ("0" y "b" (str.substr Start_2 StartInt_1 StartInt_6) (str.replace Start_2 Start_1 Start) (str.from_int StartInt)))
   (Start_7 String ("1" y (str.substr Start_10 StartInt_2 StartInt_1) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 0 (str.indexof Start_3 Start_7 StartInt_5) (str.to_int Start_1)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool_3) (str.< Start_10 Start_10) (str.suffixof Start_6 Start_6) (<= StartInt_3 StartInt_5)))
   (StartInt_1 Int (1 0 (str.len Start)))
   (Start_11 String (y (str.++ Start_10 Start_12) (str.from_int StartInt_1)))
   (Start_10 String ("b" "0" (str.at Start_8 StartInt_4) (str.substr Start_8 StartInt StartInt_2) (str.from_int StartInt_5)))
   (StartBool_1 Bool (false true (str.prefixof Start_5 Start) (str.suffixof Start_3 Start) (= Start_3 Start_3) (= StartInt_3 StartInt) (<= StartInt_1 StartInt)))
   (Start_3 String (x (str.++ Start_1 Start_1) (str.substr Start_3 StartInt StartInt_2) (str.replace Start_4 Start_1 Start) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_1)))
   (StartInt_4 Int (1 (str.len Start_10)))
   (StartInt_3 Int (0 1 (str.len Start_2)))
   (Start_4 String ("a" "" (str.at Start_3 StartInt_1) (str.from_int StartInt_3)))
   (Start_5 String (x (str.substr Start StartInt_2 StartInt) (str.replace Start Start_1 Start_1) (ite StartBool_1 Start_1 Start_1)))
   (Start_2 String ("b" x "1" (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_2 Start_1 Start) (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt_2 Int (0))
   (StartBool_2 Bool (true false (not StartBool_1) (str.prefixof Start_3 Start_12) (str.contains Start_8 Start_4) (<= StartInt_6 StartInt_3)))
   (Start_9 String ("1" y (str.++ Start_5 Start_6) (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_9 Start_3 Start) (ite StartBool_3 Start_6 Start_3)))
   (Start_1 String ("0" "b" (str.++ Start_3 Start_3) (str.at Start_3 StartInt)))
   (Start_8 String ("1" (str.at Start_7 StartInt) (str.substr Start_2 StartInt_4 StartInt_1) (str.replace Start_9 Start_9 Start_9) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" y (str.at x 1))))

(check-synth)
