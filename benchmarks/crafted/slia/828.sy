(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_3 Int) (Start_10 String) (Start_9 String) (StartInt_6 Int) (StartBool_1 Bool) (Start_6 String) (Start_3 String) (StartInt_2 Int) (Start_7 String) (Start_5 String) (Start_4 String) (StartInt_7 Int) (StartInt_4 Int) (StartInt_1 Int) (Start_2 String) (Start_8 String) (StartInt_5 Int) (StartBool_2 Bool))
  ((Start String ("" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (0 (str.indexof Start_8 Start StartInt_7)))
   (StartBool Bool (false true (not StartBool_2) (str.contains Start_3 Start_4)))
   (Start_1 String (y (str.at Start_5 StartInt_5) (ite StartBool_2 Start_5 Start_2)))
   (StartInt_3 Int (1))
   (Start_10 String (x (str.++ Start_1 Start_10)))
   (Start_9 String ("b" (str.++ Start_1 Start_2) (str.at Start StartInt_2) (str.substr Start_3 StartInt_6 StartInt_7) (str.replace Start_1 Start_9 Start_9) (ite StartBool_2 Start_10 Start_6)))
   (StartInt_6 Int (1 0 (str.indexof Start_3 Start_6 StartInt) (str.to_int Start)))
   (StartBool_1 Bool (true false (not StartBool) (str.suffixof Start_1 Start_2) (= Start_3 Start)))
   (Start_6 String ("b" "1" (str.at Start_6 StartInt_1) (str.replace Start_7 Start_1 Start_1) (ite StartBool_2 Start_4 Start_8)))
   (Start_3 String (y (str.at Start_4 StartInt_2) (ite StartBool Start_2 Start_3)))
   (StartInt_2 Int (0 1 (str.indexof Start_4 Start_2 StartInt_2) (str.to_int Start_5)))
   (Start_7 String ("a" "b" (str.++ Start_3 Start_5) (str.substr Start_9 StartInt_1 StartInt_6) (str.replace Start_4 Start_4 Start_7)))
   (Start_5 String ("0" (str.substr Start StartInt_1 StartInt_1) (str.replace Start Start_3 Start_3)))
   (Start_4 String ("b" "1" (str.from_int StartInt_1)))
   (StartInt_7 Int (0))
   (StartInt_4 Int (1 0 (str.indexof Start_2 Start_8 StartInt_1) (str.to_int Start_5)))
   (StartInt_1 Int (0 1 (str.len Start_1)))
   (Start_2 String (x "0" "" "1" y (str.at Start_1 StartInt_3) (str.from_int StartInt_3) (ite StartBool Start Start_6)))
   (Start_8 String ("a" "b" y (str.++ Start_4 Start_6) (str.at Start_6 StartInt) (str.substr Start_1 StartInt_3 StartInt_4)))
   (StartInt_5 Int (1 0))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_1) (str.< Start_4 Start_1) (str.prefixof Start_4 Start_1) (str.suffixof Start_7 Start_5) (str.contains Start_5 Start_2) (= Start_3 Start_8) (= StartInt_5 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.++ "1" "1") "a")))

(check-synth)
