(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (Start_1 String) (Start_18 String) (Start_2 String) (Start_15 String) (StartBool_8 Bool) (Start_16 String) (Start_14 String) (StartInt_8 Int) (StartInt_6 Int) (Start_9 String) (Start_5 String) (Start_3 String) (Start_7 String) (StartBool_9 Bool) (StartInt_3 Int) (StartBool_2 Bool) (Start_8 String) (StartBool_5 Bool) (StartInt_1 Int) (StartInt_2 Int) (Start_17 String) (StartInt_5 Int) (StartInt_7 Int) (Start_4 String) (StartInt_9 Int) (Start_11 String) (StartBool_6 Bool) (StartInt_4 Int) (StartInt_10 Int) (StartInt_12 Int) (StartBool_1 Bool) (Start_12 String) (StartBool_7 Bool) (StartInt_11 Int) (StartInt_13 Int) (Start_10 String) (Start_6 String) (Start_13 String) (StartBool_4 Bool) (StartBool_3 Bool))
  ((Start String ("" (str.replace Start_1 Start_1 Start_2) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1 0))
   (StartBool Bool (true (str.<= Start_15 Start_4) (str.prefixof Start_3 Start_15) (str.contains Start_14 Start_19)))
   (Start_19 String (y))
   (Start_1 String (y "0" (str.++ Start_16 Start_16) (str.at Start_13 StartInt_7) (str.substr Start_16 StartInt_11 StartInt_13) (str.replace Start_4 Start_15 Start_8) (ite StartBool Start_5 Start_2)))
   (Start_18 String (y "" "1" "b" x (str.++ Start_9 Start_12) (str.at Start_8 StartInt) (str.substr Start_17 StartInt_9 StartInt_7) (str.replace Start_15 Start_7 Start_13) (str.from_int StartInt_10)))
   (Start_2 String ("" "0" (str.at Start_4 StartInt_3) (str.replace Start_3 Start_12 Start_5) (str.from_int StartInt_13) (ite StartBool_9 Start_11 Start)))
   (Start_15 String (x (str.at Start_3 StartInt_10) (str.substr Start_13 StartInt_5 StartInt_12) (str.replace Start_13 Start_14 Start_15) (str.from_int StartInt_8) (ite StartBool_4 Start_10 Start_15)))
   (StartBool_8 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_6) (str.< Start_13 Start_16) (str.<= Start_12 Start_14) (str.prefixof Start_9 Start_12) (str.suffixof Start_11 Start_9) (str.contains Start_5 Start_1) (= Start_2 Start) (= StartInt_10 StartInt_7) (<= StartInt_9 StartInt_6)))
   (Start_16 String ("0" (str.++ Start_16 Start_4) (str.at Start_4 StartInt) (str.replace Start_2 Start_6 Start_12) (ite StartBool_8 Start_8 Start_9)))
   (Start_14 String ("0" "" (str.++ Start_15 Start_11) (str.replace Start_11 Start_7 Start_7) (str.from_int StartInt_8) (ite StartBool_6 Start_12 Start_16)))
   (StartInt_8 Int (0 (str.to_int Start)))
   (StartInt_6 Int (1 0 (str.to_int Start_8)))
   (Start_9 String ("a" (str.++ Start_9 Start_9) (str.at Start_4 StartInt_2) (str.substr Start_3 StartInt_6 StartInt) (str.from_int StartInt_3) (ite StartBool_2 Start_4 Start_9)))
   (Start_5 String ("" "a" (str.++ Start_6 Start_1) (str.at Start_3 StartInt_3) (str.substr Start_2 StartInt_4 StartInt_1) (str.replace Start_1 Start_3 Start) (ite StartBool_5 Start_1 Start_6)))
   (Start_3 String ("0" (str.++ Start_1 Start) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_1 Start_2 Start) (str.from_int StartInt_2) (ite StartBool_4 Start_4 Start)))
   (Start_7 String (y "b" x (str.++ Start_9 Start_5) (str.at Start_9 StartInt_2) (str.substr Start_10 StartInt_7 StartInt_8)))
   (StartBool_9 Bool (true false (not StartBool_4) (str.< Start_5 Start_7) (str.prefixof Start_14 Start_8) (str.suffixof Start_13 Start_10) (str.contains Start_17 Start_15) (= StartInt_8 StartInt_8)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_10 Start_7 StartInt_4) (str.to_int Start_1)))
   (StartBool_2 Bool (false true (str.< Start_6 Start_12) (= StartInt_2 StartInt_5)))
   (Start_8 String ("a" (str.substr Start_9 StartInt StartInt_5) (str.replace Start_4 Start Start_9) (str.from_int StartInt_4)))
   (StartBool_5 Bool (false (not StartBool_3) (and StartBool_6 StartBool_2) (str.<= Start Start_1) (str.suffixof Start_4 Start_3) (str.contains Start_5 Start_7) (= Start_3 Start_8) (= StartInt_3 StartInt_3) (<= StartInt_4 StartInt_3)))
   (StartInt_1 Int (0 (str.len Start_2) (str.to_int Start_2)))
   (StartInt_2 Int (0 (str.len Start_5) (str.indexof Start_12 Start_7 StartInt_7)))
   (Start_17 String (y (str.at Start_6 StartInt_7) (str.substr Start_3 StartInt_10 StartInt_3) (ite StartBool_8 Start_5 Start_16)))
   (StartInt_5 Int (0 1 (str.len Start_9) (str.indexof Start_5 Start_2 StartInt_1)))
   (StartInt_7 Int (0 (str.len Start_9) (str.to_int Start_1)))
   (Start_4 String ("b" (str.++ Start_4 Start_4) (str.replace Start_5 Start_1 Start_1) (ite StartBool_2 Start_5 Start_3)))
   (StartInt_9 Int (1 0 (str.len Start_6)))
   (Start_11 String ("a" (str.at Start_10 StartInt) (str.substr Start_3 StartInt_4 StartInt_3)))
   (StartBool_6 Bool (true (not StartBool_1) (and StartBool_1 StartBool_7) (str.< Start_8 Start_11) (str.suffixof Start_9 Start) (str.contains Start_7 Start_5) (= StartInt_1 StartInt_2) (<= StartInt_10 StartInt_7)))
   (StartInt_4 Int (1 (str.len Start_8) (str.indexof Start_9 Start_6 StartInt_7)))
   (StartInt_10 Int (1 (str.len Start_11) (str.indexof Start_1 Start_4 StartInt_2) (str.to_int Start_3)))
   (StartInt_12 Int (0 (str.to_int Start)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (str.<= Start_1 Start) (= Start_3 Start_1) (= StartInt_1 StartInt_1) (<= StartInt StartInt_1)))
   (Start_12 String ("b" "" "1" y "0" x "a" (str.++ Start_7 Start_12) (str.at Start_5 StartInt_5) (str.substr Start_5 StartInt_10 StartInt_7)))
   (StartBool_7 Bool (true false (str.< Start_11 Start_9) (str.prefixof Start_7 Start_12) (str.suffixof Start_3 Start_4) (= Start_1 Start_11) (= StartInt_11 StartInt_2) (<= StartInt_3 StartInt_4)))
   (StartInt_11 Int (0 1))
   (StartInt_13 Int (1 (str.len Start_14) (str.indexof Start_18 Start_14 StartInt_6)))
   (Start_10 String (y (str.++ Start_3 Start_11) (str.substr Start_3 StartInt_9 StartInt_2) (ite StartBool_3 Start_3 Start_11)))
   (Start_6 String ("b" (str.at Start_13 StartInt_4)))
   (Start_13 String ("" (str.replace Start_9 Start_13 Start_7)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool_6) (str.< Start_1 Start_13) (str.suffixof Start_4 Start_12) (= Start_11 Start_3) (<= StartInt_10 StartInt)))
   (StartBool_3 Bool (false (not StartBool_5) (str.prefixof Start_13 Start_2) (str.suffixof Start_7 Start_13) (str.contains Start_13 Start_14) (= Start_10 Start_5) (<= StartInt_6 StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x 1)))

(check-synth)
