(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartBool_2 Bool) (Start_10 String) (Start_7 String) (StartInt_5 Int) (Start_8 String) (Start_2 String) (StartInt_3 Int) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_4 Int) (Start_4 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_3 String) (Start_5 String) (Start_1 String) (Start_6 String) (Start_9 String))
  ((Start String ("1" x "a" "0" (str.replace Start_1 Start Start_1) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0 1 (str.to_int Start)))
   (StartBool Bool (false true (str.prefixof Start_2 Start_9)))
   (Start_11 String ("0" "" x (str.++ Start_9 Start_3) (str.at Start_1 StartInt_3) (str.substr Start_10 StartInt_3 StartInt) (str.replace Start Start_4 Start_4) (str.from_int StartInt_1) (ite StartBool_3 Start_9 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.< Start_4 Start_1) (str.<= Start_9 Start_11) (str.prefixof Start_2 Start_2) (str.suffixof Start_10 Start_8) (= Start_10 Start_6)))
   (Start_10 String (y (str.from_int StartInt_4)))
   (Start_7 String ("" (str.++ Start_3 Start_6)))
   (StartInt_5 Int (1 0))
   (Start_8 String (x "b" "a" y (str.at Start_2 StartInt_1) (str.substr Start_9 StartInt_4 StartInt_4)))
   (Start_2 String ("1" "b" "a" y (str.from_int StartInt)))
   (StartInt_3 Int (1 0 (str.indexof Start_8 Start_6 StartInt_2) (str.to_int Start_10)))
   (StartBool_3 Bool (true (not StartBool) (str.< Start_2 Start_1) (str.contains Start_1 Start) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_1)))
   (StartInt_1 Int (1 0))
   (StartInt_4 Int (0 (str.indexof Start_4 Start StartInt_4) (str.to_int Start)))
   (Start_4 String ("1" (str.at Start_4 StartInt_1) (str.substr Start_5 StartInt StartInt_3) (str.replace Start_2 Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.to_int Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (str.< Start_1 Start) (str.prefixof Start Start_1) (str.suffixof Start_1 Start_2) (str.contains Start_2 Start) (= Start_1 Start_2) (= StartInt_1 StartInt_1)))
   (Start_3 String ("" (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start_1 Start_2 Start) (ite StartBool Start_3 Start_2)))
   (Start_5 String (x (str.++ Start_3 Start_4) (str.at Start_3 StartInt_3) (str.replace Start_1 Start_2 Start_6) (ite StartBool_2 Start_3 Start)))
   (Start_1 String ("a" (str.++ Start_7 Start_10) (str.at Start_6 StartInt_4) (str.substr Start_6 StartInt_1 StartInt_2) (str.replace Start_1 Start_7 Start_8) (str.from_int StartInt_5) (ite StartBool_1 Start_5 Start_9)))
   (Start_6 String ("0" "1" y "b" "a" "" (str.at Start_7 StartInt) (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_7 Start_8 Start_4) (str.from_int StartInt_2)))
   (Start_9 String ("b" (str.++ Start_9 Start_5) (str.replace Start_8 Start_1 Start_7) (ite StartBool_3 Start_7 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.replace y x ""))))

(check-synth)
