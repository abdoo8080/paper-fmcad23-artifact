(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_8 String) (Start_13 String) (Start_9 String) (Start_10 String) (StartInt_4 Int) (StartInt_6 Int) (Start_11 String) (Start_12 String) (StartInt_2 Int) (Start_6 String) (Start_4 String) (StartInt_7 Int) (Start_1 String) (StartInt_3 Int) (Start_2 String) (Start_7 String) (Start_3 String) (StartBool_2 Bool) (Start_5 String) (StartBool_3 Bool) (StartBool_1 Bool) (StartInt_5 Int))
  ((Start String ("b" (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt_2) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 (str.len Start_7) (str.indexof Start_11 Start_6 StartInt_7) (str.to_int Start_3)))
   (StartBool Bool (false true (str.<= Start_7 Start_7) (str.suffixof Start_12 Start_11) (= Start_6 Start_8)))
   (StartInt_1 Int (1))
   (Start_8 String ("1" (str.substr Start StartInt_3 StartInt_4) (str.replace Start_8 Start_13 Start_7) (ite StartBool Start_1 Start_8)))
   (Start_13 String ("a" "" (str.substr Start_2 StartInt_4 StartInt_3) (ite StartBool_3 Start_4 Start_9)))
   (Start_9 String (x "1" "b" "a" "" "0" y (str.at Start_8 StartInt_2) (str.substr Start_6 StartInt_5 StartInt_4) (str.replace Start_2 Start_13 Start_5) (ite StartBool_2 Start Start_7)))
   (Start_10 String ("a" (str.++ Start_12 Start_1) (str.at Start_1 StartInt_4) (ite StartBool_2 Start_12 Start)))
   (StartInt_4 Int (0))
   (StartInt_6 Int (0 (str.len Start_7)))
   (Start_11 String (y (str.at Start_3 StartInt_3) (str.substr Start_6 StartInt StartInt) (str.replace Start_6 Start_8 Start_1) (str.from_int StartInt_6) (ite StartBool Start_6 Start_6)))
   (Start_12 String ("a" (str.++ Start_5 Start_5) (str.from_int StartInt_3) (ite StartBool_3 Start_2 Start_12)))
   (StartInt_2 Int (0 (str.to_int Start)))
   (Start_6 String ("" (str.++ Start_3 Start_8) (str.substr Start_2 StartInt_1 StartInt_4) (str.replace Start_9 Start_9 Start) (ite StartBool_2 Start_8 Start_5)))
   (Start_4 String ("0" (str.at Start_5 StartInt_3) (str.replace Start_4 Start_5 Start_3) (ite StartBool Start_4 Start_4)))
   (StartInt_7 Int (1 0 (str.len Start_1)))
   (Start_1 String ("" (str.replace Start_11 Start_2 Start_1) (ite StartBool Start_2 Start_8)))
   (StartInt_3 Int (0))
   (Start_2 String (y "" (str.replace Start_1 Start_6 Start_2) (ite StartBool_1 Start_1 Start_5)))
   (Start_7 String (y (str.at Start_6 StartInt) (str.substr Start_1 StartInt StartInt_3) (str.replace Start_5 Start_3 Start) (ite StartBool Start_1 Start_2)))
   (Start_3 String ("b" "1" y (str.++ Start_4 Start_3) (str.at Start StartInt_1)))
   (StartBool_2 Bool (false true (not StartBool_3) (str.< Start_8 Start_2) (str.prefixof Start_7 Start_4) (str.suffixof Start_8 Start_2) (= Start_5 Start_9) (<= StartInt_1 StartInt)))
   (Start_5 String ("0" (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_5 Start_1 Start) (ite StartBool Start_5 Start_4)))
   (StartBool_3 Bool (true (not StartBool) (str.<= Start_2 Start_10) (str.prefixof Start Start_11) (str.contains Start_4 Start_3) (= Start_4 Start_4) (= StartInt_2 StartInt_5)))
   (StartBool_1 Bool (true (not StartBool_1) (str.<= Start Start_7) (str.prefixof Start_1 Start_5) (str.contains Start_6 Start_6) (= Start_4 Start_6) (<= StartInt_2 StartInt_2)))
   (StartInt_5 Int (1 (str.indexof Start_12 Start_10 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" x "1")))

(check-synth)
