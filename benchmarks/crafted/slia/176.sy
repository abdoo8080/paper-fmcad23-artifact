(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (Start_2 String) (StartInt_2 Int) (Start_6 String) (StartInt_3 Int) (Start_1 String) (StartInt_1 Int) (StartInt_4 Int) (Start_4 String) (StartInt_5 Int) (Start_3 String) (Start_5 String))
  ((Start String (x "1" "b" "0" (str.substr Start StartInt StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (1 (str.len Start_6) (str.indexof Start Start_6 StartInt_1)))
   (StartBool Bool (false (not StartBool_1) (str.< Start_5 Start_1) (str.prefixof Start_3 Start_1) (str.suffixof Start_6 Start_6)))
   (StartBool_1 Bool (false (str.<= Start_2 Start_2) (str.prefixof Start_4 Start_6) (str.suffixof Start Start_2) (str.contains Start Start_3) (= Start_2 Start_1)))
   (Start_2 String ("b" "a" "1" y (str.++ Start_6 Start_3) (str.substr Start_2 StartInt_4 StartInt_3) (ite StartBool Start_2 Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start Start_1 StartInt_2)))
   (Start_6 String (y x (str.++ Start_5 Start) (str.at Start_5 StartInt_3) (str.substr Start_5 StartInt_4 StartInt_5)))
   (StartInt_3 Int (0 (str.indexof Start_2 Start_2 StartInt) (str.to_int Start_5)))
   (Start_1 String ("" (str.substr Start StartInt_2 StartInt_1)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start_3 Start_1 StartInt) (str.to_int Start_4)))
   (StartInt_4 Int (0 (str.len Start_2) (str.to_int Start_3)))
   (Start_4 String ("0" "a" "b"))
   (StartInt_5 Int (0 1))
   (Start_3 String ("0" (str.++ Start_4 Start_1) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_5 Start_1 Start)))
   (Start_5 String ("0" (str.++ Start_1 Start_4) (str.replace Start_4 Start_2 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof (str.replace "b" y "0") "0") y x)))

(check-synth)
