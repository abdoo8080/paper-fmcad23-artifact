(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (Start_5 String) (StartBool_2 Bool) (Start_12 String) (StartInt_7 Int) (StartBool_3 Bool) (Start_2 String) (Start_6 String) (Start_8 String) (StartInt_6 Int) (Start_4 String) (Start_10 String) (StartInt_3 Int) (StartInt_1 Int) (Start_1 String) (StartInt_2 Int) (Start_7 String) (Start_11 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_9 String) (StartInt_5 Int))
  ((Start String ("" "1" "a" y "b" (str.++ Start Start)))
   (StartInt Int (1 (str.len Start) (str.indexof Start Start_1 StartInt_1) (str.to_int Start)))
   (StartBool Bool (true false (not StartBool) (and StartBool StartBool) (str.<= Start_2 Start_3) (str.prefixof Start Start_4) (= StartInt_2 StartInt_1)))
   (Start_3 String ("a" (str.++ Start_2 Start_2) (str.substr Start_8 StartInt StartInt_6) (str.from_int StartInt_7) (ite StartBool_2 Start_7 Start_3)))
   (Start_5 String ("b" "a"))
   (StartBool_2 Bool (true false (str.<= Start Start_1) (str.prefixof Start Start_2) (= Start_3 Start_3) (<= StartInt_3 StartInt_7)))
   (Start_12 String (y (str.++ Start Start_5) (str.substr Start_9 StartInt_7 StartInt_4) (ite StartBool_1 Start Start_2)))
   (StartInt_7 Int (1 0 (str.len Start_7)))
   (StartBool_3 Bool (true (str.< Start_10 Start_1) (str.<= Start_10 Start_9) (str.prefixof Start_11 Start_7) (str.contains Start_3 Start_4) (= Start_6 Start_12) (= StartInt_1 StartInt_5) (<= StartInt_3 StartInt_7)))
   (Start_2 String (y (str.++ Start_6 Start_7) (str.at Start_3 StartInt) (ite StartBool_2 Start_7 Start)))
   (Start_6 String (x (str.++ Start_8 Start_5) (str.at Start_5 StartInt_3)))
   (Start_8 String (x "0" y (str.at Start StartInt_2) (str.replace Start_10 Start_7 Start_10) (ite StartBool Start_10 Start_8)))
   (StartInt_6 Int (0 (str.indexof Start_4 Start_3 StartInt_5) (str.to_int Start_2)))
   (Start_4 String ("1" y (str.++ Start_5 Start_3) (str.at Start_1 StartInt_1) (str.substr Start_5 StartInt_2 StartInt) (str.replace Start_6 Start_1 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_3)))
   (Start_10 String (y (str.replace Start_3 Start_3 Start_3) (ite StartBool Start_9 Start_7)))
   (StartInt_3 Int (1 (str.indexof Start_8 Start StartInt_5)))
   (StartInt_1 Int (1 (str.to_int Start_1)))
   (Start_1 String ("a" (str.at Start StartInt)))
   (StartInt_2 Int (0 (str.len Start_1) (str.indexof Start Start_2 StartInt_1)))
   (Start_7 String (y "" (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start_3 Start_4 Start_2) (str.from_int StartInt_1)))
   (Start_11 String ("0" (str.at Start_5 StartInt)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (str.< Start_5 Start_3) (str.<= Start_5 Start_8) (str.prefixof Start_3 Start_3) (str.suffixof Start_8 Start_7) (str.contains Start_1 Start_5) (= StartInt_3 StartInt_4) (<= StartInt StartInt_4)))
   (StartInt_4 Int (0 1 (str.indexof Start_5 Start_9 StartInt_3) (str.to_int Start_2)))
   (Start_9 String ("b" (str.at Start_9 StartInt_4) (ite StartBool Start_3 Start_6)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_7 Start_5 StartInt_6) (str.to_int Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" x (str.replace "a" y ""))))

(check-synth)
