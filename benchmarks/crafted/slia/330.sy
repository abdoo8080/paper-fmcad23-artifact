(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_7 String) (StartInt_2 Int) (Start_3 String) (Start_9 String) (Start_1 String) (StartInt_1 Int) (Start_2 String) (StartInt_6 Int) (Start_5 String) (Start_6 String) (Start_4 String) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_7 Int) (Start_8 String))
  ((Start String ("1" x (str.at Start_1 StartInt_1) (str.substr Start StartInt_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_5 Start_8 StartInt_7)))
   (StartBool Bool (true (str.suffixof Start_5 Start_2) (= StartInt_7 StartInt_5) (<= StartInt_4 StartInt_5)))
   (StartInt_3 Int (1 0))
   (StartInt_4 Int (1 0 (str.len Start) (str.to_int Start_8)))
   (Start_7 String ("1" (str.at Start_5 StartInt_3) (str.substr Start_1 StartInt_1 StartInt_1)))
   (StartInt_2 Int (0 (str.indexof Start Start StartInt_2) (str.to_int Start_1)))
   (Start_3 String ("0" y x "b"))
   (Start_9 String (x "a" (str.++ Start_3 Start_1) (str.at Start_3 StartInt_4) (str.substr Start StartInt_2 StartInt_4) (str.from_int StartInt_6)))
   (Start_1 String ("1" y "b" (str.at Start StartInt_2) (str.substr Start_1 StartInt StartInt_3) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt)))
   (StartInt_1 Int (1 0))
   (Start_2 String (y "" "a" x (str.at Start_4 StartInt_2) (str.substr Start_3 StartInt_4 StartInt_5) (str.replace Start Start_3 Start_1) (ite StartBool_1 Start_1 Start_5)))
   (StartInt_6 Int (1 (str.indexof Start_1 Start StartInt)))
   (Start_5 String (y (str.++ Start_5 Start) (str.substr Start StartInt_2 StartInt) (str.replace Start_6 Start_1 Start_6) (str.from_int StartInt_6)))
   (Start_6 String ("b" y (str.++ Start_4 Start_4) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_1 Start_6 Start_3)))
   (Start_4 String ("1" (str.++ Start_6 Start_5) (str.at Start_9 StartInt_5) (str.replace Start_4 Start_2 Start_1)))
   (StartBool_1 Bool (false (not StartBool) (str.< Start_7 Start_8) (str.<= Start_2 Start_3) (str.prefixof Start Start_1) (= Start_7 Start) (= StartInt_7 StartInt_3)))
   (StartInt_5 Int (1 0 (str.len Start_2)))
   (StartInt_7 Int (0 1 (str.len Start_4)))
   (Start_8 String ("b" (str.++ Start_1 Start_9) (str.at Start_9 StartInt_4) (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_3 Start_7 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.at (ite (str.prefixof x "a") "a" y) 0) y "0")))

(check-synth)
