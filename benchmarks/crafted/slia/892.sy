(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_3 String) (StartInt_3 Int) (Start_1 String) (StartBool_2 Bool) (Start_7 String) (Start_12 String) (Start_8 String) (StartBool_6 Bool) (StartInt_1 Int) (Start_10 String) (StartBool_1 Bool) (Start_4 String) (StartInt_2 Int) (StartBool_5 Bool) (Start_5 String) (Start_6 String) (Start_9 String) (StartBool_3 Bool) (Start_2 String) (Start_11 String) (StartInt_4 Int) (StartBool_4 Bool) (StartBool_7 Bool))
  ((Start String (y "" "b" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_1)))
   (StartInt Int (0 1 (str.len Start_8) (str.indexof Start_12 Start_1 StartInt)))
   (StartBool Bool (false true (not StartBool_6) (and StartBool_1 StartBool) (str.< Start_5 Start_6) (str.contains Start_13 Start) (= Start_8 Start_7)))
   (Start_13 String ("a" "b" y "0" x (str.substr Start_4 StartInt_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool_6 Start_3 Start_1)))
   (Start_3 String (y (str.substr Start_7 StartInt StartInt) (str.from_int StartInt_4)))
   (StartInt_3 Int (1 (str.len Start_6)))
   (Start_1 String ("" (str.substr Start_1 StartInt_4 StartInt) (str.replace Start_11 Start_1 Start) (str.from_int StartInt_4) (ite StartBool_1 Start_8 Start_7)))
   (StartBool_2 Bool (false true (not StartBool_6) (str.<= Start_1 Start_7) (str.suffixof Start_7 Start_2) (str.contains Start_6 Start_1) (= Start_12 Start_2) (= StartInt_4 StartInt_1) (<= StartInt_4 StartInt_4)))
   (Start_7 String ("b" (str.++ Start_12 Start) (str.at Start_10 StartInt_1) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_10 Start_1 Start_6)))
   (Start_12 String ("" (str.++ Start_3 Start_1)))
   (Start_8 String ("1" "" "0" y (str.++ Start_9 Start_6) (str.at Start_10 StartInt_4) (str.replace Start_6 Start_1 Start_2) (str.from_int StartInt_3) (ite StartBool Start_7 Start)))
   (StartBool_6 Bool (false (not StartBool_2) (and StartBool StartBool_4) (str.<= Start_12 Start_7) (str.suffixof Start_1 Start_9) (str.contains Start Start_10) (= Start_8 Start_11)))
   (StartInt_1 Int (0 (str.indexof Start_1 Start StartInt_2) (str.to_int Start_2)))
   (Start_10 String ("" (str.++ Start_4 Start_6) (str.replace Start_11 Start_3 Start_6) (ite StartBool_7 Start_9 Start_1)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_1 Start_1) (str.<= Start Start_2) (str.prefixof Start Start) (str.contains Start Start_4) (= Start_2 Start_4) (= StartInt StartInt_3) (<= StartInt_1 StartInt_2)))
   (Start_4 String ("b" (str.substr Start_5 StartInt_2 StartInt_1) (ite StartBool Start_4 Start_5)))
   (StartInt_2 Int (0 (str.len Start_5) (str.to_int Start_13)))
   (StartBool_5 Bool (true false (str.< Start_8 Start_2) (str.suffixof Start_5 Start_3) (= Start_7 Start_1)))
   (Start_5 String ("0" (ite StartBool_3 Start Start)))
   (Start_6 String ("b" (str.++ Start_7 Start_1) (str.at Start_2 StartInt_4) (str.from_int StartInt_1) (ite StartBool_6 Start_1 Start_8)))
   (Start_9 String (y "a" (str.replace Start_8 Start_9 Start_9)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool_4) (str.<= Start_4 Start_4) (str.contains Start Start_2) (= StartInt_1 StartInt_2) (<= StartInt_2 StartInt)))
   (Start_2 String ("a" "" y "0" "1" (str.++ Start_2 Start_3) (str.at Start_2 StartInt_3) (ite StartBool_1 Start_2 Start_1)))
   (Start_11 String (x "0" "b" "1" "" (str.at Start StartInt_1) (str.replace Start_12 Start_4 Start_7) (ite StartBool_2 Start Start_9)))
   (StartInt_4 Int (0 1 (str.indexof Start_9 Start_8 StartInt_4) (str.to_int Start_2)))
   (StartBool_4 Bool (true (and StartBool_5 StartBool_2) (str.contains Start_6 Start) (= Start_6 Start_5)))
   (StartBool_7 Bool (false (not StartBool_4) (= Start_5 Start_2) (= StartInt_4 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "1" x) "1" y)))

(check-synth)
