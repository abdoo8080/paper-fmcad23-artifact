(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartInt_4 Int) (Start_10 String) (Start_9 String) (Start_6 String) (Start_11 String) (Start_5 String) (Start_1 String) (StartBool_2 Bool) (StartInt_6 Int) (StartInt_1 Int) (Start_3 String) (Start_4 String) (Start_12 String) (Start_2 String) (StartInt_2 Int) (Start_7 String) (StartBool_1 Bool) (StartBool_3 Bool) (StartInt_3 Int) (Start_8 String))
  ((Start String ("0" "" (str.substr Start_1 StartInt StartInt) (str.replace Start Start Start_1)))
   (StartInt Int (1 0 (str.indexof Start_5 Start_10 StartInt_5)))
   (StartBool Bool (true (str.<= Start_3 Start_9) (str.prefixof Start_5 Start_10) (str.suffixof Start_11 Start_3) (str.contains Start Start) (= StartInt StartInt_5) (<= StartInt StartInt_2)))
   (StartInt_5 Int (1 0 (str.len Start_9) (str.indexof Start Start_3 StartInt_4)))
   (StartInt_4 Int (1 0 (str.len Start_2) (str.indexof Start_3 Start_5 StartInt_3)))
   (Start_10 String ("0" "1" (str.++ Start_3 Start_8) (str.from_int StartInt)))
   (Start_9 String ("a" "" y (str.at Start_3 StartInt) (str.substr Start_9 StartInt_3 StartInt_4) (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_4)))
   (Start_6 String (x "a" "" (str.++ Start_3 Start_8) (str.at Start_3 StartInt_3) (str.replace Start_4 Start Start_9) (str.from_int StartInt_1) (ite StartBool Start_7 Start_7)))
   (Start_11 String ("" (str.at Start_12 StartInt_6)))
   (Start_5 String ("" (str.at Start_2 StartInt_1) (str.replace Start_3 Start_3 Start_1) (str.from_int StartInt)))
   (Start_1 String ("1" "" "0" y "a" "b" (str.at Start_2 StartInt_1) (str.replace Start Start Start_1) (str.from_int StartInt)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_3) (str.< Start_7 Start_3) (= Start_2 Start_4) (<= StartInt_2 StartInt_3)))
   (StartInt_6 Int (0))
   (StartInt_1 Int (0 (str.len Start_3) (str.to_int Start_2)))
   (Start_3 String ("b" "a" x (str.++ Start_1 Start) (str.at Start_3 StartInt) (str.substr Start_4 StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_2 Start_4)))
   (Start_4 String ("1" "a" x (str.++ Start_4 Start_4) (str.substr Start StartInt StartInt) (str.replace Start_1 Start Start_5) (str.from_int StartInt_1)))
   (Start_12 String ("" x (str.++ Start_4 Start_11) (str.from_int StartInt_4)))
   (Start_2 String ("b" x "1" "a" y (str.replace Start_5 Start_6 Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_6)))
   (StartInt_2 Int (1 0 (str.len Start_7) (str.to_int Start_7)))
   (Start_7 String ("" (str.at Start StartInt_3) (str.substr Start_7 StartInt_2 StartInt) (ite StartBool_2 Start_1 Start_6)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.suffixof Start_1 Start_4) (<= StartInt_2 StartInt)))
   (StartBool_3 Bool (true (str.<= Start_4 Start_4) (= Start_8 Start)))
   (StartInt_3 Int (1 (str.indexof Start Start_5 StartInt) (str.to_int Start_3)))
   (Start_8 String ("1" "a" "" "b" (str.++ Start_5 Start_1) (str.at Start StartInt_1) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "0" x)))

(check-synth)
