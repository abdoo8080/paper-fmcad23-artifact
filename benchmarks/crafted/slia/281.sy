(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_14 String) (Start_15 String) (Start_8 String) (Start_9 String) (Start_5 String) (Start_6 String) (StartBool_5 Bool) (StartBool_1 Bool) (Start_7 String) (StartBool_2 Bool) (Start_3 String) (Start_4 String) (StartInt_6 Int) (StartBool_7 Bool) (StartBool_3 Bool) (StartInt_4 Int) (Start_11 String) (StartInt_8 Int) (StartInt_3 Int) (StartInt_7 Int) (Start_10 String) (StartBool_4 Bool) (Start_13 String) (Start_2 String) (StartBool_8 Bool) (StartInt_2 Int) (StartInt_1 Int) (StartInt_5 Int) (Start_12 String) (StartInt_9 Int) (Start_1 String))
  ((Start String ("a" (str.at Start StartInt) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0))
   (StartBool Bool (false true (str.< Start_11 Start_2) (str.<= Start_1 Start_5) (str.prefixof Start_8 Start_12) (= Start_10 Start_7)))
   (StartBool_6 Bool (false (and StartBool StartBool_8) (str.contains Start_8 Start_14) (<= StartInt_2 StartInt_7)))
   (Start_14 String ("" "b" x (str.++ Start Start_11) (str.substr Start_5 StartInt_6 StartInt_6)))
   (Start_15 String (y (str.++ Start_8 Start) (str.at Start_9 StartInt) (str.replace Start_7 Start_8 Start_3) (ite StartBool_5 Start_13 Start_3)))
   (Start_8 String ("1" (str.substr Start_5 StartInt_8 StartInt_1) (str.replace Start_6 Start_6 Start_7) (str.from_int StartInt_9) (ite StartBool_3 Start_1 Start)))
   (Start_9 String ("a" "" y "0" (str.++ Start_2 Start_2) (str.at Start_8 StartInt_4) (str.replace Start_7 Start Start_5) (str.from_int StartInt)))
   (Start_5 String (y (str.at Start StartInt_2) (str.substr Start_1 StartInt_7 StartInt_1) (str.replace Start_8 Start_4 Start_7) (ite StartBool Start_8 Start_5)))
   (Start_6 String (x (str.++ Start_5 Start_7) (str.replace Start Start_1 Start_5)))
   (StartBool_5 Bool (false true (and StartBool_6 StartBool_7) (str.<= Start_5 Start_4) (str.prefixof Start_4 Start_1) (str.contains Start_9 Start_5) (= Start_2 Start_4) (= StartInt_3 StartInt_4) (<= StartInt_3 StartInt_6)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start Start_1) (str.prefixof Start_2 Start) (str.suffixof Start_1 Start_3) (= StartInt_3 StartInt_4) (<= StartInt StartInt_5)))
   (Start_7 String ("a" (str.at Start_7 StartInt) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_3 Start_6 Start_7)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_1) (str.<= Start_5 Start) (str.prefixof Start_3 Start_4) (str.suffixof Start_4 Start) (str.contains Start_6 Start_7) (= Start_5 Start_5)))
   (Start_3 String (y (str.at Start_7 StartInt_2) (str.replace Start_7 Start_4 Start_1) (ite StartBool_4 Start_10 Start_9)))
   (Start_4 String ("0" (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1) (ite StartBool_2 Start_3 Start_1)))
   (StartInt_6 Int (1 0 (str.to_int Start_4)))
   (StartBool_7 Bool (true (not StartBool_5) (str.<= Start_13 Start_1) (str.prefixof Start_6 Start_9) (str.suffixof Start_3 Start_11) (<= StartInt_2 StartInt_5)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool_2) (str.< Start Start_8) (str.contains Start_9 Start_4) (<= StartInt_6 StartInt)))
   (StartInt_4 Int (1 (str.len Start_8) (str.indexof Start_1 Start_6 StartInt_8) (str.to_int Start)))
   (Start_11 String ("1" "b" "0" (str.++ Start_8 Start_5) (str.at Start_5 StartInt_2) (str.replace Start_9 Start_1 Start_6) (ite StartBool_5 Start_11 Start_12)))
   (StartInt_8 Int (0 1 (str.indexof Start_2 Start StartInt_4)))
   (StartInt_3 Int (1 (str.indexof Start_4 Start_5 StartInt_6) (str.to_int Start_7)))
   (StartInt_7 Int (0 (str.len Start_5) (str.indexof Start_4 Start_5 StartInt_7)))
   (Start_10 String ("a" "1" (str.at Start_1 StartInt_7) (str.substr Start_8 StartInt_5 StartInt_6) (ite StartBool_3 Start_6 Start_4)))
   (StartBool_4 Bool (true (and StartBool StartBool_1) (str.<= Start_6 Start_8) (str.prefixof Start_5 Start_1) (= Start_2 Start_9) (= StartInt_4 StartInt_7)))
   (Start_13 String ("1" (str.++ Start_14 Start_6) (str.at Start_15 StartInt_9) (ite StartBool_1 Start_7 Start_12)))
   (Start_2 String ("1" (str.++ Start Start) (str.replace Start_10 Start_9 Start_5)))
   (StartBool_8 Bool (true false (not StartBool_5) (and StartBool_1 StartBool_6) (str.< Start_2 Start_5) (str.<= Start_10 Start_4) (str.prefixof Start_15 Start_12) (str.suffixof Start_10 Start_8) (= Start_14 Start_3) (= StartInt_8 StartInt_5) (<= StartInt StartInt_1)))
   (StartInt_2 Int (0 1 (str.len Start)))
   (StartInt_1 Int (1 0))
   (StartInt_5 Int (0 (str.len Start_2) (str.indexof Start_3 Start StartInt_6)))
   (Start_12 String ("" "a" (str.++ Start_9 Start_1)))
   (StartInt_9 Int (0 (str.len Start_7) (str.to_int Start_4)))
   (Start_1 String (x (str.++ Start_3 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "a" "b")))

(check-synth)
