(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_3 String) (StartInt_2 Int) (Start_12 String) (Start_6 String) (Start_8 String) (Start_13 String) (Start_10 String) (Start_4 String) (StartBool_1 Bool) (Start_9 String) (StartInt_3 Int) (Start_5 String) (Start_7 String) (StartBool_2 Bool) (Start_1 String) (StartBool_3 Bool) (Start_2 String) (StartInt_5 Int) (StartBool_4 Bool) (StartInt_4 Int) (Start_11 String))
  ((Start String ("0" (ite StartBool Start Start_1)))
   (StartInt Int (0 1))
   (StartBool Bool (true false (= Start Start_11) (= StartInt_2 StartInt_1) (<= StartInt_2 StartInt_1)))
   (StartInt_1 Int (1 (str.to_int Start)))
   (Start_3 String ("b" (str.at Start_5 StartInt) (str.substr Start_12 StartInt StartInt_1)))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_7 StartInt_2) (str.to_int Start_1)))
   (Start_12 String ("" (str.++ Start_6 Start_7) (str.at Start StartInt_5) (str.replace Start_7 Start_5 Start_12)))
   (Start_6 String ("b" (str.replace Start_10 Start_5 Start_1) (str.from_int StartInt)))
   (Start_8 String ("b" "1"))
   (Start_13 String ("0" (str.at Start_12 StartInt_1) (str.substr Start_12 StartInt StartInt_5) (str.replace Start_4 Start_10 Start_11) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start_11)))
   (Start_10 String ("b" x (str.++ Start_3 Start_8) (str.at Start_10 StartInt_4) (str.from_int StartInt_1) (ite StartBool_2 Start_9 Start_3)))
   (Start_4 String ("" "b" (str.++ Start_2 Start_1) (ite StartBool_1 Start Start_1)))
   (StartBool_1 Bool (true (and StartBool StartBool) (str.< Start_3 Start_3) (str.prefixof Start_1 Start_5) (str.contains Start_5 Start_3) (= Start_5 Start_5) (= StartInt StartInt_3)))
   (Start_9 String (y (str.++ Start_4 Start_10) (str.at Start_1 StartInt) (str.replace Start_7 Start Start_8) (ite StartBool_3 Start_3 Start_5)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.indexof Start Start_3 StartInt_1) (str.to_int Start_3)))
   (Start_5 String ("" (str.at Start_6 StartInt_4) (str.substr Start_7 StartInt_2 StartInt_1) (str.replace Start_1 Start_6 Start_4) (str.from_int StartInt_2)))
   (Start_7 String ("b" x (str.++ Start_1 Start_7) (str.at Start StartInt) (str.replace Start_1 Start_8 Start_4) (ite StartBool_2 Start_6 Start_4)))
   (StartBool_2 Bool (true false (not StartBool) (str.<= Start_7 Start_8) (str.prefixof Start_1 Start_6) (str.suffixof Start_8 Start_5) (str.contains Start_9 Start_2) (= StartInt_3 StartInt_2) (<= StartInt_4 StartInt_4)))
   (Start_1 String ("0" (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool) (str.<= Start_4 Start_3) (str.prefixof Start_7 Start_4) (str.contains Start_2 Start) (<= StartInt StartInt)))
   (Start_2 String ("0" (str.substr Start_12 StartInt_5 StartInt) (str.replace Start_3 Start_6 Start_6) (ite StartBool_3 Start_13 Start_3)))
   (StartInt_5 Int (1 (str.to_int Start_10)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_4 StartBool) (str.< Start_5 Start_1) (str.<= Start_10 Start_11) (str.prefixof Start_6 Start_11)))
   (StartInt_4 Int (1 (str.indexof Start_9 Start StartInt_2)))
   (Start_11 String ("a" (str.replace Start Start_7 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains (str.++ x (str.from_int (str.indexof x "a" 1))) "1") x "a")))

(check-synth)
