(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_6 Bool) (StartInt_6 Int) (StartInt_1 Int) (Start_7 String) (Start_8 String) (StartInt_3 Int) (Start_5 String) (StartBool_1 Bool) (Start_2 String) (Start_1 String) (Start_3 String) (Start_6 String) (Start_4 String) (Start_9 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_10 String) (StartBool_4 Bool) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_5 Int))
  ((Start String ("" (str.++ Start Start_1) (str.replace Start_1 Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start)))
   (StartInt Int (0))
   (StartBool Bool (true false (and StartBool_2 StartBool_4) (str.<= Start_7 Start_5)))
   (StartBool_5 Bool (true (and StartBool StartBool_6) (str.< Start_2 Start_9) (str.<= Start_8 Start_4) (str.prefixof Start_9 Start_5) (str.contains Start_3 Start_7) (= StartInt StartInt_5)))
   (StartBool_6 Bool (false true (not StartBool_4) (and StartBool_6 StartBool_2) (str.< Start_2 Start_7) (str.suffixof Start_6 Start_4) (= Start_10 Start_10) (<= StartInt_4 StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start_1) (str.to_int Start_6)))
   (StartInt_1 Int (1 0 (str.len Start_6) (str.indexof Start_4 Start_6 StartInt_6) (str.to_int Start_6)))
   (Start_7 String ("0" (str.++ Start_8 Start_2) (str.at Start_6 StartInt_3) (str.substr Start_1 StartInt_5 StartInt_5)))
   (Start_8 String ("0" "a" (str.++ Start_2 Start_7) (str.substr Start StartInt_4 StartInt_5)))
   (StartInt_3 Int (0 (str.len Start_2)))
   (Start_5 String ("" (str.substr Start_3 StartInt StartInt) (ite StartBool Start_6 Start_3)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_1 StartBool_2) (str.prefixof Start_2 Start_1) (= StartInt_2 StartInt_2)))
   (Start_2 String (y "" "a" "0" "b" (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_3 Start_2 Start_1) (str.from_int StartInt)))
   (Start_1 String ("b" (str.++ Start_6 Start_9) (str.substr Start_5 StartInt_4 StartInt_5) (str.from_int StartInt_4) (ite StartBool_3 Start Start_2)))
   (Start_3 String (y x (str.at Start_4 StartInt_1) (str.from_int StartInt_3) (ite StartBool Start Start_4)))
   (Start_6 String ("0" (str.at Start_6 StartInt_4) (str.replace Start_7 Start_1 Start_8) (ite StartBool_3 Start_3 Start)))
   (Start_4 String (x (str.++ Start_4 Start_4) (str.at Start StartInt_3) (ite StartBool_1 Start_4 Start_1)))
   (Start_9 String ("0" (str.at Start_1 StartInt) (str.replace Start_3 Start_7 Start_6) (ite StartBool_1 Start_6 Start_2)))
   (StartInt_4 Int (0 (str.len Start_1) (str.indexof Start_8 Start_9 StartInt_1)))
   (StartBool_2 Bool (false (not StartBool) (str.< Start_1 Start_3) (str.prefixof Start_4 Start_3) (str.suffixof Start_5 Start) (= StartInt_3 StartInt_1) (<= StartInt StartInt)))
   (Start_10 String ("b" x (str.at Start_10 StartInt_4) (ite StartBool_5 Start_8 Start_3)))
   (StartBool_4 Bool (true false (not StartBool_4) (and StartBool_5 StartBool) (str.< Start_6 Start_2) (str.<= Start_2 Start_10) (str.prefixof Start_5 Start_9) (str.suffixof Start_5 Start_3) (= Start_1 Start) (<= StartInt_3 StartInt)))
   (StartInt_2 Int (0 1 (str.len Start_2)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool StartBool_3) (str.< Start_9 Start_8) (str.<= Start_4 Start_1) (str.contains Start_5 Start_4) (<= StartInt_5 StartInt)))
   (StartInt_5 Int (1 (str.len Start_8) (str.indexof Start_9 Start_1 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" "" (str.++ "0" x))))

(check-synth)
