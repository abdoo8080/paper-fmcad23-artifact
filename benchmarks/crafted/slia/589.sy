(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_1 String) (StartInt_9 Int) (StartInt_4 Int) (Start_5 String) (StartBool_6 Bool) (StartBool_5 Bool) (StartBool_4 Bool) (StartInt_8 Int) (Start_6 String) (Start_7 String) (Start_2 String) (StartInt_3 Int) (Start_3 String) (StartInt_6 Int) (StartInt_2 Int) (Start_4 String) (StartBool_2 Bool) (StartBool_3 Bool) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_1 Int) (StartInt_5 Int))
  ((Start String ("a" (str.++ Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (0 1 (str.len Start_4) (str.indexof Start_7 Start_8 StartInt_1)))
   (StartBool Bool (false (not StartBool) (str.<= Start_1 Start_1) (str.prefixof Start_6 Start_7) (str.contains Start_5 Start) (= Start_1 Start) (= StartInt_8 StartInt_6)))
   (Start_8 String ("a" (str.++ Start_7 Start_7) (str.replace Start_7 Start_8 Start_4)))
   (Start_1 String (x y "" "0" (str.++ Start_5 Start_2) (str.at Start_5 StartInt_3)))
   (StartInt_9 Int (0 (str.len Start_3) (str.to_int Start_7)))
   (StartInt_4 Int (1 (str.len Start_1) (str.indexof Start_5 Start_3 StartInt_1) (str.to_int Start_7)))
   (Start_5 String ("b" y "a" "" (str.++ Start_3 Start_1) (str.substr Start_3 StartInt_3 StartInt_6) (str.replace Start_3 Start_2 Start_3)))
   (StartBool_6 Bool (true false (and StartBool_2 StartBool_3) (str.< Start_3 Start_3) (str.<= Start_5 Start_3) (str.prefixof Start_4 Start_5) (str.suffixof Start Start) (str.contains Start_1 Start_5) (= Start_1 Start) (= StartInt_5 StartInt_2)))
   (StartBool_5 Bool (true false (and StartBool_5 StartBool_6) (str.< Start_1 Start_2) (str.contains Start_6 Start_1) (= Start_1 Start_2)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_5 StartBool_3) (str.< Start_1 Start_5)))
   (StartInt_8 Int (0 1))
   (Start_6 String (y (str.++ Start_5 Start) (str.at Start_2 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_8) (str.from_int StartInt_5)))
   (Start_7 String (y (str.++ Start_4 Start_2) (str.at Start StartInt_9) (str.replace Start_6 Start_6 Start_5) (ite StartBool_6 Start_1 Start)))
   (Start_2 String (x y "" "1" "a" "b" "0" (str.at Start_3 StartInt) (str.replace Start_2 Start_1 Start_1) (ite StartBool Start_1 Start_2)))
   (StartInt_3 Int (0 1 (str.len Start_2)))
   (Start_3 String ("" (str.++ Start_2 Start_1) (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt_2) (ite StartBool Start_3 Start_3)))
   (StartInt_6 Int (1))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_3 Start_2 StartInt)))
   (Start_4 String (x (str.++ Start_4 Start) (str.at Start_4 StartInt_4) (str.substr Start_5 StartInt_3 StartInt_4) (str.from_int StartInt_1) (ite StartBool_3 Start Start_5)))
   (StartBool_2 Bool (false true (str.<= Start_1 Start_1) (str.prefixof Start_2 Start_3) (str.contains Start_1 Start) (= Start Start_2) (<= StartInt_2 StartInt_2)))
   (StartBool_3 Bool (true false (not StartBool_4) (str.<= Start Start_5) (str.prefixof Start_5 Start) (str.contains Start_4 Start_5) (= StartInt_4 StartInt_5) (<= StartInt_6 StartInt_7)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_2) (str.< Start Start_1) (str.prefixof Start_3 Start_1) (str.suffixof Start_3 Start_1) (= StartInt_1 StartInt_2)))
   (StartInt_7 Int (1))
   (StartInt_1 Int (1 (str.len Start_4) (str.indexof Start Start_1 StartInt_3)))
   (StartInt_5 Int (0 (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "a" "0") "1")))

(check-synth)
