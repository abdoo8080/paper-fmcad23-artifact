(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (Start_12 String) (StartBool_1 Bool) (StartBool_4 Bool) (Start_5 String) (Start_8 String) (Start_10 String) (Start_11 String) (StartInt_2 Int) (StartInt_6 Int) (Start_2 String) (Start_6 String) (StartInt_7 Int) (StartInt_1 Int) (Start_1 String) (Start_9 String) (StartInt_5 Int) (Start_4 String) (StartInt_8 Int) (StartBool_2 Bool) (StartInt_3 Int) (Start_7 String) (StartBool_3 Bool) (StartInt_4 Int))
  ((Start String (x (str.++ Start_1 Start) (str.at Start StartInt_1) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_2)))
   (StartInt Int (1 (str.indexof Start Start_8 StartInt)))
   (StartBool Bool (false true (not StartBool_3) (= Start Start_2) (<= StartInt_5 StartInt_3)))
   (Start_3 String (y x (str.at Start_10 StartInt_4)))
   (Start_12 String (x "1" (str.++ Start_9 Start_7) (str.substr Start_12 StartInt_1 StartInt_5) (str.replace Start Start_12 Start_5) (str.from_int StartInt_6)))
   (StartBool_1 Bool (true false (not StartBool_3) (str.<= Start_1 Start_7) (str.suffixof Start Start_2) (str.contains Start_9 Start_3) (= Start_11 Start_10) (= StartInt StartInt_7) (<= StartInt_4 StartInt_5)))
   (StartBool_4 Bool (false true (and StartBool_4 StartBool_2) (str.< Start_4 Start_3) (str.<= Start Start_4) (str.prefixof Start_7 Start_10)))
   (Start_5 String (y (str.++ Start_9 Start) (ite StartBool_4 Start_6 Start_3)))
   (Start_8 String ("b" "" (str.at Start_6 StartInt_2) (str.substr Start_5 StartInt StartInt_6) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (Start_10 String ("" (str.++ Start_10 Start_6) (str.at Start_8 StartInt_7) (str.replace Start_4 Start_2 Start_6) (ite StartBool_2 Start_7 Start_4)))
   (Start_11 String ("0" (str.++ Start_6 Start_10) (str.at Start_3 StartInt_6) (str.substr Start_12 StartInt_8 StartInt_2) (str.replace Start_3 Start_8 Start_1) (str.from_int StartInt_3)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.indexof Start Start_1 StartInt)))
   (StartInt_6 Int (0 1 (str.len Start_3) (str.indexof Start_3 Start StartInt_6)))
   (Start_2 String ("b" (str.++ Start Start_1) (str.at Start_2 StartInt_2) (str.substr Start_2 StartInt StartInt_2)))
   (Start_6 String (x (str.substr Start_6 StartInt_2 StartInt_4) (str.replace Start_6 Start_7 Start_4) (str.from_int StartInt_5) (ite StartBool_2 Start_2 Start_4)))
   (StartInt_7 Int (1 (str.to_int Start_1)))
   (StartInt_1 Int (1 0 (str.len Start_1)))
   (Start_1 String ("a" (str.++ Start_3 Start) (ite StartBool_1 Start_4 Start)))
   (Start_9 String ("1" y (str.++ Start_8 Start_4) (str.at Start_8 StartInt_6) (str.replace Start_1 Start_1 Start_7)))
   (StartInt_5 Int (1 0 (str.indexof Start_7 Start_4 StartInt) (str.to_int Start)))
   (Start_4 String ("b" y "" (str.substr Start_5 StartInt StartInt_1) (str.replace Start Start_3 Start_5) (str.from_int StartInt_3)))
   (StartInt_8 Int (0))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_3) (str.< Start_6 Start_5) (str.prefixof Start Start) (str.suffixof Start_7 Start_1) (str.contains Start_4 Start_1) (<= StartInt_4 StartInt_3)))
   (StartInt_3 Int (1 (str.indexof Start_6 Start_1 StartInt_1)))
   (Start_7 String ("a" y "1" (str.substr Start_4 StartInt_2 StartInt_3) (str.from_int StartInt_3) (ite StartBool_1 Start_7 Start_7)))
   (StartBool_3 Bool (true (str.suffixof Start_2 Start_1) (= StartInt_3 StartInt_4)))
   (StartInt_4 Int (1 0 (str.indexof Start_8 Start_6 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.to_int (str.replace x "1" "")))))

(check-synth)
