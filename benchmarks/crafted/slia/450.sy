(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_5 Int) (StartBool_4 Bool) (StartBool_5 Bool) (Start_1 String) (Start_8 String) (Start_7 String) (Start_2 String) (StartBool_2 Bool) (Start_4 String) (StartInt_2 Int) (Start_5 String) (StartInt_3 Int) (Start_6 String) (StartInt_1 Int) (Start_3 String) (StartBool_1 Bool) (StartBool_3 Bool) (StartInt_4 Int))
  ((Start String ("a" (str.replace Start Start Start_1) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_2)))
   (StartInt Int (0 1 (str.len Start_3) (str.indexof Start_4 Start_4 StartInt_2) (str.to_int Start_1)))
   (StartBool Bool (true (and StartBool_2 StartBool_1) (str.contains Start_1 Start_4) (= StartInt_5 StartInt_5) (<= StartInt_5 StartInt_2)))
   (Start_9 String (x (ite StartBool_2 Start Start_8)))
   (StartInt_5 Int (1 (str.len Start_9) (str.to_int Start_9)))
   (StartBool_4 Bool (false true (and StartBool StartBool_2) (str.< Start_4 Start_1) (str.prefixof Start_6 Start_6) (str.suffixof Start_5 Start_5) (= Start_7 Start_4)))
   (StartBool_5 Bool (false (and StartBool_3 StartBool_4) (str.<= Start_7 Start_7) (str.suffixof Start_1 Start_8) (= Start_8 Start_8) (<= StartInt_3 StartInt_1)))
   (Start_1 String ("b" "1" (str.at Start_7 StartInt_3) (str.substr Start_1 StartInt StartInt_1) (ite StartBool_3 Start_3 Start_4)))
   (Start_8 String ("0" x "" (str.++ Start_5 Start_4) (ite StartBool Start_5 Start_1)))
   (Start_7 String ("" "b" "1" "a" (str.replace Start_4 Start_8 Start_8) (ite StartBool_2 Start_6 Start_4)))
   (Start_2 String ("" (str.++ Start_2 Start_3) (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_1) (ite StartBool_2 Start Start_3)))
   (StartBool_2 Bool (false (str.< Start Start) (str.suffixof Start_3 Start_1) (= StartInt_1 StartInt_2) (<= StartInt_1 StartInt_2)))
   (Start_4 String (x (str.at Start_3 StartInt) (str.replace Start_5 Start_5 Start_5) (ite StartBool Start_2 Start)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_1 StartInt_1) (str.to_int Start_4)))
   (Start_5 String ("0" (str.++ Start_3 Start_6) (str.at Start_3 StartInt) (ite StartBool_2 Start_6 Start)))
   (StartInt_3 Int (1 (str.len Start_6) (str.indexof Start_4 Start_1 StartInt_4)))
   (Start_6 String (y "1" (str.from_int StartInt_1)))
   (StartInt_1 Int (0 (str.indexof Start Start StartInt) (str.to_int Start_6)))
   (Start_3 String ("b" x "1" (str.at Start_3 StartInt) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_3 StartBool_3) (str.prefixof Start Start_4)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_4 StartBool_5) (str.< Start_5 Start_4) (str.suffixof Start_6 Start_3) (str.contains Start_6 Start_7) (= StartInt_3 StartInt)))
   (StartInt_4 Int (0 1 (str.indexof Start_5 Start_1 StartInt) (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.to_int (str.replace x "" "1")))))

(check-synth)
