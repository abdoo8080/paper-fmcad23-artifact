(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_8 Bool) (Start_20 String) (StartInt_13 Int) (StartInt_12 Int) (Start_19 String) (Start_1 String) (StartInt_1 Int) (StartBool_7 Bool) (Start_16 String) (Start_3 String) (Start_7 String) (StartBool_6 Bool) (Start_8 String) (Start_9 String) (Start_5 String) (Start_13 String) (StartInt_10 Int) (StartInt_4 Int) (StartInt_2 Int) (StartInt_3 Int) (StartBool_4 Bool) (StartInt_11 Int) (StartInt_9 Int) (StartInt_6 Int) (Start_6 String) (Start_4 String) (Start_18 String) (Start_17 String) (StartBool_2 Bool) (Start_2 String) (StartInt_7 Int) (StartBool_3 Bool) (StartInt_5 Int) (Start_12 String) (Start_10 String) (StartInt_8 Int) (Start_11 String) (StartBool_5 Bool) (Start_14 String) (StartBool_1 Bool) (Start_15 String))
  ((Start String ("b" "1" (str.++ Start Start) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1 0 (str.indexof Start_11 Start_8 StartInt_7) (str.to_int Start_1)))
   (StartBool Bool (true (not StartBool) (and StartBool_6 StartBool_8) (str.< Start_17 Start_7) (str.<= Start_19 Start_15) (str.prefixof Start_15 Start_14) (= Start_10 Start_13) (<= StartInt_12 StartInt)))
   (StartBool_8 Bool (false true (not StartBool_1) (and StartBool_5 StartBool_5) (str.< Start_16 Start_8) (str.<= Start_9 Start_11) (= StartInt_10 StartInt)))
   (Start_20 String (y "b" "1" (str.at Start_4 StartInt_9) (str.replace Start Start_20 Start_20) (str.from_int StartInt_6) (ite StartBool_8 Start_18 Start_2)))
   (StartInt_13 Int (1 0 (str.indexof Start_17 Start_14 StartInt_9) (str.to_int Start_9)))
   (StartInt_12 Int (0 1 (str.len Start_10) (str.indexof Start_20 Start_3 StartInt_13)))
   (Start_19 String ("" (str.replace Start Start_7 Start_7) (ite StartBool_5 Start_3 Start_13)))
   (Start_1 String (x "" (str.replace Start_6 Start_19 Start_7) (ite StartBool_3 Start_2 Start_16)))
   (StartInt_1 Int (0 (str.indexof Start_15 Start_1 StartInt) (str.to_int Start)))
   (StartBool_7 Bool (true (not StartBool_4) (str.< Start_11 Start_18) (str.<= Start_14 Start_4) (str.prefixof Start_7 Start_7) (str.contains Start Start_4) (= Start_15 Start_10)))
   (Start_16 String ("" x "1" (str.++ Start_10 Start_15) (str.replace Start_6 Start_5 Start_3) (ite StartBool_6 Start_9 Start_17)))
   (Start_3 String ("1" (str.substr Start_3 StartInt StartInt_8) (str.from_int StartInt_8)))
   (Start_7 String (x "" (str.++ Start_8 Start_3) (str.at Start_5 StartInt_7) (str.from_int StartInt_8)))
   (StartBool_6 Bool (false (and StartBool_7 StartBool_4) (str.suffixof Start_2 Start_5) (= Start_16 Start_17) (= StartInt_11 StartInt_8) (<= StartInt_2 StartInt_9)))
   (Start_8 String (y "0" "1" (str.at Start_1 StartInt_2) (str.substr Start_7 StartInt_6 StartInt_3) (str.replace Start Start_5 Start_7)))
   (Start_9 String ("" "a" x (str.at Start_2 StartInt_2) (str.replace Start_12 Start_2 Start_2) (str.from_int StartInt_9)))
   (Start_5 String ("" (str.++ Start_3 Start_6) (str.at Start_5 StartInt_5) (ite StartBool_3 Start Start_6)))
   (Start_13 String ("a" "b" (str.++ Start_14 Start_3) (str.at Start_13 StartInt) (str.substr Start_12 StartInt_11 StartInt_11) (str.from_int StartInt) (ite StartBool_5 Start_3 Start_3)))
   (StartInt_10 Int (1 0 (str.len Start_3) (str.indexof Start_2 Start_6 StartInt_8)))
   (StartInt_4 Int (1 (str.len Start_2) (str.to_int Start_5)))
   (StartInt_2 Int (1 (str.len Start_14) (str.indexof Start_1 Start_3 StartInt_8)))
   (StartInt_3 Int (1 (str.len Start_2) (str.indexof Start_1 Start_1 StartInt_4)))
   (StartBool_4 Bool (false true (str.< Start_2 Start_4) (str.contains Start_2 Start_4) (= StartInt_3 StartInt_1)))
   (StartInt_11 Int (0 1 (str.to_int Start_10)))
   (StartInt_9 Int (0 1 (str.len Start_11) (str.indexof Start_9 Start_3 StartInt_10)))
   (StartInt_6 Int (0 (str.indexof Start_4 Start_3 StartInt_3)))
   (Start_6 String (x "1" "" y "b" "0" "a" (str.substr Start_6 StartInt_7 StartInt_4) (str.replace Start Start_3 Start_1) (str.from_int StartInt_1)))
   (Start_4 String ("b" (str.at Start_2 StartInt_2)))
   (Start_18 String ("a" (ite StartBool_1 Start_8 Start_3)))
   (Start_17 String ("" (str.++ Start_7 Start_17) (str.replace Start_3 Start_12 Start_14) (str.from_int StartInt_4)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_4 StartBool_2) (str.<= Start_3 Start_4) (str.contains Start_1 Start_4) (= StartInt StartInt)))
   (Start_2 String ("0" (str.at Start_1 StartInt_2) (str.replace Start_3 Start Start_2) (ite StartBool_2 Start_1 Start_1)))
   (StartInt_7 Int (1 (str.to_int Start_8)))
   (StartBool_3 Bool (true (not StartBool_1) (str.< Start_9 Start_8) (str.<= Start_4 Start_3) (str.prefixof Start Start_1) (str.suffixof Start_10 Start_11) (= StartInt_9 StartInt_5) (<= StartInt_7 StartInt_6)))
   (StartInt_5 Int (0 1 (str.len Start_2) (str.indexof Start_6 Start_7 StartInt_6) (str.to_int Start_8)))
   (Start_12 String ("0" (str.++ Start_1 Start_2) (str.substr Start_9 StartInt StartInt_7) (str.replace Start_10 Start_8 Start_5) (str.from_int StartInt_7) (ite StartBool_3 Start_8 Start_13)))
   (Start_10 String (y (str.++ Start_5 Start_4) (str.at Start_2 StartInt_9) (str.substr Start_8 StartInt_8 StartInt_7) (str.from_int StartInt_2) (ite StartBool_4 Start_4 Start_5)))
   (StartInt_8 Int (1 0 (str.len Start_1) (str.to_int Start_4)))
   (Start_11 String ("0" (str.at Start_11 StartInt_4) (str.substr Start_2 StartInt_1 StartInt_4) (str.from_int StartInt_5)))
   (StartBool_5 Bool (true (str.< Start_13 Start_13) (str.<= Start_11 Start_5) (str.prefixof Start_13 Start_2) (str.suffixof Start_7 Start_10)))
   (Start_14 String ("0" (str.++ Start_5 Start) (str.replace Start_8 Start_15 Start) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false (not StartBool_5) (str.< Start_3 Start_2) (str.<= Start_2 Start_8) (= Start_4 Start_16) (= StartInt_1 StartInt_5)))
   (Start_15 String ("a" x "" (str.++ Start_15 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= x "1") "a" x)))

(check-synth)
