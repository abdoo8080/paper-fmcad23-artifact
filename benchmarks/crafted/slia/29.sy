(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_15 String) (Start_2 String) (StartInt_1 Int) (StartInt_5 Int) (Start_14 String) (Start_13 String) (StartBool_1 Bool) (Start_4 String) (StartInt_2 Int) (StartBool_5 Bool) (Start_8 String) (StartBool_3 Bool) (Start_5 String) (Start_6 String) (Start_7 String) (Start_11 String) (StartBool_4 Bool) (StartInt_4 Int) (Start_10 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_9 String) (Start_3 String) (Start_12 String))
  ((Start String ("" (str.++ Start Start_1) (str.substr Start_2 StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (0 1 (str.len Start_8) (str.indexof Start_4 Start_14 StartInt_4) (str.to_int Start_9)))
   (StartBool Bool (true false (not StartBool) (str.suffixof Start_7 Start_4) (str.contains Start_1 Start_6)))
   (Start_1 String ("b" (str.++ Start Start_11) (str.at Start_10 StartInt_2) (str.substr Start_6 StartInt_2 StartInt_2) (str.replace Start_7 Start_9 Start_8)))
   (Start_15 String (y (str.++ Start_12 Start_4) (str.replace Start_3 Start_7 Start_15) (str.from_int StartInt_3)))
   (Start_2 String ("0" "1" x (str.replace Start_10 Start_13 Start_4) (ite StartBool Start_11 Start_15)))
   (StartInt_1 Int (0 1 (str.to_int Start_14)))
   (StartInt_5 Int (1 0))
   (Start_14 String ("0" (str.++ Start_5 Start_11) (str.at Start_6 StartInt_4) (str.substr Start_8 StartInt StartInt_5)))
   (Start_13 String (x (ite StartBool_2 Start_4 Start_1)))
   (StartBool_1 Bool (true (and StartBool_5 StartBool_4) (str.< Start_1 Start_4) (str.contains Start_8 Start_12)))
   (Start_4 String ("" y (str.substr Start StartInt_4 StartInt)))
   (StartInt_2 Int (1 (str.len Start)))
   (StartBool_5 Bool (true false (str.suffixof Start_4 Start_13) (str.contains Start_14 Start) (= StartInt_2 StartInt_2)))
   (Start_8 String ("1" "b" y "" x "a" (str.++ Start_4 Start_6) (str.at Start StartInt_4) (str.replace Start_4 Start_2 Start_2)))
   (StartBool_3 Bool (true (not StartBool_3) (str.<= Start_5 Start_2) (str.suffixof Start_6 Start_5) (str.contains Start_3 Start_7)))
   (Start_5 String ("" y "b" (str.at Start_3 StartInt) (str.replace Start_2 Start_6 Start_1) (str.from_int StartInt)))
   (Start_6 String ("1" "b" x y (str.from_int StartInt_2) (ite StartBool_3 Start_3 Start_6)))
   (Start_7 String ("" "1" (str.++ Start Start_2) (str.at Start_8 StartInt_3) (str.substr Start_8 StartInt_1 StartInt_1) (ite StartBool_4 Start_7 Start_5)))
   (Start_11 String (y (str.at Start_8 StartInt_1) (ite StartBool_1 Start_9 Start_6)))
   (StartBool_4 Bool (false (not StartBool_3) (and StartBool_4 StartBool_4) (str.<= Start_1 Start_4) (str.prefixof Start_5 Start_1) (str.suffixof Start_9 Start_4) (str.contains Start_10 Start_7) (<= StartInt_2 StartInt_4)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_8 StartInt_3)))
   (Start_10 String ("0" (str.at Start_11 StartInt_2) (str.replace Start_10 Start_8 Start_7) (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start_7)))
   (StartInt_3 Int (0 1 (str.len Start_6) (str.indexof Start_12 Start_12 StartInt)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_1) (str.<= Start_3 Start_3) (str.prefixof Start_11 Start) (str.suffixof Start_12 Start_8) (= Start_12 Start_10) (= StartInt_3 StartInt_1)))
   (Start_9 String ("a" x (str.++ Start_11 Start_11) (str.replace Start_5 Start_5 Start_3)))
   (Start_3 String (x (str.++ Start Start_4) (str.replace Start_2 Start_3 Start_1) (ite StartBool_2 Start Start_5)))
   (Start_12 String (x (str.++ Start_12 Start_10) (str.from_int StartInt) (ite StartBool_4 Start_1 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "1" y "") "b")))

(check-synth)
