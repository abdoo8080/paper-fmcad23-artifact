(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_21 String) (Start_20 String) (Start_19 String) (StartInt_2 Int) (Start_3 String) (Start_13 String) (StartInt_7 Int) (StartInt_5 Int) (StartInt_6 Int) (Start_5 String) (Start_15 String) (StartInt_4 Int) (StartInt_11 Int) (Start_6 String) (StartBool_3 Bool) (Start_1 String) (Start_7 String) (StartInt_3 Int) (Start_12 String) (Start_4 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_16 String) (StartInt_1 Int) (Start_9 String) (Start_10 String) (Start_8 String) (StartInt_8 Int) (Start_2 String) (Start_11 String) (StartInt_10 Int) (StartBool_4 Bool) (Start_17 String) (StartInt_9 Int) (Start_18 String) (Start_14 String))
  ((Start String (x "0" "1" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 (str.len Start_3) (str.indexof Start Start_2 StartInt_9)))
   (StartBool Bool (true false (and StartBool_1 StartBool) (str.< Start_11 Start_18) (str.<= Start_20 Start_12) (str.suffixof Start_18 Start_1) (str.contains Start_11 Start_21) (= StartInt_9 StartInt_6)))
   (Start_21 String ("0" (str.substr Start_10 StartInt_9 StartInt_7)))
   (Start_20 String ("1" "b" x "" "a" "0" y (str.++ Start_3 Start_14) (str.substr Start_4 StartInt_11 StartInt_9) (str.from_int StartInt_10)))
   (Start_19 String (x "b" "0" y (str.++ Start_2 Start_9) (str.at Start_18 StartInt_9) (str.replace Start_12 Start_18 Start_9)))
   (StartInt_2 Int (1 0 (str.len Start_4) (str.indexof Start_19 Start_13 StartInt) (str.to_int Start_20)))
   (Start_3 String ("" (str.substr Start_18 StartInt_3 StartInt_6) (str.replace Start_19 Start_5 Start_11) (ite StartBool_3 Start_13 Start_9)))
   (Start_13 String (y (str.substr Start_9 StartInt_8 StartInt_5) (ite StartBool_2 Start_14 Start_14)))
   (StartInt_7 Int (1))
   (StartInt_5 Int (1 (str.to_int Start)))
   (StartInt_6 Int (0 (str.len Start_3) (str.indexof Start_5 Start StartInt) (str.to_int Start_5)))
   (Start_5 String (x y (str.++ Start_5 Start_5) (str.at Start_7 StartInt_1) (str.substr Start_7 StartInt_6 StartInt_1) (str.from_int StartInt_7)))
   (Start_15 String ("" (str.at Start_17 StartInt_1)))
   (StartInt_4 Int (1 0 (str.indexof Start Start StartInt_5)))
   (StartInt_11 Int (0 (str.len Start_3)))
   (Start_6 String ("a" (str.at Start_2 StartInt_1) (str.substr Start_5 StartInt_2 StartInt_4) (str.replace Start_3 Start_4 Start) (str.from_int StartInt_4)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool_3 StartBool_1) (str.<= Start_4 Start) (= Start_4 Start_1) (= StartInt_3 StartInt_2)))
   (Start_1 String ("1" (str.++ Start_1 Start_1) (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_3 Start_1 Start) (ite StartBool_1 Start_3 Start_1)))
   (Start_7 String ("1" y x "b" (str.substr Start_5 StartInt_2 StartInt_4) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_2 Start StartInt_1)))
   (Start_12 String (y "b" (str.++ Start_6 Start_4)))
   (Start_4 String ("1" (str.at Start_3 StartInt) (str.replace Start_5 Start_6 Start_2)))
   (StartBool_2 Bool (true false (str.< Start_8 Start_5) (str.<= Start_7 Start_4) (str.prefixof Start_7 Start_6) (str.suffixof Start_5 Start_7) (str.contains Start_2 Start_4) (= Start Start_9) (= StartInt_6 StartInt_4) (<= StartInt_2 StartInt_2)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (str.prefixof Start Start_3) (str.suffixof Start_1 Start_2) (str.contains Start Start_2) (= StartInt_3 StartInt_3)))
   (Start_16 String (x (str.++ Start_8 Start_16) (str.at Start_15 StartInt_10) (str.replace Start_9 Start_3 Start)))
   (StartInt_1 Int (0))
   (Start_9 String ("a" (str.at Start_8 StartInt_7) (str.substr Start_3 StartInt_8 StartInt) (str.replace Start_2 Start_10 Start_1) (str.from_int StartInt_8)))
   (Start_10 String ("1" y "b" (str.++ Start_4 Start_7) (str.substr Start_8 StartInt StartInt) (ite StartBool_2 Start_1 Start_2)))
   (Start_8 String (y "" "b" (str.++ Start_4 Start_11) (str.at Start_4 StartInt_8) (str.from_int StartInt_6) (ite StartBool Start_5 Start_12)))
   (StartInt_8 Int (1 0 (str.to_int Start_9)))
   (Start_2 String (y (str.++ Start Start_2) (str.at Start_1 StartInt) (str.replace Start Start_1 Start) (str.from_int StartInt_3)))
   (Start_11 String ("" "1" (str.++ Start_13 Start_14) (str.from_int StartInt_9) (ite StartBool_4 Start_6 Start_13)))
   (StartInt_10 Int (0 (str.to_int Start_12)))
   (StartBool_4 Bool (false (str.< Start_15 Start_12) (str.prefixof Start_14 Start_6) (str.suffixof Start_6 Start_16) (= StartInt_1 StartInt_7)))
   (Start_17 String (x (str.++ Start_7 Start) (str.from_int StartInt_10)))
   (StartInt_9 Int (0 (str.indexof Start_9 Start_16 StartInt) (str.to_int Start_18)))
   (Start_18 String (y "" x "a" (str.++ Start Start_9) (str.substr Start StartInt_7 StartInt_8) (str.replace Start_8 Start_4 Start_2)))
   (Start_14 String ("" "0" "a" y "1" "b" x (str.at Start_4 StartInt_4) (str.from_int StartInt_4) (ite StartBool_4 Start_12 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "1" y "b") 1 (str.indexof x "1" 0))))

(check-synth)
