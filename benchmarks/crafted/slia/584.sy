(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartBool_2 Bool) (Start_3 String) (StartInt_2 Int) (Start_11 String) (Start_10 String) (StartInt_3 Int) (Start_2 String) (Start_6 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_12 String) (Start_7 String) (StartInt_6 Int) (StartInt_1 Int) (Start_8 String) (Start_4 String) (Start_9 String) (Start_5 String) (StartInt_5 Int))
  ((Start String ("0" (str.++ Start Start_1) (str.at Start StartInt) (ite StartBool Start_2 Start)))
   (StartInt Int (0 1 (str.len Start_8) (str.to_int Start_6)))
   (StartBool Bool (true (str.< Start_5 Start_6) (str.<= Start_7 Start_6) (str.contains Start_6 Start_10) (= StartInt_6 StartInt_1)))
   (Start_1 String ("b" (str.++ Start_5 Start_9) (str.substr Start_8 StartInt_5 StartInt_5) (str.replace Start_5 Start_11 Start_8) (ite StartBool_1 Start_8 Start_12)))
   (StartBool_2 Bool (true false (str.<= Start_12 Start_5) (str.prefixof Start_3 Start_5) (str.suffixof Start_4 Start_4) (= Start_5 Start_12) (<= StartInt StartInt_4)))
   (Start_3 String ("1" "a" (str.at Start_9 StartInt_4) (str.substr Start_4 StartInt_4 StartInt_3) (ite StartBool_2 Start_10 Start_12)))
   (StartInt_2 Int (0 (str.len Start_4) (str.to_int Start_8)))
   (Start_11 String ("a" (str.++ Start_6 Start_10) (str.at Start_10 StartInt) (str.substr Start_5 StartInt StartInt_6) (ite StartBool_1 Start_8 Start_4)))
   (Start_10 String (y (str.substr Start_8 StartInt StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_5 Start_11)))
   (StartInt_3 Int (1 (str.len Start_5) (str.indexof Start_4 Start_5 StartInt_5) (str.to_int Start_1)))
   (Start_2 String ("b" "" (str.++ Start_3 Start_4) (str.from_int StartInt_1) (ite StartBool Start Start_5)))
   (Start_6 String (x "" (str.++ Start_1 Start_4)))
   (StartInt_4 Int (0 1 (str.indexof Start_1 Start_2 StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start Start_1) (str.<= Start_9 Start_2) (str.suffixof Start_2 Start_8) (<= StartInt_5 StartInt)))
   (Start_12 String ("a" y "" "1" (str.++ Start_3 Start_9)))
   (Start_7 String ("0" "1" "" x (str.at Start StartInt) (ite StartBool Start_2 Start_2)))
   (StartInt_6 Int (0 (str.indexof Start_11 Start_2 StartInt) (str.to_int Start_8)))
   (StartInt_1 Int (0 1 (str.len Start_7)))
   (Start_8 String (y (str.at Start_4 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_7 Start_9 Start_3) (str.from_int StartInt_4)))
   (Start_4 String ("" "1" x (str.at Start_8 StartInt) (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_5 Start_5 Start_6) (ite StartBool Start_6 Start_8)))
   (Start_9 String (x y "0" "" "a" (str.++ Start_3 Start_10) (str.at Start_9 StartInt) (str.substr Start_6 StartInt_2 StartInt_1) (ite StartBool_1 Start Start_3)))
   (Start_5 String ("0" "1" "b" (str.++ Start_4 Start) (str.replace Start Start Start_6) (str.from_int StartInt)))
   (StartInt_5 Int (0 (str.to_int Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "" x) "0" "")))

(check-synth)
