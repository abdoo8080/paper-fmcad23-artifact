(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_6 String) (Start_3 String) (StartInt_2 Int) (StartInt_3 Int) (StartBool_3 Bool) (Start_1 String) (Start_2 String) (StartBool_1 Bool) (StartInt_6 Int) (Start_4 String) (StartInt_7 Int) (Start_7 String) (Start_5 String) (StartInt_4 Int) (StartInt_1 Int) (StartInt_5 Int) (StartBool_2 Bool))
  ((Start String ("" y (str.++ Start Start_1) (str.at Start StartInt_1) (str.substr Start_2 StartInt StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 (str.indexof Start_5 Start_1 StartInt) (str.to_int Start_1)))
   (StartBool Bool (true (and StartBool StartBool_4) (str.< Start_4 Start_4) (str.<= Start_2 Start_4) (str.prefixof Start_2 Start_4) (str.suffixof Start_4 Start_6) (= StartInt_4 StartInt_7) (<= StartInt_2 StartInt_5)))
   (StartBool_5 Bool (false true (str.< Start_7 Start_5) (str.<= Start_6 Start_1) (str.prefixof Start_6 Start_5) (str.suffixof Start_4 Start)))
   (StartBool_4 Bool (true false (not StartBool_5) (str.< Start_3 Start_6) (str.contains Start_5 Start_4) (= StartInt_2 StartInt_5) (<= StartInt_1 StartInt_6)))
   (Start_6 String (y "1" "" "0" (str.++ Start_5 Start_2) (str.at Start_4 StartInt) (ite StartBool_4 Start_3 Start_4)))
   (Start_3 String ("a" "b" y "0" "" "1" (str.at Start_6 StartInt_2) (str.replace Start_1 Start_1 Start) (ite StartBool_3 Start_2 Start_6)))
   (StartInt_2 Int (0 1 (str.len Start)))
   (StartInt_3 Int (1 (str.to_int Start_1)))
   (StartBool_3 Bool (false (not StartBool_3) (and StartBool StartBool_1) (str.< Start_2 Start) (str.prefixof Start_4 Start_2) (str.suffixof Start Start)))
   (Start_1 String ("1" (str.at Start StartInt_3) (str.substr Start_3 StartInt_2 StartInt_3) (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start_2)))
   (Start_2 String ("b" (str.++ Start_1 Start_2) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool StartBool_1) (str.< Start_1 Start_1) (str.<= Start_2 Start_3) (str.suffixof Start_1 Start_2) (str.contains Start_2 Start_4)))
   (StartInt_6 Int (0 (str.len Start)))
   (Start_4 String ("b" (str.at Start_2 StartInt_1) (str.replace Start_1 Start_1 Start_5) (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start_3)))
   (StartInt_7 Int (1 0))
   (Start_7 String ("0" "1" (str.++ Start_5 Start_3) (str.from_int StartInt_7)))
   (Start_5 String ("0" "" (str.at Start_4 StartInt_4) (str.substr Start_1 StartInt_5 StartInt_1)))
   (StartInt_4 Int (1 (str.len Start_3)))
   (StartInt_1 Int (1 0))
   (StartInt_5 Int (1 0 (str.len Start)))
   (StartBool_2 Bool (false true (not StartBool_3) (str.<= Start Start_1) (str.prefixof Start_5 Start_3) (str.contains Start_1 Start_1) (= Start_1 Start_5) (<= StartInt_5 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace "0" y "")))))

(check-synth)
