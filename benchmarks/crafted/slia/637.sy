(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (StartInt_6 Int) (Start_9 String) (StartInt_4 Int) (StartBool_2 Bool) (StartInt_1 Int) (Start_6 String) (Start_1 String) (Start_3 String) (StartInt_5 Int) (Start_4 String) (Start_5 String) (StartBool_1 Bool) (Start_2 String) (Start_7 String) (StartInt_3 Int) (Start_8 String))
  ((Start String (x (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (true false (str.< Start Start) (str.<= Start Start_1) (str.prefixof Start Start_1) (str.suffixof Start Start) (= Start_1 Start_2) (= StartInt_1 StartInt)))
   (StartInt_2 Int (0))
   (StartInt_6 Int (1 (str.indexof Start Start_8 StartInt_5) (str.to_int Start_1)))
   (Start_9 String (x (str.++ Start_9 Start_8) (str.at Start_8 StartInt_1) (str.substr Start_8 StartInt_5 StartInt_6) (str.replace Start_5 Start Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_7) (str.indexof Start_6 Start_1 StartInt_1)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_2 StartBool_1) (str.suffixof Start_8 Start_4) (= StartInt_4 StartInt_1) (<= StartInt_2 StartInt_2)))
   (StartInt_1 Int (0 1 (str.to_int Start_1)))
   (Start_6 String ("b" "1" (str.at Start_7 StartInt_1) (str.substr Start_2 StartInt_3 StartInt_3) (str.replace Start_7 Start_6 Start_1) (ite StartBool Start Start_1)))
   (Start_1 String (y (str.++ Start_1 Start) (str.replace Start_2 Start_3 Start) (ite StartBool Start_3 Start_2)))
   (Start_3 String ("" (str.at Start_3 StartInt_2) (str.replace Start Start_4 Start) (str.from_int StartInt_2) (ite StartBool Start_4 Start_2)))
   (StartInt_5 Int (1 0 (str.len Start_9) (str.to_int Start_2)))
   (Start_4 String ("" "a" y "0" (str.at Start_3 StartInt) (ite StartBool_1 Start_3 Start_5)))
   (Start_5 String ("b" (str.replace Start_1 Start_3 Start_4) (ite StartBool_2 Start_3 Start_6)))
   (StartBool_1 Bool (true false (and StartBool StartBool) (str.< Start_8 Start_6) (str.<= Start_6 Start_8) (str.prefixof Start_3 Start_7) (str.suffixof Start_4 Start_4) (str.contains Start_9 Start) (= Start_6 Start_1) (= StartInt_2 StartInt)))
   (Start_2 String (x y (str.++ Start_2 Start_2) (str.from_int StartInt_1)))
   (Start_7 String ("" "a" x (str.++ Start_6 Start_1) (str.substr Start_8 StartInt StartInt_1) (str.replace Start_6 Start_3 Start_8)))
   (StartInt_3 Int (1 0 (str.indexof Start_8 Start_1 StartInt_3)))
   (Start_8 String ("1" y (str.at Start_7 StartInt_3) (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start Start Start_5) (ite StartBool Start_5 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ x (str.replace "a" x "0"))))

(check-synth)
