(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_7 String) (Start_6 String) (Start_5 String) (StartInt_4 Int) (Start_1 String) (Start_9 String) (StartBool_3 Bool) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_2 Int) (StartBool_2 Bool) (Start_3 String) (Start_2 String) (Start_4 String) (StartInt_1 Int) (StartBool_4 Bool))
  ((Start String ("0" (str.at Start StartInt_1) (str.substr Start StartInt_1 StartInt) (str.replace Start_1 Start_2 Start) (ite StartBool Start_1 Start_2)))
   (StartInt Int (1 (str.indexof Start_1 Start_1 StartInt_2) (str.to_int Start)))
   (StartBool Bool (false (not StartBool_2) (str.prefixof Start_3 Start) (str.suffixof Start_1 Start_1) (= StartInt_1 StartInt_3) (<= StartInt_2 StartInt_2)))
   (Start_8 String (x "b" "0" (str.replace Start_1 Start_4 Start_7) (ite StartBool_3 Start_5 Start_1)))
   (Start_7 String ("1" (str.++ Start_6 Start_1) (str.substr Start_5 StartInt_2 StartInt) (str.from_int StartInt_3) (ite StartBool_2 Start_8 Start_2)))
   (Start_6 String ("0" "1" x "" (str.substr Start_7 StartInt_1 StartInt_1) (str.replace Start_1 Start_6 Start_7)))
   (Start_5 String ("a" (str.++ Start_3 Start_1) (str.replace Start_1 Start_5 Start_6) (str.from_int StartInt_2)))
   (StartInt_4 Int (0 (str.indexof Start_9 Start_6 StartInt_3)))
   (Start_1 String ("a" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt StartInt) (str.replace Start_3 Start_3 Start_2) (ite StartBool_1 Start_2 Start_2)))
   (Start_9 String ("1" (str.++ Start_9 Start_6) (str.at Start_8 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_4)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_1 StartBool) (str.<= Start_6 Start_6) (str.suffixof Start_8 Start_6) (str.contains Start_3 Start_2) (= StartInt_2 StartInt_4)))
   (StartBool_1 Bool (true false (str.< Start_3 Start_1) (str.<= Start Start_2) (str.prefixof Start_3 Start_2) (str.suffixof Start_1 Start_3) (str.contains Start_2 Start_2)))
   (StartInt_3 Int (0 (str.indexof Start_3 Start_3 StartInt_1)))
   (StartInt_2 Int (0 1))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_3) (str.< Start_1 Start_1) (str.<= Start_2 Start_1) (str.prefixof Start_3 Start) (str.contains Start_4 Start_1) (= Start Start_4) (<= StartInt_2 StartInt_2)))
   (Start_3 String ("0" (str.at Start StartInt_2) (str.replace Start_1 Start Start_2) (str.from_int StartInt_1)))
   (Start_2 String ("0" "a" (str.++ Start Start) (str.replace Start_1 Start Start)))
   (Start_4 String ("1" x (str.at Start_2 StartInt_1) (str.from_int StartInt) (ite StartBool_2 Start Start)))
   (StartInt_1 Int (1 (str.indexof Start Start_1 StartInt) (str.to_int Start_3)))
   (StartBool_4 Bool (false true (and StartBool StartBool_3) (str.< Start_5 Start) (str.<= Start Start_5) (= Start_4 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" y "0")))

(check-synth)
