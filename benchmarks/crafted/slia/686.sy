(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (Start_2 String) (StartInt_8 Int) (Start_5 String) (Start_6 String) (Start_18 String) (Start_8 String) (StartBool_2 Bool) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_1 Int) (Start_4 String) (StartBool_5 Bool) (Start_1 String) (StartBool_3 Bool) (Start_10 String) (Start_17 String) (StartInt_7 Int) (StartInt_4 Int) (StartBool_4 Bool) (Start_12 String) (StartInt_2 Int) (Start_11 String) (StartInt_3 Int) (Start_14 String) (Start_13 String) (Start_3 String) (Start_15 String) (StartInt_5 Int) (Start_7 String) (Start_9 String) (Start_16 String))
  ((Start String (y (str.++ Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_11) (str.indexof Start_12 Start_12 StartInt_7)))
   (StartBool Bool (true false (and StartBool_3 StartBool_1) (str.<= Start_3 Start_17) (str.prefixof Start Start_4) (= Start_3 Start_16) (<= StartInt_6 StartInt)))
   (Start_19 String ("1" (str.++ Start_14 Start) (str.at Start_2 StartInt_7) (str.substr Start_15 StartInt_4 StartInt_3) (str.replace Start_17 Start_7 Start)))
   (Start_2 String (x (str.++ Start_9 Start_3) (str.replace Start_9 Start_18 Start_7) (ite StartBool_2 Start_2 Start_19)))
   (StartInt_8 Int (1 0 (str.len Start_1) (str.to_int Start_1)))
   (Start_5 String (x (str.++ Start Start_7) (str.from_int StartInt_1) (ite StartBool_2 Start_8 Start_2)))
   (Start_6 String ("a" "" (str.from_int StartInt_2) (ite StartBool Start_1 Start_6)))
   (Start_18 String (y (str.++ Start_15 Start_7) (str.at Start_6 StartInt_4) (str.substr Start_11 StartInt_3 StartInt_7) (str.replace Start_15 Start_13 Start_1)))
   (Start_8 String ("0" (str.from_int StartInt_4) (ite StartBool_2 Start_2 Start_2)))
   (StartBool_2 Bool (true false (str.<= Start_3 Start_3) (str.prefixof Start_2 Start_4) (str.suffixof Start_3 Start_3) (str.contains Start_1 Start) (= Start_2 Start_4) (= StartInt StartInt)))
   (StartInt_6 Int (0 (str.len Start_6)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (str.prefixof Start Start_1) (str.contains Start_2 Start_1) (= StartInt StartInt)))
   (StartInt_1 Int (1 0))
   (Start_4 String ("" (str.++ Start Start_3) (str.substr Start_5 StartInt_1 StartInt) (ite StartBool_3 Start_5 Start_1)))
   (StartBool_5 Bool (true false (str.< Start_7 Start_6) (str.suffixof Start_8 Start_12) (= StartInt_7 StartInt_4) (<= StartInt_1 StartInt_1)))
   (Start_1 String ("1" y x (str.++ Start_1 Start_2) (str.at Start_2 StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_2 StartBool_3) (str.< Start Start_6) (str.<= Start_7 Start_3) (str.contains Start_7 Start_2) (= Start_7 Start_4) (= StartInt_1 StartInt_1)))
   (Start_10 String ("" (str.at Start_10 StartInt_1) (str.replace Start_11 Start_10 Start_3) (str.from_int StartInt_5) (ite StartBool_4 Start_11 Start_4)))
   (Start_17 String (x "0" "" "b" (str.++ Start_12 Start_10) (str.substr Start_7 StartInt_2 StartInt_1) (str.from_int StartInt_3)))
   (StartInt_7 Int (1 0 (str.to_int Start_14)))
   (StartInt_4 Int (1))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_2) (str.< Start_12 Start_3) (str.<= Start Start_12) (str.prefixof Start_9 Start_11) (= Start_13 Start_1) (= StartInt_5 StartInt_5) (<= StartInt_2 StartInt_5)))
   (Start_12 String (y (str.++ Start_5 Start_3) (str.at Start_8 StartInt_5) (str.replace Start_13 Start_11 Start_5) (str.from_int StartInt_6)))
   (StartInt_2 Int (0 1 (str.indexof Start_1 Start_3 StartInt_3)))
   (Start_11 String ("1" (str.++ Start_5 Start_6) (str.substr Start_15 StartInt_5 StartInt)))
   (StartInt_3 Int (0 1 (str.len Start_6) (str.indexof Start_4 Start_7 StartInt_2)))
   (Start_14 String ("" "1" y (str.at Start_9 StartInt_7) (ite StartBool_3 Start_3 Start_2)))
   (Start_13 String ("" y (str.replace Start_5 Start_6 Start_13) (str.from_int StartInt) (ite StartBool_2 Start_3 Start_12)))
   (Start_3 String ("0" (str.++ Start_9 Start_7) (str.at Start_3 StartInt_1) (str.substr Start_9 StartInt_2 StartInt_1) (str.replace Start Start_4 Start_1) (ite StartBool Start_4 Start_10)))
   (Start_15 String (y (str.++ Start_12 Start_2) (str.replace Start_8 Start_6 Start_2) (ite StartBool_5 Start_2 Start_1)))
   (StartInt_5 Int (0))
   (Start_7 String (y "a" "1" x (str.at Start_5 StartInt) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt) (ite StartBool_2 Start_7 Start_3)))
   (Start_9 String ("0" "b" "1" "" (str.++ Start_12 Start_9) (str.at Start StartInt_8) (str.replace Start_9 Start_16 Start_11) (ite StartBool_1 Start_6 Start_15)))
   (Start_16 String (y "b" "0" (str.++ Start_10 Start) (str.at Start_5 StartInt_4) (str.replace Start_17 Start Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace (str.replace "b" "" x) (str.++ "a" "a") "b")))))

(check-synth)
