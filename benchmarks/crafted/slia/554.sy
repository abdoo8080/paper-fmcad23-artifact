(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_4 Int) (StartInt_2 Int) (Start_18 String) (Start_11 String) (StartInt_3 Int) (Start_5 String) (Start_17 String) (Start_4 String) (Start_8 String) (Start_6 String) (Start_3 String) (StartInt_1 Int) (Start_9 String) (Start_13 String) (Start_1 String) (StartInt_6 Int) (Start_12 String) (Start_15 String) (Start_16 String) (StartInt_7 Int) (StartBool_1 Bool) (StartInt_5 Int) (StartBool_2 Bool) (Start_7 String) (Start_10 String) (Start_19 String) (Start_2 String))
  ((Start String ("" "0" "b" y (str.++ Start_1 Start_2) (str.substr Start_2 StartInt StartInt_1)))
   (StartInt Int (1 (str.len Start_19) (str.indexof Start_8 Start_7 StartInt_4) (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool) (str.< Start_18 Start_3) (str.<= Start_11 Start_8) (str.contains Start_3 Start_17)))
   (Start_14 String (y "0" "" "b" "1" (str.at Start_8 StartInt_3) (str.replace Start Start_8 Start_7) (str.from_int StartInt_5) (ite StartBool_1 Start_3 Start_14)))
   (StartInt_4 Int (1 (str.len Start_9)))
   (StartInt_2 Int (1 (str.len Start_6) (str.indexof Start Start_8 StartInt) (str.to_int Start_5)))
   (Start_18 String ("0" "1" (str.at Start_13 StartInt_1) (str.replace Start_10 Start_3 Start_17) (str.from_int StartInt_3)))
   (Start_11 String ("b" (str.++ Start_12 Start_13) (str.replace Start_2 Start_14 Start)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_6)))
   (Start_5 String ("b" (str.at Start_5 StartInt_2) (str.substr Start_1 StartInt StartInt) (str.replace Start_5 Start_6 Start_1) (str.from_int StartInt_2)))
   (Start_17 String ("1" y "a" (str.at Start_10 StartInt_3) (str.replace Start_16 Start_15 Start_17) (str.from_int StartInt_2)))
   (Start_4 String (x (str.at Start_12 StartInt_2) (str.substr Start_4 StartInt StartInt_3) (str.replace Start_11 Start_19 Start_8) (str.from_int StartInt_7)))
   (Start_8 String ("a" (str.at Start_6 StartInt_3) (str.replace Start_6 Start_4 Start_3) (str.from_int StartInt_4)))
   (Start_6 String ("" (str.++ Start_4 Start_7) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_5 Start_6 Start) (str.from_int StartInt_3)))
   (Start_3 String (x (str.++ Start Start_3) (str.at Start_4 StartInt_1) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_2 Start Start_2) (ite StartBool Start_5 Start_5)))
   (StartInt_1 Int (0 (str.to_int Start_3)))
   (Start_9 String ("1" x "a" (str.at Start StartInt_2) (str.substr Start_8 StartInt_4 StartInt_5) (str.replace Start_10 Start_1 Start_4) (ite StartBool_1 Start_11 Start_8)))
   (Start_13 String (y (str.at Start_4 StartInt_4) (str.replace Start_3 Start_14 Start_7)))
   (Start_1 String ("1" (str.++ Start_2 Start_19) (ite StartBool_1 Start_19 Start_4)))
   (StartInt_6 Int (1 (str.len Start_2) (str.to_int Start_10)))
   (Start_12 String (y (str.++ Start_2 Start_13) (str.at Start_8 StartInt_2) (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_2 Start_6 Start_15) (ite StartBool Start_2 Start_8)))
   (Start_15 String (x (str.++ Start_16 Start_1) (str.from_int StartInt_5)))
   (Start_16 String ("b" (str.++ Start_12 Start_8) (str.substr Start_6 StartInt_6 StartInt_3) (str.from_int StartInt_7)))
   (StartInt_7 Int (0 (str.len Start_1) (str.indexof Start_5 Start_14 StartInt_2) (str.to_int Start_10)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool_2) (str.<= Start_1 Start_6) (str.prefixof Start_2 Start_11) (str.contains Start_11 Start_15) (= Start_17 Start_12) (= StartInt_7 StartInt_6) (<= StartInt_5 StartInt_3)))
   (StartInt_5 Int (1 0 (str.to_int Start_4)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.< Start_18 Start_2) (str.suffixof Start_5 Start_2) (str.contains Start_8 Start_15) (= Start_14 Start_12) (= StartInt StartInt_4) (<= StartInt StartInt)))
   (Start_7 String ("1" (str.++ Start_6 Start_3) (str.from_int StartInt_1) (ite StartBool Start_3 Start_5)))
   (Start_10 String ("1" (str.++ Start_15 Start_12) (str.at Start_14 StartInt_6) (str.substr Start_15 StartInt_7 StartInt_1) (ite StartBool_2 Start_13 Start_12)))
   (Start_19 String ("a" (str.++ Start_2 Start_16) (str.at Start_6 StartInt_5) (str.substr Start_12 StartInt_6 StartInt_6) (str.replace Start_4 Start_1 Start_19)))
   (Start_2 String (x (str.++ Start_8 Start_15) (str.replace Start_11 Start_9 Start_9) (str.from_int StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.len x))))

(check-synth)
