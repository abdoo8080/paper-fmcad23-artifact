(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (Start_3 String) (StartInt_4 Int) (StartInt_2 Int) (StartInt_3 Int) (StartInt_5 Int) (Start_4 String) (StartInt_1 Int) (Start_5 String) (Start_6 String) (Start_1 String))
  ((Start String ("1" x (str.++ Start Start_1) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_1 Start_2 Start_2)))
   (StartInt Int (0 1 (str.len Start_6) (str.indexof Start Start_4 StartInt_5) (str.to_int Start_1)))
   (StartBool Bool (true (str.< Start_6 Start_6) (str.<= Start_4 Start_5) (str.suffixof Start_1 Start_4) (str.contains Start_6 Start_5) (<= StartInt_3 StartInt)))
   (Start_2 String ("a" y (str.++ Start_2 Start_3) (str.at Start StartInt_1) (str.replace Start Start_1 Start_2)))
   (Start_3 String ("0" "1" "" (str.at Start_2 StartInt_2) (str.from_int StartInt)))
   (StartInt_4 Int (1 (str.to_int Start_6)))
   (StartInt_2 Int (1 (str.indexof Start_1 Start_4 StartInt_3)))
   (StartInt_3 Int (0 1))
   (StartInt_5 Int (0 (str.indexof Start Start_2 StartInt_3) (str.to_int Start_3)))
   (Start_4 String ("a" "" (str.++ Start_3 Start_2) (str.at Start_3 StartInt_3)))
   (StartInt_1 Int (1 (str.len Start_1) (str.to_int Start_5)))
   (Start_5 String ("a" (str.++ Start_3 Start_4) (str.at Start_3 StartInt) (str.substr Start_5 StartInt_2 StartInt) (str.from_int StartInt_4)))
   (Start_6 String (y))
   (Start_1 String ("a" "0" (str.++ Start_2 Start_2) (str.at Start_5 StartInt_2) (str.replace Start Start_3 Start_6) (ite StartBool Start_1 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 1) "a")))

(check-synth)
