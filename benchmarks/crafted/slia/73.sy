(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (StartInt_10 Int) (Start_17 String) (Start_16 String) (Start_9 String) (Start_5 String) (StartInt_4 Int) (StartInt_2 Int) (Start_6 String) (Start_3 String) (StartInt_1 Int) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_13 String) (Start_10 String) (Start_8 String) (StartInt_6 Int) (Start_14 String) (StartInt_8 Int) (StartBool_2 Bool) (Start_11 String) (Start_1 String) (StartInt_7 Int) (Start_7 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_2 String) (Start_15 String) (Start_12 String) (StartInt_9 Int) (StartBool_5 Bool) (Start_4 String))
  ((Start String (y "0" (str.++ Start_1 Start) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_1 Start Start_1)))
   (StartInt Int (1 (str.indexof Start_16 Start_17 StartInt)))
   (StartBool Bool (false true (not StartBool_2) (str.< Start_17 Start_5) (str.<= Start_15 Start) (str.suffixof Start_10 Start_16) (= StartInt_8 StartInt_4) (<= StartInt_8 StartInt_9)))
   (Start_18 String ("0" y (str.at Start_11 StartInt_5) (str.substr Start_17 StartInt StartInt_6) (str.replace Start_12 Start Start_10) (str.from_int StartInt_2)))
   (StartInt_10 Int (0 (str.len Start_15)))
   (Start_17 String ("b" "a" (str.++ Start_2 Start_18) (str.substr Start_2 StartInt_9 StartInt_10) (str.replace Start_6 Start_15 Start_4)))
   (Start_16 String ("b" (str.++ Start_5 Start_13) (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_16 Start_11 Start_14) (str.from_int StartInt)))
   (Start_9 String ("0" (str.++ Start_10 Start_1) (str.at Start_3 StartInt) (str.substr Start_8 StartInt_1 StartInt_3) (str.replace Start_2 Start_2 Start_9) (str.from_int StartInt_4)))
   (Start_5 String (x "1" "b" (str.++ Start_1 Start) (str.at Start StartInt_3) (str.replace Start_7 Start_5 Start_3) (str.from_int StartInt_1)))
   (StartInt_4 Int (1 0 (str.len Start_1) (str.to_int Start_2)))
   (StartInt_2 Int (1))
   (Start_6 String (x (str.at Start StartInt) (str.substr Start_3 StartInt_4 StartInt_5) (str.replace Start_5 Start_2 Start_6) (str.from_int StartInt_2)))
   (Start_3 String ("1" x (str.++ Start_1 Start_4) (str.replace Start_4 Start_5 Start) (ite StartBool Start_3 Start_6)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start Start_1 StartInt_3) (str.to_int Start_2)))
   (StartInt_5 Int (0 1 (str.to_int Start_4)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (str.< Start_3 Start_4) (str.<= Start_9 Start_9) (str.prefixof Start_3 Start_9) (str.contains Start_3 Start_11) (= Start_1 Start_9) (= StartInt_3 StartInt_6)))
   (StartInt_3 Int (0 (str.len Start_3) (str.to_int Start_2)))
   (Start_13 String ("" x (str.++ Start_3 Start_4) (str.at Start_5 StartInt) (str.substr Start_8 StartInt_4 StartInt_5) (str.replace Start_9 Start_8 Start_9) (str.from_int StartInt_4) (ite StartBool Start_3 Start_4)))
   (Start_10 String ("0" "a" (str.++ Start_2 Start_6) (str.replace Start_8 Start_6 Start_9)))
   (Start_8 String ("a" "0" "" "1" (str.replace Start_5 Start_9 Start) (str.from_int StartInt)))
   (StartInt_6 Int (0 1 (str.len Start_12) (str.to_int Start_12)))
   (Start_14 String ("" "b" "1" (str.++ Start_3 Start_6) (str.substr Start_1 StartInt_3 StartInt_7) (ite StartBool_3 Start_9 Start_3)))
   (StartInt_8 Int (1 0 (str.len Start_7) (str.indexof Start_4 Start_1 StartInt)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool_2) (str.< Start_13 Start_4) (str.<= Start Start_4) (str.prefixof Start_12 Start_6) (str.suffixof Start_5 Start_4) (= Start_9 Start_10) (<= StartInt_6 StartInt_1)))
   (Start_11 String ("1" (str.++ Start_2 Start_13) (str.at Start_5 StartInt) (str.replace Start_3 Start_12 Start_7) (str.from_int StartInt_5) (ite StartBool Start_5 Start_14)))
   (Start_1 String (x "0" (str.++ Start_16 Start_15) (str.at Start_4 StartInt_6) (str.replace Start_12 Start_5 Start_13) (str.from_int StartInt_7)))
   (StartInt_7 Int (1 (str.len Start_1) (str.indexof Start_6 Start_10 StartInt_1) (str.to_int Start_4)))
   (Start_7 String ("" (str.at Start_5 StartInt_4) (ite StartBool_1 Start_3 Start_8)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_4 StartBool_3) (str.< Start_6 Start) (str.suffixof Start_9 Start_11) (= Start_10 Start_4) (= StartInt_5 StartInt_3) (<= StartInt_2 StartInt_1)))
   (StartBool_4 Bool (true false (and StartBool_5 StartBool_1) (str.< Start_5 Start_3) (str.prefixof Start_10 Start_2) (str.suffixof Start_7 Start_12) (str.contains Start_1 Start_15) (= StartInt_5 StartInt_6) (<= StartInt_6 StartInt)))
   (Start_2 String (x (str.++ Start_13 Start_7) (str.at Start_13 StartInt_9)))
   (Start_15 String ("" (str.at Start_3 StartInt_8) (str.substr Start_6 StartInt_7 StartInt_3) (str.from_int StartInt_2) (ite StartBool_1 Start_15 Start_13)))
   (Start_12 String ("0" (str.replace Start_13 Start_8 Start_7) (ite StartBool_2 Start_2 Start_10)))
   (StartInt_9 Int (1 (str.len Start_5) (str.indexof Start_1 Start_4 StartInt_4)))
   (StartBool_5 Bool (false (str.< Start_9 Start_10) (= StartInt_2 StartInt_7)))
   (Start_4 String ("0" (str.at Start_10 StartInt_7) (str.substr Start_11 StartInt_6 StartInt_8) (str.replace Start_14 Start_5 Start_3) (str.from_int StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.substr (str.replace x "1" (str.at y 1)) 0 1)))))

(check-synth)
