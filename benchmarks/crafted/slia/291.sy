(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_5 Int) (StartBool_4 Bool) (Start_9 String) (StartBool_2 Bool) (StartBool_3 Bool) (StartInt_2 Int) (StartInt_4 Int) (StartInt_1 Int) (Start_2 String) (Start_10 String) (StartBool_1 Bool) (Start_1 String) (Start_4 String) (Start_7 String) (Start_6 String) (StartInt_3 Int) (Start_11 String) (Start_5 String) (Start_3 String))
  ((Start String ("1" y (str.++ Start_1 Start_1) (str.at Start_1 StartInt_1)))
   (StartInt Int (1 0 (str.len Start_3) (str.indexof Start_4 Start_1 StartInt) (str.to_int Start_3)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_3 StartBool_3) (str.<= Start_2 Start) (str.prefixof Start_5 Start_6) (str.contains Start_7 Start_5) (<= StartInt StartInt)))
   (Start_8 String (x "0" "1" "a" (str.++ Start_7 Start_1) (str.at Start_5 StartInt_4) (str.substr Start_9 StartInt_2 StartInt_3) (str.replace Start Start_5 Start_2) (str.from_int StartInt_3) (ite StartBool_1 Start Start_7)))
   (StartInt_5 Int (0))
   (StartBool_4 Bool (false true (not StartBool_1) (str.< Start Start_2) (str.prefixof Start_8 Start_6) (str.suffixof Start_2 Start) (<= StartInt_3 StartInt_1)))
   (Start_9 String ("" "b" "1" x "0" (str.++ Start_6 Start_2) (str.at Start_6 StartInt) (str.substr Start_5 StartInt_1 StartInt_5) (str.replace Start_4 Start_4 Start_2) (str.from_int StartInt_1) (ite StartBool Start_7 Start_10)))
   (StartBool_2 Bool (true (and StartBool StartBool_4) (str.< Start_2 Start) (str.prefixof Start_5 Start_2) (str.suffixof Start Start_3) (<= StartInt_2 StartInt)))
   (StartBool_3 Bool (false (str.< Start Start_4) (str.<= Start_6 Start_6) (str.contains Start Start) (= Start_2 Start_1) (= StartInt_1 StartInt_3)))
   (StartInt_2 Int (1 0 (str.indexof Start_5 Start_5 StartInt_2)))
   (StartInt_4 Int (1 (str.len Start_1) (str.to_int Start_2)))
   (StartInt_1 Int (1 (str.indexof Start Start_2 StartInt_1) (str.to_int Start_2)))
   (Start_2 String ("a" (str.substr Start_1 StartInt StartInt) (str.replace Start_3 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start_2)))
   (Start_10 String (x (str.++ Start Start_2) (ite StartBool_2 Start_11 Start)))
   (StartBool_1 Bool (true false (str.<= Start_1 Start_4) (str.contains Start_5 Start_1) (= Start_3 Start_3) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_1)))
   (Start_1 String (y "b" "a" (str.++ Start_1 Start_4) (str.at Start_3 StartInt_2)))
   (Start_4 String ("1" (str.substr Start_2 StartInt StartInt_1) (str.replace Start_4 Start_1 Start_6) (str.from_int StartInt_2) (ite StartBool Start_1 Start_3)))
   (Start_7 String ("0" "" (str.at Start_6 StartInt)))
   (Start_6 String ("a" "1" "b" (str.++ Start_4 Start) (str.at Start_4 StartInt) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.to_int Start_1)))
   (Start_11 String (y "1" (str.++ Start_2 Start_11) (str.replace Start_5 Start_5 Start_3)))
   (Start_5 String (y (str.++ Start_1 Start_1) (str.replace Start_4 Start Start_5) (ite StartBool_1 Start_2 Start_1)))
   (Start_3 String (y (str.++ Start_2 Start_4) (str.at Start_6 StartInt) (str.substr Start_2 StartInt_1 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" x "1")))

(check-synth)
