(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (Start_4 String) (StartInt_7 Int) (Start_10 String) (Start_11 String) (StartInt_5 Int) (StartBool_3 Bool) (Start_12 String) (StartBool_2 Bool) (Start_2 String) (StartInt_1 Int) (Start_1 String) (StartInt_3 Int) (StartInt_2 Int) (Start_13 String) (Start_5 String) (Start_6 String) (StartBool_1 Bool) (StartInt_6 Int) (Start_9 String) (StartInt_4 Int) (Start_8 String) (Start_7 String))
  ((Start String ("0" "a" x (str.++ Start_1 Start_2) (str.at Start_2 StartInt) (str.replace Start_2 Start Start_1) (ite StartBool Start Start)))
   (StartInt Int (0 1))
   (StartBool Bool (false (not StartBool) (str.< Start_9 Start_3) (= Start_1 Start_5)))
   (Start_3 String ("0" "a" "" "b" x (str.++ Start_2 Start_12) (str.at Start_3 StartInt_2) (str.replace Start_11 Start_1 Start_11)))
   (Start_4 String (x (str.from_int StartInt_2) (ite StartBool_3 Start_8 Start)))
   (StartInt_7 Int (0 (str.to_int Start_8)))
   (Start_10 String ("a" "1" (str.++ Start_2 Start_8) (str.replace Start_7 Start_1 Start_7) (str.from_int StartInt)))
   (Start_11 String ("" (str.at Start_11 StartInt_1) (str.replace Start_3 Start_11 Start_8) (str.from_int StartInt_6)))
   (StartInt_5 Int (0 (str.len Start_1) (str.indexof Start_9 Start_11 StartInt_1)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_2) (str.<= Start_8 Start_5) (str.prefixof Start_7 Start_10) (str.suffixof Start_7 Start_7) (str.contains Start_10 Start_1) (= Start Start_5) (<= StartInt_2 StartInt_5)))
   (Start_12 String ("" "a" "b" (str.at Start_13 StartInt_7) (str.substr Start_10 StartInt StartInt_6)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool_3) (str.< Start_6 Start_9) (str.suffixof Start_5 Start_4) (= Start_8 Start_6) (= StartInt_2 StartInt_1) (<= StartInt_2 StartInt_4)))
   (Start_2 String ("1" (str.++ Start_1 Start_2) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 1))
   (Start_1 String ("a" "" y (str.++ Start_1 Start_3) (str.at Start_2 StartInt_2) (str.replace Start_3 Start_1 Start_1) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 0))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.indexof Start_4 Start_5 StartInt_2)))
   (Start_13 String ("b" (str.++ Start_5 Start_9) (str.replace Start_4 Start_7 Start_9) (str.from_int StartInt)))
   (Start_5 String ("b" "a" "0" (str.++ Start_1 Start_4) (str.at Start_4 StartInt_3) (str.substr Start_6 StartInt_2 StartInt_2)))
   (Start_6 String ("" (str.substr Start_5 StartInt_1 StartInt_3) (ite StartBool_1 Start_6 Start_5)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_2) (str.< Start_7 Start_2) (str.prefixof Start_2 Start_6) (str.suffixof Start_3 Start_1) (str.contains Start_4 Start_8) (= Start_7 Start_2) (<= StartInt_2 StartInt_4)))
   (StartInt_6 Int (0 1))
   (Start_9 String ("" (str.at Start_7 StartInt_4) (str.replace Start_2 Start_3 Start) (str.from_int StartInt_3)))
   (StartInt_4 Int (1 (str.len Start_2)))
   (Start_8 String ("a" (str.at Start_7 StartInt_1) (str.replace Start_8 Start_6 Start_7)))
   (Start_7 String ("" x (str.++ Start_7 Start_6) (str.at Start_4 StartInt_4) (str.from_int StartInt_4) (ite StartBool_2 Start_5 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.to_int (str.replace x "a" (str.++ "a" "1"))))))

(check-synth)
