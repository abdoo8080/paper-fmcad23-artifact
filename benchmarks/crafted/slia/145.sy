(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (StartInt_11 Int) (StartBool_7 Bool) (StartInt_9 Int) (StartBool_3 Bool) (StartBool_5 Bool) (Start_1 String) (StartInt_7 Int) (Start_2 String) (Start_4 String) (Start_7 String) (StartInt_3 Int) (Start_6 String) (StartInt_4 Int) (StartInt_1 Int) (StartInt_10 Int) (Start_8 String) (Start_3 String) (StartInt_2 Int) (StartBool_8 Bool) (Start_18 String) (StartInt_8 Int) (Start_9 String) (Start_5 String) (Start_13 String) (Start_14 String) (Start_10 String) (StartBool_1 Bool) (Start_15 String) (StartBool_2 Bool) (Start_11 String) (Start_17 String) (Start_12 String) (StartInt_5 Int) (StartBool_4 Bool) (StartBool_6 Bool) (StartInt_6 Int) (Start_16 String))
  ((Start String (y "a" (str.++ Start Start_1) (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_2 Start_3)))
   (StartInt Int (0 1 (str.len Start_7) (str.indexof Start_2 Start_4 StartInt) (str.to_int Start_8)))
   (StartBool Bool (true false (not StartBool) (str.<= Start_9 Start_8)))
   (Start_19 String ("0" y (str.++ Start_8 Start_17) (str.at Start StartInt_4) (str.from_int StartInt_10) (ite StartBool_1 Start_6 Start_16)))
   (StartInt_11 Int (1 0 (str.len Start) (str.indexof Start_19 Start_14 StartInt_9) (str.to_int Start_1)))
   (StartBool_7 Bool (false true (and StartBool_8 StartBool_8) (str.< Start_18 Start_5) (= Start_10 Start_19) (= StartInt_6 StartInt) (<= StartInt_3 StartInt_11)))
   (StartInt_9 Int (0 1))
   (StartBool_3 Bool (false true (not StartBool_7) (and StartBool_4 StartBool_1) (str.< Start Start_18) (str.<= Start_6 Start_6) (= Start_7 Start_9)))
   (StartBool_5 Bool (true false (not StartBool_3) (and StartBool_6 StartBool_3) (str.<= Start_10 Start_18) (str.prefixof Start_16 Start_16) (str.suffixof Start_1 Start_14) (= StartInt StartInt) (<= StartInt_8 StartInt_3)))
   (Start_1 String ("1" "0" "a" (str.++ Start_2 Start) (str.at Start_1 StartInt_1) (str.replace Start_5 Start_7 Start_6) (ite StartBool Start_2 Start_1)))
   (StartInt_7 Int (1 (str.indexof Start_10 Start_1 StartInt_10) (str.to_int Start_17)))
   (Start_2 String (x "0" (str.++ Start_1 Start_3) (str.at Start_4 StartInt) (str.replace Start_5 Start_7 Start_7)))
   (Start_4 String ("0" "1" y (str.++ Start_4 Start) (str.at Start StartInt_3) (str.substr Start_3 StartInt_4 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_2 Start)))
   (Start_7 String ("0" (str.at Start_5 StartInt_4) (ite StartBool Start Start_7)))
   (StartInt_3 Int (1 0 (str.len Start_5) (str.indexof Start_2 Start_6 StartInt_2) (str.to_int Start_5)))
   (Start_6 String ("1" (str.++ Start_5 Start_4) (str.at Start StartInt) (str.substr Start_5 StartInt_3 StartInt_4) (str.replace Start_6 Start_2 Start_6) (str.from_int StartInt_4)))
   (StartInt_4 Int (1 0 (str.len Start_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_6 Start_4 StartInt_2)))
   (StartInt_10 Int (0 1 (str.to_int Start_5)))
   (Start_8 String ("1" x "a"))
   (Start_3 String ("" (str.++ Start_3 Start_1) (str.replace Start_2 Start_2 Start) (str.from_int StartInt_2) (ite StartBool Start_1 Start_1)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.to_int Start_4)))
   (StartBool_8 Bool (false (not StartBool_1) (and StartBool_4 StartBool_8) (str.<= Start_11 Start_12) (str.suffixof Start_13 Start_11) (str.contains Start_1 Start_6) (<= StartInt_11 StartInt_2)))
   (Start_18 String (x y (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_5) (ite StartBool_5 Start_2 Start_7)))
   (StartInt_8 Int (0 1 (str.len Start_10) (str.indexof Start Start_9 StartInt_9)))
   (Start_9 String ("0" "" "a" "1" x y "b" (str.at Start_4 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_10 Start_8)))
   (Start_5 String ("0" (str.++ Start Start_6) (str.at Start_1 StartInt_1) (str.from_int StartInt)))
   (Start_13 String ("" (str.++ Start Start_4) (str.at Start_15 StartInt_5) (ite StartBool Start_6 Start_16)))
   (Start_14 String (x "1" y (str.++ Start_2 Start_10) (str.replace Start_13 Start_14 Start_5) (str.from_int StartInt_3)))
   (Start_10 String (y x "0" (str.substr Start_6 StartInt_1 StartInt_4) (str.replace Start_10 Start Start_9) (str.from_int StartInt_1) (ite StartBool Start_4 Start)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.<= Start_8 Start_9) (str.prefixof Start_3 Start_7) (= Start_5 Start_10)))
   (Start_15 String (y x (str.++ Start_11 Start_18) (str.at Start_12 StartInt_2) (str.replace Start_16 Start_18 Start_2)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool) (str.prefixof Start_8 Start_6) (str.suffixof Start_2 Start_6) (str.contains Start_1 Start) (= Start_11 Start_7) (= StartInt_5 StartInt_2)))
   (Start_11 String ("a" (str.replace Start_12 Start_7 Start_5) (ite StartBool_2 Start_10 Start_7)))
   (Start_17 String ("1" (str.at Start_1 StartInt_7) (str.substr Start_11 StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool_4 Start_18 Start_3)))
   (Start_12 String (x "b" "1" (str.at Start_13 StartInt_3) (str.substr Start_6 StartInt_6 StartInt_5) (str.replace Start_9 Start_6 Start_3) (str.from_int StartInt_5) (ite StartBool_4 Start_1 Start_11)))
   (StartInt_5 Int (1 0 (str.to_int Start)))
   (StartBool_4 Bool (false true (not StartBool_2) (str.prefixof Start_5 Start_2) (= Start_9 Start_12)))
   (StartBool_6 Bool (false (not StartBool_2) (str.<= Start_4 Start_9) (str.prefixof Start_18 Start_5) (str.contains Start_9 Start_3) (= Start_18 Start_9) (= StartInt_1 StartInt)))
   (StartInt_6 Int (1 0 (str.len Start_11) (str.indexof Start_8 Start_14 StartInt_1) (str.to_int Start_7)))
   (Start_16 String (x (str.++ Start_17 Start_14) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_5 Start_15 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" x "a")))

(check-synth)
