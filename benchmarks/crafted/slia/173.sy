(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (Start_14 String) (Start_8 String) (Start_9 String) (Start_12 String) (StartBool_1 Bool) (StartBool_4 Bool) (Start_3 String) (StartBool_2 Bool) (Start_5 String) (Start_4 String) (StartInt_1 Int) (StartInt_8 Int) (Start_15 String) (StartInt_2 Int) (StartBool_5 Bool) (Start_11 String) (Start_7 String) (StartInt_4 Int) (StartBool_3 Bool) (Start_10 String) (StartInt_5 Int) (Start_1 String) (Start_13 String) (StartInt_3 Int) (Start_2 String) (StartInt_6 Int) (StartInt_7 Int))
  ((Start String ("" (str.++ Start Start_1) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_4) (str.indexof Start_11 Start_12 StartInt_7) (str.to_int Start)))
   (StartBool Bool (false (str.prefixof Start_2 Start_15) (str.suffixof Start_4 Start_15) (str.contains Start_7 Start_14) (= StartInt_1 StartInt)))
   (Start_6 String (x "0" y "1" "" "b" (str.at Start_6 StartInt) (str.replace Start_3 Start_2 Start_3) (ite StartBool Start_1 Start_5)))
   (Start_14 String ("a" y "b" "1" "" (str.++ Start_7 Start_9) (str.at Start_11 StartInt_4) (str.substr Start_9 StartInt_3 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_8 Start_9)))
   (Start_8 String ("1" "a" y (str.++ Start_1 Start_9) (str.from_int StartInt_1) (ite StartBool_2 Start_7 Start_5)))
   (Start_9 String ("0" x (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt StartInt_3) (str.from_int StartInt) (ite StartBool Start_1 Start_3)))
   (Start_12 String ("b" "" y "1" (str.at Start StartInt_1)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (str.suffixof Start_7 Start_8) (= Start_7 Start_9) (= StartInt_2 StartInt) (<= StartInt_3 StartInt_3)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_4 StartBool_5) (str.< Start_2 Start_9) (str.<= Start_6 Start_12) (str.prefixof Start_11 Start_11) (= StartInt_3 StartInt_4) (<= StartInt_1 StartInt_4)))
   (Start_3 String ("" (str.++ Start Start_2) (str.at Start_2 StartInt_3) (str.replace Start_6 Start_7 Start_6) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_2 Bool (true (not StartBool_3) (str.< Start_6 Start_4) (str.<= Start_2 Start_8) (str.prefixof Start_10 Start_4) (str.suffixof Start_11 Start_12) (str.contains Start_6 Start_4) (= Start_8 Start_3) (<= StartInt_3 StartInt_3)))
   (Start_5 String ("0" (str.++ Start_6 Start_5) (str.substr Start_1 StartInt_2 StartInt_2)))
   (Start_4 String ("1" (str.at Start_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_3 Start_5)))
   (StartInt_1 Int (0 (str.indexof Start_2 Start_1 StartInt_2)))
   (StartInt_8 Int (0 1 (str.len Start_1)))
   (Start_15 String (x (str.++ Start_9 Start_11) (str.at Start_8 StartInt) (ite StartBool_2 Start_6 Start_2)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start_4 Start_4 StartInt_1) (str.to_int Start_2)))
   (StartBool_5 Bool (false (not StartBool_1) (and StartBool StartBool) (str.<= Start_7 Start_12) (str.prefixof Start_2 Start_8) (str.contains Start_5 Start_10)))
   (Start_11 String (y (str.++ Start_7 Start_11) (str.replace Start_11 Start_3 Start_2) (ite StartBool_1 Start_8 Start_12)))
   (Start_7 String ("1" x y "" (str.++ Start_12 Start_12) (str.replace Start Start_15 Start_8) (str.from_int StartInt_3)))
   (StartInt_4 Int (1 (str.indexof Start_9 Start_3 StartInt) (str.to_int Start)))
   (StartBool_3 Bool (false true (str.<= Start_12 Start_9) (str.prefixof Start_3 Start_3) (str.suffixof Start_5 Start_11) (= StartInt_5 StartInt_3)))
   (Start_10 String (y (str.++ Start_8 Start_10) (str.from_int StartInt_4) (ite StartBool_4 Start_7 Start_12)))
   (StartInt_5 Int (0 1 (str.len Start_5) (str.indexof Start_13 Start_8 StartInt)))
   (Start_1 String ("0" (str.at Start_14 StartInt_7) (str.substr Start_10 StartInt_1 StartInt) (ite StartBool_4 Start_4 Start_14)))
   (Start_13 String ("" (str.substr Start_6 StartInt_4 StartInt_1) (str.replace Start_1 Start_7 Start_14) (str.from_int StartInt_5)))
   (StartInt_3 Int (1 (str.len Start_7)))
   (Start_2 String (x (str.++ Start_2 Start_14) (str.at Start_10 StartInt_5) (str.substr Start_1 StartInt_6 StartInt_5) (str.replace Start_6 Start_1 Start_13)))
   (StartInt_6 Int (1 0 (str.to_int Start_14)))
   (StartInt_7 Int (0 1 (str.len Start_13) (str.indexof Start_6 Start_10 StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "b" "b") "" x)))

(check-synth)
