(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (Start_7 String) (Start_9 String) (StartBool_2 Bool) (StartInt_6 Int) (StartInt_7 Int) (Start_6 String) (Start_5 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_2 String) (StartInt_3 Int) (Start_4 String) (StartInt_1 Int) (Start_13 String) (StartInt_4 Int) (Start_10 String) (StartInt_8 Int) (StartBool_3 Bool) (Start_12 String) (Start_8 String) (Start_15 String) (Start_3 String) (Start_11 String) (Start_14 String) (StartInt_2 Int) (Start_1 String) (StartInt_9 Int))
  ((Start String (x "1" (str.++ Start_1 Start_1) (str.at Start_2 StartInt_1) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start Start_1 Start_3) (ite StartBool Start_4 Start_1)))
   (StartInt Int (0 (str.to_int Start_8)))
   (StartBool Bool (false true (str.<= Start_14 Start_8) (str.prefixof Start_16 Start_13) (= StartInt StartInt) (<= StartInt_6 StartInt_2)))
   (Start_16 String ("a" (str.replace Start_7 Start_13 Start_2) (str.from_int StartInt_2)))
   (Start_7 String ("a" (str.replace Start_5 Start Start_6) (str.from_int StartInt_4) (ite StartBool_3 Start_8 Start_7)))
   (Start_9 String ("b" y "a" "0" (str.++ Start_6 Start_5) (str.substr Start StartInt_2 StartInt_4) (str.replace Start_5 Start_2 Start_4) (ite StartBool_3 Start Start_3)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool) (str.< Start_2 Start_2) (str.contains Start_2 Start_3) (= StartInt_5 StartInt_6)))
   (StartInt_6 Int (1 0 (str.indexof Start_6 Start StartInt_3) (str.to_int Start_7)))
   (StartInt_7 Int (1 (str.len Start_3)))
   (Start_6 String ("0" (str.substr Start_2 StartInt_3 StartInt_5) (str.replace Start_4 Start_1 Start)))
   (Start_5 String ("1" "a" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.substr Start_4 StartInt_1 StartInt_4) (str.replace Start_2 Start_1 Start)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_2) (str.<= Start_1 Start) (str.prefixof Start Start_3) (str.suffixof Start_5 Start) (= Start_1 Start_3) (<= StartInt StartInt_3)))
   (StartInt_5 Int (1 (str.indexof Start_3 Start_3 StartInt_5)))
   (Start_2 String ("1" (str.substr Start_15 StartInt_8 StartInt_1) (str.from_int StartInt_9) (ite StartBool_3 Start Start_15)))
   (StartInt_3 Int (0 1 (str.len Start) (str.to_int Start)))
   (Start_4 String ("a" y "1" x (str.substr Start_3 StartInt StartInt_2) (ite StartBool_1 Start Start_1)))
   (StartInt_1 Int (0 1 (str.len Start)))
   (Start_13 String (y (str.substr Start_2 StartInt StartInt_2) (str.replace Start_5 Start Start_3) (ite StartBool_1 Start_13 Start_10)))
   (StartInt_4 Int (1 0 (str.len Start_6) (str.to_int Start_5)))
   (Start_10 String ("0" (str.++ Start_7 Start_3) (str.substr Start_3 StartInt_2 StartInt_6) (str.from_int StartInt_8)))
   (StartInt_8 Int (1 (str.indexof Start_1 Start_4 StartInt)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.< Start_5 Start_5) (str.<= Start_6 Start_11) (str.suffixof Start_12 Start_5) (= Start_4 Start_7) (= StartInt_1 StartInt_2)))
   (Start_12 String ("b" (str.at Start_1 StartInt) (str.substr Start_9 StartInt_8 StartInt_4) (str.replace Start_11 Start Start_3) (str.from_int StartInt)))
   (Start_8 String ("b" "1" "a" x y (str.++ Start_1 Start_9) (str.at Start_10 StartInt_3) (str.substr Start_9 StartInt_5 StartInt_7) (str.replace Start_7 Start_8 Start_10)))
   (Start_15 String ("" (str.++ Start_14 Start_10)))
   (Start_3 String (y (str.++ Start_13 Start_14) (str.substr Start_2 StartInt_8 StartInt_8) (str.replace Start_6 Start_12 Start_6)))
   (Start_11 String ("a" (str.at Start_6 StartInt_5)))
   (Start_14 String ("b" (str.at Start_2 StartInt_7)))
   (StartInt_2 Int (0 1 (str.to_int Start_5)))
   (Start_1 String (x "b" "1" (str.at Start_15 StartInt_5) (str.substr Start_6 StartInt StartInt_7) (str.replace Start_2 Start_14 Start_9) (str.from_int StartInt_5)))
   (StartInt_9 Int (0 (str.indexof Start_2 Start_3 StartInt) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.len (str.++ (str.at x 1) "b")))))

(check-synth)
