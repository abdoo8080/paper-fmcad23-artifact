(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_14 String) (StartBool_2 Bool) (Start_5 String) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_5 Int) (StartBool_3 Bool) (StartInt_4 Int) (Start_7 String) (Start_10 String) (Start_15 String) (Start_4 String) (Start_6 String) (Start_2 String) (StartInt_6 Int) (StartInt_7 Int) (Start_13 String) (StartInt_3 Int) (Start_9 String) (Start_8 String) (StartInt_8 Int) (Start_3 String) (Start_1 String) (StartBool_4 Bool) (StartInt_9 Int) (Start_12 String) (StartInt_11 Int) (StartInt_10 Int) (StartBool_5 Bool) (Start_11 String))
  ((Start String ("1" "b" (str.++ Start Start) (str.at Start StartInt_1) (str.from_int StartInt) (ite StartBool Start_1 Start_2)))
   (StartInt Int (1 (str.len Start_13) (str.indexof Start_1 Start_5 StartInt_7) (str.to_int Start_13)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.prefixof Start_13 Start_11) (str.suffixof Start_15 Start_5) (str.contains Start_10 Start_2) (= Start_5 Start_4) (= StartInt_6 StartInt)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start_10 Start_14 StartInt_3) (str.to_int Start_12)))
   (Start_14 String ("0" y (str.substr Start_11 StartInt_10 StartInt_11) (str.replace Start_3 Start_8 Start_12) (str.from_int StartInt_10) (ite StartBool_1 Start_10 Start_10)))
   (StartBool_2 Bool (false (not StartBool_3) (str.prefixof Start_4 Start_8) (str.suffixof Start_4 Start_3) (str.contains Start_6 Start_9) (= Start_6 Start_3) (<= StartInt_6 StartInt_3)))
   (Start_5 String ("1" (str.++ Start_3 Start_3) (str.at Start_3 StartInt_2) (str.replace Start Start_4 Start_1)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_1) (str.<= Start_4 Start_2) (str.prefixof Start_2 Start) (str.contains Start_1 Start_5) (= Start_2 Start_4) (= StartInt_1 StartInt_2) (<= StartInt_3 StartInt_4)))
   (StartInt_2 Int (1 0 (str.len Start_2)))
   (StartInt_5 Int (1 (str.len Start_4) (str.indexof Start_4 Start_7 StartInt_5) (str.to_int Start_4)))
   (StartBool_3 Bool (true false (not StartBool_3) (str.< Start_4 Start_3) (str.suffixof Start_1 Start_2) (str.contains Start_4 Start_1) (= Start_1 Start_3) (<= StartInt_2 StartInt_5)))
   (StartInt_4 Int (1 0 (str.len Start_6)))
   (Start_7 String (y "a" x (str.++ Start_4 Start_1) (str.at Start_6 StartInt_4) (str.substr Start_7 StartInt_2 StartInt) (str.replace Start_3 Start_2 Start_7) (ite StartBool_3 Start_7 Start_3)))
   (Start_10 String ("" (str.++ Start_2 Start) (str.at Start_11 StartInt_10) (str.substr Start_1 StartInt_6 StartInt_9) (str.from_int StartInt_6) (ite StartBool_1 Start_8 Start_7)))
   (Start_15 String ("a" x "0" (str.replace Start Start_15 Start_13) (ite StartBool_1 Start_2 Start_3)))
   (Start_4 String (y (str.at Start_1 StartInt_5) (str.from_int StartInt_3) (ite StartBool_3 Start_6 Start_6)))
   (Start_6 String ("1" (str.++ Start_1 Start_1) (ite StartBool_1 Start_4 Start_7)))
   (Start_2 String ("" (str.++ Start_3 Start_2) (str.substr Start_2 StartInt StartInt) (str.from_int StartInt) (ite StartBool_1 Start Start_2)))
   (StartInt_6 Int (1 (str.len Start_7) (str.to_int Start_1)))
   (StartInt_7 Int (1 (str.indexof Start_6 Start_4 StartInt_1) (str.to_int Start_1)))
   (Start_13 String ("" "0" (str.at Start_2 StartInt_7) (str.substr Start_7 StartInt StartInt_11) (str.replace Start_9 Start_6 Start_11)))
   (StartInt_3 Int (0 (str.len Start_4)))
   (Start_9 String ("1" "" (str.++ Start_3 Start_7) (str.at Start_8 StartInt_5) (str.substr Start_9 StartInt_5 StartInt_7) (ite StartBool_3 Start_5 Start_7)))
   (Start_8 String ("b" "a" (str.++ Start_5 Start_5) (str.at Start_5 StartInt_8) (str.replace Start_6 Start_7 Start_8)))
   (StartInt_8 Int (1 0))
   (Start_3 String (y (str.++ Start_3 Start_2) (str.replace Start_9 Start Start_7) (str.from_int StartInt_1)))
   (Start_1 String ("0" (str.++ Start_10 Start_11) (str.at Start_4 StartInt) (str.from_int StartInt_6) (ite StartBool_4 Start_7 Start_9)))
   (StartBool_4 Bool (false (and StartBool StartBool_5) (str.<= Start_11 Start_12) (= StartInt_9 StartInt_6) (<= StartInt_5 StartInt_3)))
   (StartInt_9 Int (1 0 (str.indexof Start_12 Start_9 StartInt_4)))
   (Start_12 String ("a" y "0" "" "1" "b" x (str.++ Start Start_12) (str.at Start_4 StartInt_5) (str.substr Start StartInt_9 StartInt_10) (str.replace Start_10 Start_5 Start_5) (str.from_int StartInt_10)))
   (StartInt_11 Int (0 (str.to_int Start_5)))
   (StartInt_10 Int (1 (str.indexof Start_3 Start_4 StartInt_1)))
   (StartBool_5 Bool (true false (not StartBool_5) (str.suffixof Start_13 Start_7) (str.contains Start_13 Start_5) (= Start_8 Start_9)))
   (Start_11 String (x (str.++ Start_1 Start_11) (str.at Start_1 StartInt_6) (str.from_int StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= y "") "0" (str.substr y 0 1))))

(check-synth)
