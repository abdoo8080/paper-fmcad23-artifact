(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (Start_20 String) (Start_18 String) (Start_19 String) (StartBool_5 Bool) (Start_15 String) (StartBool_4 Bool) (Start_4 String) (StartBool_6 Bool) (Start_12 String) (StartInt_1 Int) (Start_5 String) (Start_6 String) (StartBool_1 Bool) (Start_8 String) (Start_16 String) (Start_1 String) (StartInt_3 Int) (Start_17 String) (StartInt_2 Int) (Start_2 String) (StartInt_5 Int) (Start_9 String) (Start_3 String) (StartInt_4 Int) (StartBool_3 Bool) (Start_10 String) (Start_13 String) (StartInt_9 Int) (StartInt_7 Int) (StartInt_8 Int) (Start_7 String) (StartInt_6 Int) (Start_11 String) (StartBool_2 Bool) (StartInt_10 Int) (Start_14 String))
  ((Start String (y (str.++ Start Start_1) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool Start_2 Start_2)))
   (StartInt Int (0 (str.len Start_7) (str.indexof Start Start StartInt_3) (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool) (and StartBool_2 StartBool_2) (str.< Start_2 Start_4) (str.suffixof Start_7 Start_3) (str.contains Start_3 Start_7) (= StartInt_6 StartInt_7)))
   (StartInt_11 Int (1 (str.indexof Start_7 Start_2 StartInt_2) (str.to_int Start_10)))
   (Start_20 String ("b" x "0" (str.at Start_4 StartInt_11) (str.substr Start_7 StartInt_4 StartInt_1) (ite StartBool Start_16 Start_8)))
   (Start_18 String (y (str.++ Start_7 Start_20) (str.substr Start_10 StartInt_9 StartInt_3) (str.replace Start_17 Start_18 Start_13) (str.from_int StartInt_4) (ite StartBool_4 Start_9 Start_3)))
   (Start_19 String ("b" (str.++ Start_2 Start_13) (str.substr Start_17 StartInt StartInt_1)))
   (StartBool_5 Bool (false true (and StartBool_4 StartBool_6) (str.contains Start_15 Start_5) (= StartInt_9 StartInt_1) (<= StartInt_1 StartInt_4)))
   (Start_15 String ("a" (str.++ Start_15 Start_2) (str.at Start_16 StartInt_5) (str.substr Start_5 StartInt_2 StartInt_10) (str.from_int StartInt_8) (ite StartBool_3 Start_7 Start)))
   (StartBool_4 Bool (false true (and StartBool_3 StartBool_5) (str.<= Start_15 Start_7) (str.prefixof Start_11 Start_6) (= Start_15 Start_6) (= StartInt_6 StartInt_10)))
   (Start_4 String ("a" "0" (str.++ Start Start_2) (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt StartInt_3) (str.replace Start_4 Start_2 Start_1)))
   (StartBool_6 Bool (false (and StartBool StartBool) (str.prefixof Start_5 Start_16) (= Start_13 Start_9)))
   (Start_12 String ("0" x (str.at Start_2 StartInt_6) (str.substr Start_2 StartInt_7 StartInt_7)))
   (StartInt_1 Int (1 0))
   (Start_5 String (x (str.replace Start_5 Start Start_2) (str.from_int StartInt_4)))
   (Start_6 String ("a" y "0" "b" "" x (str.++ Start_1 Start_7) (str.at Start_6 StartInt_3) (str.substr Start_3 StartInt_5 StartInt_1) (str.replace Start_4 Start_6 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_8)))
   (StartBool_1 Bool (true (str.prefixof Start_4 Start_4) (str.suffixof Start_4 Start_5) (str.contains Start_4 Start) (= StartInt_2 StartInt_3)))
   (Start_8 String (x "" "1" (str.++ Start_6 Start) (str.at Start_3 StartInt_2) (str.substr Start_8 StartInt_5 StartInt_2) (str.from_int StartInt_1)))
   (Start_16 String (y "b" "0" "1" "" "a" (str.at Start_9 StartInt_3) (str.substr Start_17 StartInt_5 StartInt_3) (str.replace Start_16 Start_16 Start_16) (str.from_int StartInt_7)))
   (Start_1 String ("a" y (str.at Start_5 StartInt_4) (str.replace Start_4 Start_6 Start_5) (str.from_int StartInt_4) (ite StartBool_1 Start_6 Start_3)))
   (StartInt_3 Int (0 1 (str.to_int Start_4)))
   (Start_17 String ("" "b" "a" "0" y (str.replace Start_9 Start_5 Start_1) (ite StartBool_2 Start_2 Start)))
   (StartInt_2 Int (0 (str.len Start_4)))
   (Start_2 String ("b" x (str.++ Start_3 Start_1) (str.substr Start_2 StartInt_2 StartInt)))
   (StartInt_5 Int (0))
   (Start_9 String ("0" "1" "a" (str.++ Start_10 Start_2) (str.from_int StartInt)))
   (Start_3 String ("b" (str.++ Start_1 Start_3) (str.substr Start_1 StartInt_1 StartInt) (ite StartBool_1 Start_4 Start_3)))
   (StartInt_4 Int (0 (str.len Start_4) (str.to_int Start_4)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_3) (str.< Start_3 Start_7) (str.prefixof Start_13 Start_14) (str.contains Start_14 Start_10)))
   (Start_10 String (x "b" (str.at Start_8 StartInt_1) (str.substr Start_6 StartInt_8 StartInt_2) (str.replace Start_6 Start_2 Start_6) (str.from_int StartInt_7) (ite StartBool_2 Start_5 Start_2)))
   (Start_13 String ("" (str.at Start_18 StartInt_7) (str.replace Start_19 Start_5 Start_15)))
   (StartInt_9 Int (1 0 (str.to_int Start_12)))
   (StartInt_7 Int (1 0 (str.len Start_6) (str.indexof Start_9 Start_1 StartInt_5)))
   (StartInt_8 Int (0 1 (str.indexof Start_5 Start_1 StartInt)))
   (Start_7 String ("0" x (ite StartBool Start_8 Start_4)))
   (StartInt_6 Int (1 (str.len Start_3)))
   (Start_11 String ("b" "1" (str.substr Start StartInt_9 StartInt_10) (str.replace Start_9 Start_8 Start_2) (ite StartBool_3 Start_7 Start_9)))
   (StartBool_2 Bool (false true (and StartBool StartBool_3) (str.<= Start_5 Start_11) (str.prefixof Start_5 Start_6) (= StartInt_6 StartInt_1)))
   (StartInt_10 Int (0 1 (str.len Start_7)))
   (Start_14 String ("a" "" "b" (str.at Start_11 StartInt_5) (str.from_int StartInt) (ite StartBool_4 Start_13 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" "" (str.replace x y "a"))))

(check-synth)
