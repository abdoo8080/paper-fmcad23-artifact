(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_5 Int) (StartBool_5 Bool) (Start_10 String) (StartInt_6 Int) (Start_13 String) (StartBool_4 Bool) (StartBool_3 Bool) (StartInt_4 Int) (Start_7 String) (StartInt_7 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_3 Int) (Start_6 String) (Start_3 String) (Start_2 String) (StartInt_8 Int) (Start_8 String) (StartInt_2 Int) (Start_4 String) (Start_9 String) (Start_5 String) (StartInt_1 Int) (Start_12 String) (Start_11 String))
  ((Start String (x "a" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1 (str.indexof Start_7 Start_6 StartInt_2) (str.to_int Start_6)))
   (StartBool Bool (true (not StartBool_5) (str.< Start_10 Start_9) (str.suffixof Start_4 Start_7) (= Start_8 Start_10) (= StartInt_4 StartInt_7) (<= StartInt_4 StartInt_8)))
   (Start_1 String ("" y (str.at Start_9 StartInt_4) (str.replace Start_2 Start_3 Start_10) (str.from_int StartInt_2) (ite StartBool_3 Start_6 Start_12)))
   (StartInt_5 Int (0 (str.to_int Start_1)))
   (StartBool_5 Bool (false (str.suffixof Start_8 Start_9) (= Start_9 Start_10)))
   (Start_10 String (x (str.++ Start_12 Start_7) (str.substr Start_11 StartInt StartInt_6) (str.replace Start_11 Start Start_7) (ite StartBool_4 Start Start_9)))
   (StartInt_6 Int (0 1 (str.to_int Start_7)))
   (Start_13 String ("" (str.++ Start_1 Start_3) (str.at Start_8 StartInt_7) (ite StartBool_1 Start_1 Start_5)))
   (StartBool_4 Bool (false (str.< Start_1 Start_4) (str.<= Start_1 Start_3) (str.suffixof Start_5 Start_4) (str.contains Start Start_5) (= Start_4 Start_6) (= StartInt_5 StartInt_2) (<= StartInt_6 StartInt_3)))
   (StartBool_3 Bool (true (and StartBool_2 StartBool_4) (str.suffixof Start_2 Start_5) (= StartInt_2 StartInt)))
   (StartInt_4 Int (1 0 (str.len Start_12)))
   (Start_7 String ("b" "" (str.++ Start_6 Start_3)))
   (StartInt_7 Int (0 1 (str.len Start_1) (str.indexof Start Start_4 StartInt)))
   (StartBool_2 Bool (false true (str.<= Start_8 Start_2) (str.prefixof Start_7 Start_6) (str.suffixof Start_12 Start_10) (= Start_2 Start_13) (= StartInt_4 StartInt_7) (<= StartInt_6 StartInt_6)))
   (StartBool_1 Bool (false (str.< Start_1 Start) (str.<= Start_3 Start_1) (str.suffixof Start_3 Start_1) (= Start_2 Start) (= StartInt_2 StartInt_3)))
   (StartInt_3 Int (0))
   (Start_6 String (y (str.++ Start_7 Start_3) (str.from_int StartInt_2) (ite StartBool Start_6 Start_2)))
   (Start_3 String ("a" (str.at Start_3 StartInt_3) (str.substr Start StartInt_3 StartInt_3)))
   (Start_2 String ("" (str.++ Start_4 Start) (str.at Start_5 StartInt_2) (str.substr Start_3 StartInt StartInt) (str.replace Start_3 Start_1 Start_5) (ite StartBool_1 Start Start_4)))
   (StartInt_8 Int (1 0 (str.len Start_12)))
   (Start_8 String ("0" (str.++ Start_4 Start_9) (str.substr Start_10 StartInt_2 StartInt_3) (ite StartBool_2 Start_1 Start_11)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.to_int Start_2)))
   (Start_4 String ("b" y (str.++ Start_3 Start_7) (str.substr Start_6 StartInt_2 StartInt_1)))
   (Start_9 String ("a" (str.at Start_4 StartInt_3) (str.replace Start_12 Start_5 Start_9) (str.from_int StartInt_8)))
   (Start_5 String ("1" (str.at Start_4 StartInt_2) (str.substr Start_6 StartInt_1 StartInt) (str.replace Start_3 Start_5 Start_7) (ite StartBool Start_3 Start_7)))
   (StartInt_1 Int (1 (str.len Start_4) (str.to_int Start_8)))
   (Start_12 String (x "" (str.from_int StartInt_4) (ite StartBool_3 Start_10 Start_4)))
   (Start_11 String (x "a" "b" "0" (str.++ Start_5 Start_10) (str.at Start_7 StartInt_1) (str.replace Start_9 Start_5 Start_3) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "0" (str.replace "0" "" "0"))))

(check-synth)
