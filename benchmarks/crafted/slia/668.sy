(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartBool_1 Bool) (Start_5 String) (Start_4 String) (StartInt_2 Int) (StartInt_3 Int) (Start_2 String) (Start_3 String) (StartInt_1 Int))
  ((Start String (x (str.++ Start_1 Start) (str.substr Start_2 StartInt StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt Int (1 (str.indexof Start_4 Start_2 StartInt_2) (str.to_int Start_3)))
   (StartBool Bool (true (not StartBool_1) (str.< Start_2 Start_4) (str.<= Start_1 Start_3) (= Start_2 Start_1) (= StartInt_3 StartInt_3)))
   (Start_1 String ("0" x (str.at Start_4 StartInt_3) (str.replace Start_5 Start_1 Start_4)))
   (StartBool_1 Bool (true false (str.prefixof Start Start_4) (str.suffixof Start_1 Start_3) (str.contains Start_2 Start_2) (= Start Start)))
   (Start_5 String (y (str.++ Start_4 Start_5) (str.at Start_4 StartInt_2) (str.replace Start_3 Start_3 Start)))
   (Start_4 String ("a" (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt_1) (ite StartBool_1 Start_4 Start)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start_4 Start_4 StartInt_2)))
   (StartInt_3 Int (1 (str.to_int Start)))
   (Start_2 String ("" (str.++ Start_3 Start_3) (str.at Start_1 StartInt_1) (str.substr Start StartInt_1 StartInt_2)))
   (Start_3 String ("b" "a" "1" x "0" "" y (str.++ Start_3 Start_1) (str.at Start_2 StartInt_1)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start Start_3 StartInt_1) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "0" y) "b" x)))

(check-synth)
