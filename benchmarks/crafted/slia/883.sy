(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (StartInt_1 Int) (Start_1 String) (Start_3 String) (Start_5 String) (Start_2 String) (Start_9 String) (StartBool_1 Bool) (Start_4 String) (Start_8 String) (Start_7 String) (Start_6 String) (StartBool_2 Bool))
  ((Start String ("" (str.substr Start StartInt_1 StartInt_2)))
   (StartInt Int (1 0 (str.to_int Start_2)))
   (StartBool Bool (false true (str.< Start_6 Start_3) (str.prefixof Start_2 Start_1) (str.suffixof Start_9 Start_8) (str.contains Start_8 Start_3) (= StartInt_2 StartInt_1)))
   (StartInt_2 Int (0 1 (str.to_int Start)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_1 Start StartInt_1)))
   (Start_1 String (x "b" "1" (ite StartBool Start_2 Start_3)))
   (Start_3 String ("b" "" (str.++ Start_4 Start) (str.substr Start_1 StartInt_1 StartInt) (ite StartBool Start_2 Start_5)))
   (Start_5 String ("b" (str.++ Start_1 Start) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_4)))
   (Start_2 String ("b"))
   (Start_9 String ("1" (str.substr Start_3 StartInt_2 StartInt_2)))
   (StartBool_1 Bool (false (str.< Start_2 Start_5) (str.prefixof Start Start_4) (str.suffixof Start Start_2) (str.contains Start_1 Start_6)))
   (Start_4 String ("" (str.++ Start_4 Start_7) (str.from_int StartInt) (ite StartBool_2 Start_7 Start_8)))
   (Start_8 String ("a" (str.++ Start_3 Start_1) (str.at Start StartInt_2) (str.replace Start_5 Start_3 Start)))
   (Start_7 String ("0" (str.at Start_2 StartInt) (str.replace Start_7 Start_1 Start_8) (ite StartBool_2 Start_5 Start_6)))
   (Start_6 String (y (str.from_int StartInt_1) (ite StartBool Start_4 Start_4)))
   (StartBool_2 Bool (false true (not StartBool) (str.< Start_8 Start_8) (str.<= Start_7 Start_2) (str.suffixof Start_2 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.replace y "0" "b"))))

(check-synth)
