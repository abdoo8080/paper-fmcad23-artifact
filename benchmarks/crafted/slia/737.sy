(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_7 Int) (Start_10 String) (StartBool_5 Bool) (StartInt_1 Int) (Start_9 String) (StartInt_6 Int) (StartInt_5 Int) (Start_1 String) (Start_8 String) (Start_4 String) (Start_2 String) (Start_5 String) (StartBool_2 Bool) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_4 Int) (StartBool_4 Bool) (StartBool_3 Bool) (Start_6 String) (Start_3 String) (Start_7 String))
  ((Start String ("1" y "b" (str.++ Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1 (str.indexof Start_3 Start_10 StartInt_7) (str.to_int Start)))
   (StartBool Bool (true (not StartBool_2) (str.< Start_6 Start_9) (str.prefixof Start_6 Start_3) (str.suffixof Start_5 Start_5) (= Start_8 Start_6)))
   (Start_11 String ("a" (str.++ Start_8 Start_1) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_2)))
   (StartInt_7 Int (1 (str.len Start_4) (str.indexof Start_5 Start_1 StartInt_5)))
   (Start_10 String ("0" x "1" (str.substr Start_11 StartInt_6 StartInt_2)))
   (StartBool_5 Bool (true (not StartBool_3) (str.< Start_2 Start_2) (str.<= Start_5 Start_10) (str.suffixof Start_2 Start_10) (str.contains Start_7 Start_5) (= Start Start_4)))
   (StartInt_1 Int (0 (str.len Start) (str.to_int Start_6)))
   (Start_9 String (x "a" (str.++ Start_2 Start_7) (str.at Start_7 StartInt_2) (str.from_int StartInt_5) (ite StartBool Start_8 Start_9)))
   (StartInt_6 Int (0 (str.len Start_7) (str.indexof Start_7 Start_9 StartInt_4)))
   (StartInt_5 Int (1 0 (str.len Start_2) (str.to_int Start_3)))
   (Start_1 String ("a" "1" y (str.++ Start_9 Start_4) (str.at Start_6 StartInt_7) (str.from_int StartInt_3) (ite StartBool_5 Start_9 Start_7)))
   (Start_8 String ("b" "1" (str.++ Start Start_1) (str.at Start_1 StartInt_2) (str.replace Start_8 Start_1 Start_1)))
   (Start_4 String ("0" "" (str.++ Start_6 Start_5) (str.substr Start_6 StartInt_3 StartInt_1) (str.replace Start Start_4 Start_4)))
   (Start_2 String (y (str.++ Start_1 Start_3) (str.replace Start_4 Start_1 Start_4) (str.from_int StartInt) (ite StartBool_2 Start_1 Start_5)))
   (Start_5 String ("1" (str.replace Start_1 Start_1 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_4)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_3) (str.prefixof Start_1 Start_5) (str.contains Start_4 Start_5) (= Start Start_3) (= StartInt_2 StartInt) (<= StartInt StartInt_3)))
   (StartInt_3 Int (0 1 (str.len Start_5) (str.indexof Start Start StartInt_2)))
   (StartBool_1 Bool (true (not StartBool_4) (str.<= Start_8 Start_7) (str.prefixof Start_5 Start_3) (str.suffixof Start_3 Start_2) (= StartInt_1 StartInt_6)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.indexof Start_5 Start_2 StartInt_1) (str.to_int Start_3)))
   (StartInt_4 Int (0 1))
   (StartBool_4 Bool (true false (not StartBool_1) (str.prefixof Start_3 Start_1) (str.contains Start_4 Start_6) (= Start_4 Start_6) (= StartInt_1 StartInt_1)))
   (StartBool_3 Bool (false (not StartBool_1) (str.suffixof Start_6 Start_4)))
   (Start_6 String ("b" (str.at Start_1 StartInt_4) (str.from_int StartInt_2) (ite StartBool_4 Start_3 Start_5)))
   (Start_3 String ("b" (str.from_int StartInt) (ite StartBool_4 Start_1 Start_7)))
   (Start_7 String ("b" (str.++ Start_6 Start_4) (str.substr Start_4 StartInt_2 StartInt_5) (str.replace Start_1 Start_1 Start_6) (ite StartBool_2 Start_7 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "b" x "a") "0")))

(check-synth)
