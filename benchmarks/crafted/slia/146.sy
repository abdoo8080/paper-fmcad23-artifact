(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_4 Int) (StartBool_3 Bool) (StartInt_3 Int) (Start_7 String) (Start_4 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_3 String) (Start_2 String) (Start_6 String) (Start_8 String) (Start_5 String) (Start_9 String) (StartInt_2 Int) (StartInt_1 Int))
  ((Start String ("" "a" (str.++ Start_1 Start_2) (str.at Start_2 StartInt) (str.replace Start_2 Start_2 Start_1)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start_3 Start_7 StartInt_2)))
   (StartBool Bool (false true (str.< Start_3 Start_4) (str.prefixof Start_2 Start_3) (str.suffixof Start_2 Start_1) (<= StartInt_1 StartInt_1)))
   (Start_1 String ("b" y (str.at Start StartInt_1) (str.replace Start_1 Start_9 Start_2)))
   (StartInt_4 Int (0 1))
   (StartBool_3 Bool (true (not StartBool) (str.contains Start_2 Start_8) (= Start Start_4) (<= StartInt_1 StartInt_1)))
   (StartInt_3 Int (0 (str.indexof Start_6 Start_3 StartInt_2) (str.to_int Start_3)))
   (Start_7 String ("1" y (str.at Start StartInt_2) (str.from_int StartInt_4) (ite StartBool_2 Start_2 Start_4)))
   (Start_4 String ("1" y (str.substr Start_5 StartInt_2 StartInt_2) (str.replace Start_5 Start_3 Start_1) (ite StartBool_1 Start_2 Start_2)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_1) (str.< Start Start_4) (str.contains Start_8 Start_1) (= Start_4 Start_9) (<= StartInt_2 StartInt_3)))
   (StartBool_1 Bool (false (str.<= Start_6 Start_1) (str.prefixof Start_4 Start) (= Start_2 Start) (<= StartInt StartInt_3)))
   (Start_3 String ("b" x "" (str.++ Start_2 Start_5) (str.at Start_7 StartInt) (str.substr Start_2 StartInt_1 StartInt_1)))
   (Start_2 String ("0" (str.++ Start Start_2) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_3 Start_4 Start_1) (ite StartBool Start Start_4)))
   (Start_6 String ("" y "1" x "0" "a" "b" (str.at Start StartInt_1)))
   (Start_8 String ("0" (str.++ Start_1 Start_7) (str.at Start_1 StartInt) (str.substr Start_9 StartInt StartInt_1) (str.replace Start_8 Start_6 Start_5) (str.from_int StartInt_2)))
   (Start_5 String ("b" x (str.++ Start_6 Start) (str.at Start_2 StartInt_2) (str.substr Start StartInt_2 StartInt) (ite StartBool_1 Start_6 Start_3)))
   (Start_9 String ("a" x "" "0" (str.at Start_6 StartInt_4) (str.from_int StartInt_2) (ite StartBool Start_4 Start_7)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt)))
   (StartInt_1 Int (1 (str.len Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof "b" y (str.len (str.replace (str.replace x "" "1") x "1"))))))

(check-synth)
