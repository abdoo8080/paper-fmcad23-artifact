(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (StartInt_12 Int) (StartInt_11 Int) (Start_9 String) (Start_8 String) (Start_7 String) (Start_12 String) (StartInt_2 Int) (StartInt_3 Int) (Start_2 String) (Start_6 String) (StartInt_7 Int) (StartInt_1 Int) (Start_5 String) (StartBool_1 Bool) (Start_14 String) (StartInt_6 Int) (Start_10 String) (Start_3 String) (Start_1 String) (Start_15 String) (Start_4 String) (StartBool_2 Bool) (Start_16 String) (Start_11 String) (Start_13 String) (StartInt_8 Int) (StartBool_6 Bool) (StartInt_4 Int) (StartInt_10 Int) (StartInt_9 Int) (StartInt_5 Int) (StartBool_3 Bool))
  ((Start String (x y (str.from_int StartInt) (ite StartBool_1 Start Start)))
   (StartInt Int (0 1 (str.len Start_11) (str.to_int Start_7)))
   (StartBool Bool (true (not StartBool_4) (str.< Start_6 Start_6) (str.contains Start_8 Start_14) (= StartInt_7 StartInt_9)))
   (StartBool_5 Bool (false (not StartBool_6) (and StartBool_2 StartBool_4) (str.<= Start_8 Start_6) (str.contains Start_11 Start_16) (= StartInt_4 StartInt_8)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_5 StartBool_2) (str.suffixof Start_9 Start_16) (= StartInt_6 StartInt_7)))
   (StartInt_12 Int (1 0 (str.len Start)))
   (StartInt_11 Int (0 1 (str.to_int Start_16)))
   (Start_9 String ("1" "b" (str.++ Start_2 Start_7) (str.replace Start_5 Start_8 Start_7) (str.from_int StartInt_6)))
   (Start_8 String ("" "0" (str.++ Start_6 Start_2) (str.replace Start_9 Start_6 Start_8) (ite StartBool Start Start_1)))
   (Start_7 String ("1" x (str.++ Start_1 Start_6) (str.at Start_7 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_5) (str.replace Start_7 Start_2 Start_8) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_5)))
   (Start_12 String ("b" "a" x "0" (str.at Start_12 StartInt) (str.replace Start Start_4 Start_11)))
   (StartInt_2 Int (1 0 (str.len Start) (str.indexof Start_6 Start_2 StartInt_3) (str.to_int Start)))
   (StartInt_3 Int (0 1 (str.len Start_6) (str.indexof Start Start_4 StartInt) (str.to_int Start_5)))
   (Start_2 String ("a" x (str.++ Start_3 Start_2) (str.replace Start_3 Start_2 Start_4) (str.from_int StartInt_1)))
   (Start_6 String (y (str.++ Start_5 Start_1) (str.at Start StartInt_1) (str.replace Start_6 Start_2 Start_3)))
   (StartInt_7 Int (0 1 (str.len Start_5) (str.indexof Start_1 Start StartInt)))
   (StartInt_1 Int (0 (str.to_int Start_2)))
   (Start_5 String ("" "b" y "1" "0" (str.++ Start_7 Start_2) (str.substr Start_2 StartInt_4 StartInt_2) (str.replace Start_3 Start_1 Start_1) (ite StartBool_1 Start_2 Start_2)))
   (StartBool_1 Bool (true false (not StartBool) (str.<= Start_1 Start) (str.suffixof Start Start_2) (= Start Start) (<= StartInt_1 StartInt)))
   (Start_14 String ("b" "" "0" (str.++ Start_2 Start_2) (str.at Start_1 StartInt_11) (str.substr Start_2 StartInt_1 StartInt_11) (ite StartBool_3 Start_4 Start_12)))
   (StartInt_6 Int (0 (str.len Start_9) (str.indexof Start_5 Start StartInt_7) (str.to_int Start_2)))
   (Start_10 String ("a" "b" (str.at Start_7 StartInt_2) (str.substr Start_5 StartInt_1 StartInt_4) (ite StartBool_2 Start_11 Start_8)))
   (Start_3 String (y (str.replace Start_10 Start_1 Start_11) (ite StartBool_2 Start_4 Start_4)))
   (Start_1 String ("a" "b" (str.substr Start StartInt StartInt) (ite StartBool_2 Start_13 Start_4)))
   (Start_15 String ("b" (str.at Start_5 StartInt_2) (str.from_int StartInt_10)))
   (Start_4 String (y "b" "" x (str.at Start_5 StartInt_2) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false true (not StartBool_2) (str.< Start_12 Start_4) (str.contains Start_11 Start_2) (= Start_12 Start) (<= StartInt_6 StartInt_7)))
   (Start_16 String ("" "a" x (str.++ Start_1 Start_9) (str.at Start_12 StartInt_12) (str.substr Start_13 StartInt_6 StartInt_9) (str.replace Start_10 Start_6 Start_1) (str.from_int StartInt_8)))
   (Start_11 String ("0" y "1" (str.++ Start Start_12) (str.replace Start_2 Start_2 Start) (str.from_int StartInt_1)))
   (Start_13 String ("1" (str.substr Start_14 StartInt_2 StartInt_8) (str.from_int StartInt_1)))
   (StartInt_8 Int (0 1 (str.indexof Start_6 Start StartInt_9) (str.to_int Start_15)))
   (StartBool_6 Bool (true false (and StartBool_3 StartBool_6) (str.<= Start_4 Start_16) (str.contains Start_8 Start_9) (= Start_9 Start) (= StartInt_7 StartInt_3)))
   (StartInt_4 Int (0))
   (StartInt_10 Int (0 (str.len Start_5) (str.to_int Start_7)))
   (StartInt_9 Int (1 (str.len Start_15) (str.to_int Start_8)))
   (StartInt_5 Int (1 0 (str.len Start_7)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_2) (str.< Start_11 Start_14) (str.<= Start_15 Start_12) (str.suffixof Start_12 Start_11) (str.contains Start_7 Start_5) (= Start_15 Start_6) (= StartInt_11 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "1" x y) (str.len y))))

(check-synth)
