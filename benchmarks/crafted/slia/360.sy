(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (StartInt_1 Int) (StartInt_3 Int) (StartInt_4 Int) (Start_2 String) (Start_3 String) (Start_1 String) (StartInt_2 Int))
  ((Start String ("1" "0" "" (str.substr Start StartInt_1 StartInt_2) (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (false true (not StartBool_1) (str.contains Start Start)))
   (StartBool_1 Bool (false (and StartBool StartBool) (str.prefixof Start_2 Start_3) (<= StartInt StartInt_2)))
   (StartInt_1 Int (0))
   (StartInt_3 Int (1 0 (str.to_int Start)))
   (StartInt_4 Int (1))
   (Start_2 String ("0" x y "" (str.++ Start Start_1) (str.substr Start_2 StartInt_3 StartInt_4) (str.from_int StartInt_1) (ite StartBool Start_1 Start_2)))
   (Start_3 String ("a" "0" "b" (str.substr Start StartInt_2 StartInt) (str.replace Start_2 Start Start_3) (str.from_int StartInt_2) (ite StartBool_1 Start Start_3)))
   (Start_1 String ("b" y "1" "0" (str.substr Start_2 StartInt StartInt_1)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "b" (str.replace "1" "" "0"))))

(check-synth)
