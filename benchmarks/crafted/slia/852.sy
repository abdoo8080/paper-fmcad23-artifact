(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_20 String) (Start_19 String) (StartInt_1 Int) (Start_2 String) (Start_1 String) (Start_12 String) (Start_5 String) (StartInt_6 Int) (StartBool_3 Bool) (StartInt_2 Int) (Start_10 String) (Start_15 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_17 String) (Start_21 String) (StartInt_10 Int) (Start_8 String) (StartBool_1 Bool) (Start_9 String) (Start_4 String) (Start_7 String) (Start_3 String) (StartInt_5 Int) (StartInt_11 Int) (StartInt_3 Int) (StartInt_8 Int) (Start_14 String) (StartBool_4 Bool) (Start_13 String) (Start_18 String) (Start_6 String) (StartInt_4 Int) (Start_11 String) (Start_16 String) (StartInt_9 Int))
  ((Start String (y "1" "b" x "a" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt StartInt_1) (str.replace Start Start_3 Start)))
   (StartInt Int (0 1 (str.indexof Start Start_20 StartInt) (str.to_int Start_19)))
   (StartBool Bool (true false (not StartBool_1) (str.< Start_14 Start_1) (str.<= Start_12 Start_8) (<= StartInt_11 StartInt_3)))
   (Start_20 String ("" "a" (str.replace Start_5 Start_21 Start_4) (str.from_int StartInt_4) (ite StartBool_4 Start_13 Start_21)))
   (Start_19 String ("b" "0" (str.at Start_13 StartInt_11) (str.substr Start StartInt_11 StartInt_11) (str.from_int StartInt_4)))
   (StartInt_1 Int (0))
   (Start_2 String ("a" "0" y (str.++ Start_10 Start_6) (str.at Start_18 StartInt_4) (str.substr Start_13 StartInt_7 StartInt_4) (str.replace Start_13 Start_13 Start_7) (str.from_int StartInt_9)))
   (Start_1 String ("b" (str.++ Start_13 Start_2) (str.at Start_5 StartInt_2) (str.substr Start_10 StartInt_2 StartInt_10) (ite StartBool_2 Start_19 Start)))
   (Start_12 String (x "a" "b" (str.++ Start_9 Start_8) (str.at Start_8 StartInt_3) (str.substr Start_7 StartInt_1 StartInt)))
   (Start_5 String ("b" (str.++ Start_4 Start_6)))
   (StartInt_6 Int (0 (str.indexof Start_13 Start_4 StartInt_3)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_3 StartBool) (str.< Start_13 Start_14) (str.<= Start_12 Start_11) (str.prefixof Start_8 Start_15) (str.contains Start_7 Start_9) (<= StartInt_1 StartInt_3)))
   (StartInt_2 Int (1 0 (str.len Start) (str.to_int Start_15)))
   (Start_10 String ("a" "1" y "" "0" x "b" (str.at Start_4 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_1) (str.replace Start_11 Start_11 Start_2) (str.from_int StartInt_2) (ite StartBool_3 Start_3 Start_12)))
   (Start_15 String (x (str.++ Start_10 Start) (str.replace Start_12 Start_16 Start) (ite StartBool Start Start_6)))
   (StartInt_7 Int (0))
   (StartBool_2 Bool (true false (str.< Start_2 Start_1) (str.contains Start_3 Start_4)))
   (Start_17 String ("1" (str.++ Start_15 Start_6) (str.at Start_10 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_8) (str.replace Start_2 Start_4 Start_12) (str.from_int StartInt_2) (ite StartBool Start_2 Start_16)))
   (Start_21 String ("b" (str.++ Start_20 Start_7) (str.at Start_3 StartInt_4)))
   (StartInt_10 Int (0 1 (str.to_int Start_7)))
   (Start_8 String ("1" (str.++ Start_6 Start_8) (str.at Start_3 StartInt_2) (str.substr Start_9 StartInt_1 StartInt_2) (ite StartBool_2 Start_8 Start_4)))
   (StartBool_1 Bool (false true (str.<= Start_4 Start_3) (str.prefixof Start_7 Start_1) (str.suffixof Start_3 Start_1) (str.contains Start_7 Start_1) (= Start_7 Start_7) (<= StartInt StartInt_1)))
   (Start_9 String (x y (str.++ Start_4 Start) (str.substr Start_5 StartInt_1 StartInt_1) (str.replace Start_10 Start_7 Start_9)))
   (Start_4 String ("0" "1" (str.at Start_18 StartInt_7) (str.replace Start_2 Start_10 Start_12) (str.from_int StartInt_5) (ite StartBool Start_17 Start_13)))
   (Start_7 String ("" "0" (str.substr Start StartInt_1 StartInt_2) (ite StartBool Start Start_8)))
   (Start_3 String (x (str.replace Start_2 Start_4 Start_5) (str.from_int StartInt_1)))
   (StartInt_5 Int (0))
   (StartInt_11 Int (0 (str.len Start_1) (str.to_int Start_5)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_11 StartInt_9) (str.to_int Start_7)))
   (StartInt_8 Int (1))
   (Start_14 String (y x))
   (StartBool_4 Bool (false true (str.<= Start_12 Start_11) (str.contains Start Start_7)))
   (Start_13 String ("b" "a" y (str.at Start_13 StartInt_8) (str.substr Start_8 StartInt_5 StartInt) (str.replace Start_14 Start_15 Start_11) (str.from_int StartInt_1) (ite StartBool_4 Start_10 Start_5)))
   (Start_18 String (y (str.++ Start_13 Start_4) (str.at Start_8 StartInt_3) (str.from_int StartInt_7)))
   (Start_6 String ("a" x y (str.++ Start_5 Start_3) (str.substr Start_6 StartInt StartInt) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_6)))
   (StartInt_4 Int (1 0 (str.len Start_17) (str.indexof Start_12 Start_2 StartInt_7)))
   (Start_11 String ("b" x "" "a" "0" y "1" (str.substr Start_8 StartInt_5 StartInt_3) (str.replace Start_10 Start_3 Start_6)))
   (Start_16 String (y "1" "" x (str.++ Start_17 Start_13) (str.at Start_12 StartInt_4) (str.substr Start_11 StartInt_4 StartInt_5) (str.from_int StartInt_6)))
   (StartInt_9 Int (0 1 (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof "b" x) (str.replace x "a" y) y)))

(check-synth)
