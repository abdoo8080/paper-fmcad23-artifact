(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartBool_3 Bool) (Start_9 String) (Start_8 String) (Start_7 String) (Start_3 String) (StartInt_2 Int) (StartInt_5 Int) (Start_1 String) (Start_2 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_6 String) (StartInt_8 Int) (StartBool_2 Bool) (Start_4 String) (StartInt_7 Int) (StartInt_4 Int) (StartInt_6 Int) (Start_10 String) (Start_5 String) (StartInt_3 Int))
  ((Start String (y (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_1)))
   (StartInt Int (0 (str.to_int Start_8)))
   (StartBool Bool (false true (str.<= Start_6 Start_4) (str.prefixof Start_5 Start) (str.suffixof Start_9 Start_2) (= Start_8 Start_8) (= StartInt_3 StartInt_4) (<= StartInt_7 StartInt_1)))
   (Start_11 String ("1" (str.at Start_11 StartInt_8) (str.substr Start_11 StartInt_1 StartInt) (str.replace Start_4 Start_10 Start_6) (str.from_int StartInt_5)))
   (StartBool_3 Bool (false true (str.< Start Start) (str.prefixof Start_7 Start_7) (str.suffixof Start_5 Start_7) (str.contains Start_3 Start_10)))
   (Start_9 String ("" (str.at Start_1 StartInt_2) (ite StartBool_3 Start_9 Start_4)))
   (Start_8 String (y (str.++ Start_4 Start_3) (str.substr Start_6 StartInt_3 StartInt_1) (str.from_int StartInt_4)))
   (Start_7 String ("0" (str.++ Start_3 Start) (str.replace Start_6 Start_1 Start_5) (str.from_int StartInt_4) (ite StartBool_2 Start_6 Start_7)))
   (Start_3 String ("1" y "" (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt_3)))
   (StartInt_2 Int (1 0 (str.indexof Start Start StartInt)))
   (StartInt_5 Int (1 (str.len Start_5) (str.to_int Start)))
   (Start_1 String ("b" (str.++ Start_2 Start_1) (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_4 StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_2)))
   (Start_2 String (y (str.at Start_7 StartInt_5) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt)))
   (StartBool_1 Bool (false true (str.<= Start_1 Start_3) (= Start_4 Start_4) (<= StartInt StartInt_2)))
   (StartInt_1 Int (1 (str.len Start_7)))
   (Start_6 String ("a" "1" (str.++ Start_6 Start_6) (str.substr Start_2 StartInt_6 StartInt_7)))
   (StartInt_8 Int (1 0 (str.len Start_8)))
   (StartBool_2 Bool (false true (str.< Start_6 Start_2) (str.suffixof Start_5 Start) (<= StartInt StartInt_7)))
   (Start_4 String ("0" "b" "a" y "" (str.at Start StartInt_5) (str.substr Start_5 StartInt_6 StartInt_7)))
   (StartInt_7 Int (1 0 (str.indexof Start Start_4 StartInt_1) (str.to_int Start_4)))
   (StartInt_4 Int (1 (str.len Start_2) (str.indexof Start_1 Start_5 StartInt_3)))
   (StartInt_6 Int (0 (str.len Start)))
   (Start_10 String (y (str.at Start_10 StartInt_8) (str.substr Start_11 StartInt_5 StartInt_1)))
   (Start_5 String ("a" "1" x "b" (str.at Start_4 StartInt_1) (str.substr Start StartInt StartInt_4) (str.replace Start_1 Start_6 Start_5) (str.from_int StartInt_6) (ite StartBool Start_5 Start_5)))
   (StartInt_3 Int (1 (str.indexof Start_7 Start_6 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "" y "1") "1")))

(check-synth)
