(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartInt_3 Int) (StartInt_4 Int) (Start_2 String) (StartInt_2 Int) (StartBool_3 Bool) (Start_5 String) (Start_1 String) (Start_3 String) (Start_8 String) (Start_4 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_6 String) (Start_9 String) (Start_7 String))
  ((Start String ("1" "0" "" y (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt) (ite StartBool Start Start_1)))
   (StartInt Int (0))
   (StartBool Bool (true (str.<= Start_6 Start_8) (= StartInt_4 StartInt_3) (<= StartInt_3 StartInt_2)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start Start_8 StartInt_2)))
   (StartInt_3 Int (0 1))
   (StartInt_4 Int (1 0 (str.len Start) (str.to_int Start_3)))
   (Start_2 String ("1" (str.++ Start_3 Start_3) (str.substr Start StartInt_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_2 Start)))
   (StartInt_2 Int (0))
   (StartBool_3 Bool (true false (not StartBool_2) (str.<= Start_5 Start_3) (str.prefixof Start_2 Start_2) (str.suffixof Start_5 Start_5) (= Start_1 Start_4) (= StartInt_2 StartInt_2)))
   (Start_5 String ("0" x y "b" "a" (str.++ Start_6 Start_3) (ite StartBool_3 Start_3 Start_6)))
   (Start_1 String (x y (str.++ Start_3 Start_9) (str.substr Start_3 StartInt_3 StartInt_4) (str.from_int StartInt) (ite StartBool_3 Start_2 Start_3)))
   (Start_3 String ("0" x (str.++ Start_3 Start_3) (str.at Start_3 StartInt) (ite StartBool_1 Start Start_1)))
   (Start_8 String (x (str.++ Start Start_7) (str.from_int StartInt_1)))
   (Start_4 String ("0" (str.++ Start_1 Start_2) (str.substr Start_3 StartInt_2 StartInt_1) (ite StartBool_1 Start_2 Start)))
   (StartBool_2 Bool (false true (and StartBool StartBool_3) (str.< Start Start_2) (str.suffixof Start_1 Start_1) (str.contains Start Start)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (str.< Start_2 Start_2) (str.<= Start_4 Start_4) (str.prefixof Start_4 Start)))
   (Start_6 String (x (str.replace Start Start_7 Start_8) (ite StartBool_2 Start_5 Start_6)))
   (Start_9 String (y (str.from_int StartInt_1)))
   (Start_7 String ("" (str.replace Start_7 Start_9 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ "b" "0") (str.indexof y "1" 0))))

(check-synth)
