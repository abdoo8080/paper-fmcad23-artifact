(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (Start_1 String) (StartInt_2 Int) (StartInt_1 Int) (StartInt_3 Int) (Start_3 String) (StartBool_1 Bool) (Start_2 String) (Start_4 String) (StartInt_4 Int) (StartInt_5 Int))
  ((Start String (x (ite StartBool Start Start_1)))
   (StartInt Int (0 (str.to_int Start_2)))
   (StartBool Bool (false true (str.<= Start_3 Start_3) (= Start_5 Start_5) (<= StartInt_5 StartInt_5)))
   (Start_5 String ("0" (str.substr Start_5 StartInt StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (Start_1 String ("a" (str.at Start StartInt_1) (str.substr Start StartInt StartInt_2) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start) (str.to_int Start)))
   (StartInt_1 Int (1 0 (str.len Start_2)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_3 StartInt_2)))
   (Start_3 String ("a" (str.at Start_2 StartInt_3) (str.from_int StartInt_4) (ite StartBool_1 Start Start_3)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start Start_1) (str.<= Start_2 Start_3) (str.suffixof Start Start_3) (str.contains Start Start_1) (= Start_4 Start_1)))
   (Start_2 String ("b" y (str.++ Start Start_1) (str.at Start StartInt_3) (str.substr Start StartInt_1 StartInt_3) (str.from_int StartInt_3) (ite StartBool Start_3 Start_3)))
   (Start_4 String ("" y "b" (str.++ Start_3 Start) (str.at Start_4 StartInt_3)))
   (StartInt_4 Int (1 0 (str.len Start)))
   (StartInt_5 Int (1 0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.++ y x) "0")))

(check-synth)
