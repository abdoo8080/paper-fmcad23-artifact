(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_11 String) (StartInt_5 Int) (StartInt_3 Int) (Start_9 String) (StartInt_1 Int) (Start_1 String) (Start_3 String) (StartInt_4 Int) (StartInt_2 Int) (Start_4 String) (Start_2 String) (Start_7 String) (Start_6 String) (StartBool_3 Bool) (Start_10 String) (Start_5 String) (Start_8 String) (StartBool_1 Bool) (StartBool_2 Bool))
  ((Start String ("1" (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt_1)))
   (StartInt Int (1 0 (str.indexof Start_2 Start_7 StartInt_2) (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool) (and StartBool_2 StartBool_2) (str.< Start_7 Start_8) (str.<= Start_3 Start_9) (str.prefixof Start_3 Start_4) (str.suffixof Start_7 Start_2) (str.contains Start_7 Start_4) (= Start_4 Start_10) (= StartInt_5 StartInt_1) (<= StartInt_1 StartInt_3)))
   (Start_12 String ("b" "0" (str.replace Start_11 Start_6 Start_8)))
   (Start_11 String ("1" (str.++ Start_2 Start_6) (str.at Start_3 StartInt) (str.substr Start_9 StartInt_4 StartInt) (str.replace Start_1 Start_12 Start_1)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_10 Start_8 StartInt_3) (str.to_int Start_4)))
   (StartInt_3 Int (1 0))
   (Start_9 String ("" (ite StartBool_3 Start_11 Start_12)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start StartInt_2) (str.to_int Start_3)))
   (Start_1 String ("1" "" (str.++ Start Start_5) (str.at Start_3 StartInt_4) (str.substr Start_5 StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (Start_3 String (x (str.++ Start_1 Start_3) (str.substr Start_1 StartInt_3 StartInt_4)))
   (StartInt_4 Int (1 0 (str.indexof Start_4 Start StartInt_1) (str.to_int Start)))
   (StartInt_2 Int (0 1 (str.len Start) (str.to_int Start_4)))
   (Start_4 String ("a" (str.++ Start Start_1)))
   (Start_2 String ("b" (str.++ Start_1 Start_2) (str.replace Start_3 Start_4 Start_4) (ite StartBool_1 Start Start_5)))
   (Start_7 String ("a" "0" (str.from_int StartInt) (ite StartBool_2 Start_6 Start_7)))
   (Start_6 String (y "" (str.++ Start_4 Start_1) (str.at Start_7 StartInt) (str.substr Start_4 StartInt StartInt_2) (str.from_int StartInt)))
   (StartBool_3 Bool (true (str.<= Start_11 Start_7) (str.prefixof Start_5 Start_10) (= Start_6 Start_10) (= StartInt_1 StartInt_1)))
   (Start_10 String ("a" (str.at Start_7 StartInt_2) (str.substr Start_3 StartInt_4 StartInt_1) (str.replace Start_3 Start_2 Start_1) (ite StartBool_3 Start_8 Start_8)))
   (Start_5 String ("a" (str.at Start_3 StartInt) (str.substr Start_5 StartInt_1 StartInt_4) (str.replace Start Start_1 Start_5)))
   (Start_8 String ("" (str.++ Start_8 Start_11) (str.from_int StartInt_5) (ite StartBool_2 Start_5 Start_10)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_1) (str.<= Start_5 Start_2) (str.prefixof Start_6 Start_5) (str.suffixof Start_6 Start_1) (str.contains Start_7 Start_7) (= Start_3 Start_3)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.<= Start_7 Start_2) (str.suffixof Start_6 Start_6) (= Start_5 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.++ x (str.at x 1)) y)))

(check-synth)
