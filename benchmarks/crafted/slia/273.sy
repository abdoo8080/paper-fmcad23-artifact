(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_3 String) (StartInt_8 Int) (Start_19 String) (Start_20 String) (Start_5 String) (StartInt_3 Int) (Start_6 String) (StartBool_1 Bool) (StartBool_2 Bool) (Start_7 String) (Start_4 String) (StartBool_4 Bool) (Start_2 String) (Start_10 String) (Start_15 String) (StartInt_2 Int) (Start_16 String) (Start_8 String) (Start_21 String) (Start_18 String) (StartBool_3 Bool) (Start_12 String) (Start_13 String) (StartInt_4 Int) (Start_14 String) (StartInt_7 Int) (StartInt_5 Int) (StartBool_5 Bool) (Start_11 String) (StartInt_6 Int) (StartBool_6 Bool) (StartInt_1 Int) (Start_9 String) (Start_17 String))
  ((Start String ("b" (str.substr Start StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (0 (str.indexof Start Start_1 StartInt_1)))
   (StartBool Bool (true false (not StartBool_3) (str.< Start_17 Start_9) (str.<= Start_16 Start_20) (= Start_1 Start_1)))
   (Start_1 String (x (str.at Start StartInt_5) (str.from_int StartInt_8) (ite StartBool_6 Start_4 Start_8)))
   (Start_3 String ("a" "0" "1" "b" y x (str.at Start_16 StartInt_7) (str.substr Start_18 StartInt_1 StartInt) (str.replace Start_6 Start_6 Start_21) (ite StartBool_5 Start_18 Start_12)))
   (StartInt_8 Int (0 (str.len Start_9)))
   (Start_19 String ("" "b" (str.substr Start_13 StartInt StartInt_7) (str.replace Start_4 Start_20 Start_16) (ite StartBool_6 Start_14 Start_6)))
   (Start_20 String ("1" "" x (str.at Start_11 StartInt_6) (str.from_int StartInt_2) (ite StartBool_2 Start_5 Start_13)))
   (Start_5 String ("b" x (str.from_int StartInt) (ite StartBool_2 Start Start_1)))
   (StartInt_3 Int (1 (str.len Start_5)))
   (Start_6 String (y (str.++ Start_2 Start_7) (str.replace Start_6 Start_8 Start_3)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_1) (str.suffixof Start_2 Start_3)))
   (StartBool_2 Bool (false (str.<= Start Start_1) (str.suffixof Start_3 Start) (= Start_4 Start_6) (<= StartInt_2 StartInt_4)))
   (Start_7 String (y "a" (str.++ Start_5 Start) (str.substr Start_9 StartInt_2 StartInt) (str.replace Start_10 Start_11 Start_7) (ite StartBool Start_6 Start_12)))
   (Start_4 String ("" "1" "0" (ite StartBool_1 Start Start_3)))
   (StartBool_4 Bool (true (not StartBool_5) (str.<= Start_7 Start_6) (str.suffixof Start_11 Start_1) (str.contains Start_2 Start_11)))
   (Start_2 String ("b" x (str.++ Start Start_3) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_1 Start_1 Start_4)))
   (Start_10 String ("a" "1" "b" (str.at Start_16 StartInt_4) (str.replace Start_2 Start_5 Start_1) (str.from_int StartInt_1) (ite StartBool_2 Start Start_10)))
   (Start_15 String ("a" (str.++ Start_5 Start_4) (str.substr Start_13 StartInt_5 StartInt_5) (str.replace Start_12 Start_14 Start_14)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start_2 Start_1 StartInt_3) (str.to_int Start_1)))
   (Start_16 String ("b" (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_8 Start_10 Start_5) (str.from_int StartInt_6)))
   (Start_8 String ("" "1" (str.++ Start_8 Start_2)))
   (Start_21 String ("1" "0" "b" x (str.at Start_5 StartInt_3) (ite StartBool_4 Start_2 Start_13)))
   (Start_18 String ("0" y (str.++ Start_11 Start_19) (str.substr Start_4 StartInt_8 StartInt_6) (str.from_int StartInt_4) (ite StartBool_2 Start_20 Start_12)))
   (StartBool_3 Bool (false (and StartBool_4 StartBool_5) (str.<= Start_12 Start_1) (str.contains Start_13 Start_12) (= StartInt_5 StartInt_1)))
   (Start_12 String ("1" "b" y (str.++ Start_5 Start_7) (str.at Start StartInt) (str.substr Start_10 StartInt_2 StartInt_3) (str.replace Start_5 Start_3 Start_7) (ite StartBool_3 Start_10 Start_7)))
   (Start_13 String (y (str.at Start_3 StartInt) (str.replace Start_3 Start_3 Start_4) (str.from_int StartInt_1) (ite StartBool_1 Start_10 Start_14)))
   (StartInt_4 Int (0 (str.len Start_3) (str.indexof Start_6 Start_2 StartInt_5) (str.to_int Start)))
   (Start_14 String ("" (str.++ Start_10 Start_3) (ite StartBool Start_14 Start_11)))
   (StartInt_7 Int (0 (str.len Start_12) (str.indexof Start_20 Start_12 StartInt_8) (str.to_int Start_20)))
   (StartInt_5 Int (0 (str.indexof Start_3 Start_5 StartInt_3)))
   (StartBool_5 Bool (false true (str.<= Start_14 Start_5) (str.suffixof Start_4 Start_8) (str.contains Start_8 Start_15) (= Start_15 Start_6) (= StartInt StartInt_2)))
   (Start_11 String (x (str.++ Start_4 Start_12) (str.at Start StartInt_3) (str.from_int StartInt_5)))
   (StartInt_6 Int (1 (str.to_int Start_14)))
   (StartBool_6 Bool (false (not StartBool_1) (and StartBool_1 StartBool_5) (str.suffixof Start_19 Start_16) (= StartInt_1 StartInt)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_2 StartInt)))
   (Start_9 String ("a" "" "0" (str.++ Start_8 Start_17) (str.at Start_17 StartInt_5) (str.from_int StartInt)))
   (Start_17 String (x (str.++ Start_18 Start_12) (str.at Start_4 StartInt_4) (str.substr Start_4 StartInt StartInt_6) (str.replace Start_18 Start_7 Start_7) (str.from_int StartInt_5) (ite StartBool_6 Start_17 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof x "b") "b" "0")))

(check-synth)
