(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_8 Bool) (Start_23 String) (StartBool_7 Bool) (StartInt_10 Int) (StartBool_6 Bool) (Start_1 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_7 Int) (StartBool_2 Bool) (Start_10 String) (Start_4 String) (Start_16 String) (Start_7 String) (Start_8 String) (StartInt_6 Int) (StartInt_2 Int) (StartInt_9 Int) (StartBool_3 Bool) (Start_2 String) (StartBool_4 Bool) (StartBool_1 Bool) (Start_9 String) (Start_3 String) (Start_12 String) (Start_11 String) (Start_6 String) (StartInt_5 Int) (Start_15 String) (Start_17 String) (Start_14 String) (StartInt_8 Int) (Start_18 String) (StartBool_5 Bool) (Start_19 String) (Start_13 String) (Start_22 String) (StartInt_4 Int) (Start_5 String) (Start_21 String) (Start_20 String))
  ((Start String (y (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_3 Start_2)))
   (StartInt Int (1 0 (str.len Start_16) (str.indexof Start_1 Start_3 StartInt_3) (str.to_int Start_19)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_7 StartBool_3) (str.contains Start_14 Start_10) (= StartInt_5 StartInt_10)))
   (StartBool_8 Bool (false (not StartBool) (str.<= Start_9 Start_2) (str.prefixof Start_21 Start_1) (str.contains Start_21 Start_8)))
   (Start_23 String (x "" (str.++ Start Start_3) (str.at Start_8 StartInt_3) (str.replace Start_11 Start_8 Start_16) (str.from_int StartInt_8)))
   (StartBool_7 Bool (false true (and StartBool_6 StartBool_8) (str.<= Start_21 Start_7) (str.prefixof Start_22 Start_7) (str.suffixof Start_7 Start_13)))
   (StartInt_10 Int (0 (str.len Start_11)))
   (StartBool_6 Bool (false true (str.< Start_10 Start_12) (str.<= Start_3 Start_20) (str.prefixof Start_8 Start_8) (str.suffixof Start_11 Start_4) (= Start_7 Start_12)))
   (Start_1 String ("0" x (str.at Start_19 StartInt_3) (str.from_int StartInt_8) (ite StartBool_6 Start_8 Start_20)))
   (StartInt_1 Int (1))
   (StartInt_3 Int (0 (str.indexof Start_9 Start_19 StartInt_9)))
   (StartInt_7 Int (1 (str.len Start_9) (str.to_int Start_9)))
   (StartBool_2 Bool (true (not StartBool_3) (str.<= Start_2 Start_6) (str.prefixof Start_2 Start_9) (str.contains Start_6 Start_10) (= Start_9 Start_2) (= StartInt_3 StartInt) (<= StartInt_5 StartInt)))
   (Start_10 String ("b" "a" (str.at Start_9 StartInt_5) (str.replace Start_3 Start_7 Start_9)))
   (Start_4 String ("" y x (str.substr Start_7 StartInt_2 StartInt_4) (str.replace Start_20 Start_15 Start_7) (ite StartBool_2 Start_20 Start_6)))
   (Start_16 String ("b" (str.at Start_17 StartInt_7) (ite StartBool_2 Start_1 Start_17)))
   (Start_7 String ("0" x "" (str.substr Start_6 StartInt_2 StartInt_3)))
   (Start_8 String ("b" "a" x (str.++ Start_6 Start_5) (str.at Start StartInt_3) (str.from_int StartInt_2)))
   (StartInt_6 Int (0 (str.len Start_11) (str.indexof Start_11 Start_6 StartInt_7) (str.to_int Start_5)))
   (StartInt_2 Int (0 1 (str.to_int Start_5)))
   (StartInt_9 Int (1 (str.indexof Start_7 Start_8 StartInt_1)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_2) (str.< Start_6 Start_3) (str.<= Start_5 Start) (str.prefixof Start_12 Start_5) (str.contains Start_3 Start_3) (= StartInt_2 StartInt_2)))
   (Start_2 String ("b" "a" (str.at Start_4 StartInt_1) (str.substr Start_10 StartInt StartInt_9) (str.replace Start_11 Start Start_7)))
   (StartBool_4 Bool (true false (str.< Start_13 Start_12) (str.prefixof Start_16 Start_17) (str.suffixof Start_9 Start_16) (str.contains Start_1 Start_2) (= Start_11 Start_12) (= StartInt StartInt_2) (<= StartInt_3 StartInt_7)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (str.<= Start Start_4) (str.prefixof Start_6 Start_4) (str.contains Start_5 Start) (= Start_7 Start_4) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_4)))
   (Start_9 String ("1" (str.++ Start_7 Start_10) (str.at Start_3 StartInt_2) (str.substr Start_11 StartInt_6 StartInt_3)))
   (Start_3 String ("1" (str.replace Start_4 Start_5 Start_6) (str.from_int StartInt_3) (ite StartBool_1 Start_5 Start_1)))
   (Start_12 String (y (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start_10 Start_12 Start_12) (str.from_int StartInt_1) (ite StartBool_2 Start_9 Start_9)))
   (Start_11 String ("" x "a" y (str.substr Start StartInt_2 StartInt) (str.replace Start_5 Start_5 Start_6)))
   (Start_6 String ("b" "" (str.++ Start_13 Start_14) (str.replace Start_11 Start_15 Start_12)))
   (StartInt_5 Int (1 (str.len Start) (str.indexof Start_6 Start_2 StartInt_2)))
   (Start_15 String (y (str.at Start_1 StartInt) (str.from_int StartInt_5) (ite StartBool_4 Start_11 Start)))
   (Start_17 String (x "b" (str.++ Start_17 Start) (str.from_int StartInt_6)))
   (Start_14 String ("b" (str.++ Start_14 Start_11) (str.substr Start_11 StartInt StartInt_2) (str.replace Start_3 Start_18 Start_10) (ite StartBool_4 Start_18 Start_16)))
   (StartInt_8 Int (1 0 (str.indexof Start Start_9 StartInt_2)))
   (Start_18 String ("a" "" (str.++ Start_7 Start_13) (str.substr Start_1 StartInt_8 StartInt_4) (str.from_int StartInt_8) (ite StartBool_5 Start_8 Start_14)))
   (StartBool_5 Bool (false (not StartBool_3) (str.suffixof Start Start_12) (str.contains Start_19 Start_11) (= Start_6 Start_4) (<= StartInt_4 StartInt_4)))
   (Start_19 String ("b" (str.at Start_15 StartInt_8) (str.substr Start_5 StartInt_6 StartInt_3) (ite StartBool_4 Start_12 Start_1)))
   (Start_13 String ("" "1" "b" x (str.++ Start_11 Start_13) (str.substr Start_7 StartInt StartInt_8)))
   (Start_22 String ("a" "1" (str.++ Start_16 Start_20) (str.substr Start_5 StartInt_2 StartInt_5) (ite StartBool_6 Start_7 Start_13)))
   (StartInt_4 Int (0 (str.len Start_8) (str.to_int Start_2)))
   (Start_5 String ("b" (str.++ Start_9 Start_2) (str.at Start_16 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_4) (str.replace Start_10 Start_13 Start_6) (str.from_int StartInt_3)))
   (Start_21 String (y (str.at Start_21 StartInt_1) (str.substr Start_10 StartInt_1 StartInt) (str.replace Start_4 Start_17 Start_23) (str.from_int StartInt_2)))
   (Start_20 String ("" (str.substr Start_3 StartInt_5 StartInt) (str.replace Start_18 Start_5 Start_4) (str.from_int StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "0" y) (str.from_int (str.len (str.replace "b" y "1"))))))

(check-synth)
