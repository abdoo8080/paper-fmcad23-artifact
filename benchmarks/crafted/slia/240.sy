(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_15 String) (StartInt_7 Int) (Start_1 String) (StartInt_6 Int) (Start_11 String) (Start_3 String) (Start_8 String) (Start_2 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_5 String) (Start_13 String) (Start_4 String) (Start_7 String) (StartInt_2 Int) (Start_12 String) (StartInt_3 Int) (Start_6 String) (Start_10 String) (StartInt_4 Int) (StartInt_1 Int) (StartBool_2 Bool) (Start_9 String))
  ((Start String (y "b" (str.++ Start_1 Start_2) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_1 Start_3 Start_4) (ite StartBool_1 Start_4 Start_4)))
   (StartInt Int (0 1 (str.indexof Start_6 Start_10 StartInt_1) (str.to_int Start_5)))
   (StartBool Bool (true (str.<= Start_9 Start_2) (str.suffixof Start_8 Start_8) (= Start_12 Start_13)))
   (Start_14 String ("1" (str.++ Start_9 Start_5) (str.substr Start_8 StartInt StartInt) (str.replace Start_3 Start_8 Start_9) (str.from_int StartInt_7)))
   (Start_15 String (x (str.substr Start_2 StartInt_6 StartInt_4)))
   (StartInt_7 Int (0 (str.len Start_10) (str.to_int Start_13)))
   (Start_1 String ("1" (str.++ Start_9 Start_10) (str.at Start StartInt_4) (str.from_int StartInt_5)))
   (StartInt_6 Int (0 (str.len Start_6)))
   (Start_11 String (x (str.++ Start_8 Start_9) (str.replace Start_7 Start_5 Start_10)))
   (Start_3 String (y "0" "1" (str.++ Start_3 Start_6) (str.at Start_3 StartInt_5) (str.from_int StartInt_6) (ite StartBool Start_2 Start_1)))
   (Start_8 String ("b" "0" x (str.++ Start_7 Start_7) (str.substr Start_1 StartInt_3 StartInt_5) (ite StartBool_1 Start_11 Start_1)))
   (Start_2 String ("" (str.at Start_7 StartInt_5) (str.substr Start_10 StartInt_4 StartInt_5) (str.replace Start Start_4 Start_9) (ite StartBool Start_4 Start_2)))
   (StartInt_5 Int (0 1 (str.len Start_9) (str.to_int Start_5)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_2 StartBool_1) (str.prefixof Start_2 Start) (str.contains Start_2 Start_3) (= Start_1 Start_5) (<= StartInt StartInt_1)))
   (Start_5 String (y "a" "1" "" "0" (str.substr Start_5 StartInt_2 StartInt_3) (ite StartBool_1 Start_1 Start_2)))
   (Start_13 String (y "1" (str.++ Start_4 Start_14) (str.at Start_15 StartInt_7) (str.substr Start_4 StartInt_4 StartInt_2) (str.replace Start_15 Start Start_1) (ite StartBool Start_7 Start_1)))
   (Start_4 String (y "0" "1" (str.++ Start_4 Start_7) (str.from_int StartInt_4)))
   (Start_7 String (y "b" (str.++ Start_2 Start) (str.replace Start_5 Start_7 Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_2 Start_1 StartInt_4) (str.to_int Start_6)))
   (Start_12 String ("0" "a" "" (str.++ Start_12 Start_9) (str.substr Start_12 StartInt_4 StartInt_6)))
   (StartInt_3 Int (0 1 (str.len Start_4) (str.to_int Start_1)))
   (Start_6 String (x))
   (Start_10 String ("b" (str.substr Start_9 StartInt_1 StartInt_3) (str.replace Start_2 Start_3 Start) (ite StartBool Start_4 Start_3)))
   (StartInt_4 Int (0 (str.len Start_6) (str.indexof Start_1 Start StartInt_4) (str.to_int Start_4)))
   (StartInt_1 Int (0 (str.indexof Start Start_8 StartInt_4) (str.to_int Start_9)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (str.< Start_1 Start_5) (str.contains Start_1 Start_1) (= StartInt_4 StartInt)))
   (Start_9 String (x (str.++ Start_1 Start_9) (str.at Start_8 StartInt_4) (str.substr Start_1 StartInt StartInt) (str.replace Start_9 Start Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "1" x (str.++ x "1")) 0)))

(check-synth)
