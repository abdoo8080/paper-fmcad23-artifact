(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_15 String) (Start_4 String) (Start_5 String) (Start_9 String) (Start_6 String) (StartInt_2 Int) (StartInt_5 Int) (Start_7 String) (StartInt_3 Int) (Start_2 String) (Start_12 String) (StartBool_3 Bool) (StartBool_2 Bool) (StartInt_6 Int) (Start_8 String) (StartInt_8 Int) (StartInt_4 Int) (StartInt_7 Int) (Start_3 String) (StartInt_9 Int) (StartBool_1 Bool) (Start_14 String) (Start_13 String) (Start_11 String) (Start_10 String) (StartInt_1 Int) (Start_1 String) (StartBool_4 Bool))
  ((Start String ("b" "" "a" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_1) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 0 (str.to_int Start_7)))
   (StartBool Bool (true false (not StartBool_4) (str.< Start_1 Start_11) (str.<= Start_6 Start_14) (str.suffixof Start_14 Start) (str.contains Start_5 Start_3) (<= StartInt_5 StartInt_1)))
   (StartBool_5 Bool (false (not StartBool_2) (str.< Start_7 Start_3) (str.suffixof Start_3 Start_13) (str.contains Start Start_2) (= Start_5 Start_12)))
   (Start_15 String ("b" (str.at Start_8 StartInt_9) (str.replace Start_13 Start_6 Start_10)))
   (Start_4 String ("a" (str.++ Start_1 Start_6) (str.at Start_2 StartInt_3) (str.from_int StartInt_5) (ite StartBool_1 Start_6 Start_7)))
   (Start_5 String ("1" "0" (str.from_int StartInt_5)))
   (Start_9 String ("0" (str.++ Start_10 Start) (str.at Start_5 StartInt_5) (str.substr Start_4 StartInt_6 StartInt) (str.replace Start_2 Start_5 Start_9)))
   (Start_6 String ("a" "1" "b" (str.substr Start_8 StartInt_1 StartInt_2) (ite StartBool_1 Start_9 Start_1)))
   (StartInt_2 Int (1 0 (str.to_int Start)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_5 StartInt_2) (str.to_int Start)))
   (Start_7 String ("" y x "1" (str.at Start_4 StartInt_1) (str.from_int StartInt)))
   (StartInt_3 Int (1 (str.indexof Start_3 Start_3 StartInt) (str.to_int Start_2)))
   (Start_2 String (y "" (str.++ Start_3 Start_3) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_3 Start)))
   (Start_12 String (x "" (str.++ Start_4 Start_4) (str.at Start_7 StartInt_5) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt_1)))
   (StartBool_3 Bool (false true (and StartBool StartBool_2) (str.< Start_8 Start_2) (str.<= Start Start_9) (str.prefixof Start_13 Start_6) (str.suffixof Start_14 Start_9) (str.contains Start_3 Start_7) (<= StartInt_6 StartInt_8)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_3 StartBool_1) (str.< Start_9 Start) (str.<= Start_1 Start) (str.suffixof Start_3 Start_12) (= StartInt_4 StartInt_7) (<= StartInt_5 StartInt_8)))
   (StartInt_6 Int (0 (str.to_int Start)))
   (Start_8 String ("a" (str.++ Start_5 Start) (str.at Start_7 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_2 Start_11 Start_10) (str.from_int StartInt) (ite StartBool_2 Start_12 Start_5)))
   (StartInt_8 Int (1 (str.len Start_3)))
   (StartInt_4 Int (1 (str.len Start_1)))
   (StartInt_7 Int (0 (str.indexof Start_3 Start_8 StartInt_2)))
   (Start_3 String (y (str.++ Start Start_4) (str.at Start_5 StartInt_4) (str.replace Start_1 Start_4 Start)))
   (StartInt_9 Int (1 (str.indexof Start_4 Start_3 StartInt_9)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (= StartInt_4 StartInt_3)))
   (Start_14 String ("0" "a" (str.++ Start Start_5) (str.from_int StartInt_6)))
   (Start_13 String ("a" (str.++ Start_4 Start_10) (str.at Start StartInt_2) (ite StartBool_1 Start_4 Start_8)))
   (Start_11 String ("1" "" "0" y (str.++ Start_11 Start_6) (str.at Start_5 StartInt_5) (str.replace Start_12 Start_11 Start_13) (ite StartBool_1 Start_11 Start_11)))
   (Start_10 String ("b" "" (str.++ Start_7 Start_7)))
   (StartInt_1 Int (1 (str.len Start_13) (str.to_int Start_10)))
   (Start_1 String ("b" (str.substr Start_7 StartInt_3 StartInt_4) (str.from_int StartInt) (ite StartBool_3 Start_7 Start)))
   (StartBool_4 Bool (false true (not StartBool_5) (str.<= Start_10 Start_4) (str.prefixof Start_14 Start_6) (str.contains Start_11 Start_11) (= Start_15 Start_12) (<= StartInt_2 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "1" x "0") 0)))

(check-synth)
