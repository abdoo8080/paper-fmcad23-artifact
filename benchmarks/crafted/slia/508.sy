(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_24 String) (StartBool_8 Bool) (Start_22 String) (Start_1 String) (Start_3 String) (StartBool_7 Bool) (StartBool_2 Bool) (StartInt_4 Int) (Start_2 String) (Start_10 String) (StartInt_6 Int) (StartInt_5 Int) (Start_7 String) (StartInt_2 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_6 String) (Start_8 String) (StartInt_8 Int) (Start_13 String) (Start_20 String) (Start_9 String) (Start_4 String) (Start_18 String) (StartInt_3 Int) (Start_21 String) (Start_12 String) (StartInt_1 Int) (Start_5 String) (Start_14 String) (StartBool_6 Bool) (Start_23 String) (Start_11 String) (Start_15 String) (StartBool_5 Bool) (Start_16 String) (StartInt_7 Int) (StartBool_3 Bool) (Start_17 String) (Start_19 String))
  ((Start String ("" "b" (str.++ Start Start) (ite StartBool Start Start)))
   (StartInt Int (1 (str.indexof Start Start_1 StartInt) (str.to_int Start_2)))
   (StartBool Bool (true false (str.prefixof Start_11 Start_5) (str.contains Start_15 Start_22) (= Start_13 Start_3)))
   (Start_24 String (x (str.at Start StartInt_8) (str.substr Start StartInt_4 StartInt_8) (str.replace Start_3 Start_22 Start_8)))
   (StartBool_8 Bool (false true (not StartBool_4) (str.< Start_2 Start_10) (str.<= Start_10 Start_16) (str.suffixof Start_14 Start_17) (str.contains Start_6 Start_11)))
   (Start_22 String ("" (str.++ Start Start_8) (str.at Start_12 StartInt_8) (str.substr Start_23 StartInt_6 StartInt_7) (ite StartBool_8 Start_10 Start_4)))
   (Start_1 String ("" "1" (str.++ Start_5 Start_21) (ite StartBool Start_12 Start_11)))
   (Start_3 String ("a" "" (str.++ Start_14 Start_15) (str.replace Start_9 Start_1 Start_21) (ite StartBool_6 Start_3 Start_6)))
   (StartBool_7 Bool (false true (str.< Start_21 Start_14) (str.prefixof Start_17 Start) (str.suffixof Start_1 Start_12) (<= StartInt_7 StartInt_5)))
   (StartBool_2 Bool (false true (not StartBool_5) (str.<= Start_16 Start_19) (str.prefixof Start_17 Start_6) (str.suffixof Start_20 Start_15) (str.contains Start_20 Start_21)))
   (StartInt_4 Int (1 (str.indexof Start_4 Start_1 StartInt_4) (str.to_int Start_2)))
   (Start_2 String (x "a" "0" (str.at Start StartInt) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (Start_10 String ("0" "b" "" (str.++ Start_7 Start_7) (str.at Start_7 StartInt) (str.substr Start_8 StartInt_3 StartInt_1) (str.replace Start_6 Start_5 Start_7)))
   (StartInt_6 Int (1 (str.len Start_8) (str.indexof Start_7 Start_13 StartInt_4) (str.to_int Start_11)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_11 Start_2 StartInt_5) (str.to_int Start_4)))
   (Start_7 String ("1" "" "a" (str.replace Start_4 Start_5 Start_8)))
   (StartInt_2 Int (1 0 (str.len Start) (str.indexof Start_6 Start_1 StartInt_1) (str.to_int Start_2)))
   (StartBool_4 Bool (true (and StartBool_1 StartBool_3) (str.< Start_2 Start_4) (str.<= Start_5 Start_1) (str.suffixof Start Start_5) (str.contains Start_6 Start_7) (= StartInt StartInt_2)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_4) (str.< Start_1 Start) (str.<= Start Start_3) (str.suffixof Start Start_3)))
   (Start_6 String ("" (str.++ Start_7 Start_3) (str.substr Start_5 StartInt_4 StartInt_3) (str.replace Start_6 Start_8 Start_8)))
   (Start_8 String ("b" "" (str.++ Start_1 Start_9) (str.substr Start_9 StartInt_1 StartInt_3) (str.replace Start_10 Start_2 Start_6) (str.from_int StartInt)))
   (StartInt_8 Int (1 (str.indexof Start_14 Start_8 StartInt_5) (str.to_int Start_16)))
   (Start_13 String (y (str.++ Start_9 Start_5) (str.at Start_4 StartInt_6) (str.replace Start_14 Start_2 Start_10) (str.from_int StartInt_2)))
   (Start_20 String ("b" (str.substr Start_16 StartInt StartInt_3) (str.replace Start_9 Start_7 Start_14) (ite StartBool_5 Start_12 Start_11)))
   (Start_9 String (x (str.at Start_3 StartInt)))
   (Start_4 String (x "1" "a" y (str.++ Start_1 Start_8) (str.at Start_15 StartInt_4) (str.substr Start_3 StartInt_2 StartInt) (str.from_int StartInt_6) (ite StartBool_4 Start_3 Start_3)))
   (Start_18 String (x (str.++ Start_9 Start_1) (str.at Start_4 StartInt_7)))
   (StartInt_3 Int (0))
   (Start_21 String ("b" "" x y (str.substr Start_3 StartInt_8 StartInt_8) (str.from_int StartInt_1) (ite StartBool_7 Start_17 Start_7)))
   (Start_12 String ("a" y "1" (str.at Start_13 StartInt_4) (str.substr Start_2 StartInt_3 StartInt) (ite StartBool_1 Start_2 Start_9)))
   (StartInt_1 Int (0 (str.len Start_15) (str.indexof Start_10 Start_1 StartInt_5)))
   (Start_5 String (y (str.++ Start_4 Start_6) (str.at Start_9 StartInt_2) (str.substr Start_6 StartInt_5 StartInt_5) (str.replace Start_11 Start_12 Start_4) (str.from_int StartInt)))
   (Start_14 String (x (str.++ Start_7 Start) (str.substr Start_7 StartInt_3 StartInt_2) (ite StartBool_4 Start_12 Start)))
   (StartBool_6 Bool (true (not StartBool_5) (str.<= Start_16 Start_15) (str.suffixof Start_4 Start_9) (str.contains Start_5 Start_11) (= Start Start_5) (= StartInt_4 StartInt_1)))
   (Start_23 String ("a" (str.at Start_12 StartInt_1) (str.substr Start_23 StartInt_1 StartInt_4) (str.replace Start_19 Start Start_24) (str.from_int StartInt_4)))
   (Start_11 String ("a" (str.substr Start_3 StartInt StartInt_5) (str.replace Start_4 Start_1 Start_3) (str.from_int StartInt)))
   (Start_15 String (x (str.++ Start_2 Start_3) (str.replace Start_14 Start_8 Start_16) (str.from_int StartInt_2) (ite StartBool_5 Start Start_8)))
   (StartBool_5 Bool (true false (not StartBool_6) (and StartBool StartBool_3) (str.<= Start_3 Start_12) (str.prefixof Start_16 Start_8) (str.contains Start_16 Start_10) (<= StartInt_6 StartInt_6)))
   (Start_16 String (x "b" (str.at Start_6 StartInt_1) (str.replace Start_6 Start_13 Start_8)))
   (StartInt_7 Int (1 0 (str.len Start_10) (str.indexof Start_8 Start_8 StartInt_7)))
   (StartBool_3 Bool (false (not StartBool_3) (str.< Start_17 Start_6) (str.<= Start_6 Start_3) (str.prefixof Start_10 Start_11) (str.suffixof Start_2 Start_8) (str.contains Start_13 Start_6) (= Start_5 Start_16) (= StartInt_6 StartInt_6) (<= StartInt_3 StartInt)))
   (Start_17 String ("b" (str.++ Start_4 Start_10) (str.replace Start_18 Start_19 Start_6) (str.from_int StartInt)))
   (Start_19 String ("b" (str.++ Start_10 Start_14) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y "b") "" y)))

(check-synth)
