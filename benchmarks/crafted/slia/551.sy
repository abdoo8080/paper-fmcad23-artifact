(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (StartBool_4 Bool) (Start_9 String) (Start_8 String) (StartInt_5 Int) (Start_7 String) (StartInt_4 Int) (Start_1 String) (Start_3 String) (StartBool_3 Bool) (StartBool_1 Bool) (StartBool_2 Bool) (Start_2 String) (StartInt_3 Int) (StartInt_1 Int) (StartInt_2 Int) (Start_5 String) (Start_4 String) (Start_6 String))
  ((Start String ("1" (str.at Start StartInt_1) (str.replace Start Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (0))
   (StartBool Bool (false true (not StartBool_2) (str.<= Start_4 Start_1) (str.prefixof Start_2 Start) (str.suffixof Start_5 Start_4) (str.contains Start Start_4)))
   (Start_10 String (x (str.at Start_1 StartInt) (str.replace Start_7 Start Start_4) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (StartBool_4 Bool (true false (not StartBool_2) (str.< Start_7 Start_8) (str.prefixof Start_10 Start_1) (= Start_5 Start_7)))
   (Start_9 String (x (str.++ Start_5 Start_6) (str.replace Start_4 Start_3 Start_6)))
   (Start_8 String ("0" "" "a" (str.++ Start_3 Start_9) (str.at Start_6 StartInt_5)))
   (StartInt_5 Int (0))
   (Start_7 String ("0" (str.at Start_7 StartInt_3) (str.replace Start_6 Start_3 Start_7) (str.from_int StartInt_2) (ite StartBool_3 Start Start_1)))
   (StartInt_4 Int (1 (str.len Start_4) (str.indexof Start_4 Start_3 StartInt_4) (str.to_int Start)))
   (Start_1 String (y (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start Start Start_2) (ite StartBool_1 Start_2 Start_3)))
   (Start_3 String (x (str.++ Start Start_3) (str.replace Start_3 Start_1 Start_2) (str.from_int StartInt_1)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_2 StartBool_3) (str.<= Start_3 Start_2) (str.prefixof Start_3 Start_2) (= Start_3 Start_3) (= StartInt_2 StartInt_4)))
   (StartBool_1 Bool (false (not StartBool_1) (str.contains Start_2 Start_1) (= Start_3 Start_3)))
   (StartBool_2 Bool (false true (not StartBool_4) (and StartBool_2 StartBool) (str.prefixof Start_1 Start) (str.contains Start_8 Start_5) (= StartInt StartInt_3) (<= StartInt_5 StartInt_3)))
   (Start_2 String (x "0"))
   (StartInt_3 Int (0 (str.len Start_6) (str.to_int Start_2)))
   (StartInt_1 Int (0 (str.len Start_2) (str.to_int Start_1)))
   (StartInt_2 Int (1 (str.len Start) (str.to_int Start_2)))
   (Start_5 String (x "1" "b" "0" "a" (str.at Start_4 StartInt_3) (str.substr Start_2 StartInt_3 StartInt_4) (str.from_int StartInt_2)))
   (Start_4 String (x (str.++ Start_5 Start_1) (ite StartBool_1 Start_5 Start_7)))
   (Start_6 String ("1" "b"))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "" (str.at x 1) (str.replace y "" "b")) 0 1)))

(check-synth)
