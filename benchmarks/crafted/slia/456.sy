(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_17 String) (Start_16 String) (Start_15 String) (StartBool_2 Bool) (StartInt_1 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_11 String) (StartBool_5 Bool) (Start_6 String) (Start_3 String) (StartInt_7 Int) (Start_4 String) (Start_1 String) (StartInt_3 Int) (StartInt_2 Int) (Start_10 String) (StartInt_4 Int) (StartInt_5 Int) (Start_14 String) (Start_8 String) (StartBool_3 Bool) (Start_9 String) (StartInt_10 Int) (StartInt_6 Int) (Start_13 String) (Start_7 String) (Start_5 String) (StartInt_8 Int) (Start_12 String) (StartInt_9 Int) (Start_2 String))
  ((Start String ("0" (str.++ Start Start) (str.at Start StartInt) (str.replace Start Start Start) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.len Start_12)))
   (StartBool Bool (true false (and StartBool_3 StartBool_5) (str.< Start_11 Start_14) (str.<= Start Start_1) (str.suffixof Start_7 Start_10) (str.contains Start_10 Start_1) (<= StartInt_4 StartInt_2)))
   (Start_18 String ("b" (str.++ Start_15 Start_8) (str.at Start_15 StartInt_9) (str.substr Start_18 StartInt_5 StartInt_9) (str.replace Start_3 Start Start_18) (str.from_int StartInt_1)))
   (Start_17 String ("1" "a" (str.at Start_18 StartInt_1) (str.substr Start_8 StartInt StartInt_5) (str.replace Start_13 Start_8 Start) (str.from_int StartInt_10)))
   (Start_16 String ("a" (str.at Start_14 StartInt_5) (str.from_int StartInt_6) (ite StartBool_2 Start Start_17)))
   (Start_15 String ("1" "b" "a" (str.++ Start_13 Start_16) (str.at Start_7 StartInt_2) (str.from_int StartInt)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.prefixof Start_8 Start_5) (str.contains Start_2 Start_6) (= Start_1 Start_4) (= StartInt_5 StartInt_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_2 StartInt)))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool_4) (str.contains Start_1 Start) (= Start_11 Start) (= StartInt_1 StartInt_2) (<= StartInt_2 StartInt)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_2) (str.<= Start_2 Start)))
   (Start_11 String ("" (str.++ Start_2 Start_11) (str.at Start_10 StartInt_5) (str.replace Start_10 Start Start_9) (ite StartBool_3 Start_1 Start_7)))
   (StartBool_5 Bool (false true (not StartBool_2) (and StartBool StartBool) (str.< Start_4 Start_13) (str.<= Start_3 Start_8) (str.prefixof Start_3 Start_16) (str.suffixof Start_7 Start_10) (str.contains Start_15 Start_15) (= Start_5 Start_7) (= StartInt_2 StartInt_8)))
   (Start_6 String ("0" (str.++ Start_3 Start_1) (str.substr Start_6 StartInt_1 StartInt_3) (str.replace Start_6 Start_2 Start_3)))
   (Start_3 String ("" y "1" (str.++ Start_1 Start_7) (str.at Start_1 StartInt) (str.replace Start_6 Start Start_2) (ite StartBool_1 Start Start_5)))
   (StartInt_7 Int (0 (str.indexof Start_4 Start_12 StartInt_5) (str.to_int Start_11)))
   (Start_4 String ("1" "" (str.++ Start_5 Start) (str.replace Start Start_1 Start_3) (str.from_int StartInt) (ite StartBool Start_5 Start)))
   (Start_1 String ("" y (str.++ Start_3 Start_2) (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_3 Start_1 Start_4)))
   (StartInt_3 Int (0 (str.len Start_2) (str.to_int Start_3)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.to_int Start_2)))
   (Start_10 String (y (ite StartBool_4 Start_10 Start_4)))
   (StartInt_4 Int (0 (str.indexof Start_5 Start_6 StartInt_2)))
   (StartInt_5 Int (1))
   (Start_14 String (x "0" (str.++ Start_1 Start) (str.replace Start_1 Start_11 Start_8) (str.from_int StartInt_9)))
   (Start_8 String ("b" "" "a" y "1" x (str.++ Start_6 Start) (str.at Start_1 StartInt_1) (str.substr Start_5 StartInt_5 StartInt_3) (str.replace Start_6 Start_1 Start_5) (ite StartBool_3 Start_9 Start_5)))
   (StartBool_3 Bool (true false (str.<= Start_11 Start_3) (str.prefixof Start_1 Start_9) (= Start_10 Start_3) (= StartInt_3 StartInt) (<= StartInt_1 StartInt_6)))
   (Start_9 String ("a" "" (str.++ Start_7 Start_9) (str.at Start_5 StartInt_6) (str.replace Start_10 Start_7 Start_5) (ite StartBool_1 Start_9 Start_10)))
   (StartInt_10 Int (0 1 (str.len Start_1) (str.to_int Start_5)))
   (StartInt_6 Int (0 1))
   (Start_13 String (y "b" "a" (str.++ Start_10 Start_5) (str.at Start_5 StartInt_6) (str.replace Start_11 Start_10 Start_3) (str.from_int StartInt_1) (ite StartBool_4 Start_4 Start_3)))
   (Start_7 String ("b" (str.++ Start_11 Start_10) (str.at Start_7 StartInt_7) (str.substr Start_8 StartInt_8 StartInt_5) (str.from_int StartInt_1)))
   (Start_5 String (y (str.++ Start_6 Start_6) (str.substr Start_2 StartInt_3 StartInt_4)))
   (StartInt_8 Int (1 0 (str.len Start_9)))
   (Start_12 String (x "a" (str.at Start_1 StartInt_1) (str.substr Start_13 StartInt_1 StartInt_7) (str.replace Start_8 Start_8 Start_6) (str.from_int StartInt)))
   (StartInt_9 Int (0 1 (str.indexof Start_15 Start_5 StartInt_5) (str.to_int Start_13)))
   (Start_2 String ("b" (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "b" "1") 1)))

(check-synth)
