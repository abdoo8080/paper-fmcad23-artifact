(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (Start_1 String) (StartInt_2 Int) (StartInt_1 Int) (StartInt_5 Int) (StartInt_3 Int) (Start_3 String) (Start_2 String) (Start_5 String) (StartInt_7 Int) (StartInt_6 Int) (StartInt_4 Int) (Start_6 String))
  ((Start String ("0" "a" x "" "b" (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start Start_1)))
   (StartInt Int (1))
   (StartBool Bool (false (and StartBool StartBool) (str.<= Start_3 Start_6) (str.contains Start_2 Start_2) (<= StartInt_4 StartInt_6)))
   (Start_4 String ("" "0" "1" (ite StartBool Start_5 Start_4)))
   (Start_1 String ("a" "0" "" (str.at Start StartInt_2) (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt_3) (ite StartBool Start_1 Start_1)))
   (StartInt_2 Int (0 (str.len Start_1)))
   (StartInt_1 Int (0 1 (str.indexof Start Start StartInt_2)))
   (StartInt_5 Int (0 (str.len Start) (str.indexof Start_1 Start_2 StartInt_4)))
   (StartInt_3 Int (0 (str.len Start_3) (str.indexof Start_2 Start_2 StartInt_2)))
   (Start_3 String ("1" y "b" "0" "a" (str.++ Start_2 Start) (str.at Start_2 StartInt_4)))
   (Start_2 String ("b" (str.++ Start_4 Start_2) (str.from_int StartInt_6) (ite StartBool Start_3 Start_5)))
   (Start_5 String (y (str.substr Start_4 StartInt_7 StartInt_4) (ite StartBool Start_3 Start_1)))
   (StartInt_7 Int (1 (str.len Start_3) (str.indexof Start_5 Start StartInt_4)))
   (StartInt_6 Int (1 0 (str.len Start) (str.indexof Start_4 Start_2 StartInt_4) (str.to_int Start_6)))
   (StartInt_4 Int (1 0 (str.indexof Start Start_2 StartInt_5)))
   (Start_6 String ("0" (str.++ Start_2 Start_4) (str.at Start_1 StartInt_4) (str.substr Start_4 StartInt_4 StartInt_3) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (<= (str.len y) 1) "1" "")))

(check-synth)
