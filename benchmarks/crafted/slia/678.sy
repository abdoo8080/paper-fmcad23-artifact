(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_2 String) (StartInt_2 Int) (Start_8 String) (Start_3 String) (Start_1 String) (Start_9 String) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_6 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_11 String) (Start_5 String) (Start_4 String) (Start_7 String) (StartInt_1 Int) (Start_6 String) (StartInt_3 Int) (StartInt_7 Int) (StartInt_4 Int))
  ((Start String ("b" x "a" (str.substr Start_1 StartInt StartInt)))
   (StartInt Int (0 1 (str.indexof Start_8 Start_6 StartInt_4) (str.to_int Start_9)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_1 StartBool) (str.< Start_9 Start_8) (str.<= Start_10 Start_9) (= StartInt_4 StartInt_1) (<= StartInt_5 StartInt_2)))
   (Start_10 String (y "a" (str.++ Start_2 Start_7) (str.substr Start_7 StartInt_2 StartInt_7) (ite StartBool Start_11 Start)))
   (Start_2 String ("1" x (str.at Start_5 StartInt_2) (str.substr Start_7 StartInt_2 StartInt_3) (str.replace Start_1 Start Start_1) (str.from_int StartInt) (ite StartBool_2 Start_8 Start_4)))
   (StartInt_2 Int (0))
   (Start_8 String ("1" (str.++ Start Start_9) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_6) (str.replace Start_3 Start_9 Start_2) (str.from_int StartInt_3)))
   (Start_3 String (x (str.at Start_3 StartInt_1) (str.substr Start_4 StartInt_3 StartInt_4) (str.replace Start_2 Start_5 Start_6) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (Start_1 String ("a" (str.replace Start_1 Start_2 Start_2) (ite StartBool_1 Start_2 Start_1)))
   (Start_9 String ("b" y "1" "" (str.++ Start_1 Start_1) (str.replace Start_1 Start_7 Start_10) (ite StartBool_1 Start_3 Start_7)))
   (StartInt_5 Int (0 (str.indexof Start Start StartInt_3)))
   (StartBool_1 Bool (false true (str.<= Start_2 Start_3) (= StartInt StartInt_1) (<= StartInt_2 StartInt_2)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.indexof Start_3 Start_6 StartInt_5) (str.to_int Start_9)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_2 StartBool) (str.< Start_4 Start) (str.<= Start Start) (str.suffixof Start_1 Start) (<= StartInt_3 StartInt_2)))
   (StartBool_3 Bool (false true (str.<= Start_7 Start_9) (str.contains Start_7 Start_7) (= Start Start_3) (= StartInt StartInt_4)))
   (Start_11 String ("0" (str.++ Start_3 Start_9) (str.substr Start_3 StartInt_3 StartInt_5) (ite StartBool_1 Start_4 Start_10)))
   (Start_5 String ("b" (str.at Start_5 StartInt_2) (str.replace Start_2 Start_6 Start_2) (ite StartBool_1 Start Start_6)))
   (Start_4 String ("a" (str.++ Start_3 Start_3) (str.substr Start StartInt_1 StartInt_3) (str.replace Start_2 Start_6 Start_1) (ite StartBool_1 Start_5 Start)))
   (Start_7 String ("b" x (str.at Start_4 StartInt)))
   (StartInt_1 Int (1 (str.to_int Start)))
   (Start_6 String ("0" x (str.at Start StartInt) (str.substr Start_5 StartInt_3 StartInt_2) (str.from_int StartInt_2) (ite StartBool_2 Start_4 Start_3)))
   (StartInt_3 Int (1 (str.to_int Start)))
   (StartInt_7 Int (0 1 (str.indexof Start_3 Start StartInt_1) (str.to_int Start_7)))
   (StartInt_4 Int (0 (str.len Start_6) (str.indexof Start_2 Start_2 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (ite (str.prefixof x "b") "1" y) "b")))

(check-synth)
