(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (Start_4 String) (StartInt_4 Int) (Start_6 String) (Start_5 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_10 String) (StartInt_6 Int) (Start_14 String) (StartBool_4 Bool) (StartBool_3 Bool) (Start_3 String) (Start_16 String) (Start_9 String) (Start_7 String) (Start_12 String) (Start_11 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_1 String) (Start_2 String) (StartInt_5 Int) (Start_13 String) (StartInt_2 Int) (StartInt_8 Int) (Start_8 String) (Start_15 String))
  ((Start String ("a" (str.++ Start_1 Start) (str.replace Start Start Start) (str.from_int StartInt_1)))
   (StartInt Int (1))
   (StartBool Bool (true false (not StartBool) (and StartBool StartBool_2) (str.< Start_6 Start_3) (str.prefixof Start_11 Start_2) (str.suffixof Start_7 Start) (= Start_6 Start_5) (= StartInt_3 StartInt_4)))
   (StartInt_3 Int (1 0 (str.indexof Start Start_8 StartInt_4)))
   (Start_4 String (y (str.++ Start Start) (str.at Start_2 StartInt_6) (str.substr Start_6 StartInt_6 StartInt_2) (str.replace Start Start_5 Start_7)))
   (StartInt_4 Int (0 1 (str.to_int Start)))
   (Start_6 String ("a" "b" y x (str.++ Start_4 Start_3) (str.substr Start_3 StartInt_4 StartInt_5) (str.from_int StartInt_6)))
   (Start_5 String ("" "b" "1" "0" (str.++ Start_5 Start_5) (str.substr Start_6 StartInt_4 StartInt) (str.replace Start_2 Start_4 Start_6) (str.from_int StartInt)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.to_int Start_1)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.prefixof Start_4 Start_5) (str.suffixof Start_3 Start_3) (str.contains Start_1 Start_2) (<= StartInt_3 StartInt_3)))
   (Start_10 String ("a" (str.++ Start_5 Start_12) (str.at Start_5 StartInt_2) (str.substr Start_13 StartInt_6 StartInt_4) (ite StartBool Start Start_13)))
   (StartInt_6 Int (1 (str.len Start) (str.indexof Start Start_2 StartInt_1)))
   (Start_14 String ("1"))
   (StartBool_4 Bool (true false (and StartBool_4 StartBool_3) (str.< Start Start_16) (str.<= Start_8 Start_4) (str.suffixof Start_1 Start_7) (= Start_7 Start_1)))
   (StartBool_3 Bool (false (not StartBool_2) (str.< Start_15 Start_8) (str.<= Start_7 Start_16) (str.prefixof Start Start_4) (str.suffixof Start_8 Start_3) (str.contains Start_15 Start_7) (= Start_12 Start_3) (<= StartInt_4 StartInt_4)))
   (Start_3 String ("b" "a" "" y "0" (str.replace Start_7 Start_8 Start_7) (ite StartBool Start_11 Start_14)))
   (Start_16 String (x y (str.substr Start_12 StartInt_2 StartInt_3) (str.replace Start_10 Start_7 Start_6) (ite StartBool_4 Start_16 Start_8)))
   (Start_9 String ("" y "a" (str.++ Start_6 Start_1) (str.at Start_2 StartInt_6) (str.substr Start_10 StartInt_7 StartInt_5) (str.replace Start_11 Start_9 Start_12) (str.from_int StartInt_4)))
   (Start_7 String (x (str.at Start_5 StartInt_1)))
   (Start_12 String (y "0" "a" (str.++ Start Start) (str.substr Start_1 StartInt_4 StartInt_3) (str.from_int StartInt_6)))
   (Start_11 String ("b" y (str.at Start_4 StartInt) (str.substr Start_8 StartInt_3 StartInt_3) (str.replace Start_3 Start_7 Start_8)))
   (StartInt_7 Int (0 (str.len Start_12) (str.to_int Start_4)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_2) (str.< Start_14 Start_3) (str.<= Start_15 Start_10) (str.contains Start_2 Start_8) (= StartInt_7 StartInt_7) (<= StartInt_6 StartInt_8)))
   (Start_1 String ("1" y (str.++ Start_5 Start_9) (str.at Start_14 StartInt_1) (str.substr Start_4 StartInt_3 StartInt) (str.replace Start_12 Start_12 Start_4) (ite StartBool_2 Start_5 Start_3)))
   (Start_2 String ("" "b" "1" "0" (str.at Start_3 StartInt_2) (str.substr Start_2 StartInt_3 StartInt) (str.replace Start Start_4 Start) (ite StartBool_1 Start_4 Start)))
   (StartInt_5 Int (0 (str.len Start_2) (str.to_int Start_4)))
   (Start_13 String ("1" y (str.++ Start_5 Start) (str.at Start_9 StartInt_5) (str.substr Start_12 StartInt_7 StartInt_5) (str.replace Start_7 Start_6 Start_11)))
   (StartInt_2 Int (0 1 (str.to_int Start_8)))
   (StartInt_8 Int (0 (str.to_int Start_7)))
   (Start_8 String ("b" "" "0" (ite StartBool_1 Start_9 Start_5)))
   (Start_15 String (y (str.++ Start Start_1) (str.substr Start_5 StartInt_2 StartInt_5) (ite StartBool_1 Start_16 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< y "a") x y)))

(check-synth)
