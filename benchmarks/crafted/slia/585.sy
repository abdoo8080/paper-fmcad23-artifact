(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartBool_4 Bool) (StartInt_1 Int) (StartBool_2 Bool) (Start_10 String) (StartBool_3 Bool) (StartInt_8 Int) (StartBool_1 Bool) (Start_7 String) (StartInt_9 Int) (Start_3 String) (Start_11 String) (Start_2 String) (Start_4 String) (StartInt_4 Int) (Start_1 String) (Start_5 String) (StartInt_2 Int) (StartInt_3 Int) (StartInt_6 Int) (StartInt_5 Int) (Start_6 String) (Start_8 String) (StartInt_7 Int) (Start_9 String))
  ((Start String ("1" "0" "b" (str.++ Start Start) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_1 Start_1 Start) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_12 Start_7 StartInt_7)))
   (StartBool Bool (false (not StartBool) (and StartBool_4 StartBool_2) (str.< Start Start_4) (str.suffixof Start_9 Start_4)))
   (Start_12 String ("a" (str.at Start_1 StartInt_1)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.<= Start_7 Start_5) (str.prefixof Start_6 Start_4) (str.suffixof Start_5 Start_4) (= StartInt_4 StartInt_1) (<= StartInt_9 StartInt_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_7 Start_2 StartInt)))
   (StartBool_2 Bool (false true (not StartBool) (str.< Start_11 Start_7) (str.<= Start_4 Start_3) (str.prefixof Start_3 Start) (str.contains Start_5 Start_11)))
   (Start_10 String ("" (str.++ Start_9 Start_3) (str.at Start_4 StartInt_1) (str.from_int StartInt_4)))
   (StartBool_3 Bool (false (not StartBool) (str.< Start Start_8) (str.<= Start_10 Start_1) (str.prefixof Start_5 Start_3) (str.suffixof Start_6 Start_7) (str.contains Start Start_11) (= StartInt_7 StartInt_2) (<= StartInt StartInt_5)))
   (StartInt_8 Int (0 (str.len Start_10)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (str.< Start_2 Start_2) (str.<= Start_3 Start_2)))
   (Start_7 String ("a" (str.++ Start_8 Start_8) (str.at Start StartInt_5) (str.substr Start_8 StartInt StartInt_2) (str.from_int StartInt_3)))
   (StartInt_9 Int (0 (str.len Start) (str.indexof Start Start_4 StartInt_8)))
   (Start_3 String ("0" (str.++ Start Start) (str.at Start StartInt) (str.substr Start_2 StartInt StartInt)))
   (Start_11 String (x y "b" (str.at Start_4 StartInt_6) (str.substr Start_4 StartInt_4 StartInt_6) (str.from_int StartInt_7)))
   (Start_2 String ("0" (str.replace Start_3 Start_2 Start_2) (str.from_int StartInt_2) (ite StartBool_3 Start_4 Start_5)))
   (Start_4 String ("" (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt_4 StartInt) (str.from_int StartInt_4)))
   (StartInt_4 Int (1))
   (Start_1 String (y (str.++ Start_12 Start_8) (str.at Start_11 StartInt_8) (str.substr Start_7 StartInt_4 StartInt_5) (ite StartBool_4 Start_4 Start_2)))
   (Start_5 String ("0" (str.from_int StartInt) (ite StartBool_3 Start_2 Start_4)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_8 StartInt_6)))
   (StartInt_3 Int (0 (str.indexof Start Start_6 StartInt_1) (str.to_int Start_1)))
   (StartInt_6 Int (0 (str.len Start_9) (str.indexof Start_4 Start_2 StartInt_1)))
   (StartInt_5 Int (1 0 (str.to_int Start_2)))
   (Start_6 String ("" "a" (str.++ Start_2 Start_3) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_7)))
   (Start_8 String (y (str.replace Start Start_9 Start)))
   (StartInt_7 Int (0 1 (str.len Start_6) (str.to_int Start_7)))
   (Start_9 String ("0" (str.at Start_9 StartInt_4) (str.substr Start_5 StartInt_3 StartInt_1) (str.replace Start_3 Start_7 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "1" "" "0") y "0")))

(check-synth)
