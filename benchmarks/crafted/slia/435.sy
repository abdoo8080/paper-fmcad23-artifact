(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_4 Int) (StartInt_6 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_6 String) (StartInt_3 Int) (StartInt_2 Int) (StartBool_3 Bool) (Start_3 String) (Start_4 String) (StartInt_5 Int) (StartInt_1 Int) (StartInt_7 Int) (Start_5 String) (Start_2 String) (StartBool_1 Bool) (Start_1 String) (Start_7 String))
  ((Start String ("" "a" (str.replace Start_1 Start_2 Start) (str.from_int StartInt_1) (ite StartBool Start_3 Start_1)))
   (StartInt Int (1))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_3 StartBool_4) (str.suffixof Start_7 Start_5) (= Start_6 Start_8)))
   (Start_8 String ("a" (str.++ Start_8 Start) (str.substr Start_7 StartInt_2 StartInt)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start Start_6 StartInt_2) (str.to_int Start_1)))
   (StartInt_6 Int (0 1 (str.indexof Start_1 Start_2 StartInt_7) (str.to_int Start_1)))
   (StartBool_4 Bool (true (str.<= Start_7 Start_2) (str.contains Start_3 Start_5) (= Start_4 Start_6) (= StartInt_6 StartInt_7) (<= StartInt_4 StartInt_7)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_3) (str.<= Start_5 Start_4) (str.suffixof Start_7 Start_1) (str.contains Start_1 Start_5) (= StartInt_3 StartInt_3)))
   (Start_6 String ("" (str.++ Start_7 Start_2) (str.substr Start_6 StartInt_3 StartInt_2)))
   (StartInt_3 Int (1))
   (StartInt_2 Int (1 (str.indexof Start_4 Start_3 StartInt_3) (str.to_int Start_2)))
   (StartBool_3 Bool (false true (and StartBool_4 StartBool_4) (str.< Start_7 Start_4) (str.prefixof Start_3 Start_7) (= StartInt_3 StartInt_1) (<= StartInt_2 StartInt_1)))
   (Start_3 String ("0" y "" "a" x "b" "1" (str.at Start_2 StartInt) (str.substr Start_3 StartInt_2 StartInt_3) (str.from_int StartInt_3)))
   (Start_4 String ("a" (str.at Start_2 StartInt_2) (str.substr Start_2 StartInt_2 StartInt_3)))
   (StartInt_5 Int (1 0))
   (StartInt_1 Int (0 1 (str.len Start_5)))
   (StartInt_7 Int (0 (str.len Start_3) (str.to_int Start_2)))
   (Start_5 String ("a" "0" "" (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt StartInt_2) (str.from_int StartInt_3)))
   (Start_2 String ("b" (str.++ Start_4 Start_5) (str.replace Start Start Start_4)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_1 StartBool_2) (str.< Start_5 Start_2) (str.prefixof Start_7 Start_1) (= StartInt_5 StartInt_1) (<= StartInt_5 StartInt_2)))
   (Start_1 String ("" (str.at Start_6 StartInt_1)))
   (Start_7 String ("b" "a" "1" y "" "0" x (str.replace Start Start_3 Start_7) (str.from_int StartInt_4) (ite StartBool_1 Start_6 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "a" "") 1)))

(check-synth)
