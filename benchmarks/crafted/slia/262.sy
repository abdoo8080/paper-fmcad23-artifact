(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (Start_2 String) (Start_1 String) (Start_3 String) (Start_4 String) (StartInt_1 Int) (StartInt_4 Int) (StartInt_3 Int) (StartInt_5 Int) (StartInt_2 Int) (Start_6 String))
  ((Start String ("" (str.++ Start_1 Start_1) (str.at Start StartInt_1)))
   (StartInt Int (0 (str.indexof Start Start_5 StartInt_2)))
   (StartBool Bool (false true (str.< Start_2 Start_4) (str.prefixof Start_3 Start_6) (str.suffixof Start_6 Start_1) (= StartInt_5 StartInt_2)))
   (Start_5 String ("0" (str.++ Start_1 Start_4) (str.substr Start_6 StartInt_4 StartInt_5) (str.from_int StartInt)))
   (Start_2 String (y "1" (str.at Start_1 StartInt_1) (ite StartBool Start Start_1)))
   (Start_1 String ("a" (str.at Start_1 StartInt_2) (str.substr Start_1 StartInt_3 StartInt_2) (str.replace Start_3 Start_3 Start) (str.from_int StartInt_2) (ite StartBool Start Start_3)))
   (Start_3 String (y "1" (str.++ Start Start_3) (str.at Start_4 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_4) (str.replace Start_1 Start_3 Start) (ite StartBool Start_3 Start)))
   (Start_4 String ("1" y "0" "b" (str.at Start_4 StartInt_4) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt_2) (ite StartBool Start_4 Start_3)))
   (StartInt_1 Int (1 (str.indexof Start_2 Start StartInt)))
   (StartInt_4 Int (0))
   (StartInt_3 Int (1 0 (str.indexof Start_1 Start_3 StartInt_4) (str.to_int Start)))
   (StartInt_5 Int (0 (str.len Start_5) (str.to_int Start_5)))
   (StartInt_2 Int (0 1 (str.len Start)))
   (Start_6 String (x (str.++ Start Start_4) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.substr y 0 1) "a")))

(check-synth)
