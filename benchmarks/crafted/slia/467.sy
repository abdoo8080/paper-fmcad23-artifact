(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_1 String) (Start_8 String) (Start_9 String) (Start_7 String) (StartBool_3 Bool) (Start_2 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_4 String) (StartInt_7 Int) (Start_3 String) (StartInt_4 Int) (StartBool_2 Bool) (StartBool_4 Bool) (StartInt_2 Int) (Start_5 String) (StartInt_8 Int) (StartInt_6 Int) (StartInt_5 Int) (Start_6 String))
  ((Start String ("1" y "" x (str.++ Start Start) (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start_1 Start_1) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (1 0 (str.len Start)))
   (StartBool Bool (true false (and StartBool StartBool_4) (str.<= Start_7 Start_5) (str.prefixof Start_1 Start_4) (str.contains Start Start_9)))
   (StartInt_1 Int (0 (str.len Start_5) (str.indexof Start_6 Start_8 StartInt_6)))
   (Start_1 String ("a" "b" "0" (str.++ Start_1 Start_1) (str.substr Start_8 StartInt_7 StartInt_7)))
   (Start_8 String ("a" (str.++ Start_2 Start_1) (str.substr Start_8 StartInt StartInt_3)))
   (Start_9 String ("a" x (str.from_int StartInt_5) (ite StartBool_3 Start_6 Start_6)))
   (Start_7 String ("1" (str.++ Start Start_1) (str.at Start_4 StartInt_7) (str.replace Start_1 Start_8 Start_7) (ite StartBool_3 Start_6 Start_5)))
   (StartBool_3 Bool (false true (str.<= Start Start_3) (str.suffixof Start_1 Start_6) (= Start_7 Start_3)))
   (Start_2 String ("a" y "0" (str.replace Start_2 Start_5 Start)))
   (StartInt_3 Int (1 (str.len Start)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (str.< Start_3 Start_4) (str.contains Start Start_3) (= Start Start_1) (<= StartInt_4 StartInt_2)))
   (Start_4 String (y "b" x "0" (str.substr Start_5 StartInt_5 StartInt_1) (str.replace Start_5 Start_4 Start) (str.from_int StartInt_4) (ite StartBool_4 Start_3 Start_2)))
   (StartInt_7 Int (0 (str.indexof Start_2 Start StartInt_5) (str.to_int Start_2)))
   (Start_3 String ("b" y (str.substr Start StartInt_2 StartInt) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start)))
   (StartInt_4 Int (1 (str.indexof Start_5 Start StartInt_1)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_4) (str.< Start_2 Start_4) (str.<= Start_6 Start_3) (str.suffixof Start_4 Start_4) (str.contains Start_5 Start_7) (= StartInt_3 StartInt_4)))
   (StartBool_4 Bool (true (not StartBool_2) (str.< Start_2 Start_3) (str.<= Start_4 Start_6) (str.prefixof Start_3 Start) (str.contains Start_6 Start) (= StartInt_6 StartInt_7)))
   (StartInt_2 Int (0))
   (Start_5 String ("0" (str.substr Start_4 StartInt_5 StartInt_4) (str.from_int StartInt) (ite StartBool_4 Start_1 Start_5)))
   (StartInt_8 Int (1 (str.len Start_5) (str.to_int Start_3)))
   (StartInt_6 Int (0 1 (str.to_int Start)))
   (StartInt_5 Int (0 (str.len Start_1) (str.indexof Start_6 Start_4 StartInt)))
   (Start_6 String ("" y "b" (str.substr Start_1 StartInt_7 StartInt_4) (str.from_int StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" y "b")))

(check-synth)
