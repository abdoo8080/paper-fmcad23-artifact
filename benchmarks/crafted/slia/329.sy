(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (StartBool_1 Bool) (Start_4 String) (Start_2 String) (StartInt_1 Int) (Start_5 String) (Start_3 String) (Start_1 String))
  ((Start String ("0"))
   (StartInt Int (1 (str.to_int Start_1)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (str.< Start Start) (= Start_3 Start_4)))
   (StartInt_2 Int (1 0 (str.len Start_4)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (str.< Start_3 Start_2) (str.<= Start_3 Start_1) (str.prefixof Start_3 Start_4) (str.suffixof Start_1 Start_2) (= Start_3 Start_1) (= StartInt_1 StartInt_1)))
   (Start_4 String ("b" "" (str.at Start StartInt_2) (ite StartBool_1 Start_3 Start_5)))
   (Start_2 String ("b" (str.at Start_3 StartInt) (ite StartBool Start Start_1)))
   (StartInt_1 Int (1 (str.indexof Start_2 Start StartInt)))
   (Start_5 String (y "1" x "" "b" (str.++ Start_1 Start_1) (str.at Start_3 StartInt_1)))
   (Start_3 String ("a" (str.at Start StartInt_2) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_1 Start_4 Start_2)))
   (Start_1 String ("b" "" (str.at Start_2 StartInt) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "1" "")))

(check-synth)
