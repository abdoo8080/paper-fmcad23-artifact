(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_3 Int) (StartInt_1 Int) (Start_2 String) (Start_3 String) (Start_6 String) (Start_1 String) (StartInt_4 Int) (Start_7 String) (StartInt_2 Int) (Start_5 String) (Start_4 String))
  ((Start String ("a" (str.substr Start_1 StartInt_1 StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_7) (str.indexof Start_2 Start StartInt_3)))
   (StartBool Bool (true false (str.< Start_8 Start_4) (= Start_2 Start_6) (<= StartInt_4 StartInt)))
   (Start_8 String (x (str.replace Start_7 Start Start_4)))
   (StartInt_3 Int (1 0 (str.len Start_1)))
   (StartInt_1 Int (0 (str.len Start_2) (str.to_int Start_1)))
   (Start_2 String ("b" x y "a" (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_1 Start_3 Start_2) (str.from_int StartInt_1) (ite StartBool Start_4 Start_2)))
   (Start_3 String ("b" (str.at Start_4 StartInt_3) (str.replace Start_5 Start_2 Start_5)))
   (Start_6 String (x "1" "" (str.++ Start Start_3) (str.at Start_5 StartInt_4) (str.substr Start_1 StartInt_1 StartInt_2)))
   (Start_1 String ("b" (str.at Start_3 StartInt_2) (str.substr Start_6 StartInt_1 StartInt_1) (ite StartBool Start_3 Start_5)))
   (StartInt_4 Int (0))
   (Start_7 String ("" (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_1 StartInt_1) (str.to_int Start_2)))
   (Start_5 String ("a" "0" (str.++ Start_1 Start_5) (str.replace Start_5 Start Start_2) (ite StartBool Start_2 Start_2)))
   (Start_4 String (x "0" (str.++ Start_4 Start_2) (str.at Start_2 StartInt) (str.substr Start StartInt_1 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.indexof "0" y 1))))

(check-synth)
