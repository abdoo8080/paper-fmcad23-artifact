(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (StartInt_5 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_4 String) (Start_7 String) (StartInt_6 Int) (Start_6 String) (Start_5 String) (Start_8 String) (StartInt_3 Int) (StartInt_8 Int) (StartInt_2 Int) (Start_1 String) (StartInt_1 Int) (StartInt_9 Int) (StartInt_4 Int) (Start_11 String) (Start_10 String) (Start_12 String) (StartBool_2 Bool) (Start_3 String) (StartInt_7 Int) (Start_18 String) (Start_14 String) (Start_13 String) (Start_9 String) (Start_17 String) (Start_16 String) (Start_15 String) (Start_2 String))
  ((Start String ("0" (str.at Start StartInt_1) (str.replace Start Start_1 Start_1) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start_13) (str.indexof Start_7 Start_15 StartInt_7)))
   (StartBool Bool (false true (and StartBool_3 StartBool_1) (str.< Start_18 Start_11) (str.prefixof Start_14 Start) (str.contains Start_16 Start_15) (= StartInt_8 StartInt_8)))
   (StartInt_10 Int (0 1 (str.len Start_6) (str.to_int Start_9)))
   (StartInt_5 Int (0 (str.to_int Start_4)))
   (StartBool_3 Bool (true (str.< Start_11 Start_2) (str.<= Start_8 Start_11) (= Start_6 Start_1) (= StartInt_4 StartInt_1)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_4 Start_7) (str.<= Start Start_2) (str.suffixof Start_4 Start_6) (= Start_4 Start_7) (= StartInt_2 StartInt_1) (<= StartInt_3 StartInt_2)))
   (Start_4 String ("1" x "a" (str.at Start_3 StartInt_5) (str.substr Start_10 StartInt_4 StartInt_6) (str.from_int StartInt_6) (ite StartBool_1 Start_6 Start_14)))
   (Start_7 String ("" "1" (str.++ Start_5 Start_4) (str.at Start_1 StartInt)))
   (StartInt_6 Int (1 0 (str.indexof Start_4 Start_9 StartInt_4)))
   (Start_6 String ("0" "1" (str.at Start_7 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_2 Start_6 Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start_2)))
   (Start_5 String ("0" (str.++ Start_4 Start_1) (str.replace Start_4 Start Start_2) (ite StartBool_1 Start_4 Start_6)))
   (Start_8 String ("a" x (str.++ Start_5 Start_7) (str.at Start_9 StartInt_1) (str.from_int StartInt_3) (ite StartBool_2 Start_9 Start_9)))
   (StartInt_3 Int (1 (str.len Start_4) (str.indexof Start_8 Start_2 StartInt_4)))
   (StartInt_8 Int (1 0))
   (StartInt_2 Int (1 (str.len Start_5)))
   (Start_1 String ("b" (str.++ Start_2 Start_3) (str.at Start_4 StartInt_2)))
   (StartInt_1 Int (1 (str.indexof Start Start_15 StartInt_9)))
   (StartInt_9 Int (0 1 (str.indexof Start_7 Start_10 StartInt_7)))
   (StartInt_4 Int (0 1 (str.indexof Start_2 Start_7 StartInt_1) (str.to_int Start_1)))
   (Start_11 String ("a" "b" "0" y (str.from_int StartInt_3) (ite StartBool_3 Start_7 Start_4)))
   (Start_10 String ("a" (str.++ Start_6 Start_5) (str.at Start_9 StartInt_7) (str.substr Start_12 StartInt_3 StartInt_1) (str.from_int StartInt_3) (ite StartBool_2 Start_1 Start_12)))
   (Start_12 String (y (str.at Start_6 StartInt_5) (str.substr Start StartInt_5 StartInt_7)))
   (StartBool_2 Bool (false (not StartBool) (str.< Start_10 Start_10) (str.suffixof Start_6 Start_5) (str.contains Start_11 Start_3) (= Start Start_9) (= StartInt_2 StartInt_5) (<= StartInt_6 StartInt)))
   (Start_3 String ("1" "b" "a" (str.++ Start_2 Start_12) (str.at Start_15 StartInt_7) (str.substr Start_1 StartInt_5 StartInt_1) (str.from_int StartInt) (ite StartBool_3 Start_16 Start_17)))
   (StartInt_7 Int (0 (str.len Start_5)))
   (Start_18 String (y "1" (str.++ Start_18 Start_18) (str.at Start_7 StartInt_7) (str.substr Start_3 StartInt_10 StartInt_3) (str.from_int StartInt_5) (ite StartBool_3 Start_2 Start_9)))
   (Start_14 String (y (str.substr Start_5 StartInt StartInt) (str.replace Start_4 Start Start_10) (str.from_int StartInt_8) (ite StartBool_3 Start_9 Start_14)))
   (Start_13 String ("b" (str.at Start StartInt_2) (str.replace Start_4 Start_8 Start_12) (str.from_int StartInt)))
   (Start_9 String ("0" "1" (str.++ Start_2 Start_1) (str.at Start_2 StartInt_7) (str.substr Start_13 StartInt_5 StartInt) (str.replace Start_11 Start_8 Start) (str.from_int StartInt_5)))
   (Start_17 String ("a" (str.substr Start_2 StartInt_7 StartInt_4) (str.replace Start_17 Start_12 Start_15)))
   (Start_16 String ("b" "a" (str.substr Start_5 StartInt_7 StartInt_6) (str.from_int StartInt_1) (ite StartBool_2 Start_2 Start_17)))
   (Start_15 String ("1" (str.at Start_4 StartInt_9) (str.substr Start_2 StartInt_6 StartInt_8) (str.from_int StartInt_7) (ite StartBool_2 Start_9 Start_10)))
   (Start_2 String ("" x y "0" (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" y "")))

(check-synth)
