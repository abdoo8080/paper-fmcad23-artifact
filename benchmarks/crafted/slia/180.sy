(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_6 String) (Start_4 String) (StartInt_2 Int) (Start_3 String) (Start_5 String) (StartInt_3 Int) (Start_1 String) (StartInt_4 Int) (StartInt_1 Int) (Start_2 String) (Start_7 String))
  ((Start String (x "1" (str.++ Start_1 Start) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start_2 Start_2)))
   (StartInt Int (0 (str.len Start_4) (str.indexof Start_3 Start_2 StartInt_1)))
   (StartBool Bool (false (str.< Start_2 Start_7) (str.contains Start_3 Start) (= StartInt_5 StartInt)))
   (StartInt_5 Int (0 (str.indexof Start_6 Start_4 StartInt_3) (str.to_int Start_4)))
   (Start_6 String ("" "0" y "1" (str.++ Start_4 Start_4) (str.at Start_5 StartInt_3)))
   (Start_4 String ("1" "a" x (str.++ Start_3 Start_3) (str.substr Start StartInt_3 StartInt) (str.replace Start_5 Start_2 Start_2)))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start_2 StartInt_2) (str.to_int Start)))
   (Start_3 String ("b" y "0" (str.++ Start_4 Start_5) (str.at Start_3 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_2 Start_5)))
   (Start_5 String ("1" y "a" (str.++ Start_6 Start) (str.at Start_5 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start Start_3 Start_4) (ite StartBool Start_2 Start_1)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_6 Start_2 StartInt_2) (str.to_int Start_5)))
   (Start_1 String ("1" (str.substr Start_1 StartInt StartInt_4) (str.replace Start_6 Start_3 Start_6) (str.from_int StartInt)))
   (StartInt_4 Int (0 1 (str.indexof Start Start_1 StartInt_2)))
   (StartInt_1 Int (0 (str.len Start_6) (str.indexof Start_7 Start StartInt_3) (str.to_int Start_2)))
   (Start_2 String ("b" "a" "" (str.++ Start_2 Start_3) (str.at Start_2 StartInt_2) (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start Start_3 Start_1)))
   (Start_7 String ("0"))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "" x "a") "1")))

(check-synth)
