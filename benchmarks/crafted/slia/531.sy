(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (StartBool_2 Bool) (Start_8 String) (StartInt_7 Int) (Start_7 String) (StartInt_6 Int) (Start_2 String) (Start_4 String) (Start_5 String) (StartInt_3 Int) (Start_3 String) (StartInt_2 Int) (StartInt_1 Int) (Start_1 String) (StartInt_4 Int) (Start_6 String) (StartInt_5 Int))
  ((Start String ("b" "1" (str.at Start_1 StartInt_1) (str.replace Start Start Start_2)))
   (StartInt Int (0 (str.len Start_6)))
   (StartBool Bool (true false (and StartBool StartBool_1) (str.<= Start_6 Start_2) (str.prefixof Start_4 Start_3) (str.suffixof Start_5 Start_2) (= Start_4 Start_4) (= StartInt_3 StartInt_1) (<= StartInt_1 StartInt_5)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_2) (str.< Start_2 Start_4)))
   (StartBool_2 Bool (false true (str.< Start Start_3) (str.prefixof Start_7 Start_2) (<= StartInt StartInt_7)))
   (Start_8 String (y (str.++ Start_2 Start_5) (str.replace Start_2 Start_6 Start_5) (str.from_int StartInt_3) (ite StartBool_2 Start_1 Start_6)))
   (StartInt_7 Int (1 0 (str.indexof Start_2 Start_4 StartInt) (str.to_int Start_8)))
   (Start_7 String (x (str.substr Start StartInt_7 StartInt_2) (str.replace Start_5 Start_2 Start_6)))
   (StartInt_6 Int (0 (str.to_int Start_7)))
   (Start_2 String ("b" "a" x "1" "" y (str.at Start_1 StartInt_2) (str.from_int StartInt_3)))
   (Start_4 String ("b" (str.at Start_1 StartInt_3)))
   (Start_5 String (x "" y "1" (str.++ Start_3 Start_2) (str.at Start_2 StartInt_2) (str.replace Start_6 Start_5 Start_5) (str.from_int StartInt_4)))
   (StartInt_3 Int (0 (str.to_int Start_3)))
   (Start_3 String ("b" "a" (str.substr Start_1 StartInt StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start_1)))
   (StartInt_1 Int (0 1 (str.indexof Start_3 Start_4 StartInt_1)))
   (Start_1 String ("a" "0" "" (str.at Start_5 StartInt_4)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_4 StartInt_1)))
   (Start_6 String ("b" (str.at Start_2 StartInt) (str.substr Start_4 StartInt_2 StartInt) (str.replace Start Start_6 Start_6)))
   (StartInt_5 Int (1 0 (str.indexof Start Start_1 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "0" y (str.substr "b" (str.indexof y "0" 1) 1)) "0")))

(check-synth)
