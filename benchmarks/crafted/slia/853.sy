(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (Start_6 String) (StartInt_4 Int) (Start_9 String) (Start_17 String) (Start_4 String) (Start_12 String) (StartInt_5 Int) (Start_16 String) (StartInt_1 Int) (Start_8 String) (Start_3 String) (StartInt_2 Int) (Start_1 String) (Start_14 String) (Start_5 String) (StartInt_3 Int) (Start_15 String) (Start_10 String) (StartBool_2 Bool) (StartInt_10 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_7 String) (Start_11 String) (Start_2 String) (StartInt_7 Int) (StartInt_9 Int) (StartInt_6 Int) (StartInt_8 Int) (Start_13 String))
  ((Start String (y "0" "" (str.at Start_1 StartInt_1) (str.substr Start StartInt_2 StartInt_3)))
   (StartInt Int (0 1 (str.indexof Start_4 Start_5 StartInt)))
   (StartBool Bool (true false (and StartBool_2 StartBool) (str.< Start_2 Start_8) (str.<= Start_5 Start_6) (str.contains Start Start_9) (= Start_7 Start_9) (= StartInt_4 StartInt_3) (<= StartInt_6 StartInt_7)))
   (StartInt_11 Int (1))
   (Start_6 String ("1" x (str.at Start_2 StartInt_6) (str.substr Start_7 StartInt_4 StartInt_3) (str.replace Start_4 Start_2 Start_6) (ite StartBool_1 Start_7 Start_2)))
   (StartInt_4 Int (0 1 (str.len Start_2)))
   (Start_9 String ("b" "a" (str.substr Start_6 StartInt_3 StartInt_2) (str.replace Start_4 Start_7 Start_10) (str.from_int StartInt) (ite StartBool Start_1 Start_6)))
   (Start_17 String ("1" "b" (str.at Start_16 StartInt)))
   (Start_4 String ("0" (str.++ Start_1 Start)))
   (Start_12 String ("b" "1" (str.++ Start_12 Start_1) (str.substr Start_15 StartInt_11 StartInt) (str.from_int StartInt_3) (ite StartBool Start_5 Start_16)))
   (StartInt_5 Int (1))
   (Start_16 String ("" (str.++ Start_7 Start_5) (str.at Start_16 StartInt_3) (str.substr Start_12 StartInt_5 StartInt) (str.from_int StartInt_9) (ite StartBool_1 Start_5 Start_5)))
   (StartInt_1 Int (0 1 (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_3)))
   (Start_8 String ("" x (str.substr Start_2 StartInt StartInt_4) (str.replace Start_4 Start_7 Start_8)))
   (Start_3 String ("b" "" (str.at Start StartInt_1) (str.replace Start Start_1 Start) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_1) (str.indexof Start Start_2 StartInt_1) (str.to_int Start_1)))
   (Start_1 String ("" "0" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.replace Start_3 Start_2 Start_1) (ite StartBool_1 Start_4 Start)))
   (Start_14 String (x (str.++ Start_14 Start_15) (str.substr Start_9 StartInt StartInt) (str.from_int StartInt_10)))
   (Start_5 String ("b" (str.at Start_1 StartInt_1) (str.substr Start_6 StartInt_3 StartInt_5) (ite StartBool Start Start_5)))
   (StartInt_3 Int (1 (str.to_int Start)))
   (Start_15 String (x (str.from_int StartInt_1) (ite StartBool_2 Start_13 Start_17)))
   (Start_10 String ("" y "0" (str.at Start_1 StartInt_6) (str.substr Start_1 StartInt_5 StartInt_1) (str.from_int StartInt_8) (ite StartBool_3 Start_5 Start_6)))
   (StartBool_2 Bool (false (str.suffixof Start_1 Start_12) (str.contains Start_7 Start_12) (= Start_13 Start_4)))
   (StartInt_10 Int (1 0 (str.len Start_12) (str.indexof Start_16 Start_10 StartInt_10) (str.to_int Start_4)))
   (StartBool_1 Bool (false (str.< Start Start_4) (str.<= Start_1 Start_5) (str.suffixof Start Start_2) (= StartInt_3 StartInt) (<= StartInt_4 StartInt_2)))
   (StartBool_3 Bool (true false (str.< Start_7 Start_4) (str.prefixof Start_4 Start_1) (str.suffixof Start_4 Start_8) (str.contains Start_11 Start_11) (= Start_3 Start_5) (<= StartInt_9 StartInt_8)))
   (Start_7 String (x (str.++ Start Start_3) (str.at Start_5 StartInt_4) (str.replace Start_6 Start_8 Start_8) (str.from_int StartInt_6)))
   (Start_11 String (x (str.at Start_3 StartInt_9) (str.substr Start_4 StartInt_8 StartInt_5) (str.from_int StartInt_1) (ite StartBool Start_9 Start_3)))
   (Start_2 String ("0" "b" x "1" "a" "" y (str.replace Start Start_3 Start_1) (ite StartBool Start Start_2)))
   (StartInt_7 Int (1 0))
   (StartInt_9 Int (0 (str.indexof Start Start_11 StartInt_3) (str.to_int Start_9)))
   (StartInt_6 Int (0 1 (str.to_int Start_8)))
   (StartInt_8 Int (0 1 (str.indexof Start_4 Start_1 StartInt_6)))
   (Start_13 String ("a" x "" "0" y (str.at Start_4 StartInt_8) (str.replace Start_2 Start_13 Start_14) (ite StartBool Start_5 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ (str.++ "1" (str.at "a" (str.len x))) "1") 1)))

(check-synth)
