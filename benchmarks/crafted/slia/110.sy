(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartBool_5 Bool) (Start_1 String) (Start_2 String) (Start_7 String) (Start_11 String) (StartInt_5 Int) (StartBool_4 Bool) (Start_8 String) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_2 Bool) (Start_13 String) (Start_4 String) (StartBool_3 Bool) (StartBool_6 Bool) (StartInt_1 Int) (StartInt_4 Int) (Start_3 String) (StartInt_3 Int) (Start_5 String) (StartInt_6 Int) (Start_6 String) (Start_9 String) (StartInt_7 Int) (Start_10 String))
  ((Start String ("0" (str.++ Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_5 Start_2 StartInt_4)))
   (StartBool Bool (false (str.< Start_7 Start_2) (str.<= Start_8 Start_2) (str.prefixof Start Start_12) (= Start_8 Start_1) (<= StartInt_5 StartInt_6)))
   (Start_12 String ("1" "0" (str.replace Start_13 Start_2 Start_7) (str.from_int StartInt)))
   (StartBool_5 Bool (false true (not StartBool_6) (and StartBool_3 StartBool_1) (str.<= Start_7 Start_8) (str.prefixof Start_10 Start_9) (str.contains Start_3 Start_9) (= StartInt_4 StartInt_7)))
   (Start_1 String ("0" "" (str.++ Start_11 Start_1)))
   (Start_2 String (x "1" "" (str.substr Start_6 StartInt_4 StartInt_5)))
   (Start_7 String (y "" (str.substr Start_11 StartInt_1 StartInt_4) (str.replace Start_9 Start_2 Start_8)))
   (Start_11 String (x "a" (str.++ Start_6 Start_8) (str.at Start_11 StartInt) (ite StartBool_2 Start_10 Start_6)))
   (StartInt_5 Int (0 1 (str.indexof Start_2 Start_3 StartInt_3)))
   (StartBool_4 Bool (true false (str.< Start Start_8) (str.<= Start_1 Start_9) (str.prefixof Start_3 Start_3) (str.suffixof Start_8 Start) (<= StartInt_2 StartInt_1)))
   (Start_8 String ("b" (str.++ Start_5 Start_2) (str.substr Start_5 StartInt_4 StartInt_3) (str.replace Start_9 Start_11 Start_7) (str.from_int StartInt_2) (ite StartBool_4 Start_11 Start_9)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_1) (str.< Start_3 Start_4) (str.prefixof Start Start_1) (str.suffixof Start_4 Start_3) (str.contains Start_3 Start_4) (<= StartInt_1 StartInt_2)))
   (StartInt_2 Int (1 0))
   (StartBool_2 Bool (false (not StartBool) (str.< Start_4 Start_3) (str.prefixof Start_4 Start_2) (str.suffixof Start_1 Start_2) (= Start_5 Start_4)))
   (Start_13 String ("0" (str.++ Start_7 Start_4) (str.at Start_5 StartInt_5) (ite StartBool_5 Start_5 Start_13)))
   (Start_4 String ("" (str.++ Start_4 Start) (str.at Start StartInt_1) (str.replace Start_1 Start_2 Start_1)))
   (StartBool_3 Bool (true (str.< Start_6 Start) (str.suffixof Start_10 Start_5) (<= StartInt StartInt_2)))
   (StartBool_6 Bool (false true (not StartBool_3) (and StartBool_3 StartBool_2) (str.< Start_5 Start_4) (str.<= Start_5 Start_8) (str.prefixof Start_13 Start_7) (str.contains Start_4 Start_6) (= StartInt_7 StartInt_7) (<= StartInt_1 StartInt)))
   (StartInt_1 Int (0 1 (str.len Start_6) (str.indexof Start_1 Start_3 StartInt_3)))
   (StartInt_4 Int (1 (str.len Start_4) (str.to_int Start_10)))
   (Start_3 String ("a" x (str.at Start_2 StartInt_1) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.len Start_1)))
   (Start_5 String (y (str.at Start_3 StartInt_1) (ite StartBool_2 Start_5 Start_1)))
   (StartInt_6 Int (1 (str.to_int Start_11)))
   (Start_6 String ("0" "1" (str.++ Start_7 Start_8) (ite StartBool_3 Start_3 Start_9)))
   (Start_9 String ("0" (str.at Start_7 StartInt_3) (str.replace Start_6 Start_10 Start_9) (str.from_int StartInt_1)))
   (StartInt_7 Int (0 (str.len Start_3) (str.indexof Start_7 Start_9 StartInt_2)))
   (Start_10 String (x y "a" "b" "1" (str.++ Start_4 Start_4) (str.replace Start Start_8 Start_4) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.at y 1))))

(check-synth)
