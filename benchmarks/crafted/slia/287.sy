(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (Start_8 String) (Start_7 String) (StartBool_2 Bool) (Start_1 String) (StartInt_5 Int) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_1 Int) (StartInt_6 Int) (Start_4 String) (Start_9 String) (StartInt_3 Int) (Start_2 String) (StartBool_3 Bool) (StartInt_2 Int) (Start_5 String) (Start_3 String))
  ((Start String ("b" x (str.replace Start_1 Start Start)))
   (StartInt Int (0 1 (str.len Start_6) (str.to_int Start_5)))
   (StartBool Bool (true (not StartBool) (str.suffixof Start_1 Start_5) (= Start_5 Start_1) (<= StartInt_1 StartInt_6)))
   (Start_6 String (x (str.++ Start_8 Start_7) (str.at Start_5 StartInt_6) (str.replace Start Start_2 Start_6) (ite StartBool_1 Start_9 Start_3)))
   (Start_8 String ("" (str.++ Start_6 Start_7) (str.at Start StartInt_3) (str.replace Start_6 Start_5 Start_8) (str.from_int StartInt_5) (ite StartBool_2 Start_8 Start_6)))
   (Start_7 String ("0" "1" y (str.++ Start Start_8) (str.at Start_1 StartInt_1) (str.replace Start_2 Start_1 Start_8)))
   (StartBool_2 Bool (true (and StartBool StartBool_3) (str.< Start_5 Start_5) (str.suffixof Start Start_3) (str.contains Start_1 Start_1) (= Start_1 Start_3) (= StartInt_2 StartInt_2)))
   (Start_1 String (y x "" (str.++ Start Start_1) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt)))
   (StartInt_5 Int (1 (str.len Start_1) (str.to_int Start_3)))
   (StartInt_4 Int (0 (str.indexof Start_1 Start_7 StartInt_2)))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (str.suffixof Start_3 Start_4) (= Start_2 Start) (= StartInt StartInt_1) (<= StartInt StartInt)))
   (StartInt_1 Int (1 0))
   (StartInt_6 Int (1 0 (str.len Start) (str.to_int Start_5)))
   (Start_4 String ("" y (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt StartInt_2) (str.from_int StartInt_2)))
   (Start_9 String ("a" (str.++ Start_2 Start_7) (str.substr Start_3 StartInt_1 StartInt_4) (str.replace Start_5 Start_7 Start_2) (str.from_int StartInt_6) (ite StartBool_3 Start_8 Start_1)))
   (StartInt_3 Int (0 1 (str.indexof Start_1 Start_2 StartInt_3) (str.to_int Start_5)))
   (Start_2 String ("" (str.at Start StartInt) (ite StartBool_1 Start_1 Start_2)))
   (StartBool_3 Bool (false (not StartBool_3) (and StartBool_1 StartBool_2) (str.prefixof Start_1 Start_4) (str.contains Start_4 Start_6) (= StartInt StartInt_1) (<= StartInt_4 StartInt_2)))
   (StartInt_2 Int (1 (str.indexof Start_1 Start_1 StartInt_3) (str.to_int Start_1)))
   (Start_5 String ("b" "1" "0" (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_1 StartInt)))
   (Start_3 String ("a" (str.++ Start_3 Start_5) (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start_2 Start_3 Start_1) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at "0" (str.indexof (ite (str.<= y "") x "1") "" 1))))))

(check-synth)
