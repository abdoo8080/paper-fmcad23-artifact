(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_9 String) (StartInt_4 Int) (Start_14 String) (Start_5 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_3 String) (Start_12 String) (StartInt_2 Int) (Start_10 String) (StartBool_3 Bool) (StartInt_7 Int) (Start_8 String) (StartInt_8 Int) (StartInt_6 Int) (Start_7 String) (StartInt_9 Int) (StartBool_4 Bool) (Start_6 String) (StartInt_1 Int) (Start_11 String) (Start_13 String) (StartBool_2 Bool) (StartBool_5 Bool) (Start_15 String) (StartInt_10 Int) (StartInt_3 Int) (Start_16 String) (Start_4 String) (Start_2 String))
  ((Start String (y "1" "b" (str.++ Start_1 Start_1) (str.at Start_1 StartInt_1) (str.replace Start_2 Start_1 Start) (str.from_int StartInt_2) (ite StartBool Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_1) (str.indexof Start_16 Start_13 StartInt_10)))
   (StartBool Bool (true false (and StartBool_1 StartBool_3) (str.suffixof Start_11 Start_3) (str.contains Start_5 Start_12)))
   (Start_1 String ("0" (str.replace Start Start_8 Start_12)))
   (Start_9 String ("b" (str.substr Start_10 StartInt_6 StartInt_2)))
   (StartInt_4 Int (1 0 (str.indexof Start_6 Start_6 StartInt) (str.to_int Start_3)))
   (Start_14 String (y))
   (Start_5 String ("a" "1" "0" (str.substr Start_6 StartInt_3 StartInt_2) (ite StartBool_3 Start_7 Start_7)))
   (StartInt_5 Int (1 0 (str.indexof Start_9 Start_3 StartInt_3) (str.to_int Start_7)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (str.< Start_5 Start_3) (= Start_3 Start) (= StartInt StartInt_2)))
   (Start_3 String ("a" x (str.++ Start Start_4) (str.substr Start_3 StartInt_3 StartInt) (ite StartBool_1 Start_4 Start_3)))
   (Start_12 String ("1" (str.at Start_2 StartInt_9) (str.substr Start_4 StartInt_4 StartInt_10) (str.replace Start_11 Start_9 Start_13) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start_11)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.to_int Start_3)))
   (Start_10 String ("1" "b" y "" (str.++ Start_2 Start_7) (str.at Start_3 StartInt_4)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_3 StartBool_1) (str.< Start Start) (str.<= Start_7 Start_6) (str.prefixof Start_5 Start_5) (str.suffixof Start_1 Start_6) (str.contains Start_5 Start_1) (= Start_8 Start_2) (<= StartInt StartInt_4)))
   (StartInt_7 Int (1))
   (Start_8 String (y (str.replace Start_3 Start_2 Start_7) (str.from_int StartInt_5)))
   (StartInt_8 Int (0 (str.indexof Start_11 Start_11 StartInt_2)))
   (StartInt_6 Int (1 (str.len Start) (str.indexof Start Start_4 StartInt)))
   (Start_7 String (y (str.at Start_3 StartInt_3) (str.replace Start Start_5 Start_1) (str.from_int StartInt_2)))
   (StartInt_9 Int (0 (str.len Start_2) (str.to_int Start_7)))
   (StartBool_4 Bool (false true (and StartBool_1 StartBool_1) (str.< Start_4 Start_9) (str.<= Start_1 Start_8) (str.suffixof Start_9 Start_2) (= StartInt_7 StartInt_6)))
   (Start_6 String (y (str.substr Start StartInt_2 StartInt) (str.replace Start_1 Start_6 Start_11) (str.from_int StartInt_7) (ite StartBool Start_8 Start_9)))
   (StartInt_1 Int (0 1 (str.len Start_12) (str.indexof Start Start_13 StartInt_5)))
   (Start_11 String ("0" "1" y "b" "a" (str.from_int StartInt_8)))
   (Start_13 String ("0" (str.++ Start_14 Start_4) (str.at Start_10 StartInt_4) (str.substr Start_13 StartInt_10 StartInt_7) (str.from_int StartInt_4) (ite StartBool_2 Start_12 Start_11)))
   (StartBool_2 Bool (true (and StartBool_5 StartBool_5) (str.<= Start_8 Start_5) (str.prefixof Start_1 Start_10) (str.suffixof Start_2 Start_2) (str.contains Start_7 Start_11) (= Start_2 Start_2) (= StartInt_8 StartInt_8)))
   (StartBool_5 Bool (false (not StartBool_5) (and StartBool_2 StartBool_3) (str.<= Start_12 Start_9) (str.prefixof Start_12 Start_9) (= StartInt_8 StartInt_3)))
   (Start_15 String ("a" "b" "0" "1" (str.++ Start_4 Start_12) (str.substr Start StartInt_8 StartInt_1) (ite StartBool Start_3 Start_4)))
   (StartInt_10 Int (0 1 (str.len Start_8)))
   (StartInt_3 Int (1 0 (str.len Start_1)))
   (Start_16 String ("a" (str.substr Start_3 StartInt_4 StartInt_1) (str.from_int StartInt_4)))
   (Start_4 String (x "" (str.substr Start_9 StartInt_5 StartInt_5) (str.replace Start_11 Start_8 Start_8) (str.from_int StartInt_9)))
   (Start_2 String (y (str.++ Start_15 Start_7) (str.substr Start_5 StartInt_3 StartInt_8) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x (str.indexof x "0" 0)) "b")))

(check-synth)
