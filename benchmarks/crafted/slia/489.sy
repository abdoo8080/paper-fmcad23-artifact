(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_8 String) (Start_6 String) (StartInt_5 Int) (Start_4 String) (StartInt_6 Int) (StartInt_3 Int) (Start_1 String) (Start_5 String) (StartInt_1 Int) (Start_2 String) (StartBool_1 Bool) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int))
  ((Start String ("a" (str.++ Start Start_1) (str.at Start_1 StartInt) (str.replace Start_1 Start Start_1) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start Start_3 StartInt_4)))
   (StartBool Bool (true (str.< Start Start_1) (str.prefixof Start_4 Start_4) (str.suffixof Start_2 Start_3) (= Start_4 Start_6) (= StartInt StartInt_5) (<= StartInt_4 StartInt_6)))
   (Start_7 String ("1" (str.++ Start_8 Start_1) (str.substr Start StartInt_4 StartInt_2)))
   (Start_8 String ("0" (str.++ Start_1 Start_6) (str.substr Start_2 StartInt_3 StartInt_4) (str.from_int StartInt_5) (ite StartBool Start_6 Start_4)))
   (Start_6 String ("a" "1" (str.++ Start Start_6) (str.at Start_3 StartInt) (str.replace Start_7 Start_5 Start_8)))
   (StartInt_5 Int (0))
   (Start_4 String (y (str.substr Start StartInt StartInt_3) (ite StartBool Start_4 Start)))
   (StartInt_6 Int (1 0))
   (StartInt_3 Int (0 1 (str.indexof Start_2 Start_5 StartInt_2) (str.to_int Start_4)))
   (Start_1 String ("b" (str.++ Start_2 Start_1) (str.substr Start StartInt_1 StartInt) (ite StartBool Start_2 Start)))
   (Start_5 String ("a" (str.at Start_1 StartInt_2)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_2 Start StartInt)))
   (Start_2 String ("0" (str.substr Start StartInt_1 StartInt_1) (str.replace Start_3 Start Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (str.< Start Start_1) (str.contains Start_1 Start_3) (= Start_3 Start) (<= StartInt StartInt)))
   (Start_3 String ("" (str.at Start_4 StartInt_1) (str.substr Start_5 StartInt_1 StartInt_1) (str.replace Start_4 Start_3 Start_4)))
   (StartInt_2 Int (1 (str.len Start)))
   (StartInt_4 Int (1 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt_4) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace x "0" "1") y)))

(check-synth)
