(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartBool_4 Bool) (Start_13 String) (StartBool_3 Bool) (Start_8 String) (Start_2 String) (Start_9 String) (Start_14 String) (StartInt_5 Int) (Start_6 String) (StartInt_2 Int) (StartInt_1 Int) (Start_12 String) (Start_3 String) (Start_11 String) (Start_5 String) (StartInt_8 Int) (StartInt_3 Int) (StartInt_4 Int) (StartBool_2 Bool) (Start_4 String) (Start_10 String) (Start_7 String) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_6 Int))
  ((Start String (y "a" "1" "0" "b" (str.++ Start Start_1) (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartInt Int (0 1 (str.indexof Start_10 Start_13 StartInt)))
   (StartBool Bool (true (str.contains Start_4 Start_2) (<= StartInt_3 StartInt_4)))
   (Start_1 String ("b" (str.at Start_11 StartInt_2) (str.replace Start_7 Start_4 Start_12)))
   (StartBool_4 Bool (false true (and StartBool_1 StartBool_1) (str.prefixof Start_4 Start_14) (str.contains Start_3 Start_6) (= Start_7 Start_5) (<= StartInt_7 StartInt_4)))
   (Start_13 String (x "b" (str.at Start_9 StartInt_3) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_1 Start_6 Start_7) (str.from_int StartInt_1)))
   (StartBool_3 Bool (true (not StartBool_4) (str.< Start_8 Start_1) (str.<= Start_5 Start_7) (str.suffixof Start Start_4) (str.contains Start_12 Start_13) (= Start_2 Start_2) (= StartInt_3 StartInt_2) (<= StartInt_1 StartInt)))
   (Start_8 String ("1" x (str.from_int StartInt_7)))
   (Start_2 String (y (str.at Start_3 StartInt_6) (str.replace Start Start_12 Start_3) (str.from_int StartInt_7) (ite StartBool_2 Start_7 Start_1)))
   (Start_9 String ("0" x "b" "1" (str.substr Start_8 StartInt StartInt_6) (str.replace Start_3 Start Start_8) (str.from_int StartInt_4)))
   (Start_14 String ("0" "a" (str.at Start_7 StartInt_3) (str.from_int StartInt_8)))
   (StartInt_5 Int (0 (str.indexof Start_9 Start StartInt_1)))
   (Start_6 String ("1" y "a" "0" "" "b" (str.++ Start_1 Start_4) (str.at Start_4 StartInt_2) (str.substr Start_2 StartInt_1 StartInt_2)))
   (StartInt_2 Int (1 0 (str.indexof Start_4 Start StartInt_3)))
   (StartInt_1 Int (1 (str.indexof Start_2 Start_3 StartInt_1)))
   (Start_12 String (y (str.++ Start_11 Start_9) (str.at Start StartInt_4) (ite StartBool_3 Start_2 Start_2)))
   (Start_3 String ("" "a" x (str.++ Start_3 Start_2) (str.replace Start Start_4 Start_2) (ite StartBool Start_5 Start_6)))
   (Start_11 String ("" "1" x "0" "a" (str.++ Start_1 Start_3) (str.from_int StartInt_1)))
   (Start_5 String ("1" (str.at Start_4 StartInt_1) (str.substr Start_4 StartInt_3 StartInt_4) (str.from_int StartInt_4)))
   (StartInt_8 Int (1 (str.indexof Start_12 Start_11 StartInt_2)))
   (StartInt_3 Int (1 (str.to_int Start_3)))
   (StartInt_4 Int (1 0 (str.indexof Start_2 Start StartInt_3) (str.to_int Start_3)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_7 Start_5) (str.prefixof Start_7 Start_1) (str.suffixof Start_8 Start_5) (str.contains Start_3 Start_9) (= StartInt_5 StartInt_2) (<= StartInt_6 StartInt_3)))
   (Start_4 String ("1" (str.++ Start_4 Start_3) (str.substr Start_7 StartInt_1 StartInt_3)))
   (Start_10 String (y (str.from_int StartInt)))
   (Start_7 String ("1" (str.++ Start Start_4) (ite StartBool_1 Start_2 Start_5)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_1) (str.< Start_5 Start_7) (str.<= Start_7 Start_4) (str.prefixof Start Start_1) (str.contains Start Start_3) (= Start_7 Start_5) (<= StartInt StartInt_3)))
   (StartInt_7 Int (1 (str.to_int Start_8)))
   (StartInt_6 Int (0 1 (str.indexof Start_10 Start_10 StartInt_2) (str.to_int Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof x y 1))))

(check-synth)
