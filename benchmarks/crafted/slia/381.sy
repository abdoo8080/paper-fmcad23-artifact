(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartInt_1 Int) (Start_9 String) (Start_5 String) (Start_10 String) (StartInt_6 Int) (StartBool_4 Bool) (StartInt_5 Int) (Start_11 String) (Start_1 String) (StartInt_2 Int) (StartInt_4 Int) (Start_2 String) (Start_3 String) (StartBool_1 Bool) (StartBool_3 Bool) (Start_7 String) (Start_4 String) (Start_6 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_8 String))
  ((Start String (x "0" (str.from_int StartInt)))
   (StartInt Int (1 0 (str.indexof Start Start_1 StartInt) (str.to_int Start_1)))
   (StartBool Bool (false (str.<= Start_8 Start_8) (str.suffixof Start_5 Start_7) (= Start_11 Start_3) (<= StartInt_3 StartInt_4)))
   (StartBool_5 Bool (true (str.< Start_9 Start_10) (str.contains Start_5 Start) (= Start_7 Start_1) (= StartInt_1 StartInt_6)))
   (StartInt_1 Int (0 1 (str.len Start_5) (str.indexof Start_1 Start_6 StartInt_5) (str.to_int Start_7)))
   (Start_9 String (x (str.at Start_5 StartInt_1) (str.substr Start_6 StartInt_3 StartInt_6) (str.from_int StartInt_4) (ite StartBool_5 Start_10 Start_3)))
   (Start_5 String ("b" (str.at Start_3 StartInt) (str.from_int StartInt_6) (ite StartBool_4 Start_6 Start_8)))
   (Start_10 String ("1" "b" "" "0" (str.++ Start Start_1) (str.at Start_3 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_8 Start_9)))
   (StartInt_6 Int (0 (str.len Start_3)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_3) (str.< Start_5 Start_7) (str.<= Start_8 Start_8) (str.prefixof Start Start_7) (= Start Start_2) (= StartInt StartInt_6) (<= StartInt_2 StartInt_1)))
   (StartInt_5 Int (1 0 (str.to_int Start_6)))
   (Start_11 String ("" "a" (str.substr Start_5 StartInt_6 StartInt_5)))
   (Start_1 String (y (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_1) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.indexof Start Start_1 StartInt_4)))
   (StartInt_4 Int (1 0 (str.to_int Start_6)))
   (Start_2 String ("a" "1" y x (str.++ Start_3 Start_4) (str.substr Start_1 StartInt StartInt) (str.replace Start_4 Start_4 Start_5) (ite StartBool_1 Start_6 Start_7)))
   (Start_3 String ("a" (str.++ Start_9 Start_6) (str.at Start StartInt_6) (str.replace Start_3 Start_5 Start_1)))
   (StartBool_1 Bool (true (not StartBool_3) (str.< Start_4 Start_2) (str.suffixof Start Start_7)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_3 StartBool_4) (str.< Start_1 Start_8) (str.<= Start_3 Start_8) (str.suffixof Start_1 Start_8) (str.contains Start_7 Start) (= StartInt_5 StartInt_4) (<= StartInt StartInt_4)))
   (Start_7 String ("1" x "" (str.substr Start_1 StartInt StartInt_1) (str.replace Start_7 Start_3 Start_6) (ite StartBool_1 Start_1 Start_1)))
   (Start_4 String ("b" y (str.replace Start_5 Start Start_4) (str.from_int StartInt_4)))
   (Start_6 String ("a" (str.++ Start_8 Start_6) (str.at Start StartInt_2) (str.substr Start_7 StartInt_3 StartInt_2) (str.from_int StartInt_4) (ite StartBool_2 Start_3 Start_6)))
   (StartBool_2 Bool (false (not StartBool_1) (str.<= Start_2 Start) (str.suffixof Start_4 Start_4) (= StartInt_4 StartInt_1)))
   (StartInt_3 Int (1 (str.len Start_8)))
   (Start_8 String (y x "" "1" (str.++ Start_3 Start_1) (str.at Start_5 StartInt_2) (str.replace Start_3 Start_6 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< x y) "0" "1")))

(check-synth)
