(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_10 Int) (Start_15 String) (StartBool_5 Bool) (StartInt_5 Int) (Start_3 String) (Start_11 String) (Start_6 String) (Start_14 String) (Start_8 String) (StartInt_3 Int) (Start_5 String) (Start_4 String) (Start_7 String) (StartInt_1 Int) (Start_2 String) (Start_10 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_13 String) (StartInt_4 Int) (StartInt_6 Int) (StartInt_2 Int) (Start_12 String) (StartBool_1 Bool) (StartInt_8 Int) (Start_1 String) (Start_9 String) (StartBool_3 Bool) (StartInt_9 Int))
  ((Start String ("" "1" (str.++ Start_1 Start_2) (str.at Start_3 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_1 Start_3 Start_3) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.len Start_12) (str.indexof Start_3 Start_10 StartInt_1) (str.to_int Start_4)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.prefixof Start_12 Start_9) (str.suffixof Start_8 Start_5) (str.contains Start_9 Start_8) (= Start_7 Start_9) (= StartInt_7 StartInt_2)))
   (StartBool_4 Bool (false true (and StartBool StartBool) (str.< Start_7 Start) (str.contains Start_4 Start_8) (= Start_1 Start_14) (= StartInt_8 StartInt_5) (<= StartInt_3 StartInt_10)))
   (StartInt_10 Int (1))
   (Start_15 String ("1" "" y "b" (str.at Start_7 StartInt_4) (str.from_int StartInt_10) (ite StartBool_1 Start_8 Start_10)))
   (StartBool_5 Bool (true false (not StartBool_5) (str.< Start_8 Start_7) (str.<= Start_7 Start_13) (str.prefixof Start_14 Start) (str.suffixof Start_1 Start_3) (str.contains Start_4 Start_5) (= Start Start_15)))
   (StartInt_5 Int (1 0 (str.len Start_8) (str.indexof Start_4 Start_5 StartInt_4) (str.to_int Start_3)))
   (Start_3 String ("1" "" (str.at Start StartInt) (str.from_int StartInt_3)))
   (Start_11 String ("0" "a" "b" y "" (str.at Start_5 StartInt_1)))
   (Start_6 String ("0" "1" "a" (str.substr Start_5 StartInt_8 StartInt_2) (str.replace Start_8 Start_3 Start_3) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_3)))
   (Start_14 String ("a" x "0" "b" (str.++ Start_13 Start_12) (str.substr Start_9 StartInt_1 StartInt_9)))
   (Start_8 String (x (str.at Start_9 StartInt_3) (str.substr Start_10 StartInt_1 StartInt_5) (str.from_int StartInt_2) (ite StartBool Start_7 Start_11)))
   (StartInt_3 Int (0 (str.indexof Start Start_4 StartInt_2) (str.to_int Start)))
   (Start_5 String (x (str.++ Start_1 Start) (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_4 Start_5)))
   (Start_4 String (y (str.++ Start_4 Start_1) (str.substr Start_5 StartInt_3 StartInt_4)))
   (Start_7 String ("a" (str.replace Start_3 Start_8 Start_8) (str.from_int StartInt_2)))
   (StartInt_1 Int (0 (str.to_int Start_2)))
   (Start_2 String ("" y "b" "1" (str.++ Start_4 Start_3) (str.substr Start_4 StartInt_3 StartInt_1) (str.replace Start Start_6 Start_7) (str.from_int StartInt)))
   (Start_10 String ("0" (str.at Start_7 StartInt_5) (str.from_int StartInt_4)))
   (StartInt_7 Int (1 (str.len Start_2) (str.indexof Start Start_12 StartInt_2)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_2 StartBool_3) (str.suffixof Start_1 Start_9) (str.contains Start Start_1) (= Start_4 Start_13) (= StartInt_5 StartInt_9)))
   (Start_13 String ("0" "1" (str.++ Start_14 Start_13) (str.at Start_8 StartInt_6) (ite StartBool Start_2 Start_6)))
   (StartInt_4 Int (0 1 (str.indexof Start_2 Start StartInt_3)))
   (StartInt_6 Int (1 0))
   (StartInt_2 Int (0 1 (str.indexof Start Start_1 StartInt_1)))
   (Start_12 String ("a" x "" (str.at Start_12 StartInt_7) (str.substr Start StartInt_1 StartInt_2)))
   (StartBool_1 Bool (false (not StartBool_1) (str.< Start_2 Start_9) (str.suffixof Start_8 Start_10)))
   (StartInt_8 Int (1 0 (str.len Start_8) (str.indexof Start_7 Start_6 StartInt_7)))
   (Start_1 String ("a" "b" "0" "" x "1" y (str.at Start_7 StartInt_6)))
   (Start_9 String (x (str.++ Start_9 Start_9) (str.at Start_4 StartInt_2) (str.substr Start_10 StartInt_3 StartInt_4) (str.replace Start_3 Start_2 Start_12) (str.from_int StartInt_6)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool_4 StartBool_5) (str.< Start_13 Start_1) (str.<= Start_2 Start_1) (str.prefixof Start_2 Start_9) (str.contains Start_7 Start_6) (= Start_11 Start_2) (= StartInt_7 StartInt_3) (<= StartInt_6 StartInt_4)))
   (StartInt_9 Int (1 0 (str.indexof Start_5 Start_2 StartInt_7) (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.at y 1) "0")))

(check-synth)
