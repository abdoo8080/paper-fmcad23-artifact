(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_11 String) (Start_3 String) (StartInt_6 Int) (Start_1 String) (StartBool_3 Bool) (StartBool_2 Bool) (Start_10 String) (Start_2 String) (Start_4 String) (StartInt_7 Int) (StartInt_3 Int) (StartInt_4 Int) (Start_5 String) (Start_6 String) (Start_9 String) (Start_7 String) (Start_8 String) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_2 Int))
  ((Start String ("a" x y (str.substr Start StartInt_1 StartInt_1) (str.replace Start_1 Start_1 Start)))
   (StartInt Int (1 (str.len Start_8)))
   (StartBool Bool (false true (str.< Start_9 Start_10) (str.<= Start_2 Start_1) (str.prefixof Start_7 Start_4) (= StartInt_7 StartInt_1)))
   (StartInt_1 Int (0 1 (str.len Start_3)))
   (Start_11 String ("1" "a" (str.substr Start_8 StartInt_4 StartInt_3)))
   (Start_3 String ("" x "0" "b" "1" "a" (str.++ Start_6 Start_4) (str.from_int StartInt_4) (ite StartBool_3 Start_6 Start_11)))
   (StartInt_6 Int (1 0 (str.to_int Start_3)))
   (Start_1 String ("a" "0" (str.++ Start Start_2) (str.substr Start StartInt StartInt)))
   (StartBool_3 Bool (false true (and StartBool StartBool_1) (str.suffixof Start_9 Start_1) (= Start_5 Start_5)))
   (StartBool_2 Bool (true (and StartBool StartBool) (str.<= Start_4 Start_8) (str.prefixof Start_7 Start_5) (str.contains Start_6 Start_9) (= Start_10 Start_8) (<= StartInt StartInt_6)))
   (Start_10 String (x "1" y (str.from_int StartInt_3) (ite StartBool_2 Start_8 Start_5)))
   (Start_2 String ("b" (str.++ Start_2 Start) (str.replace Start_3 Start Start_3) (ite StartBool Start_4 Start_4)))
   (Start_4 String (y "1" "a" (str.++ Start_2 Start_2) (str.at Start StartInt_2) (str.substr Start_1 StartInt_3 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_5 Start_4)))
   (StartInt_7 Int (1 (str.to_int Start_9)))
   (StartInt_3 Int (1 (str.indexof Start_5 Start_5 StartInt_4)))
   (StartInt_4 Int (0 1 (str.indexof Start Start_3 StartInt_4)))
   (Start_5 String (y "a" (str.++ Start_6 Start) (str.at Start_6 StartInt_4) (str.substr Start_6 StartInt_4 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_6)))
   (Start_6 String (x "0" (str.++ Start_2 Start_2) (str.substr Start_6 StartInt_2 StartInt_4) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_5)))
   (Start_9 String ("1" x "b" "" y "a" (str.++ Start_10 Start_3) (str.replace Start_7 Start_9 Start_10)))
   (Start_7 String ("a" (str.++ Start_1 Start_2) (str.replace Start_6 Start_5 Start_2) (str.from_int StartInt_6) (ite StartBool_2 Start_7 Start_2)))
   (Start_8 String ("" (str.++ Start_9 Start_7) (str.at Start_5 StartInt_1) (str.replace Start_4 Start_8 Start_6) (ite StartBool_1 Start Start)))
   (StartBool_1 Bool (false (= StartInt_5 StartInt_5)))
   (StartInt_5 Int (1 0))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.indexof Start_6 Start_7 StartInt_2) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ x "1") 0)))

(check-synth)
