(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (Start_2 String) (StartInt_2 Int) (Start_6 String) (Start_3 String) (StartInt_1 Int) (Start_4 String) (StartInt_3 Int) (Start_1 String) (Start_7 String) (Start_8 String))
  ((Start String ("0" (str.at Start StartInt) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartInt Int (0 (str.len Start_1) (str.to_int Start)))
   (StartBool Bool (false (not StartBool) (str.contains Start_5 Start_3) (= Start Start_2)))
   (Start_5 String ("" (str.at Start_5 StartInt_3) (str.substr Start_6 StartInt StartInt_2) (str.replace Start Start_5 Start_7) (str.from_int StartInt_2)))
   (Start_2 String ("1" (str.at Start_4 StartInt_2) (str.substr Start_3 StartInt StartInt_2) (str.replace Start_2 Start_5 Start) (str.from_int StartInt_3)))
   (StartInt_2 Int (1 (str.len Start)))
   (Start_6 String ("b" (str.at Start StartInt_3) (str.from_int StartInt) (ite StartBool Start_5 Start_8)))
   (Start_3 String ("a" (str.++ Start_3 Start) (str.at Start_2 StartInt_1) (str.replace Start Start_4 Start_2)))
   (StartInt_1 Int (0))
   (Start_4 String (y (str.++ Start_2 Start_1) (str.substr Start_4 StartInt_2 StartInt) (str.from_int StartInt_2)))
   (StartInt_3 Int (1))
   (Start_1 String ("a" "0" "b" (str.++ Start_2 Start_1) (str.substr Start_3 StartInt_2 StartInt)))
   (Start_7 String ("0" y (str.substr Start_8 StartInt_3 StartInt_1) (str.from_int StartInt)))
   (Start_8 String (x y "b" (str.substr Start_1 StartInt_3 StartInt_3) (str.replace Start Start_5 Start_4) (str.from_int StartInt_3) (ite StartBool Start_4 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" y x)))

(check-synth)
