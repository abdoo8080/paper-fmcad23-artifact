(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_10 String) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_8 Int) (StartBool_2 Bool) (Start_9 String) (Start_7 String) (StartInt_2 Int) (Start_5 String) (StartInt_5 Int) (Start_4 String) (Start_1 String) (Start_6 String) (StartInt_3 Int) (StartInt_6 Int) (StartInt_7 Int) (Start_8 String) (Start_2 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_3 String))
  ((Start String ("1" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.substr Start StartInt_1 StartInt_2) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.indexof Start_9 Start StartInt_4)))
   (StartBool Bool (false (str.<= Start_2 Start_1) (str.suffixof Start Start_7) (= Start_1 Start_8) (= StartInt_2 StartInt_9)))
   (StartInt_9 Int (1 0 (str.indexof Start_3 Start_5 StartInt_4)))
   (Start_10 String ("" (str.++ Start_3 Start) (str.at Start_3 StartInt_8) (str.replace Start_2 Start_2 Start_1)))
   (StartBool_3 Bool (true (not StartBool) (str.< Start Start_5) (str.prefixof Start_9 Start_9) (str.contains Start_3 Start_3)))
   (StartInt_1 Int (1))
   (StartInt_8 Int (1 0 (str.len Start_9) (str.indexof Start Start_10 StartInt_5) (str.to_int Start_3)))
   (StartBool_2 Bool (true (not StartBool_2) (str.< Start_1 Start_9) (<= StartInt_5 StartInt_3)))
   (Start_9 String ("a" (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start_1)))
   (Start_7 String (x (str.at Start_4 StartInt_3) (str.substr Start_3 StartInt_5 StartInt_4) (str.replace Start_4 Start_6 Start_5) (str.from_int StartInt_2) (ite StartBool Start_6 Start_3)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.indexof Start_2 Start_4 StartInt_3) (str.to_int Start)))
   (Start_5 String ("" (str.++ Start_4 Start_4) (str.at Start_2 StartInt_4) (str.substr Start_2 StartInt_5 StartInt) (str.replace Start_1 Start_1 Start_1)))
   (StartInt_5 Int (0 (str.len Start_6) (str.indexof Start_1 Start_7 StartInt_2) (str.to_int Start_4)))
   (Start_4 String ("a" (str.++ Start_1 Start_4) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_2 Start_6 Start_7) (str.from_int StartInt_2) (ite StartBool Start Start_4)))
   (Start_1 String (x (str.++ Start_10 Start_4) (str.substr Start_6 StartInt_4 StartInt_4)))
   (Start_6 String ("" (str.at Start StartInt_2) (str.substr Start_4 StartInt_2 StartInt_6) (str.from_int StartInt_7) (ite StartBool Start_4 Start_5)))
   (StartInt_3 Int (0 1 (str.indexof Start_3 Start_5 StartInt_1) (str.to_int Start_3)))
   (StartInt_6 Int (0 1 (str.indexof Start_1 Start StartInt_5) (str.to_int Start_4)))
   (StartInt_7 Int (1 0 (str.to_int Start_8)))
   (Start_8 String ("b" x (str.from_int StartInt_3)))
   (Start_2 String ("0" y (str.replace Start_8 Start_4 Start_5) (str.from_int StartInt_7) (ite StartBool_3 Start_6 Start_9)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_4 Start_4 StartInt_7) (str.to_int Start_8)))
   (StartBool_1 Bool (true false (str.< Start_6 Start_3) (str.prefixof Start_7 Start_1)))
   (Start_3 String ("0" (str.++ Start Start_3) (str.substr Start_9 StartInt_4 StartInt_6) (str.from_int StartInt) (ite StartBool_1 Start Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof "0" y 1))))

(check-synth)
