(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (StartInt_4 Int) (Start_8 String) (Start_1 String) (StartInt_1 Int) (Start_2 String) (StartInt_5 Int) (Start_4 String) (StartInt_2 Int) (Start_6 String) (Start_3 String) (StartInt_3 Int) (Start_5 String) (Start_7 String))
  ((Start String ("" (str.++ Start Start) (str.at Start_1 StartInt_1)))
   (StartInt Int (0 1))
   (StartBool Bool (false true (str.<= Start_2 Start_4) (str.prefixof Start_2 Start_2) (<= StartInt_2 StartInt_4)))
   (StartBool_1 Bool (false (str.prefixof Start_3 Start_8) (str.suffixof Start_3 Start_8) (str.contains Start_8 Start_8)))
   (StartInt_4 Int (1 0 (str.indexof Start_6 Start_4 StartInt)))
   (Start_8 String ("" y (str.replace Start_1 Start_5 Start_8)))
   (Start_1 String ("" (str.substr Start_3 StartInt_3 StartInt_1) (str.replace Start_3 Start_1 Start_1) (ite StartBool_1 Start_3 Start_6)))
   (StartInt_1 Int (0 1 (str.to_int Start_2)))
   (Start_2 String ("" "b" (str.++ Start Start_2) (str.at Start_3 StartInt_1) (str.substr Start_3 StartInt_1 StartInt) (ite StartBool Start_1 Start)))
   (StartInt_5 Int (0))
   (Start_4 String ("b" (str.++ Start Start_1) (str.substr Start_6 StartInt StartInt_3) (str.replace Start_1 Start_3 Start_7) (str.from_int StartInt_4)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start Start_3 StartInt_3) (str.to_int Start)))
   (Start_6 String ("" "b" (str.++ Start_3 Start_5) (str.at Start_5 StartInt_4) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_3 Start_2 Start_5) (str.from_int StartInt_2)))
   (Start_3 String ("0" (str.++ Start_1 Start_4) (str.at Start_4 StartInt_2) (str.replace Start_3 Start Start_4) (str.from_int StartInt_1)))
   (StartInt_3 Int (0 1 (str.len Start_5) (str.to_int Start_5)))
   (Start_5 String ("0" "a" "1" (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_2 Start_6 Start_4)))
   (Start_7 String ("0" (str.++ Start_7 Start_6) (str.at Start_2 StartInt_5) (str.replace Start_4 Start_3 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y "1" (str.++ "a" "b")) (str.replace "1" "" "b") "a")))

(check-synth)
