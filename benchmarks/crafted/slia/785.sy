(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_1 String) (Start_2 String) (Start_9 String) (Start_10 String) (StartBool_4 Bool) (StartInt_1 Int) (Start_5 String) (StartBool_3 Bool) (StartInt_3 Int) (Start_3 String) (Start_4 String) (StartBool_1 Bool) (Start_7 String) (StartInt_5 Int) (Start_11 String) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_4 Int) (Start_6 String) (Start_8 String))
  ((Start String ("b" "0" x "" y (str.++ Start_1 Start_1) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_8) (str.indexof Start_1 Start_4 StartInt)))
   (StartBool Bool (false (not StartBool_2) (and StartBool StartBool_2) (str.<= Start Start_5) (str.prefixof Start_10 Start_5) (str.suffixof Start_2 Start_5) (str.contains Start_5 Start_9) (<= StartInt_5 StartInt_6)))
   (StartInt_6 Int (1 (str.len Start_10) (str.indexof Start_6 Start_3 StartInt_4) (str.to_int Start_1)))
   (Start_1 String ("" "1" x (str.replace Start_5 Start_1 Start_7)))
   (Start_2 String ("b" "0" (str.++ Start_1 Start_6) (str.at Start_5 StartInt_5) (str.replace Start_4 Start_8 Start_1) (str.from_int StartInt_1)))
   (Start_9 String ("" "a" "1" (str.replace Start Start_7 Start_4)))
   (Start_10 String ("0" (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_11 Start_8 Start_9) (str.from_int StartInt_4) (ite StartBool_2 Start_9 Start_2)))
   (StartBool_4 Bool (false (str.< Start_8 Start_1) (str.<= Start_9 Start_4) (str.prefixof Start Start_4) (str.contains Start_10 Start_10) (= Start_1 Start_6) (<= StartInt StartInt_1)))
   (StartInt_1 Int (0 (str.len Start)))
   (Start_5 String (y (str.at Start_1 StartInt_5) (str.substr Start_6 StartInt_4 StartInt_4) (str.replace Start_8 Start_10 Start_11)))
   (StartBool_3 Bool (true false (not StartBool_4) (str.< Start_1 Start_7) (str.<= Start_6 Start_6) (str.prefixof Start_3 Start_4) (str.suffixof Start_3 Start_7) (= Start_7 Start_1) (<= StartInt_4 StartInt)))
   (StartInt_3 Int (1 0 (str.len Start_3)))
   (Start_3 String (x (str.++ Start_1 Start_3) (str.at Start_3 StartInt_1) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_1 Start_4 Start_4) (str.from_int StartInt_2)))
   (Start_4 String ("0" "b" (str.replace Start_3 Start_5 Start_6) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_2 StartBool) (str.< Start_4 Start_4) (str.<= Start_7 Start_2) (str.prefixof Start_6 Start_2) (str.suffixof Start_1 Start_6) (= Start_6 Start_3) (= StartInt_3 StartInt_3) (<= StartInt_1 StartInt_3)))
   (Start_7 String ("" "b" (str.at Start_6 StartInt_1) (ite StartBool_1 Start_6 Start_7)))
   (StartInt_5 Int (1 0 (str.indexof Start_5 Start StartInt_1)))
   (Start_11 String (x (str.substr Start_9 StartInt_3 StartInt) (str.from_int StartInt)))
   (StartInt_2 Int (0))
   (StartBool_2 Bool (false true (str.prefixof Start Start) (str.suffixof Start_6 Start_5) (str.contains Start_5 Start_4) (= StartInt StartInt_4) (<= StartInt_5 StartInt_3)))
   (StartInt_4 Int (1 (str.len Start) (str.indexof Start_6 Start_5 StartInt_4) (str.to_int Start_7)))
   (Start_6 String (x (ite StartBool_3 Start_2 Start_8)))
   (Start_8 String ("1" "a" "b" x (ite StartBool_2 Start_1 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (<= (str.indexof "0" y 0) 0) x y)))

(check-synth)
