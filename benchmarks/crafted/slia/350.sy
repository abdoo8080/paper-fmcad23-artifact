(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartBool_3 Bool) (StartInt_6 Int) (Start_9 String) (Start_10 String) (Start_3 String) (Start_5 String) (Start_2 String) (Start_8 String) (Start_6 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_1 String) (Start_4 String) (StartInt_4 Int) (StartInt_1 Int) (Start_7 String) (StartInt_3 Int) (StartInt_2 Int))
  ((Start String (y (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start Start_2 Start) (ite StartBool Start_2 Start_3)))
   (StartInt Int (1 (str.len Start_6) (str.to_int Start_10)))
   (StartBool Bool (false true (and StartBool_3 StartBool) (str.<= Start_6 Start_10) (str.contains Start_3 Start_5) (= StartInt_6 StartInt_6) (<= StartInt_3 StartInt_3)))
   (StartInt_5 Int (0 (str.indexof Start_4 Start StartInt_4) (str.to_int Start_8)))
   (StartBool_3 Bool (false true (str.< Start_10 Start_4) (str.suffixof Start_6 Start_2) (str.contains Start_7 Start_8)))
   (StartInt_6 Int (0))
   (Start_9 String ("1" (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_6 Start_8 Start_3) (str.from_int StartInt_2) (ite StartBool_3 Start Start_3)))
   (Start_10 String (y "a" (str.substr Start_4 StartInt_3 StartInt_5) (str.replace Start_6 Start_2 Start_8)))
   (Start_3 String ("a" x y (str.++ Start_3 Start_3) (str.substr Start StartInt StartInt_2) (ite StartBool Start Start)))
   (Start_5 String ("" "0" x "b" (str.++ Start_3 Start_8) (str.substr Start_6 StartInt_2 StartInt_4) (ite StartBool_1 Start_3 Start_1)))
   (Start_2 String ("a" (str.++ Start Start) (str.at Start_4 StartInt_2)))
   (Start_8 String (y (str.++ Start_6 Start_8) (str.at Start_5 StartInt_2) (str.substr Start_3 StartInt_1 StartInt_3)))
   (Start_6 String ("1" "a" (str.substr Start_7 StartInt_1 StartInt_2) (str.replace Start_7 Start Start_8) (str.from_int StartInt_2)))
   (StartBool_2 Bool (false true (str.< Start_4 Start_4) (str.<= Start_6 Start_2) (str.contains Start_1 Start_6) (= StartInt_3 StartInt_2)))
   (StartBool_1 Bool (false (not StartBool) (str.< Start_4 Start_4) (str.suffixof Start_5 Start_6) (= Start_1 Start_1)))
   (Start_1 String ("a" "b" "" x (str.++ Start_9 Start_4) (str.at Start StartInt)))
   (Start_4 String ("a" (str.at Start StartInt_3) (str.replace Start Start_4 Start_2) (str.from_int StartInt_3) (ite StartBool_1 Start Start_4)))
   (StartInt_4 Int (1 (str.indexof Start_2 Start_4 StartInt_1) (str.to_int Start)))
   (StartInt_1 Int (0 (str.to_int Start)))
   (Start_7 String ("a" "0" (ite StartBool_2 Start_7 Start_4)))
   (StartInt_3 Int (1 (str.indexof Start_1 Start StartInt_1) (str.to_int Start_3)))
   (StartInt_2 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" y "a")))

(check-synth)
