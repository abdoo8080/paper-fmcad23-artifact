(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (StartBool_3 Bool) (Start_10 String) (Start_2 String) (StartInt_7 Int) (StartInt_3 Int) (Start_9 String) (StartInt_4 Int) (StartInt_5 Int) (Start_7 String) (Start_8 String) (Start_4 String) (Start_3 String) (Start_6 String) (StartInt_8 Int) (StartBool_1 Bool) (Start_1 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_11 String) (StartInt_6 Int) (StartInt_1 Int) (Start_5 String))
  ((Start String ("a" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt) (str.replace Start Start Start) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.len Start) (str.to_int Start_9)))
   (StartBool Bool (false (str.< Start_7 Start_5) (str.prefixof Start_9 Start_3) (str.contains Start_3 Start) (= StartInt StartInt_6) (<= StartInt StartInt_5)))
   (StartInt_9 Int (0 (str.to_int Start_4)))
   (StartBool_3 Bool (true (not StartBool) (str.prefixof Start_11 Start_9) (= StartInt_4 StartInt_1)))
   (Start_10 String (x "0" "b" "a" "" "1"))
   (Start_2 String ("0" (str.at Start_5 StartInt_8) (str.replace Start_8 Start Start_2) (str.from_int StartInt_2) (ite StartBool Start_9 Start_10)))
   (StartInt_7 Int (1 0 (str.len Start_5)))
   (StartInt_3 Int (1 0 (str.len Start_7) (str.indexof Start Start_8 StartInt_4) (str.to_int Start_1)))
   (Start_9 String ("1" (str.replace Start_11 Start_11 Start_2) (str.from_int StartInt_8) (ite StartBool_2 Start_2 Start_1)))
   (StartInt_4 Int (0))
   (StartInt_5 Int (0 (str.to_int Start_4)))
   (Start_7 String ("" y (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt_6)))
   (Start_8 String ("0" (str.from_int StartInt_7) (ite StartBool_1 Start_4 Start_7)))
   (Start_4 String ("b" (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt_4)))
   (Start_3 String (x "" (str.++ Start_1 Start_2) (str.at Start_3 StartInt_3) (str.from_int StartInt_4) (ite StartBool_1 Start Start_4)))
   (Start_6 String ("1" (str.++ Start_3 Start_1) (str.at Start_7 StartInt_5) (ite StartBool_2 Start_2 Start_4)))
   (StartInt_8 Int (0))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_1) (str.< Start Start_1) (str.<= Start_5 Start_2) (str.contains Start Start_6) (= Start_6 Start_5) (= StartInt_3 StartInt_2) (<= StartInt_1 StartInt)))
   (Start_1 String ("" x y "1" "0" "a" (str.++ Start_2 Start_1) (str.at Start_3 StartInt_1) (str.substr Start StartInt_1 StartInt_2)))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start_1 StartInt)))
   (StartBool_2 Bool (true (str.< Start_3 Start_2) (str.prefixof Start_3 Start_4) (<= StartInt_5 StartInt_1)))
   (Start_11 String (x y (str.++ Start_5 Start_1) (str.substr Start_6 StartInt_4 StartInt_8) (str.replace Start_3 Start_3 Start_10) (str.from_int StartInt_9) (ite StartBool_3 Start_10 Start_7)))
   (StartInt_6 Int (0 (str.to_int Start_6)))
   (StartInt_1 Int (0 1 (str.indexof Start_1 Start_1 StartInt) (str.to_int Start_1)))
   (Start_5 String ("1" x "a" "" (str.at Start_3 StartInt) (str.replace Start_6 Start_6 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y 1)))

(check-synth)
