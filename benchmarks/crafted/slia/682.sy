(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_13 String) (StartInt_7 Int) (Start_1 String) (StartInt_1 Int) (StartInt_6 Int) (StartInt_4 Int) (StartBool_2 Bool) (Start_11 String) (Start_8 String) (Start_14 String) (Start_12 String) (StartBool_1 Bool) (Start_3 String) (Start_4 String) (StartInt_5 Int) (StartInt_2 Int) (StartInt_3 Int) (Start_6 String) (Start_2 String) (Start_7 String) (StartBool_3 Bool) (Start_9 String) (StartBool_4 Bool) (Start_5 String) (Start_10 String))
  ((Start String (y x (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_1 Start Start_2) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 (str.len Start_5) (str.indexof Start Start_9 StartInt_8)))
   (StartBool Bool (true (str.<= Start_13 Start_4) (str.prefixof Start_11 Start_4) (<= StartInt_7 StartInt_5)))
   (StartInt_8 Int (0 1 (str.to_int Start_12)))
   (Start_13 String ("1" x (str.++ Start_8 Start_1) (str.substr Start_6 StartInt_7 StartInt_1) (str.replace Start_12 Start_12 Start_4)))
   (StartInt_7 Int (0 1 (str.len Start_2)))
   (Start_1 String ("0" (str.++ Start_1 Start_3) (str.substr Start_4 StartInt_1 StartInt_5) (str.from_int StartInt_6) (ite StartBool_4 Start_5 Start_13)))
   (StartInt_1 Int (1 (str.len Start_2)))
   (StartInt_6 Int (1 0 (str.len Start_4)))
   (StartInt_4 Int (0))
   (StartBool_2 Bool (true false (str.prefixof Start_12 Start_12) (str.suffixof Start_11 Start_12) (= StartInt_4 StartInt_4) (<= StartInt_3 StartInt_5)))
   (Start_11 String ("1" (str.++ Start_9 Start_2) (str.at Start_11 StartInt_1) (str.substr Start_9 StartInt_2 StartInt_2) (ite StartBool_3 Start_4 Start_7)))
   (Start_8 String ("b" y "1" "0" (str.at Start_9 StartInt) (str.substr Start_4 StartInt StartInt) (str.replace Start_3 Start Start_2)))
   (Start_14 String ("b" (str.++ Start Start_1) (str.replace Start_2 Start_10 Start_5) (str.from_int StartInt_6)))
   (Start_12 String ("0" y (str.at Start_1 StartInt) (str.substr Start_4 StartInt_6 StartInt_5)))
   (StartBool_1 Bool (false true (str.prefixof Start_3 Start_1) (str.suffixof Start_3 Start)))
   (Start_3 String ("0" (str.replace Start_3 Start Start_4) (str.from_int StartInt_1)))
   (Start_4 String ("" (str.++ Start_1 Start_4) (str.replace Start_3 Start Start_5)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.to_int Start_4)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_5 Start_3 StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_2) (str.indexof Start_5 Start_1 StartInt_3) (str.to_int Start)))
   (Start_6 String ("b" (str.++ Start_2 Start_5) (str.replace Start_7 Start_5 Start_8) (ite StartBool_2 Start_5 Start_2)))
   (Start_2 String ("" (str.at Start_1 StartInt) (ite StartBool_2 Start_4 Start_6)))
   (Start_7 String ("0" "" y (ite StartBool_1 Start_8 Start_10)))
   (StartBool_3 Bool (true false (str.<= Start_8 Start_9) (str.contains Start_4 Start_11) (= Start_1 Start_1) (= StartInt_3 StartInt) (<= StartInt_2 StartInt)))
   (Start_9 String (x "" (str.++ Start_4 Start_5) (str.replace Start_7 Start_2 Start_4) (ite StartBool Start_9 Start_7)))
   (StartBool_4 Bool (true false (str.suffixof Start_12 Start_7) (str.contains Start_8 Start_14) (= Start_10 Start_14)))
   (Start_5 String ("0" (str.at Start_5 StartInt) (str.replace Start Start_5 Start_2) (str.from_int StartInt)))
   (Start_10 String (y x "b" (str.++ Start_7 Start_2) (str.substr Start_10 StartInt_2 StartInt_3) (str.replace Start_11 Start Start_10) (ite StartBool_2 Start_4 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "1" y "a") 1 (str.indexof y "0" 0))))

(check-synth)
