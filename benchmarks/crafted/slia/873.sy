(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_3 String) (StartInt_1 Int) (StartInt_2 Int) (Start_2 String) (Start_1 String))
  ((Start String ("a" (str.from_int StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 (str.len Start_2) (str.to_int Start_2)))
   (StartBool Bool (true (str.< Start_3 Start_1) (str.suffixof Start_3 Start_3) (= Start_1 Start) (= StartInt_1 StartInt_2)))
   (Start_4 String ("b" y x "1" (str.++ Start_1 Start_4) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0 (str.len Start) (str.indexof Start_3 Start_1 StartInt_1) (str.to_int Start_2)))
   (StartBool_1 Bool (true (str.<= Start_2 Start_4) (str.suffixof Start Start_1) (str.contains Start_1 Start_2) (= Start_2 Start_2) (= StartInt_3 StartInt_3)))
   (Start_3 String (y (str.++ Start Start) (str.substr Start_3 StartInt StartInt)))
   (StartInt_1 Int (1 (str.len Start_2) (str.indexof Start_1 Start_3 StartInt)))
   (StartInt_2 Int (0 (str.len Start_1) (str.to_int Start)))
   (Start_2 String ("0" "b" (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_1 Start Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start)))
   (Start_1 String (y x (str.++ Start_1 Start) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_2 Start Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= x "1") y "b")))

(check-synth)
