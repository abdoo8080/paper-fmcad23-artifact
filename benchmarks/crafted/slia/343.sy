(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_8 String) (StartBool_4 Bool) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_3 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_4 Int) (Start_4 String) (Start_13 String) (Start_3 String) (Start_10 String) (Start_2 String) (Start_11 String) (StartInt_5 Int) (Start_5 String) (StartInt_7 Int) (StartBool_5 Bool) (Start_6 String) (Start_9 String) (StartInt_1 Int) (StartBool_6 Bool) (Start_1 String) (Start_12 String) (StartInt_6 Int) (Start_14 String))
  ((Start String ("b" "0" x (str.++ Start Start) (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_3) (str.from_int StartInt) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 1))
   (StartBool Bool (true false (and StartBool_4 StartBool_6) (str.<= Start_14 Start_9) (str.prefixof Start_9 Start_7) (= StartInt_7 StartInt_1) (<= StartInt_2 StartInt_3)))
   (Start_7 String ("b" "a" (str.++ Start_7 Start_8) (str.at Start StartInt_4)))
   (Start_8 String ("b" "a" (str.at Start_7 StartInt) (str.substr Start_6 StartInt_4 StartInt_2) (str.replace Start_2 Start_1 Start_2) (ite StartBool_3 Start_3 Start_8)))
   (StartBool_4 Bool (false true (str.< Start_1 Start_4) (str.<= Start_8 Start) (str.suffixof Start_7 Start_2) (<= StartInt StartInt_4)))
   (StartInt_2 Int (0 (str.len Start_1) (str.indexof Start_4 Start_5 StartInt_2) (str.to_int Start_6)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_4) (str.< Start Start) (= StartInt_3 StartInt_3) (<= StartInt_3 StartInt_2)))
   (StartInt_3 Int (1 0 (str.len Start) (str.indexof Start_2 Start_5 StartInt_2)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool StartBool_1) (str.contains Start_5 Start_6) (= StartInt_1 StartInt_4)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool) (str.<= Start_2 Start_4) (str.contains Start Start_6) (<= StartInt_1 StartInt_2)))
   (StartInt_4 Int (0 1))
   (Start_4 String ("a" "b" (str.++ Start_1 Start_3) (str.at Start_3 StartInt_1) (str.from_int StartInt_4) (ite StartBool_1 Start_9 Start_6)))
   (Start_13 String (y "" "1" "a" (str.++ Start_7 Start_8) (str.at Start_13 StartInt_4) (str.substr Start StartInt StartInt_4) (str.replace Start_8 Start_6 Start_7) (str.from_int StartInt_5)))
   (Start_3 String (y x "1" (str.++ Start_4 Start_5) (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (Start_10 String ("1" "0" x "" (str.++ Start Start_2) (str.replace Start_1 Start_6 Start_11) (ite StartBool_4 Start_6 Start_3)))
   (Start_2 String ("a" (str.++ Start_1 Start_10) (str.at Start StartInt)))
   (Start_11 String ("a" y (str.replace Start_7 Start_2 Start_6) (ite StartBool_5 Start_8 Start_9)))
   (StartInt_5 Int (1 (str.indexof Start_5 Start_10 StartInt) (str.to_int Start_2)))
   (Start_5 String ("b" (str.++ Start_6 Start_6) (str.replace Start_7 Start_5 Start_1) (ite StartBool_2 Start_6 Start_2)))
   (StartInt_7 Int (0 (str.indexof Start_1 Start_4 StartInt_7)))
   (StartBool_5 Bool (false true (str.< Start_4 Start_8) (= StartInt_3 StartInt)))
   (Start_6 String (y "a" x "1" "" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_3 StartInt_2) (str.replace Start Start_3 Start) (ite StartBool_1 Start_4 Start_3)))
   (Start_9 String ("0" (str.++ Start_6 Start_7) (str.substr Start_5 StartInt_1 StartInt) (str.replace Start_7 Start_4 Start) (ite StartBool_3 Start_1 Start_8)))
   (StartInt_1 Int (0 1))
   (StartBool_6 Bool (true (str.< Start_14 Start_1) (str.<= Start_12 Start_11) (str.suffixof Start Start_14) (= StartInt_7 StartInt)))
   (Start_1 String ("b" (str.++ Start_12 Start_13) (str.substr Start_5 StartInt_2 StartInt_5) (str.from_int StartInt)))
   (Start_12 String ("b" "" x "a" (str.++ Start Start_14) (str.substr Start_11 StartInt_5 StartInt_6) (str.replace Start_13 Start_10 Start_10) (str.from_int StartInt_5)))
   (StartInt_6 Int (0 1 (str.to_int Start_10)))
   (Start_14 String ("a" (str.substr Start_12 StartInt_2 StartInt_7) (str.from_int StartInt_4) (ite StartBool Start_7 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ "a" "a") (str.len y))))

(check-synth)
