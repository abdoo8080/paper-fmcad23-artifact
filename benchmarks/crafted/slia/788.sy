(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_7 Int) (Start_5 String) (StartBool_3 Bool) (Start_9 String) (Start_3 String) (StartInt_1 Int) (Start_8 String) (StartInt_6 Int) (StartInt_3 Int) (StartBool_2 Bool) (Start_2 String) (StartInt_2 Int) (StartInt_5 Int) (StartBool_4 Bool) (Start_4 String) (StartInt_4 Int) (Start_11 String) (StartBool_1 Bool) (Start_6 String) (Start_10 String) (Start_7 String))
  ((Start String ("a" "1" (str.++ Start Start) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_2 Start_2) (ite StartBool_1 Start_3 Start_2)))
   (StartInt Int (1 (str.len Start_1) (str.to_int Start)))
   (StartBool Bool (false (str.< Start_7 Start_1) (str.<= Start_5 Start) (str.suffixof Start_4 Start_10) (= Start_4 Start_8) (= StartInt StartInt_3)))
   (Start_1 String ("a" "b" (str.++ Start_9 Start_11)))
   (StartInt_7 Int (1 (str.to_int Start_8)))
   (Start_5 String ("1" "0" "a" (str.++ Start_2 Start_3) (ite StartBool Start_5 Start_7)))
   (StartBool_3 Bool (true (str.contains Start Start_6) (= StartInt_1 StartInt) (<= StartInt_6 StartInt_4)))
   (Start_9 String (x (str.++ Start Start_4) (str.replace Start_8 Start_3 Start_6)))
   (Start_3 String (y "1" "a" (str.++ Start_2 Start_3) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt)))
   (StartInt_1 Int (1 (str.len Start_3) (str.indexof Start_6 Start_8 StartInt)))
   (Start_8 String ("0" (str.substr Start_1 StartInt_5 StartInt_3) (ite StartBool_4 Start_9 Start_1)))
   (StartInt_6 Int (0 (str.indexof Start_8 Start_3 StartInt_4)))
   (StartInt_3 Int (0))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_3) (str.< Start_3 Start_5) (str.<= Start_5 Start_6) (str.prefixof Start_7 Start_2) (str.suffixof Start Start_1) (str.contains Start_3 Start_1) (= StartInt StartInt_3)))
   (Start_2 String ("a" "b" (str.++ Start_9 Start_2) (str.from_int StartInt_7)))
   (StartInt_2 Int (0 (str.len Start_4) (str.indexof Start_4 Start StartInt_3)))
   (StartInt_5 Int (0 1 (str.len Start_3) (str.to_int Start_6)))
   (StartBool_4 Bool (true (str.<= Start_3 Start_4) (str.suffixof Start_6 Start_4) (str.contains Start_3 Start_4) (= Start_4 Start) (= StartInt_5 StartInt_5) (<= StartInt_2 StartInt_6)))
   (Start_4 String ("a" "0" (str.++ Start Start_2) (str.replace Start_2 Start_2 Start_4) (str.from_int StartInt_4) (ite StartBool Start_3 Start_2)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.indexof Start_2 Start_2 StartInt_5) (str.to_int Start)))
   (Start_11 String ("1" (str.++ Start_10 Start_3) (str.at Start_1 StartInt_5) (str.substr Start_10 StartInt_4 StartInt_6) (str.from_int StartInt_5)))
   (StartBool_1 Bool (true (str.< Start_10 Start_5) (str.<= Start_9 Start_1) (str.prefixof Start_4 Start) (str.suffixof Start_9 Start_5) (str.contains Start_10 Start_1) (= Start_1 Start) (= StartInt_3 StartInt_5) (<= StartInt_3 StartInt_7)))
   (Start_6 String ("" (str.at Start_4 StartInt_1) (ite StartBool_2 Start_6 Start_3)))
   (Start_10 String ("" "a" "1" (str.++ Start_7 Start_6) (str.at Start_6 StartInt)))
   (Start_7 String ("b" "0" "" (str.at Start_1 StartInt) (str.replace Start_1 Start_7 Start_8) (ite StartBool_4 Start_5 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" "" (str.from_int (str.indexof "0" y 1)))))

(check-synth)
