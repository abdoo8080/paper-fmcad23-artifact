(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_8 String) (StartInt_8 Int) (Start_1 String) (Start_10 String) (StartBool_2 Bool) (StartInt_7 Int) (Start_3 String) (Start_12 String) (Start_4 String) (Start_11 String) (StartInt_2 Int) (StartInt_5 Int) (StartBool_3 Bool) (Start_9 String) (StartInt_6 Int) (Start_2 String) (Start_7 String) (Start_5 String) (Start_6 String) (StartInt_4 Int) (StartInt_3 Int) (StartInt_9 Int) (StartBool_1 Bool))
  ((Start String ("b" "1" (str.++ Start Start_1) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 (str.len Start_9) (str.indexof Start_4 Start_11 StartInt_1) (str.to_int Start_9)))
   (StartBool Bool (false (str.< Start_10 Start_10) (str.<= Start_1 Start_2) (str.contains Start_5 Start_5) (= Start_11 Start_12)))
   (StartInt_1 Int (1 0 (str.len Start_4) (str.indexof Start_10 Start_5 StartInt) (str.to_int Start_10)))
   (Start_8 String (x (str.replace Start_10 Start_7 Start_9) (str.from_int StartInt_6) (ite StartBool_1 Start_2 Start_5)))
   (StartInt_8 Int (0 (str.indexof Start_7 Start_4 StartInt_5)))
   (Start_1 String ("1" (str.++ Start_10 Start_1) (str.at Start_11 StartInt_9) (str.substr Start_6 StartInt_6 StartInt_5) (str.replace Start_3 Start_3 Start_10) (str.from_int StartInt_1) (ite StartBool_3 Start Start_4)))
   (Start_10 String ("0" (str.++ Start_5 Start_5) (str.replace Start_7 Start_5 Start_11) (ite StartBool_1 Start_4 Start_6)))
   (StartBool_2 Bool (false true (str.<= Start_5 Start_2) (str.contains Start_5 Start_1)))
   (StartInt_7 Int (0 1 (str.to_int Start_11)))
   (Start_3 String ("b" (str.replace Start_1 Start Start_2) (str.from_int StartInt)))
   (Start_12 String (y x "1" (str.++ Start_11 Start_11) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_12 Start_6) (str.from_int StartInt_4)))
   (Start_4 String ("1" "0" (str.at Start_3 StartInt_2) (str.substr Start_1 StartInt_5 StartInt)))
   (Start_11 String ("0" "" "b" (str.at Start_6 StartInt_1) (str.from_int StartInt_3)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_1 Start_3 StartInt)))
   (StartInt_5 Int (0 (str.indexof Start_6 Start_4 StartInt_4) (str.to_int Start_5)))
   (StartBool_3 Bool (true (and StartBool_2 StartBool_3) (str.<= Start_8 Start_6) (str.suffixof Start_3 Start_8) (= StartInt_6 StartInt_9) (<= StartInt_8 StartInt_3)))
   (Start_9 String ("b" (str.++ Start_9 Start_3) (str.at Start_10 StartInt_8) (str.substr Start_8 StartInt_5 StartInt_6)))
   (StartInt_6 Int (0))
   (Start_2 String (x (str.++ Start_1 Start) (str.at Start_3 StartInt) (str.replace Start_2 Start_4 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_5)))
   (Start_7 String ("" "b" (str.substr Start_1 StartInt_6 StartInt_4)))
   (Start_5 String ("0" (str.++ Start Start_1) (str.at Start_4 StartInt_3) (str.substr Start_2 StartInt_4 StartInt_2) (str.replace Start_5 Start Start_2)))
   (Start_6 String ("a" x "0" y "1" "" (str.at Start StartInt_1) (ite StartBool_2 Start_5 Start_7)))
   (StartInt_4 Int (1 0 (str.len Start_1) (str.indexof Start Start_1 StartInt_5)))
   (StartInt_3 Int (1))
   (StartInt_9 Int (1 (str.len Start_6) (str.to_int Start_5)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.prefixof Start_8 Start_6) (str.contains Start_9 Start_10) (= StartInt_2 StartInt_6) (<= StartInt_6 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof y x 0))))

(check-synth)
