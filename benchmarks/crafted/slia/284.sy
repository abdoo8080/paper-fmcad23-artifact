(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_25 String) (StartBool_4 Bool) (StartInt_10 Int) (Start_24 String) (Start_22 String) (StartInt_6 Int) (Start_5 String) (Start_10 String) (StartInt_8 Int) (Start_3 String) (StartInt_3 Int) (StartBool_7 Bool) (Start_9 String) (StartBool_5 Bool) (Start_7 String) (Start_26 String) (Start_23 String) (Start_17 String) (Start_18 String) (StartInt_9 Int) (Start_6 String) (Start_21 String) (StartBool_1 Bool) (Start_12 String) (Start_15 String) (StartInt_1 Int) (Start_8 String) (Start_1 String) (StartBool_3 Bool) (StartBool_6 Bool) (StartInt_4 Int) (StartBool_2 Bool) (Start_2 String) (StartInt_7 Int) (Start_13 String) (StartInt_2 Int) (Start_14 String) (Start_11 String) (StartInt_5 Int) (Start_16 String) (Start_20 String) (StartBool_8 Bool) (StartInt_11 Int) (Start_4 String) (Start_19 String))
  ((Start String ("b" (str.substr Start StartInt StartInt) (ite StartBool Start_1 Start)))
   (StartInt Int (0 1 (str.to_int Start_15)))
   (StartBool Bool (true (not StartBool_5) (and StartBool StartBool_7) (str.<= Start_16 Start) (str.suffixof Start_14 Start_10) (str.contains Start_25 Start_4)))
   (Start_25 String (y (str.at Start_4 StartInt_9) (str.substr Start_10 StartInt_1 StartInt_1) (str.replace Start_25 Start_21 Start_7) (ite StartBool_6 Start_15 Start_12)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_5) (str.suffixof Start_17 Start_4) (= StartInt_5 StartInt_5) (<= StartInt_2 StartInt_7)))
   (StartInt_10 Int (1 0 (str.indexof Start_16 Start_13 StartInt_10) (str.to_int Start_15)))
   (Start_24 String ("0" (str.at Start_5 StartInt_8) (str.substr Start_20 StartInt_2 StartInt_5)))
   (Start_22 String ("1" (str.++ Start_13 Start_18) (str.at Start_23 StartInt_3) (str.substr Start_3 StartInt_6 StartInt_6) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_3)))
   (StartInt_6 Int (1 (str.indexof Start_10 Start_21 StartInt_9) (str.to_int Start_22)))
   (Start_5 String ("0" "b" x y (str.++ Start Start_4) (str.at Start_4 StartInt_1) (str.substr Start_8 StartInt_3 StartInt) (ite StartBool_2 Start_7 Start_5)))
   (Start_10 String ("0" "a" (str.at Start StartInt_1) (str.replace Start_5 Start_1 Start_10) (str.from_int StartInt_3)))
   (StartInt_8 Int (0 (str.indexof Start_8 Start_19 StartInt_3) (str.to_int Start_7)))
   (Start_3 String (y (str.at Start_15 StartInt_5)))
   (StartInt_3 Int (1 (str.len Start_10) (str.to_int Start_5)))
   (StartBool_7 Bool (true false (and StartBool_8 StartBool_5) (str.<= Start_18 Start_26) (str.suffixof Start_22 Start_11) (= Start_19 Start_11) (= StartInt_1 StartInt_10) (<= StartInt_6 StartInt_2)))
   (Start_9 String ("b" (str.++ Start_7 Start_4) (str.at Start_7 StartInt_1) (str.replace Start_3 Start_7 Start_5) (ite StartBool_1 Start_1 Start_1)))
   (StartBool_5 Bool (false (str.<= Start_19 Start_6) (str.prefixof Start_10 Start_13) (= StartInt_7 StartInt) (<= StartInt_6 StartInt_9)))
   (Start_7 String ("a" "1" (str.++ Start_6 Start_8)))
   (Start_26 String ("1" x "" (str.at Start_3 StartInt_5)))
   (Start_23 String (y (str.++ Start_8 Start_5) (str.substr Start_24 StartInt_2 StartInt_8) (str.replace Start_7 Start_4 Start_23) (str.from_int StartInt_5)))
   (Start_17 String (y x "b" (str.++ Start_18 Start_18) (str.at Start_7 StartInt) (str.substr Start_4 StartInt_6 StartInt_7) (str.replace Start_13 Start_19 Start_7) (ite StartBool Start_12 Start_20)))
   (Start_18 String ("0" (str.from_int StartInt_5)))
   (StartInt_9 Int (0 1 (str.len Start_9) (str.to_int Start_17)))
   (Start_6 String ("1" "" "b" (str.++ Start_5 Start_4) (str.at Start_3 StartInt_3) (str.from_int StartInt_3) (ite StartBool Start_7 Start_1)))
   (Start_21 String (y "1" (str.substr Start_20 StartInt StartInt_10) (ite StartBool_6 Start_16 Start_8)))
   (StartBool_1 Bool (true (str.< Start Start_4) (str.<= Start_3 Start_4) (str.prefixof Start_5 Start_3) (= Start_3 Start_6) (<= StartInt StartInt_1)))
   (Start_12 String (y "b" x (str.++ Start_4 Start_2) (str.at Start_6 StartInt) (str.replace Start_9 Start_13 Start_3) (str.from_int StartInt_4) (ite StartBool_1 Start_8 Start_1)))
   (Start_15 String ("0" (str.at Start_6 StartInt_2) (str.substr Start_12 StartInt_3 StartInt_3) (str.from_int StartInt_5) (ite StartBool Start_7 Start_8)))
   (StartInt_1 Int (0 (str.len Start_3) (str.indexof Start_2 Start_6 StartInt_2)))
   (Start_8 String (y (str.at Start_4 StartInt_4) (str.substr Start_4 StartInt_4 StartInt_2) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_3)))
   (Start_1 String ("" "0" (str.++ Start_1 Start_2) (str.replace Start Start_2 Start_3) (ite StartBool_1 Start_2 Start)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool_4) (str.<= Start_1 Start) (str.prefixof Start_7 Start_17) (str.contains Start_12 Start_5)))
   (StartBool_6 Bool (true (not StartBool_3) (str.<= Start_8 Start_4) (str.contains Start_24 Start) (= Start_2 Start_17) (= StartInt_11 StartInt_6) (<= StartInt_9 StartInt_9)))
   (StartInt_4 Int (0 1 (str.indexof Start_8 Start_9 StartInt_4) (str.to_int Start_5)))
   (StartBool_2 Bool (true (not StartBool_1) (str.prefixof Start_7 Start_11) (str.suffixof Start_12 Start_8) (= Start_10 Start_12) (<= StartInt_1 StartInt_2)))
   (Start_2 String (y "1" (str.at Start_5 StartInt_1) (str.substr Start_12 StartInt_4 StartInt_4) (ite StartBool_3 Start_13 Start_16)))
   (StartInt_7 Int (0 (str.to_int Start_16)))
   (Start_13 String ("" "a" (str.++ Start_12 Start_14) (str.substr Start_12 StartInt_3 StartInt_2) (str.replace Start_13 Start_4 Start_7) (ite StartBool_2 Start_10 Start_5)))
   (StartInt_2 Int (1 (str.indexof Start_4 Start_4 StartInt_2)))
   (Start_14 String ("a" x "1" (str.replace Start_14 Start_13 Start_3) (str.from_int StartInt) (ite StartBool Start_1 Start_8)))
   (Start_11 String ("" "1" (str.++ Start_9 Start_13) (str.replace Start_14 Start_4 Start_15) (ite StartBool_2 Start_3 Start_11)))
   (StartInt_5 Int (0 (str.indexof Start_3 Start_16 StartInt_3)))
   (Start_16 String ("" "a" (str.at Start_2 StartInt_5) (str.replace Start_4 Start_10 Start_15) (str.from_int StartInt)))
   (Start_20 String ("" "b" (str.at Start_9 StartInt_4) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt_6) (ite StartBool_4 Start_16 Start_18)))
   (StartBool_8 Bool (false (not StartBool_1) (str.<= Start_21 Start_5) (str.contains Start_1 Start_18) (= StartInt_7 StartInt_1)))
   (StartInt_11 Int (1 (str.to_int Start_6)))
   (Start_4 String ("1" "a" "0" "b" x y (str.++ Start_4 Start_9) (str.substr Start_2 StartInt_4 StartInt_3) (str.from_int StartInt_3) (ite StartBool_2 Start_6 Start_1)))
   (Start_19 String ("b" "0" y (str.at Start_13 StartInt) (str.substr Start_4 StartInt StartInt_8) (str.from_int StartInt_4) (ite StartBool_5 Start_9 Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.indexof y y (str.to_int y)))))

(check-synth)
