(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (StartBool_1 Bool) (Start_5 String) (StartInt_2 Int) (Start_3 String) (StartInt_3 Int) (Start_1 String) (Start_2 String) (Start_4 String) (StartInt_1 Int))
  ((Start String ("b" (str.++ Start Start_1) (str.replace Start_2 Start_2 Start_1)))
   (StartInt Int (1 0))
   (StartBool Bool (true (not StartBool) (str.< Start_4 Start_5) (str.<= Start_1 Start_5) (= Start_2 Start_3)))
   (Start_6 String ("b" (str.++ Start_5 Start_6) (str.at Start_2 StartInt_3) (str.substr Start_5 StartInt_1 StartInt)))
   (StartBool_1 Bool (false true (str.< Start_5 Start_6) (str.<= Start_6 Start_4) (str.prefixof Start Start_2) (str.contains Start_5 Start) (= Start_6 Start_3)))
   (Start_5 String ("" (str.replace Start_4 Start_2 Start_4)))
   (StartInt_2 Int (0 1 (str.len Start_6)))
   (Start_3 String ("b" (str.++ Start_3 Start_3) (str.at Start_1 StartInt_1) (str.replace Start Start Start) (str.from_int StartInt_1) (ite StartBool Start_3 Start_3)))
   (StartInt_3 Int (0 (str.indexof Start_1 Start_6 StartInt_3)))
   (Start_1 String ("1" x (str.++ Start_2 Start_3) (str.at Start StartInt_1) (str.replace Start_2 Start_3 Start_2)))
   (Start_2 String (y (str.++ Start_1 Start_1)))
   (Start_4 String ("" "1" (str.substr Start_4 StartInt_2 StartInt_1) (ite StartBool_1 Start_4 Start_5)))
   (StartInt_1 Int (0 1 (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "" x y) 1)))

(check-synth)
