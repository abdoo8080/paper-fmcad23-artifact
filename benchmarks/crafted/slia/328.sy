(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (StartBool_2 Bool) (Start_11 String) (Start_12 String) (Start_15 String) (Start_13 String) (Start_14 String) (StartInt_1 Int) (Start_2 String) (StartInt_2 Int) (Start_8 String) (StartInt_6 Int) (Start_1 String) (Start_17 String) (Start_9 String) (Start_3 String) (StartInt_4 Int) (Start_16 String) (StartInt_3 Int) (Start_10 String) (Start_4 String) (Start_6 String) (Start_7 String) (Start_5 String) (StartInt_5 Int))
  ((Start String ("1" "b" "" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start Start Start_1)))
   (StartInt Int (1 0 (str.to_int Start_1)))
   (StartBool Bool (true false (not StartBool_1) (str.< Start_11 Start_8) (str.<= Start_10 Start_3) (str.prefixof Start_12 Start_5) (str.suffixof Start_9 Start_4) (str.contains Start_13 Start_5) (= Start_8 Start_1) (= StartInt_3 StartInt_2) (<= StartInt_6 StartInt_6)))
   (StartBool_1 Bool (false true (str.< Start_16 Start_17) (str.<= Start_1 Start_7) (str.prefixof Start_16 Start_6) (= StartInt_5 StartInt_1)))
   (StartBool_2 Bool (false true (not StartBool_2) (str.< Start_13 Start_14) (str.prefixof Start_14 Start_7) (= Start_7 Start_3) (= StartInt_1 StartInt_1)))
   (Start_11 String (y "0" "a" (str.at Start_5 StartInt_2) (str.substr Start_6 StartInt_3 StartInt_3) (str.from_int StartInt) (ite StartBool_2 Start_16 Start_5)))
   (Start_12 String (y (str.++ Start_10 Start_16) (str.at Start_6 StartInt_2) (str.substr Start_15 StartInt_3 StartInt_3) (str.replace Start_1 Start_12 Start_2)))
   (Start_15 String ("1" "" (str.at Start_10 StartInt_4)))
   (Start_13 String (x "b" "1" (str.substr Start_10 StartInt_3 StartInt_5) (str.replace Start_1 Start Start_15) (str.from_int StartInt_2) (ite StartBool Start_8 Start_4)))
   (Start_14 String (y (str.++ Start_6 Start_13) (str.at Start StartInt) (str.substr Start_2 StartInt_3 StartInt_4) (str.from_int StartInt)))
   (StartInt_1 Int (0 (str.len Start_4) (str.to_int Start_3)))
   (Start_2 String ("0" (str.++ Start_2 Start_10) (str.at Start_7 StartInt_3) (str.substr Start_1 StartInt_3 StartInt_1)))
   (StartInt_2 Int (0 1 (str.len Start_1)))
   (Start_8 String ("1" "a" (str.++ Start_9 Start_9) (str.at Start_6 StartInt_4) (str.substr Start_3 StartInt_5 StartInt_2) (str.replace Start_2 Start_2 Start_10)))
   (StartInt_6 Int (0 (str.len Start_4) (str.indexof Start_5 Start_14 StartInt_4) (str.to_int Start_9)))
   (Start_1 String (y "0" "" (str.++ Start Start_2) (str.at Start_1 StartInt_2) (str.replace Start_1 Start_3 Start_3)))
   (Start_17 String (y "" (str.++ Start_13 Start_13) (str.at Start_17 StartInt)))
   (Start_9 String ("" (str.substr Start_3 StartInt_4 StartInt_4) (str.from_int StartInt_3)))
   (Start_3 String ("b" "" "1" y (str.++ Start_4 Start_5) (str.at Start_4 StartInt_3) (str.substr Start_2 StartInt_2 StartInt_1) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 (str.len Start_4)))
   (Start_16 String (y "0" (str.++ Start_6 Start_8) (str.at Start_11 StartInt_2) (str.replace Start_1 Start_4 Start_2)))
   (StartInt_3 Int (0 1 (str.indexof Start_6 Start_2 StartInt_4) (str.to_int Start_2)))
   (Start_10 String (x "" "a" "1" "b" "0" (str.at Start StartInt) (str.substr Start_5 StartInt_5 StartInt_4) (str.from_int StartInt_1)))
   (Start_4 String (y (str.++ Start_1 Start_9)))
   (Start_6 String ("b" (str.++ Start_6 Start_1)))
   (Start_7 String ("1" (str.++ Start Start_7) (str.substr Start_8 StartInt_5 StartInt_3) (str.replace Start_9 Start_3 Start_5) (ite StartBool Start_1 Start)))
   (Start_5 String ("" "a" "b" (str.++ Start_4 Start_5) (str.from_int StartInt_3) (ite StartBool Start_7 Start_6)))
   (StartInt_5 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= (str.from_int (str.to_int (str.at (str.++ y "0") 0))) "") x "b")))

(check-synth)
