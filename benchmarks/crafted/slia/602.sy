(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_1 String) (Start_2 String) (StartBool_4 Bool) (Start_8 String) (Start_5 String) (StartBool_1 Bool) (Start_9 String) (StartInt_2 Int) (StartInt_1 Int) (Start_3 String) (Start_7 String) (StartBool_2 Bool) (Start_6 String) (StartBool_3 Bool) (StartInt_5 Int) (StartInt_3 Int) (Start_4 String) (Start_10 String) (StartInt_6 Int) (StartInt_4 Int) (Start_12 String) (StartBool_5 Bool) (Start_11 String))
  ((Start String (y (str.++ Start_1 Start_1) (str.replace Start_2 Start Start) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 (str.to_int Start_10)))
   (StartBool Bool (false true (and StartBool_4 StartBool_3) (str.prefixof Start_5 Start_8) (str.suffixof Start_3 Start_3) (str.contains Start_1 Start_7) (= Start_1 Start_2) (= StartInt_3 StartInt_7)))
   (StartInt_7 Int (1 (str.indexof Start_2 Start StartInt_6)))
   (Start_1 String (y "" "a" (str.from_int StartInt_3) (ite StartBool_4 Start_10 Start_8)))
   (Start_2 String ("a" (str.++ Start_9 Start_5) (str.substr Start_9 StartInt_2 StartInt_5) (str.replace Start_11 Start_4 Start_8)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_5 StartBool_3) (str.< Start Start_11) (str.prefixof Start Start_2) (str.suffixof Start_9 Start_5) (= Start_7 Start_5)))
   (Start_8 String ("1" (str.++ Start_10 Start_11) (str.at Start_10 StartInt_1) (str.substr Start_2 StartInt_5 StartInt_6) (str.from_int StartInt) (ite StartBool_2 Start_9 Start_3)))
   (Start_5 String ("0" "" (str.++ Start_3 Start_5) (str.from_int StartInt_2) (ite StartBool_3 Start_5 Start_1)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool StartBool) (str.< Start Start) (str.<= Start_2 Start_3) (str.contains Start_3 Start_4) (= Start_5 Start_6) (= StartInt_2 StartInt)))
   (Start_9 String ("b" x (str.++ Start_6 Start_10) (ite StartBool_2 Start_1 Start_8)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start_7)))
   (StartInt_1 Int (0 (str.len Start_8) (str.indexof Start_5 Start_7 StartInt_5)))
   (Start_3 String ("a" y (str.at Start_3 StartInt_2) (str.substr Start_9 StartInt_2 StartInt_6) (str.from_int StartInt_6)))
   (Start_7 String (x (str.substr Start_5 StartInt_2 StartInt_2) (str.replace Start_2 Start_2 Start_5) (ite StartBool_2 Start_1 Start_6)))
   (StartBool_2 Bool (false true (str.<= Start_2 Start_2) (str.suffixof Start_5 Start_7) (str.contains Start_3 Start_5) (<= StartInt StartInt_1)))
   (Start_6 String ("a" (str.at Start_3 StartInt_1) (str.substr Start_4 StartInt_1 StartInt) (str.from_int StartInt)))
   (StartBool_3 Bool (false (not StartBool_4) (str.contains Start_1 Start_4) (= Start_8 Start_9) (= StartInt StartInt_1) (<= StartInt_3 StartInt)))
   (StartInt_5 Int (1 0))
   (StartInt_3 Int (1 0 (str.len Start_10) (str.to_int Start_1)))
   (Start_4 String ("" (str.at Start_12 StartInt_3) (str.from_int StartInt_3)))
   (Start_10 String ("a" y x (str.++ Start_6 Start_6) (str.replace Start_5 Start_11 Start_8)))
   (StartInt_6 Int (0 1 (str.len Start_1)))
   (StartInt_4 Int (0))
   (Start_12 String ("a" (str.at Start_4 StartInt) (str.from_int StartInt_2) (ite StartBool_5 Start_10 Start_4)))
   (StartBool_5 Bool (false true (not StartBool_2) (str.prefixof Start_4 Start) (= Start_7 Start_9) (= StartInt StartInt_6) (<= StartInt_4 StartInt_2)))
   (Start_11 String (x "" (str.at Start_2 StartInt_4) (str.substr Start_10 StartInt_3 StartInt_4) (str.replace Start_10 Start_10 Start) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof x (str.replace "" y "b") 0))))

(check-synth)
