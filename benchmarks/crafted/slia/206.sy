(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (StartInt_6 Int) (Start_11 String) (Start_14 String) (Start_16 String) (StartInt_5 Int) (Start_15 String) (Start_13 String) (StartBool_3 Bool) (StartInt_4 Int) (Start_8 String) (StartInt_1 Int) (Start_1 String) (Start_7 String) (Start_10 String) (Start_3 String) (Start_2 String) (Start_4 String) (Start_5 String) (StartInt_7 Int) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_12 String) (StartBool_2 Bool) (Start_9 String))
  ((Start String ("b" (str.at Start_1 StartInt) (str.replace Start_1 Start Start) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.indexof Start_16 Start_1 StartInt_6) (str.to_int Start_12)))
   (StartBool Bool (false (str.<= Start_3 Start_4) (str.suffixof Start Start_12) (str.contains Start_15 Start_14) (= Start_6 Start_11)))
   (Start_6 String (x "0" y (str.++ Start_5 Start_3) (str.substr Start_5 StartInt_6 StartInt_2) (str.from_int StartInt_7) (ite StartBool Start_11 Start_8)))
   (StartInt_6 Int (1 0))
   (Start_11 String ("b" "" (str.++ Start_3 Start_6) (str.at Start_15 StartInt_1) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_8 Start_8 Start_5) (str.from_int StartInt) (ite StartBool Start_16 Start_16)))
   (Start_14 String (y (str.at Start_16 StartInt) (str.substr Start_12 StartInt_3 StartInt_3) (str.from_int StartInt_1) (ite StartBool Start_12 Start_5)))
   (Start_16 String (y "1" "" "b" (str.replace Start_15 Start_1 Start_6)))
   (StartInt_5 Int (1 0 (str.indexof Start_16 Start_4 StartInt_4) (str.to_int Start_11)))
   (Start_15 String ("a" "1" (str.++ Start_7 Start_7) (str.at Start_13 StartInt_1) (str.substr Start_3 StartInt_5 StartInt_4) (str.replace Start_4 Start_15 Start_3) (str.from_int StartInt_3)))
   (Start_13 String ("b" (str.at Start_4 StartInt) (str.replace Start_14 Start_1 Start_2) (ite StartBool_2 Start_15 Start_3)))
   (StartBool_3 Bool (false (str.< Start_9 Start) (str.<= Start Start_11) (str.prefixof Start_3 Start_8) (str.contains Start_14 Start) (= Start_1 Start_7) (= StartInt_2 StartInt_6)))
   (StartInt_4 Int (0 1 (str.len Start_10)))
   (Start_8 String (y "a" (str.++ Start_6 Start_2) (str.at Start_6 StartInt_3) (str.substr Start StartInt_3 StartInt_4)))
   (StartInt_1 Int (0 (str.to_int Start)))
   (Start_1 String ("1" (str.substr Start StartInt StartInt_1) (str.replace Start_2 Start_3 Start_1) (str.from_int StartInt_1)))
   (Start_7 String ("a" (str.++ Start Start_2) (str.at Start_3 StartInt) (str.from_int StartInt)))
   (Start_10 String (x (str.++ Start_6 Start_11) (str.replace Start_12 Start_12 Start_10) (str.from_int StartInt_3) (ite StartBool_3 Start_8 Start_8)))
   (Start_3 String (y "b" (str.++ Start_1 Start_3) (ite StartBool Start_2 Start_3)))
   (Start_2 String ("a" "1" (str.at Start_4 StartInt) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_1 Start Start_1) (str.from_int StartInt_2)))
   (Start_4 String ("b" (str.++ Start_4 Start) (str.at Start_5 StartInt_1) (str.replace Start_4 Start_4 Start_1) (ite StartBool Start_4 Start_4)))
   (Start_5 String ("1" (str.++ Start_3 Start_2) (str.replace Start_2 Start_6 Start_3) (ite StartBool_1 Start_6 Start_7)))
   (StartInt_7 Int (0 1 (str.len Start_13) (str.to_int Start_12)))
   (StartInt_2 Int (0 1 (str.len Start_3)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_2 StartBool) (str.suffixof Start_4 Start_2) (str.contains Start_5 Start_6) (= Start_7 Start_2) (<= StartInt_2 StartInt_3)))
   (StartInt_3 Int (0 (str.indexof Start Start_1 StartInt)))
   (Start_12 String ("" (str.++ Start_8 Start) (str.from_int StartInt_3) (ite StartBool Start_13 Start_7)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_2 StartBool_1) (str.< Start_2 Start_3) (str.prefixof Start_8 Start_6) (str.contains Start_4 Start_9) (= Start_6 Start_3) (= StartInt_3 StartInt_3) (<= StartInt_1 StartInt_1)))
   (Start_9 String (y x (str.++ Start_9 Start_7) (str.at Start_2 StartInt_2) (str.replace Start Start_3 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains y "1") x "1")))

(check-synth)
