(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_13 String) (Start_2 String) (StartInt_1 Int) (StartInt_9 Int) (StartInt_10 Int) (Start_4 String) (StartInt_8 Int) (Start_7 String) (Start_10 String) (Start_12 String) (StartInt_6 Int) (Start_6 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_9 String) (StartInt_5 Int) (Start_5 String) (StartInt_4 Int) (Start_11 String) (StartInt_2 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_8 String) (Start_3 String) (StartInt_7 Int))
  ((Start String ("0" "a" "b" x (str.++ Start_1 Start_2) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_2 Start Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start)))
   (StartInt Int (0 (str.len Start_2) (str.to_int Start_7)))
   (StartBool Bool (false (not StartBool_3) (= StartInt_8 StartInt_9) (<= StartInt_4 StartInt)))
   (Start_1 String (y "1" (str.replace Start Start Start_9) (str.from_int StartInt_10) (ite StartBool Start_10 Start_7)))
   (Start_13 String ("" (str.replace Start_12 Start_2 Start_9) (str.from_int StartInt_9) (ite StartBool_3 Start_13 Start_9)))
   (Start_2 String ("a" (str.++ Start Start_11) (str.substr Start_13 StartInt_7 StartInt_4) (str.from_int StartInt_3)))
   (StartInt_1 Int (0 1))
   (StartInt_9 Int (0 1 (str.len Start_12) (str.indexof Start_12 Start_7 StartInt_4) (str.to_int Start_6)))
   (StartInt_10 Int (0 1 (str.len Start_10) (str.indexof Start_4 Start_10 StartInt_4)))
   (Start_4 String (y (str.substr Start_9 StartInt_9 StartInt) (str.from_int StartInt_4)))
   (StartInt_8 Int (1 (str.indexof Start_3 Start_4 StartInt_1)))
   (Start_7 String ("b" "1" "" "a" "0" x (str.at Start_10 StartInt_5) (str.from_int StartInt_8) (ite StartBool_2 Start_1 Start_7)))
   (Start_10 String ("0" x (str.++ Start_1 Start) (str.from_int StartInt_7) (ite StartBool Start_9 Start_12)))
   (Start_12 String (y "b" (str.substr Start_10 StartInt_1 StartInt_3) (str.replace Start_4 Start_2 Start_6)))
   (StartInt_6 Int (0 1 (str.len Start_2) (str.to_int Start_4)))
   (Start_6 String ("1" (str.++ Start_4 Start_4) (str.at Start_1 StartInt) (str.from_int StartInt_3) (ite StartBool Start_4 Start)))
   (StartBool_1 Bool (true (str.<= Start_9 Start_2) (str.suffixof Start_12 Start_3) (str.contains Start_9 Start_2) (= Start_6 Start_9) (= StartInt_2 StartInt_8)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start_2 Start StartInt_4) (str.to_int Start_3)))
   (Start_9 String ("1" (str.substr Start_5 StartInt_3 StartInt_4) (str.from_int StartInt_2) (ite StartBool Start_4 Start_8)))
   (StartInt_5 Int (0 1 (str.len Start_12)))
   (Start_5 String ("b" (str.++ Start_4 Start) (str.substr Start_3 StartInt_2 StartInt_4)))
   (StartInt_4 Int (0 (str.indexof Start_3 Start_2 StartInt) (str.to_int Start_5)))
   (Start_11 String (y x (str.substr Start_3 StartInt_2 StartInt) (str.from_int StartInt_3)))
   (StartInt_2 Int (1 (str.len Start_9)))
   (StartBool_2 Bool (false (and StartBool StartBool_2) (str.< Start_5 Start_2) (str.<= Start_7 Start_7) (str.prefixof Start Start_6) (str.contains Start_8 Start_5) (= Start_4 Start_9)))
   (StartBool_3 Bool (false true (str.< Start Start_11) (str.suffixof Start_5 Start_6) (= StartInt_6 StartInt_2) (<= StartInt StartInt_7)))
   (Start_8 String ("1" (str.at Start_10 StartInt_4) (str.substr Start_7 StartInt_5 StartInt_3) (ite StartBool_3 Start_11 Start_9)))
   (Start_3 String (x (str.at Start_2 StartInt_2) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_4 Start_4 Start) (str.from_int StartInt_2) (ite StartBool_2 Start_5 Start_6)))
   (StartInt_7 Int (1 0 (str.len Start_11) (str.indexof Start_4 Start_9 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "0" x "1") 1 1)))

(check-synth)
