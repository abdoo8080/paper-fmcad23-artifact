(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_9 String) (StartInt_6 Int) (StartBool_3 Bool) (Start_8 String) (Start_7 String) (StartBool_5 Bool) (StartBool_1 Bool) (Start_5 String) (Start_3 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_11 String) (Start_2 String) (StartInt_2 Int) (Start_10 String) (Start_4 String) (StartBool_4 Bool) (StartInt_5 Int) (StartInt_4 Int) (Start_1 String) (Start_6 String))
  ((Start String ("b" "a" (str.substr Start StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool Start Start_1)))
   (StartInt Int (1 0 (str.to_int Start_9)))
   (StartBool Bool (true (str.<= Start_7 Start_3) (str.contains Start_7 Start_5) (= Start_6 Start_5) (= StartInt_4 StartInt) (<= StartInt StartInt_3)))
   (StartInt_1 Int (0 (str.len Start_3) (str.to_int Start_8)))
   (Start_9 String ("" y "a" "1" x "0" (str.++ Start_4 Start_6) (ite StartBool_5 Start_1 Start_2)))
   (StartInt_6 Int (0 1 (str.len Start_5) (str.indexof Start_3 Start_3 StartInt)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool_4) (str.< Start_1 Start_1) (str.<= Start_5 Start_9) (str.suffixof Start_10 Start_5) (<= StartInt_1 StartInt_3)))
   (Start_8 String ("a" x y "" "0" (str.++ Start_1 Start_1) (str.replace Start_5 Start_9 Start_8) (str.from_int StartInt_4) (ite StartBool_3 Start Start_2)))
   (Start_7 String (y (str.++ Start_5 Start_8) (str.at Start StartInt_4) (str.replace Start_1 Start_8 Start_8)))
   (StartBool_5 Bool (false true (str.prefixof Start Start_1) (str.suffixof Start_1 Start_10) (= Start_3 Start_5)))
   (StartBool_1 Bool (false (not StartBool_2) (str.<= Start_1 Start_5) (= Start_2 Start_3) (= StartInt_5 StartInt_5) (<= StartInt_2 StartInt_4)))
   (Start_5 String ("0" (str.at Start_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start_5)))
   (Start_3 String (x (str.substr Start_3 StartInt_2 StartInt_2) (str.from_int StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool StartBool_1) (str.<= Start_2 Start_1) (str.prefixof Start_1 Start_3) (str.contains Start Start_4) (= StartInt_1 StartInt_1)))
   (StartInt_3 Int (1 (str.len Start_2) (str.indexof Start Start_2 StartInt_2) (str.to_int Start_1)))
   (Start_11 String (x (str.substr Start_5 StartInt_6 StartInt_6) (str.replace Start_11 Start_2 Start_7) (str.from_int StartInt_3)))
   (Start_2 String ("1" "0" y "a" "b" (str.replace Start_1 Start_1 Start_3) (str.from_int StartInt)))
   (StartInt_2 Int (0 (str.len Start_4)))
   (Start_10 String ("a" y (str.++ Start_3 Start_11) (str.at Start_1 StartInt_3) (str.from_int StartInt)))
   (Start_4 String ("a" (str.at Start_3 StartInt_4) (ite StartBool_1 Start Start_2)))
   (StartBool_4 Bool (false true (not StartBool) (and StartBool_2 StartBool_2) (str.<= Start_9 Start_6) (str.suffixof Start_5 Start) (= StartInt_1 StartInt_2) (<= StartInt_6 StartInt_1)))
   (StartInt_5 Int (0 (str.indexof Start_3 Start_2 StartInt_3) (str.to_int Start)))
   (StartInt_4 Int (0 1 (str.len Start_6)))
   (Start_1 String (y "" (str.substr Start StartInt_3 StartInt_1) (str.replace Start_1 Start_2 Start_3)))
   (Start_6 String (x (str.++ Start_7 Start_1) (ite StartBool_2 Start_1 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y "1") (str.indexof (str.replace y x "1") "0" 0))))

(check-synth)
