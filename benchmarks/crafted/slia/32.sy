(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_4 Int) (StartBool_1 Bool) (Start_5 String) (StartInt_8 Int) (StartInt_2 Int) (Start_6 String) (Start_1 String) (StartInt_3 Int) (StartBool_5 Bool) (Start_9 String) (Start_7 String) (Start_4 String) (StartInt_1 Int) (Start_10 String) (Start_8 String) (Start_12 String) (Start_11 String) (StartBool_4 Bool) (StartInt_5 Int) (Start_13 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_3 String) (StartBool_3 Bool) (StartInt_7 Int) (Start_2 String) (Start_14 String) (StartInt_9 Int))
  ((Start String ("" "b" (str.at Start_1 StartInt) (str.replace Start Start_2 Start_2) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_7) (str.indexof Start_13 Start_4 StartInt_3)))
   (StartBool Bool (false true (and StartBool_4 StartBool_1) (str.prefixof Start_11 Start_13) (str.contains Start_5 Start_3) (= StartInt_1 StartInt_2) (<= StartInt_2 StartInt)))
   (StartInt_4 Int (0 (str.len Start_10) (str.to_int Start)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_2) (str.< Start_6 Start_4) (str.<= Start_2 Start_5) (str.prefixof Start_7 Start_3) (str.suffixof Start_9 Start_2) (str.contains Start_3 Start_7)))
   (Start_5 String ("0" x (str.++ Start_1 Start_4) (str.at Start_4 StartInt_1) (str.substr Start_6 StartInt_3 StartInt_1) (str.replace Start_1 Start_1 Start_7) (ite StartBool Start Start_5)))
   (StartInt_8 Int (1 (str.len Start_10)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_4 Start_3 StartInt_1)))
   (Start_6 String (y "b" "0" (str.++ Start_11 Start_13) (str.at Start StartInt_8) (str.from_int StartInt_3) (ite StartBool_2 Start_14 Start_1)))
   (Start_1 String ("1" (str.++ Start_1 Start_6) (str.at Start_12 StartInt_4) (str.substr Start_1 StartInt_7 StartInt_6) (str.from_int StartInt_5) (ite StartBool_5 Start_7 Start_6)))
   (StartInt_3 Int (0 (str.len Start_3) (str.to_int Start_5)))
   (StartBool_5 Bool (true false (and StartBool_2 StartBool_5) (str.<= Start_4 Start_11) (str.suffixof Start_5 Start_6) (= StartInt_4 StartInt_5) (<= StartInt_8 StartInt_4)))
   (Start_9 String ("1" x (str.++ Start_7 Start_10) (str.substr Start_3 StartInt_7 StartInt_2) (str.from_int StartInt_5) (ite StartBool_5 Start_5 Start_6)))
   (Start_7 String ("b" (str.++ Start_7 Start_3) (str.replace Start_1 Start_8 Start_6) (str.from_int StartInt_3)))
   (Start_4 String ("0" (str.++ Start_3 Start_3) (str.replace Start_3 Start_3 Start_5) (str.from_int StartInt_3)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start Start StartInt_2)))
   (Start_10 String (x (str.replace Start_3 Start_5 Start_9) (ite StartBool_4 Start_9 Start_6)))
   (Start_8 String ("b" "a" (str.++ Start_9 Start_5) (str.replace Start_4 Start_3 Start_5) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_7)))
   (Start_12 String ("a" (str.at Start_9 StartInt_5) (str.substr Start_4 StartInt_4 StartInt_2) (str.replace Start_12 Start_7 Start_12) (str.from_int StartInt)))
   (Start_11 String (y x "a" "b" (str.substr Start_7 StartInt_4 StartInt) (ite StartBool_1 Start_1 Start_12)))
   (StartBool_4 Bool (false (str.prefixof Start_1 Start_4) (str.suffixof Start_11 Start_1) (= Start_3 Start_9) (= StartInt_3 StartInt) (<= StartInt_1 StartInt_2)))
   (StartInt_5 Int (0 (str.indexof Start Start_13 StartInt_6)))
   (Start_13 String ("" "b" (str.++ Start_2 Start_13) (str.at Start_11 StartInt_1) (str.replace Start_12 Start_7 Start_3) (str.from_int StartInt_4)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_3 StartBool_1) (str.<= Start_4 Start_5) (str.suffixof Start_9 Start_10) (= Start_8 Start_9) (= StartInt_4 StartInt_3)))
   (StartInt_6 Int (0 (str.to_int Start_3)))
   (Start_3 String (y (str.substr Start_6 StartInt_7 StartInt) (str.replace Start_6 Start_9 Start_9) (str.from_int StartInt_8) (ite StartBool_2 Start_8 Start_9)))
   (StartBool_3 Bool (true (str.prefixof Start Start_10) (str.contains Start_6 Start_4) (= Start_11 Start_3)))
   (StartInt_7 Int (1 0 (str.len Start_12) (str.indexof Start_12 Start_9 StartInt_4) (str.to_int Start)))
   (Start_2 String ("0"))
   (Start_14 String (x (str.++ Start_11 Start_14) (str.at Start_14 StartInt_9) (str.substr Start_14 StartInt_6 StartInt_8) (str.replace Start_10 Start_10 Start) (str.from_int StartInt_2)))
   (StartInt_9 Int (0 (str.len Start_5) (str.indexof Start_11 Start_12 StartInt_9) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" y "a")))

(check-synth)
