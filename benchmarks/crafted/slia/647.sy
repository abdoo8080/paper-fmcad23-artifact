(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_11 String) (Start_10 String) (Start_7 String) (StartInt_4 Int) (Start_9 String) (Start_2 String) (StartInt_1 Int) (Start_3 String) (StartInt_2 Int) (Start_4 String) (Start_5 String) (Start_1 String) (Start_6 String) (StartInt_3 Int) (Start_8 String))
  ((Start String (x "b" (str.at Start_1 StartInt) (str.replace Start Start_2 Start)))
   (StartInt Int (0 (str.indexof Start_3 Start_5 StartInt_3) (str.to_int Start_4)))
   (StartBool Bool (false true (str.prefixof Start_2 Start_10) (str.suffixof Start_8 Start) (= Start_9 Start_8)))
   (StartInt_5 Int (0 1 (str.len Start_5) (str.indexof Start_11 Start_3 StartInt_5) (str.to_int Start_5)))
   (Start_11 String ("a" "0" (str.++ Start_5 Start_8) (str.at Start_4 StartInt_5) (str.substr Start_2 StartInt StartInt_4) (str.replace Start Start_2 Start_10)))
   (Start_10 String ("" "a" (str.++ Start_11 Start_3) (str.at Start_6 StartInt_4)))
   (Start_7 String (y "b" "1" "0" (str.at Start_2 StartInt_2) (str.substr Start_9 StartInt_4 StartInt_4) (str.replace Start_9 Start_6 Start_4)))
   (StartInt_4 Int (1 (str.to_int Start_7)))
   (Start_9 String ("0" "a" (str.++ Start_8 Start_6) (str.at Start_8 StartInt) (str.substr Start_8 StartInt_2 StartInt_3) (str.replace Start_2 Start_2 Start_9)))
   (Start_2 String (x (str.++ Start Start) (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt) (ite StartBool Start_2 Start_1)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_3)))
   (Start_3 String ("a" (str.++ Start_3 Start) (ite StartBool Start_3 Start)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.indexof Start_2 Start StartInt_1)))
   (Start_4 String ("a" (str.++ Start_1 Start_1) (str.substr Start_4 StartInt_1 StartInt_2)))
   (Start_5 String (x "1" "b" "0" (str.++ Start_2 Start_6) (str.replace Start_4 Start_1 Start_5) (str.from_int StartInt_3)))
   (Start_1 String ("1" (str.at Start_1 StartInt_3) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_4 Start_1 Start_3)))
   (Start_6 String ("b" (str.at Start_5 StartInt) (str.substr Start_6 StartInt_1 StartInt_4) (str.replace Start_4 Start_7 Start) (str.from_int StartInt_2) (ite StartBool Start_1 Start_8)))
   (StartInt_3 Int (1))
   (Start_8 String ("a" (str.at Start_9 StartInt_3) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= y "0") "b" y)))

(check-synth)
