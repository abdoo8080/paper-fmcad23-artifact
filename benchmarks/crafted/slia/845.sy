(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_12 String) (StartInt_8 Int) (Start_8 String) (Start_3 String) (Start_7 String) (Start_9 String) (Start_5 String) (Start_11 String) (StartInt_2 Int) (Start_10 String) (StartInt_7 Int) (Start_4 String) (StartInt_10 Int) (StartInt_3 Int) (Start_1 String) (StartInt_4 Int) (StartInt_1 Int) (StartBool_1 Bool) (Start_2 String) (StartInt_5 Int) (StartInt_9 Int) (StartInt_6 Int) (Start_6 String))
  ((Start String ("" (str.substr Start StartInt StartInt)))
   (StartInt Int (1 (str.len Start) (str.indexof Start Start StartInt)))
   (StartBool Bool (true (not StartBool) (str.prefixof Start Start_1) (str.suffixof Start_1 Start_1) (= Start Start) (= StartInt StartInt_1) (<= StartInt_2 StartInt_3)))
   (Start_13 String ("a" (str.replace Start_4 Start_13 Start_6) (str.from_int StartInt_9)))
   (Start_12 String ("" (str.++ Start_2 Start_13) (str.at Start_4 StartInt_9) (str.substr Start_8 StartInt_7 StartInt) (str.replace Start_7 Start_3 Start_1) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start_9)))
   (StartInt_8 Int (1 (str.to_int Start_1)))
   (Start_8 String ("1" (str.at Start_7 StartInt_5) (str.from_int StartInt_8)))
   (Start_3 String ("b" (str.at Start StartInt_3) (ite StartBool Start_2 Start_8)))
   (Start_7 String ("a" x "0" (str.++ Start_1 Start) (ite StartBool Start Start)))
   (Start_9 String ("b" (str.at Start_4 StartInt_10) (ite StartBool Start_3 Start_6)))
   (Start_5 String ("b" (str.at Start_4 StartInt_4) (str.substr Start_1 StartInt_2 StartInt_7) (str.from_int StartInt_1)))
   (Start_11 String ("b" (str.++ Start_11 Start_9) (str.at Start_8 StartInt_2) (str.from_int StartInt_9)))
   (StartInt_2 Int (0 1))
   (Start_10 String (x "a" (str.at Start_11 StartInt_3) (str.substr Start_8 StartInt_5 StartInt_3) (str.from_int StartInt_3) (ite StartBool_1 Start_5 Start_9)))
   (StartInt_7 Int (0 (str.len Start_7) (str.indexof Start_1 Start_4 StartInt_1)))
   (Start_4 String ("0" "1" (str.++ Start_5 Start_3) (str.at Start_2 StartInt_2) (str.substr Start_3 StartInt_5 StartInt_6)))
   (StartInt_10 Int (1 0 (str.indexof Start_12 Start_8 StartInt_9)))
   (StartInt_3 Int (1 (str.to_int Start_1)))
   (Start_1 String ("a" "b" (str.++ Start Start) (str.at Start_1 StartInt_2) (str.substr Start StartInt_3 StartInt_1) (str.replace Start_1 Start_2 Start_1) (ite StartBool_1 Start Start_1)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.indexof Start_2 Start StartInt_2) (str.to_int Start_3)))
   (StartInt_1 Int (1 (str.to_int Start)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (str.< Start_3 Start_2) (str.<= Start_4 Start_4) (= Start_2 Start_3) (= StartInt_2 StartInt_4) (<= StartInt StartInt_3)))
   (Start_2 String ("1" (str.++ Start_5 Start_7) (str.at Start_9 StartInt_1) (str.substr Start_9 StartInt_2 StartInt_5) (str.replace Start_6 Start_10 Start_6) (str.from_int StartInt_5) (ite StartBool Start_9 Start)))
   (StartInt_5 Int (0))
   (StartInt_9 Int (0 (str.len Start_11) (str.indexof Start Start_11 StartInt_8) (str.to_int Start_4)))
   (StartInt_6 Int (1 0 (str.indexof Start_6 Start StartInt_4) (str.to_int Start_3)))
   (Start_6 String ("" "0"))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "1" x) "" "1")))

(check-synth)
