(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_3 String) (Start_8 String) (Start_7 String) (StartInt_5 Int) (StartInt_2 Int) (StartInt_3 Int) (StartBool_1 Bool) (Start_12 String) (Start_10 String) (Start_5 String) (StartInt_4 Int) (StartInt_1 Int) (Start_11 String) (StartInt_8 Int) (StartBool_2 Bool) (Start_4 String) (StartInt_7 Int) (Start_15 String) (Start_9 String) (Start_6 String) (StartInt_10 Int) (Start_14 String) (StartBool_3 Bool) (Start_13 String) (StartInt_9 Int) (Start_2 String) (Start_1 String))
  ((Start String ("1" (str.++ Start_1 Start) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start_1) (str.indexof Start_9 Start_12 StartInt_3)))
   (StartBool Bool (false true (and StartBool_3 StartBool_2)))
   (StartInt_6 Int (0 1 (str.len Start_12)))
   (Start_3 String ("1" x (str.++ Start_4 Start_1) (str.at Start StartInt_2) (str.substr Start StartInt_3 StartInt_4) (str.replace Start_3 Start_5 Start_2) (str.from_int StartInt_1)))
   (Start_8 String ("1" "0" y (str.++ Start_1 Start_9) (str.replace Start_10 Start_1 Start_2)))
   (Start_7 String ("b" x "a" "0" (str.replace Start_5 Start_8 Start_8) (str.from_int StartInt_1) (ite StartBool Start_1 Start_5)))
   (StartInt_5 Int (1 0 (str.len Start_6) (str.indexof Start_6 Start_7 StartInt_1) (str.to_int Start_4)))
   (StartInt_2 Int (0 1 (str.len Start_4)))
   (StartInt_3 Int (1 (str.indexof Start_5 Start_2 StartInt_5)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_2) (str.< Start_7 Start) (str.suffixof Start_5 Start_7) (str.contains Start_6 Start) (= Start_3 Start_11) (= StartInt_5 StartInt_8) (<= StartInt_6 StartInt)))
   (Start_12 String ("b" (str.++ Start_11 Start_11) (str.at Start_2 StartInt_6) (str.substr Start StartInt_6 StartInt_2) (str.replace Start_2 Start_2 Start_11) (str.from_int StartInt_7) (ite StartBool_1 Start_11 Start_9)))
   (Start_10 String ("b" (str.++ Start_8 Start_9) (str.at Start_10 StartInt_4) (ite StartBool Start_11 Start)))
   (Start_5 String ("b" y (str.++ Start_1 Start_1) (str.replace Start_5 Start Start_2) (ite StartBool Start_1 Start_3)))
   (StartInt_4 Int (1))
   (StartInt_1 Int (0 (str.len Start_3) (str.indexof Start_3 Start_3 StartInt) (str.to_int Start_2)))
   (Start_11 String ("" (str.++ Start_8 Start_3) (str.at Start_6 StartInt_6) (str.replace Start_3 Start_4 Start_7) (ite StartBool Start_5 Start_8)))
   (StartInt_8 Int (1 (str.indexof Start_5 Start_3 StartInt_3)))
   (StartBool_2 Bool (true false (not StartBool_2) (str.< Start_1 Start_9) (str.<= Start_7 Start_3) (str.prefixof Start_9 Start)))
   (Start_4 String ("0" "1" "a" "b" (str.from_int StartInt_10) (ite StartBool_3 Start_14 Start_2)))
   (StartInt_7 Int (0 (str.len Start_2) (str.to_int Start_12)))
   (Start_15 String ("1" (str.++ Start_10 Start_13) (str.substr Start_5 StartInt_2 StartInt_1) (str.from_int StartInt_5)))
   (Start_9 String ("1" (str.at Start_11 StartInt_3)))
   (Start_6 String (y x "a" "1" (str.++ Start_12 Start_6) (str.replace Start_1 Start_13 Start_3) (str.from_int StartInt_4) (ite StartBool_2 Start_14 Start_10)))
   (StartInt_10 Int (0 (str.indexof Start_11 Start_2 StartInt_8) (str.to_int Start)))
   (Start_14 String ("" (str.at Start_10 StartInt_3) (str.substr Start_10 StartInt StartInt_5) (str.from_int StartInt_8) (ite StartBool_2 Start_13 Start_5)))
   (StartBool_3 Bool (true (not StartBool_3) (str.< Start_5 Start_6) (= Start_4 Start_13) (<= StartInt_1 StartInt)))
   (Start_13 String ("0" "" (str.substr Start_6 StartInt_1 StartInt_9) (ite StartBool Start_15 Start_4)))
   (StartInt_9 Int (1 (str.len Start_14) (str.to_int Start_8)))
   (Start_2 String ("1"))
   (Start_1 String ("a" (str.substr Start StartInt_1 StartInt_10) (str.replace Start_13 Start_15 Start_6) (ite StartBool Start_5 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (ite (str.suffixof (str.substr x 0 (str.len y)) "0") "1" y) y)))

(check-synth)
