(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_13 Int) (Start_16 String) (StartInt_12 Int) (Start_8 String) (Start_11 String) (StartInt_5 Int) (Start_19 String) (Start_18 String) (StartBool_2 Bool) (Start_10 String) (StartInt_4 Int) (Start_4 String) (Start_2 String) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_3 Int) (StartInt_2 Int) (StartInt_6 Int) (Start_7 String) (Start_17 String) (StartInt_7 Int) (StartInt_11 Int) (Start_12 String) (Start_13 String) (Start_9 String) (StartInt_10 Int) (StartInt_8 Int) (Start_3 String) (Start_14 String) (Start_6 String) (Start_5 String) (StartBool_1 Bool) (Start_15 String) (StartInt_9 Int))
  ((Start String ("1" "" (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 (str.len Start_7) (str.indexof Start_10 Start_11 StartInt_10) (str.to_int Start_19)))
   (StartBool Bool (true (not StartBool) (str.< Start_18 Start_4) (= Start_5 Start_17) (= StartInt_7 StartInt_5)))
   (Start_1 String ("a" (str.at Start_4 StartInt_4) (str.replace Start_7 Start_5 Start_2) (str.from_int StartInt_12) (ite StartBool_3 Start_14 Start_3)))
   (StartInt_13 Int (0 1 (str.len Start_8) (str.indexof Start_4 Start_13 StartInt_4) (str.to_int Start_12)))
   (Start_16 String ("0" (str.++ Start_2 Start_15) (str.at Start_1 StartInt_12) (str.substr Start_11 StartInt_3 StartInt_13) (ite StartBool_1 Start_9 Start_5)))
   (StartInt_12 Int (1 (str.len Start_12)))
   (Start_8 String (x (str.substr Start_7 StartInt StartInt_3) (ite StartBool_2 Start_5 Start_7)))
   (Start_11 String ("1" (str.++ Start_8 Start_12) (str.replace Start_4 Start_5 Start_7) (str.from_int StartInt_5) (ite StartBool Start Start_9)))
   (StartInt_5 Int (0 1 (str.indexof Start_12 Start_10 StartInt_6)))
   (Start_19 String ("b" (str.at Start_16 StartInt_5) (str.substr Start StartInt_3 StartInt_1) (str.from_int StartInt_5)))
   (Start_18 String ("0" (str.at Start_10 StartInt_10) (str.substr Start_6 StartInt_12 StartInt_1)))
   (StartBool_2 Bool (true false (str.<= Start_6 Start_7) (str.prefixof Start_7 Start_8) (str.suffixof Start_5 Start_6) (= Start Start_2) (= StartInt_1 StartInt) (<= StartInt_3 StartInt_1)))
   (Start_10 String ("b" (str.substr Start_3 StartInt_1 StartInt_4) (str.from_int StartInt_4)))
   (StartInt_4 Int (1 0 (str.len Start_11) (str.indexof Start_3 Start_2 StartInt_1)))
   (Start_4 String ("a" (str.++ Start_16 Start_7) (str.at Start_17 StartInt_9) (str.substr Start_7 StartInt_10 StartInt_1) (str.from_int StartInt_5)))
   (Start_2 String ("0" (str.at Start_4 StartInt_2) (str.replace Start_4 Start_3 Start_5) (ite StartBool_2 Start_3 Start_4)))
   (StartInt_1 Int (0 1))
   (StartBool_3 Bool (true false (not StartBool_1) (str.< Start_6 Start_6) (str.contains Start Start_11) (= StartInt_2 StartInt_7) (<= StartInt_1 StartInt)))
   (StartInt_3 Int (0 1 (str.to_int Start_1)))
   (StartInt_2 Int (0 (str.len Start_1) (str.indexof Start_2 Start_3 StartInt_3) (str.to_int Start_1)))
   (StartInt_6 Int (1 (str.indexof Start_3 Start_8 StartInt_7) (str.to_int Start_2)))
   (Start_7 String ("b" "" (str.++ Start_6 Start_7) (str.replace Start_4 Start_8 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_9 Start_10)))
   (Start_17 String ("1" (str.at Start_7 StartInt_10) (str.substr Start_18 StartInt_11 StartInt_10)))
   (StartInt_7 Int (0 (str.len Start_8) (str.indexof Start_5 Start_12 StartInt_1) (str.to_int Start_2)))
   (StartInt_11 Int (1 (str.indexof Start_1 Start_16 StartInt_9)))
   (Start_12 String (x "a" (str.substr Start_8 StartInt_6 StartInt) (str.replace Start_13 Start_12 Start_8) (str.from_int StartInt_1) (ite StartBool_3 Start_6 Start_8)))
   (Start_13 String ("a" (str.++ Start_11 Start_14) (str.at Start_7 StartInt_6) (str.from_int StartInt_2)))
   (Start_9 String (y (str.at Start_5 StartInt) (str.substr Start_1 StartInt_6 StartInt_8) (str.replace Start_8 Start_4 Start_2) (ite StartBool_3 Start_11 Start_13)))
   (StartInt_10 Int (0 1 (str.len Start_9) (str.indexof Start_17 Start StartInt)))
   (StartInt_8 Int (1 (str.len Start_12) (str.to_int Start_3)))
   (Start_3 String ("0" (str.at Start_3 StartInt_2)))
   (Start_14 String (x "1" (str.++ Start_4 Start_7) (str.substr Start_9 StartInt_2 StartInt_3) (str.replace Start_12 Start_5 Start_2) (str.from_int StartInt_3)))
   (Start_6 String ("a" (str.++ Start_10 Start_3) (str.replace Start_13 Start_8 Start_5)))
   (Start_5 String ("b" (str.++ Start_8 Start_15) (str.replace Start Start_9 Start_13)))
   (StartBool_1 Bool (false true (str.<= Start_1 Start) (str.suffixof Start_1 Start) (str.contains Start_3 Start_3)))
   (Start_15 String ("0" "a" "" "b" y x "1"))
   (StartInt_9 Int (1 0 (str.indexof Start_10 Start_4 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.at y (str.len x)) "b" "0")))

(check-synth)
