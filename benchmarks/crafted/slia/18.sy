(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartInt_8 Int) (Start_11 String) (StartBool_3 Bool) (Start_9 String) (StartInt_7 Int) (Start_7 String) (Start_10 String) (StartBool_4 Bool) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_5 Bool) (Start_8 String) (StartInt_1 Int) (StartInt_3 Int) (Start_3 String) (Start_4 String) (Start_2 String) (Start_1 String) (StartBool_2 Bool) (Start_5 String) (StartInt_4 Int) (Start_6 String))
  ((Start String ("1" y (str.at Start_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start_3 Start_4 StartInt_2) (str.to_int Start)))
   (StartBool Bool (true false (not StartBool_4) (str.< Start_10 Start_4) (= Start_2 Start_11)))
   (StartInt_5 Int (1 0 (str.len Start_10) (str.to_int Start_1)))
   (StartInt_8 Int (0))
   (Start_11 String ("0" x "" (str.substr Start_8 StartInt_1 StartInt_8) (str.replace Start_1 Start_3 Start_4) (str.from_int StartInt_3) (ite StartBool Start_7 Start_7)))
   (StartBool_3 Bool (true false (not StartBool_5) (and StartBool_1 StartBool_1) (str.< Start_3 Start_9) (str.<= Start_7 Start) (str.prefixof Start_11 Start_2) (str.suffixof Start_3 Start_8) (= StartInt_4 StartInt_7)))
   (Start_9 String (x y (str.at Start_9 StartInt_6) (str.substr Start_10 StartInt_5 StartInt_3) (str.replace Start_6 Start_8 Start_8) (ite StartBool_1 Start_1 Start_1)))
   (StartInt_7 Int (0 (str.len Start_7)))
   (Start_7 String ("0" (str.++ Start_8 Start_8) (str.at Start_8 StartInt_6) (str.substr Start_8 StartInt_7 StartInt_4) (str.replace Start Start_5 Start_5) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_1)))
   (Start_10 String (x "a" "1" (str.++ Start_7 Start_1) (str.at Start_6 StartInt_5) (str.replace Start_3 Start_10 Start_10) (str.from_int StartInt_3) (ite StartBool_3 Start_8 Start_2)))
   (StartBool_4 Bool (true (not StartBool) (str.< Start_3 Start_2) (str.suffixof Start_6 Start_2) (str.contains Start_7 Start_7) (= Start_7 Start_1)))
   (StartInt_6 Int (0 (str.indexof Start Start_5 StartInt_4) (str.to_int Start_3)))
   (StartBool_1 Bool (true false (not StartBool_1)))
   (StartInt_2 Int (0 (str.len Start_1) (str.to_int Start_1)))
   (StartBool_5 Bool (false (and StartBool_5 StartBool_1) (str.< Start_3 Start_4) (str.prefixof Start_4 Start) (= StartInt_5 StartInt_6)))
   (Start_8 String ("1" (str.at Start_2 StartInt) (str.replace Start_9 Start Start_2) (ite StartBool_4 Start_8 Start)))
   (StartInt_1 Int (1 (str.len Start_2) (str.to_int Start_2)))
   (StartInt_3 Int (0 (str.len Start_1) (str.indexof Start_3 Start_3 StartInt_2) (str.to_int Start_3)))
   (Start_3 String ("a" (str.at Start StartInt_3) (ite StartBool_1 Start_2 Start)))
   (Start_4 String ("b" x (str.++ Start_1 Start_5) (str.at Start_5 StartInt_4) (str.replace Start_1 Start Start_5) (str.from_int StartInt_4) (ite StartBool Start Start)))
   (Start_2 String ("" "0" (str.substr Start_1 StartInt_3 StartInt_2) (str.from_int StartInt_1)))
   (Start_1 String ("0" "1" y (str.at Start_2 StartInt_4)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_4 StartBool_5) (str.< Start_4 Start_4) (str.prefixof Start_2 Start_1) (= Start_5 Start_1) (= StartInt StartInt_4)))
   (Start_5 String ("b" "a" (str.++ Start_2 Start_1) (str.at Start_3 StartInt) (str.substr Start_4 StartInt_5 StartInt) (str.from_int StartInt_2) (ite StartBool_2 Start_6 Start_3)))
   (StartInt_4 Int (0 1 (str.len Start_3) (str.indexof Start_2 Start_1 StartInt_2) (str.to_int Start)))
   (Start_6 String (y "a" (str.substr Start_2 StartInt_3 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "" "1")))

(check-synth)
