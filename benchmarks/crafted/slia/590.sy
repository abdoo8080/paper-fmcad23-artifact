(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_11 String) (Start_9 String) (StartInt_8 Int) (StartInt_7 Int) (StartInt_4 Int) (Start_8 String) (StartInt_5 Int) (StartBool_4 Bool) (StartInt_6 Int) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_3 Bool) (Start_3 String) (Start_10 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_2 String) (Start_6 String) (Start_4 String) (Start_1 String) (Start_7 String) (Start_5 String))
  ((Start String ("a" y "b" "0" (str.++ Start_1 Start_1) (str.replace Start Start_1 Start_2) (str.from_int StartInt) (ite StartBool_1 Start Start)))
   (StartInt Int (0 (str.len Start)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_4 StartBool_1) (str.< Start_6 Start_8) (str.prefixof Start_9 Start_5) (str.suffixof Start_2 Start_7) (str.contains Start_4 Start) (= Start_6 Start_5) (= StartInt_3 StartInt_1) (<= StartInt_8 StartInt_7)))
   (Start_12 String ("0" (str.++ Start_9 Start_2) (ite StartBool_1 Start_6 Start_4)))
   (Start_11 String ("1" (str.at Start_10 StartInt) (str.substr Start_9 StartInt_6 StartInt_4)))
   (Start_9 String ("0" (str.++ Start_9 Start_10) (str.at Start_11 StartInt_2) (str.substr Start_6 StartInt_4 StartInt_6) (str.replace Start_4 Start_8 Start_10) (ite StartBool_4 Start_5 Start_7)))
   (StartInt_8 Int (1 0 (str.len Start_6) (str.indexof Start_10 Start_4 StartInt_7) (str.to_int Start_1)))
   (StartInt_7 Int (0 (str.indexof Start_8 Start_4 StartInt_5) (str.to_int Start_2)))
   (StartInt_4 Int (0 (str.len Start_4) (str.indexof Start_5 Start_7 StartInt_7) (str.to_int Start_7)))
   (Start_8 String ("b" "1" "" "a" (str.at Start_6 StartInt_3) (str.substr Start_6 StartInt_1 StartInt_4) (str.from_int StartInt_3)))
   (StartInt_5 Int (0 1 (str.indexof Start_5 Start_3 StartInt_6)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.< Start_8 Start) (str.contains Start_6 Start_2) (= Start_5 Start_6) (= StartInt_3 StartInt_1)))
   (StartInt_6 Int (1 (str.to_int Start_7)))
   (StartInt_1 Int (0 (str.to_int Start)))
   (StartBool_1 Bool (false (str.< Start_1 Start_1) (str.prefixof Start_2 Start_2) (str.contains Start Start_2) (= Start_1 Start_1) (<= StartInt_1 StartInt_1)))
   (StartInt_2 Int (1 0 (str.indexof Start_3 Start_4 StartInt_3)))
   (StartBool_3 Bool (false true (str.<= Start_10 Start_4) (str.prefixof Start_11 Start_10) (str.contains Start Start_12)))
   (Start_3 String (y "0" "a" x (str.at Start_4 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_3 Start_4 Start_3) (str.from_int StartInt)))
   (Start_10 String ("" (str.at Start StartInt_8) (str.substr Start StartInt StartInt_4) (ite StartBool_2 Start_4 Start_8)))
   (StartBool_2 Bool (false true (str.<= Start_2 Start) (str.prefixof Start_3 Start_1) (str.suffixof Start_5 Start_1) (= StartInt StartInt_1)))
   (StartInt_3 Int (0 (str.len Start_4)))
   (Start_2 String ("1" (str.++ Start Start_1) (str.at Start StartInt_1) (str.substr Start_3 StartInt StartInt_2) (str.replace Start_4 Start_2 Start_4) (ite StartBool Start_4 Start_2)))
   (Start_6 String (x (str.++ Start_7 Start_2) (str.replace Start_2 Start_6 Start_2) (str.from_int StartInt)))
   (Start_4 String (x (str.++ Start_3 Start_3) (str.replace Start Start_2 Start_2)))
   (Start_1 String ("a" y (str.at Start_5 StartInt_1) (ite StartBool_2 Start_1 Start_2)))
   (Start_7 String ("" x "0" "a" "b" (str.++ Start_8 Start_6) (str.substr Start StartInt_5 StartInt_1) (str.replace Start_7 Start_3 Start_7) (str.from_int StartInt_3)))
   (Start_5 String ("a" "0" "1" (str.++ Start Start_5) (str.at Start_5 StartInt_4) (str.replace Start_6 Start_4 Start_3) (str.from_int StartInt_2) (ite StartBool_2 Start_5 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.replace "0" x "b")))))

(check-synth)
