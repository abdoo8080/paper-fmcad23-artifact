(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_20 String) (Start_2 String) (StartInt_2 Int) (Start_17 String) (Start_18 String) (StartBool_9 Bool) (Start_16 String) (Start_15 String) (Start_21 String) (StartBool_2 Bool) (Start_6 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_3 String) (StartInt_6 Int) (Start_4 String) (Start_5 String) (StartInt_4 Int) (StartInt_1 Int) (Start_8 String) (Start_9 String) (StartInt_9 Int) (StartInt_7 Int) (StartBool_10 Bool) (Start_1 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_10 String) (StartBool_5 Bool) (Start_19 String) (StartBool_6 Bool) (StartInt_8 Int) (Start_7 String) (Start_11 String) (StartInt_3 Int) (StartBool_8 Bool) (StartBool_7 Bool) (Start_14 String) (Start_13 String) (Start_12 String))
  ((Start String ("a" y "b" x (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt) (ite StartBool Start Start)))
   (StartInt Int (0 (str.len Start_4) (str.indexof Start_19 Start_17 StartInt_3)))
   (StartBool Bool (true false (and StartBool_2 StartBool_8) (str.prefixof Start_5 Start_1) (str.suffixof Start_8 Start_10) (str.contains Start_6 Start_15) (= Start_20 Start_7) (<= StartInt_8 StartInt_7)))
   (Start_20 String (x (str.++ Start_4 Start_13) (str.substr Start_6 StartInt_7 StartInt_9) (str.replace Start_21 Start_5 Start_7) (str.from_int StartInt_6) (ite StartBool_10 Start_13 Start_21)))
   (Start_2 String ("" (str.at Start_4 StartInt_5) (str.substr Start_2 StartInt_2 StartInt_3) (ite StartBool_10 Start_10 Start_3)))
   (StartInt_2 Int (0 1 (str.to_int Start_12)))
   (Start_17 String ("1" "a" "0" "b" x (str.++ Start_7 Start_18)))
   (Start_18 String ("b" "0" (str.replace Start_18 Start_10 Start_4) (str.from_int StartInt_9)))
   (StartBool_9 Bool (false (str.< Start_15 Start_17) (= Start_17 Start_6) (= StartInt_6 StartInt_2) (<= StartInt_9 StartInt_6)))
   (Start_16 String (x (str.at Start_3 StartInt_6) (str.substr Start_15 StartInt StartInt_5) (str.replace Start_10 Start Start_1)))
   (Start_15 String ("0" "a" (str.at Start_6 StartInt_1) (str.replace Start_11 Start_10 Start_2) (str.from_int StartInt_6) (ite StartBool Start_11 Start_16)))
   (Start_21 String ("" "a" y "0" "1" (str.at Start_19 StartInt_7) (str.substr Start_8 StartInt_6 StartInt) (str.from_int StartInt_8) (ite StartBool_2 Start_3 Start_10)))
   (StartBool_2 Bool (true (not StartBool_3) (str.prefixof Start_6 Start_3) (str.suffixof Start_4 Start_7) (= Start_1 Start_7) (<= StartInt_3 StartInt_3)))
   (Start_6 String ("a" (str.from_int StartInt_1)))
   (StartBool_1 Bool (true (not StartBool_1) (str.<= Start_4 Start_5) (str.prefixof Start Start_5) (str.suffixof Start_4 Start) (= Start_1 Start_2)))
   (StartInt_5 Int (0 1 (str.len Start_6) (str.indexof Start_1 Start_3 StartInt_3) (str.to_int Start_3)))
   (Start_3 String ("b" "1" y "" (str.substr Start_1 StartInt_3 StartInt_4) (str.from_int StartInt_4)))
   (StartInt_6 Int (0 1 (str.len Start_6) (str.to_int Start_2)))
   (Start_4 String ("" "1" (str.++ Start_2 Start_4) (ite StartBool_2 Start_1 Start_3)))
   (Start_5 String (x y (str.++ Start_3 Start_1) (str.at Start_6 StartInt_5) (str.substr Start_5 StartInt_5 StartInt_1) (str.replace Start_2 Start Start_2) (str.from_int StartInt_6) (ite StartBool_1 Start_3 Start_6)))
   (StartInt_4 Int (1))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start_1 Start StartInt) (str.to_int Start_1)))
   (Start_8 String ("0" "b" "a" "" (str.++ Start_8 Start) (str.at Start_2 StartInt_4) (str.substr Start_7 StartInt_1 StartInt_3) (str.replace Start_3 Start_8 Start_2) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_1)))
   (Start_9 String (y "1"))
   (StartInt_9 Int (1 (str.indexof Start_18 Start_16 StartInt_4)))
   (StartInt_7 Int (1 0 (str.to_int Start_5)))
   (StartBool_10 Bool (true false (str.contains Start_12 Start_1) (= Start_9 Start_6) (= StartInt_4 StartInt_5)))
   (Start_1 String ("a" (str.replace Start Start_1 Start_2) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_1 StartBool_3) (str.< Start_9 Start) (str.prefixof Start_9 Start_9) (str.suffixof Start_7 Start_5) (= Start_8 Start)))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_1) (str.< Start_6 Start_10) (str.<= Start_7 Start_4) (str.prefixof Start_2 Start_7) (str.contains Start_7 Start_5) (= StartInt_2 StartInt_7)))
   (Start_10 String ("1" x (str.substr Start_4 StartInt StartInt_7) (str.replace Start_8 Start_4 Start_5)))
   (StartBool_5 Bool (true (and StartBool_6 StartBool_3) (str.prefixof Start_7 Start_5) (str.suffixof Start_2 Start_8) (= Start_10 Start) (= StartInt_1 StartInt_4) (<= StartInt_3 StartInt_7)))
   (Start_19 String ("0" y (str.++ Start_3 Start_14) (str.at Start_14 StartInt_5) (str.substr Start_5 StartInt_3 StartInt_7) (str.from_int StartInt_4) (ite StartBool_10 Start_2 Start_5)))
   (StartBool_6 Bool (false true (not StartBool_7) (and StartBool StartBool_5) (str.contains Start Start_10) (= Start_11 Start_8) (= StartInt_2 StartInt_3) (<= StartInt_2 StartInt_8)))
   (StartInt_8 Int (0 (str.indexof Start_3 Start_6 StartInt_2) (str.to_int Start_7)))
   (Start_7 String ("0" (str.substr Start_5 StartInt_3 StartInt_2) (str.replace Start_5 Start_2 Start_5) (ite StartBool_2 Start_8 Start)))
   (Start_11 String ("1" "b" (str.++ Start_11 Start_7) (str.at Start_4 StartInt_1)))
   (StartInt_3 Int (1 0))
   (StartBool_8 Bool (true (and StartBool_2 StartBool_9) (str.< Start_12 Start_6) (str.<= Start_7 Start_13) (str.prefixof Start_5 Start_1) (= Start_4 Start_11) (<= StartInt_5 StartInt_1)))
   (StartBool_7 Bool (true false (not StartBool_8) (and StartBool_8 StartBool_6) (= StartInt_8 StartInt_1)))
   (Start_14 String ("0" "a" (str.from_int StartInt_6)))
   (Start_13 String ("0" y (str.++ Start_2 Start_14) (str.replace Start_9 Start_11 Start_4) (ite StartBool_6 Start_14 Start)))
   (Start_12 String ("a" (str.++ Start_10 Start_13) (str.replace Start_4 Start_15 Start_5) (str.from_int StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.substr y 0 1) (str.at x 1))))

(check-synth)
