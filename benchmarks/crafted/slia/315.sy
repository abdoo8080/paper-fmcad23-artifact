(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (Start_16 String) (Start_15 String) (Start_12 String) (Start_14 String) (Start_11 String) (Start_10 String) (StartInt_6 Int) (StartBool_2 Bool) (Start_1 String) (Start_7 String) (Start_3 String) (Start_9 String) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_5 String) (StartInt_1 Int) (Start_13 String) (Start_6 String) (StartBool_4 Bool) (StartInt_5 Int) (Start_4 String) (StartBool_3 Bool) (Start_8 String))
  ((Start String ("" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_2)))
   (StartInt Int (0 1 (str.len Start_8) (str.indexof Start_5 Start_12 StartInt_2)))
   (StartBool Bool (false (and StartBool_3 StartBool_1) (str.< Start_15 Start_9) (str.<= Start_15 Start_5) (str.suffixof Start_11 Start_7) (= Start_4 Start_14) (= StartInt_6 StartInt_5) (<= StartInt_2 StartInt_6)))
   (Start_2 String (y "1" (str.++ Start_12 Start_3) (str.substr Start_15 StartInt_2 StartInt_2) (ite StartBool Start_12 Start_1)))
   (Start_16 String ("b" "" (str.at Start StartInt_5) (str.substr Start_2 StartInt StartInt_6) (str.replace Start_11 Start_8 Start_4)))
   (Start_15 String ("0" (str.at Start_10 StartInt_5) (ite StartBool Start_2 Start_12)))
   (Start_12 String (x y (str.from_int StartInt) (ite StartBool_4 Start_2 Start_5)))
   (Start_14 String (y (str.++ Start_1 Start_15) (ite StartBool_2 Start_12 Start)))
   (Start_11 String ("1" "a" "b" (str.at Start_5 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start Start_2 Start_9) (str.from_int StartInt_3)))
   (Start_10 String ("" (str.++ Start_7 Start_4) (str.from_int StartInt_5) (ite StartBool_2 Start_11 Start_3)))
   (StartInt_6 Int (1 0))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool StartBool_3) (str.<= Start_10 Start_5) (str.prefixof Start_4 Start_6) (str.suffixof Start Start_8) (= StartInt_4 StartInt)))
   (Start_1 String ("a" (str.++ Start_2 Start_3) (ite StartBool Start_2 Start_2)))
   (Start_7 String ("0" y "" "1" (str.++ Start_1 Start_16) (str.from_int StartInt_3) (ite StartBool Start_3 Start_14)))
   (Start_3 String ("b" (str.++ Start_4 Start_5) (str.at Start_1 StartInt) (str.substr Start_2 StartInt_4 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_4 Start)))
   (Start_9 String ("1" (str.++ Start_3 Start_5) (str.at Start_5 StartInt_2) (ite StartBool Start Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_1 Start_1 StartInt_3) (str.to_int Start)))
   (StartBool_1 Bool (false (str.< Start_4 Start_8) (str.prefixof Start_4 Start_5) (str.suffixof Start_9 Start_6) (str.contains Start_9 Start_1) (= Start_6 Start_8) (<= StartInt_3 StartInt_3)))
   (StartInt_3 Int (0))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.to_int Start)))
   (Start_5 String ("0" y (str.++ Start_2 Start_4) (str.substr Start_6 StartInt_1 StartInt_3) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 0 (str.indexof Start_11 Start_4 StartInt)))
   (Start_13 String ("1" (str.++ Start_14 Start_6) (str.from_int StartInt)))
   (Start_6 String (y (str.at Start StartInt_5) (str.replace Start_2 Start_5 Start_6) (str.from_int StartInt)))
   (StartBool_4 Bool (true (not StartBool_3) (str.contains Start_6 Start_4) (= Start_13 Start_4)))
   (StartInt_5 Int (0 1 (str.len Start_5) (str.indexof Start Start StartInt_4) (str.to_int Start_1)))
   (Start_4 String (x (str.at Start_1 StartInt_1) (str.substr Start_7 StartInt_2 StartInt_3) (str.replace Start_4 Start_4 Start_5) (ite StartBool_1 Start_5 Start_6)))
   (StartBool_3 Bool (false true (str.prefixof Start_1 Start_6) (str.contains Start_5 Start_9) (= Start_12 Start_5) (= StartInt_4 StartInt_4)))
   (Start_8 String ("a" (str.++ Start_1 Start) (str.replace Start_1 Start_5 Start_5) (ite StartBool_2 Start_8 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof "0" y 0))))

(check-synth)
