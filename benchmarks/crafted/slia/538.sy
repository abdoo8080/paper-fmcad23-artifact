(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_1 String) (Start_8 String) (StartInt_1 Int) (Start_13 String) (StartInt_8 Int) (Start_5 String) (StartBool_3 Bool) (Start_2 String) (StartInt_4 Int) (Start_4 String) (StartInt_2 Int) (StartInt_3 Int) (Start_11 String) (Start_6 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_16 String) (Start_3 String) (StartInt_9 Int) (StartInt_6 Int) (Start_17 String) (StartInt_7 Int) (Start_12 String) (StartBool_2 Bool) (Start_14 String) (Start_15 String) (Start_9 String) (Start_7 String) (StartBool_4 Bool) (Start_10 String) (StartBool_5 Bool))
  ((Start String (y "1" (str.at Start_1 StartInt_1) (str.replace Start_2 Start Start) (str.from_int StartInt_1) (ite StartBool Start Start_3)))
   (StartInt Int (0 (str.len Start_15) (str.indexof Start_5 Start_18 StartInt_9)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_4 StartBool_2) (str.< Start_16 Start_11) (str.<= Start_6 Start_8) (str.contains Start Start_7) (<= StartInt StartInt_5)))
   (Start_18 String ("" (str.++ Start_1 Start_6) (str.at Start_14 StartInt_4) (str.substr Start_7 StartInt_1 StartInt_8) (str.replace Start_8 Start_3 Start_10) (str.from_int StartInt_6)))
   (Start_1 String (x (str.substr Start_7 StartInt StartInt_9) (str.replace Start_16 Start_15 Start_14)))
   (Start_8 String ("" "1" (str.replace Start_9 Start_4 Start_10) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_5)))
   (StartInt_1 Int (1 (str.len Start_17) (str.to_int Start_16)))
   (Start_13 String ("" (str.replace Start_1 Start_6 Start_11) (str.from_int StartInt_4) (ite StartBool_4 Start_7 Start_7)))
   (StartInt_8 Int (1 0 (str.indexof Start_16 Start_12 StartInt_2)))
   (Start_5 String ("a" (str.at Start_6 StartInt_2) (str.substr Start_5 StartInt_2 StartInt_1)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_3 StartBool) (str.< Start_12 Start_5) (str.suffixof Start_13 Start_2) (= StartInt_1 StartInt_5) (<= StartInt_4 StartInt)))
   (Start_2 String ("" "b" (str.at Start_10 StartInt_7) (str.substr Start_5 StartInt_2 StartInt_6) (str.replace Start_7 Start_2 Start_8)))
   (StartInt_4 Int (1 0 (str.indexof Start_10 Start_9 StartInt)))
   (Start_4 String ("1" (str.++ Start_4 Start_2) (str.at Start_2 StartInt_1) (str.replace Start_5 Start_2 Start_1)))
   (StartInt_2 Int (1 (str.to_int Start_4)))
   (StartInt_3 Int (1 (str.len Start_7) (str.indexof Start_2 Start_8 StartInt_1) (str.to_int Start_1)))
   (Start_11 String (x (str.substr Start StartInt_2 StartInt_5)))
   (Start_6 String (y (str.++ Start_1 Start_4) (str.substr Start StartInt_1 StartInt_3) (str.from_int StartInt_3)))
   (StartInt_5 Int (1 0 (str.to_int Start_5)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_11 Start_11) (str.suffixof Start_7 Start_3) (<= StartInt_1 StartInt_4)))
   (Start_16 String ("" "b" y "0" x "a" "1" (str.substr Start_2 StartInt StartInt_5) (str.replace Start_2 Start_13 Start_7)))
   (Start_3 String (x (str.++ Start_3 Start_4) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_9 Int (1 (str.len Start_7) (str.indexof Start_11 Start_10 StartInt_7) (str.to_int Start_13)))
   (StartInt_6 Int (1 0 (str.len Start_7) (str.indexof Start_9 Start_8 StartInt_2) (str.to_int Start_1)))
   (Start_17 String ("0" "b" "a" (str.at Start_1 StartInt_8) (str.substr Start_1 StartInt_3 StartInt_4) (str.from_int StartInt_1)))
   (StartInt_7 Int (1 (str.indexof Start_7 Start_15 StartInt_2)))
   (Start_12 String (x (str.at Start_9 StartInt_5) (str.substr Start StartInt_7 StartInt_6) (str.replace Start_14 Start_6 Start_6) (str.from_int StartInt_3) (ite StartBool_4 Start_11 Start_2)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_2) (str.contains Start_16 Start_3) (= Start_11 Start_16) (= StartInt_6 StartInt_2)))
   (Start_14 String ("1" (str.at Start_8 StartInt_3) (str.replace Start_4 Start_6 Start_8)))
   (Start_15 String ("1" (str.at Start_6 StartInt_2) (str.replace Start_9 Start_9 Start_3) (ite StartBool_3 Start_16 Start_10)))
   (Start_9 String ("0" (str.++ Start_6 Start) (str.at Start_8 StartInt_6) (str.substr Start_6 StartInt_6 StartInt_2) (str.replace Start_1 Start_10 Start_5)))
   (Start_7 String ("b" (str.at Start_1 StartInt_6) (ite StartBool_5 Start_13 Start_8)))
   (StartBool_4 Bool (true false (not StartBool_3) (str.prefixof Start_9 Start_12) (str.contains Start_3 Start_5) (= StartInt_3 StartInt_3) (<= StartInt_6 StartInt)))
   (Start_10 String (y (str.++ Start_16 Start_16) (str.at Start StartInt_3) (str.substr Start_4 StartInt_5 StartInt_4)))
   (StartBool_5 Bool (true false (str.< Start_2 Start_16) (str.suffixof Start_7 Start_2) (<= StartInt_7 StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "1" (str.at x 1) "a") 0)))

(check-synth)
