(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_11 String) (StartInt_7 Int) (Start_1 String) (StartBool_2 Bool) (Start_8 String) (Start_9 String) (Start_5 String) (StartInt_6 Int) (StartInt_2 Int) (StartBool_4 Bool) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_1 Int) (StartBool_3 Bool) (Start_4 String) (Start_7 String) (StartInt_3 Int) (Start_2 String) (Start_10 String) (Start_3 String) (StartInt_5 Int) (Start_6 String))
  ((Start String (y "1" (str.++ Start Start_1) (str.replace Start Start_1 Start) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_3) (str.indexof Start_10 Start_9 StartInt_2) (str.to_int Start)))
   (StartBool Bool (true (not StartBool) (and StartBool_4 StartBool_4) (str.< Start_2 Start_5) (str.<= Start Start_2) (str.suffixof Start_6 Start_10) (str.contains Start_4 Start_9) (<= StartInt_5 StartInt_6)))
   (StartInt_8 Int (1 (str.indexof Start_3 Start_8 StartInt_7) (str.to_int Start_6)))
   (Start_11 String ("0" x (str.at Start_4 StartInt_8) (str.replace Start_4 Start_9 Start_11)))
   (StartInt_7 Int (1 0))
   (Start_1 String ("b" "0" (str.++ Start_3 Start_9) (str.at Start StartInt) (str.substr Start_4 StartInt_4 StartInt_2) (str.replace Start_10 Start_8 Start_1)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool) (str.< Start_9 Start_8) (= Start_4 Start)))
   (Start_8 String ("" "0" "1" "b" "a" x (str.++ Start_5 Start_3) (str.at Start_5 StartInt_2) (str.substr Start_1 StartInt_3 StartInt_2) (str.replace Start_4 Start_8 Start_8) (str.from_int StartInt_4)))
   (Start_9 String (y (str.++ Start_2 Start_9) (str.at Start StartInt_1) (str.substr Start_9 StartInt_1 StartInt_1) (ite StartBool_1 Start_8 Start_7)))
   (Start_5 String (x "" y "1" (str.replace Start_1 Start_2 Start)))
   (StartInt_6 Int (1 (str.len Start) (str.to_int Start)))
   (StartInt_2 Int (0 (str.indexof Start_4 Start_4 StartInt_1)))
   (StartBool_4 Bool (false (not StartBool_3) (str.prefixof Start_1 Start_3)))
   (StartInt_4 Int (0 1 (str.len Start_2) (str.to_int Start_9)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_2) (str.< Start_2 Start) (str.contains Start_1 Start_3) (= StartInt_1 StartInt_1)))
   (StartInt_1 Int (0 (str.indexof Start_2 Start StartInt) (str.to_int Start_4)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_1 StartBool_2) (str.< Start Start_2) (str.contains Start_5 Start_1) (= Start_2 Start_1) (<= StartInt StartInt_2)))
   (Start_4 String ("1" y (str.++ Start_1 Start_5) (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_3) (str.replace Start_3 Start_4 Start_5) (ite StartBool_3 Start Start_3)))
   (Start_7 String ("0" "a" (str.at Start_3 StartInt_2) (str.replace Start_2 Start_3 Start_7) (ite StartBool_2 Start Start_3)))
   (StartInt_3 Int (0 (str.to_int Start_3)))
   (Start_2 String (y (str.++ Start Start_3) (str.at Start_6 StartInt_2) (str.replace Start_7 Start_6 Start_2) (str.from_int StartInt_2) (ite StartBool_3 Start_4 Start_2)))
   (Start_10 String ("b" "1" "0" (str.++ Start_7 Start_5) (ite StartBool_2 Start_3 Start_10)))
   (Start_3 String ("" x "0" "a" "1" (str.replace Start_1 Start_5 Start_3) (ite StartBool_4 Start_1 Start_5)))
   (StartInt_5 Int (0 (str.indexof Start_11 Start_8 StartInt_7) (str.to_int Start_2)))
   (Start_6 String ("1" (str.substr Start_8 StartInt StartInt_2) (str.replace Start_1 Start_9 Start_7) (ite StartBool_3 Start_2 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= x "0") "0" (str.++ "0" "a"))))

(check-synth)
