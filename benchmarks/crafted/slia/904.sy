(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartInt_7 Int) (Start_16 String) (Start_7 String) (StartInt_8 Int) (Start_10 String) (Start_11 String) (Start_13 String) (Start_15 String) (StartInt_5 Int) (Start_14 String) (StartInt_6 Int) (Start_8 String) (Start_6 String) (Start_12 String) (StartInt_1 Int) (Start_4 String) (StartInt_4 Int) (Start_3 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_5 String) (StartInt_3 Int) (Start_1 String) (Start_9 String))
  ((Start String ("b" (str.++ Start Start) (str.at Start StartInt_1) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.indexof Start Start_1 StartInt_1)))
   (StartBool Bool (false (str.< Start_13 Start_11) (str.contains Start Start_10) (<= StartInt_4 StartInt_8)))
   (Start_2 String ("" x y "0" "a" "b" "1" (str.++ Start_11 Start_11) (str.replace Start_2 Start_8 Start_3) (str.from_int StartInt_6)))
   (StartInt_7 Int (0 (str.indexof Start_8 Start_2 StartInt_8)))
   (Start_16 String ("b" (str.replace Start_3 Start_15 Start_9)))
   (Start_7 String (x "b" "0" (str.substr Start_3 StartInt_5 StartInt_1) (ite StartBool Start_14 Start_8)))
   (StartInt_8 Int (1))
   (Start_10 String ("b" "" (str.at Start_7 StartInt_4) (str.replace Start_12 Start_11 Start_2) (ite StartBool Start_13 Start_6)))
   (Start_11 String (y (str.++ Start_8 Start_4) (str.substr Start_9 StartInt StartInt) (str.replace Start_6 Start Start_2)))
   (Start_13 String ("1" x "0" (str.at Start_1 StartInt_4) (str.substr Start_3 StartInt StartInt_6) (ite StartBool Start_12 Start_1)))
   (Start_15 String ("a" (str.++ Start_4 Start_2) (str.replace Start_4 Start_8 Start_13) (ite StartBool_1 Start_2 Start_7)))
   (StartInt_5 Int (1 0 (str.to_int Start)))
   (Start_14 String ("" x (str.++ Start_9 Start_4) (str.at Start_3 StartInt_5) (str.substr Start_5 StartInt StartInt_7) (str.replace Start_15 Start_4 Start_16) (str.from_int StartInt_3)))
   (StartInt_6 Int (1 (str.indexof Start_12 Start_10 StartInt_5)))
   (Start_8 String ("a" (str.++ Start Start_10) (str.at Start_11 StartInt_6) (str.from_int StartInt_6)))
   (Start_6 String ("a" (ite StartBool_1 Start_6 Start_1)))
   (Start_12 String ("" (str.++ Start_13 Start_6) (str.at Start_12 StartInt_4)))
   (StartInt_1 Int (0 (str.len Start) (str.to_int Start)))
   (Start_4 String ("a"))
   (StartInt_4 Int (1 (str.len Start) (str.indexof Start_9 Start_5 StartInt_3) (str.to_int Start_9)))
   (Start_3 String ("1" "b" y x (str.++ Start_5 Start_6) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_3 Start_5 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_1)))
   (StartInt_2 Int (1))
   (StartBool_1 Bool (false true (str.prefixof Start_2 Start_6) (str.suffixof Start_2 Start) (= Start_4 Start_4)))
   (Start_5 String ("1" "0" (str.++ Start_1 Start_4) (str.at Start_2 StartInt_2) (str.replace Start_4 Start_7 Start_5) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_8) (str.indexof Start_8 Start_9 StartInt_4) (str.to_int Start_4)))
   (Start_1 String ("0" (str.++ Start_2 Start_3) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start_1 Start_4 Start_2) (str.from_int StartInt_2) (ite StartBool Start_1 Start_2)))
   (Start_9 String (x "a" y "" (str.at Start StartInt_2) (str.substr Start_7 StartInt_5 StartInt) (ite StartBool Start_8 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y (str.++ "1" "0") x) 1)))

(check-synth)
