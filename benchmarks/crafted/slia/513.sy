(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_7 String) (StartBool_2 Bool) (Start_9 String) (StartInt_5 Int) (Start_3 String) (Start_2 String) (StartInt_6 Int) (Start_6 String) (Start_8 String) (Start_5 String) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_4 Int) (StartInt_1 Int) (Start_4 String) (StartInt_2 Int) (Start_1 String))
  ((Start String (x (str.++ Start Start) (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (1 (str.len Start_4) (str.indexof Start_4 Start_4 StartInt_5) (str.to_int Start_3)))
   (StartBool Bool (true (not StartBool_2) (str.prefixof Start_3 Start) (= Start_2 Start_1)))
   (StartBool_3 Bool (false (not StartBool_1) (str.< Start_3 Start_3) (str.prefixof Start_7 Start_3) (str.suffixof Start_5 Start_9) (<= StartInt_2 StartInt_5)))
   (Start_7 String (x (str.substr Start_1 StartInt_4 StartInt_5) (str.from_int StartInt_3)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_1) (str.< Start_7 Start) (str.<= Start_6 Start_7) (str.prefixof Start_3 Start) (str.suffixof Start_6 Start) (str.contains Start_8 Start_7) (= StartInt_2 StartInt_1)))
   (Start_9 String ("a" (str.at Start_7 StartInt) (str.from_int StartInt_6) (ite StartBool_2 Start_4 Start_4)))
   (StartInt_5 Int (1 0 (str.to_int Start_1)))
   (Start_3 String ("1" "a" (str.at Start_1 StartInt) (str.substr Start_1 StartInt_2 StartInt_2)))
   (Start_2 String ("b" y (str.++ Start_3 Start_4) (str.replace Start Start_5 Start_2) (str.from_int StartInt_1) (ite StartBool Start_6 Start_4)))
   (StartInt_6 Int (0 1 (str.len Start_6)))
   (Start_6 String ("0" y "" "1" (str.++ Start_4 Start_3) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_4 Start_1 Start_6) (str.from_int StartInt_1)))
   (Start_8 String ("b" (str.++ Start Start) (ite StartBool_2 Start Start_5)))
   (Start_5 String ("1" (str.++ Start_4 Start_6) (str.at Start StartInt) (str.replace Start_1 Start_4 Start_4) (str.from_int StartInt)))
   (StartBool_1 Bool (false true (str.< Start_3 Start_1) (str.suffixof Start_2 Start_6) (str.contains Start_6 Start_4) (= Start_3 Start) (= StartInt_3 StartInt_3) (<= StartInt_3 StartInt)))
   (StartInt_3 Int (0 (str.len Start_6) (str.indexof Start_2 Start_6 StartInt_4)))
   (StartInt_4 Int (1 0 (str.to_int Start_2)))
   (StartInt_1 Int (1 0))
   (Start_4 String ("" x y "0" "a" (str.++ Start_1 Start) (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_6 Start_5 Start_3) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_2)))
   (Start_1 String (y (str.++ Start Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "a" x (str.at y 1)) "b")))

(check-synth)
