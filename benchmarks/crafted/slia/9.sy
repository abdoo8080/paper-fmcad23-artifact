(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_1 String) (StartInt_1 Int) (StartInt_5 Int) (Start_2 String) (Start_6 String) (StartInt_7 Int) (StartBool_1 Bool) (Start_7 String) (Start_3 String) (StartBool_3 Bool) (Start_10 String) (Start_8 String) (StartInt_2 Int) (StartInt_6 Int) (Start_5 String) (StartBool_2 Bool) (Start_4 String) (StartInt_3 Int) (StartInt_4 Int))
  ((Start String ("b" (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start_3)))
   (StartInt Int (0 1 (str.len Start_4) (str.indexof Start_6 Start_2 StartInt_5)))
   (StartBool Bool (false (not StartBool) (str.< Start_2 Start_2) (str.prefixof Start_1 Start_7) (str.suffixof Start_2 Start_9) (= Start Start_2) (= StartInt_1 StartInt_6) (<= StartInt_2 StartInt_4)))
   (Start_9 String ("b" (str.++ Start_3 Start_7) (str.replace Start_1 Start_5 Start_10) (str.from_int StartInt_6)))
   (Start_1 String ("0" x "a" (str.at Start_7 StartInt_6) (str.substr Start_5 StartInt_7 StartInt_5) (str.replace Start Start_8 Start_5) (ite StartBool_2 Start_2 Start_4)))
   (StartInt_1 Int (0 (str.len Start_5) (str.indexof Start_8 Start_2 StartInt_1)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_7 StartInt_3)))
   (Start_2 String ("0" "" (str.at Start_4 StartInt_5) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt_3)))
   (Start_6 String (y (str.at Start_3 StartInt_3) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_5 Start_6 Start_6) (ite StartBool Start_1 Start_6)))
   (StartInt_7 Int (0))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start Start_4) (str.<= Start_3 Start_5) (str.prefixof Start_4 Start_3) (= StartInt_1 StartInt_2)))
   (Start_7 String ("" (str.++ Start_1 Start_5) (str.at Start_1 StartInt_1)))
   (Start_3 String ("0" x "" y "1" "a" (str.substr Start_2 StartInt StartInt) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt) (ite StartBool_1 Start Start_1)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool_2 StartBool_1) (str.< Start_5 Start_4) (str.<= Start_6 Start_6) (str.prefixof Start_7 Start_7) (= Start_4 Start_4) (= StartInt_3 StartInt)))
   (Start_10 String (x y (str.substr Start_9 StartInt_4 StartInt_2) (str.replace Start_10 Start_6 Start_6) (str.from_int StartInt_4)))
   (Start_8 String (y (str.++ Start Start_4) (str.from_int StartInt_4) (ite StartBool_3 Start_1 Start_2)))
   (StartInt_2 Int (0 1 (str.indexof Start_4 Start_1 StartInt_2) (str.to_int Start_4)))
   (StartInt_6 Int (0 (str.indexof Start_3 Start_1 StartInt_5)))
   (Start_5 String (x "a" (str.substr Start StartInt_2 StartInt_1) (str.replace Start_4 Start_6 Start_5)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_1) (str.< Start_8 Start_6) (str.suffixof Start_4 Start) (str.contains Start_6 Start_8) (= StartInt StartInt) (<= StartInt_2 StartInt_2)))
   (Start_4 String ("b" "1" (ite StartBool_3 Start_4 Start_3)))
   (StartInt_3 Int (0 1 (str.len Start) (str.indexof Start_6 Start_3 StartInt_2)))
   (StartInt_4 Int (0 (str.indexof Start_3 Start_2 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" x "0")))

(check-synth)
