(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_7 Int) (StartBool_1 Bool) (Start_9 String) (StartInt_6 Int) (Start_8 String) (Start_2 String) (Start_7 String) (Start_1 String) (Start_5 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_1 Int) (Start_6 String) (Start_4 String) (Start_3 String) (StartInt_5 Int) (StartInt_3 Int) (StartBool_3 Bool) (StartInt_2 Int))
  ((Start String ("a" "1" "" (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_1) (str.to_int Start_8)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_1 StartBool_2) (str.< Start_4 Start_7) (str.<= Start Start_8) (str.suffixof Start_9 Start_2) (str.contains Start_5 Start_4) (= StartInt_1 StartInt_1) (<= StartInt_4 StartInt_8)))
   (StartInt_8 Int (0 (str.len Start_8) (str.to_int Start_7)))
   (StartInt_7 Int (1 0 (str.indexof Start_8 Start_8 StartInt_2) (str.to_int Start_7)))
   (StartBool_1 Bool (false true (str.prefixof Start_8 Start_5) (= StartInt_4 StartInt_4) (<= StartInt_7 StartInt_4)))
   (Start_9 String ("a" (str.at Start_7 StartInt_2) (str.substr Start_5 StartInt_1 StartInt_3)))
   (StartInt_6 Int (0 (str.to_int Start_7)))
   (Start_8 String (y x (str.++ Start_3 Start) (str.at Start_9 StartInt_6) (ite StartBool_1 Start Start_1)))
   (Start_2 String ("1" "a" x "b" (str.at Start_6 StartInt_2) (str.substr Start_7 StartInt_3 StartInt_3) (str.from_int StartInt)))
   (Start_7 String ("0" x (str.++ Start_4 Start_6) (str.substr Start_8 StartInt_1 StartInt_2)))
   (Start_1 String ("a" (str.substr Start StartInt StartInt) (str.from_int StartInt) (ite StartBool_2 Start Start_1)))
   (Start_5 String ("" (str.++ Start_6 Start_6) (str.from_int StartInt)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool) (str.< Start_1 Start_2) (str.prefixof Start_2 Start) (str.contains Start_2 Start_3) (= Start_3 Start_2) (= StartInt_1 StartInt) (<= StartInt StartInt_1)))
   (StartInt_4 Int (1 0 (str.indexof Start_5 Start_1 StartInt_5) (str.to_int Start_4)))
   (StartInt_1 Int (0 (str.indexof Start_4 Start_4 StartInt_1)))
   (Start_6 String ("a" y (str.at Start_4 StartInt_1) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_3 Start_3 Start_6)))
   (Start_4 String ("0" "b" y "" (str.++ Start_3 Start_3) (str.from_int StartInt_1)))
   (Start_3 String ("b" (str.at Start_5 StartInt_2) (str.substr Start_4 StartInt_3 StartInt) (str.replace Start_5 Start_5 Start_2) (str.from_int StartInt_1) (ite StartBool_3 Start_6 Start_4)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_3 Start_3 StartInt_4)))
   (StartInt_3 Int (1 (str.indexof Start_5 Start_4 StartInt_2)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool_2 StartBool) (str.<= Start_4 Start) (= Start_4 Start_5) (= StartInt_4 StartInt) (<= StartInt_2 StartInt_3)))
   (StartInt_2 Int (0 (str.len Start_1) (str.indexof Start Start_5 StartInt_4) (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.at y 1))))

(check-synth)
