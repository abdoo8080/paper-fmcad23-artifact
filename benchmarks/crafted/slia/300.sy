(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_6 String) (Start_9 String) (Start_7 String) (StartInt_1 Int) (StartInt_2 Int) (StartInt_7 Int) (StartInt_5 Int) (Start_3 String) (Start_2 String) (Start_4 String) (Start_5 String) (Start_1 String) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_6 Int) (StartInt_4 Int))
  ((Start String ("" (str.substr Start StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.len Start_1) (str.indexof Start_2 Start_1 StartInt_1) (str.to_int Start_2)))
   (StartBool Bool (false true (not StartBool) (and StartBool StartBool_1) (str.< Start_2 Start) (str.<= Start_3 Start_2) (str.suffixof Start_2 Start) (str.contains Start Start) (= StartInt_4 StartInt_3) (<= StartInt_5 StartInt_5)))
   (Start_8 String ("b" x (str.at Start_8 StartInt_1) (str.replace Start_1 Start_9 Start_1) (str.from_int StartInt_5)))
   (Start_6 String ("1" (str.substr Start_2 StartInt StartInt_7) (str.replace Start Start_2 Start_7) (str.from_int StartInt_7)))
   (Start_9 String ("1" (str.at Start StartInt_1) (str.substr Start_4 StartInt StartInt_5) (ite StartBool Start Start_6)))
   (Start_7 String ("" (str.++ Start_8 Start_3) (str.at Start_2 StartInt) (str.substr Start StartInt_1 StartInt) (str.replace Start_4 Start_6 Start_8) (ite StartBool Start_4 Start_5)))
   (StartInt_1 Int (0 (str.indexof Start_3 Start_2 StartInt_2) (str.to_int Start_1)))
   (StartInt_2 Int (0 (str.len Start_2)))
   (StartInt_7 Int (1 0 (str.len Start_7)))
   (StartInt_5 Int (1 0 (str.len Start_2)))
   (Start_3 String ("" (str.++ Start_3 Start_2) (str.from_int StartInt_1)))
   (Start_2 String ("a" (str.++ Start_1 Start) (ite StartBool Start Start)))
   (Start_4 String (y (str.at Start_4 StartInt_6) (str.substr Start StartInt_7 StartInt_7) (str.replace Start_5 Start_5 Start_5) (str.from_int StartInt_3)))
   (Start_5 String ("b" "" (str.substr Start_6 StartInt_1 StartInt_6) (ite StartBool Start_3 Start_5)))
   (Start_1 String ("1" (str.from_int StartInt_3)))
   (StartInt_3 Int (1 0))
   (StartBool_1 Bool (false true (str.< Start_7 Start_5) (str.prefixof Start_5 Start_3) (str.suffixof Start_7 Start_2) (= Start_6 Start_9) (<= StartInt_4 StartInt_2)))
   (StartInt_6 Int (1 (str.indexof Start_6 Start_3 StartInt_6)))
   (StartInt_4 Int (1 0 (str.indexof Start_4 Start_1 StartInt_3) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.to_int x))))

(check-synth)
