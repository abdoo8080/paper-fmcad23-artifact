(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_15 String) (StartInt_7 Int) (Start_11 String) (Start_8 String) (StartInt_6 Int) (Start_9 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_2 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_14 String) (Start_10 String) (StartInt_1 Int) (Start_5 String) (StartInt_3 Int) (Start_4 String) (StartInt_8 Int) (Start_3 String) (Start_7 String) (Start_13 String) (StartInt_2 Int) (Start_6 String) (Start_1 String))
  ((Start String ("0" "b" (str.at Start_1 StartInt_1)))
   (StartInt Int (0 (str.len Start_8) (str.to_int Start_9)))
   (StartBool Bool (true false (str.< Start_12 Start_3) (str.<= Start_5 Start_13) (str.contains Start_13 Start_8) (= Start_13 Start_9) (= StartInt_5 StartInt_2) (<= StartInt_4 StartInt_5)))
   (Start_12 String ("b" (str.++ Start_10 Start_2) (str.from_int StartInt) (ite StartBool Start_15 Start)))
   (Start_15 String ("1" x (str.++ Start_15 Start_6) (str.at Start_8 StartInt_3) (str.replace Start_11 Start_9 Start_7)))
   (StartInt_7 Int (1 (str.len Start_14) (str.indexof Start_1 Start_8 StartInt) (str.to_int Start_11)))
   (Start_11 String ("a" (str.++ Start_5 Start_5) (str.at Start_1 StartInt_5) (str.substr Start_11 StartInt_2 StartInt_1)))
   (Start_8 String (y "0" "a" "" (str.++ Start_6 Start_11) (str.at Start_8 StartInt_6) (str.substr Start_10 StartInt_6 StartInt_3) (str.from_int StartInt)))
   (StartInt_6 Int (1 (str.to_int Start_4)))
   (Start_9 String (y "0" (str.++ Start_1 Start) (str.substr Start_10 StartInt StartInt_6) (str.replace Start_9 Start_5 Start_4) (str.from_int StartInt_4)))
   (StartInt_4 Int (0 (str.to_int Start_2)))
   (StartBool_2 Bool (true false (and StartBool StartBool) (str.< Start_3 Start_3) (str.prefixof Start_3 Start_2) (str.suffixof Start_6 Start_4) (str.contains Start_1 Start_4) (= StartInt_2 StartInt_2) (<= StartInt_1 StartInt_5)))
   (Start_2 String ("b" (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt_2) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_1 Bool (true false (str.< Start Start_4) (= Start_4 Start_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_4 Start StartInt_5) (str.to_int Start_2)))
   (Start_14 String ("b" (str.substr Start_7 StartInt_3 StartInt_8) (str.replace Start_11 Start_15 Start_12) (ite StartBool_2 Start Start_4)))
   (Start_10 String ("1" (ite StartBool_2 Start_3 Start_6)))
   (StartInt_1 Int (0 1 (str.indexof Start_1 Start_2 StartInt_1) (str.to_int Start)))
   (Start_5 String ("1" (str.++ Start_4 Start_3) (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt_3 StartInt_4) (str.replace Start_3 Start Start_2) (ite StartBool_2 Start Start_4)))
   (StartInt_3 Int (1 (str.to_int Start)))
   (Start_4 String ("0" (str.substr Start StartInt StartInt) (str.from_int StartInt_2)))
   (StartInt_8 Int (1 (str.indexof Start_5 Start_12 StartInt_3) (str.to_int Start_1)))
   (Start_3 String ("b" (str.++ Start_1 Start_1) (str.substr Start_1 StartInt_2 StartInt) (ite StartBool Start Start_1)))
   (Start_7 String ("1" (ite StartBool_1 Start_4 Start_2)))
   (Start_13 String (x "1" "b" "" y "a" (str.++ Start_5 Start_3) (str.at Start_9 StartInt_7) (str.substr Start_10 StartInt_7 StartInt_2) (ite StartBool Start_11 Start_11)))
   (StartInt_2 Int (0 1 (str.len Start_3)))
   (Start_6 String ("1" "" (str.replace Start Start_7 Start_5)))
   (Start_1 String ("" x "0" (str.++ Start_2 Start) (str.replace Start_5 Start Start_2) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y (str.replace (str.at x 0) x ""))))

(check-synth)
