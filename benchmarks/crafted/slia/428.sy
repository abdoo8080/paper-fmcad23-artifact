(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartInt_8 Int) (StartInt_9 Int) (StartBool_3 Bool) (Start_10 String) (Start_11 String) (Start_9 String) (Start_1 String) (StartInt_10 Int) (StartInt_1 Int) (StartInt_2 Int) (Start_12 String) (StartInt_6 Int) (Start_5 String) (StartInt_3 Int) (Start_13 String) (Start_3 String) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_5 Int) (Start_2 String) (Start_6 String) (Start_4 String) (StartInt_4 Int) (Start_7 String) (Start_8 String))
  ((Start String (x "1" "0" (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_2 Start_3 Start_1) (str.from_int StartInt_3)))
   (StartInt Int (0 1 (str.indexof Start_5 Start_9 StartInt)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_1 StartBool) (str.contains Start_12 Start_4) (= StartInt_8 StartInt_9) (<= StartInt StartInt_10)))
   (StartInt_7 Int (0 1 (str.len Start_8) (str.indexof Start_7 Start_9 StartInt_2) (str.to_int Start_13)))
   (StartInt_8 Int (0 (str.indexof Start_3 Start_2 StartInt_8)))
   (StartInt_9 Int (0 (str.len Start_6) (str.to_int Start_1)))
   (StartBool_3 Bool (true false (str.< Start_1 Start_11) (str.<= Start_2 Start_7) (str.prefixof Start_8 Start_4) (str.suffixof Start_10 Start_11) (str.contains Start Start_1) (= Start_1 Start_12) (= StartInt_8 StartInt) (<= StartInt_9 StartInt_2)))
   (Start_10 String ("b" (str.substr Start_11 StartInt_5 StartInt_7) (str.replace Start_4 Start_9 Start_11) (ite StartBool_3 Start_2 Start_4)))
   (Start_11 String ("1" "b" x (str.++ Start_11 Start_3) (str.at Start StartInt_8) (str.from_int StartInt_10)))
   (Start_9 String (y (str.substr Start_10 StartInt_1 StartInt_4) (ite StartBool_2 Start_8 Start_5)))
   (Start_1 String ("0" "" "b" "a" (str.at Start_8 StartInt_6) (str.substr Start_9 StartInt_2 StartInt_6)))
   (StartInt_10 Int (0 (str.len Start_9) (str.indexof Start_6 Start_4 StartInt_6) (str.to_int Start_6)))
   (StartInt_1 Int (0 (str.len Start_6) (str.to_int Start_6)))
   (StartInt_2 Int (1 0 (str.to_int Start_1)))
   (Start_12 String ("0" "1" x "b" (str.at Start_12 StartInt) (str.replace Start_3 Start_12 Start_10) (str.from_int StartInt_6)))
   (StartInt_6 Int (0 (str.indexof Start_8 Start_1 StartInt_5)))
   (Start_5 String ("" (str.at Start_3 StartInt_3) (ite StartBool_2 Start_2 Start)))
   (StartInt_3 Int (1 (str.len Start_3) (str.to_int Start_3)))
   (Start_13 String ("1" (str.++ Start_9 Start_13) (str.at Start_10 StartInt_4) (str.substr Start_5 StartInt_6 StartInt_9) (ite StartBool Start_10 Start_4)))
   (Start_3 String (y (str.++ Start_3 Start_1) (str.at Start StartInt_1) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_1 Start_4 Start_2) (ite StartBool_1 Start_4 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_1)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_4 Start) (str.prefixof Start Start_5) (<= StartInt StartInt_5)))
   (StartInt_5 Int (0 (str.indexof Start Start_6 StartInt_4)))
   (Start_2 String (x "" "0" y (str.++ Start_7 Start_3) (str.replace Start_3 Start Start_5)))
   (Start_6 String ("" (str.replace Start_5 Start_2 Start_2)))
   (Start_4 String (x "0" (str.at Start_5 StartInt_4) (str.substr Start_2 StartInt_5 StartInt_1)))
   (StartInt_4 Int (0 (str.len Start_6) (str.indexof Start_4 Start_2 StartInt) (str.to_int Start_5)))
   (Start_7 String ("0" "a" (str.++ Start_8 Start_7) (str.replace Start_1 Start_6 Start_5) (str.from_int StartInt_2)))
   (Start_8 String ("a" (str.at Start_3 StartInt_6) (str.replace Start_3 Start_2 Start_3) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "a" (str.indexof "b" y 0))))

(check-synth)
