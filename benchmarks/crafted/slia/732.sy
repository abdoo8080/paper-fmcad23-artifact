(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (StartInt_4 Int) (Start_10 String) (StartBool_3 Bool) (StartInt_10 Int) (Start_9 String) (Start_1 String) (Start_7 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_4 String) (Start_12 String) (StartInt_2 Int) (Start_14 String) (StartBool_2 Bool) (StartInt_6 Int) (StartInt_5 Int) (StartInt_7 Int) (Start_6 String) (Start_11 String) (Start_15 String) (Start_3 String) (StartInt_1 Int) (Start_8 String) (Start_2 String) (StartBool_4 Bool) (Start_5 String) (StartInt_9 Int) (StartInt_8 Int) (Start_13 String))
  ((Start String (y (str.++ Start_1 Start_2) (str.substr Start StartInt_1 StartInt) (ite StartBool Start_3 Start_4)))
   (StartInt Int (1 0 (str.indexof Start_3 Start_16 StartInt)))
   (StartBool Bool (true false (str.< Start_3 Start_13) (str.<= Start_1 Start_8) (str.prefixof Start_14 Start_14) (str.contains Start_4 Start_2) (= Start_16 Start_7)))
   (Start_16 String (x "0" (str.++ Start_10 Start_12) (str.replace Start_13 Start_14 Start_9)))
   (StartInt_4 Int (1 (str.len Start_9) (str.indexof Start_6 Start_11 StartInt_3) (str.to_int Start_3)))
   (Start_10 String ("0" (str.++ Start_4 Start) (str.at Start_7 StartInt_3) (ite StartBool_1 Start_7 Start_5)))
   (StartBool_3 Bool (false (str.< Start_4 Start_11) (str.<= Start_9 Start_7) (str.prefixof Start_6 Start_3) (= Start_8 Start) (<= StartInt StartInt_4)))
   (StartInt_10 Int (1 0 (str.len Start_9) (str.to_int Start_8)))
   (Start_9 String ("b" "0" x (str.++ Start Start_5) (str.substr Start_5 StartInt_3 StartInt) (str.replace Start_5 Start_1 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_5)))
   (Start_1 String ("a" (str.replace Start_4 Start_8 Start_8) (str.from_int StartInt_4)))
   (Start_7 String (x (str.++ Start_8 Start_3) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_3)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_1 StartBool_2) (str.prefixof Start_3 Start_6) (str.suffixof Start_1 Start) (str.contains Start_3 Start_4) (<= StartInt_2 StartInt_1)))
   (Start_4 String ("" (str.++ Start_5 Start_5) (str.substr Start_1 StartInt StartInt) (str.replace Start_5 Start_3 Start_6) (ite StartBool_1 Start_7 Start_8)))
   (Start_12 String (x "a" "0" (str.at Start_2 StartInt_6) (str.substr Start_4 StartInt_3 StartInt_2) (ite StartBool_1 Start_7 Start_5)))
   (StartInt_2 Int (1 0 (str.len Start_8) (str.indexof Start Start_9 StartInt)))
   (Start_14 String ("a" (str.++ Start_13 Start_15) (str.at Start_11 StartInt_8) (str.substr Start_13 StartInt_3 StartInt_9) (str.from_int StartInt_2) (ite StartBool_4 Start_4 Start_1)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool StartBool_3) (str.< Start_1 Start_10) (str.<= Start_5 Start_1) (str.prefixof Start_2 Start) (str.contains Start_2 Start_5) (= Start_6 Start) (= StartInt_2 StartInt_2)))
   (StartInt_6 Int (0 (str.indexof Start_10 Start_8 StartInt_5)))
   (StartInt_5 Int (0 1 (str.indexof Start_11 Start_9 StartInt_7) (str.to_int Start_6)))
   (StartInt_7 Int (1 (str.len Start_1) (str.indexof Start Start_10 StartInt_2)))
   (Start_6 String ("1" y (str.at Start_11 StartInt_5) (str.substr Start_4 StartInt_6 StartInt_2) (str.from_int StartInt_6) (ite StartBool_3 Start_7 Start_3)))
   (Start_11 String ("" "0" (str.++ Start_1 Start_2) (str.at Start_8 StartInt_5) (str.replace Start_6 Start Start_1) (ite StartBool Start_12 Start_3)))
   (Start_15 String (x "1" "b" (ite StartBool Start_14 Start_2)))
   (Start_3 String ("0" "1" (str.substr Start_8 StartInt StartInt_5) (str.replace Start_2 Start_9 Start_9)))
   (StartInt_1 Int (0 (str.len Start_5) (str.indexof Start_2 Start_2 StartInt_6)))
   (Start_8 String ("0" (str.++ Start_2 Start_5)))
   (Start_2 String (x y "b" (str.++ Start_13 Start_14) (str.at Start StartInt_1) (str.replace Start_9 Start_12 Start_3) (str.from_int StartInt_7)))
   (StartBool_4 Bool (true false (str.suffixof Start Start_3) (<= StartInt_10 StartInt_10)))
   (Start_5 String ("b" (str.at Start_2 StartInt_3) (str.replace Start_7 Start_1 Start_5) (str.from_int StartInt_6)))
   (StartInt_9 Int (1 0 (str.to_int Start_12)))
   (StartInt_8 Int (0 (str.indexof Start Start_8 StartInt_4) (str.to_int Start)))
   (Start_13 String ("1" (str.at Start_5 StartInt) (str.substr Start_3 StartInt_8 StartInt_3) (ite StartBool_4 Start_14 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 1) (str.++ "a" (str.++ (str.at x 1) "0")))))

(check-synth)
