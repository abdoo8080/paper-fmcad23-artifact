(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (Start_5 String) (StartInt_7 Int) (Start_11 String) (Start_12 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_3 String) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_6 Int) (Start_8 String) (StartBool_1 Bool) (Start_7 String) (StartInt_3 Int) (Start_4 String) (Start_10 String) (Start_6 String) (StartInt_5 Int) (Start_2 String) (Start_9 String))
  ((Start String ("" (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 0 (str.indexof Start_10 Start StartInt_7) (str.to_int Start_10)))
   (StartBool Bool (false (and StartBool_3 StartBool_2) (str.contains Start_5 Start_5) (= Start_3 Start_5) (= StartInt_3 StartInt_7)))
   (Start_1 String ("a" "" y (str.from_int StartInt_5) (ite StartBool_3 Start_11 Start_9)))
   (StartInt_1 Int (0 (str.len Start_11) (str.indexof Start_4 Start_6 StartInt_2) (str.to_int Start_12)))
   (Start_5 String ("a" "1" x y (str.++ Start_9 Start_11)))
   (StartInt_7 Int (0 (str.len Start_2) (str.to_int Start_9)))
   (Start_11 String (x (str.at Start_11 StartInt_7) (str.from_int StartInt_1) (ite StartBool_2 Start_9 Start)))
   (Start_12 String ("1" (str.from_int StartInt)))
   (StartInt_4 Int (1 0 (str.len Start_7) (str.indexof Start_7 Start_6 StartInt_6) (str.to_int Start_7)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool_2) (str.< Start_6 Start_3) (str.suffixof Start_11 Start_12) (str.contains Start_3 Start_11) (= Start_1 Start_11) (= StartInt_4 StartInt_2)))
   (Start_3 String ("a" "0" "b" (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_1 Start) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_4) (str.indexof Start_4 Start_2 StartInt_1) (str.to_int Start_4)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_2 StartBool) (str.<= Start_10 Start_5) (str.prefixof Start_5 Start_10) (= StartInt StartInt) (<= StartInt_2 StartInt_7)))
   (StartInt_6 Int (1 (str.len Start_9) (str.indexof Start_3 Start_7 StartInt_4) (str.to_int Start_10)))
   (Start_8 String (y (str.substr Start_7 StartInt_3 StartInt_3)))
   (StartBool_1 Bool (false (and StartBool StartBool_1) (str.<= Start_5 Start_4) (str.suffixof Start_4 Start_6) (= Start_4 Start_3) (<= StartInt_2 StartInt_2)))
   (Start_7 String ("1" (str.at Start_8 StartInt_2) (str.replace Start Start_6 Start_6) (str.from_int StartInt) (ite StartBool Start_5 Start)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start_9 Start_9 StartInt_3)))
   (Start_4 String (y "1" (str.++ Start Start_4) (str.at Start_1 StartInt_1) (str.from_int StartInt) (ite StartBool Start_4 Start_4)))
   (Start_10 String (y (str.at Start_2 StartInt_4) (str.substr Start_7 StartInt_5 StartInt_2) (str.replace Start_1 Start_3 Start) (ite StartBool Start_6 Start_10)))
   (Start_6 String ("" (str.++ Start Start) (ite StartBool_2 Start_7 Start_4)))
   (StartInt_5 Int (1 0 (str.to_int Start_4)))
   (Start_2 String ("0" (str.++ Start_2 Start_3) (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_1)))
   (Start_9 String ("a" x "b" "0" "" "1" (str.++ Start_2 Start_1) (str.at Start_10 StartInt_3) (str.replace Start_2 Start_7 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y x)))

(check-synth)
