(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_8 Int) (Start_16 String) (StartInt_4 Int) (Start_10 String) (Start_12 String) (Start_8 String) (Start_3 String) (Start_2 String) (Start_5 String) (StartInt_6 Int) (StartInt_5 Int) (StartBool_6 Bool) (StartInt_3 Int) (Start_4 String) (Start_9 String) (Start_1 String) (Start_14 String) (StartInt_1 Int) (StartInt_2 Int) (Start_6 String) (Start_7 String) (StartBool_1 Bool) (StartBool_4 Bool) (StartInt_7 Int) (Start_11 String) (Start_13 String) (StartBool_5 Bool) (StartBool_3 Bool) (Start_15 String))
  ((Start String ("b" "a" "" (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt) (ite StartBool_1 Start_3 Start_3)))
   (StartInt Int (1 0 (str.len Start_3)))
   (StartBool Bool (true false (and StartBool_2 StartBool_3) (str.<= Start Start_8) (str.prefixof Start_2 Start_9) (str.contains Start_10 Start_1) (= Start_8 Start)))
   (StartBool_2 Bool (true (and StartBool_4 StartBool_3) (str.prefixof Start_16 Start_15) (str.contains Start_15 Start_11) (= StartInt StartInt_1) (<= StartInt_8 StartInt_6)))
   (StartInt_8 Int (0 1 (str.indexof Start_3 Start_11 StartInt_4)))
   (Start_16 String ("a" y (str.++ Start_10 Start_3) (str.substr Start_13 StartInt_4 StartInt_4) (str.from_int StartInt_5) (ite StartBool Start_12 Start_6)))
   (StartInt_4 Int (0 (str.len Start_2)))
   (Start_10 String ("0" (str.++ Start_3 Start_1) (str.at Start_11 StartInt_3) (str.replace Start_1 Start_12 Start_4) (str.from_int StartInt)))
   (Start_12 String ("0" (str.++ Start_9 Start_4) (str.at Start_9 StartInt_4) (str.substr Start_8 StartInt_5 StartInt_5) (ite StartBool_1 Start Start_9)))
   (Start_8 String ("1" y (str.++ Start_7 Start) (str.substr Start_6 StartInt StartInt_4) (str.replace Start_4 Start_1 Start) (str.from_int StartInt_4)))
   (Start_3 String (x "b" (str.++ Start_1 Start_4) (str.replace Start_2 Start Start_2) (str.from_int StartInt_1)))
   (Start_2 String (x "a" y "" "0" "1" "b" (str.at Start_7 StartInt) (str.substr Start StartInt_1 StartInt_4) (str.from_int StartInt_5)))
   (Start_5 String ("0" (str.++ Start_5 Start) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt_1) (ite StartBool Start_1 Start_6)))
   (StartInt_6 Int (0 1 (str.indexof Start Start_4 StartInt_3)))
   (StartInt_5 Int (1 0 (str.len Start_6) (str.to_int Start_8)))
   (StartBool_6 Bool (false (not StartBool_4) (str.< Start_12 Start_16) (str.<= Start_9 Start_5) (str.prefixof Start_8 Start_3) (= Start_1 Start_14) (= StartInt_1 StartInt_6) (<= StartInt_8 StartInt_8)))
   (StartInt_3 Int (1 (str.indexof Start_5 Start_6 StartInt) (str.to_int Start_3)))
   (Start_4 String ("b" (str.++ Start_4 Start_5) (str.at Start_5 StartInt)))
   (Start_9 String ("a" "b" x (str.++ Start_11 Start_14) (str.from_int StartInt_4)))
   (Start_1 String (y (str.at Start_7 StartInt) (str.from_int StartInt_2)))
   (Start_14 String ("a" ""))
   (StartInt_1 Int (1 (str.to_int Start_1)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.to_int Start_5)))
   (Start_6 String (y (str.replace Start_4 Start_2 Start_5)))
   (Start_7 String ("a" y x (str.++ Start_8 Start_4) (str.from_int StartInt_1)))
   (StartBool_1 Bool (false true (str.< Start_3 Start_5) (str.contains Start Start_6) (= StartInt_2 StartInt_2) (<= StartInt StartInt_3)))
   (StartBool_4 Bool (true false (not StartBool_5) (and StartBool_1 StartBool_3) (str.prefixof Start_13 Start_12) (str.suffixof Start_2 Start_14) (str.contains Start_10 Start_4) (<= StartInt_1 StartInt_7)))
   (StartInt_7 Int (0 1))
   (Start_11 String ("" x (str.at Start_5 StartInt_1) (str.replace Start_1 Start_10 Start_13) (ite StartBool Start_6 Start_12)))
   (Start_13 String ("b" (str.++ Start_4 Start_2) (str.at Start_11 StartInt_6) (str.substr Start_1 StartInt_7 StartInt_5) (str.replace Start_2 Start_13 Start_6)))
   (StartBool_5 Bool (true (and StartBool_6 StartBool_2) (str.< Start_14 Start_1) (str.prefixof Start_14 Start_10) (str.suffixof Start_14 Start_6) (= Start_9 Start)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_3) (str.< Start_4 Start_15) (str.<= Start_2 Start_6) (str.suffixof Start_12 Start_4) (str.contains Start_13 Start_7) (= Start_6 Start_6)))
   (Start_15 String (y "a" (str.at Start_11 StartInt_2) (str.from_int StartInt_2) (ite StartBool_4 Start_2 Start_15)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof (str.at x 1) "" 1))))

(check-synth)
