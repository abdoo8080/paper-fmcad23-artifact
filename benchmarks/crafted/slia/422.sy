(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_7 Bool) (StartInt_5 Int) (Start_6 String) (StartInt_4 Int) (StartBool_3 Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_9 String) (Start_3 String) (StartBool_6 Bool) (Start_7 String) (Start_2 String) (Start_5 String) (StartInt_6 Int) (Start_4 String) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_2 Int) (StartInt_7 Int) (StartInt_1 Int) (Start_10 String) (Start_8 String) (Start_1 String))
  ((Start String ("a" "0" (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_1) (ite StartBool Start_3 Start_2)))
   (StartInt Int (0 1 (str.indexof Start_3 Start_4 StartInt) (str.to_int Start)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_3 StartBool_4) (str.contains Start_3 Start_5) (= Start Start_4) (<= StartInt_3 StartInt_2)))
   (StartBool_7 Bool (false (not StartBool_5) (and StartBool_2 StartBool_7) (str.prefixof Start_5 Start_5) (= Start_10 Start_9) (<= StartInt_3 StartInt_7)))
   (StartInt_5 Int (0 1))
   (Start_6 String (y (str.++ Start_6 Start_2) (str.at Start_4 StartInt_2) (str.substr Start_6 StartInt_5 StartInt_4) (str.replace Start_4 Start Start_7)))
   (StartInt_4 Int (0))
   (StartBool_3 Bool (true false (and StartBool_5 StartBool_6) (str.<= Start_4 Start_3) (str.suffixof Start Start_6) (str.contains Start_1 Start_3) (= StartInt_3 StartInt_4)))
   (StartBool_5 Bool (true (not StartBool_7) (str.< Start_1 Start_9) (= StartInt_3 StartInt_6)))
   (StartBool_4 Bool (true false (not StartBool_1) (str.suffixof Start_2 Start_5) (str.contains Start_5 Start_2) (= Start_2 Start_1) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_3)))
   (Start_9 String (x))
   (Start_3 String (x "" (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_3 Start_3 Start_3) (ite StartBool Start_1 Start)))
   (StartBool_6 Bool (true false (not StartBool) (str.< Start_7 Start_5) (str.<= Start_1 Start_1) (str.suffixof Start_8 Start_2) (str.contains Start_3 Start_4)))
   (Start_7 String ("a" "0" "" (str.from_int StartInt_2) (ite StartBool_1 Start_8 Start)))
   (Start_2 String (x (str.substr Start_4 StartInt_1 StartInt) (str.replace Start_2 Start Start_5)))
   (Start_5 String ("" "a" "0" "b" (str.at Start_5 StartInt) (ite StartBool Start_1 Start_2)))
   (StartInt_6 Int (0 1 (str.to_int Start_9)))
   (Start_4 String (y "0" "a" (str.++ Start_4 Start) (str.at Start_3 StartInt) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_2) (str.contains Start Start_4)))
   (StartBool_2 Bool (true (not StartBool_2) (str.<= Start_2 Start) (str.prefixof Start_5 Start_2) (str.contains Start_1 Start_4) (= StartInt_2 StartInt)))
   (StartInt_3 Int (0 1))
   (StartInt_2 Int (0))
   (StartInt_7 Int (0 1 (str.len Start_6) (str.indexof Start_9 Start_1 StartInt_7)))
   (StartInt_1 Int (0 1 (str.len Start_5) (str.indexof Start_3 Start_3 StartInt_1)))
   (Start_10 String (x "0" (str.++ Start_5 Start_2) (str.substr Start_9 StartInt_2 StartInt_3) (str.from_int StartInt_7)))
   (Start_8 String ("a" "1" (str.++ Start_8 Start_5) (str.replace Start_3 Start_5 Start_4) (str.from_int StartInt_1)))
   (Start_1 String ("1" (str.++ Start_5 Start_3) (str.at Start_5 StartInt_1) (str.substr Start_5 StartInt_1 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.to_int (str.substr y 0 1)))))

(check-synth)
