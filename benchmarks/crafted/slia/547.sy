(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartInt_6 Int) (Start_1 String) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_5 Int) (Start_2 String) (StartBool_1 Bool) (Start_3 String) (Start_9 String) (Start_5 String) (Start_8 String) (StartInt_2 Int) (Start_4 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_6 String) (StartInt_4 Int) (Start_7 String))
  ((Start String ("a" "" "1" (str.substr Start StartInt StartInt_1)))
   (StartInt Int (1 (str.indexof Start_6 Start_8 StartInt_6)))
   (StartBool Bool (false true (str.suffixof Start_2 Start_8) (str.contains Start_4 Start_3) (= StartInt_6 StartInt_5) (<= StartInt_7 StartInt_4)))
   (StartInt_7 Int (1 0))
   (StartInt_6 Int (1 0))
   (Start_1 String ("0" (str.++ Start_5 Start_9) (str.substr Start_8 StartInt_4 StartInt_5)))
   (StartBool_3 Bool (true (str.contains Start_5 Start_9) (= Start Start_2) (= StartInt_3 StartInt_5)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_1 StartInt) (str.to_int Start_3)))
   (Start_2 String ("0" (str.++ Start_1 Start_2) (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_2)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (str.< Start_1 Start) (str.prefixof Start Start_1) (str.suffixof Start_4 Start_3) (str.contains Start_4 Start_1) (= Start Start_5) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_2)))
   (Start_3 String ("b" y (str.++ Start_1 Start) (str.from_int StartInt_2) (ite StartBool_3 Start_6 Start_2)))
   (Start_9 String (y "" "b" "a" "1" x "0" (str.++ Start_4 Start_3) (str.at Start_7 StartInt_1) (str.substr Start_4 StartInt StartInt_1) (str.from_int StartInt_4)))
   (Start_5 String (y (str.++ Start Start_3) (str.at Start_1 StartInt) (str.from_int StartInt)))
   (Start_8 String ("0" x (str.++ Start_2 Start_3) (ite StartBool_1 Start_2 Start_5)))
   (StartInt_2 Int (1 0 (str.indexof Start_7 Start_3 StartInt_4) (str.to_int Start_1)))
   (Start_4 String ("a" "0" (str.at Start StartInt_2) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 0 (str.len Start_1)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_1 StartBool_2) (str.< Start_1 Start_6)))
   (Start_6 String ("0" y "b" "" (str.++ Start_6 Start_2) (ite StartBool Start Start_1)))
   (StartInt_4 Int (1 (str.indexof Start Start_4 StartInt_4)))
   (Start_7 String ("b" (str.substr Start_4 StartInt_3 StartInt_5) (str.replace Start_1 Start_6 Start_3) (str.from_int StartInt_3) (ite StartBool_3 Start_8 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "" "a") "1")))

(check-synth)
