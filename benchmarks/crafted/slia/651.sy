(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_11 String) (StartInt_7 Int) (Start_1 String) (StartBool_2 Bool) (Start_10 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_5 String) (Start_6 String) (Start_3 String) (Start_8 String) (StartInt_3 Int) (Start_2 String) (StartInt_2 Int) (StartInt_4 Int) (StartInt_1 Int) (Start_7 String) (StartInt_6 Int) (Start_4 String) (Start_9 String))
  ((Start String ("0" (str.at Start StartInt)))
   (StartInt Int (1 0 (str.indexof Start_1 Start StartInt_1) (str.to_int Start_2)))
   (StartBool Bool (true false (str.< Start_2 Start_11) (str.prefixof Start_9 Start_11) (str.contains Start Start) (= Start_9 Start_9)))
   (StartInt_8 Int (1 0 (str.len Start) (str.indexof Start_3 Start StartInt_6)))
   (Start_11 String (y (str.substr Start_9 StartInt StartInt_8) (str.replace Start_11 Start_7 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_10 Start_2)))
   (StartInt_7 Int (0))
   (Start_1 String ("b" "1" (str.++ Start_6 Start_2) (str.at Start_7 StartInt_7) (str.substr Start_2 StartInt StartInt_4)))
   (StartBool_2 Bool (true false (and StartBool StartBool_1) (str.prefixof Start_10 Start_9) (str.suffixof Start_6 Start_1) (= Start Start_5) (= StartInt_5 StartInt_1)))
   (Start_10 String ("a" "0" (str.++ Start_4 Start) (str.substr Start_6 StartInt_4 StartInt_6) (str.replace Start_10 Start_9 Start_7) (str.from_int StartInt_5) (ite StartBool_2 Start_2 Start_8)))
   (StartInt_5 Int (0 1 (str.len Start_4) (str.indexof Start_10 Start_7 StartInt_1)))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (str.< Start_6 Start_5) (str.<= Start_5 Start_3) (str.prefixof Start_5 Start_8) (str.contains Start_2 Start_3) (= StartInt_5 StartInt_1) (<= StartInt_4 StartInt)))
   (Start_5 String ("1" (str.++ Start_3 Start) (str.substr Start_1 StartInt_4 StartInt_1) (str.replace Start_1 Start_1 Start) (str.from_int StartInt_3)))
   (Start_6 String ("0" "1" (str.at Start_4 StartInt_4) (str.substr Start_7 StartInt_4 StartInt)))
   (Start_3 String ("a" (str.++ Start_3 Start_3) (str.substr Start_3 StartInt StartInt) (str.replace Start_1 Start Start_4)))
   (Start_8 String (x (str.++ Start_7 Start_4) (str.substr Start_8 StartInt StartInt_2) (ite StartBool_1 Start_1 Start_9)))
   (StartInt_3 Int (1 0 (str.len Start_4)))
   (Start_2 String ("a" (str.++ Start_1 Start) (str.replace Start Start Start_2) (ite StartBool Start_3 Start_2)))
   (StartInt_2 Int (0 1 (str.len Start) (str.to_int Start_1)))
   (StartInt_4 Int (1 (str.to_int Start)))
   (StartInt_1 Int (0 (str.len Start_6) (str.to_int Start_5)))
   (Start_7 String ("a" "b" "0" (str.at Start_6 StartInt_1) (str.substr Start_8 StartInt StartInt_3) (str.replace Start_5 Start_9 Start_2)))
   (StartInt_6 Int (0 (str.len Start_8) (str.indexof Start_10 Start_8 StartInt_1) (str.to_int Start_3)))
   (Start_4 String ("" (str.at Start_5 StartInt_2) (str.substr Start_4 StartInt_1 StartInt_3) (str.replace Start Start Start_4) (str.from_int StartInt_2)))
   (Start_9 String (y "" "b" "0" "a" x (str.substr Start_9 StartInt_1 StartInt_4) (ite StartBool Start_9 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof x y) "1" "")))

(check-synth)
