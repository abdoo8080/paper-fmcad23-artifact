(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_1 String) (StartInt_6 Int) (StartInt_1 Int) (StartBool_4 Bool) (Start_11 String) (StartInt_5 Int) (StartInt_4 Int) (Start_7 String) (Start_14 String) (Start_2 String) (Start_9 String) (Start_12 String) (Start_4 String) (StartInt_7 Int) (Start_6 String) (StartInt_2 Int) (Start_10 String) (Start_5 String) (StartBool_1 Bool) (Start_8 String) (Start_13 String) (StartBool_2 Bool) (StartBool_3 Bool) (Start_3 String) (StartInt_3 Int))
  ((Start String (y (str.replace Start_1 Start_1 Start) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (StartInt Int (1 0 (str.to_int Start_13)))
   (StartBool Bool (false (and StartBool StartBool_4) (str.< Start_1 Start_8) (str.prefixof Start_14 Start_4) (str.contains Start_2 Start_10) (= Start_10 Start_1) (= StartInt StartInt_3) (<= StartInt_1 StartInt_2)))
   (StartInt_8 Int (0 (str.indexof Start_3 Start_14 StartInt_8)))
   (Start_1 String ("1" (str.++ Start_8 Start_4) (str.from_int StartInt_1) (ite StartBool_2 Start_8 Start_13)))
   (StartInt_6 Int (0 (str.len Start_3) (str.indexof Start_10 Start_9 StartInt_1) (str.to_int Start_9)))
   (StartInt_1 Int (1 (str.len Start_10)))
   (StartBool_4 Bool (true false (not StartBool_2) (str.< Start_3 Start_4) (str.<= Start_12 Start_3) (str.prefixof Start_5 Start_10) (str.suffixof Start_10 Start_8) (str.contains Start_11 Start_7) (= Start Start_1) (= StartInt_6 StartInt_5) (<= StartInt_6 StartInt_1)))
   (Start_11 String ("0" "b" x (str.++ Start_11 Start_9) (str.at Start_8 StartInt_6) (str.replace Start_1 Start_7 Start_12) (ite StartBool_4 Start_2 Start_3)))
   (StartInt_5 Int (1 0 (str.len Start_4) (str.indexof Start_4 Start_7 StartInt_1)))
   (StartInt_4 Int (0 1))
   (Start_7 String ("a" "1" "0" (str.substr Start_6 StartInt_2 StartInt_4)))
   (Start_14 String (y "" "0" "1" x "b" (str.++ Start_7 Start_9) (str.at Start_6 StartInt_2) (str.from_int StartInt_8) (ite StartBool_1 Start_2 Start_13)))
   (Start_2 String ("b" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_1 Start_3 Start_1)))
   (Start_9 String ("" (str.replace Start_1 Start_9 Start_5)))
   (Start_12 String ("a" (str.++ Start_2 Start_6) (str.at Start_6 StartInt_3)))
   (Start_4 String (x (str.++ Start Start_5) (str.at Start_4 StartInt) (str.substr Start_5 StartInt_1 StartInt_2) (str.replace Start_4 Start_2 Start_1) (str.from_int StartInt_1) (ite StartBool Start_1 Start_5)))
   (StartInt_7 Int (0 (str.len Start_10) (str.indexof Start_4 Start_8 StartInt_8)))
   (Start_6 String ("b" (str.++ Start_4 Start_11) (str.at Start_4 StartInt_5) (str.from_int StartInt_4) (ite StartBool_3 Start Start_8)))
   (StartInt_2 Int (0 (str.to_int Start_5)))
   (Start_10 String ("0" (str.++ Start_4 Start_6) (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_1 Start_10 Start_2) (str.from_int StartInt) (ite StartBool_3 Start_2 Start_5)))
   (Start_5 String ("0" (str.++ Start_6 Start) (str.at Start StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start_2)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool) (str.< Start_1 Start) (str.prefixof Start_7 Start_2) (= Start_8 Start_1) (= StartInt_2 StartInt)))
   (Start_8 String ("0" "1" (str.++ Start_5 Start_7) (str.at Start_9 StartInt_3) (str.from_int StartInt_1) (ite StartBool_2 Start_2 Start_9)))
   (Start_13 String ("a" y (str.at Start_4 StartInt_2) (str.from_int StartInt_7)))
   (StartBool_2 Bool (false (not StartBool_3) (str.suffixof Start_2 Start_6)))
   (StartBool_3 Bool (false true (str.< Start_2 Start_8) (str.suffixof Start_10 Start_1) (= Start_10 Start)))
   (Start_3 String ("b" "1" (str.at Start_2 StartInt_1) (str.replace Start_3 Start Start_4) (ite StartBool Start Start_1)))
   (StartInt_3 Int (1 0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.at x 0) (str.to_int x) 1)))

(check-synth)
