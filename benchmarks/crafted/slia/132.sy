(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_5 Int) (Start_11 String) (Start_10 String) (Start_9 String) (Start_7 String) (Start_12 String) (Start_2 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_3 String) (Start_4 String) (Start_8 String) (StartInt_2 Int) (Start_5 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_6 String) (StartInt_4 Int))
  ((Start String ("0" (str.++ Start Start) (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (StartInt Int (1 0 (str.indexof Start_7 Start_8 StartInt) (str.to_int Start_6)))
   (StartBool Bool (false true (str.< Start Start_4) (= Start_12 Start_12) (<= StartInt_5 StartInt_3)))
   (Start_1 String ("1" "b" (str.at Start_5 StartInt) (str.from_int StartInt_2) (ite StartBool Start Start_1)))
   (StartInt_5 Int (0 (str.len Start_6) (str.to_int Start_5)))
   (Start_11 String ("" (str.substr Start_10 StartInt_2 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_9 Start_5)))
   (Start_10 String ("a" "0" y (str.++ Start Start_11)))
   (Start_9 String ("b" (str.++ Start_1 Start_6) (str.substr Start_5 StartInt_4 StartInt_4) (ite StartBool_2 Start_10 Start_8)))
   (Start_7 String ("b" (str.at Start_1 StartInt_3) (str.substr Start_4 StartInt_5 StartInt_4) (str.replace Start_6 Start_8 Start_8) (str.from_int StartInt) (ite StartBool Start_9 Start_3)))
   (Start_12 String ("b" x "" "1" "a" "0" (str.at Start_9 StartInt_2) (ite StartBool Start_2 Start_8)))
   (Start_2 String ("1" y "b" (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_3 Int (0 (str.to_int Start_1)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.< Start Start_3) (str.suffixof Start_2 Start) (str.contains Start Start) (= StartInt StartInt) (<= StartInt_1 StartInt)))
   (Start_3 String ("" (str.++ Start_1 Start) (str.at Start_4 StartInt_1) (str.replace Start Start_3 Start_1) (str.from_int StartInt_1)))
   (Start_4 String (y (str.++ Start_5 Start_4) (str.substr Start_4 StartInt_1 StartInt)))
   (Start_8 String ("b"))
   (StartInt_2 Int (1 0))
   (Start_5 String ("0" "b" (str.++ Start_3 Start_2) (str.at Start StartInt_2) (str.substr Start_5 StartInt_1 StartInt_2) (ite StartBool_1 Start_4 Start_1)))
   (StartInt_1 Int (0 (str.len Start_6) (str.indexof Start Start StartInt)))
   (StartBool_2 Bool (true false (and StartBool StartBool) (str.< Start_3 Start_3) (str.<= Start Start_1) (str.suffixof Start_4 Start_4) (str.contains Start_7 Start) (= Start_5 Start_8) (= StartInt_3 StartInt_4)))
   (Start_6 String ("0" x (str.++ Start_2 Start) (str.at Start_1 StartInt_1) (str.substr Start_7 StartInt_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool_2 Start_6 Start)))
   (StartInt_4 Int (0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.replace y x "") y)))

(check-synth)
