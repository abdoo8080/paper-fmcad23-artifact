(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_1 String) (StartInt_5 Int) (StartInt_1 Int) (Start_8 String) (StartInt_6 Int) (StartBool_2 Bool) (StartInt_2 Int) (Start_3 String) (Start_2 String) (StartBool_1 Bool) (Start_7 String) (Start_5 String) (StartBool_3 Bool) (Start_6 String) (StartInt_3 Int) (StartInt_4 Int) (Start_4 String))
  ((Start String ("b" (str.++ Start_1 Start) (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_2 Start Start)))
   (StartInt Int (0 (str.indexof Start_3 Start_3 StartInt_1)))
   (StartBool Bool (true (and StartBool_2 StartBool_3) (str.< Start_3 Start_5) (str.<= Start_4 Start_7) (= Start_6 Start_2)))
   (Start_9 String ("0" (str.replace Start_2 Start_2 Start_4) (ite StartBool_3 Start_9 Start_6)))
   (Start_1 String ("" (str.++ Start_6 Start) (str.replace Start Start_3 Start_4)))
   (StartInt_5 Int (0 1 (str.to_int Start_7)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_1 Start StartInt_2)))
   (Start_8 String ("b" "" (str.++ Start_1 Start_5) (str.from_int StartInt_5) (ite StartBool Start_9 Start_5)))
   (StartInt_6 Int (1 0))
   (StartBool_2 Bool (true false (str.< Start_2 Start_4) (= StartInt_1 StartInt_4) (<= StartInt StartInt)))
   (StartInt_2 Int (0 1))
   (Start_3 String (y (str.++ Start_3 Start_3) (str.substr Start_4 StartInt StartInt) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_1)))
   (Start_2 String (y (str.++ Start Start_3)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_2) (str.prefixof Start_4 Start_2) (str.contains Start Start_4) (= Start_4 Start_5) (= StartInt_3 StartInt_2)))
   (Start_7 String ("0" (str.at Start_7 StartInt_4) (str.replace Start_1 Start_6 Start_6)))
   (Start_5 String ("b" x (str.++ Start_1 Start_2) (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start_1 Start_6 Start) (ite StartBool_1 Start_6 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.< Start_2 Start_8) (str.suffixof Start_3 Start_5) (str.contains Start_6 Start_7) (= Start_6 Start_4) (= StartInt_3 StartInt_2) (<= StartInt_6 StartInt_5)))
   (Start_6 String ("a" (str.++ Start_5 Start) (str.at Start_6 StartInt_3) (str.replace Start Start_4 Start_3) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_3 Int (0 1 (str.indexof Start Start_2 StartInt_1)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_1 Start_6 StartInt_4) (str.to_int Start_4)))
   (Start_4 String ("0" "a" "" (str.substr Start_2 StartInt StartInt_5) (str.from_int StartInt_5) (ite StartBool Start_3 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at "b" (str.len x)) (str.from_int (str.len (str.++ "1" "0"))))))

(check-synth)
