(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_2 String) (StartInt_1 Int) (StartInt_6 Int) (Start_13 String) (StartInt_7 Int) (StartInt_5 Int) (Start_12 String) (Start_1 String) (Start_3 String) (Start_4 String) (StartInt_2 Int) (Start_7 String) (Start_6 String) (StartInt_3 Int) (Start_8 String) (Start_11 String) (StartInt_4 Int) (Start_5 String) (Start_10 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_9 String))
  ((Start String ("b" (str.++ Start_1 Start_2) (str.at Start_2 StartInt) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_1 Start_3) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.indexof Start_12 Start_6 StartInt_3) (str.to_int Start_11)))
   (StartBool Bool (false (not StartBool_2) (str.prefixof Start_8 Start_5)))
   (Start_14 String ("b" "" (str.at Start_9 StartInt_2) (str.substr Start_13 StartInt_7 StartInt_2) (ite StartBool_1 Start_1 Start_13)))
   (Start_2 String ("a" (str.at Start_11 StartInt_7) (str.replace Start_4 Start_6 Start_12)))
   (StartInt_1 Int (1 0 (str.len Start_12)))
   (StartInt_6 Int (0 1 (str.indexof Start_4 Start_9 StartInt_4)))
   (Start_13 String ("0" "" "1" "b" (str.++ Start_8 Start) (str.at Start_11 StartInt_6) (str.from_int StartInt_3) (ite StartBool Start_1 Start_11)))
   (StartInt_7 Int (0 1 (str.to_int Start_3)))
   (StartInt_5 Int (0 (str.indexof Start_6 Start_13 StartInt_1)))
   (Start_12 String ("0" (str.substr Start_9 StartInt_2 StartInt_5) (str.replace Start_8 Start_5 Start_12) (ite StartBool_1 Start_11 Start)))
   (Start_1 String (y (str.++ Start_7 Start_2) (str.at Start_3 StartInt_5) (str.substr Start_7 StartInt_3 StartInt_7) (str.replace Start_10 Start_2 Start_14) (str.from_int StartInt_4)))
   (Start_3 String ("b" (str.++ Start Start_2) (str.substr Start_3 StartInt StartInt_2) (str.replace Start_3 Start_2 Start_1) (ite StartBool Start Start_1)))
   (Start_4 String (x "a" "0" (str.++ Start_3 Start_1) (str.at Start_5 StartInt_3) (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_3 Start_3 Start_4)))
   (StartInt_2 Int (0 (str.len Start_4) (str.indexof Start_3 Start_4 StartInt_1) (str.to_int Start_4)))
   (Start_7 String ("a" (str.replace Start_3 Start_2 Start_5) (str.from_int StartInt) (ite StartBool Start_4 Start_8)))
   (Start_6 String ("0" "1" (str.at Start_4 StartInt_4) (ite StartBool_1 Start_10 Start_6)))
   (StartInt_3 Int (1 0 (str.len Start_4) (str.to_int Start_1)))
   (Start_8 String ("1" "0" x "" y "a" (str.at Start_9 StartInt_3) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_6 Start_6 Start) (str.from_int StartInt) (ite StartBool_1 Start_9 Start_6)))
   (Start_11 String ("a" x "0" (str.++ Start_6 Start_9) (str.substr Start_12 StartInt_1 StartInt) (ite StartBool Start_8 Start_1)))
   (StartInt_4 Int (0 1 (str.indexof Start_10 Start_1 StartInt_1) (str.to_int Start_2)))
   (Start_5 String ("a" (str.++ Start_6 Start_7) (str.at Start_6 StartInt_2)))
   (Start_10 String ("a" "b" x (str.from_int StartInt) (ite StartBool Start_6 Start_10)))
   (StartBool_2 Bool (true (not StartBool_1) (str.< Start_1 Start_13) (str.suffixof Start_9 Start_13) (str.contains Start_10 Start_10) (<= StartInt_6 StartInt_5)))
   (StartBool_1 Bool (true (str.< Start_1 Start_8) (str.suffixof Start_3 Start_7) (str.contains Start_3 Start_10) (= StartInt StartInt_2) (<= StartInt_3 StartInt_4)))
   (Start_9 String ("1" "a" (str.at Start_3 StartInt) (str.substr Start_3 StartInt_1 StartInt_4) (str.replace Start_10 Start_4 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "0" (str.++ "b" (str.replace y "" x)))))

(check-synth)
