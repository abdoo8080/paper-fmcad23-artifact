(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_2 Int) (Start_7 String) (StartBool_1 Bool) (Start_2 String) (Start_5 String) (Start_3 String) (Start_1 String) (Start_6 String))
  ((Start String ("0" (str.++ Start_1 Start_1) (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_3)))
   (StartInt Int (1 0 (str.indexof Start_6 Start_3 StartInt_2)))
   (StartBool Bool (true (and StartBool StartBool_1) (str.<= Start Start)))
   (Start_4 String ("1" (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt_2) (str.replace Start Start_2 Start_1)))
   (StartInt_1 Int (1 (str.to_int Start)))
   (StartInt_3 Int (1 (str.indexof Start_6 Start_4 StartInt_1) (str.to_int Start_4)))
   (StartInt_2 Int (1 (str.len Start) (str.to_int Start_2)))
   (Start_7 String (x y (str.++ Start_2 Start_7) (str.replace Start_4 Start_3 Start) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true (not StartBool) (str.prefixof Start Start_2) (str.suffixof Start_3 Start_2) (= Start_3 Start_2) (<= StartInt StartInt)))
   (Start_2 String (x "1" y (str.at Start_2 StartInt_1) (str.replace Start_5 Start_3 Start_1)))
   (Start_5 String (x "" (str.++ Start Start_1) (str.replace Start_1 Start_1 Start_4) (ite StartBool_1 Start_5 Start_5)))
   (Start_3 String (y (str.++ Start_4 Start_2) (str.replace Start_2 Start_2 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (Start_1 String ("b" "" "1" (str.substr Start_6 StartInt_1 StartInt_3) (ite StartBool_1 Start_3 Start_6)))
   (Start_6 String ("b" (str.++ Start_2 Start_7) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.from_int (str.indexof "1" y 0)) 0)))

(check-synth)
