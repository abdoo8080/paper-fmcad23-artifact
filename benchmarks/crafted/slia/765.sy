(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (Start_9 String) (StartBool_2 Bool) (Start_11 String) (StartBool_3 Bool) (Start_10 String) (Start_8 String) (Start_6 String) (Start_5 String) (StartInt_1 Int) (Start_7 String) (StartInt_2 Int) (Start_2 String) (StartInt_3 Int) (StartInt_4 Int) (Start_3 String) (Start_1 String) (StartInt_5 Int) (Start_4 String))
  ((Start String ("" (str.substr Start StartInt_1 StartInt) (str.from_int StartInt)))
   (StartInt Int (0))
   (StartBool Bool (true false (not StartBool_1) (and StartBool StartBool) (str.<= Start_4 Start_5) (str.suffixof Start_4 Start_6) (str.contains Start_4 Start_7) (= Start Start_6) (= StartInt_4 StartInt_4)))
   (StartBool_1 Bool (true (str.< Start_1 Start_10) (str.prefixof Start_10 Start_1)))
   (Start_9 String ("" (str.++ Start_3 Start_8) (str.replace Start_11 Start_4 Start_5) (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start_9)))
   (StartBool_2 Bool (false true (not StartBool) (str.< Start_7 Start_8) (str.<= Start_11 Start_6) (str.prefixof Start_7 Start_5)))
   (Start_11 String ("1" (str.++ Start_10 Start_7) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_11)))
   (StartBool_3 Bool (true false (not StartBool) (str.<= Start_7 Start_5) (str.prefixof Start_2 Start_2) (str.contains Start_2 Start_9)))
   (Start_10 String ("a" (str.substr Start_10 StartInt StartInt) (str.replace Start_6 Start_4 Start_11) (str.from_int StartInt_3) (ite StartBool_3 Start_11 Start_9)))
   (Start_8 String ("b" (str.replace Start_5 Start_9 Start_6) (ite StartBool_2 Start_5 Start_10)))
   (Start_6 String ("0" (str.substr Start_1 StartInt_5 StartInt_3)))
   (Start_5 String ("" (str.at Start_7 StartInt_2) (str.replace Start_2 Start_2 Start_5) (ite StartBool_1 Start_8 Start_5)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_1 StartInt_2)))
   (Start_7 String (x (str.++ Start_1 Start_5) (str.at Start_3 StartInt_5) (str.substr Start_7 StartInt_2 StartInt_4) (str.replace Start_4 Start_6 Start_4)))
   (StartInt_2 Int (1 (str.len Start) (str.indexof Start_2 Start StartInt)))
   (Start_2 String (x "0" "" y "a" "b" "1" (str.++ Start_2 Start_1) (str.substr Start_2 StartInt_2 StartInt_3) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.indexof Start_2 Start_1 StartInt_4) (str.to_int Start_1)))
   (StartInt_4 Int (1 (str.len Start_3)))
   (Start_3 String ("a" "0" y (str.at Start_3 StartInt_3) (str.substr Start_1 StartInt_3 StartInt)))
   (Start_1 String ("" (str.++ Start_1 Start_2) (str.at Start_3 StartInt_3) (str.replace Start_3 Start_1 Start_4)))
   (StartInt_5 Int (1 (str.to_int Start_6)))
   (Start_4 String ("1" (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ "a" "0") (str.to_int (str.++ y "0")))))

(check-synth)
