(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_4 Int) (StartBool_3 Bool) (Start_8 String) (StartInt_5 Int) (Start_4 String) (Start_7 String) (Start_9 String) (StartBool_1 Bool) (Start_5 String) (StartInt_1 Int) (Start_3 String) (Start_6 String) (Start_2 String) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_2 Int) (Start_1 String))
  ((Start String ("1" (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_3 Start Start) (ite StartBool_1 Start Start)))
   (StartInt Int (0 1))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (str.< Start_4 Start) (str.<= Start_2 Start_8) (str.prefixof Start_2 Start_6) (str.contains Start_6 Start_5)))
   (StartInt_4 Int (0 (str.len Start_9)))
   (StartBool_3 Bool (false (str.< Start_4 Start_8) (str.<= Start_8 Start_4) (str.suffixof Start_1 Start_7) (str.contains Start_5 Start_9) (= StartInt_2 StartInt_4)))
   (Start_8 String ("" (str.++ Start_3 Start_7) (str.at Start_7 StartInt_2) (str.replace Start_8 Start_7 Start_5) (str.from_int StartInt) (ite StartBool_3 Start_4 Start_1)))
   (StartInt_5 Int (1 0 (str.len Start_6) (str.indexof Start_4 Start_5 StartInt_3) (str.to_int Start_8)))
   (Start_4 String ("0" "b" "1" (str.at Start_1 StartInt) (str.replace Start_5 Start Start_3) (str.from_int StartInt)))
   (Start_7 String ("a" "" (str.at Start_6 StartInt_1) (ite StartBool Start_2 Start_1)))
   (Start_9 String ("" "a" "1" (str.++ Start_6 Start_7) (str.at Start StartInt_5) (str.substr Start StartInt_1 StartInt) (str.from_int StartInt_5)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (str.< Start Start_4) (str.prefixof Start_4 Start) (str.suffixof Start Start_2) (= Start Start_1) (= StartInt_1 StartInt_1) (<= StartInt_1 StartInt)))
   (Start_5 String ("1" "a" (str.++ Start Start) (str.at Start_3 StartInt_1) (str.replace Start_1 Start_3 Start) (str.from_int StartInt_2)))
   (StartInt_1 Int (1 0))
   (Start_3 String ("0" x (str.replace Start_2 Start_3 Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_6)))
   (Start_6 String ("" (str.replace Start Start_3 Start_4) (str.from_int StartInt_1) (ite StartBool_2 Start_4 Start_7)))
   (Start_2 String (x "b" (str.at Start_4 StartInt_2) (str.substr Start_6 StartInt StartInt_3)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool) (str.<= Start_1 Start_5) (str.prefixof Start_1 Start_1) (str.suffixof Start_6 Start_7) (= Start_1 Start_7)))
   (StartInt_3 Int (1 (str.len Start_5) (str.indexof Start_1 Start_1 StartInt_1) (str.to_int Start_6)))
   (StartInt_2 Int (0 (str.to_int Start)))
   (Start_1 String (y "a" (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_6 Start_2 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" y (str.at x 1))))

(check-synth)
