(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_7 Bool) (StartBool_6 Bool) (Start_13 String) (Start_8 String) (StartBool_5 Bool) (Start_7 String) (StartInt_4 Int) (Start_4 String) (StartInt_3 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_6 String) (Start_5 String) (StartInt_1 Int) (Start_3 String) (Start_9 String) (Start_12 String) (Start_10 String) (Start_11 String) (Start_1 String) (StartBool_4 Bool) (StartInt_6 Int) (Start_2 String) (StartInt_8 Int) (StartInt_7 Int) (StartInt_11 Int) (StartInt_10 Int) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_2 Int) (StartInt_9 Int))
  ((Start String ("1" (str.at Start_1 StartInt) (str.substr Start StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt Int (0))
   (StartBool Bool (false (str.<= Start_3 Start_12) (str.prefixof Start_3 Start_6) (str.contains Start_3 Start_13) (= Start_3 Start_7)))
   (StartBool_7 Bool (false true (and StartBool_6 StartBool_6) (str.prefixof Start Start_5) (= StartInt_9 StartInt) (<= StartInt_10 StartInt_11)))
   (StartBool_6 Bool (false (not StartBool_7) (str.contains Start_1 Start_6) (= Start_1 Start_6) (= StartInt_6 StartInt_1) (<= StartInt_6 StartInt_6)))
   (Start_13 String (x "" "0" (str.++ Start_2 Start_7) (str.at Start_4 StartInt_9) (str.substr Start_13 StartInt_7 StartInt_7) (str.from_int StartInt_4) (ite StartBool_6 Start_12 Start_6)))
   (Start_8 String ("b" (str.at Start_2 StartInt_3) (str.from_int StartInt) (ite StartBool_3 Start_4 Start_5)))
   (StartBool_5 Bool (false (str.< Start_5 Start_11) (str.prefixof Start_10 Start_1) (str.suffixof Start_1 Start_4)))
   (Start_7 String (x y (str.from_int StartInt_2)))
   (StartInt_4 Int (0 1 (str.indexof Start_1 Start_11 StartInt_3)))
   (Start_4 String ("b" "a" (str.at Start_3 StartInt_1) (str.substr Start StartInt StartInt)))
   (StartInt_3 Int (1 0 (str.indexof Start_5 Start_5 StartInt) (str.to_int Start_1)))
   (StartBool_1 Bool (true false (not StartBool) (str.prefixof Start_6 Start_2) (str.suffixof Start_2 Start_3) (str.contains Start_1 Start_3) (= Start_4 Start_7)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_3 StartBool_5) (str.<= Start_6 Start_8) (str.suffixof Start_9 Start_1) (= Start_4 Start_1) (<= StartInt_3 StartInt_3)))
   (Start_6 String ("0" (ite StartBool_2 Start Start_8)))
   (Start_5 String (y (str.++ Start Start_3)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_2 StartInt_2) (str.to_int Start_1)))
   (Start_3 String (y "1" "" (str.++ Start_5 Start_4) (str.substr Start_3 StartInt_3 StartInt_1)))
   (Start_9 String (y (str.at Start_1 StartInt_4) (str.replace Start_6 Start_3 Start_10) (str.from_int StartInt)))
   (Start_12 String ("" "b" (str.at Start_5 StartInt_2) (str.substr Start_4 StartInt_8 StartInt_9) (str.replace Start Start_7 Start_6) (ite StartBool_4 Start_2 Start_3)))
   (Start_10 String ("b" (str.++ Start_1 Start_3) (ite StartBool_3 Start_4 Start_7)))
   (Start_11 String (y (str.++ Start_1 Start_10)))
   (Start_1 String ("0" "" "1" "a" "b" (str.++ Start Start_1) (str.at Start StartInt_10) (str.from_int StartInt_1)))
   (StartBool_4 Bool (true false (and StartBool_5 StartBool_3) (str.suffixof Start_3 Start_7) (str.contains Start_3 Start_10) (= Start_9 Start_10) (<= StartInt_5 StartInt_6)))
   (StartInt_6 Int (1 (str.indexof Start_2 Start_6 StartInt_7) (str.to_int Start_6)))
   (Start_2 String ("0" y "a" (str.++ Start_3 Start_4) (str.at Start_5 StartInt_2) (str.replace Start_6 Start_3 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_7 Start_5)))
   (StartInt_8 Int (1 0))
   (StartInt_7 Int (0 (str.len Start_4) (str.to_int Start_8)))
   (StartInt_11 Int (0 (str.len Start_12) (str.indexof Start_7 Start_1 StartInt_5) (str.to_int Start_13)))
   (StartInt_10 Int (1 (str.to_int Start_5)))
   (StartInt_5 Int (0))
   (StartBool_2 Bool (false (str.< Start_10 Start) (str.contains Start_7 Start_12) (= Start_5 Start_4) (= StartInt_4 StartInt_5)))
   (StartInt_2 Int (0 (str.len Start_3) (str.indexof Start_4 Start_2 StartInt_3)))
   (StartInt_9 Int (0 1 (str.len Start_12) (str.to_int Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "b" "" x) 1 (str.indexof x "0" (str.to_int x)))))

(check-synth)
