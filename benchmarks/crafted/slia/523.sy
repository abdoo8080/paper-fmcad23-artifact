(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_8 Int) (Start_5 String) (StartInt_4 Int) (Start_2 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_4 String) (StartInt_3 Int) (StartBool_4 Bool) (StartInt_1 Int) (Start_3 String) (StartInt_7 Int) (Start_8 String) (StartInt_5 Int) (Start_10 String) (StartBool_5 Bool) (StartBool_3 Bool) (StartInt_2 Int) (StartInt_10 Int) (Start_6 String) (Start_1 String) (Start_7 String) (StartBool_6 Bool) (StartInt_12 Int) (StartInt_9 Int) (Start_11 String) (StartBool_1 Bool) (Start_12 String) (StartInt_11 Int))
  ((Start String ("0" (str.++ Start Start) (str.at Start StartInt) (str.replace Start Start Start_1) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (1 0 (str.indexof Start Start_6 StartInt_10) (str.to_int Start)))
   (StartBool Bool (false (and StartBool_1 StartBool_2) (str.<= Start Start_11) (str.prefixof Start_1 Start_3) (= StartInt_4 StartInt) (<= StartInt_8 StartInt_10)))
   (Start_9 String ("b" (str.at Start_2 StartInt_2) (str.substr Start_6 StartInt_12 StartInt_11)))
   (StartInt_8 Int (0 1))
   (Start_5 String ("a" (str.at Start_6 StartInt_2) (ite StartBool_1 Start Start)))
   (StartInt_4 Int (1 0 (str.indexof Start_5 Start StartInt_1)))
   (Start_2 String ("1" "b" (str.at Start_1 StartInt_1)))
   (StartBool_2 Bool (false (not StartBool_3) (str.< Start_2 Start_1) (str.<= Start Start_3) (str.prefixof Start_4 Start_2) (<= StartInt_6 StartInt_3)))
   (StartInt_6 Int (1 (str.indexof Start_1 Start_4 StartInt_2) (str.to_int Start_2)))
   (Start_4 String ("0" (str.++ Start_7 Start_1) (str.at Start StartInt_7)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.indexof Start_3 Start_1 StartInt_3) (str.to_int Start_1)))
   (StartBool_4 Bool (true (not StartBool_1) (and StartBool_5 StartBool_6) (str.<= Start_10 Start) (str.prefixof Start_5 Start_9) (str.contains Start_2 Start_8) (= Start_4 Start_4) (<= StartInt StartInt_4)))
   (StartInt_1 Int (0 1))
   (Start_3 String ("a" "" (str.++ Start_4 Start_4) (str.at Start_4 StartInt_4) (str.replace Start Start_4 Start_4) (str.from_int StartInt_5) (ite StartBool_2 Start_4 Start_3)))
   (StartInt_7 Int (0 (str.to_int Start_4)))
   (Start_8 String (x "" (str.at Start_2 StartInt_1) (str.substr Start_9 StartInt_8 StartInt_8) (str.from_int StartInt_3) (ite StartBool_4 Start Start_3)))
   (StartInt_5 Int (0 (str.len Start_1) (str.to_int Start)))
   (Start_10 String (x (str.at Start_4 StartInt) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start_6 Start_1 Start_1) (str.from_int StartInt_8) (ite StartBool Start_5 Start)))
   (StartBool_5 Bool (false true (str.< Start_2 Start) (str.<= Start_5 Start_1) (str.suffixof Start_11 Start_11) (str.contains Start_12 Start_2) (= Start_6 Start)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool_2) (str.prefixof Start_3 Start) (= StartInt_1 StartInt_6) (<= StartInt StartInt_5)))
   (StartInt_2 Int (0 1 (str.len Start)))
   (StartInt_10 Int (0 1 (str.len Start_5)))
   (Start_6 String ("1"))
   (Start_1 String ("1" (str.++ Start_7 Start) (str.at Start_7 StartInt_2) (str.substr Start StartInt_7 StartInt_5) (str.replace Start_8 Start_8 Start_5) (ite StartBool_3 Start_7 Start_8)))
   (Start_7 String ("b" y (str.++ Start_5 Start_2) (str.at Start_5 StartInt_6) (str.replace Start_5 Start_2 Start_6) (str.from_int StartInt_7)))
   (StartBool_6 Bool (true (not StartBool_4) (and StartBool_5 StartBool_4) (str.<= Start_5 Start_11) (str.prefixof Start_9 Start_5) (str.suffixof Start_5 Start_10) (= StartInt StartInt_8) (<= StartInt_9 StartInt)))
   (StartInt_12 Int (0 1 (str.len Start_11) (str.to_int Start)))
   (StartInt_9 Int (1 0 (str.len Start_2) (str.indexof Start_1 Start_1 StartInt_6) (str.to_int Start_6)))
   (Start_11 String ("1" y (str.++ Start_10 Start_2) (str.at Start_8 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_5) (str.from_int StartInt)))
   (StartBool_1 Bool (false true (str.prefixof Start_1 Start) (str.suffixof Start_1 Start) (= StartInt_2 StartInt_3)))
   (Start_12 String ("1" (str.++ Start_9 Start_10) (str.at Start_7 StartInt_10) (str.substr Start_5 StartInt_11 StartInt_7) (str.from_int StartInt_12)))
   (StartInt_11 Int (0 1 (str.indexof Start_11 Start StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.at y (str.len x)) (str.indexof "a" x (str.indexof "0" x 0)))))

(check-synth)
