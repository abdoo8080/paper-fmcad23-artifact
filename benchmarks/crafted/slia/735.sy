(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_14 String) (StartInt_12 Int) (Start_15 String) (Start_16 String) (StartBool_6 Bool) (Start_9 String) (StartInt_9 Int) (StartBool_1 Bool) (Start_4 String) (StartInt_10 Int) (StartInt_8 Int) (StartBool_2 Bool) (Start_12 String) (StartBool_3 Bool) (StartInt_11 Int) (StartInt_4 Int) (StartInt_3 Int) (StartBool_5 Bool) (Start_2 String) (Start_3 String) (StartInt_1 Int) (Start_1 String) (Start_7 String) (StartInt_13 Int) (StartInt_7 Int) (StartInt_5 Int) (Start_8 String) (Start_6 String) (Start_13 String) (StartInt_2 Int) (Start_5 String) (StartBool_4 Bool) (StartInt_6 Int) (Start_10 String) (Start_11 String))
  ((Start String ("" y (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (0 1 (str.indexof Start_2 Start_2 StartInt_1)))
   (StartBool Bool (true (not StartBool_1) (str.suffixof Start_3 Start) (str.contains Start_3 Start_4)))
   (Start_17 String ("0" "a" "" (str.++ Start_4 Start_2) (str.at Start_2 StartInt_13) (str.substr Start_3 StartInt_3 StartInt) (str.replace Start_7 Start_10 Start_3) (ite StartBool_6 Start_3 Start_13)))
   (Start_14 String (x (str.at Start_5 StartInt_12) (str.substr Start_15 StartInt_9 StartInt_7) (str.replace Start_14 Start_17 Start_7) (str.from_int StartInt_11) (ite StartBool_4 Start_15 Start_1)))
   (StartInt_12 Int (1 0 (str.to_int Start_11)))
   (Start_15 String ("a" "b" (str.++ Start_8 Start_4) (str.substr Start_4 StartInt_10 StartInt_5) (str.from_int StartInt_2) (ite StartBool_1 Start_12 Start_10)))
   (Start_16 String ("" "0" (str.at Start_4 StartInt_8) (str.replace Start_11 Start_1 Start_10) (str.from_int StartInt_6)))
   (StartBool_6 Bool (true false (str.prefixof Start_7 Start_14) (str.suffixof Start_11 Start_15) (= Start_16 Start_15)))
   (Start_9 String ("a" (str.++ Start_13 Start) (str.at Start_8 StartInt_8) (str.substr Start_2 StartInt_6 StartInt_4) (str.replace Start_9 Start_10 Start_6) (str.from_int StartInt_10) (ite StartBool_6 Start Start_1)))
   (StartInt_9 Int (1 (str.len Start_2)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.prefixof Start_5 Start_1) (str.suffixof Start_4 Start_6) (str.contains Start_7 Start_1) (<= StartInt_4 StartInt_1)))
   (Start_4 String ("b" "1" (str.at Start_1 StartInt_2) (str.substr Start_4 StartInt_3 StartInt_3) (ite StartBool_1 Start Start)))
   (StartInt_10 Int (1 (str.len Start) (str.indexof Start_7 Start_9 StartInt_5) (str.to_int Start_5)))
   (StartInt_8 Int (0 (str.len Start_7) (str.indexof Start_4 Start_3 StartInt_5)))
   (StartBool_2 Bool (false (and StartBool StartBool) (str.< Start_1 Start) (str.<= Start_2 Start_2) (str.prefixof Start_2 Start_8) (str.contains Start_9 Start_10) (= StartInt_3 StartInt) (<= StartInt StartInt_5)))
   (Start_12 String ("b" (str.++ Start_11 Start_9) (str.replace Start_9 Start_1 Start_3) (str.from_int StartInt_4)))
   (StartBool_3 Bool (true (not StartBool_4) (str.suffixof Start_7 Start_10) (= Start_2 Start_11) (<= StartInt_6 StartInt_3)))
   (StartInt_11 Int (1 (str.len Start_3) (str.to_int Start_13)))
   (StartInt_4 Int (1 (str.indexof Start_5 Start_3 StartInt_1)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_1 Start_3 StartInt_3)))
   (StartBool_5 Bool (true false (not StartBool_4) (str.< Start_11 Start_1) (str.<= Start_5 Start_5) (str.contains Start_3 Start) (= Start Start_2) (<= StartInt_7 StartInt_8)))
   (Start_2 String (y "1" (str.at Start StartInt_3) (str.replace Start_1 Start Start_1)))
   (Start_3 String ("1" (str.++ Start_2 Start_2) (str.from_int StartInt)))
   (StartInt_1 Int (0 1 (str.len Start)))
   (Start_1 String ("b" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_1 Start_2 Start_2) (ite StartBool Start Start_3)))
   (Start_7 String (y (str.++ Start_8 Start) (str.substr Start StartInt_1 StartInt_5) (ite StartBool_1 Start_3 Start_5)))
   (StartInt_13 Int (1 0))
   (StartInt_7 Int (0 1))
   (StartInt_5 Int (1 0 (str.to_int Start_5)))
   (Start_8 String ("a" (str.replace Start_2 Start_2 Start_8) (ite StartBool_2 Start_2 Start_6)))
   (Start_6 String ("a" (str.substr Start_7 StartInt_2 StartInt_5) (ite StartBool_1 Start_7 Start_2)))
   (Start_13 String ("" (str.++ Start_3 Start_1) (str.substr Start_1 StartInt_10 StartInt_11)))
   (StartInt_2 Int (0))
   (Start_5 String ("" (str.at Start_5 StartInt_5)))
   (StartBool_4 Bool (false true (not StartBool_3) (and StartBool_5 StartBool_2) (str.< Start_11 Start_9) (str.contains Start_8 Start_4) (= Start_5 Start_12) (<= StartInt_6 StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start) (str.to_int Start_4)))
   (Start_10 String (y "0" (str.++ Start_11 Start_2) (str.at Start_3 StartInt_3) (str.from_int StartInt) (ite StartBool_3 Start_9 Start_4)))
   (Start_11 String ("1" (str.++ Start_9 Start_1) (str.at Start_4 StartInt_6) (str.substr Start_5 StartInt_5 StartInt_9) (str.replace Start_13 Start_5 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof x "0") x "1")))

(check-synth)
