(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_8 String) (Start_6 String) (StartInt_5 Int) (StartInt_4 Int) (StartInt_1 Int) (Start_5 String) (Start_7 String) (Start_3 String) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_2 Int) (Start_2 String) (Start_9 String) (Start_4 String) (Start_1 String) (StartBool_1 Bool))
  ((Start String ("1" "" (str.++ Start Start_1) (str.substr Start StartInt StartInt_1)))
   (StartInt Int (1 (str.len Start_5)))
   (StartBool Bool (false (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_4 Start_2) (str.suffixof Start_4 Start_1)))
   (Start_10 String (x (str.substr Start_3 StartInt_4 StartInt_4) (str.replace Start_10 Start Start_4) (str.from_int StartInt_1)))
   (Start_8 String ("a" "0" (str.at Start_5 StartInt_2) (str.substr Start_2 StartInt_4 StartInt_3) (str.replace Start_10 Start_2 Start)))
   (Start_6 String ("a" "1" (str.++ Start_4 Start_8) (str.at Start_9 StartInt_5) (str.substr Start_5 StartInt_4 StartInt_5) (str.replace Start_4 Start_9 Start_4) (ite StartBool Start_9 Start_6)))
   (StartInt_5 Int (0 1 (str.indexof Start_4 Start_1 StartInt_4)))
   (StartInt_4 Int (0 (str.len Start_7) (str.to_int Start_6)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.to_int Start_3)))
   (Start_5 String ("b" "" "0" (str.at Start_3 StartInt_3) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_1)))
   (Start_7 String (x "0" "b" (str.++ Start Start_5) (str.substr Start_3 StartInt_5 StartInt_4) (str.replace Start_4 Start_2 Start) (str.from_int StartInt_1) (ite StartBool_2 Start_7 Start_2)))
   (Start_3 String (x (str.++ Start_2 Start_2) (str.substr Start_3 StartInt_1 StartInt_2) (str.from_int StartInt_3)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_2 Start_6) (str.prefixof Start Start_1) (str.suffixof Start_6 Start_2) (str.contains Start_4 Start) (= Start_6 Start_1) (= StartInt_4 StartInt_2)))
   (StartInt_3 Int (0 (str.to_int Start_1)))
   (StartInt_2 Int (1 (str.to_int Start)))
   (Start_2 String ("a" y "0" "1" "b" (str.++ Start Start_4) (str.from_int StartInt)))
   (Start_9 String ("0" (str.at Start_9 StartInt_1) (str.from_int StartInt_4) (ite StartBool_2 Start_7 Start_2)))
   (Start_4 String ("" (str.from_int StartInt_1)))
   (Start_1 String (y x (str.++ Start_3 Start_3) (str.at Start StartInt_1) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_2 Start_4 Start_3)))
   (StartBool_1 Bool (false (not StartBool_1) (str.<= Start_3 Start_1) (str.prefixof Start_3 Start_5) (= Start_2 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< y "b") y "0")))

(check-synth)
