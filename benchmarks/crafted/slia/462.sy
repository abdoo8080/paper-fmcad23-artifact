(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_16 String) (StartBool_7 Bool) (Start_3 String) (StartBool_6 Bool) (StartBool_5 Bool) (StartBool_4 Bool) (StartInt_3 Int) (StartInt_1 Int) (StartBool_2 Bool) (Start_4 String) (Start_5 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_10 String) (Start_9 String) (StartBool_3 Bool) (Start_7 String) (Start_2 String) (StartInt_4 Int) (Start_11 String) (StartInt_5 Int) (Start_13 String) (StartInt_7 Int) (StartInt_6 Int) (Start_8 String) (Start_12 String) (Start_14 String) (Start_6 String) (Start_15 String) (Start_1 String))
  ((Start String (x (str.++ Start_1 Start) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 1 (str.indexof Start_9 Start_4 StartInt_4) (str.to_int Start_12)))
   (StartBool Bool (false true (not StartBool_5) (and StartBool_4 StartBool_6) (str.suffixof Start_13 Start_16) (= Start_15 Start_1)))
   (Start_17 String ("0" (str.at Start_12 StartInt_5) (str.replace Start_8 Start_17 Start_6) (str.from_int StartInt)))
   (Start_16 String (y (str.substr Start_16 StartInt_3 StartInt_2) (ite StartBool_2 Start_10 Start_7)))
   (StartBool_7 Bool (false (not StartBool_3) (and StartBool_5 StartBool_5) (str.< Start_11 Start_12) (str.<= Start_14 Start_11) (str.prefixof Start_2 Start_7) (str.suffixof Start Start_14) (str.contains Start_1 Start_17) (= StartInt_2 StartInt_4)))
   (Start_3 String (y "b" (str.++ Start_10 Start_9) (str.replace Start_8 Start_6 Start_15) (str.from_int StartInt_2)))
   (StartBool_6 Bool (false true (not StartBool_7) (str.< Start_4 Start_17) (str.<= Start_17 Start_16) (str.suffixof Start_11 Start_17) (str.contains Start_8 Start_4) (= StartInt_3 StartInt_7) (<= StartInt_7 StartInt_2)))
   (StartBool_5 Bool (false (not StartBool_2) (str.<= Start_2 Start_3) (str.prefixof Start_2 Start_6) (str.suffixof Start_8 Start_9) (str.contains Start Start_7)))
   (StartBool_4 Bool (true false (str.<= Start_3 Start_2) (str.prefixof Start_2 Start_4) (str.suffixof Start_15 Start_2) (str.contains Start_14 Start_1) (= Start_8 Start_1) (= StartInt_1 StartInt_6)))
   (StartInt_3 Int (0))
   (StartInt_1 Int (1 0 (str.len Start_9) (str.indexof Start_15 Start_2 StartInt_3)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_4 StartBool_5) (str.< Start_4 Start) (str.<= Start_1 Start_3) (str.contains Start_8 Start) (= Start_7 Start_8) (= StartInt StartInt_1)))
   (Start_4 String (x (str.at Start_8 StartInt_3) (str.from_int StartInt)))
   (Start_5 String ("b" y "" (str.++ Start_7 Start_4) (str.replace Start Start_6 Start_5) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 (str.len Start) (str.indexof Start_6 Start_5 StartInt)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_2 StartBool) (str.<= Start_2 Start) (str.contains Start_4 Start_2) (= Start_5 Start_2) (= StartInt StartInt_1) (<= StartInt_2 StartInt_2)))
   (Start_10 String ("" (str.substr Start_12 StartInt StartInt_4) (str.replace Start_1 Start_13 Start_2)))
   (Start_9 String ("b" y "0" (str.++ Start_2 Start_10) (str.substr Start_6 StartInt StartInt_4) (str.replace Start_8 Start_10 Start_3)))
   (StartBool_3 Bool (true (not StartBool_5) (and StartBool_4 StartBool) (str.< Start_12 Start_2) (str.<= Start_3 Start_14) (str.prefixof Start_13 Start_3) (= StartInt_7 StartInt)))
   (Start_7 String ("1" (str.substr Start_4 StartInt_2 StartInt) (str.replace Start_2 Start_4 Start)))
   (Start_2 String ("b" (str.at Start_3 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (StartInt_4 Int (0 1 (str.indexof Start_11 Start_7 StartInt_4) (str.to_int Start_6)))
   (Start_11 String ("1" y (str.++ Start_1 Start_5) (str.at Start StartInt) (str.replace Start_10 Start_10 Start_6) (str.from_int StartInt_5) (ite StartBool_4 Start_1 Start_8)))
   (StartInt_5 Int (0 (str.indexof Start_3 Start_3 StartInt_3)))
   (Start_13 String (x (str.substr Start_7 StartInt_4 StartInt_6) (str.replace Start_3 Start_13 Start_2) (ite StartBool_3 Start_12 Start_2)))
   (StartInt_7 Int (0 1 (str.indexof Start_7 Start_6 StartInt)))
   (StartInt_6 Int (0 (str.indexof Start_5 Start_13 StartInt_2) (str.to_int Start_13)))
   (Start_8 String (y "1" (str.++ Start_4 Start_1) (str.substr Start_7 StartInt_1 StartInt_2)))
   (Start_12 String ("b" "a" x (str.++ Start_10 Start_14) (str.substr Start_8 StartInt_2 StartInt_3) (str.replace Start_12 Start_6 Start_1) (str.from_int StartInt_6)))
   (Start_14 String ("a" "1" "" "0" "b" x (str.++ Start_11 Start_8) (str.substr Start_5 StartInt_3 StartInt_5) (str.from_int StartInt_5) (ite StartBool_4 Start_9 Start_1)))
   (Start_6 String ("0" "a" "b" (ite StartBool_2 Start_5 Start_2)))
   (Start_15 String ("b" (ite StartBool_5 Start_14 Start_5)))
   (Start_1 String (x "1" "" (str.++ Start_10 Start_13) (str.at Start_2 StartInt_4) (str.replace Start_15 Start Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "a" (str.replace "a" y "1"))))

(check-synth)
