(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_18 String) (Start_17 String) (Start_16 String) (StartInt_6 Int) (StartInt_4 Int) (StartInt_8 Int) (StartInt_5 Int) (Start_11 String) (Start_10 String) (Start_6 String) (Start_2 String) (Start_7 String) (Start_5 String) (StartInt_10 Int) (StartBool_1 Bool) (Start_8 String) (StartInt_3 Int) (Start_15 String) (StartInt_2 Int) (StartInt_7 Int) (Start_12 String) (Start_13 String) (Start_4 String) (Start_9 String) (StartBool_2 Bool) (Start_14 String) (Start_3 String) (StartInt_9 Int) (StartInt_1 Int) (Start_1 String))
  ((Start String ("0" "b" "a" y "1" x (str.++ Start_1 Start) (str.at Start StartInt_1) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_1) (str.to_int Start_5)))
   (StartBool Bool (true false (and StartBool StartBool) (str.<= Start_7 Start_4) (str.prefixof Start_13 Start_2) (str.contains Start_13 Start_6) (= Start_15 Start_6)))
   (StartBool_3 Bool (true (not StartBool_1) (str.prefixof Start_18 Start) (str.suffixof Start_17 Start_10) (= Start_3 Start_2) (<= StartInt_8 StartInt_1)))
   (Start_18 String ("b" (str.++ Start_5 Start_17) (str.at Start_18 StartInt)))
   (Start_17 String ("0" (str.at Start_13 StartInt_8) (str.substr Start_15 StartInt_10 StartInt_4) (str.replace Start_18 Start_12 Start_8) (ite StartBool_2 Start_1 Start_10)))
   (Start_16 String (y (str.replace Start_13 Start_9 Start_8) (ite StartBool_3 Start_12 Start_17)))
   (StartInt_6 Int (1 (str.len Start_9) (str.indexof Start_5 Start_5 StartInt_1)))
   (StartInt_4 Int (0 1 (str.to_int Start_11)))
   (StartInt_8 Int (1 (str.len Start_9) (str.indexof Start_11 Start_3 StartInt_8)))
   (StartInt_5 Int (0 1 (str.len Start_3)))
   (Start_11 String ("" (str.++ Start_12 Start_11) (str.substr Start_5 StartInt_5 StartInt_5)))
   (Start_10 String ("a" (str.substr Start_11 StartInt StartInt_4) (str.replace Start Start_5 Start_10) (str.from_int StartInt_4)))
   (Start_6 String ("1" x y (str.++ Start_3 Start_3)))
   (Start_2 String (x (str.at Start_12 StartInt_8) (str.substr Start_2 StartInt_9 StartInt_5)))
   (Start_7 String ("a" (str.++ Start_3 Start_5) (str.at Start_8 StartInt_3) (str.substr Start_4 StartInt_1 StartInt_4) (str.from_int StartInt_4) (ite StartBool_1 Start_9 Start_3)))
   (Start_5 String ("a" "" (str.++ Start_3 Start_4) (str.at Start_7 StartInt) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_1 Start Start_6) (str.from_int StartInt_3)))
   (StartInt_10 Int (1 0 (str.to_int Start_4)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_1 Start_2) (str.<= Start_3 Start_4) (str.prefixof Start_5 Start_5) (str.suffixof Start Start_4) (str.contains Start_5 Start_3) (= Start Start_6) (<= StartInt_1 StartInt_3)))
   (Start_8 String ("a" (str.++ Start_10 Start) (str.at Start_3 StartInt_4) (str.substr Start_13 StartInt_5 StartInt_2) (str.from_int StartInt_7) (ite StartBool Start_10 Start_13)))
   (StartInt_3 Int (1 0 (str.len Start_6) (str.to_int Start)))
   (Start_15 String ("b" "a" "0" "1" (str.at Start_13 StartInt_3) (str.substr Start_13 StartInt_1 StartInt) (str.replace Start_11 Start_16 Start_6) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 1 (str.indexof Start_12 Start_3 StartInt_7)))
   (StartInt_7 Int (1 (str.len Start_8) (str.to_int Start_2)))
   (Start_12 String ("a" y (str.substr Start_8 StartInt_1 StartInt_6)))
   (Start_13 String ("1" "b" (str.++ Start_10 Start_10) (str.substr Start_12 StartInt_6 StartInt_2)))
   (Start_4 String (x "0" (str.++ Start_9 Start_3) (str.replace Start_10 Start_13 Start_11) (str.from_int StartInt_5) (ite StartBool_2 Start_10 Start_6)))
   (Start_9 String ("0" (str.substr Start_3 StartInt_1 StartInt_3) (str.replace Start_1 Start_10 Start_2) (ite StartBool Start_5 Start_4)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_2) (str.<= Start_11 Start_2) (str.contains Start_14 Start_7) (= Start_12 Start)))
   (Start_14 String ("b" (str.++ Start_4 Start_7) (str.at Start StartInt_2) (str.from_int StartInt_8) (ite StartBool_1 Start_4 Start_12)))
   (Start_3 String ("b" "a" (str.substr Start_1 StartInt_3 StartInt_9) (str.from_int StartInt_8) (ite StartBool_2 Start_9 Start_10)))
   (StartInt_9 Int (1 (str.indexof Start_14 Start_2 StartInt_3) (str.to_int Start)))
   (StartInt_1 Int (0 1 (str.to_int Start)))
   (Start_1 String ("a" "" "1"))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y (str.from_int (str.indexof "0" y 1)))))

(check-synth)
