(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (StartInt_2 Int) (StartBool_3 Bool) (Start_5 String) (Start_15 String) (Start_7 String) (StartBool_1 Bool) (StartBool_5 Bool) (StartInt_3 Int) (StartInt_6 Int) (StartBool_6 Bool) (Start_2 String) (StartBool_2 Bool) (Start_11 String) (StartInt_4 Int) (Start_13 String) (StartInt_1 Int) (Start_6 String) (StartBool_4 Bool) (Start_9 String) (Start_10 String) (StartInt_5 Int) (Start_8 String) (Start_4 String) (Start_12 String) (Start_3 String) (Start_1 String) (Start_14 String))
  ((Start String ("" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_15) (str.to_int Start_12)))
   (StartBool Bool (false true (str.suffixof Start_7 Start_2) (str.contains Start_3 Start_7) (= Start_7 Start_14) (= StartInt_5 StartInt_1) (<= StartInt_2 StartInt_5)))
   (Start_16 String (y x (str.from_int StartInt_6) (ite StartBool_5 Start_6 Start_15)))
   (StartInt_2 Int (1 0 (str.to_int Start_1)))
   (StartBool_3 Bool (true (not StartBool_3) (str.< Start_1 Start_1) (str.prefixof Start_2 Start_3) (str.contains Start_5 Start_1) (= StartInt_1 StartInt_3) (<= StartInt_4 StartInt_4)))
   (Start_5 String ("a" "1" "0" x (str.++ Start_2 Start_6) (str.substr Start_3 StartInt_3 StartInt_5) (str.replace Start_7 Start_6 Start_5) (str.from_int StartInt_6)))
   (Start_15 String ("1" (ite StartBool_3 Start_6 Start_16)))
   (Start_7 String ("1" "" (str.at Start_7 StartInt) (str.substr Start_8 StartInt_2 StartInt_4) (str.replace Start_8 Start_8 Start_1) (ite StartBool_3 Start_9 Start_4)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool) (str.< Start_7 Start_3) (str.prefixof Start_6 Start_13) (str.suffixof Start_5 Start_2)))
   (StartBool_5 Bool (true (not StartBool_3) (and StartBool_3 StartBool_3) (str.< Start_12 Start_2) (str.prefixof Start_11 Start_11) (str.contains Start Start_8) (= Start Start_10) (= StartInt_3 StartInt_4) (<= StartInt_3 StartInt_2)))
   (StartInt_3 Int (0 1 (str.len Start_1) (str.indexof Start_6 Start_2 StartInt_4) (str.to_int Start_6)))
   (StartInt_6 Int (0 (str.to_int Start_3)))
   (StartBool_6 Bool (true false (str.prefixof Start_11 Start_3) (str.contains Start_4 Start_3) (<= StartInt_1 StartInt_4)))
   (Start_2 String ("a" (str.at Start_2 StartInt) (str.replace Start_3 Start Start) (ite StartBool_1 Start_4 Start_1)))
   (StartBool_2 Bool (false (and StartBool StartBool_3) (str.< Start_6 Start) (str.<= Start_2 Start_3) (str.contains Start_2 Start_5) (= StartInt StartInt)))
   (Start_11 String (y (str.++ Start_4 Start) (str.from_int StartInt_2) (ite StartBool_2 Start_4 Start_12)))
   (StartInt_4 Int (1 (str.len Start_3)))
   (Start_13 String (x))
   (StartInt_1 Int (1 (str.len Start_2)))
   (Start_6 String ("" (str.from_int StartInt_1)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_4 StartBool_5) (str.<= Start_5 Start_2) (str.prefixof Start_13 Start_5) (<= StartInt_3 StartInt_5)))
   (Start_9 String ("0" x y "a" "" (str.++ Start_10 Start_6) (str.substr Start_9 StartInt StartInt) (str.replace Start_8 Start_2 Start_10)))
   (Start_10 String ("" "a" "1" (str.at Start_9 StartInt_6) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_4 Start_6 Start_10) (ite StartBool_3 Start_2 Start_7)))
   (StartInt_5 Int (0 (str.len Start_11) (str.indexof Start_9 Start_5 StartInt_3) (str.to_int Start_8)))
   (Start_8 String (y "a" x (str.at Start_1 StartInt_5) (ite StartBool Start Start_6)))
   (Start_4 String ("b" "0" "a" "" y x "1" (str.at Start_3 StartInt_1) (str.substr Start_5 StartInt_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool_2 Start_2 Start_1)))
   (Start_12 String (x (str.at Start_4 StartInt) (str.replace Start_6 Start_5 Start_9)))
   (Start_3 String (x (str.substr Start_4 StartInt_2 StartInt_4) (str.replace Start_8 Start_2 Start_11) (str.from_int StartInt) (ite StartBool_4 Start_2 Start_2)))
   (Start_1 String (y (str.++ Start_9 Start_6) (str.at Start_3 StartInt_5) (str.replace Start_5 Start_2 Start) (str.from_int StartInt_2) (ite StartBool_6 Start_9 Start_14)))
   (Start_14 String ("" (str.at Start_7 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "a" x) (str.++ "1" y) "")))

(check-synth)
