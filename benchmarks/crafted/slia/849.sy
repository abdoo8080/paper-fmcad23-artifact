(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (StartInt_7 Int) (StartInt_3 Int) (StartInt_6 Int) (StartInt_5 Int) (Start_15 String) (Start_12 String) (Start_14 String) (StartInt_4 Int) (Start_7 String) (StartInt_2 Int) (Start_13 String) (Start_3 String) (Start_9 String) (Start_11 String) (Start_5 String) (Start_6 String) (StartBool_1 Bool) (StartBool_2 Bool) (Start_8 String) (Start_10 String) (Start_4 String) (Start_2 String))
  ((Start String (y (str.++ Start_1 Start) (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_2 Start_3 Start_2)))
   (StartInt Int (1 0 (str.len Start_9) (str.to_int Start_10)))
   (StartBool Bool (false true (not StartBool_1) (str.<= Start_13 Start_10) (str.prefixof Start_3 Start_7) (str.contains Start_5 Start) (= StartInt_5 StartInt_7) (<= StartInt_5 StartInt)))
   (Start_1 String ("a" (str.++ Start_4 Start_14) (str.substr Start_6 StartInt_4 StartInt_6)))
   (StartInt_1 Int (1 (str.len Start_14) (str.indexof Start_8 Start_9 StartInt_6)))
   (StartInt_7 Int (1))
   (StartInt_3 Int (1 (str.to_int Start_11)))
   (StartInt_6 Int (1 0 (str.len Start_7) (str.indexof Start_7 Start_9 StartInt)))
   (StartInt_5 Int (1 (str.indexof Start_15 Start_13 StartInt_4)))
   (Start_15 String ("1" (str.++ Start Start_15) (str.at Start StartInt_4) (str.replace Start_15 Start_10 Start) (str.from_int StartInt_5) (ite StartBool_1 Start_15 Start_4)))
   (Start_12 String ("1" (str.++ Start_1 Start_8) (str.at Start_9 StartInt_3) (ite StartBool Start_12 Start_15)))
   (Start_14 String (y "a" "1" "" (str.++ Start_12 Start_8) (str.substr Start_11 StartInt_1 StartInt_2) (ite StartBool_1 Start_7 Start_11)))
   (StartInt_4 Int (1 0 (str.len Start_10) (str.to_int Start_14)))
   (Start_7 String ("a" "0" "b" x "" y (ite StartBool_2 Start_7 Start_1)))
   (StartInt_2 Int (1 (str.len Start_15) (str.to_int Start_13)))
   (Start_13 String (y x "0" (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_10)))
   (Start_3 String ("0" (str.++ Start_4 Start_5) (str.at Start_5 StartInt)))
   (Start_9 String (y (str.at Start_1 StartInt_6) (str.substr Start_14 StartInt_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start_3)))
   (Start_11 String ("1" (str.++ Start_12 Start_9) (str.at Start_2 StartInt_1) (str.substr Start StartInt_2 StartInt_4) (str.replace Start_13 Start_13 Start_6)))
   (Start_5 String (y (str.++ Start_5 Start_5) (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_6 Start_5 Start_2)))
   (Start_6 String ("b" (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool_2) (str.<= Start_1 Start_7) (str.suffixof Start_6 Start_7) (str.contains Start_3 Start_4) (= Start_4 Start_7)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_1 StartBool_2) (str.<= Start_6 Start_8) (str.contains Start_3 Start_7) (= Start_3 Start_6) (= StartInt_2 StartInt) (<= StartInt_2 StartInt)))
   (Start_8 String (x "b" (str.++ Start_3 Start_4) (str.at Start_1 StartInt) (str.from_int StartInt_2)))
   (Start_10 String (y "1" x (str.at Start_5 StartInt_3) (str.substr Start_3 StartInt StartInt) (str.replace Start_2 Start_11 Start_6) (str.from_int StartInt_2)))
   (Start_4 String ("0" (str.at Start_3 StartInt) (str.from_int StartInt_2)))
   (Start_2 String (x y "" "1" "b" "0" "a" (str.++ Start Start_2) (str.at Start StartInt) (str.substr Start_1 StartInt StartInt_3) (str.replace Start_9 Start_10 Start_5) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "a" (str.replace y "a" ""))))

(check-synth)
