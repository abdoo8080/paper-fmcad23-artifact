(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_6 String) (Start_8 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_11 String) (StartBool_6 Bool) (Start_3 String) (Start_2 String) (Start_5 String) (Start_7 String) (Start_12 String) (StartInt_4 Int) (StartInt_7 Int) (StartInt_2 Int) (Start_10 String) (StartBool_3 Bool) (Start_9 String) (StartInt_1 Int) (StartInt_5 Int) (Start_13 String) (StartBool_1 Bool) (StartInt_6 Int) (Start_4 String) (StartBool_5 Bool) (StartInt_8 Int) (Start_1 String))
  ((Start String (x (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start_1 Start_1)))
   (StartInt Int (1 0 (str.len Start_4) (str.to_int Start_10)))
   (StartBool Bool (false true (not StartBool_6) (and StartBool_1 StartBool_2) (<= StartInt_5 StartInt_7)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool_4 StartBool_6) (str.<= Start_9 Start_6) (str.suffixof Start_5 Start_10) (str.contains Start_9 Start_11) (= Start_6 Start_7) (<= StartInt_7 StartInt_4)))
   (Start_6 String ("b" "" (str.++ Start Start) (str.replace Start Start_5 Start)))
   (Start_8 String (y (str.from_int StartInt_1) (ite StartBool Start_7 Start_9)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_2 StartInt_3) (str.to_int Start_7)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_1 StartBool_3) (str.< Start_3 Start_1) (str.<= Start_7 Start_6) (str.contains Start_10 Start_6) (= Start_3 Start_5) (= StartInt_3 StartInt_1) (<= StartInt_4 StartInt_5)))
   (Start_11 String ("a" (str.++ Start_8 Start_7) (str.replace Start_12 Start_13 Start_7) (str.from_int StartInt_4) (ite StartBool_4 Start Start_2)))
   (StartBool_6 Bool (false (str.contains Start_13 Start_9) (= StartInt_6 StartInt_3)))
   (Start_3 String ("b" "1" (str.from_int StartInt_6)))
   (Start_2 String ("" "0" "b" (str.at Start_3 StartInt) (str.from_int StartInt) (ite StartBool Start_3 Start_4)))
   (Start_5 String ("b" (str.++ Start_3 Start_4) (str.at Start_7 StartInt_2) (str.substr Start_2 StartInt_1 StartInt_3)))
   (Start_7 String (x (str.at Start_2 StartInt) (str.replace Start_8 Start Start_4) (str.from_int StartInt_3)))
   (Start_12 String ("0" y (str.++ Start_7 Start_10) (str.substr Start_2 StartInt_3 StartInt_6) (str.replace Start_4 Start_11 Start_4) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 (str.len Start_10)))
   (StartInt_7 Int (1 0))
   (StartInt_2 Int (0 (str.len Start_6) (str.indexof Start_5 Start_6 StartInt_1) (str.to_int Start_6)))
   (Start_10 String ("a" (str.at Start_3 StartInt_2) (str.from_int StartInt_3)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_4 StartBool_5) (str.<= Start_2 Start_6) (str.suffixof Start_11 Start_10) (<= StartInt_5 StartInt_3)))
   (Start_9 String (x (str.at Start_4 StartInt_1) (ite StartBool_2 Start_2 Start_7)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.indexof Start_1 Start_13 StartInt)))
   (StartInt_5 Int (1 (str.to_int Start_4)))
   (Start_13 String ("0" "a" y (str.replace Start_11 Start_5 Start_1) (str.from_int StartInt_1) (ite StartBool_4 Start_6 Start_9)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.suffixof Start_5 Start_1) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_2)))
   (StartInt_6 Int (0 1 (str.len Start_1) (str.indexof Start_5 Start_1 StartInt_7)))
   (Start_4 String ("0" "a" (str.at Start_4 StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_4)))
   (StartBool_5 Bool (true false (not StartBool_3) (str.< Start_13 Start_13) (str.prefixof Start_3 Start_8) (= StartInt_4 StartInt) (<= StartInt_3 StartInt_8)))
   (StartInt_8 Int (1 (str.indexof Start_11 Start_5 StartInt_7) (str.to_int Start_1)))
   (Start_1 String (y "1" "0" "b" x (str.++ Start_8 Start) (str.at Start_12 StartInt_2) (str.substr Start_1 StartInt_3 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "1" "" "b") y "0")))

(check-synth)
