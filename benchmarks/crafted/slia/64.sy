(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (Start_6 String) (Start_7 String) (StartBool_3 Bool) (StartInt_4 Int) (Start_5 String) (Start_3 String) (Start_10 String) (Start_12 String) (Start_2 String) (Start_8 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_9 String) (Start_1 String) (Start_11 String) (StartInt_1 Int) (StartInt_2 Int) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_5 Int))
  ((Start String ("a" (str.at Start StartInt_1) (str.replace Start Start_1 Start_1)))
   (StartInt Int (1 (str.len Start) (str.indexof Start_10 Start_9 StartInt_5) (str.to_int Start)))
   (StartBool Bool (true false (str.prefixof Start_2 Start_12) (str.suffixof Start_8 Start_7) (= StartInt_1 StartInt_3) (<= StartInt_2 StartInt_2)))
   (Start_4 String ("b" (str.replace Start_10 Start Start_11)))
   (Start_6 String ("1" (str.++ Start_4 Start_5) (str.substr Start_3 StartInt_1 StartInt_6)))
   (Start_7 String (x (str.++ Start_8 Start_5) (str.from_int StartInt)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool) (str.prefixof Start_4 Start_5) (str.contains Start_9 Start_12) (= Start_8 Start_7)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.to_int Start_8)))
   (Start_5 String ("a" "" y "b" (str.substr Start_8 StartInt_3 StartInt_5) (str.from_int StartInt_4)))
   (Start_3 String ("0" (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start_1 Start_4) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_2)))
   (Start_10 String ("b" "" "0" "1" (str.++ Start_1 Start_5) (str.at Start_5 StartInt_2)))
   (Start_12 String ("1" (str.at Start_2 StartInt_3) (str.substr Start_1 StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (Start_2 String ("b" "1"))
   (Start_8 String ("a" (str.++ Start_9 Start_10) (str.replace Start_8 Start_3 Start_5) (ite StartBool_2 Start_7 Start_2)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_3 StartBool_2) (str.prefixof Start_7 Start_2) (str.contains Start_7 Start_10) (= StartInt_3 StartInt_1)))
   (StartInt_6 Int (1 0 (str.len Start_6) (str.to_int Start_6)))
   (Start_9 String ("1" "a" "0" (str.++ Start_2 Start_12)))
   (Start_1 String (y (str.++ Start_2 Start) (str.at Start StartInt) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1)))
   (Start_11 String ("a" (str.substr Start_1 StartInt_4 StartInt_5) (ite StartBool_1 Start_10 Start)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_3 StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_1)))
   (StartInt_3 Int (1 (str.indexof Start_11 Start_12 StartInt_1) (str.to_int Start_12)))
   (StartBool_1 Bool (false (str.< Start_5 Start_4) (str.<= Start_5 Start_6) (str.prefixof Start_7 Start_3) (str.suffixof Start_6 Start_8) (str.contains Start_2 Start_3) (<= StartInt StartInt_2)))
   (StartInt_5 Int (1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" x y)))

(check-synth)
