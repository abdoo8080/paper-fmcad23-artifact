(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_3 Int) (Start_10 String) (Start_7 String) (Start_4 String) (Start_8 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_3 String) (StartBool_3 Bool) (StartInt_2 Int) (Start_5 String) (Start_6 String) (StartInt_5 Int) (StartInt_8 Int) (Start_9 String) (Start_14 String) (StartInt_9 Int) (StartInt_6 Int) (StartInt_1 Int) (Start_11 String) (Start_1 String) (StartInt_7 Int) (Start_13 String) (Start_12 String) (Start_2 String) (StartInt_10 Int))
  ((Start String ("1" "a" "0" (str.at Start_1 StartInt_1) (str.replace Start_2 Start_1 Start_1)))
   (StartInt Int (0 (str.len Start) (str.indexof Start_6 Start_4 StartInt_4) (str.to_int Start_12)))
   (StartBool Bool (false (not StartBool_2) (str.< Start_14 Start_5) (str.prefixof Start Start_12) (str.suffixof Start_10 Start_4) (str.contains Start_14 Start_10) (= Start Start_13) (= StartInt_7 StartInt)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_1 StartBool_2) (= StartInt_4 StartInt) (<= StartInt_1 StartInt)))
   (StartInt_3 Int (0 (str.to_int Start)))
   (Start_10 String (y "0" (str.++ Start_8 Start_10) (str.at Start_10 StartInt) (str.substr Start_11 StartInt_1 StartInt_7) (str.replace Start_5 Start_9 Start_11)))
   (Start_7 String (x (str.++ Start_4 Start_1) (str.at Start_2 StartInt_2) (str.from_int StartInt_1)))
   (Start_4 String ("" (str.from_int StartInt_2)))
   (Start_8 String ("" (str.substr Start_1 StartInt_5 StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.indexof Start_3 Start_6 StartInt_2) (str.to_int Start_7)))
   (StartBool_1 Bool (false (str.< Start_4 Start_2) (= Start_4 Start_5) (<= StartInt_4 StartInt_2)))
   (Start_3 String ("1" (str.++ Start_2 Start_5) (str.at Start_2 StartInt_2) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_2 Start Start_4) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start)))
   (StartBool_3 Bool (false true (str.<= Start_3 Start_1) (str.prefixof Start_11 Start_5) (str.contains Start_5 Start_14) (= StartInt_5 StartInt_10) (<= StartInt StartInt_3)))
   (StartInt_2 Int (1 0 (str.len Start_1)))
   (Start_5 String ("0" y "1" (str.++ Start Start_8) (str.from_int StartInt_3) (ite StartBool_2 Start_3 Start_6)))
   (Start_6 String ("" (str.at Start_5 StartInt_4) (str.from_int StartInt_4) (ite StartBool Start_6 Start_6)))
   (StartInt_5 Int (0 1 (str.len Start_4) (str.indexof Start Start_9 StartInt_6)))
   (StartInt_8 Int (1 0 (str.len Start_3) (str.to_int Start_6)))
   (Start_9 String (y (str.++ Start_4 Start_7) (str.substr Start StartInt_3 StartInt_6)))
   (Start_14 String ("1" (str.at Start StartInt) (str.substr Start_6 StartInt_2 StartInt_1) (str.from_int StartInt_6) (ite StartBool_3 Start_4 Start_2)))
   (StartInt_9 Int (1 (str.len Start_10) (str.indexof Start_3 Start_3 StartInt_3) (str.to_int Start_14)))
   (StartInt_6 Int (0 1 (str.indexof Start_4 Start_5 StartInt) (str.to_int Start_9)))
   (StartInt_1 Int (1 (str.len Start_10) (str.indexof Start_10 Start_2 StartInt) (str.to_int Start_6)))
   (Start_11 String (x (str.++ Start_5 Start_8) (str.from_int StartInt)))
   (Start_1 String ("1" (str.++ Start_10 Start_5) (str.substr Start_3 StartInt_5 StartInt_6) (str.replace Start Start_8 Start_9) (str.from_int StartInt_2)))
   (StartInt_7 Int (0 (str.indexof Start_11 Start_11 StartInt_1) (str.to_int Start_6)))
   (Start_13 String (y "" "b" "1" x "0" "a" (str.substr Start_3 StartInt_8 StartInt_9) (str.replace Start_4 Start_4 Start_7)))
   (Start_12 String ("b" (str.++ Start_3 Start_2) (str.at Start_1 StartInt_3) (str.substr Start_7 StartInt_7 StartInt_6) (ite StartBool Start_12 Start_13)))
   (Start_2 String ("b" "" "a" (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start_1 Start Start_2) (str.from_int StartInt_1) (ite StartBool Start_2 Start_4)))
   (StartInt_10 Int (1 0 (str.len Start_5) (str.indexof Start_11 Start_10 StartInt) (str.to_int Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "0" "" "0") (str.++ "0" "a"))))

(check-synth)
