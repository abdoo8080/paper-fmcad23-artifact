(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_9 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_7 String) (Start_8 String) (StartInt_2 Int) (StartInt_1 Int) (Start_1 String) (Start_11 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_4 String) (StartInt_3 Int) (StartInt_5 Int) (Start_2 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_5 String) (StartBool_5 Bool) (StartInt_7 Int) (Start_10 String) (Start_6 String) (Start_3 String))
  ((Start String ("a" (str.at Start StartInt) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.indexof Start_5 Start_2 StartInt_3) (str.to_int Start_7)))
   (StartBool Bool (false (not StartBool_3) (and StartBool_4 StartBool_5) (str.< Start_6 Start_4) (str.<= Start_7 Start_2) (str.suffixof Start_6 Start_8) (str.contains Start_9 Start_8) (= Start_4 Start_9) (<= StartInt_1 StartInt_5)))
   (Start_12 String (y (str.substr Start_5 StartInt_7 StartInt_6) (str.from_int StartInt_2)))
   (Start_9 String ("b" "1" (str.++ Start_4 Start_3) (str.at Start_9 StartInt_5) (str.substr Start_10 StartInt_1 StartInt_5) (str.from_int StartInt_1) (ite StartBool_1 Start_7 Start_4)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool) (str.< Start_2 Start_1) (str.prefixof Start_6 Start_3) (= Start_6 Start_2) (<= StartInt_5 StartInt_1)))
   (StartBool_4 Bool (false (not StartBool) (and StartBool StartBool) (str.prefixof Start Start_11) (str.suffixof Start_10 Start) (= Start_12 Start_4) (= StartInt_5 StartInt_5)))
   (Start_7 String ("a" "1" "b" (str.++ Start_6 Start_6) (str.from_int StartInt_2) (ite StartBool_3 Start Start_3)))
   (Start_8 String ("" "b" "0" "1" y "a" (str.++ Start_3 Start_6)))
   (StartInt_2 Int (0 1 (str.len Start_5) (str.indexof Start_2 Start_5 StartInt_2) (str.to_int Start_4)))
   (StartInt_1 Int (0 (str.indexof Start Start StartInt_1)))
   (Start_1 String ("a" (str.++ Start_1 Start) (str.at Start_1 StartInt) (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_2 Start_1)))
   (Start_11 String (""))
   (StartBool_1 Bool (false true (str.< Start_2 Start_2) (str.<= Start_2 Start_2) (= Start Start_4)))
   (StartInt_4 Int (1 0 (str.len Start_1) (str.to_int Start_4)))
   (Start_4 String ("1" x "" (str.at Start_3 StartInt_4) (str.replace Start Start_3 Start_1) (ite StartBool_2 Start_4 Start_1)))
   (StartInt_3 Int (0 (str.indexof Start_4 Start_5 StartInt_3)))
   (StartInt_5 Int (1 0 (str.len Start_6)))
   (Start_2 String ("0" (str.at Start_3 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start Start Start) (str.from_int StartInt_4) (ite StartBool_1 Start Start_1)))
   (StartBool_2 Bool (false (str.contains Start Start) (= Start_1 Start_1) (= StartInt StartInt_5) (<= StartInt_1 StartInt_6)))
   (StartInt_6 Int (0 (str.indexof Start_3 Start_1 StartInt_5) (str.to_int Start_5)))
   (Start_5 String ("b" (str.++ Start Start_1) (str.replace Start_1 Start_2 Start_1) (ite StartBool_1 Start_2 Start_6)))
   (StartBool_5 Bool (false (and StartBool_3 StartBool) (str.< Start_5 Start_4) (str.<= Start_10 Start_11) (str.prefixof Start_8 Start_11) (str.contains Start_1 Start_6) (= Start_2 Start_10) (<= StartInt_1 StartInt_5)))
   (StartInt_7 Int (1 (str.len Start_5) (str.to_int Start_8)))
   (Start_10 String ("" (str.at Start_7 StartInt_5) (str.substr Start_5 StartInt_1 StartInt_7) (str.from_int StartInt_4)))
   (Start_6 String ("1" "0" (str.from_int StartInt)))
   (Start_3 String ("0" (str.at Start_4 StartInt) (str.replace Start_3 Start_5 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace x (str.++ "1" "1") "") x "0")))

(check-synth)
