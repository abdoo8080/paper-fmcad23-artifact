(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (StartBool_4 Bool) (Start_12 String) (Start_8 String) (Start_11 String) (StartBool_3 Bool) (Start_9 String) (Start_7 String) (Start_5 String) (StartBool_5 Bool) (StartBool_2 Bool) (StartInt_7 Int) (StartInt_1 Int) (Start_10 String) (Start_3 String) (StartInt_5 Int) (Start_1 String) (Start_16 String) (StartInt_4 Int) (StartInt_9 Int) (Start_6 String) (Start_4 String) (Start_13 String) (Start_2 String) (StartInt_2 Int) (StartInt_6 Int) (StartInt_8 Int) (StartBool_1 Bool) (Start_14 String) (Start_15 String))
  ((Start String ("0" (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 (str.to_int Start_16)))
   (StartBool Bool (true (not StartBool_4) (str.< Start_1 Start) (str.prefixof Start_16 Start_3) (= StartInt_7 StartInt_1)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start_1 Start_5 StartInt_2) (str.to_int Start_2)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_2 StartBool_3) (str.suffixof Start_3 Start_1) (= Start_16 Start_5) (= StartInt_5 StartInt_4) (<= StartInt_4 StartInt_9)))
   (Start_12 String ("1" y (str.++ Start_4 Start_5) (str.at Start_6 StartInt) (str.substr Start_6 StartInt_3 StartInt) (str.replace Start Start_10 Start_5) (str.from_int StartInt_4)))
   (Start_8 String (y "0" x (str.at Start_12 StartInt_1) (str.substr Start_7 StartInt_5 StartInt_2) (str.replace Start_10 Start Start_8) (str.from_int StartInt_3) (ite StartBool_2 Start_12 Start_10)))
   (Start_11 String ("a" "1" x y "b" "0" "" (str.at Start_11 StartInt_5) (str.substr Start_5 StartInt_2 StartInt_3) (str.from_int StartInt)))
   (StartBool_3 Bool (true (not StartBool) (str.prefixof Start Start_2) (= Start_9 Start_11)))
   (Start_9 String ("0" "" (str.++ Start_3 Start_10) (str.substr Start_4 StartInt_1 StartInt_5) (str.from_int StartInt_3)))
   (Start_7 String ("1" (str.substr Start_2 StartInt_4 StartInt_5) (str.replace Start_8 Start_9 Start_8)))
   (Start_5 String ("0" "b" (str.++ Start_5 Start_5) (str.at Start_4 StartInt_3) (ite StartBool_2 Start_5 Start_3)))
   (StartBool_5 Bool (true (str.< Start_1 Start_11) (str.prefixof Start_3 Start_11)))
   (StartBool_2 Bool (false (not StartBool_2) (str.prefixof Start_5 Start_6) (= Start_2 Start_7) (<= StartInt_2 StartInt_3)))
   (StartInt_7 Int (1 0 (str.len Start_3) (str.indexof Start_5 Start_6 StartInt_2)))
   (StartInt_1 Int (0 (str.indexof Start_14 Start_6 StartInt_5)))
   (Start_10 String (x (str.++ Start_11 Start_2) (str.substr Start_11 StartInt_4 StartInt_2) (str.from_int StartInt_5) (ite StartBool_2 Start_7 Start_6)))
   (Start_3 String ("1" (str.at Start_2 StartInt_2) (str.replace Start_2 Start_4 Start_2) (ite StartBool_2 Start_5 Start_4)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_10 Start_1 StartInt_4)))
   (Start_1 String (y (str.++ Start_2 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_3)))
   (Start_16 String (x (str.at Start_8 StartInt_9) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 (str.indexof Start_9 Start_9 StartInt_5)))
   (StartInt_9 Int (1 (str.to_int Start_1)))
   (Start_6 String ("1" "b" (str.substr Start_3 StartInt_2 StartInt_3) (ite StartBool_2 Start_3 Start_8)))
   (Start_4 String ("1" x "b" (str.at Start_7 StartInt_1) (str.substr Start_4 StartInt_4 StartInt)))
   (Start_13 String ("" (str.++ Start_1 Start_9) (str.at Start_3 StartInt) (str.substr Start_9 StartInt_5 StartInt_4) (str.replace Start_3 Start Start_12) (ite StartBool_1 Start_5 Start_5)))
   (Start_2 String ("" (str.substr Start_5 StartInt_2 StartInt_6) (str.replace Start_10 Start_11 Start_5) (str.from_int StartInt_5) (ite StartBool_3 Start_3 Start_13)))
   (StartInt_2 Int (1 (str.len Start_8) (str.indexof Start_9 Start_4 StartInt_2)))
   (StartInt_6 Int (1 (str.to_int Start_10)))
   (StartInt_8 Int (1 0 (str.indexof Start_3 Start_5 StartInt_2) (str.to_int Start_7)))
   (StartBool_1 Bool (false true (not StartBool_3) (and StartBool_1 StartBool_1) (str.< Start_5 Start_11) (str.prefixof Start_1 Start_6) (str.suffixof Start_9 Start_12) (= StartInt_4 StartInt_7)))
   (Start_14 String ("b" (str.++ Start_4 Start_14) (str.at Start_11 StartInt_3) (str.substr Start_15 StartInt_6 StartInt_1) (str.replace Start_7 Start_6 Start_8)))
   (Start_15 String ("b" "a" (str.substr Start_7 StartInt_1 StartInt_8) (ite StartBool_3 Start_10 Start_16)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.indexof y "a" 0))))

(check-synth)
