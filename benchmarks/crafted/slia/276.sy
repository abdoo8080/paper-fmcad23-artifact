(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_4 String) (Start_2 String) (Start_5 String) (Start_3 String) (Start_1 String) (StartInt_4 Int) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_5 Int) (Start_7 String) (StartInt_3 Int) (StartInt_1 Int) (Start_6 String) (StartBool_2 Bool))
  ((Start String (x "0" "" (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt)))
   (StartInt Int (1 (str.indexof Start_6 Start StartInt_5) (str.to_int Start_5)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_1 StartBool_2) (str.< Start Start_2) (str.suffixof Start_7 Start_8) (str.contains Start_4 Start_3) (= Start_5 Start_6) (= StartInt StartInt_3)))
   (Start_8 String ("" "a" "b" "1" (str.++ Start_7 Start_3) (str.replace Start Start Start_4) (str.from_int StartInt_4)))
   (Start_4 String ("1" (str.at Start_3 StartInt) (str.substr Start_1 StartInt_4 StartInt_5) (ite StartBool_2 Start_3 Start_8)))
   (Start_2 String (y "b" x (str.++ Start_3 Start_1) (str.substr Start StartInt_3 StartInt_2) (str.replace Start_3 Start_3 Start_3) (str.from_int StartInt_3) (ite StartBool_1 Start Start_2)))
   (Start_5 String ("" (str.at Start_6 StartInt_4) (ite StartBool_1 Start_5 Start_4)))
   (Start_3 String ("a" x (str.++ Start Start_2) (str.at Start_3 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_2)))
   (Start_1 String (x (str.++ Start Start_2) (str.at Start_4 StartInt_4) (str.substr Start StartInt_4 StartInt_4) (str.replace Start_4 Start_2 Start_3) (str.from_int StartInt_4)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.indexof Start_2 Start_2 StartInt_3) (str.to_int Start_5)))
   (StartInt_2 Int (1 (str.to_int Start_2)))
   (StartBool_1 Bool (false (str.<= Start_2 Start_1) (= Start_2 Start)))
   (StartInt_5 Int (1 0 (str.to_int Start_1)))
   (Start_7 String (""))
   (StartInt_3 Int (1 0))
   (StartInt_1 Int (0 (str.indexof Start_2 Start_3 StartInt) (str.to_int Start_2)))
   (Start_6 String ("" y "0" "b" "a" "1" (str.substr Start_4 StartInt StartInt_3) (str.from_int StartInt_2) (ite StartBool_2 Start_6 Start_6)))
   (StartBool_2 Bool (true (not StartBool_2) (str.<= Start_5 Start_1) (str.prefixof Start_7 Start_4) (= Start_1 Start_7) (<= StartInt StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof "" y 0))))

(check-synth)
