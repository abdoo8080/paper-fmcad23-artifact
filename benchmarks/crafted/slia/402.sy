(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_1 Int) (Start_7 String) (Start_16 String) (Start_9 String) (StartInt_2 Int) (StartBool_3 Bool) (Start_6 String) (Start_12 String) (StartBool_2 Bool) (Start_3 String) (Start_2 String) (StartBool_4 Bool) (Start_13 String) (Start_10 String) (StartBool_1 Bool) (Start_11 String) (Start_8 String) (StartBool_5 Bool) (StartInt_4 Int) (Start_5 String) (Start_4 String) (StartInt_3 Int) (StartInt_5 Int) (Start_1 String) (Start_15 String) (StartInt_6 Int))
  ((Start String ("a" (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_2 Start_1 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_6 Start_8 StartInt_1) (str.to_int Start_5)))
   (StartBool Bool (false true (not StartBool_4) (and StartBool StartBool) (str.< Start_14 Start_10) (str.<= Start_14 Start_15) (str.prefixof Start_8 Start_8) (= Start Start_16) (= StartInt_4 StartInt_1)))
   (Start_14 String ("b" x (str.substr Start_10 StartInt_1 StartInt_2) (str.replace Start_2 Start_5 Start_9) (str.from_int StartInt_2) (ite StartBool_4 Start_10 Start_2)))
   (StartInt_1 Int (1 0))
   (Start_7 String (x (str.replace Start_8 Start_2 Start_9) (str.from_int StartInt_4) (ite StartBool_2 Start_4 Start_6)))
   (Start_16 String ("b" "1" (str.at Start_6 StartInt) (str.replace Start_8 Start_11 Start_14) (str.from_int StartInt_5) (ite StartBool_3 Start_8 Start_4)))
   (Start_9 String ("a" (str.++ Start_10 Start_6) (str.at Start_11 StartInt_2) (str.substr Start_7 StartInt_2 StartInt_3) (ite StartBool_3 Start Start_6)))
   (StartInt_2 Int (0 1))
   (StartBool_3 Bool (false (and StartBool_1 StartBool) (str.<= Start_3 Start_7) (str.suffixof Start_6 Start_4)))
   (Start_6 String ("0" "" x (str.at Start_2 StartInt_4) (str.replace Start_4 Start_6 Start_4) (ite StartBool_1 Start_7 Start_1)))
   (Start_12 String ("b" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_3 StartInt_1) (str.replace Start Start_1 Start_10)))
   (StartBool_2 Bool (true false (and StartBool_2 StartBool) (str.<= Start_4 Start_4) (str.suffixof Start_7 Start_4) (= Start_1 Start_9) (= StartInt_4 StartInt_2)))
   (Start_3 String (y (str.++ Start_2 Start_3) (str.substr Start_3 StartInt_1 StartInt) (str.replace Start Start_1 Start) (ite StartBool Start_3 Start_3)))
   (Start_2 String ("" (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_3 Start_2 Start_2)))
   (StartBool_4 Bool (false (str.prefixof Start_5 Start_7) (str.suffixof Start Start_4) (= Start_11 Start_12) (= StartInt_4 StartInt_3)))
   (Start_13 String ("1" (str.++ Start_9 Start_6) (str.from_int StartInt_4) (ite StartBool_2 Start_3 Start)))
   (Start_10 String (y (str.substr Start_13 StartInt_2 StartInt_4) (str.from_int StartInt) (ite StartBool_3 Start_13 Start_9)))
   (StartBool_1 Bool (true false (str.<= Start_4 Start_3) (str.contains Start_1 Start_5) (= Start_6 Start_3) (= StartInt StartInt)))
   (Start_11 String (x "1" "b" (str.substr Start_12 StartInt_3 StartInt_4) (str.replace Start_4 Start_7 Start_4) (str.from_int StartInt_1) (ite StartBool_4 Start_1 Start_4)))
   (Start_8 String (y "0" (str.replace Start_12 Start Start_4) (str.from_int StartInt) (ite StartBool_5 Start_1 Start_1)))
   (StartBool_5 Bool (false (= StartInt_4 StartInt_4)))
   (StartInt_4 Int (0 (str.len Start_6) (str.to_int Start_12)))
   (Start_5 String ("0" "" (str.from_int StartInt_1) (ite StartBool_4 Start_5 Start_2)))
   (Start_4 String ("a" (str.++ Start_7 Start_9) (str.at Start_11 StartInt_4) (str.substr Start_12 StartInt_1 StartInt_3) (ite StartBool_5 Start_1 Start_5)))
   (StartInt_3 Int (0 1 (str.to_int Start_9)))
   (StartInt_5 Int (1 (str.len Start_10)))
   (Start_1 String (y (str.at Start_2 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_2)))
   (Start_15 String ("b" y "0" (str.++ Start_12 Start_3) (str.substr Start_11 StartInt_2 StartInt_6)))
   (StartInt_6 Int (0 (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.at x 1) "1")))

(check-synth)
