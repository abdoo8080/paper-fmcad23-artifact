(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartBool_1 Bool) (Start_3 String) (Start_8 String) (StartInt_1 Int) (Start_1 String) (StartInt_5 Int) (Start_2 String) (StartInt_3 Int) (StartInt_4 Int) (StartInt_2 Int) (Start_7 String) (Start_6 String) (Start_4 String) (Start_5 String))
  ((Start String (y (str.substr Start_1 StartInt StartInt_1)))
   (StartInt Int (0 (str.len Start_1) (str.to_int Start)))
   (StartBool Bool (true (str.prefixof Start_1 Start_2) (str.contains Start Start_1) (= StartInt_2 StartInt_3) (<= StartInt_3 StartInt)))
   (StartInt_6 Int (0 1 (str.len Start_8) (str.indexof Start Start_6 StartInt_6)))
   (StartBool_1 Bool (false true (str.< Start_7 Start_7) (str.<= Start_8 Start_5) (= Start_6 Start_8) (= StartInt_1 StartInt_6) (<= StartInt_1 StartInt_3)))
   (Start_3 String (y (str.substr Start_5 StartInt_5 StartInt_4) (str.replace Start_5 Start_5 Start_3) (ite StartBool Start_7 Start)))
   (Start_8 String (x "1" y "a" (str.++ Start_8 Start_4) (str.substr Start_8 StartInt StartInt_6) (str.replace Start_7 Start_6 Start_8) (str.from_int StartInt_5)))
   (StartInt_1 Int (1 0 (str.to_int Start)))
   (Start_1 String ("a" (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start Start_2 Start_2) (str.from_int StartInt)))
   (StartInt_5 Int (0 1 (str.len Start_5) (str.to_int Start_2)))
   (Start_2 String ("a" "" "0" x (str.at Start StartInt) (str.replace Start_1 Start_1 Start_1) (ite StartBool Start_1 Start)))
   (StartInt_3 Int (1))
   (StartInt_4 Int (1 (str.len Start_4) (str.indexof Start_5 Start_2 StartInt_4) (str.to_int Start_1)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_3 Start_4 StartInt_1)))
   (Start_7 String ("0" (str.++ Start_7 Start_2) (str.at Start_6 StartInt) (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start_6 Start Start_2) (ite StartBool_1 Start_6 Start_6)))
   (Start_6 String ("0" (str.++ Start_4 Start_2)))
   (Start_4 String (y (str.at Start_1 StartInt_4)))
   (Start_5 String (y (str.++ Start_2 Start_6) (str.at Start StartInt_4) (str.replace Start_5 Start_5 Start_1) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y y) (str.len (str.replace x "0" x)))))

(check-synth)
