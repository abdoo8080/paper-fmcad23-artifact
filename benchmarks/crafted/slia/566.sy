(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_12 Int) (StartInt_11 Int) (Start_20 String) (StartInt_10 Int) (Start_16 String) (Start_19 String) (StartInt_9 Int) (Start_5 String) (Start_13 String) (Start_7 String) (StartInt_4 Int) (Start_3 String) (Start_4 String) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_7 Int) (StartBool_2 Bool) (Start_1 String) (Start_14 String) (StartInt_1 Int) (Start_6 String) (Start_2 String) (Start_8 String) (StartInt_6 Int) (Start_12 String) (StartInt_2 Int) (Start_9 String) (Start_17 String) (Start_10 String) (StartBool_3 Bool) (Start_11 String) (StartInt_8 Int) (Start_15 String) (Start_18 String))
  ((Start String ("1" x "0" "b" (str.at Start_1 StartInt) (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartInt Int (1 (str.len Start_9) (str.indexof Start_7 Start StartInt_6) (str.to_int Start)))
   (StartBool Bool (false (not StartBool_3) (str.prefixof Start_3 Start_6) (str.contains Start_6 Start_7)))
   (StartInt_12 Int (0 1 (str.len Start_18) (str.to_int Start_19)))
   (StartInt_11 Int (0 1))
   (Start_20 String ("1" "b" (str.substr Start_17 StartInt_11 StartInt_11) (str.replace Start_20 Start_16 Start_11) (str.from_int StartInt_10) (ite StartBool Start_14 Start_11)))
   (StartInt_10 Int (0 (str.len Start_3) (str.indexof Start_17 Start_20 StartInt_3) (str.to_int Start_2)))
   (Start_16 String ("" (str.substr Start_17 StartInt_9 StartInt_1) (str.replace Start_7 Start_18 Start_10) (str.from_int StartInt_10)))
   (Start_19 String ("a" (str.substr Start_5 StartInt_5 StartInt_7)))
   (StartInt_9 Int (0 (str.indexof Start_19 Start_15 StartInt_9)))
   (Start_5 String ("1" (str.at Start StartInt_5) (str.substr Start_2 StartInt StartInt_6) (str.from_int StartInt_7) (ite StartBool Start_3 Start_5)))
   (Start_13 String (y (str.at Start_11 StartInt_10) (str.substr Start_12 StartInt_12 StartInt_5) (str.replace Start_14 Start_15 Start_3) (str.from_int StartInt_7)))
   (Start_7 String ("0" (str.++ Start_3 Start_7) (str.at Start StartInt_2) (str.substr Start_2 StartInt_5 StartInt_4) (ite StartBool_2 Start_4 Start)))
   (StartInt_4 Int (0 (str.len Start)))
   (Start_3 String ("" (str.at Start StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start_2 Start_1)))
   (Start_4 String ("1" "" x (str.at Start_2 StartInt_4) (str.substr Start StartInt_3 StartInt_3) (str.replace Start Start_5 Start_3) (str.from_int StartInt_5)))
   (StartInt_5 Int (0 1 (str.to_int Start_2)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool_2) (str.prefixof Start_1 Start_4) (str.contains Start_2 Start_4) (= StartInt StartInt_1) (<= StartInt_2 StartInt_3)))
   (StartInt_3 Int (0 1 (str.indexof Start Start_3 StartInt_4) (str.to_int Start)))
   (StartInt_7 Int (1 0))
   (StartBool_2 Bool (true (not StartBool_2) (str.< Start_2 Start_1) (str.<= Start Start_4) (= Start_8 Start_3) (<= StartInt_2 StartInt)))
   (Start_1 String (x (str.replace Start_1 Start_1 Start_1) (ite StartBool_1 Start Start_2)))
   (Start_14 String ("" "1" y "b" (str.++ Start_3 Start_14) (str.at Start_15 StartInt_7) (str.substr Start StartInt_7 StartInt) (str.replace Start_5 Start_14 Start_9) (str.from_int StartInt_4) (ite StartBool Start_9 Start_1)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start Start StartInt_2)))
   (Start_6 String ("a" (str.at Start_2 StartInt_6) (str.substr Start_7 StartInt_5 StartInt_1) (str.from_int StartInt_3)))
   (Start_2 String ("a" x (str.++ Start_1 Start_3) (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start_2 Start_3 Start_3)))
   (Start_8 String ("0" (str.substr Start_3 StartInt_3 StartInt_3)))
   (StartInt_6 Int (1 (str.len Start_6) (str.to_int Start_6)))
   (Start_12 String (y "0" (str.substr Start_6 StartInt_8 StartInt_7) (str.replace Start_5 Start_1 Start_12) (str.from_int StartInt_7) (ite StartBool Start_6 Start_6)))
   (StartInt_2 Int (0))
   (Start_9 String ("a" (str.++ Start_3 Start_10) (str.substr Start_6 StartInt_6 StartInt_3) (str.replace Start_1 Start_3 Start_2)))
   (Start_17 String ("a" "1" (str.++ Start_2 Start_5) (str.substr Start_2 StartInt_7 StartInt_1) (str.from_int StartInt_3)))
   (Start_10 String ("a" (str.at Start_8 StartInt_1) (str.substr Start_10 StartInt_4 StartInt) (str.replace Start_10 Start_4 Start_11)))
   (StartBool_3 Bool (false true (not StartBool_2) (str.< Start Start_2) (str.<= Start_13 Start_14) (str.suffixof Start_1 Start) (str.contains Start_10 Start_6) (= Start_11 Start_4) (= StartInt_1 StartInt_1) (<= StartInt_5 StartInt_4)))
   (Start_11 String ("" "a" (str.++ Start_12 Start_10) (str.substr Start_6 StartInt_5 StartInt_1) (str.replace Start_5 Start_5 Start_11) (str.from_int StartInt_8)))
   (StartInt_8 Int (0 (str.len Start_1) (str.indexof Start_3 Start_5 StartInt_1)))
   (Start_15 String ("" "1" (str.substr Start_16 StartInt_9 StartInt_3) (str.replace Start_17 Start_18 Start_16)))
   (Start_18 String ("b" x (str.substr Start_6 StartInt_3 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "a" y) "" "0")))

(check-synth)
