(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_7 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_1 String) (Start_2 String) (Start_3 String) (StartInt_2 Int) (Start_5 String) (StartInt_3 Int) (Start_8 String) (StartInt_1 Int) (Start_6 String) (Start_4 String) (Start_9 String))
  ((Start String ("" (str.at Start StartInt) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_5)))
   (StartBool Bool (true false (not StartBool_1) (str.< Start_9 Start_5) (str.prefixof Start_8 Start_3) (str.suffixof Start_10 Start_6)))
   (Start_10 String ("b" (str.from_int StartInt_4) (ite StartBool Start_7 Start_10)))
   (Start_7 String ("0" (str.++ Start_9 Start_4) (str.replace Start_1 Start_3 Start_2)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.indexof Start_9 Start_8 StartInt_2) (str.to_int Start_6)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_1 StartBool_1) (str.prefixof Start Start_1) (= Start_1 Start_1)))
   (Start_1 String (x "a" (str.++ Start_2 Start_2) (str.replace Start Start Start_1)))
   (Start_2 String (y (str.++ Start_1 Start_2) (str.from_int StartInt) (ite StartBool_1 Start Start_3)))
   (Start_3 String ("1" y (str.++ Start_1 Start_2) (str.replace Start_1 Start_1 Start) (str.from_int StartInt) (ite StartBool Start_1 Start_4)))
   (StartInt_2 Int (0 1 (str.len Start) (str.to_int Start)))
   (Start_5 String (x "0" (str.at Start_1 StartInt_2) (str.substr Start_6 StartInt_2 StartInt) (str.replace Start_3 Start_4 Start_1) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 0 (str.len Start) (str.indexof Start_1 Start_2 StartInt)))
   (Start_8 String ("1" (str.at Start_9 StartInt_2) (str.replace Start_9 Start_8 Start_7)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_3 Start_1 StartInt_1)))
   (Start_6 String ("a" y "1" (str.++ Start_5 Start_7) (str.at Start_4 StartInt_4) (str.replace Start_8 Start_3 Start_7) (str.from_int StartInt_1) (ite StartBool Start_4 Start_9)))
   (Start_4 String ("0" (str.++ Start_2 Start_2) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_2)))
   (Start_9 String (x "a" "b" "1" "0" y "" (str.++ Start_6 Start_4) (str.at Start_9 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y (str.++ x (str.replace "" y "1")))))

(check-synth)
