(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (StartBool_3 Bool) (Start_8 String) (Start_5 String) (StartInt_5 Int) (Start_6 String) (StartInt_2 Int) (Start_2 String) (Start_3 String) (StartInt_3 Int) (StartInt_1 Int) (StartInt_6 Int) (Start_1 String) (StartBool_4 Bool) (Start_4 String) (StartBool_1 Bool) (StartInt_4 Int) (StartBool_2 Bool))
  ((Start String ("0" x (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt_2)))
   (StartInt Int (1 0 (str.len Start_1)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool StartBool_2) (str.prefixof Start_3 Start) (<= StartInt_2 StartInt_4)))
   (Start_7 String (y (str.replace Start_5 Start_6 Start_4) (str.from_int StartInt_4)))
   (StartBool_3 Bool (false (not StartBool_1) (str.< Start_6 Start_2) (str.<= Start_2 Start_6) (str.prefixof Start_4 Start_3) (= Start_5 Start_8)))
   (Start_8 String ("1" (str.++ Start Start_8) (str.replace Start Start_6 Start_2)))
   (Start_5 String ("" "a" (str.substr Start_2 StartInt_6 StartInt_4) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 (str.len Start_5) (str.indexof Start_3 Start_6 StartInt_2) (str.to_int Start_2)))
   (Start_6 String (x "" "a" "b" "0" (str.replace Start_2 Start_1 Start_4) (ite StartBool_2 Start_1 Start_4)))
   (StartInt_2 Int (0 (str.to_int Start_2)))
   (Start_2 String ("b" "1" (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt) (ite StartBool Start Start_1)))
   (Start_3 String ("b" x "0" (str.at Start_3 StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt_3 Int (1 (str.indexof Start Start StartInt_2) (str.to_int Start_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_1 Start_1 StartInt_3) (str.to_int Start_3)))
   (StartInt_6 Int (1))
   (Start_1 String ("0" "a" (str.substr Start_3 StartInt_3 StartInt_3)))
   (StartBool_4 Bool (true (str.< Start_7 Start_8) (str.suffixof Start_2 Start_6) (str.contains Start_3 Start_6) (= StartInt_3 StartInt_4)))
   (Start_4 String (x (str.from_int StartInt_1)))
   (StartBool_1 Bool (false (and StartBool_3 StartBool_4) (str.< Start_3 Start_2) (str.prefixof Start_3 Start_5) (= Start_1 Start) (= StartInt_3 StartInt_5) (<= StartInt_1 StartInt_6)))
   (StartInt_4 Int (1 (str.indexof Start_3 Start_4 StartInt_2)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool_2 StartBool_1) (str.suffixof Start Start_4) (str.contains Start Start_3) (= StartInt_4 StartInt_1) (<= StartInt StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x "1")))

(check-synth)
