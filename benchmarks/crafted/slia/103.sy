(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartBool_4 Bool) (StartInt_5 Int) (Start_9 String) (Start_10 String) (Start_8 String) (StartInt_7 Int) (Start_6 String) (Start_5 String) (Start_4 String) (StartInt_8 Int) (Start_1 String) (StartInt_3 Int) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_9 Int) (Start_7 String) (Start_3 String) (StartBool_3 Bool) (StartBool_2 Bool) (Start_12 String) (StartInt_11 Int) (Start_13 String) (Start_11 String) (StartInt_6 Int) (StartInt_1 Int) (Start_2 String) (StartInt_10 Int))
  ((Start String ("" "0" (str.substr Start StartInt_1 StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt_2) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 (str.to_int Start_6)))
   (StartBool Bool (true (not StartBool) (and StartBool_3 StartBool_1) (str.prefixof Start_10 Start_13) (str.suffixof Start_6 Start_11) (= StartInt_10 StartInt_5) (<= StartInt_11 StartInt_7)))
   (Start_14 String ("0" "b" (str.++ Start_13 Start_9) (str.substr Start_4 StartInt_1 StartInt_3) (ite StartBool_2 Start_10 Start_9)))
   (StartBool_4 Bool (false (and StartBool_4 StartBool_3) (str.< Start_12 Start_6) (str.<= Start_10 Start_14) (str.prefixof Start_5 Start_10) (str.suffixof Start_5 Start_4) (<= StartInt_11 StartInt_7)))
   (StartInt_5 Int (1 0 (str.indexof Start_3 Start_6 StartInt) (str.to_int Start_8)))
   (Start_9 String ("a" (str.at Start_10 StartInt_1) (str.from_int StartInt) (ite StartBool Start_6 Start_4)))
   (Start_10 String ("" "0" y (str.at Start_8 StartInt_4) (str.substr Start_10 StartInt_4 StartInt) (str.replace Start_8 Start_9 Start_10) (str.from_int StartInt_5)))
   (Start_8 String ("0" (str.at Start_9 StartInt) (str.substr Start_8 StartInt_1 StartInt_2) (str.replace Start_8 Start_10 Start_7) (str.from_int StartInt_1)))
   (StartInt_7 Int (0 (str.len Start_12) (str.to_int Start_13)))
   (Start_6 String ("0" "" "1" y (str.++ Start_7 Start_4) (str.at Start_5 StartInt_3) (str.substr Start_3 StartInt_5 StartInt_4) (str.replace Start_8 Start_8 Start_5) (str.from_int StartInt_4) (ite StartBool Start Start_7)))
   (Start_5 String (y "a" "1" (str.++ Start_5 Start) (str.at Start_4 StartInt_1) (str.replace Start_4 Start_6 Start_2)))
   (Start_4 String (y (str.++ Start_4 Start_5) (str.at Start_2 StartInt_3) (str.replace Start_3 Start_3 Start) (str.from_int StartInt)))
   (StartInt_8 Int (1 (str.len Start_13) (str.indexof Start_5 Start_6 StartInt_5) (str.to_int Start_9)))
   (Start_1 String (x (str.++ Start_1 Start_1) (str.at Start_2 StartInt_2) (str.substr Start_3 StartInt StartInt) (str.replace Start Start_2 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start Start)))
   (StartInt_3 Int (1 (str.indexof Start Start_4 StartInt_2)))
   (StartInt_4 Int (1))
   (StartBool_1 Bool (true (str.<= Start Start) (= StartInt_3 StartInt_4)))
   (StartInt_2 Int (1))
   (StartInt_9 Int (1 0 (str.len Start_4) (str.to_int Start_5)))
   (Start_7 String ("b" y "a" (str.at Start_7 StartInt_3) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_6 Start_2 Start_10) (str.from_int StartInt_6)))
   (Start_3 String ("" (str.++ Start_8 Start_4) (str.substr Start_4 StartInt_5 StartInt_3) (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start_2)))
   (StartBool_3 Bool (false true (and StartBool_4 StartBool_1) (str.<= Start Start_2) (str.contains Start Start) (= Start_11 Start_7) (<= StartInt_5 StartInt_9)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool StartBool) (str.<= Start_5 Start_11) (str.suffixof Start_4 Start_5) (str.contains Start_10 Start_12) (= Start_2 Start_11) (= StartInt StartInt_3) (<= StartInt_1 StartInt_6)))
   (Start_12 String ("" "1" (str.++ Start_12 Start_11) (str.at Start_1 StartInt_6) (str.substr Start_10 StartInt_7 StartInt_2) (str.from_int StartInt_8) (ite StartBool Start_13 Start_1)))
   (StartInt_11 Int (1 0 (str.to_int Start_6)))
   (Start_13 String (y "a" (str.++ Start_12 Start_12) (str.at Start_2 StartInt_3)))
   (Start_11 String (x (str.substr Start_5 StartInt_9 StartInt) (ite StartBool_2 Start_8 Start_12)))
   (StartInt_6 Int (1 (str.len Start_6) (str.indexof Start_3 Start_9 StartInt_3)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.to_int Start_11)))
   (Start_2 String (x "a" "" "0" (str.replace Start_12 Start_10 Start_13) (str.from_int StartInt_7) (ite StartBool Start_7 Start_2)))
   (StartInt_10 Int (1 0 (str.len Start_9) (str.to_int Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" x "")))

(check-synth)
