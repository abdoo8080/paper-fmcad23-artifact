(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartBool_2 Bool) (Start_7 String) (StartBool_1 Bool) (Start_9 String) (StartInt_4 Int) (Start_3 String) (Start_6 String) (Start_5 String) (Start_4 String) (Start_14 String) (Start_1 String) (StartInt_8 Int) (Start_8 String) (StartInt_7 Int) (StartBool_5 Bool) (StartInt_3 Int) (StartInt_1 Int) (StartBool_4 Bool) (StartInt_2 Int) (Start_10 String) (StartInt_6 Int) (StartInt_5 Int) (Start_12 String) (Start_11 String) (Start_13 String) (StartBool_3 Bool) (StartInt_9 Int) (Start_15 String))
  ((Start String ("a" (str.at Start_1 StartInt)))
   (StartInt Int (1 0 (str.indexof Start_7 Start_8 StartInt_6)))
   (StartBool Bool (true (and StartBool StartBool_3) (str.<= Start_5 Start) (str.suffixof Start_10 Start_15) (str.contains Start_15 Start_3) (= Start_3 Start_6)))
   (Start_2 String (x "1" (str.++ Start_9 Start_10) (str.substr Start_5 StartInt_7 StartInt_6) (str.replace Start_6 Start_14 Start_1) (str.from_int StartInt_5) (ite StartBool_5 Start Start_3)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_3) (str.< Start_8 Start_3) (str.<= Start_3 Start_7) (str.contains Start_2 Start_5) (= Start_9 Start_9) (= StartInt_5 StartInt_5)))
   (Start_7 String (y (str.++ Start_1 Start_3) (str.substr Start_5 StartInt_2 StartInt_3) (str.replace Start_5 Start_3 Start_6) (str.from_int StartInt_5) (ite StartBool_2 Start_2 Start_7)))
   (StartBool_1 Bool (true (not StartBool_1) (str.<= Start_1 Start_3) (str.prefixof Start_3 Start_4) (str.contains Start_1 Start_7) (= Start_3 Start)))
   (Start_9 String (x y "b" "0" "" "a" "1" (str.substr Start_2 StartInt_2 StartInt_3) (str.from_int StartInt_5) (ite StartBool_4 Start_9 Start_5)))
   (StartInt_4 Int (1))
   (Start_3 String ("b" x (str.at Start_3 StartInt) (ite StartBool_1 Start_6 Start_6)))
   (Start_6 String ("a" x y "" "0" (str.++ Start_3 Start) (str.at Start_2 StartInt_4) (str.replace Start_4 Start_6 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_6)))
   (Start_5 String (x y (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_5 Start_4 Start_4) (str.from_int StartInt_3) (ite StartBool Start_1 Start_5)))
   (Start_4 String ("1" (str.++ Start Start_3) (str.at Start_2 StartInt) (str.from_int StartInt) (ite StartBool Start_2 Start_5)))
   (Start_14 String ("1" "a" "0" (str.replace Start_8 Start Start_5) (ite StartBool_1 Start_11 Start_4)))
   (Start_1 String ("0" (str.++ Start Start) (str.at Start_1 StartInt) (str.replace Start_2 Start_2 Start) (str.from_int StartInt_1) (ite StartBool Start_3 Start_4)))
   (StartInt_8 Int (0 1 (str.len Start_4) (str.indexof Start_7 Start_1 StartInt_1)))
   (Start_8 String ("" (str.++ Start_4 Start_10) (str.at Start_9 StartInt_1) (str.substr Start_5 StartInt_2 StartInt_5) (str.from_int StartInt_6)))
   (StartInt_7 Int (0 (str.len Start_7) (str.indexof Start_14 Start_2 StartInt_9) (str.to_int Start_15)))
   (StartBool_5 Bool (true false (not StartBool_5) (str.< Start_8 Start_12) (str.suffixof Start_7 Start_12) (= Start_7 Start_15)))
   (StartInt_3 Int (0 1))
   (StartInt_1 Int (0 (str.len Start_13)))
   (StartBool_4 Bool (true (not StartBool) (str.prefixof Start_8 Start_4) (str.suffixof Start_2 Start_5) (= StartInt StartInt_1)))
   (StartInt_2 Int (0 (str.len Start) (str.indexof Start_5 Start_2 StartInt_1)))
   (Start_10 String ("1" (str.replace Start_5 Start_11 Start_12) (str.from_int StartInt_1)))
   (StartInt_6 Int (1 (str.len Start) (str.indexof Start_5 Start_10 StartInt_4)))
   (StartInt_5 Int (0 (str.len Start_10) (str.to_int Start)))
   (Start_12 String ("b" (str.++ Start_10 Start_5) (str.from_int StartInt_1) (ite StartBool_4 Start_10 Start_9)))
   (Start_11 String ("b" (str.++ Start_2 Start_4) (str.at Start_11 StartInt) (str.substr Start_12 StartInt_2 StartInt_6) (str.from_int StartInt_6) (ite StartBool_4 Start_13 Start_8)))
   (Start_13 String ("" (str.at Start_11 StartInt_1) (str.substr Start_14 StartInt_6 StartInt_5) (str.from_int StartInt)))
   (StartBool_3 Bool (true (and StartBool StartBool_2) (str.< Start_12 Start_4) (str.prefixof Start Start_11)))
   (StartInt_9 Int (0 1 (str.len Start_1) (str.indexof Start_9 Start_2 StartInt_7)))
   (Start_15 String (x (str.at Start_8 StartInt_8) (str.substr Start_9 StartInt_8 StartInt_5) (str.replace Start_14 Start_2 Start_4) (ite StartBool_4 Start_5 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains x "a") "b" x)))

(check-synth)
