(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (Start_10 String) (StartBool_3 Bool) (StartInt_9 Int) (Start_9 String) (StartBool_1 Bool) (Start_7 String) (StartInt_8 Int) (Start_8 String) (Start_6 String) (Start_2 String) (Start_1 String) (StartInt_1 Int) (StartInt_2 Int) (StartInt_3 Int) (StartInt_4 Int) (StartInt_7 Int) (StartInt_5 Int) (StartBool_2 Bool) (Start_3 String) (StartInt_6 Int) (Start_4 String) (Start_5 String))
  ((Start String (x "" "0" (str.++ Start Start) (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_2)))
   (StartInt Int (1 (str.len Start_5)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_2 StartBool_1) (str.suffixof Start Start_3) (str.contains Start_1 Start_1)))
   (StartInt_10 Int (0 (str.len Start_9) (str.indexof Start_4 Start_9 StartInt_10)))
   (Start_10 String ("0" "1" "b" (str.++ Start_7 Start_7) (str.at Start_3 StartInt_1) (str.substr Start_10 StartInt_7 StartInt_10) (str.replace Start_7 Start_4 Start_7) (str.from_int StartInt_3) (ite StartBool_2 Start_4 Start_2)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool_2) (str.< Start Start_1) (str.<= Start_3 Start_1) (= StartInt_7 StartInt_1)))
   (StartInt_9 Int (0 (str.indexof Start_2 Start_8 StartInt_7) (str.to_int Start_7)))
   (Start_9 String ("1" y (str.at Start_9 StartInt_8) (str.replace Start_7 Start Start_3)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (str.< Start_3 Start_9) (str.<= Start_8 Start_4) (str.suffixof Start Start_6)))
   (Start_7 String ("1" "0" "" "a" x y (str.at Start_6 StartInt_2) (str.substr Start_7 StartInt_1 StartInt_6) (str.replace Start_3 Start_6 Start_8) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start_2)))
   (StartInt_8 Int (0 (str.len Start_7) (str.indexof Start_3 Start_4 StartInt_8) (str.to_int Start)))
   (Start_8 String ("1" x "" (str.at Start_2 StartInt_9) (str.replace Start_4 Start_4 Start_5) (str.from_int StartInt_4)))
   (Start_6 String ("" (str.++ Start_3 Start_1) (str.from_int StartInt_3) (ite StartBool Start_3 Start_5)))
   (Start_2 String ("1" (str.++ Start_1 Start_2)))
   (Start_1 String (y x (str.++ Start_2 Start) (str.from_int StartInt_1)))
   (StartInt_1 Int (1 (str.indexof Start Start_1 StartInt_3)))
   (StartInt_2 Int (1 0 (str.to_int Start_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_1 StartInt_4) (str.to_int Start_1)))
   (StartInt_4 Int (1 0 (str.indexof Start_2 Start_3 StartInt_5)))
   (StartInt_7 Int (0 (str.to_int Start)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_2 Start_1 StartInt_6) (str.to_int Start_3)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_3 StartBool_2) (str.< Start_9 Start_2) (str.<= Start_7 Start) (str.suffixof Start_9 Start_10)))
   (Start_3 String ("0" (str.at Start_5 StartInt_3) (str.substr Start_5 StartInt_8 StartInt_6) (str.replace Start_1 Start_2 Start_5) (str.from_int StartInt_1) (ite StartBool Start_4 Start_6)))
   (StartInt_6 Int (1 (str.len Start_3) (str.indexof Start_4 Start StartInt_5)))
   (Start_4 String ("b" "1" (str.++ Start_5 Start_5) (str.substr Start_5 StartInt_1 StartInt)))
   (Start_5 String ("a" "0" (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y y) 0)))

(check-synth)
