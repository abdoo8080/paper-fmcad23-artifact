(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_12 String) (Start_11 String) (StartInt_8 Int) (Start_9 String) (Start_8 String) (Start_1 String) (Start_10 String) (StartInt_3 Int) (StartInt_4 Int) (Start_13 String) (StartInt_2 Int) (Start_2 String) (Start_3 String) (StartBool_3 Bool) (StartInt_1 Int) (Start_5 String) (StartBool_2 Bool) (Start_6 String) (StartBool_1 Bool) (Start_4 String) (StartInt_5 Int) (StartInt_6 Int) (Start_7 String))
  ((Start String ("0" (str.replace Start Start Start) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0 1 (str.indexof Start_9 Start_6 StartInt_8)))
   (StartBool Bool (false (and StartBool_2 StartBool_3) (str.<= Start_7 Start_11) (str.suffixof Start_2 Start_2)))
   (StartInt_7 Int (1 0))
   (Start_12 String ("a" (str.++ Start Start_9) (str.at Start_8 StartInt_2) (str.substr Start_10 StartInt_6 StartInt_5) (str.replace Start_12 Start_10 Start_1) (str.from_int StartInt_3)))
   (Start_11 String ("a" (str.at Start_10 StartInt_6) (str.substr Start_3 StartInt_8 StartInt_2) (str.replace Start_1 Start_4 Start_12) (str.from_int StartInt_7) (ite StartBool Start_3 Start_2)))
   (StartInt_8 Int (0 1 (str.len Start_11) (str.to_int Start_7)))
   (Start_9 String ("1" "a" (str.++ Start_8 Start_1) (str.at Start_1 StartInt_8) (str.replace Start_7 Start_6 Start_10)))
   (Start_8 String (x "b" (str.at Start_8 StartInt_5) (str.substr Start_6 StartInt_7 StartInt_5) (str.replace Start_7 Start_9 Start_8) (str.from_int StartInt_2) (ite StartBool_3 Start_3 Start_2)))
   (Start_1 String ("0" (str.++ Start_8 Start) (str.replace Start_3 Start_7 Start_2) (ite StartBool Start_1 Start)))
   (Start_10 String ("1" (str.substr Start_9 StartInt_2 StartInt_4) (str.from_int StartInt_2)))
   (StartInt_3 Int (0))
   (StartInt_4 Int (0 1))
   (Start_13 String ("b" "0" "" (str.from_int StartInt_4) (ite StartBool_3 Start_13 Start_12)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.to_int Start_2)))
   (Start_2 String (y (str.from_int StartInt) (ite StartBool_2 Start_2 Start)))
   (Start_3 String ("a" (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start_4 Start_1 Start_5) (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (StartBool_3 Bool (false (not StartBool) (str.< Start_2 Start_2) (str.<= Start_1 Start) (str.prefixof Start_2 Start_3) (str.suffixof Start Start_1) (str.contains Start Start_3) (<= StartInt_1 StartInt_2)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start_4 Start_1 StartInt) (str.to_int Start)))
   (Start_5 String ("b" (str.at Start_5 StartInt_5) (str.replace Start_6 Start_5 Start_4)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_1) (str.< Start Start_2) (str.<= Start_1 Start_2) (str.prefixof Start_1 Start) (str.suffixof Start_2 Start) (= Start_2 Start_1) (<= StartInt StartInt)))
   (Start_6 String ("1" (str.++ Start_6 Start_2) (str.at Start StartInt_4) (str.from_int StartInt_1) (ite StartBool_2 Start_6 Start)))
   (StartBool_1 Bool (true (str.< Start_13 Start_2) (str.prefixof Start_2 Start_5) (= StartInt_1 StartInt_5)))
   (Start_4 String (x "0" (str.substr Start_4 StartInt_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_1 Start_1)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_2 Start_1 StartInt_6) (str.to_int Start_3)))
   (StartInt_6 Int (0 (str.to_int Start_2)))
   (Start_7 String ("" (str.++ Start_2 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.++ "0" (str.at x 0))))))

(check-synth)
