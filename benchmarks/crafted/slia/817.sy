(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (StartInt_9 Int) (Start_16 String) (Start_1 String) (StartInt_7 Int) (Start_15 String) (StartInt_3 Int) (StartInt_2 Int) (Start_9 String) (Start_4 String) (StartInt_8 Int) (Start_7 String) (StartBool_3 Bool) (StartInt_1 Int) (Start_17 String) (StartInt_4 Int) (Start_3 String) (Start_6 String) (StartBool_2 Bool) (Start_5 String) (Start_10 String) (Start_11 String) (Start_13 String) (StartBool_6 Bool) (Start_12 String) (Start_8 String) (Start_2 String) (StartBool_4 Bool) (Start_14 String) (StartInt_6 Int) (StartBool_5 Bool) (StartInt_5 Int) (StartBool_1 Bool))
  ((Start String (x "0" (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start Start_2) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (StartInt Int (0 (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool) (and StartBool_4 StartBool_6) (str.< Start_3 Start_8) (str.<= Start_13 Start_8) (str.prefixof Start_15 Start_11) (str.suffixof Start_5 Start) (str.contains Start_13 Start) (= Start_5 Start_16)))
   (Start_18 String ("0" "a" "" "1" (str.++ Start_13 Start_15) (str.substr Start_9 StartInt StartInt_9) (str.replace Start_6 Start_12 Start_3) (str.from_int StartInt_9)))
   (StartInt_9 Int (0 (str.len Start_4) (str.indexof Start_9 Start_1 StartInt_9)))
   (Start_16 String ("" (str.at Start_14 StartInt_4) (str.replace Start_12 Start_9 Start_17) (ite StartBool_5 Start_2 Start_5)))
   (Start_1 String ("0" (str.++ Start_10 Start_7) (str.replace Start Start_7 Start_8) (str.from_int StartInt_4) (ite StartBool_2 Start_11 Start_14)))
   (StartInt_7 Int (0))
   (Start_15 String (x (str.++ Start_3 Start) (str.at Start_15 StartInt_3) (str.replace Start_3 Start_15 Start_12) (str.from_int StartInt_7) (ite StartBool_2 Start_9 Start_7)))
   (StartInt_3 Int (0 1 (str.indexof Start_8 Start_4 StartInt_3) (str.to_int Start_8)))
   (StartInt_2 Int (0 1 (str.indexof Start_1 Start_1 StartInt_2)))
   (Start_9 String ("0" (str.at Start StartInt_6) (ite StartBool_2 Start_3 Start_1)))
   (Start_4 String ("0" (str.at Start StartInt_1) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt_2)))
   (StartInt_8 Int (0 (str.len Start_7) (str.to_int Start)))
   (Start_7 String ("b" "a" "1" y (str.++ Start_1 Start_1) (str.substr Start_1 StartInt_3 StartInt) (str.replace Start Start_8 Start_2)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.< Start_9 Start_12) (str.<= Start_12 Start_2) (str.suffixof Start_12 Start_2) (= StartInt_7 StartInt_5)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start_4 Start_3 StartInt_1) (str.to_int Start_3)))
   (Start_17 String ("b" "" (str.at Start_7 StartInt_7) (str.from_int StartInt_4) (ite StartBool Start_18 Start_3)))
   (StartInt_4 Int (0 1 (str.indexof Start Start_4 StartInt_5)))
   (Start_3 String ("1" (str.at Start_1 StartInt_1) (ite StartBool_1 Start_5 Start_6)))
   (Start_6 String (x (str.++ Start_7 Start_4) (str.at Start_1 StartInt_2) (str.substr Start_6 StartInt_3 StartInt_1) (ite StartBool Start_1 Start_2)))
   (StartBool_2 Bool (true (not StartBool_3) (str.< Start_9 Start_4) (str.<= Start_8 Start_9) (str.suffixof Start_2 Start) (str.contains Start_10 Start_3) (<= StartInt StartInt_3)))
   (Start_5 String ("b" (str.at Start_5 StartInt_3) (str.replace Start_5 Start_2 Start) (str.from_int StartInt_4)))
   (Start_10 String ("0" "b" (str.at Start_11 StartInt_3) (str.replace Start_4 Start_8 Start_1) (ite StartBool_2 Start_5 Start_5)))
   (Start_11 String ("0" (str.++ Start_9 Start_9) (str.at Start_8 StartInt_5) (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_3)))
   (Start_13 String ("" "0" (str.++ Start Start_12) (str.at Start_4 StartInt_4)))
   (StartBool_6 Bool (true (not StartBool_6) (str.prefixof Start_7 Start_1) (str.contains Start_1 Start_7) (= StartInt_4 StartInt_8)))
   (Start_12 String ("a" (str.substr Start StartInt StartInt_3) (str.from_int StartInt) (ite StartBool_4 Start_7 Start_1)))
   (Start_8 String (x "1" "b" (str.at Start StartInt_1) (str.replace Start_7 Start_1 Start_2) (str.from_int StartInt)))
   (Start_2 String ("a" (str.++ Start_15 Start_10) (ite StartBool_2 Start_11 Start_14)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_1 StartBool_2) (str.<= Start_11 Start_1) (str.suffixof Start_2 Start_13) (str.contains Start_5 Start_14) (= Start_13 Start_13)))
   (Start_14 String ("0" (str.++ Start_7 Start_9) (str.at Start_15 StartInt_7) (str.substr Start_11 StartInt_7 StartInt_6) (str.from_int StartInt_6)))
   (StartInt_6 Int (0 (str.len Start_1)))
   (StartBool_5 Bool (true false (not StartBool_6) (and StartBool_5 StartBool_4) (str.<= Start_4 Start_12) (str.suffixof Start_4 Start_9) (str.contains Start_7 Start_10) (<= StartInt_7 StartInt_6)))
   (StartInt_5 Int (1 0 (str.len Start_5) (str.indexof Start_5 Start_9 StartInt) (str.to_int Start_2)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_5) (str.< Start_13 Start_13) (str.contains Start_6 Start_13) (= StartInt_2 StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof y "b") (str.at "a" (str.indexof "b" x 0)) y)))

(check-synth)
