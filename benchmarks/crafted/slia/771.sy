(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_9 String) (Start_6 String) (Start_8 String) (Start_2 String) (StartBool_1 Bool) (Start_4 String) (Start_1 String) (Start_7 String) (StartInt_2 Int) (Start_5 String) (Start_3 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_4 Int))
  ((Start String (y (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start Start_1)))
   (StartInt Int (1 (str.to_int Start_4)))
   (StartBool Bool (false true (str.< Start_1 Start_5) (str.<= Start_4 Start_9) (str.prefixof Start_7 Start_4) (<= StartInt_5 StartInt)))
   (StartInt_5 Int (1 0 (str.to_int Start_6)))
   (Start_9 String (y x (str.replace Start_2 Start_1 Start_5) (str.from_int StartInt_4) (ite StartBool_1 Start_8 Start_1)))
   (Start_6 String ("0" (str.at Start_2 StartInt_1)))
   (Start_8 String ("b" "a" x (str.at Start_4 StartInt_2) (str.from_int StartInt_4) (ite StartBool Start_6 Start_3)))
   (Start_2 String ("1" "" (str.from_int StartInt) (ite StartBool Start Start_2)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (str.< Start_4 Start) (str.prefixof Start_5 Start_3) (str.suffixof Start Start) (str.contains Start_6 Start_4) (<= StartInt_1 StartInt_1)))
   (Start_4 String ("a" "" "0" (str.++ Start_2 Start_4) (str.at Start_5 StartInt) (str.substr Start_1 StartInt StartInt) (ite StartBool Start_5 Start_6)))
   (Start_1 String ("b" "a" (str.++ Start Start_2) (str.replace Start Start_3 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (Start_7 String ("a" (ite StartBool_1 Start_6 Start_2)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start_5)))
   (Start_5 String ("b" y x (str.substr Start_4 StartInt_2 StartInt) (str.from_int StartInt)))
   (Start_3 String ("" (str.++ Start Start_6) (str.at Start_4 StartInt) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_3 Start_4 Start_3)))
   (StartInt_1 Int (1 (str.len Start_3) (str.indexof Start_6 Start_4 StartInt_2)))
   (StartInt_3 Int (0 (str.len Start_7) (str.indexof Start_6 Start_8 StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof "1" (str.replace "b" x "") 1))))

(check-synth)
