(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (Start_15 String) (Start_14 String) (Start_16 String) (Start_3 String) (StartInt_1 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_3 Int) (Start_13 String) (StartInt_5 Int) (StartInt_4 Int) (StartInt_9 Int) (Start_7 String) (Start_4 String) (Start_6 String) (Start_5 String) (Start_2 String) (Start_11 String) (StartInt_2 Int) (StartBool_4 Bool) (Start_1 String) (Start_8 String) (StartInt_8 Int) (Start_10 String) (Start_12 String) (Start_9 String) (StartInt_6 Int) (StartBool_3 Bool))
  ((Start String (y "1" "a" "0" "" (str.++ Start Start) (ite StartBool Start_1 Start_2)))
   (StartInt Int (1 (str.len Start_6) (str.to_int Start_11)))
   (StartBool Bool (true false (and StartBool_4 StartBool_3) (str.< Start_11 Start_2) (str.<= Start_4 Start_5) (str.prefixof Start_13 Start_9) (str.suffixof Start_7 Start_11) (str.contains Start_13 Start_4)))
   (StartInt_10 Int (0 1 (str.len Start_15)))
   (Start_15 String ("b" (str.++ Start_1 Start_6) (str.substr Start_16 StartInt_4 StartInt_10) (str.replace Start_2 Start_9 Start_3) (ite StartBool Start_15 Start_13)))
   (Start_14 String ("" "a" y (str.++ Start_4 Start_15) (str.replace Start_13 Start_3 Start_16) (str.from_int StartInt_2) (ite StartBool_3 Start_6 Start_12)))
   (Start_16 String (y (str.at Start_4 StartInt_1) (str.replace Start Start_4 Start_10) (str.from_int StartInt_4) (ite StartBool_4 Start_6 Start_12)))
   (Start_3 String (x "" "a" (str.substr Start_4 StartInt_1 StartInt_6) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 0 (str.len Start_6)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool) (str.< Start_1 Start_3) (str.<= Start Start_6) (str.prefixof Start_2 Start) (str.contains Start Start_1) (<= StartInt_2 StartInt_4)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (str.prefixof Start_1 Start_4) (str.suffixof Start_3 Start_1) (str.contains Start_5 Start_4) (= StartInt_1 StartInt_4)))
   (StartInt_7 Int (0 1 (str.len Start) (str.indexof Start_10 Start_6 StartInt_9)))
   (StartInt_3 Int (0 (str.len Start_2)))
   (Start_13 String ("" y (str.++ Start_14 Start_8) (str.substr Start_1 StartInt_8 StartInt_3) (ite StartBool_2 Start_5 Start_11)))
   (StartInt_5 Int (0 (str.indexof Start Start_5 StartInt_4)))
   (StartInt_4 Int (0 (str.len Start_1) (str.indexof Start_1 Start StartInt_5)))
   (StartInt_9 Int (1 (str.len Start_8)))
   (Start_7 String (y (str.at Start_5 StartInt_3) (str.from_int StartInt_1) (ite StartBool Start_12 Start_10)))
   (Start_4 String ("" "b" (str.substr Start_4 StartInt_2 StartInt_1) (str.from_int StartInt_1)))
   (Start_6 String (y (str.++ Start_2 Start_2) (str.replace Start_6 Start_2 Start_5) (str.from_int StartInt) (ite StartBool Start_4 Start_3)))
   (Start_5 String (y "" "1" (str.++ Start Start_4) (str.at Start_5 StartInt_1) (str.substr Start_1 StartInt StartInt_3) (str.replace Start_2 Start Start) (str.from_int StartInt) (ite StartBool_1 Start_5 Start)))
   (Start_2 String (y (str.++ Start Start_3) (str.at Start StartInt_1) (ite StartBool_1 Start_4 Start_3)))
   (Start_11 String ("0" (str.at Start StartInt_6) (str.from_int StartInt_7) (ite StartBool_1 Start_6 Start_8)))
   (StartInt_2 Int (1 (str.indexof Start Start_2 StartInt_3) (str.to_int Start_5)))
   (StartBool_4 Bool (false (str.< Start Start_10) (str.suffixof Start_7 Start_5) (<= StartInt_3 StartInt_8)))
   (Start_1 String (x "a" (str.at Start_7 StartInt_1) (str.substr Start_4 StartInt_7 StartInt_3) (str.replace Start_8 Start_4 Start_5)))
   (Start_8 String ("1" (str.substr Start_8 StartInt_8 StartInt_6) (str.replace Start_6 Start_1 Start_9) (str.from_int StartInt_6) (ite StartBool Start_4 Start_4)))
   (StartInt_8 Int (0 1 (str.to_int Start_8)))
   (Start_10 String (y "" (str.++ Start_7 Start_9) (str.substr Start_11 StartInt_1 StartInt_5) (str.replace Start_8 Start_9 Start)))
   (Start_12 String ("b" (ite StartBool_3 Start_12 Start_5)))
   (Start_9 String ("b" (str.++ Start_8 Start_9) (str.from_int StartInt_8) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_6 Int (0 1 (str.indexof Start_6 Start_4 StartInt_4)))
   (StartBool_3 Bool (true (and StartBool_4 StartBool_2) (str.< Start_2 Start_11) (str.suffixof Start_1 Start_7) (str.contains Start_5 Start_11) (= StartInt_2 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "0" "a")))

(check-synth)
