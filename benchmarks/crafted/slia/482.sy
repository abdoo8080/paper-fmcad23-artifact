(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_6 Int) (StartBool_5 Bool) (Start_11 String) (StartBool_2 Bool) (Start_1 String) (Start_6 String) (StartBool_6 Bool) (Start_10 String) (Start_9 String) (Start_4 String) (StartInt_3 Int) (Start_2 String) (StartInt_5 Int) (StartInt_2 Int) (StartInt_1 Int) (Start_5 String) (StartBool_4 Bool) (Start_8 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_12 String) (Start_3 String) (Start_7 String))
  ((Start String (y (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_2) (ite StartBool Start_3 Start_2)))
   (StartInt Int (1 0 (str.indexof Start_6 Start_7 StartInt_5) (str.to_int Start_4)))
   (StartBool Bool (false (and StartBool_1 StartBool_2) (str.prefixof Start Start_7) (str.suffixof Start Start_1) (str.contains Start Start_3) (= StartInt_2 StartInt_2)))
   (StartBool_3 Bool (false (not StartBool_6) (and StartBool_5 StartBool_4) (str.<= Start_11 Start_8) (str.prefixof Start_8 Start_9) (str.suffixof Start_8 Start_4) (= Start_2 Start_1)))
   (StartInt_6 Int (1 0 (str.len Start_8) (str.to_int Start_2)))
   (StartBool_5 Bool (true false (not StartBool_5) (str.prefixof Start_1 Start_7) (str.suffixof Start_9 Start_3) (str.contains Start_9 Start_11) (= StartInt_4 StartInt_6) (<= StartInt_3 StartInt_4)))
   (Start_11 String ("0" (str.++ Start Start_7) (str.replace Start_6 Start_4 Start_4) (str.from_int StartInt_6)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_3 StartBool_4) (str.<= Start_8 Start_8) (str.prefixof Start_1 Start_3)))
   (Start_1 String (y "a" x "0" "b" "1" "" (str.++ Start_2 Start_2) (str.at Start_7 StartInt_3) (ite StartBool_1 Start_9 Start_3)))
   (Start_6 String ("a" (str.replace Start_3 Start_5 Start_7) (str.from_int StartInt_1)))
   (StartBool_6 Bool (false true (str.< Start_4 Start_8) (str.suffixof Start_5 Start_12) (= Start_2 Start_1)))
   (Start_10 String ("0" (str.at Start_4 StartInt_4)))
   (Start_9 String ("a" "" "b" y "1" "0" x (str.substr Start_1 StartInt_1 StartInt_4) (str.replace Start_8 Start_2 Start_7) (ite StartBool_1 Start Start_6)))
   (Start_4 String ("1" "0" (str.at Start_4 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 (str.indexof Start_9 Start_9 StartInt_4)))
   (Start_2 String (y (str.++ Start_2 Start_6) (str.at Start_1 StartInt_3) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_6 Start Start_6) (ite StartBool_1 Start_6 Start_4)))
   (StartInt_5 Int (1 0 (str.len Start_7) (str.to_int Start_4)))
   (StartInt_2 Int (1 0 (str.len Start_1)))
   (StartInt_1 Int (0 (str.indexof Start_1 Start_5 StartInt_2)))
   (Start_5 String (y (str.replace Start Start_1 Start_4)))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_2) (str.< Start_9 Start_4) (str.prefixof Start_1 Start_10) (str.suffixof Start_1 Start_3) (str.contains Start_5 Start_6) (= Start_4 Start)))
   (Start_8 String ("b" (str.substr Start_2 StartInt_5 StartInt_5) (str.replace Start Start_5 Start_4)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start_5 Start_1) (str.<= Start_6 Start_7) (= Start_3 Start_1)))
   (StartInt_4 Int (0 (str.len Start_3) (str.to_int Start_6)))
   (Start_12 String ("0" (str.at Start_12 StartInt_6) (str.from_int StartInt_1) (ite StartBool_5 Start_8 Start)))
   (Start_3 String ("a" (str.++ Start_3 Start_1) (str.substr Start StartInt_1 StartInt_1) (str.replace Start Start Start_4) (str.from_int StartInt_1)))
   (Start_7 String ("1" (str.at Start_8 StartInt_1) (str.substr Start StartInt_4 StartInt_4) (str.replace Start_8 Start_2 Start_3) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ "1" "0") (str.indexof "b" y 0))))

(check-synth)
