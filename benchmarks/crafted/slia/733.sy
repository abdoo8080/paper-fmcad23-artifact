(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_12 Int) (Start_19 String) (Start_18 String) (Start_16 String) (Start_1 String) (StartBool_6 Bool) (StartInt_8 Int) (StartInt_2 Int) (StartInt_7 Int) (StartInt_1 Int) (StartInt_11 Int) (Start_17 String) (Start_8 String) (StartBool_3 Bool) (Start_9 String) (Start_10 String) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_9 Int) (Start_6 String) (Start_2 String) (Start_11 String) (StartInt_6 Int) (Start_7 String) (Start_12 String) (StartBool_4 Bool) (StartBool_5 Bool) (Start_14 String) (StartInt_10 Int) (StartInt_5 Int) (StartInt_4 Int) (Start_3 String) (Start_13 String) (Start_15 String) (StartBool_2 Bool) (Start_4 String) (Start_5 String))
  ((Start String ("1" "b" "0" "a" y "" x (str.++ Start Start_1) (str.at Start_2 StartInt) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_1 Start Start_3) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (1))
   (StartBool Bool (true (not StartBool_3) (and StartBool_5 StartBool_4) (str.< Start_4 Start_5) (str.prefixof Start_5 Start_11) (str.suffixof Start_5 Start_8) (= Start_18 Start_6)))
   (StartInt_12 Int (0 (str.len Start_9) (str.indexof Start_6 Start_13 StartInt_12)))
   (Start_19 String (x y "b" "0" "1" "" (str.++ Start_7 Start_9) (str.replace Start_2 Start_16 Start_15) (str.from_int StartInt_12) (ite StartBool_4 Start_17 Start_16)))
   (Start_18 String (y "1" x (str.++ Start_19 Start_14) (str.replace Start_15 Start_1 Start_7)))
   (Start_16 String ("1" (str.++ Start Start_17) (str.at Start_1 StartInt_2) (str.substr Start_3 StartInt StartInt_10) (str.replace Start_11 Start_10 Start_10) (ite StartBool_4 Start_12 Start_15)))
   (Start_1 String (y (str.++ Start_8 Start_1) (str.at Start_14 StartInt_10) (str.replace Start_4 Start_5 Start_11) (ite StartBool Start_15 Start_16)))
   (StartBool_6 Bool (false true (str.suffixof Start_11 Start_4) (= Start_14 Start_9) (= StartInt_5 StartInt_2) (<= StartInt_2 StartInt_5)))
   (StartInt_8 Int (1 0 (str.len Start_3) (str.indexof Start_9 Start_4 StartInt_4) (str.to_int Start_8)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_1 Start_7 StartInt_2) (str.to_int Start_12)))
   (StartInt_7 Int (1 (str.to_int Start)))
   (StartInt_1 Int (1))
   (StartInt_11 Int (0 (str.len Start_8) (str.to_int Start_17)))
   (Start_17 String ("b" (str.at Start_2 StartInt_7) (ite StartBool Start_13 Start_6)))
   (Start_8 String (x (str.++ Start_10 Start_7) (str.replace Start_6 Start_9 Start_9) (str.from_int StartInt_7) (ite StartBool_4 Start_3 Start)))
   (StartBool_3 Bool (true (not StartBool_1) (str.<= Start_7 Start_8) (str.prefixof Start_5 Start_9) (str.suffixof Start Start_1) (str.contains Start_9 Start_5) (= StartInt_6 StartInt_4) (<= StartInt_2 StartInt)))
   (Start_9 String (x "" (str.++ Start_3 Start_2) (str.at Start_6 StartInt_5) (str.substr Start_1 StartInt_2 StartInt_6) (str.replace Start_6 Start_6 Start_9) (ite StartBool_3 Start_3 Start_5)))
   (Start_10 String (x "b" (str.replace Start_6 Start_6 Start_5)))
   (StartInt_3 Int (1 (str.len Start_6)))
   (StartBool_1 Bool (false (str.prefixof Start_2 Start_4) (str.suffixof Start Start_5) (= StartInt_2 StartInt_1) (<= StartInt_3 StartInt)))
   (StartInt_9 Int (0 (str.len Start_13) (str.to_int Start_14)))
   (Start_6 String ("b" "1" x (str.at Start_5 StartInt_2) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start Start_4 Start_7) (ite StartBool_2 Start_3 Start_3)))
   (Start_2 String ("a" (str.++ Start_2 Start) (str.at Start_6 StartInt_6) (str.replace Start_13 Start_8 Start_1) (ite StartBool_6 Start_10 Start_12)))
   (Start_11 String ("" (str.++ Start_1 Start_7)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.indexof Start_9 Start_9 StartInt_6) (str.to_int Start_9)))
   (Start_7 String ("a" (str.at Start_11 StartInt_5) (str.substr Start_3 StartInt_4 StartInt_8) (str.replace Start_12 Start_1 Start_3) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_8)))
   (Start_12 String ("a" (str.++ Start_3 Start_6) (str.at Start StartInt_2) (str.substr Start_11 StartInt_1 StartInt_5) (str.replace Start_10 Start_13 Start_12) (str.from_int StartInt_3) (ite StartBool_5 Start_1 Start_5)))
   (StartBool_4 Bool (true (not StartBool_2) (<= StartInt_8 StartInt)))
   (StartBool_5 Bool (true false (str.<= Start_9 Start_2) (str.prefixof Start_12 Start_11) (str.suffixof Start_12 Start_7) (str.contains Start_5 Start) (= Start_13 Start_10) (<= StartInt_1 StartInt_4)))
   (Start_14 String (y (str.++ Start_9 Start_5) (str.replace Start_12 Start_10 Start_5)))
   (StartInt_10 Int (0))
   (StartInt_5 Int (1 0 (str.len Start_9)))
   (StartInt_4 Int (0 (str.len Start) (str.indexof Start_12 Start_14 StartInt_5)))
   (Start_3 String (y (str.substr Start_7 StartInt_6 StartInt_5) (str.replace Start_4 Start_1 Start_2) (str.from_int StartInt_8) (ite StartBool_6 Start_13 Start_6)))
   (Start_13 String (y "1" "b" "" (str.substr Start_5 StartInt StartInt_9) (str.from_int StartInt_1)))
   (Start_15 String (x "a" "1" (str.substr Start_18 StartInt_1 StartInt_11) (str.from_int StartInt_9) (ite StartBool_6 Start_18 Start_5)))
   (StartBool_2 Bool (false true (str.< Start Start_8) (str.prefixof Start_5 Start_9) (str.contains Start_2 Start_9) (<= StartInt StartInt_2)))
   (Start_4 String ("0" (str.++ Start_12 Start_11) (str.substr Start_14 StartInt_8 StartInt_4) (str.from_int StartInt_4) (ite StartBool Start_10 Start_11)))
   (Start_5 String (x (str.from_int StartInt) (ite StartBool_1 Start_5 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.len (str.from_int (str.indexof "0" y 0))))))

(check-synth)
