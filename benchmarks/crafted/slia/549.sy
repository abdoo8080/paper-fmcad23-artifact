(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_7 String) (StartInt_3 Int) (StartInt_7 Int) (StartInt_4 Int) (Start_6 String) (StartInt_8 Int) (Start_16 String) (Start_9 String) (Start_5 String) (Start_8 String) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_5 Int) (Start_3 String) (StartInt_6 Int) (Start_2 String) (Start_14 String) (StartInt_2 Int) (Start_10 String) (Start_4 String) (Start_11 String) (Start_13 String) (Start_12 String) (StartInt_1 Int) (Start_1 String) (Start_17 String) (StartBool_3 Bool) (Start_15 String))
  ((Start String ("1" (str.++ Start Start_1) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_2 Start)))
   (StartInt Int (0 (str.len Start_2) (str.indexof Start_10 Start_10 StartInt_8)))
   (StartBool Bool (true (not StartBool_4) (str.<= Start_3 Start) (str.suffixof Start_3 Start_8) (= Start_12 Start) (= StartInt_3 StartInt_2)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_3) (str.<= Start_6 Start_17)))
   (Start_7 String ("1" "a" y x (str.++ Start_4 Start_1) (str.replace Start_7 Start_9 Start_7) (str.from_int StartInt_3) (ite StartBool Start_1 Start_2)))
   (StartInt_3 Int (0 (str.len Start_9)))
   (StartInt_7 Int (1 0 (str.len Start_1) (str.to_int Start)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start_8 Start_9 StartInt)))
   (Start_6 String ("b" (str.++ Start_7 Start_8) (str.at Start_4 StartInt_7) (str.substr Start_3 StartInt_3 StartInt_6)))
   (StartInt_8 Int (1 (str.indexof Start_6 Start_10 StartInt_3) (str.to_int Start_11)))
   (Start_16 String (y "" "a" "0" (str.substr Start_15 StartInt_4 StartInt_7) (str.replace Start_2 Start_7 Start_12) (ite StartBool_3 Start_11 Start_6)))
   (Start_9 String ("b" (str.++ Start_3 Start_8) (str.at Start_5 StartInt_5) (str.substr Start_2 StartInt_4 StartInt_1) (str.replace Start_3 Start_8 Start_4) (ite StartBool_1 Start_4 Start)))
   (Start_5 String ("" y "1" (str.at Start_1 StartInt_1) (str.replace Start Start_5 Start_3)))
   (Start_8 String ("b" (str.++ Start_7 Start_8) (str.substr Start_2 StartInt_7 StartInt_3) (str.replace Start Start_6 Start_7) (str.from_int StartInt_6)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_1 StartBool_1) (str.< Start_5 Start_1) (str.contains Start_4 Start_1) (= Start_5 Start_6) (= StartInt_1 StartInt_1)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_1) (str.< Start_2 Start_4) (str.prefixof Start_1 Start_3) (str.suffixof Start Start) (str.contains Start_4 Start_2) (= StartInt_3 StartInt_2) (<= StartInt_4 StartInt_5)))
   (StartInt_5 Int (1 0 (str.to_int Start_2)))
   (Start_3 String (x (str.from_int StartInt_6) (ite StartBool Start_4 Start_4)))
   (StartInt_6 Int (1 (str.indexof Start_3 Start_6 StartInt_7) (str.to_int Start)))
   (Start_2 String ("0" "" "b" (str.at Start_3 StartInt_3) (str.substr Start_2 StartInt_4 StartInt_1) (str.replace Start_1 Start Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_2)))
   (Start_14 String ("b" "1" "a" (str.++ Start_15 Start_2) (str.replace Start Start_3 Start_14)))
   (StartInt_2 Int (1 (str.len Start_10)))
   (Start_10 String ("1" "b" x "" "0" "a" y (str.at Start_9 StartInt_1) (str.substr Start_11 StartInt_6 StartInt_2)))
   (Start_4 String ("b" "" (str.++ Start_4 Start_3) (str.substr Start_4 StartInt_2 StartInt_3) (str.replace Start_2 Start Start) (str.from_int StartInt_6) (ite StartBool_2 Start Start_5)))
   (Start_11 String (x (str.at Start_4 StartInt) (str.replace Start_5 Start_2 Start_12) (str.from_int StartInt_4)))
   (Start_13 String ("a" "0" (str.++ Start_16 Start_15) (str.at Start_6 StartInt_2) (str.replace Start_8 Start_16 Start_17) (str.from_int StartInt_3)))
   (Start_12 String (y (str.substr Start_8 StartInt_6 StartInt_7)))
   (StartInt_1 Int (1 (str.len Start_4) (str.indexof Start_6 Start StartInt_3) (str.to_int Start)))
   (Start_1 String ("a" "0" y "" x "1" "b" (str.++ Start_12 Start_3) (str.replace Start_13 Start_4 Start_14) (str.from_int StartInt_6) (ite StartBool Start_2 Start_1)))
   (Start_17 String (y "1" (str.++ Start_4 Start_10) (str.at Start_14 StartInt_1) (str.substr Start_15 StartInt_4 StartInt_3)))
   (StartBool_3 Bool (true false (str.< Start_1 Start_16) (= StartInt_6 StartInt_4)))
   (Start_15 String ("1" (str.++ Start_15 Start_12) (str.at Start_13 StartInt_2) (str.substr Start_14 StartInt_8 StartInt_1) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace x "0" "1") "b")))

(check-synth)
