(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_1 String) (StartInt_10 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_9 String) (Start_10 String) (StartInt_7 Int) (Start_7 String) (StartInt_4 Int) (Start_4 String) (StartInt_5 Int) (Start_3 String) (Start_18 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_11 String) (Start_2 String) (Start_6 String) (Start_15 String) (Start_14 String) (StartInt_9 Int) (Start_5 String) (Start_16 String) (Start_17 String) (StartInt_8 Int) (StartBool_4 Bool) (Start_12 String) (Start_13 String) (Start_8 String) (StartInt_6 Int) (StartInt_3 Int))
  ((Start String ("b" (str.at Start StartInt_1) (str.replace Start Start Start_1) (ite StartBool Start_2 Start)))
   (StartInt Int (0 1 (str.len Start_10)))
   (StartBool Bool (false true (str.prefixof Start_15 Start_13) (str.contains Start_13 Start_12) (= StartInt_10 StartInt_8)))
   (StartInt_1 Int (1 0))
   (Start_1 String ("1" y))
   (StartInt_10 Int (0 (str.len Start) (str.indexof Start_5 Start_13 StartInt_4) (str.to_int Start_17)))
   (StartBool_3 Bool (true (not StartBool_1) (str.< Start_1 Start_1) (str.<= Start_5 Start_8) (= StartInt_6 StartInt) (<= StartInt_4 StartInt_2)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool) (str.<= Start_1 Start_5) (str.prefixof Start_4 Start_1) (str.suffixof Start_5 Start_1) (str.contains Start_3 Start_2) (= Start_2 Start_5) (<= StartInt StartInt)))
   (Start_9 String ("a" (str.++ Start_1 Start_11) (str.substr Start_5 StartInt_1 StartInt_2)))
   (Start_10 String (x "0" y (str.at Start StartInt_4) (str.replace Start_5 Start_3 Start_7)))
   (StartInt_7 Int (0 1 (str.len Start_16) (str.indexof Start_8 Start_6 StartInt_5)))
   (Start_7 String (x (str.substr Start_10 StartInt_3 StartInt_1) (str.from_int StartInt_8) (ite StartBool_3 Start_15 Start_18)))
   (StartInt_4 Int (1 (str.len Start_4) (str.indexof Start_9 Start_10 StartInt_3)))
   (Start_4 String ("1" (str.++ Start_3 Start_1) (str.at Start_1 StartInt_3) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_1 Start_6 Start)))
   (StartInt_5 Int (1 (str.indexof Start_12 Start_9 StartInt_1)))
   (Start_3 String ("1" (str.++ Start_4 Start_17) (str.substr Start_12 StartInt StartInt_10) (str.from_int StartInt_8) (ite StartBool_3 Start_6 Start_15)))
   (Start_18 String (y (str.++ Start_5 Start_6) (str.substr Start_6 StartInt_9 StartInt_3) (ite StartBool_4 Start_8 Start_13)))
   (StartInt_2 Int (1 (str.to_int Start_2)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool_3) (str.< Start_1 Start_6) (str.prefixof Start_4 Start_13) (str.suffixof Start_9 Start_5) (str.contains Start_14 Start) (= Start_4 Start_10)))
   (Start_11 String (y "1" x (str.++ Start_12 Start_13) (str.at Start_4 StartInt_5) (str.substr Start_8 StartInt_6 StartInt_7) (str.replace Start_14 Start Start_15) (str.from_int StartInt_4) (ite StartBool_2 Start_11 Start_4)))
   (Start_2 String (x "0" "" (str.++ Start_1 Start_3) (str.replace Start_4 Start Start) (str.from_int StartInt_2) (ite StartBool_1 Start Start_2)))
   (Start_6 String (x "a" (str.++ Start_1 Start) (str.substr Start_7 StartInt StartInt_1) (str.replace Start_8 Start_3 Start_1) (str.from_int StartInt_4)))
   (Start_15 String ("b" "a" "1" (str.++ Start_1 Start_4) (str.replace Start_9 Start_4 Start_5)))
   (Start_14 String ("0" (str.at Start_6 StartInt)))
   (StartInt_9 Int (0 (str.to_int Start_11)))
   (Start_5 String ("a" x "0" "" (str.at Start_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_4)))
   (Start_16 String ("b" (str.++ Start_3 Start_4) (str.substr Start_10 StartInt_5 StartInt_8) (ite StartBool Start_13 Start_16)))
   (Start_17 String ("a" "0" "" "1" (str.at Start_8 StartInt_5) (str.substr Start_2 StartInt_2 StartInt_9) (str.replace Start_11 Start_15 Start_18) (str.from_int StartInt_2)))
   (StartInt_8 Int (0 (str.len Start_16) (str.to_int Start_2)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_4 StartBool_2) (str.suffixof Start_5 Start_14) (str.contains Start_5 Start_15) (<= StartInt_5 StartInt_4)))
   (Start_12 String ("a" (str.++ Start_9 Start_17) (str.at Start_6 StartInt_8) (str.substr Start_3 StartInt_5 StartInt_6) (ite StartBool_2 Start_8 Start)))
   (Start_13 String (x (str.substr Start StartInt_6 StartInt_3) (str.replace Start_12 Start_14 Start_5) (ite StartBool_3 Start_13 Start_15)))
   (Start_8 String ("1" (str.replace Start_10 Start Start_6) (str.from_int StartInt_1) (ite StartBool Start_13 Start_7)))
   (StartInt_6 Int (0 (str.len Start_5) (str.to_int Start_12)))
   (StartInt_3 Int (1 (str.len Start_10) (str.to_int Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ x (str.++ "a" x)) "b" "")))

(check-synth)
