(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_1 Int) (StartInt_6 Int) (StartInt_10 Int) (Start_6 String) (Start_4 String) (StartInt_3 Int) (StartInt_2 Int) (StartInt_4 Int) (Start_5 String) (Start_3 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_8 String) (StartBool_1 Bool) (StartBool_3 Bool) (Start_2 String) (StartInt_7 Int) (Start_11 String) (StartInt_9 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_10 String) (Start_9 String) (StartInt_8 Int) (Start_1 String) (Start_7 String) (Start_12 String) (Start_13 String))
  ((Start String ("b" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt_2)))
   (StartInt Int (1 0 (str.to_int Start_8)))
   (StartBool Bool (false (not StartBool) (str.< Start_4 Start_9) (str.prefixof Start_14 Start) (str.contains Start Start_12) (= Start_2 Start_13) (<= StartInt_7 StartInt_6)))
   (Start_14 String (x (str.++ Start Start_12) (str.substr Start_5 StartInt_3 StartInt_2)))
   (StartInt_1 Int (1 (str.len Start_5)))
   (StartInt_6 Int (0 1))
   (StartInt_10 Int (1 (str.len Start_12)))
   (Start_6 String ("b" (str.substr Start_4 StartInt_6 StartInt) (str.replace Start_4 Start_6 Start_6) (str.from_int StartInt_4)))
   (Start_4 String ("b" (str.++ Start_5 Start_5) (str.substr Start StartInt_3 StartInt_1) (str.replace Start_5 Start Start)))
   (StartInt_3 Int (1 (str.len Start_2)))
   (StartInt_2 Int (1 (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_2)))
   (StartInt_4 Int (0 1 (str.to_int Start_6)))
   (Start_5 String ("a" (str.++ Start_5 Start) (str.at Start_3 StartInt_4) (str.substr Start_3 StartInt_5 StartInt_3) (str.from_int StartInt_6)))
   (Start_3 String ("b" (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt) (ite StartBool_1 Start Start)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_3) (str.< Start_6 Start_1) (str.prefixof Start_8 Start_3) (str.suffixof Start_7 Start_1) (= Start_8 Start_1) (= StartInt_3 StartInt_5) (<= StartInt_6 StartInt)))
   (StartInt_5 Int (1 0 (str.len Start) (str.indexof Start_6 Start_3 StartInt_3) (str.to_int Start_6)))
   (Start_8 String ("a" "1" x "b" y (str.substr Start_4 StartInt StartInt_3) (str.replace Start_10 Start_9 Start_5) (ite StartBool_4 Start_11 Start_6)))
   (StartBool_1 Bool (true false (str.prefixof Start_3 Start_3) (str.suffixof Start_4 Start_3) (= StartInt StartInt) (<= StartInt_3 StartInt_1)))
   (StartBool_3 Bool (false true (not StartBool) (str.< Start_7 Start) (str.contains Start_9 Start_1) (= Start_7 Start_5)))
   (Start_2 String (x "a" "1" (str.++ Start_7 Start_3) (str.at Start_8 StartInt_7) (str.substr Start_6 StartInt_5 StartInt_1) (str.replace Start_2 Start_3 Start_9) (ite StartBool_2 Start_2 Start_9)))
   (StartInt_7 Int (0 (str.len Start) (str.indexof Start Start_7 StartInt_4) (str.to_int Start_8)))
   (Start_11 String ("1" "0" (str.++ Start_7 Start_9) (str.at Start_9 StartInt_7) (str.from_int StartInt_5) (ite StartBool_3 Start_3 Start_2)))
   (StartInt_9 Int (0 (str.len Start_8) (str.indexof Start_5 Start_9 StartInt_7) (str.to_int Start_4)))
   (StartBool_5 Bool (true (not StartBool_4) (str.prefixof Start_2 Start_7) (str.suffixof Start_6 Start_9) (str.contains Start_11 Start_1) (= Start_7 Start_4) (= StartInt StartInt_1)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_1 StartBool_5) (str.prefixof Start_5 Start) (str.contains Start_8 Start_9) (= Start_10 Start_5)))
   (Start_10 String ("1" "b" x (str.at Start_3 StartInt_6) (str.substr Start_1 StartInt StartInt_8) (str.replace Start_11 Start_9 Start_8) (str.from_int StartInt_6) (ite StartBool_3 Start_4 Start_10)))
   (Start_9 String ("" (str.at Start_5 StartInt_2) (ite StartBool_2 Start Start_5)))
   (StartInt_8 Int (0 (str.len Start_2)))
   (Start_1 String ("a" (str.++ Start Start_14) (str.at Start_2 StartInt_4) (str.substr Start_7 StartInt_10 StartInt_5) (str.from_int StartInt_10) (ite StartBool_5 Start_11 Start_2)))
   (Start_7 String ("1" "a" "0" x (str.at Start_12 StartInt_7)))
   (Start_12 String ("a" (str.++ Start_12 Start_13) (str.substr Start_8 StartInt_9 StartInt_9) (str.from_int StartInt_8) (ite StartBool_2 Start_8 Start_13)))
   (Start_13 String ("1" (str.substr Start StartInt_8 StartInt_4) (str.replace Start_10 Start_8 Start) (str.from_int StartInt_8) (ite StartBool Start_4 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof x y) "" y)))

(check-synth)
