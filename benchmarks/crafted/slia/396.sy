(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_4 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_7 String) (StartInt_6 Int) (Start_6 String) (Start_2 String) (Start_8 String) (Start_10 String) (StartBool_1 Bool) (Start_11 String) (Start_5 String) (Start_12 String) (StartInt_1 Int) (StartInt_3 Int) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int) (StartInt_5 Int) (Start_9 String) (StartBool_2 Bool))
  ((Start String ("a" x "" (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.to_int Start_12)))
   (StartBool Bool (false (not StartBool_1) (str.< Start_6 Start_8) (str.contains Start_4 Start_3) (<= StartInt_5 StartInt_2)))
   (Start_1 String ("b" y (str.++ Start_8 Start_6) (str.at Start StartInt_5) (str.from_int StartInt_6)))
   (Start_4 String (x "0"))
   (StartBool_3 Bool (true (not StartBool_4) (str.< Start_2 Start_7) (str.prefixof Start_4 Start_2) (= Start_3 Start_5) (= StartInt_2 StartInt_5)))
   (StartBool_4 Bool (true (str.< Start_6 Start_11) (str.<= Start_1 Start) (str.suffixof Start_7 Start_6) (= StartInt_1 StartInt_4)))
   (Start_7 String ("1" x "b" (str.substr Start_6 StartInt_2 StartInt_5) (str.replace Start_3 Start_4 Start_1)))
   (StartInt_6 Int (0 1 (str.len Start_2)))
   (Start_6 String (x "b" (str.at Start StartInt_5) (str.from_int StartInt_6)))
   (Start_2 String (y (str.++ Start_1 Start_1) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool_1 Start_2 Start_2)))
   (Start_8 String (x (str.++ Start_7 Start_2) (str.at Start StartInt_3)))
   (Start_10 String ("1" (str.++ Start_2 Start_3) (str.replace Start_9 Start_9 Start) (str.from_int StartInt)))
   (StartBool_1 Bool (false true (str.< Start_3 Start_3) (str.prefixof Start_2 Start_1) (str.suffixof Start_2 Start_4) (= Start_5 Start_5)))
   (Start_11 String ("a" y x (str.++ Start Start_6) (str.at Start_10 StartInt_5) (str.substr Start_4 StartInt StartInt_1) (ite StartBool_2 Start_4 Start_2)))
   (Start_5 String (y "a" "0" (str.at Start_6 StartInt_2) (str.substr Start_7 StartInt StartInt_1) (str.replace Start_5 Start_4 Start_4) (str.from_int StartInt_2) (ite StartBool Start_8 Start)))
   (Start_12 String (x y "a" (str.substr Start_4 StartInt_4 StartInt_3) (str.from_int StartInt_5)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.to_int Start_2)))
   (StartInt_3 Int (0 (str.len Start_4) (str.indexof Start_6 Start_3 StartInt_4)))
   (Start_3 String ("1" (str.at Start_7 StartInt_6) (str.replace Start_10 Start_12 Start_3) (ite StartBool Start_6 Start_9)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_9 StartInt_1)))
   (StartInt_4 Int (0 1 (str.len Start_7)))
   (StartInt_5 Int (0 (str.len Start_9) (str.to_int Start_3)))
   (Start_9 String (x y "" (str.++ Start_2 Start_3) (str.at Start_4 StartInt_2) (str.substr Start_6 StartInt_3 StartInt_5) (str.replace Start_7 Start Start_7) (str.from_int StartInt_5) (ite StartBool_2 Start_7 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_4) (str.<= Start_3 Start_10) (str.prefixof Start_1 Start_3) (= Start Start) (= StartInt_1 StartInt_3) (<= StartInt_4 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.substr y 0 1) "1" "b")))

(check-synth)
