(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_8 String) (Start_7 String) (StartInt_4 Int) (StartInt_2 Int) (Start_3 String) (Start_5 String) (StartBool_2 Bool) (Start_2 String) (Start_4 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_1 String) (Start_6 String) (StartBool_3 Bool))
  ((Start String ("1" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_1)))
   (StartInt Int (0 (str.len Start_5) (str.indexof Start_7 Start_6 StartInt_4) (str.to_int Start_6)))
   (StartBool Bool (false true (str.<= Start_8 Start_8)))
   (StartInt_5 Int (0))
   (Start_8 String ("1" (str.++ Start_6 Start_5) (str.at Start_1 StartInt_5) (str.replace Start_6 Start_3 Start_3) (str.from_int StartInt_4)))
   (Start_7 String ("0" (str.replace Start_8 Start_1 Start_2) (str.from_int StartInt_2) (ite StartBool_3 Start Start_7)))
   (StartInt_4 Int (1 0 (str.indexof Start_3 Start_7 StartInt_4)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_3 Start StartInt_1)))
   (Start_3 String ("0" "a" (str.at Start_2 StartInt_2) (str.from_int StartInt_1)))
   (Start_5 String (y "1" "b" (str.++ Start_1 Start_2) (str.replace Start_4 Start Start) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool StartBool_3) (str.< Start Start_4) (str.suffixof Start_6 Start_1) (= StartInt_1 StartInt_3) (<= StartInt_3 StartInt_3)))
   (Start_2 String ("b" (str.++ Start_3 Start_1) (str.substr Start_2 StartInt StartInt) (ite StartBool_1 Start Start_1)))
   (Start_4 String ("1" (str.at Start_4 StartInt_1) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_1 Start_4 Start_1) (ite StartBool Start_4 Start_5)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.to_int Start_2)))
   (StartBool_1 Bool (false true (not StartBool) (str.<= Start_4 Start_1) (str.prefixof Start_2 Start_4) (str.contains Start Start_1)))
   (StartInt_3 Int (0 1 (str.to_int Start)))
   (Start_1 String ("0" (str.at Start StartInt_3) (ite StartBool_2 Start_1 Start_3)))
   (Start_6 String ("" "0" "b" "1" y (str.substr Start_5 StartInt StartInt_3) (str.from_int StartInt_3)))
   (StartBool_3 Bool (true (and StartBool_2 StartBool) (str.prefixof Start_3 Start_1) (str.suffixof Start_5 Start_2) (= Start_5 Start_1) (<= StartInt StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof (str.replace y "1" "a") "1" 1))))

(check-synth)
