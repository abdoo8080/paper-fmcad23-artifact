(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_1 Bool) (StartBool_2 Bool) (Start_8 String) (StartInt_1 Int) (Start_2 String) (StartInt_6 Int) (Start_3 String) (Start_5 String) (Start_10 String) (Start_1 String) (Start_4 String) (StartInt_2 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_6 String) (StartInt_5 Int) (Start_9 String) (Start_7 String))
  ((Start String (y "a" "b" (str.substr Start_1 StartInt StartInt_1) (ite StartBool Start_2 Start_1)))
   (StartInt Int (0 1 (str.len Start_2) (str.indexof Start_3 Start StartInt_5) (str.to_int Start_3)))
   (StartBool Bool (true false (not StartBool) (and StartBool_1 StartBool_2) (str.<= Start_3 Start_4) (str.contains Start_5 Start_6) (= Start_1 Start_7) (= StartInt_1 StartInt_1)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_3) (str.prefixof Start_6 Start_6) (str.suffixof Start_4 Start_8) (str.contains Start Start_3) (= Start_6 Start_10) (= StartInt_2 StartInt_4)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_2 StartBool_3) (str.< Start_7 Start_2) (str.prefixof Start Start_4) (= StartInt_6 StartInt_6)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_2 StartBool_2) (= StartInt_3 StartInt_2)))
   (Start_8 String ("1" (str.replace Start_6 Start_6 Start_1) (ite StartBool_2 Start_5 Start_3)))
   (StartInt_1 Int (1 0 (str.indexof Start Start StartInt_2) (str.to_int Start_3)))
   (Start_2 String ("b" (str.substr Start StartInt_2 StartInt_2) (ite StartBool Start Start_2)))
   (StartInt_6 Int (1 0 (str.len Start_3) (str.to_int Start_8)))
   (Start_3 String (x "0" y (str.at Start StartInt_3)))
   (Start_5 String (x "b" "a" "" (str.++ Start_5 Start_5)))
   (Start_10 String ("0"))
   (Start_1 String ("1" "a" (str.++ Start_3 Start_1) (str.at Start_3 StartInt_3) (str.replace Start_4 Start_1 Start_1) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (Start_4 String ("0" "1" (str.substr Start_3 StartInt_4 StartInt_3) (str.from_int StartInt_4) (ite StartBool Start_3 Start_4)))
   (StartInt_2 Int (1 0))
   (StartInt_4 Int (0 1 (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start_2)))
   (StartInt_3 Int (0 (str.len Start_3) (str.indexof Start_3 Start_2 StartInt_2) (str.to_int Start_3)))
   (Start_6 String ("a" (str.at Start_9 StartInt) (str.substr Start_5 StartInt_4 StartInt_5) (str.replace Start_7 Start_8 Start_10) (str.from_int StartInt) (ite StartBool_1 Start_10 Start_1)))
   (StartInt_5 Int (1 (str.len Start_4)))
   (Start_9 String (y "0" "1" "a" "b" (str.at Start_8 StartInt_1) (str.substr Start StartInt_4 StartInt_4)))
   (Start_7 String ("b" (str.++ Start_8 Start_8) (str.replace Start_2 Start_8 Start_1) (str.from_int StartInt_3) (ite StartBool_2 Start_7 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.from_int (str.to_int (str.replace x "" (str.replace x "" "1"))))))))

(check-synth)
