(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartBool_3 Bool) (Start_12 String) (Start_11 String) (StartBool_2 Bool) (Start_8 String) (Start_14 String) (Start_2 String) (Start_7 String) (Start_10 String) (StartInt_6 Int) (Start_5 String) (StartInt_1 Int) (Start_1 String) (Start_3 String) (StartInt_7 Int) (StartInt_5 Int) (StartInt_2 Int) (Start_13 String) (StartInt_4 Int) (StartInt_3 Int) (StartInt_8 Int) (StartBool_1 Bool) (Start_4 String) (Start_6 String))
  ((Start String ("b" (str.from_int StartInt_1)))
   (StartInt Int (0 (str.indexof Start_1 Start_1 StartInt_1) (str.to_int Start)))
   (StartBool Bool (true (str.< Start_10 Start_13) (str.prefixof Start_10 Start_1) (str.suffixof Start_14 Start_9) (str.contains Start_12 Start_5)))
   (Start_9 String (x (str.++ Start_4 Start_1) (str.substr Start_9 StartInt_4 StartInt_7)))
   (StartBool_3 Bool (true false (and StartBool StartBool_2) (str.< Start_8 Start_14) (= Start_11 Start_13) (= StartInt_1 StartInt_3) (<= StartInt_8 StartInt)))
   (Start_12 String (y "1" "" "a" "0" (str.++ Start_11 Start_3) (str.from_int StartInt_3) (ite StartBool Start_3 Start_1)))
   (Start_11 String (y "" "0" (str.++ Start_3 Start_11) (str.at Start_12 StartInt_2) (str.substr Start_13 StartInt_2 StartInt_6) (str.replace Start Start_2 Start_5) (ite StartBool_3 Start_11 Start)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool_1) (str.<= Start_11 Start_3) (= StartInt_3 StartInt) (<= StartInt_7 StartInt_7)))
   (Start_8 String ("" x (str.++ Start_1 Start) (str.at Start_6 StartInt_7) (str.substr Start_9 StartInt_6 StartInt) (str.replace Start_4 Start_10 Start_7)))
   (Start_14 String ("0" "" "1" "b" (str.from_int StartInt) (ite StartBool_3 Start_3 Start_13)))
   (Start_2 String ("0" (str.++ Start_8 Start_5) (str.replace Start_3 Start_5 Start_4)))
   (Start_7 String (y (str.at Start StartInt) (str.substr Start_3 StartInt_5 StartInt_2) (str.replace Start_6 Start_5 Start) (ite StartBool_1 Start Start_1)))
   (Start_10 String ("1" y "b" (str.substr Start_2 StartInt_4 StartInt_4) (str.replace Start_5 Start_8 Start_1) (ite StartBool_2 Start_7 Start_6)))
   (StartInt_6 Int (1 (str.indexof Start_6 Start_7 StartInt_4)))
   (Start_5 String ("a" "1" (str.++ Start_5 Start_1) (str.at Start StartInt_3) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt)))
   (StartInt_1 Int (1 0))
   (Start_1 String (y (str.++ Start_2 Start) (str.replace Start_3 Start Start)))
   (Start_3 String ("0" (str.at Start_4 StartInt) (str.replace Start_3 Start_1 Start_5) (str.from_int StartInt_2) (ite StartBool Start_2 Start_3)))
   (StartInt_7 Int (0 1 (str.len Start_2) (str.indexof Start Start_2 StartInt_4)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_3 Start_2 StartInt_4) (str.to_int Start_3)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.indexof Start Start_2 StartInt_1)))
   (Start_13 String ("1" "" (str.at Start_2 StartInt_8) (str.replace Start_2 Start_13 Start_10) (str.from_int StartInt) (ite StartBool_1 Start Start_2)))
   (StartInt_4 Int (0 (str.len Start_5) (str.indexof Start_3 Start_3 StartInt_3) (str.to_int Start)))
   (StartInt_3 Int (0 (str.len Start_4) (str.to_int Start_2)))
   (StartInt_8 Int (1 0 (str.indexof Start Start StartInt_8) (str.to_int Start_1)))
   (StartBool_1 Bool (false (not StartBool) (str.< Start_4 Start_3) (str.<= Start_2 Start_5) (= Start_6 Start_4) (<= StartInt_3 StartInt_8)))
   (Start_4 String ("a" y (str.++ Start_6 Start) (str.at Start_4 StartInt_4) (str.substr Start_6 StartInt_2 StartInt_4) (str.replace Start_6 Start_3 Start_3) (str.from_int StartInt_5)))
   (Start_6 String ("1" "a" (str.at Start_2 StartInt_4) (str.substr Start_3 StartInt_6 StartInt_7) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof x "b") (str.++ "a" "1") "1")))

(check-synth)
