(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_11 String) (Start_10 String) (Start_3 String) (StartInt_1 Int) (StartInt_5 Int) (Start_5 String) (StartBool_4 Bool) (Start_4 String) (StartBool_3 Bool) (Start_1 String) (Start_2 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_7 String) (Start_8 String) (Start_6 String) (StartInt_2 Int) (Start_9 String) (StartBool_2 Bool) (Start_12 String) (StartInt_3 Int))
  ((Start String ("0" y "b" (str.at Start StartInt) (str.from_int StartInt) (ite StartBool Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_11) (str.indexof Start_2 Start_12 StartInt)))
   (StartBool Bool (true false (and StartBool_3 StartBool_4) (str.< Start_6 Start_12) (str.<= Start Start_5) (str.prefixof Start_3 Start) (<= StartInt_4 StartInt_5)))
   (Start_13 String ("" "1" (str.substr Start_9 StartInt_1 StartInt_5) (str.replace Start_9 Start_10 Start_3) (str.from_int StartInt) (ite StartBool_2 Start_9 Start_6)))
   (Start_11 String ("" (str.at Start_12 StartInt_4) (str.from_int StartInt_4) (ite StartBool Start Start_8)))
   (Start_10 String ("a" (str.at Start_8 StartInt_2)))
   (Start_3 String (y (str.++ Start_10 Start_10) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_9 Start Start_3) (str.from_int StartInt_3)))
   (StartInt_1 Int (0 1 (str.len Start_9)))
   (StartInt_5 Int (0 (str.len Start_9) (str.indexof Start_1 Start_4 StartInt) (str.to_int Start_3)))
   (Start_5 String ("b" (str.++ Start_4 Start_5)))
   (StartBool_4 Bool (true false (str.< Start_8 Start_10) (str.contains Start_13 Start_9)))
   (Start_4 String (y (str.++ Start_1 Start_3) (str.at Start_2 StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_3 StartBool_3) (str.suffixof Start_4 Start_8) (str.contains Start_1 Start_9) (= Start_2 Start_7)))
   (Start_1 String ("" (str.substr Start_2 StartInt StartInt)))
   (Start_2 String (y x (str.++ Start_2 Start_3) (str.at Start_3 StartInt) (str.replace Start_3 Start_1 Start_4) (str.from_int StartInt)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (str.< Start Start_1) (str.<= Start_2 Start_4) (str.prefixof Start_2 Start_2) (str.suffixof Start_5 Start_1) (str.contains Start Start_6) (= Start_1 Start_5)))
   (StartInt_4 Int (0 (str.len Start_5) (str.indexof Start_13 Start_11 StartInt_2) (str.to_int Start_9)))
   (Start_7 String (y (str.substr Start_8 StartInt_1 StartInt) (ite StartBool_2 Start Start_6)))
   (Start_8 String (x (str.at Start_6 StartInt_2) (str.replace Start_7 Start Start_3) (str.from_int StartInt_3)))
   (Start_6 String ("a" x "b" (str.at Start_7 StartInt_1) (str.substr Start_2 StartInt StartInt_2) (str.replace Start_3 Start_2 Start_4) (str.from_int StartInt)))
   (StartInt_2 Int (1 (str.indexof Start_1 Start_3 StartInt_2)))
   (Start_9 String ("1" "" "0" (str.++ Start_7 Start_3) (str.from_int StartInt) (ite StartBool_3 Start_7 Start_5)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.< Start_1 Start_4) (str.prefixof Start_3 Start_8) (str.suffixof Start_1 Start_6) (= Start_3 Start_8) (<= StartInt_1 StartInt)))
   (Start_12 String ("0" (str.at Start_1 StartInt_3) (str.substr Start_12 StartInt StartInt_2) (str.from_int StartInt)))
   (StartInt_3 Int (1 (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= x "b") "0" x)))

(check-synth)
