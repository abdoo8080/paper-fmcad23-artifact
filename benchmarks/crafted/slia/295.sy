(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartBool_3 Bool) (Start_3 String) (Start_4 String) (Start_6 String) (StartInt_9 Int) (Start_11 String) (StartBool_4 Bool) (StartInt_4 Int) (Start_5 String) (Start_10 String) (StartInt_3 Int) (StartInt_1 Int) (StartInt_2 Int) (Start_8 String) (Start_13 String) (Start_1 String) (StartInt_7 Int) (StartInt_6 Int) (StartInt_5 Int) (Start_7 String) (StartBool_2 Bool) (StartInt_8 Int) (Start_9 String) (StartBool_1 Bool) (Start_12 String) (Start_14 String))
  ((Start String ("0" (str.++ Start_1 Start_2) (str.at Start_3 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start Start_3 Start_1)))
   (StartInt Int (0 (str.len Start_2) (str.indexof Start_5 Start_4 StartInt_3) (str.to_int Start_7)))
   (StartBool Bool (false true (str.<= Start_7 Start_4) (str.suffixof Start_3 Start_5) (str.contains Start_4 Start_9) (= Start_9 Start_9) (= StartInt_8 StartInt)))
   (Start_2 String ("1" (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_1 Start_6 Start_2) (str.from_int StartInt_2)))
   (StartBool_3 Bool (false true (not StartBool_4) (str.< Start_14 Start_7) (str.<= Start_8 Start_14) (str.suffixof Start_14 Start_9) (str.contains Start_7 Start) (= Start_12 Start_6) (= StartInt_5 StartInt)))
   (Start_3 String (x "0" "a" "b" "" "1" (str.substr Start_3 StartInt_4 StartInt_5)))
   (Start_4 String ("" "0" "b" (str.++ Start_6 Start_2) (str.substr Start_1 StartInt StartInt)))
   (Start_6 String ("" x (str.at Start_4 StartInt) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_4 Start Start_4) (str.from_int StartInt_4)))
   (StartInt_9 Int (0 (str.len Start_9) (str.to_int Start_10)))
   (Start_11 String ("" "1" "b" x (str.++ Start_8 Start_1) (str.at Start_9 StartInt_9) (str.substr Start_7 StartInt_7 StartInt_4) (str.from_int StartInt_8) (ite StartBool_2 Start_7 Start_10)))
   (StartBool_4 Bool (false (str.< Start_13 Start_5) (str.prefixof Start_14 Start_11) (str.contains Start_6 Start_6) (= StartInt_9 StartInt_2) (<= StartInt_6 StartInt_4)))
   (StartInt_4 Int (1 0 (str.len Start_2) (str.indexof Start_4 Start_6 StartInt_1) (str.to_int Start_5)))
   (Start_5 String ("1" (str.replace Start_5 Start Start_2) (ite StartBool Start_4 Start_2)))
   (Start_10 String ("" "b" (str.at Start_2 StartInt_4) (str.substr Start StartInt_5 StartInt_6) (str.replace Start_13 Start_11 Start_9) (str.from_int StartInt_3) (ite StartBool_3 Start_12 Start_12)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_4 StartInt_3) (str.to_int Start_5)))
   (StartInt_1 Int (1 (str.indexof Start Start_3 StartInt_3) (str.to_int Start)))
   (StartInt_2 Int (0))
   (Start_8 String (x "" (str.++ Start_4 Start_1) (str.at Start_7 StartInt_5) (str.substr Start StartInt_6 StartInt_3) (str.from_int StartInt_7)))
   (Start_13 String ("b" (str.at Start_12 StartInt_5) (str.substr Start_8 StartInt_1 StartInt_5) (str.replace Start_7 Start_3 Start_9) (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start_2)))
   (Start_1 String ("0" (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_2 Start_4 Start_6)))
   (StartInt_7 Int (0 (str.indexof Start_2 Start_2 StartInt) (str.to_int Start_5)))
   (StartInt_6 Int (1 (str.len Start_8) (str.to_int Start_2)))
   (StartInt_5 Int (1 (str.len Start) (str.to_int Start_6)))
   (Start_7 String ("a" "1" (str.replace Start_8 Start_2 Start_2)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool_2) (str.< Start_9 Start_6) (str.<= Start_8 Start_2) (str.prefixof Start_9 Start_12) (str.contains Start_11 Start_12)))
   (StartInt_8 Int (1))
   (Start_9 String (y (str.++ Start_10 Start_3) (str.replace Start_5 Start Start_5) (str.from_int StartInt_6) (ite StartBool_1 Start_3 Start_5)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_2 StartBool) (str.< Start_1 Start_4) (str.<= Start_10 Start_6) (str.suffixof Start_4 Start_6) (str.contains Start_11 Start_3) (= Start_3 Start_3) (<= StartInt_1 StartInt_6)))
   (Start_12 String (y (str.++ Start_13 Start_10) (str.substr Start_11 StartInt_4 StartInt_2) (str.from_int StartInt_9)))
   (Start_14 String ("0" (str.++ Start_3 Start_10) (str.at Start_12 StartInt_3) (str.replace Start_10 Start_3 Start_9) (ite StartBool_3 Start_4 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace (str.++ "b" "0") y "0") (str.len y) (str.indexof y "1" 0))))

(check-synth)
