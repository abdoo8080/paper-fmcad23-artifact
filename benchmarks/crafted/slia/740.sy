(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartBool_3 Bool) (Start_5 String) (StartInt_2 Int) (Start_6 String) (Start_10 String) (StartInt_1 Int) (Start_3 String) (Start_8 String) (Start_1 String) (Start_9 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_4 String) (Start_2 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_7 String) (StartInt_4 Int))
  ((Start String (y "" "a" x (str.++ Start_1 Start) (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.to_int Start)))
   (StartBool Bool (false true (and StartBool_2 StartBool_2) (str.<= Start_3 Start) (str.prefixof Start_2 Start_6) (str.suffixof Start_6 Start_7) (str.contains Start Start_10) (= Start_10 Start_3) (= StartInt_5 StartInt_2) (<= StartInt_3 StartInt_4)))
   (StartInt_5 Int (0 1 (str.len Start_3)))
   (StartBool_3 Bool (true (not StartBool_1) (str.prefixof Start_1 Start) (str.suffixof Start_8 Start_8) (str.contains Start_8 Start) (= Start Start_5) (= StartInt_5 StartInt_3) (<= StartInt_5 StartInt_2)))
   (Start_5 String ("b" (str.substr Start StartInt_1 StartInt_4) (str.from_int StartInt_2) (ite StartBool_3 Start_4 Start_5)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start StartInt_2) (str.to_int Start_1)))
   (Start_6 String (y (str.++ Start_5 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (Start_10 String ("b" x y "a" "0" (str.++ Start Start_8) (str.replace Start_2 Start_9 Start_1)))
   (StartInt_1 Int (0 1 (str.indexof Start_2 Start StartInt_2)))
   (Start_3 String (x (str.++ Start Start) (str.substr Start_3 StartInt StartInt)))
   (Start_8 String ("" (str.at Start_1 StartInt) (str.substr Start_4 StartInt_4 StartInt_4) (str.replace Start_5 Start_9 Start_8) (ite StartBool_2 Start_9 Start)))
   (Start_1 String ("1" (str.replace Start Start_4 Start_1) (ite StartBool Start_4 Start_2)))
   (Start_9 String ("" (str.at Start_1 StartInt_3) (str.substr Start_5 StartInt_6 StartInt_4) (ite StartBool_2 Start_4 Start_3)))
   (StartInt_3 Int (0 (str.to_int Start_6)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool StartBool_2) (str.< Start_5 Start_6) (str.prefixof Start_2 Start_4) (str.contains Start_4 Start_1) (<= StartInt StartInt_3)))
   (Start_4 String ("1" (str.++ Start_3 Start_5) (str.at Start_6 StartInt_3) (str.from_int StartInt_3)))
   (Start_2 String ("1" x (str.++ Start_2 Start_2) (str.from_int StartInt) (ite StartBool Start Start_3)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_5 Start_4) (str.<= Start_3 Start_6) (str.suffixof Start Start_2) (str.contains Start_7 Start_3) (= Start_3 Start_4) (<= StartInt_1 StartInt_2)))
   (StartInt_6 Int (1 (str.len Start_8)))
   (Start_7 String (y "b" x (str.at Start_7 StartInt_4) (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start_4 Start_6 Start_7) (ite StartBool_1 Start_7 Start_2)))
   (StartInt_4 Int (1 (str.indexof Start_3 Start_5 StartInt_2) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at "b" (str.len y))))))

(check-synth)
