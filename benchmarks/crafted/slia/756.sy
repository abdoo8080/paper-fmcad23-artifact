(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_5 Int) (Start_15 String) (StartInt_3 Int) (Start_5 String) (Start_10 String) (Start_7 String) (Start_6 String) (StartInt_8 Int) (StartInt_4 Int) (Start_12 String) (Start_2 String) (Start_4 String) (Start_8 String) (StartBool_3 Bool) (Start_3 String) (Start_13 String) (Start_1 String) (Start_9 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_14 String) (StartInt_1 Int) (StartInt_7 Int) (Start_16 String) (Start_11 String))
  ((Start String ("1" x y "a" "0" (str.substr Start StartInt_1 StartInt) (str.replace Start Start_1 Start_2) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_13) (str.to_int Start_16)))
   (StartBool Bool (true false (str.< Start_11 Start_13) (str.<= Start_10 Start_14) (str.contains Start_10 Start_3) (= Start_11 Start_5) (= StartInt_8 StartInt_8)))
   (StartInt_2 Int (1 (str.indexof Start_3 Start_8 StartInt_4)))
   (StartBool_1 Bool (true false (str.< Start_2 Start_6) (str.prefixof Start_5 Start_5) (str.suffixof Start_6 Start_3) (str.contains Start_2 Start_1) (= Start_4 Start_4)))
   (StartInt_5 Int (0 1 (str.indexof Start_4 Start_4 StartInt_2)))
   (Start_15 String (y (str.at Start_15 StartInt_1) (str.from_int StartInt_8)))
   (StartInt_3 Int (1 0 (str.indexof Start_7 Start_2 StartInt_3) (str.to_int Start_4)))
   (Start_5 String ("b" "0" (str.at Start_6 StartInt_1) (str.from_int StartInt_3)))
   (Start_10 String ("1" "0" "a" "b" x "" (str.++ Start_6 Start_4) (ite StartBool Start_4 Start_9)))
   (Start_7 String ("0" y "a" "b" (str.substr Start StartInt_4 StartInt_2) (str.replace Start_6 Start_5 Start_3) (ite StartBool_1 Start_5 Start)))
   (Start_6 String ("1" (str.at Start_4 StartInt_2) (str.replace Start_4 Start_4 Start_2) (ite StartBool Start_5 Start_6)))
   (StartInt_8 Int (0 1 (str.indexof Start_13 Start StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start_3) (str.indexof Start_5 Start_6 StartInt_5)))
   (Start_12 String (y "0" (str.substr Start_16 StartInt_1 StartInt_8) (ite StartBool_1 Start_5 Start_3)))
   (Start_2 String (y (str.at Start_3 StartInt_1) (str.substr Start StartInt_2 StartInt) (str.replace Start Start_4 Start_1)))
   (Start_4 String (y "0" (str.++ Start_5 Start_6) (str.at Start_6 StartInt_1) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_2 Start_4 Start_3)))
   (Start_8 String ("0" (str.at Start_6 StartInt_1) (ite StartBool_2 Start_2 Start_3)))
   (StartBool_3 Bool (false (not StartBool_3) (str.< Start_6 Start_2) (str.<= Start Start_6) (str.prefixof Start Start_1) (str.contains Start_3 Start_2) (= Start_8 Start_3) (= StartInt_5 StartInt) (<= StartInt_4 StartInt_1)))
   (Start_3 String ("0" (str.++ Start Start_8) (str.substr Start_4 StartInt StartInt_4) (ite StartBool Start_6 Start)))
   (Start_13 String ("0" (str.at Start_9 StartInt) (str.substr Start_3 StartInt_6 StartInt_4)))
   (Start_1 String ("a" y "" (str.++ Start_7 Start_3) (str.replace Start_7 Start_9 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_8 Start_10)))
   (Start_9 String ("b" "1" "" "0" x "a" y (str.++ Start_11 Start_8) (str.at Start_12 StartInt_4) (str.replace Start_13 Start_3 Start_2) (ite StartBool_2 Start_13 Start_3)))
   (StartBool_2 Bool (true (not StartBool_3) (str.< Start Start_6) (= Start_6 Start_3)))
   (StartInt_6 Int (0 1 (str.len Start_14) (str.indexof Start_8 Start_14 StartInt_1) (str.to_int Start_7)))
   (Start_14 String ("a" (str.replace Start_1 Start_15 Start_14) (str.from_int StartInt_7) (ite StartBool Start_7 Start_6)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_9 StartInt_3)))
   (StartInt_7 Int (0 (str.indexof Start_9 Start StartInt_5) (str.to_int Start_6)))
   (Start_16 String ("1" (str.++ Start_4 Start_15) (str.from_int StartInt_6)))
   (Start_11 String ("" x "0" y "b" (str.substr Start_4 StartInt_6 StartInt_4) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "a" x) "1" "b")))

(check-synth)
