(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_3 Int) (Start_2 String) (StartInt_1 Int) (Start_4 String) (StartInt_4 Int) (Start_3 String) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_2 Bool) (Start_5 String) (Start_7 String) (Start_6 String) (StartInt_5 Int) (Start_1 String))
  ((Start String (x "0" (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start_1 Start) (ite StartBool Start_2 Start_1)))
   (StartInt Int (0 (str.len Start_5)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.< Start_6 Start_1) (str.prefixof Start_5 Start_5) (str.suffixof Start Start_7)))
   (StartBool_3 Bool (true (str.<= Start Start_4) (str.prefixof Start_6 Start_6) (str.suffixof Start_6 Start_7) (str.contains Start_5 Start) (= Start_6 Start_7) (= StartInt_1 StartInt_3)))
   (StartInt_3 Int (0 1 (str.len Start_4)))
   (Start_2 String ("0" y "1" (str.at Start_2 StartInt) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_3 Start_3 Start_1) (str.from_int StartInt_1)))
   (StartInt_1 Int (1 (str.len Start_5) (str.indexof Start_3 Start_5 StartInt)))
   (Start_4 String ("b" "0" "a" (str.++ Start_5 Start_1) (str.substr Start_6 StartInt StartInt_2) (str.from_int StartInt_2)))
   (StartInt_4 Int (1 (str.len Start_5)))
   (Start_3 String ("a" (str.replace Start_1 Start_4 Start_3)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool) (str.< Start Start_5) (str.<= Start_2 Start_4) (str.contains Start_5 Start_2) (= StartInt StartInt)))
   (StartInt_2 Int (0 (str.len Start_6) (str.to_int Start_1)))
   (StartBool_2 Bool (false (str.<= Start_6 Start_1) (str.prefixof Start_4 Start_3) (str.suffixof Start_3 Start_6) (str.contains Start_1 Start_6) (= StartInt_4 StartInt)))
   (Start_5 String ("b" "" "1" y x "a" (str.++ Start_3 Start_3) (str.at Start StartInt_4) (str.substr Start_6 StartInt_5 StartInt_2)))
   (Start_7 String ("1" (str.at Start_2 StartInt_2) (str.substr Start_4 StartInt_5 StartInt_2) (str.replace Start Start_7 Start_7)))
   (Start_6 String ("" (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_5)))
   (StartInt_5 Int (0 1))
   (Start_1 String (x (str.++ Start_4 Start_1) (str.at Start_5 StartInt_4) (ite StartBool_3 Start_7 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (<= (str.indexof "0" x 0) 1) "0" y)))

(check-synth)
