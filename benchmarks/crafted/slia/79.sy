(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_21 String) (Start_20 String) (Start_17 String) (StartInt_2 Int) (Start_14 String) (StartBool_1 Bool) (Start_7 String) (StartBool_4 Bool) (Start_2 String) (Start_5 String) (Start_3 String) (Start_1 String) (Start_19 String) (Start_16 String) (StartBool_3 Bool) (Start_18 String) (StartInt_3 Int) (StartInt_1 Int) (Start_6 String) (Start_11 String) (StartInt_7 Int) (StartBool_6 Bool) (StartInt_5 Int) (Start_10 String) (StartInt_6 Int) (Start_4 String) (Start_12 String) (Start_9 String) (StartBool_5 Bool) (Start_8 String) (Start_13 String) (Start_15 String) (StartInt_4 Int) (StartBool_2 Bool))
  ((Start String (x (str.substr Start StartInt StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_13) (str.indexof Start_11 Start_14 StartInt)))
   (StartBool Bool (true false (not StartBool) (str.< Start_10 Start_12) (str.<= Start_2 Start_12) (str.suffixof Start_10 Start_16) (= Start_5 Start_2) (<= StartInt_4 StartInt_6)))
   (Start_21 String ("" y (str.++ Start_4 Start_20) (str.replace Start_7 Start_8 Start_16)))
   (Start_20 String ("0" x "1" y (str.++ Start_11 Start_9) (str.at Start_4 StartInt_1) (str.replace Start_14 Start_17 Start_6) (ite StartBool_3 Start_15 Start_18)))
   (Start_17 String ("0" (str.++ Start_4 Start_18) (str.at Start_19 StartInt_5) (str.substr Start_17 StartInt_3 StartInt_5) (str.replace Start_16 Start_9 Start_3) (str.from_int StartInt_3)))
   (StartInt_2 Int (1 (str.indexof Start_6 Start_6 StartInt_3) (str.to_int Start)))
   (Start_14 String (y "" "b" "0" "a" x (str.++ Start_3 Start) (str.at Start StartInt) (str.substr Start_15 StartInt_1 StartInt_4) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_8)))
   (StartBool_1 Bool (false (not StartBool_2) (str.< Start_4 Start) (str.<= Start Start_1) (str.prefixof Start Start_1) (= Start_5 Start_5) (= StartInt StartInt_2)))
   (Start_7 String ("b" "1" (str.++ Start_1 Start_1) (str.replace Start_3 Start_8 Start_9) (str.from_int StartInt_2) (ite StartBool_3 Start_4 Start_6)))
   (StartBool_4 Bool (true (not StartBool_5) (str.<= Start_5 Start_4) (str.prefixof Start_5 Start_5) (str.suffixof Start_3 Start_1) (str.contains Start_4 Start_10) (= StartInt_3 StartInt_5)))
   (Start_2 String ("a" (str.++ Start_3 Start_3) (str.replace Start_1 Start Start_3)))
   (Start_5 String ("1" "a" (str.++ Start_12 Start_1) (str.at Start_8 StartInt) (str.substr Start_14 StartInt_6 StartInt_3) (str.replace Start_12 Start_3 Start_14) (str.from_int StartInt_4) (ite StartBool_3 Start_4 Start_15)))
   (Start_3 String ("0" (str.at Start_2 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt)))
   (Start_1 String (x "b" "1" "0" (str.at Start_2 StartInt_1) (ite StartBool_1 Start_2 Start)))
   (Start_19 String (y "1" (str.++ Start_18 Start_19) (str.at Start_12 StartInt_6) (str.substr Start_12 StartInt_7 StartInt_1) (ite StartBool_6 Start_16 Start_20)))
   (Start_16 String ("b" "" (str.++ Start_9 Start_16) (str.substr Start_9 StartInt_3 StartInt) (str.replace Start_5 Start_6 Start_10) (ite StartBool_2 Start_17 Start_7)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_4 StartBool_4) (str.prefixof Start_5 Start_4) (str.contains Start_9 Start) (= Start_6 Start_9) (= StartInt_2 StartInt_3) (<= StartInt_2 StartInt_3)))
   (Start_18 String ("b" y (ite StartBool Start_14 Start)))
   (StartInt_3 Int (0))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_3 Start StartInt_1) (str.to_int Start)))
   (Start_6 String ("" (str.++ Start_3 Start_6) (str.at Start_6 StartInt_4) (str.substr Start_3 StartInt_1 StartInt_2)))
   (Start_11 String (x "" "a" "0"))
   (StartInt_7 Int (1 (str.len Start_21)))
   (StartBool_6 Bool (false (str.< Start_1 Start_5) (str.prefixof Start_15 Start_7) (str.suffixof Start_7 Start) (= StartInt_5 StartInt_5) (<= StartInt_4 StartInt_1)))
   (StartInt_5 Int (0 1 (str.to_int Start_5)))
   (Start_10 String (x "0" y (str.++ Start_1 Start_7) (str.substr Start_7 StartInt_3 StartInt) (str.from_int StartInt_1)))
   (StartInt_6 Int (0 1 (str.len Start_12) (str.indexof Start_13 Start_7 StartInt_1) (str.to_int Start_8)))
   (Start_4 String (x (str.at Start_10 StartInt_5) (str.substr Start_10 StartInt_2 StartInt_5) (str.replace Start_4 Start_8 Start_4) (ite StartBool_5 Start_13 Start_4)))
   (Start_12 String ("0" (str.++ Start_11 Start_8) (str.at Start_8 StartInt_3) (str.substr Start StartInt_5 StartInt_3) (str.replace Start_2 Start_4 Start_9) (ite StartBool_1 Start_13 Start_10)))
   (Start_9 String ("" "b" x "1" (str.++ Start_3 Start) (ite StartBool Start_7 Start_7)))
   (StartBool_5 Bool (false true (str.suffixof Start_6 Start_11) (= StartInt StartInt_4)))
   (Start_8 String ("a" "1" (str.++ Start_12 Start_9) (str.from_int StartInt_1) (ite StartBool_3 Start_1 Start_10)))
   (Start_13 String ("1" (ite StartBool_4 Start_12 Start_8)))
   (Start_15 String ("b" "a" (str.++ Start Start_13) (str.replace Start_10 Start_2 Start_12) (str.from_int StartInt_1)))
   (StartInt_4 Int (1 0 (str.indexof Start_4 Start_4 StartInt) (str.to_int Start_7)))
   (StartBool_2 Bool (true false (not StartBool_6) (str.suffixof Start_8 Start_4) (= Start_6 Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" (str.at x 1) "b")))

(check-synth)
