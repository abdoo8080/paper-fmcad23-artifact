(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_15 String) (StartInt_1 Int) (Start_10 String) (StartInt_3 Int) (StartInt_2 Int) (StartBool_1 Bool) (StartBool_6 Bool) (Start_9 String) (Start_3 String) (StartBool_2 Bool) (Start_7 String) (Start_4 String) (Start_6 String) (Start_1 String) (StartInt_7 Int) (Start_8 String) (Start_11 String) (Start_13 String) (StartInt_4 Int) (StartBool_3 Bool) (Start_5 String) (Start_2 String) (StartBool_4 Bool) (StartBool_5 Bool) (StartInt_5 Int) (StartInt_6 Int) (Start_14 String) (Start_16 String))
  ((Start String ("a" (str.at Start_1 StartInt)))
   (StartInt Int (1 (str.len Start) (str.indexof Start_10 Start_4 StartInt_2)))
   (StartBool Bool (false true (str.<= Start Start_12) (str.prefixof Start_2 Start_9) (str.suffixof Start_13 Start_8) (<= StartInt_5 StartInt_6)))
   (Start_12 String ("1" "0" (str.++ Start_4 Start_3) (str.from_int StartInt_6)))
   (Start_15 String ("" "b" "a" "0" y x "1" (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt_7 StartInt_4) (str.replace Start_9 Start_4 Start_2) (ite StartBool Start_9 Start_14)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_4 Start_3 StartInt)))
   (Start_10 String ("1" y "0" (str.at Start_4 StartInt_2) (ite StartBool Start Start_10)))
   (StartInt_3 Int (0 1))
   (StartInt_2 Int (0 1 (str.len Start_8) (str.indexof Start_1 Start_1 StartInt_1)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (str.< Start_10 Start) (str.<= Start_11 Start_3) (str.contains Start_10 Start_2)))
   (StartBool_6 Bool (true false (not StartBool) (and StartBool_4 StartBool_1) (str.< Start_14 Start_12) (str.<= Start_10 Start_7) (str.contains Start_16 Start_5) (= Start Start_7)))
   (Start_9 String ("0" y (str.++ Start_10 Start_3) (str.substr Start_5 StartInt_2 StartInt_3) (str.replace Start Start_2 Start_5) (str.from_int StartInt_3)))
   (Start_3 String ("1" "b" "a" (str.at Start StartInt_1) (str.replace Start_3 Start_2 Start_1) (ite StartBool Start_2 Start_3)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_3 StartBool) (str.< Start_1 Start_1) (str.<= Start_1 Start) (str.prefixof Start_7 Start_8) (= Start_5 Start_5) (= StartInt StartInt)))
   (Start_7 String ("0" "b" x "a" "1" (str.++ Start_7 Start_10) (str.at Start_1 StartInt_2) (str.substr Start_7 StartInt_3 StartInt_4) (ite StartBool_2 Start_11 Start_10)))
   (Start_4 String ("b" (str.++ Start_1 Start_5) (str.replace Start_6 Start_5 Start_2) (str.from_int StartInt)))
   (Start_6 String ("a" "b" "1" (ite StartBool_2 Start_2 Start)))
   (Start_1 String (y (str.++ Start Start) (str.at Start_2 StartInt) (str.from_int StartInt) (ite StartBool_1 Start Start_3)))
   (StartInt_7 Int (0 (str.len Start_8) (str.indexof Start_2 Start_3 StartInt_5)))
   (Start_8 String (x (str.replace Start_7 Start_9 Start_9) (ite StartBool Start_8 Start_5)))
   (Start_11 String ("a" y (str.++ Start_8 Start_4) (str.replace Start Start_5 Start_7) (ite StartBool_1 Start_7 Start_11)))
   (Start_13 String (y (str.substr Start_3 StartInt_7 StartInt_5) (str.replace Start_9 Start_14 Start_6) (str.from_int StartInt_2)))
   (StartInt_4 Int (1 (str.len Start_8) (str.to_int Start_7)))
   (StartBool_3 Bool (true (and StartBool StartBool_1) (str.< Start_6 Start) (str.suffixof Start_8 Start_4) (= StartInt_1 StartInt_3) (<= StartInt_3 StartInt_1)))
   (Start_5 String ("1" x "a" "" y "b" "0" (str.at Start_11 StartInt_2) (str.replace Start_6 Start_7 Start_11) (str.from_int StartInt)))
   (Start_2 String ("" "b" (str.++ Start_9 Start_10) (ite StartBool_4 Start_9 Start)))
   (StartBool_4 Bool (true (and StartBool_5 StartBool_5) (str.< Start_1 Start_8) (str.prefixof Start_10 Start_8) (str.suffixof Start_1 Start_10) (<= StartInt_3 StartInt)))
   (StartBool_5 Bool (true false (not StartBool_1) (str.< Start_3 Start_6) (str.prefixof Start_10 Start_4) (= Start_5 Start_10) (= StartInt_1 StartInt_3)))
   (StartInt_5 Int (0 1 (str.len Start_6) (str.indexof Start_5 Start_2 StartInt_6)))
   (StartInt_6 Int (1 0 (str.to_int Start_12)))
   (Start_14 String ("b" (str.at Start_5 StartInt_6) (str.substr Start_15 StartInt StartInt_3) (str.from_int StartInt_2) (ite StartBool_6 Start_7 Start_14)))
   (Start_16 String ("0" (str.replace Start_14 Start_12 Start_16) (str.from_int StartInt_5) (ite StartBool_1 Start_11 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y "1")))

(check-synth)
