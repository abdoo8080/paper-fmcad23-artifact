(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (Start_18 String) (StartBool_5 Bool) (Start_10 String) (StartInt_5 Int) (Start_5 String) (StartBool_4 Bool) (StartInt_7 Int) (StartInt_2 Int) (Start_9 String) (Start_6 String) (StartInt_3 Int) (StartInt_1 Int) (Start_7 String) (StartBool_3 Bool) (Start_4 String) (Start_14 String) (Start_8 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_6 Int) (Start_3 String) (Start_11 String) (Start_1 String) (Start_13 String) (Start_16 String) (Start_2 String) (StartBool_2 Bool) (StartInt_8 Int) (Start_12 String) (Start_15 String) (Start_17 String))
  ((Start String ("" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.replace Start_3 Start_4 Start_1) (ite StartBool_1 Start_5 Start)))
   (StartInt Int (0 1 (str.len Start_3) (str.indexof Start_18 Start_7 StartInt_3) (str.to_int Start)))
   (StartBool Bool (false true (and StartBool_1 StartBool_2) (str.< Start_1 Start_2) (str.<= Start_1 Start_19) (str.contains Start_9 Start_4) (= Start_10 Start_4)))
   (Start_19 String ("a" "b" (str.++ Start_14 Start_8) (str.replace Start_13 Start_16 Start_13) (str.from_int StartInt_4)))
   (Start_18 String (y (str.++ Start_18 Start_5) (str.at Start_3 StartInt_2) (str.substr Start_7 StartInt_4 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_16 Start_3)))
   (StartBool_5 Bool (true false (not StartBool_3) (str.<= Start_14 Start_8) (str.prefixof Start Start_13) (str.suffixof Start_14 Start_10) (str.contains Start_3 Start_3) (= StartInt StartInt_8)))
   (Start_10 String ("" "0" (str.++ Start_7 Start_2) (str.substr Start_8 StartInt_2 StartInt_5) (ite StartBool Start_6 Start)))
   (StartInt_5 Int (0 1 (str.len Start_2)))
   (Start_5 String (x "b" (str.++ Start_2 Start_4) (str.substr Start_1 StartInt StartInt_1) (ite StartBool Start Start)))
   (StartBool_4 Bool (true false (not StartBool) (str.<= Start_9 Start_9) (str.prefixof Start_10 Start_11) (= StartInt_4 StartInt_5) (<= StartInt_3 StartInt_6)))
   (StartInt_7 Int (1 (str.len Start_5) (str.to_int Start_2)))
   (StartInt_2 Int (1 0 (str.indexof Start_4 Start_3 StartInt_2)))
   (Start_9 String ("a" (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_2 Start_11 Start) (ite StartBool_4 Start_11 Start)))
   (Start_6 String (x (str.++ Start_3 Start_6) (str.at Start StartInt) (str.replace Start_5 Start_5 Start_7) (str.from_int StartInt) (ite StartBool_2 Start_7 Start_3)))
   (StartInt_3 Int (0 1 (str.indexof Start_11 Start_7 StartInt_6) (str.to_int Start_13)))
   (StartInt_1 Int (0 (str.len Start_2) (str.to_int Start)))
   (Start_7 String ("b" x "1" "a" "0" (str.++ Start_2 Start_9) (str.at Start_2 StartInt_3) (ite StartBool_3 Start_5 Start_8)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_1) (str.< Start_1 Start) (str.contains Start_8 Start_7) (= Start_6 Start_4) (= StartInt_4 StartInt_1) (<= StartInt_1 StartInt_5)))
   (Start_4 String ("1" (str.substr Start_8 StartInt_2 StartInt_4)))
   (Start_14 String (x (str.++ Start_12 Start_7) (str.at Start_5 StartInt_5) (str.substr Start_9 StartInt_5 StartInt_4) (str.replace Start_10 Start_6 Start_3) (ite StartBool Start_9 Start_14)))
   (Start_8 String ("1" "" (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (str.< Start_6 Start) (str.suffixof Start_4 Start_4) (= Start_2 Start_3)))
   (StartInt_4 Int (1 0 (str.len Start_8) (str.indexof Start_10 Start_7 StartInt) (str.to_int Start_7)))
   (StartInt_6 Int (1 (str.len Start_7) (str.indexof Start_2 Start_2 StartInt_4) (str.to_int Start_1)))
   (Start_3 String ("" "a" y "1" (str.++ Start_12 Start_11) (str.substr Start_4 StartInt StartInt_7) (str.from_int StartInt_6)))
   (Start_11 String (y (str.++ Start_8 Start_9) (str.at Start_12 StartInt_3) (str.substr Start StartInt_1 StartInt_5) (str.from_int StartInt_6) (ite StartBool_3 Start_13 Start_9)))
   (Start_1 String ("1" "" "0" y "a" (str.++ Start_18 Start_17) (str.replace Start_8 Start_12 Start_17) (str.from_int StartInt_6) (ite StartBool_5 Start_3 Start_14)))
   (Start_13 String ("a" (str.at Start_5 StartInt_4) (str.replace Start_6 Start_10 Start_5) (str.from_int StartInt_3)))
   (Start_16 String ("b" (str.++ Start_17 Start_17) (str.replace Start_1 Start_4 Start_5) (ite StartBool_2 Start_16 Start_6)))
   (Start_2 String (x "a" (str.at Start_6 StartInt_1) (str.from_int StartInt_5) (ite StartBool_1 Start_15 Start_9)))
   (StartBool_2 Bool (false (not StartBool_2) (str.< Start_2 Start_5) (str.prefixof Start_2 Start_5) (str.suffixof Start_3 Start_6) (str.contains Start_5 Start_8) (<= StartInt_2 StartInt_2)))
   (StartInt_8 Int (1 (str.indexof Start_2 Start_6 StartInt_1)))
   (Start_12 String (x y (str.++ Start_10 Start_14) (str.replace Start_6 Start_5 Start_12)))
   (Start_15 String ("b" "1" "" "0" "a" (str.substr Start_8 StartInt_1 StartInt_4) (str.replace Start_14 Start_16 Start_7)))
   (Start_17 String ("b" "a" x "1" "" y "0" (str.++ Start_3 Start_15) (str.at Start_9 StartInt_5) (str.substr Start_18 StartInt_1 StartInt_8) (ite StartBool Start_8 Start_18)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y "0")))

(check-synth)
