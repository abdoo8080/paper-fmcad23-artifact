(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_9 String) (Start_11 String) (Start_10 String) (Start_2 String) (Start_8 String) (Start_3 String) (StartInt_1 Int) (Start_1 String) (Start_12 String) (StartBool_2 Bool) (StartInt_4 Int) (Start_4 String) (Start_5 String) (StartBool_1 Bool) (Start_6 String) (StartBool_3 Bool) (StartInt_3 Int) (StartInt_5 Int) (StartInt_2 Int) (Start_7 String))
  ((Start String ("0" (str.substr Start StartInt_1 StartInt)))
   (StartInt Int (0 1 (str.indexof Start_9 Start_10 StartInt_4)))
   (StartBool Bool (true false (not StartBool) (and StartBool_1 StartBool_3) (str.<= Start_7 Start_7) (str.suffixof Start_9 Start_12) (str.contains Start_8 Start_2) (= Start_7 Start_4) (= StartInt_6 StartInt_6)))
   (StartInt_6 Int (0 1))
   (Start_9 String ("" (str.++ Start Start_2) (str.replace Start_9 Start_12 Start_11) (str.from_int StartInt_2)))
   (Start_11 String ("0" "b" (str.substr Start_11 StartInt StartInt_5) (str.from_int StartInt)))
   (Start_10 String (y "1" "" (str.++ Start_11 Start_9) (str.replace Start_1 Start_11 Start_10)))
   (Start_2 String ("" (str.++ Start_2 Start_3) (str.substr Start_6 StartInt_2 StartInt_3)))
   (Start_8 String ("0" (str.at Start_2 StartInt_3) (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool Start_7 Start_5)))
   (Start_3 String ("b" (str.replace Start_3 Start_2 Start_4) (ite StartBool_2 Start_4 Start)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_1 Start_1 StartInt)))
   (Start_1 String ("" (str.++ Start_2 Start_1) (str.at Start_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (Start_12 String ("b" (str.++ Start_11 Start_8) (str.from_int StartInt_3) (ite StartBool_3 Start_11 Start_7)))
   (StartBool_2 Bool (false (str.<= Start_5 Start_4) (str.prefixof Start_1 Start_1) (str.suffixof Start_4 Start_4) (= Start_1 Start_5) (<= StartInt StartInt_1)))
   (StartInt_4 Int (1 (str.indexof Start_2 Start_2 StartInt_4) (str.to_int Start_6)))
   (Start_4 String ("0" (str.++ Start Start_6)))
   (Start_5 String (y "0" x (ite StartBool_2 Start Start_2)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.<= Start_3 Start_7) (= StartInt_2 StartInt_2)))
   (Start_6 String ("1" (str.substr Start StartInt_1 StartInt_2) (ite StartBool_3 Start_1 Start_5)))
   (StartBool_3 Bool (false true (str.<= Start_2 Start_3) (str.prefixof Start_6 Start_4) (str.suffixof Start_4 Start_5) (= Start_5 Start_2) (= StartInt StartInt_3) (<= StartInt_2 StartInt_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_6 Start_1 StartInt_3) (str.to_int Start_3)))
   (StartInt_5 Int (0 1 (str.indexof Start_4 Start_10 StartInt) (str.to_int Start)))
   (StartInt_2 Int (1 (str.to_int Start_4)))
   (Start_7 String ("0" "1" (str.++ Start_8 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "b" y) y "0")))

(check-synth)
