(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_9 Int) (Start_1 String) (Start_6 String) (StartInt_8 Int) (StartInt_6 Int) (StartInt_7 Int) (Start_10 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_5 String) (Start_2 String) (Start_4 String) (StartInt_1 Int) (StartInt_2 Int) (Start_7 String) (Start_8 String) (StartInt_4 Int) (StartInt_3 Int) (Start_3 String) (StartBool_3 Bool) (StartInt_10 Int) (Start_9 String))
  ((Start String ("" y (str.replace Start Start Start) (ite StartBool_1 Start Start)))
   (StartInt Int (0 1 (str.len Start_8) (str.indexof Start_4 Start_8 StartInt_6)))
   (StartBool Bool (true false (and StartBool StartBool_3) (str.< Start_8 Start_9) (str.<= Start Start) (str.suffixof Start_1 Start_1) (str.contains Start_7 Start_5) (= Start_10 Start_7) (= StartInt_10 StartInt_8) (<= StartInt_1 StartInt_4)))
   (StartBool_2 Bool (true false (= StartInt_4 StartInt_7) (<= StartInt_7 StartInt_1)))
   (StartInt_9 Int (0 (str.indexof Start_10 Start_9 StartInt_9)))
   (Start_1 String (x "1" "" (str.++ Start_4 Start_4) (str.at Start_5 StartInt_5) (str.replace Start_7 Start_6 Start_10) (str.from_int StartInt_9) (ite StartBool_3 Start_6 Start_3)))
   (Start_6 String ("0" "" (str.++ Start_6 Start_6) (str.at Start StartInt_5) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt) (ite StartBool_3 Start_6 Start_5)))
   (StartInt_8 Int (1 (str.len Start_1) (str.indexof Start Start_1 StartInt_1) (str.to_int Start)))
   (StartInt_6 Int (1 0 (str.to_int Start_3)))
   (StartInt_7 Int (0 (str.len Start_9) (str.indexof Start_6 Start_9 StartInt_6) (str.to_int Start_1)))
   (Start_10 String ("a" (str.++ Start Start_5) (str.at Start_9 StartInt_6) (str.substr Start_4 StartInt_7 StartInt_6) (str.replace Start_9 Start_7 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_6)))
   (StartInt_5 Int (1 0 (str.len Start_9)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_2 StartBool_1) (str.< Start Start_1) (str.<= Start Start_2) (= Start_1 Start_2) (<= StartInt StartInt_1)))
   (Start_5 String (y (str.substr Start_1 StartInt_8 StartInt_7) (str.from_int StartInt_1)))
   (Start_2 String ("0" (str.++ Start_2 Start) (str.at Start_3 StartInt_2) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_3 Start_3 Start) (str.from_int StartInt_2)))
   (Start_4 String ("" (str.replace Start_5 Start_6 Start_1) (ite StartBool_3 Start_7 Start_7)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start Start_1 StartInt_1) (str.to_int Start_1)))
   (StartInt_2 Int (0))
   (Start_7 String (y (str.substr Start_2 StartInt_2 StartInt_3) (str.replace Start_1 Start_4 Start_6) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start)))
   (Start_8 String ("" (str.at Start StartInt_3) (str.replace Start_6 Start_1 Start_2) (ite StartBool_3 Start_7 Start_6)))
   (StartInt_4 Int (0 (str.len Start_5) (str.indexof Start_1 Start_1 StartInt_1) (str.to_int Start_6)))
   (StartInt_3 Int (0 1 (str.len Start_8)))
   (Start_3 String (x "0" (str.at Start_3 StartInt_1) (str.replace Start_3 Start_4 Start_2)))
   (StartBool_3 Bool (true false (str.< Start_1 Start_7) (str.<= Start_9 Start_6) (str.prefixof Start_2 Start_1) (str.contains Start_9 Start_5) (= StartInt StartInt_1)))
   (StartInt_10 Int (1))
   (Start_9 String ("1" (str.++ Start_3 Start_1) (str.at Start_5 StartInt_1) (str.substr Start_6 StartInt_1 StartInt_4) (str.replace Start_10 Start_9 Start) (str.from_int StartInt_5) (ite StartBool_3 Start_1 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at "0" (str.to_int y)) "0")))

(check-synth)
