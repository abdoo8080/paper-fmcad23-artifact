(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartBool_3 Bool) (Start_11 String) (Start_1 String) (StartInt_5 Int) (Start_10 String) (Start_3 String) (StartInt_2 Int) (Start_12 String) (Start_2 String) (StartInt_1 Int) (StartInt_6 Int) (StartInt_3 Int) (StartInt_4 Int) (Start_4 String) (Start_7 String) (Start_6 String) (Start_8 String) (Start_5 String) (StartBool_1 Bool) (Start_9 String))
  ((Start String ("" (str.at Start_1 StartInt) (str.substr Start StartInt StartInt) (str.replace Start_2 Start_2 Start)))
   (StartInt Int (1 (str.indexof Start_4 Start StartInt_4)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_1 StartBool_3) (str.prefixof Start Start_4) (str.contains Start_3 Start_4) (= Start_6 Start_2) (= StartInt_6 StartInt_2)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_2 StartBool) (str.< Start_4 Start_6) (str.prefixof Start_1 Start_8) (str.suffixof Start_7 Start_1) (str.contains Start_5 Start_4) (<= StartInt_3 StartInt_6)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_1) (str.suffixof Start_5 Start_7) (str.contains Start_9 Start) (= Start_2 Start_6) (<= StartInt_4 StartInt)))
   (Start_11 String ("1" y x (str.++ Start_12 Start_4) (str.at Start StartInt_2)))
   (Start_1 String ("a" x (str.++ Start Start_9) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_5 Start_10 Start_11) (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start_9)))
   (StartInt_5 Int (1 (str.len Start_2) (str.to_int Start_1)))
   (Start_10 String ("a" (str.at Start_5 StartInt_3) (str.substr Start_8 StartInt StartInt_5)))
   (Start_3 String (x (str.at Start_6 StartInt_3) (str.substr Start_10 StartInt_3 StartInt_2) (str.replace Start_7 Start_10 Start_6) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 0))
   (Start_12 String (y "b" x "" "0" "a" (str.substr Start_8 StartInt_6 StartInt_1) (str.replace Start_8 Start_12 Start_5) (ite StartBool Start Start_2)))
   (Start_2 String ("b" "1" (str.++ Start_3 Start_2) (str.replace Start Start_2 Start_1) (str.from_int StartInt_1) (ite StartBool Start_2 Start_3)))
   (StartInt_1 Int (1 (str.indexof Start Start StartInt) (str.to_int Start_4)))
   (StartInt_6 Int (0 1 (str.indexof Start_12 Start_9 StartInt_1) (str.to_int Start_10)))
   (StartInt_3 Int (0 1 (str.to_int Start)))
   (StartInt_4 Int (1 0 (str.indexof Start_7 Start_1 StartInt)))
   (Start_4 String ("a" (str.substr Start StartInt_1 StartInt_2) (str.replace Start_3 Start_5 Start_6)))
   (Start_7 String ("a" "1" (str.replace Start_1 Start_6 Start_3) (ite StartBool_1 Start_4 Start_6)))
   (Start_6 String ("" "b" "1" (str.substr Start_3 StartInt StartInt_3) (str.replace Start_5 Start_2 Start_2) (str.from_int StartInt)))
   (Start_8 String ("0" (str.++ Start_3 Start_5) (str.substr Start_4 StartInt_3 StartInt_3) (ite StartBool Start_9 Start_3)))
   (Start_5 String ("" (str.replace Start_5 Start_6 Start_5) (str.from_int StartInt_4)))
   (StartBool_1 Bool (true (str.< Start_4 Start_2) (str.<= Start_2 Start_8) (str.suffixof Start Start_8)))
   (Start_9 String ("0" "1" (str.at Start_1 StartInt) (str.substr Start_6 StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "b" x) "1" y)))

(check-synth)
