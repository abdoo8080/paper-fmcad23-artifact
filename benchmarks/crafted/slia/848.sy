(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_6 Int) (Start_7 String) (StartInt_5 Int) (Start_9 String) (Start_10 String) (Start_8 String) (Start_2 String) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_2 Bool) (Start_5 String) (StartInt_3 Int) (StartInt_4 Int) (Start_4 String) (Start_3 String) (Start_6 String) (StartInt_1 Int) (Start_1 String))
  ((Start String ("1" (str.replace Start Start_1 Start_2) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0 1 (str.indexof Start Start_2 StartInt)))
   (StartBool Bool (false (not StartBool_3) (str.< Start_7 Start_5) (str.<= Start_8 Start_4) (str.prefixof Start_7 Start_5)))
   (StartBool_3 Bool (true (not StartBool_1) (str.<= Start_10 Start_4) (str.contains Start_7 Start_2) (= Start_10 Start_3)))
   (StartInt_6 Int (0 (str.indexof Start Start StartInt_3)))
   (Start_7 String ("b" y "1" x "" (str.substr Start_5 StartInt_1 StartInt_6) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 0 (str.to_int Start_9)))
   (Start_9 String ("1" x (str.++ Start_7 Start_3) (str.at Start_1 StartInt_5) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_9 Start_8 Start_1) (str.from_int StartInt_1)))
   (Start_10 String ("b" (str.++ Start_1 Start_5) (str.at Start_10 StartInt_1)))
   (Start_8 String ("" (str.at Start_7 StartInt_1) (str.replace Start_2 Start_4 Start_7) (str.from_int StartInt_4) (ite StartBool_2 Start_6 Start_1)))
   (Start_2 String (x (str.++ Start_2 Start) (str.at Start_4 StartInt_3) (str.replace Start_2 Start_4 Start_5) (str.from_int StartInt_3) (ite StartBool_2 Start_1 Start_4)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool StartBool_2) (str.< Start_1 Start_2) (str.<= Start_2 Start_1) (str.prefixof Start Start_2) (str.suffixof Start_1 Start_2) (= Start_2 Start_2) (= StartInt StartInt_1) (<= StartInt_2 StartInt_1)))
   (StartInt_2 Int (1 (str.len Start) (str.to_int Start_3)))
   (StartBool_2 Bool (true false (not StartBool) (str.< Start_3 Start_2) (str.contains Start_1 Start_1) (= Start Start_1) (<= StartInt_1 StartInt_1)))
   (Start_5 String ("0" "1" (str.substr Start_2 StartInt StartInt) (str.replace Start Start_3 Start_3)))
   (StartInt_3 Int (0 (str.to_int Start)))
   (StartInt_4 Int (0 1 (str.len Start_8) (str.indexof Start Start_9 StartInt_3)))
   (Start_4 String ("" "0" (str.at Start_3 StartInt_1) (str.replace Start_6 Start_1 Start_2)))
   (Start_3 String ("1" (str.substr Start StartInt StartInt_2)))
   (Start_6 String ("0" y (str.substr Start_2 StartInt_1 StartInt)))
   (StartInt_1 Int (0 (str.indexof Start Start StartInt_2) (str.to_int Start_3)))
   (Start_1 String ("a" (str.++ Start_6 Start_5) (str.replace Start_6 Start_5 Start_6) (ite StartBool Start_3 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof "" x 0))))

(check-synth)
