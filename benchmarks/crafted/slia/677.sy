(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_7 String) (StartInt_4 Int) (Start_8 String) (StartBool_1 Bool) (Start_10 String) (StartInt_3 Int) (StartInt_5 Int) (Start_2 String) (Start_6 String) (StartInt_2 Int) (Start_4 String) (Start_9 String) (StartBool_3 Bool) (StartInt_7 Int) (Start_5 String) (StartInt_1 Int) (StartBool_4 Bool) (Start_3 String) (Start_1 String) (Start_11 String) (StartBool_2 Bool) (StartInt_6 Int) (StartInt_8 Int) (Start_13 String) (StartInt_9 Int) (Start_12 String))
  ((Start String ("0" (str.++ Start_1 Start) (str.at Start StartInt) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_2 Start Start_1)))
   (StartInt Int (1 0 (str.len Start_6) (str.indexof Start_3 Start_10 StartInt_8)))
   (StartBool Bool (true false (not StartBool_4) (str.< Start_3 Start_12) (str.<= Start_7 Start_4) (str.prefixof Start_2 Start_3) (str.suffixof Start_4 Start_10) (= StartInt_9 StartInt_4) (<= StartInt_8 StartInt_2)))
   (StartBool_5 Bool (true (and StartBool_2 StartBool_5) (= StartInt_4 StartInt_2) (<= StartInt_2 StartInt_5)))
   (Start_7 String ("a" "b" (str.++ Start_7 Start_1) (str.at Start_8 StartInt_5) (str.from_int StartInt_2)))
   (StartInt_4 Int (0 (str.len Start_5) (str.indexof Start_6 Start_8 StartInt_4)))
   (Start_8 String (y (str.++ Start_2 Start_2) (str.substr Start_1 StartInt_5 StartInt_2) (str.from_int StartInt_3) (ite StartBool_2 Start_6 Start_6)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_1 StartBool_3) (str.< Start_5 Start_1) (str.<= Start Start_3) (str.prefixof Start_5 Start_1) (str.suffixof Start_4 Start_4) (str.contains Start_1 Start_3)))
   (Start_10 String ("" (str.at Start_3 StartInt_3) (str.substr Start_5 StartInt_4 StartInt_2) (str.replace Start_6 Start_8 Start_10) (ite StartBool_1 Start_7 Start_6)))
   (StartInt_3 Int (1 0 (str.indexof Start_2 Start_3 StartInt) (str.to_int Start)))
   (StartInt_5 Int (0 1 (str.len Start_6) (str.indexof Start_4 Start_2 StartInt_5)))
   (Start_2 String ("0" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (Start_6 String ("0" (str.++ Start_7 Start_1) (str.at Start_9 StartInt_6) (str.replace Start_6 Start_1 Start_5)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_4 Start_2 StartInt_3)))
   (Start_4 String ("" (str.replace Start Start_1 Start) (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start_3)))
   (Start_9 String (x (str.substr Start_1 StartInt_6 StartInt) (str.from_int StartInt_3) (ite StartBool_3 Start_3 Start_8)))
   (StartBool_3 Bool (true (not StartBool) (str.<= Start_7 Start_9) (str.suffixof Start_9 Start_1) (str.contains Start_9 Start_10) (<= StartInt_5 StartInt_2)))
   (StartInt_7 Int (1 0 (str.to_int Start_11)))
   (Start_5 String ("0" (str.++ Start_6 Start_1) (str.at Start_3 StartInt_1) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_7 Start Start_1) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 (str.len Start_2) (str.to_int Start_2)))
   (StartBool_4 Bool (true false (not StartBool_5) (str.<= Start_2 Start_6) (str.prefixof Start_9 Start_13) (= Start_11 Start_1)))
   (Start_3 String ("" y (str.++ Start_1 Start_1) (str.replace Start_3 Start_7 Start_7)))
   (Start_1 String (x (str.at Start_10 StartInt_7) (str.substr Start StartInt_1 StartInt) (str.from_int StartInt_6) (ite StartBool Start_4 Start_11)))
   (Start_11 String (x (str.++ Start_6 Start_8) (str.replace Start_8 Start_2 Start_7) (str.from_int StartInt_2) (ite StartBool_2 Start_11 Start)))
   (StartBool_2 Bool (false (and StartBool StartBool_2) (str.<= Start_1 Start_1) (= Start_4 Start_2) (= StartInt_2 StartInt_1) (<= StartInt StartInt_2)))
   (StartInt_6 Int (0 1 (str.to_int Start_1)))
   (StartInt_8 Int (0 (str.indexof Start_2 Start_10 StartInt_4)))
   (Start_13 String ("b" "" y "1" (str.++ Start_5 Start_1) (str.substr Start StartInt_2 StartInt_7) (str.replace Start_2 Start_13 Start_5) (str.from_int StartInt_3)))
   (StartInt_9 Int (1 (str.indexof Start_4 Start StartInt_8)))
   (Start_12 String ("1" (str.at Start_5 StartInt_2) (str.substr Start_9 StartInt_8 StartInt_1) (str.replace Start_5 Start_10 Start_6) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "0" (str.at x 1) x) (str.replace y "b" "1") x)))

(check-synth)
