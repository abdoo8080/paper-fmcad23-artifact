(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_14 String) (Start_12 String) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_1 Int) (Start_11 String) (Start_6 String) (Start_3 String) (Start_7 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_13 String) (Start_5 String) (StartInt_3 Int) (StartInt_5 Int) (StartBool_4 Bool) (Start_4 String) (StartBool_2 Bool) (Start_8 String) (Start_9 String) (Start_2 String) (Start_10 String))
  ((Start String ("" "b" x "1" "a" y "0" (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_2 Start)))
   (StartInt Int (1 0 (str.len Start_13) (str.indexof Start_4 Start_4 StartInt_5)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_4 StartBool_1) (str.prefixof Start_9 Start_14) (str.suffixof Start_2 Start_6) (str.contains Start Start_8) (= Start_3 Start)))
   (Start_1 String ("a" (str.replace Start_4 Start_4 Start_3) (ite StartBool Start_10 Start_12)))
   (Start_14 String ("b" (str.++ Start_10 Start_8) (str.replace Start_7 Start_10 Start_1) (str.from_int StartInt_2)))
   (Start_12 String (y "a" (str.++ Start_9 Start_2) (str.replace Start_10 Start_5 Start_11) (str.from_int StartInt_5) (ite StartBool_3 Start_3 Start_10)))
   (StartInt_2 Int (1 0 (str.len Start_6)))
   (StartBool_3 Bool (false (not StartBool_1) (str.<= Start_6 Start_4) (str.contains Start_1 Start_7) (= Start_3 Start_9) (= StartInt_1 StartInt)))
   (StartInt_1 Int (1 (str.len Start_6) (str.to_int Start_4)))
   (Start_11 String ("a" (str.at Start_3 StartInt_4) (str.substr Start_1 StartInt_2 StartInt_3) (ite StartBool_2 Start_6 Start_5)))
   (Start_6 String ("" (str.replace Start_1 Start_11 Start) (str.from_int StartInt_3) (ite StartBool_3 Start_1 Start_4)))
   (Start_3 String ("" (str.++ Start_4 Start_6) (str.at Start_6 StartInt) (str.replace Start_5 Start_6 Start_12) (ite StartBool_3 Start_7 Start_5)))
   (Start_7 String ("1" "b" "0" y (str.at Start_8 StartInt_2) (str.substr Start_4 StartInt_3 StartInt_4) (str.replace Start_2 Start_4 Start_8) (str.from_int StartInt_4) (ite StartBool_2 Start_8 Start_6)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_1 StartBool) (str.< Start_2 Start_1) (str.suffixof Start_2 Start) (<= StartInt StartInt_3)))
   (StartInt_4 Int (0 (str.len Start_4) (str.indexof Start_5 Start StartInt_3) (str.to_int Start_8)))
   (Start_13 String ("b" x "" (str.++ Start_1 Start_12) (str.at Start_11 StartInt_4) (str.substr Start_13 StartInt_3 StartInt) (str.replace Start Start_11 Start_4)))
   (Start_5 String ("0" y (str.substr Start_4 StartInt_1 StartInt_3) (str.replace Start_2 Start_3 Start_5) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_3 Int (1 (str.len Start_4) (str.to_int Start_4)))
   (StartInt_5 Int (1 (str.len Start_9) (str.indexof Start_9 Start_1 StartInt_4)))
   (StartBool_4 Bool (true (str.< Start_6 Start_10) (str.<= Start_1 Start_2) (str.prefixof Start_9 Start_7) (str.contains Start_4 Start_11) (<= StartInt_5 StartInt_2)))
   (Start_4 String ("" x (str.substr Start_5 StartInt_1 StartInt_1) (str.from_int StartInt_3) (ite StartBool_2 Start_3 Start_5)))
   (StartBool_2 Bool (false (str.<= Start_6 Start) (str.prefixof Start_6 Start_7) (str.suffixof Start_3 Start_3)))
   (Start_8 String ("" y "0" (str.++ Start_7 Start) (str.substr Start_8 StartInt_5 StartInt) (str.from_int StartInt_4)))
   (Start_9 String ("b" "a" x "" y (str.substr Start StartInt_4 StartInt_5) (str.replace Start_9 Start_10 Start_10) (ite StartBool_1 Start_9 Start_8)))
   (Start_2 String ("" "1" (str.substr Start_3 StartInt_2 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (Start_10 String (x (str.++ Start_11 Start_10) (str.at Start_6 StartInt_1) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof "0" x 1))))

(check-synth)
