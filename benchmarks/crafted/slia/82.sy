(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_1 String) (Start_10 String) (Start_12 String) (StartInt_1 Int) (Start_7 String) (Start_11 String) (StartBool_1 Bool) (Start_16 String) (StartInt_8 Int) (Start_5 String) (Start_6 String) (StartBool_4 Bool) (Start_9 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_4 String) (Start_14 String) (Start_3 String) (StartInt_5 Int) (StartBool_7 Bool) (Start_8 String) (StartInt_7 Int) (StartBool_3 Bool) (StartInt_6 Int) (Start_13 String) (StartInt_2 Int) (StartBool_5 Bool) (StartBool_6 Bool) (StartInt_4 Int) (Start_2 String))
  ((Start String ("1" "0" (str.++ Start_1 Start) (str.replace Start_2 Start_3 Start) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.indexof Start_9 Start_15 StartInt_7)))
   (StartBool Bool (false true (str.prefixof Start_3 Start_9) (str.suffixof Start Start) (= Start_15 Start_15) (= StartInt StartInt_7) (<= StartInt_5 StartInt_3)))
   (Start_15 String ("a" (str.++ Start_10 Start_7) (str.at Start_16 StartInt_8) (str.replace Start_1 Start_7 Start) (ite StartBool Start_12 Start_16)))
   (Start_1 String ("" (str.++ Start_9 Start_3) (str.at Start_13 StartInt_2) (str.replace Start Start_4 Start_3) (str.from_int StartInt_3) (ite StartBool Start_2 Start_10)))
   (Start_10 String ("" "b" (str.substr Start_9 StartInt_3 StartInt_5) (str.from_int StartInt_5) (ite StartBool_1 Start_3 Start_5)))
   (Start_12 String ("b" (str.++ Start_12 Start) (str.substr Start_5 StartInt StartInt_3) (str.replace Start_9 Start_7 Start_6) (ite StartBool Start_5 Start_8)))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.to_int Start)))
   (Start_7 String (y "a" "" "1" (str.++ Start_5 Start_8) (str.at Start_3 StartInt_1) (str.substr Start_7 StartInt_1 StartInt_3) (ite StartBool_2 Start_5 Start_9)))
   (Start_11 String ("" x (str.++ Start_7 Start_12) (str.at Start_9 StartInt) (str.replace Start_3 Start_3 Start_3) (str.from_int StartInt_2) (ite StartBool_2 Start Start_10)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (str.<= Start_6 Start_3) (str.prefixof Start_2 Start_6) (str.contains Start Start_7) (= Start_4 Start_7)))
   (Start_16 String ("" y (str.at Start_13 StartInt_5)))
   (StartInt_8 Int (0 (str.indexof Start_6 Start_13 StartInt_3)))
   (Start_5 String ("1" x "a" (str.at Start_3 StartInt) (str.replace Start Start_5 Start) (ite StartBool_1 Start_3 Start_2)))
   (Start_6 String (x "" "1" (str.++ Start_11 Start_12) (str.at Start StartInt_2) (str.substr Start_10 StartInt_6 StartInt_6) (str.replace Start_3 Start_8 Start_6) (str.from_int StartInt_7)))
   (StartBool_4 Bool (false (not StartBool_5) (str.< Start_13 Start_6) (str.prefixof Start_4 Start_7) (str.suffixof Start_3 Start_7) (str.contains Start_5 Start_4) (= Start_2 Start_5) (= StartInt_3 StartInt_8) (<= StartInt_2 StartInt_8)))
   (Start_9 String (x (str.substr Start_8 StartInt_1 StartInt_3) (str.replace Start_10 Start_2 Start_11) (str.from_int StartInt_4)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_2) (str.< Start_3 Start) (str.prefixof Start_4 Start_6) (str.suffixof Start_2 Start_5) (str.contains Start_13 Start_12) (= Start_13 Start_8) (= StartInt_7 StartInt_7) (<= StartInt StartInt_6)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.to_int Start_3)))
   (Start_4 String ("1" (str.substr Start_5 StartInt_2 StartInt) (str.from_int StartInt_3) (ite StartBool Start_4 Start)))
   (Start_14 String ("0" "a" "b" "1" (str.++ Start_3 Start_4) (str.at Start_10 StartInt_1) (str.from_int StartInt_8)))
   (Start_3 String ("0" "b" y x (str.substr Start_2 StartInt_2 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_4 Start_3)))
   (StartInt_5 Int (1 (str.len Start_8) (str.indexof Start_1 Start_9 StartInt_4)))
   (StartBool_7 Bool (false true (and StartBool_6 StartBool_6) (str.< Start_12 Start_8) (str.prefixof Start_3 Start_12) (str.suffixof Start Start_12) (str.contains Start_1 Start_1) (<= StartInt_4 StartInt_1)))
   (Start_8 String (x "0" (str.at Start_3 StartInt_1) (str.substr Start_10 StartInt StartInt_5) (str.from_int StartInt_1) (ite StartBool_3 Start_1 Start_5)))
   (StartInt_7 Int (1 0 (str.to_int Start_2)))
   (StartBool_3 Bool (true (str.< Start_6 Start_12) (str.<= Start_2 Start_8) (str.suffixof Start_3 Start_10) (str.contains Start_10 Start_11) (= Start_5 Start_9) (= StartInt_4 StartInt_2)))
   (StartInt_6 Int (1 (str.indexof Start_3 Start_4 StartInt_3)))
   (Start_13 String ("a" x "1" (str.replace Start_5 Start_6 Start_13) (str.from_int StartInt_6) (ite StartBool_3 Start Start_8)))
   (StartInt_2 Int (1 0 (str.to_int Start_12)))
   (StartBool_5 Bool (true false (and StartBool StartBool_6) (str.<= Start_9 Start_10) (str.suffixof Start Start_14) (= Start Start_4)))
   (StartBool_6 Bool (true (and StartBool_4 StartBool_7) (str.< Start_11 Start_6) (str.<= Start_4 Start_2) (str.prefixof Start_9 Start_11) (str.suffixof Start_14 Start_3)))
   (StartInt_4 Int (0 (str.len Start_12) (str.indexof Start_4 Start_9 StartInt_2)))
   (Start_2 String ("1" (str.++ Start_5 Start_8) (str.at Start_2 StartInt_6) (str.substr Start_2 StartInt_7 StartInt_1) (str.replace Start_10 Start_4 Start) (ite StartBool_4 Start_12 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" y x)))

(check-synth)
