(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_3 String) (Start_14 String) (StartBool_4 Bool) (Start_4 String) (StartBool_3 Bool) (StartBool_1 Bool) (Start_15 String) (StartInt_1 Int) (Start_1 String) (Start_12 String) (Start_2 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_7 String) (Start_5 String) (StartInt_4 Int) (Start_10 String) (Start_8 String) (Start_13 String) (Start_6 String) (Start_11 String) (Start_9 String) (StartInt_2 Int))
  ((Start String ("0" x (str.++ Start Start_1) (str.replace Start_1 Start Start) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start_2)))
   (StartBool Bool (false true (not StartBool) (and StartBool_1 StartBool) (str.< Start_3 Start_4) (str.<= Start_3 Start_3) (str.prefixof Start_2 Start_4) (str.suffixof Start_3 Start_1) (str.contains Start Start_5)))
   (StartInt_5 Int (1 0 (str.len Start_8) (str.to_int Start_9)))
   (Start_3 String ("a" "1" (str.++ Start_15 Start_9) (str.substr Start StartInt_2 StartInt_5) (ite StartBool_4 Start_7 Start_3)))
   (Start_14 String ("1" (str.at Start_8 StartInt_3) (str.substr Start_9 StartInt_1 StartInt_1) (str.replace Start_2 Start_2 Start_9) (ite StartBool_4 Start Start_4)))
   (StartBool_4 Bool (true false (not StartBool) (str.< Start Start_12) (str.prefixof Start_13 Start_6) (= StartInt StartInt_1)))
   (Start_4 String (y "a" (str.at Start_7 StartInt_4) (str.substr Start_11 StartInt_4 StartInt_2)))
   (StartBool_3 Bool (true (and StartBool StartBool_3) (str.<= Start_4 Start_8) (str.prefixof Start_8 Start) (str.suffixof Start_10 Start_6) (str.contains Start_2 Start_8) (= Start Start_3) (<= StartInt_1 StartInt_3)))
   (StartBool_1 Bool (true (str.prefixof Start_14 Start_10) (= Start_5 Start_2) (<= StartInt_5 StartInt_2)))
   (Start_15 String (y (str.replace Start_9 Start_12 Start_9) (ite StartBool_3 Start_4 Start_6)))
   (StartInt_1 Int (0))
   (Start_1 String ("1" (str.++ Start Start_1) (str.replace Start Start_2 Start_2) (str.from_int StartInt_1) (ite StartBool Start_2 Start)))
   (Start_12 String ("a" y "0" "1" x (str.replace Start_12 Start_1 Start_11) (ite StartBool Start Start_9)))
   (Start_2 String (y (ite StartBool Start Start_1)))
   (StartInt_3 Int (0 1 (str.len Start_8) (str.indexof Start_1 Start_8 StartInt_1)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_1) (str.prefixof Start_7 Start_2) (= Start_8 Start)))
   (Start_7 String (y (str.replace Start_10 Start_9 Start_9) (ite StartBool_2 Start_4 Start_7)))
   (Start_5 String ("0" "b" y (str.at Start StartInt_1) (str.substr Start_4 StartInt StartInt_1) (str.replace Start Start_4 Start_6) (str.from_int StartInt_1)))
   (StartInt_4 Int (0))
   (Start_10 String ("b" "" "1" (str.substr Start_8 StartInt_1 StartInt_3) (str.replace Start_6 Start Start_9) (ite StartBool_3 Start_9 Start_10)))
   (Start_8 String ("1" y "0" x "" "a" (str.++ Start_2 Start_9) (str.at Start_7 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_8)))
   (Start_13 String ("b" (str.++ Start_12 Start_14) (str.at Start_1 StartInt_1) (str.replace Start_8 Start_9 Start_10)))
   (Start_6 String ("a" (str.++ Start_3 Start_3) (str.from_int StartInt_1) (ite StartBool_2 Start_2 Start_5)))
   (Start_11 String ("0" y (str.++ Start_3 Start_10) (str.at Start_5 StartInt_4) (ite StartBool_4 Start_1 Start)))
   (Start_9 String ("0" "" (str.substr Start_1 StartInt_2 StartInt_3) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.to_int y))))

(check-synth)
