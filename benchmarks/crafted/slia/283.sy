(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_10 String) (Start_11 String) (Start_7 String) (Start_9 String) (StartInt_4 Int) (StartInt_3 Int) (StartBool_2 Bool) (Start_13 String) (Start_1 String) (Start_12 String) (StartBool_1 Bool) (Start_4 String) (Start_6 String) (StartInt_8 Int) (Start_3 String) (Start_5 String) (Start_2 String) (StartInt_2 Int) (StartInt_5 Int) (StartInt_1 Int) (StartInt_9 Int) (StartInt_6 Int) (StartInt_7 Int) (Start_8 String) (StartBool_3 Bool) (StartBool_4 Bool) (StartInt_10 Int))
  ((Start String ("0" (str.at Start StartInt) (ite StartBool Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_10) (str.indexof Start_4 Start StartInt_8)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_1 StartBool_4) (str.< Start_6 Start_4) (str.prefixof Start_3 Start_10) (<= StartInt_4 StartInt_9)))
   (Start_14 String ("a" (str.++ Start_12 Start_5) (str.replace Start_1 Start_7 Start_9) (ite StartBool_1 Start_8 Start)))
   (Start_10 String ("a" (str.++ Start Start) (str.substr Start_11 StartInt_5 StartInt_5) (str.replace Start_11 Start Start_8)))
   (Start_11 String ("b" "a" (str.substr Start_12 StartInt_4 StartInt_3) (str.replace Start_8 Start_8 Start_7) (ite StartBool Start_6 Start_6)))
   (Start_7 String ("0" x "b" (str.at Start_6 StartInt_3) (str.replace Start_8 Start_3 Start_1) (str.from_int StartInt_2) (ite StartBool Start_9 Start_8)))
   (Start_9 String (y (str.++ Start_10 Start_3) (str.at Start_2 StartInt_1) (str.substr Start StartInt_4 StartInt_4)))
   (StartInt_4 Int (1 0 (str.indexof Start_2 Start StartInt_1)))
   (StartInt_3 Int (1 (str.indexof Start Start StartInt)))
   (StartBool_2 Bool (true false (not StartBool_2) (str.< Start_7 Start_6) (str.prefixof Start_5 Start) (str.suffixof Start_4 Start_6) (str.contains Start Start_5) (= Start_5 Start_3) (= StartInt_2 StartInt_2)))
   (Start_13 String ("" (str.replace Start_14 Start_7 Start_6) (str.from_int StartInt_3) (ite StartBool_1 Start_9 Start_13)))
   (Start_1 String ("0" "1" x (str.at Start StartInt_1) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt_2)))
   (Start_12 String ("b" "" "0" (str.++ Start_1 Start_3) (str.substr Start_2 StartInt_2 StartInt_7) (str.replace Start_10 Start_4 Start_3)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_1) (str.< Start_1 Start_3) (str.<= Start_5 Start_6) (str.contains Start_5 Start_1) (= StartInt_1 StartInt_3) (<= StartInt_3 StartInt_2)))
   (Start_4 String ("" y))
   (Start_6 String ("1" (str.++ Start_4 Start_3) (str.at Start_6 StartInt)))
   (StartInt_8 Int (1 (str.indexof Start_8 Start_2 StartInt_8)))
   (Start_3 String ("b" (str.from_int StartInt)))
   (Start_5 String ("" "1" (str.++ Start Start_4) (str.substr Start_1 StartInt StartInt_4)))
   (Start_2 String ("1" y (str.++ Start Start) (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt StartInt_2) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_2 Int (1 (str.len Start_4)))
   (StartInt_5 Int (1 0 (str.len Start_12) (str.indexof Start_9 Start_3 StartInt_6) (str.to_int Start_7)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_5 Start_4 StartInt) (str.to_int Start_2)))
   (StartInt_9 Int (1 (str.to_int Start_2)))
   (StartInt_6 Int (1 0 (str.to_int Start_11)))
   (StartInt_7 Int (1 0 (str.indexof Start_8 Start_1 StartInt_2) (str.to_int Start_11)))
   (Start_8 String ("1" x "a" (str.from_int StartInt_4)))
   (StartBool_3 Bool (true false (str.< Start_9 Start_13) (str.<= Start_8 Start_1) (str.contains Start_2 Start)))
   (StartBool_4 Bool (true (not StartBool) (str.<= Start_1 Start_1) (str.prefixof Start_12 Start_8) (str.contains Start_10 Start_12) (= Start_10 Start_10) (<= StartInt_4 StartInt_10)))
   (StartInt_10 Int (1 (str.indexof Start_7 Start_4 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.++ (str.++ "1" "0") "a") "1")))

(check-synth)
