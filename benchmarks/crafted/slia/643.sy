(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_1 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_13 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_11 String) (Start_3 String) (Start_6 String) (StartInt_2 Int) (Start_14 String) (Start_12 String) (StartBool_3 Bool) (StartInt_3 Int) (Start_5 String) (Start_7 String) (Start_9 String) (Start_4 String) (Start_8 String) (StartInt_1 Int) (Start_2 String) (Start_10 String))
  ((Start String ("b" (str.++ Start_1 Start_2) (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt) (str.replace Start_1 Start_3 Start) (ite StartBool Start_3 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_4 Start_12 StartInt_5)))
   (StartBool Bool (false (str.prefixof Start_12 Start_6) (str.suffixof Start_15 Start_13) (= Start_13 Start_12) (= StartInt_1 StartInt_4)))
   (Start_15 String (y (str.++ Start_1 Start_9) (str.at Start_10 StartInt_1) (str.from_int StartInt_5)))
   (Start_1 String ("a" (str.++ Start_14 Start_2) (str.replace Start_11 Start_4 Start_3)))
   (StartInt_4 Int (1 0 (str.indexof Start_12 Start_6 StartInt_1) (str.to_int Start_1)))
   (StartBool_2 Bool (false true (str.< Start_5 Start_10) (str.prefixof Start_7 Start_1) (str.suffixof Start_8 Start_7) (str.contains Start_10 Start_10) (<= StartInt_5 StartInt_3)))
   (Start_13 String ("" "1" (str.replace Start_3 Start_13 Start_8) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_10) (str.to_int Start_9)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_9 Start_9) (str.<= Start_7 Start_6) (str.prefixof Start_3 Start_9) (str.suffixof Start_10 Start_4) (str.contains Start_3 Start_11) (= Start_7 Start_1) (= StartInt_5 StartInt_4) (<= StartInt_5 StartInt_1)))
   (Start_11 String (x (str.at Start_2 StartInt) (str.replace Start_8 Start_5 Start_10) (ite StartBool Start_5 Start_3)))
   (Start_3 String (x (str.++ Start_2 Start_4) (str.at Start_5 StartInt) (str.substr Start_5 StartInt StartInt_1) (str.replace Start_6 Start Start_6) (str.from_int StartInt_1) (ite StartBool Start_4 Start_3)))
   (Start_6 String ("" "a" "1" (str.++ Start_6 Start_2) (str.at Start StartInt_1) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_5 Start_2 Start_5) (str.from_int StartInt_1) (ite StartBool Start_2 Start_2)))
   (StartInt_2 Int (1 (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_4)))
   (Start_14 String ("1" "b" (str.substr Start_3 StartInt_4 StartInt) (str.replace Start_13 Start_3 Start_2)))
   (Start_12 String ("" "0" (str.++ Start_11 Start_6) (str.replace Start_10 Start_1 Start_8)))
   (StartBool_3 Bool (false true (str.<= Start_9 Start_12) (str.prefixof Start_12 Start_1) (= Start_13 Start)))
   (StartInt_3 Int (0 1 (str.indexof Start_1 Start_7 StartInt_3)))
   (Start_5 String ("a" x))
   (Start_7 String (x (str.substr Start_2 StartInt_1 StartInt) (str.replace Start Start_6 Start_8)))
   (Start_9 String ("b" "" (str.substr Start_9 StartInt_4 StartInt_2) (ite StartBool_1 Start_7 Start_10)))
   (Start_4 String ("1" (str.++ Start_4 Start_3) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_7 Start) (str.from_int StartInt_1)))
   (Start_8 String (y (str.substr Start_7 StartInt_1 StartInt_3) (str.replace Start Start_3 Start_3) (str.from_int StartInt_3) (ite StartBool Start_5 Start_5)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_4 StartInt_2)))
   (Start_2 String ("" (str.++ Start_5 Start_4) (str.replace Start Start Start_9) (str.from_int StartInt_3)))
   (Start_10 String (x (str.at Start_1 StartInt_4) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.len (str.++ x "1")))))

(check-synth)
