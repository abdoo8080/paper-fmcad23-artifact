(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_12 String) (Start_9 String) (Start_8 String) (Start_7 String) (Start_6 String) (Start_1 String) (StartInt_4 Int) (StartInt_6 Int) (StartInt_1 Int) (StartInt_3 Int) (Start_11 String) (StartBool_1 Bool) (Start_3 String) (Start_5 String) (StartInt_2 Int) (Start_4 String) (Start_2 String) (StartInt_5 Int))
  ((Start String ("1" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt)))
   (StartInt Int (0 1 (str.indexof Start_2 Start StartInt_3)))
   (StartBool Bool (false (str.< Start_2 Start_1) (str.<= Start_11 Start_4) (str.prefixof Start Start_12) (str.contains Start_5 Start_8) (= StartInt_4 StartInt_1) (<= StartInt_4 StartInt_5)))
   (Start_10 String ("b" "1" "" y (str.++ Start_9 Start_5) (str.replace Start_7 Start_6 Start_10) (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start)))
   (Start_12 String ("a" (str.++ Start_9 Start) (str.substr Start_6 StartInt_5 StartInt_1) (str.from_int StartInt_2)))
   (Start_9 String ("" "0" (str.at Start_10 StartInt_5) (str.from_int StartInt_2)))
   (Start_8 String (y (str.++ Start_8 Start_2) (str.substr Start_5 StartInt_2 StartInt_6)))
   (Start_7 String ("a" "1" "" (str.at Start StartInt_2) (ite StartBool Start_3 Start_8)))
   (Start_6 String ("0" "b" "1" "a" x y "" (str.at Start_1 StartInt_3) (ite StartBool Start_5 Start_7)))
   (Start_1 String (x (str.at Start StartInt_1) (str.replace Start_1 Start Start_1)))
   (StartInt_4 Int (1 (str.len Start)))
   (StartInt_6 Int (1 (str.len Start_3) (str.indexof Start Start_9 StartInt_5)))
   (StartInt_1 Int (0 1))
   (StartInt_3 Int (0 1 (str.indexof Start_3 Start_2 StartInt) (str.to_int Start_1)))
   (Start_11 String (y "0"))
   (StartBool_1 Bool (true false (not StartBool_1) (str.contains Start_3 Start_5) (= StartInt_5 StartInt_3)))
   (Start_3 String (x "" "0" (str.replace Start_3 Start Start_2)))
   (Start_5 String ("0" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_3 StartInt_4)))
   (StartInt_2 Int (1 (str.to_int Start_1)))
   (Start_4 String ("" y (str.++ Start_6 Start) (str.at Start StartInt) (str.substr Start_2 StartInt_3 StartInt_2) (str.from_int StartInt_3)))
   (Start_2 String (x "" "b" y (str.++ Start_3 Start_4) (str.at Start_3 StartInt_4) (str.replace Start_2 Start Start_3) (ite StartBool_1 Start_5 Start_3)))
   (StartInt_5 Int (1 0 (str.len Start) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.substr (str.++ x "1") 1 (str.indexof y "a" 1)) "" "1")))

(check-synth)
