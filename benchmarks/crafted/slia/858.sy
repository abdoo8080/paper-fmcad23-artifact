(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_9 Int) (Start_11 String) (StartInt_8 Int) (StartInt_7 Int) (Start_10 String) (StartInt_2 Int) (StartInt_5 Int) (StartInt_6 Int) (Start_13 String) (StartBool_1 Bool) (StartInt_1 Int) (StartInt_3 Int) (Start_3 String) (Start_6 String) (Start_8 String) (Start_1 String) (Start_2 String) (Start_7 String) (Start_9 String) (StartInt_4 Int) (Start_4 String) (StartBool_2 Bool) (Start_5 String) (StartBool_3 Bool))
  ((Start String ("b" "" "0" x "a" "1" y (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt_1) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start_1)))
   (StartBool Bool (true false (not StartBool_3) (str.< Start_5 Start_12) (str.<= Start_1 Start_7) (str.prefixof Start_1 Start_12) (str.suffixof Start_9 Start_13) (<= StartInt_4 StartInt_1)))
   (Start_12 String ("b" y (str.from_int StartInt_9)))
   (StartInt_9 Int (0 (str.to_int Start_7)))
   (Start_11 String ("" "b" (str.at Start_7 StartInt_7)))
   (StartInt_8 Int (0 1 (str.indexof Start_1 Start_4 StartInt)))
   (StartInt_7 Int (1 0 (str.len Start_11) (str.to_int Start_2)))
   (Start_10 String ("" (str.++ Start_5 Start_6) (str.at Start_1 StartInt_7) (str.substr Start_9 StartInt_7 StartInt_8) (str.replace Start_3 Start Start_5) (ite StartBool_3 Start_9 Start_7)))
   (StartInt_2 Int (0 (str.to_int Start_9)))
   (StartInt_5 Int (0 (str.to_int Start_3)))
   (StartInt_6 Int (0 1 (str.len Start_8) (str.to_int Start_3)))
   (Start_13 String ("b" x (str.++ Start_1 Start_11) (str.at Start_2 StartInt) (str.replace Start_10 Start_9 Start_12) (str.from_int StartInt_3) (ite StartBool_3 Start_1 Start_10)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.< Start_5 Start) (str.contains Start_1 Start) (= Start_6 Start_5) (<= StartInt StartInt_2)))
   (StartInt_1 Int (0 (str.indexof Start_1 Start_2 StartInt_2) (str.to_int Start_3)))
   (StartInt_3 Int (1 0 (str.len Start_7) (str.to_int Start_5)))
   (Start_3 String ("" (str.++ Start Start_3) (str.at Start_4 StartInt) (str.substr Start_5 StartInt_1 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start_6)))
   (Start_6 String ("a" x "b" (str.substr Start_1 StartInt StartInt_1)))
   (Start_8 String (y x (str.++ Start_5 Start_6) (str.at Start_9 StartInt_2) (str.from_int StartInt_1) (ite StartBool_3 Start_2 Start_7)))
   (Start_1 String (y "0" (str.replace Start_2 Start_4 Start_10) (str.from_int StartInt) (ite StartBool Start_10 Start_4)))
   (Start_2 String (x (str.++ Start_9 Start_10) (str.at Start StartInt_6) (str.replace Start_5 Start_7 Start_10) (str.from_int StartInt_3)))
   (Start_7 String ("b" "a" (str.substr Start_7 StartInt_1 StartInt_1) (str.from_int StartInt_4) (ite StartBool Start_3 Start_6)))
   (Start_9 String ("1" "a" (str.++ Start_3 Start) (str.at Start_1 StartInt_5) (str.substr Start_9 StartInt_4 StartInt_6) (str.from_int StartInt_4)))
   (StartInt_4 Int (1 (str.len Start) (str.to_int Start_4)))
   (Start_4 String ("" "1" x "0" (str.at Start_6 StartInt_4) (str.replace Start_4 Start_2 Start_2)))
   (StartBool_2 Bool (true (and StartBool StartBool_1) (str.contains Start_8 Start)))
   (Start_5 String (x "" (str.++ Start Start_2) (str.from_int StartInt_1) (ite StartBool_2 Start_6 Start_6)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_2 StartBool_3) (str.prefixof Start_7 Start_7) (str.suffixof Start_8 Start_4) (str.contains Start_3 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" "" (str.++ "b" "0"))))

(check-synth)
