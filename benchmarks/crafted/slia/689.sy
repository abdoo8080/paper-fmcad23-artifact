(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_4 Int) (StartInt_1 Int) (Start_4 String) (Start_6 String) (Start_7 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_5 String) (Start_3 String) (StartInt_3 Int) (Start_2 String) (Start_1 String) (StartInt_5 Int))
  ((Start String (y "0" "b" (str.++ Start_1 Start_2) (str.at Start_2 StartInt) (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_1 Start_3)))
   (StartInt Int (1 0))
   (StartBool Bool (false true (not StartBool_1) (str.<= Start_6 Start_3) (str.prefixof Start_4 Start_5) (<= StartInt StartInt_5)))
   (Start_8 String ("a" (str.at Start StartInt_1) (str.substr Start_6 StartInt StartInt_3) (str.replace Start_1 Start_3 Start_7) (ite StartBool_1 Start_3 Start_6)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_4 StartInt_3) (str.to_int Start)))
   (StartInt_1 Int (1 (str.indexof Start_2 Start_4 StartInt_1)))
   (Start_4 String (y x (str.at Start_5 StartInt_1) (str.replace Start_3 Start_3 Start_2) (ite StartBool_1 Start_2 Start_6)))
   (Start_6 String ("1" (str.substr Start_3 StartInt StartInt_2) (str.replace Start_1 Start_3 Start_1) (str.from_int StartInt_2)))
   (Start_7 String ("1" x "" (str.replace Start_3 Start_3 Start_1)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.to_int Start_1)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_1 StartBool_1) (str.< Start_4 Start) (= Start_5 Start_2)))
   (Start_5 String ("0" "1" "a" x "" y (str.++ Start_1 Start_1) (str.substr Start_6 StartInt StartInt_3) (str.from_int StartInt_1)))
   (Start_3 String ("a" (str.++ Start_6 Start_4) (str.substr Start StartInt StartInt) (str.replace Start_5 Start_7 Start_2) (ite StartBool Start Start_4)))
   (StartInt_3 Int (1 0 (str.len Start_6) (str.indexof Start_6 Start_6 StartInt_3) (str.to_int Start_4)))
   (Start_2 String ("b" "1" "a" y (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt_1)))
   (Start_1 String (y x "1" (str.++ Start_1 Start_8) (str.substr Start_8 StartInt_4 StartInt_3) (str.replace Start_2 Start_7 Start_3) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 (str.len Start_6) (str.indexof Start_6 Start_1 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains "1" x) "a" x)))

(check-synth)
