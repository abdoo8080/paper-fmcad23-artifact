(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_16 String) (Start_1 String) (StartBool_3 Bool) (StartInt_4 Int) (Start_14 String) (Start_9 String) (Start_4 String) (Start_6 String) (StartInt_2 Int) (Start_13 String) (Start_11 String) (StartBool_2 Bool) (Start_18 String) (Start_10 String) (StartInt_7 Int) (StartInt_5 Int) (Start_5 String) (Start_12 String) (StartBool_1 Bool) (StartBool_4 Bool) (StartInt_8 Int) (StartInt_9 Int) (Start_8 String) (StartInt_1 Int) (StartInt_11 Int) (Start_3 String) (StartInt_6 Int) (Start_7 String) (StartInt_3 Int) (StartInt_10 Int) (Start_2 String) (Start_15 String))
  ((Start String ("a" "0" "" (str.++ Start_1 Start) (str.replace Start_2 Start Start_1) (str.from_int StartInt) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0 (str.len Start_4) (str.indexof Start_13 Start_16 StartInt_3) (str.to_int Start_7)))
   (StartBool Bool (true false (not StartBool_4) (str.prefixof Start_18 Start_18) (str.contains Start_13 Start_4) (= StartInt_9 StartInt_1)))
   (Start_17 String (x (str.++ Start_9 Start_3) (str.at Start_4 StartInt_9) (str.substr Start_14 StartInt_5 StartInt) (ite StartBool_2 Start_4 Start_6)))
   (Start_16 String ("0" (str.++ Start_5 Start_7) (str.replace Start_5 Start_17 Start_13) (str.from_int StartInt_3) (ite StartBool_1 Start_11 Start_6)))
   (Start_1 String (x (str.substr Start_2 StartInt_10 StartInt_11) (str.replace Start_7 Start_11 Start_13) (str.from_int StartInt_6)))
   (StartBool_3 Bool (true false (not StartBool_1) (str.<= Start_14 Start_6) (str.suffixof Start_4 Start_7) (= StartInt_2 StartInt_5) (<= StartInt_7 StartInt_11)))
   (StartInt_4 Int (1 (str.len Start_4) (str.indexof Start_3 Start_8 StartInt)))
   (Start_14 String ("b" "a" "1" x y (str.++ Start_7 Start_15) (str.replace Start Start_15 Start_10) (ite StartBool_2 Start_6 Start_4)))
   (Start_9 String ("a" "1" (str.at Start_8 StartInt) (str.substr Start_8 StartInt_4 StartInt_3) (str.replace Start_3 Start_1 Start_10)))
   (Start_4 String ("1" (str.at Start_5 StartInt_2) (str.substr Start_8 StartInt_7 StartInt_1) (str.from_int StartInt_5)))
   (Start_6 String ("0" "" (str.at Start_2 StartInt_3) (str.replace Start_4 Start_1 Start_7) (str.from_int StartInt_4) (ite StartBool_1 Start_6 Start_4)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.to_int Start_1)))
   (Start_13 String ("0" (str.at Start_1 StartInt_6) (str.replace Start_8 Start_10 Start_2) (ite StartBool_4 Start_2 Start_3)))
   (Start_11 String ("a" (str.++ Start_11 Start) (str.at Start_11 StartInt_6) (str.substr Start_1 StartInt_6 StartInt_3) (str.replace Start_10 Start_13 Start_7) (ite StartBool_2 Start_9 Start_2)))
   (StartBool_2 Bool (false (not StartBool_3) (= Start_6 Start_5) (= StartInt_1 StartInt_2) (<= StartInt_1 StartInt_1)))
   (Start_18 String (y "0" x "" "a" "b" "1" (str.replace Start_10 Start_16 Start_1)))
   (Start_10 String ("a" "" (str.++ Start_1 Start_5) (str.substr Start_5 StartInt StartInt) (str.replace Start_11 Start_9 Start_1) (str.from_int StartInt_6) (ite StartBool_2 Start_12 Start_13)))
   (StartInt_7 Int (1 0 (str.len Start) (str.indexof Start_11 Start_3 StartInt_4) (str.to_int Start_8)))
   (StartInt_5 Int (1 0 (str.to_int Start_2)))
   (Start_5 String ("0" (str.++ Start_2 Start_1) (str.substr Start_2 StartInt StartInt) (str.from_int StartInt) (ite StartBool_2 Start_4 Start_5)))
   (Start_12 String ("0" (str.replace Start_8 Start_12 Start_6) (str.from_int StartInt_4) (ite StartBool_1 Start_13 Start_6)))
   (StartBool_1 Bool (false true (not StartBool) (str.prefixof Start_2 Start_1) (str.suffixof Start_1 Start_3) (str.contains Start_3 Start_4) (= Start Start_5)))
   (StartBool_4 Bool (false (not StartBool) (and StartBool_2 StartBool_2) (str.< Start_13 Start_9) (str.<= Start_12 Start_5) (str.suffixof Start_2 Start_12) (= Start_6 Start_11)))
   (StartInt_8 Int (0 1 (str.len Start_2)))
   (StartInt_9 Int (0 1 (str.len Start_4) (str.indexof Start_5 Start_12 StartInt_10) (str.to_int Start_4)))
   (Start_8 String ("b" (str.++ Start_5 Start_9) (str.at Start_8 StartInt_5) (str.substr Start_5 StartInt_4 StartInt_5) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_3)))
   (StartInt_1 Int (0 (str.len Start_5)))
   (StartInt_11 Int (0 (str.indexof Start_15 Start_2 StartInt_2)))
   (Start_3 String (x (str.at Start_3 StartInt_4) (str.from_int StartInt_6) (ite StartBool_2 Start_15 Start_2)))
   (StartInt_6 Int (0 (str.len Start_13) (str.to_int Start_10)))
   (Start_7 String ("" (str.at Start_5 StartInt_5) (str.substr Start_5 StartInt_7 StartInt_8) (str.from_int StartInt_6)))
   (StartInt_3 Int (0 (str.indexof Start_10 Start_13 StartInt_9)))
   (StartInt_10 Int (0 1 (str.len Start_2)))
   (Start_2 String ("b" "a" (str.at Start_15 StartInt_7) (str.replace Start_9 Start_14 Start_10) (ite StartBool Start_10 Start_12)))
   (Start_15 String ("0" "" (str.++ Start_9 Start_8) (str.substr Start_13 StartInt StartInt_11) (ite StartBool_4 Start_1 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.substr (str.replace x "0" (str.at x 0)) 1 1) "1")))

(check-synth)
