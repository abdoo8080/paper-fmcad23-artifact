(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_1 Int) (Start_5 String) (StartBool_2 Bool) (StartInt_8 Int) (StartInt_6 Int) (StartInt_7 Int) (StartInt_5 Int) (Start_11 String) (Start_10 String) (Start_13 String) (Start_9 String) (StartBool_1 Bool) (StartBool_3 Bool) (StartInt_2 Int) (StartInt_3 Int) (Start_2 String) (Start_4 String) (Start_6 String) (Start_1 String) (Start_3 String) (Start_12 String) (StartInt_4 Int) (Start_7 String) (Start_8 String))
  ((Start String ("1" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_1 Start_2) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0 (str.len Start_4) (str.indexof Start_2 Start_14 StartInt_8) (str.to_int Start_13)))
   (StartBool Bool (false true (str.< Start_13 Start_11) (str.<= Start_13 Start_1) (str.prefixof Start_5 Start_14) (str.suffixof Start_5 Start_9) (str.contains Start_11 Start_14)))
   (Start_14 String (x (str.substr Start_8 StartInt_4 StartInt_4) (str.from_int StartInt_7) (ite StartBool_2 Start_6 Start_14)))
   (StartInt_1 Int (1 0 (str.indexof Start_3 Start_9 StartInt) (str.to_int Start_12)))
   (Start_5 String (y (str.++ Start_7 Start_5) (str.replace Start_3 Start_2 Start_10) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false (not StartBool_2) (str.suffixof Start_1 Start_6)))
   (StartInt_8 Int (0 1 (str.len Start_7) (str.to_int Start_6)))
   (StartInt_6 Int (1 0 (str.len Start_10) (str.to_int Start_5)))
   (StartInt_7 Int (0 (str.len Start_4) (str.indexof Start_2 Start_2 StartInt_7)))
   (StartInt_5 Int (0 (str.len Start_3) (str.indexof Start_9 Start StartInt_7) (str.to_int Start_3)))
   (Start_11 String ("a" (str.at Start_7 StartInt) (str.substr Start_10 StartInt_7 StartInt_7) (str.replace Start_8 Start_2 Start_11)))
   (Start_10 String (y "0" x "b" (str.at Start_11 StartInt_2) (str.replace Start_2 Start_7 Start_3)))
   (Start_13 String ("1" y "0" (str.++ Start_11 Start_13) (str.at Start_14 StartInt) (str.substr Start_13 StartInt_6 StartInt_5) (str.replace Start_3 Start_14 Start_6) (ite StartBool_1 Start_5 Start)))
   (Start_9 String ("" (str.++ Start Start_3) (str.substr Start_4 StartInt_1 StartInt) (str.replace Start_8 Start_8 Start_4) (str.from_int StartInt_5) (ite StartBool_2 Start_5 Start)))
   (StartBool_1 Bool (false (str.< Start_1 Start_2) (str.<= Start_2 Start_1) (= Start_1 Start) (= StartInt_1 StartInt) (<= StartInt StartInt_1)))
   (StartBool_3 Bool (false (str.< Start_6 Start_4) (str.<= Start_5 Start_8) (str.prefixof Start Start_2) (str.suffixof Start_9 Start_2) (str.contains Start_9 Start_6) (<= StartInt_4 StartInt)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_1 Start_4 StartInt_3) (str.to_int Start_1)))
   (StartInt_3 Int (1))
   (Start_2 String ("1" "b" y x "a" "" "0" (str.++ Start_3 Start_3) (str.substr Start StartInt StartInt_2) (str.replace Start_2 Start Start_3) (ite StartBool_1 Start_3 Start_3)))
   (Start_4 String (y (str.at Start_3 StartInt) (str.replace Start_1 Start_4 Start_1) (ite StartBool_1 Start_1 Start_3)))
   (Start_6 String ("0" (str.++ Start_2 Start_5) (str.at Start_4 StartInt_2) (str.substr Start_1 StartInt_3 StartInt_5) (ite StartBool_2 Start_5 Start_7)))
   (Start_1 String ("b" (str.++ Start_7 Start_8) (str.substr Start_13 StartInt_2 StartInt_4) (str.from_int StartInt_1)))
   (Start_3 String (x (str.++ Start Start_4) (str.at Start_3 StartInt) (str.substr Start_5 StartInt_1 StartInt) (str.replace Start_3 Start_4 Start_5) (str.from_int StartInt_4)))
   (Start_12 String ("" (str.at Start_8 StartInt_6) (str.substr Start_10 StartInt_4 StartInt_6) (str.from_int StartInt_5)))
   (StartInt_4 Int (0 1 (str.len Start_2) (str.indexof Start_4 Start_1 StartInt) (str.to_int Start_6)))
   (Start_7 String ("a" x "b" "" (str.at Start_2 StartInt_2) (str.substr Start_7 StartInt_1 StartInt_3) (ite StartBool_3 Start_6 Start_4)))
   (Start_8 String (x y "a" (str.at Start_9 StartInt_4) (str.replace Start_1 Start_4 Start_7) (str.from_int StartInt_6) (ite StartBool_1 Start_10 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "" x) (str.len (str.++ "1" "0")))))

(check-synth)
