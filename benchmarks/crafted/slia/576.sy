(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_13 String) (Start_11 String) (StartInt_9 Int) (StartBool_3 Bool) (Start_6 String) (Start_10 String) (StartInt_6 Int) (StartInt_5 Int) (StartInt_7 Int) (Start_9 String) (Start_7 String) (StartInt_8 Int) (Start_2 String) (Start_3 String) (Start_14 String) (StartInt_3 Int) (Start_12 String) (StartInt_2 Int) (Start_8 String) (StartInt_1 Int) (Start_4 String) (Start_1 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_5 String))
  ((Start String (x "" "1" (str.replace Start_1 Start Start_2)))
   (StartInt Int (1 (str.len Start_1)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_1 StartBool) (str.< Start_4 Start_3) (str.<= Start_4 Start) (str.contains Start_1 Start_3) (= Start Start_2) (= StartInt_1 StartInt_2) (<= StartInt StartInt_3)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool) (str.< Start_3 Start_13) (str.prefixof Start_7 Start_5) (str.contains Start_7 Start_13) (= Start_3 Start_12) (= StartInt_9 StartInt_2)))
   (Start_13 String ("a" y (str.at Start_14 StartInt) (str.replace Start_8 Start_9 Start_3) (str.from_int StartInt_8)))
   (Start_11 String ("" (str.++ Start Start) (str.substr Start_12 StartInt_4 StartInt_7) (str.replace Start_6 Start_10 Start_7) (str.from_int StartInt_1)))
   (StartInt_9 Int (0 (str.to_int Start_5)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool_3 StartBool_2) (str.< Start_6 Start_8) (str.<= Start_10 Start_5) (str.suffixof Start_2 Start_8)))
   (Start_6 String ("a" "b" (str.substr Start_8 StartInt_2 StartInt_4) (str.replace Start_5 Start_5 Start_9)))
   (Start_10 String (y "b" "1" (str.at Start_9 StartInt_1) (str.replace Start_8 Start_10 Start_11) (str.from_int StartInt_6) (ite StartBool_1 Start_1 Start_3)))
   (StartInt_6 Int (0 1))
   (StartInt_5 Int (0 (str.to_int Start_9)))
   (StartInt_7 Int (1))
   (Start_9 String ("1" (str.at Start_3 StartInt_6) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_8 Start Start_3) (str.from_int StartInt_1)))
   (Start_7 String ("1" (str.at Start_7 StartInt_2) (str.replace Start_5 Start Start_8)))
   (StartInt_8 Int (0 (str.len Start_2)))
   (Start_2 String ("a" "" "b" x y (str.++ Start Start) (ite StartBool Start_3 Start)))
   (Start_3 String (x y "b" "" (str.at Start_1 StartInt_1) (str.substr Start StartInt_1 StartInt_2) (ite StartBool Start_1 Start)))
   (Start_14 String ("0" (str.at Start_9 StartInt)))
   (StartInt_3 Int (1 0 (str.len Start_5)))
   (Start_12 String (y "1" (str.substr Start_3 StartInt_6 StartInt_7) (str.from_int StartInt_4) (ite StartBool_1 Start_13 Start_5)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_1 StartInt_1)))
   (Start_8 String ("" "1" (str.++ Start_6 Start_8) (str.from_int StartInt_4)))
   (StartInt_1 Int (0 (str.indexof Start Start_3 StartInt_1) (str.to_int Start_4)))
   (Start_4 String ("1" (str.from_int StartInt_1)))
   (Start_1 String (x "b" (str.++ Start Start_2) (str.at Start StartInt_2) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_2 StartBool_3) (str.< Start_5 Start_2) (str.prefixof Start_1 Start) (str.suffixof Start Start_5) (= Start_6 Start_1) (= StartInt_2 StartInt_4)))
   (StartInt_4 Int (1 0 (str.len Start_5) (str.indexof Start_3 Start_6 StartInt_5) (str.to_int Start_7)))
   (Start_5 String ("" (str.++ Start_4 Start_3) (str.replace Start_4 Start Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y "" x) "0" y)))

(check-synth)
