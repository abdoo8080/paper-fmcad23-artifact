(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_9 String) (Start_10 String) (Start_4 String) (StartInt_7 Int) (StartInt_2 Int) (Start_2 String) (StartInt_3 Int) (Start_7 String) (Start_8 String) (StartInt_1 Int) (Start_6 String) (StartInt_5 Int) (Start_3 String) (StartBool_1 Bool) (StartInt_6 Int) (StartInt_4 Int) (StartBool_2 Bool) (Start_5 String))
  ((Start String ("" y (str.replace Start Start Start_1) (str.from_int StartInt_1)))
   (StartInt Int (0 1))
   (StartBool Bool (false true (str.<= Start_9 Start_4) (= Start_2 Start_5) (<= StartInt_4 StartInt)))
   (Start_1 String ("0" (str.substr Start_7 StartInt_4 StartInt) (str.replace Start_2 Start_3 Start_2) (ite StartBool_2 Start_10 Start_4)))
   (Start_9 String (y "" "1" "0" (str.replace Start_4 Start Start)))
   (Start_10 String (x "" (ite StartBool_1 Start_4 Start_9)))
   (Start_4 String ("b" "" (str.++ Start_5 Start_5) (str.at Start_4 StartInt) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_6 Start_1 Start_7)))
   (StartInt_7 Int (1 (str.len Start) (str.indexof Start_4 Start_5 StartInt_5) (str.to_int Start_7)))
   (StartInt_2 Int (1))
   (Start_2 String (y (str.++ Start_3 Start_1) (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool Start_4 Start_1)))
   (StartInt_3 Int (0 1 (str.len Start_7) (str.indexof Start_6 Start_7 StartInt_1) (str.to_int Start_5)))
   (Start_7 String ("" "0" "a" (str.++ Start_2 Start_7) (str.at Start_3 StartInt_2) (str.substr Start_2 StartInt_3 StartInt_4) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start_3)))
   (Start_8 String (y "a" "1" x "b" (str.++ Start_9 Start_1) (str.at Start_2 StartInt_1) (ite StartBool Start_9 Start_5)))
   (StartInt_1 Int (0 1 (str.indexof Start_2 Start StartInt_2)))
   (Start_6 String ("0" (str.++ Start_6 Start_7) (str.replace Start_4 Start_7 Start_5) (str.from_int StartInt_2)))
   (StartInt_5 Int (0))
   (Start_3 String ("a" y "" x (str.++ Start_1 Start_8) (str.at Start StartInt_2) (str.replace Start_3 Start Start_7)))
   (StartBool_1 Bool (true (and StartBool StartBool) (str.< Start_2 Start_3) (str.suffixof Start_1 Start_5) (str.contains Start_4 Start_4) (= Start_1 Start_6) (= StartInt_3 StartInt_5) (<= StartInt_3 StartInt_5)))
   (StartInt_6 Int (1 0 (str.len Start_1) (str.to_int Start)))
   (StartInt_4 Int (1 (str.indexof Start_6 Start_5 StartInt) (str.to_int Start_5)))
   (StartBool_2 Bool (false true (not StartBool) (= StartInt StartInt_1) (<= StartInt_7 StartInt_3)))
   (Start_5 String ("b" (str.++ Start_1 Start_2) (str.substr Start_3 StartInt_4 StartInt_2) (str.replace Start_6 Start_2 Start_1) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "1" "a")))

(check-synth)
