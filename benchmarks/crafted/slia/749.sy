(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_12 String) (Start_13 String) (StartInt_4 Int) (StartInt_8 Int) (StartInt_9 Int) (StartBool_2 Bool) (Start_11 String) (Start_10 String) (StartBool_1 Bool) (StartInt_6 Int) (Start_7 String) (StartInt_5 Int) (StartBool_3 Bool) (Start_2 String) (Start_9 String) (Start_8 String) (Start_4 String) (StartInt_2 Int) (Start_3 String) (StartInt_7 Int) (StartInt_1 Int) (Start_5 String) (Start_6 String) (StartInt_3 Int))
  ((Start String ("b" "" "1" "0" x y (str.++ Start Start) (str.at Start StartInt_1) (str.from_int StartInt)))
   (StartInt Int (0 1))
   (StartBool Bool (false (str.< Start_1 Start) (<= StartInt_1 StartInt_2)))
   (Start_1 String ("" "0" "b" y (str.++ Start_3 Start) (str.substr Start_4 StartInt_6 StartInt_7) (ite StartBool_2 Start_10 Start_12)))
   (Start_12 String ("b" (str.at Start_3 StartInt_9) (str.replace Start_6 Start Start_7)))
   (Start_13 String ("0" "1" (str.++ Start_1 Start_3) (str.replace Start_3 Start_6 Start_3) (str.from_int StartInt_1) (ite StartBool_3 Start_11 Start_8)))
   (StartInt_4 Int (0 1 (str.indexof Start_1 Start_8 StartInt_4)))
   (StartInt_8 Int (1 0 (str.to_int Start_4)))
   (StartInt_9 Int (0 1))
   (StartBool_2 Bool (true (not StartBool_2) (str.<= Start_1 Start_4) (str.suffixof Start_5 Start_8) (str.contains Start_11 Start_7) (= StartInt_5 StartInt_8) (<= StartInt_9 StartInt)))
   (Start_11 String ("1" "a" "b" y (str.++ Start_8 Start_1) (str.at Start StartInt_8) (str.substr Start_9 StartInt_1 StartInt) (str.from_int StartInt_1) (ite StartBool Start_1 Start_8)))
   (Start_10 String (x (str.++ Start_6 Start_2) (str.replace Start_1 Start_5 Start_8) (ite StartBool_2 Start_4 Start_4)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_2) (str.< Start_7 Start_3) (str.prefixof Start_3 Start_8) (str.suffixof Start_8 Start_5) (str.contains Start_10 Start_8) (= Start_7 Start_1) (= StartInt_2 StartInt_6)))
   (StartInt_6 Int (1 0 (str.indexof Start_9 Start_8 StartInt_6)))
   (Start_7 String ("1" (str.at Start_1 StartInt_1) (str.from_int StartInt_3)))
   (StartInt_5 Int (0 (str.len Start_6) (str.indexof Start_4 Start_2 StartInt_6)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.prefixof Start_8 Start_8) (= Start_8 Start_8)))
   (Start_2 String ("b" (str.++ Start_5 Start_12) (str.at Start_13 StartInt_2) (str.substr Start_12 StartInt_6 StartInt_4) (str.from_int StartInt_8) (ite StartBool Start_5 Start_5)))
   (Start_9 String ("b" (str.substr Start_4 StartInt_7 StartInt_1) (ite StartBool_1 Start_1 Start_3)))
   (Start_8 String ("1"))
   (Start_4 String ("0" x "a" "1" (str.substr Start_6 StartInt_2 StartInt_4) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_3 Start_1 StartInt) (str.to_int Start_1)))
   (Start_3 String ("" "a" y (str.++ Start Start_4) (str.at Start_2 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_5 Start_3)))
   (StartInt_7 Int (0 (str.to_int Start)))
   (StartInt_1 Int (1))
   (Start_5 String ("1" (str.++ Start_2 Start_1) (str.substr Start_6 StartInt_2 StartInt_1) (ite StartBool Start_1 Start)))
   (Start_6 String ("1" "a" "0" y "" x (str.++ Start_7 Start_6) (str.at Start_6 StartInt_1) (str.substr Start_8 StartInt StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_3 Start_7)))
   (StartInt_3 Int (1 0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.at x 1) 0 (str.to_int y))))

(check-synth)
