(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_4 Int) (Start_7 String) (Start_4 String) (StartInt_3 Int) (Start_5 String) (Start_3 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_2 String) (StartInt_1 Int) (Start_8 String) (Start_6 String) (Start_1 String))
  ((Start String ("a" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start_3 Start_3 Start) (ite StartBool_1 Start_2 Start_4)))
   (StartInt Int (1 0 (str.to_int Start_8)))
   (StartBool Bool (true false (not StartBool) (str.<= Start_5 Start_1) (str.prefixof Start_1 Start_8) (str.suffixof Start_6 Start) (= Start_1 Start_1)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start_5 Start_2 StartInt_4)))
   (Start_7 String (y "b" (str.from_int StartInt)))
   (Start_4 String ("1" (str.at Start StartInt)))
   (StartInt_3 Int (0 (str.len Start_8) (str.indexof Start_6 Start_5 StartInt)))
   (Start_5 String ("0" "1" (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start Start_4 Start_5)))
   (Start_3 String ("a" (str.++ Start_4 Start_2) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_2 Int (1 0))
   (StartBool_1 Bool (false true (str.< Start_2 Start) (str.<= Start_5 Start_1) (str.prefixof Start_2 Start_2) (= Start_3 Start) (= StartInt_1 StartInt)))
   (Start_2 String ("a" (str.++ Start Start_4) (str.replace Start_4 Start_3 Start_6)))
   (StartInt_1 Int (1 0))
   (Start_8 String ("a" "1" "0" (str.++ Start_6 Start_7)))
   (Start_6 String ("" x y (str.++ Start_4 Start_3) (str.at Start_2 StartInt) (str.replace Start_4 Start_7 Start_4) (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start_8)))
   (Start_1 String ("" (str.++ Start Start_1) (str.at Start StartInt_4) (str.substr Start_5 StartInt_4 StartInt_3) (str.replace Start_5 Start_3 Start_8) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.++ x x) "1")))

(check-synth)
