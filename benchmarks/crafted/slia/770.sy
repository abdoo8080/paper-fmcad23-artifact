(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (StartBool_3 Bool) (StartInt_6 Int) (StartInt_5 Int) (Start_8 String) (StartInt_4 Int) (Start_7 String) (StartInt_8 Int) (Start_3 String) (StartInt_3 Int) (Start_5 String) (StartBool_2 Bool) (Start_4 String) (StartBool_1 Bool) (Start_12 String) (Start_1 String) (Start_13 String) (Start_6 String) (Start_9 String) (StartInt_2 Int) (Start_18 String) (StartInt_1 Int) (Start_11 String) (StartBool_4 Bool) (Start_16 String) (Start_10 String) (Start_15 String) (Start_17 String) (Start_14 String) (Start_2 String) (StartInt_7 Int))
  ((Start String (y "" (str.++ Start_1 Start_2) (str.at Start_2 StartInt_1) (str.replace Start_3 Start_2 Start_3) (ite StartBool Start_1 Start_4)))
   (StartInt Int (0 1 (str.len Start_5) (str.to_int Start_2)))
   (StartBool Bool (true (and StartBool_1 StartBool_4) (str.suffixof Start_7 Start_9) (= Start_16 Start_2) (= StartInt_4 StartInt_3) (<= StartInt StartInt)))
   (Start_19 String ("a" "1" (str.++ Start_3 Start_1) (str.substr Start_7 StartInt_6 StartInt_3) (str.replace Start_1 Start_19 Start_4) (ite StartBool_2 Start_13 Start_15)))
   (StartBool_3 Bool (false true (str.< Start_7 Start_16) (str.suffixof Start_19 Start_16) (str.contains Start_4 Start_19)))
   (StartInt_6 Int (0 (str.len Start_6) (str.to_int Start_5)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.indexof Start_9 Start_7 StartInt_3)))
   (Start_8 String ("" "a" (str.++ Start_8 Start_7) (str.at Start_4 StartInt_5) (str.replace Start_8 Start_6 Start_5) (ite StartBool_1 Start_4 Start_8)))
   (StartInt_4 Int (0 1 (str.len Start_7)))
   (Start_7 String ("0" y (str.at Start StartInt_3) (str.replace Start Start_2 Start_7) (str.from_int StartInt)))
   (StartInt_8 Int (0 (str.to_int Start_2)))
   (Start_3 String ("b" (str.++ Start_3 Start_4) (str.substr Start_2 StartInt_1 StartInt_2) (ite StartBool Start_5 Start_2)))
   (StartInt_3 Int (0 1 (str.indexof Start Start_3 StartInt_3)))
   (Start_5 String ("0" "1" y (str.substr Start_6 StartInt StartInt_4) (str.replace Start_6 Start_5 Start_3) (ite StartBool Start_7 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool StartBool_1) (str.<= Start_3 Start_1) (str.prefixof Start_1 Start_3) (str.contains Start_7 Start_1)))
   (Start_4 String ("0" "b" "1" (str.at Start_2 StartInt) (str.substr Start_4 StartInt_2 StartInt_1) (str.from_int StartInt_3) (ite StartBool Start Start_1)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_2) (str.< Start Start_2) (str.<= Start Start_8) (str.prefixof Start_8 Start_3) (str.suffixof Start_2 Start_6) (= StartInt StartInt_3)))
   (Start_12 String ("b" "1" (str.substr Start_7 StartInt StartInt_4) (str.replace Start_1 Start_12 Start_2) (str.from_int StartInt)))
   (Start_1 String ("" (str.++ Start_1 Start_9) (str.at Start StartInt) (str.substr Start_4 StartInt_6 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_12 Start_13)))
   (Start_13 String ("" "0" "b" x (str.at Start_10 StartInt_1) (str.substr Start StartInt_1 StartInt_6) (ite StartBool_3 Start_14 Start_15)))
   (Start_6 String ("a" (str.++ Start Start_1) (str.at Start_6 StartInt_5) (str.from_int StartInt_2) (ite StartBool Start_5 Start_8)))
   (Start_9 String ("" (str.++ Start_5 Start_5) (str.replace Start_6 Start_8 Start_7) (str.from_int StartInt_4)))
   (StartInt_2 Int (1 0 (str.to_int Start_2)))
   (Start_18 String ("1" (str.++ Start_9 Start_10) (str.at Start_7 StartInt_8) (str.substr Start_18 StartInt_6 StartInt_7)))
   (StartInt_1 Int (0 (str.len Start_4) (str.indexof Start_4 Start_9 StartInt_4)))
   (Start_11 String ("" x (str.++ Start_9 Start_9) (str.from_int StartInt_5) (ite StartBool Start_10 Start_8)))
   (StartBool_4 Bool (true (str.< Start_6 Start_1) (str.<= Start_11 Start_8) (str.suffixof Start_12 Start_16) (str.contains Start_5 Start_13) (<= StartInt_3 StartInt_8)))
   (Start_16 String ("b" "a" (str.++ Start_2 Start_15) (str.substr Start_2 StartInt_2 StartInt_6) (str.replace Start_15 Start_3 Start_3)))
   (Start_10 String (x "a" "" (str.substr Start_1 StartInt_3 StartInt_3) (str.replace Start_12 Start_7 Start)))
   (Start_15 String (y "" "b" (str.substr Start_11 StartInt_3 StartInt_2) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start_16)))
   (Start_17 String ("a" (str.substr Start_6 StartInt_7 StartInt_5) (str.replace Start_10 Start_10 Start_6) (str.from_int StartInt) (ite StartBool Start_6 Start_18)))
   (Start_14 String ("b" x "" (str.++ Start_11 Start_10) (str.at Start_17 StartInt_2) (str.substr Start_17 StartInt_3 StartInt_7) (str.replace Start_17 Start_14 Start_4)))
   (Start_2 String ("a" "1" y (str.substr Start_9 StartInt_3 StartInt_6) (str.replace Start_4 Start_10 Start_10) (ite StartBool_1 Start_11 Start_7)))
   (StartInt_7 Int (1 0 (str.len Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.indexof "a" (str.at y 1) (str.to_int y)))))

(check-synth)
