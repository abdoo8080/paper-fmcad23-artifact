(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_8 Int) (StartInt_7 Int) (Start_8 String) (StartInt_4 Int) (StartInt_2 Int) (Start_4 String) (Start_1 String) (StartInt_1 Int) (Start_5 String) (Start_2 String) (Start_7 String) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_5 Int) (StartInt_3 Int) (Start_3 String) (StartInt_6 Int) (Start_6 String))
  ((Start String (x (str.++ Start Start) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_7) (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_3)))
   (StartBool Bool (false (and StartBool_2 StartBool_2) (str.< Start_6 Start_1) (str.<= Start_1 Start_6) (str.prefixof Start_6 Start_5) (= Start_6 Start_8) (= StartInt_3 StartInt_2)))
   (Start_9 String ("a" (str.at Start_8 StartInt_1) (str.replace Start Start_9 Start_3)))
   (StartInt_8 Int (0))
   (StartInt_7 Int (1 0 (str.indexof Start_5 Start_2 StartInt_8) (str.to_int Start_7)))
   (Start_8 String (x (str.at Start_1 StartInt_5) (str.substr Start_9 StartInt_6 StartInt) (str.from_int StartInt_5)))
   (StartInt_4 Int (1 0 (str.len Start_5) (str.indexof Start Start_6 StartInt_3)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.to_int Start_1)))
   (Start_4 String ("0" (str.++ Start_4 Start_1) (str.substr Start_5 StartInt_3 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start Start_4)))
   (Start_1 String ("1" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_2 StartInt_1)))
   (StartInt_1 Int (0 (str.indexof Start Start_1 StartInt_1)))
   (Start_5 String (y "a" (str.from_int StartInt_3)))
   (Start_2 String (y (str.at Start StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_1)))
   (Start_7 String (x "0" (str.at Start_1 StartInt) (str.from_int StartInt_1)))
   (StartBool_1 Bool (false (not StartBool) (str.prefixof Start_3 Start) (str.suffixof Start_1 Start_4) (str.contains Start Start_3)))
   (StartBool_2 Bool (true false (not StartBool_2) (str.<= Start_2 Start_6) (str.prefixof Start_5 Start_7)))
   (StartInt_5 Int (0))
   (StartInt_3 Int (1 0 (str.indexof Start Start_1 StartInt_1)))
   (Start_3 String ("" (str.++ Start Start) (str.at Start StartInt_3) (str.substr Start_2 StartInt_4 StartInt) (str.replace Start Start_5 Start_2) (str.from_int StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start) (str.indexof Start_8 Start_4 StartInt_7) (str.to_int Start_3)))
   (Start_6 String (y "" "b" (str.++ Start_3 Start_7) (str.at Start_6 StartInt_4) (ite StartBool_2 Start_5 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ (str.replace (str.++ y x) "" "1") "1") y "1")))

(check-synth)
