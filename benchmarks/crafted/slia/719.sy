(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_11 String) (Start_10 String) (Start_1 String) (Start_2 String) (Start_7 String) (StartInt_3 Int) (Start_5 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_4 String) (StartInt_2 Int) (Start_6 String) (Start_3 String) (Start_8 String) (StartInt_5 Int) (Start_9 String) (StartInt_4 Int))
  ((Start String ("a" "b" (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start)))
   (StartInt Int (0 (str.len Start_7) (str.indexof Start_2 Start_8 StartInt) (str.to_int Start_8)))
   (StartBool Bool (true false (not StartBool) (and StartBool_1 StartBool_1) (str.<= Start_3 Start_5) (= Start_9 Start_11)))
   (StartBool_2 Bool (false (not StartBool_2) (str.< Start_7 Start_1) (str.<= Start_4 Start_4) (str.prefixof Start_6 Start_2) (str.contains Start Start_8) (= Start_1 Start_4) (<= StartInt_3 StartInt_2)))
   (Start_11 String ("a" (str.++ Start_9 Start_11) (str.replace Start_5 Start_1 Start_11) (ite StartBool_2 Start_7 Start_3)))
   (Start_10 String ("1" (str.substr Start_8 StartInt_4 StartInt) (str.replace Start_2 Start_3 Start_8)))
   (Start_1 String ("b" (str.replace Start_9 Start_2 Start_2) (ite StartBool_1 Start_8 Start_4)))
   (Start_2 String ("0" (str.at Start StartInt_2) (str.substr Start StartInt_3 StartInt_3) (ite StartBool Start_1 Start)))
   (Start_7 String (x "b" "0" "" (str.at Start_1 StartInt_5) (str.replace Start_8 Start_1 Start_4) (ite StartBool Start_5 Start_7)))
   (StartInt_3 Int (0 (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_3)))
   (Start_5 String ("b" (str.++ Start_4 Start_6) (str.at Start_4 StartInt_4) (str.from_int StartInt_4)))
   (StartInt_1 Int (0 1 (str.len Start_5)))
   (StartBool_1 Bool (true (str.suffixof Start Start_4) (str.contains Start_6 Start_9) (= Start_3 Start_6) (= StartInt_2 StartInt_3)))
   (Start_4 String (y (str.replace Start_3 Start_5 Start_4) (ite StartBool Start_5 Start_6)))
   (StartInt_2 Int (0 1 (str.len Start) (str.to_int Start_7)))
   (Start_6 String ("0" x "1" y "b" "a" (str.++ Start_1 Start_6) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_6 Start_7 Start_2) (str.from_int StartInt_1)))
   (Start_3 String (y (str.at Start StartInt_1) (str.from_int StartInt_4) (ite StartBool Start Start_4)))
   (Start_8 String ("1" (str.++ Start Start_7) (str.substr Start_7 StartInt_5 StartInt_1) (str.replace Start_8 Start_7 Start_3) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 (str.len Start)))
   (Start_9 String ("a" (str.replace Start Start_7 Start_10) (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start_10)))
   (StartInt_4 Int (0 (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.replace (str.replace y x "1") "1" (str.at (str.at x 0) (str.to_int y)))))))

(check-synth)
