(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_13 Int) (Start_19 String) (Start_17 String) (Start_15 String) (StartBool_9 Bool) (StartInt_8 Int) (StartInt_10 Int) (Start_14 String) (Start_6 String) (StartBool_1 Bool) (Start_3 String) (StartBool_7 Bool) (Start_10 String) (Start_2 String) (StartBool_3 Bool) (StartInt_4 Int) (Start_8 String) (StartInt_1 Int) (Start_18 String) (Start_4 String) (StartInt_2 Int) (StartInt_12 Int) (StartInt_5 Int) (Start_7 String) (Start_9 String) (Start_12 String) (StartInt_11 Int) (StartInt_6 Int) (StartBool_2 Bool) (StartBool_6 Bool) (Start_16 String) (Start_1 String) (StartInt_3 Int) (StartBool_8 Bool) (Start_5 String) (StartBool_4 Bool) (Start_11 String) (StartInt_7 Int) (StartBool_5 Bool) (StartInt_9 Int) (Start_13 String))
  ((Start String (y "a" (str.++ Start Start_1) (str.at Start StartInt) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_3) (str.to_int Start_5)))
   (StartBool Bool (true (str.< Start_13 Start_14) (str.<= Start_4 Start_13) (str.prefixof Start_11 Start_14) (str.suffixof Start_18 Start_19) (str.contains Start_12 Start)))
   (StartInt_13 Int (1 (str.len Start_2) (str.indexof Start_19 Start_7 StartInt) (str.to_int Start_16)))
   (Start_19 String (y (str.++ Start_8 Start_15) (str.at Start_15 StartInt_6) (str.substr Start_15 StartInt_8 StartInt_13) (str.replace Start_9 Start_4 Start_12) (str.from_int StartInt_11) (ite StartBool_7 Start_16 Start_12)))
   (Start_17 String (y (str.replace Start_5 Start_10 Start_18) (ite StartBool_5 Start_4 Start_2)))
   (Start_15 String ("0" y (str.++ Start_14 Start_9) (str.at Start_5 StartInt) (str.substr Start_6 StartInt_4 StartInt_6) (ite StartBool_3 Start_11 Start_8)))
   (StartBool_9 Bool (true false (not StartBool_9) (str.< Start_14 Start_7) (str.<= Start_13 Start_7) (str.contains Start_11 Start_9) (= StartInt_2 StartInt_11) (<= StartInt_8 StartInt_2)))
   (StartInt_8 Int (0 1 (str.indexof Start Start_15 StartInt)))
   (StartInt_10 Int (1 0 (str.len Start_3) (str.to_int Start_10)))
   (Start_14 String ("a" (str.++ Start_1 Start_1) (str.at Start_9 StartInt_10) (str.substr Start_11 StartInt_2 StartInt_6) (str.replace Start_11 Start_14 Start_10) (str.from_int StartInt_2)))
   (Start_6 String ("b" "1" (str.++ Start_3 Start_6) (str.at Start_8 StartInt_5) (str.substr Start_5 StartInt_5 StartInt_2) (ite StartBool_3 Start_8 Start_3)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (str.<= Start Start_4) (str.contains Start_1 Start_4)))
   (Start_3 String (y (str.++ Start_1 Start) (str.from_int StartInt_4) (ite StartBool Start Start_4)))
   (StartBool_7 Bool (true false (str.suffixof Start_6 Start_5) (str.contains Start_6 Start_12) (= StartInt_6 StartInt) (<= StartInt_1 StartInt_6)))
   (Start_10 String ("0" (str.at Start_3 StartInt_3) (str.replace Start_5 Start_1 Start_11) (str.from_int StartInt) (ite StartBool_4 Start_8 Start_9)))
   (Start_2 String ("b" "0" y))
   (StartBool_3 Bool (false (not StartBool_4) (str.prefixof Start_5 Start_5) (str.contains Start_8 Start_2) (= StartInt_1 StartInt_6) (<= StartInt_4 StartInt)))
   (StartInt_4 Int (1 0 (str.len Start_2)))
   (Start_8 String (x (str.++ Start_1 Start_9) (str.at Start_8 StartInt_7) (str.replace Start_8 Start_6 Start_7) (ite StartBool_5 Start_10 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.indexof Start Start_2 StartInt_2)))
   (Start_18 String (x "0" "b" "" "1" (str.++ Start_10 Start_11)))
   (Start_4 String (x (str.++ Start_2 Start_4) (str.substr Start_3 StartInt_2 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_1 Start)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.to_int Start_4)))
   (StartInt_12 Int (1 0 (str.indexof Start_14 Start_11 StartInt_7) (str.to_int Start_15)))
   (StartInt_5 Int (1 0 (str.len Start_2) (str.indexof Start_6 Start_7 StartInt_1)))
   (Start_7 String ("" (str.++ Start_3 Start_2) (str.substr Start_6 StartInt_1 StartInt_5) (str.replace Start_3 Start_1 Start_3) (str.from_int StartInt_5) (ite StartBool Start Start)))
   (Start_9 String ("1" "b" (str.++ Start_3 Start_7) (str.from_int StartInt_11) (ite StartBool_9 Start_8 Start_2)))
   (Start_12 String (x (str.++ Start_2 Start_6) (str.at Start_1 StartInt_2) (str.replace Start_4 Start_10 Start_8) (ite StartBool_2 Start_4 Start_2)))
   (StartInt_11 Int (1 0 (str.len Start_15) (str.indexof Start_13 Start_16 StartInt_5)))
   (StartInt_6 Int (0))
   (StartBool_2 Bool (false (str.< Start_3 Start_1) (str.contains Start_4 Start_3) (= StartInt_2 StartInt) (<= StartInt_2 StartInt_2)))
   (StartBool_6 Bool (true false (not StartBool_8) (and StartBool_7 StartBool_1) (str.< Start_4 Start_11) (str.suffixof Start_13 Start_13) (str.contains Start_3 Start_2) (= StartInt_3 StartInt_1)))
   (Start_16 String (x "" "0" "1" (str.at Start_1 StartInt_12) (str.substr Start_17 StartInt StartInt_11) (ite StartBool_4 Start_1 Start_6)))
   (Start_1 String (x (ite StartBool_1 Start Start_3)))
   (StartInt_3 Int (1 (str.indexof Start Start_4 StartInt_4) (str.to_int Start_2)))
   (StartBool_8 Bool (true (not StartBool_1) (and StartBool StartBool_5) (str.prefixof Start Start_5) (str.suffixof Start_10 Start_6) (= Start_5 Start_7) (= StartInt_7 StartInt_8) (<= StartInt_9 StartInt_1)))
   (Start_5 String ("1" x "b" y (str.++ Start Start_6) (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt_2 StartInt_5) (str.replace Start_1 Start_1 Start_4) (str.from_int StartInt_2)))
   (StartBool_4 Bool (false true (str.< Start_3 Start) (str.<= Start_4 Start_8) (str.prefixof Start_7 Start_4) (str.contains Start_1 Start_1) (= StartInt_7 StartInt)))
   (Start_11 String ("a" (str.at Start_12 StartInt_2) (str.substr Start_9 StartInt_7 StartInt_3) (str.replace Start_3 Start_11 Start_2) (ite StartBool_1 Start_2 Start_5)))
   (StartInt_7 Int (1 0 (str.indexof Start_3 Start_7 StartInt_3)))
   (StartBool_5 Bool (false (not StartBool_6) (and StartBool_7 StartBool_7) (str.<= Start Start) (str.prefixof Start_5 Start_4) (= Start_9 Start_12) (<= StartInt_1 StartInt_4)))
   (StartInt_9 Int (1 (str.len Start_2) (str.indexof Start_14 Start_12 StartInt_1) (str.to_int Start_9)))
   (Start_13 String ("0" "" (str.at Start_4 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains "0" y) "1" "")))

(check-synth)
