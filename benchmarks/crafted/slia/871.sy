(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (Start_12 String) (Start_7 String) (StartInt_7 Int) (Start_11 String) (StartInt_3 Int) (Start_9 String) (Start_2 String) (StartInt_1 Int) (StartInt_2 Int) (Start_5 String) (Start_6 String) (Start_4 String) (StartInt_6 Int) (StartBool_2 Bool) (Start_10 String) (Start_3 String) (StartInt_4 Int) (StartInt_5 Int) (Start_1 String) (Start_8 String))
  ((Start String (x (str.from_int StartInt) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0 1 (str.len Start_11) (str.to_int Start)))
   (StartBool Bool (false true (not StartBool_2) (str.< Start_5 Start) (str.contains Start_1 Start_7)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_11 Start_11) (str.suffixof Start_7 Start_2) (str.contains Start_12 Start_10)))
   (Start_12 String ("1" (ite StartBool_2 Start_11 Start_5)))
   (Start_7 String ("1" "a" (str.++ Start_7 Start_2) (str.substr Start_8 StartInt_7 StartInt_3) (str.replace Start_11 Start_8 Start_5) (str.from_int StartInt_4)))
   (StartInt_7 Int (0 (str.indexof Start_10 Start_12 StartInt_6) (str.to_int Start_4)))
   (Start_11 String ("" (str.++ Start_7 Start_6) (str.at Start_5 StartInt_7) (str.substr Start_8 StartInt_7 StartInt_5) (ite StartBool_1 Start_10 Start_10)))
   (StartInt_3 Int (1 0 (str.indexof Start_4 Start_4 StartInt_6)))
   (Start_9 String (x (str.++ Start_2 Start_10) (str.substr Start StartInt_2 StartInt_5) (str.replace Start Start_2 Start_2) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_3)))
   (Start_2 String (x y (str.at Start_3 StartInt) (str.replace Start_3 Start_2 Start) (str.from_int StartInt_1)))
   (StartInt_1 Int (1 (str.len Start_4) (str.indexof Start_1 Start_5 StartInt) (str.to_int Start)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_5 Start_2 StartInt)))
   (Start_5 String (x "0" (str.++ Start Start_4) (str.replace Start_5 Start_6 Start_1)))
   (Start_6 String (x y (str.at Start_1 StartInt) (str.substr Start_6 StartInt StartInt_1) (str.from_int StartInt)))
   (Start_4 String ("0" "1" (str.replace Start_2 Start_2 Start_1)))
   (StartInt_6 Int (1 (str.indexof Start_11 Start_3 StartInt) (str.to_int Start_2)))
   (StartBool_2 Bool (true (not StartBool_1) (str.< Start_4 Start_5) (str.contains Start_7 Start_8) (= Start_5 Start_1) (= StartInt StartInt_4)))
   (Start_10 String (y (str.substr Start_3 StartInt_2 StartInt_5) (str.replace Start_8 Start_8 Start_10) (ite StartBool Start_10 Start_6)))
   (Start_3 String ("0" "a" (str.++ Start_6 Start_3) (str.at Start_5 StartInt_2) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt)))
   (StartInt_4 Int (1 0 (str.indexof Start_5 Start_5 StartInt_2) (str.to_int Start_2)))
   (StartInt_5 Int (1 (str.len Start_1) (str.to_int Start_2)))
   (Start_1 String ("b" (str.++ Start_6 Start_7) (str.at Start_1 StartInt_3) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_4 Start_6 Start_4) (ite StartBool_2 Start_6 Start_2)))
   (Start_8 String (y "1" "" (str.++ Start_6 Start_5) (str.at Start_4 StartInt_2) (str.replace Start_9 Start_10 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ x "1") y "")))

(check-synth)
