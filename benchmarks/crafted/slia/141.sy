(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_1 String) (Start_3 String) (Start_5 String) (StartInt_5 Int) (Start_4 String) (Start_2 String) (StartInt_1 Int) (Start_6 String))
  ((Start String ("" (str.at Start StartInt)))
   (StartInt Int (0 1 (str.len Start)))
   (StartBool Bool (true false (not StartBool) (= Start_1 Start_2) (= StartInt_1 StartInt_2) (<= StartInt_3 StartInt_4)))
   (StartInt_2 Int (0 (str.len Start) (str.to_int Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_1)))
   (StartBool_1 Bool (false true (not StartBool) (str.contains Start_4 Start) (= StartInt_1 StartInt_2)))
   (StartInt_3 Int (1 (str.indexof Start_3 Start_4 StartInt_2)))
   (Start_1 String (y "1" (str.at Start StartInt_1) (str.substr Start_4 StartInt_1 StartInt_5)))
   (Start_3 String (y "0" (str.++ Start_2 Start_5) (str.replace Start Start_1 Start_5)))
   (Start_5 String ("b" x "0" "1" (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start)))
   (StartInt_5 Int (0 (str.len Start_1) (str.to_int Start)))
   (Start_4 String ("a" "0" (str.++ Start_4 Start_2) (str.substr Start_1 StartInt_2 StartInt_4)))
   (Start_2 String ("" y x (str.++ Start_1 Start) (str.at Start_4 StartInt_5) (str.substr Start_4 StartInt_1 StartInt_5) (str.replace Start Start_6 Start_4) (str.from_int StartInt_1)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start_1 Start_2 StartInt_1)))
   (Start_6 String ("1" (str.++ Start_5 Start_2) (str.at Start_4 StartInt_5) (str.substr Start_2 StartInt_5 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.len y))))

(check-synth)
