(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_13 String) (Start_9 String) (Start_10 String) (StartInt_3 Int) (StartBool_3 Bool) (StartInt_1 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_6 String) (Start_16 String) (StartInt_2 Int) (Start_8 String) (Start_5 String) (StartBool_1 Bool) (Start_2 String) (Start_14 String) (Start_4 String) (Start_12 String) (StartInt_5 Int) (StartBool_5 Bool) (Start_15 String) (Start_17 String) (Start_7 String) (StartInt_6 Int) (StartInt_4 Int) (Start_11 String) (StartInt_7 Int) (Start_3 String))
  ((Start String (y (str.at Start_1 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start_2 Start_13 StartInt_4) (str.to_int Start_12)))
   (StartBool Bool (true (str.< Start_3 Start_5) (str.contains Start_13 Start_14) (= Start_13 Start_7) (= StartInt_4 StartInt_3) (<= StartInt_6 StartInt_1)))
   (Start_1 String ("1" "" "0" (str.++ Start_7 Start_14) (str.at Start_2 StartInt_1) (str.substr Start_14 StartInt_3 StartInt_2) (str.replace Start_4 Start_14 Start_9)))
   (Start_13 String ("0" y (str.++ Start_4 Start_4) (str.at Start_5 StartInt_4) (str.replace Start_5 Start_11 Start_6) (str.from_int StartInt_4) (ite StartBool_3 Start_14 Start_2)))
   (Start_9 String ("" y "a" "0" (ite StartBool_3 Start_6 Start_5)))
   (Start_10 String ("1" x (str.substr Start_7 StartInt_4 StartInt_1) (str.replace Start_10 Start_12 Start_11) (ite StartBool_1 Start_13 Start_10)))
   (StartInt_3 Int (1 0 (str.indexof Start_11 Start_6 StartInt) (str.to_int Start_16)))
   (StartBool_3 Bool (false (and StartBool StartBool_1) (str.< Start_5 Start_10) (str.prefixof Start Start_5) (str.contains Start_7 Start_10) (= Start_11 Start) (= StartInt_3 StartInt_4) (<= StartInt_1 StartInt_2)))
   (StartInt_1 Int (0 1))
   (StartBool_2 Bool (true (and StartBool StartBool_3) (str.< Start_9 Start_6) (str.<= Start_1 Start_4) (str.prefixof Start_4 Start_2) (= StartInt_1 StartInt_3)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_2 StartBool_4) (str.< Start_2 Start_7) (str.<= Start_14 Start_10) (str.suffixof Start_13 Start_11) (<= StartInt_2 StartInt_5)))
   (Start_6 String (x y "0" (str.++ Start_7 Start) (str.replace Start_1 Start_8 Start_3) (ite StartBool_1 Start_1 Start_5)))
   (Start_16 String ("b" "a" "" "1" x y (str.++ Start_9 Start_16) (str.replace Start_4 Start_1 Start_13) (str.from_int StartInt_3) (ite StartBool_2 Start_13 Start_13)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.indexof Start_4 Start_1 StartInt_1) (str.to_int Start_4)))
   (Start_8 String ("0" (str.at Start_2 StartInt) (ite StartBool_2 Start_3 Start_4)))
   (Start_5 String (y (str.at Start_7 StartInt_7) (str.from_int StartInt_1) (ite StartBool_4 Start_15 Start_14)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (str.< Start_3 Start_3) (str.prefixof Start_4 Start_2) (str.contains Start_4 Start_1) (= StartInt_1 StartInt_2)))
   (Start_2 String ("a" y (str.replace Start_2 Start_2 Start)))
   (Start_14 String (x (str.++ Start_15 Start_7) (str.at Start_14 StartInt_5) (str.substr Start_10 StartInt_3 StartInt_3) (str.replace Start_8 Start_2 Start_2) (str.from_int StartInt_3) (ite StartBool_3 Start_4 Start_15)))
   (Start_4 String (x (str.at Start_3 StartInt_3) (str.substr Start_5 StartInt_4 StartInt_1) (ite StartBool_1 Start Start_6)))
   (Start_12 String ("" "1" "b" (ite StartBool_3 Start_12 Start_14)))
   (StartInt_5 Int (1 0 (str.len Start_7)))
   (StartBool_5 Bool (false (str.contains Start_7 Start_9) (= Start_15 Start_4) (<= StartInt_5 StartInt_2)))
   (Start_15 String ("0" x (str.replace Start_10 Start Start_2) (str.from_int StartInt_4) (ite StartBool_2 Start_14 Start_13)))
   (Start_17 String ("" "b" (str.++ Start_2 Start_9) (str.at Start_8 StartInt_3) (str.substr Start_5 StartInt_7 StartInt_3)))
   (Start_7 String ("0" "b" (str.++ Start_13 Start_13) (str.at Start_8 StartInt_1) (str.substr Start_4 StartInt StartInt_6) (str.replace Start_3 Start_15 Start_1) (str.from_int StartInt_1)))
   (StartInt_6 Int (0 1 (str.len Start_8) (str.indexof Start_9 Start_8 StartInt_1) (str.to_int Start_8)))
   (StartInt_4 Int (0 (str.indexof Start_6 Start_13 StartInt_5) (str.to_int Start_15)))
   (Start_11 String (y "" (str.++ Start_4 Start_9) (str.substr Start_11 StartInt_3 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_7 Int (1 0 (str.indexof Start_16 Start_10 StartInt_2) (str.to_int Start_5)))
   (Start_3 String (x "0" (str.replace Start_2 Start_17 Start) (ite StartBool_3 Start_8 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.++ "b" (str.replace "a" x "a")))))

(check-synth)
