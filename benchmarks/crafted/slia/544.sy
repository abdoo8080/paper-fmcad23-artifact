(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_5 String) (Start_3 String) (StartInt_1 Int) (StartInt_3 Int) (Start_2 String) (StartInt_2 Int) (Start_6 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_4 String) (StartBool_3 Bool) (Start_7 String) (Start_8 String) (StartInt_5 Int) (StartInt_4 Int))
  ((Start String ("" "b" "1" "a" (str.substr Start StartInt StartInt) (str.replace Start_1 Start_2 Start_3) (ite StartBool Start_2 Start)))
   (StartInt Int (0 (str.len Start_1) (str.indexof Start_3 Start_4 StartInt_4) (str.to_int Start_8)))
   (StartBool Bool (false (not StartBool_2) (str.<= Start_1 Start_5) (= StartInt_4 StartInt_3)))
   (Start_1 String ("0" x (str.at Start_1 StartInt_4) (str.replace Start_8 Start_7 Start_4) (str.from_int StartInt_1)))
   (Start_5 String ("a" (str.++ Start_3 Start_7) (str.at Start_2 StartInt_3)))
   (Start_3 String (x (str.replace Start_1 Start_2 Start_3) (ite StartBool Start Start_1)))
   (StartInt_1 Int (0))
   (StartInt_3 Int (0 (str.indexof Start Start_1 StartInt_1)))
   (Start_2 String ("a" "0" (str.++ Start_4 Start_3) (str.at Start_1 StartInt) (str.from_int StartInt)))
   (StartInt_2 Int (1 0 (str.len Start_4) (str.indexof Start_1 Start_5 StartInt_2) (str.to_int Start_8)))
   (Start_6 String (y (str.at Start_7 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_2) (ite StartBool_2 Start_3 Start)))
   (StartBool_2 Bool (true false (and StartBool_2 StartBool_3) (str.<= Start_7 Start_1) (str.prefixof Start_4 Start_6) (= Start_7 Start) (= StartInt_3 StartInt_2) (<= StartInt StartInt_2)))
   (StartBool_1 Bool (true false (not StartBool) (str.prefixof Start_3 Start_5) (= Start_6 Start_1)))
   (Start_4 String ("a" "0" (str.++ Start Start_1) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_3 Bool (true (not StartBool_3) (str.< Start_3 Start_5) (str.prefixof Start_1 Start_5) (str.contains Start_1 Start_1) (= Start_6 Start_1) (= StartInt_1 StartInt_3)))
   (Start_7 String (x (str.substr Start_1 StartInt_3 StartInt_1)))
   (Start_8 String (y "" "b" (str.at Start_8 StartInt_2) (str.substr Start_5 StartInt_4 StartInt_5) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 (str.indexof Start_4 Start_3 StartInt_4) (str.to_int Start_1)))
   (StartInt_4 Int (1 (str.len Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "0" y) "" "a")))

(check-synth)
