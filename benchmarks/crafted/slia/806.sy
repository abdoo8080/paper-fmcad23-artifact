(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_5 Int) (Start_1 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_6 String) (Start_5 String) (Start_7 String) (StartInt_2 Int) (StartInt_3 Int) (Start_3 String) (Start_4 String) (Start_2 String) (StartInt_4 Int))
  ((Start String ("a" (str.++ Start_1 Start) (str.at Start_1 StartInt) (str.substr Start_1 StartInt StartInt) (ite StartBool Start Start)))
   (StartInt Int (0 1 (str.to_int Start_8)))
   (StartBool Bool (true (and StartBool_1 StartBool) (str.<= Start_4 Start) (str.prefixof Start_4 Start_5) (str.suffixof Start Start_1) (str.contains Start_3 Start_5) (= StartInt_2 StartInt_3) (<= StartInt_4 StartInt_3)))
   (Start_8 String ("a" "b" (str.substr Start_6 StartInt_1 StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_7)))
   (Start_1 String (x "b" "a" y (ite StartBool Start_2 Start_1)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool) (str.< Start_4 Start_2) (str.prefixof Start_3 Start_3) (str.suffixof Start_4 Start_4) (= Start_5 Start_3)))
   (StartInt_1 Int (0 1 (str.len Start_2)))
   (Start_6 String (y x (str.++ Start_2 Start_2) (str.replace Start_2 Start_5 Start) (str.from_int StartInt_3)))
   (Start_5 String ("0" (str.++ Start_1 Start_6) (str.at Start_4 StartInt_2) (str.substr Start_5 StartInt_1 StartInt_2) (str.replace Start_6 Start_1 Start_2)))
   (Start_7 String ("0" "b" (str.++ Start_1 Start_5) (str.from_int StartInt_4)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_5 StartInt_1)))
   (StartInt_3 Int (1 (str.to_int Start_7)))
   (Start_3 String ("" "0" (str.++ Start_2 Start) (str.substr Start_4 StartInt StartInt) (str.replace Start Start_2 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_2)))
   (Start_4 String ("a" x (str.++ Start_8 Start_2) (str.at Start_7 StartInt_5) (str.substr Start_2 StartInt_4 StartInt_5) (str.from_int StartInt)))
   (Start_2 String (y "" (str.at Start StartInt) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start_1 Start_3 Start_3)))
   (StartInt_4 Int (0 1 (str.len Start) (str.indexof Start Start_6 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.at y 1) "0")))

(check-synth)
