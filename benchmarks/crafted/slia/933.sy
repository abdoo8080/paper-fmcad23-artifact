(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_12 String) (Start_7 String) (StartInt_6 Int) (Start_9 String) (Start_8 String) (StartInt_7 Int) (StartBool_2 Bool) (StartInt_2 Int) (Start_5 String) (Start_11 String) (StartInt_1 Int) (StartBool_4 Bool) (Start_6 String) (Start_13 String) (Start_2 String) (Start_10 String) (Start_4 String) (StartInt_5 Int) (Start_14 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_3 Int) (StartInt_8 Int) (Start_1 String) (Start_3 String))
  ((Start String (y x "a" "0" (str.at Start StartInt_1) (str.substr Start StartInt StartInt_1)))
   (StartInt Int (0 1 (str.indexof Start_2 Start_7 StartInt_1)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_2 StartBool_4) (str.<= Start_13 Start_14) (str.prefixof Start_8 Start_8) (str.contains Start_8 Start_6) (= Start_11 Start_9)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_4) (str.< Start_7 Start) (str.suffixof Start_1 Start_8) (= Start_5 Start_4)))
   (Start_12 String ("" y "0" (str.at Start_7 StartInt) (str.substr Start_12 StartInt StartInt_4)))
   (Start_7 String (y "b" "" x (str.replace Start_1 Start Start_10) (str.from_int StartInt_3) (ite StartBool Start_9 Start_6)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.indexof Start_7 Start_10 StartInt_3)))
   (Start_9 String ("a" "1" "" (str.++ Start_3 Start_4) (str.substr Start_8 StartInt_3 StartInt_1) (ite StartBool Start_10 Start_5)))
   (Start_8 String ("a" (str.++ Start_9 Start_1) (ite StartBool_3 Start_5 Start)))
   (StartInt_7 Int (1 0 (str.indexof Start_9 Start_10 StartInt_4)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_1 StartBool_2) (str.< Start_6 Start_7) (str.prefixof Start_8 Start_5) (= Start_8 Start_1) (= StartInt_2 StartInt_1) (<= StartInt_5 StartInt_3)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.to_int Start_1)))
   (Start_5 String ("0" "b" (str.++ Start_1 Start_6) (str.at Start StartInt_3) (str.substr Start_6 StartInt_4 StartInt_4)))
   (Start_11 String (x "" (str.++ Start_2 Start_8) (str.substr Start_7 StartInt_6 StartInt_1) (str.replace Start_9 Start Start_9) (str.from_int StartInt_8)))
   (StartInt_1 Int (0 (str.indexof Start Start StartInt) (str.to_int Start_1)))
   (StartBool_4 Bool (false (str.suffixof Start_7 Start_11) (str.contains Start_7 Start_7) (= StartInt_6 StartInt_7)))
   (Start_6 String ("" (str.at Start StartInt_3) (str.substr Start_2 StartInt_1 StartInt_5) (str.from_int StartInt_5) (ite StartBool Start_5 Start_4)))
   (Start_13 String ("1" (str.++ Start_2 Start_5) (str.substr Start_10 StartInt_2 StartInt_6) (str.replace Start_2 Start_9 Start_10) (ite StartBool_3 Start_13 Start_6)))
   (Start_2 String (x y (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_3 Start_4 Start_4) (str.from_int StartInt_1)))
   (Start_10 String (x (str.at Start_8 StartInt) (str.substr Start_6 StartInt_6 StartInt_6) (str.from_int StartInt)))
   (Start_4 String (y "b" (str.substr Start StartInt StartInt_2) (str.replace Start_5 Start_3 Start_1)))
   (StartInt_5 Int (0))
   (Start_14 String ("" (str.from_int StartInt_4) (ite StartBool Start_5 Start_1)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start_4 Start) (str.contains Start_5 Start_6) (= StartInt_4 StartInt_3) (<= StartInt_1 StartInt_3)))
   (StartInt_4 Int (0 (str.to_int Start_2)))
   (StartInt_3 Int (1))
   (StartInt_8 Int (1 (str.to_int Start_12)))
   (Start_1 String ("0" "a" (str.at Start StartInt) (str.from_int StartInt_2)))
   (Start_3 String ("b" x (str.++ Start_4 Start_4) (ite StartBool_1 Start_6 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" y (str.at "1" (str.to_int x)))))

(check-synth)
