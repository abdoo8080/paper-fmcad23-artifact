(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (StartInt_8 Int) (Start_10 String) (StartBool_2 Bool) (Start_1 String) (Start_2 String) (StartInt_5 Int) (Start_11 String) (Start_4 String) (Start_9 String) (StartInt_1 Int) (StartInt_3 Int) (StartBool_3 Bool) (Start_5 String) (StartInt_4 Int) (StartInt_9 Int) (Start_6 String) (Start_8 String) (StartInt_6 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_7 String) (StartInt_7 Int) (StartInt_2 Int) (Start_3 String) (Start_12 String) (StartBool_1 Bool) (StartBool_7 Bool))
  ((Start String ("1" y "" "b" (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0 (str.indexof Start_1 Start_2 StartInt_6)))
   (StartBool Bool (true (not StartBool_6) (and StartBool StartBool_7) (str.< Start_4 Start_7) (str.<= Start_12 Start) (str.prefixof Start_10 Start_1) (= Start_10 Start_12) (= StartInt_3 StartInt_7)))
   (StartBool_6 Bool (true false (str.<= Start_12 Start_5) (str.contains Start_6 Start_11) (= StartInt_2 StartInt_6) (<= StartInt StartInt_2)))
   (StartInt_8 Int (1 (str.len Start_2)))
   (Start_10 String ("b" y "0" (str.from_int StartInt_3) (ite StartBool_3 Start_10 Start_3)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_1 StartBool) (str.prefixof Start_8 Start_3) (str.contains Start_6 Start)))
   (Start_1 String ("1" (str.++ Start_3 Start_4) (ite StartBool_1 Start Start_1)))
   (Start_2 String ("a" (str.from_int StartInt)))
   (StartInt_5 Int (0 1 (str.len Start_9) (str.to_int Start_9)))
   (Start_11 String ("1" "b" "a" (str.++ Start_1 Start_8) (str.at Start_8 StartInt) (str.replace Start_1 Start_11 Start_5) (ite StartBool_5 Start_7 Start_3)))
   (Start_4 String (x (str.at Start_5 StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start_2 Start_5 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start Start_5)))
   (Start_9 String ("0" (str.++ Start_5 Start_5) (str.replace Start_7 Start_9 Start_10)))
   (StartInt_1 Int (1))
   (StartInt_3 Int (0 1 (str.len Start_4) (str.to_int Start_10)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool StartBool_1) (str.< Start_1 Start_7) (str.prefixof Start_7 Start_6) (str.contains Start_1 Start_10) (= StartInt_4 StartInt_2)))
   (Start_5 String ("a" (str.substr Start_2 StartInt StartInt_2) (str.replace Start_6 Start Start_2) (ite StartBool_2 Start_7 Start_2)))
   (StartInt_4 Int (0))
   (StartInt_9 Int (1 (str.len Start_9) (str.indexof Start_9 Start_5 StartInt_3) (str.to_int Start_12)))
   (Start_6 String (x (str.++ Start_9 Start) (str.at Start_4 StartInt_1) (str.replace Start_2 Start_10 Start_2) (str.from_int StartInt)))
   (Start_8 String (y (str.++ Start_9 Start_8) (str.replace Start_4 Start_6 Start_3) (str.from_int StartInt_1) (ite StartBool_3 Start_3 Start_10)))
   (StartInt_6 Int (0 (str.indexof Start_1 Start_1 StartInt_5) (str.to_int Start_5)))
   (StartBool_5 Bool (false true (not StartBool) (and StartBool_3 StartBool_4) (str.contains Start_4 Start_11)))
   (StartBool_4 Bool (false true (not StartBool_1) (str.<= Start_5 Start_3) (str.suffixof Start_10 Start_11) (str.contains Start_9 Start_2) (= Start_7 Start_1) (= StartInt_5 StartInt_3)))
   (Start_7 String ("0" (str.substr Start_3 StartInt StartInt) (str.from_int StartInt)))
   (StartInt_7 Int (1 0 (str.to_int Start_6)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_5 StartInt_3)))
   (Start_3 String (y (str.from_int StartInt_1)))
   (Start_12 String ("a" (str.++ Start_4 Start_2) (str.substr Start_9 StartInt StartInt_7)))
   (StartBool_1 Bool (true false (not StartBool_4) (and StartBool StartBool_1) (str.< Start_3 Start_8) (str.prefixof Start_8 Start_8) (str.suffixof Start_5 Start_4) (str.contains Start_6 Start_6) (= StartInt_5 StartInt_6)))
   (StartBool_7 Bool (true false (not StartBool_2) (str.< Start_3 Start_6) (str.<= Start_8 Start_3) (str.prefixof Start_2 Start_7) (str.suffixof Start_1 Start_3) (str.contains Start_10 Start_2) (= Start_7 Start_3) (= StartInt_8 StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.++ (str.at x 0) (str.replace x "1" "0")) "")))

(check-synth)
