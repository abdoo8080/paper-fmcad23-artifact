(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_10 String) (StartInt_1 Int) (StartInt_5 Int) (Start_9 String) (StartInt_6 Int) (StartBool_3 Bool) (StartInt_2 Int) (Start_1 String) (StartBool_1 Bool) (Start_4 String) (Start_5 String) (StartBool_4 Bool) (Start_7 String) (Start_2 String) (StartBool_5 Bool) (StartInt_4 Int) (StartInt_3 Int) (StartBool_2 Bool) (Start_8 String) (Start_3 String) (Start_6 String))
  ((Start String (y (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_6)))
   (StartBool Bool (true false (str.< Start_11 Start_11) (str.prefixof Start_10 Start_7) (= StartInt_4 StartInt)))
   (Start_11 String (x "0" "b" "" "a" (str.substr Start_2 StartInt_1 StartInt_6) (str.from_int StartInt_6) (ite StartBool_1 Start_7 Start_4)))
   (Start_10 String ("" (str.++ Start_10 Start_10) (str.at Start_6 StartInt_5) (str.substr Start_4 StartInt_5 StartInt_6) (str.replace Start_2 Start_10 Start_7) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_1)))
   (StartInt_1 Int (1 0 (str.indexof Start_10 Start_7 StartInt_3)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_9 StartInt_5)))
   (Start_9 String ("b" (str.at Start StartInt) (str.substr Start_9 StartInt_1 StartInt_4)))
   (StartInt_6 Int (0))
   (StartBool_3 Bool (false true (and StartBool StartBool_3) (str.<= Start_9 Start_3) (str.suffixof Start_5 Start_9) (str.contains Start_4 Start)))
   (StartInt_2 Int (0 1 (str.to_int Start)))
   (Start_1 String ("1" (str.substr Start StartInt StartInt_1) (str.replace Start_2 Start_1 Start_2) (ite StartBool_1 Start Start_3)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (str.< Start_3 Start_8) (str.<= Start_1 Start_10) (str.prefixof Start_6 Start_10) (str.suffixof Start_7 Start_7) (= Start_1 Start_1)))
   (Start_4 String (x (str.at Start_2 StartInt) (str.from_int StartInt_3) (ite StartBool Start_7 Start_3)))
   (Start_5 String ("a" y "" x (str.++ Start_3 Start_3) (str.at Start_2 StartInt_3) (str.from_int StartInt_1)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_5) (str.prefixof Start Start_5) (str.suffixof Start_3 Start_1) (= Start_1 Start) (<= StartInt_1 StartInt)))
   (Start_7 String (y "a" "b" "" "0" "1"))
   (Start_2 String ("" (str.++ Start_1 Start_3) (str.substr Start_4 StartInt_2 StartInt) (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start_4)))
   (StartBool_5 Bool (false true (and StartBool_4 StartBool_1) (str.< Start_5 Start_4) (= Start_4 Start_4) (<= StartInt_4 StartInt_4)))
   (StartInt_4 Int (0 (str.len Start_6) (str.indexof Start_7 Start_8 StartInt_2)))
   (StartInt_3 Int (0 1 (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_4)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_1 StartBool_4) (str.< Start_3 Start_1) (str.<= Start_2 Start_4) (str.contains Start_2 Start) (= Start_4 Start_3) (= StartInt_3 StartInt_1)))
   (Start_8 String ("1" (str.++ Start_6 Start_1) (str.substr Start_4 StartInt_4 StartInt_3) (str.from_int StartInt_2)))
   (Start_3 String ("a" (str.replace Start_3 Start_1 Start_1) (str.from_int StartInt)))
   (Start_6 String (x (str.++ Start_6 Start_9) (str.at Start_4 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "1" "" "0") (str.len x) 1)))

(check-synth)
