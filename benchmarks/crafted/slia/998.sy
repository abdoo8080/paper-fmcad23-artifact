(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_1 String) (Start_2 String) (StartInt_5 Int) (StartInt_1 Int) (Start_11 String) (Start_3 String) (StartInt_2 Int) (Start_9 String) (Start_4 String) (Start_6 String) (Start_5 String) (Start_8 String) (StartInt_4 Int) (Start_7 String) (Start_10 String) (StartBool_1 Bool) (StartInt_3 Int))
  ((Start String ("" (str.++ Start_1 Start) (str.replace Start_2 Start_3 Start)))
   (StartInt Int (0))
   (StartBool Bool (true (not StartBool) (str.prefixof Start_3 Start_1) (= Start_2 Start_7)))
   (StartInt_6 Int (0 1))
   (Start_1 String ("a" "" (str.replace Start_10 Start_1 Start) (str.from_int StartInt_6) (ite StartBool Start_10 Start_3)))
   (Start_2 String ("b" "a" (str.substr Start_11 StartInt_5 StartInt_2) (str.replace Start Start Start_1)))
   (StartInt_5 Int (1 0 (str.len Start_11) (str.indexof Start_4 Start_9 StartInt_3) (str.to_int Start_10)))
   (StartInt_1 Int (1 0 (str.len Start_7) (str.indexof Start_11 Start_2 StartInt_1) (str.to_int Start)))
   (Start_11 String ("1" "b" "a" (str.++ Start Start_8) (str.substr Start_2 StartInt_1 StartInt_4) (str.replace Start_3 Start_3 Start_6)))
   (Start_3 String ("b" "0" "a" x (str.++ Start_4 Start_3) (str.at Start_4 StartInt_1) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_3 Start Start_6)))
   (StartInt_2 Int (1 0 (str.indexof Start_3 Start StartInt) (str.to_int Start_5)))
   (Start_9 String (x (str.from_int StartInt_1)))
   (Start_4 String (y (str.++ Start_3 Start_5) (str.substr Start_3 StartInt StartInt_5) (ite StartBool Start_6 Start_9)))
   (Start_6 String ("0" "1" x (ite StartBool Start_5 Start)))
   (Start_5 String ("b" (str.at Start_3 StartInt_1) (str.substr Start_7 StartInt StartInt) (str.from_int StartInt_2)))
   (Start_8 String ("" "0" y x (str.at Start_2 StartInt_1) (str.substr Start_9 StartInt_3 StartInt_4) (str.replace Start_7 Start_10 Start_7)))
   (StartInt_4 Int (1 (str.len Start_1) (str.to_int Start_8)))
   (Start_7 String ("a" (str.++ Start_6 Start_5) (str.at Start_3 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_8)))
   (Start_10 String ("" x (str.++ Start_6 Start_11) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false (not StartBool) (str.< Start_4 Start) (str.<= Start_2 Start_6) (str.prefixof Start_6 Start_6)))
   (StartInt_3 Int (0 (str.indexof Start_10 Start_8 StartInt_4) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 1) "0")))

(check-synth)
