(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (Start_8 String) (Start_3 String) (StartInt_2 Int) (Start_9 String) (Start_7 String) (StartInt_3 Int) (StartInt_1 Int) (StartInt_6 Int) (Start_1 String) (StartInt_4 Int) (StartBool_2 Bool) (StartInt_5 Int) (StartBool_4 Bool) (StartBool_1 Bool) (StartBool_3 Bool) (Start_4 String) (StartBool_5 Bool) (Start_5 String) (Start_6 String))
  ((Start String (x (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.substr Start StartInt_2 StartInt_2) (str.replace Start Start Start_1) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.len Start_1)))
   (StartBool Bool (true false (str.< Start_6 Start_8) (str.<= Start_1 Start) (str.prefixof Start_7 Start_7) (= Start_5 Start_2) (= StartInt_1 StartInt)))
   (Start_2 String ("0" (str.++ Start_3 Start_1) (str.replace Start_8 Start Start_5) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start)))
   (Start_8 String ("1" "" y "0" "b" x "a" (str.from_int StartInt_6) (ite StartBool_5 Start_7 Start_3)))
   (Start_3 String (y (str.++ Start_5 Start_4) (str.at Start_4 StartInt_4) (str.from_int StartInt_4) (ite StartBool_2 Start_6 Start_9)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_1 StartInt_3)))
   (Start_9 String (x (str.replace Start_7 Start_4 Start_4)))
   (Start_7 String (y (str.++ Start_4 Start_7) (str.replace Start_7 Start_4 Start_4) (str.from_int StartInt_2) (ite StartBool_3 Start_4 Start_5)))
   (StartInt_3 Int (1))
   (StartInt_1 Int (0 (str.len Start_1) (str.to_int Start)))
   (StartInt_6 Int (1 0 (str.indexof Start_4 Start_5 StartInt_4) (str.to_int Start_6)))
   (Start_1 String ("a" (str.++ Start_2 Start_3) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_2 Start_3 Start) (ite StartBool_1 Start_3 Start_3)))
   (StartInt_4 Int (0))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool_4 StartBool_2) (str.<= Start_4 Start_7) (str.prefixof Start_5 Start_5)))
   (StartInt_5 Int (0 1 (str.indexof Start_3 Start_3 StartInt)))
   (StartBool_4 Bool (false true (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_2 Start_7) (str.<= Start_8 Start_4) (str.contains Start_7 Start_5) (<= StartInt_5 StartInt_2)))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (str.prefixof Start_1 Start_2) (str.contains Start_4 Start) (= Start_5 Start_4) (<= StartInt_4 StartInt_3)))
   (StartBool_3 Bool (false (and StartBool StartBool) (str.prefixof Start_4 Start_1) (str.suffixof Start_6 Start_7) (str.contains Start_2 Start_4) (= Start_3 Start_2) (= StartInt_6 StartInt)))
   (Start_4 String (y (str.++ Start_6 Start_6) (str.substr Start_1 StartInt_5 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_5 Start_6)))
   (StartBool_5 Bool (true false (str.<= Start_6 Start_2) (str.contains Start_3 Start_1) (= Start_3 Start_9)))
   (Start_5 String ("1" y "a" (str.at Start StartInt_3) (str.substr Start StartInt_3 StartInt_1)))
   (Start_6 String (x (str.substr Start StartInt_2 StartInt_3) (str.replace Start Start_3 Start_7) (str.from_int StartInt_5) (ite StartBool Start_1 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y "b") 0)))

(check-synth)
