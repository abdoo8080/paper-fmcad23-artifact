(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartBool_2 Bool) (Start_13 String) (StartInt_6 Int) (Start_9 String) (Start_12 String) (StartInt_5 Int) (Start_1 String) (Start_7 String) (Start_10 String) (Start_2 String) (StartBool_1 Bool) (Start_11 String) (Start_4 String) (Start_5 String) (Start_14 String) (Start_3 String) (StartInt_3 Int) (StartInt_1 Int) (StartInt_2 Int) (Start_6 String) (StartInt_4 Int) (Start_8 String))
  ((Start String ("b" "" y (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_2 Start Start) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_12)))
   (StartBool Bool (true (and StartBool_2 StartBool_1) (str.< Start_11 Start_1) (str.contains Start_14 Start_12) (= StartInt_2 StartInt_7)))
   (StartInt_7 Int (0 1 (str.len Start_7) (str.to_int Start_2)))
   (StartBool_2 Bool (true (and StartBool StartBool) (str.contains Start_7 Start_6) (= Start_13 Start_7) (= StartInt StartInt) (<= StartInt_4 StartInt_7)))
   (Start_13 String ("0" (str.substr Start_7 StartInt_6 StartInt_1) (ite StartBool_2 Start_8 Start_7)))
   (StartInt_6 Int (1 0 (str.to_int Start_9)))
   (Start_9 String ("0" "" "1" y (str.at Start_6 StartInt_5) (str.from_int StartInt_2)))
   (Start_12 String (x (str.substr Start_13 StartInt_2 StartInt_6) (str.replace Start_5 Start_10 Start_7) (str.from_int StartInt_2) (ite StartBool Start_7 Start_8)))
   (StartInt_5 Int (0 (str.len Start_6) (str.indexof Start_8 Start_6 StartInt_2) (str.to_int Start_2)))
   (Start_1 String (x y "1" "b" (str.substr Start_7 StartInt_3 StartInt) (str.replace Start Start_6 Start_8) (str.from_int StartInt_4)))
   (Start_7 String (y (str.substr Start StartInt_6 StartInt_1) (str.replace Start_6 Start_10 Start_5) (ite StartBool Start_7 Start_9)))
   (Start_10 String ("0" (str.++ Start_2 Start_11) (str.at Start_7 StartInt_3) (str.replace Start_2 Start_2 Start_11)))
   (Start_2 String ("1" (str.++ Start_2 Start_1) (str.at Start_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_3 Start_4)))
   (StartBool_1 Bool (false (str.prefixof Start_2 Start_2) (str.suffixof Start_1 Start) (str.contains Start_10 Start_8) (= StartInt_5 StartInt_1)))
   (Start_11 String ("a" (str.++ Start_11 Start_6) (str.replace Start_5 Start_11 Start_7) (ite StartBool_1 Start_6 Start_7)))
   (Start_4 String ("b" y (ite StartBool Start_5 Start_5)))
   (Start_5 String (x y "a" (str.replace Start_4 Start Start_4) (ite StartBool Start_3 Start_3)))
   (Start_14 String ("a" "0" (str.replace Start_7 Start_14 Start_13)))
   (Start_3 String ("1" "0" "" x (str.replace Start_1 Start_5 Start)))
   (StartInt_3 Int (1 (str.to_int Start_11)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_3 Start_6 StartInt_2) (str.to_int Start)))
   (StartInt_2 Int (1 0 (str.len Start_1)))
   (Start_6 String ("a" "" (str.substr Start_6 StartInt_2 StartInt) (str.from_int StartInt_2)))
   (StartInt_4 Int (0))
   (Start_8 String ("" (str.substr Start_9 StartInt_5 StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.from_int (str.to_int y)) 1)))

(check-synth)
