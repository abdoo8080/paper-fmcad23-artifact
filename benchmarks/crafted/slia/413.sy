(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartBool_4 Bool) (Start_13 String) (Start_14 String) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_6 Int) (StartInt_4 Int) (Start_12 String) (Start_5 String) (Start_1 String) (StartInt_3 Int) (StartInt_1 Int) (Start_6 String) (StartBool_3 Bool) (Start_11 String) (StartInt_2 Int) (Start_10 String) (Start_9 String) (Start_4 String) (Start_3 String) (Start_8 String) (StartInt_5 Int) (Start_7 String))
  ((Start String ("b" "" "1" y (str.substr Start StartInt StartInt) (ite StartBool Start Start_1)))
   (StartInt Int (0 (str.indexof Start_13 Start_1 StartInt_3)))
   (StartBool Bool (true (and StartBool_4 StartBool) (str.<= Start_2 Start_14) (str.prefixof Start_10 Start_7) (str.suffixof Start_2 Start_5)))
   (Start_2 String ("a" (str.at Start_4 StartInt_4) (str.substr Start_9 StartInt_5 StartInt_4) (ite StartBool Start_14 Start_12)))
   (StartBool_4 Bool (false (not StartBool_3) (str.< Start_1 Start_2) (str.<= Start_5 Start_4) (str.suffixof Start_11 Start_13) (str.contains Start_3 Start) (= StartInt_2 StartInt_5)))
   (Start_13 String ("1" (str.++ Start_13 Start_9) (str.at Start_10 StartInt_4) (ite StartBool_2 Start_4 Start_9)))
   (Start_14 String ("b" "a" (str.++ Start_2 Start_1) (str.from_int StartInt_5) (ite StartBool_2 Start Start_14)))
   (StartBool_1 Bool (false (not StartBool_2) (str.<= Start_10 Start_6) (str.prefixof Start_1 Start_10) (str.contains Start_11 Start_6) (= StartInt_5 StartInt_6)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_3) (str.<= Start_1 Start_7) (= StartInt_1 StartInt_2)))
   (StartInt_6 Int (1 0 (str.to_int Start_2)))
   (StartInt_4 Int (1 (str.to_int Start_1)))
   (Start_12 String ("b" "1" x (str.++ Start_13 Start_14) (str.substr Start_9 StartInt_5 StartInt_2) (str.from_int StartInt_4)))
   (Start_5 String ("1" (str.at Start_7 StartInt_1) (str.substr Start_8 StartInt_3 StartInt) (str.replace Start_9 Start Start_3) (ite StartBool Start_4 Start_3)))
   (Start_1 String (y (str.++ Start_2 Start_1) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_2 Start Start_1) (ite StartBool_1 Start_1 Start_3)))
   (StartInt_3 Int (0 (str.len Start_4) (str.indexof Start_1 Start StartInt_1) (str.to_int Start_4)))
   (StartInt_1 Int (1))
   (Start_6 String ("0" x (str.++ Start_3 Start_4) (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_1 Start Start_1) (str.from_int StartInt) (ite StartBool_1 Start_4 Start)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool_2) (str.< Start Start_4) (str.<= Start_12 Start_2) (str.prefixof Start_3 Start) (= Start_14 Start_4) (= StartInt StartInt_5)))
   (Start_11 String ("1" x (str.substr Start_9 StartInt StartInt_6)))
   (StartInt_2 Int (0 1 (str.to_int Start_6)))
   (Start_10 String (y (str.++ Start Start_12) (str.at Start_1 StartInt_4) (str.replace Start_1 Start_5 Start_8) (str.from_int StartInt_3) (ite StartBool_2 Start_9 Start_11)))
   (Start_9 String ("a" (str.++ Start Start_5) (str.substr Start StartInt_2 StartInt_4) (str.replace Start Start_5 Start_6) (str.from_int StartInt_2)))
   (Start_4 String ("b" (str.at Start_6 StartInt) (str.from_int StartInt_3) (ite StartBool Start_2 Start_5)))
   (Start_3 String (x "0" (str.++ Start_2 Start) (str.at Start_4 StartInt_1) (str.substr Start_5 StartInt_2 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_6 Start_1)))
   (Start_8 String ("b" "1" "a" (str.substr Start StartInt_2 StartInt_5) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 (str.len Start_9)))
   (Start_7 String ("1" "0" (str.at Start_9 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "0" y "b") "a")))

(check-synth)
