(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_9 Int) (StartInt_1 Int) (Start_6 String) (StartInt_7 Int) (Start_12 String) (Start_5 String) (StartInt_4 Int) (StartInt_8 Int) (Start_2 String) (Start_3 String) (Start_10 String) (Start_1 String) (StartInt_3 Int) (Start_9 String) (Start_4 String) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_6 Int) (Start_11 String) (StartInt_5 Int) (Start_8 String) (Start_13 String) (Start_7 String))
  ((Start String ("" "1" (str.replace Start Start Start) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.to_int Start_1)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_1 StartBool_2) (str.< Start_12 Start_4) (str.prefixof Start_1 Start_11) (str.suffixof Start_1 Start_10) (= StartInt_4 StartInt_1) (<= StartInt_5 StartInt_9)))
   (StartBool_2 Bool (true false (not StartBool_2) (str.prefixof Start_2 Start_5) (str.suffixof Start_11 Start) (= Start_7 Start_6)))
   (StartInt_9 Int (0))
   (StartInt_1 Int (1 (str.indexof Start_5 Start_12 StartInt_1)))
   (Start_6 String ("0" (str.substr Start_11 StartInt StartInt_5) (str.replace Start_12 Start_6 Start_10)))
   (StartInt_7 Int (1 0 (str.len Start) (str.indexof Start_13 Start_5 StartInt) (str.to_int Start_13)))
   (Start_12 String ("b" "1" y "a" (str.at Start StartInt_1) (str.replace Start Start_8 Start_11) (str.from_int StartInt_8)))
   (Start_5 String (x (str.++ Start_2 Start_9) (str.at Start_12 StartInt_6) (str.from_int StartInt_3) (ite StartBool Start_3 Start_5)))
   (StartInt_4 Int (0 1 (str.len Start_11) (str.indexof Start_4 Start_3 StartInt_6) (str.to_int Start_4)))
   (StartInt_8 Int (1 0))
   (Start_2 String (x "0" (str.at Start StartInt_1) (str.substr Start_3 StartInt StartInt_1)))
   (Start_3 String (x "1" (str.++ Start Start_4) (str.at Start StartInt_1) (str.replace Start_4 Start_2 Start_2)))
   (Start_10 String ("" y "0" (str.++ Start_2 Start_1) (str.at Start_5 StartInt_4) (str.substr Start StartInt StartInt_5) (str.replace Start_2 Start_11 Start_5) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_2)))
   (Start_1 String ("0" (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_1 Start_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_2 Start_6 StartInt_3) (str.to_int Start)))
   (Start_9 String (x "b" y (str.at Start_4 StartInt_1) (str.substr Start_6 StartInt_7 StartInt_6) (str.replace Start_8 Start_9 Start_10) (ite StartBool Start_11 Start_12)))
   (Start_4 String ("1" "" "0" (str.++ Start Start_4) (str.replace Start_4 Start_3 Start_1) (ite StartBool_1 Start_4 Start_1)))
   (StartInt_2 Int (0 1 (str.len Start_7) (str.indexof Start_7 Start_8 StartInt)))
   (StartBool_1 Bool (true (str.< Start_5 Start) (str.prefixof Start_6 Start_6) (str.suffixof Start_1 Start_5) (= StartInt StartInt_2) (<= StartInt StartInt)))
   (StartInt_6 Int (1 0 (str.len Start_8)))
   (Start_11 String ("b" "a" (str.++ Start Start_5) (str.at Start_5 StartInt_5) (str.substr Start StartInt_5 StartInt_2) (str.replace Start_9 Start_7 Start_8)))
   (StartInt_5 Int (1 (str.to_int Start_9)))
   (Start_8 String ("0" y "a" (str.++ Start_4 Start_5) (str.at Start_2 StartInt_3) (str.replace Start_6 Start_2 Start_7) (ite StartBool Start_3 Start_4)))
   (Start_13 String (y "" "0" (str.at Start_1 StartInt_4) (str.replace Start_9 Start_4 Start_12) (ite StartBool_1 Start_9 Start_2)))
   (Start_7 String ("" x (str.++ Start Start_4) (str.at Start StartInt_1) (str.replace Start Start_9 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at y 1)))))

(check-synth)
