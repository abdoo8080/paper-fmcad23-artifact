(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_13 String) (Start_7 String) (StartBool_4 Bool) (Start_6 String) (StartInt_4 Int) (StartInt_5 Int) (StartInt_1 Int) (StartInt_3 Int) (Start_10 String) (StartBool_1 Bool) (StartBool_2 Bool) (Start_3 String) (Start_2 String) (StartInt_2 Int) (Start_12 String) (StartInt_8 Int) (Start_4 String) (Start_8 String) (Start_9 String) (StartBool_3 Bool) (StartInt_9 Int) (StartInt_6 Int) (Start_5 String) (Start_11 String) (StartInt_7 Int) (Start_1 String) (StartBool_6 Bool) (Start_14 String))
  ((Start String ("b" "" (str.++ Start_1 Start_2) (str.at Start StartInt)))
   (StartInt Int (0 1 (str.indexof Start_10 Start_11 StartInt)))
   (StartBool Bool (true false (and StartBool_4 StartBool_4) (str.< Start_5 Start_6) (str.suffixof Start_5 Start_11) (str.contains Start Start) (<= StartInt_7 StartInt_1)))
   (StartBool_5 Bool (true false (str.< Start_3 Start_5) (str.prefixof Start_3 Start_13) (str.suffixof Start_2 Start_4) (str.contains Start_9 Start_12) (= StartInt_2 StartInt_4) (<= StartInt_9 StartInt_7)))
   (Start_13 String ("1" "" x (str.at Start_13 StartInt_3) (str.replace Start Start_10 Start_9) (str.from_int StartInt_7)))
   (Start_7 String ("0" (str.++ Start_7 Start_6) (str.at Start_1 StartInt_3) (str.replace Start_4 Start_7 Start_2) (str.from_int StartInt_3)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_2 StartBool_6) (str.< Start_2 Start_9) (str.prefixof Start_6 Start_4) (str.suffixof Start_11 Start_9) (str.contains Start_12 Start_5)))
   (Start_6 String ("a" "0" "" y x "b" (str.substr Start_5 StartInt StartInt) (str.from_int StartInt_1) (ite StartBool_2 Start_6 Start_3)))
   (StartInt_4 Int (0 (str.len Start_1) (str.indexof Start_2 Start_6 StartInt_2) (str.to_int Start_6)))
   (StartInt_5 Int (0 (str.indexof Start_7 Start_7 StartInt_3)))
   (StartInt_1 Int (1 (str.indexof Start_3 Start_3 StartInt_1) (str.to_int Start_3)))
   (StartInt_3 Int (0 1))
   (Start_10 String ("0" x "1" (str.at Start_9 StartInt_6) (str.substr Start_3 StartInt_4 StartInt_1) (str.replace Start_4 Start_8 Start_6) (str.from_int StartInt_5) (ite StartBool_3 Start_1 Start_4)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool StartBool_1) (= StartInt_2 StartInt_3)))
   (StartBool_2 Bool (false (str.< Start_7 Start_7) (str.<= Start_7 Start_7) (= StartInt StartInt_3)))
   (Start_3 String ("1" x (str.++ Start_4 Start_3) (str.replace Start_5 Start_1 Start_3) (ite StartBool_1 Start_5 Start_2)))
   (Start_2 String (y (str.substr Start_3 StartInt StartInt) (str.replace Start_1 Start_3 Start_1) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 (str.len Start_4) (str.indexof Start_5 Start_3 StartInt_4)))
   (Start_12 String ("b" "1" "0" (str.++ Start_5 Start) (str.at Start_7 StartInt_6) (str.substr Start_2 StartInt_8 StartInt_6) (str.from_int StartInt_2) (ite StartBool_3 Start_2 Start_11)))
   (StartInt_8 Int (0 (str.len Start_11) (str.to_int Start_7)))
   (Start_4 String ("1" (str.++ Start Start_6) (str.replace Start_1 Start_8 Start_1)))
   (Start_8 String (y "b" (str.++ Start_7 Start) (str.at Start_9 StartInt_4) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start_1)))
   (Start_9 String ("b" (str.at Start_8 StartInt)))
   (StartBool_3 Bool (true false (str.< Start_6 Start_4) (str.<= Start_2 Start_4)))
   (StartInt_9 Int (0 (str.indexof Start_6 Start_2 StartInt_2) (str.to_int Start)))
   (StartInt_6 Int (0))
   (Start_5 String ("b" "a" (str.++ Start_7 Start) (str.at Start_2 StartInt_2) (str.replace Start_5 Start_2 Start_3) (str.from_int StartInt) (ite StartBool Start_1 Start_5)))
   (Start_11 String ("1" (str.++ Start Start_10)))
   (StartInt_7 Int (0 1 (str.len Start_11) (str.indexof Start_10 Start_10 StartInt_1)))
   (Start_1 String ("" y (str.++ Start_10 Start_3) (str.substr Start_1 StartInt_5 StartInt_2) (str.from_int StartInt_4) (ite StartBool Start_4 Start_9)))
   (StartBool_6 Bool (true (and StartBool StartBool_1) (str.< Start_8 Start_3) (str.<= Start_11 Start_13) (str.prefixof Start_5 Start_9) (str.suffixof Start_3 Start_5) (str.contains Start_7 Start_14) (= Start_10 Start_4) (= StartInt_5 StartInt_5)))
   (Start_14 String ("0" (str.at Start StartInt_4) (ite StartBool_6 Start_3 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.replace x "0" "b") "b")))

(check-synth)
