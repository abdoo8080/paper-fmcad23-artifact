(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_7 Bool) (StartBool_6 Bool) (Start_13 String) (Start_4 String) (StartInt_4 Int) (Start_5 String) (StartInt_5 Int) (StartInt_2 Int) (StartBool_2 Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_2 String) (Start_6 String) (StartInt_3 Int) (Start_15 String) (Start_7 String) (Start_1 String) (StartInt_8 Int) (Start_10 String) (Start_11 String) (Start_12 String) (StartBool_1 Bool) (Start_8 String) (StartInt_7 Int) (Start_14 String) (StartInt_6 Int) (Start_3 String) (StartBool_5 Bool) (StartInt_1 Int) (Start_9 String))
  ((Start String (x (str.at Start_1 StartInt_1) (str.replace Start_1 Start_1 Start) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0))
   (StartBool Bool (true (not StartBool_1) (and StartBool_6 StartBool) (str.contains Start Start_9) (= StartInt_8 StartInt_8)))
   (StartBool_7 Bool (true (str.suffixof Start_8 Start_4) (str.contains Start_5 Start_2) (= StartInt_7 StartInt)))
   (StartBool_6 Bool (true false (and StartBool_3 StartBool_7) (str.< Start_9 Start_4) (str.prefixof Start_11 Start_15) (str.suffixof Start_5 Start_15) (str.contains Start_12 Start_13) (= StartInt_6 StartInt_1) (<= StartInt_8 StartInt_5)))
   (Start_13 String ("b" (str.substr Start_15 StartInt_5 StartInt_4) (str.replace Start_6 Start Start_5) (str.from_int StartInt_7)))
   (Start_4 String ("1" (str.++ Start_6 Start_3) (str.substr Start_6 StartInt StartInt_1) (str.replace Start_3 Start_5 Start_3) (ite StartBool Start_7 Start)))
   (StartInt_4 Int (0 1 (str.len Start_8) (str.indexof Start_10 Start_5 StartInt_3)))
   (Start_5 String ("1" x (str.replace Start_4 Start_2 Start_3) (ite StartBool_1 Start_6 Start_2)))
   (StartInt_5 Int (1))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_5 Start_3 StartInt)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool) (str.<= Start Start_2) (str.prefixof Start Start_3) (= Start_2 Start) (<= StartInt StartInt)))
   (StartBool_4 Bool (true false (str.< Start_1 Start_5) (= Start_8 Start_1) (= StartInt StartInt_1) (<= StartInt_2 StartInt_5)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool_1) (str.prefixof Start_2 Start_3) (= Start_4 Start_2) (= StartInt_1 StartInt_2)))
   (Start_2 String ("0" (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt) (ite StartBool_2 Start_3 Start_3)))
   (Start_6 String (x (ite StartBool_2 Start_3 Start_1)))
   (StartInt_3 Int (0))
   (Start_15 String ("" (str.++ Start_5 Start_3) (str.at Start_6 StartInt_1) (str.substr Start_12 StartInt StartInt_3) (str.from_int StartInt_6)))
   (Start_7 String ("" (str.++ Start_6 Start_3) (str.substr Start_8 StartInt_3 StartInt_1)))
   (Start_1 String (x (str.at Start_4 StartInt_1) (str.replace Start_11 Start_3 Start_10) (str.from_int StartInt_4)))
   (StartInt_8 Int (0 1 (str.indexof Start_2 Start_11 StartInt_1)))
   (Start_10 String (y "0" "a" "1" x "" (str.replace Start_11 Start_11 Start_9) (str.from_int StartInt)))
   (Start_11 String ("b" "a" (str.++ Start_10 Start_10) (str.at Start_10 StartInt_1) (str.substr Start_6 StartInt_3 StartInt) (str.from_int StartInt_5)))
   (Start_12 String ("1" "a" "" (str.++ Start_1 Start_8) (str.at Start_4 StartInt_5) (str.replace Start_12 Start_8 Start_6) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool StartBool_5) (str.< Start_6 Start_13) (str.prefixof Start Start_3) (str.suffixof Start_3 Start_14) (str.contains Start_4 Start_9) (= StartInt StartInt_4)))
   (Start_8 String (y "1" (str.++ Start Start_8) (str.at Start_9 StartInt_2) (str.from_int StartInt_4) (ite StartBool_4 Start_2 Start_1)))
   (StartInt_7 Int (1))
   (Start_14 String ("a" y "b" "0" (str.++ Start_2 Start_15) (str.substr Start_8 StartInt_3 StartInt_2) (str.from_int StartInt_4)))
   (StartInt_6 Int (1 0 (str.len Start_9)))
   (Start_3 String ("1" "0" (str.++ Start_11 Start_9) (str.at Start_12 StartInt_3) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_5 Start_9 Start) (str.from_int StartInt_5)))
   (StartBool_5 Bool (true false (not StartBool_3) (str.< Start_6 Start_4) (= Start_3 Start_13)))
   (StartInt_1 Int (0 (str.indexof Start_15 Start StartInt_3) (str.to_int Start_6)))
   (Start_9 String (x "" (str.++ Start_4 Start_9) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_2 Start_6 Start_1) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof "0" x 1))))

(check-synth)
