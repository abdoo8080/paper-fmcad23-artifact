(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (Start_1 String) (Start_9 String) (Start_7 String) (Start_18 String) (Start_8 String) (StartBool_2 Bool) (Start_5 String) (StartInt_5 Int) (Start_13 String) (Start_17 String) (StartInt_3 Int) (Start_2 String) (Start_6 String) (Start_16 String) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_6 Int) (Start_12 String) (Start_3 String) (Start_4 String) (Start_14 String) (Start_15 String) (StartBool_3 Bool) (StartInt_4 Int) (StartBool_4 Bool) (Start_11 String) (StartInt_2 Int) (Start_10 String) (StartInt_1 Int))
  ((Start String ("a" (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (ite StartBool Start_2 Start_1)))
   (StartInt Int (0 (str.len Start_5) (str.indexof Start_19 Start_11 StartInt_5)))
   (StartBool Bool (true false (and StartBool StartBool_2) (str.< Start_5 Start_10) (= Start_13 Start_15) (<= StartInt_3 StartInt_3)))
   (Start_19 String ("1" (str.from_int StartInt_5) (ite StartBool_2 Start_2 Start_10)))
   (Start_1 String (x (str.replace Start_16 Start_2 Start_11) (str.from_int StartInt_7) (ite StartBool_2 Start_15 Start_9)))
   (Start_9 String ("a" (str.++ Start_7 Start_2) (str.at Start_9 StartInt_3) (str.substr Start_6 StartInt_1 StartInt_3) (str.replace Start_9 Start_8 Start_5) (ite StartBool_2 Start_10 Start_2)))
   (Start_7 String ("" x (str.++ Start_4 Start_6) (str.substr Start_1 StartInt_2 StartInt) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (Start_18 String ("1" x "a" "0" "" y (str.replace Start_3 Start_14 Start_5) (str.from_int StartInt_7)))
   (Start_8 String ("0" "b" (str.at Start_9 StartInt) (str.replace Start_1 Start Start_5)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (str.<= Start_8 Start_12) (str.prefixof Start_13 Start_10) (str.contains Start_9 Start_8) (= Start_5 Start)))
   (Start_5 String ("b" "" (str.at Start_5 StartInt_4) (str.substr Start StartInt_3 StartInt_3) (str.replace Start Start_6 Start_7) (str.from_int StartInt_3)))
   (StartInt_5 Int (0 (str.len Start_9) (str.to_int Start_2)))
   (Start_13 String ("b" "" "0" (str.++ Start_10 Start_13) (str.substr Start_6 StartInt StartInt) (str.replace Start_14 Start_14 Start) (str.from_int StartInt_5) (ite StartBool_2 Start Start_8)))
   (Start_17 String (x (ite StartBool_4 Start Start_14)))
   (StartInt_3 Int (1 (str.len Start_5) (str.indexof Start Start_4 StartInt_4)))
   (Start_2 String ("" "a" x (str.++ Start_1 Start) (str.at Start_1 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start_2 Start_1 Start_2) (ite StartBool_1 Start_3 Start_1)))
   (Start_6 String ("b" (str.++ Start_5 Start_4) (str.at Start_8 StartInt_1) (ite StartBool_1 Start_2 Start_7)))
   (Start_16 String ("b" (str.substr Start_8 StartInt_2 StartInt_5) (str.from_int StartInt_2) (ite StartBool_2 Start_8 Start_15)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start Start_1) (str.contains Start_4 Start) (= Start_3 Start_3) (= StartInt_1 StartInt) (<= StartInt_3 StartInt_2)))
   (StartInt_7 Int (0 1))
   (StartInt_6 Int (0 1 (str.indexof Start_4 Start_2 StartInt_3)))
   (Start_12 String ("b" (str.replace Start_10 Start_9 Start_6) (ite StartBool_3 Start_12 Start_15)))
   (Start_3 String (x (str.++ Start Start_6) (str.substr Start_5 StartInt_1 StartInt) (str.replace Start_13 Start Start_7) (ite StartBool_4 Start_9 Start_9)))
   (Start_4 String ("a" (str.++ Start_11 Start_3) (str.substr Start_4 StartInt_5 StartInt_3) (str.replace Start_5 Start_3 Start_3) (str.from_int StartInt_1)))
   (Start_14 String (y (str.at Start_9 StartInt) (str.substr Start_9 StartInt_3 StartInt_2) (str.replace Start_8 Start_5 Start_3) (str.from_int StartInt_3)))
   (Start_15 String ("" (str.++ Start_5 Start_2) (str.at Start_1 StartInt_5) (str.replace Start_14 Start_2 Start_3)))
   (StartBool_3 Bool (true false (str.<= Start_11 Start_16) (str.prefixof Start_7 Start_9) (str.contains Start_15 Start_15)))
   (StartInt_4 Int (0 1 (str.len Start_5)))
   (StartBool_4 Bool (false (str.< Start_4 Start_14) (str.prefixof Start_7 Start_17) (str.suffixof Start_18 Start_2) (= Start_10 Start) (<= StartInt_6 StartInt_6)))
   (Start_11 String (x (str.substr Start_11 StartInt StartInt_4) (str.replace Start_11 Start_7 Start_7)))
   (StartInt_2 Int (0 (str.len Start_10)))
   (Start_10 String ("1" (str.++ Start_6 Start_9) (str.replace Start_6 Start_8 Start_9)))
   (StartInt_1 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof (str.++ "1" "0") (str.replace "1" x "") 0))))

(check-synth)
