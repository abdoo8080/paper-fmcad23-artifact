(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_15 String) (StartInt_10 Int) (StartInt_3 Int) (StartInt_2 Int) (StartBool_3 Bool) (Start_9 String) (Start_7 String) (Start_5 String) (StartBool_4 Bool) (Start_4 String) (Start_8 String) (Start_11 String) (Start_16 String) (Start_6 String) (Start_2 String) (Start_13 String) (Start_10 String) (StartBool_2 Bool) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_8 Int) (Start_3 String) (StartInt_6 Int) (Start_12 String) (Start_1 String) (StartInt_5 Int) (StartInt_7 Int) (StartInt_9 Int) (StartInt_4 Int))
  ((Start String ("a" (str.++ Start Start) (str.at Start_1 StartInt) (str.replace Start Start Start_2) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (1 0 (str.len Start_9) (str.indexof Start_8 Start_11 StartInt_9) (str.to_int Start_10)))
   (StartBool Bool (true (str.< Start_5 Start_14) (str.suffixof Start_15 Start_10) (= Start_15 Start) (<= StartInt_4 StartInt_10)))
   (Start_14 String ("b" (str.++ Start_13 Start_7) (str.substr Start_16 StartInt StartInt_9)))
   (Start_15 String (y (str.at Start_14 StartInt_2) (str.replace Start_4 Start_12 Start_11) (str.from_int StartInt_4) (ite StartBool_1 Start_8 Start_13)))
   (StartInt_10 Int (1 0))
   (StartInt_3 Int (0 1))
   (StartInt_2 Int (1 0 (str.indexof Start_6 Start_3 StartInt)))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool_1 StartBool_1) (str.prefixof Start_7 Start) (str.suffixof Start_4 Start)))
   (Start_9 String (x (str.++ Start_5 Start) (str.at Start_6 StartInt_3)))
   (Start_7 String ("a" (str.at Start_8 StartInt) (str.substr Start_3 StartInt_2 StartInt) (str.from_int StartInt_1)))
   (Start_5 String ("0" (str.substr Start_6 StartInt_1 StartInt_1) (str.from_int StartInt_3)))
   (StartBool_4 Bool (false (not StartBool) (str.< Start_9 Start_7) (str.prefixof Start_5 Start_10) (str.contains Start_10 Start_9) (<= StartInt StartInt_1)))
   (Start_4 String (x y (str.++ Start Start_6) (str.replace Start_8 Start_6 Start_2) (ite StartBool_4 Start_2 Start_1)))
   (Start_8 String ("" x (str.replace Start Start_4 Start_7) (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_4)))
   (Start_11 String (y "0" "b" (str.++ Start_10 Start_5) (str.substr Start_10 StartInt StartInt_6) (str.replace Start_6 Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (Start_16 String (y "1" "a" (str.++ Start_4 Start_10) (str.substr Start_6 StartInt_7 StartInt_9)))
   (Start_6 String (x "a" (str.++ Start Start_7) (str.substr Start_6 StartInt StartInt) (str.replace Start Start_1 Start_8) (str.from_int StartInt_1) (ite StartBool_3 Start_1 Start_8)))
   (Start_2 String (y (str.++ Start_11 Start_12) (str.from_int StartInt_1)))
   (Start_13 String ("0" (str.++ Start_9 Start_13) (str.at Start_3 StartInt_8)))
   (Start_10 String (x "a" (str.at Start_2 StartInt_3) (str.substr Start_4 StartInt_3 StartInt_4) (str.from_int StartInt_4)))
   (StartBool_2 Bool (true false (and StartBool_2 StartBool) (str.contains Start_9 Start_1) (= Start_11 Start_11) (<= StartInt StartInt_5)))
   (StartInt_1 Int (0 (str.len Start_1) (str.to_int Start_6)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_1) (str.< Start_3 Start_4) (str.<= Start_3 Start_4) (str.prefixof Start_4 Start) (= Start_5 Start_1) (<= StartInt_1 StartInt_1)))
   (StartInt_8 Int (0 (str.len Start_8) (str.indexof Start_13 Start_10 StartInt_6)))
   (Start_3 String (y (str.substr Start_6 StartInt_5 StartInt_4) (str.replace Start_4 Start_10 Start_9)))
   (StartInt_6 Int (0 (str.to_int Start_2)))
   (Start_12 String (x (str.at Start StartInt_5) (str.substr Start_6 StartInt_4 StartInt_1)))
   (Start_1 String ("a" x "1" "" "b" y "0" (str.substr Start_10 StartInt_5 StartInt_7)))
   (StartInt_5 Int (0 (str.indexof Start_5 Start StartInt) (str.to_int Start)))
   (StartInt_7 Int (1 (str.len Start_11) (str.indexof Start_13 Start_2 StartInt)))
   (StartInt_9 Int (0 (str.len Start_6) (str.indexof Start_6 Start_8 StartInt_1) (str.to_int Start_5)))
   (StartInt_4 Int (0 1 (str.len Start_8) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof y "0") "0" "1")))

(check-synth)
