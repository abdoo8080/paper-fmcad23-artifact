(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_2 String) (StartBool_1 Bool) (Start_4 String) (Start_6 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_13 String) (Start_8 String) (Start_1 String) (StartInt_2 Int) (Start_11 String) (StartInt_5 Int) (StartInt_1 Int) (Start_16 String) (StartInt_6 Int) (Start_14 String) (Start_10 String) (StartBool_3 Bool) (StartInt_4 Int) (Start_15 String) (StartInt_8 Int) (Start_5 String) (StartInt_7 Int) (Start_9 String) (Start_12 String) (Start_3 String))
  ((Start String ("a" (str.++ Start Start) (str.substr Start_1 StartInt_1 StartInt)))
   (StartInt Int (1 0 (str.len Start_13)))
   (StartBool Bool (false true (str.prefixof Start Start_7) (str.suffixof Start_14 Start_4) (str.contains Start_15 Start_13) (= StartInt StartInt_7) (<= StartInt_1 StartInt_4)))
   (Start_7 String (x y "" "b" "0" "a" "1" (str.++ Start_1 Start_6) (str.at Start_2 StartInt_4) (str.substr Start_8 StartInt StartInt)))
   (Start_2 String (y (str.++ Start_3 Start_3) (str.at Start_2 StartInt_2) (str.replace Start Start_1 Start_3) (str.from_int StartInt) (ite StartBool Start_2 Start_1)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_1) (str.< Start_5 Start_6) (str.<= Start_2 Start) (str.prefixof Start_5 Start_1) (str.suffixof Start_5 Start_5) (str.contains Start Start_3) (<= StartInt_3 StartInt)))
   (Start_4 String (x "b" y "1" "a" (str.++ Start_4 Start_5) (str.at Start_2 StartInt) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_2 Start_6 Start_4) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_3)))
   (Start_6 String (x "0" "" "b" "1" "a" y (str.substr Start_5 StartInt_1 StartInt_2) (str.replace Start_3 Start_4 Start_5) (ite StartBool_1 Start_7 Start_6)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (str.<= Start_12 Start_4) (str.prefixof Start_2 Start_9) (= Start_13 Start_7) (<= StartInt_1 StartInt)))
   (StartInt_3 Int (1))
   (Start_13 String ("1" "b" "a" "0" (str.++ Start_8 Start_7) (str.at Start_3 StartInt_5) (str.substr Start StartInt_4 StartInt_3) (str.from_int StartInt_3)))
   (Start_8 String ("a" x (str.++ Start_3 Start_9) (str.replace Start_7 Start_10 Start_11) (str.from_int StartInt_1) (ite StartBool_2 Start_11 Start)))
   (Start_1 String (x "a" "" (ite StartBool Start_14 Start)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.to_int Start_5)))
   (Start_11 String ("a" x y (str.++ Start_4 Start_5) (str.at Start_5 StartInt_6) (str.substr Start_3 StartInt_1 StartInt_5) (ite StartBool_2 Start_4 Start)))
   (StartInt_5 Int (1 0 (str.to_int Start)))
   (StartInt_1 Int (0 1 (str.to_int Start_2)))
   (Start_16 String (y "a" (str.++ Start_16 Start_15) (str.at Start_3 StartInt_2) (str.substr Start StartInt_4 StartInt_5) (str.from_int StartInt_5)))
   (StartInt_6 Int (0 1 (str.len Start_11) (str.to_int Start)))
   (Start_14 String ("a" (str.++ Start_4 Start_4) (str.at Start_16 StartInt_5) (str.replace Start_10 Start_6 Start_11)))
   (Start_10 String ("a" (str.++ Start_14 Start_15) (str.at Start_8 StartInt_6) (str.substr Start StartInt StartInt_4) (str.from_int StartInt_5)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool StartBool_2) (str.< Start_12 Start_1) (str.prefixof Start_13 Start_8) (str.contains Start_16 Start_1) (= StartInt_4 StartInt_1) (<= StartInt_2 StartInt_1)))
   (StartInt_4 Int (0 1 (str.indexof Start_9 Start_10 StartInt_1) (str.to_int Start_5)))
   (Start_15 String (y "1" "b" "" "a" (str.++ Start_14 Start_4) (str.at Start_15 StartInt_7) (str.replace Start_9 Start_5 Start_11) (str.from_int StartInt_8) (ite StartBool_3 Start_2 Start_7)))
   (StartInt_8 Int (0 (str.len Start_7) (str.indexof Start_3 Start_9 StartInt_6)))
   (Start_5 String ("a" "0" "" x "1" (str.at Start_1 StartInt_3) (str.substr Start_2 StartInt_2 StartInt_2)))
   (StartInt_7 Int (0 1 (str.len Start_11)))
   (Start_9 String ("1" (str.++ Start_11 Start_2) (str.substr Start_3 StartInt_8 StartInt_1) (str.replace Start_4 Start_3 Start_1) (str.from_int StartInt_2)))
   (Start_12 String ("" (str.at Start_4 StartInt_4) (str.substr Start StartInt_3 StartInt_6) (str.replace Start_9 Start_13 Start) (ite StartBool_2 Start_12 Start_12)))
   (Start_3 String ("b" (str.substr Start StartInt_4 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "0" x) "0" "")))

(check-synth)
