(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (StartInt_2 Int) (Start_1 String) (StartBool_1 Bool) (Start_4 String) (Start_3 String) (Start_2 String) (StartInt_1 Int))
  ((Start String ("1" "" "b" y (str.++ Start_1 Start) (str.at Start_1 StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_4) (str.indexof Start_3 Start StartInt_1)))
   (StartBool Bool (true (not StartBool) (and StartBool StartBool_1) (str.prefixof Start Start) (str.contains Start_5 Start_5) (= Start_1 Start) (= StartInt_2 StartInt_2)))
   (Start_5 String ("" (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 (str.indexof Start Start_3 StartInt) (str.to_int Start_1)))
   (Start_1 String ("b" x "" "0" (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt_1)))
   (StartBool_1 Bool (true false (str.< Start_1 Start_4) (str.contains Start_1 Start_2) (= Start_4 Start_5) (= StartInt StartInt_2) (<= StartInt_1 StartInt_2)))
   (Start_4 String ("a" "b" "1" "0" x y "" (str.++ Start_4 Start_1) (str.at Start StartInt_1) (str.substr Start_4 StartInt_1 StartInt_2)))
   (Start_3 String (x (ite StartBool Start_3 Start_1)))
   (Start_2 String ("" y "a" (str.++ Start_2 Start_3) (str.from_int StartInt)))
   (StartInt_1 Int (0 1 (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "1" y x) 0 1)))

(check-synth)
