(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_2 Int) (StartInt_8 Int) (Start_3 String) (Start_2 String) (Start_10 String) (StartInt_7 Int) (Start_1 String) (StartInt_4 Int) (StartInt_6 Int) (StartInt_5 Int) (StartBool_1 Bool) (Start_9 String) (Start_7 String) (Start_5 String) (Start_4 String) (Start_8 String) (Start_6 String))
  ((Start String ("a" y (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start Start) (str.from_int StartInt_3) (ite StartBool Start Start_1)))
   (StartInt Int (0 1 (str.len Start_6) (str.indexof Start_8 Start_8 StartInt_4)))
   (StartBool Bool (false true (not StartBool) (str.< Start_7 Start_9) (str.<= Start_5 Start_6) (str.contains Start_11 Start_2)))
   (Start_11 String ("" "0" (str.++ Start_4 Start_6) (str.at Start_10 StartInt) (str.replace Start_4 Start_5 Start_10) (ite StartBool_1 Start_2 Start_9)))
   (StartInt_1 Int (0 (str.indexof Start_8 Start_5 StartInt_6) (str.to_int Start)))
   (StartInt_3 Int (0 (str.len Start_8) (str.to_int Start_10)))
   (StartInt_2 Int (0 (str.indexof Start_5 Start_3 StartInt)))
   (StartInt_8 Int (1 (str.len Start_9) (str.indexof Start_4 Start_9 StartInt_4)))
   (Start_3 String ("b" (str.at Start_1 StartInt) (str.substr Start_9 StartInt_1 StartInt_3) (str.from_int StartInt) (ite StartBool_1 Start_9 Start_4)))
   (Start_2 String ("0" "a" "" (str.++ Start_10 Start_2) (str.at Start_7 StartInt) (str.substr Start_7 StartInt_8 StartInt_7) (str.from_int StartInt_5) (ite StartBool_1 Start_6 Start_6)))
   (Start_10 String (x (str.++ Start Start_8) (str.substr Start StartInt_6 StartInt_4) (str.replace Start_4 Start_2 Start_6) (ite StartBool Start_6 Start_3)))
   (StartInt_7 Int (0 1 (str.len Start_7) (str.indexof Start_9 Start_2 StartInt) (str.to_int Start_6)))
   (Start_1 String ("" "1" "0" y "a" (str.++ Start_1 Start_1) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_3 Start_2 Start_4) (str.from_int StartInt_1)))
   (StartInt_4 Int (0 (str.len Start_5) (str.indexof Start_2 Start_5 StartInt_7) (str.to_int Start_7)))
   (StartInt_6 Int (1 0 (str.indexof Start_1 Start_4 StartInt)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.indexof Start_1 Start_5 StartInt_1) (str.to_int Start_8)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.<= Start_3 Start_1) (str.contains Start_2 Start) (= Start_2 Start_5) (= StartInt_1 StartInt_6)))
   (Start_9 String (y "1" (str.++ Start_6 Start) (str.replace Start_5 Start_10 Start)))
   (Start_7 String ("a" "" "1" (str.++ Start_8 Start_5) (str.substr Start_2 StartInt_5 StartInt_3) (str.replace Start_8 Start_4 Start_3) (str.from_int StartInt_5)))
   (Start_5 String ("" "a" (str.++ Start Start_6) (str.at Start_7 StartInt_5) (str.from_int StartInt_1)))
   (Start_4 String ("0" (str.substr Start_2 StartInt StartInt_4) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start_4)))
   (Start_8 String ("a" y "1" (str.at Start_1 StartInt) (str.replace Start_3 Start Start) (str.from_int StartInt_1)))
   (Start_6 String ("a" (str.++ Start_1 Start) (str.at Start_3 StartInt_3) (str.substr Start_1 StartInt_3 StartInt_6) (str.replace Start_4 Start_1 Start_6) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "" "a")))

(check-synth)
