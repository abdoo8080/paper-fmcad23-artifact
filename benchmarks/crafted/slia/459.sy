(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_12 String) (StartInt_9 Int) (Start_1 String) (StartInt_8 Int) (Start_11 String) (StartInt_7 Int) (StartInt_5 Int) (Start_3 String) (StartInt_1 Int) (Start_4 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_5 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_7 String) (Start_10 String) (StartInt_4 Int) (Start_2 String) (StartInt_6 Int) (Start_6 String) (Start_9 String) (Start_8 String))
  ((Start String ("b" x "" (str.++ Start Start_1) (str.replace Start Start_2 Start_3)))
   (StartInt Int (1 0 (str.to_int Start_2)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.prefixof Start_6 Start_3) (str.suffixof Start_4 Start) (str.contains Start_5 Start_10) (= Start_8 Start) (= StartInt StartInt_9)))
   (Start_13 String (y (str.at Start_2 StartInt_7) (str.substr Start_12 StartInt_9 StartInt) (str.replace Start_6 Start_6 Start_3) (ite StartBool_2 Start_6 Start_13)))
   (Start_12 String ("0" (str.++ Start_7 Start_13) (str.substr Start_8 StartInt_9 StartInt_1) (str.replace Start_11 Start_11 Start_8) (str.from_int StartInt)))
   (StartInt_9 Int (0 (str.indexof Start Start_6 StartInt) (str.to_int Start)))
   (Start_1 String (y (str.++ Start_11 Start) (str.at Start_2 StartInt_1) (str.from_int StartInt_4) (ite StartBool_1 Start_10 Start_7)))
   (StartInt_8 Int (0 (str.len Start_7) (str.indexof Start Start_1 StartInt_5) (str.to_int Start_10)))
   (Start_11 String (y x (str.at Start_12 StartInt_3) (str.substr Start_8 StartInt_9 StartInt_9) (str.replace Start_5 Start_4 Start_2) (str.from_int StartInt_6)))
   (StartInt_7 Int (1 0 (str.len Start_1)))
   (StartInt_5 Int (0 (str.indexof Start Start_6 StartInt)))
   (Start_3 String (x "" (str.++ Start_3 Start_4) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt_1) (ite StartBool Start Start_4)))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.to_int Start_4)))
   (Start_4 String ("1" (str.substr Start StartInt StartInt_2) (str.replace Start_5 Start Start_3) (str.from_int StartInt_2)))
   (StartBool_2 Bool (true false (and StartBool StartBool) (str.prefixof Start_3 Start_6) (= Start_9 Start_3) (<= StartInt_7 StartInt_7)))
   (StartInt_3 Int (1 0 (str.len Start_9) (str.indexof Start_8 Start_6 StartInt_3)))
   (Start_5 String (x "0" "1" "b" y "a" "" (str.substr Start_2 StartInt StartInt_2) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 (str.len Start) (str.indexof Start Start_6 StartInt_1)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start_2 Start_6) (str.<= Start_1 Start_3) (str.prefixof Start_2 Start_6) (<= StartInt_5 StartInt_4)))
   (Start_7 String ("1" "" x (str.++ Start_3 Start_7) (str.at Start_5 StartInt_8) (str.substr Start_7 StartInt_6 StartInt_1) (str.replace Start_5 Start_3 Start_6) (str.from_int StartInt_3)))
   (Start_10 String ("b" (str.at Start_5 StartInt_1) (str.from_int StartInt_7)))
   (StartInt_4 Int (1 0 (str.to_int Start_8)))
   (Start_2 String ("b" x (str.++ Start_4 Start_7) (str.substr Start_8 StartInt_3 StartInt_3) (str.replace Start_3 Start_8 Start_6) (ite StartBool Start_7 Start_4)))
   (StartInt_6 Int (0 1))
   (Start_6 String (x "" (str.at Start_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_5 Start_6)))
   (Start_9 String (x "0" y (str.++ Start_1 Start_3) (str.substr Start_4 StartInt_1 StartInt_4) (str.replace Start_8 Start_2 Start_8) (str.from_int StartInt_4)))
   (Start_8 String ("b" (str.at Start StartInt_1) (str.substr Start_10 StartInt_5 StartInt_6) (str.replace Start_10 Start_10 Start) (ite StartBool Start_1 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.at (str.replace x "b" x) 0) "0")))

(check-synth)
