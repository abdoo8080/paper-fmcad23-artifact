(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_13 String) (Start_12 String) (StartInt_6 Int) (StartInt_3 Int) (Start_7 String) (Start_10 String) (StartInt_1 Int) (Start_5 String) (Start_2 String) (StartInt_2 Int) (Start_4 String) (StartInt_4 Int) (Start_3 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_6 String) (Start_1 String) (Start_9 String) (Start_8 String))
  ((Start String ("a" y "" x "0" "1" "b" (str.++ Start_1 Start) (str.at Start StartInt) (str.from_int StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_1 Start_4 StartInt_3) (str.to_int Start_6)))
   (StartBool Bool (true false (not StartBool_1) (str.prefixof Start_13 Start) (str.suffixof Start_7 Start_13) (str.contains Start Start_10) (= StartInt_2 StartInt_4)))
   (Start_11 String (y (str.at Start_1 StartInt_2) (str.replace Start_3 Start_10 Start_7) (str.from_int StartInt)))
   (Start_13 String ("0" y (str.++ Start_11 Start_8) (str.at Start_12 StartInt_5) (str.replace Start_1 Start_4 Start_2) (str.from_int StartInt_6)))
   (Start_12 String ("b" "" (str.++ Start_2 Start_13) (str.from_int StartInt_6)))
   (StartInt_6 Int (0 (str.indexof Start_3 Start_11 StartInt) (str.to_int Start_12)))
   (StartInt_3 Int (0 1 (str.indexof Start_6 Start_6 StartInt_6)))
   (Start_7 String ("a" (str.++ Start_9 Start_8) (str.at Start_3 StartInt_5) (str.replace Start_6 Start_4 Start_1) (str.from_int StartInt_5)))
   (Start_10 String ("b" (str.at Start_10 StartInt_5) (str.replace Start_10 Start_3 Start_7) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start Start_2 StartInt) (str.to_int Start_1)))
   (Start_5 String ("b" "" (ite StartBool Start_5 Start_2)))
   (Start_2 String ("b" y (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start_1 Start_2 Start_1) (ite StartBool Start_2 Start)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.indexof Start_3 Start_3 StartInt_1)))
   (Start_4 String (x "1" "" y (str.++ Start Start_3) (str.substr Start StartInt StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_5 Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_8)))
   (Start_3 String ("b" (str.++ Start_3 Start_4) (str.at Start_5 StartInt) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false (str.prefixof Start_8 Start_7) (str.contains Start Start_7) (= Start_9 Start_7) (= StartInt_2 StartInt)))
   (StartInt_5 Int (0 1 (str.indexof Start_1 Start_3 StartInt_3) (str.to_int Start_6)))
   (Start_6 String ("0" "b" (str.++ Start Start_2) (str.replace Start_7 Start_1 Start) (ite StartBool_1 Start_4 Start_5)))
   (Start_1 String ("a" (str.++ Start_3 Start_2) (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt)))
   (Start_9 String ("0" (str.++ Start_3 Start_9) (str.replace Start_3 Start_5 Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_4)))
   (Start_8 String (y (str.from_int StartInt_4) (ite StartBool Start_10 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "" "b") y)))

(check-synth)
