(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_8 Bool) (Start_2 String) (StartInt_2 Int) (Start_4 String) (Start_18 String) (StartBool_1 Bool) (StartInt_5 Int) (StartBool_7 Bool) (Start_8 String) (StartInt_1 Int) (StartInt_6 Int) (Start_5 String) (Start_3 String) (StartBool_2 Bool) (Start_1 String) (StartInt_7 Int) (StartInt_9 Int) (StartBool_4 Bool) (StartInt_3 Int) (Start_7 String) (Start_12 String) (StartInt_8 Int) (Start_9 String) (Start_11 String) (StartBool_3 Bool) (Start_13 String) (Start_10 String) (Start_14 String) (Start_6 String) (StartInt_4 Int) (Start_15 String) (StartBool_5 Bool) (StartBool_6 Bool) (StartInt_12 Int) (Start_16 String) (StartInt_11 Int) (StartInt_10 Int) (Start_17 String))
  ((Start String ("" "a" y "1" x "b" (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (1 0 (str.len Start_8) (str.indexof Start_10 Start_16 StartInt_9)))
   (StartBool Bool (true false (not StartBool_5) (and StartBool StartBool_8) (str.suffixof Start_6 Start_3) (str.contains Start_10 Start_10) (= StartInt_8 StartInt_12)))
   (StartBool_8 Bool (false true (not StartBool) (str.< Start_16 Start_8) (str.prefixof Start_1 Start_9) (str.suffixof Start_16 Start_9) (= Start_1 Start)))
   (Start_2 String ("" "0" (str.at Start_6 StartInt) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 1 (str.len Start_7) (str.indexof Start Start_8 StartInt_3)))
   (Start_4 String (x (str.substr Start_10 StartInt_3 StartInt_9) (str.from_int StartInt_5) (ite StartBool_3 Start_10 Start_11)))
   (Start_18 String ("a" "0" (str.from_int StartInt)))
   (StartBool_1 Bool (true (str.< Start_5 Start_18) (str.<= Start_15 Start_13) (str.prefixof Start_2 Start_8) (str.suffixof Start_9 Start_13)))
   (StartInt_5 Int (1 0 (str.len Start_6)))
   (StartBool_7 Bool (true false (str.<= Start_2 Start_11) (str.suffixof Start_4 Start_12) (str.contains Start_3 Start_12) (= Start Start_14)))
   (Start_8 String ("1" (str.at Start_5 StartInt_3) (str.replace Start_9 Start_7 Start_7) (str.from_int StartInt_8)))
   (StartInt_1 Int (1 0 (str.indexof Start_2 Start_12 StartInt_7)))
   (StartInt_6 Int (0 (str.indexof Start_8 Start_6 StartInt) (str.to_int Start_8)))
   (Start_5 String ("0" (str.++ Start_6 Start) (str.at Start_3 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_5 Start_4 Start_5) (str.from_int StartInt_3)))
   (Start_3 String ("" x "0" "1" (str.++ Start_4 Start_2) (str.at Start_1 StartInt_1) (ite StartBool_1 Start_1 Start_5)))
   (StartBool_2 Bool (true false (str.<= Start_5 Start_6) (str.prefixof Start_3 Start_6) (= StartInt_5 StartInt_6) (<= StartInt_7 StartInt_7)))
   (Start_1 String (y "1" "b" (str.++ Start_1 Start_2) (str.at Start_2 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_7 Int (0 (str.indexof Start_3 Start_4 StartInt_2) (str.to_int Start)))
   (StartInt_9 Int (0 (str.len Start_1) (str.indexof Start_2 Start_16 StartInt_11)))
   (StartBool_4 Bool (true (not StartBool_3) (and StartBool_6 StartBool) (str.< Start_2 Start_17) (str.prefixof Start_4 Start_13) (str.suffixof Start_6 Start_15) (= StartInt_4 StartInt_1) (<= StartInt_8 StartInt_6)))
   (StartInt_3 Int (0 (str.len Start_3) (str.indexof Start Start_4 StartInt) (str.to_int Start_4)))
   (Start_7 String (x "1" (str.from_int StartInt_2) (ite StartBool_2 Start Start_1)))
   (Start_12 String (y (str.at Start_7 StartInt_7) (str.substr Start_4 StartInt_9 StartInt_9) (str.replace Start_6 Start_12 Start_3) (str.from_int StartInt_10) (ite StartBool_5 Start_11 Start_1)))
   (StartInt_8 Int (0 1))
   (Start_9 String (x (str.replace Start_5 Start_10 Start) (str.from_int StartInt_9) (ite StartBool_3 Start_9 Start_10)))
   (Start_11 String ("1" x "0" "a" y "b" (str.++ Start_5 Start_7) (str.at Start_7 StartInt_8) (str.substr Start_1 StartInt_3 StartInt_6) (str.replace Start_4 Start_12 Start_13)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_1 StartBool_4) (str.<= Start_3 Start_4) (str.suffixof Start_7 Start_4) (str.contains Start_10 Start_11) (= Start Start_10) (= StartInt_1 StartInt_2)))
   (Start_13 String (y (str.++ Start_7 Start_8) (str.at Start_2 StartInt_7) (str.substr Start_5 StartInt_7 StartInt_8) (str.replace Start_3 Start_7 Start_14)))
   (Start_10 String ("b" (str.++ Start Start_1) (str.at Start StartInt) (str.substr Start_17 StartInt StartInt_9) (ite StartBool_7 Start_3 Start_16)))
   (Start_14 String (x y "b" (str.++ Start_7 Start_15) (str.at Start_4 StartInt_4) (str.substr Start_2 StartInt_9 StartInt_5) (str.replace Start_1 Start Start_3) (str.from_int StartInt_8)))
   (Start_6 String ("1" (str.++ Start_3 Start_3) (str.substr Start StartInt_4 StartInt_1) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.indexof Start_4 Start_1 StartInt_2) (str.to_int Start_7)))
   (Start_15 String (x "0" "a" "" y "1" (str.at Start_1 StartInt_9) (str.substr Start_7 StartInt_5 StartInt_3) (str.from_int StartInt_9)))
   (StartBool_5 Bool (false (not StartBool_6) (and StartBool_3 StartBool) (str.< Start_15 Start_13) (str.<= Start_5 Start_6) (= Start_7 Start_7) (= StartInt_2 StartInt)))
   (StartBool_6 Bool (true (and StartBool StartBool_1) (str.< Start_11 Start_12) (str.<= Start_16 Start_13) (str.suffixof Start_7 Start_9) (str.contains Start_3 Start_9) (<= StartInt_4 StartInt_6)))
   (StartInt_12 Int (0 1 (str.len Start_7) (str.to_int Start_14)))
   (Start_16 String ("1" "" x (str.replace Start_16 Start_14 Start_11) (str.from_int StartInt_5)))
   (StartInt_11 Int (0 1 (str.len Start_12) (str.to_int Start_4)))
   (StartInt_10 Int (0 (str.indexof Start Start_9 StartInt_3)))
   (Start_17 String (x (str.at Start_4 StartInt_6) (str.substr Start_6 StartInt_1 StartInt_7) (ite StartBool_4 Start_12 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains "b" x) "" x)))

(check-synth)
