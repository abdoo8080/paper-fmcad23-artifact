(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (StartInt_4 Int) (Start_7 String) (Start_10 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_18 String) (Start_4 String) (StartBool_3 Bool) (StartInt_2 Int) (Start_5 String) (StartInt_5 Int) (Start_8 String) (Start_2 String) (Start_15 String) (Start_16 String) (Start_6 String) (StartInt_8 Int) (Start_17 String) (Start_11 String) (StartInt_6 Int) (Start_9 String) (StartBool_2 Bool) (StartInt_7 Int) (Start_12 String) (Start_1 String) (Start_14 String) (Start_13 String) (StartInt_3 Int) (Start_3 String))
  ((Start String (y (str.++ Start_1 Start_2)))
   (StartInt Int (1 0))
   (StartBool Bool (true false (and StartBool_1 StartBool_1) (str.<= Start_7 Start_15) (str.prefixof Start_17 Start_18) (str.suffixof Start_2 Start_11) (str.contains Start_13 Start) (<= StartInt_8 StartInt_4)))
   (StartInt_9 Int (1 (str.len Start_11) (str.indexof Start_7 Start StartInt)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start Start_5 StartInt_2) (str.to_int Start_4)))
   (Start_7 String ("" "1" (str.++ Start_6 Start_4)))
   (Start_10 String ("b" (str.++ Start_11 Start_6) (str.substr Start_11 StartInt_2 StartInt_4) (str.replace Start_10 Start_5 Start_1) (str.from_int StartInt_5)))
   (StartInt_1 Int (1 (str.to_int Start_5)))
   (StartBool_1 Bool (true false (str.suffixof Start_1 Start_4) (str.contains Start_6 Start_6)))
   (Start_18 String (y (str.++ Start_15 Start_1) (str.at Start_14 StartInt_8) (str.substr Start_5 StartInt_6 StartInt_7)))
   (Start_4 String ("a" (str.++ Start Start_6) (str.substr Start_3 StartInt StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start Start_5)))
   (StartBool_3 Bool (false true (not StartBool) (str.<= Start_2 Start_9) (str.prefixof Start_3 Start_9) (str.suffixof Start_11 Start_8) (str.contains Start_8 Start_3) (= Start Start_14) (= StartInt_5 StartInt_2) (<= StartInt_1 StartInt_7)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.indexof Start_3 Start_5 StartInt_1) (str.to_int Start)))
   (Start_5 String ("b" x y (str.++ Start_2 Start_1) (str.at Start_2 StartInt_2) (str.from_int StartInt)))
   (StartInt_5 Int (1 0 (str.to_int Start_3)))
   (Start_8 String (x (str.++ Start Start_13) (str.replace Start_1 Start_4 Start_16)))
   (Start_2 String ("a" "1" x y (str.replace Start Start_3 Start_4) (str.from_int StartInt_1)))
   (Start_15 String (y "a" (ite StartBool_1 Start Start_2)))
   (Start_16 String ("" (str.++ Start_8 Start_12) (str.at Start_14 StartInt_6) (ite StartBool Start_3 Start_2)))
   (Start_6 String ("1" "a" (str.++ Start_8 Start_5) (str.at Start_4 StartInt_1) (str.substr Start_9 StartInt_1 StartInt) (str.replace Start_10 Start_9 Start_4) (str.from_int StartInt_3)))
   (StartInt_8 Int (1 0 (str.len Start_17) (str.to_int Start_13)))
   (Start_17 String ("a" "b" x (ite StartBool Start_12 Start_1)))
   (Start_11 String ("" (str.++ Start_1 Start_1) (str.substr Start_5 StartInt_3 StartInt_1) (str.replace Start_8 Start_5 Start_6)))
   (StartInt_6 Int (0 (str.indexof Start_6 Start_14 StartInt_1)))
   (Start_9 String ("0" (str.++ Start_6 Start) (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_12 Start_4 Start_7) (ite StartBool Start Start_2)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_3 StartBool) (str.< Start_5 Start) (str.<= Start_2 Start_5) (str.contains Start_7 Start_7) (= Start_6 Start_2)))
   (StartInt_7 Int (0 (str.indexof Start_4 Start_5 StartInt_4) (str.to_int Start_6)))
   (Start_12 String (x (str.++ Start_1 Start_13) (str.substr Start_12 StartInt_6 StartInt_4) (ite StartBool_2 Start_6 Start_10)))
   (Start_1 String ("" (str.++ Start_10 Start_9) (str.at Start_13 StartInt_5) (str.replace Start_6 Start Start_4) (str.from_int StartInt_9)))
   (Start_14 String ("0" "b" (str.substr Start_11 StartInt_3 StartInt_5) (str.replace Start_10 Start_11 Start_14) (str.from_int StartInt_5) (ite StartBool_1 Start_10 Start_7)))
   (Start_13 String (y (str.replace Start_15 Start_5 Start_16)))
   (StartInt_3 Int (1 0 (str.len Start_7)))
   (Start_3 String ("b" "a" "" (str.at Start_2 StartInt_8) (str.substr Start_3 StartInt_1 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "1" "b") "0")))

(check-synth)
