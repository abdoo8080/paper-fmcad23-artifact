(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_5 String) (Start_9 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_1 Int) (StartInt_9 Int) (StartInt_3 Int) (Start_1 String) (StartInt_5 Int) (Start_3 String) (StartInt_6 Int) (Start_2 String) (Start_13 String) (Start_8 String) (Start_7 String) (StartBool_3 Bool) (Start_14 String) (Start_12 String) (Start_4 String) (Start_11 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_10 String) (StartInt_7 Int) (StartBool_4 Bool) (Start_6 String) (StartBool_5 Bool) (StartInt_8 Int))
  ((Start String ("b" "a" "0" "" x (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (1))
   (StartBool Bool (true (not StartBool_1) (and StartBool_2 StartBool_3) (str.< Start_1 Start_3) (str.suffixof Start_2 Start)))
   (StartBool_6 Bool (false (not StartBool) (and StartBool_3 StartBool) (str.< Start_14 Start_14) (str.<= Start_5 Start_7) (str.prefixof Start_4 Start_5) (str.suffixof Start_1 Start_11) (str.contains Start Start_1) (<= StartInt_7 StartInt_9)))
   (Start_5 String ("0" x "" "b" (str.at Start_3 StartInt_4) (str.replace Start_1 Start_3 Start_5)))
   (Start_9 String ("1" (str.++ Start_7 Start_6) (str.at Start_10 StartInt) (str.from_int StartInt_4) (ite StartBool Start_1 Start_9)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_6 StartBool_6) (str.prefixof Start_12 Start_5) (str.contains Start_8 Start_10) (= StartInt_1 StartInt_4) (<= StartInt_6 StartInt_2)))
   (StartInt_4 Int (0 1 (str.len Start) (str.indexof Start Start StartInt_1) (str.to_int Start_6)))
   (StartInt_1 Int (1 0 (str.len Start_2) (str.to_int Start_1)))
   (StartInt_9 Int (0))
   (StartInt_3 Int (0 (str.indexof Start Start StartInt_3) (str.to_int Start)))
   (Start_1 String ("0" "1" x (str.++ Start Start) (str.replace Start_2 Start Start_2) (str.from_int StartInt_3)))
   (StartInt_5 Int (1 (str.len Start_7) (str.to_int Start_3)))
   (Start_3 String ("b" "1" (str.substr Start_4 StartInt_3 StartInt_1) (str.replace Start_1 Start_5 Start_1) (str.from_int StartInt) (ite StartBool Start_1 Start_2)))
   (StartInt_6 Int (0 (str.indexof Start_11 Start_4 StartInt_6)))
   (Start_2 String (y "" (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (Start_13 String (y (str.++ Start_4 Start_10) (str.from_int StartInt_3)))
   (Start_8 String (y (str.at Start_8 StartInt_3) (str.substr Start_3 StartInt_5 StartInt_5) (ite StartBool_2 Start_5 Start_9)))
   (Start_7 String (y (str.++ Start_2 Start_3) (str.replace Start_7 Start_7 Start_3) (str.from_int StartInt_5) (ite StartBool Start_8 Start_1)))
   (StartBool_3 Bool (true false (not StartBool_2) (str.< Start_1 Start_6) (str.prefixof Start_6 Start_8) (str.suffixof Start_2 Start_10) (= Start_7 Start) (<= StartInt_2 StartInt_6)))
   (Start_14 String (x "a" (str.++ Start_7 Start_12) (str.at Start_12 StartInt_1) (str.substr Start_10 StartInt StartInt_1) (str.from_int StartInt_4)))
   (Start_12 String ("1" (ite StartBool_3 Start_12 Start_5)))
   (Start_4 String ("" "b" "0" "a" y (str.++ Start_10 Start_6) (str.substr Start StartInt_2 StartInt) (str.replace Start_5 Start Start_9) (ite StartBool_3 Start_2 Start_5)))
   (Start_11 String ("" (str.++ Start_9 Start_12) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_13 Start_2 Start_5) (ite StartBool Start_4 Start_8)))
   (StartInt_2 Int (0 1 (str.len Start_2)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_4) (str.< Start_13 Start_14) (str.prefixof Start_7 Start_3) (= StartInt_2 StartInt_3) (<= StartInt_7 StartInt_2)))
   (Start_10 String (y (str.at Start_4 StartInt) (str.substr Start StartInt_4 StartInt_1) (str.replace Start Start_7 Start_4) (str.from_int StartInt_3) (ite StartBool_3 Start_3 Start_8)))
   (StartInt_7 Int (0))
   (StartBool_4 Bool (true (not StartBool_4) (and StartBool_5 StartBool_5) (str.< Start_1 Start_4) (str.<= Start_9 Start_12) (str.suffixof Start Start_6) (str.contains Start_11 Start_12) (<= StartInt_8 StartInt_4)))
   (Start_6 String ("" (str.++ Start_4 Start_4) (str.at Start_7 StartInt_3) (str.substr Start_8 StartInt_3 StartInt_5) (str.replace Start_3 Start_1 Start_2) (ite StartBool_2 Start Start_1)))
   (StartBool_5 Bool (false (and StartBool StartBool) (= StartInt_5 StartInt_6) (<= StartInt_2 StartInt_7)))
   (StartInt_8 Int (0 (str.indexof Start_13 Start_6 StartInt_2) (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace x "a" "") 1 1)))

(check-synth)
