(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_12 Int) (Start_19 String) (StartInt_2 Int) (Start_3 String) (Start_5 String) (Start_18 String) (StartInt_10 Int) (Start_8 String) (StartInt_7 Int) (Start_9 String) (StartBool_3 Bool) (Start_7 String) (Start_2 String) (StartInt_6 Int) (Start_4 String) (StartBool_2 Bool) (Start_10 String) (StartInt_13 Int) (Start_20 String) (StartBool_1 Bool) (Start_14 String) (Start_1 String) (StartInt_1 Int) (Start_13 String) (StartInt_5 Int) (StartInt_4 Int) (StartInt_9 Int) (Start_15 String) (StartInt_8 Int) (Start_12 String) (StartInt_3 Int) (Start_16 String) (Start_6 String) (Start_17 String) (Start_11 String) (StartBool_4 Bool) (StartInt_11 Int))
  ((Start String ("b" (str.++ Start Start_1) (str.substr Start_1 StartInt_1 StartInt_1)))
   (StartInt Int (0 (str.len Start_19)))
   (StartBool Bool (false (and StartBool_4 StartBool_1) (str.< Start_20 Start_2) (str.<= Start_13 Start_2) (str.prefixof Start_6 Start_3) (str.contains Start_12 Start_10) (= StartInt_12 StartInt_13) (<= StartInt_4 StartInt_6)))
   (StartInt_12 Int (0 (str.len Start_4) (str.indexof Start_3 Start_11 StartInt_11)))
   (Start_19 String ("" "1" (str.++ Start_15 Start_4) (str.substr Start_18 StartInt StartInt_5) (str.replace Start_20 Start_10 Start_12) (str.from_int StartInt_8)))
   (StartInt_2 Int (0 1 (str.indexof Start_12 Start_16 StartInt_10)))
   (Start_3 String ("1" (str.++ Start_16 Start_8) (str.substr Start_16 StartInt_8 StartInt_6) (str.from_int StartInt_9)))
   (Start_5 String (x (str.++ Start_15 Start_8) (str.at Start_10 StartInt_6) (str.replace Start_18 Start_11 Start_3) (str.from_int StartInt_9)))
   (Start_18 String ("1" (str.++ Start_2 Start_1) (str.replace Start_15 Start_18 Start_12) (str.from_int StartInt_4)))
   (StartInt_10 Int (1 (str.len Start_4) (str.to_int Start_4)))
   (Start_8 String ("" "1" (str.at Start_7 StartInt_4) (str.from_int StartInt_3)))
   (StartInt_7 Int (0 1 (str.len Start_2) (str.indexof Start Start_10 StartInt_2) (str.to_int Start_4)))
   (Start_9 String (x (str.++ Start_5 Start_5) (str.replace Start_2 Start_9 Start_6) (str.from_int StartInt_4) (ite StartBool Start_1 Start_10)))
   (StartBool_3 Bool (true (not StartBool_4) (str.prefixof Start_18 Start_16) (str.suffixof Start_18 Start_18)))
   (Start_7 String (x "1" (str.++ Start_2 Start_8) (str.at Start StartInt) (str.substr Start_7 StartInt_1 StartInt_3) (str.from_int StartInt_4) (ite StartBool_2 Start_9 Start_5)))
   (Start_2 String ("" "0" x "1" (str.++ Start_7 Start_14) (str.substr Start_18 StartInt_10 StartInt_1) (str.replace Start_16 Start_6 Start_15) (str.from_int StartInt_10)))
   (StartInt_6 Int (1 0 (str.indexof Start_9 Start_8 StartInt_4) (str.to_int Start_7)))
   (Start_4 String ("1" (str.++ Start_5 Start_6) (str.at Start_6 StartInt) (ite StartBool_2 Start_7 Start_4)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool StartBool_1) (str.< Start_5 Start_6) (str.suffixof Start_9 Start_5) (str.contains Start_7 Start_15) (= Start_16 Start_11)))
   (Start_10 String ("0" (str.++ Start Start_5) (str.at Start_10 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_5) (str.replace Start_6 Start_7 Start_8) (str.from_int StartInt_6) (ite StartBool Start_4 Start_6)))
   (StartInt_13 Int (1 (str.indexof Start_10 Start_12 StartInt_6) (str.to_int Start_2)))
   (Start_20 String ("a" "1" x y (str.at Start_13 StartInt_12)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_1) (str.< Start_3 Start_1) (str.<= Start_3 Start) (str.suffixof Start Start_2) (= Start_4 Start_4) (<= StartInt_1 StartInt_1)))
   (Start_14 String ("0" "b" (str.++ Start_10 Start_15) (str.at Start_14 StartInt_7) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt_6)))
   (Start_1 String ("a" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_2 Start_2 Start) (str.from_int StartInt) (ite StartBool_1 Start Start)))
   (StartInt_1 Int (0 1 (str.to_int Start_1)))
   (Start_13 String ("a" "0" "b" "" (str.++ Start_14 Start_10) (str.substr Start_9 StartInt_6 StartInt_1) (str.replace Start_11 Start_14 Start_9) (str.from_int StartInt_8)))
   (StartInt_5 Int (1 (str.len Start_11) (str.indexof Start_7 Start_5 StartInt_7)))
   (StartInt_4 Int (1 (str.len Start_1)))
   (StartInt_9 Int (1 0 (str.indexof Start_5 Start_12 StartInt_10) (str.to_int Start_13)))
   (Start_15 String ("a" (str.substr Start_6 StartInt_9 StartInt_9) (str.replace Start Start_15 Start_13)))
   (StartInt_8 Int (0))
   (Start_12 String ("" (str.++ Start_10 Start_14) (str.at Start_1 StartInt_5) (str.replace Start_12 Start_14 Start_5) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0))
   (Start_16 String ("0" x "1" (ite StartBool_1 Start_15 Start_5)))
   (Start_6 String ("1" "a" y "0" (str.++ Start_17 Start_3) (str.at Start_2 StartInt_8) (str.replace Start_13 Start_3 Start_14) (str.from_int StartInt_9)))
   (Start_17 String (x (str.++ Start_6 Start_4) (str.at Start_14 StartInt_4) (str.substr Start_18 StartInt StartInt_11) (str.from_int StartInt_5) (ite StartBool_3 Start_18 Start_17)))
   (Start_11 String (x "" (str.++ Start_5 Start_12) (str.substr Start_10 StartInt_8 StartInt_8) (str.replace Start_12 Start_11 Start_6) (str.from_int StartInt_9) (ite StartBool Start_13 Start_2)))
   (StartBool_4 Bool (false (not StartBool) (str.<= Start_15 Start_3) (str.suffixof Start_9 Start_17) (= Start_2 Start_17)))
   (StartInt_11 Int (0 1 (str.len Start_13) (str.indexof Start_18 Start_8 StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" "" (str.at x (str.indexof y x 1)))))

(check-synth)
