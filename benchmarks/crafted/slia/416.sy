(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartBool_4 Bool) (Start_12 String) (StartBool_1 Bool) (Start_7 String) (StartBool_6 Bool) (Start_3 String) (Start_8 String) (Start_10 String) (StartInt_2 Int) (Start_9 String) (Start_1 String) (StartInt_1 Int) (StartInt_4 Int) (Start_14 String) (Start_11 String) (Start_6 String) (StartInt_3 Int) (StartBool_5 Bool) (StartBool_3 Bool) (StartInt_5 Int) (StartBool_2 Bool) (Start_2 String) (StartInt_6 Int) (Start_5 String) (Start_13 String) (StartInt_7 Int) (Start_4 String))
  ((Start String ("a" (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.len Start) (str.to_int Start_2)))
   (StartBool Bool (true (not StartBool_1) (and StartBool StartBool_1) (str.<= Start_2 Start) (= Start Start_2) (<= StartInt_1 StartInt)))
   (StartInt_8 Int (0 1))
   (StartBool_4 Bool (false (not StartBool_3) (str.< Start_1 Start_5) (str.prefixof Start_8 Start_9) (= Start_4 Start_8)))
   (Start_12 String (y "a" (str.++ Start_9 Start_3) (str.at Start_9 StartInt_3) (str.replace Start_7 Start_1 Start_4) (str.from_int StartInt_6) (ite StartBool_2 Start_7 Start_10)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool StartBool_2) (str.contains Start_3 Start_1) (= StartInt StartInt)))
   (Start_7 String (x y "" "a" (str.substr Start_12 StartInt_2 StartInt_3) (str.from_int StartInt_4)))
   (StartBool_6 Bool (false true (not StartBool_5) (str.<= Start_6 Start_8) (str.suffixof Start_1 Start_14) (str.contains Start_11 Start) (= StartInt_4 StartInt_8) (<= StartInt_8 StartInt_8)))
   (Start_3 String ("a" "" (str.replace Start Start Start) (str.from_int StartInt_1)))
   (Start_8 String ("" (str.++ Start_10 Start_12) (str.replace Start_9 Start_4 Start_4) (str.from_int StartInt_5) (ite StartBool Start_6 Start_4)))
   (Start_10 String (x (str.++ Start_1 Start_9) (str.at Start_11 StartInt) (str.substr Start StartInt_1 StartInt) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 (str.to_int Start_2)))
   (Start_9 String (y (str.++ Start_10 Start_1) (str.substr Start_2 StartInt_1 StartInt_3)))
   (Start_1 String ("a" (str.substr Start_1 StartInt_2 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_1 Int (1 0 (str.indexof Start Start StartInt)))
   (StartInt_4 Int (0 1 (str.to_int Start_9)))
   (Start_14 String ("a" "1" (str.++ Start_7 Start_1) (str.at Start_10 StartInt_2) (str.from_int StartInt) (ite StartBool_6 Start_11 Start_6)))
   (Start_11 String (y (str.substr Start_7 StartInt_1 StartInt_4) (str.replace Start_12 Start_9 Start_2) (str.from_int StartInt_5) (ite StartBool_5 Start_10 Start_4)))
   (Start_6 String ("b" (str.at Start_7 StartInt_1) (str.from_int StartInt) (ite StartBool_4 Start_4 Start_3)))
   (StartInt_3 Int (0 1 (str.len Start_6)))
   (StartBool_5 Bool (false true (and StartBool_4 StartBool_2) (str.< Start_4 Start_8) (str.suffixof Start_10 Start_7) (= Start_12 Start_2) (<= StartInt_3 StartInt)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool StartBool_3) (str.prefixof Start_11 Start_4) (str.suffixof Start_12 Start_14) (str.contains Start_14 Start_9) (= Start_11 Start_5) (<= StartInt_2 StartInt_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_3 Start_11 StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool_3 StartBool_3) (str.<= Start_2 Start) (str.prefixof Start_1 Start_2) (str.suffixof Start_4 Start) (= Start_5 Start_6)))
   (Start_2 String ("b" (str.++ Start Start_3) (str.at Start StartInt_2)))
   (StartInt_6 Int (0 1))
   (Start_5 String (y (str.++ Start Start_9) (str.at Start_13 StartInt_1) (str.from_int StartInt_4)))
   (Start_13 String ("1" "b" x "a" y (str.++ Start_10 Start_5) (str.substr Start_2 StartInt_7 StartInt_3) (str.replace Start_1 Start_10 Start_8) (ite StartBool_4 Start_5 Start_11)))
   (StartInt_7 Int (1 0 (str.len Start_1) (str.indexof Start_8 Start_7 StartInt_5) (str.to_int Start_10)))
   (Start_4 String ("0" "" x (str.substr Start_11 StartInt_6 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.++ "0" x) "")))

(check-synth)
