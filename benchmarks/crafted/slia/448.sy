(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (Start_9 String) (StartInt_2 Int) (Start_4 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_5 String) (Start_2 String) (Start_1 String) (Start_3 String) (StartInt_3 Int) (Start_8 String) (Start_7 String) (StartInt_4 Int))
  ((Start String ("b" "a" (str.++ Start_1 Start) (str.substr Start_2 StartInt StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (0 (str.len Start_8) (str.indexof Start_2 Start_7 StartInt)))
   (StartBool Bool (false (and StartBool_1 StartBool) (str.<= Start_9 Start_4) (str.prefixof Start_7 Start_9) (str.contains Start_7 Start_3) (= Start_3 Start_6)))
   (Start_6 String ("a" "0" y "1" (str.substr Start_3 StartInt_2 StartInt_3) (str.from_int StartInt_2)))
   (Start_9 String (""))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_2 StartInt)))
   (Start_4 String ("" "0" "a" x "1" (str.++ Start_3 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start_1)))
   (StartBool_1 Bool (true (str.prefixof Start_2 Start_2) (= StartInt StartInt_2) (<= StartInt_2 StartInt_1)))
   (StartInt_1 Int (0 1 (str.indexof Start_5 Start_2 StartInt) (str.to_int Start_3)))
   (Start_5 String ("a" (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_3 Start_5 Start_1)))
   (Start_2 String (x (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_5 Start Start_5) (str.from_int StartInt_2)))
   (Start_1 String (y "b" "" "1" (str.++ Start Start_6) (str.at Start_7 StartInt) (str.replace Start_2 Start_7 Start_6) (str.from_int StartInt_2)))
   (Start_3 String (x (str.at Start_1 StartInt_1) (str.replace Start_2 Start_2 Start_4) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 (str.len Start_1) (str.indexof Start_8 Start_5 StartInt_1) (str.to_int Start_1)))
   (Start_8 String (y (str.++ Start_9 Start_7) (str.at Start StartInt_4)))
   (Start_7 String (y (str.++ Start_5 Start_3) (str.at Start_2 StartInt_3) (str.from_int StartInt_2)))
   (StartInt_4 Int (1 0 (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof "1" y) "0" y)))

(check-synth)
