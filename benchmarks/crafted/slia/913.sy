(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (StartBool_1 Bool) (Start_8 String) (Start_6 String) (Start_7 String) (Start_5 String) (StartInt_4 Int) (Start_2 String) (StartBool_4 Bool) (StartInt_3 Int) (StartInt_1 Int) (Start_3 String) (StartInt_2 Int) (Start_14 String) (Start_1 String) (Start_9 String) (Start_4 String) (StartBool_2 Bool) (StartInt_7 Int) (StartInt_5 Int) (StartInt_6 Int) (Start_10 String) (Start_15 String) (Start_11 String) (Start_13 String) (StartBool_3 Bool) (Start_12 String) (Start_16 String))
  ((Start String (y (str.++ Start Start) (str.at Start StartInt_1) (str.replace Start Start_1 Start) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.indexof Start_1 Start StartInt)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (str.<= Start_4 Start_3) (str.prefixof Start_2 Start_3) (= Start_4 Start_5) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_2)))
   (Start_17 String ("0" "1" (str.++ Start_16 Start_17) (str.substr Start_5 StartInt_4 StartInt_4) (str.replace Start_11 Start Start_8) (str.from_int StartInt_5)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_2 StartBool_4) (str.< Start_2 Start_17) (str.<= Start_6 Start_9) (= Start_3 Start_16) (= StartInt StartInt_7) (<= StartInt_6 StartInt_1)))
   (Start_8 String ("0" (str.++ Start_6 Start_2) (str.substr Start_7 StartInt_5 StartInt_3) (ite StartBool_2 Start_5 Start_8)))
   (Start_6 String ("" "0" (str.substr Start_2 StartInt_2 StartInt_3)))
   (Start_7 String (x "1" (str.at Start_4 StartInt_4) (ite StartBool Start_8 Start_2)))
   (Start_5 String ("b" (str.at Start_6 StartInt_3) (str.replace Start_6 Start_6 Start_1) (str.from_int StartInt) (ite StartBool Start_2 Start_7)))
   (StartInt_4 Int (1 0 (str.len Start_13) (str.indexof Start_16 Start_7 StartInt_3)))
   (Start_2 String ("0" "b" y (str.replace Start_3 Start_1 Start_3) (ite StartBool Start_3 Start_2)))
   (StartBool_4 Bool (false true (str.<= Start_2 Start_12) (= StartInt_6 StartInt_6)))
   (StartInt_3 Int (1 (str.len Start_6)))
   (StartInt_1 Int (0 (str.len Start_1)))
   (Start_3 String ("b" (str.at Start_1 StartInt_1)))
   (StartInt_2 Int (1 0 (str.indexof Start_6 Start_6 StartInt_1)))
   (Start_14 String ("" "a" (str.at Start_8 StartInt_2) (str.substr Start_10 StartInt StartInt_5) (str.replace Start_15 Start_10 Start_5)))
   (Start_1 String (y "0" "b" (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_1) (str.replace Start_2 Start Start_3) (ite StartBool Start_2 Start_1)))
   (Start_9 String ("1" (str.at Start_10 StartInt_6)))
   (Start_4 String (x (str.++ Start_12 Start_5) (str.at Start_4 StartInt_6) (str.substr Start_10 StartInt_4 StartInt_7) (str.replace Start_13 Start_7 Start_15) (ite StartBool_3 Start_10 Start_11)))
   (StartBool_2 Bool (true (not StartBool) (str.<= Start_2 Start_8) (str.prefixof Start_2 Start_2) (str.contains Start_5 Start_1) (= Start_5 Start_4)))
   (StartInt_7 Int (0))
   (StartInt_5 Int (1 (str.indexof Start_9 Start_6 StartInt_1) (str.to_int Start)))
   (StartInt_6 Int (0 (str.indexof Start_2 Start_10 StartInt)))
   (Start_10 String ("" "1" "b" (str.at Start_11 StartInt_1) (str.replace Start_4 Start_1 Start_8) (str.from_int StartInt_4) (ite StartBool_2 Start_6 Start_11)))
   (Start_15 String ("" (str.replace Start_5 Start_13 Start_9) (str.from_int StartInt_4)))
   (Start_11 String (x y "1" "b" "0" (str.at Start_1 StartInt) (str.replace Start_4 Start_12 Start_6) (str.from_int StartInt_4) (ite StartBool Start_4 Start_13)))
   (Start_13 String ("0" (str.replace Start_7 Start_8 Start_9) (ite StartBool_3 Start_7 Start_12)))
   (StartBool_3 Bool (true false (str.< Start_6 Start_11) (str.<= Start_14 Start_8) (str.prefixof Start_13 Start) (str.suffixof Start_14 Start_7) (str.contains Start_3 Start_15) (= StartInt StartInt_5) (<= StartInt_1 StartInt_6)))
   (Start_12 String ("b" "" (str.++ Start_1 Start_1) (str.from_int StartInt_2) (ite StartBool_4 Start_1 Start_1)))
   (Start_16 String ("0" (str.replace Start_7 Start_8 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ "1" (str.replace (str.replace "1" (str.replace y (str.++ x x) "b") "a") y "a")) (str.len y))))

(check-synth)
