(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_7 String) (StartInt_6 Int) (StartInt_5 Int) (StartInt_7 Int) (StartInt_3 Int) (Start_9 String) (Start_4 String) (Start_2 String) (Start_3 String) (StartInt_4 Int) (StartInt_8 Int) (StartBool_1 Bool) (Start_8 String) (Start_5 String) (Start_14 String) (StartBool_3 Bool) (Start_11 String) (Start_12 String) (Start_6 String) (StartBool_4 Bool) (StartInt_9 Int) (Start_10 String) (StartInt_2 Int) (Start_15 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_1 String))
  ((Start String ("" (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start_2)))
   (StartInt Int (0 (str.len Start_2)))
   (StartBool Bool (false (not StartBool_4) (and StartBool_1 StartBool_4) (str.suffixof Start_9 Start_2) (str.contains Start Start_14) (= Start_15 Start_8)))
   (Start_13 String (y (str.++ Start_6 Start_8) (str.substr Start_14 StartInt_2 StartInt_8) (str.replace Start Start_14 Start_9) (ite StartBool_2 Start_6 Start_9)))
   (Start_7 String ("1" (str.at Start_3 StartInt) (str.substr Start_2 StartInt_4 StartInt_2) (str.replace Start_8 Start_9 Start_5) (str.from_int StartInt_4) (ite StartBool_3 Start_1 Start_8)))
   (StartInt_6 Int (0 (str.len Start_4) (str.indexof Start_5 Start_6 StartInt_4)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.to_int Start_3)))
   (StartInt_7 Int (1 0))
   (StartInt_3 Int (0 1 (str.indexof Start_3 Start_2 StartInt_1) (str.to_int Start_1)))
   (Start_9 String ("" (str.++ Start_1 Start_5) (str.at Start_4 StartInt_2) (str.from_int StartInt_1) (ite StartBool_3 Start_3 Start_6)))
   (Start_4 String ("b" (str.at Start_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start)))
   (Start_2 String (x "" (str.at Start_2 StartInt_3) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_3 Start_1 Start_1)))
   (Start_3 String ("" (str.++ Start_1 Start) (str.at Start_1 StartInt_4) (str.substr Start_3 StartInt_1 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_1 StartInt_4)))
   (StartInt_8 Int (1 (str.indexof Start_4 Start_12 StartInt_2) (str.to_int Start_7)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool StartBool_2) (str.prefixof Start Start_2) (str.contains Start_2 Start) (= Start_2 Start_2) (<= StartInt_5 StartInt_1)))
   (Start_8 String ("1" (str.++ Start_2 Start_9) (str.at Start_10 StartInt) (str.replace Start_8 Start_5 Start_8) (str.from_int StartInt_7) (ite StartBool Start_5 Start_5)))
   (Start_5 String ("0" (str.++ Start_12 Start_7) (str.at Start_8 StartInt_2) (str.substr Start_1 StartInt StartInt_2) (str.replace Start_8 Start_3 Start_2)))
   (Start_14 String ("1" (str.from_int StartInt_9)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool StartBool) (str.< Start_5 Start_9) (str.prefixof Start_9 Start_2) (str.suffixof Start_13 Start_13) (str.contains Start_10 Start_4) (= StartInt_3 StartInt)))
   (Start_11 String ("b" x "" "0" (str.at Start_11 StartInt_7) (str.replace Start_10 Start_5 Start_4) (str.from_int StartInt_2)))
   (Start_12 String ("b" (str.++ Start_10 Start_11) (str.substr Start_2 StartInt_4 StartInt_3)))
   (Start_6 String (x "b" y "0" "" "1" (str.++ Start Start_1) (str.from_int StartInt) (ite StartBool_4 Start_7 Start_1)))
   (StartBool_4 Bool (true (str.< Start Start_6) (str.prefixof Start_3 Start_11) (= Start_6 Start_5)))
   (StartInt_9 Int (1 0 (str.indexof Start_6 Start_5 StartInt_8) (str.to_int Start_1)))
   (Start_10 String ("b" (str.++ Start_7 Start_10) (str.replace Start_6 Start_8 Start_2) (ite StartBool_2 Start_9 Start_1)))
   (StartInt_2 Int (1 0 (str.len Start_10)))
   (Start_15 String (x "1" (str.++ Start_3 Start_12) (str.at Start_14 StartInt_6) (ite StartBool_3 Start Start_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_6 Start_14 StartInt_4)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_2) (str.< Start_5 Start_6) (str.<= Start Start_4) (str.prefixof Start Start_1) (str.contains Start_3 Start) (= Start_3 Start) (= StartInt StartInt_6)))
   (Start_1 String (y (str.substr Start_5 StartInt_1 StartInt_3) (str.replace Start_6 Start_11 Start_5) (str.from_int StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y "a")))

(check-synth)
