(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartBool_4 Bool) (StartBool_5 Bool) (StartBool_3 Bool) (StartBool_2 Bool) (Start_7 String) (Start_8 String) (Start_2 String) (StartInt_8 Int) (Start_1 String) (Start_4 String) (StartBool_1 Bool) (Start_5 String) (StartInt_3 Int) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int) (StartInt_5 Int) (Start_6 String) (StartInt_1 Int) (StartInt_6 Int))
  ((Start String (y "" (str.at Start_1 StartInt_1) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start_1 Start_2)))
   (StartInt Int (1 0 (str.indexof Start_7 Start StartInt_3) (str.to_int Start_6)))
   (StartBool Bool (false (not StartBool_4) (and StartBool_1 StartBool_5) (str.< Start_5 Start_4) (str.<= Start_8 Start_5) (str.prefixof Start_2 Start) (str.suffixof Start_7 Start_2) (= Start_6 Start_5) (= StartInt_7 StartInt_8) (<= StartInt_1 StartInt_7)))
   (StartInt_7 Int (1 (str.len Start_5)))
   (StartBool_4 Bool (false (not StartBool_3) (and StartBool_4 StartBool_2) (str.<= Start_8 Start_5) (str.prefixof Start_6 Start_1) (str.suffixof Start_2 Start_8) (str.contains Start_8 Start_4) (<= StartInt StartInt_2)))
   (StartBool_5 Bool (true (not StartBool_5) (and StartBool_2 StartBool_3) (str.suffixof Start Start_5) (str.contains Start_3 Start_5) (= Start Start_8) (= StartInt_8 StartInt_5) (<= StartInt_3 StartInt_7)))
   (StartBool_3 Bool (true (str.< Start_5 Start_2) (str.prefixof Start_8 Start_7) (str.suffixof Start_2 Start_6) (= StartInt_3 StartInt)))
   (StartBool_2 Bool (true (not StartBool_3) (str.< Start_4 Start_1) (str.prefixof Start_7 Start) (str.suffixof Start_3 Start) (str.contains Start_3 Start_7) (= StartInt StartInt_6) (<= StartInt_5 StartInt_4)))
   (Start_7 String ("a" (str.++ Start_7 Start) (str.substr Start_6 StartInt_5 StartInt_7) (ite StartBool_2 Start_5 Start_5)))
   (Start_8 String ("1" (str.at Start_8 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_4) (str.replace Start_4 Start_4 Start_2) (ite StartBool_4 Start_4 Start)))
   (Start_2 String ("1" (str.++ Start Start) (str.at Start_3 StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start Start_2 Start_2) (ite StartBool_1 Start_3 Start_3)))
   (StartInt_8 Int (1 (str.indexof Start_1 Start_6 StartInt_4) (str.to_int Start_8)))
   (Start_1 String ("1" (str.at Start_1 StartInt_4)))
   (Start_4 String ("b" (str.++ Start Start_2) (str.at Start_4 StartInt_4) (str.substr Start_5 StartInt_5 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartBool_1 Bool (true (not StartBool_1) (<= StartInt_1 StartInt)))
   (Start_5 String (y (str.++ Start Start_4) (str.substr Start_1 StartInt_1 StartInt_6) (str.replace Start_1 Start_1 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_6)))
   (StartInt_3 Int (1 0 (str.len Start)))
   (Start_3 String ("1" "0" "b" (str.++ Start_2 Start_3) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start Start_3 Start_1) (str.from_int StartInt_3)))
   (StartInt_2 Int (0 (str.indexof Start_4 Start_1 StartInt_3)))
   (StartInt_4 Int (0 (str.indexof Start_3 Start_4 StartInt_2) (str.to_int Start_1)))
   (StartInt_5 Int (0 1 (str.len Start_2) (str.to_int Start_3)))
   (Start_6 String (x (str.++ Start_4 Start) (str.at Start_1 StartInt_2) (str.substr Start StartInt_3 StartInt_4) (str.replace Start_3 Start_1 Start_6) (ite StartBool Start_5 Start)))
   (StartInt_1 Int (1 0 (str.len Start_5) (str.to_int Start_6)))
   (StartInt_6 Int (1 0 (str.indexof Start_2 Start_6 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains "a" x) "1" "")))

(check-synth)
