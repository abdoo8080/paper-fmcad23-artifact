(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_2 String) (StartInt_1 Int) (Start_10 String) (Start_11 String) (Start_7 String) (Start_12 String) (Start_8 String) (StartBool_1 Bool) (Start_4 String) (Start_13 String) (StartInt_6 Int) (Start_3 String) (StartInt_2 Int) (Start_6 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_5 String) (StartInt_5 Int) (StartInt_3 Int) (Start_9 String))
  ((Start String ("1" "0" x "" "b" y (str.at Start_1 StartInt) (str.from_int StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (0 (str.indexof Start_3 Start_4 StartInt_5) (str.to_int Start_7)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.<= Start_8 Start_13) (str.prefixof Start_2 Start_4) (str.suffixof Start Start_6) (str.contains Start_12 Start_13) (= Start_3 Start_11)))
   (Start_1 String ("b" x (str.++ Start_4 Start_7) (str.substr Start_11 StartInt_1 StartInt_2) (str.replace Start_11 Start_13 Start_2)))
   (Start_2 String ("b" x (str.++ Start_13 Start_11) (str.at Start_4 StartInt_5) (str.replace Start_12 Start_11 Start_4)))
   (StartInt_1 Int (1 0 (str.len Start_9) (str.indexof Start_4 Start_8 StartInt_3) (str.to_int Start_5)))
   (Start_10 String ("1" "b" (str.++ Start_4 Start) (str.at Start_8 StartInt_2) (str.replace Start_1 Start_7 Start_6) (str.from_int StartInt_1) (ite StartBool Start_1 Start_12)))
   (Start_11 String (x (str.substr Start_11 StartInt_2 StartInt)))
   (Start_7 String ("a" y (str.++ Start_8 Start_5) (str.at Start_2 StartInt_5) (str.substr Start_1 StartInt_5 StartInt_3) (str.replace Start_6 Start_7 Start_6)))
   (Start_12 String (x y "0" (str.at Start_10 StartInt_5) (str.substr Start_5 StartInt_1 StartInt_2)))
   (Start_8 String ("0" "1" (str.from_int StartInt_4)))
   (StartBool_1 Bool (true (not StartBool_1) (str.<= Start Start_2) (= Start_1 Start) (= StartInt StartInt_1) (<= StartInt StartInt_2)))
   (Start_4 String ("a" (str.at Start_4 StartInt_2) (str.substr Start_5 StartInt StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_6)))
   (Start_13 String ("a" y (str.++ Start Start_11) (str.at Start_2 StartInt_3) (str.substr Start StartInt_6 StartInt_5) (str.replace Start Start_5 Start_10)))
   (StartInt_6 Int (1 (str.indexof Start_5 Start StartInt_4)))
   (Start_3 String ("" (str.++ Start Start) (str.at Start StartInt_1) (str.substr Start_4 StartInt StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_3) (str.to_int Start_2)))
   (Start_6 String (y x (str.substr Start_7 StartInt_4 StartInt_1) (str.replace Start_5 Start_4 Start_1) (str.from_int StartInt)))
   (StartInt_4 Int (0 (str.len Start_1) (str.to_int Start_1)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_2) (str.<= Start_4 Start_8) (str.prefixof Start_12 Start_6) (= StartInt_2 StartInt_1)))
   (Start_5 String (y "" (str.at Start StartInt_2) (str.replace Start_5 Start_2 Start_7) (ite StartBool_1 Start_10 Start_11)))
   (StartInt_5 Int (1 0 (str.to_int Start_8)))
   (StartInt_3 Int (1 (str.len Start_9) (str.indexof Start_4 Start_9 StartInt) (str.to_int Start_3)))
   (Start_9 String (y (str.at Start_9 StartInt_4) (str.substr Start_4 StartInt_4 StartInt_6) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "0" "1")))

(check-synth)
