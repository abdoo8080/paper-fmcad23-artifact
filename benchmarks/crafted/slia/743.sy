(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (StartInt_4 Int) (Start_8 String) (StartInt_1 Int) (Start_5 String) (Start_2 String) (StartInt_3 Int) (Start_3 String) (Start_9 String) (StartInt_2 Int) (Start_6 String) (Start_7 String) (Start_4 String) (Start_1 String))
  ((Start String (x y (str.++ Start_1 Start_2) (str.at Start StartInt) (ite StartBool Start_2 Start_2)))
   (StartInt Int (0 (str.len Start) (str.indexof Start_6 Start_2 StartInt) (str.to_int Start_6)))
   (StartBool Bool (true false (not StartBool_1) (str.<= Start_8 Start_7) (str.prefixof Start_4 Start_2) (= StartInt StartInt)))
   (StartBool_1 Bool (false (not StartBool) (str.prefixof Start_3 Start_4) (= Start_3 Start_4)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.indexof Start Start_6 StartInt_4)))
   (Start_8 String ("0" (str.++ Start_4 Start_9)))
   (StartInt_1 Int (1 (str.indexof Start_1 Start_4 StartInt_1) (str.to_int Start_5)))
   (Start_5 String ("" (str.++ Start Start_6) (str.substr Start_5 StartInt_1 StartInt_2)))
   (Start_2 String ("a" "1" "" (str.++ Start_1 Start_2) (str.at Start_1 StartInt) (str.replace Start_1 Start Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_3 Int (1 0 (str.len Start_5) (str.to_int Start_7)))
   (Start_3 String ("a" (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (ite StartBool Start_1 Start_7)))
   (Start_9 String (y (str.++ Start_2 Start_6) (str.substr Start StartInt StartInt_4) (str.replace Start_6 Start_6 Start_7)))
   (StartInt_2 Int (0 1))
   (Start_6 String ("1" x y (str.++ Start_6 Start_5) (str.at Start_3 StartInt_1) (str.substr Start_7 StartInt_3 StartInt_1) (str.replace Start_6 Start_6 Start_7) (str.from_int StartInt_2)))
   (Start_7 String ("0" (str.++ Start_1 Start_5) (str.at Start_3 StartInt_3) (str.from_int StartInt_3)))
   (Start_4 String (x (str.++ Start_2 Start_3) (str.at Start StartInt_1) (str.replace Start Start_4 Start_4) (ite StartBool Start Start_3)))
   (Start_1 String ("b" "a" (str.++ Start_1 Start_3) (str.substr Start_6 StartInt_1 StartInt) (str.from_int StartInt_3) (ite StartBool Start_1 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.replace y "b" "a"))))

(check-synth)
