(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (StartBool_4 Bool) (StartInt_2 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_7 String) (Start_4 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_6 Int) (StartBool_6 Bool) (Start_5 String) (Start_10 String) (StartBool_5 Bool) (Start_1 String) (Start_9 String) (StartInt_8 Int) (Start_8 String) (Start_12 String) (Start_11 String) (Start_3 String) (StartBool_3 Bool) (StartInt_7 Int) (StartInt_5 Int) (StartInt_4 Int) (Start_2 String) (Start_13 String))
  ((Start String (y "a" "b" (str.substr Start StartInt StartInt) (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartInt Int (0 (str.len Start_2)))
   (StartBool Bool (true false (str.<= Start Start_12) (str.suffixof Start_6 Start_2) (= Start Start_1)))
   (Start_6 String ("" (str.++ Start_3 Start_7) (str.at Start_3 StartInt_2)))
   (StartBool_4 Bool (false (not StartBool_1) (and StartBool StartBool_3) (str.< Start_2 Start_4) (str.prefixof Start_6 Start_6) (str.contains Start_3 Start) (= StartInt_1 StartInt)))
   (StartInt_2 Int (1 (str.indexof Start_5 Start_1 StartInt_3)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_2 StartBool_2) (str.< Start_1 Start_2) (str.<= Start_4 Start_3)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_3) (str.contains Start_3 Start)))
   (Start_7 String ("a" (str.at Start_1 StartInt_4) (str.substr Start_7 StartInt_5 StartInt_5) (str.replace Start_2 Start_8 Start_7) (ite StartBool_5 Start Start_2)))
   (Start_4 String (x y (str.++ Start Start) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_3)))
   (StartInt_1 Int (1 (str.len Start_1)))
   (StartInt_3 Int (0 (str.len Start) (str.to_int Start_3)))
   (StartInt_6 Int (1 0 (str.len Start_6) (str.indexof Start_9 Start StartInt)))
   (StartBool_6 Bool (false (and StartBool_4 StartBool_4) (str.<= Start_6 Start_12) (str.prefixof Start_6 Start_6) (str.contains Start_7 Start_8) (<= StartInt_2 StartInt_5)))
   (Start_5 String (y "b" (str.++ Start_1 Start_1) (str.at Start_1 StartInt_3) (str.from_int StartInt_3)))
   (Start_10 String (y x "" "a" "0" "b" "1" (str.at Start_10 StartInt_7) (str.replace Start_4 Start_3 Start_5) (str.from_int StartInt_6)))
   (StartBool_5 Bool (true (str.< Start_2 Start) (str.<= Start Start_7) (str.prefixof Start_6 Start_9) (= Start_8 Start_3) (= StartInt_5 StartInt_6)))
   (Start_1 String ("0" y (str.at Start_2 StartInt_1) (str.replace Start_3 Start_4 Start_3) (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (Start_9 String ("b" x "" "a" (str.at Start_5 StartInt_5) (str.substr Start_3 StartInt_4 StartInt_5) (str.from_int StartInt_6) (ite StartBool_1 Start_7 Start)))
   (StartInt_8 Int (0))
   (Start_8 String ("b" "1" "" "0" "a" (str.replace Start_10 Start_1 Start_11) (ite StartBool_6 Start_7 Start_8)))
   (Start_12 String (y (str.at Start_7 StartInt_5)))
   (Start_11 String ("0" x (str.++ Start_5 Start_5) (str.substr Start_6 StartInt_5 StartInt_1) (str.from_int StartInt_3)))
   (Start_3 String (y "b" (str.++ Start_9 Start_10) (str.at Start_8 StartInt_4) (str.substr Start StartInt_5 StartInt_6) (str.replace Start_9 Start_4 Start) (str.from_int StartInt_6)))
   (StartBool_3 Bool (true false (not StartBool_4) (str.< Start_1 Start) (str.suffixof Start Start_3) (<= StartInt_2 StartInt_3)))
   (StartInt_7 Int (0 (str.len Start_10) (str.indexof Start_7 Start_6 StartInt_7) (str.to_int Start_4)))
   (StartInt_5 Int (0 (str.len Start_3) (str.indexof Start_3 Start_7 StartInt_4)))
   (StartInt_4 Int (0 (str.len Start_2) (str.indexof Start_9 Start_13 StartInt) (str.to_int Start_7)))
   (Start_2 String ("1" (str.++ Start_4 Start_10) (str.at Start_11 StartInt_6) (str.substr Start_9 StartInt_6 StartInt_7)))
   (Start_13 String ("1" (str.at Start_4 StartInt_4) (str.substr Start_2 StartInt_4 StartInt_8) (str.replace Start_2 Start_7 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= x y) x "b")))

(check-synth)
