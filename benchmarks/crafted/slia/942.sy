(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (Start_8 String) (Start_7 String) (Start_10 String) (Start_2 String) (Start_6 String) (StartInt_3 Int) (StartInt_1 Int) (Start_9 String) (Start_3 String) (Start_12 String) (StartInt_2 Int) (Start_5 String) (Start_4 String) (Start_1 String) (Start_15 String) (Start_14 String) (StartInt_5 Int) (StartInt_4 Int) (Start_13 String) (StartBool_1 Bool) (StartInt_6 Int) (StartBool_3 Bool) (StartBool_4 Bool) (StartBool_2 Bool) (Start_11 String) (StartInt_7 Int))
  ((Start String ("1" (str.++ Start Start) (str.at Start_1 StartInt) (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 (str.len Start_4)))
   (StartBool Bool (true false (str.prefixof Start_8 Start_6) (str.suffixof Start_3 Start_3) (= Start_9 Start_3) (<= StartInt_4 StartInt_2)))
   (Start_16 String ("b" y (str.++ Start_2 Start_3) (str.replace Start_10 Start_13 Start_8) (ite StartBool_2 Start_4 Start_12)))
   (Start_8 String ("0" (str.at Start StartInt_4) (ite StartBool_1 Start_1 Start_13)))
   (Start_7 String ("a" (str.at Start_1 StartInt) (str.replace Start_2 Start_3 Start) (str.from_int StartInt_2)))
   (Start_10 String ("1" (str.at Start_2 StartInt) (ite StartBool Start_11 Start_10)))
   (Start_2 String ("" (str.at Start_1 StartInt_3) (str.replace Start_6 Start_3 Start_1) (ite StartBool Start Start_7)))
   (Start_6 String ("a" (str.substr Start_3 StartInt_3 StartInt_1)))
   (StartInt_3 Int (0 (str.indexof Start_2 Start_6 StartInt_1)))
   (StartInt_1 Int (0 1 (str.indexof Start Start_3 StartInt_2)))
   (Start_9 String ("1" y (str.at Start_5 StartInt_5) (str.from_int StartInt_1) (ite StartBool Start_2 Start_1)))
   (Start_3 String ("" (str.++ Start_2 Start_1) (str.substr Start_5 StartInt_3 StartInt_3) (str.from_int StartInt_3)))
   (Start_12 String ("a" (str.++ Start_6 Start_6) (str.at Start_13 StartInt_1) (str.substr Start_2 StartInt_4 StartInt) (str.from_int StartInt_5)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start Start_2 StartInt_1) (str.to_int Start_4)))
   (Start_5 String ("0" "a" (str.++ Start_3 Start_3) (str.at Start_3 StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start Start_2)))
   (Start_4 String ("0" "" (str.++ Start_5 Start_3) (str.substr Start_5 StartInt_1 StartInt)))
   (Start_1 String ("b" y (str.at Start_2 StartInt) (str.replace Start Start_3 Start_2) (str.from_int StartInt_1)))
   (Start_15 String ("1" (str.at Start_16 StartInt_6) (str.substr Start_8 StartInt_5 StartInt_7) (str.replace Start_3 Start Start) (str.from_int StartInt_5) (ite StartBool_2 Start_4 Start_5)))
   (Start_14 String ("1" "b" (str.at Start_2 StartInt_5) (str.replace Start_10 Start_12 Start_12) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 (str.indexof Start_6 Start_3 StartInt_1)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.indexof Start_5 Start_10 StartInt)))
   (Start_13 String ("1" "0" (str.++ Start_1 Start_7) (str.substr Start_5 StartInt_3 StartInt_3)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_9 Start)))
   (StartInt_6 Int (0 (str.indexof Start_11 Start_14 StartInt_4) (str.to_int Start_8)))
   (StartBool_3 Bool (false (str.contains Start Start) (= StartInt_6 StartInt_3) (<= StartInt_3 StartInt_1)))
   (StartBool_4 Bool (false (and StartBool_1 StartBool_1) (str.<= Start_8 Start_15) (<= StartInt_1 StartInt_3)))
   (StartBool_2 Bool (false true (not StartBool_4) (str.< Start_11 Start_11) (str.prefixof Start_2 Start_8) (str.suffixof Start_8 Start_13) (str.contains Start_14 Start_12) (<= StartInt_6 StartInt)))
   (Start_11 String ("a" y (str.substr Start_10 StartInt_3 StartInt) (str.replace Start_9 Start_12 Start_9)))
   (StartInt_7 Int (1 (str.len Start_2) (str.indexof Start_15 Start_6 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y x "") "0" y)))

(check-synth)
