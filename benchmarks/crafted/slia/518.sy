(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_9 String) (StartInt_1 Int) (Start_3 String) (StartInt_5 Int) (Start_4 String) (StartInt_3 Int) (StartInt_2 Int) (Start_5 String) (StartBool_2 Bool) (Start_7 String) (Start_10 String) (StartBool_3 Bool) (StartInt_4 Int) (Start_8 String) (Start_6 String) (StartBool_1 Bool) (Start_2 String))
  ((Start String (x (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start_3 Start) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.indexof Start Start_4 StartInt_2) (str.to_int Start_1)))
   (StartBool Bool (true false (and StartBool_1 StartBool_3) (str.< Start_4 Start_10) (str.prefixof Start_2 Start_5) (str.suffixof Start_8 Start_10) (= Start_3 Start_2) (= StartInt_4 StartInt_5)))
   (Start_1 String ("1" "b" (str.at Start_1 StartInt_1) (str.substr Start_6 StartInt_4 StartInt_3) (str.replace Start_6 Start Start_2) (str.from_int StartInt) (ite StartBool_2 Start_9 Start_9)))
   (Start_9 String ("a" (str.++ Start_3 Start_1) (ite StartBool_3 Start_7 Start_2)))
   (StartInt_1 Int (0))
   (Start_3 String ("1" (str.++ Start_2 Start_3) (str.at Start_2 StartInt_1) (str.replace Start_2 Start_2 Start) (str.from_int StartInt_2) (ite StartBool Start_4 Start_4)))
   (StartInt_5 Int (0 (str.to_int Start_5)))
   (Start_4 String ("0" (str.at Start_2 StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_5)))
   (StartInt_3 Int (1 0 (str.to_int Start_5)))
   (StartInt_2 Int (1 0 (str.to_int Start)))
   (Start_5 String ("" (str.++ Start Start) (str.at Start_3 StartInt_2) (str.replace Start_5 Start_1 Start_3) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_1) (str.< Start_2 Start) (str.contains Start_6 Start_3) (= Start_5 Start_7) (= StartInt StartInt)))
   (Start_7 String ("" "a" (str.at Start_3 StartInt_3) (str.substr Start_4 StartInt StartInt) (str.from_int StartInt) (ite StartBool_3 Start_4 Start)))
   (Start_10 String ("b" "1" (str.substr Start_4 StartInt_4 StartInt_3) (str.from_int StartInt_1)))
   (StartBool_3 Bool (false true (and StartBool StartBool_3) (str.<= Start_3 Start_5) (str.prefixof Start_1 Start_3) (str.contains Start_7 Start_3) (= Start_3 Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_5) (str.to_int Start_6)))
   (Start_8 String (x y (str.++ Start_4 Start_1) (str.at Start_10 StartInt_1) (ite StartBool_2 Start_9 Start_10)))
   (Start_6 String ("a" "" (str.++ Start_4 Start_3) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_5 Start_7 Start_5) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.< Start Start_3) (str.<= Start_1 Start_4) (str.suffixof Start_5 Start_2) (= Start_3 Start) (= StartInt_1 StartInt_1) (<= StartInt_2 StartInt_1)))
   (Start_2 String ("0" "1" (str.at Start_7 StartInt) (str.substr Start_8 StartInt_1 StartInt_1) (str.replace Start_7 Start_9 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at "1" (str.len y)) "1")))

(check-synth)
