(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_12 String) (StartInt_1 Int) (Start_13 String) (Start_10 String) (StartBool_2 Bool) (Start_8 String) (Start_3 String) (Start_11 String) (StartInt_2 Int) (Start_2 String) (Start_5 String) (StartInt_4 Int) (StartInt_5 Int) (Start_6 String) (Start_7 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_9 String) (Start_4 String))
  ((Start String ("a" "" y (str.++ Start_1 Start_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_1 Start Start) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 0))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_2 StartBool_2) (str.< Start_2 Start_8) (= StartInt StartInt_2) (<= StartInt_4 StartInt_4)))
   (Start_1 String ("0" (str.at Start_11 StartInt_5) (str.substr Start_12 StartInt_5 StartInt_1) (str.from_int StartInt_5) (ite StartBool_1 Start Start)))
   (Start_12 String (y "1" (str.at Start StartInt_5) (str.substr Start_5 StartInt_3 StartInt_3) (str.replace Start_12 Start_13 Start_8)))
   (StartInt_1 Int (1 0 (str.indexof Start_12 Start_7 StartInt_1)))
   (Start_13 String ("1" "b" (str.++ Start_2 Start_1)))
   (Start_10 String (x y "b" (str.++ Start_9 Start) (str.substr Start_10 StartInt_4 StartInt_2) (str.replace Start_3 Start_11 Start_6) (str.from_int StartInt_4) (ite StartBool_2 Start_11 Start_11)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_1 StartBool_2) (str.<= Start_1 Start_4) (str.prefixof Start_3 Start_9) (str.suffixof Start_11 Start_4) (str.contains Start_9 Start) (= Start_1 Start_2)))
   (Start_8 String ("" "b" "a" (str.substr Start_1 StartInt_5 StartInt_5) (str.replace Start_4 Start Start_6) (str.from_int StartInt_3)))
   (Start_3 String (x (str.substr Start StartInt_5 StartInt_4) (str.from_int StartInt_5) (ite StartBool_2 Start_1 Start_6)))
   (Start_11 String (x "" "a" "1" y "b" "0" (str.from_int StartInt_2)))
   (StartInt_2 Int (0 1 (str.to_int Start_2)))
   (Start_2 String ("" (str.++ Start_2 Start_3) (str.at Start_2 StartInt_2) (str.substr Start_2 StartInt StartInt) (str.replace Start_2 Start_4 Start) (ite StartBool_1 Start_5 Start_4)))
   (Start_5 String ("0" "b" x (str.++ Start_3 Start_6) (str.at Start_2 StartInt) (str.replace Start_3 Start_4 Start_2) (str.from_int StartInt_2)))
   (StartInt_4 Int (0 1 (str.len Start_5)))
   (StartInt_5 Int (0 1 (str.len Start_3)))
   (Start_6 String ("1" (str.++ Start_5 Start) (str.at Start_3 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_7 Start_5)))
   (Start_7 String ("1" (str.substr Start_6 StartInt StartInt_4) (str.replace Start_5 Start_5 Start_8) (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt_3 Int (0 1 (str.len Start_1)))
   (StartBool_1 Bool (true (not StartBool) (str.< Start_8 Start_1) (str.<= Start_9 Start_7) (str.suffixof Start_3 Start_8) (str.contains Start_6 Start_6) (= Start_6 Start_5)))
   (Start_9 String ("0" "" "1" (str.replace Start_8 Start_8 Start_3)))
   (Start_4 String ("1" y (str.substr Start_10 StartInt_3 StartInt_1) (str.replace Start_6 Start_8 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= y "b") "" y)))

(check-synth)
