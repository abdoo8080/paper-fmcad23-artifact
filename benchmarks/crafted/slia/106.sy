(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartBool_2 Bool) (Start_1 String) (Start_2 String) (StartInt_1 Int) (StartInt_2 Int) (Start_4 String) (Start_6 String) (Start_8 String) (Start_11 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_7 String) (Start_5 String) (Start_9 String) (Start_3 String) (StartInt_3 Int) (Start_10 String))
  ((Start String ("b" (str.substr Start StartInt StartInt_1) (ite StartBool Start_1 Start_2)))
   (StartInt Int (1 (str.indexof Start_6 Start_10 StartInt) (str.to_int Start_5)))
   (StartBool Bool (true (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_4 Start_7) (str.<= Start_5 Start_10) (str.prefixof Start_8 Start_2) (= Start_5 Start_5)))
   (StartInt_5 Int (0 (str.len Start_8) (str.indexof Start_10 Start_3 StartInt)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_1) (str.suffixof Start_3 Start_4) (= Start_8 Start_2) (= StartInt_4 StartInt_4) (<= StartInt_1 StartInt_5)))
   (Start_1 String ("b" (str.++ Start Start) (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_9 Start_5 Start_9)))
   (Start_2 String (x "0" (str.++ Start_2 Start_2) (str.substr Start StartInt StartInt) (str.from_int StartInt_2)))
   (StartInt_1 Int (1 (str.len Start_4) (str.to_int Start_5)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.indexof Start_4 Start_1 StartInt)))
   (Start_4 String ("b" (str.++ Start_4 Start_1) (str.at Start_3 StartInt) (str.substr Start_5 StartInt_1 StartInt_1) (str.replace Start_3 Start_4 Start_6) (ite StartBool Start_5 Start_1)))
   (Start_6 String ("a" (str.++ Start_4 Start_4) (str.substr Start_6 StartInt_1 StartInt) (str.replace Start_4 Start_3 Start_4) (str.from_int StartInt_2)))
   (Start_8 String ("b" (str.at Start_9 StartInt) (str.replace Start_4 Start_5 Start_9) (str.from_int StartInt) (ite StartBool_1 Start_8 Start_1)))
   (Start_11 String ("a" y "" "1" "b" "0" x (str.++ Start_11 Start_1) (str.replace Start_5 Start_8 Start_9) (str.from_int StartInt_5) (ite StartBool_2 Start Start_1)))
   (StartInt_4 Int (0 (str.indexof Start_10 Start_11 StartInt_5)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool_1) (str.< Start_10 Start_7) (str.<= Start_8 Start_5) (str.contains Start_6 Start_4) (= Start_5 Start_10) (<= StartInt_1 StartInt_3)))
   (Start_7 String (x (str.++ Start Start_5) (str.substr Start_8 StartInt_1 StartInt_1) (str.replace Start_9 Start_9 Start_2) (str.from_int StartInt_2)))
   (Start_5 String (y (str.++ Start_3 Start_3) (str.substr Start_7 StartInt_2 StartInt_2)))
   (Start_9 String (x (str.++ Start_3 Start_7) (str.substr Start_7 StartInt_1 StartInt_1) (str.from_int StartInt) (ite StartBool Start_2 Start_4)))
   (Start_3 String ("0" "1" "b" "a" (str.from_int StartInt_1)))
   (StartInt_3 Int (0 (str.len Start_6)))
   (Start_10 String ("b" (str.at Start StartInt_2) (str.substr Start_10 StartInt_2 StartInt_3) (str.replace Start_2 Start_9 Start_10) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at x 1)))))

(check-synth)
