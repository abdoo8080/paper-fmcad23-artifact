(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (StartBool_5 Bool) (StartBool_4 Bool) (StartInt_7 Int) (Start_4 String) (Start_12 String) (Start_3 String) (StartInt_2 Int) (StartInt_5 Int) (StartBool_2 Bool) (Start_5 String) (StartInt_10 Int) (StartInt_3 Int) (Start_8 String) (Start_10 String) (Start_1 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_2 String) (StartInt_6 Int) (Start_9 String) (Start_11 String) (StartInt_8 Int) (StartBool_3 Bool) (Start_13 String) (StartInt_9 Int) (Start_14 String) (Start_15 String) (Start_7 String) (Start_6 String) (StartInt_4 Int))
  ((Start String ("" x (str.at Start StartInt) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start_7) (str.indexof Start_2 Start_14 StartInt_10)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_3 StartBool_4) (str.<= Start_2 Start_11) (str.prefixof Start_11 Start_14) (= Start_8 Start_13) (= StartInt_6 StartInt_4)))
   (Start_16 String ("" (str.substr Start_14 StartInt_4 StartInt_8)))
   (StartBool_5 Bool (false (str.<= Start_10 Start_4) (str.prefixof Start_9 Start_2) (str.suffixof Start_9 Start_16) (str.contains Start Start_4) (<= StartInt_10 StartInt_4)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_5) (str.<= Start_1 Start_1) (= Start_3 Start_9) (= StartInt_2 StartInt_10)))
   (StartInt_7 Int (1 0 (str.len Start_9) (str.indexof Start_6 Start_7 StartInt) (str.to_int Start_2)))
   (Start_4 String ("1" (str.++ Start Start_4) (str.substr Start_4 StartInt_4 StartInt_4) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_1)))
   (Start_12 String ("a" "" (str.substr Start_11 StartInt_1 StartInt_6) (str.replace Start_1 Start_5 Start_5) (str.from_int StartInt_8) (ite StartBool Start_7 Start_13)))
   (Start_3 String (y (str.at Start StartInt) (str.substr Start StartInt_3 StartInt_3) (str.replace Start_4 Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start Start_3 StartInt_2)))
   (StartInt_5 Int (0 (str.indexof Start_8 Start_5 StartInt_6) (str.to_int Start)))
   (StartBool_2 Bool (false true (not StartBool_2) (= Start_7 Start) (= StartInt_3 StartInt_3) (<= StartInt_3 StartInt_8)))
   (Start_5 String (y (str.at Start_2 StartInt_1) (str.replace Start_2 Start_3 Start) (str.from_int StartInt_3)))
   (StartInt_10 Int (1 (str.len Start_15) (str.indexof Start Start_6 StartInt_10)))
   (StartInt_3 Int (0 1 (str.to_int Start_2)))
   (Start_8 String ("b" (str.substr Start_11 StartInt_2 StartInt_9) (str.replace Start Start_12 Start_10)))
   (Start_10 String ("a" (str.at Start_9 StartInt_1) (ite StartBool_2 Start_7 Start_1)))
   (Start_1 String (y "0" (str.replace Start_1 Start Start_2) (str.from_int StartInt_1)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_1) (str.prefixof Start_3 Start_6) (str.suffixof Start Start_5) (str.contains Start_7 Start_3) (= StartInt_4 StartInt_5) (<= StartInt StartInt_2)))
   (StartInt_1 Int (0 (str.to_int Start_1)))
   (Start_2 String (x (str.++ Start_3 Start) (str.at Start_2 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_3) (ite StartBool Start_1 Start)))
   (StartInt_6 Int (1 (str.indexof Start_2 Start_8 StartInt_7)))
   (Start_9 String (x "1" (str.at Start_1 StartInt_2) (str.substr Start_10 StartInt_4 StartInt) (str.replace Start_11 Start_9 Start_4) (str.from_int StartInt_1)))
   (Start_11 String (x "1" "a" (str.++ Start_8 Start_9) (str.at Start_10 StartInt_1) (str.substr Start_1 StartInt_6 StartInt_3) (str.replace Start_9 Start_1 Start_9) (str.from_int StartInt)))
   (StartInt_8 Int (0 1 (str.len Start_12) (str.to_int Start_9)))
   (StartBool_3 Bool (false (not StartBool_5) (and StartBool_5 StartBool_4) (str.< Start_9 Start_5) (str.<= Start_9 Start_11) (str.prefixof Start_6 Start_11)))
   (Start_13 String ("b" "" (str.substr Start_6 StartInt_6 StartInt) (str.replace Start_2 Start_13 Start_5) (str.from_int StartInt_8) (ite StartBool Start_5 Start_11)))
   (StartInt_9 Int (0 (str.len Start_7) (str.indexof Start_11 Start_11 StartInt_6) (str.to_int Start_11)))
   (Start_14 String ("b" (str.++ Start_9 Start_2) (str.at Start_1 StartInt_1) (str.from_int StartInt_10) (ite StartBool_1 Start_2 Start_8)))
   (Start_15 String ("b" (str.++ Start Start_9) (str.substr Start_9 StartInt_5 StartInt_9) (ite StartBool_1 Start Start_8)))
   (Start_7 String ("0" (str.++ Start Start_9) (str.at Start_12 StartInt_7)))
   (Start_6 String ("" "1" "b" "0" (str.at Start_7 StartInt_8)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.indexof Start_5 Start_10 StartInt_3) (str.to_int Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "b" "1")))

(check-synth)
