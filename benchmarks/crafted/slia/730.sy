(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_8 String) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_1 Int) (StartInt_2 Int) (StartInt_7 Int) (Start_3 String) (StartInt_3 Int) (StartInt_4 Int) (Start_9 String) (Start_4 String) (Start_2 String) (StartInt_8 Int) (Start_5 String) (Start_10 String) (StartInt_5 Int) (Start_6 String) (StartInt_6 Int) (Start_7 String))
  ((Start String ("a" "1" "0" "" "b" x (str.at Start_1 StartInt_1) (str.replace Start Start Start) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 0 (str.len Start_10) (str.to_int Start_3)))
   (StartBool Bool (true (not StartBool_2) (str.prefixof Start_7 Start_9) (str.contains Start_4 Start_6) (= StartInt_5 StartInt_8) (<= StartInt_6 StartInt)))
   (Start_1 String (y "b" "a" (str.++ Start Start_4) (str.substr Start_7 StartInt_2 StartInt_2) (str.replace Start_3 Start_8 Start) (str.from_int StartInt_4) (ite StartBool Start_2 Start_9)))
   (Start_8 String ("a" (str.substr Start_8 StartInt_2 StartInt_6) (str.from_int StartInt_5) (ite StartBool_1 Start_8 Start_1)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_2 StartBool_2) (str.<= Start Start_7) (str.prefixof Start_7 Start_5) (str.suffixof Start_3 Start_6)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.<= Start_1 Start) (str.prefixof Start Start_1) (str.suffixof Start_2 Start_3) (str.contains Start_1 Start_1) (= StartInt StartInt_2) (<= StartInt StartInt_3)))
   (StartInt_1 Int (0 1 (str.to_int Start_8)))
   (StartInt_2 Int (0 (str.len Start_2)))
   (StartInt_7 Int (0 1 (str.to_int Start_4)))
   (Start_3 String ("b" (str.at Start_2 StartInt_3) (str.replace Start_4 Start Start) (str.from_int StartInt) (ite StartBool Start_4 Start_2)))
   (StartInt_3 Int (1 0))
   (StartInt_4 Int (0 1 (str.to_int Start_6)))
   (Start_9 String (x "a" "b" "1" "0" (str.++ Start_9 Start_8) (str.at Start_1 StartInt_3) (str.substr Start StartInt_6 StartInt_7) (str.replace Start_2 Start_7 Start_6) (ite StartBool_1 Start_9 Start_1)))
   (Start_4 String ("" (str.substr Start_4 StartInt_4 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_5)))
   (Start_2 String ("b" (str.++ Start_4 Start_5) (str.at Start_7 StartInt_1) (str.substr Start_6 StartInt StartInt_1) (str.replace Start_4 Start_4 Start_4) (str.from_int StartInt_5) (ite StartBool Start_1 Start_6)))
   (StartInt_8 Int (1 (str.indexof Start_9 Start_10 StartInt_3) (str.to_int Start_7)))
   (Start_5 String (x "0" "1" "b" "" "a" (str.at Start_3 StartInt_2) (str.from_int StartInt_5) (ite StartBool Start_4 Start_4)))
   (Start_10 String ("1" (str.++ Start_7 Start_3) (str.replace Start_9 Start_2 Start_9) (ite StartBool Start_2 Start_8)))
   (StartInt_5 Int (1 0 (str.len Start_5) (str.indexof Start_3 Start_1 StartInt_4) (str.to_int Start)))
   (Start_6 String ("1" x "0" "" (str.++ Start_6 Start) (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_4 StartInt_6) (str.from_int StartInt_1)))
   (StartInt_6 Int (1 (str.len Start_4) (str.to_int Start_5)))
   (Start_7 String ("a" "0" "b" "1" y))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.from_int (str.indexof x "b" 0)) 1)))

(check-synth)
