(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_7 Bool) (StartBool_3 Bool) (Start_7 String) (Start_4 String) (StartInt_4 Int) (Start_3 String) (StartInt_7 Int) (StartInt_3 Int) (StartInt_5 Int) (Start_5 String) (Start_6 String) (StartBool_2 Bool) (Start_1 String) (StartBool_5 Bool) (StartBool_4 Bool) (Start_9 String) (StartBool_1 Bool) (StartInt_10 Int) (Start_8 String) (StartInt_9 Int) (Start_10 String) (StartInt_1 Int) (StartInt_6 Int) (StartInt_2 Int) (StartInt_8 Int) (StartInt_11 Int) (Start_2 String))
  ((Start String ("0" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_3) (str.from_int StartInt_3)))
   (StartInt Int (0 1 (str.indexof Start_9 Start_3 StartInt_8) (str.to_int Start_8)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_6 StartBool_7) (str.< Start_3 Start) (str.suffixof Start_1 Start_6) (= Start_1 Start_1)))
   (StartBool_6 Bool (true false (str.< Start Start_9) (str.prefixof Start Start_7) (str.suffixof Start_3 Start_3) (str.contains Start_7 Start_5) (= StartInt_5 StartInt_10) (<= StartInt_4 StartInt)))
   (StartBool_7 Bool (true false (not StartBool_7) (str.prefixof Start_9 Start_9) (= Start_7 Start_6) (= StartInt_7 StartInt_8)))
   (StartBool_3 Bool (false (str.<= Start_3 Start_8) (str.suffixof Start_8 Start_3) (str.contains Start_6 Start) (= Start_1 Start_2) (= StartInt StartInt_2) (<= StartInt_8 StartInt)))
   (Start_7 String (x (str.++ Start_6 Start_7)))
   (Start_4 String (x "0" y (str.replace Start_5 Start_3 Start_6) (ite StartBool Start_7 Start_7)))
   (StartInt_4 Int (0 (str.len Start_3)))
   (Start_3 String ("b" (str.at Start_4 StartInt_1) (str.substr Start_1 StartInt_4 StartInt_4) (str.replace Start_5 Start_4 Start_2)))
   (StartInt_7 Int (1 0 (str.indexof Start_5 Start_2 StartInt)))
   (StartInt_3 Int (1 (str.len Start) (str.indexof Start_2 Start_1 StartInt) (str.to_int Start_3)))
   (StartInt_5 Int (0 (str.to_int Start_2)))
   (Start_5 String ("b" "1" (str.++ Start_4 Start) (str.at Start_2 StartInt)))
   (Start_6 String (y "" "1" (str.substr Start StartInt_5 StartInt_2) (str.from_int StartInt_4)))
   (StartBool_2 Bool (false (not StartBool_4) (and StartBool_5 StartBool_2) (str.prefixof Start_4 Start) (str.suffixof Start_2 Start_6) (str.contains Start_7 Start) (= StartInt_9 StartInt_5) (<= StartInt_5 StartInt_2)))
   (Start_1 String (x "" y "a" (str.at Start_9 StartInt_8) (str.replace Start_1 Start_8 Start_6)))
   (StartBool_5 Bool (false (not StartBool_3) (str.contains Start_1 Start_7) (= StartInt_7 StartInt_3)))
   (StartBool_4 Bool (true (not StartBool_1) (and StartBool_3 StartBool_5) (str.<= Start Start_7) (str.suffixof Start_3 Start_9) (str.contains Start_2 Start_6) (= StartInt_5 StartInt_4)))
   (Start_9 String ("" "0" "b" "1" y (str.++ Start_9 Start_3) (str.substr Start_5 StartInt_8 StartInt_6) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt_9) (ite StartBool_1 Start Start_6)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_1) (str.< Start_1 Start_3) (str.<= Start_5 Start_6) (str.contains Start_4 Start_5) (= Start_5 Start_2) (= StartInt_4 StartInt_1) (<= StartInt_7 StartInt_6)))
   (StartInt_10 Int (0 (str.len Start) (str.indexof Start_10 Start_8 StartInt_2)))
   (Start_8 String (x "b" "a" "1" "0" "" y (str.substr Start_4 StartInt_8 StartInt_10) (str.from_int StartInt_8)))
   (StartInt_9 Int (0 (str.to_int Start_4)))
   (Start_10 String ("a" "b" (ite StartBool_4 Start_4 Start_2)))
   (StartInt_1 Int (1 0 (str.to_int Start_3)))
   (StartInt_6 Int (1 (str.to_int Start_4)))
   (StartInt_2 Int (0 1 (str.indexof Start_5 Start_10 StartInt_11)))
   (StartInt_8 Int (1))
   (StartInt_11 Int (1 0 (str.indexof Start_8 Start_7 StartInt_11)))
   (Start_2 String ("0" (str.++ Start_7 Start_1) (str.at Start_2 StartInt_6) (str.substr Start_7 StartInt_4 StartInt_4) (str.replace Start_8 Start_6 Start) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains "1" y) "a" "b")))

(check-synth)
