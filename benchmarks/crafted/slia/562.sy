(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_5 String) (Start_1 String) (Start_15 String) (StartBool_5 Bool) (Start_6 String) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_5 Int) (Start_7 String) (Start_13 String) (Start_9 String) (Start_4 String) (Start_3 String) (Start_2 String) (StartBool_3 Bool) (StartInt_4 Int) (Start_11 String) (StartInt_2 Int) (StartInt_7 Int) (StartInt_6 Int) (StartInt_1 Int) (Start_10 String) (Start_14 String) (Start_8 String) (StartBool_2 Bool) (Start_12 String) (StartInt_8 Int) (StartInt_9 Int))
  ((Start String ("0" "a" (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_1 Start_1 Start_2)))
   (StartInt Int (0 (str.len Start_1) (str.to_int Start_3)))
   (StartBool Bool (true (not StartBool_3) (str.< Start_13 Start_5) (str.<= Start Start_13) (str.prefixof Start_12 Start_2) (str.suffixof Start_1 Start) (str.contains Start_4 Start_3) (= StartInt_4 StartInt_7) (<= StartInt StartInt_5)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool_5 StartBool_1) (str.suffixof Start_4 Start_13) (= Start_9 Start_1)))
   (Start_5 String ("1" (str.++ Start Start_7) (str.substr Start_6 StartInt_4 StartInt_2) (str.replace Start_1 Start_7 Start_8) (ite StartBool_1 Start_1 Start_9)))
   (Start_1 String ("" "0" y x "a" (str.at Start_9 StartInt_4) (str.replace Start_11 Start_10 Start_11) (str.from_int StartInt_6) (ite StartBool Start_12 Start_3)))
   (Start_15 String ("" "0" (str.++ Start_15 Start_11) (str.from_int StartInt_8) (ite StartBool_2 Start_4 Start_7)))
   (StartBool_5 Bool (false (and StartBool_2 StartBool_5) (str.<= Start_9 Start_11) (str.prefixof Start_14 Start_9) (str.contains Start_2 Start_3) (= Start_13 Start_11) (= StartInt_2 StartInt_1)))
   (Start_6 String ("a" (str.at Start_8 StartInt_2) (str.substr Start_7 StartInt_5 StartInt) (str.replace Start_5 Start_5 Start_2)))
   (StartBool_1 Bool (false (not StartBool) (str.<= Start_3 Start_8) (str.prefixof Start_2 Start_2) (str.contains Start_8 Start_6)))
   (StartInt_3 Int (1 (str.len Start)))
   (StartInt_5 Int (1))
   (Start_7 String (y (str.++ Start_5 Start_6) (str.at Start_4 StartInt_2) (str.replace Start_2 Start_7 Start_1) (ite StartBool_1 Start_8 Start_4)))
   (Start_13 String ("0" (str.at Start_11 StartInt_1) (str.substr Start_3 StartInt_7 StartInt_2) (str.replace Start_2 Start_8 Start_14) (str.from_int StartInt_3) (ite StartBool Start_14 Start_3)))
   (Start_9 String (x (str.substr Start_9 StartInt_3 StartInt_2)))
   (Start_4 String (y (str.++ Start_5 Start) (str.at Start_6 StartInt_3) (str.substr Start_7 StartInt_3 StartInt_1) (str.from_int StartInt_4)))
   (Start_3 String ("" "1" (str.substr Start_2 StartInt StartInt_1) (str.replace Start_4 Start_4 Start_4) (str.from_int StartInt_2)))
   (Start_2 String ("1" (str.at Start_2 StartInt_2) (ite StartBool Start_1 Start_3)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_4 StartBool_5) (str.< Start_6 Start_15) (= Start_13 Start_1) (= StartInt_3 StartInt_5) (<= StartInt_8 StartInt_9)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.indexof Start_4 Start_6 StartInt_3) (str.to_int Start_7)))
   (Start_11 String ("" (str.replace Start_9 Start_6 Start_1) (ite StartBool_2 Start_13 Start_3)))
   (StartInt_2 Int (1 0 (str.len Start_7) (str.indexof Start_8 Start StartInt_6)))
   (StartInt_7 Int (1 0 (str.len Start_2) (str.indexof Start_9 Start_5 StartInt_5)))
   (StartInt_6 Int (1 (str.indexof Start_8 Start_5 StartInt_3)))
   (StartInt_1 Int (1 (str.len Start_9) (str.indexof Start_8 Start_8 StartInt_4) (str.to_int Start_10)))
   (Start_10 String (x "1" (str.++ Start_5 Start_2) (str.at Start_9 StartInt_5) (str.from_int StartInt) (ite StartBool_1 Start Start_3)))
   (Start_14 String ("a" x (str.at Start_11 StartInt) (str.substr Start_9 StartInt_1 StartInt_2)))
   (Start_8 String (y "b" (str.replace Start_3 Start_4 Start_1) (str.from_int StartInt_2) (ite StartBool Start_1 Start_5)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.<= Start_6 Start_8) (str.suffixof Start_2 Start_14) (= Start_5 Start_4) (= StartInt_8 StartInt_1)))
   (Start_12 String ("0" (str.substr Start_10 StartInt_2 StartInt_4) (ite StartBool Start_9 Start_2)))
   (StartInt_8 Int (0 (str.len Start_15)))
   (StartInt_9 Int (0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.at (ite (str.<= "a" x) y "") 1) "0")))

(check-synth)
