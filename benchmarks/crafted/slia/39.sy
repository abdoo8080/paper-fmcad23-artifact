(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_7 Int) (StartInt_9 Int) (Start_11 String) (Start_3 String) (StartInt_3 Int) (Start_10 String) (Start_2 String) (Start_13 String) (StartInt_1 Int) (Start_1 String) (Start_6 String) (StartInt_4 Int) (Start_7 String) (Start_5 String) (StartInt_2 Int) (StartInt_8 Int) (Start_4 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_8 String) (StartInt_6 Int) (Start_9 String))
  ((Start String ("0" y (str.++ Start Start_1) (str.substr Start StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (1 0))
   (StartBool Bool (false (not StartBool_1) (str.< Start_9 Start_9) (str.<= Start_10 Start_1) (str.prefixof Start_1 Start_11) (str.suffixof Start_5 Start_9) (str.contains Start_12 Start_9) (= StartInt StartInt) (<= StartInt_9 StartInt_1)))
   (Start_12 String (x (str.at Start_12 StartInt_4) (str.from_int StartInt_7)))
   (StartInt_7 Int (0 1 (str.indexof Start_3 Start StartInt_6) (str.to_int Start_4)))
   (StartInt_9 Int (0 (str.len Start_13) (str.to_int Start_10)))
   (Start_11 String ("1" "a" (str.++ Start_7 Start_9) (str.replace Start_8 Start_5 Start_6) (str.from_int StartInt_7)))
   (Start_3 String ("" (str.substr Start_1 StartInt_5 StartInt_1) (ite StartBool_1 Start_11 Start_7)))
   (StartInt_3 Int (1 (str.to_int Start_8)))
   (Start_10 String ("b" y "" (str.++ Start_4 Start_2) (str.substr Start_7 StartInt_1 StartInt_4) (str.from_int StartInt_4) (ite StartBool_1 Start_4 Start_7)))
   (Start_2 String ("b" x (str.substr Start_5 StartInt StartInt_8) (str.replace Start_12 Start_12 Start_11) (ite StartBool_1 Start_5 Start_12)))
   (Start_13 String ("b" (str.at Start_1 StartInt_4) (str.substr Start_11 StartInt_8 StartInt_5) (str.replace Start_13 Start_4 Start_2) (ite StartBool Start_3 Start_9)))
   (StartInt_1 Int (1 0 (str.indexof Start_4 Start_3 StartInt) (str.to_int Start_5)))
   (Start_1 String ("" x (str.at Start StartInt) (str.replace Start_2 Start Start_3) (str.from_int StartInt_1)))
   (Start_6 String ("" (str.++ Start_4 Start_7) (str.substr Start_5 StartInt_1 StartInt_1) (str.replace Start_1 Start_7 Start_6) (ite StartBool Start_1 Start_8)))
   (StartInt_4 Int (1 0 (str.indexof Start_2 Start_10 StartInt_2) (str.to_int Start)))
   (Start_7 String (x (str.++ Start_8 Start_8) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_5 Start_6 Start_4) (ite StartBool Start_2 Start_1)))
   (Start_5 String (y (str.++ Start_2 Start_6) (str.at Start StartInt_1)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_7 StartInt_1)))
   (StartInt_8 Int (1 0 (str.len Start_4)))
   (Start_4 String ("b" "0" "1" (str.at Start StartInt_3) (str.replace Start_3 Start_6 Start_1) (ite StartBool_1 Start_4 Start)))
   (StartBool_1 Bool (true (str.<= Start_4 Start_8) (str.suffixof Start Start_2) (str.contains Start_4 Start_2) (<= StartInt_4 StartInt_5)))
   (StartInt_5 Int (0 1 (str.len Start_9) (str.indexof Start_5 Start_3 StartInt_1)))
   (Start_8 String ("" "a" y "b" (str.++ Start_7 Start_1) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_8 Start_8)))
   (StartInt_6 Int (1 0 (str.indexof Start_4 Start_4 StartInt)))
   (Start_9 String (y (str.++ Start_9 Start_6) (str.at Start_4 StartInt_6) (str.replace Start_7 Start_4 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" x "a")))

(check-synth)
