(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_9 Int) (StartBool_2 Bool) (StartInt_8 Int) (StartInt_2 Int) (StartInt_1 Int) (Start_7 String) (Start_10 String) (StartBool_1 Bool) (Start_13 String) (Start_6 String) (Start_9 String) (StartInt_5 Int) (StartInt_4 Int) (StartInt_10 Int) (Start_5 String) (StartInt_3 Int) (Start_1 String) (Start_8 String) (Start_4 String) (Start_3 String) (Start_2 String) (StartInt_11 Int) (Start_11 String) (StartInt_6 Int) (StartInt_7 Int))
  ((Start String ("b" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0 (str.len Start_13)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.< Start_7 Start_10) (= Start_2 Start_3)))
   (Start_12 String (x (str.at Start StartInt_11) (str.substr Start_11 StartInt_2 StartInt_8) (str.replace Start_2 Start_9 Start_9)))
   (StartInt_9 Int (1 (str.indexof Start_12 Start StartInt_10) (str.to_int Start_2)))
   (StartBool_2 Bool (true false (not StartBool) (str.< Start_9 Start_11) (str.<= Start_3 Start_11) (str.prefixof Start_11 Start_2) (str.suffixof Start_1 Start_4)))
   (StartInt_8 Int (1))
   (StartInt_2 Int (0 (str.len Start_5) (str.indexof Start_1 Start_11 StartInt_8) (str.to_int Start_4)))
   (StartInt_1 Int (1 0 (str.len Start_7) (str.indexof Start_3 Start_11 StartInt_11) (str.to_int Start_4)))
   (Start_7 String ("a" (str.at Start_9 StartInt_1) (str.substr Start_4 StartInt_3 StartInt_4) (str.from_int StartInt_1)))
   (Start_10 String ("b" "a" x (str.substr Start_3 StartInt_7 StartInt_1) (str.replace Start_8 Start_6 Start_7) (str.from_int StartInt)))
   (StartBool_1 Bool (true (str.prefixof Start_1 Start_3) (= Start_3 Start_3) (<= StartInt_3 StartInt_4)))
   (Start_13 String ("" x (str.substr Start_7 StartInt_6 StartInt_3) (ite StartBool_2 Start_2 Start_12)))
   (Start_6 String ("0" "" "b" "a" x "1" y (str.++ Start_4 Start_6) (str.at Start_6 StartInt_7) (str.replace Start_5 Start_1 Start) (ite StartBool_1 Start_5 Start_6)))
   (Start_9 String (x (str.at Start_2 StartInt_7)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_5 Start_3 StartInt_5) (str.to_int Start_5)))
   (StartInt_4 Int (0 1))
   (StartInt_10 Int (0 (str.len Start_8)))
   (Start_5 String ("b" "1" "0" (str.++ Start_3 Start) (str.at Start_2 StartInt) (str.from_int StartInt_1)))
   (StartInt_3 Int (1 (str.len Start_2) (str.indexof Start Start_4 StartInt_4)))
   (Start_1 String ("" x (str.++ Start_8 Start_12) (str.at Start_6 StartInt_1) (str.substr Start_11 StartInt_9 StartInt_3) (str.from_int StartInt_10)))
   (Start_8 String ("" "a" "b" "0" y (str.++ Start_2 Start_2) (str.at Start_9 StartInt) (str.replace Start_10 Start_6 Start_1) (str.from_int StartInt_3)))
   (Start_4 String ("0" (str.++ Start Start_2) (str.at Start_3 StartInt_4) (str.from_int StartInt_5)))
   (Start_3 String (y "b" (str.substr Start StartInt_3 StartInt_6)))
   (Start_2 String ("1" "a" (str.++ Start_4 Start) (str.at Start_6 StartInt_5) (str.from_int StartInt_4)))
   (StartInt_11 Int (1 0 (str.len Start_5) (str.indexof Start_6 Start_2 StartInt_1)))
   (Start_11 String ("b" (str.++ Start_8 Start_8) (str.at Start_3 StartInt_3) (str.substr Start_7 StartInt_9 StartInt_10) (ite StartBool_2 Start_10 Start_3)))
   (StartInt_6 Int (0 1))
   (StartInt_7 Int (0 (str.len Start_7) (str.indexof Start_8 Start_1 StartInt_2) (str.to_int Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.substr (str.replace "0" x "1") 1 1) "0" (str.++ (str.substr "1" 0 (str.len (str.replace x y "a"))) "a"))))

(check-synth)
