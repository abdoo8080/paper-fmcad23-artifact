(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_1 String) (Start_3 String) (Start_11 String) (StartInt_1 Int) (Start_2 String) (StartBool_1 Bool) (Start_8 String) (StartInt_2 Int) (StartInt_5 Int) (Start_7 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_9 String) (Start_10 String) (Start_6 String) (StartBool_2 Bool) (StartInt_4 Int) (Start_12 String) (Start_4 String) (Start_5 String))
  ((Start String ("b" (str.++ Start_1 Start_2) (str.at Start_3 StartInt) (str.replace Start_1 Start Start_4) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_4)))
   (StartInt Int (0 (str.indexof Start_10 Start_3 StartInt) (str.to_int Start_4)))
   (StartBool Bool (false (str.<= Start_13 Start) (str.contains Start_6 Start_8)))
   (Start_13 String ("b" (str.++ Start_5 Start_4) (str.replace Start_3 Start_1 Start_1) (str.from_int StartInt) (ite StartBool_3 Start_9 Start_12)))
   (Start_1 String ("1" y "0" "a" (str.++ Start_2 Start_11) (str.substr Start_3 StartInt_5 StartInt_3)))
   (Start_3 String ("1" (str.at Start_10 StartInt_2) (str.substr Start_3 StartInt StartInt_5) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_10)))
   (Start_11 String ("a" "0" (str.++ Start_9 Start_5) (str.replace Start_10 Start_4 Start_12) (ite StartBool_1 Start_11 Start_12)))
   (StartInt_1 Int (1 (str.to_int Start_1)))
   (Start_2 String (y (str.++ Start_8 Start_1) (str.at Start StartInt_3) (str.substr Start_2 StartInt_5 StartInt_4) (str.replace Start_9 Start_9 Start_4) (str.from_int StartInt_5)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool StartBool_2) (str.< Start_5 Start_4) (str.prefixof Start_6 Start_6) (str.contains Start_7 Start_6) (= Start_3 Start_8) (<= StartInt_2 StartInt_1)))
   (Start_8 String ("b" (str.++ Start_8 Start_8) (str.at Start_3 StartInt) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_6 Start_2 Start_8)))
   (StartInt_2 Int (1 (str.len Start_4) (str.to_int Start)))
   (StartInt_5 Int (0 (str.len Start_7) (str.to_int Start_6)))
   (Start_7 String ("0" "a" "b" (str.at Start_9 StartInt_3) (str.substr Start_8 StartInt_2 StartInt_3) (str.replace Start Start Start_1) (str.from_int StartInt_2) (ite StartBool_2 Start_5 Start_2)))
   (StartInt_3 Int (0 1 (str.len Start_2)))
   (StartBool_3 Bool (true false (str.< Start Start_2) (= Start_12 Start_12)))
   (Start_9 String ("0" (str.at Start_1 StartInt_3) (str.substr Start_7 StartInt_3 StartInt) (str.replace Start_10 Start_5 Start_3) (ite StartBool_2 Start_1 Start_3)))
   (Start_10 String ("1" "0" "" (str.replace Start_9 Start_3 Start_4) (ite StartBool_1 Start_2 Start_6)))
   (Start_6 String (x "a" "0" (str.++ Start_6 Start_8) (str.at Start_1 StartInt_2) (str.substr Start_5 StartInt_4 StartInt) (str.replace Start_5 Start_3 Start_10) (str.from_int StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.prefixof Start_8 Start_4) (str.suffixof Start_2 Start_5) (= StartInt_4 StartInt_5) (<= StartInt_5 StartInt)))
   (StartInt_4 Int (0 1 (str.indexof Start_3 Start_1 StartInt_1) (str.to_int Start_3)))
   (Start_12 String ("1" "0" y "a" (str.++ Start Start) (str.substr Start_7 StartInt StartInt_4) (str.replace Start_7 Start_1 Start_1) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_13)))
   (Start_4 String (x "a" (str.++ Start_5 Start_3) (str.substr Start StartInt StartInt_3)))
   (Start_5 String ("b" "1" (str.at Start StartInt_2) (str.substr Start_8 StartInt_1 StartInt_5) (str.replace Start_7 Start_8 Start_5) (ite StartBool_2 Start_2 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "0" (str.at y 1))))

(check-synth)
