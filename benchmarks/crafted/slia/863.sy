(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_8 Bool) (StartBool_6 Bool) (Start_17 String) (StartBool_5 Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_7 String) (StartInt_5 Int) (Start_6 String) (Start_8 String) (StartBool_1 Bool) (StartInt_9 Int) (StartBool_3 Bool) (Start_5 String) (StartBool_7 Bool) (Start_16 String) (Start_12 String) (Start_13 String) (StartInt_8 Int) (StartInt_6 Int) (Start_10 String) (Start_11 String) (StartInt_7 Int) (StartInt_2 Int) (Start_2 String) (Start_4 String) (Start_1 String) (Start_14 String) (StartBool_4 Bool) (StartInt_1 Int) (Start_15 String) (Start_3 String) (Start_9 String) (StartBool_2 Bool))
  ((Start String ("1" (str.++ Start Start) (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 0))
   (StartBool Bool (false (not StartBool_5) (str.<= Start_10 Start_5) (str.prefixof Start_10 Start_9) (str.suffixof Start_14 Start_5) (str.contains Start_14 Start_10) (<= StartInt_6 StartInt_9)))
   (StartBool_8 Bool (true (and StartBool_8 StartBool_5) (str.< Start_17 Start_6) (str.<= Start_14 Start_15) (str.suffixof Start_10 Start_3) (str.contains Start_12 Start_6) (= Start_12 Start_7) (= StartInt_3 StartInt) (<= StartInt_8 StartInt_4)))
   (StartBool_6 Bool (false (not StartBool) (and StartBool StartBool_8) (str.< Start_4 Start_10) (str.<= Start_9 Start_10) (str.prefixof Start_6 Start_3) (str.suffixof Start_2 Start_2)))
   (Start_17 String ("1" y (str.++ Start_4 Start_16) (str.replace Start_4 Start_5 Start_6) (str.from_int StartInt_9) (ite StartBool_7 Start_5 Start_7)))
   (StartBool_5 Bool (false true (and StartBool_2 StartBool_6) (str.<= Start_16 Start_16) (str.prefixof Start_17 Start_10) (= Start_12 Start_13) (<= StartInt_1 StartInt_2)))
   (StartInt_3 Int (0 (str.indexof Start_9 Start_8 StartInt_3)))
   (StartInt_4 Int (0 (str.len Start_11) (str.indexof Start_12 Start_10 StartInt_4) (str.to_int Start)))
   (Start_7 String (y "" (str.++ Start_10 Start_9) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 0 (str.indexof Start_5 Start_6 StartInt)))
   (Start_6 String ("a" (str.++ Start_9 Start_4) (str.substr Start_8 StartInt StartInt_4) (str.replace Start_2 Start_3 Start_3)))
   (Start_8 String (x (str.++ Start_9 Start_2)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start_3 Start) (str.<= Start_2 Start_4) (str.contains Start_5 Start_2) (= Start Start_3) (<= StartInt StartInt_2)))
   (StartInt_9 Int (1 (str.len Start_16) (str.indexof Start_15 Start StartInt_5)))
   (StartBool_3 Bool (true false (not StartBool) (str.suffixof Start_8 Start_1) (= Start_2 Start_4)))
   (Start_5 String ("0" "b" (str.++ Start_6 Start_7) (str.at Start_7 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start_1 Start_8 Start) (str.from_int StartInt_3) (ite StartBool_3 Start_2 Start_5)))
   (StartBool_7 Bool (false (not StartBool_2) (str.< Start_14 Start_16) (= StartInt_3 StartInt_9)))
   (Start_16 String ("a" "1" (str.++ Start_13 Start_4) (str.from_int StartInt_7) (ite StartBool_2 Start_8 Start_8)))
   (Start_12 String ("b" "0" "1" "a" "" y (str.at Start_6 StartInt_5) (str.substr Start_9 StartInt_4 StartInt_1) (str.replace Start_1 Start_13 Start_14) (str.from_int StartInt_2) (ite StartBool Start_11 Start_6)))
   (Start_13 String ("b" (str.at Start_15 StartInt_4) (str.substr Start_2 StartInt_4 StartInt_6) (str.replace Start_12 Start Start_1) (str.from_int StartInt_3) (ite StartBool_3 Start_11 Start)))
   (StartInt_8 Int (1 0 (str.len Start) (str.to_int Start_5)))
   (StartInt_6 Int (1 (str.len Start_7) (str.indexof Start_14 Start_14 StartInt_1) (str.to_int Start_15)))
   (Start_10 String (y "a" (str.at Start_9 StartInt_2) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start Start_3 Start_3) (str.from_int StartInt_3)))
   (Start_11 String ("a" "0" x (str.++ Start_11 Start_13) (str.substr Start_2 StartInt_4 StartInt_2) (str.replace Start_9 Start_15 Start_16)))
   (StartInt_7 Int (1 0))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_5 Start_5 StartInt_1) (str.to_int Start_4)))
   (Start_2 String (y "b" (str.++ Start_16 Start_8) (str.from_int StartInt_2) (ite StartBool_3 Start_14 Start_9)))
   (Start_4 String ("" (str.from_int StartInt_8) (ite StartBool_4 Start Start_7)))
   (Start_1 String ("1" x (str.at Start StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_1 Start_1 Start) (ite StartBool_1 Start_2 Start)))
   (Start_14 String ("" "a" (str.at Start_6 StartInt) (str.replace Start_6 Start_14 Start_2) (str.from_int StartInt_6)))
   (StartBool_4 Bool (true (str.suffixof Start Start_6)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start_10 Start_10 StartInt_6) (str.to_int Start_13)))
   (Start_15 String ("b" y (str.++ Start_2 Start_6) (str.at Start_3 StartInt_6) (str.replace Start_5 Start Start_4) (ite StartBool Start_13 Start_5)))
   (Start_3 String ("0" (str.++ Start_5 Start_3) (str.replace Start_11 Start_11 Start_10) (ite StartBool_4 Start_5 Start_7)))
   (Start_9 String (y "a" (str.at Start_5 StartInt_1) (str.substr Start_7 StartInt StartInt) (ite StartBool_2 Start_8 Start_6)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_4 StartBool_2) (str.prefixof Start_3 Start_14) (str.contains Start_1 Start_2) (= Start_16 Start) (= StartInt_5 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains y (str.++ "a" x)) "" (str.++ "b" "0"))))

(check-synth)
