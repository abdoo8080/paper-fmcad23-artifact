(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (Start_2 String) (Start_7 String) (StartInt_1 Int) (Start_6 String) (StartInt_2 Int) (Start_3 String) (Start_5 String) (StartBool_1 Bool) (Start_1 String) (Start_8 String))
  ((Start String ("0" (str.++ Start_1 Start_1) (str.at Start StartInt) (ite StartBool Start_2 Start_1)))
   (StartInt Int (1 (str.indexof Start_2 Start StartInt_2) (str.to_int Start_7)))
   (StartBool Bool (false (not StartBool_1) (and StartBool StartBool) (str.contains Start_2 Start_3) (= StartInt_2 StartInt_1)))
   (Start_4 String (y "a" "b" (str.from_int StartInt_1)))
   (Start_2 String (x "1" "a" "b" "" (str.++ Start_3 Start) (str.at Start StartInt_1) (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (Start_7 String (x "1" (str.++ Start_4 Start_6) (str.at Start_8 StartInt_1) (str.replace Start_6 Start Start_8) (str.from_int StartInt_2) (ite StartBool Start_3 Start)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start Start_3 StartInt_2)))
   (Start_6 String ("b" (str.++ Start_5 Start_1) (str.at Start_3 StartInt_1)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.to_int Start)))
   (Start_3 String (x "b" "1" y (ite StartBool Start Start_5)))
   (Start_5 String ("a" "" (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_5)))
   (StartBool_1 Bool (true false (not StartBool) (str.<= Start_1 Start_5) (str.prefixof Start_5 Start_6) (str.suffixof Start_4 Start)))
   (Start_1 String ("1" (str.++ Start_7 Start) (str.replace Start Start_5 Start_7)))
   (Start_8 String (y "" "a" "b" "0" "1" x (str.substr Start_7 StartInt_1 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "a" (str.indexof "0" y 1))))

(check-synth)
