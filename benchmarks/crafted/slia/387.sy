(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_1 Int) (StartInt_2 Int) (StartInt_6 Int) (Start_3 String) (StartBool_2 Bool) (Start_2 String) (Start_8 String) (StartInt_5 Int) (StartBool_3 Bool) (StartInt_4 Int) (Start_4 String) (StartInt_3 Int) (Start_1 String) (StartBool_1 Bool) (Start_6 String) (Start_5 String) (Start_7 String))
  ((Start String ("1" (str.++ Start_1 Start_2) (str.at Start_3 StartInt) (str.substr Start StartInt_1 StartInt) (str.replace Start_2 Start_3 Start_4) (str.from_int StartInt) (ite StartBool Start_3 Start_3)))
   (StartInt Int (0 (str.indexof Start_7 Start_4 StartInt_2)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_1 StartBool_2) (str.< Start_1 Start_3) (str.prefixof Start_4 Start_8)))
   (Start_9 String ("a" y (str.replace Start_7 Start_1 Start_2) (str.from_int StartInt)))
   (StartInt_1 Int (1 (str.indexof Start_2 Start_3 StartInt_2)))
   (StartInt_2 Int (1 (str.indexof Start_4 Start_3 StartInt_2) (str.to_int Start_4)))
   (StartInt_6 Int (0 (str.indexof Start_6 Start StartInt) (str.to_int Start)))
   (Start_3 String (y (str.replace Start Start_1 Start)))
   (StartBool_2 Bool (true false (str.<= Start_7 Start_1) (= StartInt_3 StartInt)))
   (Start_2 String (x "b" y (str.at Start_2 StartInt_3) (str.substr Start_2 StartInt_3 StartInt_4) (str.from_int StartInt_1)))
   (Start_8 String ("a" y (str.at Start_9 StartInt) (str.substr Start_4 StartInt StartInt_6) (str.from_int StartInt_3)))
   (StartInt_5 Int (0 1 (str.len Start_3) (str.indexof Start_8 Start_9 StartInt_1)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool_3) (str.prefixof Start Start_6) (str.contains Start_7 Start_1) (= Start Start) (= StartInt_1 StartInt) (<= StartInt_5 StartInt_6)))
   (StartInt_4 Int (0 1 (str.indexof Start Start_2 StartInt_1)))
   (Start_4 String ("a" "0" y (str.substr Start_2 StartInt_2 StartInt)))
   (StartInt_3 Int (0 (str.len Start) (str.indexof Start Start_2 StartInt_3)))
   (Start_1 String (y (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt_3 StartInt_2) (str.replace Start_3 Start_5 Start_1) (str.from_int StartInt) (ite StartBool Start_4 Start_6)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_1 StartBool_2) (= Start_9 Start_6) (= StartInt_1 StartInt_6)))
   (Start_6 String ("" (str.at Start_3 StartInt_4) (str.replace Start_6 Start_6 Start_3)))
   (Start_5 String ("a" (str.++ Start_4 Start_4) (ite StartBool_1 Start_1 Start_7)))
   (Start_7 String (y "" "a" "1" (str.++ Start_3 Start_7) (str.at Start_3 StartInt_4) (str.substr Start_3 StartInt_2 StartInt_5) (str.replace Start Start Start_4) (ite StartBool Start_6 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ x (str.replace "a" y "a"))))

(check-synth)
