(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_9 Int) (StartInt_8 Int) (Start_12 String) (Start_4 String) (StartBool_8 Bool) (StartBool_9 Bool) (StartInt_2 Int) (Start_2 String) (Start_6 String) (Start_11 String) (StartInt_1 Int) (Start_5 String) (StartInt_6 Int) (Start_7 String) (Start_3 String) (Start_1 String) (Start_9 String) (StartBool_4 Bool) (StartBool_3 Bool) (StartBool_5 Bool) (StartInt_4 Int) (StartInt_3 Int) (Start_8 String) (StartBool_6 Bool) (StartInt_5 Int) (StartBool_7 Bool) (StartBool_2 Bool) (Start_10 String) (StartBool_10 Bool))
  ((Start String ("b" x "a" (str.++ Start Start) (str.replace Start_1 Start Start_1)))
   (StartInt Int (0 (str.len Start_2)))
   (StartBool Bool (true (not StartBool) (and StartBool_1 StartBool_2) (str.prefixof Start_1 Start_4) (str.suffixof Start_3 Start_5) (str.contains Start_3 Start_1) (= Start_1 Start_1) (= StartInt_2 StartInt_1) (<= StartInt StartInt_1)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.<= Start_1 Start_11) (str.prefixof Start_7 Start_2) (= StartInt_8 StartInt_1)))
   (StartInt_7 Int (1 0 (str.indexof Start_1 Start_8 StartInt_1)))
   (StartInt_9 Int (1 (str.len Start_3)))
   (StartInt_8 Int (0 1 (str.indexof Start_12 Start_8 StartInt_9)))
   (Start_12 String (y x "" "0" (str.++ Start_11 Start_11) (str.at Start_3 StartInt_7) (str.substr Start_3 StartInt_8 StartInt_7) (str.from_int StartInt_1) (ite StartBool_5 Start_11 Start_3)))
   (Start_4 String ("1" "0" (str.at Start_1 StartInt_2) (str.replace Start_2 Start Start_2)))
   (StartBool_8 Bool (true false (not StartBool_9) (str.< Start_4 Start_7) (str.<= Start Start_8) (str.prefixof Start_3 Start_6) (<= StartInt_3 StartInt_1)))
   (StartBool_9 Bool (true false (not StartBool_7) (str.< Start_8 Start) (str.<= Start_5 Start_2) (str.prefixof Start_8 Start) (str.suffixof Start_1 Start_6) (= StartInt_2 StartInt_4) (<= StartInt_5 StartInt_3)))
   (StartInt_2 Int (0))
   (Start_2 String ("1" (str.replace Start_4 Start_4 Start_4) (str.from_int StartInt_2)))
   (Start_6 String ("b" (str.from_int StartInt_1)))
   (Start_11 String ("b" (str.++ Start_12 Start_3) (str.from_int StartInt) (ite StartBool_4 Start_6 Start_7)))
   (StartInt_1 Int (0 (str.len Start_3)))
   (Start_5 String ("b" (str.replace Start_1 Start_6 Start_1) (ite StartBool_2 Start_5 Start_1)))
   (StartInt_6 Int (0 (str.len Start_4)))
   (Start_7 String ("b" "1" (str.++ Start_3 Start_7) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start_2 Start_6) (str.from_int StartInt) (ite StartBool_4 Start_1 Start)))
   (Start_3 String ("0" (str.++ Start_1 Start_2) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt_1)))
   (Start_1 String ("1" "a" (str.++ Start_1 Start_1) (str.at Start_2 StartInt) (str.replace Start_1 Start Start_3)))
   (Start_9 String ("b" "a" (str.at Start_1 StartInt_2) (str.from_int StartInt_4) (ite StartBool_6 Start Start_8)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool StartBool) (str.prefixof Start_6 Start_3) (= Start_7 Start_5) (<= StartInt_1 StartInt_2)))
   (StartBool_3 Bool (false (and StartBool_5 StartBool_6) (str.prefixof Start Start_5) (str.contains Start_1 Start) (= StartInt StartInt_1) (<= StartInt_1 StartInt_3)))
   (StartBool_5 Bool (false (not StartBool) (and StartBool_2 StartBool) (str.< Start_10 Start_6) (str.<= Start_4 Start_11) (str.prefixof Start Start_8) (= Start_4 Start_11) (= StartInt_5 StartInt_3) (<= StartInt StartInt_6)))
   (StartInt_4 Int (1))
   (StartInt_3 Int (0 (str.len Start_1) (str.to_int Start_6)))
   (Start_8 String ("b" x "1" (str.++ Start_7 Start_9) (str.replace Start_7 Start_3 Start) (ite StartBool_4 Start_6 Start_7)))
   (StartBool_6 Bool (false (not StartBool_5) (and StartBool_7 StartBool_8) (str.<= Start_6 Start_6) (str.suffixof Start_5 Start_6) (= Start_7 Start_2) (<= StartInt_4 StartInt_4)))
   (StartInt_5 Int (1 (str.len Start_9) (str.to_int Start_3)))
   (StartBool_7 Bool (false true (and StartBool_2 StartBool_10) (str.prefixof Start_3 Start_10)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool_3) (str.< Start_5 Start_5) (str.prefixof Start_7 Start_7) (str.contains Start_5 Start_5)))
   (Start_10 String ("1" (str.at Start_3 StartInt) (ite StartBool_10 Start_3 Start_5)))
   (StartBool_10 Bool (false true (not StartBool_1) (and StartBool_4 StartBool_1) (str.<= Start_3 Start_3) (str.suffixof Start_9 Start) (str.contains Start_6 Start_8) (= Start_7 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.indexof "b" x 0))))

(check-synth)
