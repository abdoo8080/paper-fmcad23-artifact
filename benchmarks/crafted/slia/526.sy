(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartInt_4 Int) (Start_5 String) (Start_7 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_2 String) (Start_4 String) (Start_6 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_12 String) (Start_3 String) (Start_9 String) (StartBool_8 Bool) (StartInt_2 Int) (StartBool_3 Bool) (Start_13 String) (Start_8 String) (Start_1 String) (Start_10 String) (StartInt_6 Int) (StartBool_4 Bool) (StartBool_6 Bool) (StartBool_5 Bool) (StartBool_7 Bool) (Start_11 String))
  ((Start String ("0" "a" x (str.at Start_1 StartInt_1) (str.replace Start Start_1 Start_2) (ite StartBool Start Start_2)))
   (StartInt Int (0 (str.indexof Start_12 Start_13 StartInt_1) (str.to_int Start_9)))
   (StartBool Bool (true false (not StartBool) (str.prefixof Start_1 Start_5) (str.suffixof Start_11 Start_6) (str.contains Start Start_1) (= Start_7 Start_5) (= StartInt_6 StartInt) (<= StartInt_2 StartInt)))
   (StartInt_1 Int (1 (str.indexof Start_7 Start_1 StartInt_3) (str.to_int Start_11)))
   (StartInt_4 Int (0 (str.indexof Start_2 Start_3 StartInt_1)))
   (Start_5 String ("b" (str.++ Start_6 Start_3) (str.replace Start_2 Start Start_2) (str.from_int StartInt)))
   (Start_7 String ("b" "0" "1" (str.at Start_8 StartInt_1) (str.substr Start_4 StartInt StartInt_4) (ite StartBool_4 Start_9 Start_7)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_3) (str.suffixof Start_1 Start_4) (str.contains Start_1 Start_2) (= Start_2 Start_3)))
   (StartInt_3 Int (1 (str.len Start) (str.indexof Start_2 Start_4 StartInt_4)))
   (Start_2 String ("a" (str.at Start StartInt) (str.replace Start_2 Start_2 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (Start_4 String ("0" (str.++ Start_4 Start_4) (str.at Start StartInt_2) (str.substr Start_1 StartInt StartInt_3) (ite StartBool Start_1 Start)))
   (Start_6 String ("0" "" "b" (str.at Start_4 StartInt_6) (str.replace Start_7 Start Start_7) (str.from_int StartInt_6)))
   (StartBool_1 Bool (true false (not StartBool_6) (and StartBool_7 StartBool_4) (str.<= Start_2 Start_7) (str.contains Start_8 Start_6) (= StartInt_4 StartInt_5) (<= StartInt_3 StartInt)))
   (StartInt_5 Int (1 0 (str.len Start_4) (str.indexof Start_2 Start_5 StartInt_3)))
   (Start_12 String (y (str.at Start_4 StartInt_1)))
   (Start_3 String ("a" "1" y (str.at Start_1 StartInt_1) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt) (ite StartBool_2 Start_4 Start_4)))
   (Start_9 String ("" (str.at Start_7 StartInt_2) (str.replace Start_7 Start_7 Start_8) (str.from_int StartInt_3) (ite StartBool_4 Start Start_2)))
   (StartBool_8 Bool (true false (str.< Start_2 Start_9) (str.suffixof Start_10 Start_7) (= StartInt_2 StartInt_1)))
   (StartInt_2 Int (1 0 (str.indexof Start_1 Start_4 StartInt) (str.to_int Start_2)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool_4) (str.< Start Start_2) (str.<= Start_4 Start_4) (str.prefixof Start_1 Start_2) (= StartInt StartInt_3) (<= StartInt_2 StartInt_5)))
   (Start_13 String ("0" (str.++ Start_2 Start_5) (str.at Start_4 StartInt_2) (str.substr Start_6 StartInt_1 StartInt)))
   (Start_8 String (x "b" (str.++ Start_9 Start_4) (str.replace Start_6 Start_6 Start_4)))
   (Start_1 String ("a" (str.++ Start_3 Start_10) (str.at Start_8 StartInt_2) (str.substr Start_9 StartInt_5 StartInt) (str.replace Start Start_2 Start_9) (str.from_int StartInt_6)))
   (Start_10 String ("a" x (str.substr Start_6 StartInt StartInt_6) (str.replace Start_4 Start_1 Start_4) (ite StartBool_6 Start_10 Start_1)))
   (StartInt_6 Int (0 (str.to_int Start_3)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_1 StartBool_5) (str.prefixof Start_3 Start_7) (str.suffixof Start_9 Start_6) (str.contains Start Start_4) (= StartInt_5 StartInt_2)))
   (StartBool_6 Bool (true (and StartBool StartBool_8) (str.<= Start_9 Start_2) (str.suffixof Start_7 Start_2) (str.contains Start_7 Start_5) (= Start_3 Start_6)))
   (StartBool_5 Bool (false (str.prefixof Start Start_1) (= StartInt StartInt_5)))
   (StartBool_7 Bool (false true (str.prefixof Start_9 Start) (str.suffixof Start_10 Start_4)))
   (Start_11 String ("0" "a" (str.++ Start_4 Start_11) (str.at Start_4 StartInt) (str.substr Start_3 StartInt_2 StartInt_5) (str.from_int StartInt_1) (ite StartBool_6 Start_7 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof (str.++ x "0") "0" 0))))

(check-synth)
