(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_10 Int) (Start_10 String) (Start_11 String) (StartInt_9 Int) (StartInt_1 Int) (Start_5 String) (StartBool_2 Bool) (StartInt_8 Int) (StartInt_5 Int) (StartInt_7 Int) (StartInt_6 Int) (StartInt_2 Int) (Start_8 String) (Start_1 String) (Start_3 String) (Start_9 String) (StartInt_3 Int) (Start_7 String) (Start_2 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_4 String) (Start_6 String))
  ((Start String ("a" (str.++ Start_1 Start_1) (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt_2)))
   (StartInt Int (0 1 (str.len Start_10)))
   (StartBool Bool (true (not StartBool_1) (str.< Start_12 Start_4) (= Start_3 Start_11) (= StartInt_6 StartInt_4)))
   (Start_12 String ("a" (str.at Start_6 StartInt_5) (str.substr Start_5 StartInt_9 StartInt_10) (str.replace Start_5 Start_3 Start_5)))
   (StartInt_10 Int (1 (str.indexof Start Start_1 StartInt) (str.to_int Start_9)))
   (Start_10 String ("0" x "1" (str.++ Start_9 Start) (str.at Start_1 StartInt_10) (str.from_int StartInt) (ite StartBool_2 Start_5 Start_5)))
   (Start_11 String (y "a" (str.++ Start_7 Start_11) (str.substr Start_6 StartInt_4 StartInt_5)))
   (StartInt_9 Int (0 (str.len Start_11) (str.to_int Start)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_1 StartInt_8)))
   (Start_5 String ("1" x "" "b" (str.++ Start Start_5) (str.at Start_4 StartInt_1) (str.substr Start_1 StartInt_6 StartInt_7) (str.replace Start_5 Start_6 Start_1) (str.from_int StartInt)))
   (StartBool_2 Bool (false (str.<= Start_2 Start_11) (str.prefixof Start_5 Start_6) (= Start_7 Start_8)))
   (StartInt_8 Int (1 (str.len Start_2) (str.indexof Start_7 Start_2 StartInt_8)))
   (StartInt_5 Int (0))
   (StartInt_7 Int (1 (str.len Start_6) (str.to_int Start_4)))
   (StartInt_6 Int (0 1 (str.len Start_8) (str.indexof Start_9 Start_8 StartInt_4) (str.to_int Start_3)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.indexof Start_3 Start_3 StartInt_2)))
   (Start_8 String ("a" y (str.substr Start_2 StartInt_2 StartInt_3) (ite StartBool Start_5 Start)))
   (Start_1 String ("b" (str.++ Start_4 Start_10) (str.at Start_10 StartInt) (str.substr Start_10 StartInt_8 StartInt_9) (ite StartBool_1 Start_8 Start_10)))
   (Start_3 String (x (str.++ Start_1 Start_2) (str.replace Start_3 Start Start) (ite StartBool Start_4 Start_3)))
   (Start_9 String ("b" (str.substr Start_4 StartInt_1 StartInt_3) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_4)))
   (StartInt_3 Int (0 1 (str.indexof Start_1 Start StartInt_2) (str.to_int Start_3)))
   (Start_7 String ("" "1" y (str.at Start_6 StartInt_3) (str.substr Start_4 StartInt StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_3)))
   (Start_2 String ("1" (str.++ Start_4 Start_5) (str.replace Start_4 Start_1 Start_6) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool StartBool_1) (str.< Start_7 Start_3) (str.suffixof Start_2 Start_3) (= StartInt_4 StartInt) (<= StartInt_5 StartInt_6)))
   (StartInt_4 Int (1 0 (str.indexof Start_4 Start_6 StartInt_2) (str.to_int Start_6)))
   (Start_4 String (x "0" "a" "1" "" y (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start_4 Start_3 Start_4) (str.from_int StartInt_3)))
   (Start_6 String ("0" (str.++ Start_4 Start_2) (str.at Start_7 StartInt_4) (str.substr Start StartInt_4 StartInt_1) (str.replace Start_5 Start_7 Start_6) (str.from_int StartInt_1) (ite StartBool Start_3 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "b" "a") y "a")))

(check-synth)
