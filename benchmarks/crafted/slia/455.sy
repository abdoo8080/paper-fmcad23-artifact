(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartInt_5 Int) (Start_11 String) (Start_9 String) (Start_7 String) (StartInt_6 Int) (Start_15 String) (Start_8 String) (StartInt_4 Int) (Start_6 String) (StartInt_2 Int) (StartInt_10 Int) (StartInt_3 Int) (Start_3 String) (Start_12 String) (Start_2 String) (StartBool_1 Bool) (StartInt_8 Int) (Start_10 String) (StartInt_7 Int) (StartInt_9 Int) (Start_4 String) (Start_14 String) (Start_13 String) (StartBool_2 Bool) (Start_1 String) (Start_5 String) (StartBool_3 Bool))
  ((Start String (x "a" "b" "" (str.++ Start_1 Start_1) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 (str.indexof Start_11 Start_5 StartInt_6)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_3 StartBool) (str.prefixof Start_12 Start_8) (str.suffixof Start_5 Start_1) (= Start_11 Start_14)))
   (StartInt_1 Int (1 (str.len Start_6) (str.indexof Start_8 Start_10 StartInt_6) (str.to_int Start_5)))
   (StartInt_5 Int (0 1))
   (Start_11 String (x (str.substr Start_11 StartInt StartInt_1) (str.from_int StartInt_4) (ite StartBool_1 Start_12 Start_11)))
   (Start_9 String ("0" (str.substr Start StartInt_5 StartInt_4) (str.replace Start_1 Start Start_4) (str.from_int StartInt_1) (ite StartBool_1 Start_9 Start)))
   (Start_7 String ("1" (str.++ Start_3 Start_3) (str.replace Start_2 Start_2 Start_9) (str.from_int StartInt_3)))
   (StartInt_6 Int (0 1 (str.indexof Start_7 Start_3 StartInt)))
   (Start_15 String ("0" (str.at Start_15 StartInt_6) (str.substr Start_8 StartInt_8 StartInt_8) (str.from_int StartInt_10)))
   (Start_8 String ("" "a" "1" "0" x (str.from_int StartInt_3)))
   (StartInt_4 Int (1 0 (str.len Start_8) (str.to_int Start_7)))
   (Start_6 String ("a" (str.++ Start_7 Start_4) (str.replace Start_8 Start_3 Start_5) (str.from_int StartInt_4)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_5 StartInt_3)))
   (StartInt_10 Int (0 1 (str.to_int Start)))
   (StartInt_3 Int (0 1 (str.len Start_1) (str.indexof Start_2 Start_6 StartInt_1) (str.to_int Start_4)))
   (Start_3 String (y "1" "b" "" x (str.++ Start Start_4) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_2 Start_5 Start_5)))
   (Start_12 String ("" "a" y (str.substr Start_11 StartInt_7 StartInt_2) (str.replace Start Start_4 Start_7) (str.from_int StartInt)))
   (Start_2 String ("a" (str.at Start StartInt) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_1 Bool (true false (str.< Start_4 Start_12) (str.<= Start_2 Start_13) (str.suffixof Start_12 Start_3) (str.contains Start_13 Start_13) (= Start_9 Start_10) (= StartInt_2 StartInt_8)))
   (StartInt_8 Int (0 1 (str.len Start_1) (str.indexof Start Start_9 StartInt) (str.to_int Start_8)))
   (Start_10 String (y (str.replace Start_2 Start_5 Start_11)))
   (StartInt_7 Int (0 (str.indexof Start_9 Start StartInt_2)))
   (StartInt_9 Int (1 (str.to_int Start_10)))
   (Start_4 String ("0" (str.substr Start_3 StartInt_1 StartInt_3) (str.replace Start_1 Start_11 Start_1) (str.from_int StartInt_7)))
   (Start_14 String ("b"))
   (Start_13 String ("b" "" "0" "a" "1" y (str.++ Start Start_5) (str.at Start_7 StartInt_1) (str.substr Start_14 StartInt_9 StartInt_9) (str.replace Start_8 Start_12 Start_14)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_1 StartBool_1) (str.<= Start_1 Start) (str.prefixof Start_5 Start_10) (str.suffixof Start_3 Start_6) (= StartInt StartInt_7)))
   (Start_1 String ("1" (str.++ Start_12 Start_10) (str.at Start_14 StartInt_9) (str.substr Start_4 StartInt_8 StartInt_1)))
   (Start_5 String (y (str.substr Start_3 StartInt_1 StartInt_2) (str.from_int StartInt)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool StartBool_1) (str.< Start_2 Start_3) (str.<= Start_9 Start_15) (str.prefixof Start_9 Start_13) (str.suffixof Start_4 Start_10) (str.contains Start_13 Start_11) (= StartInt_5 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (not (= "1" (str.from_int (str.len x)))) "b" "1")))

(check-synth)
