(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_3 String) (Start_1 String) (Start_4 String) (Start_5 String) (StartInt_5 Int) (StartInt_1 Int) (StartBool_1 Bool) (Start_6 String) (StartInt_2 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_2 String) (StartInt_6 Int) (Start_7 String) (Start_8 String) (StartInt_4 Int) (StartInt_3 Int))
  ((Start String ("b" (str.++ Start_1 Start_1) (str.substr Start_2 StartInt_1 StartInt)))
   (StartInt Int (1 (str.len Start_7) (str.to_int Start_5)))
   (StartBool Bool (false (not StartBool_3) (str.< Start_9 Start_6) (str.<= Start Start_4) (str.contains Start_8 Start_6) (= Start_5 Start_6) (<= StartInt StartInt_4)))
   (Start_9 String ("b" y (str.++ Start_6 Start)))
   (Start_3 String ("1" "" (str.++ Start_4 Start_4) (str.at Start_2 StartInt_5) (str.substr Start_1 StartInt_4 StartInt_3) (str.replace Start_4 Start_8 Start_6) (str.from_int StartInt_6)))
   (Start_1 String (y (str.at Start_7 StartInt_3)))
   (Start_4 String (x "0" "a" y (str.++ Start Start) (str.from_int StartInt_6) (ite StartBool Start_6 Start_6)))
   (Start_5 String (y (str.at Start_5 StartInt_4)))
   (StartInt_5 Int (0 1 (str.indexof Start_7 Start_2 StartInt_1)))
   (StartInt_1 Int (0 (str.len Start)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_3 StartBool_2) (str.prefixof Start_5 Start_1) (str.suffixof Start_5 Start_5) (str.contains Start Start_6) (= Start_5 Start_3) (= StartInt_2 StartInt_3) (<= StartInt_4 StartInt_3)))
   (Start_6 String ("1" (str.++ Start_1 Start_5) (str.replace Start_3 Start_4 Start_2)))
   (StartInt_2 Int (0 (str.len Start_1) (str.to_int Start_2)))
   (StartBool_2 Bool (false (str.< Start_8 Start_6) (str.prefixof Start_7 Start_7) (str.contains Start_8 Start) (= StartInt_6 StartInt_3) (<= StartInt_5 StartInt_5)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool_3) (str.< Start_4 Start_7) (str.suffixof Start_3 Start_2) (str.contains Start_2 Start_3) (<= StartInt_3 StartInt_5)))
   (Start_2 String (x "" "b" (str.++ Start_1 Start_3) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start_2 Start_5 Start_2) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_5)))
   (StartInt_6 Int (0 1 (str.len Start_4) (str.indexof Start_2 Start_6 StartInt_2)))
   (Start_7 String ("a" y (str.++ Start_2 Start_2) (str.at Start_6 StartInt_6)))
   (Start_8 String ("1" "0" (str.++ Start_1 Start_6) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 1 (str.indexof Start_2 Start_5 StartInt)))
   (StartInt_3 Int (0 (str.indexof Start_6 Start_7 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.replace x y "") y)))

(check-synth)
