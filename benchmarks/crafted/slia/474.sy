(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_14 String) (Start_4 String) (Start_13 String) (StartBool_5 Bool) (Start_12 String) (Start_11 String) (Start_15 String) (StartInt_3 Int) (StartInt_4 Int) (Start_2 String) (StartInt_2 Int) (StartInt_1 Int) (StartBool_2 Bool) (Start_8 String) (Start_6 String) (StartInt_5 Int) (Start_3 String) (Start_7 String) (Start_9 String) (StartBool_1 Bool) (Start_10 String) (Start_5 String) (StartBool_4 Bool) (StartBool_3 Bool))
  ((Start String ("" x (str.++ Start Start_1) (str.at Start StartInt) (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start Start_3)))
   (StartInt Int (0 1 (str.len Start_3) (str.to_int Start_8)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_5 StartBool) (str.< Start_1 Start_3) (str.<= Start_4 Start_11) (str.prefixof Start Start_8) (str.suffixof Start_13 Start_13) (<= StartInt_2 StartInt_3)))
   (Start_1 String ("0" (str.++ Start_11 Start_15) (str.at Start_8 StartInt_2) (str.replace Start_12 Start_5 Start_13) (str.from_int StartInt_5)))
   (Start_14 String (x (str.++ Start_12 Start_2) (str.substr Start_13 StartInt_5 StartInt_3) (ite StartBool_1 Start_9 Start_1)))
   (Start_4 String (y "" (str.++ Start_5 Start_14)))
   (Start_13 String (x (str.at Start_2 StartInt_1) (str.from_int StartInt_5) (ite StartBool_4 Start_9 Start_8)))
   (StartBool_5 Bool (true (and StartBool StartBool_2) (str.< Start_2 Start) (str.<= Start_5 Start_10) (str.prefixof Start_3 Start_6) (str.suffixof Start_13 Start_6) (= Start_1 Start) (= StartInt_5 StartInt_5) (<= StartInt_5 StartInt_2)))
   (Start_12 String ("1" y (str.++ Start_12 Start_1) (str.at Start_9 StartInt) (str.from_int StartInt_4) (ite StartBool_5 Start_12 Start_2)))
   (Start_11 String (y x "" (str.at Start_10 StartInt_4) (str.replace Start Start_9 Start_9) (str.from_int StartInt_2) (ite StartBool_3 Start_12 Start_6)))
   (Start_15 String ("1" (str.++ Start_6 Start_9) (str.substr Start StartInt_4 StartInt_5) (ite StartBool_3 Start_5 Start_4)))
   (StartInt_3 Int (0 (str.indexof Start_7 Start_8 StartInt_3) (str.to_int Start_5)))
   (StartInt_4 Int (1 (str.len Start_2)))
   (Start_2 String ("a" (str.substr Start_5 StartInt_3 StartInt_1) (str.replace Start_8 Start_3 Start_3) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.indexof Start_4 Start_8 StartInt_1) (str.to_int Start_9)))
   (StartInt_1 Int (1 (str.len Start_4) (str.indexof Start_9 Start_8 StartInt_1) (str.to_int Start_10)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (str.< Start_4 Start_6) (str.contains Start_2 Start_1)))
   (Start_8 String ("0" (str.++ Start_7 Start_1) (str.replace Start Start_10 Start_2) (ite StartBool_4 Start_6 Start_9)))
   (Start_6 String ("1" y (str.replace Start_3 Start_2 Start_1) (str.from_int StartInt) (ite StartBool_3 Start_7 Start)))
   (StartInt_5 Int (0 1 (str.len Start_1)))
   (Start_3 String (x "b" "a" (str.at Start_4 StartInt) (ite StartBool_1 Start_3 Start_5)))
   (Start_7 String ("" "1" (str.at Start_8 StartInt) (str.from_int StartInt_2) (ite StartBool_3 Start_8 Start_3)))
   (Start_9 String ("b" (str.from_int StartInt_1) (ite StartBool_4 Start_7 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_5) (str.< Start_8 Start_7) (str.<= Start_2 Start_3) (str.prefixof Start_4 Start_8) (= Start_11 Start_7) (= StartInt_3 StartInt_4) (<= StartInt_3 StartInt_2)))
   (Start_10 String ("b" "0" (str.at Start_6 StartInt) (str.substr Start_6 StartInt_1 StartInt_2) (str.replace Start_4 Start_1 Start_5) (str.from_int StartInt_1)))
   (Start_5 String ("b" x (str.++ Start_4 Start_3) (str.at Start_1 StartInt) (str.from_int StartInt_1) (ite StartBool_2 Start_1 Start_1)))
   (StartBool_4 Bool (true false (not StartBool_3) (and StartBool_1 StartBool) (str.< Start Start) (str.<= Start_6 Start_9) (str.prefixof Start_3 Start_1) (str.contains Start_5 Start_9) (= StartInt_2 StartInt_1)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_1 StartBool_3) (str.prefixof Start Start_9) (str.suffixof Start_3 Start_10) (= Start_1 Start_3) (= StartInt StartInt) (<= StartInt StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.++ "1" "0") "0")))

(check-synth)
