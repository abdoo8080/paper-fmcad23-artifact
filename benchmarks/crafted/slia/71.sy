(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (StartInt_6 Int) (StartBool_5 Bool) (StartBool_6 Bool) (StartBool_3 Bool) (Start_7 String) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_2 Int) (Start_2 String) (Start_3 String) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_5 String) (Start_9 String) (StartBool_4 Bool) (Start_4 String) (StartInt_1 Int) (Start_6 String) (Start_1 String) (Start_8 String))
  ((Start String ("b" "a" "0" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_2) (str.from_int StartInt_3)))
   (StartInt Int (1 (str.indexof Start_9 Start_4 StartInt_2) (str.to_int Start_1)))
   (StartBool Bool (false true (and StartBool_3 StartBool_4) (str.< Start_7 Start_4) (str.<= Start_10 Start_1) (str.prefixof Start_5 Start_6) (str.suffixof Start_2 Start) (= Start_10 Start_3) (<= StartInt_3 StartInt_3)))
   (Start_10 String ("0"))
   (StartInt_6 Int (1 (str.len Start_2) (str.indexof Start_2 Start_6 StartInt_2) (str.to_int Start_8)))
   (StartBool_5 Bool (true (str.< Start_3 Start_7) (str.<= Start Start_3) (str.prefixof Start_9 Start_2) (str.suffixof Start_3 Start_1) (= Start_2 Start) (= StartInt_5 StartInt) (<= StartInt_4 StartInt_5)))
   (StartBool_6 Bool (false true (and StartBool StartBool_4) (str.< Start_2 Start_9) (str.<= Start_1 Start_7) (str.contains Start_4 Start_8) (= Start_4 Start_3)))
   (StartBool_3 Bool (true (and StartBool StartBool_4) (str.prefixof Start_3 Start_2) (<= StartInt_5 StartInt)))
   (Start_7 String ("" (str.++ Start_1 Start_2) (str.substr Start_1 StartInt_6 StartInt) (str.replace Start_2 Start_3 Start_4) (str.from_int StartInt_4) (ite StartBool_3 Start_7 Start_7)))
   (StartInt_5 Int (0 1))
   (StartBool_2 Bool (false (str.suffixof Start Start_5) (= Start_1 Start_2)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_1)))
   (Start_2 String (x "" (str.at Start_2 StartInt) (str.substr Start_2 StartInt_3 StartInt) (str.from_int StartInt_1) (ite StartBool Start_1 Start)))
   (Start_3 String ("0" (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_2 Start_2 Start_4) (ite StartBool_1 Start Start)))
   (StartBool_1 Bool (true (not StartBool_2) (str.suffixof Start_1 Start_2) (= StartInt_4 StartInt_2)))
   (StartInt_3 Int (0))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.to_int Start_1)))
   (Start_5 String ("" x "a" (str.++ Start Start_1) (str.at Start_3 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_3 Start_6)))
   (Start_9 String ("b" (str.at Start_7 StartInt_2) (str.from_int StartInt_5) (ite StartBool_6 Start_7 Start_7)))
   (StartBool_4 Bool (true false (not StartBool_5) (and StartBool_1 StartBool_6) (str.prefixof Start Start) (str.suffixof Start_1 Start) (str.contains Start Start_7) (= StartInt StartInt_5)))
   (Start_4 String (y (str.++ Start_7 Start_2) (str.substr Start_2 StartInt_4 StartInt_4) (str.replace Start Start_5 Start_2) (str.from_int StartInt_5) (ite StartBool_2 Start_1 Start_8)))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.indexof Start_3 Start_8 StartInt_1)))
   (Start_6 String ("b" y "0" (str.substr Start_6 StartInt_2 StartInt_2) (str.replace Start_6 Start_3 Start_3) (ite StartBool_2 Start_2 Start_3)))
   (Start_1 String ("1" "b" "0" x "" y (str.++ Start_2 Start) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_3 Start_2 Start)))
   (Start_8 String (x "a" "" (str.++ Start_2 Start) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_5 Start_1 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" x "a")))

(check-synth)
