(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (StartInt_5 Int) (Start_7 String) (StartInt_1 Int) (Start_13 String) (Start_9 String) (Start_10 String) (StartInt_2 Int) (Start_8 String) (Start_5 String) (StartInt_3 Int) (Start_4 String) (StartBool_1 Bool) (Start_11 String) (Start_6 String) (StartInt_6 Int) (Start_15 String) (Start_3 String) (StartInt_8 Int) (StartInt_4 Int) (StartInt_9 Int) (StartInt_7 Int) (Start_16 String) (Start_14 String) (Start_17 String) (Start_12 String) (StartBool_2 Bool) (Start_2 String) (Start_1 String))
  ((Start String ("a" y "b" "0" x (str.++ Start_1 Start) (str.substr Start_2 StartInt StartInt) (str.replace Start_1 Start_3 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0 (str.len Start_2)))
   (StartBool Bool (false (str.< Start_1 Start_12) (str.prefixof Start_8 Start_17) (str.suffixof Start_4 Start_8) (str.contains Start_1 Start_5) (= Start_7 Start_9) (= StartInt_10 StartInt)))
   (StartInt_10 Int (1 0 (str.len Start_15) (str.to_int Start_2)))
   (StartInt_5 Int (0 1 (str.to_int Start_2)))
   (Start_7 String ("b" (str.++ Start_6 Start_7) (str.at Start_11 StartInt_2) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start_6 Start_9 Start) (str.from_int StartInt_5) (ite StartBool Start_6 Start_1)))
   (StartInt_1 Int (1))
   (Start_13 String ("" "b" "a" y (str.substr Start_11 StartInt_9 StartInt) (str.from_int StartInt_2) (ite StartBool_2 Start_16 Start_13)))
   (Start_9 String ("1" "" (str.++ Start_8 Start) (str.substr Start_7 StartInt_1 StartInt_3)))
   (Start_10 String ("a" "0" "" (str.at Start_8 StartInt_3) (str.from_int StartInt_2) (ite StartBool Start_2 Start_9)))
   (StartInt_2 Int (0 1 (str.to_int Start_1)))
   (Start_8 String ("0" (str.++ Start_8 Start_9) (str.at Start_2 StartInt_2) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_10 Start_1 Start)))
   (Start_5 String (x "" (str.++ Start_4 Start_6) (str.substr Start_7 StartInt StartInt_1) (str.replace Start_3 Start_8 Start_4) (str.from_int StartInt) (ite StartBool Start_3 Start_2)))
   (StartInt_3 Int (0 1 (str.indexof Start_6 Start_8 StartInt_1) (str.to_int Start_9)))
   (Start_4 String (y "a" (str.++ Start_4 Start_1) (str.substr Start_5 StartInt StartInt)))
   (StartBool_1 Bool (false (str.< Start_1 Start_2) (str.prefixof Start Start_1) (str.contains Start Start_4)))
   (Start_11 String ("a" "1" y (str.++ Start_11 Start_10) (str.replace Start_3 Start Start_6) (ite StartBool_1 Start_2 Start_11)))
   (Start_6 String ("" "1" (str.at Start_5 StartInt_6) (ite StartBool_1 Start_7 Start_8)))
   (StartInt_6 Int (1 0 (str.len Start_11)))
   (Start_15 String (y "1" (str.substr Start_10 StartInt_3 StartInt_9) (ite StartBool Start Start_7)))
   (Start_3 String ("a" "0" "" (str.substr Start_5 StartInt StartInt_1) (ite StartBool_1 Start_12 Start_2)))
   (StartInt_8 Int (0 1 (str.len Start_7) (str.indexof Start_12 Start_13 StartInt_7) (str.to_int Start)))
   (StartInt_4 Int (0 1 (str.len Start_5)))
   (StartInt_9 Int (0 1 (str.indexof Start_13 Start_14 StartInt_5)))
   (StartInt_7 Int (0 (str.to_int Start_17)))
   (Start_16 String (x (str.++ Start_9 Start_12) (str.replace Start_15 Start_9 Start_17)))
   (Start_14 String (x y "" (str.substr Start_13 StartInt_8 StartInt) (str.replace Start_10 Start_6 Start_5) (ite StartBool Start_11 Start_15)))
   (Start_17 String (y (str.at Start_14 StartInt) (str.replace Start_2 Start_13 Start_10) (str.from_int StartInt_5)))
   (Start_12 String ("1" x "b" "" (str.at Start_4 StartInt_7) (str.replace Start_4 Start_13 Start_14) (ite StartBool_1 Start_5 Start_2)))
   (StartBool_2 Bool (false (str.<= Start_10 Start_6) (str.contains Start_12 Start_5) (= Start Start_13) (<= StartInt_3 StartInt_6)))
   (Start_2 String ("a" (str.++ Start_10 Start_3) (str.at Start_9 StartInt) (str.substr Start_5 StartInt_1 StartInt_8) (str.replace Start Start Start_9) (str.from_int StartInt_2)))
   (Start_1 String ("a" "0" (str.++ Start_16 Start_13) (str.at Start StartInt) (str.replace Start_5 Start_13 Start_16) (str.from_int StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof y "0") x "b")))

(check-synth)
