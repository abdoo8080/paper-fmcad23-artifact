(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_2 Int) (StartInt_1 Int) (Start_8 String) (Start_10 String) (Start_2 String) (StartInt_3 Int) (Start_3 String) (Start_4 String) (Start_9 String) (Start_5 String) (Start_7 String) (Start_6 String) (StartBool_2 Bool) (StartBool_1 Bool))
  ((Start String ("b" "" "a" x "1" y "0" (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_1 Start Start_1) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start_2) (str.indexof Start_5 Start_10 StartInt_2) (str.to_int Start)))
   (StartBool Bool (false (str.< Start_7 Start_9) (str.suffixof Start_6 Start_7) (str.contains Start_5 Start_10) (= Start_4 Start_6) (= StartInt StartInt_3) (<= StartInt_1 StartInt)))
   (Start_1 String ("b" (str.++ Start Start_9) (str.substr Start_5 StartInt_3 StartInt_3) (str.replace Start_2 Start_6 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_10 Start_7)))
   (StartInt_2 Int (1 (str.indexof Start Start_2 StartInt_1)))
   (StartInt_1 Int (1 (str.len Start_2) (str.to_int Start_2)))
   (Start_8 String ("b" (str.++ Start_9 Start_5) (str.at Start_4 StartInt) (ite StartBool_2 Start_5 Start_6)))
   (Start_10 String (x "0" y "" (str.++ Start_1 Start_1) (str.substr Start_8 StartInt StartInt_2) (str.replace Start_6 Start_10 Start_10)))
   (Start_2 String ("" "1" "b" (str.replace Start_3 Start_2 Start_3)))
   (StartInt_3 Int (1 0 (str.indexof Start_9 Start_4 StartInt_3) (str.to_int Start_8)))
   (Start_3 String ("b" "1" "0" (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_1 Start_3 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start Start_4)))
   (Start_4 String (y "0" (str.at Start StartInt_1) (str.replace Start_3 Start_1 Start_3) (str.from_int StartInt_2) (ite StartBool_2 Start_1 Start_3)))
   (Start_9 String (x y "1" (str.++ Start_8 Start_9) (str.from_int StartInt_2)))
   (Start_5 String ("0" (str.replace Start_8 Start_8 Start_8) (ite StartBool_2 Start_1 Start_1)))
   (Start_7 String ("b" (str.++ Start_5 Start_6) (str.at Start_1 StartInt_3) (str.replace Start Start_7 Start_8)))
   (Start_6 String (y (str.++ Start_5 Start_5)))
   (StartBool_2 Bool (false true (and StartBool StartBool_2) (str.< Start_1 Start) (str.<= Start Start_5) (str.prefixof Start_1 Start_3) (str.suffixof Start_6 Start_7) (str.contains Start_6 Start_8) (= Start_2 Start_2) (<= StartInt_1 StartInt_1)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (str.< Start_6 Start_1) (str.<= Start_3 Start_2) (str.suffixof Start_9 Start_3) (str.contains Start_6 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof "b" (str.at "a" (str.indexof "" x 0)) (str.len (str.replace "b" y (str.++ "b" "0")))))))

(check-synth)
