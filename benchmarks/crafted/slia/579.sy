(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_1 String) (StartInt_1 Int) (StartBool_4 Bool) (Start_6 String) (StartBool_1 Bool) (StartInt_4 Int) (StartBool_2 Bool) (Start_3 String) (StartInt_5 Int) (StartInt_2 Int) (Start_8 String) (Start_2 String) (StartInt_3 Int) (Start_4 String) (Start_5 String) (StartBool_3 Bool) (StartInt_6 Int))
  ((Start String ("1" y (str.at Start StartInt) (str.replace Start_1 Start_1 Start_2) (ite StartBool Start Start_1)))
   (StartInt Int (0 (str.len Start_6)))
   (StartBool Bool (false true (and StartBool_3 StartBool_3) (str.suffixof Start_4 Start_8) (str.contains Start_4 Start_1) (= Start_8 Start) (<= StartInt_4 StartInt_3)))
   (Start_7 String ("0" (str.++ Start_6 Start_1) (str.substr Start StartInt_4 StartInt_3)))
   (Start_1 String ("1" "" (str.++ Start_7 Start_3) (str.at Start_5 StartInt_3) (str.substr Start_6 StartInt_6 StartInt_1) (str.replace Start_2 Start_1 Start_5)))
   (StartInt_1 Int (0 1 (str.len Start)))
   (StartBool_4 Bool (true false (str.< Start_5 Start_3) (str.<= Start_6 Start_4) (str.contains Start_1 Start_6) (= Start_3 Start) (= StartInt_2 StartInt) (<= StartInt_3 StartInt_6)))
   (Start_6 String ("0" "b" "1" y "a" "" x (str.at Start_1 StartInt_6) (str.substr Start_4 StartInt_3 StartInt_3) (ite StartBool_4 Start_2 Start_1)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start_3 Start_3) (str.<= Start_1 Start_1) (str.prefixof Start_2 Start_1) (str.suffixof Start_5 Start_3) (= Start_2 Start_4)))
   (StartInt_4 Int (0 (str.len Start_3) (str.indexof Start_3 Start_4 StartInt_3)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_3 StartBool_3) (str.< Start_4 Start_2) (str.<= Start_2 Start_1) (str.prefixof Start_2 Start) (str.suffixof Start_4 Start_4) (= StartInt StartInt_5) (<= StartInt_3 StartInt_4)))
   (Start_3 String ("b" (str.++ Start_2 Start) (str.at Start_4 StartInt_2) (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start_4 Start_2 Start_2)))
   (StartInt_5 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_1 StartInt_5) (str.to_int Start_5)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.to_int Start_1)))
   (Start_8 String (y (str.substr Start_7 StartInt_6 StartInt_4) (ite StartBool_3 Start_4 Start_1)))
   (Start_2 String ("1" "b" (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_3 Int (1))
   (Start_4 String (x "b" "0" (str.++ Start_1 Start_4) (str.at Start_4 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_2)))
   (Start_5 String ("a" (str.++ Start_2 Start_4) (str.at Start_2 StartInt) (str.substr Start_2 StartInt_4 StartInt)))
   (StartBool_3 Bool (false (not StartBool) (str.<= Start Start_1) (str.prefixof Start_5 Start_2) (str.contains Start_3 Start_6) (<= StartInt_6 StartInt_2)))
   (StartInt_6 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ (str.++ "0" (str.replace y "b" "1")) "a") x)))

(check-synth)
