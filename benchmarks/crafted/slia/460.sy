(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_3 String) (StartInt_1 Int) (Start_5 String) (StartInt_3 Int) (Start_1 String) (Start_4 String) (StartInt_2 Int) (Start_2 String) (StartInt_4 Int) (Start_6 String))
  ((Start String ("0" "1" (str.at Start StartInt) (str.substr Start StartInt StartInt_1)))
   (StartInt Int (1 (str.len Start_4) (str.indexof Start_5 Start_5 StartInt_4) (str.to_int Start_1)))
   (StartBool Bool (true (not StartBool) (str.< Start Start_6) (str.prefixof Start_5 Start_3) (str.contains Start Start) (<= StartInt_1 StartInt_2)))
   (Start_7 String ("0" "b" (str.from_int StartInt_2)))
   (Start_3 String (y))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_2 Start StartInt_1) (str.to_int Start)))
   (Start_5 String ("1" "" "0" (str.++ Start Start_2) (str.at Start_2 StartInt_2) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.len Start_2) (str.indexof Start_2 Start_5 StartInt_3)))
   (Start_1 String ("1" "a" "b" "" (str.++ Start_5 Start) (str.substr Start_1 StartInt_4 StartInt)))
   (Start_4 String ("0" "1" (str.++ Start_5 Start) (str.at Start_2 StartInt_3) (str.substr Start_5 StartInt StartInt) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_1 StartInt_1)))
   (Start_2 String ("b" (str.at Start_3 StartInt_2) (str.substr Start_4 StartInt_2 StartInt_1) (str.replace Start Start Start_4) (ite StartBool Start_5 Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.to_int Start_1)))
   (Start_6 String ("a" (str.++ Start_4 Start_4) (str.substr Start_7 StartInt StartInt_2) (ite StartBool Start_7 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "0" x) y x)))

(check-synth)
