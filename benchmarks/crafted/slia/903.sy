(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_7 Int) (Start_10 String) (Start_9 String) (StartInt_6 Int) (StartInt_5 Int) (Start_1 String) (Start_3 String) (Start_5 String) (StartBool_1 Bool) (Start_6 String) (StartBool_2 Bool) (Start_7 String) (StartInt_3 Int) (Start_4 String) (StartInt_2 Int) (StartInt_1 Int) (Start_2 String) (StartInt_4 Int))
  ((Start String (y "a" (str.replace Start_1 Start Start_1)))
   (StartInt Int (1 (str.len Start_2) (str.to_int Start_1)))
   (StartBool Bool (true false (str.prefixof Start_8 Start_6) (str.contains Start_9 Start_4) (<= StartInt_2 StartInt_5)))
   (Start_8 String ("b" (str.++ Start_2 Start_6) (str.at Start StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_8)))
   (StartInt_7 Int (0 (str.len Start_9) (str.to_int Start_5)))
   (Start_10 String ("" "b" x "1" (str.at Start_8 StartInt_2) (str.from_int StartInt_7) (ite StartBool_1 Start_6 Start_8)))
   (Start_9 String ("" (ite StartBool_2 Start_2 Start_2)))
   (StartInt_6 Int (0 1 (str.len Start_10) (str.indexof Start_8 Start StartInt_3)))
   (StartInt_5 Int (1 (str.len Start_1)))
   (Start_1 String (y (str.++ Start_2 Start_3) (str.replace Start_3 Start_2 Start_1)))
   (Start_3 String ("0" y (str.at Start_3 StartInt) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_4 Start_3 Start_5)))
   (Start_5 String ("b" (str.++ Start_4 Start_3) (str.at Start_2 StartInt) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_5 Start_6 Start_1) (ite StartBool Start_6 Start_2)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool) (str.prefixof Start_4 Start_2) (str.contains Start Start_6)))
   (Start_6 String ("" (str.++ Start_2 Start_1) (str.replace Start_3 Start Start_7) (ite StartBool_1 Start_7 Start_3)))
   (StartBool_2 Bool (false (not StartBool) (str.< Start_2 Start_9) (str.<= Start_4 Start_7) (str.prefixof Start_1 Start_2) (str.suffixof Start_7 Start_3) (str.contains Start_2 Start_5) (= Start_7 Start_10) (<= StartInt StartInt_6)))
   (Start_7 String (y (str.at Start_3 StartInt) (str.substr Start_4 StartInt_3 StartInt_3) (str.from_int StartInt_1)))
   (StartInt_3 Int (0 1 (str.len Start_4)))
   (Start_4 String ("1" "0" x "b" (str.++ Start_1 Start) (str.at Start_6 StartInt) (str.from_int StartInt)))
   (StartInt_2 Int (1 (str.len Start_7)))
   (StartInt_1 Int (1))
   (Start_2 String ("" (str.at Start_2 StartInt_4) (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start Start_2 Start_3)))
   (StartInt_4 Int (1 (str.len Start_1) (str.indexof Start_1 Start StartInt) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.at y 1) "1")))

(check-synth)
