(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_11 String) (StartInt_4 Int) (Start_10 String) (StartInt_3 Int) (Start_3 String) (Start_5 String) (Start_4 String) (StartInt_5 Int) (StartInt_1 Int) (Start_7 String) (Start_2 String) (Start_8 String) (Start_6 String) (StartInt_2 Int) (Start_9 String) (StartBool_1 Bool))
  ((Start String ("0" (str.replace Start_1 Start Start) (ite StartBool Start_2 Start_3)))
   (StartInt Int (0 1 (str.len Start_7) (str.to_int Start_4)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_1 StartBool)))
   (Start_1 String ("0" (str.substr Start_3 StartInt_3 StartInt_2)))
   (Start_11 String ("1" ""))
   (StartInt_4 Int (0 (str.len Start_11) (str.indexof Start_1 Start_1 StartInt_5) (str.to_int Start_2)))
   (Start_10 String ("a" "1" (str.substr Start_2 StartInt_4 StartInt_2) (str.replace Start Start_5 Start_3) (str.from_int StartInt_1)))
   (StartInt_3 Int (1 0 (str.len Start_6) (str.indexof Start_2 Start_3 StartInt) (str.to_int Start_7)))
   (Start_3 String (y (str.++ Start Start_3) (str.at Start_2 StartInt) (str.replace Start_4 Start_4 Start_4) (ite StartBool Start Start_4)))
   (Start_5 String ("a" y x (str.++ Start Start_3) (str.substr Start StartInt_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_9)))
   (Start_4 String (x "a" (str.substr Start_3 StartInt_1 StartInt_2)))
   (StartInt_5 Int (0 1 (str.len Start_1)))
   (StartInt_1 Int (0 1 (str.len Start) (str.to_int Start_1)))
   (Start_7 String ("1" (str.++ Start_6 Start_1) (str.at Start_2 StartInt_2) (str.replace Start_8 Start Start_1) (str.from_int StartInt_1)))
   (Start_2 String ("0" "1" (str.substr Start StartInt_2 StartInt_2) (str.replace Start_4 Start_5 Start_5) (str.from_int StartInt) (ite StartBool Start_6 Start_7)))
   (Start_8 String ("1" (str.++ Start_7 Start_4) (str.substr Start_4 StartInt StartInt_3) (str.replace Start_4 Start_3 Start_7)))
   (Start_6 String ("" "a" "1" (str.at Start_6 StartInt_1) (str.substr Start StartInt_1 StartInt_2)))
   (StartInt_2 Int (1 0))
   (Start_9 String ("0" (str.at Start_9 StartInt) (str.replace Start Start_8 Start_4) (str.from_int StartInt_3)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool StartBool) (str.<= Start_10 Start_2) (str.suffixof Start_5 Start_1) (= StartInt_3 StartInt_2) (<= StartInt_3 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.at x 1) "a" "1")))

(check-synth)
