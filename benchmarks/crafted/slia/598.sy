(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (Start_3 String) (Start_1 String) (Start_4 String) (StartInt_2 Int) (Start_8 String) (Start_6 String) (Start_10 String) (Start_7 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_9 String) (Start_5 String) (StartInt_1 Int))
  ((Start String ("a" "1" "" y "b" x (str.replace Start Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (StartInt Int (0 (str.indexof Start_1 Start_6 StartInt_3)))
   (StartBool Bool (false (str.prefixof Start_2 Start_1) (<= StartInt StartInt)))
   (Start_2 String (y (str.++ Start_9 Start_9) (str.substr Start_9 StartInt_3 StartInt_2) (str.from_int StartInt_2)))
   (Start_3 String ("a" x y (str.at Start_3 StartInt) (ite StartBool Start_4 Start_4)))
   (Start_1 String ("1" (str.++ Start_6 Start) (str.replace Start_2 Start_10 Start) (str.from_int StartInt_3) (ite StartBool_1 Start_9 Start_4)))
   (Start_4 String ("1" (str.at Start_3 StartInt_1) (str.substr Start_5 StartInt_2 StartInt)))
   (StartInt_2 Int (0 (str.indexof Start_4 Start_6 StartInt_1)))
   (Start_8 String ("1" (str.++ Start_3 Start_3) (str.replace Start_4 Start_1 Start_2) (str.from_int StartInt_3)))
   (Start_6 String ("b" (str.++ Start_7 Start_2) (str.at Start_7 StartInt_1) (str.replace Start_4 Start_1 Start_2)))
   (Start_10 String ("0" y (str.at Start_1 StartInt_3) (ite StartBool Start_3 Start_8)))
   (Start_7 String (y "a" (str.++ Start_8 Start_8) (str.substr Start StartInt_2 StartInt_1) (str.from_int StartInt_1)))
   (StartBool_1 Bool (true false (str.<= Start_8 Start_5) (str.prefixof Start_4 Start_7) (= Start_8 Start_1) (= StartInt_1 StartInt_3)))
   (StartInt_3 Int (0))
   (Start_9 String (x (str.++ Start_4 Start_5) (str.replace Start_7 Start_2 Start) (ite StartBool_1 Start_6 Start_4)))
   (Start_5 String (y (str.++ Start_7 Start)))
   (StartInt_1 Int (1 (str.len Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace (str.at x 0) x y) 1)))

(check-synth)
