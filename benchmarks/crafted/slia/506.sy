(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_14 String) (Start_15 String) (Start_13 String) (Start_11 String) (Start_10 String) (Start_9 String) (StartInt_2 Int) (Start_1 String) (Start_2 String) (Start_3 String) (StartBool_1 Bool) (Start_8 String) (StartInt_1 Int) (StartInt_3 Int) (Start_5 String) (Start_6 String) (Start_7 String) (StartInt_4 Int) (Start_4 String) (Start_12 String) (StartBool_2 Bool))
  ((Start String ("0" "b" (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_7) (str.indexof Start_7 Start_9 StartInt_3)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_1 StartBool_1) (str.<= Start_12 Start) (str.prefixof Start_4 Start_12) (str.suffixof Start_11 Start_11)))
   (StartInt_5 Int (1 (str.len Start_11)))
   (Start_14 String ("1" (str.at Start_7 StartInt_3) (str.replace Start_9 Start_11 Start_11) (str.from_int StartInt_4) (ite StartBool_1 Start Start_6)))
   (Start_15 String ("0" (str.at Start_9 StartInt_2) (str.substr Start_3 StartInt_3 StartInt_2) (str.replace Start_11 Start_15 Start_1) (str.from_int StartInt_1)))
   (Start_13 String ("" y "a" (str.++ Start_14 Start_15)))
   (Start_11 String (x y (str.++ Start_7 Start_5) (str.from_int StartInt_1)))
   (Start_10 String ("0" "1" "b" (str.++ Start_6 Start_6) (str.from_int StartInt) (ite StartBool_2 Start_11 Start_9)))
   (Start_9 String ("0" x y (str.++ Start_3 Start_7) (str.substr Start_5 StartInt_4 StartInt_3) (str.from_int StartInt_3)))
   (StartInt_2 Int (0 1 (str.indexof Start Start_1 StartInt_2) (str.to_int Start_1)))
   (Start_1 String ("a" (str.at Start_2 StartInt) (str.from_int StartInt_2)))
   (Start_2 String ("1" (str.substr Start StartInt_1 StartInt) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_3)))
   (Start_3 String ("a" (str.++ Start_3 Start_2) (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true false (str.<= Start_3 Start_3) (str.prefixof Start_4 Start_1) (str.suffixof Start_5 Start_1) (str.contains Start_5 Start_5) (= StartInt_3 StartInt_1) (<= StartInt_1 StartInt_1)))
   (Start_8 String (x "a" y (str.++ Start_5 Start_7) (str.replace Start_10 Start_4 Start_8) (ite StartBool_2 Start_1 Start_8)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start StartInt_1)))
   (StartInt_3 Int (1 0 (str.indexof Start Start_5 StartInt_1) (str.to_int Start)))
   (Start_5 String ("0" x (str.at Start_4 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_6)))
   (Start_6 String ("0" (str.at Start StartInt_3) (str.replace Start_7 Start_2 Start_5) (ite StartBool_1 Start_7 Start_5)))
   (Start_7 String ("" "a" (str.replace Start_4 Start_7 Start_4) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_3)))
   (StartInt_4 Int (0))
   (Start_4 String (x y (str.++ Start_5 Start_8) (str.at Start_1 StartInt_1) (str.substr Start_9 StartInt_3 StartInt_2) (str.replace Start_5 Start_7 Start) (ite StartBool_2 Start_8 Start_6)))
   (Start_12 String ("1" (str.++ Start_8 Start_5) (str.substr Start_6 StartInt_5 StartInt_1) (str.replace Start Start_13 Start_1)))
   (StartBool_2 Bool (false true (str.contains Start_1 Start) (= StartInt StartInt_3) (<= StartInt_1 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y x) "" "1")))

(check-synth)
