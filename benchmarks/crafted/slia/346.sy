(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (Start_3 String) (Start_2 String) (Start_12 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_8 String) (Start_11 String) (StartInt_4 Int) (Start_6 String) (Start_10 String) (StartInt_9 Int) (StartInt_2 Int) (StartInt_3 Int) (Start_4 String) (StartInt_10 Int) (Start_7 String) (StartInt_1 Int) (StartInt_6 Int) (Start_5 String) (Start_1 String) (StartInt_8 Int) (Start_9 String) (StartBool_2 Bool) (StartBool_3 Bool) (StartInt_7 Int) (StartBool_4 Bool))
  ((Start String ("a" "1" y (str.at Start StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start Start Start)))
   (StartInt Int (0 1 (str.len Start_2) (str.indexof Start_1 Start StartInt) (str.to_int Start_5)))
   (StartBool Bool (false true (and StartBool_3 StartBool_3) (str.< Start_2 Start_4) (str.prefixof Start Start_2) (str.suffixof Start_6 Start_8) (= Start Start_1) (= StartInt_5 StartInt_2) (<= StartInt_6 StartInt_4)))
   (StartInt_11 Int (1 0 (str.to_int Start_3)))
   (Start_3 String ("" "0" (str.++ Start_5 Start_4) (str.replace Start_8 Start_2 Start_5) (str.from_int StartInt) (ite StartBool_1 Start_9 Start_10)))
   (Start_2 String (y "1" "0" (str.replace Start_1 Start_1 Start_2)))
   (Start_12 String (x (str.at Start_4 StartInt_5) (str.replace Start_5 Start_8 Start_1) (ite StartBool_4 Start_10 Start_8)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.indexof Start_4 Start_6 StartInt) (str.to_int Start_4)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool) (str.<= Start_3 Start_2) (str.suffixof Start_4 Start_7) (= StartInt_6 StartInt_3)))
   (Start_8 String ("a" "" "1" "b" y x (str.++ Start_1 Start_6) (str.at Start_8 StartInt) (str.from_int StartInt_5) (ite StartBool Start_5 Start)))
   (Start_11 String (x "b" (str.at Start_10 StartInt_9) (str.substr Start_11 StartInt_4 StartInt_7) (str.replace Start_4 Start_12 Start_6)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_7 Start_8 StartInt_5) (str.to_int Start_3)))
   (Start_6 String (y "b" "" x "1" "0" (str.++ Start_1 Start_6) (str.from_int StartInt_4)))
   (Start_10 String ("b" (str.substr Start_8 StartInt_6 StartInt) (str.replace Start_3 Start_6 Start_9)))
   (StartInt_9 Int (1 (str.len Start)))
   (StartInt_2 Int (1 (str.len Start_5) (str.to_int Start_5)))
   (StartInt_3 Int (0 1 (str.len Start_7) (str.indexof Start_6 Start_5 StartInt_5) (str.to_int Start_4)))
   (Start_4 String ("b" (str.substr Start_3 StartInt StartInt) (ite StartBool Start_3 Start_5)))
   (StartInt_10 Int (1 0 (str.indexof Start_8 Start_3 StartInt_2) (str.to_int Start_6)))
   (Start_7 String ("" "1" (str.++ Start_7 Start_4) (str.from_int StartInt)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_2)))
   (StartInt_6 Int (1 (str.len Start_3) (str.indexof Start_4 Start_3 StartInt_5) (str.to_int Start_8)))
   (Start_5 String (y "0" (str.++ Start_5 Start_5) (str.substr Start_3 StartInt_3 StartInt_3) (ite StartBool Start_1 Start_6)))
   (Start_1 String (y (str.at Start StartInt_2) (ite StartBool Start_3 Start_4)))
   (StartInt_8 Int (0 1 (str.indexof Start_11 Start_8 StartInt_2)))
   (Start_9 String ("" "0" (str.++ Start_9 Start_9) (str.replace Start_7 Start_2 Start_6) (ite StartBool_2 Start_7 Start_5)))
   (StartBool_2 Bool (false true (str.< Start_1 Start_8) (str.<= Start_1 Start_2) (str.prefixof Start Start) (str.contains Start Start_6) (= Start_3 Start_7) (<= StartInt_4 StartInt)))
   (StartBool_3 Bool (false true (str.<= Start_9 Start_4) (str.prefixof Start_3 Start_10) (str.contains Start_9 Start_10) (= Start Start) (= StartInt_7 StartInt_8) (<= StartInt StartInt_5)))
   (StartInt_7 Int (0 1 (str.len Start_9) (str.indexof Start_12 Start_6 StartInt_11)))
   (StartBool_4 Bool (false (str.< Start_7 Start_10) (str.<= Start_11 Start_2) (str.prefixof Start_4 Start_4) (= StartInt_10 StartInt_4) (<= StartInt StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y "b")))

(check-synth)
