(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_1 String) (StartInt_5 Int) (Start_5 String) (Start_3 String) (Start_2 String) (Start_4 String) (Start_8 String) (Start_7 String) (Start_10 String) (StartInt_6 Int) (StartInt_3 Int) (StartInt_4 Int) (StartBool_1 Bool) (Start_9 String) (StartInt_1 Int) (Start_6 String) (StartInt_2 Int))
  ((Start String ("0" (str.++ Start Start) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt_1) (ite StartBool Start_2 Start_3)))
   (StartInt Int (0 (str.len Start_7) (str.indexof Start_8 Start StartInt_2) (str.to_int Start_7)))
   (StartBool Bool (true false (not StartBool_1) (str.< Start_4 Start_2) (str.<= Start_9 Start_4) (= Start_6 Start_10) (<= StartInt StartInt_4)))
   (Start_11 String (x "a" (str.at Start_3 StartInt_4) (str.replace Start Start_2 Start_4)))
   (Start_1 String ("" (str.at Start_1 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_6) (ite StartBool_1 Start_5 Start_11)))
   (StartInt_5 Int (0 1 (str.indexof Start_6 Start_8 StartInt_2)))
   (Start_5 String (y (str.++ Start_3 Start_9) (str.at Start_8 StartInt_3) (str.substr Start_9 StartInt_5 StartInt) (str.replace Start Start_4 Start_1)))
   (Start_3 String (""))
   (Start_2 String ("a" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_3 Start_4 Start_3)))
   (Start_4 String (y (str.++ Start Start) (str.at Start_1 StartInt_1) (str.replace Start_4 Start_5 Start_6) (ite StartBool Start_1 Start_2)))
   (Start_8 String (x "0" "a" "b" (str.at Start_9 StartInt_4) (ite StartBool_1 Start_2 Start_6)))
   (Start_7 String ("b" (str.++ Start_4 Start_6) (str.at Start StartInt) (str.substr Start_5 StartInt StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_2 Start_7)))
   (Start_10 String ("a" y (str.++ Start_2 Start_1) (str.at Start_8 StartInt_2) (str.substr Start_6 StartInt StartInt_4) (str.replace Start_10 Start_3 Start_1)))
   (StartInt_6 Int (1 0))
   (StartInt_3 Int (0 (str.len Start_3) (str.to_int Start_8)))
   (StartInt_4 Int (1))
   (StartBool_1 Bool (false true (str.< Start_1 Start_10) (str.<= Start_4 Start_1) (str.prefixof Start_3 Start_8) (str.suffixof Start_3 Start_5) (= StartInt StartInt_1)))
   (Start_9 String ("0" x (str.++ Start_1 Start_10) (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.len Start_2) (str.to_int Start)))
   (Start_6 String ("a" "0" (str.++ Start_1 Start_5) (str.replace Start_1 Start_6 Start_4) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_7)))
   (StartInt_2 Int (1 0 (str.indexof Start_7 Start_6 StartInt_3) (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.++ y x) "b")))

(check-synth)
