(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_1 String) (Start_9 String) (Start_11 String) (StartBool_1 Bool) (Start_3 String) (Start_4 String) (StartInt_4 Int) (StartInt_3 Int) (StartInt_2 Int) (StartInt_1 Int) (Start_8 String) (StartInt_6 Int) (Start_5 String) (Start_2 String) (Start_6 String) (Start_7 String) (StartInt_5 Int))
  ((Start String ("b" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start Start_1 Start_3) (ite StartBool Start_2 Start)))
   (StartInt Int (1 0 (str.len Start_7)))
   (StartBool Bool (false (not StartBool) (str.< Start_2 Start) (str.prefixof Start_1 Start) (str.suffixof Start Start_3) (= Start_10 Start_10)))
   (Start_10 String ("0" x (str.++ Start_1 Start_1) (str.replace Start_9 Start_5 Start_11)))
   (Start_1 String (x "b" y (str.at Start_9 StartInt_5) (str.replace Start_8 Start_2 Start_3) (str.from_int StartInt_4)))
   (Start_9 String ("1" "" "b" (ite StartBool_1 Start_4 Start_3)))
   (Start_11 String ("0" "" "a" (str.++ Start_5 Start_9) (str.substr Start_5 StartInt_4 StartInt_5) (str.replace Start_8 Start Start_6)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (str.< Start_4 Start_4) (str.suffixof Start_7 Start_7) (str.contains Start_5 Start_9) (= Start_3 Start_7) (= StartInt_3 StartInt_1)))
   (Start_3 String ("" (str.at Start_1 StartInt_2) (str.from_int StartInt_3)))
   (Start_4 String (y (str.++ Start_1 Start_4) (str.from_int StartInt_3) (ite StartBool Start_6 Start_1)))
   (StartInt_4 Int (0 1 (str.len Start)))
   (StartInt_3 Int (0 (str.indexof Start_3 Start_2 StartInt_4)))
   (StartInt_2 Int (1 0))
   (StartInt_1 Int (1 0 (str.len Start)))
   (Start_8 String ("" "b" "0" y (str.at Start_9 StartInt_6) (str.replace Start_2 Start_4 Start_8) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start_6)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.to_int Start_9)))
   (Start_5 String ("" "b" (str.++ Start_5 Start) (str.at Start_4 StartInt) (str.from_int StartInt_1)))
   (Start_2 String ("1" (str.++ Start_2 Start_2) (str.substr Start_2 StartInt StartInt) (str.replace Start_2 Start_3 Start_4) (str.from_int StartInt) (ite StartBool Start_5 Start_4)))
   (Start_6 String ("0" (str.substr Start_7 StartInt_4 StartInt_1)))
   (Start_7 String ("1" (str.++ Start_4 Start_6) (str.at Start_6 StartInt_5) (str.replace Start_6 Start_5 Start_7)))
   (StartInt_5 Int (0 1 (str.indexof Start_2 Start_8 StartInt_5) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "a" y)))

(check-synth)
