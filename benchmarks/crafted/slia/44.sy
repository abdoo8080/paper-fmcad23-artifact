(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_22 String) (Start_20 String) (Start_19 String) (Start_2 String) (StartBool_2 Bool) (Start_6 String) (StartInt_1 Int) (StartInt_4 Int) (Start_13 String) (Start_8 String) (Start_9 String) (Start_1 String) (StartInt_3 Int) (Start_14 String) (Start_3 String) (Start_4 String) (StartInt_9 Int) (StartInt_8 Int) (StartInt_5 Int) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_2 Int) (Start_12 String) (Start_11 String) (StartBool_3 Bool) (Start_16 String) (Start_15 String) (Start_7 String) (Start_21 String) (Start_5 String) (Start_10 String) (Start_18 String) (Start_17 String))
  ((Start String (y "0" (str.++ Start_1 Start_1) (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt_2) (ite StartBool Start_4 Start_3)))
   (StartInt Int (0 (str.to_int Start_17)))
   (StartBool Bool (false true (and StartBool_1 StartBool_4) (str.< Start_9 Start_22) (str.<= Start_19 Start_9) (str.prefixof Start_10 Start_12) (= Start_16 Start_17) (= StartInt_1 StartInt_1) (<= StartInt_2 StartInt_4)))
   (StartBool_4 Bool (false (str.<= Start Start_16) (str.contains Start_18 Start_1)))
   (Start_22 String ("b" "a" (str.++ Start_4 Start_14) (str.at Start_20 StartInt_2) (str.replace Start_18 Start_12 Start_3) (str.from_int StartInt_9)))
   (Start_20 String ("a" (str.at Start_13 StartInt_3) (str.replace Start_17 Start_19 Start_14)))
   (Start_19 String ("1" (str.++ Start_19 Start_1) (str.substr Start_7 StartInt_6 StartInt_1) (str.replace Start_19 Start_3 Start_8) (ite StartBool_3 Start_9 Start_20)))
   (Start_2 String (x "b" "0" "" (str.++ Start_12 Start_17) (str.at Start_18 StartInt_9) (str.replace Start_19 Start_11 Start_19) (str.from_int StartInt_9)))
   (StartBool_2 Bool (false (not StartBool) (str.<= Start Start_9) (str.suffixof Start_12 Start_5) (str.contains Start_8 Start_13) (= Start Start_7) (<= StartInt_6 StartInt_2)))
   (Start_6 String (y (str.++ Start_1 Start_7) (str.at Start StartInt_3) (str.replace Start Start_8 Start_3) (ite StartBool_1 Start_9 Start_4)))
   (StartInt_1 Int (1 0 (str.to_int Start_3)))
   (StartInt_4 Int (1 (str.indexof Start_1 Start_2 StartInt_5)))
   (Start_13 String (x (str.substr Start_8 StartInt StartInt_4) (str.from_int StartInt_7)))
   (Start_8 String ("" (str.++ Start_4 Start_11) (str.from_int StartInt_2) (ite StartBool_3 Start_12 Start_13)))
   (Start_9 String ("0" "1" (str.++ Start_7 Start_2) (str.at Start_10 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start Start_5)))
   (Start_1 String (x (str.++ Start_6 Start_7) (str.replace Start_2 Start_14 Start_21) (str.from_int StartInt_6) (ite StartBool_3 Start_18 Start)))
   (StartInt_3 Int (0 1 (str.to_int Start_6)))
   (Start_14 String ("b" "1" x "0" y (str.++ Start_12 Start_1) (str.replace Start_1 Start_3 Start_4) (str.from_int StartInt_1)))
   (Start_3 String ("" (str.at Start_5 StartInt) (str.substr Start_3 StartInt_1 StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_5)))
   (Start_4 String (y "" "1" (str.++ Start_4 Start_2) (str.from_int StartInt_1)))
   (StartInt_9 Int (0 (str.indexof Start_12 Start_13 StartInt_5)))
   (StartInt_8 Int (1 (str.len Start_11) (str.to_int Start)))
   (StartInt_5 Int (0 1 (str.len Start)))
   (StartInt_6 Int (1 0 (str.len Start_8) (str.indexof Start_11 Start_9 StartInt_1) (str.to_int Start_11)))
   (StartBool_1 Bool (false true (= Start_4 Start_3) (= StartInt StartInt) (<= StartInt_3 StartInt_4)))
   (StartInt_7 Int (1 (str.to_int Start_7)))
   (StartInt_2 Int (0))
   (Start_12 String ("1" x "" (str.++ Start_13 Start_5) (str.substr Start_4 StartInt_4 StartInt_7) (ite StartBool Start_3 Start_10)))
   (Start_11 String (y "" "1" "a" (str.replace Start_14 Start Start_1)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool_2 StartBool_3) (str.<= Start_5 Start_1) (str.suffixof Start_13 Start_1) (str.contains Start_3 Start_5) (= Start_3 Start_15) (<= StartInt_7 StartInt_3)))
   (Start_16 String ("0" "" (str.++ Start_17 Start_17) (str.at Start_14 StartInt) (str.substr Start_4 StartInt StartInt_9) (str.replace Start_7 Start_18 Start_16) (str.from_int StartInt_7)))
   (Start_15 String ("0" (str.++ Start_10 Start_9) (str.replace Start Start_1 Start_3) (str.from_int StartInt_8)))
   (Start_7 String (x "1" (str.++ Start_13 Start_11) (str.replace Start_11 Start_1 Start_9)))
   (Start_21 String (x (str.++ Start_20 Start) (str.replace Start_14 Start_7 Start_21) (str.from_int StartInt) (ite StartBool_2 Start_22 Start_13)))
   (Start_5 String ("a" (str.++ Start_4 Start_16) (str.at Start_1 StartInt) (str.from_int StartInt_5)))
   (Start_10 String (x (str.replace Start_8 Start_11 Start_1) (ite StartBool_2 Start_10 Start_8)))
   (Start_18 String ("0" (str.substr Start_8 StartInt_7 StartInt_4) (str.replace Start_13 Start_10 Start_3)))
   (Start_17 String (y (str.++ Start_17 Start_17) (str.replace Start_5 Start_13 Start_18)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "" x)))

(check-synth)
