(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (StartInt_10 Int) (Start_17 String) (StartInt_1 Int) (StartInt_3 Int) (Start_9 String) (Start_12 String) (Start_13 String) (Start_5 String) (Start_8 String) (Start_4 String) (Start_7 String) (StartInt_5 Int) (StartBool_3 Bool) (Start_3 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_10 String) (Start_14 String) (Start_15 String) (StartInt_6 Int) (Start_11 String) (StartInt_7 Int) (StartInt_8 Int) (Start_6 String) (Start_16 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_2 String) (StartInt_9 Int) (Start_1 String))
  ((Start String (y (str.++ Start Start_1) (str.substr Start StartInt_1 StartInt_2) (ite StartBool_1 Start Start_1)))
   (StartInt Int (0 1 (str.len Start_6) (str.to_int Start_17)))
   (StartBool Bool (false true (not StartBool_2) (str.< Start_17 Start_8) (str.prefixof Start_2 Start_17) (str.suffixof Start_11 Start_17) (str.contains Start_3 Start_14) (= StartInt_10 StartInt_2)))
   (StartInt_11 Int (0 1 (str.len Start_10) (str.to_int Start_1)))
   (StartInt_10 Int (1 0 (str.indexof Start_6 Start_12 StartInt_11)))
   (Start_17 String ("a" "b" (str.at Start_3 StartInt_10) (str.replace Start_13 Start_2 Start_10) (str.from_int StartInt_3) (ite StartBool Start_8 Start_8)))
   (StartInt_1 Int (1 0 (str.len Start_4) (str.indexof Start_9 Start_12 StartInt_9)))
   (StartInt_3 Int (1 (str.indexof Start Start_10 StartInt_4)))
   (Start_9 String ("" "a" y (str.++ Start_7 Start_4) (str.at Start_8 StartInt_3) (str.replace Start Start_3 Start_4) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_9)))
   (Start_12 String (y "a" (str.++ Start_10 Start) (str.at Start_6 StartInt_2) (str.replace Start_13 Start_6 Start_4)))
   (Start_13 String ("b" "" "0" y "a" x "1" (str.++ Start_10 Start_12) (str.at Start_7 StartInt) (str.from_int StartInt_3) (ite StartBool Start_8 Start_5)))
   (Start_5 String ("1" (str.++ Start_6 Start_7) (str.replace Start_6 Start_2 Start_8) (ite StartBool_1 Start_1 Start_9)))
   (Start_8 String ("" "0" (str.++ Start_6 Start_6) (str.at Start_4 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_6) (str.from_int StartInt_7) (ite StartBool_1 Start_4 Start_14)))
   (Start_4 String ("a" (str.substr Start_5 StartInt StartInt_2) (ite StartBool_2 Start_1 Start_3)))
   (Start_7 String ("1" (str.substr Start_13 StartInt_8 StartInt_8) (ite StartBool Start_5 Start_2)))
   (StartInt_5 Int (1 0))
   (StartBool_3 Bool (false true (not StartBool_1) (str.<= Start_4 Start_13) (<= StartInt_5 StartInt_4)))
   (Start_3 String ("" "1" "b" x y (str.++ Start_2 Start_4) (str.from_int StartInt)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.<= Start_1 Start) (str.suffixof Start_2 Start_1) (= Start Start_3)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_11 Start_12 StartInt_3)))
   (Start_10 String (x "b" "1" "" y "0" "a" (str.at Start_6 StartInt) (str.substr Start_11 StartInt_1 StartInt_1)))
   (Start_14 String (x "0" "1" (str.substr Start_3 StartInt_6 StartInt_4) (str.replace Start_2 Start_4 Start_9)))
   (Start_15 String ("a" y "b" "0" "" (str.at Start_1 StartInt_1)))
   (StartInt_6 Int (1 0 (str.indexof Start_15 Start_8 StartInt_5) (str.to_int Start_1)))
   (Start_11 String (y x "1" "" "0" "b" "a" (str.++ Start_12 Start_5) (str.at Start StartInt_4) (str.substr Start StartInt_3 StartInt_5) (str.from_int StartInt) (ite StartBool Start_12 Start_2)))
   (StartInt_7 Int (1 (str.len Start_11)))
   (StartInt_8 Int (0 1 (str.indexof Start_15 Start_6 StartInt_4)))
   (Start_6 String ("" (str.++ Start_5 Start_6) (str.substr Start_7 StartInt StartInt_1) (str.replace Start_1 Start_4 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_7 Start_10)))
   (Start_16 String ("1" "0" (str.substr Start_6 StartInt_5 StartInt_8) (str.from_int StartInt)))
   (StartInt_2 Int (0 (str.len Start_11) (str.to_int Start_12)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_2 StartBool_2) (str.contains Start_13 Start_16) (= StartInt_5 StartInt_9) (<= StartInt_6 StartInt_8)))
   (Start_2 String ("" (str.at Start_12 StartInt_5) (str.substr Start_2 StartInt StartInt) (str.replace Start_14 Start_13 Start_15) (ite StartBool_1 Start_6 Start_1)))
   (StartInt_9 Int (0 1 (str.len Start_11) (str.indexof Start Start_2 StartInt_8)))
   (Start_1 String ("b" (str.substr Start_12 StartInt StartInt_6) (str.replace Start_1 Start_7 Start_17) (ite StartBool_1 Start_8 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace x y "a") y)))

(check-synth)
