(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_4 String) (StartInt_3 Int) (Start_11 String) (StartBool_2 Bool) (Start_1 String) (Start_12 String) (StartBool_1 Bool) (Start_10 String) (Start_2 String) (StartInt_1 Int) (Start_3 String) (Start_5 String) (Start_13 String) (Start_8 String) (StartInt_2 Int) (Start_7 String) (Start_9 String) (Start_6 String))
  ((Start String (y (str.replace Start Start Start) (ite StartBool Start Start_1)))
   (StartInt Int (0 1 (str.len Start_5)))
   (StartBool Bool (false true (str.< Start_8 Start_3) (str.<= Start_4 Start_13) (str.suffixof Start_11 Start_3) (str.contains Start_7 Start_5) (= Start_8 Start_2)))
   (StartBool_4 Bool (false (not StartBool_4) (str.< Start Start_8) (str.<= Start_13 Start_12) (= Start_3 Start_4) (<= StartInt_3 StartInt)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_4) (str.< Start_3 Start_7) (str.<= Start_2 Start_4) (= StartInt_3 StartInt) (<= StartInt_3 StartInt_3)))
   (Start_4 String ("" x "1" y (str.at Start_9 StartInt_3) (str.replace Start Start_6 Start_4) (ite StartBool_3 Start_12 Start_12)))
   (StartInt_3 Int (0 1 (str.len Start)))
   (Start_11 String ("b" "0" x "a" (str.at Start_6 StartInt_2) (str.substr Start_9 StartInt_3 StartInt_2) (str.replace Start_7 Start_8 Start_11) (ite StartBool_2 Start_7 Start)))
   (StartBool_2 Bool (true false (str.<= Start_4 Start_4) (str.suffixof Start_5 Start_4) (= Start_3 Start_4)))
   (Start_1 String ("a" (str.replace Start_2 Start Start_2) (ite StartBool Start Start)))
   (Start_12 String ("" (str.++ Start_7 Start_5) (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_2 Start_12 Start_7) (ite StartBool_1 Start_12 Start_9)))
   (StartBool_1 Bool (false (not StartBool_2) (str.< Start Start_3) (= Start_4 Start_2) (= StartInt StartInt_2) (<= StartInt StartInt_2)))
   (Start_10 String ("0" (str.substr Start_1 StartInt StartInt)))
   (Start_2 String (y "b" (str.++ Start Start_3) (str.substr Start StartInt StartInt_1)))
   (StartInt_1 Int (0 1 (str.len Start_2)))
   (Start_3 String (y (str.++ Start_2 Start_3) (str.at Start_4 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_3 Start_1 Start_1) (ite StartBool_1 Start_3 Start_4)))
   (Start_5 String ("" "a" x (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_6 Start_6 Start_7) (str.from_int StartInt_2) (ite StartBool_1 Start Start_8)))
   (Start_13 String ("0" x (str.++ Start_11 Start_11) (str.at Start_10 StartInt) (str.substr Start_9 StartInt StartInt) (str.replace Start_4 Start_1 Start_12) (str.from_int StartInt)))
   (Start_8 String ("" "0" (str.++ Start_6 Start_9)))
   (StartInt_2 Int (1 (str.indexof Start_4 Start_5 StartInt_3)))
   (Start_7 String ("0" "b" "1" (str.at Start_2 StartInt) (str.replace Start_7 Start_10 Start_10) (str.from_int StartInt_1)))
   (Start_9 String ("0" "a" x))
   (Start_6 String (y x (str.++ Start_11 Start_4) (str.replace Start_8 Start_7 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" (str.at x (str.len y)) "1")))

(check-synth)
