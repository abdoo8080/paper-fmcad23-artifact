(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_12 String) (StartInt_10 Int) (StartInt_8 Int) (StartInt_9 Int) (StartInt_7 Int) (Start_9 String) (Start_11 String) (Start_8 String) (StartInt_3 Int) (Start_3 String) (StartInt_2 Int) (Start_1 String) (StartInt_4 Int) (Start_6 String) (Start_2 String) (Start_5 String) (StartInt_6 Int) (Start_4 String) (StartBool_1 Bool) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_5 Int) (Start_10 String) (Start_7 String) (StartBool_2 Bool))
  ((Start String ("0" (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start_11) (str.to_int Start)))
   (StartBool Bool (false true (not StartBool_4) (and StartBool_2 StartBool) (str.prefixof Start Start_11) (str.suffixof Start_12 Start_9) (= StartInt_8 StartInt_9)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.<= Start_7 Start_2) (str.contains Start Start_9) (= Start_1 Start_3) (= StartInt_9 StartInt_7)))
   (Start_12 String ("b"))
   (StartInt_10 Int (1))
   (StartInt_8 Int (1 (str.indexof Start_9 Start_6 StartInt_10) (str.to_int Start_5)))
   (StartInt_9 Int (1 (str.len Start_5) (str.indexof Start_3 Start_6 StartInt_1)))
   (StartInt_7 Int (0 (str.len Start_7) (str.indexof Start_11 Start_1 StartInt_4)))
   (Start_9 String ("a" "" x "1" (str.++ Start_4 Start_1) (str.at Start_7 StartInt_3) (str.from_int StartInt_6) (ite StartBool Start_10 Start)))
   (Start_11 String ("" "b" "a" y (str.at Start_2 StartInt_3) (str.substr Start_6 StartInt_2 StartInt_4) (str.from_int StartInt_7)))
   (Start_8 String (y (str.++ Start_10 Start_6) (str.substr Start_1 StartInt StartInt_4) (str.replace Start_1 Start_6 Start_9) (str.from_int StartInt_4)))
   (StartInt_3 Int (1 (str.to_int Start_5)))
   (Start_3 String ("0" (str.++ Start_5 Start_1) (str.at Start_10 StartInt_2) (str.replace Start_3 Start_7 Start) (ite StartBool_3 Start_11 Start_5)))
   (StartInt_2 Int (0 1 (str.len Start_6)))
   (Start_1 String ("" y "1" (str.at Start_2 StartInt)))
   (StartInt_4 Int (0 1 (str.len Start_1)))
   (Start_6 String (x (str.++ Start_4 Start_7) (str.at Start_2 StartInt_1) (str.from_int StartInt_4)))
   (Start_2 String ("0" (str.++ Start_1 Start_3) (str.at Start StartInt_2) (str.substr Start_1 StartInt StartInt_2) (str.replace Start Start_4 Start_5) (ite StartBool Start_4 Start_3)))
   (Start_5 String ("" (str.at Start_1 StartInt_3) (str.from_int StartInt_3) (ite StartBool_1 Start_5 Start_2)))
   (StartInt_6 Int (1 (str.len Start_1)))
   (Start_4 String ("0" "" y (str.++ Start_2 Start_7) (str.at Start_8 StartInt_4) (str.substr Start_6 StartInt_2 StartInt_6) (str.replace Start_7 Start_7 Start_6) (str.from_int StartInt_2) (ite StartBool Start_9 Start)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (str.< Start Start_4) (str.suffixof Start_1 Start_4) (str.contains Start_3 Start_5) (= StartInt_2 StartInt_3)))
   (StartBool_3 Bool (false (not StartBool) (str.prefixof Start Start) (str.suffixof Start_5 Start_1) (= Start_4 Start_6) (= StartInt_3 StartInt_2) (<= StartInt StartInt_2)))
   (StartInt_1 Int (1 (str.to_int Start_1)))
   (StartInt_5 Int (1 (str.len Start_1) (str.indexof Start_1 Start StartInt_5) (str.to_int Start_1)))
   (Start_10 String ("a" (str.++ Start_9 Start_2) (str.at Start_4 StartInt_3) (str.substr Start_5 StartInt StartInt_6) (ite StartBool_2 Start_9 Start_1)))
   (Start_7 String ("" y "1" "a" (str.at Start_6 StartInt_2) (str.substr Start_1 StartInt_5 StartInt_6) (str.replace Start_7 Start_5 Start_5) (str.from_int StartInt_6)))
   (StartBool_2 Bool (false true (str.< Start_5 Start_7) (str.prefixof Start_2 Start_7) (str.suffixof Start_1 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains "1" x) "1" "b")))

(check-synth)
