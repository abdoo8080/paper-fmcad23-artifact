(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_13 String) (Start_4 String) (Start_11 String) (Start_1 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_8 Int) (StartInt_2 Int) (Start_3 String) (StartBool_3 Bool) (Start_5 String) (StartBool_5 Bool) (Start_2 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_12 String) (Start_10 String) (StartInt_1 Int) (Start_6 String) (Start_7 String) (Start_9 String) (StartInt_3 Int) (StartInt_7 Int) (StartInt_6 Int) (Start_8 String))
  ((Start String (x "" "1" (str.at Start_1 StartInt_1) (str.replace Start_1 Start_1 Start) (str.from_int StartInt_2) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 1 (str.len Start_1)))
   (StartBool Bool (false (not StartBool_4) (and StartBool_4 StartBool_5) (str.<= Start_12 Start_8) (str.prefixof Start Start_6) (str.suffixof Start_6 Start_6) (str.contains Start_5 Start_5) (= StartInt_7 StartInt_3)))
   (StartBool_4 Bool (false true (and StartBool_3 StartBool_3) (str.< Start_2 Start_13) (str.prefixof Start_1 Start_6) (str.suffixof Start_2 Start) (= StartInt StartInt_7) (<= StartInt_1 StartInt_6)))
   (Start_13 String ("0" "1" (str.replace Start_9 Start_1 Start_12)))
   (Start_4 String (y "b" "0" (str.from_int StartInt)))
   (Start_11 String ("" "b" "1" y (str.substr Start_2 StartInt_5 StartInt_2)))
   (Start_1 String ("" (str.replace Start_5 Start_11 Start) (ite StartBool_2 Start Start_4)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_2 StartBool_3) (str.<= Start_8 Start_5) (str.prefixof Start_2 Start_4) (str.suffixof Start_9 Start_7) (<= StartInt_3 StartInt_3)))
   (StartInt_4 Int (1 0 (str.to_int Start_7)))
   (StartInt_8 Int (0 (str.len Start_4) (str.indexof Start_7 Start_9 StartInt_7)))
   (StartInt_2 Int (0 (str.len Start)))
   (Start_3 String ("1" "a" x (str.substr Start StartInt_2 StartInt) (str.replace Start_4 Start_5 Start_1)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool) (str.< Start_7 Start_4) (str.prefixof Start Start_4) (str.contains Start_10 Start_4) (= Start_2 Start_4) (= StartInt_4 StartInt_6)))
   (Start_5 String ("b" (str.at Start_6 StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool_4) (str.< Start_4 Start_8) (str.contains Start_11 Start_11) (= StartInt_4 StartInt)))
   (Start_2 String (x "b" "0" y (str.from_int StartInt_1)))
   (StartInt_5 Int (1 0 (str.len Start)))
   (StartBool_1 Bool (false (not StartBool_1) (str.<= Start_1 Start_2) (str.prefixof Start_7 Start_5) (str.suffixof Start_4 Start_6) (= Start_1 Start) (= StartInt_2 StartInt_2) (<= StartInt StartInt_3)))
   (Start_12 String (y x (str.++ Start_3 Start_8) (str.at Start_3 StartInt_5) (str.substr Start_7 StartInt_3 StartInt_8) (str.replace Start_2 Start_2 Start_9) (ite StartBool Start_2 Start_11)))
   (Start_10 String (x (str.++ Start_1 Start_6) (str.at Start_10 StartInt_2)))
   (StartInt_1 Int (1 0 (str.to_int Start_3)))
   (Start_6 String (y "0" (str.++ Start_9 Start_9) (str.at Start_6 StartInt_3) (str.replace Start_2 Start_4 Start) (str.from_int StartInt_2) (ite StartBool_2 Start_10 Start_5)))
   (Start_7 String ("b" "" (str.++ Start_5 Start_4) (str.substr Start_6 StartInt_4 StartInt_2) (str.from_int StartInt_2)))
   (Start_9 String ("b" (str.++ Start_3 Start_8) (str.at Start_9 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_6) (str.replace Start_11 Start_2 Start) (str.from_int StartInt)))
   (StartInt_3 Int (1 0 (str.indexof Start_8 Start_8 StartInt_1)))
   (StartInt_7 Int (1 0 (str.len Start) (str.indexof Start_13 Start_13 StartInt_4) (str.to_int Start_1)))
   (StartInt_6 Int (1 0 (str.indexof Start_6 Start_1 StartInt_3)))
   (Start_8 String ("0" "a" y "1" (str.++ Start Start_3) (str.at Start_6 StartInt_4) (str.replace Start_5 Start_7 Start_7) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.substr y 0 1) (str.++ y "1"))))

(check-synth)
