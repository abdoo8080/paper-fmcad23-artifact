(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_1 String) (StartInt_1 Int) (Start_4 String) (Start_13 String) (StartInt_7 Int) (Start_12 String) (Start_7 String) (StartInt_5 Int) (StartInt_3 Int) (StartInt_2 Int) (Start_2 String) (Start_5 String) (StartBool_1 Bool) (Start_3 String) (Start_10 String) (Start_6 String) (Start_9 String) (Start_8 String) (StartBool_2 Bool) (StartInt_6 Int) (StartInt_4 Int) (Start_11 String))
  ((Start String ("" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_2)))
   (StartInt Int (0 (str.to_int Start_5)))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (str.< Start_11 Start) (str.<= Start_2 Start_3) (str.suffixof Start_12 Start_6) (str.contains Start_11 Start_3) (= StartInt_8 StartInt_1)))
   (StartInt_8 Int (1 (str.len Start_9)))
   (Start_1 String (x (str.substr Start_11 StartInt_8 StartInt_4) (str.replace Start_4 Start_12 Start_6)))
   (StartInt_1 Int (0))
   (Start_4 String ("1" (str.at Start_9 StartInt_2) (str.from_int StartInt)))
   (Start_13 String ("b" (str.from_int StartInt_6)))
   (StartInt_7 Int (0 (str.indexof Start_5 Start_13 StartInt_2)))
   (Start_12 String (x (str.++ Start_11 Start_4) (str.at Start StartInt_3) (str.substr Start_6 StartInt_3 StartInt) (str.replace Start_1 Start_8 Start_2)))
   (Start_7 String ("b" "0" (str.at Start_1 StartInt_3) (str.substr Start_10 StartInt_6 StartInt) (str.replace Start_7 Start_4 Start_2) (str.from_int StartInt_5) (ite StartBool Start_4 Start_3)))
   (StartInt_5 Int (1 0))
   (StartInt_3 Int (1 (str.to_int Start_6)))
   (StartInt_2 Int (0))
   (Start_2 String (y (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_1 Start_3 Start_3) (str.from_int StartInt)))
   (Start_5 String ("b" (str.++ Start_4 Start_6) (str.at Start_7 StartInt_1) (str.from_int StartInt_5) (ite StartBool_1 Start_7 Start_4)))
   (StartBool_1 Bool (true false (str.suffixof Start_8 Start_9) (str.contains Start_5 Start_8) (= Start_9 Start_3) (= StartInt StartInt_4)))
   (Start_3 String ("b" (str.at Start_1 StartInt_3) (str.substr Start_4 StartInt_3 StartInt_4) (str.from_int StartInt_2)))
   (Start_10 String ("0" y "b" (str.++ Start_1 Start_8) (str.substr Start_9 StartInt_3 StartInt) (ite StartBool_1 Start_10 Start_10)))
   (Start_6 String (x "b" (str.++ Start Start_2) (str.at Start_7 StartInt) (str.substr Start_11 StartInt_2 StartInt_7) (str.replace Start_1 Start_12 Start_5) (ite StartBool Start_5 Start_7)))
   (Start_9 String (x (str.++ Start_9 Start_6) (str.substr Start_2 StartInt_1 StartInt_3) (str.from_int StartInt_4)))
   (Start_8 String ("0" (str.++ Start_10 Start_11) (str.at Start_4 StartInt_3) (str.substr Start_7 StartInt_3 StartInt_4) (str.replace Start Start_2 Start_6) (ite StartBool_2 Start_2 Start)))
   (StartBool_2 Bool (false (not StartBool_2) (str.< Start_8 Start) (str.<= Start_7 Start_6) (str.prefixof Start_3 Start) (str.suffixof Start_7 Start_8) (= StartInt_6 StartInt_5) (<= StartInt_4 StartInt_3)))
   (StartInt_6 Int (1 (str.len Start_7) (str.to_int Start_9)))
   (StartInt_4 Int (0 1 (str.to_int Start_5)))
   (Start_11 String ("0" (str.++ Start_3 Start_4) (str.replace Start_4 Start_7 Start_6) (ite StartBool_2 Start Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains (str.at y 1) "1") (str.replace "a" y "0") "0")))

(check-synth)
