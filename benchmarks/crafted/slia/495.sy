(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_5 String) (StartInt_7 Int) (StartBool_3 Bool) (Start_9 String) (Start_4 String) (StartBool_1 Bool) (StartInt_6 Int) (Start_1 String) (StartInt_3 Int) (StartInt_5 Int) (StartInt_4 Int) (StartBool_2 Bool) (Start_2 String) (Start_3 String) (StartInt_1 Int) (Start_6 String) (StartInt_2 Int) (Start_7 String) (Start_8 String))
  ((Start String ("0" y (str.replace Start Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 (str.len Start_8) (str.indexof Start_3 Start_4 StartInt_2) (str.to_int Start_2)))
   (StartBool Bool (true false (str.< Start_7 Start_2) (str.prefixof Start_6 Start_5) (= Start_7 Start_5)))
   (StartInt_8 Int (1 0 (str.len Start_2) (str.indexof Start_4 Start_6 StartInt)))
   (Start_5 String (x "1" "a" "0" (str.++ Start Start_2) (str.substr Start_6 StartInt StartInt_5) (ite StartBool_3 Start_7 Start_2)))
   (StartInt_7 Int (0 1 (str.len Start_1)))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool_3 StartBool) (str.<= Start_9 Start_2) (str.suffixof Start_8 Start_8) (= Start_5 Start_2) (= StartInt_5 StartInt_7) (<= StartInt_2 StartInt_2)))
   (Start_9 String ("1" "b" "" (str.substr Start_1 StartInt_3 StartInt_5) (str.from_int StartInt_6) (ite StartBool_3 Start_3 Start_2)))
   (Start_4 String (y x (str.at Start_4 StartInt_5) (str.substr Start_5 StartInt_2 StartInt_3) (str.from_int StartInt_6)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_3 Start_2) (str.<= Start_1 Start) (= Start_2 Start_1) (= StartInt_2 StartInt) (<= StartInt_1 StartInt_3)))
   (StartInt_6 Int (1 0 (str.len Start_5) (str.to_int Start_6)))
   (Start_1 String (x "" (str.at Start_8 StartInt_6) (str.replace Start_5 Start_8 Start_7) (str.from_int StartInt_5)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_2 StartInt_4)))
   (StartInt_5 Int (0 1 (str.len Start_1)))
   (StartInt_4 Int (0 1))
   (StartBool_2 Bool (true (not StartBool_2) (str.< Start_2 Start_4) (str.contains Start_1 Start) (= Start_4 Start_4) (= StartInt_5 StartInt_1)))
   (Start_2 String ("0" "1" (str.++ Start_8 Start) (str.at Start_7 StartInt_3) (str.replace Start_2 Start_1 Start_6)))
   (Start_3 String ("" x "a" (str.++ Start_2 Start_3) (str.substr Start_2 StartInt_4 StartInt_5) (str.replace Start_2 Start_2 Start_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start StartInt_8)))
   (Start_6 String ("" "a" y "b" "0" (str.at Start_3 StartInt_1) (str.replace Start_2 Start_7 Start) (str.from_int StartInt_4)))
   (StartInt_2 Int (0 1))
   (Start_7 String (y "0" (str.at Start_2 StartInt_1) (str.replace Start_4 Start_5 Start_8) (str.from_int StartInt)))
   (Start_8 String ("" "b" (str.++ Start_9 Start_3) (str.at Start_5 StartInt_4) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.indexof "b" x 0))))

(check-synth)
