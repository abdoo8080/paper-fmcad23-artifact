(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_10 String) (Start_9 String) (StartInt_8 Int) (StartInt_1 Int) (StartBool_2 Bool) (StartInt_5 Int) (StartBool_4 Bool) (Start_1 String) (Start_2 String) (Start_5 String) (StartBool_1 Bool) (StartInt_7 Int) (Start_4 String) (StartInt_4 Int) (StartInt_3 Int) (Start_7 String) (StartBool_3 Bool) (Start_6 String) (StartInt_2 Int) (Start_3 String) (StartInt_6 Int))
  ((Start String ("a" x "b" (str.at Start_1 StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start Start_1) (ite StartBool Start_2 Start)))
   (StartInt Int (1 0 (str.indexof Start_8 Start_10 StartInt_4) (str.to_int Start)))
   (StartBool Bool (false true (and StartBool_2 StartBool_1) (str.< Start Start_10) (str.<= Start_6 Start_3) (str.prefixof Start_4 Start_4) (str.contains Start_10 Start_5) (= Start_7 Start_5) (<= StartInt_8 StartInt_2)))
   (Start_8 String (x (str.++ Start_2 Start_8) (str.replace Start_9 Start_3 Start_9) (ite StartBool_3 Start_2 Start_4)))
   (Start_10 String ("" "0" (str.++ Start_10 Start_10) (str.substr Start_4 StartInt_3 StartInt_7) (str.from_int StartInt_5) (ite StartBool Start_2 Start_6)))
   (Start_9 String (y (str.++ Start_1 Start_10) (str.at Start StartInt_1) (str.substr Start StartInt StartInt_6) (str.from_int StartInt_3) (ite StartBool_2 Start_8 Start_8)))
   (StartInt_8 Int (0 1 (str.len Start_3)))
   (StartInt_1 Int (1 0 (str.to_int Start_6)))
   (StartBool_2 Bool (false (str.< Start_4 Start_1) (str.<= Start_5 Start) (str.prefixof Start_1 Start_2) (= Start_3 Start_8)))
   (StartInt_5 Int (1 (str.len Start_1)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_3) (str.suffixof Start_2 Start_6) (str.contains Start_10 Start_9) (<= StartInt_6 StartInt)))
   (Start_1 String ("1" "a" "b" (str.++ Start Start_1) (str.at Start_8 StartInt_2) (str.substr Start_2 StartInt StartInt_6) (str.replace Start_1 Start Start_6) (str.from_int StartInt_6) (ite StartBool_2 Start_8 Start_9)))
   (Start_2 String (y "b" "a" "0" (str.++ Start_2 Start_3) (str.at Start_3 StartInt) (ite StartBool_1 Start_2 Start_2)))
   (Start_5 String ("1" (str.++ Start_2 Start_5) (str.replace Start_5 Start_6 Start_5) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true false (and StartBool StartBool_1) (= StartInt StartInt_2)))
   (StartInt_7 Int (1 0))
   (Start_4 String ("0" (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_3 Start Start_2) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_4)))
   (StartInt_4 Int (0 (str.indexof Start_1 Start_5 StartInt_4)))
   (StartInt_3 Int (0 (str.len Start_6) (str.indexof Start_1 Start_7 StartInt_6)))
   (Start_7 String (x (str.++ Start_7 Start_2) (str.at Start_1 StartInt_4) (str.substr Start StartInt_6 StartInt_1) (ite StartBool_1 Start_3 Start)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_4) (str.< Start_5 Start_7) (str.prefixof Start_1 Start_9) (str.suffixof Start_8 Start_1)))
   (Start_6 String ("" y "0" (str.++ Start Start_5) (str.at Start_4 StartInt) (str.substr Start_5 StartInt_5 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_4 Start_3 StartInt_1)))
   (Start_3 String ("" "a" (str.++ Start_4 Start_6) (str.at Start_1 StartInt_6) (str.substr Start_4 StartInt_3 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start_6) (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y "b") (str.indexof (str.++ "a" "a") x 0))))

(check-synth)
