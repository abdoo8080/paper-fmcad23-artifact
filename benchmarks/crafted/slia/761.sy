(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_13 String) (Start_12 String) (Start_14 String) (StartInt_2 Int) (Start_5 String) (Start_7 String) (Start_1 String) (StartBool_1 Bool) (Start_6 String) (StartInt_4 Int) (StartInt_1 Int) (Start_2 String) (Start_11 String) (Start_10 String) (StartInt_3 Int) (Start_4 String) (Start_3 String) (StartInt_6 Int) (Start_8 String) (StartInt_5 Int) (Start_9 String))
  ((Start String ("b" "" x (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start Start)))
   (StartInt Int (1 0 (str.len Start) (str.indexof Start_12 Start_6 StartInt_6) (str.to_int Start_14)))
   (StartBool Bool (false true (and StartBool StartBool_2) (str.< Start_9 Start_6) (str.contains Start_5 Start_13) (<= StartInt_3 StartInt_2)))
   (StartBool_2 Bool (true false (and StartBool StartBool) (str.<= Start_7 Start_14) (str.prefixof Start Start_7) (<= StartInt_1 StartInt_4)))
   (Start_13 String ("0" "1" "" x "b" (str.++ Start_4 Start_1) (str.at Start_9 StartInt_2) (str.substr Start_6 StartInt_5 StartInt_4) (str.from_int StartInt_1)))
   (Start_12 String ("1" y "b" (str.++ Start_11 Start_1) (str.substr Start_12 StartInt StartInt) (str.replace Start_5 Start_4 Start_2)))
   (Start_14 String (y "a" (str.++ Start_5 Start_14) (str.replace Start_9 Start_3 Start_8) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 (str.len Start) (str.indexof Start_1 Start StartInt_2)))
   (Start_5 String (y (str.at Start_6 StartInt_3) (str.substr Start_6 StartInt_1 StartInt_4) (str.replace Start Start_5 Start_4) (ite StartBool Start_7 Start_3)))
   (Start_7 String (x y (str.at Start_6 StartInt_4) (str.replace Start_2 Start_7 Start_1) (ite StartBool Start_8 Start_1)))
   (Start_1 String ("" (str.++ Start Start_2) (str.at Start StartInt) (str.substr Start StartInt_2 StartInt) (str.replace Start_2 Start_1 Start)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_4 Start_11) (str.<= Start_7 Start_7) (str.prefixof Start_12 Start_1)))
   (Start_6 String (y (str.at Start_10 StartInt_1)))
   (StartInt_4 Int (1 (str.indexof Start_3 Start StartInt_4) (str.to_int Start_3)))
   (StartInt_1 Int (0 (str.indexof Start_13 Start_13 StartInt_1)))
   (Start_2 String ("1" (str.++ Start_1 Start_3) (str.at Start_4 StartInt_2) (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt_3)))
   (Start_11 String (y (str.at Start_1 StartInt_6) (str.replace Start_3 Start_1 Start_5) (ite StartBool_1 Start_10 Start_7)))
   (Start_10 String ("a" (str.++ Start_10 Start_2) (str.substr Start_10 StartInt_4 StartInt_3) (str.replace Start_8 Start_8 Start_9) (str.from_int StartInt_4)))
   (StartInt_3 Int (0 (str.indexof Start_2 Start StartInt_4) (str.to_int Start_4)))
   (Start_4 String ("0" y (str.++ Start_5 Start_4) (str.substr Start_3 StartInt_5 StartInt_2) (str.replace Start_4 Start_4 Start) (str.from_int StartInt) (ite StartBool Start_4 Start_2)))
   (Start_3 String (x "a" (str.++ Start_3 Start_2) (str.at Start_7 StartInt_6) (str.replace Start_4 Start_9 Start_9) (ite StartBool Start_8 Start_11)))
   (StartInt_6 Int (1 0))
   (Start_8 String (y (str.++ Start_9 Start_7) (str.at Start StartInt_5) (str.substr Start_4 StartInt_3 StartInt_6) (str.replace Start_7 Start_5 Start_2) (ite StartBool Start_1 Start_2)))
   (StartInt_5 Int (0))
   (Start_9 String ("0" "b" "" y "a" (str.substr Start_2 StartInt StartInt_5) (str.replace Start_7 Start_2 Start_3) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "0" y "") x "")))

(check-synth)
