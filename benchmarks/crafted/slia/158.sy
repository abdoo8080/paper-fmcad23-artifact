(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_14 String) (Start_4 String) (StartInt_4 Int) (StartInt_5 Int) (Start_13 String) (Start_12 String) (Start_11 String) (StartInt_8 Int) (StartInt_7 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_2 Int) (Start_1 String) (Start_3 String) (Start_2 String) (StartInt_6 Int) (Start_5 String) (StartBool_3 Bool) (Start_6 String) (Start_8 String) (StartInt_9 Int) (Start_7 String) (Start_9 String) (Start_10 String))
  ((Start String (y "b" (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start Start_1)))
   (StartInt Int (0 1 (str.len Start_12) (str.to_int Start_3)))
   (StartBool Bool (true (str.< Start_11 Start_6) (str.prefixof Start_8 Start_1) (str.suffixof Start_3 Start_6) (str.contains Start_6 Start_7) (<= StartInt_8 StartInt_7)))
   (StartInt_1 Int (1 0 (str.indexof Start_3 Start_2 StartInt_5) (str.to_int Start_1)))
   (Start_14 String (y (str.++ Start_5 Start_10) (str.at Start_4 StartInt_4) (str.substr Start_8 StartInt_3 StartInt_8) (ite StartBool_2 Start_13 Start_6)))
   (Start_4 String ("" "a" "b" (str.++ Start Start_10) (str.at Start_13 StartInt_1) (ite StartBool_1 Start_14 Start_11)))
   (StartInt_4 Int (1 0))
   (StartInt_5 Int (0 (str.len Start_4)))
   (Start_13 String (x (str.++ Start_8 Start_5) (str.at Start_11 StartInt_3) (str.substr Start StartInt_9 StartInt_3) (str.from_int StartInt_8) (ite StartBool_3 Start_5 Start_2)))
   (Start_12 String (x "a" (str.at Start_8 StartInt_3) (str.replace Start_13 Start_5 Start_7) (str.from_int StartInt_8) (ite StartBool Start_8 Start_10)))
   (Start_11 String ("1" (str.++ Start Start_11) (str.replace Start_6 Start_12 Start_4) (str.from_int StartInt_7)))
   (StartInt_8 Int (0 (str.indexof Start_4 Start_9 StartInt) (str.to_int Start_12)))
   (StartInt_7 Int (0 1 (str.indexof Start_4 Start_7 StartInt_7) (str.to_int Start_2)))
   (StartBool_2 Bool (false true (not StartBool_3) (str.< Start_5 Start_11) (str.<= Start_3 Start_8) (str.prefixof Start_9 Start_2) (= Start_8 Start_5) (= StartInt_7 StartInt_4) (<= StartInt_3 StartInt_1)))
   (StartBool_1 Bool (true (not StartBool_1) (str.< Start_1 Start) (str.prefixof Start_5 Start) (str.contains Start_2 Start_1) (= Start_1 Start_2) (= StartInt_1 StartInt_4)))
   (StartInt_3 Int (0 1 (str.to_int Start_1)))
   (StartInt_2 Int (1 0 (str.indexof Start_2 Start_3 StartInt_1) (str.to_int Start)))
   (Start_1 String ("0" "" (str.++ Start_3 Start_6) (str.substr Start_7 StartInt_4 StartInt_7) (str.from_int StartInt) (ite StartBool Start_7 Start_14)))
   (Start_3 String ("1" (str.++ Start_3 Start_2) (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start_3 Start Start_3)))
   (Start_2 String ("1" "a" (str.++ Start Start) (str.at Start_4 StartInt_4) (str.substr Start_3 StartInt_5 StartInt_1) (str.replace Start_1 Start_5 Start_2) (str.from_int StartInt_4) (ite StartBool_1 Start Start_4)))
   (StartInt_6 Int (1 0 (str.len Start_3)))
   (Start_5 String (y (str.++ Start_5 Start_6) (str.from_int StartInt_6)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool StartBool_2) (str.< Start_12 Start_3) (str.suffixof Start_1 Start_6) (str.contains Start_6 Start_11) (= Start_4 Start_1) (<= StartInt_9 StartInt_2)))
   (Start_6 String ("" (str.substr Start_7 StartInt_1 StartInt_5) (str.replace Start_6 Start_6 Start_8) (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start_5)))
   (Start_8 String ("b" (str.at Start_9 StartInt_2) (str.replace Start_7 Start_2 Start_6) (str.from_int StartInt_2) (ite StartBool_1 Start Start_8)))
   (StartInt_9 Int (1 0 (str.indexof Start_3 Start_1 StartInt_2)))
   (Start_7 String ("" (str.from_int StartInt_1) (ite StartBool_2 Start_10 Start_3)))
   (Start_9 String ("1" (str.++ Start_9 Start_9) (str.at Start_8 StartInt_1) (str.substr Start_7 StartInt_3 StartInt_5)))
   (Start_10 String ("b" "" "1" y "0" (str.substr Start_2 StartInt_6 StartInt_1) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.at x 1) "1")))

(check-synth)
