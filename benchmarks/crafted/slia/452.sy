(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartInt_3 Int) (StartInt_4 Int) (Start_7 String) (Start_3 String) (Start_2 String) (Start_4 String) (StartInt_2 Int) (Start_10 String) (StartBool_4 Bool) (Start_6 String) (Start_9 String) (Start_5 String) (Start_1 String) (StartBool_2 Bool) (StartBool_3 Bool) (StartBool_1 Bool) (Start_8 String))
  ((Start String ("1" "b" (str.at Start StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start Start_2) (ite StartBool Start_3 Start)))
   (StartInt Int (1 (str.len Start_2)))
   (StartBool Bool (true (not StartBool_4) (str.<= Start_1 Start_4) (str.prefixof Start_10 Start) (str.suffixof Start_1 Start_8) (str.contains Start_3 Start_1) (= Start_4 Start_2) (= StartInt_2 StartInt_2) (<= StartInt_4 StartInt)))
   (StartInt_1 Int (1 (str.to_int Start_3)))
   (StartInt_3 Int (1 0 (str.len Start)))
   (StartInt_4 Int (1 (str.to_int Start_8)))
   (Start_7 String ("1" (str.substr Start_8 StartInt_1 StartInt_1) (str.from_int StartInt)))
   (Start_3 String ("a" (str.++ Start_2 Start_2) (str.at Start StartInt) (str.replace Start_4 Start_2 Start_4) (ite StartBool_1 Start_3 Start_1)))
   (Start_2 String (y (str.at Start StartInt_2) (str.from_int StartInt_1)))
   (Start_4 String ("1"))
   (StartInt_2 Int (0 (str.len Start_2)))
   (Start_10 String ("0" "b" (str.++ Start_4 Start_9) (str.at Start_9 StartInt_1) (str.substr Start_7 StartInt_1 StartInt) (str.replace Start_7 Start_2 Start) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_2)))
   (StartBool_4 Bool (true false (str.< Start Start_4) (= Start_5 Start_8) (<= StartInt StartInt_4)))
   (Start_6 String ("b" "" (str.replace Start_5 Start_6 Start_2) (str.from_int StartInt_1)))
   (Start_9 String ("b" (str.from_int StartInt_3) (ite StartBool Start_7 Start)))
   (Start_5 String ("0" (str.++ Start Start_3) (str.substr Start_2 StartInt StartInt_4) (str.replace Start_6 Start_7 Start_5) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_1)))
   (Start_1 String ("a" "0" "b" "" (str.at Start_2 StartInt_2) (str.substr Start StartInt_1 StartInt_3) (str.replace Start_5 Start_5 Start_1) (str.from_int StartInt_3) (ite StartBool_1 Start_5 Start_6)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.suffixof Start_3 Start_3) (str.contains Start_3 Start_4) (= Start_4 Start) (<= StartInt_3 StartInt_1)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_4 StartBool_1) (str.< Start_7 Start_5) (str.suffixof Start_5 Start_3) (<= StartInt_1 StartInt_4)))
   (StartBool_1 Bool (true false (not StartBool) (str.<= Start_1 Start_2) (str.prefixof Start_4 Start) (str.contains Start Start) (= Start_2 Start_1) (<= StartInt_1 StartInt_1)))
   (Start_8 String ("" y (str.at Start_9 StartInt) (str.replace Start_8 Start_3 Start_9) (str.from_int StartInt) (ite StartBool_3 Start_3 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x y)))

(check-synth)
