(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_7 String) (Start_11 String) (StartInt_5 Int) (Start_8 String) (StartBool_3 Bool) (Start_5 String) (StartInt_3 Int) (Start_4 String) (StartBool_1 Bool) (Start_3 String) (Start_10 String) (StartInt_4 Int) (Start_2 String) (StartBool_2 Bool) (StartInt_2 Int) (StartInt_8 Int) (StartInt_6 Int) (StartInt_1 Int) (Start_9 String) (StartInt_7 Int) (Start_1 String) (Start_14 String) (StartBool_4 Bool) (Start_13 String) (Start_6 String) (Start_12 String))
  ((Start String ("1" (str.++ Start_1 Start_1) (str.at Start_2 StartInt_1) (str.substr Start_1 StartInt StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_2)))
   (StartInt Int (1 0 (str.indexof Start_8 Start_1 StartInt_3) (str.to_int Start_5)))
   (StartBool Bool (true false (not StartBool) (and StartBool_1 StartBool_4) (str.contains Start_7 Start_8) (= Start_1 Start_3) (= StartInt_8 StartInt_2) (<= StartInt_2 StartInt_8)))
   (StartBool_5 Bool (false (not StartBool_5) (and StartBool_4 StartBool_2) (str.prefixof Start Start_8) (str.suffixof Start_7 Start_2) (str.contains Start Start_11)))
   (Start_7 String ("b" (str.++ Start_1 Start_5)))
   (Start_11 String ("" y (str.at Start_1 StartInt) (str.substr Start_6 StartInt_7 StartInt_8) (str.replace Start_10 Start_5 Start_6)))
   (StartInt_5 Int (0 (str.indexof Start_5 Start StartInt_6) (str.to_int Start_1)))
   (Start_8 String ("1" "" (str.from_int StartInt_6) (ite StartBool_3 Start_9 Start_2)))
   (StartBool_3 Bool (true (str.< Start_4 Start_1) (str.<= Start_6 Start_1) (str.prefixof Start_2 Start_6) (str.suffixof Start_2 Start_2) (= StartInt_3 StartInt_4) (<= StartInt_2 StartInt_2)))
   (Start_5 String (y "" (str.at Start_1 StartInt_1) (str.replace Start Start Start_4)))
   (StartInt_3 Int (1 (str.len Start_2)))
   (Start_4 String (y "1" "" "0" (str.++ Start Start_4) (str.at Start_2 StartInt_3) (str.replace Start_4 Start_3 Start) (str.from_int StartInt_3)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (str.prefixof Start Start_2) (str.suffixof Start Start_2) (= StartInt_2 StartInt_1) (<= StartInt StartInt_3)))
   (Start_3 String ("0" (str.at Start_2 StartInt_2) (str.replace Start_1 Start_5 Start_5) (str.from_int StartInt_3)))
   (Start_10 String ("a" "b" "0" (str.++ Start_4 Start_10) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_11 Start_6 Start_9) (str.from_int StartInt_6)))
   (StartInt_4 Int (1 0 (str.indexof Start_1 Start StartInt_3) (str.to_int Start)))
   (Start_2 String ("0" (str.++ Start_4 Start_5) (ite StartBool_2 Start_8 Start_7)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_3) (str.<= Start Start_3) (str.suffixof Start Start_4) (= StartInt_4 StartInt_4) (<= StartInt_3 StartInt_2)))
   (StartInt_2 Int (1 (str.len Start_4)))
   (StartInt_8 Int (1))
   (StartInt_6 Int (1 0 (str.indexof Start_2 Start_3 StartInt_4)))
   (StartInt_1 Int (1 (str.len Start_7) (str.indexof Start Start_2 StartInt_5)))
   (Start_9 String ("a" y (str.at Start_10 StartInt_2) (str.substr Start_7 StartInt_6 StartInt_4)))
   (StartInt_7 Int (1 (str.len Start_2) (str.indexof Start_1 Start_3 StartInt_7)))
   (Start_1 String ("a" (str.at Start_6 StartInt_8) (str.substr Start_5 StartInt_5 StartInt_2)))
   (Start_14 String ("" (str.++ Start_6 Start_8) (str.substr Start_2 StartInt_5 StartInt_4) (str.from_int StartInt_7)))
   (StartBool_4 Bool (true false (not StartBool_4) (and StartBool StartBool_5) (str.< Start_5 Start_1) (str.<= Start_7 Start) (str.suffixof Start_10 Start_12) (str.contains Start_13 Start_14) (= StartInt_6 StartInt_8)))
   (Start_13 String (x (str.++ Start Start_6) (str.substr Start_2 StartInt_7 StartInt_3) (str.from_int StartInt)))
   (Start_6 String ("0" (str.++ Start Start_3) (str.substr Start_5 StartInt_3 StartInt_4) (str.replace Start_4 Start_7 Start_5) (str.from_int StartInt_5)))
   (Start_12 String (y (str.at Start StartInt_8) (str.replace Start Start_7 Start_13) (str.from_int StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof "" x (str.len x)))))

(check-synth)
