(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_7 String) (StartBool_2 Bool) (Start_3 String) (Start_2 String) (StartInt_2 Int) (StartInt_1 Int) (Start_1 String) (Start_5 String) (StartInt_5 Int) (Start_4 String) (Start_8 String) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_6 String))
  ((Start String (y (str.++ Start_1 Start_2) (str.at Start_3 StartInt) (str.replace Start_2 Start_1 Start_2)))
   (StartInt Int (0 1 (str.indexof Start_5 Start_6 StartInt_4) (str.to_int Start_6)))
   (StartBool Bool (true (not StartBool_2) (and StartBool StartBool_1) (str.< Start_4 Start_3) (str.prefixof Start_6 Start_2) (= Start_2 Start_5) (<= StartInt_4 StartInt_3)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.to_int Start_1)))
   (Start_7 String ("b" "1" "0" "" "a" x (str.at Start_5 StartInt_3) (str.substr Start StartInt_6 StartInt) (str.replace Start_2 Start_4 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start_8)))
   (StartBool_2 Bool (false (str.< Start Start) (str.prefixof Start_1 Start_2) (str.suffixof Start_2 Start_4) (<= StartInt_6 StartInt_5)))
   (Start_3 String (y (str.at Start_2 StartInt) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt)))
   (Start_2 String (x (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_4 Start_3)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_3 StartInt_2)))
   (StartInt_1 Int (1))
   (Start_1 String ("0" y (str.++ Start_4 Start_2) (str.substr Start_4 StartInt_3 StartInt_2) (ite StartBool Start_5 Start_3)))
   (Start_5 String (x y "1" (str.++ Start_2 Start_3) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 1 (str.len Start_3) (str.indexof Start Start StartInt_5)))
   (Start_4 String (y "a" (str.++ Start_2 Start_3) (str.at Start_4 StartInt_1) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_1 Start Start_1) (str.from_int StartInt_2)))
   (Start_8 String (x "" "b" (str.at Start_3 StartInt_3) (str.from_int StartInt)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (str.suffixof Start_3 Start_2) (str.contains Start_6 Start_6) (= Start_5 Start_1) (= StartInt_4 StartInt_2)))
   (StartInt_3 Int (0 1))
   (StartInt_4 Int (0 (str.indexof Start_6 Start_6 StartInt)))
   (Start_6 String ("1" (str.++ Start_5 Start_4) (str.at Start_3 StartInt_1) (str.from_int StartInt_5) (ite StartBool_1 Start_5 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (ite (str.contains "1" x) "" y) "a")))

(check-synth)
