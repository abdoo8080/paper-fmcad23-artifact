(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_9 String) (Start_4 String) (StartBool_1 Bool) (Start_8 String) (StartInt_5 Int) (StartInt_4 Int) (Start_1 String) (Start_2 String) (StartInt_1 Int) (Start_3 String) (StartInt_2 Int) (Start_5 String) (StartInt_3 Int) (Start_6 String) (Start_7 String))
  ((Start String (y "1" (str.at Start StartInt) (ite StartBool Start Start_1)))
   (StartInt Int (1 (str.len Start_3) (str.indexof Start_1 Start_1 StartInt_2) (str.to_int Start_1)))
   (StartBool Bool (true (str.< Start_3 Start_3) (str.<= Start_2 Start_4) (str.suffixof Start_1 Start_5) (= StartInt StartInt_1) (<= StartInt_3 StartInt_3)))
   (StartInt_6 Int (1 (str.indexof Start_7 Start_9 StartInt_4)))
   (Start_9 String ("b" x (str.++ Start_9 Start_4) (str.at Start_7 StartInt_4) (str.substr Start_7 StartInt_3 StartInt_3) (str.replace Start_8 Start_3 Start)))
   (Start_4 String ("b" (str.++ Start_2 Start_4) (str.substr Start_8 StartInt_3 StartInt)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool) (str.<= Start_5 Start_4) (str.prefixof Start_7 Start_1) (str.suffixof Start_3 Start_5) (str.contains Start_2 Start_2) (= StartInt_5 StartInt_2) (<= StartInt_1 StartInt_1)))
   (Start_8 String ("b" "" (str.at Start StartInt_4) (str.substr Start_3 StartInt_6 StartInt_1) (str.replace Start_6 Start_5 Start_9) (str.from_int StartInt_2) (ite StartBool Start_6 Start_5)))
   (StartInt_5 Int (1 (str.indexof Start_6 Start_6 StartInt_5) (str.to_int Start_1)))
   (StartInt_4 Int (1 0 (str.len Start_6) (str.indexof Start_1 Start_6 StartInt_4)))
   (Start_1 String (x "b" (str.++ Start_1 Start_1) (str.at Start StartInt) (str.substr Start_2 StartInt StartInt)))
   (Start_2 String ("" (str.++ Start_2 Start_2) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start_3 Start_3)))
   (StartInt_1 Int (0 (str.len Start_3)))
   (Start_3 String ("a" (str.replace Start_1 Start_3 Start_3) (str.from_int StartInt)))
   (StartInt_2 Int (1 0 (str.to_int Start_3)))
   (Start_5 String (y "a" "0" (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_2 Start_5 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start)))
   (StartInt_3 Int (0 (str.len Start_5) (str.to_int Start_1)))
   (Start_6 String (x "b" (str.++ Start_1 Start_3) (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start_1 Start_7 Start_4) (str.from_int StartInt_4)))
   (Start_7 String ("a" x "0" "b" "1" "" (str.at Start_2 StartInt_5) (str.replace Start_3 Start_2 Start_3) (ite StartBool Start_6 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.indexof x "a" 0))))

(check-synth)
