(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_8 Bool) (Start_8 String) (Start_9 String) (Start_6 String) (Start_5 String) (StartInt_3 Int) (Start_3 String) (StartInt_6 Int) (StartInt_2 Int) (Start_11 String) (StartInt_1 Int) (StartBool_3 Bool) (Start_4 String) (StartBool_2 Bool) (Start_1 String) (Start_10 String) (StartBool_4 Bool) (Start_12 String) (StartInt_7 Int) (Start_2 String) (StartBool_5 Bool) (StartBool_7 Bool) (StartBool_1 Bool) (StartBool_6 Bool) (StartInt_4 Int) (StartInt_5 Int) (Start_7 String) (StartInt_9 Int) (StartInt_8 Int))
  ((Start String ("b" "a" y "1" (ite StartBool_1 Start Start_1)))
   (StartInt Int (0 (str.indexof Start_1 Start_2 StartInt_8)))
   (StartBool Bool (false true (not StartBool_8) (str.<= Start_4 Start_8) (str.prefixof Start_10 Start_8) (str.suffixof Start_2 Start_12) (str.contains Start_10 Start_6) (= Start_12 Start_2) (= StartInt_2 StartInt_3) (<= StartInt_9 StartInt_2)))
   (StartBool_8 Bool (true (str.prefixof Start Start_12) (str.suffixof Start_6 Start_1) (str.contains Start_6 Start_4)))
   (Start_8 String ("b" (str.substr Start_3 StartInt_2 StartInt_4) (str.replace Start_8 Start_6 Start_4) (str.from_int StartInt_5) (ite StartBool_3 Start_1 Start_3)))
   (Start_9 String ("" "0" "a" x (str.at Start_6 StartInt_3) (str.substr Start_8 StartInt_1 StartInt_2) (str.replace Start_7 Start_6 Start_1) (ite StartBool Start_5 Start_2)))
   (Start_6 String ("" y (str.at Start_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_3)))
   (Start_5 String (y (str.replace Start_7 Start_7 Start_8) (ite StartBool Start_9 Start_7)))
   (StartInt_3 Int (1))
   (Start_3 String ("0" (str.++ Start_5 Start_3) (str.at Start_1 StartInt) (str.replace Start_4 Start_5 Start_6)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.to_int Start_10)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_1 Start_3 StartInt)))
   (Start_11 String ("b" (str.from_int StartInt_2) (ite StartBool_5 Start_1 Start_7)))
   (StartInt_1 Int (1 (str.indexof Start_2 Start_2 StartInt_2) (str.to_int Start_4)))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool_4 StartBool) (str.<= Start_6 Start_10) (str.suffixof Start_1 Start_9) (= Start_1 Start_5)))
   (Start_4 String ("b" (str.++ Start_4 Start) (str.at Start StartInt_1) (str.from_int StartInt)))
   (StartBool_2 Bool (false true (and StartBool StartBool_2) (str.<= Start_3 Start_2) (= Start_3 Start_2) (= StartInt_1 StartInt_2) (<= StartInt StartInt_2)))
   (Start_1 String ("0" (str.++ Start Start_2)))
   (Start_10 String ("" "a" y (str.++ Start_7 Start_5) (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_4 Start_1 Start_7) (str.from_int StartInt_1) (ite StartBool Start_9 Start_7)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_5 StartBool_3) (str.< Start_9 Start_2) (str.prefixof Start_3 Start) (str.suffixof Start_1 Start_3) (str.contains Start Start_7) (= StartInt_4 StartInt_6) (<= StartInt_7 StartInt_1)))
   (Start_12 String ("1" x (str.at Start_10 StartInt_6) (str.replace Start_11 Start_6 Start_6) (str.from_int StartInt)))
   (StartInt_7 Int (0 1))
   (Start_2 String (x "a" "1" (str.replace Start_3 Start Start_2) (str.from_int StartInt) (ite StartBool_2 Start Start_3)))
   (StartBool_5 Bool (true false (not StartBool_6) (str.< Start_6 Start_9) (str.prefixof Start_7 Start_4) (str.contains Start_4 Start_8) (= Start_8 Start_5) (= StartInt_7 StartInt_4)))
   (StartBool_7 Bool (true false (str.prefixof Start_11 Start_2) (str.suffixof Start_7 Start_4) (= Start_7 Start_5) (= StartInt_6 StartInt_6)))
   (StartBool_1 Bool (true (not StartBool_6) (str.<= Start_6 Start_1) (str.prefixof Start_6 Start_3) (<= StartInt_6 StartInt_7)))
   (StartBool_6 Bool (false true (not StartBool_4) (and StartBool_6 StartBool_1) (str.< Start_3 Start_3) (str.<= Start_3 Start_4) (str.contains Start_2 Start_5) (= Start_2 Start_2) (<= StartInt_3 StartInt_2)))
   (StartInt_4 Int (0 (str.indexof Start_7 Start_3 StartInt_3)))
   (StartInt_5 Int (0 1 (str.len Start_7) (str.indexof Start_4 Start_11 StartInt_4) (str.to_int Start)))
   (Start_7 String (x (str.++ Start_10 Start) (str.at Start_3 StartInt_5) (ite StartBool_7 Start_2 Start_8)))
   (StartInt_9 Int (0 (str.indexof Start_7 Start_8 StartInt_9) (str.to_int Start_10)))
   (StartInt_8 Int (1 (str.indexof Start_10 Start StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (ite (str.contains "1" x) y (str.replace x "" "1")) (str.len y))))

(check-synth)
