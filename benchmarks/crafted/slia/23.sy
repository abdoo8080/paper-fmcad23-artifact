(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_7 String) (StartInt_1 Int) (Start_11 String) (Start_1 String) (Start_4 String) (Start_3 String) (Start_12 String) (StartInt_5 Int) (Start_6 String) (Start_8 String) (StartInt_4 Int) (Start_2 String) (StartInt_10 Int) (StartInt_3 Int) (StartInt_7 Int) (StartBool_1 Bool) (StartInt_11 Int) (Start_5 String) (StartInt_6 Int) (StartInt_2 Int) (StartInt_8 Int) (Start_9 String) (StartBool_3 Bool) (Start_10 String) (StartInt_9 Int) (StartInt_12 Int))
  ((Start String (x (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.indexof Start_8 Start_5 StartInt_8)))
   (StartBool Bool (true (and StartBool_1 StartBool_2) (str.< Start_7 Start_10) (str.<= Start_11 Start_7) (str.prefixof Start_8 Start_5) (str.contains Start Start_3) (= Start_3 Start_1) (= StartInt_2 StartInt_2) (<= StartInt StartInt_2)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_3) (str.< Start_7 Start_4) (str.prefixof Start_5 Start) (str.suffixof Start_3 Start_4)))
   (Start_7 String (x (str.substr Start_7 StartInt_6 StartInt_7)))
   (StartInt_1 Int (1 0 (str.len Start_4) (str.indexof Start Start_8 StartInt_4) (str.to_int Start_1)))
   (Start_11 String (y "1" (str.++ Start_8 Start_12) (str.replace Start_11 Start_1 Start_4) (str.from_int StartInt_4) (ite StartBool_3 Start_12 Start_12)))
   (Start_1 String ("" "b" (str.at Start_5 StartInt_3) (str.substr Start_8 StartInt StartInt_2) (str.replace Start_5 Start_8 Start_4)))
   (Start_4 String (x (str.++ Start_6 Start_1) (str.from_int StartInt_5)))
   (Start_3 String ("" "1" (str.++ Start_3 Start_2) (str.at Start StartInt) (str.replace Start_4 Start_1 Start_3) (str.from_int StartInt_4) (ite StartBool Start_5 Start_6)))
   (Start_12 String (x "a" (str.++ Start_5 Start_4) (str.substr Start_8 StartInt_5 StartInt_10) (str.replace Start_2 Start_8 Start_9) (str.from_int StartInt_2)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_6 Start_4 StartInt_2) (str.to_int Start)))
   (Start_6 String (y "1" (str.from_int StartInt) (ite StartBool_1 Start_4 Start_1)))
   (Start_8 String (y (str.substr Start_7 StartInt_5 StartInt_4) (str.replace Start_4 Start Start_2) (ite StartBool_1 Start_5 Start_5)))
   (StartInt_4 Int (1 0 (str.to_int Start)))
   (Start_2 String (x "0" (str.++ Start Start_2) (str.substr Start_2 StartInt_2 StartInt_3) (str.replace Start_2 Start_3 Start) (str.from_int StartInt_3)))
   (StartInt_10 Int (1 0 (str.indexof Start_5 Start_2 StartInt_11) (str.to_int Start_10)))
   (StartInt_3 Int (1 (str.len Start_1) (str.indexof Start_7 Start_8 StartInt_4) (str.to_int Start_7)))
   (StartInt_7 Int (0 1 (str.len Start_1) (str.to_int Start_4)))
   (StartBool_1 Bool (false (not StartBool) (= StartInt_2 StartInt_3) (<= StartInt_1 StartInt_2)))
   (StartInt_11 Int (0 1 (str.to_int Start)))
   (Start_5 String (x "b" "a" (str.++ Start_5 Start) (str.at Start_1 StartInt_2) (str.substr Start_3 StartInt StartInt_1)))
   (StartInt_6 Int (0 1 (str.indexof Start Start_7 StartInt_2)))
   (StartInt_2 Int (1 0 (str.len Start_8) (str.to_int Start_2)))
   (StartInt_8 Int (1 (str.len Start) (str.indexof Start_9 Start_8 StartInt_8) (str.to_int Start_8)))
   (Start_9 String ("0" (str.++ Start Start_7) (str.from_int StartInt_6)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool_1 StartBool) (str.< Start_12 Start_6) (str.<= Start Start_7) (str.contains Start_5 Start_11) (= StartInt_8 StartInt_4) (<= StartInt_7 StartInt_9)))
   (Start_10 String (x "b" y "0" "" "a" "1" (str.at Start_9 StartInt_12) (str.from_int StartInt_8) (ite StartBool Start Start_7)))
   (StartInt_9 Int (0 (str.indexof Start_10 Start_6 StartInt_7)))
   (StartInt_12 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y "")))

(check-synth)
