(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartBool_2 Bool) (Start_8 String) (Start_11 String) (Start_4 String) (Start_2 String) (StartInt_5 Int) (StartInt_3 Int) (Start_9 String) (Start_3 String) (Start_12 String) (StartInt_1 Int) (Start_1 String) (Start_5 String) (StartBool_4 Bool) (StartInt_2 Int) (StartInt_7 Int) (Start_7 String) (StartBool_1 Bool) (StartInt_6 Int) (Start_10 String) (Start_13 String) (StartInt_4 Int) (StartBool_3 Bool) (Start_15 String) (Start_6 String) (StartInt_8 Int))
  ((Start String (x y "1" "b" "" (str.++ Start Start) (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 0 (str.len Start_5)))
   (StartBool Bool (true false (not StartBool) (and StartBool_2 StartBool_2) (str.<= Start_6 Start_13) (str.prefixof Start_6 Start_6) (str.suffixof Start_5 Start_15) (= Start_3 Start_15)))
   (Start_14 String ("a" "1" (str.++ Start_12 Start_1) (str.substr Start_6 StartInt_7 StartInt_1) (str.from_int StartInt_8) (ite StartBool Start_4 Start_4)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_2) (str.<= Start_6 Start_6) (str.prefixof Start_8 Start_4) (str.suffixof Start Start_6) (= StartInt_4 StartInt)))
   (Start_8 String ("b" (str.at Start_1 StartInt_4) (str.substr Start_8 StartInt_1 StartInt_1) (str.replace Start_4 Start_4 Start_5) (str.from_int StartInt) (ite StartBool_2 Start_3 Start_1)))
   (Start_11 String ("1" (str.++ Start_10 Start_10) (str.replace Start_6 Start_1 Start_12)))
   (Start_4 String ("" (str.++ Start_2 Start_2) (str.at Start_4 StartInt_1) (str.replace Start_2 Start_3 Start_5)))
   (Start_2 String ("" x "b" (str.++ Start_4 Start_3) (str.substr Start_11 StartInt_5 StartInt_5) (str.replace Start_4 Start_12 Start_3) (ite StartBool_2 Start_11 Start_14)))
   (StartInt_5 Int (0 (str.len Start_3)))
   (StartInt_3 Int (1))
   (Start_9 String ("1" (str.at Start_2 StartInt_1) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_3)))
   (Start_3 String (y (str.++ Start_4 Start_3) (str.replace Start_3 Start_3 Start_3) (ite StartBool_1 Start Start_4)))
   (Start_12 String ("" (str.at Start_9 StartInt_6) (str.from_int StartInt_7)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_2 Start_9 StartInt_6) (str.to_int Start_2)))
   (Start_1 String ("1" "a" y (str.++ Start_2 Start_1) (str.substr Start_3 StartInt StartInt) (str.from_int StartInt) (ite StartBool_1 Start Start)))
   (Start_5 String (x "" (str.++ Start_2 Start_6) (str.at Start_4 StartInt_2) (str.replace Start_3 Start Start_6) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_4 Bool (false (str.< Start Start_7) (str.prefixof Start_10 Start_8) (str.suffixof Start_11 Start_8) (str.contains Start_2 Start) (= StartInt_5 StartInt_2) (<= StartInt_1 StartInt_3)))
   (StartInt_2 Int (0 1 (str.len Start_7) (str.indexof Start_5 Start_8 StartInt) (str.to_int Start_9)))
   (StartInt_7 Int (0 (str.len Start_8) (str.indexof Start Start_11 StartInt_3) (str.to_int Start_12)))
   (Start_7 String ("1" x "0" (str.substr Start_1 StartInt StartInt_3) (str.replace Start Start_10 Start_10) (ite StartBool_2 Start_5 Start_11)))
   (StartBool_1 Bool (true false (str.contains Start_1 Start_6) (<= StartInt_8 StartInt_5)))
   (StartInt_6 Int (0 1))
   (Start_10 String ("" (str.++ Start_3 Start_7) (str.substr Start StartInt StartInt_2) (str.replace Start_2 Start_9 Start_13)))
   (Start_13 String ("a" (str.++ Start_11 Start_6) (ite StartBool Start_9 Start_2)))
   (StartInt_4 Int (0 (str.to_int Start_12)))
   (StartBool_3 Bool (false (and StartBool StartBool_2) (str.< Start_1 Start_5) (str.prefixof Start_5 Start_13) (str.suffixof Start_2 Start_11) (str.contains Start_6 Start_8) (= StartInt_6 StartInt_1) (<= StartInt_2 StartInt_7)))
   (Start_15 String (x (str.at Start_12 StartInt_7) (str.replace Start_9 Start Start_4)))
   (Start_6 String ("" "1" (str.replace Start_7 Start_4 Start_11) (str.from_int StartInt_8) (ite StartBool_1 Start_7 Start_8)))
   (StartInt_8 Int (1 0 (str.to_int Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ x "1") (str.at y 1))))

(check-synth)
