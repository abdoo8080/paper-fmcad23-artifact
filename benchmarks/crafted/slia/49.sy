(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (Start_11 String) (Start_8 String) (StartInt_8 Int) (StartInt_6 Int) (StartBool_3 Bool) (StartInt_7 Int) (Start_1 String) (StartInt_5 Int) (Start_7 String) (StartInt_1 Int) (Start_6 String) (Start_5 String) (StartInt_2 Int) (Start_3 String) (StartInt_4 Int) (Start_9 String) (Start_2 String) (Start_10 String) (StartBool_1 Bool) (Start_4 String) (StartBool_2 Bool))
  ((Start String ("" (str.++ Start Start_1) (str.substr Start_2 StartInt StartInt_1) (str.replace Start Start_2 Start) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.indexof Start_7 Start_1 StartInt_6) (str.to_int Start_11)))
   (StartBool Bool (true (str.prefixof Start_1 Start_8) (str.suffixof Start_8 Start_1) (= Start_3 Start_3) (= StartInt_5 StartInt_6)))
   (StartInt_3 Int (0))
   (Start_11 String ("" "b" (str.++ Start_7 Start_3) (ite StartBool_1 Start_6 Start_4)))
   (Start_8 String ("b" y "" x (str.++ Start_11 Start_11) (str.at Start_10 StartInt_4) (str.substr Start_9 StartInt_3 StartInt_1) (ite StartBool_2 Start Start_7)))
   (StartInt_8 Int (1 0 (str.len Start_8)))
   (StartInt_6 Int (1 (str.len Start_9) (str.indexof Start_10 Start_8 StartInt_1)))
   (StartBool_3 Bool (false true (not StartBool_3) (str.< Start_3 Start_3) (<= StartInt_4 StartInt_8)))
   (StartInt_7 Int (0 1))
   (Start_1 String ("0" (str.++ Start_4 Start_9) (str.substr Start_9 StartInt_6 StartInt_5) (str.from_int StartInt_2)))
   (StartInt_5 Int (0 1 (str.indexof Start_4 Start_2 StartInt_2)))
   (Start_7 String ("a" (str.substr Start StartInt_2 StartInt_3) (str.replace Start_1 Start Start_2) (str.from_int StartInt_1) (ite StartBool_2 Start_7 Start_4)))
   (StartInt_1 Int (1 (str.to_int Start_3)))
   (Start_6 String (y "" "1" "b" "0" (str.from_int StartInt_1) (ite StartBool Start_5 Start_2)))
   (Start_5 String (y x "a" "b" (str.at Start StartInt_1) (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt_2) (ite StartBool Start_4 Start_6)))
   (StartInt_2 Int (1 (str.to_int Start)))
   (Start_3 String ("0" (str.at Start_3 StartInt_1) (str.replace Start_2 Start_4 Start_1) (ite StartBool Start_5 Start_6)))
   (StartInt_4 Int (0 (str.indexof Start_3 Start_3 StartInt)))
   (Start_9 String ("" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_6 StartInt_1) (str.replace Start_5 Start_2 Start_1) (str.from_int StartInt_7)))
   (Start_2 String ("a" (str.++ Start Start_1) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_1)))
   (Start_10 String (y "" "a" (str.replace Start_8 Start_4 Start_10) (str.from_int StartInt_5) (ite StartBool_1 Start_5 Start_6)))
   (StartBool_1 Bool (false true (str.< Start_3 Start) (str.<= Start Start_1) (str.suffixof Start Start_4) (str.contains Start_3 Start_7) (= Start Start) (= StartInt_4 StartInt_1) (<= StartInt_3 StartInt_1)))
   (Start_4 String ("a" "b" (str.++ Start Start_2) (str.at Start StartInt_2) (str.substr Start_6 StartInt_2 StartInt_1)))
   (StartBool_2 Bool (false true (not StartBool_3) (str.< Start_2 Start_8) (str.<= Start_4 Start) (str.prefixof Start_9 Start_10) (= StartInt StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains x "1") "b" "")))

(check-synth)
