(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartInt_3 Int) (StartInt_5 Int) (StartInt_4 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_4 String) (Start_11 String) (StartBool_1 Bool) (Start_3 String) (Start_12 String) (Start_6 String) (Start_9 String) (Start_7 String) (Start_5 String) (StartInt_2 Int) (StartInt_1 Int) (Start_2 String) (Start_1 String) (Start_10 String) (StartBool_2 Bool) (Start_8 String))
  ((Start String ("1" (str.++ Start_1 Start_2) (str.substr Start StartInt_1 StartInt_1) (str.replace Start Start_3 Start_4) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start_10 Start_4 StartInt_2) (str.to_int Start_1)))
   (StartBool Bool (false (not StartBool_5) (and StartBool_2 StartBool_5) (str.< Start Start_2) (str.<= Start_7 Start_1) (str.suffixof Start_8 Start_4) (str.contains Start_3 Start_11) (= Start_9 Start)))
   (StartBool_5 Bool (true false (and StartBool_4 StartBool_5) (str.< Start_12 Start_8) (str.prefixof Start_1 Start_6) (str.contains Start_1 Start_9) (<= StartInt_3 StartInt)))
   (StartInt_3 Int (0 (str.len Start_1)))
   (StartInt_5 Int (1 (str.to_int Start_3)))
   (StartInt_4 Int (1 (str.len Start_11) (str.indexof Start_5 Start StartInt_5)))
   (StartBool_3 Bool (false (not StartBool_4) (str.<= Start_7 Start_2) (str.prefixof Start_7 Start_2) (str.contains Start_6 Start_8) (= Start_2 Start_6)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool_3) (str.< Start_4 Start_3) (str.prefixof Start_9 Start_10) (<= StartInt_2 StartInt_4)))
   (Start_4 String ("b" "1" (str.++ Start_1 Start) (str.substr Start StartInt_1 StartInt) (ite StartBool_1 Start Start_1)))
   (Start_11 String ("1" "a" (str.at Start_2 StartInt_3) (str.replace Start_9 Start_5 Start_2)))
   (StartBool_1 Bool (true false (not StartBool) (str.contains Start_1 Start_4)))
   (Start_3 String (x (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start_5)))
   (Start_12 String ("1" (str.++ Start_10 Start_6) (str.substr Start_10 StartInt_5 StartInt_5) (str.from_int StartInt_4) (ite StartBool_4 Start_2 Start_2)))
   (Start_6 String ("0" "1" (str.++ Start_1 Start_2) (str.substr Start_7 StartInt_2 StartInt_1) (str.from_int StartInt_1)))
   (Start_9 String ("" "1" "0" "b" "a" (str.at Start_7 StartInt_3) (str.substr Start_1 StartInt StartInt_1) (ite StartBool_3 Start_8 Start_8)))
   (Start_7 String ("0" "1" "b" (str.from_int StartInt_2)))
   (Start_5 String ("0" x y (str.at Start StartInt_2) (str.substr Start StartInt_2 StartInt_2) (ite StartBool_2 Start_4 Start_1)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_1 Start_2 StartInt_2) (str.to_int Start_7)))
   (StartInt_1 Int (0 1 (str.indexof Start_5 Start_4 StartInt) (str.to_int Start_4)))
   (Start_2 String ("b" (str.at Start_4 StartInt_2)))
   (Start_1 String ("a" "0" (str.++ Start_8 Start_1) (str.at Start_7 StartInt_2) (str.replace Start_8 Start_2 Start_4) (ite StartBool_2 Start_8 Start_4)))
   (Start_10 String ("" (str.++ Start_11 Start_6) (str.substr Start_4 StartInt_2 StartInt_5) (ite StartBool_1 Start_7 Start_6)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_3 Start) (str.contains Start_6 Start_4) (= Start_1 Start_2) (<= StartInt StartInt_2)))
   (Start_8 String (y (str.substr Start StartInt_1 StartInt) (str.replace Start_3 Start_9 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.to_int y))))

(check-synth)
