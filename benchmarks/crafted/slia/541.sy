(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_1 String) (StartInt_3 Int) (Start_12 String) (Start_10 String) (Start_14 String) (Start_11 String) (Start_7 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_13 String) (Start_9 String) (Start_2 String) (StartInt_6 Int) (StartInt_2 Int) (Start_4 String) (StartInt_8 Int) (StartBool_1 Bool) (Start_6 String) (StartInt_7 Int) (StartInt_5 Int) (StartInt_1 Int) (Start_3 String) (Start_8 String) (Start_5 String))
  ((Start String ("0" "1" x "a" y (str.substr Start_1 StartInt_1 StartInt_2)))
   (StartInt Int (1 0))
   (StartBool Bool (true (str.prefixof Start_14 Start_10) (= StartInt_1 StartInt) (<= StartInt_7 StartInt_9)))
   (StartInt_9 Int (0 (str.len Start_2) (str.indexof Start_3 Start_13 StartInt) (str.to_int Start_14)))
   (Start_1 String (y "1" "a" "0" (str.++ Start_11 Start_3) (str.at Start_6 StartInt_6) (str.substr Start_12 StartInt_1 StartInt_4) (ite StartBool Start_13 Start)))
   (StartInt_3 Int (0 (str.to_int Start_2)))
   (Start_12 String ("a" (str.++ Start_7 Start_9) (str.at Start_2 StartInt_8) (str.substr Start StartInt_1 StartInt_5)))
   (Start_10 String ("1" (str.at Start StartInt_7) (str.substr Start_7 StartInt_5 StartInt_7) (ite StartBool Start_12 Start_2)))
   (Start_14 String ("0" (str.++ Start_8 Start_4) (str.replace Start_5 Start_4 Start_9) (ite StartBool Start_12 Start_1)))
   (Start_11 String ("1" (str.++ Start_5 Start_10) (str.substr Start_1 StartInt_8 StartInt) (ite StartBool Start_11 Start_7)))
   (Start_7 String ("b" y (str.++ Start_7 Start_10) (str.replace Start_7 Start_11 Start_11) (str.from_int StartInt_3)))
   (StartInt_4 Int (1 (str.to_int Start_4)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_4 Start_4) (str.prefixof Start_7 Start_1) (str.suffixof Start_7 Start) (str.contains Start_5 Start_5) (<= StartInt StartInt_3)))
   (Start_13 String ("b" "" "a" x (str.substr Start_4 StartInt_2 StartInt_8) (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start_14)))
   (Start_9 String ("0" "1" (str.++ Start_4 Start) (str.from_int StartInt_7) (ite StartBool_2 Start_6 Start_9)))
   (Start_2 String ("1" "b" "" "0" "a" x y (str.++ Start_2 Start) (str.at Start StartInt_3) (str.substr Start StartInt_2 StartInt_4) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_6 Int (0 1 (str.indexof Start_8 Start_6 StartInt_7) (str.to_int Start_4)))
   (StartInt_2 Int (1 (str.len Start_1)))
   (Start_4 String ("" (str.++ Start_5 Start_7) (str.substr Start_6 StartInt_1 StartInt_6)))
   (StartInt_8 Int (0 (str.indexof Start_4 Start_2 StartInt_8) (str.to_int Start_11)))
   (StartBool_1 Bool (false (str.< Start Start_1) (str.prefixof Start_2 Start_1) (str.suffixof Start Start) (= Start_2 Start_2) (= StartInt_5 StartInt_2)))
   (Start_6 String ("0" (str.replace Start_2 Start Start_1) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_3)))
   (StartInt_7 Int (0 (str.len Start_1) (str.indexof Start_3 Start_3 StartInt) (str.to_int Start_6)))
   (StartInt_5 Int (0 (str.to_int Start_3)))
   (StartInt_1 Int (0 (str.indexof Start_1 Start_2 StartInt_2) (str.to_int Start)))
   (Start_3 String (x (str.++ Start_4 Start_4) (str.replace Start_1 Start_4 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_5)))
   (Start_8 String ("0" (str.++ Start_7 Start) (str.substr Start_9 StartInt_5 StartInt_4) (str.replace Start_1 Start_5 Start) (str.from_int StartInt_5)))
   (Start_5 String (x y (str.++ Start_4 Start_2) (str.replace Start_6 Start_2 Start_6) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace x "0" "a") x "b")))

(check-synth)
