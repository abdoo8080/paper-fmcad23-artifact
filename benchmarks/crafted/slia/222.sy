(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_4 String) (StartBool_2 Bool) (Start_8 String) (Start_1 String) (StartBool_1 Bool) (StartInt_1 Int) (StartBool_3 Bool) (Start_3 String) (StartInt_2 Int) (Start_6 String) (StartInt_5 Int) (Start_7 String) (Start_2 String) (Start_5 String) (StartInt_4 Int) (StartInt_3 Int))
  ((Start String ("a" (str.at Start_1 StartInt) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.indexof Start_5 Start_8 StartInt_2) (str.to_int Start_6)))
   (StartBool Bool (true false (not StartBool_2) (str.< Start_1 Start_4) (str.contains Start_8 Start_1) (= Start Start_9)))
   (Start_9 String (x (str.++ Start_7 Start_1) (str.at Start_4 StartInt_3) (str.substr Start_1 StartInt_5 StartInt_1) (str.from_int StartInt_4)))
   (Start_4 String (y))
   (StartBool_2 Bool (true false (str.<= Start_4 Start_4) (str.prefixof Start_7 Start_5) (str.suffixof Start_1 Start_2) (= Start_3 Start_5)))
   (Start_8 String ("a" (str.++ Start_7 Start_8) (str.at Start_4 StartInt) (str.substr Start_3 StartInt StartInt_1)))
   (Start_1 String (y "a" (str.at Start_1 StartInt) (str.replace Start_2 Start Start_3) (str.from_int StartInt) (ite StartBool Start_1 Start)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (str.< Start_4 Start_5) (str.prefixof Start_6 Start_6) (str.suffixof Start_6 Start_3) (str.contains Start Start_1) (= Start_6 Start_7) (= StartInt_2 StartInt)))
   (StartInt_1 Int (0))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool StartBool_3) (str.<= Start_4 Start_1) (str.prefixof Start_1 Start_6) (str.contains Start_8 Start) (= StartInt_3 StartInt_3)))
   (Start_3 String (y (str.substr Start_2 StartInt StartInt) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start_1 StartInt_2)))
   (Start_6 String ("b" "1" (str.++ Start_5 Start_6) (str.at Start_6 StartInt_3) (str.substr Start StartInt_4 StartInt_4) (str.replace Start_5 Start_3 Start_7) (ite StartBool_2 Start_6 Start_3)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_7 Start_5 StartInt_5)))
   (Start_7 String ("a" (str.at Start_5 StartInt_2) (str.replace Start_1 Start_5 Start_4)))
   (Start_2 String (y "" (str.at Start_4 StartInt) (ite StartBool_1 Start_4 Start_1)))
   (Start_5 String ("1" "b" "a" (str.substr Start_7 StartInt StartInt_1) (ite StartBool_3 Start_6 Start_6)))
   (StartInt_4 Int (1 0 (str.indexof Start_2 Start_4 StartInt_3)))
   (StartInt_3 Int (0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y "a") x y)))

(check-synth)
