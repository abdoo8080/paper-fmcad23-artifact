(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_6 String) (Start_7 String) (StartBool_1 Bool) (Start_11 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_9 String) (StartInt_1 Int) (StartInt_2 Int) (Start_1 String) (Start_10 String) (Start_2 String) (StartInt_3 Int) (Start_8 String) (Start_3 String) (Start_12 String) (StartInt_5 Int) (StartInt_4 Int) (StartBool_3 Bool) (Start_5 String) (Start_4 String) (StartInt_6 Int))
  ((Start String ("" "b" x "a" (str.substr Start_1 StartInt_1 StartInt) (ite StartBool Start_1 Start)))
   (StartInt Int (1 (str.indexof Start_2 Start_4 StartInt_3)))
   (StartBool Bool (true (not StartBool_1) (str.< Start_2 Start_5) (str.<= Start_5 Start_6) (str.prefixof Start_7 Start) (str.suffixof Start_8 Start_1) (str.contains Start_4 Start_5) (= Start_4 Start_9)))
   (StartInt_8 Int (1 (str.indexof Start_7 Start_4 StartInt_1)))
   (Start_6 String ("" (str.at Start_8 StartInt_3) (str.substr Start_10 StartInt_7 StartInt_6) (str.replace Start_6 Start_6 Start_5) (ite StartBool_2 Start Start_5)))
   (Start_7 String (y "0" (str.substr Start_4 StartInt_1 StartInt) (str.replace Start_9 Start_3 Start_4)))
   (StartBool_1 Bool (true false (str.< Start_12 Start_4) (str.<= Start_3 Start_7) (= Start_2 Start_6)))
   (Start_11 String ("" "1" (str.substr Start_9 StartInt_4 StartInt_6) (str.replace Start_1 Start_4 Start_9) (str.from_int StartInt_4)))
   (StartInt_7 Int (0 (str.indexof Start_11 Start_2 StartInt_4)))
   (StartBool_2 Bool (false (str.< Start_4 Start_5) (str.<= Start_6 Start_2) (str.suffixof Start_4 Start_10) (str.contains Start_8 Start_4) (= Start_5 Start_10) (= StartInt_4 StartInt_1) (<= StartInt_4 StartInt_6)))
   (Start_9 String (x (str.++ Start_6 Start_7) (ite StartBool_2 Start_8 Start_4)))
   (StartInt_1 Int (1 (str.indexof Start Start StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.indexof Start Start_3 StartInt_3) (str.to_int Start)))
   (Start_1 String (x "0" (str.at Start_1 StartInt_2) (str.replace Start_1 Start_2 Start_1)))
   (Start_10 String ("0" "1" (str.at Start StartInt_1) (str.substr Start_6 StartInt_4 StartInt_2) (str.from_int StartInt_1)))
   (Start_2 String (y "b" (str.++ Start_1 Start_2) (str.at Start_2 StartInt_2) (str.substr Start StartInt_3 StartInt_2)))
   (StartInt_3 Int (0 1 (str.len Start_1)))
   (Start_8 String ("a" y "b" (str.++ Start_9 Start_5) (str.substr Start_6 StartInt_7 StartInt_7) (str.from_int StartInt_2)))
   (Start_3 String ("a" x "" (str.++ Start_4 Start_1) (str.at Start_4 StartInt_4) (str.from_int StartInt_5)))
   (Start_12 String ("" (str.substr Start_2 StartInt StartInt) (str.replace Start_10 Start_2 Start_3) (str.from_int StartInt_7)))
   (StartInt_5 Int (1 0 (str.len Start_3)))
   (StartInt_4 Int (1 0 (str.len Start)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_1) (str.contains Start_9 Start_3) (= Start_1 Start_11) (<= StartInt_7 StartInt_1)))
   (Start_5 String ("0" (str.substr Start_6 StartInt StartInt_8) (str.from_int StartInt_8) (ite StartBool_3 Start Start_8)))
   (Start_4 String (y "0" "a" (str.at Start_3 StartInt_6) (str.substr Start_4 StartInt_5 StartInt_3) (str.from_int StartInt_4)))
   (StartInt_6 Int (0 1 (str.len Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y y) "a" "")))

(check-synth)
