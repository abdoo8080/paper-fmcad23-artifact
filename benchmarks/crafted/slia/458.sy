(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_14 String) (StartInt_9 Int) (Start_1 String) (StartBool_1 Bool) (Start_3 String) (Start_11 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_12 String) (Start_15 String) (StartBool_7 Bool) (StartInt_3 Int) (StartInt_5 Int) (Start_2 String) (StartInt_1 Int) (StartInt_2 Int) (StartBool_3 Bool) (Start_10 String) (Start_6 String) (StartBool_4 Bool) (Start_9 String) (StartBool_5 Bool) (StartBool_6 Bool) (StartInt_7 Int) (Start_13 String) (Start_4 String) (Start_5 String) (StartInt_6 Int) (StartInt_10 Int) (Start_8 String) (StartInt_8 Int))
  ((Start String ("a" "0" (str.at Start_1 StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start Start_1) (str.from_int StartInt)))
   (StartInt Int (0 1))
   (StartBool Bool (true false (not StartBool) (str.<= Start_4 Start) (str.prefixof Start_7 Start_10) (str.suffixof Start_10 Start_4) (str.contains Start_15 Start_12) (= Start_7 Start_4)))
   (Start_7 String (y "1" x (str.++ Start_14 Start_15) (str.at Start_1 StartInt_7) (str.from_int StartInt_7)))
   (Start_14 String ("1" (str.++ Start_5 Start_14) (str.replace Start_11 Start_1 Start_1) (str.from_int StartInt_7) (ite StartBool_1 Start_6 Start_6)))
   (StartInt_9 Int (1 (str.len Start_5) (str.to_int Start_4)))
   (Start_1 String (y "b" "1" "a" x (str.++ Start Start_1) (str.replace Start Start_3 Start_4) (ite StartBool Start_2 Start_1)))
   (StartBool_1 Bool (false (str.<= Start_7 Start) (= Start_7 Start_15) (= StartInt_1 StartInt_5)))
   (Start_3 String ("" (str.++ Start_1 Start_4) (str.at Start_1 StartInt_5) (ite StartBool_1 Start_5 Start_3)))
   (Start_11 String ("1" (str.++ Start_13 Start_4) (str.replace Start_1 Start_7 Start_9)))
   (StartInt_4 Int (0 (str.indexof Start Start_2 StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool StartBool_4) (str.<= Start_2 Start_4) (str.suffixof Start_7 Start_8) (str.contains Start_8 Start_6) (= Start_6 Start_3) (= StartInt StartInt_4)))
   (Start_12 String (y "" (str.++ Start_10 Start_2) (str.substr Start_13 StartInt StartInt_7) (str.replace Start_13 Start_10 Start_4) (ite StartBool_1 Start_9 Start_4)))
   (Start_15 String ("" (str.++ Start_6 Start_5) (str.at Start_8 StartInt_9) (str.from_int StartInt_10) (ite StartBool_7 Start_2 Start_8)))
   (StartBool_7 Bool (false true (not StartBool_6) (str.<= Start_10 Start_12) (str.suffixof Start_13 Start_6)))
   (StartInt_3 Int (1 0))
   (StartInt_5 Int (0 1 (str.indexof Start Start StartInt_2) (str.to_int Start_1)))
   (Start_2 String (x "" (str.++ Start_1 Start_1) (str.substr Start StartInt_2 StartInt_3) (str.from_int StartInt_2)))
   (StartInt_1 Int (1 (str.indexof Start_2 Start_2 StartInt_1)))
   (StartInt_2 Int (1 (str.len Start) (str.indexof Start Start_2 StartInt_4) (str.to_int Start)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool_5) (str.< Start_8 Start_2) (str.<= Start_9 Start_2) (<= StartInt_4 StartInt_6)))
   (Start_10 String ("a" "1" y "b" (str.at Start_5 StartInt_2) (str.from_int StartInt)))
   (Start_6 String ("1" "" (str.++ Start_2 Start_7) (str.at Start_6 StartInt_2) (str.replace Start_3 Start_8 Start_2) (str.from_int StartInt_6) (ite StartBool_2 Start Start)))
   (StartBool_4 Bool (false true (str.< Start_3 Start_6) (str.<= Start_8 Start_9) (str.prefixof Start_2 Start_9) (str.suffixof Start_1 Start_8) (= Start_7 Start_4)))
   (Start_9 String ("0" y "" x "a" "1" "b" (str.++ Start_5 Start_8) (str.at Start_3 StartInt_5) (str.replace Start_7 Start_9 Start_7) (str.from_int StartInt) (ite StartBool_3 Start_7 Start_1)))
   (StartBool_5 Bool (true false (and StartBool StartBool_6) (str.< Start_8 Start_3) (str.<= Start_5 Start_6) (str.prefixof Start_6 Start_4) (str.suffixof Start_7 Start_4)))
   (StartBool_6 Bool (true false (not StartBool_2) (and StartBool_1 StartBool_4) (str.<= Start_4 Start_1) (str.prefixof Start_10 Start_1) (str.suffixof Start Start_11) (str.contains Start_10 Start_6) (= Start_12 Start_3) (= StartInt_5 StartInt_4)))
   (StartInt_7 Int (1 (str.len Start_9) (str.indexof Start_13 Start_13 StartInt_3)))
   (Start_13 String ("0" (str.++ Start_5 Start_2) (str.from_int StartInt_6)))
   (Start_4 String ("0" x "b" (str.at Start StartInt_5) (ite StartBool Start_1 Start_1)))
   (Start_5 String ("1" (str.++ Start_3 Start) (str.at Start_3 StartInt_3) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_5 Start_6 Start_6)))
   (StartInt_6 Int (0 (str.to_int Start)))
   (StartInt_10 Int (1 0))
   (Start_8 String (x "0" (str.at Start_14 StartInt_8) (str.substr Start_12 StartInt_2 StartInt)))
   (StartInt_8 Int (1 0 (str.len Start_12) (str.indexof Start_5 Start_15 StartInt_1) (str.to_int Start_15)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.at "b" (str.len y)) "b")))

(check-synth)
