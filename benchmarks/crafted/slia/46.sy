(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_2 String) (Start_11 String) (Start_12 String) (Start_5 String) (StartInt_2 Int) (StartInt_7 Int) (StartBool_3 Bool) (StartBool_4 Bool) (StartInt_6 Int) (StartBool_2 Bool) (Start_10 String) (Start_13 String) (StartInt_3 Int) (StartInt_4 Int) (StartInt_5 Int) (StartBool_1 Bool) (Start_7 String) (Start_4 String) (Start_3 String) (StartInt_1 Int) (Start_6 String) (Start_1 String) (Start_8 String) (Start_9 String))
  ((Start String ("b" y (str.substr Start StartInt StartInt)))
   (StartInt Int (1 (str.len Start) (str.indexof Start_1 Start StartInt_1)))
   (StartBool Bool (false (not StartBool_4) (str.contains Start_8 Start_13)))
   (Start_14 String ("0" x "b" "a" (str.at Start_5 StartInt_5)))
   (Start_2 String ("0" "b" "a" x (str.++ Start_3 Start) (str.at Start_12 StartInt) (str.substr Start_13 StartInt_4 StartInt_5) (ite StartBool Start_10 Start_13)))
   (Start_11 String (x "" (str.at Start_1 StartInt_1) (str.from_int StartInt_5) (ite StartBool_2 Start_9 Start_1)))
   (Start_12 String (x (str.++ Start_7 Start_3) (str.at Start_12 StartInt_4) (str.replace Start_8 Start Start_3) (str.from_int StartInt_1)))
   (Start_5 String ("1" (str.++ Start_1 Start_8) (str.replace Start_6 Start_6 Start_5) (str.from_int StartInt_1) (ite StartBool_3 Start_3 Start_6)))
   (StartInt_2 Int (1 (str.len Start_7) (str.to_int Start_4)))
   (StartInt_7 Int (1 0))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_3) (str.<= Start_6 Start_4) (str.prefixof Start_8 Start) (str.suffixof Start_5 Start_5) (= StartInt_7 StartInt_3)))
   (StartBool_4 Bool (true (and StartBool StartBool_2) (str.prefixof Start_14 Start_8) (str.suffixof Start_12 Start_8) (str.contains Start Start_8) (= StartInt_1 StartInt_1) (<= StartInt_2 StartInt_6)))
   (StartInt_6 Int (0 (str.indexof Start_10 Start StartInt_4)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool StartBool_1) (str.< Start_11 Start_2) (str.prefixof Start_6 Start_8) (str.contains Start_2 Start_1) (= Start_12 Start_7) (= StartInt_6 StartInt_4)))
   (Start_10 String ("a" (str.++ Start_10 Start_1) (str.at Start_5 StartInt_3) (str.substr Start_10 StartInt_5 StartInt_5) (str.from_int StartInt_6)))
   (Start_13 String ("1" (str.++ Start_12 Start_7) (str.at Start_7 StartInt_3)))
   (StartInt_3 Int (0 1 (str.to_int Start_10)))
   (StartInt_4 Int (0 1 (str.indexof Start_6 Start_7 StartInt_3) (str.to_int Start_6)))
   (StartInt_5 Int (0 1))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_2) (str.< Start_3 Start_4) (= Start_1 Start_2) (= StartInt StartInt_2) (<= StartInt_2 StartInt_1)))
   (Start_7 String ("0" (str.substr Start_3 StartInt_4 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_8 Start_4)))
   (Start_4 String (""))
   (Start_3 String ("a" "0" (str.substr Start_5 StartInt StartInt) (str.from_int StartInt_2) (ite StartBool_3 Start_6 Start_2)))
   (StartInt_1 Int (0 (str.len Start_1) (str.to_int Start)))
   (Start_6 String ("1" "a" (str.at Start_5 StartInt_3) (str.substr Start_2 StartInt_4 StartInt_1) (str.from_int StartInt_3)))
   (Start_1 String ("b" (str.++ Start_2 Start) (str.at Start StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_1)))
   (Start_8 String ("" (str.++ Start_2 Start_9) (str.replace Start_4 Start_3 Start_9)))
   (Start_9 String ("a" (str.++ Start_8 Start) (str.at Start_1 StartInt_2) (ite StartBool_1 Start_9 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "a" y) "" "0")))

(check-synth)
