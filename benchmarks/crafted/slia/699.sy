(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (StartInt_2 Int) (Start_5 String) (Start_6 String) (Start_4 String) (Start_3 String) (Start_2 String) (Start_1 String) (StartInt_1 Int) (StartBool_1 Bool))
  ((Start String ("0" (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartInt Int (1 (str.len Start_4) (str.indexof Start_4 Start_5 StartInt)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool_1) (str.<= Start_4 Start_4) (str.contains Start_2 Start) (= Start Start) (<= StartInt_1 StartInt_2)))
   (StartInt_3 Int (0))
   (StartInt_2 Int (0 1 (str.len Start_2)))
   (Start_5 String ("a" y (str.at Start_1 StartInt) (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start_5 Start Start) (ite StartBool Start Start_5)))
   (Start_6 String ("b" (str.++ Start_3 Start) (ite StartBool_1 Start_2 Start_6)))
   (Start_4 String ("0" (str.++ Start_4 Start_4) (str.at Start_2 StartInt) (str.from_int StartInt)))
   (Start_3 String ("b" "0" (str.++ Start_2 Start_4)))
   (Start_2 String ("0" (str.at Start_1 StartInt) (str.replace Start_2 Start_3 Start_1)))
   (Start_1 String (y (str.++ Start Start) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start Start_3)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start_1 Start_1 StartInt) (str.to_int Start)))
   (StartBool_1 Bool (false true (str.contains Start_1 Start_6) (= Start_1 Start_1) (= StartInt StartInt_2) (<= StartInt_3 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.to_int (str.substr y 0 1)))))

(check-synth)
