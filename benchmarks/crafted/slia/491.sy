(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_13 String) (Start_12 String) (Start_11 String) (Start_9 String) (Start_8 String) (StartBool_2 Bool) (Start_1 String) (StartInt_1 Int) (StartInt_2 Int) (StartInt_3 Int) (Start_10 String) (Start_4 String) (StartInt_4 Int) (Start_5 String) (Start_3 String) (StartInt_5 Int) (StartInt_6 Int) (Start_2 String) (Start_6 String) (StartBool_1 Bool) (Start_7 String))
  ((Start String (y (str.substr Start StartInt_1 StartInt) (str.replace Start Start Start) (str.from_int StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 (str.to_int Start_9)))
   (StartBool Bool (true (and StartBool StartBool_2) (str.<= Start_11 Start_11) (str.prefixof Start_9 Start_7) (str.suffixof Start_11 Start_5) (str.contains Start_2 Start_7) (= StartInt_6 StartInt_6)))
   (StartInt_7 Int (0 (str.len Start_12)))
   (Start_13 String ("1" "a" (str.substr Start_8 StartInt_2 StartInt_5) (str.from_int StartInt_7) (ite StartBool Start_1 Start)))
   (Start_12 String (y (str.++ Start_10 Start) (str.at Start_13 StartInt_5) (str.substr Start_13 StartInt_2 StartInt) (str.from_int StartInt_3)))
   (Start_11 String ("b" y "1" (str.at Start_3 StartInt_3) (str.from_int StartInt_2)))
   (Start_9 String ("0" (str.++ Start_8 Start_10) (str.replace Start_5 Start_8 Start_7) (str.from_int StartInt_6)))
   (Start_8 String ("" (str.++ Start_8 Start_5) (str.replace Start_12 Start_2 Start_6) (ite StartBool_1 Start_12 Start_4)))
   (StartBool_2 Bool (false (not StartBool) (str.contains Start_8 Start_9) (= StartInt_6 StartInt) (<= StartInt_4 StartInt_2)))
   (Start_1 String (x (str.at Start_1 StartInt_2)))
   (StartInt_1 Int (0))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_1 Start StartInt_3) (str.to_int Start_1)))
   (StartInt_3 Int (0 (str.len Start_2)))
   (Start_10 String (x "b" (str.++ Start_1 Start_3) (str.at Start_8 StartInt_6) (str.replace Start_10 Start_11 Start_7) (str.from_int StartInt_3) (ite StartBool_2 Start_3 Start_10)))
   (Start_4 String ("0" "" (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt_4 StartInt_4) (str.replace Start_1 Start_3 Start_3)))
   (StartInt_4 Int (1 0 (str.indexof Start_5 Start_2 StartInt_3)))
   (Start_5 String ("a" (str.++ Start_3 Start_4) (str.replace Start_2 Start Start_6)))
   (Start_3 String (x (str.++ Start_2 Start_1) (str.at Start StartInt_2) (str.substr Start_4 StartInt_3 StartInt_2) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_6 Start_1 StartInt)))
   (StartInt_6 Int (1 (str.indexof Start_2 Start_8 StartInt_4) (str.to_int Start_7)))
   (Start_2 String ("b" "0" "a" (str.substr Start_2 StartInt_4 StartInt_3) (str.replace Start Start_3 Start_1)))
   (Start_6 String ("1" x (str.++ Start_5 Start_3) (str.at Start_2 StartInt_1)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool_2) (str.prefixof Start Start_7) (= StartInt_5 StartInt_5) (<= StartInt StartInt_1)))
   (Start_7 String ("" "1" (str.at Start_4 StartInt_5) (str.replace Start_4 Start_7 Start) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "b" y)))

(check-synth)
