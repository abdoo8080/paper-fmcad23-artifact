(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_11 String) (Start_10 String) (StartBool_2 Bool) (Start_8 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_1 String) (StartBool_3 Bool) (Start_2 String) (Start_5 String) (Start_7 String) (StartInt_3 Int) (StartInt_1 Int) (Start_4 String) (Start_3 String) (Start_9 String) (StartInt_2 Int) (StartInt_4 Int) (Start_6 String))
  ((Start String ("1" (str.at Start StartInt_1) (str.substr Start StartInt StartInt_2)))
   (StartInt Int (1))
   (StartBool Bool (false true (not StartBool_1) (str.< Start_2 Start_4) (str.<= Start Start) (str.prefixof Start_2 Start_3) (str.contains Start_4 Start_1)))
   (StartInt_6 Int (0 1 (str.len Start_8) (str.to_int Start_2)))
   (Start_11 String ("0" (str.++ Start_4 Start_1) (str.at Start_11 StartInt_5)))
   (Start_10 String (y "" "1" "a" (str.++ Start_11 Start_5) (str.replace Start_8 Start_8 Start_10) (ite StartBool_3 Start_7 Start_1)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool StartBool_2) (str.< Start_9 Start_6) (str.prefixof Start_9 Start_10) (str.suffixof Start_9 Start_3) (= StartInt StartInt_2)))
   (Start_8 String ("a" y "0" (str.substr Start_4 StartInt_1 StartInt_4) (str.replace Start_7 Start_8 Start_1)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.<= Start_9 Start_9) (str.contains Start_7 Start_3)))
   (StartInt_5 Int (0 1 (str.indexof Start_7 Start_2 StartInt) (str.to_int Start_8)))
   (Start_1 String (x "" y (str.at Start StartInt_3) (str.from_int StartInt_1)))
   (StartBool_3 Bool (false true (str.suffixof Start Start) (str.contains Start_4 Start_2) (= Start_2 Start_8) (<= StartInt_1 StartInt_3)))
   (Start_2 String ("a" "1" "0" (str.from_int StartInt_3)))
   (Start_5 String (y (str.replace Start_6 Start Start_1) (str.from_int StartInt_4) (ite StartBool_3 Start_4 Start_9)))
   (Start_7 String ("0" "1" (str.at Start_5 StartInt) (str.substr Start_8 StartInt_5 StartInt)))
   (StartInt_3 Int (0 1 (str.indexof Start Start_1 StartInt_3) (str.to_int Start_1)))
   (StartInt_1 Int (1 (str.len Start_2) (str.to_int Start_3)))
   (Start_4 String ("b" "a" (str.at Start_2 StartInt_4) (str.substr Start_2 StartInt_4 StartInt_4) (str.replace Start_1 Start_4 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_2)))
   (Start_3 String ("0" (str.++ Start_3 Start_3) (str.substr Start_1 StartInt_1 StartInt)))
   (Start_9 String ("0" (str.at Start_7 StartInt_6)))
   (StartInt_2 Int (0 1 (str.len Start_1)))
   (StartInt_4 Int (0 1 (str.len Start_3) (str.indexof Start_5 Start_6 StartInt_4) (str.to_int Start_4)))
   (Start_6 String ("0" x (str.replace Start_3 Start_4 Start_1) (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (ite (str.prefixof "0" (str.from_int (str.indexof "a" y 0))) "0" "a") x)))

(check-synth)
