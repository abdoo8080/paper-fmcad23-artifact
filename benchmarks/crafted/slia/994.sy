(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_7 Int) (StartBool_6 Bool) (StartBool_3 Bool) (StartBool_5 Bool) (Start_8 String) (Start_10 String) (Start_6 String) (StartBool_1 Bool) (StartInt_5 Int) (StartBool_2 Bool) (StartBool_7 Bool) (Start_2 String) (StartInt_1 Int) (StartInt_6 Int) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int) (Start_4 String) (Start_9 String) (StartInt_3 Int) (StartBool_4 Bool) (Start_5 String) (Start_1 String) (Start_7 String))
  ((Start String ("b" "" y (str.at Start StartInt) (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start Start_2) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start_4) (str.to_int Start_5)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_2 StartBool_4) (str.<= Start_1 Start_2) (str.suffixof Start Start_1) (= Start_7 Start_1)))
   (Start_11 String ("" x (str.at Start_7 StartInt_1) (str.replace Start_8 Start_7 Start_9)))
   (StartInt_7 Int (1 (str.to_int Start_10)))
   (StartBool_6 Bool (false (and StartBool StartBool_4) (str.suffixof Start_6 Start_2) (str.contains Start_10 Start_3) (= Start_1 Start_6) (<= StartInt_2 StartInt_5)))
   (StartBool_3 Bool (false true (and StartBool StartBool_7) (str.prefixof Start_7 Start_8) (str.contains Start_3 Start_2) (= StartInt_2 StartInt_4)))
   (StartBool_5 Bool (false true (and StartBool_6 StartBool) (str.< Start_8 Start_9) (str.prefixof Start_6 Start_3) (str.suffixof Start_4 Start) (= StartInt_4 StartInt_6) (<= StartInt_1 StartInt_4)))
   (Start_8 String ("1" (str.++ Start_7 Start_4) (str.at Start_7 StartInt_6) (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start_7 Start_9 Start_2)))
   (Start_10 String ("b" (str.from_int StartInt_5) (ite StartBool_6 Start_8 Start_5)))
   (Start_6 String (x y "" (str.substr Start StartInt_3 StartInt_2) (str.replace Start_6 Start_3 Start_7) (str.from_int StartInt_4) (ite StartBool Start_2 Start_7)))
   (StartBool_1 Bool (false (str.< Start_4 Start_2) (str.<= Start Start_2)))
   (StartInt_5 Int (0 (str.to_int Start)))
   (StartBool_2 Bool (false (not StartBool) (str.suffixof Start_7 Start_7) (str.contains Start_1 Start_3) (= StartInt_5 StartInt)))
   (StartBool_7 Bool (true (str.< Start_10 Start_6) (str.<= Start_4 Start_7) (str.prefixof Start Start_8) (str.suffixof Start_5 Start_11) (= StartInt_7 StartInt_3) (<= StartInt_7 StartInt)))
   (Start_2 String ("b" (str.at Start_1 StartInt_1)))
   (StartInt_1 Int (0 1 (str.to_int Start_3)))
   (StartInt_6 Int (1 0))
   (Start_3 String ("" (str.at Start_3 StartInt_2) (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_3 Start)))
   (StartInt_2 Int (0 1 (str.len Start_4)))
   (StartInt_4 Int (1 0 (str.len Start_2) (str.to_int Start_4)))
   (Start_4 String (y (str.++ Start_1 Start_3) (str.substr Start_4 StartInt_3 StartInt)))
   (Start_9 String ("b" y "" x "a" (str.++ Start_2 Start_7) (str.replace Start_9 Start_8 Start_9) (ite StartBool_3 Start_7 Start_9)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start StartInt_4) (str.to_int Start_3)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_4 StartBool) (str.contains Start_4 Start_8) (= StartInt_4 StartInt_1)))
   (Start_5 String ("1" (str.++ Start_2 Start_6) (ite StartBool_1 Start_6 Start_7)))
   (Start_1 String ("0" (str.at Start StartInt_4) (str.replace Start_4 Start_1 Start_2) (str.from_int StartInt)))
   (Start_7 String ("b" (str.++ Start_6 Start_1) (str.at Start_2 StartInt_1) (ite StartBool_2 Start_4 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "a" "b") 0)))

(check-synth)
