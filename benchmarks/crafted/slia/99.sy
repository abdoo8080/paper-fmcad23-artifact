(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_12 String) (StartInt_7 Int) (Start_1 String) (Start_10 String) (Start_9 String) (Start_3 String) (StartInt_6 Int) (Start_4 String) (StartInt_1 Int) (StartBool_3 Bool) (Start_8 String) (StartInt_2 Int) (Start_2 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_7 String) (StartInt_4 Int) (Start_6 String) (Start_11 String) (StartInt_5 Int) (StartInt_3 Int) (Start_5 String))
  ((Start String ("" (str.++ Start_1 Start_2) (str.at Start_3 StartInt_1) (str.replace Start_4 Start_3 Start_3) (ite StartBool_1 Start_3 Start)))
   (StartInt Int (1 0 (str.len Start_3) (str.indexof Start_8 Start_4 StartInt_2) (str.to_int Start_6)))
   (StartBool Bool (true false (not StartBool) (str.< Start_3 Start_11) (str.suffixof Start_1 Start_8) (str.contains Start_4 Start_3) (= Start_10 Start_9) (= StartInt_4 StartInt_1)))
   (Start_13 String ("a" "" "b" "1" (str.at Start_12 StartInt_5) (str.substr Start_13 StartInt_3 StartInt_7) (str.from_int StartInt_2)))
   (Start_12 String ("0" (str.++ Start_11 Start_1) (str.replace Start_7 Start_3 Start_12) (str.from_int StartInt_1) (ite StartBool_3 Start_13 Start_1)))
   (StartInt_7 Int (0 (str.indexof Start_9 Start_6 StartInt_3)))
   (Start_1 String ("1" (str.at Start_9 StartInt_5) (str.substr Start_7 StartInt_2 StartInt_6) (ite StartBool_3 Start_3 Start_6)))
   (Start_10 String (y "b" "" "1" (str.++ Start_7 Start_3) (str.replace Start_5 Start_3 Start_3) (str.from_int StartInt_1) (ite StartBool_3 Start_1 Start_4)))
   (Start_9 String (x (str.at Start_10 StartInt_4) (str.from_int StartInt_5)))
   (Start_3 String (x y (str.at Start StartInt_4) (str.from_int StartInt_6)))
   (StartInt_6 Int (0 (str.len Start_7) (str.indexof Start_7 Start_5 StartInt_1)))
   (Start_4 String ("1" "0" (str.at Start_2 StartInt_6)))
   (StartInt_1 Int (1 0 (str.len Start_7) (str.indexof Start_1 Start_1 StartInt_3)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_1) (str.suffixof Start Start) (= StartInt_1 StartInt_2) (<= StartInt_2 StartInt_1)))
   (Start_8 String ("1" (str.from_int StartInt_3) (ite StartBool_3 Start_4 Start_5)))
   (StartInt_2 Int (1 0 (str.len Start_6) (str.indexof Start_7 Start_5 StartInt)))
   (Start_2 String ("b" "0" "a" "1" x (str.++ Start_8 Start_1) (str.substr Start_8 StartInt StartInt_1) (str.replace Start_9 Start_2 Start_1) (ite StartBool_1 Start_4 Start_7)))
   (StartBool_2 Bool (false (str.< Start_2 Start_5) (str.<= Start_5 Start_6) (= StartInt StartInt_3) (<= StartInt_4 StartInt_3)))
   (StartBool_1 Bool (true (str.< Start_1 Start) (str.<= Start Start_5) (str.prefixof Start Start_1) (str.suffixof Start_1 Start_1) (str.contains Start_5 Start_6) (= Start_2 Start) (= StartInt_2 StartInt_2)))
   (Start_7 String ("" (str.++ Start_5 Start_3) (str.at Start_4 StartInt_3) (str.replace Start_5 Start_7 Start) (ite StartBool_2 Start_6 Start_6)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.indexof Start_3 Start_7 StartInt)))
   (Start_6 String (x (str.++ Start Start_3) (str.substr Start_3 StartInt_5 StartInt_1) (str.replace Start_7 Start_6 Start_5) (ite StartBool_3 Start_8 Start_8)))
   (Start_11 String ("1" (str.at Start_3 StartInt) (str.replace Start_4 Start_12 Start_4) (ite StartBool Start_11 Start_4)))
   (StartInt_5 Int (0 1 (str.len Start_6)))
   (StartInt_3 Int (1 (str.len Start_8) (str.indexof Start_1 Start_6 StartInt_2) (str.to_int Start_7)))
   (Start_5 String ("b" y "0" (str.++ Start_2 Start_5) (str.replace Start_4 Start_7 Start) (ite StartBool_2 Start_8 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "b" x)))

(check-synth)
