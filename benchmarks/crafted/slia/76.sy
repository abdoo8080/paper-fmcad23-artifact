(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_14 String) (Start_1 String) (StartInt_2 Int) (Start_13 String) (StartInt_8 Int) (StartInt_1 Int) (StartInt_7 Int) (Start_12 String) (Start_2 String) (StartBool_1 Bool) (Start_3 String) (Start_5 String) (Start_6 String) (Start_8 String) (Start_4 String) (StartInt_4 Int) (Start_9 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_7 String) (Start_10 String) (StartInt_5 Int) (Start_11 String) (StartBool_3 Bool) (StartInt_6 Int))
  ((Start String ("0" "b" (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (StartInt Int (0 (str.len Start_9) (str.indexof Start_3 Start_9 StartInt_4)))
   (StartBool Bool (true (str.< Start_8 Start_9) (str.suffixof Start_12 Start_6) (= StartInt_9 StartInt_1)))
   (StartInt_9 Int (1 (str.len Start)))
   (Start_14 String ("" (str.at Start_4 StartInt_4) (str.from_int StartInt_4) (ite StartBool_1 Start_1 Start_8)))
   (Start_1 String ("" "a" (str.++ Start_9 Start_12) (str.at Start StartInt_5) (str.replace Start_12 Start_14 Start_3) (str.from_int StartInt_2) (ite StartBool_2 Start_11 Start_2)))
   (StartInt_2 Int (1 (str.to_int Start_1)))
   (Start_13 String ("a" "" x "0" (str.++ Start Start_3) (str.replace Start_7 Start_9 Start_1)))
   (StartInt_8 Int (1 0 (str.indexof Start_10 Start_12 StartInt_1)))
   (StartInt_1 Int (1))
   (StartInt_7 Int (1 0))
   (Start_12 String ("" "0" (str.++ Start_8 Start_3) (str.substr Start_3 StartInt StartInt_3) (str.from_int StartInt_2)))
   (Start_2 String ("a" (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_3 Start_2 Start_3) (str.from_int StartInt) (ite StartBool Start_2 Start)))
   (StartBool_1 Bool (false true (and StartBool StartBool_1) (str.< Start_5 Start_2) (str.<= Start_8 Start_9) (str.prefixof Start_12 Start_8) (str.suffixof Start Start) (str.contains Start_10 Start_5) (= Start_6 Start_4) (= StartInt_5 StartInt_6)))
   (Start_3 String ("a" "1" y (str.++ Start_4 Start_2) (str.at Start_5 StartInt_2) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_4 Start_4 Start) (ite StartBool Start_3 Start_3)))
   (Start_5 String (x "" "b" (str.++ Start_3 Start_6) (str.at Start_7 StartInt_2) (str.replace Start_3 Start_6 Start_5) (str.from_int StartInt_3) (ite StartBool Start_8 Start_6)))
   (Start_6 String (x "1" "a" (str.at Start_3 StartInt_1) (str.substr Start_10 StartInt_2 StartInt_7) (ite StartBool_2 Start_5 Start_12)))
   (Start_8 String ("a" (str.at Start_6 StartInt) (str.substr Start_1 StartInt_4 StartInt) (str.replace Start_6 Start_8 Start_2)))
   (Start_4 String (x (str.replace Start_4 Start_9 Start_6) (str.from_int StartInt_3) (ite StartBool_3 Start_5 Start_6)))
   (StartInt_4 Int (0 (str.len Start_6)))
   (Start_9 String (y (str.++ Start_6 Start_11) (str.at Start_10 StartInt) (str.substr Start_8 StartInt_1 StartInt_3) (str.replace Start_4 Start Start_1) (ite StartBool_1 Start_2 Start_11)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.to_int Start_6)))
   (StartBool_2 Bool (true false (= Start_9 Start_2) (= StartInt_2 StartInt_1)))
   (Start_7 String (x (str.++ Start_7 Start_8) (str.replace Start_9 Start_4 Start_8) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_10)))
   (Start_10 String ("" (str.substr Start_7 StartInt_3 StartInt_4) (str.replace Start_2 Start_7 Start_3) (str.from_int StartInt_5) (ite StartBool_1 Start_6 Start_1)))
   (StartInt_5 Int (0 (str.len Start_2) (str.indexof Start_8 Start StartInt_4) (str.to_int Start_11)))
   (Start_11 String ("" "a" (str.at Start_10 StartInt_5) (str.replace Start_6 Start_6 Start_5) (ite StartBool Start_9 Start_7)))
   (StartBool_3 Bool (true false (and StartBool StartBool) (str.< Start_3 Start_6) (str.<= Start_11 Start_4) (str.contains Start_10 Start_13) (= StartInt StartInt) (<= StartInt_8 StartInt_3)))
   (StartInt_6 Int (0 (str.len Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.++ y "0") "")))

(check-synth)
