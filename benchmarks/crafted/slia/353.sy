(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_7 Int) (Start_14 String) (Start_13 String) (StartBool_3 Bool) (StartBool_1 Bool) (Start_2 String) (Start_9 String) (StartInt_3 Int) (Start_12 String) (StartInt_1 Int) (StartInt_5 Int) (Start_3 String) (Start_6 String) (StartBool_2 Bool) (Start_4 String) (Start_1 String) (Start_5 String) (StartInt_6 Int) (Start_11 String) (Start_7 String) (Start_8 String) (StartInt_4 Int) (StartInt_2 Int) (Start_10 String))
  ((Start String ("a" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.replace Start_1 Start_3 Start_2) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_7) (str.to_int Start_13)))
   (StartBool Bool (true (not StartBool_4) (<= StartInt_6 StartInt_7)))
   (StartBool_4 Bool (false (str.< Start_10 Start_12) (= StartInt_7 StartInt_4)))
   (StartInt_7 Int (1 (str.indexof Start_12 Start_14 StartInt_7) (str.to_int Start_9)))
   (Start_14 String ("0" (str.substr Start_11 StartInt_1 StartInt_6) (str.replace Start_12 Start_13 Start_10) (ite StartBool_1 Start_1 Start_2)))
   (Start_13 String (y "1" (str.substr Start_4 StartInt_2 StartInt_6) (str.from_int StartInt_3) (ite StartBool Start_11 Start_12)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_2) (str.contains Start_12 Start) (<= StartInt_3 StartInt_5)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool_3) (= StartInt_3 StartInt_4) (<= StartInt StartInt)))
   (Start_2 String ("a" (str.at Start_8 StartInt_1) (str.replace Start_6 Start_7 Start_11)))
   (Start_9 String ("" (str.at Start_11 StartInt) (str.replace Start_11 Start_6 Start_10) (str.from_int StartInt)))
   (StartInt_3 Int (0 (str.indexof Start_4 Start StartInt_1)))
   (Start_12 String ("" (str.++ Start_12 Start_4) (str.at Start_3 StartInt_2) (str.substr Start_8 StartInt_5 StartInt_1) (str.from_int StartInt)))
   (StartInt_1 Int (0 (str.len Start_2) (str.to_int Start_3)))
   (StartInt_5 Int (1 0 (str.len Start_5)))
   (Start_3 String ("a" (str.++ Start Start_1) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_3 Start_3 Start_1) (str.from_int StartInt) (ite StartBool Start_3 Start)))
   (Start_6 String ("1" (str.++ Start Start_7) (str.at Start_2 StartInt_2) (str.substr Start_2 StartInt_3 StartInt_2) (str.replace Start_7 Start_4 Start_8) (str.from_int StartInt) (ite StartBool Start_4 Start_8)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.<= Start_6 Start_10) (str.prefixof Start_11 Start_6) (str.suffixof Start_11 Start_1) (str.contains Start_13 Start_7) (= Start_13 Start_6) (<= StartInt_2 StartInt_4)))
   (Start_4 String (x (str.at Start_1 StartInt_2) (str.replace Start_5 Start_1 Start_4) (str.from_int StartInt_2)))
   (Start_1 String ("" "1" x "a" "0" "b" y (str.substr Start_6 StartInt StartInt_2) (str.replace Start_2 Start_12 Start_9) (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start_11)))
   (Start_5 String (x "0" (str.++ Start_3 Start_5) (str.replace Start Start_6 Start_7) (str.from_int StartInt_2)))
   (StartInt_6 Int (0 (str.len Start_13)))
   (Start_11 String ("b" (str.at Start_2 StartInt_4) (str.substr Start_10 StartInt_2 StartInt) (str.replace Start_5 Start_7 Start_11) (str.from_int StartInt_2) (ite StartBool Start_4 Start_3)))
   (Start_7 String ("0" (str.++ Start_5 Start_6) (str.substr Start_3 StartInt StartInt) (str.replace Start_7 Start_3 Start_1) (str.from_int StartInt)))
   (Start_8 String ("a" (str.++ Start_3 Start_2) (str.at Start_3 StartInt_4) (str.substr Start_5 StartInt_3 StartInt_2) (str.replace Start_6 Start_8 Start_6)))
   (StartInt_4 Int (0 (str.len Start_3) (str.indexof Start_4 Start_5 StartInt_4)))
   (StartInt_2 Int (0 1 (str.indexof Start_5 Start_9 StartInt_1) (str.to_int Start_10)))
   (Start_10 String (x (str.++ Start_3 Start_11) (str.substr Start_7 StartInt_4 StartInt_2) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ "b" "a") (str.indexof "0" x 1))))

(check-synth)
