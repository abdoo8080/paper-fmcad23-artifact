(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_12 String) (Start_11 String) (StartBool_3 Bool) (Start_10 String) (StartBool_4 Bool) (StartInt_6 Int) (Start_8 String) (StartBool_2 Bool) (Start_9 String) (Start_3 String) (Start_1 String) (Start_13 String) (Start_2 String) (StartInt_3 Int) (StartBool_1 Bool) (StartBool_5 Bool) (Start_5 String) (Start_4 String) (Start_6 String) (StartInt_5 Int) (StartInt_4 Int) (StartInt_2 Int) (Start_7 String) (StartInt_1 Int))
  ((Start String ("1" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt_2) (ite StartBool Start_2 Start_1)))
   (StartInt Int (0 (str.len Start_12)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_1 StartBool_5) (str.< Start_4 Start_13) (str.suffixof Start_3 Start_13) (<= StartInt_5 StartInt_1)))
   (StartBool_6 Bool (false true (not StartBool_3) (and StartBool_5 StartBool_4) (str.< Start_11 Start_5) (str.suffixof Start_2 Start_8) (= Start_12 Start) (= StartInt_5 StartInt_5) (<= StartInt_6 StartInt)))
   (Start_12 String (x (str.substr Start_8 StartInt StartInt_2) (str.replace Start_10 Start_4 Start) (str.from_int StartInt_1)))
   (Start_11 String ("" (str.substr Start_3 StartInt_1 StartInt_5) (str.replace Start_11 Start_6 Start_9) (str.from_int StartInt)))
   (StartBool_3 Bool (false (and StartBool StartBool_5) (str.suffixof Start_2 Start_11) (str.contains Start_7 Start_4) (= Start_6 Start_2) (= StartInt_3 StartInt_3)))
   (Start_10 String (x "1" (str.++ Start_5 Start_5) (str.at Start_9 StartInt_5)))
   (StartBool_4 Bool (false (not StartBool_4) (str.<= Start Start_2) (str.suffixof Start_9 Start) (str.contains Start_4 Start_7) (<= StartInt_2 StartInt_1)))
   (StartInt_6 Int (0 1))
   (Start_8 String (y x "a" "b" "0" (str.at Start_1 StartInt_6) (str.substr Start_2 StartInt_6 StartInt) (str.replace Start_5 Start Start_8)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool_4) (str.< Start_5 Start_6) (str.<= Start_3 Start_2) (str.prefixof Start_1 Start_2) (str.contains Start_8 Start_3) (= StartInt StartInt_2)))
   (Start_9 String ("0" (str.at Start_10 StartInt_1) (str.substr Start_1 StartInt_6 StartInt_1) (str.replace Start_10 Start_6 Start_6) (str.from_int StartInt_3)))
   (Start_3 String ("1" (str.++ Start_3 Start_2) (str.substr Start_3 StartInt_3 StartInt_4) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_4)))
   (Start_1 String (y "b" (str.substr Start_6 StartInt StartInt_5) (str.replace Start_7 Start_6 Start_2) (str.from_int StartInt_3)))
   (Start_13 String ("b" "1" "" (str.substr Start StartInt_6 StartInt) (str.from_int StartInt_5) (ite StartBool_3 Start_10 Start_3)))
   (Start_2 String ("b" y (str.++ Start_3 Start_1) (str.substr Start_3 StartInt_1 StartInt_3) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 (str.len Start_4)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (str.< Start_4 Start_5) (str.<= Start Start_3) (str.suffixof Start_1 Start_1) (str.contains Start_3 Start_3) (= Start_1 Start_2) (= StartInt_2 StartInt_4) (<= StartInt_2 StartInt_2)))
   (StartBool_5 Bool (false (not StartBool_6) (str.< Start_10 Start_11) (str.contains Start_3 Start_12) (= StartInt_1 StartInt_2)))
   (Start_5 String ("0" (str.replace Start_5 Start_6 Start_3) (str.from_int StartInt_3)))
   (Start_4 String ("a"))
   (Start_6 String ("b" (str.++ Start_1 Start_4)))
   (StartInt_5 Int (0 (str.len Start_4) (str.indexof Start_1 Start_6 StartInt_5)))
   (StartInt_4 Int (1 0 (str.len Start_3) (str.to_int Start)))
   (StartInt_2 Int (0 1 (str.len Start_6) (str.to_int Start_4)))
   (Start_7 String ("a" y "1" x (str.++ Start_7 Start) (str.from_int StartInt) (ite StartBool_2 Start_1 Start)))
   (StartInt_1 Int (0 (str.len Start_3) (str.indexof Start_6 Start_4 StartInt_4) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.replace "1" x "") "b")))

(check-synth)
