(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartBool_4 Bool) (Start_8 String) (Start_3 String) (StartInt_7 Int) (StartInt_1 Int) (StartInt_3 Int) (StartInt_4 Int) (StartBool_1 Bool) (Start_2 String) (Start_1 String) (StartBool_2 Bool) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_6 Int) (Start_5 String) (Start_7 String) (Start_4 String) (StartInt_5 Int) (Start_6 String))
  ((Start String ("a" (str.from_int StartInt) (ite StartBool Start Start)))
   (StartInt Int (0 1 (str.len Start_1) (str.indexof Start Start_1 StartInt)))
   (StartBool Bool (true (str.<= Start_7 Start_5) (str.prefixof Start_3 Start_2) (str.suffixof Start Start_8)))
   (Start_9 String (x "0" "b" "1" (str.at Start_7 StartInt) (str.replace Start_1 Start_5 Start_5)))
   (StartBool_4 Bool (false (and StartBool_2 StartBool_4) (str.<= Start_5 Start_3)))
   (Start_8 String ("a" "b" (str.replace Start_9 Start_3 Start_7) (str.from_int StartInt_6) (ite StartBool_4 Start_7 Start_8)))
   (Start_3 String ("" (str.at Start_4 StartInt_6) (str.substr Start_7 StartInt_4 StartInt_4) (str.replace Start_1 Start_6 Start_7)))
   (StartInt_7 Int (0 (str.len Start_7) (str.indexof Start_6 Start_6 StartInt_7) (str.to_int Start_1)))
   (StartInt_1 Int (1 (str.to_int Start)))
   (StartInt_3 Int (1 (str.len Start_2)))
   (StartInt_4 Int (0 1 (str.indexof Start_1 Start_1 StartInt_5)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_3) (str.< Start_1 Start_1) (str.<= Start Start_5) (str.suffixof Start_1 Start_6) (<= StartInt StartInt_3)))
   (Start_2 String ("b" (str.++ Start_3 Start_2) (str.replace Start_1 Start_3 Start_4) (str.from_int StartInt_4)))
   (Start_1 String ("0" x y (str.at Start StartInt_1) (str.substr Start_2 StartInt StartInt) (str.from_int StartInt_2) (ite StartBool Start_2 Start)))
   (StartBool_2 Bool (true (not StartBool_2) (str.prefixof Start_6 Start_7) (str.suffixof Start_2 Start_7) (str.contains Start_2 Start)))
   (StartInt_2 Int (1 0 (str.indexof Start Start StartInt_3) (str.to_int Start)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_3 StartBool_3) (str.< Start_7 Start_1) (str.contains Start_3 Start_5) (= StartInt_3 StartInt_7) (<= StartInt_2 StartInt_3)))
   (StartInt_6 Int (1))
   (Start_5 String ("0" (str.substr Start_3 StartInt_6 StartInt_1) (str.replace Start_5 Start_4 Start_3)))
   (Start_7 String ("" y))
   (Start_4 String ("b" (str.++ Start_4 Start_3) (str.replace Start_4 Start Start_4) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_5 Int (0 1 (str.indexof Start_3 Start_1 StartInt_6) (str.to_int Start_5)))
   (Start_6 String ("" (str.++ Start_5 Start_5) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_7 StartInt_6) (str.replace Start_3 Start_5 Start) (str.from_int StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" x y)))

(check-synth)
