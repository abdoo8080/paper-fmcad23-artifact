(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_22 String) (Start_2 String) (Start_4 String) (Start_12 String) (StartInt_5 Int) (Start_23 String) (StartInt_2 Int) (Start_10 String) (Start_1 String) (Start_9 String) (Start_17 String) (Start_7 String) (StartInt_1 Int) (StartInt_3 Int) (Start_5 String) (Start_8 String) (Start_19 String) (Start_16 String) (StartBool_1 Bool) (StartInt_6 Int) (Start_13 String) (Start_15 String) (Start_14 String) (StartInt_7 Int) (StartInt_10 Int) (StartInt_4 Int) (StartInt_8 Int) (StartBool_2 Bool) (Start_6 String) (Start_18 String) (Start_21 String) (Start_3 String) (Start_11 String) (Start_20 String) (StartInt_9 Int) (StartBool_3 Bool))
  ((Start String ("a" "b" "" (str.++ Start_1 Start_1) (str.at Start StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start Start_1 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (1 (str.indexof Start_2 Start_21 StartInt_2)))
   (StartBool Bool (true false (and StartBool_2 StartBool_2) (str.< Start_15 Start_14) (str.<= Start_10 Start_16) (str.suffixof Start_12 Start_15) (str.contains Start_4 Start_23)))
   (Start_22 String ("" y (str.++ Start Start_14) (str.at Start_13 StartInt_4) (str.replace Start_21 Start_12 Start_9) (str.from_int StartInt_10)))
   (Start_2 String (x (str.at Start_16 StartInt_8) (str.from_int StartInt_9)))
   (Start_4 String ("b" (str.++ Start_15 Start_1) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_20 Start_7 Start_13) (str.from_int StartInt_10)))
   (Start_12 String ("b" (str.++ Start_2 Start_1) (str.substr Start_7 StartInt_3 StartInt) (str.replace Start_13 Start_9 Start_4) (str.from_int StartInt_4)))
   (StartInt_5 Int (0 (str.to_int Start_7)))
   (Start_23 String (y "b" (str.replace Start Start_12 Start_7)))
   (StartInt_2 Int (0 (str.len Start_8) (str.indexof Start_1 Start_4 StartInt_1) (str.to_int Start_5)))
   (Start_10 String ("" "a" (str.++ Start_7 Start) (str.substr Start_2 StartInt_5 StartInt_4)))
   (Start_1 String ("1" (str.replace Start_5 Start_1 Start_1)))
   (Start_9 String ("a" "" (str.++ Start_5 Start_1) (ite StartBool_2 Start_10 Start_2)))
   (Start_17 String ("0" "" (str.++ Start_3 Start_17) (str.replace Start_1 Start_2 Start_3)))
   (Start_7 String ("a" "b" y "0" "1" x "" (str.++ Start_8 Start_1) (str.substr Start_7 StartInt_4 StartInt_2) (str.replace Start_9 Start_8 Start_3) (str.from_int StartInt_3) (ite StartBool Start_3 Start_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_10 Start_5 StartInt_3) (str.to_int Start_22)))
   (StartInt_3 Int (1 0 (str.to_int Start_2)))
   (Start_5 String (y (str.++ Start_5 Start_6) (str.at Start_2 StartInt_1) (str.replace Start_7 Start Start_7) (str.from_int StartInt_2) (ite StartBool Start Start_8)))
   (Start_8 String (x (str.++ Start Start_3) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_3)))
   (Start_19 String (x (str.++ Start_20 Start_4) (str.at Start_21 StartInt_5) (str.substr Start_5 StartInt_2 StartInt_7) (str.replace Start_19 Start_20 Start_12) (str.from_int StartInt_3)))
   (Start_16 String (y "1" (str.++ Start_16 Start_5) (str.at Start_2 StartInt) (str.replace Start_15 Start_8 Start_18) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false (and StartBool StartBool_1) (str.< Start_2 Start_1) (str.suffixof Start_3 Start_2) (str.contains Start_2 Start_2) (= Start_4 Start_5) (<= StartInt_1 StartInt)))
   (StartInt_6 Int (1 0))
   (Start_13 String ("0" (str.substr Start_13 StartInt_2 StartInt_6) (str.replace Start_6 Start_14 Start) (ite StartBool Start_6 Start_8)))
   (Start_15 String (x "0" "b" (str.substr Start_2 StartInt_4 StartInt_1) (str.from_int StartInt_1)))
   (Start_14 String ("1" (str.++ Start_14 Start) (str.at Start_14 StartInt_7) (str.from_int StartInt_5)))
   (StartInt_7 Int (0 1 (str.indexof Start_3 Start_15 StartInt_8)))
   (StartInt_10 Int (0 1 (str.len Start_4) (str.to_int Start_12)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.to_int Start_10)))
   (StartInt_8 Int (0))
   (StartBool_2 Bool (true false (not StartBool_2) (str.< Start_11 Start_10) (str.prefixof Start_3 Start_6) (str.suffixof Start_7 Start_4) (= Start_12 Start_4) (<= StartInt StartInt_4)))
   (Start_6 String (y "1" (str.++ Start_6 Start) (str.replace Start_16 Start_16 Start_17)))
   (Start_18 String ("b" (str.++ Start_10 Start_11) (ite StartBool_3 Start_5 Start_19)))
   (Start_21 String ("a" y "b" "0" "1" "" x (str.from_int StartInt_6)))
   (Start_3 String ("1" (str.++ Start_18 Start_20) (str.substr Start_20 StartInt_2 StartInt_1)))
   (Start_11 String ("" (str.++ Start_12 Start_3) (str.at Start_15 StartInt) (str.substr Start_4 StartInt StartInt_4) (str.replace Start_6 Start_4 Start_8)))
   (Start_20 String ("" "0" y "1" (str.at Start_18 StartInt_3) (str.substr Start_11 StartInt_7 StartInt_9) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt_5)))
   (StartInt_9 Int (0))
   (StartBool_3 Bool (true false (str.< Start_9 Start_19) (str.suffixof Start_11 Start_14) (= Start_19 Start_20) (= StartInt StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.indexof "0" x 1))))

(check-synth)
