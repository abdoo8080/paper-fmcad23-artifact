(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_1 Int) (Start_1 String) (StartInt_2 Int) (Start_10 String) (Start_11 String) (StartInt_8 Int) (Start_8 String) (StartBool_4 Bool) (Start_9 String) (StartInt_6 Int) (Start_7 String) (StartInt_7 Int) (StartInt_3 Int) (Start_4 String) (Start_3 String) (StartBool_3 Bool) (Start_6 String) (Start_2 String) (StartInt_4 Int) (StartBool_2 Bool) (StartInt_5 Int) (Start_5 String) (StartBool_5 Bool) (StartBool_1 Bool))
  ((Start String ("a" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_1) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (1 0 (str.len Start_12) (str.to_int Start_11)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_5 StartBool_2) (str.contains Start_3 Start) (= Start_10 Start_8)))
   (Start_12 String ("1" "a" (str.++ Start_4 Start_1) (str.replace Start_10 Start_7 Start_10)))
   (StartInt_1 Int (0 (str.len Start_11)))
   (Start_1 String ("0" "a" "" y (str.substr Start_10 StartInt_8 StartInt_1) (str.replace Start Start_9 Start_3) (str.from_int StartInt_6) (ite StartBool_4 Start_6 Start_10)))
   (StartInt_2 Int (1 (str.to_int Start_5)))
   (Start_10 String ("b" y (str.++ Start_6 Start_10) (str.substr Start_1 StartInt_3 StartInt_2) (str.replace Start Start_2 Start_10) (str.from_int StartInt_7)))
   (Start_11 String ("a" (str.at Start_5 StartInt_4) (str.from_int StartInt_3) (ite StartBool_5 Start_8 Start_6)))
   (StartInt_8 Int (1 0 (str.len Start_10)))
   (Start_8 String (x y (str.substr Start_10 StartInt StartInt_6) (str.from_int StartInt_1)))
   (StartBool_4 Bool (false true (str.suffixof Start_2 Start) (str.contains Start_7 Start_3) (= Start_7 Start_7) (= StartInt_2 StartInt_1) (<= StartInt_4 StartInt_4)))
   (Start_9 String (y "1" (str.at Start_4 StartInt_2) (str.replace Start_3 Start_7 Start_1) (ite StartBool_4 Start_3 Start_6)))
   (StartInt_6 Int (0 1 (str.indexof Start_5 Start_3 StartInt)))
   (Start_7 String ("" (str.at Start_4 StartInt_5) (str.replace Start_1 Start Start_1) (ite StartBool_2 Start_2 Start_6)))
   (StartInt_7 Int (0 (str.indexof Start_2 Start_10 StartInt_5)))
   (StartInt_3 Int (1 0 (str.len Start_4) (str.to_int Start_1)))
   (Start_4 String (x "1" (str.++ Start Start_2) (str.at Start StartInt) (str.substr Start_3 StartInt_2 StartInt_3) (ite StartBool Start_4 Start_1)))
   (Start_3 String (x (str.at Start_5 StartInt_3) (str.substr Start_2 StartInt_1 StartInt_3) (str.from_int StartInt_1) (ite StartBool Start_6 Start_6)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.contains Start Start_5) (<= StartInt_2 StartInt_5)))
   (Start_6 String (y (str.++ Start_5 Start_6) (str.from_int StartInt_3) (ite StartBool_2 Start_1 Start_5)))
   (Start_2 String ("0" (str.++ Start Start) (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_3) (ite StartBool Start Start_3)))
   (StartInt_4 Int (1 (str.len Start_6) (str.to_int Start_5)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_1) (str.< Start_3 Start_7) (str.<= Start_7 Start_3) (str.prefixof Start_4 Start) (= StartInt_3 StartInt_4)))
   (StartInt_5 Int (1 0 (str.indexof Start_6 Start_3 StartInt_5)))
   (Start_5 String ("a" (str.++ Start_7 Start) (str.at Start_4 StartInt_5) (str.replace Start_7 Start Start_4) (str.from_int StartInt)))
   (StartBool_5 Bool (true false (str.< Start_3 Start_5) (str.suffixof Start_2 Start_2) (= Start_8 Start_9)))
   (StartBool_1 Bool (true (not StartBool_3) (and StartBool_3 StartBool_2) (str.< Start Start_3) (str.prefixof Start_8 Start_2) (str.suffixof Start_4 Start_7) (str.contains Start_9 Start_7) (= StartInt_1 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y "a" "0") "0" "1")))

(check-synth)
