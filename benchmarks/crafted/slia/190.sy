(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_3 String) (StartInt_1 Int) (Start_2 String) (Start_8 String) (Start_4 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_7 String) (Start_9 String) (Start_6 String) (Start_10 String) (StartInt_3 Int) (StartInt_2 Int) (Start_5 String))
  ((Start String ("" (str.++ Start Start) (str.replace Start_1 Start Start) (str.from_int StartInt) (ite StartBool Start_2 Start)))
   (StartInt Int (1 0 (str.len Start_3) (str.to_int Start_8)))
   (StartBool Bool (true (and StartBool_1 StartBool) (str.< Start Start_5) (str.<= Start_6 Start_9) (str.prefixof Start_2 Start_1) (str.suffixof Start_7 Start_1) (= Start_1 Start_10)))
   (Start_1 String ("0" "b" "" "a" y (str.++ Start_2 Start_4) (str.substr Start_3 StartInt_4 StartInt_1) (str.replace Start_8 Start_8 Start_9)))
   (Start_3 String ("" (str.at Start_1 StartInt_2) (str.substr Start_7 StartInt_4 StartInt_1) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_1 Int (1 (str.to_int Start_3)))
   (Start_2 String ("0" (str.++ Start_3 Start) (str.at Start_2 StartInt_1) (str.replace Start_4 Start Start_2) (str.from_int StartInt)))
   (Start_8 String (y "" "a" (str.at Start_10 StartInt) (str.substr Start_7 StartInt_2 StartInt_2)))
   (Start_4 String ("1" x "" "0" (str.++ Start Start) (str.at Start_4 StartInt_1) (str.substr Start_5 StartInt_2 StartInt_2) (str.replace Start_3 Start_3 Start) (str.from_int StartInt_1) (ite StartBool_1 Start Start_3)))
   (StartBool_1 Bool (false (not StartBool) (str.<= Start_6 Start_3) (str.prefixof Start_5 Start_1) (str.suffixof Start_1 Start) (str.contains Start_1 Start_7) (= StartInt_2 StartInt_3)))
   (StartInt_4 Int (0 (str.to_int Start_8)))
   (Start_7 String ("b" (str.++ Start_7 Start_3) (str.substr Start_5 StartInt_1 StartInt_1) (str.replace Start Start_3 Start_1) (str.from_int StartInt_2)))
   (Start_9 String ("a" (str.++ Start_5 Start_7) (str.at Start_2 StartInt_2) (str.substr Start_5 StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (Start_6 String (x (str.++ Start_7 Start_8) (str.substr Start_9 StartInt_1 StartInt_2) (str.from_int StartInt)))
   (Start_10 String ("0" "a" (str.from_int StartInt) (ite StartBool_1 Start_9 Start_9)))
   (StartInt_3 Int (0 (str.to_int Start_7)))
   (StartInt_2 Int (0 (str.len Start_2) (str.to_int Start_10)))
   (Start_5 String (x y (str.at Start_9 StartInt) (str.substr Start_5 StartInt_4 StartInt) (str.replace Start_2 Start_3 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at "a" (str.indexof "0" x 1)) "b")))

(check-synth)
