(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_1 String) (StartBool_3 Bool) (Start_2 String) (Start_3 String) (StartInt_5 Int) (Start_12 String) (Start_13 String) (Start_10 String) (StartInt_1 Int) (Start_7 String) (Start_4 String) (Start_8 String) (StartInt_3 Int) (StartInt_6 Int) (StartInt_4 Int) (Start_6 String) (StartInt_2 Int) (Start_5 String) (Start_11 String) (Start_9 String) (StartBool_1 Bool) (StartBool_2 Bool))
  ((Start String (y (str.++ Start Start_1) (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt_2) (ite StartBool Start_2 Start_2)))
   (StartInt Int (1 0 (str.len Start_13) (str.indexof Start_7 Start_5 StartInt_2)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_3 StartBool_2) (str.prefixof Start_6 Start_8) (str.suffixof Start_5 Start_13)))
   (StartInt_7 Int (0 (str.len Start_7)))
   (Start_1 String ("0" x "a" y (str.++ Start_5 Start_4) (str.at Start_7 StartInt) (str.substr Start_13 StartInt StartInt_7) (str.replace Start_12 Start_7 Start_13)))
   (StartBool_3 Bool (false true (str.< Start_1 Start_9) (str.prefixof Start_5 Start_1) (str.suffixof Start_1 Start_12) (<= StartInt_1 StartInt_5)))
   (Start_2 String ("0" (str.substr Start_2 StartInt_5 StartInt_5) (str.replace Start_1 Start_5 Start_3) (str.from_int StartInt_6) (ite StartBool_3 Start_3 Start_12)))
   (Start_3 String ("" "a" "b" (str.substr Start StartInt_3 StartInt_3) (str.replace Start_5 Start_5 Start) (ite StartBool_2 Start_13 Start_11)))
   (StartInt_5 Int (0 1))
   (Start_12 String ("b" (str.++ Start_8 Start_3) (str.at Start_1 StartInt_4) (str.substr Start_6 StartInt_3 StartInt_1)))
   (Start_13 String ("0" (str.++ Start_2 Start_7) (str.at Start_4 StartInt) (str.from_int StartInt_1)))
   (Start_10 String ("1" (str.++ Start_5 Start_4) (str.replace Start_4 Start Start_1) (ite StartBool_1 Start_12 Start_12)))
   (StartInt_1 Int (0 1 (str.indexof Start_9 Start StartInt_2) (str.to_int Start_8)))
   (Start_7 String ("" y (str.++ Start_3 Start_1) (str.at Start_3 StartInt_3) (str.replace Start_8 Start_3 Start_3) (str.from_int StartInt_3) (ite StartBool Start_2 Start_2)))
   (Start_4 String (x "1" "0" (str.substr Start_5 StartInt_2 StartInt_2) (str.replace Start_2 Start_6 Start_2) (str.from_int StartInt_2) (ite StartBool Start_7 Start_1)))
   (Start_8 String ("0" (ite StartBool Start_6 Start_5)))
   (StartInt_3 Int (0 1 (str.to_int Start)))
   (StartInt_6 Int (1 (str.to_int Start_10)))
   (StartInt_4 Int (0 (str.len Start_10) (str.to_int Start_1)))
   (Start_6 String ("" (str.++ Start_5 Start_6) (str.replace Start_2 Start_2 Start_4)))
   (StartInt_2 Int (1 (str.indexof Start Start_4 StartInt_1) (str.to_int Start)))
   (Start_5 String (y (str.++ Start_2 Start_1) (str.substr Start_4 StartInt_1 StartInt_2)))
   (Start_11 String ("1" y "b" "0" "" x "a" (str.at Start_2 StartInt_3) (str.substr Start StartInt_3 StartInt_2) (str.replace Start_5 Start_10 Start_2) (str.from_int StartInt) (ite StartBool_2 Start_8 Start_2)))
   (Start_9 String ("b" (str.at Start_4 StartInt_3) (str.substr Start StartInt_4 StartInt_3) (str.replace Start_3 Start_10 Start_8) (str.from_int StartInt_2) (ite StartBool_1 Start_8 Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.<= Start_1 Start_5) (str.prefixof Start_10 Start_11) (= Start_7 Start_10)))
   (StartBool_2 Bool (false (str.< Start_1 Start_9) (str.<= Start_1 Start_3) (str.prefixof Start_12 Start) (str.contains Start_7 Start_13) (<= StartInt_3 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "" (str.++ y x))))

(check-synth)
