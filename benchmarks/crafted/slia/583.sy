(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (Start_2 String) (Start_3 String) (StartBool_3 Bool) (StartInt_3 Int) (Start_13 String) (Start_12 String) (Start_11 String) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_2 Int) (Start_5 String) (Start_7 String) (Start_10 String) (Start_8 String) (Start_6 String) (StartInt_7 Int) (Start_4 String) (Start_9 String) (StartInt_4 Int) (StartInt_8 Int) (StartInt_6 Int))
  ((Start String (x "" (str.++ Start_1 Start) (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 (str.indexof Start_10 Start_8 StartInt_6) (str.to_int Start_13)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (str.contains Start Start_5) (= Start_4 Start) (<= StartInt_6 StartInt_7)))
   (Start_1 String (y "1" (str.at Start_4 StartInt) (ite StartBool_3 Start_10 Start_9)))
   (StartInt_1 Int (0))
   (Start_2 String ("1" x (str.++ Start_11 Start_8) (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt StartInt_8) (ite StartBool_2 Start_13 Start_11)))
   (Start_3 String ("b" (str.++ Start_8 Start_9) (str.at Start_9 StartInt_3) (str.replace Start_9 Start_10 Start_11)))
   (StartBool_3 Bool (true (not StartBool_1) (str.< Start_11 Start_6) (str.<= Start_11 Start_6) (= StartInt StartInt_1) (<= StartInt StartInt_4)))
   (StartInt_3 Int (1))
   (Start_13 String (y (str.replace Start_11 Start_8 Start_6)))
   (Start_12 String ("a" "" "1" (str.substr Start_6 StartInt_1 StartInt_7) (str.from_int StartInt_4) (ite StartBool_3 Start_13 Start_4)))
   (Start_11 String ("a" (str.at Start_12 StartInt_5) (str.replace Start_11 Start_4 Start) (str.from_int StartInt_3) (ite StartBool_2 Start_11 Start_4)))
   (StartBool_2 Bool (false true (str.<= Start Start_2) (str.prefixof Start Start_4) (str.suffixof Start_1 Start_2) (= Start_3 Start_2) (<= StartInt_3 StartInt_5)))
   (StartBool_1 Bool (false true (str.< Start_2 Start_3) (str.<= Start_2 Start_3) (str.prefixof Start_4 Start_2) (str.suffixof Start_3 Start_1) (= Start_3 Start_1) (= StartInt_2 StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_2) (str.to_int Start_7)))
   (StartInt_2 Int (1 (str.len Start_13) (str.indexof Start_1 Start_2 StartInt_1)))
   (Start_5 String (y "0" (str.at Start_1 StartInt) (str.substr Start_1 StartInt_3 StartInt_4) (str.replace Start_6 Start_6 Start_3) (str.from_int StartInt) (ite StartBool_2 Start_6 Start_1)))
   (Start_7 String (x "1" (str.at Start_4 StartInt_6) (str.substr Start StartInt_4 StartInt_1) (str.replace Start_7 Start_1 Start_8)))
   (Start_10 String (y x (str.++ Start Start_1) (str.substr Start_2 StartInt_7 StartInt_3) (str.replace Start_3 Start_6 Start_1) (ite StartBool_1 Start_9 Start_8)))
   (Start_8 String ("a" (str.++ Start_1 Start_9) (str.substr Start_8 StartInt_7 StartInt_7) (str.replace Start_3 Start_3 Start_2) (ite StartBool Start_3 Start_2)))
   (Start_6 String ("b" (str.++ Start_4 Start_7) (str.at Start_10 StartInt_1) (str.substr Start_8 StartInt_2 StartInt) (str.replace Start_3 Start_9 Start)))
   (StartInt_7 Int (1 (str.to_int Start_2)))
   (Start_4 String ("b" "1" (str.++ Start_5 Start_2) (str.substr Start_5 StartInt_2 StartInt_2)))
   (Start_9 String ("a" "b" (str.++ Start_8 Start_1) (str.at Start_4 StartInt_1) (str.substr Start_2 StartInt_8 StartInt_5)))
   (StartInt_4 Int (1 (str.len Start_10) (str.indexof Start_5 Start_11 StartInt)))
   (StartInt_8 Int (0))
   (StartInt_6 Int (1 0 (str.len Start_7) (str.indexof Start_6 Start_7 StartInt_2) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< y "0") "1" x)))

(check-synth)
