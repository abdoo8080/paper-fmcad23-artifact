(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_7 String) (StartInt_4 Int) (StartBool_3 Bool) (Start_8 String) (StartInt_8 Int) (Start_9 String) (StartInt_5 Int) (StartInt_2 Int) (StartInt_1 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_5 String) (StartBool_4 Bool) (Start_4 String) (StartInt_3 Int) (StartInt_7 Int) (Start_1 String) (Start_11 String) (Start_6 String) (Start_10 String) (Start_12 String) (StartInt_6 Int) (Start_15 String) (Start_3 String) (Start_13 String) (Start_14 String) (Start_2 String) (Start_16 String))
  ((Start String ("0" (str.++ Start_1 Start_2) (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_1) (ite StartBool_1 Start_4 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_17 Start_15 StartInt_8)))
   (StartBool Bool (false (not StartBool_3) (and StartBool StartBool_2) (str.prefixof Start Start_14) (= Start_17 Start_9)))
   (Start_17 String (x "" (str.++ Start_4 Start_17) (str.at Start_7 StartInt_3)))
   (Start_7 String ("b" (str.++ Start_5 Start_6) (str.substr Start_9 StartInt_1 StartInt_2) (str.replace Start_3 Start_6 Start_3) (str.from_int StartInt) (ite StartBool Start_1 Start_10)))
   (StartInt_4 Int (0 (str.indexof Start_7 Start_4 StartInt_3) (str.to_int Start_2)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_2 StartBool_3) (str.<= Start_7 Start_2) (str.prefixof Start_9 Start_9) (str.suffixof Start_7 Start_4) (str.contains Start_5 Start_3) (= Start_2 Start_6) (<= StartInt_2 StartInt)))
   (Start_8 String (x (str.substr Start_7 StartInt StartInt) (str.replace Start_4 Start_4 Start_1) (str.from_int StartInt) (ite StartBool_3 Start_2 Start_4)))
   (StartInt_8 Int (0 1 (str.len Start_7) (str.to_int Start_12)))
   (Start_9 String ("1" (str.++ Start_1 Start_6) (str.at Start_9 StartInt_2) (str.substr Start_8 StartInt StartInt_3)))
   (StartInt_5 Int (0 (str.indexof Start_9 Start StartInt_6)))
   (StartInt_2 Int (0 1 (str.len Start_7) (str.indexof Start_2 Start_8 StartInt_2)))
   (StartInt_1 Int (0 (str.len Start_12) (str.to_int Start_13)))
   (StartBool_2 Bool (false true (str.<= Start_1 Start_4) (str.prefixof Start_2 Start_4) (str.suffixof Start_1 Start_6) (str.contains Start_2 Start) (= Start_4 Start_3) (<= StartInt_2 StartInt)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (str.prefixof Start_1 Start)))
   (Start_5 String ("b" "0" (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt)))
   (StartBool_4 Bool (true (str.<= Start_15 Start_15) (str.contains Start_13 Start_2) (= StartInt_3 StartInt_8)))
   (Start_4 String ("" (str.++ Start_5 Start_4) (str.substr Start_5 StartInt StartInt_1) (str.replace Start_1 Start_5 Start_3) (ite StartBool_1 Start_4 Start_3)))
   (StartInt_3 Int (1 (str.indexof Start_3 Start_4 StartInt_4)))
   (StartInt_7 Int (1 (str.len Start_12) (str.indexof Start_11 Start_9 StartInt_8) (str.to_int Start_3)))
   (Start_1 String ("0" (ite StartBool_4 Start_9 Start_5)))
   (Start_11 String (y "" (str.substr Start_5 StartInt_3 StartInt_2) (ite StartBool Start_3 Start_10)))
   (Start_6 String (x "0" "" (str.at Start_8 StartInt_5) (str.substr Start_4 StartInt_3 StartInt_5) (str.replace Start_6 Start_12 Start_2) (str.from_int StartInt_3)))
   (Start_10 String (y (str.++ Start_10 Start_7) (str.replace Start_6 Start Start_11)))
   (Start_12 String ("1" (str.at Start_4 StartInt_1) (str.substr Start_8 StartInt StartInt_2) (str.replace Start Start_4 Start_8) (str.from_int StartInt_5) (ite StartBool_3 Start Start_9)))
   (StartInt_6 Int (1 0 (str.indexof Start_3 Start StartInt_7) (str.to_int Start_4)))
   (Start_15 String (x (str.replace Start_4 Start Start_3) (ite StartBool_1 Start_7 Start_5)))
   (Start_3 String ("1" (str.at Start_3 StartInt_6) (str.substr Start_3 StartInt_3 StartInt_5) (ite StartBool_3 Start_8 Start_5)))
   (Start_13 String (x (str.replace Start_6 Start_10 Start_14)))
   (Start_14 String ("0" "" "a" (str.from_int StartInt_8) (ite StartBool Start_7 Start_15)))
   (Start_2 String ("a" (ite StartBool Start_5 Start_16)))
   (Start_16 String (y (str.from_int StartInt_6) (ite StartBool_4 Start_9 Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "0" "a")))

(check-synth)
