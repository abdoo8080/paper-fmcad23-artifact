(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_6 Int) (Start_1 String) (Start_2 String) (Start_3 String) (StartInt_2 Int) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_4 Int) (StartInt_1 Int) (Start_4 String) (Start_5 String) (Start_6 String) (Start_8 String) (Start_7 String))
  ((Start String ("1" (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_1 Start_2 Start)))
   (StartInt Int (0 (str.len Start_8) (str.indexof Start_9 Start_5 StartInt_6)))
   (StartBool Bool (true (and StartBool StartBool_1) (str.< Start_4 Start_1) (str.prefixof Start_5 Start_2) (= StartInt_1 StartInt)))
   (Start_9 String (y "b" "a" "" (str.++ Start_7 Start_8) (str.at Start_5 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_6 Start_9)))
   (StartInt_6 Int (1 (str.len Start_9)))
   (Start_1 String ("" y (str.substr Start_5 StartInt_1 StartInt) (str.replace Start_1 Start Start_3) (ite StartBool_1 Start_4 Start_3)))
   (Start_2 String ("0" (str.++ Start_2 Start) (str.substr Start_1 StartInt StartInt_2) (str.replace Start Start_3 Start_2) (ite StartBool Start_2 Start)))
   (Start_3 String ("" y "1" "a" x "b" "0" (str.replace Start_3 Start_1 Start) (ite StartBool Start Start_2)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.indexof Start Start_1 StartInt) (str.to_int Start_2)))
   (StartInt_3 Int (1 0 (str.indexof Start Start_3 StartInt) (str.to_int Start_5)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_1) (str.< Start_5 Start_4) (str.prefixof Start_5 Start_6) (<= StartInt StartInt_2)))
   (StartInt_5 Int (0))
   (StartInt_4 Int (1 (str.to_int Start_7)))
   (StartInt_1 Int (1 (str.to_int Start_4)))
   (Start_4 String ("a" (str.++ Start_2 Start_5) (str.at Start_2 StartInt_2) (str.substr Start_5 StartInt_3 StartInt_2)))
   (Start_5 String ("b" y (str.at Start_3 StartInt) (str.substr Start_1 StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start)))
   (Start_6 String (x (str.++ Start_1 Start_4) (str.at Start_3 StartInt_1) (str.substr Start_7 StartInt_4 StartInt_3) (str.replace Start_1 Start_1 Start_8) (str.from_int StartInt_3)))
   (Start_8 String ("1" (str.++ Start_6 Start_2) (str.at Start StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_8 Start_5)))
   (Start_7 String ("a" (str.++ Start Start) (str.replace Start_3 Start_8 Start_4) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof "a" y 0))))

(check-synth)
