(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_8 Int) (StartBool_4 Bool) (Start_8 String) (StartInt_4 Int) (StartInt_5 Int) (Start_10 String) (StartInt_7 Int) (StartInt_6 Int) (StartBool_3 Bool) (StartInt_2 Int) (Start_6 String) (Start_1 String) (StartInt_1 Int) (Start_9 String) (Start_5 String) (StartBool_1 Bool) (Start_4 String) (StartInt_3 Int) (Start_3 String) (Start_7 String) (StartBool_5 Bool) (StartBool_2 Bool) (Start_2 String))
  ((Start String ("b" (str.++ Start_1 Start_1) (str.replace Start_1 Start_2 Start_1) (ite StartBool_1 Start_1 Start_3)))
   (StartInt Int (1 0 (str.len Start_3) (str.indexof Start_10 Start_5 StartInt_6) (str.to_int Start_8)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_5 StartBool_1) (str.< Start_4 Start_3) (str.contains Start_8 Start_3) (= StartInt_1 StartInt_6)))
   (Start_11 String ("" (str.++ Start_1 Start_5) (str.at Start_5 StartInt) (str.from_int StartInt_6)))
   (StartInt_8 Int (1 0))
   (StartBool_4 Bool (false true (str.prefixof Start_10 Start_10) (str.contains Start_7 Start) (= Start_5 Start_10) (= StartInt_5 StartInt_4)))
   (Start_8 String ("" (str.++ Start_4 Start) (str.at Start_3 StartInt_3) (str.replace Start Start_2 Start_1)))
   (StartInt_4 Int (1 (str.len Start_10) (str.to_int Start_3)))
   (StartInt_5 Int (0 1))
   (Start_10 String ("1" "b" (str.at Start_6 StartInt_3) (str.substr Start StartInt_1 StartInt_3) (str.replace Start_2 Start_8 Start_8) (ite StartBool_2 Start Start_7)))
   (StartInt_7 Int (1 0 (str.len Start_10)))
   (StartInt_6 Int (1 (str.indexof Start Start_10 StartInt_3)))
   (StartBool_3 Bool (true (str.<= Start_5 Start_5) (= StartInt_6 StartInt_5) (<= StartInt_4 StartInt_4)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.indexof Start_6 Start_3 StartInt_1) (str.to_int Start_6)))
   (Start_6 String ("1" "a" x (str.at Start_2 StartInt_1) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_5 Start_5)))
   (Start_1 String ("1" "b" (str.at Start_8 StartInt_3) (str.from_int StartInt_7) (ite StartBool_4 Start_10 Start_10)))
   (StartInt_1 Int (1 (str.len Start_3) (str.indexof Start_1 Start_1 StartInt_1) (str.to_int Start_4)))
   (Start_9 String ("a" (str.++ Start_3 Start_9) (str.at Start_7 StartInt_4) (str.substr Start_8 StartInt StartInt_5) (ite StartBool_3 Start_6 Start_4)))
   (Start_5 String ("a" "0" (str.++ Start_4 Start_6) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_4 Start_6 Start_2)))
   (StartBool_1 Bool (false true (str.<= Start_7 Start_6) (str.prefixof Start_6 Start_6) (str.suffixof Start_7 Start_1) (str.contains Start_4 Start_3) (= Start_4 Start_3) (<= StartInt StartInt_1)))
   (Start_4 String ("a" (str.++ Start_4 Start_3) (str.from_int StartInt_1)))
   (StartInt_3 Int (1 0 (str.indexof Start_4 Start_9 StartInt_2) (str.to_int Start_5)))
   (Start_3 String (x (str.at Start_1 StartInt_1) (str.replace Start_4 Start_1 Start_5) (str.from_int StartInt_2)))
   (Start_7 String (y x (str.++ Start_2 Start_5) (str.at Start_2 StartInt_2) (str.replace Start_3 Start_7 Start_3) (ite StartBool Start_4 Start_5)))
   (StartBool_5 Bool (true false (not StartBool_4) (str.< Start_4 Start_1) (str.<= Start_9 Start_6) (str.suffixof Start_3 Start_1) (= Start_4 Start_11) (<= StartInt_8 StartInt_7)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_1) (str.< Start Start_4) (str.contains Start_8 Start_5) (<= StartInt_3 StartInt_3)))
   (Start_2 String ("1" (str.at Start_5 StartInt_2) (ite StartBool_2 Start_3 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.substr x 1 (str.indexof x "a" (str.indexof y "a" 0))) 0)))

(check-synth)
