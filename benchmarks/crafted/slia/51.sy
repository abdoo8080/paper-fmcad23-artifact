(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_19 String) (StartInt_4 Int) (StartInt_5 Int) (Start_15 String) (StartInt_3 Int) (Start_9 String) (Start_1 String) (Start_6 String) (StartInt_6 Int) (Start_7 String) (Start_5 String) (Start_8 String) (Start_3 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_10 String) (Start_12 String) (Start_11 String) (Start_13 String) (Start_18 String) (StartInt_7 Int) (Start_4 String) (Start_16 String) (Start_2 String) (Start_17 String) (Start_14 String) (StartBool_2 Bool) (StartInt_2 Int) (StartInt_9 Int) (StartInt_8 Int))
  ((Start String (y (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 (str.indexof Start_15 Start_16 StartInt)))
   (StartBool Bool (true false (and StartBool_2 StartBool_3) (str.prefixof Start_18 Start_6) (str.contains Start_3 Start_5) (= Start_16 Start_5) (<= StartInt StartInt_4)))
   (StartBool_3 Bool (true (str.prefixof Start_10 Start_1) (str.suffixof Start_11 Start_4) (str.contains Start_6 Start_2) (= Start_2 Start_16) (= StartInt_3 StartInt_8)))
   (Start_19 String ("" "a" "1" (str.++ Start_9 Start_18) (str.at Start_5 StartInt_9) (str.substr Start_1 StartInt_7 StartInt_5) (str.replace Start_3 Start_7 Start_5) (str.from_int StartInt_1) (ite StartBool_2 Start_6 Start_6)))
   (StartInt_4 Int (1 (str.indexof Start_6 Start_1 StartInt) (str.to_int Start_5)))
   (StartInt_5 Int (0 (str.len Start_5) (str.indexof Start_3 Start_6 StartInt_2) (str.to_int Start_3)))
   (Start_15 String ("a" (str.++ Start_11 Start_3) (str.replace Start_12 Start_8 Start_9)))
   (StartInt_3 Int (0 (str.to_int Start_8)))
   (Start_9 String ("" (str.at Start_9 StartInt_1) (str.replace Start_2 Start_1 Start_2)))
   (Start_1 String (y "0" "1" (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_1 Start_2) (ite StartBool_1 Start_3 Start)))
   (Start_6 String ("b" "0" (str.++ Start_6 Start_8) (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt_4 StartInt_5) (ite StartBool Start_8 Start_3)))
   (StartInt_6 Int (1 0 (str.len Start)))
   (Start_7 String ("1" (str.at Start_7 StartInt_5) (ite StartBool_1 Start_6 Start_8)))
   (Start_5 String (x))
   (Start_8 String (y (str.++ Start_9 Start_9) (str.from_int StartInt_6)))
   (Start_3 String ("1" y "b" (str.++ Start_4 Start) (str.replace Start_2 Start_5 Start_2)))
   (StartInt_1 Int (0 (str.len Start_6) (str.indexof Start_7 Start_3 StartInt_8) (str.to_int Start_15)))
   (StartBool_1 Bool (false (str.prefixof Start_10 Start_4) (str.contains Start Start_3)))
   (Start_10 String ("0" (str.substr Start_2 StartInt_7 StartInt_1) (str.replace Start_5 Start_8 Start_11) (str.from_int StartInt_2) (ite StartBool Start_12 Start_4)))
   (Start_12 String (y "0" "1" x (str.++ Start_9 Start_12) (ite StartBool Start_6 Start_2)))
   (Start_11 String ("b" "a" y "" (str.++ Start_13 Start_6) (str.at Start_5 StartInt_5) (str.from_int StartInt_5)))
   (Start_13 String ("1" (str.at Start_2 StartInt) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_3 Start_13 Start_1) (ite StartBool_2 Start_4 Start_4)))
   (Start_18 String ("b" (str.++ Start_13 Start_17) (str.substr Start_14 StartInt StartInt_6)))
   (StartInt_7 Int (1 0 (str.indexof Start_13 Start_3 StartInt_7) (str.to_int Start_9)))
   (Start_4 String (x (str.++ Start_6 Start) (str.at Start StartInt_3) (str.substr Start_5 StartInt_4 StartInt_3) (str.replace Start_3 Start_7 Start_2) (ite StartBool_1 Start_3 Start_7)))
   (Start_16 String ("1" "0" y "a" x (str.++ Start_6 Start) (str.at Start_8 StartInt_3) (str.substr Start_11 StartInt_6 StartInt_9) (str.replace Start_3 Start_12 Start_10) (str.from_int StartInt_6) (ite StartBool_3 Start_17 Start_18)))
   (Start_2 String ("a" (str.substr Start_12 StartInt_4 StartInt_3) (str.replace Start_3 Start_1 Start_11) (ite StartBool Start_14 Start_8)))
   (Start_17 String ("b" (str.++ Start_8 Start_19) (str.replace Start_14 Start_5 Start_6) (str.from_int StartInt_8) (ite StartBool_3 Start_15 Start_5)))
   (Start_14 String (y (str.++ Start_12 Start_5) (str.replace Start_1 Start_8 Start_2) (str.from_int StartInt_5)))
   (StartBool_2 Bool (true false (and StartBool StartBool_1) (str.prefixof Start_13 Start_3) (str.contains Start Start_10) (<= StartInt_5 StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_9) (str.indexof Start_12 Start_12 StartInt)))
   (StartInt_9 Int (1 (str.len Start_12) (str.indexof Start_12 Start_18 StartInt_5) (str.to_int Start_14)))
   (StartInt_8 Int (1 (str.indexof Start_4 Start_15 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof x "a") "a" "b")))

(check-synth)
