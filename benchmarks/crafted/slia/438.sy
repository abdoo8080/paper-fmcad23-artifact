(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_9 Int) (Start_5 String) (Start_8 String) (Start_10 String) (StartInt_6 Int) (StartBool_3 Bool) (Start_1 String) (Start_2 String) (Start_12 String) (StartInt_5 Int) (StartInt_8 Int) (StartInt_2 Int) (StartInt_7 Int) (Start_6 String) (Start_4 String) (StartInt_3 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_3 String) (Start_7 String) (StartInt_1 Int) (Start_9 String) (StartInt_4 Int) (Start_11 String))
  ((Start String ("0" (str.from_int StartInt_1)))
   (StartInt Int (1 (str.indexof Start_7 Start_8 StartInt_7) (str.to_int Start_6)))
   (StartBool Bool (false (not StartBool_2) (str.< Start_5 Start_4) (str.suffixof Start_11 Start) (= Start_3 Start)))
   (StartBool_4 Bool (false true (str.< Start_9 Start_11)))
   (StartInt_9 Int (0 (str.len Start_8) (str.to_int Start_3)))
   (Start_5 String ("a" (str.++ Start_2 Start_4) (str.substr Start_11 StartInt StartInt_6) (str.from_int StartInt_7)))
   (Start_8 String (y (str.replace Start_1 Start Start_11)))
   (Start_10 String ("a" (str.at Start_4 StartInt_4)))
   (StartInt_6 Int (0))
   (StartBool_3 Bool (false (str.< Start_9 Start_7) (str.<= Start Start_8) (str.suffixof Start_7 Start_8) (str.contains Start_5 Start_1) (= StartInt_2 StartInt_6) (<= StartInt_5 StartInt_1)))
   (Start_1 String ("0" "1" "a" "b" (str.++ Start_2 Start_1) (str.replace Start Start_2 Start_2)))
   (Start_2 String ("0" (str.++ Start_1 Start) (str.at Start_3 StartInt_2) (str.from_int StartInt)))
   (Start_12 String ("0" (str.at Start_10 StartInt_9) (str.substr Start_5 StartInt_6 StartInt_2) (str.from_int StartInt)))
   (StartInt_5 Int (0 (str.indexof Start Start_3 StartInt_5) (str.to_int Start_6)))
   (StartInt_8 Int (1 (str.len Start_4)))
   (StartInt_2 Int (1 (str.indexof Start_1 Start_4 StartInt_2) (str.to_int Start_1)))
   (StartInt_7 Int (0 (str.len Start_8) (str.to_int Start_3)))
   (Start_6 String (y "1" (str.replace Start_2 Start_9 Start_10)))
   (Start_4 String (y "0" (str.++ Start_3 Start_2) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_3 Int (0 1 (str.to_int Start_9)))
   (StartBool_2 Bool (false (not StartBool_3) (str.< Start_7 Start_7) (str.<= Start_3 Start_10) (str.contains Start_6 Start_11) (= Start Start_1) (= StartInt_4 StartInt_3) (<= StartInt_5 StartInt)))
   (StartBool_1 Bool (true false (not StartBool) (str.< Start_3 Start_3) (str.<= Start_3 Start_4) (str.prefixof Start_4 Start_3) (str.suffixof Start_5 Start_1) (str.contains Start_2 Start_6) (<= StartInt_4 StartInt_1)))
   (Start_3 String ("" (str.++ Start_6 Start_6) (str.from_int StartInt_8) (ite StartBool_4 Start_12 Start_11)))
   (Start_7 String ("1" (str.++ Start_5 Start_8) (str.at Start_3 StartInt_3) (str.replace Start_7 Start_9 Start_8) (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.len Start_1)))
   (Start_9 String ("1" (str.substr Start_10 StartInt_1 StartInt_2) (str.replace Start_1 Start_4 Start_9) (ite StartBool_2 Start_7 Start_3)))
   (StartInt_4 Int (1 0 (str.indexof Start Start_7 StartInt_1) (str.to_int Start_3)))
   (Start_11 String (y "1" (str.at Start_2 StartInt_2) (str.substr Start_1 StartInt_4 StartInt_1) (ite StartBool_3 Start_11 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.replace x "0" "b"))))

(check-synth)
