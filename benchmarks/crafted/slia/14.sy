(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (Start_5 String) (Start_10 String) (StartInt_7 Int) (Start_9 String) (Start_8 String) (StartInt_1 Int) (StartInt_4 Int) (Start_3 String) (Start_6 String) (StartInt_2 Int) (Start_4 String) (Start_1 String) (Start_11 String) (StartInt_3 Int) (StartInt_5 Int) (StartInt_6 Int) (Start_7 String))
  ((Start String ("b" "a" (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartInt Int (1 0 (str.len Start) (str.indexof Start_1 Start StartInt_2)))
   (StartBool Bool (false true (str.<= Start_1 Start_7) (str.prefixof Start_7 Start_7) (str.suffixof Start_2 Start_7) (= StartInt_2 StartInt_5)))
   (Start_2 String (x (str.++ Start_6 Start_9) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_11 Start_5 Start_7) (str.from_int StartInt_5) (ite StartBool Start_7 Start_9)))
   (Start_5 String ("" "a" (str.++ Start_6 Start_8) (str.at Start_10 StartInt_4)))
   (Start_10 String ("a" (str.at Start StartInt_6)))
   (StartInt_7 Int (1 0))
   (Start_9 String ("b" (str.++ Start_1 Start_2) (str.at Start_10 StartInt_1) (str.from_int StartInt_7)))
   (Start_8 String ("0" "" (str.at Start_2 StartInt_4) (str.substr Start StartInt_4 StartInt_6) (str.from_int StartInt_5) (ite StartBool Start_1 Start_9)))
   (StartInt_1 Int (1))
   (StartInt_4 Int (1 (str.len Start_1) (str.to_int Start_3)))
   (Start_3 String ("b" "0" (str.++ Start_1 Start_4) (str.at Start_5 StartInt_5) (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_6 Start Start_6) (str.from_int StartInt_4) (ite StartBool Start_5 Start)))
   (Start_6 String (x (str.at Start_5 StartInt_2) (ite StartBool Start_2 Start_1)))
   (StartInt_2 Int (1 0 (str.len Start) (str.indexof Start_1 Start_1 StartInt_2) (str.to_int Start_1)))
   (Start_4 String ("b" "a" (str.++ Start_1 Start_2) (str.at Start StartInt_1) (str.substr Start StartInt StartInt_4) (str.from_int StartInt)))
   (Start_1 String ("b" "0" (str.at Start_1 StartInt_1) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt_3)))
   (Start_11 String ("0" (str.++ Start Start_4) (str.from_int StartInt_5)))
   (StartInt_3 Int (1 (str.len Start_4) (str.indexof Start_3 Start_2 StartInt_3)))
   (StartInt_5 Int (1 (str.indexof Start_7 Start StartInt_6)))
   (StartInt_6 Int (0 (str.len Start_3) (str.to_int Start_3)))
   (Start_7 String ("a" (str.++ Start_5 Start_8) (str.substr Start_2 StartInt_6 StartInt) (str.replace Start_4 Start_4 Start_5) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" x "1")))

(check-synth)
