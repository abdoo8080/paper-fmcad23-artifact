(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartInt_9 Int) (Start_15 String) (StartBool_2 Bool) (Start_8 String) (Start_9 String) (Start_16 String) (Start_13 String) (Start_6 String) (StartInt_5 Int) (Start_7 String) (StartInt_2 Int) (StartInt_6 Int) (Start_11 String) (Start_5 String) (Start_1 String) (StartInt_3 Int) (Start_2 String) (StartInt_1 Int) (StartInt_4 Int) (StartBool_1 Bool) (Start_3 String) (Start_10 String) (StartBool_4 Bool) (Start_4 String) (StartInt_7 Int) (StartInt_8 Int) (Start_12 String) (StartBool_3 Bool) (Start_14 String))
  ((Start String (y (str.++ Start Start_1) (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_2 Start_2 Start) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.indexof Start_4 Start_5 StartInt_7)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_4 StartBool_2) (str.< Start_2 Start_3) (str.<= Start_7 Start_1) (str.prefixof Start_5 Start_8) (str.suffixof Start Start_1) (str.contains Start_10 Start_2) (= StartInt StartInt_6) (<= StartInt_4 StartInt_2)))
   (StartBool_5 Bool (false (and StartBool_4 StartBool_3) (str.< Start_15 Start_16) (str.<= Start_14 Start_16) (str.contains Start_2 Start_9) (<= StartInt_9 StartInt_1)))
   (StartInt_9 Int (0 (str.len Start_6) (str.indexof Start_5 Start_6 StartInt_8)))
   (Start_15 String ("0" "" x (str.++ Start Start) (str.replace Start_11 Start_13 Start_16) (str.from_int StartInt_9) (ite StartBool_4 Start_2 Start_6)))
   (StartBool_2 Bool (true false (not StartBool) (str.<= Start_8 Start_4) (str.prefixof Start_2 Start_9) (str.contains Start_5 Start) (= Start_2 Start_2)))
   (Start_8 String (y (str.from_int StartInt_3) (ite StartBool_2 Start_1 Start_6)))
   (Start_9 String ("0" "b" (str.++ Start_6 Start) (str.at Start_1 StartInt) (str.replace Start Start_9 Start_5) (str.from_int StartInt_3) (ite StartBool_2 Start_1 Start_3)))
   (Start_16 String ("a" "0" x y "1" (str.from_int StartInt_8) (ite StartBool_2 Start_8 Start_9)))
   (Start_13 String (y (str.++ Start_11 Start_6) (str.at Start_7 StartInt_9) (str.substr Start_14 StartInt_2 StartInt_4) (str.replace Start_11 Start_6 Start_2) (str.from_int StartInt_8)))
   (Start_6 String ("" y "b" (str.++ Start_4 Start_2) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start_7 Start_7 Start_4) (str.from_int StartInt) (ite StartBool Start_8 Start_3)))
   (StartInt_5 Int (0 (str.indexof Start_10 Start_1 StartInt)))
   (Start_7 String ("0" "b" y (str.replace Start_5 Start_1 Start_7) (ite StartBool_1 Start_3 Start_4)))
   (StartInt_2 Int (1 0 (str.len Start_4) (str.indexof Start_5 Start_2 StartInt_3)))
   (StartInt_6 Int (1))
   (Start_11 String ("" "a" (str.++ Start Start_12) (str.at Start_10 StartInt_6) (ite StartBool_5 Start_6 Start_3)))
   (Start_5 String (x (str.substr Start_6 StartInt_2 StartInt_2) (ite StartBool Start_2 Start_2)))
   (Start_1 String ("b" "a" (str.++ Start Start) (str.substr Start_3 StartInt StartInt) (str.replace Start_1 Start Start_1) (str.from_int StartInt)))
   (StartInt_3 Int (0 (str.indexof Start_5 Start_4 StartInt) (str.to_int Start_6)))
   (Start_2 String ("b" x (str.++ Start_2 Start) (str.at Start_2 StartInt) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 1))
   (StartInt_4 Int (0 (str.len Start)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start_6 Start_5) (str.<= Start_8 Start_7) (str.prefixof Start_3 Start_5) (= Start_3 Start_10)))
   (Start_3 String ("b" "" (str.replace Start_2 Start_2 Start_4) (ite StartBool_1 Start_2 Start_5)))
   (Start_10 String ("b" (str.substr Start_10 StartInt_5 StartInt_3) (str.replace Start Start_1 Start_8)))
   (StartBool_4 Bool (false (str.<= Start_4 Start) (str.prefixof Start_10 Start_1) (str.contains Start_9 Start) (= Start_9 Start_9) (<= StartInt_8 StartInt_2)))
   (Start_4 String ("1" (str.substr Start_3 StartInt StartInt_6)))
   (StartInt_7 Int (0 1))
   (StartInt_8 Int (0 (str.len Start_10) (str.to_int Start_6)))
   (Start_12 String ("b" (str.++ Start_7 Start_12) (str.substr Start_13 StartInt_3 StartInt_3) (str.replace Start_5 Start_7 Start_3)))
   (StartBool_3 Bool (true (and StartBool StartBool_5) (str.<= Start_3 Start_10) (str.contains Start_11 Start_5) (= Start_6 Start_10)))
   (Start_14 String (y x "a" "b" (str.++ Start_15 Start_10) (str.at Start_16 StartInt_5) (str.replace Start_12 Start_14 Start_1) (str.from_int StartInt_5) (ite StartBool_5 Start_8 Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "1" "a") "1")))

(check-synth)
