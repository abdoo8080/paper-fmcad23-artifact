(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_8 String) (Start_7 String) (StartInt_6 Int) (StartInt_1 Int) (Start_9 String) (StartInt_7 Int) (StartInt_8 Int) (Start_4 String) (StartInt_3 Int) (StartInt_5 Int) (Start_5 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_3 String) (Start_2 String) (Start_6 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_1 String))
  ((Start String ("" (str.at Start StartInt) (str.substr Start StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (true (not StartBool_1) (str.< Start Start) (= StartInt_1 StartInt_1) (<= StartInt_2 StartInt_1)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_3 StartBool) (str.contains Start Start_4) (= Start_4 Start) (= StartInt_4 StartInt_6) (<= StartInt_7 StartInt_8)))
   (Start_8 String ("1" (str.++ Start_3 Start_9) (str.at Start_1 StartInt_6) (str.replace Start_6 Start_5 Start_1) (ite StartBool_3 Start_5 Start_5)))
   (Start_7 String (x y "b" "1" "" (str.substr Start_1 StartInt StartInt_6) (str.from_int StartInt_3)))
   (StartInt_6 Int (0 1 (str.to_int Start)))
   (StartInt_1 Int (1 (str.len Start_2) (str.indexof Start_3 Start_3 StartInt_6)))
   (Start_9 String ("b" (str.++ Start_6 Start_1) (str.at Start_2 StartInt_2) (str.replace Start_5 Start_2 Start_1) (ite StartBool_1 Start_5 Start)))
   (StartInt_7 Int (1 0 (str.len Start_8) (str.to_int Start_5)))
   (StartInt_8 Int (1 0 (str.len Start_1) (str.to_int Start_8)))
   (Start_4 String ("1" (str.++ Start_2 Start_5) (str.at Start StartInt_3) (str.substr Start StartInt_2 StartInt) (str.replace Start_1 Start_5 Start_6) (str.from_int StartInt_5) (ite StartBool Start_5 Start_6)))
   (StartInt_3 Int (0 1 (str.indexof Start Start_2 StartInt_2) (str.to_int Start_3)))
   (StartInt_5 Int (0 (str.len Start_3) (str.indexof Start_6 Start_1 StartInt_5) (str.to_int Start_2)))
   (Start_5 String (x "b" "a" (str.++ Start_4 Start_6) (str.replace Start_6 Start_2 Start_3) (str.from_int StartInt_1) (ite StartBool Start_5 Start)))
   (StartBool_2 Bool (true false (str.<= Start_4 Start_8) (str.prefixof Start Start_5) (str.contains Start_3 Start_7) (= Start_4 Start_3) (= StartInt_6 StartInt_2) (<= StartInt_3 StartInt_2)))
   (StartInt_2 Int (1 (str.indexof Start Start_1 StartInt_3) (str.to_int Start_1)))
   (Start_3 String ("0" "a" x (str.at Start_2 StartInt) (str.substr Start StartInt StartInt) (str.from_int StartInt_3)))
   (Start_2 String ("b" (str.substr Start_4 StartInt_2 StartInt) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt_4)))
   (Start_6 String (x "1" (str.substr Start_4 StartInt StartInt_5) (str.from_int StartInt_5)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool) (str.<= Start_2 Start) (str.prefixof Start_4 Start_7) (= StartInt_2 StartInt) (<= StartInt_1 StartInt_4)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.indexof Start Start_3 StartInt_3) (str.to_int Start_3)))
   (Start_1 String (y (str.++ Start_2 Start_1) (str.at Start_6 StartInt) (str.substr Start_5 StartInt_5 StartInt) (str.replace Start_6 Start_5 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.to_int (str.at (str.replace "b" "" x) 1)))))

(check-synth)
