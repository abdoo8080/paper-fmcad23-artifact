(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartInt_9 Int) (Start_22 String) (Start_21 String) (StartInt_1 Int) (Start_11 String) (Start_13 String) (Start_6 String) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_4 String) (Start_1 String) (Start_9 String) (Start_8 String) (Start_14 String) (StartBool_2 Bool) (StartInt_7 Int) (Start_19 String) (StartInt_5 Int) (Start_10 String) (Start_5 String) (Start_15 String) (Start_7 String) (StartBool_4 Bool) (StartBool_3 Bool) (Start_16 String) (Start_18 String) (Start_12 String) (Start_2 String) (Start_17 String) (StartInt_4 Int) (StartInt_8 Int) (StartInt_6 Int) (Start_20 String))
  ((Start String ("1" (str.++ Start Start_1)))
   (StartInt Int (0 (str.len Start_18)))
   (StartBool Bool (true false (not StartBool_4) (str.<= Start_17 Start_4) (str.suffixof Start_15 Start) (= Start_4 Start_2)))
   (Start_3 String ("0" (str.++ Start_7 Start_22) (str.from_int StartInt_5) (ite StartBool_3 Start_21 Start_17)))
   (StartInt_9 Int (1 0 (str.len Start_4)))
   (Start_22 String (y "0" (str.substr Start_11 StartInt_3 StartInt_5) (str.replace Start_20 Start_10 Start_19)))
   (Start_21 String ("" "a" (str.++ Start_2 Start_22) (str.at Start_1 StartInt_3)))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.indexof Start_2 Start_1 StartInt_2) (str.to_int Start)))
   (Start_11 String ("0" y (str.++ Start_4 Start_10) (str.at Start_12 StartInt_2) (str.replace Start Start_3 Start_10) (str.from_int StartInt_4) (ite StartBool_1 Start_13 Start_3)))
   (Start_13 String (y "a" "b" (str.substr Start_4 StartInt_5 StartInt) (str.replace Start_13 Start Start_6) (str.from_int StartInt_6)))
   (Start_6 String ("0" "" x))
   (StartInt_3 Int (0 1 (str.len Start)))
   (StartBool_1 Bool (false (not StartBool_3) (and StartBool_4 StartBool_1) (str.< Start_14 Start_10) (str.<= Start_13 Start_2) (str.prefixof Start_1 Start_8) (str.contains Start_4 Start_10) (= Start_7 Start_5)))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start_4 StartInt_3)))
   (Start_4 String (y "b" (str.at Start StartInt) (str.replace Start_5 Start_4 Start_2) (str.from_int StartInt) (ite StartBool Start_2 Start_6)))
   (Start_1 String ("a" "b" (str.replace Start_1 Start Start_2) (str.from_int StartInt_1)))
   (Start_9 String ("b" x "0" (str.++ Start_6 Start) (str.at Start_5 StartInt_2) (str.substr Start_10 StartInt_1 StartInt_1) (str.replace Start_9 Start_11 Start_3)))
   (Start_8 String (x (str.++ Start Start_4) (str.at Start_9 StartInt_2) (str.replace Start_4 Start_2 Start_2) (str.from_int StartInt_1)))
   (Start_14 String ("b" (str.at Start_2 StartInt_7) (ite StartBool_2 Start_4 Start_6)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_1 StartBool) (str.<= Start_7 Start_11) (= StartInt_1 StartInt_2) (<= StartInt_4 StartInt_3)))
   (StartInt_7 Int (0 1 (str.len Start_4) (str.indexof Start_4 Start_10 StartInt_1)))
   (Start_19 String (y "0" "b" "a" (str.++ Start_16 Start_19) (str.replace Start_14 Start_10 Start_21)))
   (StartInt_5 Int (0 (str.indexof Start_15 Start_3 StartInt_1) (str.to_int Start_2)))
   (Start_10 String (y "a" (str.++ Start_18 Start_16) (str.at Start_16 StartInt_1) (str.substr Start_6 StartInt_6 StartInt_1) (str.replace Start_2 Start_8 Start_19) (str.from_int StartInt_9) (ite StartBool_2 Start Start_20)))
   (Start_5 String ("0" (str.++ Start_4 Start_6) (str.replace Start_5 Start_7 Start_4) (ite StartBool Start_8 Start_6)))
   (Start_15 String ("" (str.++ Start_10 Start_12) (str.at Start_7 StartInt) (str.from_int StartInt_6)))
   (Start_7 String ("1" "a" (str.substr Start_15 StartInt_9 StartInt_9)))
   (StartBool_4 Bool (false true (not StartBool_3) (and StartBool_2 StartBool) (str.<= Start_14 Start_4) (str.contains Start Start_9) (= StartInt_3 StartInt_4)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_2) (str.< Start_2 Start_14) (str.<= Start Start_16) (str.prefixof Start_16 Start_8) (str.suffixof Start_13 Start_13)))
   (Start_16 String ("a" (str.at Start StartInt_1) (str.replace Start_17 Start_18 Start_11)))
   (Start_18 String (x "a" "" (str.at Start_13 StartInt_2) (str.substr Start_10 StartInt StartInt) (str.replace Start_1 Start Start_7) (str.from_int StartInt_2)))
   (Start_12 String (y (str.++ Start_4 Start_16) (str.at Start_4 StartInt_8) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_14 Start_3 Start_6) (ite StartBool Start_7 Start_8)))
   (Start_2 String ("1" (str.replace Start_10 Start_1 Start_3) (str.from_int StartInt_9) (ite StartBool_3 Start_20 Start_17)))
   (Start_17 String ("a" x "0" (str.replace Start Start_5 Start_11) (str.from_int StartInt_6)))
   (StartInt_4 Int (0 1 (str.len Start_15)))
   (StartInt_8 Int (0 1 (str.len Start_2) (str.indexof Start_3 Start_3 StartInt_8) (str.to_int Start_5)))
   (StartInt_6 Int (0 (str.len Start_2) (str.indexof Start_10 Start_1 StartInt_7) (str.to_int Start_14)))
   (Start_20 String ("a" x (str.replace Start_7 Start_17 Start_3) (str.from_int StartInt_4) (ite StartBool_1 Start_21 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.at "1" (str.to_int y)) (str.to_int x))))

(check-synth)
