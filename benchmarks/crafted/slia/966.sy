(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_2 String) (Start_13 String) (Start_4 String) (Start_6 String) (Start_11 String) (Start_12 String) (StartBool_4 Bool) (Start_9 String) (Start_1 String) (StartInt_5 Int) (StartInt_1 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_3 String) (StartInt_4 Int) (Start_5 String) (StartBool_2 Bool) (Start_8 String) (Start_10 String) (StartBool_5 Bool) (StartInt_3 Int) (StartInt_7 Int) (StartInt_2 Int) (Start_7 String))
  ((Start String (y (str.replace Start Start_1 Start)))
   (StartInt Int (0 1 (str.to_int Start_13)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_1 StartBool_2) (str.< Start_13 Start_7) (str.prefixof Start_1 Start_11) (<= StartInt StartInt_7)))
   (StartInt_6 Int (1 0 (str.len Start)))
   (Start_2 String ("1" "a" (str.++ Start_7 Start_5) (str.at Start_11 StartInt_4) (str.substr Start StartInt_5 StartInt_6) (ite StartBool Start_3 Start_7)))
   (Start_13 String ("" x y "0"))
   (Start_4 String ("a" "0" (str.at Start_4 StartInt) (str.replace Start_10 Start_6 Start_13) (ite StartBool_4 Start_11 Start_2)))
   (Start_6 String ("0" "a" "b" "1" y (str.++ Start_9 Start_4) (str.at Start_6 StartInt_1) (str.replace Start_11 Start_7 Start_9) (str.from_int StartInt_4) (ite StartBool_3 Start_1 Start)))
   (Start_11 String ("a" "0" ""))
   (Start_12 String ("1" "b" "a" (str.from_int StartInt_4) (ite StartBool_5 Start_9 Start_2)))
   (StartBool_4 Bool (false true (and StartBool_1 StartBool_1) (str.<= Start_4 Start_7) (str.contains Start_12 Start_7) (= StartInt_2 StartInt_2) (<= StartInt StartInt)))
   (Start_9 String ("a" (str.at Start_1 StartInt_2) (str.substr Start_5 StartInt StartInt_1) (str.replace Start_1 Start_1 Start_10)))
   (Start_1 String (y (str.++ Start Start_1) (str.replace Start_2 Start_3 Start_4) (ite StartBool_1 Start_3 Start_4)))
   (StartInt_5 Int (0 1))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start_4 Start StartInt_1)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_3) (str.suffixof Start_5 Start) (str.contains Start_2 Start_5) (= StartInt StartInt) (<= StartInt StartInt_1)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool) (str.suffixof Start_4 Start_5) (<= StartInt StartInt)))
   (Start_3 String ("1" (str.at Start StartInt_2) (str.replace Start_8 Start_11 Start_8)))
   (StartInt_4 Int (0 (str.len Start_4)))
   (Start_5 String ("1" (str.++ Start_5 Start_1) (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_4 Start_1 Start_4) (ite StartBool_2 Start_4 Start)))
   (StartBool_2 Bool (false (not StartBool_3) (str.<= Start_5 Start_6) (str.prefixof Start_5 Start_5) (str.suffixof Start Start) (str.contains Start_7 Start_8) (= Start_4 Start_4) (= StartInt_1 StartInt_1) (<= StartInt StartInt_1)))
   (Start_8 String ("0" (str.++ Start_9 Start_8) (str.at Start_5 StartInt_1) (str.substr Start_7 StartInt StartInt_1) (str.replace Start_4 Start_3 Start_2) (ite StartBool_2 Start_6 Start)))
   (Start_10 String ("0" (str.++ Start_8 Start_8) (str.at Start_1 StartInt_3) (str.substr Start_10 StartInt_2 StartInt_1) (str.replace Start_7 Start_5 Start_6) (ite StartBool_2 Start_2 Start_5)))
   (StartBool_5 Bool (false true (and StartBool_3 StartBool_3) (str.< Start_3 Start_2) (str.<= Start_1 Start_5) (= StartInt_1 StartInt_1) (<= StartInt_4 StartInt)))
   (StartInt_3 Int (0 1 (str.to_int Start_8)))
   (StartInt_7 Int (0 1 (str.len Start_2) (str.indexof Start_3 Start_12 StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_8) (str.indexof Start Start_10 StartInt_2)))
   (Start_7 String ("a" "" (str.++ Start_2 Start_1) (str.at Start_4 StartInt_2) (str.replace Start_6 Start_6 Start_11) (ite StartBool_4 Start_11 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.replace "0" (str.++ "0" x) "") y)))

(check-synth)
