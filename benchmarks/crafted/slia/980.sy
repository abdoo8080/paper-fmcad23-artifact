(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_4 Int) (Start_6 String) (StartInt_1 Int) (Start_1 String) (Start_2 String) (Start_3 String) (Start_5 String) (Start_8 String) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_2 Int) (StartBool_1 Bool) (Start_4 String) (Start_7 String))
  ((Start String ("" "a" (str.++ Start Start_1) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.to_int Start_3)))
   (StartBool Bool (true false (str.< Start_1 Start_3) (str.<= Start Start_3) (str.prefixof Start_5 Start_4) (str.suffixof Start Start_6) (= Start_4 Start_7) (= StartInt_3 StartInt)))
   (StartInt_4 Int (0 1 (str.indexof Start_8 Start_8 StartInt_2)))
   (Start_6 String ("b" (str.++ Start_7 Start_7) (str.at Start_1 StartInt_3) (str.substr Start_6 StartInt_3 StartInt_2) (str.from_int StartInt_2) (ite StartBool_2 Start_6 Start_2)))
   (StartInt_1 Int (0 1))
   (Start_1 String (y (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt)))
   (Start_2 String ("0" (str.at Start StartInt_1)))
   (Start_3 String (y (str.substr Start StartInt StartInt_2) (str.replace Start_3 Start_4 Start_3) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (Start_5 String (x "1" (str.++ Start_1 Start_7) (str.substr Start_7 StartInt_4 StartInt_2) (str.replace Start_6 Start_8 Start_5)))
   (Start_8 String ("b" y x "1" "" (str.at Start_7 StartInt_3) (str.substr Start StartInt StartInt_3) (str.replace Start_2 Start_2 Start_5) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_6)))
   (StartBool_2 Bool (true false (str.< Start_2 Start) (str.<= Start_3 Start_2) (str.prefixof Start_2 Start_5) (str.suffixof Start Start_1)))
   (StartInt_3 Int (1 (str.len Start_1)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.indexof Start Start_3 StartInt_3)))
   (StartBool_1 Bool (false (str.prefixof Start_1 Start_7) (str.contains Start_8 Start_2) (= StartInt_3 StartInt)))
   (Start_4 String ("b" "0" "a" (str.at Start_2 StartInt) (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start Start_1 Start_4) (str.from_int StartInt_1)))
   (Start_7 String ("a" (str.++ Start_2 Start_4) (str.substr Start_6 StartInt_3 StartInt_2) (ite StartBool_1 Start_7 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof x (str.replace x y "0") 1))))

(check-synth)
