(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_8 String) (Start_12 String) (Start_11 String) (Start_9 String) (StartInt_5 Int) (StartBool_3 Bool) (StartBool_4 Bool) (StartBool_5 Bool) (Start_3 String) (Start_6 String) (StartInt_2 Int) (Start_1 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_4 String) (StartInt_3 Int) (Start_13 String) (Start_2 String) (Start_7 String) (Start_10 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_5 String))
  ((Start String ("b" "a" (str.++ Start_1 Start_2)))
   (StartInt Int (1 (str.len Start_2)))
   (StartBool Bool (false (and StartBool_5 StartBool_2) (str.prefixof Start_13 Start_10) (= Start_5 Start_8)))
   (Start_14 String ("a" (str.at Start_5 StartInt_2) (str.substr Start_5 StartInt StartInt) (str.replace Start_6 Start_5 Start_8) (str.from_int StartInt_4)))
   (Start_8 String ("0" x "1" "a" (str.++ Start Start_7) (str.substr Start_10 StartInt_1 StartInt) (str.replace Start_8 Start_12 Start_10) (str.from_int StartInt_4)))
   (Start_12 String ("b" "" x "0" (str.at Start_4 StartInt) (str.from_int StartInt_4) (ite StartBool_4 Start_8 Start_7)))
   (Start_11 String ("1" (str.++ Start_6 Start_3) (str.substr Start_12 StartInt_5 StartInt_4)))
   (Start_9 String ("1" "b" (str.replace Start_10 Start Start_11)))
   (StartInt_5 Int (0 (str.len Start_1) (str.indexof Start_10 Start_5 StartInt_4)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_4 StartBool_2) (str.< Start Start_7) (str.<= Start_7 Start_1) (str.prefixof Start Start) (str.suffixof Start_5 Start_8) (str.contains Start Start_9) (= StartInt_1 StartInt_3) (<= StartInt StartInt_5)))
   (StartBool_4 Bool (false true (str.< Start_3 Start) (str.prefixof Start_7 Start_6) (str.suffixof Start_7 Start_5) (str.contains Start_1 Start)))
   (StartBool_5 Bool (true false (str.<= Start_3 Start_3) (str.contains Start_5 Start_10)))
   (Start_3 String (x "b" "0" "1" (str.++ Start_2 Start_3) (str.at Start StartInt_2)))
   (Start_6 String (x (str.++ Start_1 Start) (str.at Start_5 StartInt) (str.substr Start_7 StartInt_3 StartInt) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_4 Start StartInt_1)))
   (Start_1 String (y (str.at Start StartInt_1) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.to_int Start)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.< Start_2 Start) (str.prefixof Start Start) (str.suffixof Start Start_3) (str.contains Start_4 Start_4) (= Start_5 Start_6)))
   (Start_4 String ("a" "b" (str.++ Start_2 Start_1) (str.at Start_2 StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start Start)))
   (StartInt_3 Int (1 0 (str.indexof Start Start StartInt_2)))
   (Start_13 String ("a" (str.++ Start_5 Start_14) (ite StartBool_4 Start_11 Start)))
   (Start_2 String ("a" (str.replace Start_2 Start Start_2) (str.from_int StartInt) (ite StartBool Start_2 Start_2)))
   (Start_7 String (x "0" "a" "b" y "1" "" (str.++ Start_4 Start_2)))
   (Start_10 String (x (str.++ Start_3 Start_3) (str.at Start_6 StartInt) (str.from_int StartInt_1) (ite StartBool_3 Start_8 Start_9)))
   (StartInt_4 Int (1 0))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_4) (str.< Start_1 Start_5) (str.<= Start_4 Start_5) (= Start Start_6) (= StartInt_2 StartInt_4)))
   (Start_5 String ("a" (str.substr Start_5 StartInt_3 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y "" "a") x "")))

(check-synth)
