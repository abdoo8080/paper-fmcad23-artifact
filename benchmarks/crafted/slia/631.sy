(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_7 String) (Start_1 String) (StartInt_6 Int) (StartInt_7 Int) (Start_2 String) (Start_3 String) (Start_9 String) (Start_11 String) (Start_5 String) (StartBool_1 Bool) (Start_4 String) (Start_13 String) (StartInt_3 Int) (Start_10 String) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_8 Int) (StartInt_5 Int) (Start_6 String) (Start_12 String) (StartInt_4 Int) (Start_8 String) (StartBool_2 Bool))
  ((Start String ("a" (str.++ Start Start) (str.substr Start_1 StartInt StartInt) (str.replace Start Start Start) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1))
   (StartBool Bool (true (not StartBool) (and StartBool_3 StartBool_2) (str.< Start_9 Start_13) (str.<= Start_7 Start_4) (str.prefixof Start_7 Start_5) (= Start_6 Start_10)))
   (StartInt_1 Int (0 1 (str.len Start_1)))
   (Start_7 String ("1" y (str.at Start_1 StartInt_6) (str.from_int StartInt) (ite StartBool Start_9 Start_5)))
   (Start_1 String (x (str.++ Start_13 Start_1) (str.at Start_12 StartInt_8) (str.replace Start_3 Start_8 Start_13) (str.from_int StartInt_8)))
   (StartInt_6 Int (1 0 (str.indexof Start_8 Start_6 StartInt_3)))
   (StartInt_7 Int (1 (str.indexof Start_7 Start_10 StartInt_5) (str.to_int Start_1)))
   (Start_2 String (x (str.++ Start Start)))
   (Start_3 String ("" x (str.++ Start_13 Start_2) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_9 Start_11 Start) (str.from_int StartInt_2) (ite StartBool_2 Start_5 Start_5)))
   (Start_9 String ("0" "a" "" (str.at Start_12 StartInt_1) (str.substr Start_9 StartInt_3 StartInt_1)))
   (Start_11 String (x "" (str.++ Start_1 Start_2) (str.replace Start_8 Start Start_11)))
   (Start_5 String (x (str.at Start_4 StartInt) (str.replace Start_4 Start_10 Start_11) (str.from_int StartInt_5)))
   (StartBool_1 Bool (true (str.<= Start_1 Start) (str.contains Start_1 Start_3) (= Start_1 Start_1) (= StartInt_1 StartInt_2)))
   (Start_4 String ("" (str.++ Start_3 Start_5) (str.at Start StartInt_2) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_5 Start_6 Start_2) (str.from_int StartInt_2) (ite StartBool Start_4 Start_3)))
   (Start_13 String (x "1" "0" (str.at Start_7 StartInt_2) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_3) (str.indexof Start_5 Start_3 StartInt_4) (str.to_int Start_2)))
   (Start_10 String ("1" (str.replace Start_9 Start_1 Start_1) (str.from_int StartInt_4) (ite StartBool_2 Start_9 Start_1)))
   (StartInt_2 Int (1 (str.len Start_4) (str.indexof Start_3 Start_1 StartInt) (str.to_int Start_1)))
   (StartBool_3 Bool (false (not StartBool_2) (str.< Start_7 Start_1) (str.prefixof Start_4 Start_13) (= Start_13 Start_9) (= StartInt_8 StartInt_6)))
   (StartInt_8 Int (0 (str.indexof Start_3 Start_12 StartInt_2)))
   (StartInt_5 Int (0 1 (str.indexof Start_11 Start_3 StartInt_1)))
   (Start_6 String (x (str.++ Start_3 Start_5) (str.at Start_7 StartInt_1) (str.substr Start_8 StartInt_3 StartInt_2)))
   (Start_12 String ("1" "0" (str.at Start_6 StartInt_4) (str.substr Start_9 StartInt_6 StartInt_7) (str.from_int StartInt_1) (ite StartBool_1 Start_9 Start_6)))
   (StartInt_4 Int (1 (str.len Start_5) (str.indexof Start_6 Start_2 StartInt_3)))
   (Start_8 String (x "a" (str.++ Start_5 Start_1) (str.at Start_5 StartInt_4) (str.substr Start_9 StartInt_2 StartInt_5) (str.from_int StartInt_1) (ite StartBool Start_6 Start_10)))
   (StartBool_2 Bool (true false (str.prefixof Start_1 Start_3) (str.suffixof Start_9 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof (str.++ y x) "a" 1))))

(check-synth)
