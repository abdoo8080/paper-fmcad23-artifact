(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartInt_2 Int) (Start_4 String) (Start_1 String) (Start_8 String) (Start_3 String) (Start_5 String) (StartInt_3 Int) (Start_7 String) (Start_6 String) (Start_2 String) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_4 Int))
  ((Start String ("0" "b" "" (str.at Start StartInt_1) (str.substr Start StartInt_2 StartInt_2)))
   (StartInt Int (1 0 (str.indexof Start_7 Start_1 StartInt_5) (str.to_int Start_3)))
   (StartBool Bool (false (str.< Start_7 Start_8) (= Start_5 Start_8) (= StartInt_3 StartInt_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_6 Start_2 StartInt_5) (str.to_int Start_8)))
   (StartInt_2 Int (1 0 (str.to_int Start_1)))
   (Start_4 String ("1" (str.++ Start Start) (str.at Start_5 StartInt_3) (str.replace Start_5 Start_5 Start_4)))
   (Start_1 String ("" "0" (str.++ Start_1 Start_2) (str.at Start_3 StartInt_1) (str.substr Start_1 StartInt_2 StartInt)))
   (Start_8 String ("" x (str.++ Start Start_6) (str.replace Start_3 Start Start_7) (ite StartBool Start_2 Start)))
   (Start_3 String ("1" (str.at Start StartInt) (str.substr Start_3 StartInt_3 StartInt_2) (str.replace Start Start_4 Start_1) (str.from_int StartInt_2) (ite StartBool Start_2 Start_2)))
   (Start_5 String ("" "b" (str.++ Start_1 Start_3) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.indexof Start_3 Start_4 StartInt_1) (str.to_int Start_6)))
   (Start_7 String ("" y "0" (str.++ Start_7 Start_4) (str.from_int StartInt_2) (ite StartBool Start_2 Start_1)))
   (Start_6 String ("1" "b" (str.++ Start_2 Start_4) (str.at Start_7 StartInt_1) (ite StartBool Start_2 Start)))
   (Start_2 String (x (str.++ Start_2 Start_1) (str.substr Start_6 StartInt_4 StartInt_3) (str.replace Start_5 Start_3 Start_5) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (StartBool_1 Bool (false (str.<= Start_7 Start) (str.suffixof Start_2 Start_7) (= StartInt_3 StartInt_3) (<= StartInt_4 StartInt)))
   (StartInt_5 Int (0 (str.indexof Start_1 Start_4 StartInt_5) (str.to_int Start_8)))
   (StartInt_4 Int (0 1 (str.len Start_8) (str.to_int Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "b" x) y x)))

(check-synth)
