(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (Start_4 String) (Start_1 String) (StartInt_2 Int) (StartInt_1 Int) (Start_3 String) (Start_2 String))
  ((Start String ("b" y "a" (str.at Start_1 StartInt_1) (str.replace Start_1 Start Start_2)))
   (StartInt Int (0 1 (str.indexof Start_3 Start_2 StartInt_3) (str.to_int Start_4)))
   (StartBool Bool (true false (not StartBool) (and StartBool StartBool) (str.suffixof Start_1 Start) (<= StartInt_2 StartInt_2)))
   (StartInt_3 Int (0 1))
   (Start_4 String ("1" "0" x (str.substr Start StartInt_3 StartInt_2) (str.replace Start Start_2 Start_4) (str.from_int StartInt_2) (ite StartBool Start_1 Start_2)))
   (Start_1 String (y x (str.++ Start Start_2) (str.replace Start_3 Start Start_1) (ite StartBool Start Start_2)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_2 StartInt_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_3 Start_3 StartInt_1)))
   (Start_3 String (y "" x (str.++ Start_3 Start_1) (str.at Start StartInt_2) (str.from_int StartInt_1)))
   (Start_2 String ("b" (str.++ Start_2 Start_2) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.++ "1" y) "a")))

(check-synth)
