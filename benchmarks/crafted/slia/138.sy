(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartInt_7 Int) (StartBool_4 Bool) (Start_8 String) (StartInt_6 Int) (Start_6 String) (StartInt_1 Int) (StartInt_4 Int) (Start_1 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_3 String) (StartBool_2 Bool) (StartInt_8 Int) (Start_4 String) (Start_9 String) (StartBool_3 Bool) (Start_7 String) (StartInt_5 Int) (Start_5 String) (StartInt_2 Int))
  ((Start String ("1" (str.++ Start Start) (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt)))
   (StartInt Int (0))
   (StartBool Bool (false (not StartBool_2) (and StartBool_4 StartBool_4) (str.prefixof Start_8 Start_9) (str.suffixof Start_6 Start_8) (= Start_9 Start_6) (<= StartInt_8 StartInt_5)))
   (Start_2 String (x (str.at Start_5 StartInt_3) (str.substr Start_6 StartInt_8 StartInt_2)))
   (StartInt_7 Int (1 0 (str.len Start_5) (str.indexof Start_7 Start_5 StartInt_3)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_2 StartBool) (str.prefixof Start Start_5)))
   (Start_8 String ("b" "1" "0" "a" "" x y (str.++ Start_4 Start_3) (str.substr Start_4 StartInt_2 StartInt_7) (ite StartBool_4 Start_8 Start_7)))
   (StartInt_6 Int (1 (str.len Start_7) (str.to_int Start_3)))
   (Start_6 String ("a" x (str.replace Start_4 Start_3 Start) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 (str.to_int Start_1)))
   (StartInt_4 Int (1 (str.indexof Start_1 Start_4 StartInt_5)))
   (Start_1 String (y (str.++ Start_2 Start_2) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start)))
   (StartBool_1 Bool (true (not StartBool_2) (str.< Start_1 Start_1) (str.<= Start Start_3) (str.prefixof Start_4 Start_3) (str.contains Start_4 Start_4) (= StartInt_2 StartInt) (<= StartInt StartInt_3)))
   (StartInt_3 Int (0 1 (str.to_int Start_3)))
   (Start_3 String (y (str.++ Start_4 Start_1)))
   (StartBool_2 Bool (true (not StartBool_2) (str.<= Start Start_3) (str.prefixof Start_4 Start_3) (str.suffixof Start Start_5)))
   (StartInt_8 Int (1 (str.indexof Start Start_4 StartInt) (str.to_int Start_1)))
   (Start_4 String (y "b" (str.++ Start_2 Start_2) (str.at Start_2 StartInt_1) (str.substr Start_5 StartInt_1 StartInt_4) (ite StartBool Start_1 Start)))
   (Start_9 String ("1" (str.++ Start_5 Start_3) (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start_3 Start_3 Start_7)))
   (StartBool_3 Bool (true false (and StartBool StartBool_2) (str.< Start_6 Start_4) (str.<= Start_1 Start_5) (str.prefixof Start_8 Start_6) (str.suffixof Start_7 Start) (= Start_3 Start_1) (= StartInt_4 StartInt_4) (<= StartInt_3 StartInt_8)))
   (Start_7 String ("b" y (str.++ Start_1 Start_1) (str.substr Start_7 StartInt_3 StartInt_1) (str.from_int StartInt_7) (ite StartBool_3 Start_1 Start_1)))
   (StartInt_5 Int (0 1 (str.to_int Start_1)))
   (Start_5 String (x "b" (str.from_int StartInt)))
   (StartInt_2 Int (1 0 (str.indexof Start_3 Start StartInt_6) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x (str.++ "a" "1"))))

(check-synth)
