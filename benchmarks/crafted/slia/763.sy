(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_12 String) (Start_1 String) (StartInt_1 Int) (Start_3 String) (StartInt_3 Int) (StartInt_2 Int) (StartBool_2 Bool) (Start_4 String) (Start_9 String) (Start_7 String) (Start_10 String) (Start_2 String) (Start_6 String) (StartBool_1 Bool) (Start_8 String) (Start_11 String) (Start_5 String) (StartInt_4 Int))
  ((Start String ("1" (str.++ Start Start_1) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start_2 Start_2) (str.from_int StartInt_2)))
   (StartInt Int (1 (str.indexof Start_9 Start_1 StartInt_4)))
   (StartBool Bool (true (and StartBool_2 StartBool_2) (str.prefixof Start_7 Start_6) (str.suffixof Start_7 Start_5) (str.contains Start_1 Start_4) (<= StartInt_2 StartInt)))
   (Start_13 String ("" "1" "a" y (str.replace Start_9 Start_5 Start_6) (str.from_int StartInt_3)))
   (Start_12 String (x "1" "b" (str.++ Start_5 Start_13) (str.at Start_10 StartInt) (str.replace Start_1 Start_5 Start_7) (str.from_int StartInt_3) (ite StartBool_2 Start_9 Start_11)))
   (Start_1 String (x "b" (str.at Start_6 StartInt_3)))
   (StartInt_1 Int (1 0 (str.to_int Start_9)))
   (Start_3 String ("a" (str.++ Start_1 Start) (str.at Start_2 StartInt_4) (str.replace Start_7 Start_9 Start_1)))
   (StartInt_3 Int (1 (str.len Start_6) (str.to_int Start_8)))
   (StartInt_2 Int (1 0))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_1) (str.< Start_9 Start_12) (str.suffixof Start_8 Start_9) (= Start_1 Start_8) (<= StartInt StartInt_1)))
   (Start_4 String ("a" (str.at Start_5 StartInt_2) (ite StartBool Start_3 Start_6)))
   (Start_9 String ("0" (str.++ Start_4 Start_10) (str.at Start_3 StartInt_2) (str.substr Start_7 StartInt_2 StartInt_2) (str.replace Start_8 Start_5 Start) (str.from_int StartInt_4) (ite StartBool Start_11 Start_7)))
   (Start_7 String ("1" (str.++ Start_1 Start_8) (str.from_int StartInt_2)))
   (Start_10 String (y (str.replace Start_11 Start_5 Start_2) (ite StartBool_1 Start_6 Start_2)))
   (Start_2 String ("a" "b" (str.++ Start Start_3) (str.substr Start_1 StartInt StartInt_3) (str.replace Start_1 Start_4 Start_4) (ite StartBool Start_3 Start_2)))
   (Start_6 String ("0" "b" (str.++ Start_1 Start_4) (str.substr Start_6 StartInt_3 StartInt_3) (ite StartBool_1 Start Start_1)))
   (StartBool_1 Bool (true false (str.< Start_1 Start_2) (str.<= Start Start_7) (str.prefixof Start_3 Start_2) (str.suffixof Start_4 Start_7) (str.contains Start_7 Start_5) (= StartInt_1 StartInt_3) (<= StartInt_2 StartInt_1)))
   (Start_8 String (x (str.substr Start_7 StartInt_3 StartInt_2)))
   (Start_11 String ("" (str.++ Start_8 Start_5) (str.at Start_3 StartInt) (str.from_int StartInt_1)))
   (Start_5 String (x (str.replace Start_8 Start_6 Start_9)))
   (StartInt_4 Int (1 (str.indexof Start_9 Start StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at (str.replace y "0" "1") 1)))))

(check-synth)
