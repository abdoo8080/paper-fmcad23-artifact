(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (Start_3 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_1 String) (Start_4 String) (Start_6 String) (Start_2 String) (Start_7 String) (StartInt_5 Int) (Start_5 String) (StartInt_4 Int) (StartInt_1 Int))
  ((Start String ("0" "" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt StartInt_2) (str.replace Start_3 Start_1 Start_1) (ite StartBool Start_3 Start_1)))
   (StartInt Int (1 0 (str.len Start) (str.indexof Start_3 Start_1 StartInt_5) (str.to_int Start_1)))
   (StartBool Bool (true false (str.< Start_7 Start_4) (str.prefixof Start_1 Start_6) (<= StartInt StartInt_3)))
   (StartInt_3 Int (1))
   (Start_3 String (x "1" "" (str.++ Start_4 Start_4) (str.at Start StartInt) (str.substr Start_1 StartInt StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start Start_3)))
   (StartBool_1 Bool (true false (str.prefixof Start_1 Start_4)))
   (StartInt_2 Int (1 (str.to_int Start_3)))
   (Start_1 String ("b" (str.++ Start_5 Start_7) (str.at Start_7 StartInt_5) (str.from_int StartInt_1) (ite StartBool Start_4 Start_7)))
   (Start_4 String ("a" "b" "1" (str.++ Start_1 Start_4) (str.at Start StartInt_2) (str.replace Start_2 Start_4 Start_3) (ite StartBool_1 Start_5 Start_1)))
   (Start_6 String (x (str.++ Start Start_1) (str.substr Start_6 StartInt_4 StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_5)))
   (Start_2 String ("0" "1" "" y x (str.substr Start_2 StartInt_3 StartInt) (str.from_int StartInt_4) (ite StartBool_1 Start_1 Start_6)))
   (Start_7 String (x (str.++ Start_5 Start_6) (str.from_int StartInt_3)))
   (StartInt_5 Int (1 0))
   (Start_5 String ("1" (str.substr Start_1 StartInt_2 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_4 Int (1 0 (str.len Start_5) (str.indexof Start_7 Start_3 StartInt_2) (str.to_int Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.indexof Start_4 Start_2 StartInt_3) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ x (str.replace y "0" "b"))))

(check-synth)
