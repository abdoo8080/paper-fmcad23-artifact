(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_7 String) (StartInt_7 Int) (Start_10 String) (StartInt_8 Int) (StartInt_5 Int) (Start_2 String) (Start_4 String) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_1 Int) (StartInt_6 Int) (Start_3 String) (StartInt_4 Int) (Start_11 String) (Start_9 String) (Start_5 String) (StartInt_3 Int) (Start_6 String) (Start_8 String))
  ((Start String ("0" (str.++ Start_1 Start_2) (str.at Start_2 StartInt) (str.replace Start Start_1 Start) (ite StartBool Start_2 Start_1)))
   (StartInt Int (0 (str.indexof Start Start_7 StartInt_3)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_1 StartBool) (str.< Start_8 Start_6) (str.<= Start_11 Start_4) (<= StartInt_6 StartInt_4)))
   (Start_1 String ("0" y (str.++ Start_6 Start_10) (str.at Start_6 StartInt_6) (str.replace Start_5 Start_8 Start_6) (str.from_int StartInt_5) (ite StartBool_1 Start_2 Start_4)))
   (Start_7 String ("" "0" x y "b" (str.++ Start_4 Start_3) (str.at Start_2 StartInt_7) (str.substr Start_5 StartInt_5 StartInt_5) (str.replace Start Start_3 Start_10) (str.from_int StartInt_8)))
   (StartInt_7 Int (0 (str.len Start_7) (str.indexof Start Start_3 StartInt_6) (str.to_int Start_9)))
   (Start_10 String ("a" (str.++ Start_5 Start_6) (str.at Start_4 StartInt_5) (str.replace Start_4 Start_3 Start_6)))
   (StartInt_8 Int (0 (str.to_int Start_4)))
   (StartInt_5 Int (1 (str.indexof Start_6 Start_1 StartInt_4)))
   (Start_2 String ("0" y (str.substr Start_3 StartInt_1 StartInt) (ite StartBool_1 Start_4 Start)))
   (Start_4 String ("a" (str.++ Start_2 Start_3) (str.at Start_1 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_2 Int (1 0 (str.len Start_4)))
   (StartBool_1 Bool (false (= Start_3 Start_1) (= StartInt_2 StartInt_1) (<= StartInt StartInt_1)))
   (StartInt_1 Int (1 (str.len Start_3) (str.indexof Start_3 Start_5 StartInt_2) (str.to_int Start_5)))
   (StartInt_6 Int (1 (str.len Start_4) (str.indexof Start_9 Start_6 StartInt) (str.to_int Start_2)))
   (Start_3 String ("" (str.++ Start_4 Start_4) (str.at Start_6 StartInt_2) (str.substr Start_2 StartInt_3 StartInt_3) (str.replace Start_4 Start_2 Start_6)))
   (StartInt_4 Int (1 (str.len Start_8) (str.indexof Start_6 Start_6 StartInt_4)))
   (Start_11 String ("" "a" "1" (str.substr Start_3 StartInt_6 StartInt_1) (str.replace Start_7 Start_5 Start_10) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start_11)))
   (Start_9 String ("1" (str.++ Start_3 Start) (str.at Start_8 StartInt_6) (str.substr Start_9 StartInt_7 StartInt_1) (ite StartBool Start_10 Start)))
   (Start_5 String ("1" y "0" x "a" "" (str.++ Start_1 Start_4) (str.at Start_3 StartInt) (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.len Start_3) (str.to_int Start_1)))
   (Start_6 String ("" "1" (str.at Start_7 StartInt_1) (str.substr Start_7 StartInt_1 StartInt_4) (str.from_int StartInt_4)))
   (Start_8 String ("" (str.substr Start_1 StartInt_3 StartInt_5) (str.replace Start_9 Start Start_6) (ite StartBool_1 Start_2 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "b" "" x) "a")))

(check-synth)
