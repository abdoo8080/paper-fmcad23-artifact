(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_6 Int) (Start_9 String) (StartInt_5 Int) (Start_8 String) (StartBool_1 Bool) (Start_6 String) (Start_3 String) (StartInt_3 Int) (StartInt_2 Int) (Start_7 String) (StartBool_3 Bool) (Start_2 String) (Start_10 String) (Start_1 String) (Start_13 String) (StartInt_10 Int) (StartInt_4 Int) (StartBool_2 Bool) (StartInt_11 Int) (StartInt_7 Int) (Start_4 String) (Start_5 String) (StartInt_1 Int) (StartInt_8 Int) (StartInt_9 Int) (Start_11 String) (Start_12 String))
  ((Start String ("b" (str.replace Start_1 Start Start_1)))
   (StartInt Int (1))
   (StartBool Bool (false true (not StartBool_1) (str.<= Start_3 Start_4) (str.prefixof Start_8 Start_10) (str.suffixof Start_11 Start_1) (= Start_6 Start) (= StartInt_2 StartInt_7) (<= StartInt_9 StartInt_4)))
   (Start_14 String ("1" y "a" (str.from_int StartInt_11)))
   (StartInt_6 Int (1 (str.to_int Start)))
   (Start_9 String ("a" "" (str.++ Start_5 Start_3) (str.from_int StartInt_6)))
   (StartInt_5 Int (1 0 (str.len Start_7) (str.to_int Start_6)))
   (Start_8 String ("b" "" (str.++ Start_1 Start_4) (str.replace Start_1 Start_9 Start_8) (str.from_int StartInt) (ite StartBool_1 Start Start_7)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_2 StartBool_3) (str.prefixof Start_5 Start) (str.contains Start_1 Start_2) (= Start_2 Start_4) (= StartInt_1 StartInt_2) (<= StartInt_1 StartInt)))
   (Start_6 String (y (str.at Start_2 StartInt_4) (str.substr Start_2 StartInt_5 StartInt) (str.replace Start_5 Start_3 Start_2) (str.from_int StartInt_1) (ite StartBool_2 Start_6 Start_5)))
   (Start_3 String ("" "0" (str.replace Start_4 Start_5 Start_4) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_3 Int (0 (str.len Start) (str.to_int Start_2)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.indexof Start_2 Start_5 StartInt_2) (str.to_int Start)))
   (Start_7 String ("b" "a" (str.from_int StartInt_6) (ite StartBool_1 Start_2 Start_8)))
   (StartBool_3 Bool (true (not StartBool_3) (str.< Start_5 Start_6) (str.prefixof Start_5 Start_6) (= StartInt StartInt_3)))
   (Start_2 String (x (str.at Start_10 StartInt_8) (str.replace Start_9 Start_8 Start_4) (ite StartBool_2 Start_8 Start_1)))
   (Start_10 String ("0" (str.replace Start_8 Start_6 Start_2)))
   (Start_1 String ("1" (str.++ Start_2 Start_1) (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool Start Start_3)))
   (Start_13 String ("a" "1" y (str.++ Start_14 Start_9) (str.substr Start_2 StartInt_8 StartInt_10) (str.replace Start_4 Start_2 Start)))
   (StartInt_10 Int (0 1 (str.indexof Start_3 Start_1 StartInt_2) (str.to_int Start_1)))
   (StartInt_4 Int (1 (str.len Start_2) (str.indexof Start_3 Start_1 StartInt) (str.to_int Start)))
   (StartBool_2 Bool (true false (str.prefixof Start_1 Start_9) (str.suffixof Start_8 Start_2) (str.contains Start_3 Start_3) (= StartInt_1 StartInt_7)))
   (StartInt_11 Int (1 (str.indexof Start_10 Start_2 StartInt_5) (str.to_int Start_7)))
   (StartInt_7 Int (0 1 (str.indexof Start_9 Start_5 StartInt_7)))
   (Start_4 String (x "0" (str.++ Start_7 Start_2) (str.at Start_8 StartInt_4) (str.replace Start_2 Start_8 Start) (str.from_int StartInt_3) (ite StartBool Start_5 Start_4)))
   (Start_5 String (x (str.at Start_2 StartInt_1) (str.replace Start_5 Start_4 Start_3) (str.from_int StartInt_5)))
   (StartInt_1 Int (1 (str.len Start_2) (str.indexof Start_4 Start_8 StartInt_8)))
   (StartInt_8 Int (1 0 (str.len Start_5)))
   (StartInt_9 Int (0 (str.to_int Start_6)))
   (Start_11 String ("b" x (str.++ Start_12 Start_2) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_11)))
   (Start_12 String (y x "" "b" "1" "a" (str.++ Start_6 Start_5) (str.at Start_13 StartInt_7) (str.substr Start_10 StartInt_6 StartInt) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x "a")))

(check-synth)
