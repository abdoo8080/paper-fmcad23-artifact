(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_20 String) (StartBool_5 Bool) (StartInt_9 Int) (StartInt_1 Int) (Start_3 String) (StartBool_1 Bool) (Start_9 String) (Start_1 String) (StartInt_4 Int) (Start_12 String) (Start_8 String) (StartInt_3 Int) (StartInt_7 Int) (Start_6 String) (Start_7 String) (StartBool_3 Bool) (Start_4 String) (Start_11 String) (Start_15 String) (Start_2 String) (StartInt_2 Int) (Start_5 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_13 String) (StartBool_6 Bool) (StartInt_6 Int) (Start_19 String) (Start_10 String) (Start_16 String) (Start_14 String) (Start_17 String) (Start_18 String) (StartInt_8 Int) (StartBool_4 Bool))
  ((Start String ("" "1" "a" "b" x (str.++ Start Start) (str.substr Start StartInt_1 StartInt_2)))
   (StartInt Int (1 (str.indexof Start_1 Start_13 StartInt_1)))
   (StartBool Bool (true false (and StartBool StartBool_5) (str.< Start_8 Start_12) (str.prefixof Start_5 Start_6) (= StartInt_5 StartInt_1)))
   (Start_20 String (y "a" (str.substr Start_2 StartInt_7 StartInt_9) (str.replace Start_4 Start_6 Start_6)))
   (StartBool_5 Bool (false true (and StartBool_3 StartBool_6) (str.contains Start_5 Start_13) (= StartInt_7 StartInt_8) (<= StartInt_1 StartInt_1)))
   (StartInt_9 Int (1 0 (str.len Start_11)))
   (StartInt_1 Int (1 (str.to_int Start_3)))
   (Start_3 String ("" "b" (str.from_int StartInt_5) (ite StartBool_1 Start_17 Start_12)))
   (StartBool_1 Bool (false true (str.< Start_10 Start_14) (str.prefixof Start_2 Start_5) (= Start_19 Start_5) (<= StartInt_3 StartInt_5)))
   (Start_9 String (y (str.++ Start_10 Start_8) (str.at Start_2 StartInt_3) (str.substr Start_7 StartInt_4 StartInt_1) (str.replace Start_4 Start_10 Start_11)))
   (Start_1 String (x "0" "" "a" "b" (str.++ Start Start_1) (str.at Start StartInt) (ite StartBool Start_1 Start_2)))
   (StartInt_4 Int (0 (str.indexof Start_5 Start_3 StartInt_1)))
   (Start_12 String (y "b" "0" "" x "a" (str.++ Start Start_13) (str.at Start_9 StartInt) (ite StartBool_2 Start_7 Start_12)))
   (Start_8 String ("" "0" (str.at Start_3 StartInt_4)))
   (StartInt_3 Int (0 (str.to_int Start_5)))
   (StartInt_7 Int (1 (str.len Start_4)))
   (Start_6 String ("" "0" (str.at Start_7 StartInt_3) (str.substr Start_6 StartInt_4 StartInt_5)))
   (Start_7 String (x (str.substr Start_5 StartInt StartInt_1) (str.replace Start_2 Start_3 Start_5)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_1) (str.< Start_2 Start_17) (str.prefixof Start_10 Start_1) (= Start_9 Start_10) (= StartInt_1 StartInt_8)))
   (Start_4 String ("1" "0" y (str.++ Start_5 Start_6) (str.at Start StartInt_3) (str.substr Start_3 StartInt_3 StartInt_3) (ite StartBool_1 Start_4 Start_7)))
   (Start_11 String ("1" (str.++ Start_9 Start_3) (str.at Start_4 StartInt_4) (str.substr Start_8 StartInt_1 StartInt_1) (str.replace Start_5 Start_4 Start_9) (ite StartBool_2 Start_3 Start_12)))
   (Start_15 String ("" (str.++ Start_11 Start_14) (str.at Start_3 StartInt_5) (str.substr Start_14 StartInt_6 StartInt_6) (str.replace Start_16 Start_13 Start_7) (ite StartBool_1 Start_12 Start_7)))
   (Start_2 String ("1" "" x "0" (str.++ Start_1 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_1 StartInt) (str.to_int Start)))
   (Start_5 String (x "a" "0" "1" "b" y "" (str.++ Start_9 Start_1) (str.substr Start_1 StartInt_1 StartInt_5) (str.from_int StartInt_2)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_3) (str.< Start_17 Start_3) (str.<= Start_18 Start) (str.suffixof Start_12 Start_10) (= Start_11 Start_10) (= StartInt_4 StartInt) (<= StartInt_2 StartInt_7)))
   (StartInt_5 Int (0 1 (str.len Start_2) (str.to_int Start_8)))
   (Start_13 String ("0" y "b" x "" "a" "1" (str.at Start_14 StartInt) (str.substr Start StartInt_5 StartInt_5) (str.replace Start_15 Start_14 Start_2) (ite StartBool_2 Start_2 Start_3)))
   (StartBool_6 Bool (true false (str.< Start_16 Start_20) (= Start_16 Start_8) (= StartInt_4 StartInt_1) (<= StartInt_1 StartInt_2)))
   (StartInt_6 Int (1 0 (str.indexof Start_12 Start_5 StartInt_4) (str.to_int Start_1)))
   (Start_19 String (x y (str.++ Start_7 Start_7) (ite StartBool Start_19 Start_5)))
   (Start_10 String ("1" (str.substr Start_14 StartInt_8 StartInt_4) (str.replace Start_7 Start_14 Start_1)))
   (Start_16 String ("b" (str.at Start_1 StartInt) (str.substr Start_7 StartInt_3 StartInt_2) (str.replace Start_16 Start_8 Start_8) (str.from_int StartInt_3)))
   (Start_14 String (x (str.++ Start_4 Start_10) (str.at Start_8 StartInt_1) (str.replace Start_13 Start_5 Start_15) (str.from_int StartInt_2)))
   (Start_17 String ("b" (str.++ Start_16 Start_9) (str.at Start_9 StartInt_1) (str.replace Start_2 Start_17 Start_17) (str.from_int StartInt_5)))
   (Start_18 String (x "b" (str.++ Start_5 Start_18) (str.at Start_2 StartInt_5)))
   (StartInt_8 Int (1 (str.len Start_19) (str.indexof Start_19 Start_6 StartInt_2)))
   (StartBool_4 Bool (true (str.<= Start_16 Start_6) (str.prefixof Start Start_6) (str.suffixof Start Start_16) (str.contains Start_6 Start_2) (= Start_17 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains "0" y) "b" x)))

(check-synth)
