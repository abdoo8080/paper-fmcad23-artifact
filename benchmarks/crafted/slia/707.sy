(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_8 String) (Start_6 String) (StartBool_2 Bool) (StartInt_9 Int) (StartInt_8 Int) (Start_4 String) (StartInt_5 Int) (Start_1 String) (Start_5 String) (StartInt_1 Int) (StartInt_7 Int) (StartInt_2 Int) (StartBool_1 Bool) (Start_3 String) (Start_7 String) (Start_10 String) (Start_14 String) (Start_2 String) (StartInt_3 Int) (Start_9 String) (StartInt_10 Int) (StartInt_4 Int) (Start_11 String) (Start_13 String) (Start_12 String) (Start_15 String))
  ((Start String ("" x (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (1 0 (str.len Start_11)))
   (StartBool Bool (true false (not StartBool_1) (str.<= Start_5 Start_14) (str.suffixof Start_10 Start_5) (str.contains Start_7 Start_2) (= Start_14 Start_7)))
   (StartInt_6 Int (1 0 (str.len Start_4)))
   (Start_8 String (y "" "0" "1" (str.++ Start_6 Start_3) (str.at Start_2 StartInt_6) (str.replace Start_2 Start_2 Start_5)))
   (Start_6 String ("0" (str.replace Start_1 Start Start_1)))
   (StartBool_2 Bool (true false (str.< Start_6 Start_7) (str.<= Start_3 Start) (str.prefixof Start_6 Start_6) (str.suffixof Start_7 Start_6) (<= StartInt_4 StartInt_5)))
   (StartInt_9 Int (0 1 (str.len Start_14) (str.to_int Start_12)))
   (StartInt_8 Int (0 (str.indexof Start_9 Start_6 StartInt_5) (str.to_int Start_9)))
   (Start_4 String ("a" (str.substr Start_3 StartInt_3 StartInt_1)))
   (StartInt_5 Int (0 (str.len Start_8)))
   (Start_1 String ("a" x "0" (str.at Start_9 StartInt_2) (str.replace Start_10 Start_4 Start_10) (str.from_int StartInt_7) (ite StartBool_2 Start Start_3)))
   (Start_5 String ("" (str.++ Start_4 Start_5) (str.at Start StartInt_1) (str.replace Start_2 Start_6 Start) (ite StartBool_2 Start_2 Start_2)))
   (StartInt_1 Int (0 1))
   (StartInt_7 Int (1 0 (str.indexof Start_3 Start_3 StartInt_2)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.to_int Start_3)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool StartBool_1) (str.< Start_1 Start_3) (str.<= Start_1 Start_3) (str.prefixof Start_2 Start_3) (str.contains Start_4 Start) (= StartInt_1 StartInt_1) (<= StartInt_2 StartInt_2)))
   (Start_3 String ("" "1" (str.++ Start_3 Start_2) (str.from_int StartInt)))
   (Start_7 String (x "0" "b" "a" y "" (str.++ Start_6 Start_2) (str.at Start_2 StartInt_1) (str.substr Start_6 StartInt StartInt_6) (str.replace Start_8 Start Start_7) (str.from_int StartInt_6) (ite StartBool Start_6 Start_4)))
   (Start_10 String ("1" "b" (str.at Start_10 StartInt_8) (str.replace Start_2 Start_3 Start_8)))
   (Start_14 String (y "1" x "" (str.at Start_1 StartInt) (str.substr Start_11 StartInt_7 StartInt_9) (str.replace Start_13 Start_11 Start_5) (ite StartBool_2 Start_1 Start_15)))
   (Start_2 String (x (str.at Start_9 StartInt_3)))
   (StartInt_3 Int (1 0 (str.indexof Start_2 Start_5 StartInt) (str.to_int Start_6)))
   (Start_9 String (y x (str.++ Start_9 Start) (str.substr Start_1 StartInt StartInt)))
   (StartInt_10 Int (0 (str.len Start_7) (str.to_int Start_10)))
   (StartInt_4 Int (0 1 (str.indexof Start_6 Start_6 StartInt_3) (str.to_int Start_4)))
   (Start_11 String ("" (str.++ Start_4 Start_4) (str.substr Start_9 StartInt_3 StartInt_2) (str.replace Start_12 Start_13 Start_7)))
   (Start_13 String ("a" (str.++ Start_6 Start_10) (str.substr Start_7 StartInt_3 StartInt) (str.replace Start_3 Start Start_5) (str.from_int StartInt_8)))
   (Start_12 String ("1" (str.++ Start Start_14) (str.replace Start_12 Start_9 Start)))
   (Start_15 String ("b" (str.substr Start_10 StartInt_6 StartInt_7) (str.from_int StartInt_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.substr y 0 1) "a")))

(check-synth)
