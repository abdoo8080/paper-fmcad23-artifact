(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_13 String) (Start_1 String) (StartBool_6 Bool) (Start_6 String) (StartBool_4 Bool) (Start_2 String) (StartInt_4 Int) (Start_10 String) (StartInt_3 Int) (StartInt_1 Int) (StartBool_10 Bool) (Start_8 String) (Start_4 String) (Start_7 String) (StartBool_9 Bool) (Start_3 String) (StartInt_6 Int) (StartBool_8 Bool) (StartInt_2 Int) (StartBool_7 Bool) (StartBool_2 Bool) (Start_9 String) (StartInt_5 Int) (Start_5 String) (Start_12 String) (StartBool_1 Bool) (StartInt_7 Int) (Start_11 String) (StartBool_5 Bool) (StartInt_8 Int))
  ((Start String ("a" "" (str.++ Start_1 Start_2) (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start Start_1) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 0 (str.indexof Start_7 Start_4 StartInt_4)))
   (StartBool Bool (false (not StartBool_2) (and StartBool StartBool) (str.< Start_4 Start_3) (str.<= Start_7 Start_7) (= Start_3 Start_6) (<= StartInt StartInt_4)))
   (StartBool_3 Bool (true (and StartBool_5 StartBool_8) (str.<= Start_5 Start_1) (str.prefixof Start Start_8)))
   (Start_13 String (x (str.++ Start_13 Start_9) (str.at Start_2 StartInt_3)))
   (Start_1 String ("" x (str.substr Start_1 StartInt_1 StartInt_4) (str.replace Start_4 Start_2 Start_4)))
   (StartBool_6 Bool (false (not StartBool_1) (str.< Start_4 Start_10) (str.<= Start_2 Start_11) (= StartInt_4 StartInt_6) (<= StartInt_6 StartInt_2)))
   (Start_6 String ("a" (str.substr Start StartInt_3 StartInt)))
   (StartBool_4 Bool (true (not StartBool_8) (and StartBool_6 StartBool_9) (str.< Start_12 Start_12) (= Start_10 Start_2)))
   (Start_2 String ("b" "a" (str.at Start StartInt_2) (str.replace Start_2 Start_4 Start_6) (str.from_int StartInt_1) (ite StartBool Start_3 Start_1)))
   (StartInt_4 Int (1))
   (Start_10 String (y (str.at Start_9 StartInt_4) (str.substr Start_11 StartInt_5 StartInt) (str.from_int StartInt) (ite StartBool_6 Start_8 Start_8)))
   (StartInt_3 Int (1 (str.indexof Start_4 Start_4 StartInt_1) (str.to_int Start_6)))
   (StartInt_1 Int (1 0 (str.to_int Start_3)))
   (StartBool_10 Bool (true (and StartBool_3 StartBool_8) (str.<= Start_9 Start) (str.prefixof Start_12 Start_12) (str.contains Start Start_3) (= Start_8 Start_8) (<= StartInt_7 StartInt_1)))
   (Start_8 String (y "0" (str.++ Start_8 Start_6) (str.from_int StartInt_7) (ite StartBool_1 Start_4 Start_12)))
   (Start_4 String (y "" "1" "a" "b" "0" x (str.at Start_2 StartInt) (str.substr Start_4 StartInt_1 StartInt) (str.replace Start_4 Start_3 Start_3) (ite StartBool_1 Start_4 Start_1)))
   (Start_7 String ("" "a" "1" y (ite StartBool Start_6 Start)))
   (StartBool_9 Bool (false (and StartBool_10 StartBool_9) (str.prefixof Start_6 Start_12) (str.suffixof Start_2 Start_7) (str.contains Start_6 Start_6)))
   (Start_3 String ("1" "b" (str.++ Start Start_3) (str.at Start_4 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_3 Start_1 Start_1) (str.from_int StartInt)))
   (StartInt_6 Int (1 0 (str.len Start_7) (str.to_int Start_10)))
   (StartBool_8 Bool (false true (not StartBool_6) (and StartBool_2 StartBool) (str.<= Start_12 Start_13) (str.suffixof Start Start_5) (= Start_9 Start_3)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.to_int Start_5)))
   (StartBool_7 Bool (true (str.prefixof Start_2 Start_4) (str.suffixof Start_3 Start) (str.contains Start_10 Start_3) (= StartInt_1 StartInt_7)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool_4) (str.prefixof Start Start_1) (str.contains Start_6 Start_8) (= Start_9 Start_9) (<= StartInt_4 StartInt_4)))
   (Start_9 String ("a" "b" (str.substr Start_8 StartInt StartInt_2) (ite StartBool_5 Start_1 Start_10)))
   (StartInt_5 Int (1))
   (Start_5 String ("1" "a" (str.++ Start_2 Start) (ite StartBool Start_3 Start)))
   (Start_12 String (x y (str.++ Start_10 Start_9) (str.from_int StartInt_8)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool StartBool) (= StartInt_2 StartInt_1) (<= StartInt_2 StartInt_1)))
   (StartInt_7 Int (1 (str.len Start_9) (str.to_int Start_2)))
   (Start_11 String ("b" (str.at Start_8 StartInt_3) (str.from_int StartInt_7)))
   (StartBool_5 Bool (false true (not StartBool_5) (and StartBool_7 StartBool_1) (str.prefixof Start_10 Start_6) (str.contains Start_7 Start_10) (= Start_7 Start_8) (= StartInt_7 StartInt_6) (<= StartInt_4 StartInt_5)))
   (StartInt_8 Int (1 0 (str.len Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.indexof "0" y 0))))

(check-synth)
