(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_8 String) (StartBool_2 Bool) (Start_9 String) (Start_3 String) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_5 Int) (Start_7 String) (StartInt_2 Int) (Start_5 String) (StartInt_6 Int) (Start_1 String) (Start_2 String) (StartInt_3 Int) (Start_6 String) (StartBool_1 Bool) (Start_4 String) (StartInt_4 Int))
  ((Start String ("1" "0" x "" "a" (str.++ Start_1 Start_1) (str.at Start_1 StartInt) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.to_int Start)))
   (StartBool Bool (false (not StartBool_1) (str.contains Start_5 Start_2) (= StartInt_3 StartInt_1) (<= StartInt_3 StartInt)))
   (Start_10 String (x (str.substr Start_4 StartInt_3 StartInt_3)))
   (Start_8 String ("1" (str.at Start_3 StartInt_2) (str.from_int StartInt_6)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_3) (str.suffixof Start_8 Start) (str.contains Start_7 Start_2) (= Start_8 Start_6) (= StartInt StartInt_5) (<= StartInt_5 StartInt)))
   (Start_9 String (x (str.at Start_10 StartInt_2) (str.substr Start_9 StartInt_4 StartInt_1) (str.replace Start_8 Start Start_6) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_2)))
   (Start_3 String (y "a" (str.++ Start_4 Start_6) (str.substr Start_4 StartInt StartInt_5) (str.from_int StartInt_5) (ite StartBool_2 Start_5 Start_7)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_2) (str.prefixof Start_9 Start_7) (str.suffixof Start_9 Start_3) (= Start_5 Start_6) (= StartInt_4 StartInt_6) (<= StartInt_2 StartInt_5)))
   (StartInt_1 Int (1 (str.to_int Start_1)))
   (StartInt_5 Int (1))
   (Start_7 String ("a" (str.++ Start_3 Start_5) (str.at Start_2 StartInt_2) (str.substr Start_7 StartInt_3 StartInt_4) (str.replace Start_4 Start_3 Start_6) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_1 StartInt_2)))
   (Start_5 String ("a" x "1" (str.substr Start StartInt_4 StartInt_3) (str.replace Start Start_2 Start_1) (ite StartBool_1 Start_3 Start_4)))
   (StartInt_6 Int (0 1 (str.indexof Start_5 Start_6 StartInt_6)))
   (Start_1 String ("1" (str.++ Start_1 Start_2) (str.at Start_1 StartInt_2) (str.from_int StartInt_2)))
   (Start_2 String (x (str.++ Start Start_1) (str.at Start StartInt_2) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_3)))
   (StartInt_3 Int (0 (str.len Start_2) (str.indexof Start_4 Start_4 StartInt)))
   (Start_6 String ("0" "a" (str.++ Start_4 Start) (str.from_int StartInt_5)))
   (StartBool_1 Bool (true false (not StartBool) (str.< Start_1 Start) (str.suffixof Start_1 Start_2) (= Start Start) (= StartInt_3 StartInt)))
   (Start_4 String (y "" (str.++ Start_5 Start_1)))
   (StartInt_4 Int (1 0 (str.len Start_5) (str.indexof Start_1 Start StartInt_1) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "b" x "b") 1 1)))

(check-synth)
