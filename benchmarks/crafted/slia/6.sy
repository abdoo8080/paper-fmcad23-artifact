(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_11 String) (StartInt_4 Int) (StartInt_3 Int) (StartInt_6 Int) (StartBool_2 Bool) (StartInt_5 Int) (Start_10 String) (StartBool_3 Bool) (StartBool_1 Bool) (Start_9 String) (Start_2 String) (StartInt_1 Int) (Start_3 String) (StartInt_7 Int) (Start_8 String) (Start_4 String) (StartBool_4 Bool) (Start_6 String) (Start_1 String) (StartInt_2 Int) (Start_5 String) (Start_7 String))
  ((Start String ("a" x "0" (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt) (str.replace Start Start Start) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start_1) (str.indexof Start_1 Start_1 StartInt) (str.to_int Start_3)))
   (StartBool Bool (true false (str.prefixof Start_4 Start_1) (str.contains Start_1 Start_4)))
   (Start_12 String (y (str.++ Start_11 Start_1) (str.at Start_2 StartInt_1) (str.substr Start_11 StartInt_7 StartInt) (ite StartBool Start_12 Start)))
   (Start_11 String (y x "0" "a" "" "b" "1" (str.++ Start_9 Start_11) (str.at Start_3 StartInt_7) (ite StartBool_1 Start_2 Start_9)))
   (StartInt_4 Int (1 0 (str.len Start_11)))
   (StartInt_3 Int (0 (str.len Start_1) (str.to_int Start_12)))
   (StartInt_6 Int (1 0 (str.len Start_10)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool StartBool_2) (str.< Start_5 Start_8) (str.prefixof Start_8 Start_7) (str.suffixof Start_8 Start_3) (str.contains Start_3 Start_6) (= Start_2 Start_4) (<= StartInt_2 StartInt_3)))
   (StartInt_5 Int (0 (str.len Start_1) (str.indexof Start_1 Start_1 StartInt_1)))
   (Start_10 String ("b" (str.substr Start_1 StartInt_1 StartInt_6) (str.from_int StartInt_3) (ite StartBool_3 Start_1 Start_3)))
   (StartBool_3 Bool (true false (str.< Start_6 Start_1) (str.prefixof Start_2 Start_10) (str.suffixof Start_7 Start_10) (str.contains Start_9 Start) (= StartInt_1 StartInt_1)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_4 Start_7) (str.prefixof Start_1 Start_5) (str.contains Start_5 Start_5) (= Start Start) (= StartInt StartInt_5) (<= StartInt_2 StartInt_2)))
   (Start_9 String ("b" (str.++ Start_6 Start_7) (str.from_int StartInt_5) (ite StartBool_4 Start_4 Start_2)))
   (Start_2 String ("0" "b" (str.++ Start_1 Start_2) (str.at Start_2 StartInt) (str.substr Start StartInt_1 StartInt_1)))
   (StartInt_1 Int (0 1 (str.len Start_1)))
   (Start_3 String (y x "1" "" "b" (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt_7 Int (1 (str.len Start_7)))
   (Start_8 String ("a" (str.at Start_5 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_2) (str.from_int StartInt_5) (ite StartBool_3 Start_4 Start_9)))
   (Start_4 String ("0" (str.at Start StartInt_1) (str.substr Start_3 StartInt StartInt_2) (ite StartBool Start_3 Start_4)))
   (StartBool_4 Bool (false (str.<= Start_1 Start_2) (str.prefixof Start_9 Start_2) (str.suffixof Start_4 Start_1) (= Start Start_3)))
   (Start_6 String (x "b" "" "0" (str.++ Start_3 Start) (str.at Start_3 StartInt_1) (str.replace Start_5 Start_4 Start_2) (ite StartBool Start_2 Start_7)))
   (Start_1 String ("b" "a" "0" x (str.++ Start_1 Start_2) (str.replace Start Start Start_2) (str.from_int StartInt)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start_5)))
   (Start_5 String ("1" (str.at Start_2 StartInt_3) (str.substr Start StartInt_2 StartInt_4) (str.replace Start_5 Start_3 Start_6) (ite StartBool Start_1 Start_3)))
   (Start_7 String ("a" "0" x "" y (str.++ Start_6 Start) (ite StartBool_1 Start_3 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" "" "0")))

(check-synth)
