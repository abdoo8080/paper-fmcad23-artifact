(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_1 Int) (StartInt_2 Int) (Start_10 String) (Start_9 String) (Start_2 String) (StartInt_5 Int) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_5 String) (StartBool_2 Bool) (Start_3 String) (Start_4 String) (Start_1 String) (Start_6 String) (Start_7 String) (StartInt_6 Int) (Start_8 String))
  ((Start String ("" (str.substr Start StartInt_1 StartInt_2) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_2 Start_5 StartInt_3) (str.to_int Start_3)))
   (StartBool Bool (true false (str.prefixof Start_2 Start_11) (str.suffixof Start Start_11)))
   (Start_11 String (y "" "0" "a" (str.at Start_3 StartInt_3)))
   (StartInt_1 Int (1 0 (str.to_int Start_9)))
   (StartInt_2 Int (0 1 (str.indexof Start_1 Start_3 StartInt_2) (str.to_int Start_8)))
   (Start_10 String ("" (str.++ Start_1 Start_8) (str.replace Start_5 Start_4 Start_3) (str.from_int StartInt_3)))
   (Start_9 String ("b" x y (str.at Start_9 StartInt) (str.substr Start_10 StartInt_1 StartInt_1) (str.from_int StartInt)))
   (Start_2 String ("1" (str.at Start_9 StartInt_6)))
   (StartInt_5 Int (0 1))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.to_int Start_2)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool) (str.< Start_3 Start) (str.prefixof Start_2 Start_2) (str.contains Start_4 Start) (= Start_1 Start_5) (= StartInt_1 StartInt_1) (<= StartInt_3 StartInt_2)))
   (StartInt_3 Int (0 (str.len Start_4) (str.indexof Start_5 Start StartInt) (str.to_int Start_1)))
   (Start_5 String ("1" y (str.at Start_5 StartInt_1) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_5 Start_1 Start_2) (str.from_int StartInt_4) (ite StartBool_2 Start_3 Start)))
   (StartBool_2 Bool (false true (str.<= Start_5 Start_2) (str.prefixof Start_2 Start_5) (str.suffixof Start_6 Start_3) (str.contains Start_4 Start_4) (<= StartInt_4 StartInt_1)))
   (Start_3 String (x (str.replace Start_7 Start_2 Start_2) (str.from_int StartInt_5)))
   (Start_4 String ("b" (str.++ Start_4 Start_6) (str.at Start_1 StartInt_3) (str.substr Start StartInt_3 StartInt_3) (str.replace Start Start_5 Start_3)))
   (Start_1 String ("a" (str.++ Start_2 Start_3) (str.at Start_2 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_2 Start)))
   (Start_6 String ("1" (str.++ Start Start_1) (str.at Start StartInt_3) (str.substr Start StartInt_4 StartInt) (ite StartBool_2 Start_4 Start_2)))
   (Start_7 String ("b" (str.at Start_8 StartInt_2) (str.substr Start_8 StartInt_2 StartInt_5)))
   (StartInt_6 Int (1 (str.indexof Start_5 Start_7 StartInt_5)))
   (Start_8 String (x (str.++ Start_3 Start) (str.replace Start_8 Start_3 Start_3) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "0" y) 0)))

(check-synth)
