(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_16 String) (Start_15 String) (Start_13 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_6 String) (Start_3 String) (StartInt_1 Int) (StartInt_10 Int) (StartBool_1 Bool) (Start_8 String) (Start_12 String) (StartInt_3 Int) (Start_11 String) (Start_4 String) (Start_2 String) (Start_10 String) (StartBool_3 Bool) (Start_9 String) (StartInt_7 Int) (StartInt_2 Int) (StartInt_5 Int) (Start_5 String) (StartInt_8 Int) (StartBool_4 Bool) (Start_17 String) (Start_7 String) (StartInt_9 Int) (StartInt_6 Int) (Start_1 String) (Start_14 String))
  ((Start String ("a" "" y (str.++ Start_1 Start) (str.at Start_2 StartInt) (str.replace Start_2 Start_2 Start_2) (ite StartBool_1 Start_1 Start_3)))
   (StartInt Int (0 1 (str.len Start_8) (str.indexof Start_9 Start_7 StartInt_8)))
   (StartBool Bool (false (not StartBool_4) (str.< Start_3 Start_3) (str.prefixof Start_3 Start_3) (str.suffixof Start_10 Start) (str.contains Start_10 Start_7) (= StartInt_1 StartInt_7)))
   (Start_18 String ("b" "" (str.++ Start_16 Start_10) (str.at Start_14 StartInt_4) (str.substr Start_10 StartInt_1 StartInt_10) (str.replace Start_7 Start_6 Start_1)))
   (Start_16 String (x (str.at Start_11 StartInt_5) (str.substr Start_6 StartInt_6 StartInt)))
   (Start_15 String (y (str.at Start_13 StartInt_8) (str.substr Start_7 StartInt StartInt_7) (str.replace Start_11 Start_13 Start_16) (ite StartBool_2 Start_6 Start_3)))
   (Start_13 String ("1" y (str.++ Start_8 Start_10) (str.replace Start Start_14 Start_5) (str.from_int StartInt_1) (ite StartBool_3 Start_2 Start_10)))
   (StartInt_4 Int (1 0 (str.len Start_6) (str.indexof Start_10 Start_1 StartInt_3)))
   (StartBool_2 Bool (false true (not StartBool_2) (str.< Start_2 Start_6) (str.prefixof Start_2 Start) (str.suffixof Start_6 Start_6) (str.contains Start_8 Start_8) (= Start_9 Start_6) (= StartInt_2 StartInt_4)))
   (Start_6 String ("a" (str.++ Start Start_3) (str.replace Start Start_6 Start_3) (ite StartBool_2 Start_7 Start_7)))
   (Start_3 String ("0" "" "b" (str.replace Start_4 Start_2 Start_3)))
   (StartInt_1 Int (0 1 (str.indexof Start_2 Start_5 StartInt_3) (str.to_int Start_5)))
   (StartInt_10 Int (1 (str.len Start_7) (str.to_int Start_15)))
   (StartBool_1 Bool (true (str.< Start_1 Start) (str.prefixof Start_1 Start_6) (= Start Start_6) (= StartInt_1 StartInt) (<= StartInt_1 StartInt_3)))
   (Start_8 String ("b" "0" "" (str.++ Start Start_6) (str.substr Start_1 StartInt_7 StartInt_3)))
   (Start_12 String ("b" (str.++ Start_11 Start_17) (str.substr Start_15 StartInt_8 StartInt_5) (str.replace Start_17 Start_6 Start_13) (ite StartBool_3 Start_16 Start_2)))
   (StartInt_3 Int (1 (str.len Start_1) (str.indexof Start_4 Start_5 StartInt_1) (str.to_int Start_2)))
   (Start_11 String ("a" y x (str.at Start StartInt_4) (ite StartBool Start_3 Start_9)))
   (Start_4 String ("a" (str.at Start_1 StartInt) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_3 Start Start) (str.from_int StartInt_3)))
   (Start_2 String ("a" "b" (str.++ Start_11 Start_5) (str.substr Start_9 StartInt StartInt_1)))
   (Start_10 String ("b" "0" (str.++ Start_1 Start) (str.replace Start_4 Start_5 Start_10) (str.from_int StartInt_1) (ite StartBool_3 Start_1 Start_8)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_8 Start) (str.prefixof Start_3 Start) (= Start_6 Start_1)))
   (Start_9 String ("0" x "" (str.substr Start_6 StartInt_2 StartInt_5) (str.from_int StartInt_6)))
   (StartInt_7 Int (1))
   (StartInt_2 Int (0 1))
   (StartInt_5 Int (1 (str.len Start_6) (str.indexof Start Start_6 StartInt_6)))
   (Start_5 String ("" "0" "b" (str.at Start_1 StartInt_3)))
   (StartInt_8 Int (1 0 (str.len Start_4) (str.indexof Start_4 Start_10 StartInt_2)))
   (StartBool_4 Bool (true (str.< Start_9 Start_10) (str.<= Start_9 Start_2) (str.prefixof Start_11 Start_12) (str.contains Start_7 Start_13) (= StartInt_9 StartInt_7)))
   (Start_17 String ("1" x "0" (str.++ Start_18 Start_16) (str.from_int StartInt_6)))
   (Start_7 String ("a" "" (str.at Start_2 StartInt) (ite StartBool_1 Start_6 Start_5)))
   (StartInt_9 Int (1 (str.len Start_7)))
   (StartInt_6 Int (0 1 (str.to_int Start_9)))
   (Start_1 String ("" y (str.++ Start_3 Start_2)))
   (Start_14 String ("1" (str.++ Start_7 Start_10) (str.at Start_13 StartInt_10) (str.replace Start_15 Start_7 Start_7) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y (str.++ "b" "a") "1") x "")))

(check-synth)
