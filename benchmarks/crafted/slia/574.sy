(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_13 String) (StartInt_7 Int) (StartInt_9 Int) (StartInt_6 Int) (StartInt_5 Int) (StartInt_4 Int) (Start_3 String) (StartInt_2 Int) (StartInt_1 Int) (Start_11 String) (Start_2 String) (StartBool_1 Bool) (Start_1 String) (Start_7 String) (Start_4 String) (Start_10 String) (Start_5 String) (Start_9 String) (Start_12 String) (StartInt_3 Int) (Start_6 String) (StartInt_8 Int) (Start_8 String))
  ((Start String ("" y (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartInt Int (1 (str.indexof Start_3 Start_9 StartInt_1)))
   (StartBool Bool (false true (not StartBool) (and StartBool StartBool) (str.< Start_1 Start_6) (str.<= Start Start_11) (str.prefixof Start_3 Start_3) (= StartInt_2 StartInt_4)))
   (Start_14 String ("b" y (str.from_int StartInt_6) (ite StartBool_1 Start_3 Start_5)))
   (Start_13 String (y (str.++ Start_10 Start_4) (str.at Start_14 StartInt_8) (str.substr Start_11 StartInt_7 StartInt_9) (str.replace Start_9 Start_4 Start_7) (str.from_int StartInt_8)))
   (StartInt_7 Int (1 0))
   (StartInt_9 Int (1 (str.indexof Start_4 Start_11 StartInt_3)))
   (StartInt_6 Int (0 (str.len Start_5) (str.indexof Start_11 Start_6 StartInt_7)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_4 Start_12 StartInt_1) (str.to_int Start_4)))
   (StartInt_4 Int (1 (str.indexof Start_2 Start_10 StartInt_5) (str.to_int Start)))
   (Start_3 String ("" "0" x (str.++ Start_2 Start_4)))
   (StartInt_2 Int (0 (str.to_int Start_8)))
   (StartInt_1 Int (0 (str.len Start_2)))
   (Start_11 String ("0" "b" "a" y "" (str.substr Start_12 StartInt_8 StartInt_7)))
   (Start_2 String (y "1" (str.++ Start Start_2) (str.at Start StartInt) (str.replace Start Start_3 Start_1) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_1 Bool (true (and StartBool StartBool) (str.<= Start_5 Start_4) (str.prefixof Start_6 Start_7) (str.suffixof Start_1 Start_2) (= Start Start_1)))
   (Start_1 String (x (str.replace Start_1 Start_6 Start_5)))
   (Start_7 String ("a" (str.++ Start_8 Start_9) (str.at Start StartInt_1) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_6 Start_5 Start_3) (ite StartBool Start_10 Start_5)))
   (Start_4 String ("b" (str.++ Start_1 Start_4) (str.at Start_4 StartInt_1)))
   (Start_10 String ("b" "1" "0" "" (str.++ Start_5 Start_5) (str.replace Start_7 Start_10 Start) (str.from_int StartInt)))
   (Start_5 String (x (str.at Start_6 StartInt)))
   (Start_9 String ("b" "a" (str.at Start StartInt_1) (str.substr Start_8 StartInt_3 StartInt_2)))
   (Start_12 String ("" (str.++ Start_13 Start_1) (str.at Start_2 StartInt_3) (str.substr Start_9 StartInt_6 StartInt_5) (str.replace Start_12 Start_3 Start_8) (str.from_int StartInt_1) (ite StartBool Start_9 Start_3)))
   (StartInt_3 Int (0))
   (Start_6 String ("0" (str.++ Start_3 Start_5) (str.substr Start_10 StartInt_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_10 Start_3)))
   (StartInt_8 Int (1 0 (str.len Start) (str.indexof Start_14 Start_11 StartInt_2) (str.to_int Start_5)))
   (Start_8 String ("b" (str.++ Start_2 Start_6) (str.at Start_10 StartInt_3) (str.replace Start_10 Start_10 Start_8) (ite StartBool Start_1 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.at x 0))))

(check-synth)
