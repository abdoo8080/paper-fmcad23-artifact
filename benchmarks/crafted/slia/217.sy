(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_13 String) (StartBool_2 Bool) (Start_5 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_3 Int) (Start_4 String) (Start_7 String) (Start_1 String) (Start_9 String) (Start_12 String) (StartInt_6 Int) (Start_3 String) (StartInt_7 Int) (Start_11 String) (StartInt_8 Int) (StartBool_3 Bool) (StartInt_2 Int) (Start_14 String) (Start_2 String) (StartInt_5 Int) (Start_6 String) (Start_8 String) (StartInt_9 Int) (StartInt_1 Int) (StartInt_10 Int))
  ((Start String ("a" "1" (str.substr Start StartInt_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 (str.len Start_7) (str.indexof Start_12 Start_2 StartInt_10)))
   (StartBool Bool (true (str.<= Start_2 Start_5) (str.suffixof Start_7 Start_3) (<= StartInt_1 StartInt_4)))
   (Start_10 String ("a" (str.substr Start_6 StartInt_4 StartInt_6) (str.replace Start_10 Start_5 Start_4) (ite StartBool_2 Start_1 Start_7)))
   (Start_13 String ("b" y (str.++ Start_4 Start_14) (str.substr Start StartInt_6 StartInt_3)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_4 Start_3) (str.contains Start_4 Start_4) (<= StartInt_5 StartInt_3)))
   (Start_5 String (y "1" (str.++ Start_6 Start_6) (str.at Start_6 StartInt_1) (str.substr Start_7 StartInt_1 StartInt_3) (str.replace Start_8 Start_8 Start_4)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (str.contains Start Start_7) (= Start_3 Start_10) (<= StartInt_7 StartInt_1)))
   (StartInt_4 Int (1))
   (StartInt_3 Int (0 1 (str.indexof Start_2 Start_4 StartInt) (str.to_int Start_3)))
   (Start_4 String ("" "a" (str.++ Start Start_2) (str.at Start StartInt_2) (str.substr Start_5 StartInt_2 StartInt_4) (str.replace Start_5 Start_2 Start_3) (str.from_int StartInt_1)))
   (Start_7 String ("1" y (str.++ Start_5 Start_11) (str.at Start_8 StartInt_1) (str.substr Start_3 StartInt_6 StartInt_2) (str.replace Start_5 Start Start_2) (str.from_int StartInt_6)))
   (Start_1 String ("" "a" (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start Start_2 Start)))
   (Start_9 String ("" (str.++ Start_5 Start_2) (str.substr Start_3 StartInt StartInt_5) (ite StartBool_1 Start_10 Start)))
   (Start_12 String ("1" "" "0" (str.++ Start_7 Start_5) (str.at Start_11 StartInt_8) (str.substr Start_13 StartInt_4 StartInt_4) (str.replace Start_4 Start Start_1)))
   (StartInt_6 Int (0 1 (str.indexof Start_3 Start_1 StartInt_7)))
   (Start_3 String ("0" (str.at Start_1 StartInt_3) (ite StartBool Start_3 Start)))
   (StartInt_7 Int (1 0 (str.len Start_6)))
   (Start_11 String (x (str.substr Start_5 StartInt_3 StartInt_8) (str.from_int StartInt_5) (ite StartBool_2 Start_7 Start_9)))
   (StartInt_8 Int (0 1 (str.to_int Start_2)))
   (StartBool_3 Bool (true false (str.<= Start_2 Start_6) (str.suffixof Start Start_6) (= StartInt_5 StartInt_6) (<= StartInt_9 StartInt_6)))
   (StartInt_2 Int (1 0 (str.len Start_2)))
   (Start_14 String ("" (str.++ Start_4 Start_13) (str.at Start StartInt_1)))
   (Start_2 String ("0" (str.++ Start_3 Start) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start Start_1 Start) (ite StartBool Start_2 Start_2)))
   (StartInt_5 Int (1 0))
   (Start_6 String ("1" (str.at Start_8 StartInt_6) (ite StartBool_3 Start_5 Start_2)))
   (Start_8 String ("" (str.++ Start_3 Start_6) (str.replace Start_4 Start_3 Start_9)))
   (StartInt_9 Int (1 0 (str.to_int Start_1)))
   (StartInt_1 Int (1 (str.len Start_11)))
   (StartInt_10 Int (1 0 (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" y (str.++ (str.at x 1) "a"))))

(check-synth)
