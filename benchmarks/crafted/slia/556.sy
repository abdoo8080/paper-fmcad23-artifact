(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_8 String) (Start_10 String) (StartInt_5 Int) (StartInt_6 Int) (Start_9 String) (Start_7 String) (Start_1 String) (Start_5 String) (Start_3 String) (Start_6 String) (StartInt_3 Int) (StartInt_4 Int) (Start_4 String) (StartBool_2 Bool) (StartInt_2 Int) (StartBool_1 Bool) (Start_2 String) (StartInt_1 Int))
  ((Start String (y (str.++ Start Start) (str.at Start StartInt_1) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 (str.len Start_4) (str.indexof Start_6 Start_6 StartInt)))
   (StartBool Bool (true (str.< Start_8 Start_9) (str.<= Start_3 Start_6) (str.suffixof Start_5 Start_5) (= StartInt_2 StartInt_1) (<= StartInt_5 StartInt_6)))
   (StartInt_7 Int (0))
   (Start_8 String (x (str.substr Start_6 StartInt_6 StartInt_7) (str.from_int StartInt_3)))
   (Start_10 String ("1" "" "0" x "a" (str.++ Start_4 Start_6) (str.substr Start_5 StartInt_1 StartInt_2) (str.replace Start_8 Start_5 Start_1) (ite StartBool Start_3 Start_9)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.to_int Start)))
   (StartInt_6 Int (0 1 (str.indexof Start_7 Start_4 StartInt_2)))
   (Start_9 String (x "a" "b" "0" (str.from_int StartInt_2) (ite StartBool Start_7 Start_10)))
   (Start_7 String ("0" x "a" (str.replace Start_6 Start_7 Start_7)))
   (Start_1 String ("" (str.substr Start StartInt StartInt_2) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt_1)))
   (Start_5 String ("b" x "" (str.at Start_4 StartInt_1) (str.replace Start_5 Start_3 Start_2)))
   (Start_3 String (y "b" "" (str.++ Start Start_4) (ite StartBool_2 Start_3 Start_2)))
   (Start_6 String (y (str.++ Start Start_6) (str.substr Start_1 StartInt_4 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_7)))
   (StartInt_3 Int (0 (str.to_int Start_5)))
   (StartInt_4 Int (1 0 (str.to_int Start_4)))
   (Start_4 String ("0" (str.replace Start_1 Start_1 Start_4) (str.from_int StartInt)))
   (StartBool_2 Bool (false (and StartBool StartBool) (str.prefixof Start_3 Start_4) (= Start_1 Start_1) (= StartInt StartInt_3) (<= StartInt_4 StartInt_2)))
   (StartInt_2 Int (0 (str.len Start_3) (str.indexof Start_1 Start_3 StartInt_2) (str.to_int Start_2)))
   (StartBool_1 Bool (false (and StartBool StartBool) (str.suffixof Start_4 Start_5) (str.contains Start_5 Start_3) (= Start_4 Start_5) (<= StartInt_3 StartInt_1)))
   (Start_2 String ("b" "1" (str.substr Start_1 StartInt_3 StartInt_4)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y "b") "b" (str.at y 1))))

(check-synth)
