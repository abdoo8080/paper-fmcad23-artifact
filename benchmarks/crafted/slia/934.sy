(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_9 String) (StartInt_2 Int) (StartInt_3 Int) (Start_10 String) (Start_2 String) (Start_1 String) (StartInt_1 Int) (StartBool_3 Bool) (Start_8 String) (Start_4 String) (Start_6 String) (Start_7 String) (Start_5 String))
  ((Start String ("a" "1" (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start Start) (str.from_int StartInt) (ite StartBool Start_2 Start_1)))
   (StartInt Int (1 (str.len Start_2)))
   (StartBool Bool (true (not StartBool) (str.< Start_1 Start_1) (str.prefixof Start Start_1) (str.suffixof Start Start_3) (= Start_4 Start_4)))
   (Start_3 String ("b"))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_1 StartBool_3) (str.<= Start Start_9) (str.prefixof Start_9 Start_7) (= StartInt_3 StartInt_3) (<= StartInt StartInt_1)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.contains Start_3 Start_2) (= Start_5 Start_5) (= StartInt_3 StartInt_2)))
   (Start_9 String ("" "1" (str.substr Start_10 StartInt StartInt_3) (str.replace Start_4 Start_4 Start_7) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_10)))
   (StartInt_2 Int (1 0 (str.len Start_5) (str.indexof Start_1 Start StartInt_3) (str.to_int Start_4)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.to_int Start_2)))
   (Start_10 String ("1" (str.substr Start_5 StartInt_3 StartInt_2) (str.from_int StartInt)))
   (Start_2 String ("a"))
   (Start_1 String ("0" (str.at Start StartInt_1)))
   (StartInt_1 Int (1 (str.len Start_1) (str.to_int Start_2)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_3 StartBool_3) (str.< Start Start_8) (str.prefixof Start_8 Start_9) (str.suffixof Start_6 Start_2) (str.contains Start_9 Start_4) (= StartInt_2 StartInt_1) (<= StartInt_2 StartInt_2)))
   (Start_8 String (x "a" y "b" "1" "0" (str.++ Start_1 Start_4) (str.at Start_6 StartInt_1) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_9 Start_1 Start_2) (str.from_int StartInt_1)))
   (Start_4 String ("a" y x (str.at Start_5 StartInt_1) (str.from_int StartInt) (ite StartBool Start_6 Start_3)))
   (Start_6 String ("" (str.++ Start_2 Start_4) (str.replace Start_4 Start_5 Start_7)))
   (Start_7 String ("1" "b" (str.++ Start_5 Start_7) (str.at Start_1 StartInt) (str.replace Start_2 Start_6 Start_3) (str.from_int StartInt_2)))
   (Start_5 String ("1" (str.++ Start_8 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< x "1") "b" "")))

(check-synth)
