(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (Start_5 String) (Start_10 String) (StartInt_9 Int) (Start_6 String) (Start_9 String) (Start_11 String) (Start_4 String) (StartBool_1 Bool) (StartInt_1 Int) (StartBool_4 Bool) (Start_15 String) (Start_2 String) (Start_8 String) (StartInt_2 Int) (StartInt_5 Int) (Start_3 String) (StartInt_8 Int) (StartBool_3 Bool) (StartInt_4 Int) (StartInt_6 Int) (Start_7 String) (Start_12 String) (Start_13 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_1 String) (Start_14 String))
  ((Start String (y (str.++ Start Start) (str.at Start_1 StartInt) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.indexof Start_9 Start_2 StartInt_3)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_3 StartBool_1) (str.< Start_8 Start_6) (str.<= Start_8 Start_5) (str.contains Start_3 Start_8) (= StartInt_5 StartInt_1)))
   (StartInt_3 Int (1 0 (str.len Start_9)))
   (Start_5 String (y (str.at Start_8 StartInt_3) (str.substr Start_4 StartInt_1 StartInt) (ite StartBool_1 Start_5 Start_3)))
   (Start_10 String (x (str.at Start_7 StartInt_1) (str.substr Start_7 StartInt_2 StartInt)))
   (StartInt_9 Int (0 (str.indexof Start_10 Start_13 StartInt_1)))
   (Start_6 String ("b" "1" "0" y (str.++ Start_2 Start_7) (str.replace Start_3 Start_7 Start_6) (ite StartBool_1 Start_7 Start)))
   (Start_9 String ("1" "0" y (str.++ Start_9 Start_2) (str.at Start_4 StartInt_3) (str.from_int StartInt_4)))
   (Start_11 String ("0" "1" x (str.substr Start_5 StartInt_2 StartInt) (str.from_int StartInt_6)))
   (Start_4 String ("0" "a" "b" (str.++ Start_5 Start) (str.at Start StartInt_1) (str.replace Start_1 Start_6 Start_7)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (str.< Start_1 Start_4) (str.<= Start_3 Start_2) (str.suffixof Start_3 Start_3) (str.contains Start_1 Start) (= Start_1 Start_3)))
   (StartInt_1 Int (0 1 (str.len Start)))
   (StartBool_4 Bool (false true (not StartBool_4) (and StartBool StartBool_3) (str.suffixof Start_5 Start_9) (= Start_3 Start_6) (= StartInt StartInt_7) (<= StartInt_3 StartInt_4)))
   (Start_15 String ("a" (str.++ Start_13 Start_3) (str.at Start_13 StartInt_9) (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_11 Start_11 Start_1)))
   (Start_2 String ("a" "1" x (str.at Start_3 StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start Start_2)))
   (Start_8 String (y "" (str.++ Start_7 Start_1) (str.at Start_2 StartInt_3) (ite StartBool_1 Start_6 Start_7)))
   (StartInt_2 Int (1 (str.len Start_10) (str.indexof Start_2 Start_7 StartInt_3) (str.to_int Start_9)))
   (StartInt_5 Int (0 (str.indexof Start_9 Start_7 StartInt_2) (str.to_int Start_4)))
   (Start_3 String ("1" "b" y "a" (str.at Start_10 StartInt_3) (str.substr Start_7 StartInt_5 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_10 Start_8)))
   (StartInt_8 Int (0 (str.len Start_5) (str.indexof Start_8 Start_9 StartInt_7) (str.to_int Start_3)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool_2) (str.< Start_2 Start_8) (str.<= Start_10 Start_11) (str.prefixof Start_12 Start_5) (str.contains Start_9 Start_10) (<= StartInt_6 StartInt_4)))
   (StartInt_4 Int (1 0 (str.to_int Start_10)))
   (StartInt_6 Int (0 (str.len Start_6) (str.to_int Start_2)))
   (Start_7 String ("1" "b" "a" (str.from_int StartInt)))
   (Start_12 String ("" (str.++ Start_6 Start) (str.at Start_9 StartInt) (str.substr Start_13 StartInt_4 StartInt_1) (str.from_int StartInt_3)))
   (Start_13 String ("1" (str.from_int StartInt_4) (ite StartBool_4 Start_2 Start_3)))
   (StartInt_7 Int (1 0 (str.indexof Start_4 Start_9 StartInt_6) (str.to_int Start_10)))
   (StartBool_2 Bool (false (str.<= Start_14 Start_12) (str.contains Start_9 Start_11) (= Start_2 Start_3) (<= StartInt StartInt_1)))
   (Start_1 String ("" (str.replace Start_1 Start Start_2) (ite StartBool Start_1 Start)))
   (Start_14 String ("b" (str.++ Start_14 Start_15) (str.at Start StartInt_2) (str.substr Start StartInt_8 StartInt_8) (ite StartBool_4 Start_7 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y "" "b") y x)))

(check-synth)
