(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (StartInt_12 Int) (Start_2 String) (Start_1 String) (StartInt_8 Int) (Start_4 String) (StartInt_6 Int) (Start_10 String) (Start_9 String) (StartBool_2 Bool) (StartInt_4 Int) (Start_11 String) (StartInt_9 Int) (Start_6 String) (StartInt_7 Int) (StartBool_3 Bool) (StartInt_5 Int) (Start_7 String) (Start_13 String) (StartInt_11 Int) (Start_12 String) (Start_15 String) (StartInt_2 Int) (StartInt_10 Int) (StartInt_3 Int) (StartBool_1 Bool) (Start_14 String) (Start_5 String) (Start_8 String) (Start_3 String) (Start_16 String) (StartInt_1 Int))
  ((Start String ("a" (str.++ Start_1 Start_1) (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt StartInt_2) (str.replace Start_3 Start_3 Start_3) (ite StartBool_1 Start_3 Start_2)))
   (StartInt Int (1 0 (str.indexof Start_17 Start_2 StartInt_2) (str.to_int Start_1)))
   (StartBool Bool (true false (and StartBool_2 StartBool) (str.< Start_7 Start) (str.<= Start_14 Start_13) (str.contains Start Start_8) (<= StartInt_9 StartInt_10)))
   (Start_17 String ("" "b" "a" (str.++ Start_2 Start_17)))
   (StartInt_12 Int (1))
   (Start_2 String ("1" "b" (str.++ Start_11 Start_15) (str.replace Start_4 Start_5 Start_14) (ite StartBool_1 Start Start_16)))
   (Start_1 String ("0" (str.at Start_9 StartInt_12) (str.substr Start_11 StartInt_12 StartInt_6) (ite StartBool_2 Start_12 Start_3)))
   (StartInt_8 Int (0 (str.len Start_9)))
   (Start_4 String ("1" (str.++ Start_1 Start_2) (str.at Start_5 StartInt_3) (str.substr Start StartInt_1 StartInt) (str.replace Start Start_1 Start_2) (ite StartBool_1 Start_1 Start_6)))
   (StartInt_6 Int (0 1 (str.len Start_11) (str.to_int Start_7)))
   (Start_10 String ("1" "0" (str.++ Start Start_9) (str.at Start_9 StartInt_4) (str.substr Start_6 StartInt_3 StartInt_4) (str.replace Start_4 Start_10 Start_6) (str.from_int StartInt_1) (ite StartBool Start_3 Start_2)))
   (Start_9 String (y (str.++ Start_10 Start_7) (str.substr Start_1 StartInt_2 StartInt) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_1) (str.suffixof Start_7 Start_4) (= StartInt_3 StartInt_10)))
   (StartInt_4 Int (1 (str.len Start_9) (str.to_int Start_5)))
   (Start_11 String (y x "b" (str.++ Start_8 Start_6) (str.substr Start_2 StartInt_7 StartInt_8)))
   (StartInt_9 Int (0))
   (Start_6 String (y "0" (str.++ Start_2 Start_7) (str.at Start_8 StartInt_1) (str.substr Start_5 StartInt_1 StartInt_4) (ite StartBool Start_4 Start_5)))
   (StartInt_7 Int (1 (str.indexof Start_4 Start_11 StartInt_8) (str.to_int Start_7)))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool_3 StartBool_1) (str.<= Start_4 Start_11) (str.prefixof Start_7 Start_13) (str.suffixof Start_13 Start_14) (str.contains Start_1 Start_8) (= StartInt_7 StartInt)))
   (StartInt_5 Int (1 0 (str.indexof Start_5 Start_9 StartInt_6) (str.to_int Start)))
   (Start_7 String ("b" y x (str.++ Start_12 Start_11) (str.substr Start_9 StartInt_4 StartInt_3) (str.replace Start Start_2 Start_7) (str.from_int StartInt_2)))
   (Start_13 String ("a" "b" (str.++ Start_9 Start_1) (str.at Start_10 StartInt_5) (str.replace Start_1 Start_2 Start_13) (str.from_int StartInt_6) (ite StartBool_2 Start_3 Start_2)))
   (StartInt_11 Int (0 1 (str.len Start_15) (str.indexof Start Start_7 StartInt_7)))
   (Start_12 String ("0" "" (str.++ Start_3 Start_7) (str.at Start_6 StartInt_9) (str.substr Start StartInt_5 StartInt_1) (str.replace Start_12 Start_7 Start_13) (str.from_int StartInt_1)))
   (Start_15 String ("a" (str.++ Start_7 Start_2) (str.from_int StartInt_4)))
   (StartInt_2 Int (1 (str.len Start_8) (str.indexof Start_5 Start_16 StartInt_4)))
   (StartInt_10 Int (1))
   (StartInt_3 Int (0 1 (str.len Start_13) (str.indexof Start_5 Start_10 StartInt_10)))
   (StartBool_1 Bool (false true (str.suffixof Start_1 Start) (str.contains Start_1 Start_2) (= Start_3 Start_2)))
   (Start_14 String ("a" (str.++ Start Start_8) (str.at Start_14 StartInt) (str.substr Start_4 StartInt_11 StartInt_10) (str.from_int StartInt_5)))
   (Start_5 String (y "1" x "0" "" (str.at Start_6 StartInt_11) (str.substr Start_11 StartInt_10 StartInt_11) (str.from_int StartInt_4) (ite StartBool_1 Start_7 Start_5)))
   (Start_8 String ("" "a" x "0" "1" y (str.++ Start_2 Start_7) (str.substr Start_9 StartInt StartInt_5) (str.from_int StartInt_4)))
   (Start_3 String (x (str.++ Start_4 Start_4) (str.at Start StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_2)))
   (Start_16 String ("" (str.++ Start Start_3) (str.substr Start_12 StartInt_2 StartInt_1) (ite StartBool_2 Start_12 Start_8)))
   (StartInt_1 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y x)))

(check-synth)
