(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_6 String) (Start_7 String) (StartInt_2 Int) (StartInt_9 Int) (StartInt_7 Int) (Start_2 String) (Start_4 String) (StartInt_1 Int) (StartInt_5 Int) (StartInt_3 Int) (StartBool_3 Bool) (StartInt_8 Int) (StartInt_6 Int) (Start_5 String) (Start_3 String) (StartBool_6 Bool) (Start_9 String) (Start_10 String) (Start_11 String) (StartBool_4 Bool) (Start_1 String) (StartBool_2 Bool) (Start_12 String) (StartBool_5 Bool))
  ((Start String ("b" "0" "a" x "1" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_3 Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool Start_2 Start_2)))
   (StartInt Int (1))
   (StartBool Bool (false true (not StartBool_5) (str.< Start_10 Start_1) (str.suffixof Start_9 Start_12) (str.contains Start_4 Start_12) (<= StartInt_3 StartInt_4)))
   (Start_8 String (y "1" x "a" (str.++ Start_6 Start_4) (ite StartBool Start_2 Start_4)))
   (StartInt_4 Int (0 1))
   (StartBool_1 Bool (false (str.< Start_2 Start_6) (str.<= Start_1 Start_4) (str.prefixof Start_7 Start_1) (str.suffixof Start_1 Start_2) (str.contains Start_6 Start_1) (= StartInt_2 StartInt_3) (<= StartInt StartInt)))
   (Start_6 String ("a" "b" x "0" (str.at Start_4 StartInt) (str.substr Start_2 StartInt_3 StartInt) (str.replace Start Start_3 Start_5) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_5)))
   (Start_7 String ("0" "a" x "1" "" (str.substr Start_2 StartInt_1 StartInt_6) (str.replace Start_4 Start_3 Start_8) (ite StartBool_1 Start_6 Start_2)))
   (StartInt_2 Int (1 0 (str.len Start_4)))
   (StartInt_9 Int (1))
   (StartInt_7 Int (0 (str.len Start_4) (str.indexof Start_1 Start_2 StartInt_3)))
   (Start_2 String ("b" x "1" y "a" "" "0" (str.at Start_5 StartInt_1) (str.substr Start_6 StartInt StartInt_5) (str.replace Start_2 Start_5 Start_3) (ite StartBool Start_3 Start)))
   (Start_4 String ("a" (str.from_int StartInt)))
   (StartInt_1 Int (0 1))
   (StartInt_5 Int (1 0 (str.len Start_2)))
   (StartInt_3 Int (1 (str.to_int Start_2)))
   (StartBool_3 Bool (false (str.< Start_2 Start_9) (str.<= Start_5 Start_11) (str.prefixof Start_1 Start_3) (str.suffixof Start_4 Start_9)))
   (StartInt_8 Int (1 (str.indexof Start_1 Start_4 StartInt_1) (str.to_int Start)))
   (StartInt_6 Int (1 (str.len Start_9)))
   (Start_5 String ("a" "1" (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_5 StartInt_6)))
   (Start_3 String (y "0" (str.++ Start_4 Start_1) (str.substr Start_4 StartInt_2 StartInt_3) (str.replace Start_3 Start Start_3) (str.from_int StartInt_4)))
   (StartBool_6 Bool (true false (not StartBool_4) (str.< Start Start_2) (str.<= Start_4 Start_9) (= Start_8 Start_10)))
   (Start_9 String ("b" y "" x "a" (str.++ Start_7 Start_5) (str.substr Start_7 StartInt_7 StartInt_8) (ite StartBool_2 Start_2 Start_10)))
   (Start_10 String ("" "1" (str.at Start_4 StartInt_8) (str.substr Start_5 StartInt_1 StartInt) (str.replace Start Start_11 Start_1) (str.from_int StartInt_3) (ite StartBool Start_5 Start_5)))
   (Start_11 String (y x "b" "0" "" "a" "1" (str.++ Start_1 Start)))
   (StartBool_4 Bool (false true (and StartBool_6 StartBool) (str.suffixof Start_5 Start_7) (= StartInt_9 StartInt_8) (<= StartInt StartInt_2)))
   (Start_1 String ("" "0" "a" "b" x "1" y (str.++ Start_12 Start_10) (str.substr Start_10 StartInt_9 StartInt_5) (str.replace Start_3 Start_9 Start_8) (str.from_int StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_4 StartBool_5) (str.< Start_4 Start_6) (str.suffixof Start_7 Start_9) (str.contains Start_10 Start_1) (= Start_6 Start_12) (= StartInt_2 StartInt_2)))
   (Start_12 String ("1" x "0" (str.at Start_10 StartInt_4) (str.from_int StartInt_7) (ite StartBool_1 Start_6 Start_7)))
   (StartBool_5 Bool (true (not StartBool_6) (str.prefixof Start_8 Start_4) (str.suffixof Start_5 Start_6) (str.contains Start_9 Start_6) (= StartInt_9 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y (str.++ "0" "b"))))

(check-synth)
