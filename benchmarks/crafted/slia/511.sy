(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_10 String) (StartInt_1 Int) (StartInt_6 Int) (StartInt_5 Int) (StartInt_2 Int) (StartInt_3 Int) (Start_2 String) (Start_9 String) (Start_3 String) (Start_4 String) (Start_6 String) (Start_7 String) (Start_1 String) (StartBool_1 Bool) (StartBool_3 Bool) (Start_8 String) (StartBool_2 Bool) (StartInt_4 Int) (Start_5 String))
  ((Start String ("0" "" (str.substr Start StartInt StartInt) (str.replace Start_1 Start_1 Start_1) (ite StartBool Start_2 Start_1)))
   (StartInt Int (1 (str.len Start_10)))
   (StartBool Bool (false true (str.<= Start_10 Start_4) (str.suffixof Start_3 Start_11) (<= StartInt StartInt_6)))
   (Start_11 String (y "1" (str.++ Start_7 Start_2)))
   (Start_10 String ("b" "a" "0" y (str.++ Start_4 Start_7) (str.at Start_6 StartInt) (str.substr Start_8 StartInt_5 StartInt_2)))
   (StartInt_1 Int (1 (str.to_int Start_1)))
   (StartInt_6 Int (0 (str.indexof Start_7 Start_7 StartInt_4) (str.to_int Start_4)))
   (StartInt_5 Int (1 0 (str.indexof Start_3 Start_6 StartInt_6)))
   (StartInt_2 Int (1 (str.len Start_9) (str.indexof Start_9 Start_4 StartInt_5)))
   (StartInt_3 Int (1 0 (str.len Start_8) (str.indexof Start_8 Start_7 StartInt_2) (str.to_int Start)))
   (Start_2 String ("1" (str.++ Start_2 Start) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt)))
   (Start_9 String ("" (str.at Start_1 StartInt_6) (str.from_int StartInt_6)))
   (Start_3 String ("a" y (str.++ Start_1 Start_1) (str.at Start_3 StartInt_2) (str.replace Start_3 Start_4 Start)))
   (Start_4 String ("b" (str.at Start_1 StartInt_2) (str.replace Start_5 Start Start_3) (ite StartBool_1 Start_6 Start_6)))
   (Start_6 String ("a" (str.++ Start_4 Start_4) (str.from_int StartInt_2) (ite StartBool_2 Start_1 Start_5)))
   (Start_7 String ("1" "a" "0" "" (str.replace Start_3 Start_8 Start_5) (str.from_int StartInt)))
   (Start_1 String (y (str.at Start_9 StartInt_2) (str.substr Start_9 StartInt StartInt_2) (str.replace Start_5 Start_7 Start_2)))
   (StartBool_1 Bool (false (not StartBool_3) (str.< Start_4 Start_4) (str.<= Start_4 Start_4) (str.prefixof Start_3 Start_6) (str.suffixof Start_2 Start_2) (str.contains Start_4 Start_5) (= Start_5 Start_2) (= StartInt_1 StartInt) (<= StartInt_1 StartInt)))
   (StartBool_3 Bool (true (str.prefixof Start Start_5) (str.suffixof Start_7 Start_2) (= Start Start) (= StartInt StartInt_2)))
   (Start_8 String (y "" "a" "1" (str.++ Start_4 Start_3) (str.at Start StartInt_3) (str.substr Start_2 StartInt StartInt_4)))
   (StartBool_2 Bool (true false (not StartBool) (str.< Start_1 Start_6) (str.prefixof Start_1 Start_5) (str.suffixof Start_6 Start_6) (= Start_3 Start_3) (<= StartInt StartInt_2)))
   (StartInt_4 Int (0 1 (str.to_int Start_7)))
   (Start_5 String ("b" "" (str.++ Start_1 Start_1) (str.substr Start_2 StartInt_2 StartInt_4) (str.replace Start_4 Start_6 Start_3) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.replace "b" (ite (str.< y "b") "" "a") (str.replace "0" (str.replace "0" x y) "0")) "0")))

(check-synth)
