(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (StartInt_3 Int) (Start_10 String) (Start_14 String) (Start_6 String) (Start_1 String) (StartInt_4 Int) (Start_11 String) (Start_3 String) (Start_4 String) (Start_9 String) (Start_2 String) (StartInt_1 Int) (StartInt_6 Int) (Start_7 String) (Start_12 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_13 String) (Start_8 String) (Start_15 String) (StartBool_1 Bool) (StartBool_4 Bool) (StartInt_2 Int) (StartInt_7 Int) (StartBool_5 Bool) (Start_5 String) (StartBool_3 Bool) (Start_16 String))
  ((Start String ("" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_1 Start_2 Start_1)))
   (StartInt Int (0 (str.to_int Start_9)))
   (StartBool Bool (false true (not StartBool_4) (and StartBool StartBool_2) (str.<= Start_1 Start_7) (str.contains Start_9 Start_17) (= Start_15 Start_11)))
   (Start_17 String (y "" (ite StartBool_3 Start_15 Start_6)))
   (StartInt_3 Int (1 (str.len Start_4)))
   (Start_10 String ("0" "" (str.++ Start_7 Start_5) (str.replace Start_6 Start_1 Start_1) (str.from_int StartInt_1)))
   (Start_14 String ("1" (str.++ Start_2 Start_5) (str.from_int StartInt_2) (ite StartBool_5 Start_12 Start_10)))
   (Start_6 String ("b" (str.++ Start_7 Start_3) (str.substr Start_8 StartInt_2 StartInt) (str.from_int StartInt_1)))
   (Start_1 String (y (str.replace Start Start_5 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_4 Int (1 (str.indexof Start_1 Start_1 StartInt_4) (str.to_int Start_8)))
   (Start_11 String ("b" (str.++ Start_10 Start_9)))
   (Start_3 String (x (str.at Start_1 StartInt) (str.replace Start_4 Start_1 Start_3) (str.from_int StartInt)))
   (Start_4 String ("a" (str.from_int StartInt_1)))
   (Start_9 String (x "1" "0" "" "a" (str.at Start_2 StartInt_3) (str.substr Start_10 StartInt_3 StartInt_4) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_3)))
   (Start_2 String (x (str.replace Start_1 Start_2 Start_3)))
   (StartInt_1 Int (0 1 (str.to_int Start_2)))
   (StartInt_6 Int (1 (str.len Start_5) (str.indexof Start_1 Start_2 StartInt_3)))
   (Start_7 String ("" "1" "0" (str.++ Start_7 Start_7) (str.replace Start_2 Start_7 Start_10) (ite StartBool Start_9 Start_12)))
   (Start_12 String ("a" (str.++ Start_3 Start) (str.substr Start_9 StartInt_1 StartInt_4) (str.replace Start_4 Start_2 Start_3) (str.from_int StartInt_3) (ite StartBool_3 Start_4 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_4) (and StartBool_4 StartBool_2) (str.prefixof Start Start) (str.suffixof Start_4 Start_3) (str.contains Start_13 Start_14) (= StartInt_4 StartInt_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_5 Start_8 StartInt_4) (str.to_int Start_8)))
   (Start_13 String ("a" (str.++ Start_4 Start_9) (str.substr Start_6 StartInt_5 StartInt_1) (str.replace Start_13 Start_15 Start_7) (str.from_int StartInt_6)))
   (Start_8 String (y (str.at Start StartInt_2) (str.replace Start_4 Start_11 Start_2) (ite StartBool_3 Start_11 Start)))
   (Start_15 String ("b" x (str.++ Start_3 Start_2)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start_4 Start) (str.suffixof Start_4 Start_4) (= Start_4 Start_6)))
   (StartBool_4 Bool (true false (not StartBool_3) (str.<= Start_2 Start_12) (str.prefixof Start_1 Start) (= Start Start_2) (= StartInt_7 StartInt_7) (<= StartInt_4 StartInt_7)))
   (StartInt_2 Int (0 1 (str.len Start_9) (str.to_int Start)))
   (StartInt_7 Int (1 (str.indexof Start_6 Start_7 StartInt_3)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool_1) (str.<= Start_2 Start_11) (= StartInt_4 StartInt_2) (<= StartInt_1 StartInt_1)))
   (Start_5 String ("b" "" x (str.++ Start_11 Start) (str.at Start_11 StartInt_7) (str.replace Start_16 Start_9 Start_1) (str.from_int StartInt_3) (ite StartBool_5 Start_15 Start_6)))
   (StartBool_3 Bool (false (not StartBool_1) (str.prefixof Start_10 Start_3) (str.suffixof Start Start_8) (= Start_7 Start_5) (= StartInt StartInt_3)))
   (Start_16 String ("a" (str.++ Start_4 Start_13) (str.at Start_16 StartInt_7) (str.from_int StartInt_5) (ite StartBool Start_6 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "1" x) "" (str.at x 0))))

(check-synth)
