(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_12 Int) (Start_7 String) (Start_2 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_12 String) (Start_5 String) (Start_6 String) (Start_8 String) (Start_3 String) (StartInt_5 Int) (StartInt_2 Int) (StartInt_1 Int) (StartInt_11 Int) (Start_4 String) (Start_9 String) (StartInt_6 Int) (Start_11 String) (StartInt_3 Int) (StartInt_7 Int) (Start_13 String) (Start_10 String) (StartInt_8 Int) (StartInt_9 Int) (Start_1 String) (StartInt_10 Int) (Start_14 String))
  ((Start String ("0" (str.++ Start Start_1) (str.at Start_1 StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.indexof Start Start_11 StartInt_11)))
   (StartBool Bool (false true (not StartBool) (str.< Start_5 Start_12) (str.prefixof Start Start_2) (str.suffixof Start_8 Start_11) (= StartInt_2 StartInt_12) (<= StartInt_4 StartInt_9)))
   (StartInt_12 Int (1 0))
   (Start_7 String ("b" (str.++ Start_3 Start_5) (str.from_int StartInt_1)))
   (Start_2 String ("1" (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt_9)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (str.< Start_6 Start_2) (str.prefixof Start_7 Start_2) (str.contains Start_1 Start_8) (= Start_8 Start_7) (= StartInt_1 StartInt_2) (<= StartInt StartInt_3)))
   (StartInt_4 Int (1 0 (str.len Start_2) (str.to_int Start_6)))
   (Start_12 String ("1" "0" (str.++ Start_5 Start_7) (str.replace Start_9 Start_9 Start_13) (ite StartBool_1 Start_6 Start_5)))
   (Start_5 String ("1" (str.++ Start_6 Start_5) (str.at Start_7 StartInt_1) (str.substr Start_5 StartInt_1 StartInt) (ite StartBool_1 Start_5 Start_2)))
   (Start_6 String (y (str.at Start_5 StartInt_4) (str.replace Start_4 Start_5 Start_7)))
   (Start_8 String ("0" "a" "b" "1" (str.substr Start StartInt_4 StartInt_5) (str.replace Start_3 Start_2 Start_1)))
   (Start_3 String (y x "" "1" (str.substr Start_2 StartInt_4 StartInt_5) (str.replace Start_9 Start_8 Start_5)))
   (StartInt_5 Int (1 (str.len Start_7)))
   (StartInt_2 Int (0 (str.to_int Start_2)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_2 Start_3 StartInt) (str.to_int Start_4)))
   (StartInt_11 Int (0 1 (str.len Start_9) (str.to_int Start_14)))
   (Start_4 String (y "0" x "" (str.at Start_5 StartInt_2) (str.substr Start StartInt StartInt_2)))
   (Start_9 String ("1" x "" "b" y (str.++ Start_3 Start_5) (str.at Start_10 StartInt) (str.substr Start_11 StartInt_5 StartInt_6)))
   (StartInt_6 Int (0 1 (str.len Start_4) (str.to_int Start_2)))
   (Start_11 String ("0" (str.at Start_12 StartInt_7) (str.substr Start_5 StartInt_2 StartInt_6) (str.replace Start_1 Start_11 Start_5) (ite StartBool_1 Start_12 Start_1)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_4 Start_6 StartInt_4)))
   (StartInt_7 Int (0 1 (str.len Start_9) (str.indexof Start_4 Start_2 StartInt_2) (str.to_int Start_8)))
   (Start_13 String ("" (str.++ Start_4 Start_11) (str.at Start_12 StartInt_5) (str.substr Start_1 StartInt_1 StartInt_6)))
   (Start_10 String ("1" (str.++ Start_7 Start_12) (str.at Start_12 StartInt_3) (str.substr Start_11 StartInt_8 StartInt_3)))
   (StartInt_8 Int (1 (str.indexof Start_9 Start_10 StartInt_6)))
   (StartInt_9 Int (0 (str.len Start_13)))
   (Start_1 String (x (str.substr Start_12 StartInt_6 StartInt_4) (str.from_int StartInt_10)))
   (StartInt_10 Int (1 0 (str.indexof Start_13 Start_12 StartInt_8)))
   (Start_14 String (x "b" (str.from_int StartInt_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.++ "a" (str.at x 0)) "b")))

(check-synth)
