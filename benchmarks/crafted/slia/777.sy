(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartInt_5 Int) (Start_11 String) (Start_15 String) (StartBool_3 Bool) (Start_8 String) (Start_12 String) (StartBool_2 Bool) (Start_7 String) (Start_6 String) (Start_14 String) (Start_10 String) (Start_2 String) (StartBool_1 Bool) (Start_4 String) (StartInt_1 Int) (Start_9 String) (StartInt_3 Int) (StartInt_2 Int) (Start_3 String) (Start_5 String) (StartInt_4 Int) (Start_1 String))
  ((Start String (y "0" "" "1" (str.at Start_1 StartInt_1) (str.replace Start Start_1 Start_2) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_6)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_1 StartBool_2) (str.suffixof Start Start_7)))
   (Start_13 String ("0" "1" (str.replace Start_2 Start_10 Start_7) (str.from_int StartInt_2) (ite StartBool_3 Start_4 Start_9)))
   (StartInt_5 Int (1 0 (str.len Start_15) (str.indexof Start_6 Start_12 StartInt_5) (str.to_int Start)))
   (Start_11 String (x (str.++ Start Start_11) (str.replace Start_12 Start_3 Start_1) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_7)))
   (Start_15 String ("0" (str.at Start StartInt_1) (str.replace Start_1 Start_10 Start_13) (str.from_int StartInt_4)))
   (StartBool_3 Bool (true (str.< Start_3 Start_10) (str.prefixof Start_12 Start_5) (str.suffixof Start_4 Start_6) (str.contains Start_2 Start_15) (= Start_14 Start_1) (= StartInt_5 StartInt) (<= StartInt_4 StartInt_3)))
   (Start_8 String ("0" (str.substr Start_6 StartInt_3 StartInt_2) (ite StartBool Start_4 Start_4)))
   (Start_12 String (y (str.at Start StartInt_2) (str.replace Start_4 Start_5 Start_6) (str.from_int StartInt_2)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_1 StartBool) (str.< Start_6 Start_5) (str.suffixof Start_6 Start_5) (str.contains Start_9 Start_7) (= Start Start_10) (= StartInt_1 StartInt) (<= StartInt_1 StartInt)))
   (Start_7 String ("0" "" (str.at Start_4 StartInt_3) (ite StartBool_1 Start_1 Start_1)))
   (Start_6 String (x (str.++ Start Start_6) (str.from_int StartInt_3)))
   (Start_14 String (y (str.at Start_2 StartInt_4) (str.substr Start_4 StartInt_3 StartInt_1) (str.replace Start_4 Start_10 Start)))
   (Start_10 String (x (str.++ Start_2 Start_9) (str.replace Start_6 Start_11 Start_3)))
   (Start_2 String ("a" (str.at Start_3 StartInt_2) (str.substr Start StartInt StartInt_3) (ite StartBool_1 Start Start_2)))
   (StartBool_1 Bool (true (str.<= Start_3 Start_1) (str.prefixof Start Start_1) (= StartInt_1 StartInt)))
   (Start_4 String (x "a" "b" (str.++ Start_4 Start) (str.at Start_1 StartInt) (ite StartBool_1 Start_5 Start)))
   (StartInt_1 Int (0 1 (str.indexof Start_3 Start_6 StartInt_2)))
   (Start_9 String ("a" (str.++ Start_13 Start_8) (str.replace Start_14 Start_5 Start_11)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_3 StartInt_3)))
   (StartInt_2 Int (1 (str.to_int Start_2)))
   (Start_3 String (x "1" (str.++ Start Start_4) (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt_1) (ite StartBool Start_3 Start_1)))
   (Start_5 String ("1" (str.++ Start Start_6) (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt StartInt_4) (str.from_int StartInt_3) (ite StartBool Start Start_6)))
   (StartInt_4 Int (1 (str.len Start_7) (str.to_int Start_3)))
   (Start_1 String ("1" x (str.++ Start Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof "b" y (str.len (str.++ y y))))))

(check-synth)
