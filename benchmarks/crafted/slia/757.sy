(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (StartInt_4 Int) (StartInt_3 Int) (StartBool_1 Bool) (Start_3 String) (Start_1 String) (Start_2 String) (StartInt_2 Int) (StartInt_1 Int))
  ((Start String (y "a" x "0" "b" "" (str.from_int StartInt_1)))
   (StartInt Int (0 (str.to_int Start)))
   (StartBool Bool (true false (and StartBool StartBool) (str.<= Start_3 Start) (str.prefixof Start_2 Start_2) (str.contains Start_1 Start_1)))
   (Start_4 String (x "b" "a" y "" "1" "0" (str.replace Start_2 Start Start_1)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start StartInt_2) (str.to_int Start_3)))
   (StartInt_3 Int (0 1 (str.len Start_2)))
   (StartBool_1 Bool (false (str.<= Start_1 Start_2) (str.prefixof Start_3 Start_4) (str.suffixof Start_3 Start_4) (str.contains Start_3 Start_1) (= StartInt_1 StartInt_1) (<= StartInt_3 StartInt_4)))
   (Start_3 String (x (str.at Start_1 StartInt_2) (ite StartBool_1 Start_1 Start_3)))
   (Start_1 String ("0" x "b" (str.at Start_2 StartInt) (str.from_int StartInt_2) (ite StartBool Start Start_2)))
   (Start_2 String ("b" (str.++ Start_2 Start_1) (str.substr Start StartInt StartInt_2) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.to_int Start_1)))
   (StartInt_1 Int (1 (str.indexof Start_1 Start StartInt_2) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.++ "1" y) "0")))

(check-synth)
