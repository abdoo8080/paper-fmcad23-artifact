(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_3 Int) (Start_3 String) (Start_9 String) (Start_4 String) (StartInt_4 Int) (StartInt_6 Int) (StartBool_2 Bool) (Start_8 String) (Start_15 String) (Start_5 String) (Start_13 String) (StartBool_1 Bool) (Start_2 String) (Start_6 String) (StartInt_1 Int) (Start_11 String) (StartInt_2 Int) (StartBool_3 Bool) (Start_12 String) (StartInt_7 Int) (Start_14 String) (Start_10 String) (StartInt_5 Int) (Start_1 String) (Start_7 String) (Start_16 String))
  ((Start String ("0" (str.++ Start_1 Start) (str.at Start_2 StartInt) (str.replace Start Start Start) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.len Start_16) (str.to_int Start_15)))
   (StartBool Bool (true false (str.< Start_10 Start_12) (str.<= Start_10 Start) (str.prefixof Start_2 Start_4) (str.suffixof Start_4 Start_9) (str.contains Start_1 Start_5) (<= StartInt_8 StartInt_4)))
   (StartInt_8 Int (0 1 (str.indexof Start_13 Start_13 StartInt_5) (str.to_int Start_13)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_3 StartInt_2)))
   (Start_3 String ("0" (str.++ Start_5 Start_10) (str.replace Start_10 Start_3 Start) (str.from_int StartInt_5) (ite StartBool_3 Start_7 Start_1)))
   (Start_9 String (y (str.++ Start_1 Start_5) (ite StartBool_2 Start_5 Start_7)))
   (Start_4 String (x "a" "1" "" y "b" "0" (str.at Start StartInt_2) (str.substr Start_5 StartInt_2 StartInt_4) (str.from_int StartInt_4)))
   (StartInt_4 Int (0 (str.to_int Start_6)))
   (StartInt_6 Int (0 1 (str.indexof Start_2 Start_1 StartInt_5)))
   (StartBool_2 Bool (true (str.<= Start Start_1) (str.prefixof Start_6 Start) (str.suffixof Start_2 Start_5) (str.contains Start_3 Start_2) (= Start_4 Start_3) (= StartInt_3 StartInt_2)))
   (Start_8 String ("" (str.at Start_6 StartInt) (str.replace Start_3 Start_7 Start_9) (str.from_int StartInt_1) (ite StartBool_1 Start_9 Start_2)))
   (Start_15 String (y (str.replace Start_5 Start_11 Start_5)))
   (Start_5 String ("a" "" x (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start Start_1 Start_2) (str.from_int StartInt_2)))
   (Start_13 String ("a" (str.++ Start_6 Start_13) (str.substr Start_12 StartInt StartInt_5) (str.from_int StartInt_6) (ite StartBool_1 Start_13 Start_7)))
   (StartBool_1 Bool (false (str.<= Start_1 Start) (str.prefixof Start_4 Start_1) (str.suffixof Start_5 Start_3) (str.contains Start_5 Start_1) (= Start_4 Start_5)))
   (Start_2 String ("b" "a" "1" "0" x y "" (str.at Start_3 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_3) (str.replace Start_4 Start_3 Start_1) (ite StartBool_1 Start_1 Start_2)))
   (Start_6 String ("a" y (str.++ Start_7 Start_8) (str.replace Start Start_6 Start_6) (ite StartBool_1 Start_2 Start_8)))
   (StartInt_1 Int (1 (str.len Start_2) (str.to_int Start)))
   (Start_11 String (x "" "1" y "a" (str.++ Start_7 Start_4) (str.at Start_12 StartInt_7) (str.replace Start_12 Start_13 Start_13)))
   (StartInt_2 Int (1 0 (str.len Start_6)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.<= Start_11 Start_1) (str.contains Start_11 Start_6) (= Start_11 Start_12)))
   (Start_12 String (y "0" (str.++ Start_7 Start_2) (str.replace Start_13 Start_2 Start_6)))
   (StartInt_7 Int (0 1 (str.len Start_4) (str.to_int Start_14)))
   (Start_14 String (y (str.++ Start_6 Start_13) (ite StartBool_1 Start_8 Start)))
   (Start_10 String ("b" (str.++ Start_4 Start_15) (str.at Start_5 StartInt)))
   (StartInt_5 Int (0 (str.len Start_4) (str.to_int Start_3)))
   (Start_1 String (x "" "b" "1" (str.at Start_1 StartInt_1)))
   (Start_7 String (x "a" (str.++ Start_4 Start_2) (str.replace Start_6 Start_8 Start_7) (str.from_int StartInt)))
   (Start_16 String (y "0" (str.at Start_11 StartInt_7) (ite StartBool_1 Start_5 Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x "0")))

(check-synth)
