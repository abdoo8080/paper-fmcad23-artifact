(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_1 String) (Start_8 String) (StartBool_3 Bool) (StartInt_2 Int) (StartInt_1 Int) (Start_3 String) (StartBool_2 Bool) (StartInt_4 Int) (Start_6 String) (StartInt_3 Int) (Start_7 String) (Start_5 String) (Start_9 String) (Start_2 String) (StartInt_6 Int) (StartInt_5 Int) (StartBool_1 Bool) (Start_4 String))
  ((Start String ("" x (str.at Start StartInt) (str.replace Start_1 Start Start_2) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1 (str.indexof Start_3 Start_6 StartInt_4)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool StartBool_4) (str.suffixof Start Start_8) (str.contains Start_2 Start_8) (= Start_4 Start_7) (<= StartInt_5 StartInt_2)))
   (StartBool_5 Bool (false true (not StartBool_4) (str.prefixof Start_3 Start_9)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool StartBool_5) (str.< Start_8 Start_1) (str.contains Start_5 Start) (= StartInt_2 StartInt_5) (<= StartInt_5 StartInt_3)))
   (Start_1 String ("0" x (str.++ Start Start_4) (str.from_int StartInt_5)))
   (Start_8 String ("b" y "a" "0" "" (str.++ Start_3 Start_4) (str.at Start_2 StartInt) (str.substr Start_3 StartInt StartInt_1)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (str.<= Start_4 Start_3) (str.suffixof Start Start_3) (= StartInt_5 StartInt_3) (<= StartInt_6 StartInt_6)))
   (StartInt_2 Int (0 1))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.indexof Start Start_2 StartInt_1)))
   (Start_3 String ("" (str.at Start_1 StartInt)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_1) (str.<= Start_1 Start) (str.prefixof Start_3 Start_2) (str.suffixof Start_4 Start_5) (str.contains Start_1 Start_6)))
   (StartInt_4 Int (1 (str.len Start_5) (str.to_int Start_3)))
   (Start_6 String ("0" "1" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start_6 Start_2 Start_6)))
   (StartInt_3 Int (0 1 (str.len Start_2)))
   (Start_7 String (y "0" "b" (str.at Start_2 StartInt_3) (str.from_int StartInt)))
   (Start_5 String (x (str.at Start_2 StartInt_5) (str.substr Start StartInt StartInt_4) (str.replace Start_3 Start_2 Start_4) (str.from_int StartInt_1)))
   (Start_9 String ("0" (str.++ Start_2 Start_4) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_5 Start_2 Start_5)))
   (Start_2 String ("1" "" (str.++ Start_1 Start_6) (str.at Start_8 StartInt_4) (str.replace Start_4 Start_8 Start_6) (str.from_int StartInt)))
   (StartInt_6 Int (1 0 (str.len Start_1) (str.to_int Start_4)))
   (StartInt_5 Int (0 1 (str.len Start_7)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_1) (str.< Start Start_2) (str.<= Start_2 Start_1) (str.suffixof Start_1 Start_3) (str.contains Start Start_2) (<= StartInt_1 StartInt_2)))
   (Start_4 String ("0" "b" x (str.substr Start_5 StartInt_1 StartInt_2) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" x "1")))

(check-synth)
