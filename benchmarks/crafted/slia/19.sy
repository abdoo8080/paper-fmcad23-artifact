(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (Start_14 String) (StartBool_4 Bool) (StartBool_6 Bool) (StartInt_5 Int) (StartBool_10 Bool) (StartInt_4 Int) (StartInt_2 Int) (Start_12 String) (StartBool_8 Bool) (Start_5 String) (Start_3 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_13 String) (Start_4 String) (StartBool_5 Bool) (Start_1 String) (Start_8 String) (StartBool_3 Bool) (Start_11 String) (StartInt_7 Int) (StartInt_9 Int) (StartInt_1 Int) (Start_2 String) (Start_10 String) (StartInt_6 Int) (Start_7 String) (Start_9 String) (StartBool_7 Bool) (Start_6 String) (StartInt_8 Int) (StartBool_9 Bool))
  ((Start String ("1" "b" (str.from_int StartInt) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 0 (str.indexof Start_7 Start_11 StartInt_2) (str.to_int Start_12)))
   (StartBool Bool (false (and StartBool_4 StartBool_10) (str.prefixof Start_2 Start_13) (= StartInt_1 StartInt_2)))
   (StartBool_1 Bool (true (and StartBool_4 StartBool_5) (str.<= Start_6 Start_9) (= Start_4 Start_4) (= StartInt_9 StartInt_7) (<= StartInt StartInt_9)))
   (Start_14 String ("a" (str.at Start_9 StartInt_7)))
   (StartBool_4 Bool (true false (not StartBool_2) (str.<= Start_3 Start_5) (str.suffixof Start_6 Start_2) (str.contains Start_3 Start_4) (= Start_5 Start_6) (<= StartInt_3 StartInt_3)))
   (StartBool_6 Bool (false true (not StartBool_7) (and StartBool_5 StartBool_8) (str.< Start_4 Start_9) (str.<= Start_7 Start_3) (str.prefixof Start_7 Start_10) (str.contains Start_1 Start_4) (= Start_2 Start_1)))
   (StartInt_5 Int (1))
   (StartBool_10 Bool (false (str.< Start_9 Start_12) (str.prefixof Start_7 Start_8) (= Start_14 Start_4) (= StartInt_1 StartInt_1) (<= StartInt_6 StartInt_2)))
   (StartInt_4 Int (1 0 (str.to_int Start_5)))
   (StartInt_2 Int (1 0 (str.indexof Start_6 Start_3 StartInt_5) (str.to_int Start)))
   (Start_12 String (y "" "a" (str.at Start_7 StartInt_2) (str.replace Start_10 Start_11 Start_2) (str.from_int StartInt_1) (ite StartBool_6 Start_5 Start_11)))
   (StartBool_8 Bool (true (not StartBool_4) (and StartBool_8 StartBool_5) (str.prefixof Start_9 Start_7) (str.suffixof Start_7 Start_7) (= Start_8 Start_6)))
   (Start_5 String (y (str.at Start_2 StartInt_2) (str.substr Start_2 StartInt_3 StartInt) (str.replace Start_3 Start_2 Start_5)))
   (Start_3 String ("a" y "0" "b" "" "1" (str.substr Start_4 StartInt_5 StartInt_7) (str.replace Start_7 Start_5 Start_8) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 (str.indexof Start_4 Start_4 StartInt_4)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_3 StartBool_4) (str.< Start Start_3) (str.contains Start_1 Start_4) (= Start_5 Start_5) (= StartInt StartInt)))
   (Start_13 String ("a" (str.++ Start_2 Start_9) (str.substr Start_5 StartInt_9 StartInt) (str.from_int StartInt_7) (ite StartBool_5 Start_6 Start_4)))
   (Start_4 String (x "" (str.++ Start_3 Start) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start Start Start_4) (ite StartBool_2 Start_3 Start)))
   (StartBool_5 Bool (false true (not StartBool_6) (and StartBool_4 StartBool) (str.< Start_5 Start_2) (str.<= Start_7 Start_4) (str.contains Start_5 Start) (= StartInt_4 StartInt_2) (<= StartInt_2 StartInt_4)))
   (Start_1 String (x (str.++ Start_2 Start_2) (str.substr Start_2 StartInt StartInt) (str.replace Start_2 Start_3 Start_4)))
   (Start_8 String ("0" (str.++ Start_8 Start_2) (str.replace Start_4 Start_2 Start_5)))
   (StartBool_3 Bool (true false (str.< Start_7 Start_5) (<= StartInt_1 StartInt)))
   (Start_11 String ("1" (str.at Start_4 StartInt_6) (str.from_int StartInt_8) (ite StartBool_8 Start_11 Start_7)))
   (StartInt_7 Int (0 (str.indexof Start_5 Start_7 StartInt_2) (str.to_int Start_8)))
   (StartInt_9 Int (1 0 (str.to_int Start_3)))
   (StartInt_1 Int (1 (str.len Start_3) (str.indexof Start_4 Start_2 StartInt_4)))
   (Start_2 String (y (str.at Start StartInt_8) (str.replace Start_4 Start_5 Start) (str.from_int StartInt_5) (ite StartBool_5 Start Start_7)))
   (Start_10 String ("a" "0" y x (str.++ Start_6 Start_9) (ite StartBool Start_6 Start_5)))
   (StartInt_6 Int (1 (str.to_int Start)))
   (Start_7 String (x "0" y "a" "b" "1" "" (str.++ Start_7 Start_4) (str.at Start_3 StartInt_5) (str.replace Start_6 Start_1 Start_3)))
   (Start_9 String ("b" y "1" (str.++ Start_10 Start_7) (str.substr Start_4 StartInt_4 StartInt_9) (str.from_int StartInt_9)))
   (StartBool_7 Bool (true (not StartBool_4) (and StartBool_1 StartBool_9) (str.< Start_10 Start_10) (str.<= Start_11 Start_6) (str.prefixof Start Start_10) (str.suffixof Start_7 Start_7) (str.contains Start Start_7) (= StartInt_9 StartInt_5) (<= StartInt_6 StartInt_7)))
   (Start_6 String ("a" (str.at Start_3 StartInt) (str.substr Start_2 StartInt StartInt_6) (str.replace Start_5 Start_4 Start_2) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_8 Int (1 (str.indexof Start_7 Start StartInt_6)))
   (StartBool_9 Bool (false true (not StartBool_7) (str.<= Start_6 Start_4) (= Start_10 Start_9) (<= StartInt_7 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x y "a")))

(check-synth)
