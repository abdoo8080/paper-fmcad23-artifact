(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (StartInt_5 Int) (Start_1 String) (StartInt_2 Int) (Start_2 String) (StartInt_1 Int) (Start_5 String) (Start_3 String) (StartInt_3 Int) (Start_4 String) (StartBool_1 Bool) (StartInt_4 Int))
  ((Start String ("0" "1" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt) (str.from_int StartInt_2) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 (str.len Start_3)))
   (StartBool Bool (true false (not StartBool_1) (str.< Start_1 Start_2) (str.<= Start_1 Start_4) (str.prefixof Start_5 Start) (str.contains Start_5 Start_2) (= Start_4 Start_4) (= StartInt_1 StartInt_2) (<= StartInt_3 StartInt)))
   (Start_6 String ("" x (str.++ Start_5 Start) (str.at Start_2 StartInt_3) (str.replace Start_3 Start_4 Start) (str.from_int StartInt_4)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_6 StartInt_5)))
   (Start_1 String ("b" y (ite StartBool Start_1 Start)))
   (StartInt_2 Int (1 0 (str.to_int Start_2)))
   (Start_2 String ("a" (str.replace Start_1 Start Start_1)))
   (StartInt_1 Int (1 (str.indexof Start_2 Start_1 StartInt_1)))
   (Start_5 String (x (str.at Start_2 StartInt) (ite StartBool_1 Start_2 Start_5)))
   (Start_3 String (x "" (str.from_int StartInt)))
   (StartInt_3 Int (1 (str.to_int Start)))
   (Start_4 String ("a" (str.substr Start_2 StartInt_1 StartInt_1) (ite StartBool_1 Start_4 Start_1)))
   (StartBool_1 Bool (false true (str.<= Start_1 Start) (str.prefixof Start_3 Start_4) (str.contains Start_3 Start) (<= StartInt_4 StartInt_2)))
   (StartInt_4 Int (1 0 (str.indexof Start_5 Start_5 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y x "") "0" (str.from_int (str.len x)))))

(check-synth)
