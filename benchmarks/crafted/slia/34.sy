(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (Start_9 String) (Start_7 String) (StartInt_7 Int) (StartInt_4 Int) (StartBool_2 Bool) (Start_1 String) (Start_5 String) (Start_2 String) (Start_6 String) (Start_4 String) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_3 Int) (Start_8 String) (StartInt_1 Int) (StartInt_5 Int) (StartInt_6 Int))
  ((Start String (y "" (str.substr Start_1 StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (true (and StartBool_1 StartBool_2) (str.< Start_4 Start_2) (str.<= Start_1 Start_3) (str.contains Start Start_7) (= StartInt_7 StartInt)))
   (Start_3 String ("0" x (str.at Start_9 StartInt) (str.substr Start_3 StartInt_4 StartInt_1) (str.from_int StartInt_4) (ite StartBool Start_6 Start_5)))
   (Start_9 String ("a" "0" (str.++ Start_4 Start_6)))
   (Start_7 String (y (str.++ Start_5 Start_9) (str.at Start_9 StartInt_2) (str.replace Start_3 Start Start) (str.from_int StartInt_1)))
   (StartInt_7 Int (1 (str.indexof Start_2 Start_8 StartInt_6) (str.to_int Start_7)))
   (StartInt_4 Int (0 1 (str.indexof Start_6 Start_7 StartInt_7)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_2 StartBool_1) (str.<= Start_8 Start_5) (str.suffixof Start_8 Start_7) (= Start_6 Start_7)))
   (Start_1 String ("" "a" (str.++ Start_2 Start) (str.replace Start_2 Start_1 Start)))
   (Start_5 String ("" "a" "1" (str.++ Start_4 Start_4) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_2)))
   (Start_2 String ("0" (str.++ Start_1 Start_3) (str.at Start_1 StartInt) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_5 Start_2 Start_3) (ite StartBool Start_4 Start_4)))
   (Start_6 String ("" (str.at Start_7 StartInt_2) (str.substr Start_7 StartInt_3 StartInt_4) (str.replace Start_2 Start_1 Start_2) (ite StartBool_1 Start_8 Start_5)))
   (Start_4 String ("" (str.++ Start_5 Start_5) (str.at Start_4 StartInt_1) (str.substr Start StartInt_3 StartInt_2)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_2) (str.suffixof Start_6 Start_1) (= StartInt_5 StartInt_6)))
   (StartInt_2 Int (1 0 (str.len Start_3)))
   (StartInt_3 Int (1 (str.len Start) (str.indexof Start_6 Start StartInt_3)))
   (Start_8 String ("a" (str.++ Start_8 Start)))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.to_int Start_1)))
   (StartInt_5 Int (1 0 (str.indexof Start_5 Start_5 StartInt_3) (str.to_int Start_6)))
   (StartInt_6 Int (1 (str.len Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" "" x)))

(check-synth)
