(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_11 String) (Start_4 String) (StartInt_6 Int) (Start_2 String) (StartBool_4 Bool) (Start_6 String) (Start_5 String) (StartBool_1 Bool) (Start_10 String) (StartInt_2 Int) (StartInt_3 Int) (StartBool_2 Bool) (Start_7 String) (Start_3 String) (StartInt_5 Int) (StartBool_3 Bool) (Start_9 String) (StartInt_4 Int) (Start_8 String) (StartInt_1 Int))
  ((Start String ("" "b" "a" (str.++ Start_1 Start) (str.at Start_2 StartInt) (str.replace Start_3 Start Start_2) (ite StartBool_1 Start_2 Start_2)))
   (StartInt Int (0))
   (StartBool Bool (true (not StartBool_4) (and StartBool StartBool_3) (str.< Start Start_2) (str.<= Start_5 Start_8) (str.suffixof Start_7 Start_4) (= StartInt_6 StartInt_5) (<= StartInt_1 StartInt_2)))
   (Start_1 String ("" (str.substr Start_11 StartInt_2 StartInt) (ite StartBool_3 Start_1 Start_11)))
   (Start_11 String ("a"))
   (Start_4 String ("b" (ite StartBool_3 Start_6 Start_6)))
   (StartInt_6 Int (1 0 (str.indexof Start_9 Start_3 StartInt_3) (str.to_int Start_6)))
   (Start_2 String (x (ite StartBool Start_2 Start_4)))
   (StartBool_4 Bool (true false (not StartBool_1) (str.< Start_10 Start_9) (str.prefixof Start_7 Start_1) (str.contains Start_1 Start_4) (= Start_3 Start_2) (= StartInt StartInt_6) (<= StartInt_6 StartInt_5)))
   (Start_6 String (y "a" (str.++ Start_3 Start_6) (str.replace Start_3 Start_3 Start_4) (str.from_int StartInt) (ite StartBool_2 Start_3 Start_3)))
   (Start_5 String (y "" (str.replace Start_7 Start_2 Start_9) (str.from_int StartInt_5) (ite StartBool_4 Start Start_1)))
   (StartBool_1 Bool (false (not StartBool) (str.< Start_2 Start) (str.suffixof Start_4 Start_4) (str.contains Start_2 Start) (= Start_5 Start_6) (= StartInt StartInt) (<= StartInt StartInt)))
   (Start_10 String ("1" (str.++ Start_9 Start_9) (str.substr Start_10 StartInt_6 StartInt_2) (str.replace Start_8 Start_6 Start_6)))
   (StartInt_2 Int (1 (str.to_int Start_8)))
   (StartInt_3 Int (1 0 (str.len Start_5) (str.indexof Start_2 Start StartInt_1)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_3) (str.<= Start_3 Start_5) (str.prefixof Start Start) (str.suffixof Start_6 Start_1) (str.contains Start_4 Start) (= StartInt StartInt)))
   (Start_7 String ("0" (str.++ Start_3 Start_2) (str.at Start_3 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_2 Start_8 Start_9) (str.from_int StartInt_2)))
   (Start_3 String ("a" x "1" (str.++ Start_11 Start_9) (str.at Start_10 StartInt_5) (str.substr Start_7 StartInt_3 StartInt_3) (str.replace Start Start_11 Start_6) (str.from_int StartInt_2)))
   (StartInt_5 Int (0))
   (StartBool_3 Bool (true false (not StartBool) (str.<= Start_1 Start_1) (str.prefixof Start_2 Start_5) (= Start Start_7) (= StartInt StartInt)))
   (Start_9 String ("" y "b" "1" (str.++ Start_9 Start_3) (str.at Start_5 StartInt_3) (str.substr Start_9 StartInt_4 StartInt_5) (str.replace Start_4 Start Start_7)))
   (StartInt_4 Int (1))
   (Start_8 String ("" y "0" (str.at Start StartInt) (str.substr Start_1 StartInt_3 StartInt_3) (ite StartBool_1 Start_8 Start)))
   (StartInt_1 Int (0 1 (str.len Start_5) (str.indexof Start_3 Start_4 StartInt_5) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "a" (str.len y))))

(check-synth)
