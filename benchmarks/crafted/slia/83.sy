(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_1 String) (StartInt_5 Int) (Start_11 String) (Start_9 String) (Start_2 String) (StartInt_1 Int) (StartInt_4 Int) (Start_3 String) (Start_6 String) (Start_10 String) (StartBool_1 Bool) (Start_5 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_4 String) (StartBool_3 Bool) (StartInt_2 Int) (StartBool_4 Bool) (Start_8 String) (Start_7 String))
  ((Start String (y "b" "1" x "0" (str.substr Start_1 StartInt StartInt) (ite StartBool Start_2 Start_1)))
   (StartInt Int (1 (str.to_int Start_3)))
   (StartBool Bool (false (str.< Start Start) (str.<= Start Start_11) (str.suffixof Start_4 Start_4) (str.contains Start_10 Start) (= StartInt_6 StartInt_2)))
   (StartInt_6 Int (1 0 (str.to_int Start)))
   (Start_1 String ("b" "1" (str.++ Start_7 Start_3) (ite StartBool Start_3 Start_10)))
   (StartInt_5 Int (1 0 (str.indexof Start_5 Start_6 StartInt_2) (str.to_int Start_9)))
   (Start_11 String (x (str.substr Start_11 StartInt_2 StartInt)))
   (Start_9 String ("1" (str.substr Start_7 StartInt_1 StartInt_3) (str.from_int StartInt_3)))
   (Start_2 String (x y "0" (str.substr Start StartInt_1 StartInt_1)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start_3 Start_3 StartInt_1)))
   (StartInt_4 Int (1 0 (str.len Start_3) (str.indexof Start_9 Start_5 StartInt_2) (str.to_int Start_6)))
   (Start_3 String (x "b" (str.++ Start Start_1) (ite StartBool_1 Start_1 Start_1)))
   (Start_6 String ("a" "b" "0" (str.++ Start Start_7) (str.at Start_5 StartInt_3) (str.substr Start_2 StartInt_3 StartInt_2) (str.from_int StartInt_3)))
   (Start_10 String ("a" "0" y (str.++ Start Start) (str.substr Start_9 StartInt_5 StartInt_4)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_1) (str.prefixof Start_3 Start_2) (= StartInt StartInt_1)))
   (Start_5 String (x (ite StartBool Start_3 Start_5)))
   (StartInt_3 Int (1 0 (str.to_int Start_9)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool StartBool_3) (str.<= Start_4 Start_3) (str.suffixof Start_5 Start) (= StartInt_1 StartInt)))
   (Start_4 String ("" x "0" "1" (str.++ Start_5 Start_5) (str.substr Start StartInt StartInt_1) (str.replace Start_2 Start_4 Start_6) (str.from_int StartInt_2)))
   (StartBool_3 Bool (false (not StartBool_1) (str.<= Start_9 Start_2) (str.prefixof Start_7 Start_6) (str.contains Start_10 Start_5) (= Start_4 Start_2) (= StartInt_4 StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_7) (str.indexof Start_4 Start_7 StartInt_1)))
   (StartBool_4 Bool (true (not StartBool) (str.< Start_7 Start_4) (str.suffixof Start_7 Start_7) (str.contains Start_8 Start) (<= StartInt_2 StartInt)))
   (Start_8 String ("1" (ite StartBool_4 Start_4 Start_8)))
   (Start_7 String (y (str.++ Start_4 Start_1) (str.at Start_6 StartInt) (str.replace Start_8 Start Start) (ite StartBool_3 Start_1 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "b" x) "0" "a")))

(check-synth)
