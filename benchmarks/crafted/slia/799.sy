(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_1 String) (StartInt_1 Int) (Start_2 String) (StartBool_2 Bool) (Start_3 String) (Start_13 String) (StartInt_4 Int) (Start_12 String) (Start_4 String) (StartInt_2 Int) (Start_6 String) (Start_11 String) (StartInt_3 Int) (StartInt_7 Int) (Start_7 String) (Start_9 String) (Start_5 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_10 String) (Start_8 String))
  ((Start String ("b" "" (str.++ Start Start_1) (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start_2 Start_3) (ite StartBool Start_1 Start_3)))
   (StartInt Int (0 1 (str.indexof Start_6 Start_1 StartInt) (str.to_int Start_2)))
   (StartBool Bool (false (str.suffixof Start_11 Start_3) (str.contains Start_6 Start_2) (= Start_5 Start_12) (= StartInt_4 StartInt_1) (<= StartInt_4 StartInt)))
   (StartInt_6 Int (0))
   (Start_1 String ("0" "1" x "b" y "" "a" (str.substr Start_9 StartInt_3 StartInt_2) (str.replace Start_8 Start_5 Start_9) (ite StartBool Start_10 Start)))
   (StartInt_1 Int (1 0 (str.to_int Start_2)))
   (Start_2 String (x (str.from_int StartInt_1) (ite StartBool_2 Start Start_8)))
   (StartBool_2 Bool (false true (and StartBool StartBool_2) (= Start_1 Start_9) (= StartInt_3 StartInt_5)))
   (Start_3 String ("1" (str.at Start StartInt_1) (ite StartBool_1 Start_4 Start_2)))
   (Start_13 String ("1" "0" (str.replace Start_4 Start_13 Start_5) (str.from_int StartInt_5)))
   (StartInt_4 Int (1 (str.len Start_9) (str.indexof Start_6 Start StartInt_1) (str.to_int Start_5)))
   (Start_12 String ("b" "0" x "a" (str.at Start_13 StartInt_6) (str.substr Start_2 StartInt_3 StartInt_7)))
   (Start_4 String (x (str.replace Start_2 Start_5 Start_6) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 1 (str.indexof Start_5 Start_2 StartInt) (str.to_int Start_5)))
   (Start_6 String ("a" "1" y "" (str.at Start_4 StartInt) (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_2 Start_5 Start_6) (str.from_int StartInt_1)))
   (Start_11 String (x (str.at Start_8 StartInt_2) (str.substr Start_8 StartInt_2 StartInt_2) (str.replace Start_4 Start_5 Start_6)))
   (StartInt_3 Int (1 (str.len Start_7) (str.to_int Start)))
   (StartInt_7 Int (1 0 (str.len Start_4) (str.to_int Start_4)))
   (Start_7 String (y (str.++ Start_1 Start_6) (str.substr Start_5 StartInt StartInt_1) (str.from_int StartInt_1)))
   (Start_9 String ("a" "" "b" (str.at Start_6 StartInt_4) (str.substr Start_2 StartInt_5 StartInt_1) (str.replace Start_6 Start_1 Start_10)))
   (Start_5 String ("a" "b" (str.substr Start_8 StartInt_3 StartInt) (ite StartBool Start_8 Start_9)))
   (StartBool_1 Bool (true (not StartBool_2) (str.<= Start_6 Start_3) (str.prefixof Start_8 Start) (str.suffixof Start_10 Start_5) (<= StartInt_5 StartInt_1)))
   (StartInt_5 Int (0 1))
   (Start_10 String (x "0" "b" (str.++ Start_2 Start_9) (str.at Start_8 StartInt_2) (str.replace Start_10 Start_8 Start_2)))
   (Start_8 String (y (str.++ Start_2 Start_5) (str.at Start_3 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "1" x) y (ite (str.<= "a" x) "b" y))))

(check-synth)
