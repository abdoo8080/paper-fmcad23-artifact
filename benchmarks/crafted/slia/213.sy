(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_7 String) (Start_9 String) (StartInt_2 Int) (Start_8 String) (Start_4 String) (Start_15 String) (Start_11 String) (StartInt_3 Int) (Start_10 String) (StartInt_6 Int) (StartInt_5 Int) (Start_12 String) (StartInt_7 Int) (Start_6 String) (Start_14 String) (Start_2 String) (StartBool_2 Bool) (StartBool_4 Bool) (Start_5 String) (Start_13 String) (Start_3 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_17 String) (StartInt_4 Int) (Start_16 String) (Start_1 String))
  ((Start String (y (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_1) (str.from_int StartInt_2)))
   (StartInt Int (1 (str.to_int Start)))
   (StartBool Bool (true (not StartBool_3) (str.prefixof Start_5 Start_3) (str.suffixof Start_3 Start) (str.contains Start_9 Start_15) (= StartInt_4 StartInt) (<= StartInt_5 StartInt_4)))
   (StartBool_3 Bool (false (and StartBool StartBool_3) (str.< Start_2 Start_1) (str.contains Start_8 Start_9) (= Start_6 Start) (= StartInt_3 StartInt_4) (<= StartInt_2 StartInt_6)))
   (Start_7 String ("1" y x (str.++ Start_8 Start_7) (str.at Start_8 StartInt_2) (str.substr Start_8 StartInt_2 StartInt_5) (ite StartBool_1 Start_10 Start_2)))
   (Start_9 String ("a" "1" "" x (str.at Start_8 StartInt_5) (str.substr Start_6 StartInt_2 StartInt_1) (str.replace Start_9 Start_5 Start_5) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.to_int Start_2)))
   (Start_8 String ("0" (str.++ Start_8 Start_9) (str.at Start_7 StartInt) (ite StartBool_1 Start_6 Start_2)))
   (Start_4 String ("" "b" (str.at Start_2 StartInt_4) (str.substr Start_4 StartInt_4 StartInt_3) (str.replace Start_4 Start_1 Start_1)))
   (Start_15 String (x "1" "b" (str.++ Start_2 Start_15) (str.substr Start_6 StartInt_7 StartInt)))
   (Start_11 String ("0" (str.from_int StartInt_2)))
   (StartInt_3 Int (0 (str.len Start_13) (str.indexof Start_1 Start_1 StartInt_3) (str.to_int Start_1)))
   (Start_10 String (y (str.replace Start_8 Start_5 Start_7) (str.from_int StartInt_1) (ite StartBool_3 Start Start)))
   (StartInt_6 Int (1 0))
   (StartInt_5 Int (0 1 (str.len Start_8)))
   (Start_12 String ("a" x "0" (str.at Start StartInt_5)))
   (StartInt_7 Int (0 (str.indexof Start_10 Start_1 StartInt_6)))
   (Start_6 String ("b"))
   (Start_14 String ("" y "0" x (str.++ Start Start_5) (str.at Start_1 StartInt_4) (str.substr Start StartInt_5 StartInt_5)))
   (Start_2 String ("1" "0" y x "b" "" "a" (str.++ Start_3 Start) (str.at Start_1 StartInt_3) (str.substr Start_4 StartInt_1 StartInt) (ite StartBool Start Start_2)))
   (StartBool_2 Bool (true (not StartBool_2) (str.< Start_11 Start_9) (str.<= Start_6 Start_6) (str.prefixof Start_5 Start) (str.suffixof Start_1 Start_12) (= Start_2 Start_5) (= StartInt StartInt) (<= StartInt_2 StartInt_2)))
   (StartBool_4 Bool (false (str.< Start_8 Start_8) (str.prefixof Start_9 Start_1) (str.suffixof Start Start_1) (= Start_13 Start_5) (<= StartInt_1 StartInt_6)))
   (Start_5 String ("" "1" "b" "a" y x "0" (str.++ Start_1 Start_1) (str.substr Start_4 StartInt_2 StartInt_4) (str.replace Start_3 Start_1 Start_6) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_6)))
   (Start_13 String (x "b" (str.at Start_14 StartInt) (str.substr Start StartInt_3 StartInt_7) (str.replace Start_12 Start_3 Start_15)))
   (Start_3 String (x "a" (str.replace Start_5 Start_16 Start_17) (str.from_int StartInt_6) (ite StartBool_3 Start_13 Start_8)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (str.< Start_1 Start_5) (str.<= Start_3 Start_7) (str.prefixof Start_3 Start_1) (str.suffixof Start_2 Start_4) (str.contains Start_6 Start) (= Start_7 Start) (= StartInt StartInt_5) (<= StartInt_3 StartInt)))
   (StartInt_1 Int (1 0 (str.to_int Start_3)))
   (Start_17 String ("b" (str.substr Start_7 StartInt_3 StartInt_4) (str.replace Start_12 Start Start_13)))
   (StartInt_4 Int (1 0 (str.len Start_2) (str.to_int Start_5)))
   (Start_16 String (y (str.++ Start_17 Start_4) (str.at Start_11 StartInt) (str.substr Start_12 StartInt_3 StartInt_5)))
   (Start_1 String ("1" (str.++ Start_4 Start_13) (ite StartBool_4 Start_13 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.to_int x))))

(check-synth)
