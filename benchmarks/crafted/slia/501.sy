(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_8 Bool) (StartBool_7 Bool) (Start_8 String) (StartBool_6 Bool) (StartInt_3 Int) (Start_6 String) (StartInt_2 Int) (StartInt_8 Int) (StartBool_4 Bool) (StartBool_5 Bool) (StartBool_2 Bool) (StartInt_9 Int) (StartInt_4 Int) (Start_3 String) (StartInt_1 Int) (Start_1 String) (Start_7 String) (StartBool_3 Bool) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_7 Int) (Start_4 String) (StartInt_10 Int) (Start_9 String) (Start_10 String) (Start_2 String) (Start_5 String) (StartInt_6 Int) (Start_11 String))
  ((Start String (y "1" x (str.at Start_1 StartInt)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start_10)))
   (StartBool Bool (true false (not StartBool_5) (and StartBool_6 StartBool_7) (str.< Start_11 Start_9) (str.<= Start_8 Start_9) (str.prefixof Start_1 Start_8) (str.contains Start_1 Start_2) (= Start_8 Start_8)))
   (StartBool_8 Bool (false true (and StartBool StartBool) (str.< Start_10 Start) (str.prefixof Start_6 Start) (= Start_2 Start_11) (= StartInt_4 StartInt_2)))
   (StartBool_7 Bool (false true (and StartBool_2 StartBool_1) (str.< Start_2 Start_1) (= Start_2 Start_11) (= StartInt_7 StartInt_4)))
   (Start_8 String ("" "a" (str.++ Start_5 Start_8) (str.at Start_6 StartInt_3) (str.substr Start_7 StartInt_4 StartInt_2) (str.replace Start_6 Start_4 Start_2) (ite StartBool_2 Start_5 Start_2)))
   (StartBool_6 Bool (true false (not StartBool_3) (and StartBool_8 StartBool_1) (str.prefixof Start_11 Start_9) (str.suffixof Start_1 Start_5) (= StartInt_2 StartInt_5)))
   (StartInt_3 Int (1 (str.len Start_9) (str.indexof Start_7 Start_10 StartInt_4) (str.to_int Start_1)))
   (Start_6 String (y "0" (str.at Start_3 StartInt_5) (str.substr Start_4 StartInt_2 StartInt_4) (str.from_int StartInt_3) (ite StartBool_4 Start_2 Start)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.to_int Start_9)))
   (StartInt_8 Int (0 (str.len Start_9) (str.to_int Start_2)))
   (StartBool_4 Bool (true (str.prefixof Start_7 Start_1) (= Start_2 Start_8) (= StartInt StartInt)))
   (StartBool_5 Bool (false true (not StartBool) (and StartBool_1 StartBool_1) (str.< Start_8 Start_5) (str.<= Start_9 Start_5) (str.suffixof Start_1 Start_9) (str.contains Start Start_9) (= StartInt_8 StartInt_9) (<= StartInt_10 StartInt_9)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_3) (str.<= Start_3 Start_1) (str.prefixof Start_5 Start_6) (str.suffixof Start_4 Start_5) (= Start Start_5) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_4)))
   (StartInt_9 Int (1 0 (str.len Start_7) (str.indexof Start Start_8 StartInt_7) (str.to_int Start)))
   (StartInt_4 Int (1 0 (str.indexof Start_2 Start_1 StartInt_5) (str.to_int Start_2)))
   (Start_3 String (x (str.++ Start_4 Start) (str.at Start_4 StartInt) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool Start_4 Start_2)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start_1 Start_2 StartInt_2) (str.to_int Start_3)))
   (Start_1 String ("1" "0" (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1)))
   (Start_7 String ("a" x "1" (str.substr Start_6 StartInt_6 StartInt_6) (str.replace Start_4 Start Start_9) (str.from_int StartInt_7)))
   (StartBool_3 Bool (false true (str.contains Start_3 Start_6) (= Start_7 Start_8) (= StartInt_3 StartInt_8)))
   (StartBool_1 Bool (true false (not StartBool_5) (and StartBool_3 StartBool_1) (str.< Start_7 Start_9) (= StartInt_6 StartInt_5) (<= StartInt_4 StartInt_9)))
   (StartInt_5 Int (1 (str.len Start_5) (str.to_int Start_3)))
   (StartInt_7 Int (1 (str.indexof Start_3 Start_4 StartInt_5)))
   (Start_4 String ("" (str.++ Start_2 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_5)))
   (StartInt_10 Int (0 1 (str.indexof Start_1 Start_3 StartInt_2)))
   (Start_9 String ("a" y "1" "b" x (str.++ Start_2 Start_7)))
   (Start_10 String ("" "0" "b" (str.substr Start_1 StartInt_7 StartInt_8) (str.from_int StartInt) (ite StartBool Start Start_4)))
   (Start_2 String ("a" "1" (str.replace Start_8 Start_9 Start_2) (ite StartBool_1 Start_6 Start_10)))
   (Start_5 String ("0" (str.substr Start_1 StartInt_3 StartInt_1) (ite StartBool_2 Start_1 Start)))
   (StartInt_6 Int (1 0 (str.indexof Start_3 Start_7 StartInt_2) (str.to_int Start_5)))
   (Start_11 String ("" "1" "b" "0" (str.replace Start Start_8 Start_4) (str.from_int StartInt_1) (ite StartBool_4 Start Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace x "1" "0") 0)))

(check-synth)
