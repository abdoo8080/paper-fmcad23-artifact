(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_20 String) (StartBool_7 Bool) (Start_16 String) (Start_19 String) (StartBool_6 Bool) (Start_17 String) (Start_9 String) (Start_18 String) (Start_2 String) (StartInt_5 Int) (Start_11 String) (Start_14 String) (Start_10 String) (Start_21 String) (Start_7 String) (Start_5 String) (StartInt_6 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_4 String) (Start_3 String) (StartBool_4 Bool) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_7 Int) (StartInt_10 Int) (StartInt_4 Int) (Start_8 String) (Start_12 String) (Start_6 String) (StartInt_3 Int) (StartInt_9 Int) (StartBool_5 Bool) (StartInt_8 Int) (Start_1 String) (Start_13 String) (Start_15 String))
  ((Start String (x (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_1)))
   (StartInt Int (0 1 (str.indexof Start_20 Start StartInt_5)))
   (StartBool Bool (true false (and StartBool StartBool_7) (str.prefixof Start_4 Start_15) (str.contains Start_1 Start_3) (= Start_20 Start) (= StartInt_1 StartInt_4)))
   (StartInt_1 Int (1 0 (str.indexof Start_10 Start_18 StartInt_1)))
   (Start_20 String ("1" "0" (str.replace Start_20 Start_4 Start_4) (str.from_int StartInt_5) (ite StartBool_6 Start_16 Start_5)))
   (StartBool_7 Bool (false true (not StartBool_4) (str.<= Start_6 Start_3) (str.suffixof Start_13 Start_21) (str.contains Start_17 Start_7)))
   (Start_16 String ("1" (str.++ Start_6 Start_20) (str.at Start_6 StartInt_7) (ite StartBool_3 Start_12 Start_17)))
   (Start_19 String (x (str.replace Start_11 Start_11 Start_1) (str.from_int StartInt_8)))
   (StartBool_6 Bool (true false (not StartBool_2) (str.< Start_6 Start_5) (str.<= Start_18 Start_10) (str.prefixof Start_15 Start_4) (= Start_2 Start_19) (= StartInt_4 StartInt_8) (<= StartInt_4 StartInt_3)))
   (Start_17 String ("" (str.at Start_1 StartInt_2) (str.substr Start_14 StartInt_8 StartInt_2) (str.from_int StartInt_9)))
   (Start_9 String ("" (str.++ Start_9 Start_6) (str.replace Start_10 Start_1 Start_6) (str.from_int StartInt_6) (ite StartBool_4 Start_8 Start_5)))
   (Start_18 String ("1" "b" "a" (str.at Start_18 StartInt_3) (str.substr Start_15 StartInt_4 StartInt_7) (ite StartBool_3 Start_12 Start_8)))
   (Start_2 String (x "" y (str.++ Start_4 Start_1) (str.substr Start_3 StartInt_3 StartInt_6) (str.from_int StartInt_3) (ite StartBool Start Start_2)))
   (StartInt_5 Int (1 0 (str.len Start) (str.indexof Start_5 Start_3 StartInt)))
   (Start_11 String ("1" "0" "b" x y "a" "" (str.++ Start Start_6) (str.replace Start_1 Start_9 Start_6) (ite StartBool_4 Start_11 Start_12)))
   (Start_14 String ("b" (str.from_int StartInt_7)))
   (Start_10 String ("a" "1" ""))
   (Start_21 String ("" "a" "1" (str.at Start_12 StartInt_10) (str.substr Start_9 StartInt_7 StartInt_3) (str.replace Start_2 Start_17 Start_1) (str.from_int StartInt)))
   (Start_7 String ("b" (str.replace Start_3 Start_7 Start_3) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_5)))
   (Start_5 String (y "" "0" "a" (str.at Start_2 StartInt_8) (str.replace Start_2 Start_5 Start_4) (str.from_int StartInt_1) (ite StartBool_4 Start Start_11)))
   (StartInt_6 Int (0 (str.indexof Start_9 Start_7 StartInt_7) (str.to_int Start_10)))
   (StartBool_3 Bool (true (and StartBool_2 StartBool) (str.prefixof Start Start_5) (str.contains Start_7 Start_1) (= StartInt_2 StartInt_1) (<= StartInt_4 StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_3) (str.<= Start_3 Start_2) (str.suffixof Start_2 Start) (str.contains Start_1 Start_5) (= Start_1 Start_1) (= StartInt StartInt) (<= StartInt_1 StartInt)))
   (Start_4 String ("a" "0" "" "b" (str.at Start_6 StartInt_1) (str.replace Start_2 Start_5 Start_7) (ite StartBool_5 Start_3 Start_9)))
   (Start_3 String ("b" (str.++ Start_2 Start_4) (str.substr Start_5 StartInt_3 StartInt) (str.replace Start_3 Start_6 Start) (ite StartBool_1 Start_6 Start)))
   (StartBool_4 Bool (true false (not StartBool_4) (str.suffixof Start_1 Start_8) (str.contains Start_8 Start_9) (= Start_10 Start_6)))
   (StartInt_2 Int (1 0 (str.len Start) (str.indexof Start_2 Start StartInt) (str.to_int Start_3)))
   (StartBool_2 Bool (false (and StartBool_4 StartBool) (str.suffixof Start Start_3) (str.contains Start_1 Start_2) (= Start_5 Start_3) (= StartInt_5 StartInt_1)))
   (StartInt_7 Int (0 1 (str.len Start_4) (str.indexof Start Start_7 StartInt_6) (str.to_int Start_2)))
   (StartInt_10 Int (1 0 (str.len Start_8)))
   (StartInt_4 Int (1 (str.len Start_6)))
   (Start_8 String (y (str.substr Start_1 StartInt_5 StartInt_5) (str.from_int StartInt_8) (ite StartBool_2 Start_3 Start_7)))
   (Start_12 String ("1" "0" x "a" y "" (str.++ Start_2 Start) (str.substr Start_3 StartInt_2 StartInt_6) (str.from_int StartInt_7) (ite StartBool_5 Start_2 Start_6)))
   (Start_6 String ("b" "0" (str.at Start_2 StartInt_5)))
   (StartInt_3 Int (0 (str.len Start_8) (str.indexof Start Start_6 StartInt_7) (str.to_int Start_10)))
   (StartInt_9 Int (0 1 (str.len Start_15) (str.to_int Start_6)))
   (StartBool_5 Bool (true (str.<= Start_11 Start_5) (str.prefixof Start_5 Start_8) (str.contains Start_12 Start_8) (= Start Start_9) (<= StartInt_6 StartInt_2)))
   (StartInt_8 Int (0 (str.indexof Start_5 Start_2 StartInt_4)))
   (Start_1 String ("0" (str.++ Start_9 Start_13) (str.substr Start_13 StartInt_2 StartInt_5) (str.from_int StartInt_5)))
   (Start_13 String (x "1" (str.++ Start_13 Start_7) (str.at Start_5 StartInt_8) (str.from_int StartInt_9) (ite StartBool_3 Start_14 Start_6)))
   (Start_15 String ("0" (str.++ Start_16 Start_7) (str.at Start_2 StartInt) (ite StartBool_6 Start_12 Start_17)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.indexof y "1" 1))))

(check-synth)
