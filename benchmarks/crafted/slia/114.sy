(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_9 Int) (Start_14 String) (StartBool_3 Bool) (StartBool_2 Bool) (Start_13 String) (Start_8 String) (StartInt_7 Int) (Start_9 String) (Start_7 String) (StartInt_3 Int) (StartInt_6 Int) (Start_3 String) (Start_6 String) (StartInt_1 Int) (Start_11 String) (Start_2 String) (Start_10 String) (Start_4 String) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_4 Int) (Start_5 String) (Start_12 String) (Start_1 String) (StartInt_5 Int))
  ((Start String (y "0" (str.++ Start_1 Start_2) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_3 Start_2 Start_1) (str.from_int StartInt_2)))
   (StartInt Int (0 (str.len Start_1) (str.indexof Start_3 Start_5 StartInt_6)))
   (StartBool Bool (true false (str.<= Start_2 Start_6) (str.prefixof Start_5 Start_3) (str.suffixof Start_6 Start_7) (= Start_6 Start_6) (<= StartInt StartInt_1)))
   (StartInt_8 Int (1 0))
   (StartInt_9 Int (0))
   (Start_14 String ("0" (str.++ Start_6 Start_4) (str.at Start_4 StartInt_4) (str.replace Start Start_12 Start_1) (ite StartBool_2 Start_13 Start_9)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_1) (str.< Start_13 Start_11) (str.<= Start_7 Start_1) (str.prefixof Start_5 Start_3) (str.suffixof Start_13 Start_14) (<= StartInt_4 StartInt_8)))
   (StartBool_2 Bool (false (not StartBool_3) (str.<= Start_4 Start_7) (str.suffixof Start_11 Start_5) (str.contains Start_9 Start_12) (= Start_9 Start_4) (= StartInt_3 StartInt_6) (<= StartInt_7 StartInt_5)))
   (Start_13 String ("0" (str.substr Start_10 StartInt_1 StartInt_1) (str.from_int StartInt_9) (ite StartBool_2 Start_1 Start_2)))
   (Start_8 String ("b" (str.++ Start_10 Start_2) (ite StartBool Start_10 Start_5)))
   (StartInt_7 Int (1 0 (str.len Start_4) (str.to_int Start)))
   (Start_9 String ("0" (str.++ Start_1 Start_6) (str.substr Start_3 StartInt_2 StartInt) (str.from_int StartInt_7) (ite StartBool Start_3 Start_3)))
   (Start_7 String (y (str.++ Start_8 Start_7) (ite StartBool Start_7 Start_9)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt_1)))
   (StartInt_6 Int (1 (str.len Start_3) (str.indexof Start Start_5 StartInt_2)))
   (Start_3 String ("1" y (str.++ Start_1 Start) (str.at Start_1 StartInt_3) (ite StartBool Start Start_3)))
   (Start_6 String ("0" "" x y (str.substr Start_12 StartInt_6 StartInt_3) (str.replace Start_1 Start_14 Start_5)))
   (StartInt_1 Int (1 0 (str.len Start_3)))
   (Start_11 String ("b" (str.at Start_7 StartInt_3) (str.substr Start_5 StartInt_1 StartInt_2) (ite StartBool_1 Start_3 Start_12)))
   (Start_2 String (y (str.++ Start_3 Start_2) (str.at Start_1 StartInt_3) (str.substr Start_2 StartInt_2 StartInt_4) (str.replace Start_4 Start Start_1)))
   (Start_10 String ("0" (str.at Start_3 StartInt_8) (str.replace Start_3 Start_11 Start_10)))
   (Start_4 String ("" (str.at Start_4 StartInt_2)))
   (StartBool_1 Bool (true (str.< Start_4 Start_12) (= StartInt_6 StartInt_3) (<= StartInt_6 StartInt_5)))
   (StartInt_2 Int (0))
   (StartInt_4 Int (1 0 (str.indexof Start_4 Start_3 StartInt_3)))
   (Start_5 String ("b" (str.++ Start_2 Start_3) (str.at Start_3 StartInt_3) (str.from_int StartInt_4) (ite StartBool Start_3 Start)))
   (Start_12 String (y "0" "1" (str.at Start_13 StartInt_2) (str.from_int StartInt)))
   (Start_1 String ("a" (str.at Start_4 StartInt_5) (str.from_int StartInt_1) (ite StartBool Start_3 Start_1)))
   (StartInt_5 Int (0 1 (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "a" (str.++ "a" "0"))))

(check-synth)
