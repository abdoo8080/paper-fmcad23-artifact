(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_7 Bool) (Start_15 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_5 String) (Start_7 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_9 String) (Start_6 String) (StartBool_6 Bool) (StartInt_1 Int) (StartBool_5 Bool) (Start_4 String) (Start_11 String) (StartInt_8 Int) (Start_10 String) (Start_13 String) (Start_3 String) (StartBool_3 Bool) (StartInt_9 Int) (Start_8 String) (StartInt_7 Int) (StartInt_6 Int) (StartBool_4 Bool) (StartInt_3 Int) (StartInt_5 Int) (Start_2 String) (Start_14 String) (Start_12 String) (Start_1 String))
  ((Start String ("0" "" "b" (str.++ Start_1 Start_2) (str.at Start StartInt_1) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_1 Start_3 Start)))
   (StartInt Int (1 0 (str.len Start_9) (str.indexof Start_8 Start_1 StartInt_1)))
   (StartBool Bool (true false (not StartBool_6) (str.< Start_13 Start_3) (str.<= Start_14 Start_4) (str.contains Start_11 Start_10)))
   (StartBool_7 Bool (true false (not StartBool_5) (str.prefixof Start_1 Start_7) (str.contains Start_6 Start_6)))
   (Start_15 String ("a" (str.at Start_15 StartInt_3) (str.substr Start_1 StartInt_8 StartInt_2)))
   (StartInt_4 Int (1 (str.len Start_7) (str.indexof Start_1 Start_3 StartInt)))
   (StartBool_1 Bool (false true (str.prefixof Start_1 Start_1) (str.contains Start_2 Start) (= Start_6 Start_2) (<= StartInt_2 StartInt_1)))
   (Start_5 String ("b" "a" y (str.at Start_2 StartInt_3) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_2 Start_7 Start_4) (str.from_int StartInt_4)))
   (Start_7 String ("a" "0" "b" "" (str.++ Start_8 Start_2) (str.at Start_6 StartInt_3) (str.substr Start_9 StartInt_2 StartInt) (str.replace Start_10 Start_3 Start_8) (str.from_int StartInt_5)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_1 StartBool_3) (str.suffixof Start_10 Start_8) (str.contains Start_11 Start_6) (= StartInt_6 StartInt_6)))
   (StartInt_2 Int (0))
   (Start_9 String ("a" (str.++ Start_4 Start_8) (str.at Start_7 StartInt_2) (str.substr Start_11 StartInt_3 StartInt_3) (str.replace Start_10 Start_8 Start_4)))
   (Start_6 String (x))
   (StartBool_6 Bool (false true (not StartBool_7) (str.<= Start_12 Start_13) (str.prefixof Start_1 Start) (= Start_15 Start_11) (= StartInt_5 StartInt_1) (<= StartInt_8 StartInt_5)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start_7 Start_3 StartInt_7)))
   (StartBool_5 Bool (true false (not StartBool_4) (str.suffixof Start_7 Start_4) (= Start_12 Start_7) (= StartInt_2 StartInt_3)))
   (Start_4 String (y (str.at Start_5 StartInt) (str.replace Start_3 Start_3 Start) (str.from_int StartInt) (ite StartBool_1 Start_6 Start_3)))
   (Start_11 String (x y (str.replace Start_8 Start_8 Start_10) (ite StartBool_1 Start Start_11)))
   (StartInt_8 Int (1 (str.len Start_7) (str.indexof Start_11 Start_1 StartInt_9) (str.to_int Start_1)))
   (Start_10 String ("1" (str.at Start_7 StartInt_1)))
   (Start_13 String ("0" (str.substr Start_11 StartInt_6 StartInt_9) (ite StartBool_5 Start_9 Start)))
   (Start_3 String ("a" "0" (str.++ Start_3 Start_2) (str.replace Start_4 Start_1 Start_2) (str.from_int StartInt)))
   (StartBool_3 Bool (true (str.<= Start_10 Start_2) (str.prefixof Start_5 Start_11) (str.suffixof Start_4 Start_9) (= StartInt_3 StartInt_7) (<= StartInt_2 StartInt_8)))
   (StartInt_9 Int (0 (str.len Start_6) (str.to_int Start_1)))
   (Start_8 String (y (str.at Start_11 StartInt_2) (str.substr Start_5 StartInt_2 StartInt_3) (str.from_int StartInt_6) (ite StartBool_2 Start_11 Start_6)))
   (StartInt_7 Int (0 (str.len Start_9)))
   (StartInt_6 Int (0 (str.to_int Start_3)))
   (StartBool_4 Bool (false true (not StartBool_3) (str.<= Start_13 Start_3) (str.prefixof Start_13 Start_1) (= Start_7 Start_8)))
   (StartInt_3 Int (0))
   (StartInt_5 Int (0 1 (str.indexof Start_2 Start_9 StartInt_5)))
   (Start_2 String (y (str.++ Start_12 Start) (str.at Start_5 StartInt_6) (str.replace Start_2 Start_6 Start) (str.from_int StartInt_9) (ite StartBool_4 Start Start_13)))
   (Start_14 String ("a" "0" "1" (str.++ Start_4 Start_9) (ite StartBool_3 Start_2 Start_12)))
   (Start_12 String ("b" y (str.substr Start_1 StartInt_8 StartInt_5) (str.replace Start_1 Start_6 Start_7) (ite StartBool_1 Start_5 Start_4)))
   (Start_1 String ("b" "0" (str.++ Start_7 Start_7) (str.at Start_1 StartInt_3) (str.substr Start_7 StartInt_4 StartInt_1) (str.replace Start_5 Start_1 Start_1) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at y 1) "b")))

(check-synth)
