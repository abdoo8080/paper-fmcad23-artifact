(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartInt_8 Int) (Start_9 String) (StartBool_3 Bool) (Start_5 String) (StartInt_6 Int) (Start_6 String) (StartInt_5 Int) (StartInt_2 Int) (Start_3 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_2 String) (Start_4 String) (Start_8 String) (StartInt_4 Int) (Start_7 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_1 String))
  ((Start String ("1" x (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_2 Start Start_2) (str.from_int StartInt)))
   (StartInt Int (0))
   (StartBool Bool (true (and StartBool_2 StartBool_2) (str.<= Start_2 Start_4) (= StartInt StartInt_4) (<= StartInt_1 StartInt_4)))
   (StartInt_7 Int (0 (str.len Start)))
   (StartInt_8 Int (0 (str.len Start_1) (str.indexof Start_5 Start_3 StartInt_1)))
   (Start_9 String (x "1" (str.at Start_3 StartInt_8) (str.substr Start StartInt_1 StartInt_5) (str.from_int StartInt_1)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool) (str.<= Start_6 Start_2) (str.prefixof Start_9 Start_9) (str.suffixof Start Start_5) (str.contains Start_7 Start_2) (= StartInt_1 StartInt_6) (<= StartInt StartInt)))
   (Start_5 String (y "1" (str.at Start_8 StartInt_7) (str.from_int StartInt_2) (ite StartBool_3 Start_3 Start_2)))
   (StartInt_6 Int (1 0))
   (Start_6 String ("b" (str.++ Start_8 Start_1)))
   (StartInt_5 Int (1 (str.len Start_3) (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start_6)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start_1 Start_2 StartInt_1)))
   (Start_3 String ("a" "b" x (str.replace Start_2 Start_2 Start) (str.from_int StartInt_2) (ite StartBool Start_2 Start_1)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start Start_4 StartInt_4)))
   (StartBool_1 Bool (false (str.suffixof Start_4 Start_3) (str.contains Start Start_1)))
   (Start_2 String ("a" (str.++ Start_3 Start_2) (str.at Start_1 StartInt) (str.substr Start StartInt StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_1)))
   (Start_4 String (y (str.++ Start_1 Start) (str.at Start_3 StartInt_3) (ite StartBool_1 Start_1 Start_1)))
   (Start_8 String (y "b" (str.at Start_3 StartInt_5) (str.substr Start_4 StartInt StartInt_5) (str.replace Start_6 Start_3 Start) (str.from_int StartInt_6) (ite StartBool_1 Start_5 Start_7)))
   (StartInt_4 Int (0 1 (str.len Start_4)))
   (Start_7 String ("b" (str.at Start StartInt) (str.replace Start_3 Start_1 Start_6) (str.from_int StartInt_2) (ite StartBool_2 Start_2 Start_2)))
   (StartBool_2 Bool (false (str.<= Start Start_5) (str.contains Start_4 Start_6) (= Start_2 Start_7) (= StartInt_1 StartInt_4)))
   (StartInt_3 Int (1 0 (str.len Start) (str.indexof Start_4 Start_4 StartInt_1)))
   (Start_1 String ("a" "b" (str.substr Start_1 StartInt_2 StartInt_4) (str.replace Start_4 Start Start_2) (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ "0" "a") (str.replace (str.substr y 0 1) (str.replace "" x "1") "b"))))

(check-synth)
