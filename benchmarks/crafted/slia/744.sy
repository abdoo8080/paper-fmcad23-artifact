(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (StartInt_6 Int) (Start_2 String) (StartInt_5 Int) (Start_8 String) (Start_6 String) (StartInt_1 Int) (Start_1 String) (Start_9 String) (Start_4 String) (Start_5 String) (Start_7 String) (Start_3 String) (StartBool_1 Bool) (StartBool_3 Bool) (StartInt_3 Int) (StartInt_4 Int) (StartBool_2 Bool))
  ((Start String ("a" "0" y (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.from_int StartInt)))
   (StartInt Int (1 (str.to_int Start_9)))
   (StartBool Bool (true (and StartBool_1 StartBool_3) (str.suffixof Start_1 Start_8) (str.contains Start_2 Start_9)))
   (StartInt_2 Int (0 1 (str.len Start_9)))
   (StartInt_6 Int (1))
   (Start_2 String ("" "b" "1" y (str.substr Start_9 StartInt_3 StartInt_3) (str.from_int StartInt_2) (ite StartBool_2 Start_7 Start_4)))
   (StartInt_5 Int (0 1 (str.indexof Start_5 Start_3 StartInt_2)))
   (Start_8 String ("0" "a" "" (str.at Start_5 StartInt_5) (str.substr Start_7 StartInt StartInt_1)))
   (Start_6 String ("a" "b" (str.++ Start_4 Start) (str.at Start_3 StartInt_4)))
   (StartInt_1 Int (0))
   (Start_1 String ("0" (str.at Start_1 StartInt_2) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt) (ite StartBool Start_4 Start_5)))
   (Start_9 String ("b" "1" (str.++ Start_1 Start_8) (str.substr Start_5 StartInt_2 StartInt_6) (str.from_int StartInt_6)))
   (Start_4 String ("1" (str.++ Start_7 Start) (str.at Start_1 StartInt) (str.substr Start_4 StartInt_4 StartInt_4) (str.replace Start_5 Start_2 Start_4)))
   (Start_5 String (x (str.at Start_5 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start)))
   (Start_7 String ("1" "" (str.substr Start_4 StartInt_3 StartInt) (str.from_int StartInt_3) (ite StartBool Start_4 Start_2)))
   (Start_3 String ("b" (str.at Start_1 StartInt_5) (ite StartBool_2 Start_6 Start_7)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_1) (str.< Start Start_2) (str.<= Start_1 Start) (= StartInt_2 StartInt_3)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_2) (str.contains Start_7 Start) (= Start_8 Start_7)))
   (StartInt_3 Int (0 1 (str.indexof Start_1 Start_6 StartInt_2)))
   (StartInt_4 Int (1 0 (str.to_int Start_3)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool_3) (str.< Start_4 Start_2) (str.prefixof Start_6 Start_4) (str.contains Start_2 Start_5) (= Start_1 Start_2) (<= StartInt_4 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "b" y x) 0 1)))

(check-synth)
