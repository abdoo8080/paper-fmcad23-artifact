(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartInt_6 Int) (Start_11 String) (StartBool_2 Bool) (Start_1 String) (Start_10 String) (StartInt_2 Int) (Start_9 String) (Start_12 String) (Start_6 String) (Start_3 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_7 String) (Start_8 String) (StartInt_3 Int) (StartInt_1 Int) (StartInt_4 Int) (Start_2 String) (Start_5 String) (StartInt_7 Int) (Start_4 String))
  ((Start String ("0" x y "a" (str.++ Start_1 Start) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start Start_2) (str.from_int StartInt_1) (ite StartBool Start_2 Start_3)))
   (StartInt Int (0 (str.indexof Start_11 Start_12 StartInt_4)))
   (StartBool Bool (false (str.<= Start_8 Start_13) (<= StartInt_4 StartInt_4)))
   (Start_13 String ("1" "b" "0" y "a" x (str.at Start StartInt_4) (str.substr Start_7 StartInt_5 StartInt_5) (str.replace Start_8 Start_12 Start_8)))
   (StartInt_6 Int (0 (str.len Start_12) (str.indexof Start_7 Start_12 StartInt_7)))
   (Start_11 String ("a" (str.substr Start_9 StartInt_4 StartInt_3) (str.replace Start_8 Start_8 Start_5) (str.from_int StartInt_2)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_2) (str.suffixof Start_10 Start_4)))
   (Start_1 String ("" y (str.at Start_9 StartInt_4) (str.substr Start_11 StartInt StartInt_5) (str.replace Start_6 Start_7 Start) (str.from_int StartInt_5)))
   (Start_10 String (y (str.++ Start_7 Start_5) (str.substr Start_3 StartInt_3 StartInt) (str.replace Start_10 Start_3 Start_2)))
   (StartInt_2 Int (0 (str.len Start_1)))
   (Start_9 String (x "0" (str.at Start_10 StartInt_4) (str.from_int StartInt)))
   (Start_12 String ("0" y (str.++ Start_9 Start_1) (str.at Start_6 StartInt) (str.substr Start_5 StartInt_6 StartInt_4) (str.from_int StartInt_3)))
   (Start_6 String ("" "1" (str.++ Start_2 Start_3) (str.at Start StartInt_1) (str.substr Start_5 StartInt StartInt_2) (ite StartBool Start_6 Start_7)))
   (Start_3 String (x "" (str.++ Start_4 Start_3) (str.substr Start_5 StartInt_1 StartInt) (str.replace Start_6 Start_6 Start_3)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_1) (str.<= Start_1 Start_5) (str.prefixof Start_3 Start_10) (str.suffixof Start_5 Start_2) (= StartInt_2 StartInt_2)))
   (StartInt_5 Int (1 0 (str.len Start_10) (str.indexof Start_6 Start_11 StartInt_4)))
   (Start_7 String ("b" "" "0" "a" y (str.++ Start_5 Start_8) (str.at Start_5 StartInt_2) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start Start Start_2) (str.from_int StartInt_1)))
   (Start_8 String ("0" "a" (str.++ Start_1 Start_2) (str.at Start_9 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_8 Start)))
   (StartInt_3 Int (1 0 (str.indexof Start_1 Start_1 StartInt_1)))
   (StartInt_1 Int (0 (str.len Start_8) (str.to_int Start_8)))
   (StartInt_4 Int (1 0 (str.len Start_7) (str.to_int Start_6)))
   (Start_2 String ("b" "1" y "" x (str.at Start_8 StartInt_1) (ite StartBool_2 Start Start_10)))
   (Start_5 String ("a" (str.at Start_5 StartInt_4)))
   (StartInt_7 Int (1 0 (str.to_int Start_1)))
   (Start_4 String ("1" (str.++ Start_2 Start_9) (str.at Start_5 StartInt_1) (str.replace Start_5 Start_6 Start_4) (ite StartBool Start_9 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.from_int (str.indexof "1" x 0)) "0" "a")))

(check-synth)
