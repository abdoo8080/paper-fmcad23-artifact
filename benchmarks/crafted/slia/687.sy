(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartInt_9 Int) (Start_1 String) (Start_11 String) (Start_12 String) (StartBool_4 Bool) (StartInt_7 Int) (StartInt_8 Int) (StartInt_1 Int) (Start_10 String) (Start_8 String) (Start_3 String) (StartInt_5 Int) (Start_2 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_6 String) (Start_7 String) (StartBool_3 Bool) (StartInt_6 Int) (StartBool_2 Bool) (Start_9 String) (StartInt_2 Int) (Start_5 String) (Start_4 String) (StartInt_4 Int))
  ((Start String ("a" y (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt StartInt_2)))
   (StartInt Int (0 (str.indexof Start_11 Start_8 StartInt_7)))
   (StartBool Bool (false (and StartBool_1 StartBool_5) (str.< Start_5 Start_7) (str.<= Start_6 Start_2) (str.prefixof Start Start) (= StartInt_9 StartInt_3) (<= StartInt_7 StartInt_6)))
   (StartBool_5 Bool (false true (not StartBool) (str.< Start_11 Start_11) (str.suffixof Start_5 Start) (str.contains Start_10 Start_1) (= StartInt_8 StartInt_8)))
   (StartInt_9 Int (0))
   (Start_1 String (y))
   (Start_11 String ("0" (str.++ Start Start_9) (str.substr Start_3 StartInt_8 StartInt_1) (str.replace Start_1 Start_4 Start_10) (str.from_int StartInt_3) (ite StartBool_2 Start_7 Start_8)))
   (Start_12 String ("a" (str.from_int StartInt_4) (ite StartBool_2 Start_12 Start_1)))
   (StartBool_4 Bool (true (str.suffixof Start_2 Start_12) (str.contains Start_11 Start_4) (= Start_8 Start_4) (= StartInt_5 StartInt_3) (<= StartInt_4 StartInt_7)))
   (StartInt_7 Int (0 (str.len Start_7) (str.to_int Start_3)))
   (StartInt_8 Int (0 (str.indexof Start_6 Start_9 StartInt_5) (str.to_int Start)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start_1 Start_5 StartInt_6)))
   (Start_10 String (y "1" (str.replace Start_8 Start_7 Start_11) (ite StartBool_3 Start_4 Start_10)))
   (Start_8 String ("1" "b" (str.++ Start Start) (str.substr Start_6 StartInt_2 StartInt)))
   (Start_3 String (x (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_2 StartInt)))
   (StartInt_5 Int (0 (str.indexof Start_3 Start_6 StartInt_1)))
   (Start_2 String ("a" (str.at Start_3 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_2) (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_3 Int (1 (str.indexof Start_3 Start_3 StartInt_2) (str.to_int Start)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (str.suffixof Start Start_5) (str.contains Start Start_1) (= Start_5 Start) (= StartInt_5 StartInt)))
   (Start_6 String ("0" (str.replace Start_6 Start_1 Start_4)))
   (Start_7 String ("b" "" (str.at Start_3 StartInt_4) (str.replace Start_1 Start_3 Start_3) (str.from_int StartInt_3)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool StartBool_4) (= Start_6 Start_11) (= StartInt StartInt_7)))
   (StartInt_6 Int (1 0 (str.indexof Start_5 Start_9 StartInt) (str.to_int Start_6)))
   (StartBool_2 Bool (false (not StartBool_1) (str.<= Start Start_7) (str.contains Start Start_3)))
   (Start_9 String ("0" (str.++ Start_8 Start_3) (str.substr Start_10 StartInt_4 StartInt_3) (str.replace Start_8 Start Start_5) (str.from_int StartInt_5)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_1 Start_1 StartInt_3) (str.to_int Start_3)))
   (Start_5 String ("" (str.from_int StartInt_5) (ite StartBool_2 Start_3 Start_7)))
   (Start_4 String ("a" "1" (str.replace Start_7 Start_8 Start_1) (str.from_int StartInt_1)))
   (StartInt_4 Int (0 1 (str.len Start) (str.indexof Start_6 Start_1 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.to_int (str.at (str.replace "b" y "0") 1)))))

(check-synth)
