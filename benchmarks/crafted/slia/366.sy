(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartBool_2 Bool) (StartInt_5 Int) (StartInt_4 Int) (Start_4 String) (StartBool_4 Bool) (Start_12 String) (Start_11 String) (Start_9 String) (StartInt_1 Int) (Start_3 String) (Start_10 String) (Start_1 String) (StartBool_3 Bool) (Start_5 String) (StartInt_7 Int) (Start_8 String) (StartInt_3 Int) (Start_13 String) (Start_2 String) (StartBool_5 Bool) (Start_6 String) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_7 String))
  ((Start String (x "b" "0" "a" y "" "1" (str.++ Start_1 Start) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start Start_1 Start_1)))
   (StartInt Int (0 (str.len Start_2) (str.indexof Start_3 Start_4 StartInt_1) (str.to_int Start_5)))
   (StartBool Bool (false (not StartBool_2) (str.<= Start_1 Start_12) (str.prefixof Start_12 Start_6) (str.contains Start_13 Start_9) (= Start_2 Start_11) (= StartInt_1 StartInt_1) (<= StartInt_1 StartInt_1)))
   (Start_14 String ("" (str.++ Start_4 Start_12) (str.at Start_9 StartInt_2) (str.substr Start_11 StartInt_2 StartInt_6) (str.replace Start_5 Start_3 Start_12) (ite StartBool_1 Start_5 Start_9)))
   (StartBool_2 Bool (false (not StartBool_3) (str.prefixof Start_14 Start_14) (= Start_6 Start_7) (<= StartInt StartInt_6)))
   (StartInt_5 Int (0 1 (str.len Start_2)))
   (StartInt_4 Int (1 (str.indexof Start_3 Start_10 StartInt_5) (str.to_int Start_8)))
   (Start_4 String (x y "a" (str.++ Start_1 Start_11) (str.from_int StartInt)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.<= Start_13 Start_5) (str.prefixof Start_11 Start_8) (str.suffixof Start_7 Start_4) (= Start_7 Start_13) (<= StartInt_7 StartInt_7)))
   (Start_12 String (y x "a" (str.from_int StartInt_4)))
   (Start_11 String ("0" (str.++ Start_4 Start_4) (ite StartBool Start_7 Start)))
   (Start_9 String ("1" (str.replace Start_7 Start_10 Start_11)))
   (StartInt_1 Int (0 1 (str.to_int Start)))
   (Start_3 String ("b" "0" (str.at Start_12 StartInt_4) (str.substr Start_7 StartInt_1 StartInt_2) (str.replace Start_5 Start_13 Start_8) (str.from_int StartInt)))
   (Start_10 String (y "1" "a" "" x "b" "0" (str.++ Start_1 Start) (str.replace Start_8 Start_7 Start_10) (str.from_int StartInt_3) (ite StartBool Start_5 Start_10)))
   (Start_1 String (y "b" "1" "0" "" (str.++ Start Start_1) (str.replace Start Start_1 Start_2)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool StartBool_5) (str.< Start Start_2) (str.<= Start_5 Start_12) (str.prefixof Start_1 Start) (str.suffixof Start_7 Start_9) (<= StartInt_3 StartInt_4)))
   (Start_5 String ("0" (str.++ Start_1 Start_3) (str.replace Start_3 Start Start_6)))
   (StartInt_7 Int (0 1 (str.len Start_2) (str.to_int Start_8)))
   (Start_8 String ("a" "b" (str.++ Start_3 Start_2) (str.replace Start_8 Start_2 Start_5)))
   (StartInt_3 Int (0 (str.len Start_10) (str.indexof Start_8 Start StartInt_2) (str.to_int Start_5)))
   (Start_13 String ("b" "1" "0" "a" (str.++ Start_3 Start_5) (str.at Start_5 StartInt_4) (str.substr Start_6 StartInt_3 StartInt_4)))
   (Start_2 String ("" "1" (str.replace Start Start_2 Start)))
   (StartBool_5 Bool (true false (str.< Start_6 Start_13) (str.<= Start_2 Start_7) (str.prefixof Start_11 Start_1) (str.suffixof Start Start_6) (str.contains Start_7 Start_4)))
   (Start_6 String ("1" x y (str.from_int StartInt_2)))
   (StartInt_6 Int (1 (str.len Start_7) (str.to_int Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.<= Start_8 Start_5) (str.suffixof Start_1 Start) (str.contains Start_9 Start_1) (= StartInt_1 StartInt_1) (<= StartInt_3 StartInt_3)))
   (StartInt_2 Int (0 (str.indexof Start_7 Start_6 StartInt) (str.to_int Start_1)))
   (Start_7 String (x (str.++ Start_6 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ "a" (str.at x 0)) y)))

(check-synth)
