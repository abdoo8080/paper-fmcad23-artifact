(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartInt_3 Int) (StartInt_1 Int) (Start_14 String) (StartInt_6 Int) (Start_8 String) (StartBool_2 Bool) (StartBool_4 Bool) (Start_5 String) (Start_11 String) (StartBool_5 Bool) (Start_1 String) (StartBool_3 Bool) (StartInt_8 Int) (Start_6 String) (Start_9 String) (Start_2 String) (StartBool_7 Bool) (Start_4 String) (Start_3 String) (StartInt_4 Int) (Start_10 String) (Start_12 String) (StartInt_5 Int) (Start_13 String) (Start_7 String) (StartInt_2 Int) (StartBool_1 Bool) (StartBool_6 Bool) (StartInt_7 Int) (StartInt_9 Int))
  ((Start String ("b" x "" (str.++ Start_1 Start_2) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (0 (str.len Start_9) (str.indexof Start_7 Start StartInt_8) (str.to_int Start_10)))
   (StartBool Bool (false (not StartBool_7) (str.<= Start_9 Start_4) (str.suffixof Start_12 Start_2) (str.contains Start_13 Start_10) (= StartInt_4 StartInt_9) (<= StartInt_3 StartInt_7)))
   (Start_15 String (y (str.substr Start_11 StartInt_8 StartInt)))
   (StartInt_3 Int (0 (str.len Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.indexof Start_4 Start_1 StartInt_1) (str.to_int Start_1)))
   (Start_14 String ("b" "" x "1" (str.at Start_5 StartInt_8) (ite StartBool_6 Start_4 Start_6)))
   (StartInt_6 Int (0 1 (str.len Start_3) (str.indexof Start_11 Start_11 StartInt) (str.to_int Start_9)))
   (Start_8 String ("" x "a" (str.at Start_1 StartInt_1)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool_4) (str.< Start_6 Start_4) (str.suffixof Start_6 Start_2) (str.contains Start_1 Start_4) (= Start_2 Start_1)))
   (StartBool_4 Bool (true false (and StartBool StartBool_5) (str.<= Start_8 Start_1) (str.prefixof Start_6 Start_5) (str.suffixof Start_3 Start) (= Start_2 Start_4)))
   (Start_5 String ("a" "0" "" (str.substr Start_5 StartInt_1 StartInt_2) (str.replace Start_7 Start_1 Start_3) (ite StartBool_2 Start_3 Start_6)))
   (Start_11 String (x "" "0" y (str.++ Start_8 Start_11) (str.at Start_1 StartInt) (str.substr Start_8 StartInt_4 StartInt_4)))
   (StartBool_5 Bool (false true (and StartBool_3 StartBool_5) (str.<= Start_2 Start_7) (str.suffixof Start_7 Start_4) (str.contains Start_8 Start_3) (= Start_9 Start_5)))
   (Start_1 String ("" y x (str.at Start_11 StartInt_4) (str.from_int StartInt_7) (ite StartBool_6 Start_4 Start_8)))
   (StartBool_3 Bool (true (str.< Start_5 Start) (str.<= Start_3 Start_4) (str.suffixof Start_6 Start_7) (= Start_10 Start_4) (<= StartInt_3 StartInt_4)))
   (StartInt_8 Int (1 (str.len Start_7) (str.indexof Start_3 Start_4 StartInt_9) (str.to_int Start_5)))
   (Start_6 String ("1" (str.at Start_4 StartInt) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_6)))
   (Start_9 String ("1" "0" (str.at Start_5 StartInt) (str.substr Start StartInt_2 StartInt) (str.replace Start_8 Start_5 Start_9) (str.from_int StartInt_3)))
   (Start_2 String ("" (str.++ Start_2 Start_1) (str.at Start_9 StartInt_6) (str.substr Start_4 StartInt_2 StartInt) (str.from_int StartInt_6) (ite StartBool_4 Start_11 Start_2)))
   (StartBool_7 Bool (false true (str.< Start_15 Start_13) (str.<= Start_1 Start_8) (str.suffixof Start_7 Start_3) (= StartInt_2 StartInt_4)))
   (Start_4 String ("" (str.++ Start Start_2) (str.at Start_4 StartInt) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_5 Start_6 Start_6)))
   (Start_3 String ("1" "0" (str.at Start_3 StartInt) (str.replace Start_1 Start_3 Start_3) (str.from_int StartInt_1) (ite StartBool Start_3 Start_2)))
   (StartInt_4 Int (0 (str.len Start_8)))
   (Start_10 String ("a" y (str.++ Start_10 Start_5) (str.replace Start_11 Start Start_1)))
   (Start_12 String (x (str.++ Start_5 Start_14) (str.at Start_9 StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_7) (str.indexof Start_5 Start_5 StartInt_2)))
   (Start_13 String ("1" (str.++ Start_7 Start_1) (str.at Start_10 StartInt_8) (str.substr Start_2 StartInt StartInt_5) (str.replace Start_10 Start_6 Start_3)))
   (Start_7 String ("1" "b" "0" (str.substr Start StartInt_3 StartInt_5) (ite StartBool_5 Start_9 Start_2)))
   (StartInt_2 Int (0 1 (str.len Start_7)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.<= Start_7 Start_6) (str.contains Start_7 Start_6) (= Start_5 Start_3)))
   (StartBool_6 Bool (false true (and StartBool_6 StartBool_3) (= StartInt_6 StartInt_4)))
   (StartInt_7 Int (0 (str.len Start_5)))
   (StartInt_9 Int (1 0 (str.len Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "1" (str.replace "1" y "a"))))

(check-synth)
