(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_15 String) (Start_8 String) (StartInt_9 Int) (Start_14 String) (Start_9 String) (StartInt_8 Int) (StartInt_1 Int) (Start_10 String) (StartInt_5 Int) (Start_2 String) (StartInt_6 Int) (Start_6 String) (StartBool_4 Bool) (StartBool_1 Bool) (StartBool_2 Bool) (Start_3 String) (Start_16 String) (Start_1 String) (Start_4 String) (StartInt_3 Int) (Start_11 String) (Start_5 String) (StartInt_4 Int) (StartInt_10 Int) (Start_7 String) (StartBool_3 Bool) (StartInt_7 Int) (Start_12 String) (StartInt_2 Int) (Start_13 String))
  ((Start String ("1" x (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (1 (str.len Start_11) (str.indexof Start_14 Start_9 StartInt_8)))
   (StartBool Bool (true (and StartBool_5 StartBool_4) (str.<= Start_15 Start_16) (str.suffixof Start_4 Start) (= Start_12 Start_12) (= StartInt_9 StartInt_7)))
   (StartBool_5 Bool (false true (str.< Start_15 Start_3) (str.<= Start_13 Start_15) (str.prefixof Start_10 Start_12) (str.contains Start_8 Start_12) (= Start_6 Start_9) (<= StartInt_10 StartInt_9)))
   (Start_15 String ("1" "" (str.++ Start_2 Start_3) (str.at Start_15 StartInt_10) (str.replace Start_5 Start_10 Start_12) (ite StartBool_4 Start_3 Start)))
   (Start_8 String ("a" "" "0" y (str.at Start_4 StartInt_5) (str.replace Start_7 Start_11 Start_1) (str.from_int StartInt)))
   (StartInt_9 Int (0 (str.len Start_2) (str.to_int Start_10)))
   (Start_14 String ("0" "b" (str.++ Start Start_14) (str.from_int StartInt) (ite StartBool_2 Start_9 Start_15)))
   (Start_9 String ("a" y (str.++ Start_7 Start_4) (str.substr Start_8 StartInt_4 StartInt_8) (str.replace Start_9 Start_10 Start_6) (str.from_int StartInt_8) (ite StartBool Start_3 Start_9)))
   (StartInt_8 Int (0 (str.indexof Start_9 Start StartInt_8)))
   (StartInt_1 Int (0))
   (Start_10 String (x (str.at Start_1 StartInt_8) (str.replace Start_6 Start_1 Start_2) (str.from_int StartInt_3)))
   (StartInt_5 Int (0 1 (str.len Start_7) (str.indexof Start_9 Start_11 StartInt) (str.to_int Start_3)))
   (Start_2 String ("" (str.at Start_4 StartInt_5) (str.substr Start StartInt_2 StartInt_4)))
   (StartInt_6 Int (1 0 (str.indexof Start_6 Start_8 StartInt_7)))
   (Start_6 String ("" (str.substr Start_7 StartInt_4 StartInt_2) (str.replace Start_7 Start_4 Start_6) (str.from_int StartInt_4) (ite StartBool_2 Start_3 Start_6)))
   (StartBool_4 Bool (false (str.< Start_9 Start_7) (str.<= Start_2 Start_6) (str.contains Start_3 Start_7) (= Start_13 Start_12)))
   (StartBool_1 Bool (true (str.< Start_3 Start_5) (str.prefixof Start_2 Start_5) (str.suffixof Start_3 Start_2) (= Start_3 Start_2) (<= StartInt_2 StartInt_3)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_1) (str.< Start_2 Start_6) (str.prefixof Start_4 Start_2) (str.suffixof Start_4 Start_3) (<= StartInt_5 StartInt_6)))
   (Start_3 String (x (str.++ Start_3 Start_4) (str.at Start_4 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_1) (ite StartBool_1 Start_4 Start)))
   (Start_16 String (y "b" "" (str.substr Start_10 StartInt_1 StartInt_9) (str.from_int StartInt_2) (ite StartBool Start_2 Start_5)))
   (Start_1 String (x "b" (str.++ Start_1 Start) (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt)))
   (Start_4 String ("0" (str.++ Start_7 Start_1) (str.at Start_5 StartInt_5) (str.replace Start_9 Start_3 Start) (str.from_int StartInt_5)))
   (StartInt_3 Int (1 (str.len Start_6) (str.to_int Start)))
   (Start_11 String (y x "1" "a" (str.++ Start_4 Start_2) (str.at Start_10 StartInt_2) (str.from_int StartInt_9)))
   (Start_5 String (x (str.++ Start_12 Start_12) (str.at Start_4 StartInt_8) (str.substr Start_12 StartInt_3 StartInt_2) (ite StartBool Start Start_9)))
   (StartInt_4 Int (0 (str.len Start_1)))
   (StartInt_10 Int (0 1 (str.indexof Start_3 Start_11 StartInt_8)))
   (Start_7 String ("a" y "b" x (str.at Start_5 StartInt_9) (str.replace Start_9 Start_3 Start_2) (str.from_int StartInt) (ite StartBool_3 Start_5 Start_8)))
   (StartBool_3 Bool (true (str.prefixof Start_9 Start_3) (= Start_9 Start_12) (<= StartInt_5 StartInt_2)))
   (StartInt_7 Int (0 (str.len Start_6) (str.indexof Start_4 Start_9 StartInt_4) (str.to_int Start_10)))
   (Start_12 String ("a" y "b" "" (str.++ Start_7 Start_9) (str.at Start_6 StartInt_7) (str.substr Start_8 StartInt_7 StartInt_8) (ite StartBool_4 Start Start_7)))
   (StartInt_2 Int (0 1 (str.len Start_13) (str.indexof Start_6 Start_13 StartInt_3) (str.to_int Start_4)))
   (Start_13 String ("1" "b" y "" (str.++ Start_8 Start_12) (str.at Start StartInt) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "b" y) "0" "1")))

(check-synth)
