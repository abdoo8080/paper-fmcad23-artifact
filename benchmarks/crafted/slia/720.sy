(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_1 Int) (Start_10 String) (Start_8 String) (Start_1 String) (Start_3 String) (Start_4 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_5 String) (Start_2 String) (StartBool_3 Bool) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_7 String) (Start_6 String) (Start_9 String))
  ((Start String (x (str.++ Start Start) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt Int (0 (str.len Start_3) (str.to_int Start_1)))
   (StartBool Bool (true false (and StartBool_2 StartBool) (str.contains Start_1 Start_6) (= StartInt_4 StartInt_2) (<= StartInt_2 StartInt)))
   (Start_11 String (x (str.++ Start_2 Start_9) (str.at Start_6 StartInt_4) (str.replace Start_6 Start_2 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_10) (str.indexof Start_11 Start_7 StartInt) (str.to_int Start_5)))
   (Start_10 String ("b" (str.at Start_3 StartInt_1) (str.replace Start_5 Start_5 Start_3) (str.from_int StartInt_3) (ite StartBool_3 Start_5 Start)))
   (Start_8 String ("" (str.++ Start_10 Start_3) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_10 Start_2 Start_1) (str.from_int StartInt) (ite StartBool_2 Start_5 Start_1)))
   (Start_1 String ("" (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_1)))
   (Start_3 String ("0" x (str.substr Start_2 StartInt_1 StartInt) (str.replace Start Start Start_4) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (Start_4 String ("b" "" "0" "1" (str.++ Start_4 Start_2) (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start Start_3 Start_4) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 (str.len Start_3) (str.to_int Start_1)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_2 StartBool) (str.< Start_3 Start_6)))
   (Start_5 String ("b" (str.++ Start_4 Start_4) (ite StartBool_1 Start_3 Start_4)))
   (Start_2 String ("1" x "a" (str.++ Start_1 Start) (str.at Start_2 StartInt_1) (str.replace Start_1 Start Start_5) (ite StartBool Start_4 Start_4)))
   (StartBool_3 Bool (false (not StartBool_2) (str.< Start_2 Start_6) (str.suffixof Start_4 Start_3) (str.contains Start_3 Start_1) (= Start_7 Start_3) (<= StartInt_3 StartInt_1)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_3 StartBool) (str.prefixof Start_6 Start_5) (str.suffixof Start_1 Start_3) (= StartInt_1 StartInt_1)))
   (StartInt_3 Int (0 1 (str.indexof Start_3 Start_4 StartInt_2)))
   (StartInt_4 Int (0 1 (str.indexof Start_9 Start_6 StartInt_4) (str.to_int Start_2)))
   (Start_7 String ("1" x (str.substr Start_5 StartInt_3 StartInt_3) (str.replace Start_8 Start_8 Start_6) (ite StartBool_1 Start_8 Start_9)))
   (Start_6 String ("a" "b" "1" "0" y (str.at Start StartInt_3) (str.from_int StartInt_2)))
   (Start_9 String (y "1" "b" x "" (str.++ Start_4 Start_6) (str.at Start_7 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_4) (str.replace Start_3 Start_4 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.at x 1) x)))

(check-synth)
