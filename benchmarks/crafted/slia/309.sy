(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_8 String) (StartInt_6 Int) (StartBool_3 Bool) (StartBool_2 Bool) (StartInt_7 Int) (Start_1 String) (Start_11 String) (Start_9 String) (StartInt_2 Int) (StartInt_8 Int) (Start_3 String) (Start_10 String) (Start_5 String) (StartBool_4 Bool) (StartInt_3 Int) (Start_4 String) (Start_12 String) (Start_7 String) (StartBool_1 Bool) (Start_6 String) (StartInt_1 Int) (StartInt_5 Int) (StartInt_4 Int) (Start_2 String))
  ((Start String ("a" "b" "0" "1" (str.++ Start_1 Start_1) (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt)))
   (StartInt Int (0 (str.indexof Start_1 Start_1 StartInt_2)))
   (StartBool Bool (true false (not StartBool_2) (str.< Start_7 Start_4) (= Start_7 Start_7) (= StartInt_2 StartInt_3)))
   (Start_13 String ("" "a" "b" (str.replace Start_7 Start_5 Start_8) (ite StartBool_2 Start_2 Start_2)))
   (Start_8 String (x (str.++ Start_13 Start_5) (str.substr Start_9 StartInt_1 StartInt_8) (ite StartBool_4 Start_9 Start_1)))
   (StartInt_6 Int (1 0 (str.to_int Start_1)))
   (StartBool_3 Bool (true (str.contains Start_10 Start_5) (= Start Start_10) (= StartInt StartInt_2) (<= StartInt_3 StartInt_1)))
   (StartBool_2 Bool (false true (str.<= Start_1 Start_2) (str.prefixof Start_3 Start_3) (str.suffixof Start_8 Start_4) (str.contains Start_9 Start_9) (= Start_9 Start_2) (<= StartInt_5 StartInt_3)))
   (StartInt_7 Int (0 (str.to_int Start_11)))
   (Start_1 String ("1" (str.++ Start_6 Start) (str.from_int StartInt_5) (ite StartBool Start_6 Start)))
   (Start_11 String (x (str.substr Start_10 StartInt_4 StartInt_2) (str.from_int StartInt_8)))
   (Start_9 String (y "0" (str.from_int StartInt_6) (ite StartBool_3 Start_9 Start_4)))
   (StartInt_2 Int (0 (str.to_int Start_3)))
   (StartInt_8 Int (1 0 (str.len Start_8) (str.indexof Start_4 Start_6 StartInt) (str.to_int Start_12)))
   (Start_3 String (y "" (str.at Start_2 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_3 Start_4 Start_5)))
   (Start_10 String ("0" y (str.at Start_11 StartInt_1) (str.substr Start_2 StartInt StartInt_7) (str.replace Start_4 Start_9 Start_9)))
   (Start_5 String ("a" "b" x y "" (str.++ Start_4 Start_5) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_3 Start_2 Start_2) (str.from_int StartInt_3) (ite StartBool Start_4 Start_4)))
   (StartBool_4 Bool (false (str.< Start_10 Start_4) (str.<= Start_11 Start_13) (str.prefixof Start_1 Start_4) (str.suffixof Start_3 Start_6) (= Start_3 Start_5)))
   (StartInt_3 Int (0 1 (str.len Start_5) (str.to_int Start_3)))
   (Start_4 String ("b" (str.++ Start_5 Start_1) (str.at Start_3 StartInt_4) (str.replace Start_5 Start_4 Start_5) (str.from_int StartInt_3) (ite StartBool Start_6 Start_7)))
   (Start_12 String (y (str.substr Start_8 StartInt_2 StartInt_8) (str.from_int StartInt)))
   (Start_7 String ("" "0" (str.from_int StartInt_1) (ite StartBool_1 Start Start)))
   (StartBool_1 Bool (true false (str.< Start_5 Start_1) (str.<= Start_5 Start_7) (str.suffixof Start_3 Start_3) (str.contains Start_1 Start_2) (<= StartInt_3 StartInt_5)))
   (Start_6 String (x (str.at Start_1 StartInt_1) (str.from_int StartInt_5)))
   (StartInt_1 Int (0 (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_5)))
   (StartInt_5 Int (0 (str.len Start_6) (str.indexof Start_7 Start_6 StartInt_1)))
   (StartInt_4 Int (0 1 (str.len Start_7) (str.to_int Start_7)))
   (Start_2 String (y "1" (str.++ Start_4 Start_7) (str.replace Start Start_4 Start) (ite StartBool Start_6 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" x y)))

(check-synth)
