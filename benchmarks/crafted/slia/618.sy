(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_7 String) (Start_6 String) (StartInt_6 Int) (Start_8 String) (Start_2 String) (Start_4 String) (StartInt_4 Int) (StartInt_2 Int) (Start_10 String) (StartInt_3 Int) (Start_5 String) (Start_1 String) (Start_3 String) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_1 Int) (StartInt_5 Int))
  ((Start String ("b" y (str.++ Start Start) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.indexof Start Start StartInt_1)))
   (StartBool Bool (false true (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_6 Start_5) (str.prefixof Start_6 Start_5) (str.contains Start_1 Start_4) (= Start_5 Start_9)))
   (Start_9 String ("1" x "0" (str.substr Start_4 StartInt_1 StartInt_4) (str.from_int StartInt_2) (ite StartBool_1 Start Start_10)))
   (Start_7 String ("" "1" y "a" "0" "b" (str.substr Start_2 StartInt_1 StartInt_6) (str.replace Start_4 Start_5 Start_7) (str.from_int StartInt_5) (ite StartBool_2 Start_8 Start_1)))
   (Start_6 String ("b" (str.at Start_7 StartInt_5) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_5)))
   (StartInt_6 Int (1 0 (str.len Start_6) (str.indexof Start_5 Start_1 StartInt)))
   (Start_8 String ("" (str.at Start_7 StartInt_5) (str.substr Start_6 StartInt_2 StartInt_3) (str.from_int StartInt_1)))
   (Start_2 String (x "a" (str.at Start StartInt_3)))
   (Start_4 String (x (str.++ Start_5 Start_1) (str.at Start_3 StartInt_3)))
   (StartInt_4 Int (1 0 (str.indexof Start_4 Start StartInt_3)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_2 StartInt_1)))
   (Start_10 String ("1" (str.at Start StartInt_3) (ite StartBool Start Start_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_1 Start_3 StartInt_4)))
   (Start_5 String ("1" "b" y "a" "0" x "" (str.replace Start_4 Start_1 Start_4) (str.from_int StartInt_4)))
   (Start_1 String (x "1" "0" "" (str.substr Start_4 StartInt_2 StartInt_5) (str.replace Start_3 Start_3 Start_3) (str.from_int StartInt_6) (ite StartBool_2 Start_3 Start_4)))
   (Start_3 String (x (str.substr Start_4 StartInt_4 StartInt_2) (str.from_int StartInt_5) (ite StartBool_1 Start_1 Start_4)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool) (str.< Start_4 Start_4) (str.<= Start_5 Start) (str.contains Start_2 Start_2) (= Start_4 Start_3)))
   (StartBool_2 Bool (true (str.< Start_1 Start) (str.<= Start_2 Start_2) (= Start_4 Start_3) (<= StartInt_5 StartInt_4)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_1 StartInt_2)))
   (StartInt_5 Int (1 0 (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" x "b")))

(check-synth)
