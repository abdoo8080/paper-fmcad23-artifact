(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (Start_4 String) (Start_1 String) (StartInt_6 Int) (Start_6 String) (Start_9 String) (Start_13 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_8 String) (Start_12 String) (StartInt_3 Int) (Start_10 String) (StartInt_1 Int) (Start_3 String) (Start_5 String) (StartInt_4 Int) (Start_7 String) (StartInt_5 Int) (Start_11 String) (StartInt_7 Int))
  ((Start String (y (str.++ Start_1 Start_2) (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_1 Start Start_1)))
   (StartInt Int (1 0 (str.len Start_7) (str.to_int Start_6)))
   (StartBool Bool (false (str.<= Start_6 Start_13) (str.prefixof Start_12 Start_6) (str.suffixof Start_5 Start_10) (str.contains Start_5 Start_13) (= Start_3 Start_7) (<= StartInt_4 StartInt_5)))
   (Start_2 String ("b" (str.at Start_3 StartInt_1)))
   (Start_4 String (x y "1" "" (str.++ Start_9 Start_11) (str.at Start_6 StartInt_1) (str.substr Start_9 StartInt_2 StartInt_4) (str.replace Start_7 Start Start_12)))
   (Start_1 String ("a" (str.from_int StartInt_3) (ite StartBool Start Start)))
   (StartInt_6 Int (0 1 (str.indexof Start_6 Start_3 StartInt_4)))
   (Start_6 String (x (str.at Start_1 StartInt_3) (str.substr Start_12 StartInt_3 StartInt_6) (str.replace Start_6 Start_3 Start_2) (ite StartBool_1 Start_10 Start)))
   (Start_9 String ("0" (str.++ Start_2 Start_10) (str.substr Start_1 StartInt StartInt) (str.replace Start_5 Start_1 Start_12) (str.from_int StartInt_7)))
   (Start_13 String ("a" "1" "0" (str.substr Start_13 StartInt StartInt_5) (ite StartBool_1 Start_11 Start_3)))
   (StartBool_1 Bool (false (str.< Start_3 Start_2) (str.<= Start_6 Start_7) (= StartInt_3 StartInt)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_3 StartInt_1)))
   (Start_8 String (y "1" "" (str.++ Start_9 Start_1) (str.at Start_10 StartInt_2) (str.substr Start_2 StartInt_4 StartInt_6) (ite StartBool_1 Start_3 Start_11)))
   (Start_12 String (y (str.++ Start_9 Start_4)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start StartInt_1)))
   (Start_10 String ("b" "0" (str.substr Start_5 StartInt_4 StartInt_5) (str.from_int StartInt_4)))
   (StartInt_1 Int (0 1 (str.indexof Start_4 Start_5 StartInt) (str.to_int Start_3)))
   (Start_3 String ("a" (str.++ Start_3 Start_1) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt_2)))
   (Start_5 String ("0" (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_4 Int (1 (str.len Start_9) (str.indexof Start_2 Start_6 StartInt)))
   (Start_7 String ("a" (str.++ Start_4 Start_2) (str.at Start StartInt_4) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 (str.len Start_1) (str.indexof Start_3 Start StartInt_6) (str.to_int Start_8)))
   (Start_11 String ("b" (str.++ Start_10 Start_1) (str.at Start_1 StartInt_7) (str.from_int StartInt_2)))
   (StartInt_7 Int (0 1 (str.len Start_12) (str.indexof Start_1 Start_5 StartInt_4) (str.to_int Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (ite (= (str.indexof "b" "0" 0) (str.len y)) x "1") (str.replace "1" (str.++ (str.substr y 0 1) "1") "a"))))

(check-synth)
