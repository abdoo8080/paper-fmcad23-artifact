(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_12 String) (Start_2 String) (StartInt_1 Int) (Start_13 String) (StartInt_2 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_6 String) (StartInt_8 Int) (Start_8 String) (Start_3 String) (Start_5 String) (StartInt_5 Int) (StartInt_3 Int) (Start_11 String) (Start_10 String) (Start_1 String) (Start_4 String) (StartInt_4 Int) (Start_7 String) (StartInt_7 Int) (Start_9 String) (StartInt_6 Int) (StartBool_2 Bool))
  ((Start String ("1" x (str.++ Start Start) (str.at Start_1 StartInt)))
   (StartInt Int (0 1 (str.len Start_6) (str.indexof Start_3 Start_10 StartInt)))
   (StartBool Bool (true (not StartBool_1) (str.< Start_3 Start_5) (str.<= Start_1 Start_11) (str.prefixof Start_1 Start_8) (str.suffixof Start_12 Start_4) (= Start_11 Start_10) (<= StartInt_2 StartInt_8)))
   (StartInt_9 Int (1 (str.indexof Start_12 Start_3 StartInt)))
   (Start_12 String ("b" x "1" (str.at Start_1 StartInt_9) (str.replace Start_13 Start_12 Start_3)))
   (Start_2 String (y x "b" "1" (str.at Start_9 StartInt) (str.from_int StartInt_7)))
   (StartInt_1 Int (0 (str.indexof Start_9 Start_3 StartInt)))
   (Start_13 String ("" (str.++ Start_11 Start_8) (str.at Start_13 StartInt) (str.from_int StartInt_8) (ite StartBool Start_3 Start_8)))
   (StartInt_2 Int (0 1 (str.to_int Start_8)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool_3) (= Start_5 Start_1)))
   (StartBool_1 Bool (true (not StartBool_3) (and StartBool_3 StartBool) (str.< Start_11 Start_2) (str.<= Start_1 Start_6) (str.prefixof Start_7 Start_6) (str.suffixof Start_5 Start_8) (str.contains Start_11 Start_9) (<= StartInt_2 StartInt_3)))
   (Start_6 String ("" "b" x y (str.++ Start_8 Start_11) (str.from_int StartInt_4) (ite StartBool Start_1 Start_6)))
   (StartInt_8 Int (1 0))
   (Start_8 String ("0" (str.substr Start_8 StartInt_1 StartInt_3) (str.replace Start_5 Start Start_7) (str.from_int StartInt_6)))
   (Start_3 String ("a" x "0" (str.substr Start StartInt StartInt_1) (str.from_int StartInt_3)))
   (Start_5 String ("a" (str.at Start_5 StartInt_4) (str.substr Start_1 StartInt_3 StartInt_3) (str.replace Start_4 Start_5 Start_1)))
   (StartInt_5 Int (1 0 (str.len Start_4) (str.indexof Start_6 Start_6 StartInt_6)))
   (StartInt_3 Int (0 (str.len Start_4) (str.indexof Start_5 Start_3 StartInt_3) (str.to_int Start)))
   (Start_11 String ("1" (str.substr Start_1 StartInt_6 StartInt_1) (ite StartBool_2 Start_4 Start_1)))
   (Start_10 String (y x (str.++ Start_7 Start_6) (str.at Start StartInt_8) (str.substr Start_7 StartInt_6 StartInt_2) (str.replace Start_2 Start_4 Start) (ite StartBool_1 Start_8 Start_6)))
   (Start_1 String ("a" (str.++ Start Start) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_3)))
   (Start_4 String (x (str.at Start_6 StartInt_5) (str.substr Start_5 StartInt_4 StartInt_6) (str.from_int StartInt_7) (ite StartBool_1 Start_7 Start_5)))
   (StartInt_4 Int (1 (str.indexof Start_1 Start_2 StartInt_2)))
   (Start_7 String ("" (str.++ Start_6 Start_4) (str.at Start_4 StartInt_4) (str.replace Start_8 Start_4 Start) (str.from_int StartInt_6) (ite StartBool Start_5 Start_3)))
   (StartInt_7 Int (1 0 (str.len Start_3) (str.indexof Start_1 Start_3 StartInt_6)))
   (Start_9 String ("0" (str.++ Start_1 Start_3) (str.replace Start_7 Start_3 Start_1) (ite StartBool_2 Start_8 Start_4)))
   (StartInt_6 Int (1 (str.indexof Start_6 Start_3 StartInt_6) (str.to_int Start_9)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool StartBool) (str.<= Start_8 Start_8) (str.contains Start_1 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.indexof y (str.++ x x) 1))))

(check-synth)
