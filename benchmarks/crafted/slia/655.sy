(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_11 String) (Start_5 String) (StartInt_3 Int) (Start_2 String) (StartInt_6 Int) (StartInt_2 Int) (StartInt_5 Int) (Start_3 String) (StartInt_1 Int) (Start_4 String) (Start_7 String) (Start_8 String) (Start_9 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_6 String) (Start_10 String))
  ((Start String ("" (str.++ Start_1 Start_1) (str.at Start_1 StartInt) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0 1 (str.to_int Start_5)))
   (StartBool Bool (false (not StartBool) (str.<= Start_3 Start_1) (str.suffixof Start_1 Start_2)))
   (Start_1 String ("" (str.at Start_2 StartInt_2) (ite StartBool Start_8 Start_11)))
   (Start_11 String ("1" "b" y "0" (str.++ Start_5 Start_2) (str.at Start_11 StartInt_1) (ite StartBool Start_2 Start_2)))
   (Start_5 String ("0" (str.substr Start_11 StartInt_5 StartInt_1) (str.replace Start_7 Start_4 Start_2)))
   (StartInt_3 Int (0 1 (str.len Start_8) (str.indexof Start_9 Start_2 StartInt_6)))
   (Start_2 String ("1" x "b" (str.at Start_3 StartInt) (str.replace Start_1 Start Start_1) (ite StartBool_1 Start_2 Start)))
   (StartInt_6 Int (0))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_3 Start StartInt_2) (str.to_int Start_2)))
   (StartInt_5 Int (1 0 (str.indexof Start_8 Start_5 StartInt_5)))
   (Start_3 String ("1" (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start Start)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_4 Start StartInt_1) (str.to_int Start_1)))
   (Start_4 String ("0" "" (str.++ Start_5 Start_5) (str.at Start_1 StartInt) (str.substr Start_2 StartInt_2 StartInt_1) (ite StartBool Start_1 Start_6)))
   (Start_7 String ("" "0" (str.replace Start_10 Start_4 Start_4)))
   (Start_8 String ("1" (str.++ Start_9 Start_3) (str.at Start_6 StartInt) (str.replace Start_9 Start_4 Start_6) (ite StartBool_1 Start Start_4)))
   (Start_9 String (y (str.replace Start_3 Start_10 Start_4) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false true (and StartBool StartBool_1) (str.contains Start_4 Start_6) (= Start_9 Start_5) (<= StartInt_5 StartInt_6)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.to_int Start_7)))
   (Start_6 String ("a" x (str.at Start StartInt_3) (str.replace Start_2 Start_7 Start_8)))
   (Start_10 String (y (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "b" (str.replace y "a" "1"))))

(check-synth)
