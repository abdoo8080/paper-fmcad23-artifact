(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_11 String) (StartBool_3 Bool) (Start_10 String) (StartInt_8 Int) (Start_9 String) (Start_8 String) (Start_1 String) (Start_6 String) (Start_3 String) (StartBool_2 Bool) (Start_4 String) (Start_5 String) (Start_7 String) (StartInt_3 Int) (StartInt_7 Int) (StartInt_2 Int) (StartInt_1 Int) (StartInt_6 Int) (StartBool_1 Bool) (Start_2 String) (StartInt_4 Int) (StartInt_5 Int))
  ((Start String (y "1" x "0" "a" (str.++ Start_1 Start) (str.at Start_2 StartInt_1) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start Start_3) (ite StartBool_1 Start_2 Start_2)))
   (StartInt Int (1 (str.len Start_1) (str.indexof Start_8 Start_5 StartInt) (str.to_int Start_4)))
   (StartBool Bool (true (not StartBool_3) (str.<= Start_7 Start_3) (str.prefixof Start_7 Start_1) (= StartInt_6 StartInt_7)))
   (Start_12 String (y (str.substr Start_2 StartInt_8 StartInt_6) (str.from_int StartInt_1) (ite StartBool Start_3 Start_12)))
   (Start_11 String ("0" (str.++ Start_12 Start_4) (str.replace Start_11 Start_2 Start_9)))
   (StartBool_3 Bool (false (not StartBool_2) (str.< Start_6 Start) (str.<= Start_5 Start_9) (str.suffixof Start_11 Start_3) (str.contains Start_11 Start_11) (= StartInt_2 StartInt_6) (<= StartInt_3 StartInt_1)))
   (Start_10 String (x (str.at Start_8 StartInt) (str.substr Start_7 StartInt_2 StartInt_3) (str.replace Start_9 Start_3 Start_5) (str.from_int StartInt_7) (ite StartBool Start_8 Start_6)))
   (StartInt_8 Int (0 (str.len Start_4) (str.indexof Start_8 Start_12 StartInt_7) (str.to_int Start_7)))
   (Start_9 String ("0" (str.substr Start_6 StartInt_4 StartInt_6) (str.from_int StartInt)))
   (Start_8 String ("" (str.++ Start_4 Start_7) (str.at Start_4 StartInt_5) (str.from_int StartInt_1) (ite StartBool_2 Start_8 Start_9)))
   (Start_1 String ("a" (str.++ Start_4 Start_3) (str.at Start_5 StartInt_4) (str.substr Start_1 StartInt StartInt_6) (str.replace Start_2 Start Start_5) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start)))
   (Start_6 String ("b" "a" x (str.++ Start Start_1) (str.at Start_4 StartInt_1) (ite StartBool Start_2 Start_1)))
   (Start_3 String ("a" y "1" (str.++ Start_2 Start_3) (ite StartBool Start_2 Start_5)))
   (StartBool_2 Bool (false (not StartBool) (str.<= Start_6 Start_8) (str.suffixof Start_9 Start_5) (<= StartInt_3 StartInt_6)))
   (Start_4 String (x "0" (str.++ Start Start_1) (str.from_int StartInt_1)))
   (Start_5 String (x "b" (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start Start_4 Start_4)))
   (Start_7 String ("0" y (str.from_int StartInt_3)))
   (StartInt_3 Int (1 0 (str.len Start_5) (str.indexof Start_6 Start_5 StartInt_2)))
   (StartInt_7 Int (1 (str.to_int Start_10)))
   (StartInt_2 Int (1 0))
   (StartInt_1 Int (1 0 (str.len Start_5) (str.indexof Start_6 Start_2 StartInt)))
   (StartInt_6 Int (1 0 (str.len Start_8)))
   (StartBool_1 Bool (false (not StartBool_1) (str.< Start_2 Start_2) (str.suffixof Start_4 Start_1) (str.contains Start_1 Start) (= StartInt StartInt_2)))
   (Start_2 String ("b" (str.at Start_2 StartInt_4) (str.substr Start_7 StartInt_4 StartInt_4)))
   (StartInt_4 Int (0 (str.indexof Start_1 Start_1 StartInt_5)))
   (StartInt_5 Int (0 1 (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= y "") "b" "")))

(check-synth)
