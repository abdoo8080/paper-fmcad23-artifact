(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartBool_1 Bool) (Start_6 String) (Start_2 String) (Start_7 String) (StartInt_6 Int) (Start_4 String) (Start_9 String) (StartInt_3 Int) (StartInt_7 Int) (StartInt_5 Int) (StartInt_4 Int) (Start_1 String) (Start_10 String) (StartBool_4 Bool) (StartInt_9 Int) (StartBool_3 Bool) (Start_3 String) (Start_5 String) (StartInt_8 Int) (Start_11 String) (StartBool_2 Bool) (StartInt_10 Int) (StartInt_11 Int) (StartInt_2 Int) (StartInt_1 Int) (Start_8 String))
  ((Start String (x (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_1 Start_1 Start_1) (ite StartBool Start Start)))
   (StartInt Int (0 1 (str.len Start_7) (str.to_int Start)))
   (StartBool Bool (false true (and StartBool_1 StartBool_4) (str.prefixof Start_3 Start_8) (<= StartInt StartInt_4)))
   (Start_12 String ("" (str.++ Start_8 Start_5) (str.from_int StartInt_1)))
   (StartBool_1 Bool (true (str.< Start_3 Start_4) (str.<= Start_6 Start_4) (str.prefixof Start_5 Start_7) (str.suffixof Start_2 Start_3) (str.contains Start_1 Start_7) (= Start Start_6)))
   (Start_6 String ("0" (str.++ Start_7 Start_7) (str.at Start_4 StartInt_1) (str.substr Start_5 StartInt StartInt_5) (str.replace Start_6 Start_1 Start_1) (str.from_int StartInt_6)))
   (Start_2 String (x (str.substr Start StartInt_6 StartInt_3) (str.replace Start_2 Start Start_4) (str.from_int StartInt_11)))
   (Start_7 String ("0" (str.substr Start_6 StartInt_7 StartInt_7) (str.replace Start_6 Start_3 Start_1)))
   (StartInt_6 Int (1 (str.indexof Start_4 Start_5 StartInt_1)))
   (Start_4 String (y "0" x "1" (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start Start_3 Start_4) (str.from_int StartInt_8) (ite StartBool_2 Start_5 Start_4)))
   (Start_9 String ("a" "1" y "0" (str.at Start_6 StartInt) (str.substr Start_7 StartInt_1 StartInt_6) (str.replace Start_3 Start_7 Start_1) (ite StartBool_3 Start_1 Start_10)))
   (StartInt_3 Int (1 (str.indexof Start_1 Start_3 StartInt_5) (str.to_int Start_2)))
   (StartInt_7 Int (0 1 (str.indexof Start_7 Start_4 StartInt_3)))
   (StartInt_5 Int (1 0 (str.len Start_6)))
   (StartInt_4 Int (0 (str.indexof Start_3 Start_6 StartInt_5) (str.to_int Start_1)))
   (Start_1 String ("b" "a" "" "1" (str.++ Start_1 Start_2) (str.at Start_1 StartInt_2) (str.replace Start_1 Start_3 Start_4) (ite StartBool_1 Start_5 Start_3)))
   (Start_10 String ("" "1" (str.++ Start_10 Start_9) (str.at Start_7 StartInt_7) (str.substr Start_10 StartInt_3 StartInt_9) (str.replace Start_10 Start_2 Start_4) (str.from_int StartInt_9) (ite StartBool_3 Start_3 Start_8)))
   (StartBool_4 Bool (true false (str.< Start_2 Start_9) (str.suffixof Start Start_12)))
   (StartInt_9 Int (1 0 (str.len Start_1)))
   (StartBool_3 Bool (false (str.<= Start_8 Start_9) (str.suffixof Start Start_5) (str.contains Start_8 Start_1) (= Start_6 Start_1) (= StartInt_3 StartInt_4) (<= StartInt_9 StartInt_2)))
   (Start_3 String ("1" "a" (str.++ Start_2 Start_6) (str.at Start_4 StartInt_3) (str.replace Start_11 Start_3 Start_2)))
   (Start_5 String (x (str.++ Start_1 Start_4) (str.substr Start_2 StartInt_3 StartInt_4)))
   (StartInt_8 Int (0 (str.len Start_4)))
   (Start_11 String (x (str.++ Start_4 Start_10) (str.substr Start_3 StartInt_7 StartInt_5) (str.replace Start_11 Start_5 Start_10) (str.from_int StartInt_10) (ite StartBool Start_7 Start_3)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool_1) (str.< Start_8 Start_3) (str.prefixof Start_2 Start) (str.suffixof Start_6 Start_7) (str.contains Start_3 Start_4) (= StartInt StartInt_4) (<= StartInt_7 StartInt_6)))
   (StartInt_10 Int (0 (str.len Start_11) (str.indexof Start_7 Start_4 StartInt_7) (str.to_int Start_9)))
   (StartInt_11 Int (0 (str.len Start_9) (str.indexof Start_5 Start_1 StartInt_8) (str.to_int Start_11)))
   (StartInt_2 Int (1 (str.indexof Start Start_6 StartInt_6) (str.to_int Start_8)))
   (StartInt_1 Int (0 (str.indexof Start_4 Start_5 StartInt) (str.to_int Start_3)))
   (Start_8 String (y (str.at Start_7 StartInt_1) (str.from_int StartInt_1) (ite StartBool_3 Start_9 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y (str.++ "a" "a"))))

(check-synth)
