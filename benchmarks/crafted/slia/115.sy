(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_4 Int) (Start_7 String) (Start_2 String) (Start_5 String) (Start_4 String) (StartInt_2 Int) (Start_3 String) (StartInt_3 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartBool_3 Bool) (Start_1 String) (Start_6 String) (StartInt_1 Int))
  ((Start String ("0" (str.++ Start Start) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.len Start_4) (str.indexof Start_2 Start_8 StartInt_2)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_2 StartBool_2) (str.<= Start_8 Start_8) (str.prefixof Start_2 Start_1) (= Start_3 Start_6)))
   (Start_8 String ("b" (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_7)))
   (StartInt_4 Int (1 (str.indexof Start Start_7 StartInt_4)))
   (Start_7 String ("1" (str.++ Start_3 Start_5) (str.substr Start StartInt StartInt_4) (str.replace Start_1 Start_5 Start) (str.from_int StartInt_4) (ite StartBool_2 Start_5 Start_1)))
   (Start_2 String ("1" "b" (str.++ Start_2 Start_3) (str.replace Start_4 Start_1 Start_5)))
   (Start_5 String ("1" x (str.++ Start_2 Start_5) (str.at Start_4 StartInt_1) (str.from_int StartInt_1)))
   (Start_4 String ("0" "1" (str.substr Start_1 StartInt_2 StartInt) (ite StartBool Start_4 Start)))
   (StartInt_2 Int (1 (str.to_int Start_2)))
   (Start_3 String ("a" "1" x y "" "b" "0" (str.++ Start_3 Start_4) (str.at Start_6 StartInt_1) (str.substr Start_3 StartInt StartInt_1) (ite StartBool_1 Start_5 Start_5)))
   (StartInt_3 Int (0 1 (str.indexof Start_6 Start StartInt)))
   (StartBool_1 Bool (false (not StartBool_2) (str.<= Start_2 Start_3) (str.suffixof Start_2 Start_2) (<= StartInt_2 StartInt)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool) (str.< Start_5 Start) (str.<= Start_2 Start_6) (str.prefixof Start Start_4) (str.contains Start_1 Start_5) (= Start Start_5) (<= StartInt StartInt_2)))
   (StartBool_3 Bool (true (str.<= Start_5 Start_6) (str.prefixof Start_5 Start_3) (str.contains Start_4 Start_4)))
   (Start_1 String ("0" (str.++ Start_5 Start_7) (str.at Start StartInt_1) (str.replace Start_3 Start_7 Start_7)))
   (Start_6 String ("1" (str.at Start_6 StartInt_3) (str.substr Start_1 StartInt_2 StartInt) (ite StartBool_3 Start_6 Start_6)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.indexof Start_1 Start_5 StartInt_3) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "a" "")))

(check-synth)
