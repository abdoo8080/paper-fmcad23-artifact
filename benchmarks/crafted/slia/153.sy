(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_11 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_8 String) (Start_10 String) (StartInt_4 Int) (Start_2 String) (Start_1 String) (Start_3 String) (StartInt_2 Int) (Start_4 String) (Start_6 String) (StartInt_1 Int) (StartInt_3 Int) (Start_5 String) (StartInt_6 Int) (StartBool_1 Bool) (Start_9 String))
  ((Start String ("1" "" (str.replace Start Start Start_1) (ite StartBool Start Start)))
   (StartInt Int (0 (str.len Start_1) (str.indexof Start_5 Start_2 StartInt_1)))
   (StartBool Bool (false (not StartBool) (str.suffixof Start_4 Start_3) (= Start_6 Start_2) (= StartInt StartInt_1) (<= StartInt_2 StartInt_1)))
   (Start_7 String ("" (str.at Start_11 StartInt)))
   (Start_11 String ("1" "0" "b" (str.at Start_11 StartInt_5) (str.substr Start_11 StartInt_3 StartInt)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_4 Start_7) (str.<= Start_11 Start_7) (str.prefixof Start_10 Start_9) (= Start_8 Start_11) (= StartInt_6 StartInt_2)))
   (StartInt_5 Int (1 0 (str.len Start)))
   (Start_8 String ("" "b" "a" (str.substr Start_7 StartInt_5 StartInt)))
   (Start_10 String ("" "b" "1" y (str.++ Start_7 Start_9) (str.substr Start_8 StartInt_4 StartInt_2)))
   (StartInt_4 Int (1 (str.indexof Start_9 Start_3 StartInt_1)))
   (Start_2 String ("0" (str.++ Start_1 Start) (str.at Start_3 StartInt) (str.from_int StartInt) (ite StartBool Start Start_1)))
   (Start_1 String (x "0" y "a" "" "b" (str.at Start_2 StartInt) (str.replace Start_1 Start Start_1) (ite StartBool Start_1 Start_2)))
   (Start_3 String (x "b" (str.++ Start_3 Start_4) (str.at Start_1 StartInt) (str.substr Start_3 StartInt_1 StartInt)))
   (StartInt_2 Int (0 (str.to_int Start_2)))
   (Start_4 String ("b" (str.at Start_4 StartInt_1) (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt)))
   (Start_6 String ("b" (str.replace Start_4 Start_7 Start) (ite StartBool_1 Start_2 Start_3)))
   (StartInt_1 Int (0 1 (str.len Start_2)))
   (StartInt_3 Int (0 (str.len Start) (str.to_int Start_7)))
   (Start_5 String ("a" x "b" "1" (str.substr Start_5 StartInt_1 StartInt_2) (str.from_int StartInt)))
   (StartInt_6 Int (0 (str.len Start_8) (str.indexof Start_10 Start_11 StartInt_4) (str.to_int Start_8)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_1 StartBool) (str.prefixof Start Start_2) (str.suffixof Start_8 Start_1) (str.contains Start_9 Start)))
   (Start_9 String ("" (str.substr Start_3 StartInt StartInt_2) (str.replace Start_4 Start_9 Start_9) (str.from_int StartInt_3) (ite StartBool_2 Start_10 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 1) "1")))

(check-synth)
