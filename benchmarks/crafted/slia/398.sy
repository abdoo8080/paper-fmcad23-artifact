(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_12 String) (Start_1 String) (StartInt_1 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_3 Int) (Start_4 String) (Start_2 String) (Start_8 String) (Start_11 String) (Start_3 String) (Start_5 String) (StartInt_4 Int) (Start_10 String) (StartInt_6 Int) (StartInt_5 Int) (StartInt_2 Int) (Start_7 String) (Start_6 String) (StartInt_7 Int) (Start_9 String))
  ((Start String (x (str.++ Start_1 Start_1) (str.substr Start StartInt_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 0 (str.len Start_2) (str.to_int Start)))
   (StartBool Bool (true (str.< Start_1 Start_12) (str.prefixof Start_10 Start_10) (= StartInt_6 StartInt_2)))
   (StartInt_8 Int (0 (str.len Start_5)))
   (Start_12 String ("1" (str.at Start_11 StartInt) (str.substr Start_1 StartInt_3 StartInt_2) (str.replace Start_3 Start_12 Start_2) (str.from_int StartInt_8)))
   (Start_1 String (y "0" (str.at Start_9 StartInt_4) (str.replace Start_3 Start_7 Start_11) (ite StartBool_2 Start_3 Start_8)))
   (StartInt_1 Int (0 (str.indexof Start_1 Start_5 StartInt_3) (str.to_int Start_3)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.< Start_4 Start_10) (str.prefixof Start Start_7) (str.suffixof Start_1 Start_8) (str.contains Start_9 Start_3) (= StartInt_1 StartInt_4) (<= StartInt_3 StartInt_1)))
   (StartBool_2 Bool (false true (str.<= Start_3 Start) (str.prefixof Start_10 Start) (= Start_7 Start_10) (= StartInt StartInt_3)))
   (StartInt_3 Int (0 (str.indexof Start_5 Start_3 StartInt_2) (str.to_int Start_8)))
   (Start_4 String ("a" (str.at Start_4 StartInt_3) (str.substr Start_1 StartInt_1 StartInt_4) (str.replace Start Start_1 Start_1)))
   (Start_2 String ("1" (str.++ Start_1 Start) (str.substr Start StartInt StartInt_1) (str.replace Start Start Start_2) (ite StartBool Start_2 Start_3)))
   (Start_8 String ("0" x "a" y "b" (ite StartBool_2 Start_4 Start_7)))
   (Start_11 String (y (str.substr Start_1 StartInt_6 StartInt_6) (ite StartBool_2 Start_12 Start_8)))
   (Start_3 String ("" "a" y (str.++ Start_2 Start) (str.at Start_2 StartInt_2) (ite StartBool_2 Start_3 Start_4)))
   (Start_5 String (x "0" (str.at Start_6 StartInt_5) (str.substr Start StartInt_1 StartInt_5) (ite StartBool_1 Start_5 Start_6)))
   (StartInt_4 Int (1 0 (str.len Start) (str.indexof Start Start_3 StartInt) (str.to_int Start_5)))
   (Start_10 String ("" "a" "1" (ite StartBool Start_6 Start_8)))
   (StartInt_6 Int (0 1 (str.len Start) (str.indexof Start_7 Start_5 StartInt_2)))
   (StartInt_5 Int (0 1 (str.indexof Start_2 Start_7 StartInt_6) (str.to_int Start_7)))
   (StartInt_2 Int (1 0 (str.indexof Start_7 Start_4 StartInt_4)))
   (Start_7 String ("0" (str.++ Start_8 Start) (str.at Start_5 StartInt_2) (str.from_int StartInt_4)))
   (Start_6 String ("b" x "1" "0" (str.++ Start_4 Start_7) (str.at Start_9 StartInt_1) (str.substr Start_7 StartInt_7 StartInt_5) (str.replace Start_9 Start_4 Start_5) (str.from_int StartInt_3) (ite StartBool_2 Start_4 Start_7)))
   (StartInt_7 Int (0 1 (str.indexof Start_3 Start_1 StartInt_5)))
   (Start_9 String ("a" "" x (str.++ Start_8 Start_6) (str.at Start_7 StartInt_3) (str.substr Start_2 StartInt_1 StartInt_5) (str.replace Start_2 Start_6 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof y (str.replace "" x "0")) "" (str.at y 1))))

(check-synth)
