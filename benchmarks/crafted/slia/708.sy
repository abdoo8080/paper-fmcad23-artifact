(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_13 String) (StartInt_9 Int) (StartInt_1 Int) (Start_5 String) (Start_4 String) (Start_9 String) (StartInt_4 Int) (Start_11 String) (Start_3 String) (Start_6 String) (StartInt_3 Int) (StartBool_5 Bool) (StartBool_1 Bool) (StartBool_4 Bool) (Start_8 String) (Start_1 String) (StartBool_3 Bool) (Start_12 String) (StartInt_2 Int) (Start_7 String) (StartBool_6 Bool) (StartBool_2 Bool) (StartInt_8 Int) (Start_10 String) (StartInt_5 Int) (StartInt_6 Int) (Start_2 String) (StartInt_7 Int) (StartInt_10 Int))
  ((Start String ("b" y "a" x "" (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_1 Start Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0 (str.len Start_10) (str.to_int Start_3)))
   (StartBool Bool (true false (not StartBool_5) (str.<= Start_1 Start_2) (str.prefixof Start_12 Start_13) (<= StartInt_9 StartInt_10)))
   (Start_14 String ("b" (str.at Start_14 StartInt_4) (str.substr Start_11 StartInt StartInt_6) (str.replace Start_3 Start_10 Start_7) (ite StartBool_6 Start_1 Start_14)))
   (Start_13 String ("" y "1" (str.substr Start_4 StartInt_7 StartInt_2) (str.replace Start_12 Start_5 Start_6)))
   (StartInt_9 Int (1 (str.len Start_1) (str.indexof Start_13 Start_6 StartInt_10)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start_3 Start_7 StartInt_4) (str.to_int Start_5)))
   (Start_5 String ("1" "b" (str.at Start_5 StartInt_4) (ite StartBool_1 Start_4 Start)))
   (Start_4 String ("" "0" (str.++ Start_4 Start) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt_3)))
   (Start_9 String ("" "0" x (str.at Start_7 StartInt_3) (str.replace Start_1 Start_3 Start_10) (ite StartBool Start_6 Start_9)))
   (StartInt_4 Int (0 (str.len Start_6) (str.indexof Start_6 Start_4 StartInt_3)))
   (Start_11 String ("1" (str.substr Start_11 StartInt_6 StartInt_5) (str.replace Start_1 Start_7 Start)))
   (Start_3 String ("1" "0" x y (str.++ Start_2 Start_2) (str.replace Start_1 Start_1 Start_4)))
   (Start_6 String ("0" (str.++ Start_1 Start_2) (ite StartBool Start_1 Start_5)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_2 StartInt_1)))
   (StartBool_5 Bool (false (and StartBool_5 StartBool_5) (str.prefixof Start_3 Start_6) (str.suffixof Start_6 Start_1) (= StartInt_3 StartInt_1) (<= StartInt_1 StartInt)))
   (StartBool_1 Bool (false true (str.suffixof Start Start_3) (str.contains Start Start_2) (= Start_1 Start_3) (<= StartInt_1 StartInt_3)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_5 StartBool) (str.<= Start_5 Start_8) (= StartInt_4 StartInt)))
   (Start_8 String (x "0" "" (str.++ Start_9 Start_1) (str.replace Start_1 Start_6 Start_5) (str.from_int StartInt_5) (ite StartBool_1 Start_5 Start_3)))
   (Start_1 String ("b" (str.++ Start_3 Start_1) (str.at Start StartInt_8) (str.substr Start_2 StartInt_1 StartInt_7)))
   (StartBool_3 Bool (false true (not StartBool_6) (str.prefixof Start_7 Start_8) (str.contains Start_4 Start_3) (= Start_4 Start_6) (= StartInt_1 StartInt_6)))
   (Start_12 String ("0" y "" "b" "a" (str.substr Start_14 StartInt_4 StartInt_7) (str.replace Start_11 Start Start_7) (ite StartBool_3 Start_9 Start_6)))
   (StartInt_2 Int (0 1 (str.len Start_5) (str.indexof Start_1 Start StartInt_4) (str.to_int Start)))
   (Start_7 String ("1" (str.at Start_4 StartInt_1) (str.substr Start_7 StartInt_1 StartInt_5) (ite StartBool_2 Start_2 Start_4)))
   (StartBool_6 Bool (false true (not StartBool_6) (str.< Start_2 Start_6) (str.<= Start_9 Start_2) (str.contains Start_4 Start_10) (= Start_7 Start_6) (<= StartInt_2 StartInt_1)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_2) (str.< Start_7 Start_2) (str.suffixof Start_3 Start_5) (str.contains Start_3 Start_5) (= Start_5 Start_5) (= StartInt_3 StartInt_4)))
   (StartInt_8 Int (1 0 (str.to_int Start_3)))
   (Start_10 String ("0" (str.++ Start_3 Start_3) (str.at Start StartInt_4) (str.substr Start_10 StartInt_2 StartInt_5) (str.replace Start_11 Start Start_8)))
   (StartInt_5 Int (0 1 (str.len Start_7) (str.indexof Start_3 Start_1 StartInt_7) (str.to_int Start_5)))
   (StartInt_6 Int (1 0 (str.len Start_11) (str.to_int Start_5)))
   (Start_2 String (y (str.++ Start Start_4)))
   (StartInt_7 Int (1 0 (str.to_int Start_9)))
   (StartInt_10 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at y 1) "a")))

(check-synth)
