(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartBool_1 Bool) (Start_10 String) (StartInt_5 Int) (Start_2 String) (Start_8 String) (StartInt_1 Int) (Start_1 String) (Start_9 String) (Start_5 String) (StartInt_3 Int) (StartInt_7 Int) (Start_3 String) (StartInt_2 Int) (StartInt_6 Int) (Start_4 String) (Start_6 String) (Start_7 String) (StartInt_4 Int))
  ((Start String (y "" "1" "0" (str.++ Start_1 Start_1) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt)))
   (StartInt Int (0 (str.to_int Start_9)))
   (StartBool Bool (true (not StartBool_1) (str.< Start_3 Start_6) (str.prefixof Start_4 Start_9) (= Start_10 Start_5) (<= StartInt_6 StartInt_5)))
   (StartInt_8 Int (1 (str.indexof Start_5 Start_1 StartInt_5)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_1) (str.<= Start_9 Start_2) (= Start_7 Start_5) (<= StartInt_8 StartInt_3)))
   (Start_10 String ("1" (str.++ Start_8 Start_10) (str.at Start_7 StartInt_7) (str.substr Start_10 StartInt_5 StartInt_5) (str.replace Start Start Start_3) (str.from_int StartInt_4)))
   (StartInt_5 Int (1 0 (str.indexof Start Start_8 StartInt_1)))
   (Start_2 String ("0" x "1" (str.++ Start_5 Start_4) (str.substr Start_7 StartInt_5 StartInt_6) (str.replace Start_1 Start_8 Start_1) (str.from_int StartInt_1)))
   (Start_8 String ("" (str.++ Start_2 Start_9) (ite StartBool Start_6 Start_2)))
   (StartInt_1 Int (0 (str.to_int Start_1)))
   (Start_1 String ("0" (str.++ Start_2 Start) (str.substr Start_2 StartInt_2 StartInt_3) (str.from_int StartInt_1)))
   (Start_9 String ("0" (str.++ Start_3 Start_2) (str.at Start_2 StartInt_3) (str.from_int StartInt_2)))
   (Start_5 String (x (str.replace Start_6 Start Start_7) (ite StartBool Start_9 Start_5)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_2 StartInt)))
   (StartInt_7 Int (0 (str.indexof Start_8 Start_7 StartInt_4) (str.to_int Start)))
   (Start_3 String ("1" (str.++ Start_1 Start_1) (str.substr Start_3 StartInt StartInt) (str.replace Start_1 Start_2 Start) (str.from_int StartInt_1) (ite StartBool Start_3 Start_4)))
   (StartInt_2 Int (0 1 (str.len Start_5) (str.to_int Start)))
   (StartInt_6 Int (1 0 (str.len Start_6) (str.indexof Start Start_5 StartInt_3) (str.to_int Start_9)))
   (Start_4 String ("0" (str.replace Start_1 Start_5 Start_6)))
   (Start_6 String ("0" y (str.++ Start Start_7) (str.replace Start_3 Start_8 Start_3)))
   (Start_7 String ("a" (str.++ Start_3 Start_9) (str.at Start_7 StartInt_4) (str.substr Start_1 StartInt_3 StartInt) (str.replace Start_3 Start_1 Start_6) (str.from_int StartInt_4)))
   (StartInt_4 Int (0 (str.indexof Start Start_6 StartInt_1) (str.to_int Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.indexof x "1" 1))))

(check-synth)
