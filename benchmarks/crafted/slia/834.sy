(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartInt_7 Int) (Start_1 String) (StartBool_3 Bool) (Start_14 String) (Start_4 String) (Start_13 String) (StartInt_2 Int) (StartInt_1 Int) (Start_6 String) (Start_15 String) (Start_5 String) (StartBool_1 Bool) (Start_2 String) (StartInt_4 Int) (Start_12 String) (StartBool_2 Bool) (Start_17 String) (Start_10 String) (StartBool_4 Bool) (Start_9 String) (StartInt_3 Int) (StartInt_5 Int) (Start_7 String) (StartInt_6 Int) (Start_11 String) (Start_16 String) (Start_8 String) (StartInt_8 Int))
  ((Start String ("0" "1" (str.from_int StartInt)))
   (StartInt Int (0 (str.indexof Start Start StartInt_1)))
   (StartBool Bool (false (not StartBool) (str.prefixof Start_3 Start_2) (str.suffixof Start_4 Start_2) (= StartInt_1 StartInt_2)))
   (Start_3 String ("0" "1" "" (str.++ Start Start_8) (str.replace Start_5 Start_4 Start_7) (str.from_int StartInt_1)))
   (StartInt_7 Int (1 (str.indexof Start_17 Start_6 StartInt_4)))
   (Start_1 String (x (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start Start_1)))
   (StartBool_3 Bool (false (and StartBool_2 StartBool_2) (str.<= Start_5 Start) (<= StartInt_2 StartInt_2)))
   (Start_14 String ("a" "b" "1" y "" (str.replace Start Start_5 Start_15)))
   (Start_4 String (y "0" (str.++ Start Start_5) (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_1) (str.from_int StartInt) (ite StartBool Start_3 Start_2)))
   (Start_13 String ("1" (str.++ Start_10 Start_4) (str.at Start StartInt_4) (str.substr Start_10 StartInt_5 StartInt) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start Start_4 StartInt_1) (str.to_int Start_2)))
   (StartInt_1 Int (0 1 (str.indexof Start Start_1 StartInt)))
   (Start_6 String ("0" (str.at Start_6 StartInt_3) (str.substr Start_8 StartInt_1 StartInt_3) (str.replace Start_9 Start Start) (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start_7)))
   (Start_15 String ("1" (str.++ Start_8 Start_2) (str.substr Start_5 StartInt_6 StartInt_5) (str.replace Start_11 Start_14 Start_16) (str.from_int StartInt_2)))
   (Start_5 String ("b" (str.replace Start_4 Start Start_6) (ite StartBool Start_2 Start_7)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_2) (str.< Start_7 Start_2) (str.prefixof Start_3 Start_4) (str.contains Start_4 Start_5) (= Start_9 Start_6) (<= StartInt StartInt)))
   (Start_2 String ("0" (str.++ Start_2 Start_1)))
   (StartInt_4 Int (0 (str.len Start_7) (str.to_int Start_9)))
   (Start_12 String (x "1" "" "a" "0" (str.++ Start Start_6) (str.substr Start StartInt_6 StartInt) (str.replace Start_7 Start Start_3) (str.from_int StartInt_4)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_2) (str.< Start_9 Start_8) (str.<= Start_9 Start_8) (str.prefixof Start_2 Start_8) (str.suffixof Start_10 Start_9) (= StartInt_2 StartInt_1) (<= StartInt StartInt_4)))
   (Start_17 String ("b" y "0" (str.replace Start_10 Start Start_16) (str.from_int StartInt_2)))
   (Start_10 String (y (str.++ Start_6 Start_3) (str.at Start_3 StartInt) (ite StartBool_4 Start_8 Start_1)))
   (StartBool_4 Bool (true false (str.<= Start_8 Start_10) (= StartInt StartInt_3) (<= StartInt_2 StartInt_2)))
   (Start_9 String ("" (str.++ Start_1 Start_11) (str.at Start_10 StartInt) (str.from_int StartInt_1) (ite StartBool Start_12 Start_13)))
   (StartInt_3 Int (1 0 (str.to_int Start_6)))
   (StartInt_5 Int (0 1 (str.indexof Start_12 Start_8 StartInt_5) (str.to_int Start_7)))
   (Start_7 String ("" (str.++ Start_7 Start_2) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start_1 Start_6 Start_7) (str.from_int StartInt_3)))
   (StartInt_6 Int (1 0 (str.len Start_6)))
   (Start_11 String ("a" (str.++ Start_9 Start_14) (str.replace Start_2 Start_9 Start_14) (str.from_int StartInt_2) (ite StartBool_4 Start_15 Start_9)))
   (Start_16 String ("a" "1" (str.++ Start_10 Start_10) (str.substr Start_5 StartInt_6 StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_13 Start_4)))
   (Start_8 String ("b" "0" x (str.++ Start_3 Start_11) (str.substr Start_12 StartInt_1 StartInt_7) (str.from_int StartInt_8)))
   (StartInt_8 Int (0 (str.len Start_15) (str.to_int Start_16)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "a" y "a") "0")))

(check-synth)
