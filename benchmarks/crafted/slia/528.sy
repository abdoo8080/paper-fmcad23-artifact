(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_1 String) (StartInt_5 Int) (Start_13 String) (StartBool_4 Bool) (Start_10 String) (StartInt_6 Int) (Start_12 String) (Start_11 String) (Start_15 String) (Start_3 String) (Start_2 String) (StartInt_7 Int) (Start_4 String) (Start_7 String) (StartInt_1 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartBool_3 Bool) (StartInt_2 Int) (Start_6 String) (StartInt_3 Int) (Start_8 String) (Start_5 String) (Start_9 String) (StartInt_4 Int))
  ((Start String ("a" "0" (str.at Start StartInt) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_1 Start Start) (str.from_int StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt Int (1 (str.len Start_14) (str.indexof Start_7 Start_12 StartInt)))
   (StartBool Bool (false (not StartBool_3) (str.< Start_12 Start_11) (str.<= Start_8 Start_11) (= Start_2 Start_4)))
   (Start_14 String ("0" y x "" (str.at Start_14 StartInt_3) (str.substr Start_9 StartInt_3 StartInt_7) (str.replace Start_14 Start Start_4) (ite StartBool_2 Start_9 Start_11)))
   (Start_1 String ("0" (str.replace Start_1 Start_5 Start_5) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 0 (str.len Start_9)))
   (Start_13 String ("1" "0" "" (str.from_int StartInt_6)))
   (StartBool_4 Bool (true false (str.<= Start_3 Start_5) (str.prefixof Start_3 Start_13) (str.suffixof Start_10 Start) (str.contains Start_8 Start_11) (= Start_2 Start_13) (= StartInt StartInt_2)))
   (Start_10 String ("" (str.++ Start_7 Start_12) (str.substr Start_1 StartInt_5 StartInt_1) (str.replace Start_8 Start_3 Start_5) (str.from_int StartInt_1) (ite StartBool_4 Start_10 Start_9)))
   (StartInt_6 Int (0 1 (str.len Start_12) (str.to_int Start_10)))
   (Start_12 String ("b" "a" "0" (str.at Start_3 StartInt) (str.substr Start_9 StartInt_3 StartInt) (str.from_int StartInt_1)))
   (Start_11 String ("0" "" (str.++ Start Start_7) (str.at Start_12 StartInt_3) (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start_4 Start_1 Start_6) (str.from_int StartInt_1)))
   (Start_15 String ("b" (str.++ Start Start) (str.at Start_4 StartInt_1) (str.substr Start_14 StartInt_5 StartInt_4)))
   (Start_3 String ("a" x (str.++ Start_4 Start_12) (str.replace Start_10 Start_9 Start_1) (str.from_int StartInt_2) (ite StartBool Start_12 Start_10)))
   (Start_2 String (y (str.++ Start Start_1) (str.at Start_2 StartInt_1) (str.replace Start_2 Start_2 Start) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (StartInt_7 Int (0 (str.len Start_15)))
   (Start_4 String ("0" x "" "a" (str.++ Start_2 Start_2) (str.at Start StartInt_2) (str.replace Start_2 Start_2 Start_2) (ite StartBool_2 Start Start_1)))
   (Start_7 String (x (str.++ Start_2 Start_7) (str.substr Start_7 StartInt_1 StartInt_3)))
   (StartInt_1 Int (1 (str.len Start) (str.to_int Start_2)))
   (StartBool_1 Bool (false (and StartBool StartBool_1) (str.< Start Start_1) (str.<= Start Start_1) (str.suffixof Start Start_3) (str.contains Start_2 Start_4) (<= StartInt StartInt)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_2 StartBool_2) (str.< Start Start_4) (str.<= Start_1 Start) (str.contains Start_3 Start_5)))
   (StartBool_3 Bool (true (str.< Start_2 Start_4) (str.prefixof Start_3 Start_6) (str.suffixof Start_2 Start_1) (str.contains Start_7 Start_5)))
   (StartInt_2 Int (1 0))
   (Start_6 String ("1" x y (str.at Start_4 StartInt) (ite StartBool_2 Start_3 Start_2)))
   (StartInt_3 Int (0 1 (str.indexof Start_6 Start_3 StartInt_2) (str.to_int Start_8)))
   (Start_8 String ("1" x (str.++ Start_9 Start_3) (str.at Start_6 StartInt) (ite StartBool_2 Start_2 Start_9)))
   (Start_5 String (x (str.++ Start_3 Start_1) (str.replace Start_5 Start_2 Start_3) (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start_2)))
   (Start_9 String ("b" (str.substr Start_10 StartInt_4 StartInt) (str.from_int StartInt_2)))
   (StartInt_4 Int (1 0 (str.to_int Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof y "b") y "")))

(check-synth)
