(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_5 String) (Start_13 String) (StartInt_5 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_8 String) (Start_6 String) (StartInt_1 Int) (StartInt_3 Int) (Start_3 String) (StartInt_4 Int) (Start_1 String) (StartInt_2 Int) (Start_15 String) (StartInt_6 Int) (Start_4 String) (StartInt_7 Int) (Start_10 String) (Start_9 String) (StartInt_9 Int) (Start_2 String) (StartBool_3 Bool) (Start_11 String) (StartInt_8 Int) (Start_12 String) (Start_14 String))
  ((Start String ("0" (str.++ Start_1 Start_1) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_4)))
   (StartInt Int (1 (str.len Start_5) (str.indexof Start_6 Start_3 StartInt_9)))
   (StartBool Bool (false (str.< Start Start_4) (str.<= Start_9 Start) (str.suffixof Start_4 Start_12) (= Start_3 Start_15) (= StartInt_2 StartInt) (<= StartInt_8 StartInt_2)))
   (Start_7 String ("a" "b" y "0" "" (str.replace Start_9 Start_6 Start_6)))
   (Start_5 String (y "b" "0" x (str.at Start StartInt_3) (str.replace Start_2 Start_5 Start_5) (str.from_int StartInt_3)))
   (Start_13 String ("0" "1" (str.at Start_6 StartInt_8) (str.from_int StartInt_8) (ite StartBool_1 Start_7 Start_11)))
   (StartInt_5 Int (1 (str.indexof Start_8 Start_8 StartInt_1)))
   (StartBool_2 Bool (false (not StartBool_2) (str.< Start_6 Start_3) (str.contains Start_7 Start_7) (= Start_1 Start) (= StartInt_2 StartInt_5)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_1 Start_2) (str.suffixof Start Start_1) (= StartInt_4 StartInt_1)))
   (Start_8 String (x "" "b" (str.at Start_8 StartInt_3) (str.replace Start_6 Start_7 Start_5) (str.from_int StartInt_4)))
   (Start_6 String ("" (str.++ Start_4 Start_13) (str.substr Start_11 StartInt_3 StartInt_5) (str.replace Start_6 Start_5 Start_6)))
   (StartInt_1 Int (0 (str.len Start_3)))
   (StartInt_3 Int (0 1))
   (Start_3 String ("0" x (str.at Start_1 StartInt_1) (str.substr Start_5 StartInt_2 StartInt_1) (str.from_int StartInt_1)))
   (StartInt_4 Int (1 (str.len Start_5)))
   (Start_1 String ("1" "b" (str.++ Start_10 Start_14) (str.substr Start_8 StartInt_8 StartInt_9) (str.replace Start_14 Start_6 Start_4) (str.from_int StartInt_3)))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_5 StartInt) (str.to_int Start_4)))
   (Start_15 String ("0" (str.at Start_8 StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.indexof Start_7 Start_10 StartInt_7)))
   (Start_4 String (y (ite StartBool_1 Start_1 Start_3)))
   (StartInt_7 Int (1 0 (str.indexof Start_10 Start_10 StartInt_4)))
   (Start_10 String (y x "0" "b" (str.++ Start_10 Start_1) (str.at Start_2 StartInt_7) (str.replace Start_2 Start_11 Start_1) (ite StartBool Start_7 Start_8)))
   (Start_9 String ("b" y x (str.at Start_5 StartInt_5) (str.from_int StartInt_5) (ite StartBool_3 Start_5 Start_4)))
   (StartInt_9 Int (0 (str.len Start_1) (str.indexof Start_11 Start_3 StartInt_6) (str.to_int Start_14)))
   (Start_2 String ("a" (str.++ Start_1 Start_13) (str.at Start_2 StartInt_6) (str.from_int StartInt_5)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_2) (str.<= Start_3 Start_7) (= StartInt_6 StartInt_7) (<= StartInt StartInt_5)))
   (Start_11 String ("a" (str.++ Start_5 Start_1) (str.at Start_3 StartInt_1) (str.substr Start_3 StartInt StartInt_4) (ite StartBool_2 Start_4 Start_12)))
   (StartInt_8 Int (0 1 (str.len Start_12) (str.indexof Start_1 Start_8 StartInt_6) (str.to_int Start_5)))
   (Start_12 String ("0" (str.++ Start Start_10) (ite StartBool_3 Start_2 Start_3)))
   (Start_14 String ("a" "" "1" (str.++ Start_5 Start_4) (str.substr Start_14 StartInt_7 StartInt_4) (str.replace Start_7 Start_12 Start_12) (str.from_int StartInt_7) (ite StartBool_1 Start_12 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "a" "1")))

(check-synth)
