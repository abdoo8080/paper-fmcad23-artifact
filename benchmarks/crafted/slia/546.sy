(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (Start_5 String) (StartBool_4 Bool) (Start_3 String) (Start_13 String) (StartInt_1 Int) (Start_12 String) (Start_2 String) (Start_15 String) (Start_11 String) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_7 String) (Start_1 String) (Start_14 String) (Start_9 String) (Start_10 String) (StartInt_5 Int) (Start_8 String) (StartBool_2 Bool) (StartInt_6 Int) (StartBool_3 Bool) (Start_6 String))
  ((Start String (y "0" (str.substr Start_1 StartInt StartInt_1)))
   (StartInt Int (0 (str.len Start) (str.indexof Start_1 Start_12 StartInt_6) (str.to_int Start_2)))
   (StartBool Bool (true false (and StartBool_2 StartBool_1) (str.< Start_8 Start_1) (str.prefixof Start_15 Start_2) (str.suffixof Start_6 Start_1) (str.contains Start_15 Start_14) (= Start_10 Start_7) (= StartInt_6 StartInt_5)))
   (Start_4 String (y "a" "b" x "1" "" "0" (str.substr Start_8 StartInt_3 StartInt_3) (str.replace Start_14 Start_1 Start_4) (str.from_int StartInt_3)))
   (Start_5 String ("0" (str.at Start_13 StartInt_4) (str.replace Start_6 Start_6 Start_13) (ite StartBool_1 Start_13 Start_3)))
   (StartBool_4 Bool (true false (not StartBool_1) (str.< Start_10 Start_4) (str.suffixof Start_4 Start_12) (str.contains Start Start) (= Start Start_5) (= StartInt StartInt_5) (<= StartInt_2 StartInt_2)))
   (Start_3 String (x (str.substr Start_13 StartInt_1 StartInt_2) (str.replace Start_9 Start Start_9)))
   (Start_13 String (y "1"))
   (StartInt_1 Int (1 0 (str.to_int Start_2)))
   (Start_12 String ("b" (str.++ Start Start_5) (str.replace Start_12 Start Start_8)))
   (Start_2 String ("" "1" "0" (str.at Start_2 StartInt) (str.replace Start_1 Start_3 Start_4) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (Start_15 String ("1" (str.from_int StartInt_6) (ite StartBool_2 Start_3 Start_8)))
   (Start_11 String ("a" x y (ite StartBool_4 Start_3 Start_8)))
   (StartBool_1 Bool (false (str.<= Start_3 Start_5) (str.suffixof Start_3 Start) (str.contains Start Start_6) (= Start_7 Start_7) (<= StartInt StartInt_2)))
   (StartInt_2 Int (0 1 (str.to_int Start)))
   (StartInt_4 Int (1 (str.len Start_8) (str.indexof Start_3 Start_4 StartInt_5) (str.to_int Start_5)))
   (StartInt_3 Int (1 0 (str.indexof Start_11 Start_6 StartInt_1) (str.to_int Start_9)))
   (Start_7 String ("0" (str.at Start_8 StartInt) (str.replace Start_9 Start_2 Start)))
   (Start_1 String ("a" (str.++ Start_1 Start) (str.at Start_3 StartInt_4) (str.substr Start_9 StartInt_4 StartInt_1) (str.replace Start_2 Start_12 Start_8) (ite StartBool_4 Start_1 Start_14)))
   (Start_14 String ("1" "0" "a" (str.at Start_6 StartInt_2) (ite StartBool Start_3 Start_12)))
   (Start_9 String ("1" "0" (str.++ Start_9 Start_3) (str.at Start_8 StartInt_1) (str.substr Start_1 StartInt_2 StartInt)))
   (Start_10 String ("0" "a" x y "1" "" "b" (str.substr Start_5 StartInt_4 StartInt_4) (str.replace Start_2 Start_4 Start_1)))
   (StartInt_5 Int (1 0 (str.len Start_1)))
   (Start_8 String ("1" y x "b" (str.at Start_8 StartInt) (str.substr Start_7 StartInt StartInt_1) (str.replace Start_5 Start Start_2) (ite StartBool_2 Start Start_2)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.< Start_2 Start_5) (str.contains Start_6 Start)))
   (StartInt_6 Int (1 (str.len Start_9) (str.indexof Start_13 Start_10 StartInt_5)))
   (StartBool_3 Bool (true false (str.<= Start_2 Start_8)))
   (Start_6 String ("" (str.++ Start_9 Start_7) (str.at Start_4 StartInt_3) (str.from_int StartInt_1) (ite StartBool Start_2 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof y "1") "b" "")))

(check-synth)
