(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (StartInt_3 Int) (Start_4 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_2 String) (Start_1 String) (StartInt_2 Int) (Start_3 String))
  ((Start String ("a" "0" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (0 1 (str.len Start_3) (str.to_int Start_4)))
   (StartBool Bool (false true (and StartBool_1 StartBool) (str.prefixof Start Start) (= Start_1 Start_4) (= StartInt_1 StartInt_2)))
   (Start_5 String ("b" "0" (str.at Start_4 StartInt) (str.replace Start_3 Start_3 Start_4) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_3 Int (0 1 (str.to_int Start_3)))
   (Start_4 String ("a" x (str.++ Start_3 Start) (str.at Start_2 StartInt_2) (str.replace Start Start_1 Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.indexof Start_3 Start_1 StartInt_3)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.suffixof Start_2 Start)))
   (Start_2 String (y (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_2)))
   (Start_1 String (x "a" (str.substr Start StartInt_2 StartInt_1) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt)))
   (StartInt_2 Int (1 0 (str.to_int Start_3)))
   (Start_3 String ("1" (str.++ Start_3 Start_3) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_3 Start_2 Start_1) (ite StartBool Start Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ y (str.replace "1" y x))))

(check-synth)
