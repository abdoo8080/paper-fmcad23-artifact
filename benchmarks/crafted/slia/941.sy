(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartInt_6 Int) (StartInt_5 Int) (Start_1 String) (StartInt_7 Int) (Start_2 String) (Start_6 String) (Start_11 String) (Start_7 String) (StartBool_1 Bool) (StartInt_4 Int) (StartBool_2 Bool) (Start_13 String) (StartInt_1 Int) (StartBool_3 Bool) (Start_12 String) (StartInt_3 Int) (Start_4 String) (Start_14 String) (Start_3 String) (Start_9 String) (Start_8 String) (Start_10 String) (Start_5 String) (StartInt_2 Int))
  ((Start String (y "1" x "a" (str.at Start_1 StartInt_1) (str.replace Start_1 Start Start_2) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 0 (str.len Start_2) (str.to_int Start_13)))
   (StartBool Bool (false true (and StartBool_3 StartBool_3) (str.suffixof Start_10 Start_15) (str.contains Start_3 Start_4) (= StartInt_4 StartInt_7)))
   (Start_15 String ("" (str.++ Start_10 Start_15) (str.substr Start_13 StartInt_3 StartInt_5)))
   (StartInt_6 Int (1 0 (str.indexof Start_8 Start_3 StartInt_1)))
   (StartInt_5 Int (1 0 (str.len Start_9)))
   (Start_1 String (x "1" "" "0" "b" (str.from_int StartInt)))
   (StartInt_7 Int (1 (str.len Start_3) (str.to_int Start_12)))
   (Start_2 String ("0" (str.++ Start_9 Start_7) (str.from_int StartInt_1)))
   (Start_6 String ("0" (str.at Start_8 StartInt) (str.substr Start_8 StartInt StartInt_2) (str.replace Start_1 Start_7 Start_1)))
   (Start_11 String (y (str.substr Start_3 StartInt StartInt_3) (str.replace Start_5 Start_1 Start_11) (str.from_int StartInt_1) (ite StartBool_3 Start Start_2)))
   (Start_7 String ("b" "1" (str.++ Start_1 Start_6) (str.from_int StartInt_1) (ite StartBool_3 Start_9 Start_3)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_1 StartBool) (str.< Start_2 Start_2) (str.suffixof Start_1 Start) (str.contains Start_2 Start_2) (= Start Start_1) (<= StartInt_1 StartInt)))
   (StartInt_4 Int (0 (str.len Start_10) (str.to_int Start_9)))
   (StartBool_2 Bool (false true (str.< Start_3 Start) (str.<= Start_4 Start_1) (str.prefixof Start_1 Start_1) (str.contains Start Start_3)))
   (Start_13 String ("1" "" (str.substr Start_14 StartInt_2 StartInt_5)))
   (StartInt_1 Int (0 (str.len Start_12)))
   (StartBool_3 Bool (false (str.< Start Start_8) (str.<= Start_3 Start_3) (str.prefixof Start_9 Start_10) (= Start Start_7)))
   (Start_12 String (x y (str.substr Start_8 StartInt_4 StartInt_2) (str.replace Start Start Start_9) (ite StartBool_1 Start_2 Start_11)))
   (StartInt_3 Int (0 (str.indexof Start Start_9 StartInt)))
   (Start_4 String (y (str.++ Start_5 Start_2) (str.at Start_5 StartInt_1) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt) (ite StartBool_2 Start_5 Start_4)))
   (Start_14 String ("" (str.++ Start_7 Start_14) (str.replace Start_7 Start_10 Start_8) (str.from_int StartInt_6)))
   (Start_3 String ("0" "1" y (str.at Start_6 StartInt) (str.replace Start_2 Start_5 Start_7) (ite StartBool Start_8 Start_9)))
   (Start_9 String ("b" (str.++ Start Start_7) (str.replace Start_1 Start_5 Start_2) (ite StartBool Start_1 Start_4)))
   (Start_8 String ("1" "" "0" (str.++ Start_2 Start_5) (str.at Start_6 StartInt_1) (ite StartBool_1 Start_6 Start_4)))
   (Start_10 String ("0" (str.at Start_3 StartInt_2) (str.substr Start_4 StartInt_1 StartInt_3) (str.from_int StartInt_2)))
   (Start_5 String ("1" (str.at Start_1 StartInt_1) (str.replace Start_3 Start_3 Start_5) (ite StartBool_1 Start Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_8 Start_11 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof x (str.at (str.replace (str.replace x "" "1") y "1") 1) 0))))

(check-synth)
