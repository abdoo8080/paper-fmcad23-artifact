(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_7 Int) (Start_9 String) (StartInt_6 Int) (StartInt_5 Int) (Start_8 String) (StartInt_3 Int) (Start_5 String) (Start_4 String) (Start_1 String) (StartInt_8 Int) (Start_11 String) (Start_10 String) (Start_2 String) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_1 Int) (Start_12 String) (Start_7 String) (Start_6 String) (Start_3 String) (StartInt_4 Int))
  ((Start String ("" (str.at Start StartInt_1) (str.substr Start StartInt_1 StartInt_2) (str.from_int StartInt_3)))
   (StartInt Int (1 0 (str.len Start_1) (str.indexof Start_3 Start StartInt)))
   (StartBool Bool (false (not StartBool) (and StartBool_1 StartBool_1) (str.<= Start_3 Start_4) (str.prefixof Start Start) (<= StartInt_2 StartInt_2)))
   (StartBool_2 Bool (true false (not StartBool_1) (= Start_4 Start_1) (= StartInt_4 StartInt_1) (<= StartInt_8 StartInt_7)))
   (StartInt_7 Int (1 0 (str.len Start_9) (str.indexof Start_8 Start_8 StartInt_4)))
   (Start_9 String ("" (str.at Start_10 StartInt_4) (str.substr Start_6 StartInt_2 StartInt_7) (str.from_int StartInt_5)))
   (StartInt_6 Int (0 (str.len Start_9) (str.to_int Start_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_9 Start_3 StartInt_6)))
   (Start_8 String ("a" "b" "1" x "0" (str.++ Start Start_8) (str.at Start_3 StartInt_5) (str.replace Start_3 Start Start_6) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_7)))
   (StartInt_3 Int (1 (str.len Start_1) (str.indexof Start Start StartInt_3)))
   (Start_5 String ("b" (str.at Start_3 StartInt_1) (str.substr Start_9 StartInt_6 StartInt_5) (str.replace Start Start_3 Start_11) (ite StartBool Start_9 Start_9)))
   (Start_4 String ("" (str.++ Start Start_2) (str.at Start_3 StartInt_4) (str.from_int StartInt)))
   (Start_1 String ("" (str.++ Start Start_2) (str.substr Start StartInt_1 StartInt) (str.from_int StartInt_2)))
   (StartInt_8 Int (1 (str.len Start_6) (str.indexof Start_5 Start_12 StartInt_5) (str.to_int Start_3)))
   (Start_11 String ("0" (str.at Start_6 StartInt_2) (str.from_int StartInt_1) (ite StartBool_2 Start_1 Start_5)))
   (Start_10 String ("0" "" (str.++ Start_5 Start_3) (str.from_int StartInt)))
   (Start_2 String ("b" (str.++ Start_1 Start) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool) (str.<= Start Start_4) (str.suffixof Start_6 Start_3) (str.contains Start Start_3) (= Start_2 Start_2) (= StartInt_8 StartInt_7) (<= StartInt_5 StartInt_5)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_1 Start StartInt_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_2 Start_2 StartInt_1)))
   (Start_12 String ("0" "1" "a" x y (str.++ Start_12 Start_1) (ite StartBool Start_11 Start_3)))
   (Start_7 String ("a" (str.substr Start StartInt_3 StartInt) (str.replace Start_3 Start_7 Start_2) (ite StartBool_1 Start_8 Start_6)))
   (Start_6 String ("0" (str.++ Start_6 Start_5) (str.substr Start_1 StartInt_4 StartInt_3) (str.replace Start_6 Start_5 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_7 Start_7)))
   (Start_3 String ("a" (str.from_int StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.indexof Start Start_6 StartInt_1) (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.at y 1) "1" y)))

(check-synth)
