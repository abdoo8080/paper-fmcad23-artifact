(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartInt_3 Int) (StartInt_5 Int) (StartInt_1 Int) (StartBool_2 Bool) (Start_8 String) (StartInt_4 Int) (Start_6 String) (StartBool_1 Bool) (Start_9 String) (Start_4 String) (Start_1 String) (Start_7 String) (StartInt_7 Int) (StartInt_6 Int) (Start_10 String) (Start_5 String) (StartBool_4 Bool) (Start_3 String) (StartInt_2 Int) (StartBool_3 Bool) (Start_11 String) (Start_12 String) (StartInt_8 Int) (StartInt_9 Int) (Start_2 String) (Start_13 String))
  ((Start String ("b" "" (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1)))
   (StartInt Int (0))
   (StartBool Bool (true (not StartBool_1) (and StartBool_2 StartBool_5) (str.suffixof Start_3 Start_6) (str.contains Start_13 Start_9)))
   (StartBool_5 Bool (true false (not StartBool_2) (and StartBool_5 StartBool) (str.contains Start_12 Start_5)))
   (StartInt_3 Int (0 (str.len Start_1) (str.indexof Start_10 Start_4 StartInt_6)))
   (StartInt_5 Int (1 (str.indexof Start_5 Start_4 StartInt_1)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start Start StartInt) (str.to_int Start)))
   (StartBool_2 Bool (false (not StartBool) (str.contains Start_1 Start) (= StartInt_4 StartInt_3) (<= StartInt StartInt_5)))
   (Start_8 String ("a" "0" (str.++ Start_5 Start_7) (str.at Start_8 StartInt_3) (str.replace Start_2 Start_4 Start_4) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_9)))
   (StartInt_4 Int (1 (str.len Start_6)))
   (Start_6 String ("0" (str.at Start StartInt_3) (str.substr Start_5 StartInt_3 StartInt_4) (str.replace Start_4 Start_6 Start_5) (ite StartBool Start_7 Start_8)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (str.< Start_2 Start_3) (str.<= Start Start_4) (str.contains Start_1 Start_3) (<= StartInt StartInt_1)))
   (Start_9 String (x (str.replace Start_3 Start_6 Start_8) (ite StartBool_2 Start_6 Start_7)))
   (Start_4 String ("a" "1" (str.at Start_5 StartInt_2) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_6 Start_3 Start)))
   (Start_1 String (x "a" (str.replace Start_2 Start Start) (ite StartBool_1 Start Start_2)))
   (Start_7 String (y "" (str.at Start StartInt_1) (str.substr Start StartInt_3 StartInt_1) (str.replace Start_9 Start_5 Start_2)))
   (StartInt_7 Int (0 1 (str.indexof Start_12 Start_7 StartInt_1)))
   (StartInt_6 Int (0 1 (str.len Start_3) (str.to_int Start_10)))
   (Start_10 String ("" (str.++ Start_6 Start_9) (str.substr Start_5 StartInt_4 StartInt_3) (str.replace Start_8 Start Start_1)))
   (Start_5 String ("a" "0" y x "1" "" "b" (str.++ Start_6 Start_3) (ite StartBool_3 Start_10 Start_2)))
   (StartBool_4 Bool (false true (and StartBool_2 StartBool) (str.<= Start_3 Start_2) (str.prefixof Start_6 Start_9) (str.suffixof Start_1 Start_12) (<= StartInt_7 StartInt_6)))
   (Start_3 String ("" "b" "1" x "0" (str.at Start_5 StartInt_3) (str.substr Start_12 StartInt StartInt_9) (str.replace Start_8 Start_1 Start)))
   (StartInt_2 Int (0 (str.to_int Start_5)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_1) (str.prefixof Start_10 Start_11) (str.suffixof Start_9 Start_3) (= Start_8 Start_2) (= StartInt_6 StartInt)))
   (Start_11 String ("0" (str.at Start StartInt_6) (str.substr Start_8 StartInt_3 StartInt_1) (str.replace Start_4 Start_6 Start_4)))
   (Start_12 String (x (str.at Start_1 StartInt_8) (str.from_int StartInt_1)))
   (StartInt_8 Int (1 0 (str.indexof Start_11 Start_5 StartInt_3)))
   (StartInt_9 Int (1 (str.to_int Start_2)))
   (Start_2 String ("a" (str.substr Start_11 StartInt_1 StartInt_1) (str.from_int StartInt) (ite StartBool Start_5 Start_13)))
   (Start_13 String ("a" x (str.at Start StartInt) (str.substr Start_9 StartInt_5 StartInt_1) (str.replace Start_3 Start_8 Start_7) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y x "b") 0)))

(check-synth)
