(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (StartInt_5 Int) (StartBool_4 Bool) (Start_5 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_7 String) (StartInt_1 Int) (StartInt_4 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_3 String) (StartInt_3 Int) (Start_8 String) (Start_9 String) (StartInt_9 Int) (Start_2 String) (Start_11 String) (Start_12 String) (StartInt_6 Int) (Start_10 String) (StartInt_7 Int) (Start_4 String) (Start_1 String) (StartBool_5 Bool) (Start_6 String) (Start_13 String) (StartInt_8 Int) (Start_14 String))
  ((Start String (x "0" (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool Start_1 Start_2)))
   (StartInt Int (1 (str.to_int Start_1)))
   (StartBool Bool (false true (and StartBool_2 StartBool_1) (str.<= Start_10 Start_14) (str.prefixof Start_8 Start_4) (= StartInt_1 StartInt_10)))
   (StartInt_10 Int (1 (str.indexof Start_3 Start_3 StartInt_3) (str.to_int Start)))
   (StartInt_5 Int (0 1 (str.to_int Start_11)))
   (StartBool_4 Bool (true false (str.< Start_3 Start_3) (str.prefixof Start_8 Start_4)))
   (Start_5 String ("" y (str.at Start_1 StartInt_3) (str.substr Start_6 StartInt_3 StartInt_4) (ite StartBool_1 Start_6 Start_6)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool StartBool_5) (str.< Start_5 Start_3) (str.prefixof Start_8 Start_9) (str.suffixof Start_10 Start_5) (= Start_4 Start_3) (<= StartInt StartInt_5)))
   (StartInt_2 Int (0))
   (Start_7 String ("" (str.replace Start_5 Start_4 Start_1) (ite StartBool_4 Start Start_2)))
   (StartInt_1 Int (0 (str.len Start_4) (str.indexof Start_4 Start_4 StartInt) (str.to_int Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_6)))
   (StartBool_3 Bool (true false (not StartBool_2) (str.< Start_5 Start_3) (str.suffixof Start Start_3) (str.contains Start Start_5)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_1 StartBool_3) (str.< Start_4 Start) (str.prefixof Start_7 Start) (str.suffixof Start_1 Start_4) (= Start_4 Start_3) (= StartInt_3 StartInt_4)))
   (Start_3 String ("1" "a" (str.++ Start_2 Start_3) (str.replace Start_3 Start Start_2) (str.from_int StartInt_2) (ite StartBool Start_3 Start)))
   (StartInt_3 Int (0 (str.len Start_4)))
   (Start_8 String ("a" (str.substr Start_2 StartInt StartInt_1) (str.from_int StartInt_4)))
   (Start_9 String ("1" (str.at Start StartInt_6) (str.substr Start_8 StartInt_4 StartInt_5) (str.replace Start_7 Start_7 Start_8)))
   (StartInt_9 Int (1 (str.to_int Start_9)))
   (Start_2 String ("a" x (str.++ Start Start_3) (str.at Start_2 StartInt)))
   (Start_11 String ("1" x "a" "b" y "0" "" (str.substr Start_5 StartInt_6 StartInt_1) (ite StartBool_3 Start_7 Start_12)))
   (Start_12 String ("0" x (str.++ Start Start_5) (str.at Start_9 StartInt_3) (str.substr Start_12 StartInt_1 StartInt_6) (str.replace Start_10 Start_4 Start_12) (ite StartBool_4 Start_4 Start_5)))
   (StartInt_6 Int (0 1 (str.indexof Start_11 Start_4 StartInt_1) (str.to_int Start_1)))
   (Start_10 String (x (str.at Start_7 StartInt) (str.substr Start_7 StartInt_3 StartInt) (str.replace Start_9 Start_11 Start_7) (str.from_int StartInt_7)))
   (StartInt_7 Int (1 0 (str.indexof Start_10 Start_5 StartInt_2)))
   (Start_4 String ("" (str.++ Start_12 Start) (str.at Start_13 StartInt_4) (str.from_int StartInt_8)))
   (Start_1 String ("b" y "" "a" (str.++ Start_4 Start_6) (str.at Start_5 StartInt_8) (str.replace Start_14 Start_8 Start_7)))
   (StartBool_5 Bool (true (not StartBool_3) (and StartBool_4 StartBool_1) (str.< Start_12 Start_7) (= Start_5 Start_2) (<= StartInt_7 StartInt_7)))
   (Start_6 String (x (ite StartBool_3 Start_3 Start_8)))
   (Start_13 String ("0" (str.++ Start_14 Start) (str.at Start_8 StartInt_9) (str.substr Start_10 StartInt_1 StartInt_5) (str.from_int StartInt_1)))
   (StartInt_8 Int (0 1 (str.indexof Start_6 Start_5 StartInt_8)))
   (Start_14 String ("1" "" x (str.++ Start Start_1) (str.substr Start_6 StartInt_5 StartInt_3) (str.replace Start_9 Start_3 Start_9) (str.from_int StartInt_4) (ite StartBool_4 Start Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.at x (str.len y)))))

(check-synth)
