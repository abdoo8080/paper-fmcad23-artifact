(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_9 String) (Start_8 String) (Start_6 String) (StartBool_1 Bool) (Start_1 String) (StartInt_4 Int) (Start_4 String) (StartInt_6 Int) (StartInt_2 Int) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_3 Int) (Start_2 String) (Start_3 String) (StartInt_1 Int) (Start_10 String) (Start_5 String))
  ((Start String (x (str.at Start StartInt) (str.substr Start StartInt StartInt) (str.from_int StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 (str.len Start_3) (str.to_int Start_5)))
   (StartBool Bool (false true (not StartBool_2) (str.< Start_7 Start_10) (str.<= Start_6 Start_1) (str.contains Start_10 Start_10) (= StartInt_4 StartInt_5)))
   (Start_7 String (y x (str.++ Start_8 Start_5) (str.at Start StartInt)))
   (Start_9 String ("" (str.++ Start_2 Start) (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start_1 Start_7 Start_9) (str.from_int StartInt_6) (ite StartBool_1 Start_8 Start_3)))
   (Start_8 String (y (str.++ Start_9 Start_3) (ite StartBool_2 Start_6 Start_6)))
   (Start_6 String ("a" "b" "1" y "" x "0" (str.++ Start_5 Start_5) (str.at Start_3 StartInt_3) (str.replace Start_7 Start_4 Start_8) (ite StartBool Start_3 Start_8)))
   (StartBool_1 Bool (false (str.<= Start_5 Start_6) (str.suffixof Start_5 Start_3)))
   (Start_1 String ("a" x "b" "0" (str.at Start StartInt) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool_2 Start Start_1)))
   (StartInt_4 Int (0 1 (str.indexof Start_3 Start_1 StartInt_2) (str.to_int Start_4)))
   (Start_4 String ("a" x "0" (str.++ Start Start_3) (str.substr Start_4 StartInt_5 StartInt_3) (str.replace Start Start_2 Start_4)))
   (StartInt_6 Int (0 (str.len Start_3)))
   (StartInt_2 Int (1 0))
   (StartInt_5 Int (1 0 (str.len Start_4)))
   (StartBool_2 Bool (false (not StartBool) (str.<= Start_1 Start_2) (str.prefixof Start_3 Start_3) (= Start Start) (<= StartInt_3 StartInt_4)))
   (StartInt_3 Int (0 (str.len Start_1)))
   (Start_2 String ("a" (str.at Start_1 StartInt_2) (str.from_int StartInt_6) (ite StartBool Start_2 Start_4)))
   (Start_3 String ("b" (str.++ Start Start_1) (str.substr Start_4 StartInt_3 StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt_1 Int (0 (str.len Start_5)))
   (Start_10 String ("1" "b" "" "0" x (str.++ Start_3 Start_8) (str.at Start StartInt_2) (str.substr Start_7 StartInt_1 StartInt) (str.from_int StartInt_6) (ite StartBool_1 Start_3 Start_10)))
   (Start_5 String ("a" x (str.++ Start_5 Start_1) (str.at Start_2 StartInt_4) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "0" "")))

(check-synth)
