(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_11 String) (Start_1 String) (StartInt_7 Int) (StartBool_1 Bool) (Start_9 String) (Start_3 String) (Start_4 String) (Start_8 String) (StartInt_3 Int) (StartInt_1 Int) (StartInt_4 Int) (Start_5 String) (StartBool_2 Bool) (Start_6 String) (StartInt_5 Int) (StartInt_6 Int) (Start_7 String) (Start_2 String) (Start_10 String) (StartInt_2 Int))
  ((Start String ("0" (str.++ Start Start_1) (str.at Start_2 StartInt_1) (ite StartBool_1 Start Start_3)))
   (StartInt Int (0 1 (str.indexof Start_2 Start_3 StartInt_5)))
   (StartBool Bool (true (str.< Start_11 Start_3) (str.suffixof Start_9 Start_6) (= StartInt_8 StartInt_4)))
   (StartInt_8 Int (0 1 (str.len Start_5) (str.to_int Start_8)))
   (Start_11 String ("1" (str.at Start_11 StartInt_8) (str.substr Start_1 StartInt_5 StartInt_7) (str.replace Start_5 Start Start_5) (ite StartBool_1 Start_8 Start_1)))
   (Start_1 String ("1" "a" (str.++ Start_6 Start_2) (str.from_int StartInt_1)))
   (StartInt_7 Int (0 1 (str.len Start_7)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (str.suffixof Start_6 Start_3) (= Start_8 Start_3)))
   (Start_9 String (x y "0" (str.at Start_9 StartInt_5) (str.from_int StartInt)))
   (Start_3 String ("a" (str.++ Start_2 Start_1) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_3 Start_4 Start_1) (str.from_int StartInt_1)))
   (Start_4 String (x (str.substr Start StartInt_3 StartInt_1) (str.replace Start_5 Start_5 Start_2) (ite StartBool_2 Start_1 Start_6)))
   (Start_8 String ("a" (str.substr Start_4 StartInt_4 StartInt_5)))
   (StartInt_3 Int (0 (str.indexof Start_4 Start StartInt_6) (str.to_int Start_7)))
   (StartInt_1 Int (1 (str.indexof Start_7 Start_3 StartInt_5) (str.to_int Start_10)))
   (StartInt_4 Int (1))
   (Start_5 String ("0" (str.++ Start_8 Start) (str.at Start StartInt_6) (str.replace Start_8 Start_6 Start_7) (str.from_int StartInt_5) (ite StartBool_2 Start_3 Start_6)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_2) (str.< Start_7 Start_8) (str.<= Start Start_3) (str.suffixof Start_8 Start_3) (<= StartInt_3 StartInt_4)))
   (Start_6 String ("" (str.++ Start_1 Start_6) (str.substr Start_3 StartInt_1 StartInt_4)))
   (StartInt_5 Int (1 0 (str.to_int Start_7)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.to_int Start_5)))
   (Start_7 String ("0" x (str.substr Start_8 StartInt_3 StartInt_6) (str.replace Start_7 Start_1 Start) (ite StartBool_2 Start_8 Start_3)))
   (Start_2 String ("0" (str.substr Start_10 StartInt_7 StartInt_1) (str.replace Start_4 Start_10 Start_9) (ite StartBool_2 Start_1 Start_5)))
   (Start_10 String ("0" x (str.++ Start_1 Start_8) (str.substr Start_9 StartInt_4 StartInt_2) (str.replace Start_4 Start_1 Start)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_9 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "b" (str.++ x "a"))))

(check-synth)
