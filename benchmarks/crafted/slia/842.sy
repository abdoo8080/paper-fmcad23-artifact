(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartBool_1 Bool) (Start_13 String) (StartInt_6 Int) (Start_5 String) (Start_7 String) (Start_8 String) (Start_9 String) (StartInt_3 Int) (Start_10 String) (StartInt_1 Int) (Start_6 String) (StartInt_2 Int) (Start_12 String) (Start_4 String) (Start_3 String) (StartBool_4 Bool) (Start_1 String) (StartBool_2 Bool) (Start_2 String) (StartBool_3 Bool) (StartInt_4 Int) (StartInt_5 Int) (Start_11 String))
  ((Start String ("1"))
   (StartInt Int (1 0 (str.to_int Start)))
   (StartBool Bool (true (and StartBool StartBool_1) (str.< Start Start_1) (str.<= Start_1 Start) (str.prefixof Start_2 Start) (str.suffixof Start_1 Start_3) (str.contains Start Start_3) (= StartInt_1 StartInt)))
   (Start_14 String ("" (str.replace Start Start_11 Start_8) (ite StartBool_4 Start_14 Start_12)))
   (StartBool_1 Bool (false (str.< Start_7 Start_10) (str.<= Start_1 Start_13) (str.contains Start_12 Start_12) (= Start_14 Start_3)))
   (Start_13 String ("0" (str.++ Start_13 Start) (str.at Start_9 StartInt_5)))
   (StartInt_6 Int (1 0 (str.to_int Start_4)))
   (Start_5 String ("1" "0" x (str.++ Start_4 Start_6) (ite StartBool_1 Start_4 Start_7)))
   (Start_7 String ("0" "" (str.at Start_9 StartInt_5) (str.substr Start_5 StartInt_2 StartInt_6) (str.replace Start_2 Start_5 Start_10)))
   (Start_8 String (y "0" "1" (str.substr Start_10 StartInt_3 StartInt_2) (str.replace Start_9 Start_7 Start_9) (str.from_int StartInt)))
   (Start_9 String ("0" "1" "" (str.at Start_11 StartInt_3) (str.from_int StartInt_2)))
   (StartInt_3 Int (0 1))
   (Start_10 String ("0" y x (str.++ Start_3 Start_12) (str.replace Start_11 Start_9 Start_5)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_4 StartInt_2) (str.to_int Start_3)))
   (Start_6 String ("a" "1" (str.++ Start_5 Start) (str.at Start_7 StartInt_3) (str.substr Start StartInt StartInt) (str.from_int StartInt) (ite StartBool_2 Start_4 Start_1)))
   (StartInt_2 Int (1 0 (str.len Start_4)))
   (Start_12 String (y (str.++ Start_7 Start_2) (str.substr Start_2 StartInt_4 StartInt_5) (str.from_int StartInt_1)))
   (Start_4 String ("a" "0" (str.from_int StartInt) (ite StartBool_1 Start_3 Start_4)))
   (Start_3 String ("a" "0" (str.++ Start_2 Start_5) (str.at Start_4 StartInt_3) (ite StartBool_1 Start_6 Start)))
   (StartBool_4 Bool (true (and StartBool StartBool) (str.<= Start_12 Start_8) (str.prefixof Start_10 Start_13) (= Start_10 Start_10) (<= StartInt_1 StartInt_1)))
   (Start_1 String (y "" (str.++ Start_9 Start_6) (str.substr Start_13 StartInt StartInt_5) (ite StartBool_3 Start Start_12)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_3) (str.< Start_4 Start_1) (str.prefixof Start_6 Start_3) (str.suffixof Start_4 Start_5) (str.contains Start_4 Start_7) (= Start_5 Start_4) (<= StartInt_3 StartInt_3)))
   (Start_2 String (x (str.++ Start_8 Start_7) (str.at Start_4 StartInt_4) (str.substr Start_6 StartInt_2 StartInt_1) (str.replace Start_3 Start Start_9) (str.from_int StartInt_6) (ite StartBool_3 Start_5 Start_9)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_2 StartBool) (str.<= Start_4 Start_1) (str.prefixof Start_8 Start_6) (str.contains Start_7 Start_9) (= StartInt StartInt_4)))
   (StartInt_4 Int (1 0 (str.indexof Start_9 Start StartInt_5) (str.to_int Start_6)))
   (StartInt_5 Int (0 (str.indexof Start_10 Start_11 StartInt_1)))
   (Start_11 String (y "b" (str.++ Start_4 Start_3) (str.substr Start_4 StartInt_4 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at x (str.indexof "0" x 1))))))

(check-synth)
