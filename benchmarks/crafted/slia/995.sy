(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartBool_6 Bool) (StartBool_5 Bool) (Start_10 String) (StartInt_6 Int) (StartInt_7 Int) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_2 Int) (Start_4 String) (StartInt_3 Int) (StartInt_5 Int) (Start_9 String) (Start_7 String) (Start_1 String) (StartBool_1 Bool) (Start_3 String) (StartBool_2 Bool) (StartBool_4 Bool) (Start_6 String) (StartInt_4 Int) (Start_8 String) (Start_2 String) (Start_5 String))
  ((Start String ("b" (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.len Start_9) (str.to_int Start_2)))
   (StartBool Bool (false true (not StartBool_6) (str.<= Start_6 Start_11) (str.prefixof Start Start_8) (str.suffixof Start_10 Start_11) (= Start_4 Start_3) (= StartInt_4 StartInt_1)))
   (Start_11 String (y "b" (str.++ Start_2 Start_11) (str.at Start_11 StartInt_4) (str.replace Start Start_2 Start_7) (ite StartBool_4 Start_4 Start_1)))
   (StartBool_6 Bool (false true (str.< Start_5 Start_2) (str.<= Start_11 Start_1) (str.suffixof Start_8 Start_7) (str.contains Start_1 Start_6) (= Start_8 Start_2) (<= StartInt StartInt)))
   (StartBool_5 Bool (true (not StartBool_6) (and StartBool_3 StartBool_3) (str.< Start Start_1) (str.<= Start_3 Start_2) (str.suffixof Start Start_9)))
   (Start_10 String ("b" "" (str.substr Start_10 StartInt StartInt_7) (str.replace Start Start_9 Start_9) (str.from_int StartInt_2) (ite StartBool_5 Start_1 Start_9)))
   (StartInt_6 Int (0 1))
   (StartInt_7 Int (0 1 (str.len Start_1) (str.to_int Start)))
   (StartInt_1 Int (1 (str.indexof Start_11 Start_1 StartInt_2)))
   (StartBool_3 Bool (false (not StartBool_1) (str.< Start_9 Start_1) (str.prefixof Start_6 Start_7) (= StartInt_6 StartInt_7)))
   (StartInt_2 Int (1 0 (str.to_int Start_5)))
   (Start_4 String ("a" "1" "" (str.replace Start_5 Start_4 Start_9) (str.from_int StartInt_4) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_3 Int (1 0 (str.to_int Start_3)))
   (StartInt_5 Int (1 (str.len Start_9) (str.indexof Start_5 Start StartInt_5)))
   (Start_9 String ("b" "" (str.++ Start_8 Start_2) (str.at Start_4 StartInt) (str.replace Start_8 Start_8 Start_9) (str.from_int StartInt)))
   (Start_7 String (y "0" (str.++ Start_4 Start_8) (str.at Start_8 StartInt_4) (str.replace Start Start Start_5) (str.from_int StartInt_4)))
   (Start_1 String (y x (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_1 Start_2 Start) (str.from_int StartInt_1)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool StartBool_3) (str.<= Start_3 Start) (str.prefixof Start_2 Start_1) (str.contains Start_2 Start_2)))
   (Start_3 String (y (str.++ Start_2 Start_3) (str.at Start_4 StartInt) (str.replace Start_5 Start_6 Start_5) (ite StartBool_4 Start_3 Start_6)))
   (StartBool_2 Bool (true (not StartBool_3) (str.<= Start Start_2) (str.contains Start Start_10) (= Start_1 Start_1) (= StartInt_1 StartInt_4) (<= StartInt_1 StartInt_2)))
   (StartBool_4 Bool (false (str.<= Start_6 Start) (str.contains Start_6 Start_5) (= Start_2 Start_4) (= StartInt_1 StartInt_1)))
   (Start_6 String ("" "1" (str.++ Start_7 Start_2) (str.at Start_7 StartInt_2) (str.replace Start_4 Start Start_5)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_7 StartInt_3) (str.to_int Start_2)))
   (Start_8 String ("" (str.at Start_7 StartInt_3) (str.substr Start_4 StartInt_4 StartInt_5) (ite StartBool_4 Start_2 Start_5)))
   (Start_2 String ("a" (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_1 Start_1 Start) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start)))
   (Start_5 String ("a" (str.substr Start_8 StartInt_3 StartInt) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.replace "b" "" x) x)))

(check-synth)
