(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_3 String) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_1 Int) (Start_6 String) (StartInt_2 Int) (Start_1 String) (Start_4 String) (StartInt_5 Int) (Start_7 String) (Start_2 String) (Start_5 String) (StartInt_6 Int) (StartBool_2 Bool) (Start_8 String) (StartInt_4 Int))
  ((Start String ("0" y (str.++ Start Start) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartInt Int (1 (str.indexof Start_5 Start_3 StartInt) (str.to_int Start)))
   (StartBool Bool (false (not StartBool_2) (str.prefixof Start_7 Start_6)))
   (StartInt_7 Int (1 (str.len Start_8) (str.indexof Start_3 Start_5 StartInt)))
   (Start_3 String ("1"))
   (StartInt_3 Int (0 1))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.< Start_3 Start) (str.suffixof Start Start_3) (str.contains Start_5 Start_1) (= StartInt_4 StartInt_4) (<= StartInt_5 StartInt_3)))
   (StartInt_1 Int (0 (str.indexof Start_1 Start_2 StartInt_2)))
   (Start_6 String (y (str.substr Start_1 StartInt StartInt_1) (ite StartBool Start_2 Start_4)))
   (StartInt_2 Int (0 (str.len Start_2)))
   (Start_1 String (y x "b" "" "1" (str.++ Start_2 Start) (str.at Start StartInt_1) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start Start_1 Start_3) (ite StartBool_1 Start_4 Start)))
   (Start_4 String ("b" (str.++ Start_3 Start_3)))
   (StartInt_5 Int (0 1 (str.to_int Start)))
   (Start_7 String (x (str.++ Start_8 Start_4) (str.at Start_4 StartInt_7)))
   (Start_2 String (y "" (str.++ Start Start) (str.from_int StartInt_1)))
   (Start_5 String ("0" (str.++ Start_6 Start_4) (str.at Start_1 StartInt_1) (str.substr Start StartInt_1 StartInt_6) (str.from_int StartInt)))
   (StartInt_6 Int (0))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_2 StartBool) (str.prefixof Start Start_6) (str.suffixof Start_2 Start_6) (str.contains Start_2 Start) (<= StartInt_5 StartInt_3)))
   (Start_8 String ("" y "b" (str.at Start_4 StartInt_2) (str.substr Start_5 StartInt_1 StartInt_3) (str.from_int StartInt) (ite StartBool Start_2 Start_8)))
   (StartInt_4 Int (0 1 (str.len Start_2) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "a" (str.replace y "" "a"))))

(check-synth)
