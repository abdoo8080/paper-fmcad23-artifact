(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (Start_10 String) (Start_1 String) (Start_9 String) (Start_5 String) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_2 String) (Start_4 String) (StartInt_2 Int) (Start_6 String) (StartInt_7 Int) (StartInt_4 Int) (StartInt_5 Int) (StartInt_1 Int) (Start_8 String) (Start_7 String))
  ((Start String ("1" "" (str.at Start StartInt_1) (str.replace Start Start_1 Start_2) (ite StartBool_1 Start Start_2)))
   (StartInt Int (0 (str.len Start_10)))
   (StartBool Bool (true false (and StartBool_1 StartBool) (str.prefixof Start_2 Start_9) (str.contains Start_2 Start_10) (= StartInt_4 StartInt_4)))
   (Start_3 String (x y "0" "" "a" "1" "b" (str.at Start StartInt_2)))
   (Start_10 String ("0" "a" "" y "1" (str.++ Start Start_3) (str.from_int StartInt_5) (ite StartBool Start_7 Start_10)))
   (Start_1 String (y x "" (str.at Start_9 StartInt_6) (str.substr Start_5 StartInt_4 StartInt_5) (str.replace Start_6 Start_5 Start_5) (str.from_int StartInt_5)))
   (Start_9 String ("1" "a" "0" (str.++ Start_9 Start_10) (str.at Start_4 StartInt) (str.substr Start_2 StartInt StartInt_2) (str.replace Start_8 Start_3 Start_8) (ite StartBool_1 Start_5 Start_1)))
   (Start_5 String ("b" (str.++ Start_5 Start_3) (str.replace Start_3 Start_6 Start_6)))
   (StartInt_6 Int (1 0))
   (StartBool_1 Bool (false (str.prefixof Start Start_1) (str.suffixof Start Start_2) (= Start_1 Start_1) (= StartInt_1 StartInt_1) (<= StartInt_2 StartInt)))
   (StartInt_3 Int (1 0 (str.indexof Start_8 Start_8 StartInt_7)))
   (Start_2 String ("1" (str.++ Start_1 Start_3) (str.substr Start_1 StartInt StartInt_3) (str.replace Start_3 Start_1 Start_4) (str.from_int StartInt_4) (ite StartBool Start_3 Start_1)))
   (Start_4 String ("0" (str.++ Start_3 Start_2) (str.at Start StartInt_1) (str.substr Start_2 StartInt_5 StartInt_5) (str.replace Start_5 Start_3 Start_5)))
   (StartInt_2 Int (0))
   (Start_6 String (y (str.at Start_7 StartInt_6) (str.from_int StartInt)))
   (StartInt_7 Int (1 (str.len Start_9)))
   (StartInt_4 Int (0))
   (StartInt_5 Int (1 (str.len Start_8) (str.indexof Start_4 Start StartInt_5) (str.to_int Start_8)))
   (StartInt_1 Int (0))
   (Start_8 String (x (str.substr Start_4 StartInt_3 StartInt_1) (str.from_int StartInt_7) (ite StartBool Start_2 Start_6)))
   (Start_7 String (y (str.++ Start_5 Start) (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x (str.++ "a" x))))

(check-synth)
