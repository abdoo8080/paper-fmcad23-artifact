(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_11 String) (StartInt_1 Int) (StartInt_5 Int) (Start_5 String) (StartInt_3 Int) (StartInt_10 Int) (Start_8 String) (Start_4 String) (Start_6 String) (Start_7 String) (Start_10 String) (Start_3 String) (StartInt_6 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_12 String) (Start_9 String) (StartInt_7 Int) (StartBool_2 Bool) (StartInt_4 Int) (Start_13 String) (Start_2 String) (StartBool_5 Bool) (StartInt_2 Int) (Start_1 String) (StartBool_4 Bool) (Start_14 String) (Start_15 String) (StartInt_8 Int))
  ((Start String ("a" (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_2 Start_3 Start) (ite StartBool Start Start_1)))
   (StartInt Int (1 0))
   (StartBool Bool (true false (str.< Start_10 Start_15) (str.<= Start Start_1) (= Start_5 Start_9) (= StartInt StartInt_2) (<= StartInt_3 StartInt_6)))
   (StartInt_9 Int (0 1 (str.indexof Start_13 Start_9 StartInt_8)))
   (Start_11 String ("0" y (str.++ Start_1 Start_10) (str.at Start StartInt_1) (str.replace Start_3 Start_9 Start_6)))
   (StartInt_1 Int (0 1 (str.indexof Start_14 Start_14 StartInt_3)))
   (StartInt_5 Int (1))
   (Start_5 String ("1" x "" (str.substr Start_11 StartInt_6 StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_3 Int (0 (str.len Start_1)))
   (StartInt_10 Int (0 (str.len Start_11) (str.indexof Start_6 Start_2 StartInt_7)))
   (Start_8 String (y (str.++ Start Start_2) (str.at Start_9 StartInt) (str.replace Start_4 Start_4 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_10)))
   (Start_4 String ("a" (str.++ Start_5 Start_2) (str.at Start_1 StartInt_2) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_6 Start_1 Start_7) (ite StartBool_1 Start Start_7)))
   (Start_6 String ("1" (str.++ Start Start_5) (str.replace Start_1 Start_11 Start_5) (str.from_int StartInt_3) (ite StartBool Start_4 Start_9)))
   (Start_7 String (y (str.++ Start_6 Start_8) (str.replace Start_8 Start_7 Start_6)))
   (Start_10 String ("0" x "1" "" "a" "b" (str.at Start_3 StartInt_4) (str.substr Start_8 StartInt_1 StartInt_2)))
   (Start_3 String ("1" "" x (str.replace Start Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_1)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.indexof Start_3 Start StartInt_5)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_1) (str.<= Start_2 Start_9) (str.prefixof Start_11 Start) (str.suffixof Start_12 Start_1) (= Start_13 Start_8)))
   (StartBool_3 Bool (false true (str.prefixof Start_9 Start_9) (str.suffixof Start Start_1) (str.contains Start_5 Start_6) (= Start_8 Start_12) (<= StartInt_3 StartInt)))
   (Start_12 String ("b" (str.at Start_9 StartInt_3) (str.substr Start_6 StartInt_1 StartInt_7) (ite StartBool_3 Start_2 Start)))
   (Start_9 String ("0" (str.++ Start_2 Start_2) (str.at Start_4 StartInt_5) (str.substr Start_10 StartInt_2 StartInt_1) (str.replace Start_8 Start_3 Start_3) (str.from_int StartInt_3)))
   (StartInt_7 Int (0 1 (str.len Start_11) (str.indexof Start Start_9 StartInt_3) (str.to_int Start_7)))
   (StartBool_2 Bool (true (not StartBool_2) (str.<= Start_5 Start_6) (str.contains Start_11 Start_2) (= Start_9 Start_10)))
   (StartInt_4 Int (0 1))
   (Start_13 String ("b" (str.++ Start_5 Start) (str.at Start_4 StartInt_5) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start_12 Start_12 Start_11) (str.from_int StartInt_3)))
   (Start_2 String (y (str.replace Start_9 Start_1 Start_9) (str.from_int StartInt_3)))
   (StartBool_5 Bool (true (not StartBool_5) (str.< Start_15 Start) (str.prefixof Start_3 Start_13) (str.suffixof Start_1 Start_14) (str.contains Start_14 Start_6) (= Start_7 Start_14) (= StartInt_2 StartInt_7) (<= StartInt_9 StartInt_10)))
   (StartInt_2 Int (1 (str.to_int Start_9)))
   (Start_1 String ("1" "b" (str.at Start_1 StartInt) (str.substr Start_13 StartInt StartInt_4) (ite StartBool_4 Start_10 Start_8)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool_1 StartBool_5) (str.<= Start_3 Start_15) (str.prefixof Start_6 Start_3) (str.suffixof Start_13 Start_6) (str.contains Start_11 Start) (= Start_5 Start_5) (= StartInt_5 StartInt)))
   (Start_14 String ("b" (str.++ Start_3 Start_12) (str.replace Start_14 Start_7 Start_13)))
   (Start_15 String ("a" "" "1" "b" y (str.at Start_6 StartInt_3) (str.substr Start_11 StartInt_8 StartInt_1) (str.replace Start_3 Start Start_5)))
   (StartInt_8 Int (1 (str.len Start_14) (str.indexof Start_11 Start_3 StartInt_5) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "b" "0") y "a")))

(check-synth)
