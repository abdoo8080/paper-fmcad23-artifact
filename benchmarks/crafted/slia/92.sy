(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_1 String) (StartInt_5 Int) (Start_9 String) (Start_3 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_10 String) (Start_4 String) (Start_6 String) (Start_8 String) (Start_7 String) (StartInt_3 Int) (Start_5 String) (Start_2 String) (StartInt_1 Int) (StartInt_4 Int))
  ((Start String ("b" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt StartInt) (ite StartBool Start_3 Start)))
   (StartInt Int (1 0 (str.len Start) (str.indexof Start_4 Start_3 StartInt)))
   (StartBool Bool (true (not StartBool_2) (str.<= Start_2 Start_8) (str.prefixof Start Start_1) (<= StartInt StartInt_5)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.< Start_5 Start_1) (= Start_9 Start) (= StartInt_5 StartInt_3)))
   (Start_1 String ("" (str.at Start_3 StartInt_4) (str.replace Start_2 Start_5 Start_5)))
   (StartInt_5 Int (1))
   (Start_9 String ("0" "b" x (str.replace Start_7 Start_9 Start_4)))
   (Start_3 String ("" "1" (str.substr Start_4 StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true (not StartBool_1) (str.< Start_8 Start_8) (str.suffixof Start_6 Start_7) (str.contains Start_5 Start)))
   (StartInt_2 Int (0 1))
   (Start_10 String ("0" (str.++ Start_2 Start_3) (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_1)))
   (Start_4 String ("0" (str.at Start_5 StartInt_3) (str.substr Start_5 StartInt_2 StartInt) (str.replace Start Start Start_6)))
   (Start_6 String (y (str.++ Start_2 Start_7) (str.at Start_6 StartInt_3) (str.substr Start_6 StartInt_3 StartInt_3) (str.from_int StartInt) (ite StartBool Start_8 Start_3)))
   (Start_8 String ("1" y x (str.++ Start_5 Start_9) (str.replace Start_8 Start_8 Start_9) (str.from_int StartInt_1) (ite StartBool Start_6 Start_8)))
   (Start_7 String ("1" "0" (str.++ Start_2 Start_7) (str.substr Start_5 StartInt_2 StartInt) (str.replace Start_3 Start_2 Start) (str.from_int StartInt_2)))
   (StartInt_3 Int (0 1 (str.indexof Start_9 Start_3 StartInt_2)))
   (Start_5 String (y (str.++ Start_3 Start_5) (str.at Start_4 StartInt) (str.from_int StartInt_1)))
   (Start_2 String ("0" "" y (str.++ Start_4 Start_1) (str.at Start_8 StartInt_2) (str.substr Start_6 StartInt_1 StartInt) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start_5 Start_4 StartInt_4) (str.to_int Start_8)))
   (StartInt_4 Int (0 (str.indexof Start_2 Start_2 StartInt_2) (str.to_int Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" y "0")))

(check-synth)
