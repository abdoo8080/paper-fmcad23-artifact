(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (StartInt_5 Int) (Start_16 String) (Start_14 String) (Start_13 String) (Start_11 String) (StartInt_2 Int) (Start_12 String) (StartBool_1 Bool) (Start_15 String) (StartInt_4 Int) (Start_10 String) (Start_9 String) (StartInt_6 Int) (Start_3 String) (Start_17 String) (StartBool_2 Bool) (Start_5 String) (Start_4 String) (Start_7 String) (Start_8 String) (Start_6 String) (StartInt_7 Int) (StartInt_3 Int) (Start_2 String))
  ((Start String (y x "0" (str.++ Start Start_1) (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start_11) (str.to_int Start_9)))
   (StartBool Bool (true false (and StartBool_1 StartBool_2) (str.prefixof Start_17 Start_9) (= Start_8 Start_4)))
   (Start_1 String ("b" (str.++ Start_11 Start_15) (str.replace Start_8 Start_16 Start_11)))
   (StartInt_1 Int (1 0 (str.indexof Start_16 Start_2 StartInt_5) (str.to_int Start_14)))
   (StartInt_5 Int (1 (str.len Start_1) (str.indexof Start Start_14 StartInt_4)))
   (Start_16 String ("a" "0" "b" (str.at Start_10 StartInt_4) (str.substr Start_6 StartInt_1 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_17 Start_3)))
   (Start_14 String (y "" (str.++ Start_6 Start_4) (str.at Start_12 StartInt_4) (str.replace Start_3 Start_10 Start_7) (str.from_int StartInt_6) (ite StartBool_2 Start_5 Start_8)))
   (Start_13 String ("" x "1" "0" (str.at Start_7 StartInt_6) (str.from_int StartInt_5) (ite StartBool_1 Start_3 Start_10)))
   (Start_11 String (y (str.substr Start_5 StartInt_2 StartInt) (str.replace Start_4 Start_4 Start_9)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.to_int Start_2)))
   (Start_12 String (x (str.++ Start_14 Start_14) (str.at Start_9 StartInt_7) (str.replace Start_10 Start_4 Start_9) (str.from_int StartInt_1)))
   (StartBool_1 Bool (false (str.suffixof Start_3 Start_2) (= StartInt_3 StartInt_2) (<= StartInt StartInt_4)))
   (Start_15 String ("a" (str.substr Start_5 StartInt_1 StartInt_1)))
   (StartInt_4 Int (1 0 (str.len Start)))
   (Start_10 String (x (str.at Start_10 StartInt_3) (str.replace Start_11 Start_3 Start_12) (ite StartBool_1 Start_13 Start_4)))
   (Start_9 String ("0" y "" "a" (str.at Start_3 StartInt_3) (ite StartBool Start_4 Start_5)))
   (StartInt_6 Int (0 1))
   (Start_3 String ("a" "" "1" y x "b" "0" (str.++ Start_4 Start_3) (str.at Start_2 StartInt_1) (ite StartBool_1 Start_5 Start_5)))
   (Start_17 String (y "b" x (str.substr Start_17 StartInt_5 StartInt_1) (ite StartBool_2 Start_15 Start_1)))
   (StartBool_2 Bool (false (str.<= Start_14 Start_3) (str.contains Start_15 Start_2) (= Start_7 Start_13) (= StartInt_1 StartInt_3)))
   (Start_5 String (x (str.replace Start_4 Start_6 Start) (str.from_int StartInt) (ite StartBool Start Start_7)))
   (Start_4 String ("b" "1" (str.substr Start StartInt StartInt_2)))
   (Start_7 String ("0" "a" (str.at Start_6 StartInt_2) (str.replace Start_5 Start_6 Start_8) (ite StartBool_1 Start_5 Start_8)))
   (Start_8 String ("1"))
   (Start_6 String ("1" x "" (str.++ Start_8 Start_2) (str.at Start_9 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_9)))
   (StartInt_7 Int (1 (str.indexof Start_14 Start_11 StartInt_6)))
   (StartInt_3 Int (0 1 (str.len Start_4) (str.to_int Start_4)))
   (Start_2 String ("1" (str.++ Start_5 Start_7) (str.at Start_7 StartInt_3) (str.substr Start_6 StartInt_5 StartInt_5) (str.replace Start_10 Start_11 Start_11) (str.from_int StartInt_2) (ite StartBool Start_10 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.at y 1)))))

(check-synth)
