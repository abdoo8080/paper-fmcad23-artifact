(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_6 String) (Start_1 String) (Start_7 String) (Start_11 String) (StartInt_5 Int) (StartBool_3 Bool) (Start_12 String) (StartInt_8 Int) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_4 String) (StartInt_7 Int) (Start_10 String) (StartInt_1 Int) (StartInt_4 Int) (Start_5 String) (Start_9 String) (StartBool_2 Bool) (Start_3 String) (Start_8 String) (Start_2 String) (StartInt_9 Int) (StartInt_2 Int) (Start_13 String) (StartInt_10 Int))
  ((Start String (y (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_3 Start_3 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_4)))
   (StartInt Int (0 (str.len Start_9) (str.indexof Start_2 Start_4 StartInt_5) (str.to_int Start_11)))
   (StartBool Bool (true false (not StartBool_1) (str.< Start_8 Start_2) (str.<= Start_3 Start) (str.prefixof Start_8 Start_7) (str.suffixof Start_2 Start) (= Start_2 Start_12) (= StartInt_4 StartInt_9) (<= StartInt_3 StartInt_4)))
   (StartBool_4 Bool (true (not StartBool_4) (str.< Start_4 Start_12) (str.prefixof Start Start_13) (= Start_8 Start_9)))
   (Start_6 String ("b" (str.++ Start_5 Start_4) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_4 Start Start_2) (str.from_int StartInt_2) (ite StartBool_3 Start_4 Start_5)))
   (Start_1 String ("" (str.at Start_9 StartInt_8) (str.substr Start_7 StartInt_8 StartInt_3) (str.from_int StartInt_9) (ite StartBool_1 Start_3 Start_11)))
   (Start_7 String ("0" (str.++ Start_2 Start_8) (str.substr Start_2 StartInt_7 StartInt_4) (str.replace Start_4 Start_9 Start_1) (str.from_int StartInt_8) (ite StartBool_2 Start_6 Start_5)))
   (Start_11 String ("a" (str.++ Start_9 Start_7) (str.at Start_9 StartInt_3) (str.from_int StartInt_4) (ite StartBool_2 Start_7 Start_5)))
   (StartInt_5 Int (1 0 (str.indexof Start_5 Start_5 StartInt_6) (str.to_int Start_6)))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool StartBool_2) (= Start Start_2) (= StartInt_4 StartInt_5)))
   (Start_12 String ("a" "b" (str.++ Start_10 Start_3) (str.at Start_9 StartInt_3) (str.substr Start_1 StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool_4 Start_13 Start_5)))
   (StartInt_8 Int (0 1 (str.indexof Start_3 Start_6 StartInt_2) (str.to_int Start_6)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.indexof Start_4 Start_7 StartInt_2) (str.to_int Start_8)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool StartBool_2) (str.<= Start_3 Start_4) (str.prefixof Start_5 Start_4) (str.suffixof Start_1 Start_5) (= Start_1 Start_6) (<= StartInt_2 StartInt_3)))
   (StartInt_3 Int (0 1 (str.len Start_1)))
   (Start_4 String ("1" "" x (str.at Start_2 StartInt) (str.replace Start Start_3 Start_1)))
   (StartInt_7 Int (1 0 (str.to_int Start_1)))
   (Start_10 String (x (str.++ Start_4 Start_8) (str.at Start_1 StartInt_3) (str.substr Start_10 StartInt_5 StartInt_4) (str.replace Start_8 Start_3 Start) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 (str.indexof Start_4 Start_1 StartInt_4) (str.to_int Start_2)))
   (StartInt_4 Int (0))
   (Start_5 String (y (str.++ Start Start_1) (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start Start_8 Start_10)))
   (Start_9 String (x "" "0" (str.at Start_6 StartInt_6) (ite StartBool_3 Start_4 Start_10)))
   (StartBool_2 Bool (true (not StartBool_2) (str.< Start_3 Start_2) (str.<= Start_5 Start_7) (str.prefixof Start_10 Start_2) (str.suffixof Start_11 Start_5) (str.contains Start_11 Start_8) (= Start_8 Start_3) (<= StartInt_8 StartInt_3)))
   (Start_3 String ("b" (str.replace Start Start_8 Start) (str.from_int StartInt_1)))
   (Start_8 String (x "a" "1" y "" (str.replace Start_3 Start_7 Start_1)))
   (Start_2 String ("1" y (str.at Start_2 StartInt_1) (str.from_int StartInt_8) (ite StartBool_1 Start_10 Start_3)))
   (StartInt_9 Int (1 0 (str.len Start_2)))
   (StartInt_2 Int (0 1 (str.len Start) (str.indexof Start_4 Start_3 StartInt)))
   (Start_13 String ("b" "" (str.++ Start Start_13) (str.substr Start_7 StartInt_1 StartInt_10) (ite StartBool_4 Start_7 Start_2)))
   (StartInt_10 Int (1 (str.len Start_13) (str.indexof Start_6 Start StartInt_10) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "a" (str.indexof x "b" 0))))

(check-synth)
