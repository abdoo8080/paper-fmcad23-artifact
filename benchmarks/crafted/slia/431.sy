(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_1 String) (StartInt_5 Int) (Start_3 String) (StartBool_2 Bool) (Start_6 String) (Start_2 String) (Start_5 String) (StartInt_4 Int) (StartInt_3 Int) (StartInt_2 Int) (Start_4 String) (Start_7 String) (StartBool_1 Bool) (StartInt_1 Int))
  ((Start String ("1" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_1 Start_3 Start_2)))
   (StartInt Int (0 1 (str.indexof Start_7 Start_1 StartInt_4)))
   (StartBool Bool (true false (and StartBool_2 StartBool_1) (str.prefixof Start_1 Start_2) (str.suffixof Start_3 Start_4) (= Start_7 Start_8)))
   (Start_8 String ("0" (str.at Start_1 StartInt_3) (str.replace Start Start_6 Start_7)))
   (Start_1 String ("1" y "b" "" (str.replace Start_7 Start_4 Start_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_1 Start_3 StartInt_3) (str.to_int Start_7)))
   (Start_3 String ("1" (str.replace Start Start Start_2) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartBool_2 Bool (true false (str.suffixof Start Start_1) (str.contains Start_6 Start) (= StartInt_3 StartInt_1)))
   (Start_6 String ("b" (str.++ Start_1 Start) (str.at Start_4 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_4)))
   (Start_2 String ("b" (str.at Start StartInt_2) (str.substr Start_4 StartInt StartInt_5)))
   (Start_5 String ("a" (str.at Start_5 StartInt_2) (str.replace Start_5 Start_4 Start) (str.from_int StartInt_1) (ite StartBool_2 Start_6 Start_5)))
   (StartInt_4 Int (0 (str.len Start) (str.indexof Start_5 Start_4 StartInt_2) (str.to_int Start_1)))
   (StartInt_3 Int (0))
   (StartInt_2 Int (0 1 (str.len Start)))
   (Start_4 String ("1" y (str.++ Start_3 Start_7) (str.substr Start_6 StartInt_2 StartInt_2) (str.from_int StartInt)))
   (Start_7 String ("b" (str.at Start_7 StartInt_4) (ite StartBool Start_6 Start_6)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool StartBool) (str.suffixof Start Start) (str.contains Start_4 Start_5)))
   (StartInt_1 Int (0 (str.to_int Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "a" y) "1" "a")))

(check-synth)
