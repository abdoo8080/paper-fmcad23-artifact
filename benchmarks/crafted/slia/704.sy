(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (StartBool_5 Bool) (StartInt_7 Int) (Start_12 String) (StartInt_5 Int) (Start_13 String) (Start_9 String) (Start_8 String) (StartBool_3 Bool) (Start_10 String) (StartInt_4 Int) (StartInt_6 Int) (Start_2 String) (Start_3 String) (StartInt_1 Int) (Start_7 String) (StartBool_2 Bool) (Start_5 String) (StartBool_1 Bool) (Start_1 String) (StartInt_2 Int) (Start_6 String) (StartBool_4 Bool) (Start_4 String) (Start_11 String) (StartInt_3 Int))
  ((Start String (y "b" "1" (str.++ Start_1 Start) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0 1 (str.indexof Start_2 Start_5 StartInt_2) (str.to_int Start_1)))
   (StartBool Bool (true false (and StartBool_2 StartBool_3) (str.< Start Start_1) (str.prefixof Start_5 Start_3) (str.contains Start_1 Start) (= Start_4 Start_5) (<= StartInt StartInt_4)))
   (StartBool_6 Bool (true false (not StartBool) (and StartBool StartBool_6) (str.prefixof Start_13 Start_11) (str.suffixof Start_11 Start_9) (str.contains Start_2 Start_12) (<= StartInt_3 StartInt)))
   (StartBool_5 Bool (true (and StartBool_1 StartBool_6) (str.<= Start_13 Start_4) (str.prefixof Start_3 Start_13) (str.suffixof Start_8 Start_4) (= StartInt_3 StartInt_6)))
   (StartInt_7 Int (1 0 (str.indexof Start_7 Start_8 StartInt_6) (str.to_int Start_9)))
   (Start_12 String ("1" "b" y "0" (str.++ Start_2 Start_7) (str.substr Start_11 StartInt StartInt_7) (str.replace Start_12 Start_1 Start_5)))
   (StartInt_5 Int (0 (str.indexof Start_4 Start_5 StartInt_5) (str.to_int Start_10)))
   (Start_13 String (y (str.++ Start Start_8) (str.at Start_5 StartInt) (str.substr Start_8 StartInt_2 StartInt_4)))
   (Start_9 String (x "b" (str.++ Start_5 Start) (str.at Start_8 StartInt_5) (str.substr Start_5 StartInt_4 StartInt_4) (str.from_int StartInt)))
   (Start_8 String ("a" "b" (str.replace Start_6 Start_6 Start_1) (str.from_int StartInt_2) (ite StartBool_4 Start_7 Start_9)))
   (StartBool_3 Bool (true false (not StartBool) (str.<= Start_3 Start_4) (= Start_2 Start_3) (= StartInt_1 StartInt_3)))
   (Start_10 String ("a" "0" (str.at Start_6 StartInt_6) (str.replace Start_1 Start_6 Start_10) (str.from_int StartInt_5)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.indexof Start_4 Start_1 StartInt_3) (str.to_int Start_1)))
   (StartInt_6 Int (0 1 (str.indexof Start_6 Start_9 StartInt_1) (str.to_int Start_7)))
   (Start_2 String ("" "a" (str.++ Start Start_3) (str.at Start_3 StartInt) (str.substr Start StartInt StartInt) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_3)))
   (Start_3 String (y (str.++ Start Start_3) (str.substr Start_3 StartInt_1 StartInt_1) (ite StartBool Start_3 Start_1)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start_2 Start StartInt_1)))
   (Start_7 String ("" (str.at Start_5 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_7) (str.replace Start_9 Start_3 Start_1) (str.from_int StartInt_2) (ite StartBool Start_6 Start_9)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_1) (str.< Start_1 Start_6) (str.<= Start_3 Start_7) (str.prefixof Start_4 Start_3) (str.suffixof Start Start_8) (str.contains Start_7 Start_5) (= StartInt StartInt_3) (<= StartInt_3 StartInt_4)))
   (Start_5 String ("a" "" y (str.++ Start_3 Start_2) (str.replace Start_3 Start_5 Start) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false (str.suffixof Start_2 Start) (str.contains Start_3 Start_2) (= StartInt_1 StartInt_1)))
   (Start_1 String ("" (str.++ Start_3 Start_1) (str.at Start_4 StartInt_2) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start Start_4) (str.from_int StartInt_1) (ite StartBool Start_2 Start_2)))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_4 StartInt_2)))
   (Start_6 String (y "" (str.at Start_10 StartInt_6) (str.substr Start_2 StartInt_6 StartInt_6) (str.from_int StartInt_5) (ite StartBool_2 Start_10 Start_4)))
   (StartBool_4 Bool (true (not StartBool_5) (str.<= Start_9 Start) (str.suffixof Start_7 Start_11) (= StartInt StartInt_1) (<= StartInt_1 StartInt_2)))
   (Start_4 String (x (str.at Start_4 StartInt) (str.substr Start_2 StartInt_1 StartInt_2)))
   (Start_11 String ("a" (str.++ Start_4 Start_8) (str.substr Start_7 StartInt_4 StartInt_4) (str.replace Start_6 Start_12 Start) (str.from_int StartInt_1)))
   (StartInt_3 Int (1 0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.at x 0) "a")))

(check-synth)
