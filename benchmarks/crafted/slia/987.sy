(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_8 Int) (Start_11 String) (StartBool_2 Bool) (StartBool_4 Bool) (StartInt_2 Int) (Start_10 String) (Start_3 String) (StartInt_5 Int) (Start_9 String) (Start_7 String) (Start_8 String) (Start_12 String) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_7 Int) (Start_1 String) (StartInt_4 Int) (Start_6 String) (Start_5 String) (Start_4 String) (Start_2 String) (StartInt_6 Int))
  ((Start String (y "0" (str.++ Start_1 Start)))
   (StartInt Int (1 (str.len Start_7) (str.to_int Start)))
   (StartBool Bool (false (str.<= Start_5 Start) (str.prefixof Start_6 Start_10) (str.contains Start_12 Start_10) (= Start_4 Start_2) (<= StartInt_5 StartInt_6)))
   (StartInt_1 Int (1 0 (str.len Start_1)))
   (StartBool_3 Bool (false true (and StartBool StartBool_1) (str.< Start_10 Start_10) (str.suffixof Start_8 Start_6) (<= StartInt_5 StartInt_5)))
   (StartInt_8 Int (0 (str.to_int Start_7)))
   (Start_11 String (x (str.at Start StartInt_3) (str.substr Start StartInt_4 StartInt) (str.from_int StartInt_8)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_4) (str.<= Start Start_2) (str.prefixof Start_10 Start_3) (= StartInt_3 StartInt_1)))
   (StartBool_4 Bool (true (not StartBool_2) (and StartBool_4 StartBool_2) (str.prefixof Start_6 Start_11) (str.suffixof Start_5 Start_9) (str.contains Start_4 Start_5) (= Start Start_3)))
   (StartInt_2 Int (0 (str.to_int Start_3)))
   (Start_10 String ("1" (str.++ Start_2 Start_8) (str.substr Start_1 StartInt_2 StartInt_6) (str.from_int StartInt_2)))
   (Start_3 String ("" (str.++ Start_3 Start_2) (str.at Start_2 StartInt_2) (str.replace Start_4 Start_5 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_7)))
   (StartInt_5 Int (0))
   (Start_9 String (x (str.++ Start_1 Start_7) (str.replace Start_3 Start_9 Start_7)))
   (Start_7 String ("b" y (str.substr Start_4 StartInt_1 StartInt_3)))
   (Start_8 String ("0" "b" (str.at Start_2 StartInt_5) (str.substr Start_4 StartInt_7 StartInt) (ite StartBool_1 Start Start_1)))
   (Start_12 String ("b" "1" "0" (str.at Start_1 StartInt_4)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_6 Start_8) (str.contains Start_6 Start_1) (<= StartInt StartInt_2)))
   (StartInt_3 Int (1 (str.len Start_2) (str.indexof Start_2 Start_1 StartInt_4) (str.to_int Start)))
   (StartInt_7 Int (1 (str.len Start_10) (str.indexof Start_10 Start_1 StartInt_5) (str.to_int Start_7)))
   (Start_1 String (y (str.at Start StartInt_1) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_4 Int (1 0 (str.len Start_7) (str.to_int Start_2)))
   (Start_6 String ("0" (str.substr Start_3 StartInt_5 StartInt_2) (str.replace Start_2 Start_6 Start_6) (ite StartBool_1 Start_7 Start_6)))
   (Start_5 String ("a" "1" "0" "" "b" (str.at Start_8 StartInt_3) (str.from_int StartInt_6) (ite StartBool Start_9 Start_8)))
   (Start_4 String ("b" "a" "1" y "" x "0" (str.at Start_3 StartInt_3) (ite StartBool Start_8 Start_8)))
   (Start_2 String ("a" "1" (str.++ Start_2 Start_3)))
   (StartInt_6 Int (0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "0" y x) (str.++ y "b") x)))

(check-synth)
