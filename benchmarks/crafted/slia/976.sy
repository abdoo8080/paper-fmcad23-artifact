(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_7 Int) (Start_2 String) (StartInt_4 Int) (Start_11 String) (Start_10 String) (Start_9 String) (Start_14 String) (StartBool_2 Bool) (Start_1 String) (StartInt_1 Int) (Start_6 String) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_6 Int) (StartInt_3 Int) (Start_3 String) (Start_5 String) (Start_8 String) (StartInt_5 Int) (Start_13 String) (Start_4 String) (Start_12 String) (Start_7 String))
  ((Start String (y x (str.substr Start StartInt StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (0 (str.len Start_8) (str.to_int Start_11)))
   (StartBool Bool (false (and StartBool_2 StartBool_1) (str.< Start_1 Start_4) (str.<= Start_1 Start_9) (str.contains Start_12 Start_13) (= StartInt_2 StartInt_1)))
   (StartInt_8 Int (1 0 (str.to_int Start_10)))
   (StartInt_7 Int (0 (str.to_int Start_7)))
   (Start_2 String ("" (str.at Start StartInt_6) (str.replace Start_10 Start_3 Start_4) (str.from_int StartInt_5) (ite StartBool Start_8 Start_7)))
   (StartInt_4 Int (1 0))
   (Start_11 String ("a" "0" "" (str.at Start_1 StartInt_7) (str.substr Start_7 StartInt StartInt_3) (ite StartBool_2 Start_3 Start_9)))
   (Start_10 String ("1" "a" (str.++ Start_2 Start_3) (str.at Start_7 StartInt_6) (str.substr Start_10 StartInt StartInt_5) (str.replace Start_7 Start_1 Start_3) (ite StartBool Start_1 Start_10)))
   (Start_9 String ("a" (str.++ Start_8 Start_2) (ite StartBool_2 Start_4 Start_6)))
   (Start_14 String ("a" x "b" (str.from_int StartInt_3) (ite StartBool Start_8 Start_7)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_2) (str.contains Start_2 Start_2) (= Start_1 Start_5) (= StartInt_1 StartInt_6)))
   (Start_1 String (y (str.++ Start_1 Start) (str.at Start StartInt_1) (str.replace Start Start Start_1) (str.from_int StartInt_1)))
   (StartInt_1 Int (1 0))
   (Start_6 String (y "" "a" (str.++ Start_2 Start_6) (str.at Start_7 StartInt_5) (str.substr Start_5 StartInt_4 StartInt_1) (str.replace Start_6 Start Start_5) (ite StartBool Start_6 Start_6)))
   (StartBool_1 Bool (false (str.< Start Start) (str.suffixof Start Start_1) (str.contains Start_1 Start_2) (= StartInt_2 StartInt_3) (<= StartInt_2 StartInt_3)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.indexof Start Start StartInt) (str.to_int Start_1)))
   (StartInt_6 Int (0 1 (str.len Start_1) (str.indexof Start_5 Start_5 StartInt_2) (str.to_int Start_9)))
   (StartInt_3 Int (1 (str.to_int Start_1)))
   (Start_3 String (x (str.substr Start_1 StartInt_4 StartInt_1) (str.replace Start_4 Start_5 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_4)))
   (Start_5 String ("" (str.++ Start_3 Start_2) (str.substr Start_3 StartInt_2 StartInt_3) (str.from_int StartInt_5)))
   (Start_8 String (x (str.++ Start_7 Start_3) (str.at Start_4 StartInt_4) (str.substr Start_1 StartInt_3 StartInt_4) (ite StartBool_2 Start_1 Start_6)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.indexof Start_1 Start StartInt)))
   (Start_13 String (y (str.++ Start_5 Start_3) (str.substr Start_6 StartInt_5 StartInt_1) (str.replace Start_1 Start_1 Start_12) (str.from_int StartInt_2)))
   (Start_4 String (y "1" (str.at Start_6 StartInt_3) (str.replace Start_6 Start_1 Start_3) (str.from_int StartInt_3) (ite StartBool_1 Start Start_5)))
   (Start_12 String ("0" y (str.at Start_3 StartInt_7) (str.replace Start_9 Start_13 Start_14) (str.from_int StartInt_8)))
   (Start_7 String ("a" (str.++ Start_8 Start_3) (str.at Start_8 StartInt_2) (str.replace Start_7 Start_1 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (ite (str.< "0" x) y "b") "b")))

(check-synth)
