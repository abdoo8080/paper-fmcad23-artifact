(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_8 String) (StartInt_1 Int) (StartInt_6 Int) (StartInt_2 Int) (StartBool_2 Bool) (Start_7 String) (Start_2 String) (Start_4 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_5 Int) (Start_10 String) (Start_6 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_5 String) (Start_1 String) (StartInt_3 Int) (StartInt_7 Int) (Start_3 String))
  ((Start String ("a" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_1)))
   (StartInt Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_7 StartInt) (str.to_int Start_5)))
   (StartBool Bool (false true (not StartBool_4) (str.< Start Start_5) (str.prefixof Start_7 Start) (str.suffixof Start_6 Start_2) (= Start_2 Start_1) (<= StartInt_1 StartInt_4)))
   (Start_9 String ("a" (str.++ Start_2 Start_2) (str.at Start_3 StartInt_5) (str.from_int StartInt_6) (ite StartBool_4 Start_10 Start_6)))
   (Start_8 String (x (str.substr Start_9 StartInt_7 StartInt_3)))
   (StartInt_1 Int (0 (str.to_int Start)))
   (StartInt_6 Int (1 (str.indexof Start_1 Start StartInt_4) (str.to_int Start_6)))
   (StartInt_2 Int (0 (str.len Start_7)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_2) (str.< Start_2 Start_1) (str.suffixof Start_4 Start_5) (= Start_3 Start_5)))
   (Start_7 String ("a" "1" (str.at Start StartInt) (str.from_int StartInt_1) (ite StartBool_3 Start_7 Start_3)))
   (Start_2 String (y (str.at Start StartInt_2) (str.substr Start_3 StartInt_3 StartInt) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt) (ite StartBool Start_4 Start_3)))
   (Start_4 String ("" "b" x (str.replace Start_5 Start_6 Start_5) (ite StartBool_1 Start_6 Start_3)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_2) (= StartInt_1 StartInt_4)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start_5 Start StartInt_4) (str.to_int Start_4)))
   (StartInt_5 Int (0 1 (str.len Start) (str.to_int Start_2)))
   (Start_10 String ("1" x (str.at Start_2 StartInt_4) (str.substr Start_3 StartInt_4 StartInt_5) (str.replace Start_7 Start_7 Start_4)))
   (Start_6 String (x (str.++ Start_1 Start_2) (str.at Start_4 StartInt_5) (str.from_int StartInt_5) (ite StartBool_3 Start_2 Start_3)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool StartBool_1) (str.suffixof Start_5 Start_4) (= Start_4 Start_1)))
   (StartBool_4 Bool (true false (not StartBool_1) (str.<= Start_8 Start_2) (<= StartInt_3 StartInt_2)))
   (Start_5 String (y (str.++ Start_6 Start_1) (ite StartBool Start_4 Start_5)))
   (Start_1 String ("1" (str.at Start_7 StartInt_5) (str.substr Start_5 StartInt_4 StartInt) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_7)))
   (StartInt_3 Int (0 1 (str.len Start_1) (str.indexof Start_1 Start_5 StartInt) (str.to_int Start_7)))
   (StartInt_7 Int (1 0 (str.indexof Start_6 Start_3 StartInt_2)))
   (Start_3 String (x (str.++ Start_7 Start_3) (str.at Start_5 StartInt_6) (str.substr Start_5 StartInt_2 StartInt) (str.replace Start_4 Start_4 Start) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at y 1) y)))

(check-synth)
