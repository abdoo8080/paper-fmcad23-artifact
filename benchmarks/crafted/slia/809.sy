(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_17 String) (StartInt_5 Int) (Start_4 String) (StartBool_1 Bool) (Start_1 String) (StartInt_1 Int) (Start_10 String) (StartInt_2 Int) (Start_5 String) (Start_16 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_11 String) (StartInt_6 Int) (Start_8 String) (Start_2 String) (Start_13 String) (Start_7 String) (Start_9 String) (Start_6 String) (Start_3 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_14 String) (Start_12 String) (StartInt_4 Int) (StartBool_4 Bool))
  ((Start String ("a" "" "b" "1" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt StartInt) (str.replace Start Start_2 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_4 Start_1 StartInt) (str.to_int Start)))
   (StartBool Bool (false true (not StartBool_2) (str.< Start_13 Start_15) (str.<= Start_11 Start_10) (str.prefixof Start_16 Start_6) (str.suffixof Start_7 Start_3) (<= StartInt_3 StartInt_7)))
   (Start_15 String ("a" (str.at Start_3 StartInt_7) (ite StartBool_3 Start_9 Start_13)))
   (Start_17 String ("b" (str.++ Start_17 Start_3) (ite StartBool_3 Start_12 Start_9)))
   (StartInt_5 Int (1 0 (str.indexof Start_1 Start_5 StartInt_2) (str.to_int Start_2)))
   (Start_4 String (x "b" y "a" "" (str.at Start_3 StartInt_2) (str.substr Start_2 StartInt StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_3 StartBool_1) (str.< Start Start_3) (= Start_1 Start_4) (= StartInt_2 StartInt_2)))
   (Start_1 String ("" x y "a" (str.++ Start Start_3) (str.at Start StartInt_2)))
   (StartInt_1 Int (0))
   (Start_10 String ("0" (str.substr Start_5 StartInt_1 StartInt_3) (str.replace Start_4 Start_6 Start_1)))
   (StartInt_2 Int (0))
   (Start_5 String ("b" y x (str.++ Start Start_1) (str.at Start_6 StartInt_4) (str.replace Start_5 Start_7 Start_5) (str.from_int StartInt_5)))
   (Start_16 String ("a" (str.++ Start_9 Start_11) (str.replace Start_9 Start_12 Start_14) (ite StartBool_4 Start_2 Start_16)))
   (StartInt_3 Int (0 (str.to_int Start_5)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool StartBool_1) (str.< Start_4 Start) (str.contains Start_1 Start_5) (= Start_5 Start_4) (= StartInt StartInt_3)))
   (Start_11 String ("a"))
   (StartInt_6 Int (1 (str.indexof Start_4 Start_6 StartInt_4) (str.to_int Start_10)))
   (Start_8 String ("b" "" x (str.substr Start_8 StartInt_3 StartInt_5) (ite StartBool_3 Start_9 Start_7)))
   (Start_2 String ("1" "a" (str.++ Start Start) (str.replace Start_1 Start_3 Start_3) (ite StartBool Start Start)))
   (Start_13 String ("b" (str.++ Start_6 Start) (str.at Start_14 StartInt_4) (str.replace Start_5 Start Start_3) (ite StartBool_3 Start_9 Start_14)))
   (Start_7 String ("b" "1" y "" (str.++ Start_6 Start_7) (str.at Start_6 StartInt_3) (str.from_int StartInt_5) (ite StartBool Start_8 Start_6)))
   (Start_9 String (y (str.++ Start Start) (str.at Start_2 StartInt_6) (str.substr Start_5 StartInt_4 StartInt_5) (str.replace Start_1 Start_2 Start_5)))
   (Start_6 String ("" "b" x "0" (str.substr Start_10 StartInt_7 StartInt_3) (ite StartBool_3 Start_2 Start_11)))
   (Start_3 String ("0" "b" (str.from_int StartInt_2)))
   (StartInt_7 Int (0 1 (str.len Start_10) (str.to_int Start_1)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_4 Start_9) (str.<= Start_12 Start_8) (str.prefixof Start_10 Start_12) (= Start_13 Start_9) (= StartInt_4 StartInt_2) (<= StartInt StartInt)))
   (Start_14 String ("a" (str.at Start_13 StartInt_3) (str.substr Start_7 StartInt StartInt_5) (str.replace Start_8 Start_10 Start_7) (ite StartBool_2 Start_9 Start_10)))
   (Start_12 String ("0" (str.at Start_11 StartInt_6) (str.replace Start_12 Start_14 Start_13) (str.from_int StartInt_7) (ite StartBool_1 Start_2 Start_7)))
   (StartInt_4 Int (1 (str.indexof Start_10 Start_8 StartInt_6) (str.to_int Start)))
   (StartBool_4 Bool (false true (and StartBool StartBool) (str.<= Start_11 Start_16) (str.prefixof Start_2 Start_15) (str.suffixof Start_3 Start_2) (str.contains Start_3 Start_16) (= Start_17 Start_8) (<= StartInt_4 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.from_int (str.to_int (str.++ "0" (str.++ y x)))) (str.len y))))

(check-synth)
