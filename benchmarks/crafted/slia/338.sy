(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (StartBool_3 Bool) (StartInt_7 Int) (StartBool_2 Bool) (Start_7 String) (Start_8 String) (StartInt_2 Int) (StartInt_8 Int) (Start_5 String) (Start_2 String) (StartInt_3 Int) (StartInt_6 Int) (StartInt_4 Int) (StartInt_1 Int) (Start_4 String) (Start_6 String) (Start_9 String) (Start_3 String) (StartInt_5 Int) (Start_1 String))
  ((Start String (x (str.++ Start_1 Start) (str.at Start StartInt) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.len Start_3) (str.to_int Start_6)))
   (StartBool Bool (true false (and StartBool StartBool_1) (str.< Start_2 Start_3) (str.<= Start_5 Start_4) (str.prefixof Start_4 Start_1) (str.suffixof Start_6 Start) (str.contains Start_7 Start_6) (= StartInt_3 StartInt_3)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_1) (str.suffixof Start_1 Start_2) (= Start_1 Start_9) (= StartInt_8 StartInt_5) (<= StartInt_4 StartInt_3)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_1) (str.< Start_3 Start_2) (str.suffixof Start Start_8) (= Start_5 Start_4) (<= StartInt_8 StartInt_7)))
   (StartInt_7 Int (0 1 (str.indexof Start Start_5 StartInt_4)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_3) (str.<= Start Start_3) (str.prefixof Start_3 Start_6) (str.suffixof Start Start_8) (str.contains Start_5 Start)))
   (Start_7 String (x (ite StartBool_2 Start_4 Start_5)))
   (Start_8 String ("1" "a" (str.++ Start_7 Start_4) (str.at Start_6 StartInt) (str.substr Start_7 StartInt_5 StartInt_7) (str.replace Start Start_1 Start_9) (str.from_int StartInt_8) (ite StartBool_1 Start Start_2)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_3 StartInt_4)))
   (StartInt_8 Int (0 (str.len Start_8) (str.indexof Start_3 Start_7 StartInt_4) (str.to_int Start_3)))
   (Start_5 String ("1" "0" y (str.++ Start_5 Start) (str.substr Start StartInt_3 StartInt) (str.from_int StartInt_3)))
   (Start_2 String ("" (str.at Start_5 StartInt_5) (str.substr Start_6 StartInt StartInt_6)))
   (StartInt_3 Int (1 (str.to_int Start)))
   (StartInt_6 Int (1 (str.indexof Start_6 Start StartInt_6) (str.to_int Start_4)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_3)))
   (StartInt_1 Int (1 (str.len Start_2) (str.indexof Start_4 Start_3 StartInt_3) (str.to_int Start)))
   (Start_4 String ("a" (str.at Start_2 StartInt) (ite StartBool Start_5 Start_1)))
   (Start_6 String ("1" (str.at Start_3 StartInt_6) (str.from_int StartInt) (ite StartBool Start_5 Start_1)))
   (Start_9 String ("" x "a" (str.at Start_7 StartInt_1) (str.substr Start_7 StartInt_5 StartInt_7) (str.replace Start_5 Start_8 Start_7) (ite StartBool_1 Start Start_7)))
   (Start_3 String ("b" "" (str.++ Start Start_3) (str.substr Start_1 StartInt StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_3 Start)))
   (StartInt_5 Int (1))
   (Start_1 String ("1" (str.replace Start_6 Start_5 Start_5) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.++ "a" "b") "0")))

(check-synth)
