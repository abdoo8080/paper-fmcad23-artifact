(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_6 String) (Start_5 String) (StartInt_4 Int) (StartInt_5 Int) (StartInt_9 Int) (StartInt_6 Int) (Start_13 String) (StartInt_7 Int) (StartInt_10 Int) (Start_14 String) (Start_10 String) (Start_12 String) (StartBool_1 Bool) (Start_2 String) (StartInt_8 Int) (Start_11 String) (Start_3 String) (Start_4 String) (Start_7 String) (Start_9 String) (StartBool_2 Bool) (StartInt_2 Int) (StartInt_3 Int) (StartInt_1 Int) (Start_8 String))
  ((Start String ("a" "1" (str.at Start_1 StartInt_1)))
   (StartInt Int (1 0 (str.len Start_6) (str.indexof Start Start_6 StartInt_8) (str.to_int Start_1)))
   (StartBool Bool (false (not StartBool) (str.<= Start_2 Start) (str.suffixof Start Start_8) (= Start_12 Start_9) (= StartInt_10 StartInt_10)))
   (Start_1 String ("b" (str.++ Start_5 Start_7) (str.at Start_6 StartInt_10)))
   (Start_6 String ("a" (str.substr Start_6 StartInt StartInt_4) (ite StartBool_2 Start_4 Start_11)))
   (Start_5 String ("a" "1" y x "b" "0" (str.from_int StartInt_8)))
   (StartInt_4 Int (0 (str.len Start) (str.to_int Start_9)))
   (StartInt_5 Int (0 1))
   (StartInt_9 Int (1 0 (str.indexof Start_1 Start_3 StartInt_7) (str.to_int Start_4)))
   (StartInt_6 Int (1 0 (str.len Start_8) (str.indexof Start_13 Start_12 StartInt) (str.to_int Start_2)))
   (Start_13 String (x (str.substr Start StartInt_4 StartInt) (str.replace Start_13 Start_13 Start_3) (str.from_int StartInt_2)))
   (StartInt_7 Int (1 (str.indexof Start_12 Start_14 StartInt_3) (str.to_int Start)))
   (StartInt_10 Int (0 1 (str.len Start_14) (str.to_int Start_10)))
   (Start_14 String ("" (str.++ Start_1 Start_11) (str.at Start_10 StartInt_5) (str.replace Start_7 Start_1 Start_1)))
   (Start_10 String ("b" "0" "" (str.++ Start_12 Start_13) (str.substr Start_5 StartInt_7 StartInt_5) (str.replace Start_5 Start_8 Start_14) (str.from_int StartInt_7) (ite StartBool_1 Start_5 Start_4)))
   (Start_12 String ("a" "" "b"))
   (StartBool_1 Bool (false true (and StartBool StartBool_1) (str.suffixof Start_1 Start_3) (<= StartInt StartInt_1)))
   (Start_2 String (x "a" (str.substr Start_4 StartInt StartInt_2) (str.replace Start_4 Start_1 Start_2) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_8 Int (1 0 (str.indexof Start_12 Start_2 StartInt_9) (str.to_int Start_6)))
   (Start_11 String ("0" x "" "1" y "b" "a" (str.replace Start Start_3 Start_4)))
   (Start_3 String ("1" "" (str.at Start_2 StartInt_2) (str.replace Start_1 Start_1 Start_2) (ite StartBool_1 Start_3 Start_2)))
   (Start_4 String ("" (str.from_int StartInt_1) (ite StartBool_2 Start_1 Start_2)))
   (Start_7 String ("0" (str.at Start_5 StartInt_4) (str.substr Start StartInt_1 StartInt_4) (str.from_int StartInt_5) (ite StartBool Start_6 Start_8)))
   (Start_9 String ("a" "1" (str.at Start_3 StartInt) (str.substr Start_9 StartInt_5 StartInt_6) (str.replace Start_1 Start_10 Start_7) (ite StartBool_2 Start_11 Start_8)))
   (StartBool_2 Bool (true (str.< Start_4 Start_4) (str.prefixof Start_3 Start_3) (str.suffixof Start_5 Start_6) (str.contains Start_7 Start_1) (= StartInt_3 StartInt)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.to_int Start)))
   (StartInt_3 Int (0 (str.len Start_4) (str.to_int Start_7)))
   (StartInt_1 Int (1 (str.len Start_2) (str.indexof Start_2 Start_3 StartInt_1)))
   (Start_8 String ("" x "0" "a" (str.at Start_2 StartInt_3) (str.replace Start_9 Start_4 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "a" y) "0" "a")))

(check-synth)
