(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_8 String) (StartInt_1 Int) (Start_6 String) (Start_5 String) (Start_2 String) (StartInt_2 Int) (Start_7 String) (Start_4 String) (StartBool_1 Bool) (Start_9 String) (Start_10 String) (StartInt_3 Int) (Start_3 String) (StartInt_4 Int))
  ((Start String ("0" (str.++ Start_1 Start_1) (str.substr Start_2 StartInt StartInt_1) (ite StartBool Start_2 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_6 Start_2 StartInt_4) (str.to_int Start_3)))
   (StartBool Bool (true false (not StartBool) (str.< Start_8 Start_3) (str.prefixof Start_2 Start_8)))
   (Start_1 String ("" (str.++ Start_2 Start_1) (str.substr Start_3 StartInt_2 StartInt_4)))
   (Start_8 String (y (str.++ Start_10 Start_2) (str.at Start_5 StartInt_4)))
   (StartInt_1 Int (0 (str.to_int Start_3)))
   (Start_6 String (y (str.++ Start_2 Start_4) (str.at Start StartInt_3) (str.substr Start_5 StartInt_3 StartInt_3)))
   (Start_5 String (y (str.++ Start Start_4) (str.substr Start_5 StartInt_2 StartInt_3) (str.from_int StartInt_1)))
   (Start_2 String (y "" "0" "b" x (str.++ Start Start_2) (str.replace Start_7 Start_6 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start Start_3)))
   (StartInt_2 Int (1 (str.len Start_6) (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_1)))
   (Start_7 String ("1" x "0" "a" (str.substr Start_8 StartInt_3 StartInt) (str.replace Start_9 Start_4 Start_2)))
   (Start_4 String (x (str.substr Start_5 StartInt_2 StartInt)))
   (StartBool_1 Bool (true (str.suffixof Start_4 Start_1) (str.contains Start_3 Start_5) (= StartInt StartInt)))
   (Start_9 String ("1" (str.at Start_4 StartInt_4) (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start_6 Start_9 Start_6)))
   (Start_10 String (x "1" (str.++ Start_4 Start_5) (str.at Start_9 StartInt) (str.replace Start_4 Start_1 Start_7) (ite StartBool Start Start_2)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start_6 Start_6 StartInt) (str.to_int Start_1)))
   (Start_3 String ("" (str.++ Start Start_2) (str.at Start_1 StartInt) (ite StartBool_1 Start_1 Start_3)))
   (StartInt_4 Int (0 (str.len Start_1) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ (str.at y 1) x) (str.to_int x))))

(check-synth)
