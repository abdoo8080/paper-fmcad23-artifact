(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_15 String) (Start_14 String) (StartInt_1 Int) (Start_1 String) (Start_13 String) (StartBool_2 Bool) (Start_10 String) (StartInt_3 Int) (Start_5 String) (StartInt_5 Int) (StartInt_2 Int) (StartBool_1 Bool) (Start_2 String) (Start_3 String) (Start_4 String) (Start_7 String) (Start_8 String) (Start_6 String) (Start_9 String) (Start_12 String) (Start_16 String) (Start_11 String) (StartInt_4 Int))
  ((Start String ("a" (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt) (str.from_int StartInt_2)))
   (StartInt Int (1 (str.to_int Start_6)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool StartBool) (str.<= Start_10 Start_12) (str.suffixof Start_14 Start_15) (<= StartInt_2 StartInt_5)))
   (StartBool_4 Bool (true (not StartBool_2) (str.< Start_12 Start_3) (str.prefixof Start_7 Start) (str.suffixof Start Start_3) (= StartInt_3 StartInt_4) (<= StartInt_4 StartInt_2)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_4 StartBool) (str.< Start_16 Start_16) (str.prefixof Start_2 Start_7) (str.contains Start_3 Start_9) (= Start_14 Start_9) (= StartInt StartInt) (<= StartInt_3 StartInt)))
   (Start_15 String ("" (str.++ Start_3 Start_8)))
   (Start_14 String ("" (str.replace Start_8 Start_2 Start_9) (ite StartBool_1 Start_7 Start_15)))
   (StartInt_1 Int (0 1 (str.indexof Start_14 Start_8 StartInt)))
   (Start_1 String ("b" (str.++ Start_7 Start_9) (str.at Start_16 StartInt) (str.substr Start_9 StartInt StartInt_2) (str.from_int StartInt)))
   (Start_13 String ("b" y (str.++ Start_5 Start_1) (str.substr Start_7 StartInt_4 StartInt)))
   (StartBool_2 Bool (true false (str.< Start_1 Start_1) (str.suffixof Start_15 Start_10) (= Start Start_10) (<= StartInt_3 StartInt_4)))
   (Start_10 String ("a" "0" (str.++ Start_6 Start_3) (str.replace Start_8 Start_13 Start_13) (ite StartBool Start_13 Start_2)))
   (StartInt_3 Int (1 0 (str.to_int Start_11)))
   (Start_5 String ("a" "1" (str.at Start StartInt_1) (str.replace Start_2 Start_6 Start_5) (ite StartBool Start_7 Start_7)))
   (StartInt_5 Int (0 1))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start_2)))
   (StartBool_1 Bool (false true (str.< Start_10 Start_6) (str.<= Start_5 Start_14) (str.contains Start_12 Start_12) (= Start_6 Start_11)))
   (Start_2 String ("1" (str.replace Start_2 Start_3 Start_1) (str.from_int StartInt_2)))
   (Start_3 String ("" (str.++ Start_4 Start_4) (ite StartBool Start_4 Start_1)))
   (Start_4 String (y (str.at Start StartInt_2) (str.replace Start Start_5 Start) (ite StartBool Start_5 Start_2)))
   (Start_7 String ("1" "" x "0" (str.++ Start_5 Start_1) (str.at Start StartInt_1) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_8 Start_4 Start_4) (str.from_int StartInt_1)))
   (Start_8 String ("0" (str.at Start_2 StartInt_2) (str.substr Start_6 StartInt_2 StartInt_1) (str.replace Start_6 Start_1 Start_8)))
   (Start_6 String ("1" "0" y x (str.replace Start_5 Start_9 Start_5) (ite StartBool Start_1 Start_1)))
   (Start_9 String ("a" (str.++ Start_4 Start_10) (str.at Start_7 StartInt_1) (str.substr Start_7 StartInt_2 StartInt_1) (str.replace Start_11 Start_6 Start_11)))
   (Start_12 String ("" (str.substr Start_1 StartInt_1 StartInt_3) (str.from_int StartInt_4)))
   (Start_16 String ("a" "1" (str.++ Start_12 Start_7) (str.at Start_8 StartInt_1) (str.from_int StartInt_3) (ite StartBool_2 Start_16 Start_4)))
   (Start_11 String ("b" (str.++ Start_12 Start_5) (str.at Start_8 StartInt_2)))
   (StartInt_4 Int (0 1 (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "" y x) 1)))

(check-synth)
