(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (StartInt_8 Int) (Start_2 String) (StartInt_7 Int) (Start_8 String) (StartBool_3 Bool) (Start_1 String) (StartInt_3 Int) (StartBool_4 Bool) (Start_3 String) (StartBool_1 Bool) (StartInt_1 Int) (StartInt_2 Int) (StartInt_4 Int) (Start_5 String) (Start_4 String) (StartBool_2 Bool) (Start_6 String) (StartInt_5 Int) (StartInt_6 Int) (Start_7 String))
  ((Start String ("a" "" x y "b" (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 0 (str.len Start_7)))
   (StartBool Bool (true (not StartBool_4) (str.< Start_5 Start_1) (str.contains Start_3 Start_2) (<= StartInt_6 StartInt_9)))
   (StartInt_9 Int (1 (str.indexof Start_7 Start StartInt_8)))
   (StartInt_8 Int (0 (str.len Start_4) (str.indexof Start Start_4 StartInt_5)))
   (Start_2 String ("b" "" y "0" x "1" (str.++ Start Start_7) (str.replace Start_7 Start_7 Start_6) (str.from_int StartInt_8)))
   (StartInt_7 Int (1 0 (str.to_int Start_8)))
   (Start_8 String ("1" "" "0" x y (str.substr Start_3 StartInt_1 StartInt_4) (str.from_int StartInt_7)))
   (StartBool_3 Bool (true false (not StartBool) (str.< Start_4 Start_2) (str.prefixof Start_4 Start_8) (str.contains Start_4 Start_8) (= Start_4 Start_6) (= StartInt_2 StartInt_4)))
   (Start_1 String ("b" y (str.substr Start StartInt_1 StartInt_8) (str.replace Start_7 Start_7 Start_7) (str.from_int StartInt_1)))
   (StartInt_3 Int (1 (str.len Start_4)))
   (StartBool_4 Bool (false (str.prefixof Start_6 Start_5) (str.contains Start Start_3) (= Start_5 Start_3) (= StartInt_5 StartInt_4)))
   (Start_3 String ("b" "a" "0" y "" x (str.++ Start_2 Start_4) (str.at Start_8 StartInt_2) (str.substr Start StartInt_1 StartInt_6) (str.from_int StartInt_5)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (str.prefixof Start_3 Start_2) (str.suffixof Start_3 Start_5) (= Start_2 Start_3) (<= StartInt StartInt_4)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start_2 Start_3 StartInt_3) (str.to_int Start_1)))
   (StartInt_2 Int (0 1 (str.len Start)))
   (StartInt_4 Int (1 0 (str.len Start_2)))
   (Start_5 String ("b" (str.substr Start StartInt StartInt_3) (ite StartBool_1 Start_4 Start_1)))
   (Start_4 String (x (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (StartBool_2 Bool (true false (str.prefixof Start_4 Start) (str.contains Start_3 Start_3) (= Start_6 Start_2) (= StartInt StartInt_5) (<= StartInt_2 StartInt_4)))
   (Start_6 String ("1" (str.++ Start_2 Start_1) (str.at Start_4 StartInt_1) (str.from_int StartInt_4) (ite StartBool_3 Start_3 Start_7)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_3 StartInt_6) (str.to_int Start_3)))
   (StartInt_6 Int (1 0 (str.len Start_5) (str.to_int Start_2)))
   (Start_7 String (x "1" (str.at Start StartInt_5) (str.substr Start StartInt_5 StartInt_2) (str.replace Start_7 Start_2 Start_3) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ (str.replace y "a" "b") "a") "0")))

(check-synth)
