(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_1 String) (StartInt_1 Int) (StartInt_6 Int) (StartBool_2 Bool) (Start_4 String) (StartInt_5 Int) (Start_7 String) (StartInt_3 Int) (Start_2 String) (StartInt_2 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_6 String) (StartInt_7 Int) (Start_9 String) (StartInt_4 Int) (Start_5 String) (Start_3 String))
  ((Start String ("" "1" (str.++ Start_1 Start_1) (str.at Start_1 StartInt) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 0))
   (StartBool Bool (true (and StartBool_3 StartBool) (str.< Start Start) (str.suffixof Start_5 Start_2) (= StartInt_3 StartInt_2) (<= StartInt_1 StartInt)))
   (Start_8 String ("" y (str.replace Start_6 Start_9 Start_1)))
   (Start_1 String ("" "b" (str.++ Start_6 Start_7) (str.replace Start_3 Start_8 Start_8) (str.from_int StartInt_6)))
   (StartInt_1 Int (0))
   (StartInt_6 Int (0 (str.len Start_4) (str.to_int Start)))
   (StartBool_2 Bool (true (str.<= Start_1 Start_4) (str.contains Start_4 Start_2) (= Start_4 Start_1) (= StartInt_1 StartInt) (<= StartInt_3 StartInt_1)))
   (Start_4 String ("" (str.substr Start_1 StartInt StartInt_2) (str.replace Start_4 Start_2 Start_4) (str.from_int StartInt_1) (ite StartBool_2 Start Start)))
   (StartInt_5 Int (0 (str.len Start_6) (str.to_int Start_6)))
   (Start_7 String (x "" "1" (str.at Start_1 StartInt_3) (str.from_int StartInt)))
   (StartInt_3 Int (0 (str.len Start) (str.indexof Start_4 Start_3 StartInt_2)))
   (Start_2 String ("" "1" "b" (str.++ Start_2 Start_1) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_1 Start_3 Start) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_2 Int (0))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_3) (str.< Start_4 Start)))
   (StartBool_3 Bool (true (str.suffixof Start_2 Start) (str.contains Start_2 Start_5) (= Start_2 Start) (<= StartInt_4 StartInt_1)))
   (Start_6 String ("a" (str.++ Start_7 Start_2) (str.at Start_4 StartInt_1) (str.substr Start_6 StartInt_6 StartInt_2) (str.from_int StartInt_7)))
   (StartInt_7 Int (1 (str.len Start_3) (str.indexof Start_4 Start_7 StartInt_7)))
   (Start_9 String ("1" x y (str.++ Start Start_5) (str.at Start_7 StartInt_1) (str.replace Start Start_5 Start_4) (str.from_int StartInt_1)))
   (StartInt_4 Int (1 0 (str.to_int Start_2)))
   (Start_5 String ("1" "0" (str.at Start_3 StartInt_3) (str.from_int StartInt_3) (ite StartBool_2 Start Start_3)))
   (Start_3 String ("1" (str.++ Start_4 Start_4) (str.substr Start_4 StartInt_5 StartInt_6) (str.replace Start_6 Start Start_5) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.++ y y) "")))

(check-synth)
