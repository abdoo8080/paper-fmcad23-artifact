(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (StartBool_3 Bool) (Start_9 String) (Start_8 String) (StartBool_1 Bool) (Start_1 String) (StartInt_4 Int) (StartInt_2 Int) (StartInt_1 Int) (Start_3 String) (StartBool_2 Bool) (Start_5 String) (StartInt_3 Int) (Start_6 String) (Start_4 String) (Start_11 String) (Start_2 String) (Start_7 String))
  ((Start String ("0" "" "1" y (str.++ Start_1 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 (str.to_int Start_7)))
   (StartBool Bool (false true (and StartBool_2 StartBool_3) (str.<= Start_10 Start_10) (str.prefixof Start Start_6) (str.contains Start_4 Start_3) (= Start_9 Start_9) (<= StartInt StartInt_1)))
   (Start_10 String ("" "a" (str.at Start_7 StartInt_1) (str.substr Start_6 StartInt_4 StartInt_4) (str.replace Start_7 Start_11 Start_5)))
   (StartBool_3 Bool (true false (str.<= Start_2 Start_11) (str.contains Start_2 Start_4) (= StartInt_3 StartInt_4)))
   (Start_9 String ("b" "a" (str.++ Start_2 Start_4) (str.at Start_2 StartInt_3) (str.substr Start StartInt_3 StartInt_2) (str.from_int StartInt)))
   (Start_8 String ("" (str.++ Start_3 Start_1) (str.replace Start Start Start_7) (ite StartBool Start_5 Start_7)))
   (StartBool_1 Bool (true false (str.< Start Start_2) (str.prefixof Start Start_2) (str.suffixof Start_3 Start_3) (<= StartInt_2 StartInt_2)))
   (Start_1 String ("a" (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_6)))
   (StartInt_4 Int (0 1 (str.len Start_9) (str.to_int Start_1)))
   (StartInt_2 Int (1 (str.to_int Start_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_4 Start_2 StartInt)))
   (Start_3 String ("0" x "" "1" (str.++ Start Start_1) (str.at Start_1 StartInt_1) (str.replace Start Start_4 Start_5) (ite StartBool_2 Start_2 Start_2)))
   (StartBool_2 Bool (false (= StartInt_2 StartInt)))
   (Start_5 String ("" "a" "1" (str.++ Start_1 Start_4) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_2 Start_2 Start_5) (str.from_int StartInt_2) (ite StartBool Start Start_1)))
   (StartInt_3 Int (1 (str.len Start_5)))
   (Start_6 String (x "0" (str.++ Start_7 Start_1) (str.at Start_7 StartInt_1) (str.replace Start_5 Start Start_5)))
   (Start_4 String ("" (str.substr Start_4 StartInt_2 StartInt_2) (str.from_int StartInt_3)))
   (Start_11 String ("" (str.at Start_8 StartInt_1) (str.from_int StartInt_4)))
   (Start_2 String (y "b" (str.from_int StartInt_3)))
   (Start_7 String (x (str.++ Start_8 Start_7) (str.replace Start_6 Start_9 Start_7) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "a" "1") x "")))

(check-synth)
