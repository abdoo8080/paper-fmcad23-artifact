(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_8 String) (StartInt_7 Int) (StartInt_8 Int) (Start_9 String) (Start_11 String) (Start_6 String) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_9 Int) (Start_3 String) (Start_12 String) (Start_10 String) (StartInt_2 Int) (StartInt_3 Int) (StartInt_10 Int) (Start_4 String) (StartInt_4 Int) (StartInt_5 Int) (StartBool_3 Bool) (Start_2 String) (StartInt_1 Int) (Start_5 String) (Start_1 String) (StartBool_2 Bool))
  ((Start String ("a" (str.++ Start_1 Start_2) (str.at Start StartInt_1) (ite StartBool_1 Start_2 Start_2)))
   (StartInt Int (1 (str.to_int Start_5)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool StartBool_2) (str.prefixof Start_9 Start_5) (str.contains Start_2 Start_12) (= Start_1 Start_9) (= StartInt_9 StartInt) (<= StartInt_6 StartInt_10)))
   (Start_7 String ("" (str.at Start_4 StartInt_6) (str.replace Start_3 Start_8 Start) (str.from_int StartInt_7) (ite StartBool Start_1 Start_2)))
   (Start_8 String ("" "0" x (str.++ Start_4 Start_5)))
   (StartInt_7 Int (1 0 (str.indexof Start_6 Start_3 StartInt_4) (str.to_int Start_3)))
   (StartInt_8 Int (1 (str.len Start_8)))
   (Start_9 String ("" "b" (str.++ Start_5 Start_6) (str.at Start_5 StartInt_5) (str.replace Start_6 Start_6 Start_2) (str.from_int StartInt_6) (ite StartBool_3 Start Start_10)))
   (Start_11 String ("" x "a" "b" "0" (str.++ Start_7 Start_7) (str.at Start_2 StartInt_5) (str.from_int StartInt_5) (ite StartBool_3 Start_3 Start_8)))
   (Start_6 String ("a" (str.++ Start_7 Start_3) (str.substr Start StartInt_6 StartInt_4) (str.replace Start_4 Start_8 Start_6) (str.from_int StartInt_7) (ite StartBool_3 Start Start_5)))
   (StartInt_6 Int (1 (str.to_int Start)))
   (StartBool_1 Bool (true false (str.<= Start_3 Start) (str.suffixof Start_3 Start) (str.contains Start_3 Start_2) (= StartInt_1 StartInt) (<= StartInt StartInt)))
   (StartInt_9 Int (0 1 (str.len Start_8) (str.indexof Start_11 Start_1 StartInt_4)))
   (Start_3 String (y "1" (str.from_int StartInt_2) (ite StartBool Start_1 Start_1)))
   (Start_12 String ("a" x y (str.substr Start_4 StartInt_5 StartInt)))
   (Start_10 String ("b" x (str.at Start_2 StartInt_6) (str.substr Start_1 StartInt_8 StartInt_8) (str.replace Start_11 Start_2 Start_4) (str.from_int StartInt_9) (ite StartBool_2 Start_7 Start)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.to_int Start_1)))
   (StartInt_3 Int (1 (str.indexof Start_3 Start_4 StartInt_3) (str.to_int Start_4)))
   (StartInt_10 Int (1 0 (str.to_int Start_7)))
   (Start_4 String (y x (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_4 Start Start_4) (str.from_int StartInt_4)))
   (StartInt_4 Int (1 (str.len Start_2) (str.indexof Start_1 Start StartInt_5)))
   (StartInt_5 Int (0 (str.len Start_1) (str.indexof Start_2 Start_3 StartInt_5) (str.to_int Start_3)))
   (StartBool_3 Bool (false (not StartBool) (str.suffixof Start_3 Start_9) (= StartInt_4 StartInt_3)))
   (Start_2 String ("0" "" x (str.++ Start_2 Start_2) (str.substr Start_5 StartInt_4 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_4)))
   (Start_5 String ("" (str.++ Start Start) (str.at Start_5 StartInt) (ite StartBool Start_4 Start_3)))
   (Start_1 String (x (str.++ Start_6 Start_4) (str.at Start_5 StartInt_4) (ite StartBool_2 Start_6 Start_3)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_1) (<= StartInt_6 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "b" y "b") y x)))

(check-synth)
