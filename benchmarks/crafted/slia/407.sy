(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_7 Int) (Start_11 String) (Start_9 String) (Start_14 String) (StartInt_5 Int) (Start_8 String) (StartInt_6 Int) (StartBool_2 Bool) (Start_3 String) (StartInt_1 Int) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_10 Int) (Start_7 String) (Start_13 String) (Start_1 String) (Start_6 String) (Start_10 String) (StartInt_8 Int) (StartInt_4 Int) (StartBool_3 Bool) (Start_5 String) (Start_4 String) (StartInt_2 Int) (StartInt_9 Int) (Start_12 String) (Start_2 String))
  ((Start String ("b" x y (str.replace Start Start Start) (str.from_int StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_13) (str.indexof Start_5 Start_5 StartInt_2)))
   (StartBool Bool (false true (str.< Start_12 Start_6) (str.<= Start_2 Start_3) (str.prefixof Start_4 Start_13) (str.suffixof Start_7 Start_1) (str.contains Start_8 Start_6) (= Start_10 Start_8) (= StartInt_3 StartInt_4)))
   (StartBool_4 Bool (true false (and StartBool_4 StartBool_1) (str.<= Start_4 Start_5) (str.prefixof Start_12 Start_9) (str.suffixof Start Start_9) (str.contains Start_2 Start_3)))
   (StartInt_7 Int (0 1 (str.indexof Start_4 Start_4 StartInt_2) (str.to_int Start_2)))
   (Start_11 String ("0" (str.at Start_6 StartInt_8) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_5)))
   (Start_9 String ("a" "0" x "1" y (str.substr Start_2 StartInt_6 StartInt_6) (str.from_int StartInt_6)))
   (Start_14 String ("1" "" (str.++ Start_2 Start_8) (str.at Start_7 StartInt_7) (str.substr Start_3 StartInt_4 StartInt) (str.from_int StartInt_2) (ite StartBool_4 Start_9 Start_12)))
   (StartInt_5 Int (0 (str.len Start_8) (str.indexof Start_6 Start_10 StartInt_7) (str.to_int Start_8)))
   (Start_8 String ("0" (str.at Start_7 StartInt) (str.substr Start_4 StartInt_1 StartInt_4) (str.replace Start Start_7 Start_4)))
   (StartInt_6 Int (1 0 (str.to_int Start_7)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_2 Start_5) (str.<= Start_7 Start_6) (str.prefixof Start_8 Start_6) (str.contains Start_2 Start) (= Start Start) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_3)))
   (Start_3 String (y (str.++ Start_5 Start_8) (str.at Start_11 StartInt_9) (str.substr Start StartInt_7 StartInt_10) (ite StartBool_1 Start_12 Start_12)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start_11 Start_1 StartInt_6)))
   (StartInt_3 Int (0 1 (str.indexof Start_5 Start_1 StartInt_1) (str.to_int Start_6)))
   (StartBool_1 Bool (true false (str.< Start Start_4) (str.<= Start_2 Start) (str.suffixof Start Start_3) (= StartInt_1 StartInt_3) (<= StartInt StartInt_2)))
   (StartInt_10 Int (0 (str.len Start) (str.indexof Start_2 Start_5 StartInt) (str.to_int Start_3)))
   (Start_7 String ("a" "b" "" (str.at Start_3 StartInt_5) (str.substr Start_7 StartInt_1 StartInt_1) (str.replace Start_9 Start_4 Start)))
   (Start_13 String (y "0" "" "a" (str.++ Start_13 Start) (str.substr Start_14 StartInt StartInt_9)))
   (Start_1 String ("1" "" "0" (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start_3 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_1)))
   (Start_6 String ("0" "a" (str.at Start_4 StartInt) (ite StartBool_2 Start_1 Start_5)))
   (Start_10 String ("" y "0" (str.++ Start_5 Start_10) (str.at Start_6 StartInt_3) (str.substr Start_1 StartInt_4 StartInt_2) (str.from_int StartInt_8)))
   (StartInt_8 Int (1 0 (str.len Start) (str.indexof Start_9 Start_1 StartInt)))
   (StartInt_4 Int (0 (str.len Start_7)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_3 StartBool_1) (str.<= Start_5 Start_9) (str.suffixof Start_3 Start_10) (str.contains Start_4 Start_1) (= StartInt_8 StartInt) (<= StartInt_5 StartInt_1)))
   (Start_5 String ("a" (str.at Start_11 StartInt_6) (str.substr Start_7 StartInt_7 StartInt_1) (str.from_int StartInt_6)))
   (Start_4 String (y))
   (StartInt_2 Int (1 (str.indexof Start_3 Start_11 StartInt_9) (str.to_int Start_6)))
   (StartInt_9 Int (1 0 (str.indexof Start_9 Start_5 StartInt_10) (str.to_int Start_7)))
   (Start_12 String ("1" (str.from_int StartInt) (ite StartBool_3 Start_8 Start_9)))
   (Start_2 String ("0" "a" (str.at Start_3 StartInt_4) (str.replace Start_5 Start_1 Start_2) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.from_int (str.to_int y)) (str.at x 1) "a")))

(check-synth)
