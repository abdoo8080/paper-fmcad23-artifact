(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_3 Int) (Start_9 String) (Start_10 String) (StartInt_6 Int) (StartBool_4 Bool) (Start_7 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_5 String) (Start_2 String) (StartInt_1 Int) (StartBool_5 Bool) (StartInt_2 Int) (Start_8 String) (Start_6 String) (StartBool_2 Bool) (Start_4 String) (Start_1 String) (Start_3 String) (StartBool_3 Bool) (StartInt_4 Int))
  ((Start String ("1" y (str.at Start StartInt) (str.substr Start StartInt StartInt)))
   (StartInt Int (1 0 (str.len Start) (str.indexof Start_1 Start_2 StartInt_1) (str.to_int Start)))
   (StartBool Bool (true false (str.< Start_11 Start_10) (str.<= Start_6 Start_8) (str.prefixof Start_10 Start_3) (str.suffixof Start_2 Start_6) (= StartInt_2 StartInt_5) (<= StartInt_5 StartInt_1)))
   (Start_11 String ("1" (str.from_int StartInt_4)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start_11 Start_7 StartInt_6) (str.to_int Start_7)))
   (Start_9 String ("0" (str.replace Start_6 Start_4 Start_5) (str.from_int StartInt_5)))
   (Start_10 String ("" "a" (str.++ Start_2 Start_2) (str.substr Start_9 StartInt_5 StartInt_6) (str.from_int StartInt_4) (ite StartBool_5 Start_10 Start_3)))
   (StartInt_6 Int (0 (str.len Start_3) (str.to_int Start_6)))
   (StartBool_4 Bool (false true (not StartBool_2) (str.< Start_8 Start_6) (str.<= Start_8 Start_8) (str.prefixof Start Start_5) (= StartInt_1 StartInt_5) (<= StartInt_6 StartInt_5)))
   (Start_7 String ("" "0" x (ite StartBool Start_2 Start_7)))
   (StartInt_5 Int (0 1))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_2 StartBool_1) (str.prefixof Start_4 Start)))
   (Start_5 String (x "" (str.at Start_3 StartInt_2) (str.substr Start_4 StartInt_2 StartInt) (str.replace Start Start_2 Start_1)))
   (Start_2 String ("0" (str.substr Start_1 StartInt StartInt_1) (ite StartBool Start Start_3)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start StartInt_2)))
   (StartBool_5 Bool (false (not StartBool_1) (and StartBool_1 StartBool_4) (str.<= Start_7 Start)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_1 StartInt_1)))
   (Start_8 String ("a" "" (str.++ Start_9 Start_6) (str.at Start_7 StartInt_4) (str.substr Start_10 StartInt StartInt) (str.replace Start Start_2 Start_5) (str.from_int StartInt_2)))
   (Start_6 String (y (str.++ Start_8 Start_1) (ite StartBool_4 Start Start_6)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool StartBool) (str.< Start_1 Start_2) (str.suffixof Start_4 Start_2) (str.contains Start_2 Start_2) (= Start_1 Start_1)))
   (Start_4 String (y (str.++ Start Start_1) (str.at Start_3 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_2)))
   (Start_1 String (y "a" "" "0" (str.++ Start_4 Start_3) (str.at Start_1 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_4) (str.replace Start_3 Start_2 Start_2) (ite StartBool_3 Start Start_3)))
   (Start_3 String ("a" x "b" y "" "1" "0" (str.++ Start Start_3) (ite StartBool_1 Start_3 Start)))
   (StartBool_3 Bool (true (str.prefixof Start Start_1) (str.suffixof Start Start_4) (str.contains Start_2 Start_1) (= Start Start_5)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start_1 Start_7 StartInt_5) (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.from_int (str.indexof "0" y 0)) "a")))

(check-synth)
