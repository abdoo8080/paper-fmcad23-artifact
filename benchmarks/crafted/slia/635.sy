(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (StartInt_4 Int) (Start_2 String) (Start_1 String) (Start_3 String) (StartInt_2 Int) (Start_4 String) (StartBool_1 Bool) (Start_9 String) (Start_6 String) (StartBool_2 Bool) (StartInt_1 Int) (Start_5 String) (StartInt_3 Int) (Start_8 String))
  ((Start String (y (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt) (str.replace Start Start_2 Start)))
   (StartInt Int (0 1 (str.len Start_8)))
   (StartBool Bool (true false (and StartBool_2 StartBool_2) (str.contains Start_8 Start_6) (= Start_1 Start_1) (= StartInt_1 StartInt_2) (<= StartInt_2 StartInt_1)))
   (Start_7 String ("" (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_4 Int (0 1 (str.to_int Start_3)))
   (Start_2 String (x (str.++ Start_3 Start_3) (str.replace Start_1 Start_3 Start) (str.from_int StartInt_1)))
   (Start_1 String (y "1" (str.at Start_2 StartInt_2) (str.replace Start_3 Start_1 Start_3)))
   (Start_3 String (y (str.++ Start_2 Start_2) (str.substr Start StartInt_1 StartInt) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 (str.indexof Start_4 Start_1 StartInt_1)))
   (Start_4 String ("a" (str.++ Start_5 Start) (str.at Start_3 StartInt_2) (str.replace Start_2 Start_6 Start)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool_2) (str.< Start_4 Start_2) (str.<= Start Start_6) (str.contains Start Start_3) (= Start_1 Start_2)))
   (Start_9 String (x "a" y "" "1" "b" "0" (ite StartBool_1 Start Start_2)))
   (Start_6 String (x (str.++ Start_2 Start_1) (str.at Start_6 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_3 Start_1 Start_4) (str.from_int StartInt_1)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_2 StartBool_2) (str.< Start_7 Start_5) (str.<= Start_3 Start_6) (str.prefixof Start_6 Start_8) (str.suffixof Start_3 Start_8) (= StartInt_1 StartInt_1) (<= StartInt_3 StartInt_1)))
   (StartInt_1 Int (1))
   (Start_5 String ("" "0" (ite StartBool_1 Start_3 Start_5)))
   (StartInt_3 Int (1 (str.to_int Start_4)))
   (Start_8 String (y "" "b" (str.substr Start_6 StartInt_4 StartInt_2) (str.replace Start_9 Start_4 Start_5) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" (str.at x 1) x)))

(check-synth)
