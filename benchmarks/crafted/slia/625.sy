(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (StartBool_4 Bool) (StartBool_5 Bool) (Start_9 String) (Start_1 String) (Start_3 String) (StartInt_2 Int) (Start_2 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_5 String) (Start_6 String) (Start_8 String) (StartBool_3 Bool) (StartInt_3 Int) (Start_4 String) (StartBool_2 Bool) (Start_7 String))
  ((Start String ("1" x "" "b" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start_1 Start_3)))
   (StartInt Int (1 0 (str.len Start)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool StartBool_3) (str.< Start_5 Start_5) (str.<= Start_4 Start_2) (str.suffixof Start_7 Start_5) (<= StartInt_3 StartInt_3)))
   (Start_10 String ("" x y))
   (StartBool_4 Bool (false true (and StartBool_5 StartBool_4) (str.< Start_5 Start_9) (str.prefixof Start_9 Start_10) (str.suffixof Start Start_7) (str.contains Start Start_10) (= StartInt_1 StartInt_2)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool_4) (str.prefixof Start_9 Start_7) (str.contains Start_7 Start_3) (= Start_1 Start_7)))
   (Start_9 String (y (str.at Start_1 StartInt_1) (str.replace Start_7 Start_5 Start_6) (str.from_int StartInt_2)))
   (Start_1 String (x (str.++ Start_3 Start_5) (str.at Start_6 StartInt)))
   (Start_3 String ("b" "1" (str.++ Start_1 Start_2) (str.at Start_3 StartInt) (ite StartBool Start Start_2)))
   (StartInt_2 Int (1))
   (Start_2 String (x (str.++ Start_3 Start) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_1 Start Start_2)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (str.suffixof Start_1 Start_4) (str.contains Start_2 Start) (<= StartInt_1 StartInt_3)))
   (StartInt_1 Int (1 0 (str.len Start_5) (str.to_int Start_2)))
   (Start_5 String (x (str.at Start_6 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_6 Start_4)))
   (Start_6 String ("1" "a" (str.++ Start_5 Start_3) (str.replace Start_6 Start_6 Start_4) (ite StartBool_1 Start_3 Start_3)))
   (Start_8 String ("b" (str.from_int StartInt)))
   (StartBool_3 Bool (false true (not StartBool_4) (str.< Start Start_6) (str.<= Start_5 Start_4) (str.suffixof Start_5 Start_5) (str.contains Start_8 Start_9) (<= StartInt_1 StartInt_2)))
   (StartInt_3 Int (0 (str.len Start_5)))
   (Start_4 String ("0" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_7 Start_5) (str.prefixof Start_4 Start_3) (= StartInt_3 StartInt)))
   (Start_7 String ("0" "b" x (str.from_int StartInt_2) (ite StartBool Start_4 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ (str.++ (str.replace y "1" "a") "1") x) 1)))

(check-synth)
