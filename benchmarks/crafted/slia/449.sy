(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_6 String) (StartBool_4 Bool) (StartBool_5 Bool) (Start_8 String) (Start_10 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_9 String) (StartInt_2 Int) (Start_12 String) (Start_4 String) (Start_11 String) (Start_3 String) (StartInt_6 Int) (StartInt_4 Int) (StartInt_7 Int) (Start_14 String) (StartBool_1 Bool) (StartBool_2 Bool) (Start_7 String) (Start_13 String) (StartInt_5 Int) (Start_5 String) (Start_2 String) (Start_1 String) (StartInt_1 Int) (Start_15 String))
  ((Start String (y (str.++ Start Start_1) (str.at Start StartInt_1) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start Start)))
   (StartInt Int (1 0 (str.len Start_3) (str.indexof Start_10 Start_10 StartInt_7) (str.to_int Start_2)))
   (StartBool Bool (true false (not StartBool_3) (str.<= Start_11 Start_13) (str.suffixof Start_12 Start_14) (= StartInt_4 StartInt)))
   (StartBool_6 Bool (false true (str.< Start_3 Start) (str.contains Start Start_10) (<= StartInt_1 StartInt_7)))
   (Start_6 String ("a" (str.++ Start_3 Start) (str.at Start_3 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_4) (str.replace Start_3 Start_1 Start_5) (ite StartBool_1 Start_4 Start_3)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_6 StartBool_5) (str.prefixof Start_13 Start_11) (str.suffixof Start_7 Start_10) (= Start_5 Start_14) (<= StartInt_5 StartInt_6)))
   (StartBool_5 Bool (false true (and StartBool_5 StartBool_3) (str.< Start_1 Start_13) (str.<= Start_10 Start_3) (str.contains Start_12 Start_6) (= StartInt StartInt_7)))
   (Start_8 String (y "1" (str.replace Start_5 Start_1 Start_5) (ite StartBool_2 Start_9 Start_3)))
   (Start_10 String ("0" (str.substr Start_5 StartInt_4 StartInt_4) (str.replace Start_9 Start_7 Start_9) (str.from_int StartInt_6)))
   (StartInt_3 Int (0 (str.indexof Start_13 Start_8 StartInt_3) (str.to_int Start_4)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_3 StartBool_1) (str.< Start_3 Start) (str.<= Start_5 Start_11) (str.suffixof Start_15 Start_6) (str.contains Start_10 Start_11) (= Start_3 Start_7) (= StartInt_1 StartInt_4)))
   (Start_9 String ("" (str.++ Start_8 Start_5) (str.at Start_10 StartInt_5) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 (str.len Start_2) (str.to_int Start_3)))
   (Start_12 String ("a" "b" "0" (str.++ Start_9 Start) (str.at Start_2 StartInt_4) (ite StartBool_2 Start_2 Start_6)))
   (Start_4 String ("a" (str.++ Start_3 Start_1) (str.at Start_5 StartInt_3) (str.substr Start_5 StartInt_1 StartInt_4) (str.replace Start_2 Start_1 Start_3)))
   (Start_11 String ("" (str.++ Start_7 Start_8) (str.substr Start_5 StartInt_3 StartInt_2) (str.replace Start_9 Start_6 Start_9) (ite StartBool Start_12 Start_2)))
   (Start_3 String ("0" "a" "1" (str.at Start_4 StartInt_2) (str.substr Start_1 StartInt StartInt_2) (str.replace Start_4 Start Start_3)))
   (StartInt_6 Int (0 1 (str.len Start_6) (str.indexof Start_11 Start_4 StartInt_1) (str.to_int Start_8)))
   (StartInt_4 Int (1 0 (str.len Start_6) (str.indexof Start_4 Start_1 StartInt_1)))
   (StartInt_7 Int (0 1 (str.to_int Start_13)))
   (Start_14 String ("0" "1" (str.++ Start_9 Start_8) (str.replace Start_6 Start_7 Start_9) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (str.< Start_7 Start_5) (str.<= Start_4 Start_4) (str.suffixof Start Start_4) (= Start_8 Start) (= StartInt_1 StartInt_3) (<= StartInt_5 StartInt_1)))
   (StartBool_2 Bool (false (str.< Start_7 Start_7) (str.suffixof Start Start) (str.contains Start_7 Start_2) (<= StartInt_1 StartInt_4)))
   (Start_7 String ("0" (str.++ Start_7 Start_13)))
   (Start_13 String ("0" "1" (str.substr Start_8 StartInt_4 StartInt_3) (str.from_int StartInt_7)))
   (StartInt_5 Int (1 (str.len Start_5) (str.indexof Start_8 Start_6 StartInt_3)))
   (Start_5 String (x "a" (str.at Start_13 StartInt_5) (str.replace Start_14 Start_11 Start_4)))
   (Start_2 String ("0" (str.++ Start Start_1) (str.at Start_10 StartInt_6) (ite StartBool_1 Start_11 Start_7)))
   (Start_1 String ("" (str.at Start_10 StartInt) (str.substr Start_3 StartInt_5 StartInt_3)))
   (StartInt_1 Int (1 0 (str.to_int Start_5)))
   (Start_15 String ("b" y (str.at Start_8 StartInt_1) (str.from_int StartInt_6) (ite StartBool_5 Start_7 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "1" "" "b") y)))

(check-synth)
