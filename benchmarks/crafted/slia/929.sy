(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_4 Bool) (StartBool_7 Bool) (Start_12 String) (StartBool_5 Bool) (StartBool_6 Bool) (StartBool_2 Bool) (StartInt_7 Int) (Start_7 String) (Start_6 String) (StartInt_1 Int) (Start_9 String) (StartBool_1 Bool) (Start_3 String) (StartInt_4 Int) (Start_2 String) (StartInt_5 Int) (Start_8 String) (StartInt_2 Int) (Start_1 String) (StartInt_3 Int) (Start_4 String) (Start_11 String) (Start_10 String) (StartInt_6 Int) (Start_5 String))
  ((Start String ("" (str.substr Start StartInt StartInt) (str.replace Start_1 Start_2 Start) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0 (str.indexof Start_1 Start StartInt_1)))
   (StartBool Bool (true false (and StartBool_2 StartBool_1) (str.< Start_5 Start_6) (str.<= Start_6 Start_7) (str.prefixof Start_7 Start) (= Start_7 Start_1) (= StartInt_4 StartInt_4)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_1) (str.<= Start_12 Start_8) (str.prefixof Start_6 Start_6) (str.suffixof Start_3 Start_6) (= StartInt StartInt_1) (<= StartInt StartInt_2)))
   (StartBool_4 Bool (false true (str.<= Start_10 Start_10) (str.suffixof Start_8 Start_10) (str.contains Start_6 Start_9) (= Start_1 Start_11) (<= StartInt StartInt_4)))
   (StartBool_7 Bool (false (not StartBool_7) (str.contains Start_9 Start_8) (<= StartInt StartInt_2)))
   (Start_12 String ("" (str.at Start_3 StartInt_2) (str.from_int StartInt_4)))
   (StartBool_5 Bool (true false (not StartBool_7) (and StartBool_4 StartBool_4) (str.< Start_5 Start_1) (str.<= Start_3 Start_1) (str.prefixof Start_5 Start_5) (= Start_9 Start) (= StartInt_3 StartInt_4) (<= StartInt_7 StartInt_3)))
   (StartBool_6 Bool (true false (not StartBool) (str.<= Start_5 Start_9) (str.suffixof Start_7 Start_7)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_4 StartBool) (str.< Start_3 Start_5) (str.prefixof Start Start_9) (str.suffixof Start_9 Start_5) (str.contains Start_2 Start_4) (= Start Start_5) (<= StartInt_4 StartInt_6)))
   (StartInt_7 Int (0 1))
   (Start_7 String (y (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_5 Start_1 Start_2) (str.from_int StartInt_5)))
   (Start_6 String ("1" "" "a" (str.substr Start_5 StartInt_2 StartInt_3) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_3)))
   (StartInt_1 Int (1 (str.indexof Start_2 Start_2 StartInt) (str.to_int Start_1)))
   (Start_9 String (y "" x "b" "1" "a" (str.++ Start_3 Start_1) (str.at Start_8 StartInt_5) (str.from_int StartInt_4) (ite StartBool_5 Start_8 Start_10)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.<= Start_3 Start) (str.suffixof Start_3 Start_1) (str.contains Start_1 Start_1) (= Start Start_3) (= StartInt_1 StartInt_1)))
   (Start_3 String ("a" (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_3 Start_2 Start_2) (str.from_int StartInt_1)))
   (StartInt_4 Int (0 (str.len Start_8) (str.indexof Start_4 Start_7 StartInt_3) (str.to_int Start)))
   (Start_2 String ("" "a" (str.at Start_2 StartInt_1)))
   (StartInt_5 Int (0 (str.len Start_2) (str.to_int Start_6)))
   (Start_8 String ("a" y "" "0" "b" (str.at Start_3 StartInt_1) (str.replace Start Start Start) (str.from_int StartInt_3) (ite StartBool_2 Start_8 Start_4)))
   (StartInt_2 Int (0 1 (str.indexof Start_4 Start_3 StartInt_3)))
   (Start_1 String ("" (str.at Start_1 StartInt) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0))
   (Start_4 String ("" x "a" (str.++ Start_5 Start_4) (str.at Start_4 StartInt_3) (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt_3) (ite StartBool Start Start_3)))
   (Start_11 String ("a" "b" (str.at Start_9 StartInt_3) (str.from_int StartInt_5)))
   (Start_10 String ("" (str.at Start_2 StartInt_2) (ite StartBool_6 Start_5 Start_1)))
   (StartInt_6 Int (0 (str.len Start_1)))
   (Start_5 String ("b" (str.replace Start_3 Start_1 Start_1) (ite StartBool_1 Start Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof "a" y) "" x)))

(check-synth)
