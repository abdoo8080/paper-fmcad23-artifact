(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_4 String) (Start_16 String) (Start_13 String) (StartInt_2 Int) (Start_1 String) (Start_8 String) (StartInt_4 Int) (Start_9 String) (Start_7 String) (Start_6 String) (Start_12 String) (StartBool_3 Bool) (StartBool_1 Bool) (Start_2 String) (Start_14 String) (Start_10 String) (Start_5 String) (StartInt_5 Int) (StartInt_1 Int) (StartInt_8 Int) (StartInt_7 Int) (StartInt_9 Int) (Start_3 String) (Start_15 String) (StartInt_3 Int) (StartInt_6 Int) (Start_11 String) (StartBool_2 Bool))
  ((Start String ("a" "0" (str.substr Start_1 StartInt StartInt_1) (str.replace Start Start_2 Start_1) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_2)))
   (StartBool Bool (false true (and StartBool_4 StartBool_1) (str.prefixof Start_4 Start_5) (str.contains Start Start_13) (<= StartInt_9 StartInt_6)))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool) (str.< Start_13 Start_3) (= Start_4 Start_12)))
   (Start_4 String ("0" (str.replace Start_2 Start Start_4) (str.from_int StartInt)))
   (Start_16 String ("b" "a" "" y))
   (Start_13 String (x (str.++ Start_1 Start_7) (str.replace Start_6 Start Start_6) (ite StartBool Start_11 Start_13)))
   (StartInt_2 Int (1 (str.len Start_5) (str.indexof Start_8 Start_7 StartInt)))
   (Start_1 String ("" x (str.++ Start_8 Start) (str.from_int StartInt_3) (ite StartBool_2 Start Start_16)))
   (Start_8 String ("a" (str.at Start_2 StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start_6)))
   (Start_9 String ("a" (str.substr Start_1 StartInt StartInt_5) (str.from_int StartInt_1) (ite StartBool Start_10 Start_7)))
   (Start_7 String (x (str.++ Start_2 Start_6) (str.replace Start_7 Start_3 Start_7) (ite StartBool Start_2 Start_5)))
   (Start_6 String (y (str.++ Start_4 Start_3) (str.substr Start_3 StartInt StartInt_2) (str.replace Start_3 Start_7 Start_2)))
   (Start_12 String ("1" "a" y (str.++ Start Start_1) (str.at Start_7 StartInt_3) (str.substr Start_1 StartInt_6 StartInt_7) (str.replace Start_7 Start_4 Start_13)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool_3) (str.< Start_9 Start_3) (str.<= Start_9 Start_1) (= Start_7 Start_1) (<= StartInt_7 StartInt_8)))
   (StartBool_1 Bool (true (str.<= Start Start_2) (str.prefixof Start Start_5) (str.suffixof Start_4 Start_6) (= Start_3 Start_4)))
   (Start_2 String ("b" "" (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_1 Start_4 Start_4) (ite StartBool_1 Start_1 Start_2)))
   (Start_14 String (x (str.++ Start Start_15) (str.at Start_8 StartInt_2) (str.substr Start_5 StartInt StartInt_2) (str.from_int StartInt_5) (ite StartBool Start_12 Start_13)))
   (Start_10 String ("1" (str.++ Start_6 Start_4) (str.at Start_8 StartInt_4) (str.replace Start_2 Start_9 Start_3) (ite StartBool_1 Start_5 Start_8)))
   (Start_5 String ("a" (str.++ Start_8 Start_8) (str.at Start_4 StartInt_2) (str.substr Start_2 StartInt_3 StartInt) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start_7)))
   (StartInt_5 Int (0 1 (str.len Start_3)))
   (StartInt_1 Int (1 0 (str.len Start_2) (str.indexof Start_8 Start_11 StartInt_5) (str.to_int Start_12)))
   (StartInt_8 Int (0 1 (str.len Start_9) (str.indexof Start_10 Start_12 StartInt_4)))
   (StartInt_7 Int (1 (str.indexof Start_4 Start_9 StartInt_2) (str.to_int Start_4)))
   (StartInt_9 Int (0 1 (str.indexof Start_1 Start_7 StartInt_3)))
   (Start_3 String (x "1" "" (str.at Start_2 StartInt_3) (str.substr Start_9 StartInt_2 StartInt) (str.replace Start_6 Start_3 Start_7)))
   (Start_15 String ("a" "" "b" y (str.++ Start_2 Start_12)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start_2 Start_3 StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start_14)))
   (Start_11 String ("1" (str.++ Start_12 Start_7) (str.substr Start_10 StartInt StartInt_5) (ite StartBool_2 Start_14 Start_6)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_3) (str.< Start_9 Start_14) (str.<= Start_7 Start) (str.contains Start_5 Start_3) (<= StartInt_7 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" x (str.++ x x))))

(check-synth)
