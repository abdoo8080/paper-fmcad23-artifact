(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_3 String) (Start_10 String) (StartInt_5 Int) (Start_11 String) (Start_2 String) (Start_1 String) (StartInt_7 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_5 String) (StartInt_2 Int) (StartInt_6 Int) (Start_7 String) (StartInt_1 Int) (Start_6 String) (StartInt_4 Int) (Start_9 String) (Start_4 String) (Start_8 String) (StartBool_2 Bool))
  ((Start String ("0" y "b" (str.replace Start Start_1 Start_2)))
   (StartInt Int (1 0 (str.len Start_7) (str.to_int Start_3)))
   (StartBool Bool (false true (str.< Start_5 Start_12) (str.suffixof Start_7 Start_9) (= Start_10 Start_3) (= StartInt_6 StartInt_3)))
   (Start_12 String ("1" (str.substr Start_11 StartInt_2 StartInt_3) (str.from_int StartInt_7) (ite StartBool_2 Start_7 Start)))
   (Start_3 String (y (str.++ Start_1 Start_11) (str.replace Start_11 Start_11 Start_6) (str.from_int StartInt)))
   (Start_10 String ("1" "b" (str.at Start_9 StartInt_1) (str.from_int StartInt_5)))
   (StartInt_5 Int (0 1 (str.to_int Start_9)))
   (Start_11 String ("1" (str.++ Start_6 Start_10) (str.substr Start_11 StartInt StartInt_4) (str.replace Start_10 Start_2 Start_1) (str.from_int StartInt_2)))
   (Start_2 String ("b"))
   (Start_1 String ("" (str.at Start_2 StartInt) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start_1 Start_3) (ite StartBool_1 Start_4 Start_5)))
   (StartInt_7 Int (1 0 (str.indexof Start_8 Start_11 StartInt_1)))
   (StartBool_1 Bool (false (and StartBool StartBool) (str.<= Start_9 Start_10) (str.prefixof Start_4 Start_9) (str.suffixof Start_10 Start) (= Start_8 Start_1)))
   (StartInt_3 Int (0 1))
   (Start_5 String ("1" (str.++ Start_6 Start_7) (str.at Start_4 StartInt_2) (str.substr Start_2 StartInt_2 StartInt_3)))
   (StartInt_2 Int (0 (str.indexof Start_3 Start_2 StartInt) (str.to_int Start_1)))
   (StartInt_6 Int (0 (str.to_int Start_10)))
   (Start_7 String ("b" "0" (str.from_int StartInt) (ite StartBool Start_3 Start_2)))
   (StartInt_1 Int (1 (str.len Start_2) (str.to_int Start_2)))
   (Start_6 String ("" (str.++ Start_3 Start_8) (str.replace Start_9 Start_4 Start) (str.from_int StartInt) (ite StartBool Start_6 Start_1)))
   (StartInt_4 Int (1 (str.indexof Start_7 Start_9 StartInt) (str.to_int Start_4)))
   (Start_9 String (y (str.at Start_7 StartInt)))
   (Start_4 String ("0" (str.++ Start_2 Start_5) (str.from_int StartInt_4)))
   (Start_8 String ("" "0" y (str.++ Start_1 Start_1) (ite StartBool_2 Start_3 Start_5)))
   (StartBool_2 Bool (false (str.<= Start_3 Start_5) (str.suffixof Start_6 Start_7) (= Start_3 Start_1) (<= StartInt_2 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "b" "b") x "b")))

(check-synth)
