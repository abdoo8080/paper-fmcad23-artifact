(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_6 String) (Start_2 String) (StartInt_5 Int) (StartInt_2 Int) (Start_4 String) (StartBool_1 Bool) (Start_3 String) (Start_5 String) (Start_1 String) (StartInt_6 Int) (StartBool_2 Bool) (StartInt_1 Int) (StartInt_4 Int) (StartInt_3 Int))
  ((Start String ("a" y "1" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_2)))
   (StartInt Int (1 0))
   (StartBool Bool (true (and StartBool_2 StartBool_2) (str.prefixof Start_2 Start_6) (str.suffixof Start_4 Start_3) (= StartInt_3 StartInt) (<= StartInt_1 StartInt_4)))
   (Start_7 String (y "" (str.++ Start_4 Start) (str.substr Start_2 StartInt_5 StartInt_3) (str.replace Start_7 Start_5 Start_7) (ite StartBool Start_1 Start)))
   (Start_6 String ("b" "" (str.++ Start_2 Start_1) (str.at Start_6 StartInt_4) (str.from_int StartInt_1) (ite StartBool_2 Start_7 Start_7)))
   (Start_2 String ("b" (str.++ Start_3 Start_1) (str.at Start_1 StartInt) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_1 Start_4 Start_4) (str.from_int StartInt_3)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_1 Start_3 StartInt_6) (str.to_int Start)))
   (StartInt_2 Int (1 (str.len Start_1) (str.to_int Start_2)))
   (Start_4 String ("b" (str.++ Start_1 Start_1) (ite StartBool_1 Start_4 Start_1)))
   (StartBool_1 Bool (true false (str.<= Start Start) (= Start_2 Start_3) (= StartInt StartInt_3) (<= StartInt_2 StartInt_3)))
   (Start_3 String ("a" "" (str.at Start StartInt) (str.replace Start Start_3 Start_1) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_5)))
   (Start_5 String (x "" y "a" (str.++ Start_5 Start_1) (str.at Start_2 StartInt_3) (str.substr Start_2 StartInt_1 StartInt_2) (ite StartBool Start Start_5)))
   (Start_1 String ("" (str.++ Start_5 Start_1) (str.from_int StartInt_3)))
   (StartInt_6 Int (1))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_1 StartBool_2) (str.< Start_2 Start_2) (str.prefixof Start_3 Start_5) (str.contains Start_1 Start_5) (= Start_2 Start_2) (= StartInt_3 StartInt_1) (<= StartInt_1 StartInt_2)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start_1 Start_5 StartInt_1)))
   (StartInt_4 Int (1 (str.to_int Start_1)))
   (StartInt_3 Int (0 (str.len Start_4) (str.indexof Start_4 Start_3 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.++ x x) y)))

(check-synth)
