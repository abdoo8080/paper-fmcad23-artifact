(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_4 String) (Start_7 String) (StartInt_3 Int) (Start_5 String) (StartInt_4 Int) (Start_6 String) (Start_8 String) (Start_13 String) (StartBool_3 Bool) (Start_1 String) (Start_15 String) (Start_9 String) (StartInt_2 Int) (StartInt_1 Int) (Start_3 String) (Start_12 String) (Start_11 String) (StartBool_4 Bool) (StartInt_6 Int) (Start_10 String) (Start_2 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_14 String) (StartInt_8 Int) (StartInt_5 Int) (StartInt_7 Int))
  ((Start String ("1" y "" (str.substr Start StartInt StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 0 (str.indexof Start_14 Start_2 StartInt_6)))
   (StartBool Bool (false true (str.< Start_8 Start_9) (str.<= Start_15 Start_9) (= StartInt_3 StartInt_2) (<= StartInt_1 StartInt_8)))
   (StartInt_9 Int (0 (str.len Start_4) (str.to_int Start_10)))
   (Start_4 String ("0" (str.++ Start_2 Start) (ite StartBool_4 Start_4 Start_6)))
   (Start_7 String ("b" "0" "" (str.++ Start_2 Start_4) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_7 Start_3 Start_8) (str.from_int StartInt_3) (ite StartBool_4 Start_3 Start)))
   (StartInt_3 Int (1 (str.to_int Start_1)))
   (Start_5 String ("1" (str.++ Start_3 Start_2) (str.replace Start_5 Start_5 Start_7) (str.from_int StartInt_4) (ite StartBool_3 Start_3 Start_4)))
   (StartInt_4 Int (0 1 (str.len Start_2) (str.indexof Start_1 Start_7 StartInt_2)))
   (Start_6 String (y "" (str.from_int StartInt) (ite StartBool_2 Start_1 Start_5)))
   (Start_8 String (y (str.++ Start_8 Start_8) (str.substr Start_9 StartInt StartInt_3) (str.replace Start_10 Start_4 Start_1) (ite StartBool_4 Start_3 Start_2)))
   (Start_13 String ("0" (str.++ Start_1 Start_5) (str.at Start StartInt_4) (str.substr Start_12 StartInt_1 StartInt_2) (str.replace Start Start_3 Start_11)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool) (str.< Start_1 Start_2) (str.prefixof Start_3 Start_2) (str.suffixof Start_1 Start_2) (= StartInt_2 StartInt_3) (<= StartInt StartInt_2)))
   (Start_1 String (x "0" "b" "" (str.++ Start_2 Start_3) (str.substr Start_4 StartInt_1 StartInt) (str.from_int StartInt)))
   (Start_15 String ("1" "" (str.substr Start StartInt_4 StartInt_4) (str.replace Start_1 Start Start_8) (ite StartBool_4 Start_2 Start_12)))
   (Start_9 String ("1" "0" "a" "" (str.++ Start_7 Start_2) (str.at Start_7 StartInt_3) (str.replace Start_2 Start_9 Start_6) (str.from_int StartInt_5) (ite StartBool_2 Start_9 Start_8)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_5 StartInt_3) (str.to_int Start_6)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_4 StartInt_2)))
   (Start_3 String (y "a" "b" "" (str.at Start_7 StartInt_5) (str.substr Start_11 StartInt StartInt_2) (str.replace Start_6 Start_12 Start_7) (str.from_int StartInt_1)))
   (Start_12 String ("" (str.++ Start Start_13) (ite StartBool_4 Start_13 Start_9)))
   (Start_11 String ("" (str.++ Start_1 Start_11) (str.at Start_8 StartInt_6) (str.replace Start_6 Start_6 Start_6) (ite StartBool Start_6 Start_6)))
   (StartBool_4 Bool (true false (not StartBool_3) (str.<= Start_7 Start_7) (str.contains Start_8 Start_2) (= StartInt_4 StartInt_3) (<= StartInt StartInt_4)))
   (StartInt_6 Int (1 0 (str.len Start_1) (str.indexof Start_12 Start_10 StartInt_2)))
   (Start_10 String ("0" "" x (str.++ Start_9 Start_7) (str.at Start_7 StartInt_4)))
   (Start_2 String ("" "0" (str.++ Start_4 Start_3) (str.at Start_10 StartInt)))
   (StartBool_2 Bool (true (not StartBool_3) (= StartInt_1 StartInt) (<= StartInt_1 StartInt_1)))
   (StartBool_1 Bool (true (str.< Start_9 Start_14) (= StartInt_4 StartInt)))
   (Start_14 String (x (str.at Start_12 StartInt_7) (str.substr Start_11 StartInt_3 StartInt_4) (str.replace Start_5 Start_1 Start_8) (ite StartBool_4 Start_6 Start_3)))
   (StartInt_8 Int (0 (str.indexof Start_12 Start_3 StartInt_9)))
   (StartInt_5 Int (0 (str.to_int Start_7)))
   (StartInt_7 Int (1 (str.len Start_8) (str.indexof Start_12 Start_6 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace (str.replace x "1" "a") "" (str.++ "1" "b")) "b" "a")))

(check-synth)
