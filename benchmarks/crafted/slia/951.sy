(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (Start_17 String) (Start_13 String) (Start_16 String) (Start_6 String) (Start_4 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_5 String) (StartInt_8 Int) (Start_11 String) (Start_2 String) (Start_7 String) (StartInt_5 Int) (StartBool_4 Bool) (StartInt_1 Int) (Start_8 String) (StartInt_2 Int) (Start_12 String) (Start_3 String) (StartInt_6 Int) (Start_1 String) (StartInt_7 Int) (Start_15 String) (StartBool_1 Bool) (StartInt_9 Int) (Start_9 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_14 String) (Start_10 String) (StartInt_10 Int))
  ((Start String ("a" "b" x "0" (str.++ Start_1 Start) (str.at Start StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (1 0 (str.indexof Start Start_2 StartInt_1)))
   (StartBool Bool (true false (not StartBool_4) (str.<= Start_9 Start_6) (= Start_11 Start_1) (= StartInt_9 StartInt_8)))
   (StartInt_11 Int (0 1 (str.len Start_1) (str.indexof Start_6 Start_5 StartInt_6)))
   (Start_17 String ("a" (str.replace Start_16 Start_16 Start_16) (str.from_int StartInt_11)))
   (Start_13 String (x (str.++ Start_12 Start_17)))
   (Start_16 String ("" y (str.++ Start_9 Start_9) (str.substr Start_14 StartInt_4 StartInt_2) (ite StartBool Start_8 Start_5)))
   (Start_6 String ("1" (str.++ Start Start_2) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt_5)))
   (Start_4 String ("1" "b" (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt_3 StartInt_2) (str.replace Start_5 Start_6 Start_5) (str.from_int StartInt_5) (ite StartBool_1 Start_2 Start_5)))
   (StartInt_3 Int (1 0 (str.len Start_1)))
   (StartBool_3 Bool (true false (str.< Start Start_1) (str.<= Start_1 Start_3) (str.prefixof Start_2 Start_4) (str.suffixof Start Start) (<= StartInt_3 StartInt_1)))
   (Start_5 String ("a" (str.at Start_7 StartInt_5) (str.substr Start_6 StartInt_4 StartInt) (str.replace Start_5 Start Start) (str.from_int StartInt_2) (ite StartBool_2 Start_7 Start_5)))
   (StartInt_8 Int (1 0 (str.len Start_3) (str.to_int Start_1)))
   (Start_11 String ("0" (str.replace Start Start_12 Start_7) (str.from_int StartInt_3)))
   (Start_2 String (y (ite StartBool_1 Start_1 Start)))
   (Start_7 String (y "1" (str.++ Start_4 Start_1) (str.at Start_7 StartInt_2) (str.substr Start_6 StartInt_4 StartInt_2) (str.replace Start_6 Start_3 Start_8) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_3)))
   (StartInt_5 Int (1 (str.len Start_6) (str.indexof Start_3 Start_1 StartInt_5) (str.to_int Start_1)))
   (StartBool_4 Bool (false true (str.suffixof Start_6 Start_5) (= Start_7 Start_3) (= StartInt_6 StartInt_7) (<= StartInt_3 StartInt_1)))
   (StartInt_1 Int (1 0 (str.to_int Start)))
   (Start_8 String ("b" (str.substr Start_3 StartInt_6 StartInt) (ite StartBool_3 Start_2 Start_6)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.indexof Start_1 Start StartInt_2) (str.to_int Start)))
   (Start_12 String ("1" "a" (str.++ Start_1 Start_13) (str.at Start_4 StartInt_5) (str.substr Start_14 StartInt_10 StartInt_3) (str.replace Start_6 Start_5 Start) (str.from_int StartInt_7)))
   (Start_3 String ("" (str.++ Start Start_1)))
   (StartInt_6 Int (0 (str.len Start_8) (str.indexof Start_7 Start StartInt_7) (str.to_int Start_2)))
   (Start_1 String (y (str.replace Start Start_1 Start)))
   (StartInt_7 Int (0 1 (str.len Start_4) (str.indexof Start_8 Start_4 StartInt_2) (str.to_int Start_3)))
   (Start_15 String ("a" "" y (str.replace Start_3 Start_1 Start_14) (ite StartBool_3 Start_16 Start_2)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_2 StartBool_3) (str.<= Start Start) (= StartInt_3 StartInt)))
   (StartInt_9 Int (1 (str.len Start_2) (str.to_int Start_11)))
   (Start_9 String ("0" "a" "1" y x (str.++ Start_4 Start_1) (str.at Start StartInt_3) (str.from_int StartInt_7) (ite StartBool_4 Start_8 Start_5)))
   (StartInt_4 Int (0 (str.len Start_9) (str.indexof Start_3 Start_6 StartInt_6)))
   (StartBool_2 Bool (false (str.suffixof Start_1 Start_4) (= Start_10 Start_2) (<= StartInt_4 StartInt_5)))
   (Start_14 String (y (str.++ Start_2 Start_2) (str.substr Start_3 StartInt_10 StartInt_5) (str.replace Start_11 Start_10 Start_1) (ite StartBool Start_13 Start_16)))
   (Start_10 String ("a" "1" (str.++ Start Start_8) (str.at Start_3 StartInt_2) (str.substr Start_5 StartInt_1 StartInt_6) (str.replace Start_1 Start_9 Start_5) (str.from_int StartInt_8) (ite StartBool_2 Start_5 Start_10)))
   (StartInt_10 Int (1 (str.len Start_15) (str.indexof Start_10 Start_3 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "" x "0") "0")))

(check-synth)
