(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartBool_3 Bool) (Start_11 String) (Start_9 String) (Start_5 String) (StartInt_4 Int) (Start_12 String) (StartInt_5 Int) (StartInt_6 Int) (StartInt_2 Int) (Start_1 String) (Start_10 String) (Start_2 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_6 String) (StartBool_4 Bool) (Start_3 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_4 String) (Start_8 String) (Start_7 String) (StartInt_7 Int))
  ((Start String (x "0" "a" (str.++ Start Start) (str.at Start_1 StartInt_1) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (0 1 (str.to_int Start_7)))
   (StartBool Bool (true (str.prefixof Start_4 Start_6) (str.suffixof Start_6 Start_5) (str.contains Start_10 Start_3) (= Start_6 Start_11)))
   (StartInt_8 Int (1 (str.indexof Start_6 Start_6 StartInt_7) (str.to_int Start_6)))
   (StartBool_3 Bool (true false (str.< Start_8 Start_2) (str.prefixof Start_4 Start_8) (str.suffixof Start Start) (str.contains Start_8 Start_5)))
   (Start_11 String ("b" (str.at Start StartInt_4) (str.substr Start_9 StartInt_8 StartInt_5) (str.replace Start_9 Start_4 Start_1) (ite StartBool_3 Start_7 Start_1)))
   (Start_9 String (y (str.at Start_2 StartInt)))
   (Start_5 String (y (str.++ Start_5 Start_2) (str.substr Start_8 StartInt_1 StartInt_6) (str.replace Start_7 Start Start_7) (str.from_int StartInt_3) (ite StartBool_1 Start_8 Start)))
   (StartInt_4 Int (1 0 (str.len Start_7)))
   (Start_12 String ("1" "0" "" (str.at Start_9 StartInt_8)))
   (StartInt_5 Int (0))
   (StartInt_6 Int (0 (str.indexof Start_2 Start_4 StartInt_1) (str.to_int Start)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_2 StartInt) (str.to_int Start)))
   (Start_1 String ("" (str.++ Start_1 Start_5) (str.at Start_2 StartInt) (str.substr Start_4 StartInt_4 StartInt_4) (str.replace Start_3 Start_6 Start_2) (ite StartBool Start_2 Start_1)))
   (Start_10 String (y (str.++ Start_3 Start_11) (str.substr Start_12 StartInt_5 StartInt_2) (str.replace Start_12 Start_11 Start_9) (str.from_int StartInt_3) (ite StartBool_4 Start_8 Start_9)))
   (Start_2 String (x (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_1) (str.suffixof Start_1 Start_2) (str.contains Start_2 Start_1) (<= StartInt_3 StartInt_3)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start Start StartInt_3) (str.to_int Start)))
   (Start_6 String ("" (str.at Start_1 StartInt_3) (str.substr Start_6 StartInt_5 StartInt_2) (str.from_int StartInt_6) (ite StartBool_2 Start Start_7)))
   (StartBool_4 Bool (true (str.<= Start Start_11) (= StartInt_7 StartInt_5)))
   (Start_3 String ("1" "" (str.substr Start_3 StartInt StartInt_2) (str.from_int StartInt_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_4 Start_2 StartInt_2) (str.to_int Start)))
   (StartBool_2 Bool (true false (str.<= Start_3 Start) (str.suffixof Start_2 Start_2) (str.contains Start_1 Start)))
   (Start_4 String ("" (str.++ Start_2 Start_3) (str.at Start StartInt_1) (str.from_int StartInt_1)))
   (Start_8 String ("" "b" (str.++ Start_7 Start_7) (str.from_int StartInt_3) (ite StartBool Start Start_9)))
   (Start_7 String ("0" (str.++ Start_6 Start_1) (str.substr Start_2 StartInt_2 StartInt_7) (str.replace Start Start_5 Start_2) (str.from_int StartInt_1)))
   (StartInt_7 Int (0 1 (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.len y))))

(check-synth)
