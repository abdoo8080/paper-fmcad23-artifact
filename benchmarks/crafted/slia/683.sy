(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_6 Int) (Start_11 String) (Start_9 String) (Start_2 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_4 String) (Start_12 String) (StartInt_2 Int) (Start_6 String) (StartInt_5 Int) (Start_1 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_3 String) (Start_10 String) (StartBool_4 Bool) (Start_7 String) (Start_5 String) (StartInt_4 Int) (Start_8 String))
  ((Start String ("" (str.substr Start StartInt_1 StartInt)))
   (StartInt Int (1 (str.indexof Start_5 Start_2 StartInt_4)))
   (StartBool Bool (false true (and StartBool_2 StartBool_3) (str.< Start_8 Start_7) (str.<= Start_3 Start_4) (str.suffixof Start_9 Start_4) (= StartInt_5 StartInt_3)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_1) (str.<= Start_8 Start) (str.prefixof Start_2 Start_5) (str.suffixof Start_12 Start_7) (= Start_7 Start_10) (= StartInt_1 StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start_5) (str.indexof Start Start_10 StartInt_5) (str.to_int Start_11)))
   (Start_11 String ("1" (str.++ Start_4 Start_2) (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_3) (ite StartBool_4 Start_8 Start_3)))
   (Start_9 String ("a" (str.++ Start_7 Start_9) (str.replace Start_10 Start_11 Start_5)))
   (Start_2 String ("b" "" (str.++ Start_7 Start_6) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_8 Start_6 Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.< Start_7 Start_7) (str.<= Start_7 Start_3) (str.contains Start_7 Start_6) (= StartInt_2 StartInt)))
   (StartInt_1 Int (1 (str.indexof Start Start StartInt_2)))
   (Start_4 String ("1" y "a" "b" "" "0" x (str.substr Start_2 StartInt_4 StartInt) (str.replace Start_4 Start_5 Start_7) (str.from_int StartInt_5)))
   (Start_12 String ("0" (str.at Start_1 StartInt_6) (str.substr Start StartInt_6 StartInt_2) (str.replace Start_9 Start_5 Start_6)))
   (StartInt_2 Int (0 1 (str.len Start) (str.indexof Start_1 Start StartInt) (str.to_int Start_1)))
   (Start_6 String ("0" (str.at Start_7 StartInt) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 (str.indexof Start_8 Start_4 StartInt_5) (str.to_int Start_4)))
   (Start_1 String (x (str.++ Start Start_2) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_2 Bool (true false (str.<= Start_3 Start_11) (str.prefixof Start_9 Start) (= Start_2 Start_5) (= StartInt_4 StartInt_1) (<= StartInt_6 StartInt_5)))
   (StartInt_3 Int (0 (str.len Start_3) (str.indexof Start Start_7 StartInt_4)))
   (Start_3 String ("0" (str.replace Start_4 Start_1 Start_5) (ite StartBool Start_2 Start_5)))
   (Start_10 String ("b" (str.++ Start_10 Start_8) (str.at Start_12 StartInt_2) (str.substr Start_3 StartInt StartInt_3) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_5)))
   (StartBool_4 Bool (true (str.prefixof Start_2 Start_1) (str.contains Start_11 Start_7) (= Start_10 Start_5)))
   (Start_7 String ("0" (str.++ Start_7 Start_3) (str.at Start_2 StartInt_3) (str.substr Start StartInt StartInt) (str.replace Start Start_2 Start_5)))
   (Start_5 String ("b" (str.++ Start_4 Start_1) (str.substr Start_3 StartInt_1 StartInt_2) (ite StartBool Start_1 Start_6)))
   (StartInt_4 Int (1 0 (str.len Start_5)))
   (Start_8 String (x "0" (str.++ Start_8 Start_7) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.replace "" y "b")))))

(check-synth)
