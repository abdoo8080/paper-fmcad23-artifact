(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (Start_18 String) (StartBool_8 Bool) (StartBool_7 Bool) (Start_20 String) (StartInt_10 Int) (Start_16 String) (StartInt_9 Int) (StartBool_4 Bool) (StartBool_1 Bool) (Start_6 String) (Start_5 String) (Start_17 String) (StartInt_5 Int) (Start_11 String) (StartInt_4 Int) (Start_7 String) (StartInt_1 Int) (Start_10 String) (StartBool_5 Bool) (Start_14 String) (Start_9 String) (StartBool_6 Bool) (Start_13 String) (StartInt_2 Int) (Start_3 String) (Start_19 String) (StartBool_2 Bool) (Start_8 String) (Start_4 String) (StartInt_7 Int) (Start_12 String) (StartInt_3 Int) (StartInt_6 Int) (StartInt_8 Int) (Start_15 String) (Start_2 String) (Start_1 String) (StartBool_3 Bool))
  ((Start String ("0" (str.++ Start_1 Start_1) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt StartInt_2) (str.replace Start_1 Start_3 Start_2) (ite StartBool Start_3 Start_1)))
   (StartInt Int (1 (str.len Start_8) (str.indexof Start_9 Start_14 StartInt_3)))
   (StartBool Bool (false (not StartBool_4) (str.prefixof Start_7 Start_9) (str.suffixof Start_15 Start_13) (= Start_11 Start_4) (<= StartInt_5 StartInt_4)))
   (StartInt_11 Int (0 1 (str.len Start_20) (str.indexof Start_1 Start_2 StartInt_3) (str.to_int Start_1)))
   (Start_18 String ("" y (str.++ Start_9 Start_5) (str.at Start_10 StartInt_2) (str.substr Start_8 StartInt_7 StartInt_4) (str.replace Start_17 Start_5 Start_6) (ite StartBool_5 Start_4 Start_19)))
   (StartBool_8 Bool (true false (str.< Start_18 Start_18) (str.<= Start_13 Start_13) (str.prefixof Start_9 Start_12) (str.contains Start_10 Start_15) (= Start_15 Start_9) (<= StartInt_2 StartInt_7)))
   (StartBool_7 Bool (true (not StartBool_8) (and StartBool_6 StartBool_5) (str.<= Start_12 Start_12) (str.contains Start_12 Start_16) (= Start_9 Start_6) (= StartInt_4 StartInt_9)))
   (Start_20 String ("b" (ite StartBool_5 Start_11 Start_7)))
   (StartInt_10 Int (1 (str.len Start_8)))
   (Start_16 String ("b" (str.at Start_10 StartInt_3) (str.from_int StartInt_8)))
   (StartInt_9 Int (0 (str.len Start_8) (str.to_int Start_4)))
   (StartBool_4 Bool (true false (and StartBool_5 StartBool_4) (str.< Start_9 Start_7) (str.prefixof Start_1 Start_6) (str.suffixof Start_8 Start_3) (= Start_16 Start_11) (<= StartInt_9 StartInt_6)))
   (StartBool_1 Bool (false (not StartBool_2) (str.prefixof Start_5 Start) (= Start_4 Start_3) (= StartInt StartInt_1) (<= StartInt_4 StartInt_5)))
   (Start_6 String (x (str.at Start_7 StartInt) (str.substr Start_7 StartInt_2 StartInt_1) (str.replace Start_7 Start_7 Start) (ite StartBool Start_7 Start_6)))
   (Start_5 String (x "a" "1" "0" (str.++ Start_11 Start_7) (str.at Start_12 StartInt_6) (str.from_int StartInt_3) (ite StartBool Start_10 Start_7)))
   (Start_17 String ("a" (str.++ Start_15 Start_9) (str.substr Start_5 StartInt_2 StartInt_9) (ite StartBool_7 Start_12 Start_1)))
   (StartInt_5 Int (1 (str.len Start_8) (str.indexof Start_8 Start_8 StartInt_3)))
   (Start_11 String (y (str.++ Start_13 Start_10) (str.from_int StartInt_8) (ite StartBool Start_2 Start_7)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start_2 Start StartInt_4) (str.to_int Start_6)))
   (Start_7 String (y (str.at Start_1 StartInt) (str.replace Start_4 Start_8 Start_2) (ite StartBool_1 Start_9 Start_9)))
   (StartInt_1 Int (1 (str.len Start_11) (str.to_int Start_10)))
   (Start_10 String ("b" y "1" (str.++ Start_3 Start_10) (str.at Start_1 StartInt_5) (str.substr Start StartInt_3 StartInt_1) (str.replace Start_7 Start_3 Start_6) (str.from_int StartInt_3)))
   (StartBool_5 Bool (true false (not StartBool_6) (str.< Start_2 Start_5) (str.<= Start_3 Start_2) (str.prefixof Start_15 Start_6) (str.contains Start_16 Start_2) (= Start_9 Start_1) (<= StartInt_6 StartInt_5)))
   (Start_14 String ("a" "1" (str.at Start_12 StartInt_7)))
   (Start_9 String (x "a" (str.from_int StartInt_3)))
   (StartBool_6 Bool (false (not StartBool_1) (and StartBool_3 StartBool_4) (str.< Start_9 Start_7) (str.contains Start_15 Start_17) (= StartInt_9 StartInt_8) (<= StartInt_10 StartInt_3)))
   (Start_13 String (y (str.substr Start_2 StartInt StartInt_3)))
   (StartInt_2 Int (1 (str.len Start_4) (str.indexof Start Start StartInt)))
   (Start_3 String ("b" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_3 Start_2 Start_3) (str.from_int StartInt_2) (ite StartBool Start_1 Start_2)))
   (Start_19 String ("" (str.++ Start_8 Start_6) (str.at Start_16 StartInt_8) (str.substr Start_6 StartInt_1 StartInt_7) (str.replace Start_6 Start_17 Start_3) (str.from_int StartInt_11)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_1) (str.< Start_6 Start_4) (str.contains Start_7 Start_10) (<= StartInt_4 StartInt_4)))
   (Start_8 String ("a" x y (str.at Start_4 StartInt) (str.substr Start StartInt_4 StartInt_2) (str.replace Start Start_6 Start_7) (str.from_int StartInt_4)))
   (Start_4 String ("a" (str.++ Start_5 Start_3) (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start Start_1 Start) (str.from_int StartInt_3)))
   (StartInt_7 Int (1 (str.len Start_4) (str.indexof Start_10 Start_2 StartInt_7) (str.to_int Start_6)))
   (Start_12 String ("1" x "0" (str.++ Start_11 Start_3) (str.at Start StartInt) (str.substr Start_5 StartInt_7 StartInt_2)))
   (StartInt_3 Int (1 0 (str.len Start_4) (str.to_int Start_6)))
   (StartInt_6 Int (0 (str.to_int Start_10)))
   (StartInt_8 Int (0 1 (str.to_int Start_1)))
   (Start_15 String ("0" "a" "b" (str.++ Start_13 Start_5) (str.substr Start_1 StartInt_6 StartInt_4) (str.from_int StartInt_7)))
   (Start_2 String ("0" (str.++ Start_7 Start_1) (str.at Start_9 StartInt_6) (str.substr Start_9 StartInt_3 StartInt_6) (str.replace Start_13 Start_5 Start_10) (str.from_int StartInt_1)))
   (Start_1 String ("a" "0" y "b" (str.replace Start_6 Start_10 Start_1) (str.from_int StartInt_7) (ite StartBool_3 Start_5 Start_12)))
   (StartBool_3 Bool (true (str.< Start_11 Start_6) (str.<= Start_8 Start_10) (str.suffixof Start_6 Start) (= Start Start_13) (= StartInt_4 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "b" y) "0" "b")))

(check-synth)
