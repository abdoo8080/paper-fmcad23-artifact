(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_13 String) (StartInt_7 Int) (Start_8 String) (Start_1 String) (Start_12 String) (StartInt_6 Int) (Start_11 String) (StartBool_4 Bool) (Start_10 String) (Start_4 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_9 String) (StartInt_5 Int) (StartInt_2 Int) (Start_3 String) (StartInt_3 Int) (Start_2 String) (StartBool_2 Bool) (Start_6 String) (Start_5 String) (Start_7 String) (StartInt_1 Int) (StartBool_3 Bool))
  ((Start String ("a" y "" "0" (str.++ Start Start_1) (str.at Start StartInt) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start Start)))
   (StartInt Int (0 (str.indexof Start Start_1 StartInt_4)))
   (StartBool Bool (true (not StartBool_5) (str.< Start_5 Start_1) (str.prefixof Start_12 Start_13) (str.suffixof Start_5 Start_5) (= Start_2 Start_13)))
   (StartBool_5 Bool (true false (str.<= Start_7 Start_9) (str.suffixof Start_11 Start_10) (str.contains Start_8 Start_7)))
   (Start_13 String ("" "b" (str.++ Start_1 Start_2) (str.at Start_10 StartInt_6) (str.substr Start_13 StartInt_2 StartInt_4) (str.replace Start_5 Start_10 Start_1)))
   (StartInt_7 Int (1 0 (str.len Start_11)))
   (Start_8 String ("" y "1" "0" (str.++ Start_2 Start_5) (str.at Start_12 StartInt_7) (str.from_int StartInt_4) (ite StartBool_4 Start_1 Start_5)))
   (Start_1 String ("1" (str.substr Start_5 StartInt_3 StartInt_1)))
   (Start_12 String ("a" (str.++ Start_5 Start_13) (str.at Start_7 StartInt_5) (str.substr Start_4 StartInt_6 StartInt) (ite StartBool_1 Start_3 Start_10)))
   (StartInt_6 Int (1 (str.len Start_2)))
   (Start_11 String ("1" (str.at Start_1 StartInt) (str.substr Start_8 StartInt_1 StartInt_6) (str.replace Start_7 Start_4 Start_8) (str.from_int StartInt_3)))
   (StartBool_4 Bool (true (and StartBool StartBool_3) (str.< Start_3 Start_10) (str.prefixof Start_11 Start_9) (str.contains Start_2 Start_7)))
   (Start_10 String (y "" (str.at Start StartInt_4) (ite StartBool_1 Start Start_4)))
   (Start_4 String (x "0" (str.++ Start_1 Start_4) (str.at Start_2 StartInt) (str.substr Start StartInt StartInt_2) (str.replace Start_1 Start_3 Start_3)))
   (StartBool_1 Bool (false true (str.prefixof Start_2 Start) (str.contains Start_3 Start_4) (= StartInt_2 StartInt_2) (<= StartInt_2 StartInt)))
   (StartInt_4 Int (0 (str.len Start_4) (str.indexof Start_13 Start_8 StartInt_1)))
   (Start_9 String ("" x (str.++ Start_7 Start_2) (str.replace Start_5 Start_10 Start_9) (ite StartBool_4 Start_8 Start_3)))
   (StartInt_5 Int (0 (str.len Start_3) (str.to_int Start_6)))
   (StartInt_2 Int (0 (str.len Start_2)))
   (Start_3 String (y (str.++ Start_4 Start_2) (str.at Start StartInt_2) (str.substr Start_2 StartInt_3 StartInt_2)))
   (StartInt_3 Int (1 (str.to_int Start_2)))
   (Start_2 String ("1" "0" (str.substr Start_2 StartInt_1 StartInt_4) (ite StartBool_2 Start_4 Start_3)))
   (StartBool_2 Bool (true (not StartBool) (str.<= Start_4 Start_4) (str.suffixof Start_4 Start_2) (= Start_5 Start_2) (= StartInt_3 StartInt_2)))
   (Start_6 String ("0" "" "b" x y "1" "a" (str.substr Start_1 StartInt_4 StartInt) (str.replace Start_7 Start_6 Start_6) (ite StartBool Start_6 Start_1)))
   (Start_5 String ("a" "0" (str.++ Start_2 Start_1) (str.at Start_4 StartInt_3) (str.substr Start_4 StartInt_5 StartInt_3)))
   (Start_7 String (y (str.++ Start_8 Start_8) (str.at Start StartInt_6) (str.replace Start_9 Start_6 Start_6) (ite StartBool_3 Start_4 Start_1)))
   (StartInt_1 Int (0 1 (str.to_int Start_10)))
   (StartBool_3 Bool (true (str.< Start_4 Start_10) (str.prefixof Start_6 Start_2) (str.suffixof Start_1 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "a" x "1") y "1")))

(check-synth)
