(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_15 String) (StartBool_3 Bool) (Start_13 String) (Start_8 String) (Start_14 String) (Start_10 String) (StartInt_5 Int) (Start_11 String) (Start_9 String) (Start_3 String) (StartInt_6 Int) (StartInt_1 Int) (StartInt_2 Int) (Start_2 String) (Start_7 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_5 String) (StartInt_7 Int) (Start_4 String) (StartInt_4 Int) (Start_6 String) (Start_1 String) (StartBool_2 Bool))
  ((Start String ("1" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_3 Start_1 Start_1)))
   (StartInt Int (0 (str.to_int Start_1)))
   (StartBool Bool (true (str.< Start_5 Start) (str.prefixof Start_9 Start) (str.contains Start_8 Start_10) (= Start_7 Start_3)))
   (Start_12 String ("0" y x (str.at Start_1 StartInt_3)))
   (Start_15 String ("0" (str.substr Start_1 StartInt_5 StartInt_7) (ite StartBool Start_4 Start_5)))
   (StartBool_3 Bool (false (not StartBool_3) (str.prefixof Start_11 Start_2) (str.contains Start_7 Start_11) (= Start_2 Start_5) (= StartInt_6 StartInt) (<= StartInt_1 StartInt_5)))
   (Start_13 String ("b" (str.++ Start_4 Start_1) (str.at Start_5 StartInt_5) (str.from_int StartInt_6)))
   (Start_8 String ("a" (str.++ Start_6 Start_4) (str.at Start_9 StartInt_1) (str.from_int StartInt_4)))
   (Start_14 String (y (str.replace Start_10 Start_1 Start_4) (ite StartBool_3 Start_15 Start_3)))
   (Start_10 String ("1" (str.at Start_6 StartInt_3) (str.replace Start_11 Start_2 Start_7) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_4 Start_6 StartInt_2) (str.to_int Start)))
   (Start_11 String ("" (str.++ Start_9 Start_12) (str.at Start_13 StartInt_1) (str.substr Start_11 StartInt_6 StartInt) (str.replace Start_7 Start_10 Start_14) (ite StartBool_3 Start_10 Start_9)))
   (Start_9 String ("a" x (str.++ Start_7 Start_6) (str.at Start_6 StartInt_2) (str.replace Start_2 Start Start)))
   (Start_3 String ("1" (str.substr Start_1 StartInt_2 StartInt_1) (str.from_int StartInt_3) (ite StartBool Start_1 Start_2)))
   (StartInt_6 Int (0 (str.indexof Start_7 Start_5 StartInt_3) (str.to_int Start_9)))
   (StartInt_1 Int (0 1))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_2 Start_1 StartInt_3) (str.to_int Start_2)))
   (Start_2 String (y (str.++ Start_1 Start) (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt_2 StartInt) (str.from_int StartInt_3) (ite StartBool_1 Start Start)))
   (Start_7 String (x (str.substr Start_5 StartInt_6 StartInt_7) (str.replace Start_1 Start_4 Start_2) (str.from_int StartInt_5)))
   (StartInt_3 Int (1 (str.to_int Start)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool) (str.< Start_5 Start_4) (str.contains Start_1 Start_4)))
   (Start_5 String ("a" (str.substr Start StartInt_3 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_7 Int (1 0 (str.len Start_2) (str.to_int Start_3)))
   (Start_4 String ("" (str.++ Start_3 Start_4) (str.from_int StartInt) (ite StartBool Start_5 Start_1)))
   (StartInt_4 Int (0 1 (str.len Start_6)))
   (Start_6 String ("" (str.++ Start_2 Start_3) (str.replace Start_5 Start_4 Start_1) (ite StartBool_2 Start_1 Start_2)))
   (Start_1 String ("1" "b" "0" (str.++ Start_4 Start) (str.substr Start_5 StartInt_1 StartInt_4) (ite StartBool_1 Start_3 Start)))
   (StartBool_2 Bool (false (str.< Start_2 Start_4) (str.<= Start_7 Start_2) (str.prefixof Start_8 Start_3) (str.suffixof Start_5 Start_6) (str.contains Start_8 Start_4) (= StartInt_1 StartInt_5) (<= StartInt_5 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.replace y "1" "0") "b")))

(check-synth)
