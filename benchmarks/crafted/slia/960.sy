(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_1 Bool) (Start_10 String) (Start_4 String) (StartInt_4 Int) (Start_5 String) (StartBool_2 Bool) (Start_9 String) (Start_2 String) (Start_6 String) (StartInt_7 Int) (Start_3 String) (Start_8 String) (Start_7 String) (StartBool_3 Bool) (StartBool_6 Bool) (StartBool_5 Bool) (Start_11 String) (StartInt_6 Int) (Start_1 String) (Start_13 String) (StartInt_3 Int) (StartInt_1 Int) (Start_14 String) (StartInt_5 Int) (Start_12 String) (StartInt_2 Int))
  ((Start String ("" (str.++ Start_1 Start)))
   (StartInt Int (1 (str.len Start_1) (str.indexof Start_14 Start_13 StartInt_3) (str.to_int Start_6)))
   (StartBool Bool (false true (not StartBool_6) (str.<= Start_14 Start_10) (str.suffixof Start_6 Start_12) (= StartInt_7 StartInt_6)))
   (StartBool_4 Bool (true false (not StartBool) (str.prefixof Start_2 Start_7) (str.suffixof Start_9 Start_2) (str.contains Start_6 Start_2)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (str.< Start Start_4) (str.<= Start_3 Start_5) (str.prefixof Start_5 Start_3) (str.contains Start_5 Start_2)))
   (Start_10 String (y "b" "1" "a" (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt_2 StartInt)))
   (Start_4 String ("" (str.replace Start_2 Start_4 Start_4) (ite StartBool_2 Start_3 Start_2)))
   (StartInt_4 Int (0 1 (str.len Start) (str.indexof Start Start_3 StartInt_3) (str.to_int Start_3)))
   (Start_5 String (x "1"))
   (StartBool_2 Bool (false true (not StartBool_3) (str.<= Start_4 Start_6) (str.prefixof Start Start_6) (str.suffixof Start_2 Start_5) (str.contains Start_3 Start) (= Start_1 Start) (= StartInt StartInt) (<= StartInt_3 StartInt_4)))
   (Start_9 String ("b" (str.++ Start_10 Start_4) (str.replace Start_10 Start_3 Start_11) (str.from_int StartInt_2)))
   (Start_2 String ("b" (str.++ Start_2 Start_3) (str.at Start_3 StartInt) (str.substr Start_2 StartInt_3 StartInt_2) (ite StartBool_1 Start_2 Start_3)))
   (Start_6 String ("b" (str.++ Start_2 Start_4) (str.at Start_5 StartInt_2) (str.replace Start_7 Start_3 Start_6)))
   (StartInt_7 Int (1 0 (str.len Start_3)))
   (Start_3 String (y "" (str.++ Start_3 Start_2) (str.at Start_3 StartInt_7) (str.replace Start_1 Start_10 Start_6) (ite StartBool_3 Start_12 Start_1)))
   (Start_8 String (y "1" "0" (str.++ Start_5 Start_6) (str.substr Start StartInt_4 StartInt) (str.from_int StartInt_1) (ite StartBool_4 Start_2 Start_2)))
   (Start_7 String ("0" "" (str.from_int StartInt_2) (ite StartBool_2 Start_8 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_5) (= Start_9 Start_4) (= StartInt_2 StartInt_6)))
   (StartBool_6 Bool (true false (not StartBool_1) (and StartBool_4 StartBool_2) (str.suffixof Start_4 Start_7) (= StartInt StartInt_6) (<= StartInt_2 StartInt_3)))
   (StartBool_5 Bool (false (not StartBool_2) (and StartBool_3 StartBool_5) (str.<= Start_11 Start_7) (str.prefixof Start_11 Start_6) (str.contains Start_8 Start_6) (<= StartInt_6 StartInt_6)))
   (Start_11 String (y "0" (str.substr Start_9 StartInt_5 StartInt_5) (ite StartBool_2 Start_7 Start_7)))
   (StartInt_6 Int (0 1 (str.to_int Start_7)))
   (Start_1 String (y "1" "b" "0" (str.at Start_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start Start_2)))
   (Start_13 String ("a" (str.at Start_14 StartInt_6) (str.from_int StartInt_7) (ite StartBool_3 Start_7 Start_13)))
   (StartInt_3 Int (0 1 (str.to_int Start_4)))
   (StartInt_1 Int (1 (str.indexof Start_12 Start_9 StartInt_5) (str.to_int Start_14)))
   (Start_14 String (y (str.substr Start_10 StartInt_1 StartInt_7) (str.replace Start_14 Start_9 Start_10)))
   (StartInt_5 Int (0 (str.len Start_9) (str.to_int Start_8)))
   (Start_12 String ("0" "" (str.++ Start_6 Start_8) (str.replace Start_4 Start_1 Start_13) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.at x 0) y)))

(check-synth)
