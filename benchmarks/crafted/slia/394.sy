(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_8 String) (StartBool_1 Bool) (Start_12 String) (Start_14 String) (Start_4 String) (Start_5 String) (Start_11 String) (StartInt_8 Int) (StartBool_2 Bool) (Start_2 String) (Start_6 String) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int) (Start_10 String) (StartInt_6 Int) (StartInt_1 Int) (StartInt_5 Int) (StartInt_7 Int) (Start_15 String) (StartInt_3 Int) (Start_1 String) (Start_7 String) (StartInt_10 Int) (Start_9 String) (StartInt_9 Int))
  ((Start String ("a" y (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1 0 (str.len Start_14) (str.to_int Start_3)))
   (StartBool Bool (false true (not StartBool_1) (str.< Start_15 Start_8) (<= StartInt_9 StartInt_2)))
   (Start_13 String ("0" (str.substr Start_9 StartInt_8 StartInt_7) (str.replace Start_4 Start_2 Start_7) (str.from_int StartInt_6)))
   (Start_8 String ("a" "b" (str.++ Start Start_1) (str.substr Start_8 StartInt_4 StartInt_5) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_5)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_1) (str.< Start_3 Start_5) (str.<= Start_2 Start_6) (str.contains Start_7 Start_2) (= Start_3 Start_3) (= StartInt StartInt_3) (<= StartInt_2 StartInt)))
   (Start_12 String (x (str.at Start_9 StartInt_1) (str.replace Start_13 Start_6 Start_14)))
   (Start_14 String ("a" "b" (str.replace Start_9 Start_8 Start_9) (ite StartBool Start_12 Start)))
   (Start_4 String ("b" "a" "" y (str.++ Start_4 Start_1) (str.replace Start_5 Start_5 Start_5) (str.from_int StartInt_1)))
   (Start_5 String ("0" y "1" (str.++ Start_3 Start_2) (str.at Start_4 StartInt_1) (str.replace Start_5 Start_1 Start_2)))
   (Start_11 String ("1" "a" (str.at Start_12 StartInt_3) (ite StartBool Start_5 Start_14)))
   (StartInt_8 Int (1 0 (str.indexof Start_13 Start_5 StartInt_2) (str.to_int Start_6)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_1 StartBool_2) (str.<= Start_3 Start_6) (str.prefixof Start_9 Start_1) (str.contains Start_3 Start) (<= StartInt StartInt)))
   (Start_2 String ("a" "0" "" y (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt_2)))
   (Start_6 String ("b" (str.replace Start_6 Start_1 Start_3) (ite StartBool_1 Start_4 Start_2)))
   (Start_3 String (x (str.++ Start Start_4) (str.substr Start_2 StartInt_3 StartInt) (ite StartBool Start_1 Start_5)))
   (StartInt_2 Int (1 (str.indexof Start_3 Start_1 StartInt) (str.to_int Start_1)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.indexof Start Start_1 StartInt_3)))
   (Start_10 String (x (str.replace Start_11 Start_10 Start_12) (str.from_int StartInt_5) (ite StartBool_2 Start_8 Start_12)))
   (StartInt_6 Int (1 (str.len Start_4) (str.indexof Start_7 Start_5 StartInt)))
   (StartInt_1 Int (0 (str.len Start_5) (str.indexof Start_7 Start_8 StartInt_7) (str.to_int Start_1)))
   (StartInt_5 Int (0 1 (str.len Start_9) (str.indexof Start_5 Start_9 StartInt_6)))
   (StartInt_7 Int (1 0 (str.len Start_3) (str.to_int Start_5)))
   (Start_15 String ("1" (str.at Start_4 StartInt_8) (str.replace Start_3 Start_3 Start_5) (str.from_int StartInt_7)))
   (StartInt_3 Int (0 (str.to_int Start_2)))
   (Start_1 String ("1" "" (str.at Start_10 StartInt_5) (ite StartBool Start_5 Start_7)))
   (Start_7 String ("1" (str.++ Start_5 Start) (str.at Start_8 StartInt_4) (str.substr Start_7 StartInt_2 StartInt)))
   (StartInt_10 Int (1 (str.len Start_8) (str.indexof Start_9 Start_10 StartInt_10) (str.to_int Start)))
   (Start_9 String ("a" "b" x (str.at Start_5 StartInt_1) (str.substr Start StartInt StartInt_5) (str.from_int StartInt)))
   (StartInt_9 Int (1 0 (str.len Start_10) (str.indexof Start Start_12 StartInt_10) (str.to_int Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "" "b") "0")))

(check-synth)
