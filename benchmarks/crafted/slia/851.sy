(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_9 String) (StartInt_6 Int) (StartInt_7 Int) (Start_10 String) (StartBool_5 Bool) (Start_7 String) (Start_3 String) (Start_8 String) (StartInt_2 Int) (StartInt_1 Int) (StartInt_3 Int) (StartInt_4 Int) (StartBool_4 Bool) (Start_2 String) (Start_1 String) (StartBool_1 Bool) (Start_6 String) (Start_5 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_11 String) (Start_4 String) (StartBool_3 Bool))
  ((Start String (x y "" (str.at Start StartInt_1) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start) (str.indexof Start_1 Start StartInt) (str.to_int Start)))
   (StartBool Bool (false (str.prefixof Start_6 Start_12) (<= StartInt_6 StartInt_6)))
   (Start_12 String ("0" "" (str.at Start_10 StartInt_3) (str.substr Start_8 StartInt_5 StartInt_3) (str.replace Start_2 Start_5 Start_6)))
   (Start_9 String ("a" "1" (str.++ Start_6 Start_6) (str.at Start StartInt) (str.substr Start_10 StartInt StartInt) (str.from_int StartInt_7)))
   (StartInt_6 Int (0 (str.len Start_7)))
   (StartInt_7 Int (0 (str.len Start_1) (str.indexof Start_5 Start_4 StartInt) (str.to_int Start_7)))
   (Start_10 String ("b" "0" x (str.++ Start_9 Start_5) (str.substr Start_9 StartInt_6 StartInt_4) (str.replace Start_5 Start_3 Start_9)))
   (StartBool_5 Bool (false true (str.< Start_3 Start_5) (str.<= Start_5 Start_4) (str.suffixof Start_2 Start_7) (str.contains Start_4 Start_10) (= Start_6 Start_4)))
   (Start_7 String (y x (str.++ Start_3 Start_9) (str.at Start_1 StartInt_1) (str.substr Start_5 StartInt_2 StartInt_2) (str.from_int StartInt_4) (ite StartBool_5 Start_4 Start_6)))
   (Start_3 String ("" "a" "0" x "b" (str.++ Start_9 Start_11) (str.at Start_12 StartInt) (str.replace Start_1 Start_12 Start_4)))
   (Start_8 String (y (str.at Start_5 StartInt_2) (str.substr Start_5 StartInt StartInt_4) (str.replace Start_5 Start_8 Start_8) (str.from_int StartInt_4) (ite StartBool_4 Start Start_5)))
   (StartInt_2 Int (1 0 (str.indexof Start_9 Start_10 StartInt_4) (str.to_int Start_9)))
   (StartInt_1 Int (1 0 (str.len Start)))
   (StartInt_3 Int (1 (str.len Start_8) (str.indexof Start_5 Start StartInt)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.to_int Start_5)))
   (StartBool_4 Bool (false true (not StartBool) (and StartBool StartBool_3) (str.< Start Start_4) (str.<= Start_6 Start_5) (str.suffixof Start_1 Start_7) (str.contains Start_8 Start_1) (= StartInt StartInt_2) (<= StartInt_3 StartInt_5)))
   (Start_2 String (x (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_3 Start_1 Start_3) (ite StartBool_1 Start Start_1)))
   (Start_1 String ("" (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_1 Start_2)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.< Start_3 Start) (str.prefixof Start_3 Start_4) (str.suffixof Start Start_2) (str.contains Start_5 Start_3) (= Start Start_4) (= StartInt_2 StartInt)))
   (Start_6 String (y (str.++ Start_2 Start_7) (str.substr Start_9 StartInt_6 StartInt_6)))
   (Start_5 String ("a" "0" "b" (str.++ Start Start) (ite StartBool_2 Start_4 Start_2)))
   (StartBool_2 Bool (false true (not StartBool_3) (str.< Start_1 Start_2) (str.contains Start_5 Start_4) (= StartInt_4 StartInt_1)))
   (StartInt_5 Int (0 1 (str.to_int Start_2)))
   (Start_11 String (x (str.++ Start_8 Start_3) (str.at Start StartInt_5)))
   (Start_4 String ("b" "0" (str.++ Start_2 Start) (str.replace Start_4 Start Start_2)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_2) (str.prefixof Start_1 Start) (str.contains Start_3 Start) (= StartInt StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace x "0" x) (str.len x))))

(check-synth)
