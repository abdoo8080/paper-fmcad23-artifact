(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_8 Int) (StartInt_1 Int) (StartInt_6 Int) (Start_13 String) (Start_5 String) (StartBool_1 Bool) (Start_4 String) (StartInt_4 Int) (Start_2 String) (Start_9 String) (StartBool_2 Bool) (Start_3 String) (StartInt_3 Int) (StartInt_2 Int) (StartInt_7 Int) (Start_10 String) (Start_1 String) (StartBool_3 Bool) (Start_8 String) (Start_11 String) (StartInt_5 Int) (Start_7 String) (Start_6 String))
  ((Start String (x "1" (str.at Start StartInt_1) (str.replace Start Start Start_1) (ite StartBool Start Start_2)))
   (StartInt Int (0 (str.to_int Start_5)))
   (StartBool Bool (true false (str.< Start_10 Start_7) (str.<= Start_10 Start_4) (str.prefixof Start_7 Start_6) (str.contains Start_12 Start_4) (= Start_12 Start_5) (= StartInt StartInt_8)))
   (Start_12 String ("1" "b" "" x (str.++ Start_7 Start) (str.at Start_4 StartInt_3) (str.replace Start_5 Start_3 Start_13) (ite StartBool_2 Start_11 Start_2)))
   (StartInt_8 Int (1 (str.len Start_3) (str.indexof Start_10 Start_5 StartInt_5) (str.to_int Start_8)))
   (StartInt_1 Int (1 0 (str.indexof Start_5 Start_11 StartInt_6) (str.to_int Start_1)))
   (StartInt_6 Int (1 (str.len Start_1)))
   (Start_13 String ("" "0" "a" y (str.++ Start_1 Start_13) (str.at Start_13 StartInt_3) (str.substr Start_12 StartInt_6 StartInt_5) (str.replace Start_9 Start_9 Start_4) (str.from_int StartInt_6)))
   (Start_5 String ("" (str.++ Start_3 Start_5) (str.at Start StartInt_5) (str.substr Start_9 StartInt_3 StartInt_6) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false true (and StartBool_3 StartBool_2) (str.< Start_4 Start_8) (str.prefixof Start_5 Start_3) (<= StartInt_2 StartInt)))
   (Start_4 String (x "1" (str.++ Start_3 Start_5) (str.at Start_2 StartInt) (str.replace Start_6 Start_3 Start_7) (ite StartBool_2 Start_4 Start)))
   (StartInt_4 Int (0 1 (str.indexof Start_8 Start_10 StartInt_1) (str.to_int Start_10)))
   (Start_2 String ("1" "a" "" (str.++ Start_2 Start_2) (str.at Start_1 StartInt_2) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_4)))
   (Start_9 String ("1" (str.++ Start Start) (str.substr Start_6 StartInt_2 StartInt_2) (str.from_int StartInt_3)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_3) (str.< Start_7 Start_8) (str.suffixof Start_1 Start_9) (str.contains Start_7 Start_8) (<= StartInt_2 StartInt_1)))
   (Start_3 String ("0" (str.++ Start_1 Start_1) (str.at Start_6 StartInt_7) (str.replace Start_6 Start_3 Start_3)))
   (StartInt_3 Int (1 0 (str.indexof Start_10 Start StartInt_3)))
   (StartInt_2 Int (1 (str.len Start_4)))
   (StartInt_7 Int (0 1 (str.to_int Start_4)))
   (Start_10 String ("" x "0" (str.substr Start_2 StartInt StartInt_2) (str.replace Start Start_7 Start_7) (str.from_int StartInt_4) (ite StartBool_1 Start_7 Start_3)))
   (Start_1 String (y (str.from_int StartInt_6) (ite StartBool_2 Start_5 Start_9)))
   (StartBool_3 Bool (true false (str.< Start_3 Start_1) (str.suffixof Start_2 Start_6) (= StartInt StartInt_5) (<= StartInt_1 StartInt)))
   (Start_8 String ("b" (str.at Start_3 StartInt_3) (str.substr Start StartInt_5 StartInt_4) (str.replace Start_9 Start_1 Start_9)))
   (Start_11 String ("b" (str.at Start_6 StartInt_4) (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_8 Start_10 Start_7) (ite StartBool_2 Start_3 Start_7)))
   (StartInt_5 Int (0 1 (str.indexof Start_3 Start_8 StartInt_2)))
   (Start_7 String ("a" (str.++ Start_5 Start_7) (str.substr Start_3 StartInt_3 StartInt) (str.replace Start_9 Start_7 Start_6)))
   (Start_6 String ("1" (str.at Start_3 StartInt_1) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.at "a" (str.len x)) y)))

(check-synth)
