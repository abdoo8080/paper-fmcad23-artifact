(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_9 Bool) (Start_1 String) (StartBool_2 Bool) (StartBool_6 Bool) (StartInt_9 Int) (StartBool_8 Bool) (StartBool_4 Bool) (Start_8 String) (Start_3 String) (StartInt_3 Int) (Start_6 String) (Start_5 String) (StartInt_5 Int) (Start_12 String) (StartBool_5 Bool) (StartInt_1 Int) (Start_2 String) (Start_17 String) (Start_7 String) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_6 Int) (StartBool_1 Bool) (Start_9 String) (StartInt_4 Int) (Start_11 String) (Start_10 String) (StartInt_7 Int) (Start_4 String) (Start_14 String) (Start_15 String) (StartInt_8 Int) (StartBool_7 Bool) (Start_13 String) (Start_16 String))
  ((Start String ("" (str.++ Start_1 Start_1) (str.from_int StartInt) (ite StartBool_1 Start Start)))
   (StartInt Int (0 (str.to_int Start_5)))
   (StartBool Bool (false (not StartBool_1) (str.< Start_8 Start_13) (str.<= Start Start_2) (str.suffixof Start_9 Start_15) (str.contains Start_1 Start_9) (= Start_17 Start_13) (<= StartInt_7 StartInt_2)))
   (StartBool_9 Bool (false true (not StartBool) (str.< Start_9 Start_11) (str.prefixof Start_1 Start_14) (str.suffixof Start_17 Start_5) (= Start_10 Start_11)))
   (Start_1 String ("" "1" (str.at Start_7 StartInt_2)))
   (StartBool_2 Bool (false (not StartBool_4) (and StartBool_4 StartBool_7) (str.< Start_16 Start_13) (str.contains Start_16 Start_7) (= Start_6 Start_8) (= StartInt_7 StartInt_2)))
   (StartBool_6 Bool (true (and StartBool StartBool_3) (str.< Start_1 Start_4) (str.<= Start_16 Start_8) (str.prefixof Start Start_11) (str.contains Start_1 Start_1) (= Start Start_10)))
   (StartInt_9 Int (1 (str.indexof Start_15 Start_4 StartInt_5) (str.to_int Start_15)))
   (StartBool_8 Bool (true false (not StartBool_1) (str.prefixof Start_7 Start_16) (str.suffixof Start_14 Start_3) (str.contains Start Start_5) (= StartInt_9 StartInt) (<= StartInt_4 StartInt)))
   (StartBool_4 Bool (false true (not StartBool_2) (= Start_1 Start_5)))
   (Start_8 String (y (ite StartBool_4 Start_3 Start)))
   (Start_3 String ("" "0" (str.at Start_1 StartInt_1) (str.replace Start_8 Start_8 Start_3)))
   (StartInt_3 Int (1 (str.len Start_5) (str.to_int Start_6)))
   (Start_6 String ("" y (str.substr Start_5 StartInt_1 StartInt) (str.replace Start_1 Start_5 Start_4)))
   (Start_5 String ("b" "a" (str.substr Start_5 StartInt_2 StartInt_4) (str.replace Start_2 Start Start_2) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_1)))
   (StartInt_5 Int (0 (str.len Start_8) (str.indexof Start_6 Start_6 StartInt_6) (str.to_int Start)))
   (Start_12 String (x (str.++ Start_9 Start_8) (str.from_int StartInt_3) (ite StartBool_6 Start_6 Start_10)))
   (StartBool_5 Bool (false (not StartBool_6) (str.< Start_5 Start_8) (str.<= Start_1 Start_9) (str.prefixof Start_2 Start_1) (<= StartInt_5 StartInt_2)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start Start_1 StartInt) (str.to_int Start_3)))
   (Start_2 String ("a" (str.substr Start StartInt_3 StartInt_4) (str.from_int StartInt) (ite StartBool_5 Start_1 Start_3)))
   (Start_17 String ("" "0" "a" y "1" "b" x (str.at Start_14 StartInt_2) (str.substr Start_6 StartInt_1 StartInt_7) (str.from_int StartInt_8) (ite StartBool_9 Start_3 Start_1)))
   (Start_7 String ("" "a" x (str.at Start_8 StartInt_3) (str.replace Start_4 Start_5 Start_8) (str.from_int StartInt_2)))
   (StartInt_2 Int (1 (str.indexof Start Start_2 StartInt_2) (str.to_int Start_4)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_2) (str.< Start_6 Start_1) (str.<= Start Start_6) (str.prefixof Start_1 Start_5) (str.suffixof Start_5 Start_3) (<= StartInt_2 StartInt_3)))
   (StartInt_6 Int (1 (str.len Start_8) (str.indexof Start_1 Start_7 StartInt_5) (str.to_int Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_1) (str.< Start Start_2) (str.<= Start_1 Start) (str.suffixof Start_1 Start_2) (str.contains Start_3 Start_3) (= Start_4 Start_1) (<= StartInt StartInt_1)))
   (Start_9 String ("0" (str.++ Start_10 Start_10) (str.replace Start_11 Start_2 Start_11) (str.from_int StartInt_6) (ite StartBool_2 Start_12 Start_6)))
   (StartInt_4 Int (0 1 (str.indexof Start_7 Start_6 StartInt_1)))
   (Start_11 String ("1" "b" "" (str.++ Start_13 Start_5) (str.substr Start_14 StartInt_1 StartInt_7) (str.from_int StartInt_2)))
   (Start_10 String ("0" (str.substr Start_13 StartInt_6 StartInt_2) (ite StartBool_8 Start_4 Start_16)))
   (StartInt_7 Int (1 0 (str.len Start_10) (str.to_int Start_7)))
   (Start_4 String (y (str.replace Start_5 Start_3 Start_3) (ite StartBool_3 Start Start_6)))
   (Start_14 String ("1" "b" (str.++ Start_7 Start_3)))
   (Start_15 String ("a" (str.++ Start_7 Start_11) (str.at Start_9 StartInt_8) (str.substr Start_7 StartInt_6 StartInt) (str.from_int StartInt_8)))
   (StartInt_8 Int (0))
   (StartBool_7 Bool (false (str.<= Start_14 Start_8) (= StartInt StartInt_3)))
   (Start_13 String ("0" "a" (str.++ Start_6 Start_3) (str.at Start_15 StartInt) (str.substr Start_14 StartInt_5 StartInt_6) (str.from_int StartInt_5) (ite StartBool_7 Start_10 Start_2)))
   (Start_16 String ("" (str.replace Start_10 Start_13 Start) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.indexof y "1" 1))))

(check-synth)
