(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_8 String) (Start_7 String) (StartInt_4 Int) (StartInt_1 Int) (Start_2 String) (StartBool_1 Bool) (Start_3 String) (StartInt_2 Int) (StartInt_5 Int) (Start_6 String) (Start_4 String) (StartInt_3 Int) (Start_1 String) (StartBool_2 Bool) (Start_5 String))
  ((Start String ("0" "b" "a" (str.++ Start_1 Start) (str.substr Start StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt Int (0 (str.indexof Start_1 Start_2 StartInt_1)))
   (StartBool Bool (true (str.prefixof Start_2 Start_3) (str.suffixof Start_4 Start_5) (= Start_5 Start_1) (= StartInt_3 StartInt_1)))
   (Start_9 String ("0" "" "a" "b" (str.at Start_4 StartInt_2) (str.replace Start_5 Start Start_7) (str.from_int StartInt_4)))
   (Start_8 String ("0" (str.replace Start_6 Start_6 Start_5) (str.from_int StartInt)))
   (Start_7 String ("0" (str.++ Start_6 Start) (str.at Start_3 StartInt_5) (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_7 Start_4 Start_6)))
   (StartInt_4 Int (1 (str.len Start_2) (str.indexof Start_9 Start_5 StartInt_1)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start_2 Start_1 StartInt_1) (str.to_int Start_2)))
   (Start_2 String (x (str.++ Start_3 Start) (str.at Start_4 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_1 Bool (false true (and StartBool StartBool_1) (str.suffixof Start Start_4) (<= StartInt_2 StartInt)))
   (Start_3 String (x "b" "" y "0" "a" (str.substr Start StartInt_1 StartInt) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_2)))
   (StartInt_2 Int (0 1))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_7 Start_8 StartInt_1)))
   (Start_6 String (x "0" (str.replace Start_6 Start_6 Start_2) (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start_2)))
   (Start_4 String (x "0" (str.at Start_4 StartInt_3) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_2 Start_2 Start_4) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_1)))
   (StartInt_3 Int (0 (str.indexof Start_2 Start StartInt_2)))
   (Start_1 String (x (str.++ Start_1 Start_4) (str.at Start_3 StartInt_3) (str.substr Start_2 StartInt StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start Start)))
   (StartBool_2 Bool (true false (str.<= Start_7 Start) (str.prefixof Start_6 Start_6) (= StartInt_4 StartInt_1) (<= StartInt_2 StartInt)))
   (Start_5 String ("0" (str.at Start_3 StartInt_3) (str.substr Start_1 StartInt_4 StartInt_4) (str.replace Start_4 Start_1 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.from_int (str.to_int (str.++ x (str.replace x "" "1"))))))))

(check-synth)
