(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_4 Bool) (StartBool_2 Bool) (Start_15 String) (Start_5 String) (Start_11 String) (Start_14 String) (StartInt_4 Int) (Start_9 String) (Start_7 String) (StartInt_5 Int) (StartInt_1 Int) (Start_6 String) (Start_10 String) (Start_1 String) (StartInt_6 Int) (StartInt_3 Int) (Start_4 String) (Start_3 String) (Start_2 String) (Start_13 String) (Start_12 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_8 String))
  ((Start String (x (str.++ Start Start) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_4)))
   (StartBool Bool (false (not StartBool) (and StartBool_1 StartBool) (str.< Start_4 Start) (str.<= Start_4 Start_4) (str.suffixof Start Start_4) (str.contains Start_3 Start_2) (= Start Start_3) (= StartInt_2 StartInt_3)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool StartBool_1) (str.< Start_3 Start_6) (str.prefixof Start_4 Start_6) (= Start_7 Start) (<= StartInt_2 StartInt_2)))
   (StartBool_4 Bool (false (and StartBool_4 StartBool_2) (str.< Start_12 Start_14) (str.<= Start_15 Start_9) (str.contains Start_1 Start_7) (= Start_13 Start_12) (= StartInt_3 StartInt_4) (<= StartInt_3 StartInt_4)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_1) (str.<= Start_4 Start_4) (str.suffixof Start_8 Start_13) (= Start_4 Start_10)))
   (Start_15 String ("b" (str.++ Start_1 Start_3) (str.substr Start_14 StartInt_5 StartInt) (str.replace Start_7 Start_3 Start_4) (str.from_int StartInt_2)))
   (Start_5 String ("" y x "1" (str.at Start_13 StartInt_2) (ite StartBool Start_8 Start_5)))
   (Start_11 String (y x "b" (str.++ Start_10 Start) (str.substr Start_8 StartInt_4 StartInt_5) (ite StartBool_2 Start_8 Start_1)))
   (Start_14 String (y "1" (str.substr Start_4 StartInt_6 StartInt) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 1 (str.indexof Start_2 Start_4 StartInt_6) (str.to_int Start_9)))
   (Start_9 String ("a" "b" (str.++ Start_10 Start_11) (str.at Start_1 StartInt_1) (str.from_int StartInt_2)))
   (Start_7 String ("" "1" (str.at Start_2 StartInt_3) (str.substr Start_3 StartInt_3 StartInt_3) (ite StartBool_2 Start_1 Start_2)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt_2)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start Start_1 StartInt)))
   (Start_6 String ("" (str.substr Start_6 StartInt_2 StartInt_4) (str.replace Start_1 Start_7 Start_4) (str.from_int StartInt_5) (ite StartBool_2 Start_8 Start_7)))
   (Start_10 String ("b" "a" (str.++ Start_11 Start_7) (str.at Start_12 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_5) (ite StartBool Start_9 Start_3)))
   (Start_1 String (x (str.++ Start_2 Start_3) (str.substr Start_2 StartInt StartInt_2) (str.replace Start_3 Start_2 Start_1) (ite StartBool Start_2 Start)))
   (StartInt_6 Int (1 (str.to_int Start_10)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_3 StartInt_2)))
   (Start_4 String (x (str.substr Start_2 StartInt_3 StartInt_1)))
   (Start_3 String ("a" (str.at Start StartInt_2) (str.substr Start_2 StartInt_3 StartInt) (str.replace Start Start_3 Start) (str.from_int StartInt_1)))
   (Start_2 String (y (str.substr Start_4 StartInt StartInt)))
   (Start_13 String ("0" "b" (str.++ Start_6 Start_9) (str.at Start_6 StartInt_2) (str.substr Start_12 StartInt StartInt) (str.replace Start_12 Start_4 Start_13) (str.from_int StartInt_1)))
   (Start_12 String ("a" "1" x "b" "" "0" y (str.++ Start_7 Start_6) (str.at Start_4 StartInt) (str.substr Start StartInt_2 StartInt) (str.replace Start_12 Start_7 Start_11)))
   (StartInt_2 Int (1 (str.len Start_3)))
   (StartBool_1 Bool (false (and StartBool StartBool_2) (str.< Start_1 Start_5) (str.contains Start_5 Start_3) (= Start_3 Start_6)))
   (Start_8 String ("1" (str.++ Start_7 Start_2) (str.at Start_5 StartInt_4) (str.substr Start StartInt_4 StartInt_2) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof x "" 1))))

(check-synth)
