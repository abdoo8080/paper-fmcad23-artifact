(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_9 Int) (Start_1 String) (StartBool_4 Bool) (StartInt_2 Int) (Start_10 String) (StartBool_6 Bool) (StartInt_8 Int) (Start_8 String) (Start_7 String) (Start_4 String) (Start_3 String) (Start_5 String) (StartBool_5 Bool) (Start_6 String) (StartBool_1 Bool) (Start_2 String) (Start_12 String) (Start_13 String) (Start_11 String) (StartInt_4 Int) (Start_16 String) (StartInt_3 Int) (Start_9 String) (StartBool_2 Bool) (StartInt_6 Int) (StartInt_7 Int) (Start_14 String) (StartInt_5 Int) (Start_15 String))
  ((Start String ("0" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_3) (str.from_int StartInt_2)))
   (StartInt Int (0 (str.indexof Start_10 Start_12 StartInt_8) (str.to_int Start_13)))
   (StartBool Bool (false (str.<= Start_12 Start_6) (str.prefixof Start_10 Start_7) (str.contains Start_13 Start_10) (= StartInt_9 StartInt_5) (<= StartInt_2 StartInt_6)))
   (StartInt_1 Int (0 (str.len Start_9) (str.to_int Start)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_3 StartBool) (str.< Start_9 Start) (str.prefixof Start_7 Start_10) (str.suffixof Start_6 Start_4) (= Start_4 Start_1)))
   (StartInt_9 Int (0 1 (str.len Start_13) (str.indexof Start_5 Start StartInt_6)))
   (Start_1 String ("0" (str.at Start_14 StartInt_8) (str.replace Start_3 Start_8 Start_10) (str.from_int StartInt_8)))
   (StartBool_4 Bool (false true (not StartBool_1) (str.< Start_3 Start_8) (str.prefixof Start_8 Start_3) (str.suffixof Start_3 Start_6) (= StartInt StartInt_3)))
   (StartInt_2 Int (0 1 (str.to_int Start_13)))
   (Start_10 String ("0" "" (str.at Start_11 StartInt) (str.substr Start_8 StartInt StartInt_5) (str.replace Start_7 Start_12 Start_12) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_6 Bool (false true (and StartBool_1 StartBool) (str.<= Start Start_15) (str.prefixof Start_1 Start_11) (= Start_7 Start_2) (<= StartInt StartInt_4)))
   (StartInt_8 Int (0 1))
   (Start_8 String (x "1" (str.++ Start_2 Start_8) (str.at Start StartInt_4) (str.substr Start_2 StartInt_2 StartInt_2) (str.from_int StartInt_3)))
   (Start_7 String ("" (str.from_int StartInt_4)))
   (Start_4 String (y "1" "0" "" "a" (str.++ Start_6 Start_2) (str.substr Start_2 StartInt_3 StartInt) (ite StartBool_2 Start_7 Start_5)))
   (Start_3 String ("" "1"))
   (Start_5 String ("1" y (str.++ Start_6 Start_4) (str.substr Start_3 StartInt_3 StartInt) (ite StartBool Start_6 Start_2)))
   (StartBool_5 Bool (true false (not StartBool_6) (str.<= Start_8 Start_7) (str.prefixof Start_2 Start_1) (str.suffixof Start_10 Start_14) (= StartInt_7 StartInt_1)))
   (Start_6 String ("a" (str.at Start StartInt_3) (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_5 Start_5 Start_4) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_4) (str.< Start_2 Start_4) (str.<= Start_1 Start_4) (= Start_3 Start_5) (= StartInt_1 StartInt_2) (<= StartInt_2 StartInt_3)))
   (Start_2 String ("1" "" x (str.++ Start Start_1) (str.at Start StartInt_1) (str.replace Start Start Start_3) (ite StartBool_1 Start_1 Start_3)))
   (Start_12 String (x "a" "" "b" (str.substr Start_1 StartInt_4 StartInt_4) (str.replace Start_11 Start_4 Start_13) (str.from_int StartInt_4)))
   (Start_13 String (y (str.substr Start_7 StartInt StartInt_6) (ite StartBool_1 Start_4 Start_6)))
   (Start_11 String ("a" "b" "1" (str.++ Start_1 Start_2) (str.at Start_11 StartInt_5) (ite StartBool_4 Start_4 Start_5)))
   (StartInt_4 Int (0 1 (str.len Start_2)))
   (Start_16 String ("1"))
   (StartInt_3 Int (0 (str.indexof Start_1 Start_2 StartInt_3)))
   (Start_9 String ("a" (str.++ Start_1 Start_9) (ite StartBool_3 Start_11 Start_2)))
   (StartBool_2 Bool (true (and StartBool_5 StartBool_3) (str.contains Start_6 Start) (= Start_13 Start_12) (<= StartInt_1 StartInt_6)))
   (StartInt_6 Int (1 0 (str.len Start_5) (str.to_int Start_8)))
   (StartInt_7 Int (1 0))
   (Start_14 String (y x (str.at Start_15 StartInt_7) (ite StartBool_3 Start_13 Start_10)))
   (StartInt_5 Int (0 1 (str.len Start_2) (str.indexof Start_11 Start_8 StartInt_2) (str.to_int Start)))
   (Start_15 String (x (str.++ Start_14 Start_1) (str.at Start_2 StartInt_1) (str.replace Start Start_12 Start_5) (str.from_int StartInt_1) (ite StartBool_1 Start_9 Start_16)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.++ x "0") "")))

(check-synth)
