(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_11 String) (Start_10 String) (Start_2 String) (StartInt_6 Int) (Start_4 String) (Start_6 String) (StartInt_1 Int) (Start_3 String) (Start_5 String) (StartInt_5 Int) (Start_12 String) (Start_7 String) (Start_1 String) (StartInt_2 Int) (Start_8 String) (StartInt_7 Int) (StartInt_4 Int) (Start_9 String) (StartBool_1 Bool) (StartInt_3 Int))
  ((Start String ("a" y x "" "0" (str.++ Start_1 Start_1) (str.replace Start Start Start)))
   (StartInt Int (1 0 (str.len Start_12) (str.indexof Start_10 Start_12 StartInt) (str.to_int Start_1)))
   (StartBool Bool (true (not StartBool) (<= StartInt_6 StartInt_3)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_11 Start) (str.suffixof Start_6 Start_6) (= Start_2 Start) (= StartInt StartInt_6) (<= StartInt_4 StartInt_7)))
   (Start_11 String ("0" (str.++ Start_3 Start_4) (str.from_int StartInt_2) (ite StartBool_2 Start_11 Start_10)))
   (Start_10 String ("1"))
   (Start_2 String ("a" (str.at Start_8 StartInt_3) (str.substr Start_11 StartInt_2 StartInt_1) (str.replace Start_10 Start Start_2) (ite StartBool_1 Start_6 Start)))
   (StartInt_6 Int (1 0 (str.len Start_8) (str.to_int Start_4)))
   (Start_4 String ("a" (str.at Start_8 StartInt_5) (str.from_int StartInt_6) (ite StartBool_1 Start_9 Start_10)))
   (Start_6 String (y "a" (str.at Start_5 StartInt_1) (str.replace Start_5 Start_1 Start_10) (ite StartBool Start_6 Start_4)))
   (StartInt_1 Int (1 0 (str.len Start_2) (str.to_int Start_3)))
   (Start_3 String ("a" (str.++ Start_4 Start_2) (str.at Start StartInt_1) (str.substr Start_5 StartInt_2 StartInt_1) (str.from_int StartInt_2)))
   (Start_5 String (y (str.at Start_6 StartInt) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_1 Start_6 Start_7) (str.from_int StartInt_2)))
   (StartInt_5 Int (1 (str.len Start) (str.indexof Start_3 Start_3 StartInt) (str.to_int Start_1)))
   (Start_12 String ("0" (str.++ Start_5 Start_6) (str.substr Start_10 StartInt_7 StartInt_6) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_6)))
   (Start_7 String (y (str.++ Start_3 Start_2) (str.substr Start_3 StartInt_3 StartInt_3) (str.replace Start_8 Start_1 Start_2)))
   (Start_1 String (y "1" "0" "b" "" "a" (str.++ Start Start) (str.replace Start_1 Start Start_2) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.len Start)))
   (Start_8 String (y (str.++ Start_9 Start_2) (str.from_int StartInt_4)))
   (StartInt_7 Int (0 1 (str.len Start_11) (str.indexof Start_8 Start_6 StartInt_1) (str.to_int Start_2)))
   (StartInt_4 Int (1 0 (str.len Start_6)))
   (Start_9 String ("b" (str.at Start_1 StartInt_3) (str.substr Start StartInt_5 StartInt_3) (ite StartBool Start_5 Start_6)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool) (str.<= Start_8 Start_8) (str.suffixof Start_8 Start_4) (str.contains Start_8 Start_2) (= Start_2 Start_5) (= StartInt_4 StartInt)))
   (StartInt_3 Int (1 (str.indexof Start_6 Start_6 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.from_int (str.len y)) 1)))

(check-synth)
