(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_7 String) (Start_12 String) (Start_11 String) (Start_9 String) (Start_6 String) (Start_1 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_10 String) (StartInt_4 Int) (Start_2 String) (StartInt_1 Int) (Start_8 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_5 String) (Start_3 String) (StartInt_5 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_4 String) (StartInt_6 Int))
  ((Start String (x (str.at Start_1 StartInt) (str.replace Start_1 Start Start_1)))
   (StartInt Int (1 (str.len Start_5) (str.to_int Start_4)))
   (StartBool Bool (false true (and StartBool_2 StartBool_2) (str.< Start_6 Start_6) (str.<= Start Start_3) (str.prefixof Start_6 Start_5) (str.suffixof Start Start_3) (<= StartInt_2 StartInt_2)))
   (Start_13 String ("1" x (str.at Start_9 StartInt_3) (str.from_int StartInt_4) (ite StartBool Start_11 Start_6)))
   (Start_7 String (x (str.substr Start_12 StartInt_2 StartInt_6) (ite StartBool_1 Start_5 Start_2)))
   (Start_12 String ("0" "a" (str.++ Start_1 Start_8) (str.from_int StartInt_2)))
   (Start_11 String (x "" (str.from_int StartInt_3) (ite StartBool Start_8 Start_5)))
   (Start_9 String ("b" (str.at Start_10 StartInt_4) (str.substr Start_11 StartInt_4 StartInt_6) (str.replace Start_9 Start_2 Start_12)))
   (Start_6 String ("a" (str.at Start_5 StartInt) (str.from_int StartInt_4)))
   (Start_1 String ("b" "1" (str.at Start_1 StartInt) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartBool_2 Bool (false true (and StartBool StartBool_3) (str.prefixof Start_6 Start_7) (str.suffixof Start_8 Start_3) (str.contains Start_1 Start_5) (= StartInt StartInt_6)))
   (StartInt_2 Int (1 0 (str.len Start) (str.to_int Start_1)))
   (Start_10 String ("0" "a" (str.at Start_10 StartInt_4) (str.substr Start_4 StartInt_4 StartInt_2) (str.replace Start_12 Start_9 Start_2) (str.from_int StartInt_3) (ite StartBool_2 Start_8 Start_4)))
   (StartInt_4 Int (0 1 (str.to_int Start_2)))
   (Start_2 String ("b" (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_2 StartInt_4) (str.replace Start_1 Start_3 Start_3) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_1)))
   (StartInt_1 Int (1 0 (str.to_int Start_2)))
   (Start_8 String ("0" y (str.++ Start_9 Start_3) (str.at Start_3 StartInt) (str.substr Start StartInt StartInt_3) (str.from_int StartInt_5) (ite StartBool_4 Start_9 Start_3)))
   (StartBool_1 Bool (true false (str.contains Start Start) (= Start_2 Start) (= StartInt_1 StartInt_1) (<= StartInt_2 StartInt_3)))
   (StartInt_3 Int (0 1 (str.indexof Start Start StartInt_4)))
   (Start_5 String ("b" "" "0" "a" y "1" x (str.++ Start_5 Start_2) (str.at Start_2 StartInt_5) (str.substr Start_2 StartInt_4 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (Start_3 String ("1" x (str.++ Start Start_3) (str.at Start StartInt_5) (str.substr Start_2 StartInt_2 StartInt_4) (str.replace Start_2 Start Start_1) (ite StartBool Start_2 Start_3)))
   (StartInt_5 Int (0 1 (str.len Start) (str.to_int Start_4)))
   (StartBool_3 Bool (false true (and StartBool StartBool_3) (str.<= Start_11 Start_4) (str.contains Start Start_13) (= Start_12 Start_4) (= StartInt_6 StartInt_2) (<= StartInt_3 StartInt)))
   (StartBool_4 Bool (true false (not StartBool_4) (str.< Start_9 Start_7) (str.suffixof Start_4 Start)))
   (Start_4 String ("0" (str.substr Start_2 StartInt_2 StartInt_6) (str.from_int StartInt_5)))
   (StartInt_6 Int (1 0 (str.indexof Start_4 Start_4 StartInt_5) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.from_int (str.to_int (str.at x 0)))))))

(check-synth)
