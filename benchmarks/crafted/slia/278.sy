(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (Start_6 String) (Start_2 String) (Start_9 String) (StartInt_5 Int) (StartInt_8 Int) (Start_5 String) (StartInt_4 Int) (StartBool_2 Bool) (StartBool_4 Bool) (StartInt_2 Int) (Start_4 String) (Start_1 String) (Start_3 String) (StartInt_6 Int) (Start_15 String) (Start_12 String) (StartInt_1 Int) (Start_13 String) (Start_8 String) (Start_7 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_10 String) (StartInt_7 Int) (StartBool_1 Bool) (StartInt_9 Int) (Start_14 String) (Start_11 String))
  ((Start String ("0" x "1" "a" "" (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_2 StartBool) (str.< Start_1 Start) (str.<= Start_1 Start) (str.prefixof Start Start_1) (<= StartInt StartInt)))
   (Start_16 String ("" "a" (str.at Start_12 StartInt_8) (str.replace Start_16 Start_5 Start_6) (ite StartBool_2 Start_15 Start_1)))
   (Start_6 String (x (str.replace Start_3 Start Start_6) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_1)))
   (Start_2 String ("" y "b" "1" "0" "a" (str.substr Start_1 StartInt StartInt_3) (str.from_int StartInt_1)))
   (Start_9 String ("a" (str.at Start_9 StartInt_3) (str.substr Start_1 StartInt_8 StartInt_9) (str.replace Start_14 Start_3 Start_9)))
   (StartInt_5 Int (0 (str.len Start_4)))
   (StartInt_8 Int (0 1 (str.len Start_4) (str.indexof Start_9 Start_8 StartInt_3) (str.to_int Start_10)))
   (Start_5 String ("" "b" (str.++ Start_2 Start_6) (str.at Start_5 StartInt_1) (str.replace Start_5 Start_5 Start_6) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_4 Int (1 0 (str.len Start_1) (str.indexof Start_1 Start_4 StartInt_5) (str.to_int Start_4)))
   (StartBool_2 Bool (true false (not StartBool_2) (str.< Start_6 Start_3) (str.prefixof Start Start_5) (str.contains Start_4 Start_6) (= StartInt StartInt_7) (<= StartInt_7 StartInt_6)))
   (StartBool_4 Bool (false (not StartBool_3) (str.<= Start_6 Start_4) (str.prefixof Start_13 Start_9) (str.suffixof Start_1 Start_10) (<= StartInt_7 StartInt_1)))
   (StartInt_2 Int (1))
   (Start_4 String (x "1" "" (str.at Start_1 StartInt_2) (str.replace Start_5 Start Start_1) (str.from_int StartInt_5) (ite StartBool_1 Start Start_5)))
   (Start_1 String ("b" (str.++ Start_1 Start_1) (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start Start_1) (str.from_int StartInt_2)))
   (Start_3 String ("b" y (str.replace Start_1 Start_2 Start) (str.from_int StartInt_3) (ite StartBool_1 Start Start)))
   (StartInt_6 Int (0 (str.len Start_4) (str.to_int Start_8)))
   (Start_15 String ("1" "a" x (str.++ Start_9 Start_12) (str.replace Start_2 Start_2 Start_16) (str.from_int StartInt_6)))
   (Start_12 String ("a" (str.++ Start_2 Start_1) (str.at Start StartInt_7) (str.substr Start_4 StartInt StartInt_7) (str.from_int StartInt_2) (ite StartBool_4 Start_10 Start_10)))
   (StartInt_1 Int (1 (str.indexof Start_7 Start StartInt_6)))
   (Start_13 String ("0" y (str.substr Start_13 StartInt_1 StartInt_6) (str.replace Start_4 Start_6 Start_5) (str.from_int StartInt_6) (ite StartBool_4 Start_14 Start_4)))
   (Start_8 String ("a" "1" "b" "" (str.from_int StartInt_4) (ite StartBool_1 Start_8 Start_1)))
   (Start_7 String (y (ite StartBool_3 Start_3 Start_3)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_2 StartInt_4) (str.to_int Start_3)))
   (StartBool_3 Bool (false true (str.< Start_4 Start_5) (str.<= Start_1 Start_2) (str.prefixof Start_7 Start_8) (str.suffixof Start_2 Start_1) (str.contains Start_3 Start) (<= StartInt_3 StartInt_4)))
   (Start_10 String ("b" (str.++ Start Start_6) (str.at Start StartInt) (str.replace Start_11 Start_7 Start_12) (ite StartBool_1 Start_4 Start_7)))
   (StartInt_7 Int (0))
   (StartBool_1 Bool (false (and StartBool_3 StartBool_1) (str.< Start_5 Start_8) (str.<= Start_7 Start_3) (str.prefixof Start_5 Start_9) (= Start_4 Start_5) (<= StartInt_1 StartInt_8)))
   (StartInt_9 Int (0 (str.indexof Start_4 Start_15 StartInt_5)))
   (Start_14 String ("0" "a" (str.++ Start_14 Start_12) (str.at Start_3 StartInt_8) (ite StartBool Start_4 Start_13)))
   (Start_11 String ("b" (str.++ Start_13 Start_13) (str.at Start_9 StartInt_7) (ite StartBool_1 Start Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ (str.at x 1) "1") "0" (str.replace y "" x))))

(check-synth)
