(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_11 String) (Start_12 String) (Start_10 String) (Start_4 String) (Start_7 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_2 String) (StartInt_2 Int) (Start_1 String) (StartInt_7 Int) (Start_3 String) (StartInt_1 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_6 String) (StartInt_6 Int) (Start_5 String) (Start_8 String) (Start_9 String) (StartBool_2 Bool))
  ((Start String ("b" y "a" "1" "" "0" (str.++ Start Start) (str.at Start StartInt_1) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_1 Start_2 Start_2) (ite StartBool Start Start)))
   (StartInt Int (1 0))
   (StartBool Bool (false (not StartBool_2) (and StartBool_3 StartBool_2) (str.< Start_5 Start_4) (str.<= Start Start_1) (str.prefixof Start_8 Start_2) (str.contains Start_2 Start_2) (= Start_10 Start_5) (= StartInt_3 StartInt_2)))
   (StartBool_3 Bool (false true (str.<= Start_1 Start_1) (str.prefixof Start_1 Start_8) (str.suffixof Start_2 Start_7) (= Start Start_2) (= StartInt_2 StartInt_7)))
   (Start_11 String ("a" x (str.++ Start_8 Start_10) (str.at Start_4 StartInt_3) (str.substr Start_6 StartInt_5 StartInt_1) (ite StartBool_3 Start_7 Start_4)))
   (Start_12 String ("" (str.substr Start_7 StartInt_5 StartInt_4) (str.from_int StartInt_2)))
   (Start_10 String (x y "b" (str.++ Start_6 Start) (str.at Start_5 StartInt_2) (str.replace Start_10 Start_11 Start_12) (ite StartBool_1 Start_10 Start_4)))
   (Start_4 String (x (str.at Start StartInt)))
   (Start_7 String ("b" (str.from_int StartInt_3)))
   (StartInt_5 Int (0 1 (str.indexof Start_7 Start_7 StartInt_6) (str.to_int Start_9)))
   (StartBool_1 Bool (true false (str.< Start Start_2) (str.prefixof Start Start_7) (= StartInt_3 StartInt_2) (<= StartInt StartInt_3)))
   (Start_2 String (y (ite StartBool Start Start_1)))
   (StartInt_2 Int (0 (str.indexof Start_4 Start_2 StartInt_3) (str.to_int Start)))
   (Start_1 String ("a" (str.at Start StartInt_1) (str.from_int StartInt)))
   (StartInt_7 Int (1 (str.len Start_11) (str.to_int Start_1)))
   (Start_3 String ("1" "b" (str.++ Start_2 Start_4) (str.at Start_3 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start Start_1)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_1 Start_3 StartInt)))
   (StartInt_4 Int (0 1 (str.len Start) (str.indexof Start_6 Start_5 StartInt_4)))
   (StartInt_3 Int (0 1 (str.indexof Start Start StartInt) (str.to_int Start_5)))
   (Start_6 String ("b" (str.++ Start_3 Start) (str.at Start_7 StartInt_5) (str.from_int StartInt_6) (ite StartBool_1 Start_8 Start_3)))
   (StartInt_6 Int (1 (str.len Start_5) (str.to_int Start_8)))
   (Start_5 String ("b" x (str.++ Start_4 Start_3) (str.substr Start_5 StartInt_4 StartInt_2) (str.replace Start_5 Start_4 Start_2) (str.from_int StartInt_3)))
   (Start_8 String (y (str.++ Start_8 Start_4) (str.at Start_3 StartInt_1) (str.replace Start_8 Start_7 Start_2) (ite StartBool_2 Start_9 Start_2)))
   (Start_9 String (x "0" (str.at Start_5 StartInt_4)))
   (StartBool_2 Bool (false true (str.< Start_8 Start_8) (= Start_4 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (ite (str.<= x y) "0" "")))))

(check-synth)
