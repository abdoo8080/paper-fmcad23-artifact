(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_1 Int) (Start_10 String) (StartBool_5 Bool) (StartInt_2 Int) (Start_9 String) (Start_8 String) (Start_2 String) (StartInt_7 Int) (StartInt_3 Int) (StartBool_1 Bool) (Start_11 String) (StartInt_6 Int) (Start_7 String) (Start_6 String) (Start_1 String) (Start_5 String) (Start_4 String) (Start_3 String) (StartInt_4 Int) (StartBool_3 Bool) (StartBool_4 Bool) (StartInt_5 Int) (StartBool_2 Bool))
  ((Start String ("a" (str.++ Start Start) (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_4) (str.indexof Start_9 Start_4 StartInt_2)))
   (StartBool Bool (true false (not StartBool) (and StartBool_5 StartBool_5) (str.suffixof Start_6 Start_9)))
   (Start_12 String (x (str.++ Start Start_5) (str.replace Start_5 Start_12 Start_2) (str.from_int StartInt_5)))
   (StartInt_1 Int (0 1 (str.indexof Start_7 Start_5 StartInt_4) (str.to_int Start_9)))
   (Start_10 String ("b" (str.++ Start_10 Start_9) (str.at Start StartInt) (str.substr Start StartInt_7 StartInt_4) (str.replace Start_2 Start_5 Start_3) (str.from_int StartInt_3)))
   (StartBool_5 Bool (false true (and StartBool_3 StartBool_5) (str.<= Start_1 Start) (str.prefixof Start_11 Start_3) (str.suffixof Start_5 Start_12) (str.contains Start Start_7) (= Start_6 Start_5) (<= StartInt_3 StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.indexof Start_10 Start_2 StartInt_5)))
   (Start_9 String (x (str.++ Start_3 Start_8) (str.at Start_8 StartInt_4) (str.substr Start StartInt_4 StartInt) (ite StartBool_4 Start_2 Start_9)))
   (Start_8 String (y "0" "b" (str.at Start_5 StartInt_5) (str.replace Start_2 Start_5 Start_1) (ite StartBool_2 Start_9 Start_6)))
   (Start_2 String ("b" (str.substr Start StartInt_1 StartInt_2) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_7 Int (1 0 (str.indexof Start_9 Start_8 StartInt_7)))
   (StartInt_3 Int (1 0 (str.to_int Start_5)))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (str.<= Start_3 Start_3) (str.prefixof Start_3 Start_4) (<= StartInt_3 StartInt_1)))
   (Start_11 String ("b" (str.substr Start_2 StartInt_3 StartInt_2) (ite StartBool_3 Start_2 Start_12)))
   (StartInt_6 Int (1 (str.indexof Start_7 Start_7 StartInt_3)))
   (Start_7 String ("1" x (str.replace Start Start Start_3)))
   (Start_6 String ("" (str.from_int StartInt_5) (ite StartBool_3 Start_7 Start_2)))
   (Start_1 String (y x (str.at Start_3 StartInt_1) (str.substr Start_6 StartInt_2 StartInt_5) (str.replace Start_1 Start_10 Start) (str.from_int StartInt_1)))
   (Start_5 String ("a" "b" (str.++ Start_5 Start_2) (str.substr Start_1 StartInt_1 StartInt_2)))
   (Start_4 String ("0" y (str.replace Start Start_2 Start_3) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start)))
   (Start_3 String ("" (str.substr Start_6 StartInt_4 StartInt_2) (ite StartBool_3 Start Start_1)))
   (StartInt_4 Int (0 1 (str.len Start_2)))
   (StartBool_3 Bool (false (str.< Start_4 Start_3) (str.<= Start_3 Start_7) (str.suffixof Start_6 Start_4) (= Start_5 Start) (= StartInt_4 StartInt_3) (<= StartInt_5 StartInt_2)))
   (StartBool_4 Bool (true false (not StartBool_4) (str.< Start Start) (str.<= Start_2 Start_2) (str.suffixof Start_4 Start_6) (= Start_5 Start) (= StartInt_4 StartInt_6)))
   (StartInt_5 Int (1 (str.len Start_5) (str.indexof Start Start_2 StartInt_1)))
   (StartBool_2 Bool (true false (str.< Start_5 Start_8) (str.<= Start Start_8) (= Start_5 Start_2) (= StartInt_2 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x y "")))

(check-synth)
