(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_1 String) (StartBool_5 Bool) (StartInt_5 Int) (Start_6 String) (Start_12 String) (StartBool_4 Bool) (Start_11 String) (Start_7 String) (Start_2 String) (StartInt_1 Int) (Start_4 String) (StartBool_1 Bool) (Start_8 String) (Start_3 String) (StartBool_2 Bool) (StartBool_3 Bool) (Start_9 String) (StartInt_4 Int) (StartInt_2 Int) (Start_5 String) (Start_10 String) (StartInt_3 Int))
  ((Start String ("b" x "" "0" "a" y (str.++ Start_1 Start_2) (str.substr Start_3 StartInt StartInt) (str.replace Start_2 Start_3 Start_4) (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (false (str.< Start_2 Start_9) (str.prefixof Start_2 Start_6) (str.suffixof Start_8 Start_5) (= Start_3 Start_1) (= StartInt_5 StartInt_3) (<= StartInt_6 StartInt)))
   (StartInt_6 Int (1 0 (str.indexof Start_8 Start_9 StartInt_2)))
   (Start_1 String ("" (str.++ Start_4 Start_4) (str.at Start_1 StartInt_3) (ite StartBool_1 Start_8 Start_2)))
   (StartBool_5 Bool (false true (and StartBool_5 StartBool_4) (str.prefixof Start_12 Start) (str.suffixof Start_11 Start_9)))
   (StartInt_5 Int (0 1 (str.len Start_12) (str.to_int Start_1)))
   (Start_6 String ("0" "" "b" x (str.++ Start_2 Start_7) (str.at Start_10 StartInt) (str.from_int StartInt_4)))
   (Start_12 String ("b" (str.at Start_12 StartInt_2) (str.from_int StartInt_1)))
   (StartBool_4 Bool (false true (str.< Start_5 Start_6) (str.<= Start_6 Start_12) (str.prefixof Start_5 Start_1) (str.contains Start_3 Start_1) (= Start Start_1)))
   (Start_11 String ("a" x (str.from_int StartInt_4) (ite StartBool_4 Start_9 Start_3)))
   (Start_7 String ("a" "0" y "b" "" "1" x (str.at Start_6 StartInt) (str.replace Start_8 Start_1 Start_11)))
   (Start_2 String ("1" (str.++ Start_11 Start_11) (str.replace Start_5 Start_11 Start_8) (ite StartBool_5 Start_2 Start_8)))
   (StartInt_1 Int (0 1 (str.len Start_5)))
   (Start_4 String (x "a" "" "b" (str.at Start_3 StartInt_1)))
   (StartBool_1 Bool (false (not StartBool_2) (str.<= Start_3 Start_8)))
   (Start_8 String ("0" x (str.substr Start_5 StartInt_2 StartInt) (str.from_int StartInt)))
   (Start_3 String ("b" "1" "a"))
   (StartBool_2 Bool (false true (not StartBool_3) (str.contains Start_3 Start_8) (= StartInt_3 StartInt_2) (<= StartInt_4 StartInt_3)))
   (StartBool_3 Bool (false (str.< Start_9 Start_4) (str.<= Start_5 Start_8) (str.suffixof Start Start_3)))
   (Start_9 String ("a" "" (str.++ Start Start_3) (str.substr Start StartInt_4 StartInt_1) (str.replace Start_10 Start_7 Start_1) (str.from_int StartInt)))
   (StartInt_4 Int (1 0))
   (StartInt_2 Int (0 (str.to_int Start)))
   (Start_5 String ("a" "0" (str.++ Start Start_6) (str.at Start_7 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_5 Start_2)))
   (Start_10 String ("a" (str.at Start_9 StartInt_3) (str.substr Start_5 StartInt_2 StartInt_1) (ite StartBool Start_2 Start_8)))
   (StartInt_3 Int (0 1 (str.len Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" y (str.++ "a" "b"))))

(check-synth)
