(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_4 Int) (StartBool_3 Bool) (StartInt_1 Int) (Start_15 String) (StartBool_4 Bool) (Start_11 String) (StartBool_2 Bool) (StartBool_5 Bool) (StartInt_3 Int) (StartInt_2 Int) (Start_6 String) (StartInt_8 Int) (Start_3 String) (StartBool_1 Bool) (Start_5 String) (StartInt_7 Int) (Start_14 String) (StartBool_6 Bool) (Start_9 String) (Start_8 String) (StartInt_5 Int) (Start_7 String) (Start_12 String) (Start_1 String) (Start_10 String) (StartInt_6 Int) (StartInt_9 Int) (Start_13 String) (Start_2 String) (Start_4 String))
  ((Start String (y (str.++ Start Start)))
   (StartInt Int (1 0 (str.indexof Start Start StartInt_1)))
   (StartBool Bool (false (not StartBool_1) (and StartBool StartBool_1) (str.< Start_1 Start) (str.<= Start_2 Start) (str.prefixof Start_1 Start_2) (str.suffixof Start_3 Start) (str.contains Start_2 Start_2) (= StartInt StartInt_2) (<= StartInt_2 StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start) (str.to_int Start)))
   (StartBool_3 Bool (false true (not StartBool_6) (and StartBool_4 StartBool_3) (str.< Start Start) (str.prefixof Start Start_5) (= StartInt_3 StartInt_4)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start Start StartInt_2) (str.to_int Start)))
   (Start_15 String (y "1" "" x (str.substr Start_14 StartInt StartInt_8) (str.replace Start_4 Start_4 Start_1) (str.from_int StartInt_9)))
   (StartBool_4 Bool (true (not StartBool_3) (and StartBool StartBool_5) (str.< Start_4 Start_2) (str.prefixof Start_3 Start) (= Start Start) (<= StartInt_2 StartInt_1)))
   (Start_11 String (y (str.++ Start_9 Start_9) (str.at Start_7 StartInt_7) (str.from_int StartInt_3)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_4) (str.< Start_1 Start_5) (str.suffixof Start_4 Start_5) (= Start_2 Start_2) (= StartInt_1 StartInt) (<= StartInt StartInt_2)))
   (StartBool_5 Bool (true false (str.suffixof Start_1 Start_6) (= Start_3 Start_2)))
   (StartInt_3 Int (1 (str.indexof Start Start_2 StartInt_1) (str.to_int Start)))
   (StartInt_2 Int (1 0))
   (Start_6 String (x "b" "" (str.++ Start_4 Start_2) (str.at Start_2 StartInt_3) (str.substr Start StartInt_3 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_8 Int (0 (str.indexof Start_13 Start_7 StartInt_8)))
   (Start_3 String ("" (str.++ Start_3 Start_1) (str.at Start_4 StartInt_3) (str.replace Start_2 Start_2 Start_5) (ite StartBool_2 Start_5 Start_6)))
   (StartBool_1 Bool (false (not StartBool_6) (str.prefixof Start_14 Start_6) (str.contains Start_12 Start_4) (= Start_15 Start_6) (<= StartInt_8 StartInt_2)))
   (Start_5 String (y (str.substr Start_6 StartInt StartInt_7) (str.from_int StartInt_8)))
   (StartInt_7 Int (1 (str.len Start_4) (str.indexof Start_12 Start_8 StartInt_3)))
   (Start_14 String ("" x y "b" "1" (str.substr Start_10 StartInt_4 StartInt_2) (str.replace Start_6 Start Start_12) (str.from_int StartInt_9) (ite StartBool_3 Start_10 Start_10)))
   (StartBool_6 Bool (false true (not StartBool_3) (str.<= Start_7 Start_3) (str.suffixof Start_4 Start_4) (str.contains Start_8 Start_4) (= Start_7 Start_9) (= StartInt_3 StartInt) (<= StartInt_3 StartInt)))
   (Start_9 String ("" (str.++ Start_2 Start_3) (str.at Start_7 StartInt_2) (str.substr Start StartInt_4 StartInt_4) (str.replace Start_9 Start_8 Start_5) (ite StartBool_3 Start_3 Start_2)))
   (Start_8 String ("b" (str.++ Start_9 Start_3) (str.at Start_4 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_9 Start_10)))
   (StartInt_5 Int (0 (str.len Start_10) (str.indexof Start_10 Start_8 StartInt) (str.to_int Start_2)))
   (Start_7 String (y (str.++ Start Start_9) (str.at Start_3 StartInt_6) (ite StartBool_2 Start_10 Start_10)))
   (Start_12 String ("a" "1" (str.++ Start_3 Start_5) (str.at Start_10 StartInt) (str.substr Start_11 StartInt_7 StartInt_6) (str.replace Start_9 Start_2 Start_9) (str.from_int StartInt_6) (ite StartBool_1 Start_11 Start)))
   (Start_1 String ("1" "0" y "" (str.++ Start_5 Start_2) (str.at Start_8 StartInt_1) (str.from_int StartInt)))
   (Start_10 String ("a" x "" "0" (str.substr Start_4 StartInt_5 StartInt_4) (str.replace Start_8 Start_8 Start_5) (str.from_int StartInt_4) (ite StartBool_6 Start_10 Start_2)))
   (StartInt_6 Int (0 1 (str.len Start_10) (str.indexof Start_8 Start_11 StartInt_6)))
   (StartInt_9 Int (0 (str.indexof Start_5 Start_9 StartInt_6)))
   (Start_13 String ("" "0" x "1" (str.at Start_1 StartInt_6) (str.substr Start_10 StartInt_7 StartInt_8) (str.from_int StartInt_3)))
   (Start_2 String (x (str.replace Start_4 Start_7 Start_9) (str.from_int StartInt_8) (ite StartBool_6 Start_12 Start_11)))
   (Start_4 String ("b" "a" (str.++ Start_9 Start_6) (ite StartBool_2 Start_5 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.replace y "0" y))))

(check-synth)
