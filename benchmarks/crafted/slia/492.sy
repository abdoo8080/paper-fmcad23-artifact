(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (StartInt_9 Int) (Start_11 String) (StartInt_4 Int) (StartInt_3 Int) (Start_13 String) (Start_4 String) (Start_5 String) (Start_8 String) (Start_1 String) (Start_9 String) (Start_10 String) (Start_2 String) (Start_6 String) (StartInt_7 Int) (Start_16 String) (StartInt_1 Int) (Start_15 String) (StartBool_1 Bool) (Start_7 String) (StartBool_2 Bool) (Start_12 String) (StartInt_8 Int) (StartBool_3 Bool) (Start_18 String) (Start_14 String) (StartInt_5 Int) (StartInt_6 Int) (StartInt_2 Int) (Start_3 String) (Start_17 String))
  ((Start String ("b" (str.substr Start_1 StartInt_1 StartInt)))
   (StartInt Int (1 (str.len Start) (str.indexof Start_2 Start_5 StartInt_5)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_3 StartBool_1) (str.< Start_4 Start_8) (str.<= Start_17 Start_12) (str.contains Start_12 Start_10) (= Start_15 Start_15) (= StartInt_10 StartInt_2)))
   (StartInt_10 Int (1 (str.indexof Start_9 Start_8 StartInt)))
   (StartInt_9 Int (0 1 (str.to_int Start)))
   (Start_11 String ("" y x "a" "b" (str.at Start_10 StartInt_6) (str.from_int StartInt_5) (ite StartBool_1 Start_1 Start_5)))
   (StartInt_4 Int (1 (str.len Start_12) (str.indexof Start_1 Start_16 StartInt_1) (str.to_int Start_3)))
   (StartInt_3 Int (0 (str.indexof Start Start_5 StartInt_2)))
   (Start_13 String (y (str.at Start_5 StartInt_2) (str.substr Start_15 StartInt_6 StartInt_1)))
   (Start_4 String ("1" x "b" (str.++ Start_2 Start_4) (str.substr Start_2 StartInt_2 StartInt_3)))
   (Start_5 String ("1" "0" (str.++ Start_6 Start_6) (str.at Start StartInt_2) (str.replace Start_6 Start Start_6) (ite StartBool Start_3 Start_6)))
   (Start_8 String ("" x (str.substr Start_8 StartInt StartInt_1)))
   (Start_1 String ("1" (str.++ Start Start_1) (ite StartBool_1 Start Start_2)))
   (Start_9 String ("" y (str.++ Start_1 Start_12) (str.at Start_12 StartInt_4) (str.replace Start_8 Start_7 Start_8) (str.from_int StartInt_5)))
   (Start_10 String ("a" "b" (str.at Start_9 StartInt_6) (str.replace Start_9 Start_10 Start_6) (str.from_int StartInt_3)))
   (Start_2 String (y (str.++ Start_3 Start_1) (str.replace Start_1 Start_4 Start_3) (ite StartBool Start_4 Start_2)))
   (Start_6 String ("" x "b" (str.substr Start_1 StartInt StartInt_4) (str.from_int StartInt_5) (ite StartBool Start_7 Start_8)))
   (StartInt_7 Int (1 0 (str.len Start_6) (str.indexof Start_15 Start_9 StartInt_1)))
   (Start_16 String ("b" (str.++ Start_2 Start_10) (str.substr Start_3 StartInt_8 StartInt_7) (str.replace Start_11 Start_10 Start_16) (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.indexof Start_1 Start_1 StartInt) (str.to_int Start)))
   (Start_15 String ("1" (str.from_int StartInt_6) (ite StartBool_2 Start_7 Start_5)))
   (StartBool_1 Bool (true (not StartBool_1) (str.< Start_18 Start_4) (str.prefixof Start_17 Start_8) (str.suffixof Start_18 Start_15) (str.contains Start_5 Start_11)))
   (Start_7 String ("b" "" "a" "1" y (str.++ Start_7 Start_3) (str.at Start_2 StartInt_4) (str.replace Start_4 Start_3 Start_9) (ite StartBool_2 Start_10 Start_11)))
   (StartBool_2 Bool (true false (str.< Start_11 Start_8) (str.<= Start_7 Start_2) (str.contains Start_5 Start_1) (= Start Start_4) (<= StartInt_5 StartInt)))
   (Start_12 String ("1" (str.++ Start_6 Start_13) (str.substr Start StartInt_6 StartInt_7) (str.replace Start_10 Start_8 Start_14) (str.from_int StartInt_8)))
   (StartInt_8 Int (1 (str.to_int Start_4)))
   (StartBool_3 Bool (true false (str.< Start_4 Start_16) (str.contains Start_13 Start_1)))
   (Start_18 String ("" y x (str.++ Start_13 Start_13) (str.substr Start_1 StartInt_3 StartInt_9) (str.from_int StartInt_2)))
   (Start_14 String ("b" (str.at Start_11 StartInt_6) (str.substr Start_10 StartInt_3 StartInt_4) (str.replace Start_8 Start Start_5) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 0 (str.len Start_16) (str.to_int Start_7)))
   (StartInt_6 Int (1 (str.to_int Start_5)))
   (StartInt_2 Int (1 (str.indexof Start_8 Start_3 StartInt_7) (str.to_int Start_15)))
   (Start_3 String ("a" "1" x y (str.++ Start_10 Start) (str.at Start_15 StartInt_6) (str.substr Start_17 StartInt_1 StartInt_7) (str.replace Start_7 Start_12 Start_9) (ite StartBool_1 Start_14 Start_11)))
   (Start_17 String ("b" x "a" (str.at Start StartInt_2) (str.substr Start_5 StartInt_2 StartInt_8) (str.from_int StartInt_8) (ite StartBool Start_11 Start_17)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" x "")))

(check-synth)
