(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_6 Int) (Start_6 String) (StartBool_5 Bool) (StartInt_5 Int) (Start_2 String) (StartInt_3 Int) (Start_7 String) (StartInt_7 Int) (StartBool_4 Bool) (Start_9 String) (StartBool_2 Bool) (StartInt_2 Int) (StartInt_1 Int) (Start_4 String) (StartInt_4 Int) (Start_3 String) (Start_8 String) (Start_5 String) (StartBool_1 Bool) (StartBool_3 Bool))
  ((Start String (x "b" "" (str.substr Start StartInt StartInt) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt) (ite StartBool Start_2 Start_2)))
   (StartInt Int (1 0 (str.len Start_1) (str.indexof Start_3 Start_5 StartInt)))
   (StartBool Bool (true (not StartBool_2) (and StartBool StartBool_3) (str.<= Start_9 Start_5) (str.suffixof Start_6 Start_9) (= StartInt_7 StartInt_3) (<= StartInt_7 StartInt_4)))
   (Start_1 String ("1" "a" (ite StartBool_3 Start_9 Start)))
   (StartInt_6 Int (0 (str.indexof Start_5 Start_9 StartInt_6) (str.to_int Start_3)))
   (Start_6 String ("b" (str.at Start_4 StartInt_1) (str.substr Start StartInt StartInt_5) (str.replace Start Start_6 Start) (str.from_int StartInt) (ite StartBool_5 Start_4 Start_5)))
   (StartBool_5 Bool (true (not StartBool_5) (and StartBool_5 StartBool_4) (str.<= Start_7 Start_5)))
   (StartInt_5 Int (0 (str.indexof Start_8 Start_6 StartInt_1)))
   (Start_2 String ("0" "" (str.++ Start_3 Start_3) (str.at Start StartInt_1) (str.from_int StartInt_2) (ite StartBool Start Start_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_8 Start_8 StartInt_6) (str.to_int Start_4)))
   (Start_7 String (x "b" (str.++ Start_5 Start) (str.at Start_4 StartInt_2) (str.substr Start_6 StartInt_3 StartInt_1) (str.replace Start_6 Start_3 Start_7) (ite StartBool_1 Start_6 Start_4)))
   (StartInt_7 Int (0 1))
   (StartBool_4 Bool (true (and StartBool_2 StartBool) (= StartInt_4 StartInt) (<= StartInt_2 StartInt_4)))
   (Start_9 String (x "" "1" (str.substr Start_1 StartInt_3 StartInt_2)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_2) (str.< Start_8 Start_5) (str.<= Start_6 Start_9) (str.prefixof Start_2 Start_1) (str.suffixof Start_5 Start_6) (str.contains Start_1 Start_6) (<= StartInt_5 StartInt_2)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_3)))
   (StartInt_1 Int (1 0 (str.len Start_4) (str.to_int Start)))
   (Start_4 String ("1" (str.from_int StartInt)))
   (StartInt_4 Int (0 (str.len Start_9) (str.indexof Start_3 Start_4 StartInt_4) (str.to_int Start_3)))
   (Start_3 String ("" (str.++ Start_1 Start_4) (str.at Start_5 StartInt_3) (str.substr Start StartInt_2 StartInt) (str.replace Start_4 Start_6 Start_3) (ite StartBool_1 Start_7 Start_6)))
   (Start_8 String ("b" "0" x "1" (str.++ Start_7 Start_8) (str.replace Start_7 Start_1 Start_2) (ite StartBool Start_8 Start_6)))
   (Start_5 String ("0" "" "b" "a" (str.++ Start_5 Start_8) (str.substr Start_9 StartInt_2 StartInt) (str.replace Start_3 Start_8 Start_3) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_4) (str.prefixof Start_5 Start_8) (str.contains Start_7 Start_5) (= Start_3 Start_1) (= StartInt StartInt_2) (<= StartInt_1 StartInt_3)))
   (StartBool_3 Bool (false (not StartBool_5) (and StartBool_3 StartBool_5) (str.< Start_3 Start_1) (str.contains Start_1 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "a" (str.substr y 0 1))))

(check-synth)
