(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_3 Int) (StartInt_6 Int) (StartBool_3 Bool) (StartBool_5 Bool) (StartInt_1 Int) (Start_5 String) (StartInt_4 Int) (StartInt_2 Int) (StartInt_5 Int) (Start_6 String) (Start_4 String) (Start_7 String) (Start_3 String) (Start_11 String) (Start_2 String) (Start_10 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_13 String) (Start_8 String) (Start_9 String) (Start_14 String) (Start_12 String) (StartInt_7 Int) (StartInt_8 Int) (Start_1 String))
  ((Start String ("0" (str.++ Start Start) (str.replace Start Start Start) (str.from_int StartInt_1) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 (str.indexof Start_7 Start_9 StartInt)))
   (StartBool Bool (true false (not StartBool_5) (and StartBool StartBool_1) (str.prefixof Start_11 Start_14)))
   (StartBool_4 Bool (true (not StartBool_1) (and StartBool_3 StartBool_1) (= Start_1 Start_3) (= StartInt_2 StartInt)))
   (StartInt_3 Int (0 1 (str.to_int Start_3)))
   (StartInt_6 Int (0 (str.len Start_9) (str.to_int Start_10)))
   (StartBool_3 Bool (true false (not StartBool_4) (str.< Start_1 Start_2) (str.prefixof Start_3 Start_1) (str.contains Start_6 Start_4) (= Start_5 Start_1)))
   (StartBool_5 Bool (false true (str.suffixof Start_7 Start_6) (<= StartInt_2 StartInt_3)))
   (StartInt_1 Int (0 (str.len Start_10) (str.to_int Start_11)))
   (Start_5 String ("a" (str.at Start_6 StartInt_2) (str.from_int StartInt_1) (ite StartBool_3 Start_2 Start_6)))
   (StartInt_4 Int (0 (str.len Start_2) (str.indexof Start_3 Start_5 StartInt_4)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_2 StartInt_1) (str.to_int Start_5)))
   (StartInt_5 Int (0 (str.len Start_5) (str.to_int Start_5)))
   (Start_6 String ("0" (str.at Start_5 StartInt) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start_2 Start_7 Start) (str.from_int StartInt_5)))
   (Start_4 String ("b" (str.at Start_5 StartInt) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool_2 Start_1 Start)))
   (Start_7 String ("1" "0" "a" "" y "b" (str.at Start_2 StartInt_3) (str.substr Start_2 StartInt_5 StartInt) (str.replace Start_4 Start_7 Start_2) (str.from_int StartInt_3) (ite StartBool_3 Start_6 Start_1)))
   (Start_3 String ("0" "a" "" (str.at Start_2 StartInt) (str.replace Start_4 Start Start_4) (ite StartBool_2 Start Start_4)))
   (Start_11 String (y (str.at Start_13 StartInt_3) (str.substr Start_7 StartInt StartInt_6) (str.replace Start_8 Start_7 Start_11) (str.from_int StartInt_5)))
   (Start_2 String ("1" "0" (ite StartBool_1 Start Start_2)))
   (Start_10 String ("1" (str.++ Start_11 Start) (ite StartBool_1 Start_12 Start_7)))
   (StartBool_2 Bool (true false (str.< Start_2 Start_5) (str.contains Start_8 Start_6) (= Start_5 Start_3) (= StartInt_2 StartInt) (<= StartInt_5 StartInt_2)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_1 StartBool) (str.< Start_1 Start_2) (str.prefixof Start_3 Start) (str.suffixof Start_2 Start_2) (str.contains Start_2 Start_3) (<= StartInt_1 StartInt_1)))
   (Start_13 String ("1" (str.++ Start_10 Start_4) (str.at Start_7 StartInt_7) (str.substr Start_4 StartInt_5 StartInt_3) (str.from_int StartInt_5)))
   (Start_8 String ("" "b" (str.replace Start_9 Start_8 Start_1) (str.from_int StartInt_6)))
   (Start_9 String ("1" "" (str.++ Start_6 Start_7) (str.at Start_3 StartInt_5) (str.substr Start_3 StartInt_8 StartInt) (str.from_int StartInt_1)))
   (Start_14 String ("" "a" (str.at Start_4 StartInt_2) (str.replace Start Start_13 Start_7)))
   (Start_12 String ("a" "0" "b" (str.substr Start_5 StartInt_2 StartInt_3) (ite StartBool_1 Start_3 Start_10)))
   (StartInt_7 Int (1 (str.len Start_6) (str.to_int Start_3)))
   (StartInt_8 Int (1 (str.len Start_11) (str.indexof Start_1 Start_11 StartInt_4)))
   (Start_1 String ("0" (str.++ Start_9 Start_6) (str.substr Start_13 StartInt_4 StartInt) (str.replace Start_4 Start_7 Start_13) (str.from_int StartInt_6) (ite StartBool_5 Start_5 Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "b" "")))

(check-synth)
