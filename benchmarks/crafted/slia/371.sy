(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_23 String) (Start_20 String) (Start_1 String) (Start_21 String) (StartInt_1 Int) (StartInt_10 Int) (Start_7 String) (StartInt_3 Int) (StartInt_4 Int) (Start_6 String) (Start_19 String) (Start_5 String) (Start_11 String) (StartInt_8 Int) (Start_17 String) (StartInt_2 Int) (Start_22 String) (StartInt_5 Int) (Start_2 String) (Start_3 String) (StartInt_6 Int) (StartInt_11 Int) (Start_4 String) (Start_13 String) (Start_9 String) (Start_14 String) (Start_8 String) (StartInt_9 Int) (Start_15 String) (StartBool_2 Bool) (Start_12 String) (Start_18 String) (StartBool_1 Bool) (Start_16 String) (StartInt_7 Int) (Start_10 String))
  ((Start String ("0" y x (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt) (str.replace Start_2 Start_2 Start) (ite StartBool Start_3 Start_4)))
   (StartInt Int (1 0 (str.len Start_3)))
   (StartBool Bool (false (not StartBool_1) (str.<= Start_4 Start_11) (str.suffixof Start_12 Start_18) (str.contains Start_1 Start_10) (= Start_22 Start_3) (= StartInt_2 StartInt_10) (<= StartInt_4 StartInt)))
   (Start_23 String ("" "a" (str.++ Start_1 Start_13) (str.at Start_21 StartInt_7)))
   (Start_20 String (y (str.at Start_12 StartInt_7) (str.substr Start_10 StartInt_11 StartInt_5) (str.replace Start_18 Start_2 Start_14)))
   (Start_1 String ("1" y (str.at Start_20 StartInt_7) (str.replace Start_2 Start_21 Start_15)))
   (Start_21 String (y (str.++ Start_7 Start_19)))
   (StartInt_1 Int (0 1 (str.indexof Start_17 Start_4 StartInt_8) (str.to_int Start_9)))
   (StartInt_10 Int (1 0))
   (Start_7 String ("b" y (str.++ Start Start_8) (str.substr Start_6 StartInt_3 StartInt_2) (str.replace Start_9 Start_10 Start_2) (str.from_int StartInt_4) (ite StartBool Start_2 Start_11)))
   (StartInt_3 Int (0 (str.len Start_1) (str.indexof Start_7 Start StartInt_1)))
   (StartInt_4 Int (0 1 (str.to_int Start_1)))
   (Start_6 String ("a" "0" (str.substr Start_4 StartInt_5 StartInt) (str.replace Start_2 Start_4 Start_4) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (Start_19 String ("a" "b" "0" "" "1" y (str.++ Start_14 Start_14) (str.at Start_11 StartInt_3) (str.from_int StartInt_4) (ite StartBool_2 Start_14 Start_18)))
   (Start_5 String (x (str.++ Start_4 Start) (str.replace Start_4 Start_1 Start) (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start)))
   (Start_11 String ("a" (str.++ Start_10 Start_12) (str.at Start StartInt_4) (str.substr Start_10 StartInt_2 StartInt_6) (str.replace Start_12 Start_2 Start_8)))
   (StartInt_8 Int (1 (str.len Start) (str.to_int Start_8)))
   (Start_17 String ("" "0" y (str.from_int StartInt_6)))
   (StartInt_2 Int (0 1))
   (Start_22 String ("a" "0" (str.++ Start_7 Start_12) (str.at Start_9 StartInt_10) (str.substr Start StartInt_7 StartInt_1) (str.replace Start_9 Start_1 Start_7) (ite StartBool Start_18 Start_23)))
   (StartInt_5 Int (0 (str.len Start_3) (str.indexof Start_2 Start_3 StartInt_2) (str.to_int Start_6)))
   (Start_2 String ("0" y "a" "" (str.replace Start_18 Start_15 Start_1) (str.from_int StartInt_10)))
   (Start_3 String (x "b" "a" "0" "" (str.at Start_4 StartInt_9) (str.substr Start_19 StartInt_6 StartInt_4)))
   (StartInt_6 Int (1 (str.len Start_3) (str.indexof Start_13 Start_6 StartInt_7)))
   (StartInt_11 Int (0 1 (str.len Start_16) (str.to_int Start_6)))
   (Start_4 String ("0" (str.++ Start_5 Start_2) (str.substr Start_4 StartInt_2 StartInt_1) (str.replace Start Start_5 Start_3) (str.from_int StartInt) (ite StartBool Start_1 Start_3)))
   (Start_13 String ("a" (ite StartBool_2 Start_10 Start_1)))
   (Start_9 String ("0" (str.++ Start_4 Start_8) (str.substr Start_11 StartInt_1 StartInt_8)))
   (Start_14 String ("a" y (str.substr Start_4 StartInt_8 StartInt_4) (str.replace Start_4 Start_1 Start_14) (str.from_int StartInt_9)))
   (Start_8 String ("" (str.at Start_15 StartInt_3) (str.substr Start_4 StartInt_6 StartInt_2) (str.from_int StartInt_4)))
   (StartInt_9 Int (0 (str.len Start_10) (str.indexof Start_5 Start_15 StartInt_7) (str.to_int Start_5)))
   (Start_15 String (y "1" "" (str.++ Start_10 Start_5) (str.replace Start_2 Start_11 Start_4)))
   (StartBool_2 Bool (false (not StartBool) (str.suffixof Start_15 Start_3) (str.contains Start_4 Start_8)))
   (Start_12 String ("a" (str.++ Start_12 Start_16) (str.replace Start_3 Start Start_11) (str.from_int StartInt_3) (ite StartBool Start_9 Start_16)))
   (Start_18 String ("0" "a" x "1" y (str.at Start_10 StartInt_3) (str.substr Start_14 StartInt_2 StartInt_6)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (str.< Start_1 Start) (str.prefixof Start Start) (str.suffixof Start_1 Start_5) (str.contains Start_4 Start_1) (= StartInt_4 StartInt_5) (<= StartInt StartInt_4)))
   (Start_16 String (y (str.at Start_17 StartInt_6) (str.replace Start_2 Start_14 Start_15) (ite StartBool_1 Start_17 Start_6)))
   (StartInt_7 Int (1 (str.indexof Start_9 Start_14 StartInt_8) (str.to_int Start_11)))
   (Start_10 String ("1" (str.at Start_14 StartInt_7) (str.substr Start_18 StartInt_4 StartInt_2) (str.replace Start_11 Start_2 Start_16) (ite StartBool Start_1 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "0" x) "a" "b")))

(check-synth)
