(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_7 Bool) (StartInt_5 Int) (StartBool_5 Bool) (Start_10 String) (StartBool_4 Bool) (StartBool_3 Bool) (StartInt_4 Int) (Start_9 String) (Start_2 String) (Start_1 String) (Start_6 String) (Start_8 String) (StartBool_1 Bool) (Start_4 String) (StartBool_6 Bool) (StartInt_2 Int) (Start_5 String) (Start_3 String) (StartInt_6 Int) (StartBool_2 Bool) (StartInt_3 Int) (Start_7 String) (StartInt_1 Int))
  ((Start String ("0" "" x "1" y (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1) (ite StartBool Start_2 Start_2)))
   (StartInt Int (0 (str.indexof Start_7 Start_1 StartInt_4)))
   (StartBool Bool (true (and StartBool StartBool_1) (str.< Start_8 Start_2) (str.<= Start_4 Start_3) (str.suffixof Start Start_4) (str.contains Start_1 Start_1) (= StartInt_1 StartInt_1) (<= StartInt_1 StartInt)))
   (StartBool_7 Bool (false (not StartBool_5) (and StartBool_1 StartBool_7) (str.< Start_2 Start_3) (str.<= Start_2 Start_10) (str.prefixof Start_9 Start_3) (= Start_7 Start_6) (<= StartInt_5 StartInt_3)))
   (StartInt_5 Int (0 (str.len Start_10) (str.indexof Start_9 Start_1 StartInt_6) (str.to_int Start_4)))
   (StartBool_5 Bool (true (not StartBool_3) (and StartBool_2 StartBool_6) (str.< Start_5 Start_7) (= Start Start_5) (<= StartInt StartInt_2)))
   (Start_10 String ("1" (str.from_int StartInt_4)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_3 StartBool_1) (str.<= Start_7 Start_9) (str.suffixof Start_6 Start_8) (= Start_10 Start_5) (<= StartInt_3 StartInt)))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool StartBool_4) (str.< Start_1 Start) (str.suffixof Start Start_7) (str.contains Start_3 Start_8) (= Start_5 Start_1)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_6 Start_2 StartInt) (str.to_int Start_1)))
   (Start_9 String ("0" "a" y (str.++ Start Start_4) (str.at Start StartInt_3) (str.substr Start_2 StartInt_3 StartInt_4) (str.from_int StartInt) (ite StartBool_5 Start_7 Start_8)))
   (Start_2 String ("" "a" (str.++ Start_1 Start_3) (str.substr Start StartInt StartInt) (ite StartBool_1 Start_1 Start_3)))
   (Start_1 String (y "" "b" "1" (str.++ Start_7 Start_5) (str.at Start StartInt) (str.substr Start_5 StartInt_2 StartInt_2)))
   (Start_6 String (y (str.++ Start Start_3) (str.replace Start_5 Start_3 Start_2) (str.from_int StartInt_2)))
   (Start_8 String ("b" "0" "1" y "" (ite StartBool_3 Start_5 Start_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.prefixof Start_3 Start_1) (str.contains Start_2 Start) (= Start_4 Start_4) (= StartInt_1 StartInt)))
   (Start_4 String ("b" y "" (str.at Start_1 StartInt_2) (str.from_int StartInt_1)))
   (StartBool_6 Bool (true (and StartBool_3 StartBool_7) (str.prefixof Start_5 Start_5) (str.suffixof Start_3 Start_4) (str.contains Start_1 Start) (<= StartInt_1 StartInt_5)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.indexof Start_5 Start_1 StartInt) (str.to_int Start_3)))
   (Start_5 String ("0" (str.++ Start_3 Start_3) (str.substr Start_4 StartInt StartInt_2) (ite StartBool_1 Start_2 Start_1)))
   (Start_3 String ("1" (str.substr Start_2 StartInt_3 StartInt_3) (str.from_int StartInt_3) (ite StartBool_2 Start_4 Start_6)))
   (StartInt_6 Int (0 1))
   (StartBool_2 Bool (false (and StartBool_1 StartBool) (str.< Start_4 Start) (str.<= Start Start) (str.suffixof Start_5 Start_3) (= StartInt_1 StartInt_3) (<= StartInt_3 StartInt_4)))
   (StartInt_3 Int (1 0 (str.len Start_7) (str.indexof Start_7 Start_4 StartInt_4) (str.to_int Start_7)))
   (Start_7 String (y (str.substr Start_7 StartInt_2 StartInt_2) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_1 Int (0 (str.len Start_3) (str.indexof Start_7 Start_1 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" y "1")))

(check-synth)
