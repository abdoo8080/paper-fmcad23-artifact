(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (StartInt_1 Int) (Start_9 String) (StartBool_5 Bool) (StartInt_7 Int) (Start_8 String) (Start_12 String) (StartBool_3 Bool) (Start_11 String) (StartBool_4 Bool) (Start_1 String) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_2 Int) (Start_4 String) (Start_2 String) (Start_7 String) (StartInt_4 Int) (StartInt_3 Int) (Start_5 String) (Start_6 String) (Start_13 String) (StartInt_5 Int) (Start_3 String) (StartInt_6 Int))
  ((Start String ("b" y "" "1" (str.++ Start Start_1) (str.substr Start StartInt_1 StartInt_1) (str.replace Start Start_2 Start_3) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 (str.indexof Start_6 Start_4 StartInt_2)))
   (StartBool Bool (true false (not StartBool_2) (= Start_13 Start_6) (<= StartInt_1 StartInt_7)))
   (Start_10 String ("1" "b" y (str.at Start_10 StartInt_3) (str.substr Start_11 StartInt_2 StartInt_4) (str.replace Start_8 Start_5 Start_7) (str.from_int StartInt_3) (ite StartBool_4 Start_11 Start_12)))
   (StartInt_1 Int (0 1 (str.len Start_6) (str.indexof Start_4 Start_5 StartInt_7) (str.to_int Start_7)))
   (Start_9 String ("a" "0" y (str.substr Start StartInt StartInt_4)))
   (StartBool_5 Bool (false true (str.< Start Start_5) (str.suffixof Start_9 Start) (= Start_5 Start_6)))
   (StartInt_7 Int (1 (str.len Start_3) (str.to_int Start_3)))
   (Start_8 String ("b" "a" "0" y "1" (str.substr Start_8 StartInt_6 StartInt_7) (str.from_int StartInt_5)))
   (Start_12 String (""))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_2 StartBool_5) (str.<= Start_5 Start_4) (str.contains Start_4 Start_8) (= StartInt_4 StartInt_2)))
   (Start_11 String ("" (str.++ Start_1 Start_10) (str.at Start_8 StartInt_6) (str.replace Start_1 Start Start_2) (str.from_int StartInt_1)))
   (StartBool_4 Bool (true false (and StartBool StartBool)))
   (Start_1 String ("1" (str.++ Start Start_10) (ite StartBool_4 Start_3 Start_8)))
   (StartBool_1 Bool (false (not StartBool) (str.prefixof Start_3 Start_2) (str.contains Start_4 Start) (<= StartInt StartInt_2)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_4 StartBool_4) (str.< Start_6 Start_6) (str.prefixof Start_4 Start_6) (str.contains Start_2 Start_7) (= Start_4 Start_5) (= StartInt_1 StartInt_6) (<= StartInt_2 StartInt_5)))
   (StartInt_2 Int (0 (str.len Start_4)))
   (Start_4 String ("a" "b" y "1" (str.++ Start_5 Start_2) (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt_1 StartInt_3) (str.from_int StartInt_4)))
   (Start_2 String ("" x "a" y "0" (str.at Start_7 StartInt_5) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_1)))
   (Start_7 String ("0" (str.substr Start_5 StartInt_5 StartInt_4)))
   (StartInt_4 Int (0 (str.indexof Start_2 Start_3 StartInt_2) (str.to_int Start)))
   (StartInt_3 Int (0 (str.to_int Start)))
   (Start_5 String ("1" (str.++ Start_6 Start_6) (str.at Start_4 StartInt) (str.replace Start_3 Start_2 Start_3) (ite StartBool Start_5 Start_2)))
   (Start_6 String ("1" (str.++ Start_1 Start_6) (str.substr Start_1 StartInt_4 StartInt_5) (str.replace Start_3 Start_5 Start_3) (str.from_int StartInt_4) (ite StartBool Start_2 Start)))
   (Start_13 String (y (str.++ Start_5 Start_1) (str.from_int StartInt_6)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_5 Start StartInt) (str.to_int Start_6)))
   (Start_3 String ("1" "" "b" (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt_4 StartInt_4)))
   (StartInt_6 Int (1 0 (str.len Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "0" "1") 1)))

(check-synth)
