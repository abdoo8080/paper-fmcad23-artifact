(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (StartBool_2 Bool) (Start_12 String) (StartBool_4 Bool) (Start_8 String) (Start_3 String) (Start_9 String) (StartInt_6 Int) (Start_4 String) (StartInt_1 Int) (Start_10 String) (Start_7 String) (Start_1 String) (Start_2 String) (Start_11 String) (StartBool_3 Bool) (Start_6 String) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_3 Int) (Start_5 String) (StartInt_4 Int) (StartInt_5 Int))
  ((Start String (x (str.substr Start StartInt StartInt_1)))
   (StartInt Int (1 (str.len Start_1) (str.to_int Start_1)))
   (StartBool Bool (true false (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_11 Start_8) (str.prefixof Start Start_11) (str.suffixof Start_11 Start_10) (<= StartInt StartInt_5)))
   (StartInt_2 Int (1 0))
   (StartBool_2 Bool (true (and StartBool StartBool_4) (str.prefixof Start_7 Start_12) (str.contains Start_1 Start_10) (= StartInt_6 StartInt_1) (<= StartInt StartInt_6)))
   (Start_12 String ("a" (str.++ Start_10 Start)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool_1) (str.< Start_5 Start_8) (= Start Start_7) (= StartInt_3 StartInt_5)))
   (Start_8 String ("0" "a" (str.at Start_8 StartInt_6) (str.substr Start_6 StartInt_3 StartInt_7) (str.replace Start_7 Start_5 Start_9) (str.from_int StartInt_5) (ite StartBool_2 Start_3 Start_10)))
   (Start_3 String ("0" "b" (str.replace Start_2 Start_4 Start_6) (str.from_int StartInt_7)))
   (Start_9 String ("" (str.substr Start_9 StartInt_3 StartInt) (str.replace Start_1 Start_9 Start_6) (str.from_int StartInt_2)))
   (StartInt_6 Int (0 1 (str.indexof Start_2 Start_3 StartInt) (str.to_int Start)))
   (Start_4 String (y x (str.++ Start_5 Start_4) (str.replace Start_4 Start_3 Start) (str.from_int StartInt_6) (ite StartBool_1 Start_6 Start_2)))
   (StartInt_1 Int (1 (str.len Start)))
   (Start_10 String ("a" "b" "" (str.++ Start_4 Start_4) (str.substr Start_6 StartInt_6 StartInt_4) (str.replace Start_9 Start Start_11) (ite StartBool_4 Start_11 Start_11)))
   (Start_7 String (y (str.at Start_5 StartInt_7) (str.substr Start_5 StartInt_7 StartInt_2) (str.from_int StartInt_6) (ite StartBool_1 Start Start_2)))
   (Start_1 String ("b" "" x "a" "0" "1" (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start Start Start) (ite StartBool_1 Start_2 Start_1)))
   (Start_2 String (y "0" (str.++ Start_11 Start_9) (str.substr Start_5 StartInt_1 StartInt) (str.replace Start_2 Start_1 Start) (ite StartBool_1 Start_2 Start_10)))
   (Start_11 String ("a" (str.at Start_3 StartInt_7) (str.from_int StartInt_2) (ite StartBool Start_12 Start_1)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_5 Start_8) (str.prefixof Start_5 Start_9) (str.suffixof Start_3 Start_6) (str.contains Start_8 Start_6) (= Start_1 Start_6) (= StartInt_2 StartInt_3) (<= StartInt_1 StartInt_3)))
   (Start_6 String ("" (str.++ Start Start_2) (str.at Start StartInt_4) (str.substr Start_6 StartInt_3 StartInt_6) (str.from_int StartInt_7) (ite StartBool_2 Start Start_4)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_3) (str.< Start_2 Start_3) (str.<= Start Start_1) (str.prefixof Start_3 Start_4) (str.suffixof Start_5 Start_1) (= StartInt_2 StartInt_2) (<= StartInt_2 StartInt_2)))
   (StartInt_7 Int (1 (str.len Start_5) (str.indexof Start Start_7 StartInt_5) (str.to_int Start)))
   (StartInt_3 Int (1 0 (str.len Start) (str.indexof Start_2 Start_1 StartInt_4) (str.to_int Start_5)))
   (Start_5 String ("b" "1" (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt_3)))
   (StartInt_4 Int (1 0 (str.indexof Start_5 Start StartInt_5) (str.to_int Start_4)))
   (StartInt_5 Int (0 (str.len Start_4) (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y (str.replace "b" y "b"))))

(check-synth)
