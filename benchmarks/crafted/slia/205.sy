(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartInt_3 Int) (StartInt_4 Int) (Start_9 String) (Start_6 String) (Start_8 String) (Start_7 String) (Start_17 String) (StartBool_1 Bool) (Start_2 String) (Start_4 String) (StartInt_1 Int) (Start_1 String) (StartInt_6 Int) (Start_14 String) (Start_10 String) (Start_11 String) (Start_12 String) (Start_5 String) (Start_13 String) (StartInt_5 Int) (StartInt_2 Int) (Start_16 String) (Start_18 String) (StartInt_8 Int) (StartBool_2 Bool) (Start_20 String) (StartInt_9 Int) (StartInt_7 Int) (Start_19 String) (Start_15 String))
  ((Start String ("b" (str.substr Start StartInt StartInt) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.indexof Start_14 Start_20 StartInt_8)))
   (StartBool Bool (false true (str.suffixof Start_16 Start_20) (= StartInt_8 StartInt_4)))
   (Start_3 String ("b" (str.++ Start_14 Start_18) (str.substr Start_2 StartInt_7 StartInt_3) (ite StartBool_1 Start_10 Start_15)))
   (StartInt_3 Int (0 1 (str.len Start_20) (str.indexof Start_11 Start_9 StartInt_5)))
   (StartInt_4 Int (0 1))
   (Start_9 String (x (str.at Start_3 StartInt_3) (str.substr Start_6 StartInt_1 StartInt_3)))
   (Start_6 String ("b" "a" (str.++ Start_1 Start_5) (str.replace Start_8 Start_6 Start_6)))
   (Start_8 String ("b" "0" "" (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_7 Start_9 Start_3)))
   (Start_7 String ("b" "1" "a" (str.++ Start_1 Start_7) (str.at Start_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_2)))
   (Start_17 String ("1" "0" (str.++ Start Start_13) (str.at Start_15 StartInt_6) (str.substr Start_9 StartInt_7 StartInt_2) (str.from_int StartInt_7)))
   (StartBool_1 Bool (false (not StartBool_1) (str.< Start_5 Start_4) (str.suffixof Start Start_6) (str.contains Start_2 Start_5) (= Start_3 Start_7) (<= StartInt_1 StartInt_4)))
   (Start_2 String ("b" (str.at Start_1 StartInt) (str.substr Start_1 StartInt StartInt_2)))
   (Start_4 String ("b" (str.++ Start Start_3)))
   (StartInt_1 Int (0 1 (str.len Start_2)))
   (Start_1 String (y (str.++ Start Start_1) (str.at Start_3 StartInt_2) (str.substr Start_2 StartInt_2 StartInt_3) (ite StartBool_1 Start_4 Start_1)))
   (StartInt_6 Int (0 1 (str.len Start_13) (str.indexof Start_8 Start StartInt_7)))
   (Start_14 String ("" (str.++ Start_8 Start_7) (str.at Start_5 StartInt_4) (str.substr Start_4 StartInt_5 StartInt_5) (str.replace Start_14 Start_13 Start_9) (str.from_int StartInt_4) (ite StartBool Start_6 Start_3)))
   (Start_10 String ("a" (str.++ Start_3 Start_11) (str.substr Start_3 StartInt StartInt_5) (str.replace Start_12 Start_7 Start_1) (ite StartBool_1 Start_5 Start_12)))
   (Start_11 String ("1" y (str.++ Start_3 Start_11) (str.at Start_15 StartInt_6) (str.replace Start_7 Start_14 Start_15)))
   (Start_12 String ("a" (str.++ Start_13 Start_10) (str.replace Start_10 Start Start_14)))
   (Start_5 String ("" "a" (str.++ Start_5 Start_6) (str.at Start_10 StartInt_5) (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start_9 Start_6 Start_4)))
   (Start_13 String ("b" (str.at Start_13 StartInt_4) (str.replace Start_2 Start_13 Start_3) (ite StartBool Start_4 Start_9)))
   (StartInt_5 Int (0 (str.to_int Start)))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start_2)))
   (Start_16 String ("b" (str.++ Start_3 Start_10) (str.substr Start StartInt_8 StartInt) (str.from_int StartInt_6)))
   (Start_18 String ("b" "a" (str.at Start_11 StartInt_7) (str.replace Start_17 Start_17 Start_15) (str.from_int StartInt_2) (ite StartBool_2 Start_8 Start_8)))
   (StartInt_8 Int (0 1 (str.len Start_18) (str.indexof Start_8 Start_7 StartInt_5)))
   (StartBool_2 Bool (true (str.< Start Start_13) (str.<= Start_13 Start_5) (str.suffixof Start_10 Start_19) (str.contains Start_1 Start_17) (= StartInt_6 StartInt) (<= StartInt_5 StartInt_9)))
   (Start_20 String ("b"))
   (StartInt_9 Int (0 1 (str.len Start_18) (str.to_int Start_15)))
   (StartInt_7 Int (1 0 (str.len Start_16) (str.indexof Start_17 Start_17 StartInt_2) (str.to_int Start_2)))
   (Start_19 String ("1" (str.at Start_6 StartInt_3) (str.substr Start_19 StartInt_1 StartInt) (str.replace Start_7 Start_8 Start_16) (ite StartBool_1 Start_12 Start_3)))
   (Start_15 String ("b" (str.at Start StartInt_7) (str.substr Start StartInt_7 StartInt_9) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof "1" (str.replace "0" (str.at x (str.indexof "0" x 1)) y)) "1" "b")))

(check-synth)
