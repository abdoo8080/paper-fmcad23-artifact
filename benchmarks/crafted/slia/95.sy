(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_14 String) (Start_13 String) (Start_12 String) (Start_10 String) (StartInt_1 Int) (Start_1 String) (Start_7 String) (Start_15 String) (Start_2 String) (Start_16 String) (StartBool_1 Bool) (Start_4 String) (StartBool_2 Bool) (Start_5 String) (StartInt_2 Int) (Start_3 String) (Start_8 String) (StartInt_3 Int) (Start_11 String) (StartInt_4 Int) (Start_6 String) (StartInt_5 Int) (Start_9 String))
  ((Start String ("a" "1" (str.at Start StartInt) (str.replace Start_1 Start_1 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 0 (str.len Start_5) (str.to_int Start_16)))
   (StartBool Bool (false true (not StartBool_1) (str.<= Start_15 Start_16) (str.suffixof Start_5 Start_6) (= Start_9 Start_10) (= StartInt_2 StartInt_3)))
   (StartInt_6 Int (1 0 (str.to_int Start_1)))
   (Start_14 String ("" "1" x "b" "0" (str.++ Start_15 Start_8) (str.at Start_7 StartInt) (str.substr Start_1 StartInt_6 StartInt_1)))
   (Start_13 String (x y (str.substr Start_10 StartInt_1 StartInt_6) (str.replace Start_12 Start_14 Start_13) (str.from_int StartInt_3)))
   (Start_12 String ("b" x y (str.++ Start Start_3) (str.replace Start_10 Start_10 Start_10)))
   (Start_10 String (x (str.at Start_10 StartInt) (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_5 Start_11 Start_12) (str.from_int StartInt_5) (ite StartBool_2 Start_6 Start_9)))
   (StartInt_1 Int (0 1 (str.len Start_10) (str.to_int Start_10)))
   (Start_1 String ("0" y "1" (str.++ Start_9 Start_4) (str.substr Start_12 StartInt_5 StartInt_3) (str.replace Start_8 Start_5 Start_12)))
   (Start_7 String (x (str.from_int StartInt_2)))
   (Start_15 String ("0" (str.++ Start_4 Start_15) (ite StartBool Start_12 Start_15)))
   (Start_2 String ("" "1" (str.++ Start Start) (str.at Start_3 StartInt_2) (str.replace Start_3 Start_4 Start_2) (str.from_int StartInt)))
   (Start_16 String (x (str.at Start_4 StartInt_3) (str.from_int StartInt_6)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool StartBool) (str.<= Start_1 Start_1) (str.suffixof Start_2 Start_3) (str.contains Start_3 Start_4) (= Start_2 Start_3)))
   (Start_4 String ("" "a" (str.at Start_4 StartInt_1) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_3 Start_1 Start_1) (ite StartBool_2 Start_5 Start_4)))
   (StartBool_2 Bool (true (str.<= Start Start) (str.prefixof Start_4 Start_6) (str.contains Start_1 Start_1) (= Start_4 Start_1) (<= StartInt_1 StartInt_2)))
   (Start_5 String ("0" (str.++ Start_4 Start_4) (str.at Start_1 StartInt_2) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_4 Start_1 Start_1)))
   (StartInt_2 Int (1 (str.len Start_3) (str.to_int Start_2)))
   (Start_3 String ("0" "b" (str.at Start_2 StartInt) (str.substr Start_5 StartInt StartInt_3) (ite StartBool Start_4 Start_5)))
   (Start_8 String ("" "0" x (str.++ Start_4 Start_9) (str.at Start_8 StartInt_1) (str.from_int StartInt_4)))
   (StartInt_3 Int (0 (str.indexof Start_5 Start_3 StartInt_4) (str.to_int Start_5)))
   (Start_11 String (x (str.++ Start_2 Start_13) (str.at Start_13 StartInt_1) (str.substr Start_12 StartInt_4 StartInt_1) (str.replace Start_8 Start Start_8) (ite StartBool Start_9 Start_13)))
   (StartInt_4 Int (1 (str.len Start) (str.to_int Start_1)))
   (Start_6 String (y "1" "a" (str.at Start_6 StartInt_3) (str.replace Start_7 Start_8 Start_5) (ite StartBool_1 Start_8 Start_4)))
   (StartInt_5 Int (0 1 (str.indexof Start_8 Start_1 StartInt_2) (str.to_int Start_9)))
   (Start_9 String (x "0" (ite StartBool_1 Start_9 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 1) y)))

(check-synth)
