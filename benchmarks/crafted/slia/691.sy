(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (Start_17 String) (Start_18 String) (Start_16 String) (Start_7 String) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_5 Int) (StartBool_1 Bool) (Start_6 String) (Start_11 String) (StartInt_3 Int) (Start_9 String) (Start_4 String) (StartBool_5 Bool) (StartInt_8 Int) (Start_2 String) (Start_1 String) (Start_12 String) (Start_10 String) (Start_14 String) (Start_3 String) (StartInt_4 Int) (StartInt_7 Int) (StartInt_10 Int) (Start_13 String) (Start_8 String) (StartInt_9 Int) (StartInt_6 Int) (StartBool_4 Bool) (Start_15 String) (Start_5 String) (StartBool_3 Bool) (StartInt_1 Int))
  ((Start String (x (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 0))
   (StartBool Bool (true false (not StartBool_5) (and StartBool_3 StartBool_1) (str.< Start_6 Start_5) (str.<= Start Start_7) (str.suffixof Start_15 Start_2) (str.contains Start_14 Start_10) (= Start_16 Start_5) (= StartInt_3 StartInt_8)))
   (Start_19 String (y (str.++ Start_7 Start_10) (str.at Start_10 StartInt) (str.replace Start_2 Start_13 Start_16)))
   (Start_17 String (x "b" (str.at Start_14 StartInt_2) (str.substr Start_11 StartInt_1 StartInt_7) (str.from_int StartInt_3)))
   (Start_18 String ("0" (str.substr Start_2 StartInt_8 StartInt_1) (str.from_int StartInt_1)))
   (Start_16 String (y "" "b" (str.at Start_11 StartInt_8) (str.substr Start_14 StartInt_3 StartInt_4) (str.replace Start_17 Start_10 Start_11) (str.from_int StartInt_9) (ite StartBool Start_10 Start_18)))
   (Start_7 String ("b" (str.at Start StartInt_3) (str.replace Start_7 Start_2 Start)))
   (StartInt_2 Int (0 1 (str.to_int Start_4)))
   (StartBool_2 Bool (false true (str.< Start_4 Start_5) (str.suffixof Start Start_2) (str.contains Start_2 Start) (= StartInt StartInt_1) (<= StartInt_3 StartInt)))
   (StartInt_5 Int (0 1 (str.len Start_5) (str.indexof Start Start StartInt) (str.to_int Start_5)))
   (StartBool_1 Bool (true (not StartBool_3) (and StartBool StartBool_4) (str.prefixof Start_7 Start_8)))
   (Start_6 String ("1" x (str.from_int StartInt_4)))
   (Start_11 String ("" (str.at Start_2 StartInt_9) (str.substr Start_11 StartInt_1 StartInt_2)))
   (StartInt_3 Int (1 0 (str.len Start_6) (str.to_int Start_1)))
   (Start_9 String (x "" (str.at Start_7 StartInt_5) (str.substr Start_3 StartInt_3 StartInt_6) (str.replace Start_4 Start_4 Start_11) (ite StartBool_2 Start_12 Start_11)))
   (Start_4 String ("a" "1" x (str.at Start StartInt_2) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_2 Start Start) (str.from_int StartInt_2) (ite StartBool_2 Start Start_4)))
   (StartBool_5 Bool (false (not StartBool_2) (str.< Start_18 Start_15) (str.<= Start_19 Start_17) (str.prefixof Start_16 Start_16) (= StartInt_1 StartInt_5) (<= StartInt_9 StartInt_7)))
   (StartInt_8 Int (0 (str.len Start_1)))
   (Start_2 String ("b" (str.++ Start_3 Start_3) (str.at Start_4 StartInt) (str.substr Start_2 StartInt StartInt) (str.replace Start_3 Start_2 Start) (str.from_int StartInt) (ite StartBool Start_2 Start)))
   (Start_1 String ("" (str.++ Start_2 Start_9) (str.substr Start StartInt_2 StartInt_10) (str.replace Start_7 Start_10 Start_1) (str.from_int StartInt_10)))
   (Start_12 String (x "0" "a" (str.++ Start_13 Start_11) (str.at Start_2 StartInt_3) (str.substr Start_5 StartInt_7 StartInt_8) (str.replace Start_7 Start_14 Start_13) (str.from_int StartInt_7) (ite StartBool_4 Start Start_13)))
   (Start_10 String ("1" "a" "b" (str.++ Start Start_6) (str.at Start_10 StartInt_2)))
   (Start_14 String ("a" y (str.++ Start Start_8) (str.at Start_1 StartInt_2) (str.substr Start_5 StartInt_8 StartInt_1) (str.from_int StartInt_2)))
   (Start_3 String ("b" x (str.at Start_5 StartInt_4) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_7)))
   (StartInt_4 Int (0 (str.indexof Start Start_6 StartInt)))
   (StartInt_7 Int (1 (str.len Start_7) (str.indexof Start_3 Start StartInt_8) (str.to_int Start_12)))
   (StartInt_10 Int (0 1 (str.to_int Start_5)))
   (Start_13 String ("1" (str.++ Start_6 Start_4) (str.substr Start_6 StartInt_6 StartInt_6) (str.replace Start_13 Start_4 Start_11)))
   (Start_8 String (x "b" (str.replace Start_9 Start_2 Start_10)))
   (StartInt_9 Int (0 1 (str.indexof Start_12 Start_12 StartInt_9)))
   (StartInt_6 Int (1 0 (str.indexof Start_3 Start_7 StartInt_5) (str.to_int Start_13)))
   (StartBool_4 Bool (true (not StartBool_3) (and StartBool StartBool_2) (str.< Start_3 Start_15) (str.prefixof Start_6 Start_13) (str.suffixof Start_12 Start_11) (= Start_3 Start_7) (= StartInt_4 StartInt_8)))
   (Start_15 String (x "a" "0" y (str.at Start_4 StartInt_2) (str.substr Start_13 StartInt_7 StartInt_6)))
   (Start_5 String ("a" (str.++ Start_5 Start_6) (str.substr Start_1 StartInt StartInt_2) (str.from_int StartInt_5)))
   (StartBool_3 Bool (true (str.< Start_7 Start_2) (str.<= Start_7 Start_2) (= Start_5 Start_12) (= StartInt_6 StartInt_7)))
   (StartInt_1 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.++ "1" "b") "a")))

(check-synth)
