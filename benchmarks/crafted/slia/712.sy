(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_21 String) (StartInt_11 Int) (Start_20 String) (Start_19 String) (Start_1 String) (Start_2 String) (Start_7 String) (StartInt_10 Int) (StartInt_7 Int) (Start_17 String) (StartInt_5 Int) (Start_16 String) (Start_5 String) (Start_14 String) (Start_9 String) (Start_10 String) (Start_8 String) (Start_15 String) (StartBool_3 Bool) (StartBool_7 Bool) (StartInt_3 Int) (Start_3 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_18 String) (StartBool_2 Bool) (StartBool_4 Bool) (Start_6 String) (StartInt_6 Int) (StartInt_4 Int) (StartInt_8 Int) (Start_13 String) (StartBool_5 Bool) (StartInt_9 Int) (StartBool_6 Bool) (Start_11 String) (Start_12 String) (Start_4 String) (StartInt_2 Int))
  ((Start String (y "1" (str.replace Start_1 Start Start_2) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.len Start_20) (str.indexof Start_17 Start_13 StartInt_6) (str.to_int Start_8)))
   (StartBool Bool (true (not StartBool_6) (str.<= Start_3 Start_2) (str.suffixof Start_13 Start_17) (str.contains Start_17 Start_7)))
   (Start_21 String ("" (str.++ Start_18 Start_21) (str.substr Start StartInt_2 StartInt) (str.replace Start_10 Start_14 Start_19)))
   (StartInt_11 Int (1 0 (str.indexof Start_8 Start_5 StartInt_5) (str.to_int Start_14)))
   (Start_20 String ("a" "b" (str.++ Start_5 Start_21) (str.from_int StartInt_4) (ite StartBool_5 Start_1 Start_9)))
   (Start_19 String ("a" "1" (str.++ Start_7 Start_6) (str.at Start_10 StartInt_10) (str.substr Start_19 StartInt_6 StartInt_5) (ite StartBool_6 Start_4 Start_9)))
   (Start_1 String ("" (str.++ Start_8 Start_12) (str.at Start_17 StartInt_3) (str.substr Start_10 StartInt_3 StartInt_5) (str.from_int StartInt_8) (ite StartBool_6 Start_7 Start_18)))
   (Start_2 String ("a" (str.at Start_16 StartInt) (str.substr Start_11 StartInt_2 StartInt_3) (str.from_int StartInt)))
   (Start_7 String ("0" (str.++ Start_3 Start_6) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start_1 Start_8 Start_7) (str.from_int StartInt_1)))
   (StartInt_10 Int (1 0 (str.len Start_10) (str.indexof Start_18 Start_5 StartInt_11)))
   (StartInt_7 Int (0))
   (Start_17 String ("a" x (str.++ Start_17 Start_11) (str.at Start StartInt) (str.substr Start StartInt_2 StartInt_9) (str.replace Start_2 Start_9 Start_7) (str.from_int StartInt_10) (ite StartBool_7 Start_13 Start_19)))
   (StartInt_5 Int (0 (str.indexof Start_3 Start_7 StartInt_2) (str.to_int Start_6)))
   (Start_16 String ("b" (str.substr Start_3 StartInt_7 StartInt_9) (str.from_int StartInt_5)))
   (Start_5 String (y (str.++ Start_4 Start_3) (str.at Start StartInt_4) (str.replace Start Start_6 Start) (str.from_int StartInt_2) (ite StartBool_3 Start_2 Start_6)))
   (Start_14 String ("0" (str.substr Start StartInt_5 StartInt) (str.replace Start_2 Start_11 Start_5) (str.from_int StartInt_9) (ite StartBool_2 Start_4 Start_11)))
   (Start_9 String ("0" (str.++ Start_5 Start_3) (str.at Start_9 StartInt_2) (str.replace Start_10 Start_6 Start) (ite StartBool_3 Start_7 Start_3)))
   (Start_10 String (y (str.++ Start_9 Start_10) (str.at Start StartInt_5) (str.substr Start_9 StartInt_2 StartInt_7) (str.replace Start Start_4 Start_2) (str.from_int StartInt_5) (ite StartBool_4 Start_6 Start_4)))
   (Start_8 String (x "b" "0" "1" (str.++ Start_5 Start_8) (str.at Start_8 StartInt_6) (str.replace Start_5 Start_1 Start_9) (ite StartBool_2 Start_6 Start_1)))
   (Start_15 String (y (str.++ Start_4 Start_1) (str.at Start_11 StartInt) (str.from_int StartInt)))
   (StartBool_3 Bool (false true (str.<= Start_5 Start_2) (str.prefixof Start_2 Start_5) (str.suffixof Start_6 Start_4) (str.contains Start_5 Start) (<= StartInt_1 StartInt_1)))
   (StartBool_7 Bool (true (not StartBool_6) (and StartBool_4 StartBool_6) (str.< Start_16 Start_13) (str.<= Start_12 Start_2) (str.suffixof Start_1 Start_17) (str.contains Start_9 Start_4) (= Start_8 Start_10) (<= StartInt_9 StartInt_5)))
   (StartInt_3 Int (1 (str.to_int Start_1)))
   (Start_3 String ("a" (str.at Start StartInt) (str.replace Start_2 Start_2 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_2)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (str.< Start_2 Start_2) (str.prefixof Start Start) (str.suffixof Start_2 Start_2) (= StartInt_3 StartInt_3)))
   (StartInt_1 Int (1 (str.indexof Start_1 Start_1 StartInt_1) (str.to_int Start_3)))
   (Start_18 String ("b" (str.++ Start_5 Start) (str.replace Start_5 Start_4 Start_16) (ite StartBool_7 Start Start_11)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool StartBool) (str.< Start_2 Start_4) (str.<= Start Start_1) (str.prefixof Start Start_4) (str.suffixof Start_5 Start) (= Start_5 Start_2)))
   (StartBool_4 Bool (false (str.<= Start_6 Start_2) (str.suffixof Start_10 Start_5) (= Start Start_1) (= StartInt_7 StartInt_1) (<= StartInt_7 StartInt_5)))
   (Start_6 String ("b" y x "0" (str.substr Start_4 StartInt_2 StartInt) (str.replace Start_5 Start_4 Start_3) (str.from_int StartInt_5)))
   (StartInt_6 Int (1 0 (str.indexof Start_1 Start_1 StartInt_4)))
   (StartInt_4 Int (0 (str.len Start_2) (str.indexof Start_11 Start_1 StartInt_8)))
   (StartInt_8 Int (1))
   (Start_13 String ("1" "b" y (str.at Start_5 StartInt_1) (str.substr Start_11 StartInt StartInt_3) (str.replace Start_2 Start_7 Start_9) (ite StartBool_3 Start_5 Start_10)))
   (StartBool_5 Bool (false true (not StartBool_6) (str.<= Start_11 Start_7) (str.prefixof Start_1 Start_10) (= StartInt_1 StartInt_9)))
   (StartInt_9 Int (1 (str.len Start_5) (str.to_int Start_11)))
   (StartBool_6 Bool (true (not StartBool_4) (str.< Start_5 Start_10) (= Start_12 Start_13)))
   (Start_11 String ("a" (str.from_int StartInt) (ite StartBool_5 Start_9 Start_8)))
   (Start_12 String ("" (str.replace Start Start_14 Start_6) (str.from_int StartInt_3)))
   (Start_4 String (x (str.++ Start_5 Start_4) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_15 Start_8 Start_10)))
   (StartInt_2 Int (0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y "1") 0)))

(check-synth)
