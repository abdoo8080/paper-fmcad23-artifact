(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_10 String) (Start_13 String) (Start_11 String) (StartInt_5 Int) (Start_16 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_2 Int) (Start_9 String) (Start_1 String) (Start_12 String) (Start_4 String) (Start_6 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_14 String) (Start_5 String) (Start_7 String) (Start_15 String) (Start_2 String) (Start_8 String) (Start_3 String) (StartBool_2 Bool))
  ((Start String (y "" x (str.substr Start StartInt_1 StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 (str.len Start_7)))
   (StartBool Bool (false (str.< Start_1 Start_16) (str.<= Start_10 Start_7) (str.contains Start_15 Start_2) (= Start_12 Start_11) (= StartInt_5 StartInt_5) (<= StartInt StartInt)))
   (StartInt_6 Int (1 (str.indexof Start_14 Start_8 StartInt)))
   (Start_10 String ("a" x y "b" "" (str.at Start_10 StartInt_6) (str.replace Start_10 Start_3 Start_14)))
   (Start_13 String ("" "a" (str.++ Start_12 Start_5) (str.at Start_4 StartInt_4) (ite StartBool_2 Start_4 Start)))
   (Start_11 String ("1" "a" (str.++ Start_9 Start_10) (str.at Start_11 StartInt_1) (str.substr Start_6 StartInt StartInt_4) (str.replace Start_2 Start_12 Start_11) (str.from_int StartInt) (ite StartBool_2 Start_9 Start_3)))
   (StartInt_5 Int (0 (str.indexof Start_2 Start_8 StartInt_4) (str.to_int Start_11)))
   (Start_16 String ("a" "" (str.++ Start_14 Start_9) (str.at Start_9 StartInt_6) (str.replace Start_3 Start_9 Start_9)))
   (StartInt_1 Int (1 0 (str.indexof Start_2 Start_9 StartInt_3) (str.to_int Start_6)))
   (StartInt_3 Int (1 0 (str.len Start_2)))
   (StartInt_2 Int (0 (str.indexof Start Start_2 StartInt_1) (str.to_int Start_3)))
   (Start_9 String ("a" "1" (str.++ Start_10 Start_4) (str.at Start_5 StartInt_2) (str.replace Start_10 Start_3 Start_9) (str.from_int StartInt_5)))
   (Start_1 String (y (str.++ Start_8 Start) (str.at Start_3 StartInt_1)))
   (Start_12 String (y (str.++ Start_1 Start_5) (str.at Start_13 StartInt_3) (str.replace Start Start_6 Start_9) (str.from_int StartInt_4)))
   (Start_4 String ("a" (str.++ Start_3 Start_4) (str.replace Start_5 Start_3 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start)))
   (Start_6 String ("b" "" (str.++ Start_6 Start_5) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool) (str.< Start_1 Start) (str.<= Start_1 Start) (str.prefixof Start_1 Start_1) (str.contains Start_1 Start_1) (<= StartInt_1 StartInt)))
   (StartInt_4 Int (1 0 (str.len Start_6)))
   (Start_14 String ("b" "1" y "a" (str.++ Start_13 Start_11) (str.at Start_7 StartInt_4) (str.replace Start_7 Start_7 Start_6) (ite StartBool_1 Start_15 Start_11)))
   (Start_5 String ("0" (str.replace Start_6 Start_1 Start_7) (str.from_int StartInt_1)))
   (Start_7 String ("a" (str.substr Start_4 StartInt StartInt)))
   (Start_15 String (y (str.++ Start Start_8) (str.substr Start_12 StartInt_1 StartInt_2) (str.replace Start_11 Start_1 Start_11)))
   (Start_2 String ("a" "b" (str.++ Start_7 Start_5) (str.at Start_3 StartInt_1) (str.substr Start_5 StartInt_2 StartInt_1) (str.from_int StartInt_2)))
   (Start_8 String (y "b" (str.++ Start_4 Start_1) (ite StartBool_2 Start_5 Start_3)))
   (Start_3 String (y "" (str.at Start_4 StartInt_2) (str.from_int StartInt_2)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_1) (str.prefixof Start_1 Start_6) (str.contains Start_2 Start_5) (= StartInt_2 StartInt_3) (<= StartInt_4 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ (str.replace y (str.at y 1) y) y) "1")))

(check-synth)
