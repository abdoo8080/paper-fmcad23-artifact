(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_3 Bool) (StartInt_6 Int) (Start_7 String) (Start_2 String) (Start_3 String) (StartInt_4 Int) (Start_4 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_6 String) (Start_5 String) (Start_1 String) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_5 Int) (Start_8 String) (StartInt_2 Int))
  ((Start String (x (str.replace Start Start_1 Start_2)))
   (StartInt Int (0))
   (StartBool Bool (true (not StartBool_1) (<= StartInt StartInt_2)))
   (StartBool_4 Bool (true false (and StartBool StartBool_2) (str.< Start_2 Start_2) (= StartInt_5 StartInt_5)))
   (StartBool_3 Bool (false true (not StartBool_4) (str.< Start_4 Start_3) (str.<= Start_1 Start_6) (str.prefixof Start_1 Start_2) (str.suffixof Start_6 Start_6)))
   (StartInt_6 Int (1 0 (str.len Start) (str.indexof Start_6 Start_7 StartInt_3) (str.to_int Start_5)))
   (Start_7 String ("0" (str.++ Start_2 Start_1) (str.at Start_8 StartInt_4) (str.from_int StartInt_6) (ite StartBool_3 Start_8 Start_8)))
   (Start_2 String ("1" (str.++ Start Start_2) (str.at Start_2 StartInt) (ite StartBool_1 Start_3 Start_2)))
   (Start_3 String ("a" "0" "" "1" (str.at Start_2 StartInt) (str.replace Start_4 Start Start_1) (str.from_int StartInt) (ite StartBool_1 Start Start)))
   (StartInt_4 Int (0 1 (str.len Start) (str.indexof Start_1 Start_1 StartInt_5) (str.to_int Start_5)))
   (Start_4 String ("1" ""))
   (StartInt_1 Int (0 1))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (str.<= Start_4 Start_2) (= Start Start_5) (= StartInt_1 StartInt_1)))
   (Start_6 String ("a" x "" y "0" "b" "1" (str.at Start_3 StartInt_5) (str.substr Start_6 StartInt_1 StartInt_4) (str.from_int StartInt)))
   (Start_5 String ("0" (str.++ Start_3 Start_2) (str.at Start StartInt_2) (str.replace Start_1 Start_6 Start) (str.from_int StartInt_3)))
   (Start_1 String (x y (str.++ Start_5 Start_3) (str.at Start_7 StartInt_5) (str.substr Start_6 StartInt_6 StartInt_6)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool StartBool_3) (str.<= Start_2 Start_7) (str.suffixof Start_1 Start_1) (str.contains Start_8 Start) (= StartInt_2 StartInt_6) (<= StartInt_3 StartInt_1)))
   (StartInt_3 Int (0 (str.indexof Start Start_6 StartInt_4)))
   (StartInt_5 Int (0))
   (Start_8 String (y (str.substr Start_2 StartInt_1 StartInt_3)))
   (StartInt_2 Int (1 (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "b" "0")))

(check-synth)
