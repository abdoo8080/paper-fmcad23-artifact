(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_12 String) (Start_17 String) (Start_9 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_15 String) (StartBool_3 Bool) (Start_2 String) (Start_18 String) (Start_13 String) (Start_16 String) (StartInt_2 Int) (Start_5 String) (Start_7 String) (StartInt_6 Int) (StartInt_1 Int) (Start_10 String) (Start_11 String) (Start_8 String) (StartInt_5 Int) (StartInt_4 Int) (Start_1 String) (Start_4 String) (StartInt_7 Int) (Start_14 String) (StartInt_8 Int) (Start_3 String) (Start_6 String))
  ((Start String ("b" "1" (str.at Start StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.to_int Start_2)))
   (StartBool Bool (false true (and StartBool_2 StartBool_4) (str.suffixof Start_1 Start_10) (str.contains Start_10 Start_4) (= Start_16 Start_4) (= StartInt_9 StartInt) (<= StartInt_6 StartInt_6)))
   (StartInt_9 Int (1 (str.len Start_9) (str.to_int Start_15)))
   (StartBool_2 Bool (true false (and StartBool StartBool_1) (str.< Start_3 Start_1) (str.<= Start_3 Start_9) (str.prefixof Start_4 Start_5) (= Start_10 Start_8) (= StartInt_3 StartInt_3) (<= StartInt_1 StartInt_2)))
   (StartBool_4 Bool (true (not StartBool_3) (str.< Start_7 Start_8) (str.prefixof Start_13 Start_5) (= Start_1 Start_2) (= StartInt_6 StartInt_7) (<= StartInt_9 StartInt_4)))
   (Start_12 String ("0" "a" (str.at Start_9 StartInt_3) (str.substr Start_5 StartInt_4 StartInt_2) (str.replace Start_1 Start_9 Start_2) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_5)))
   (Start_17 String (x (str.replace Start_18 Start_11 Start) (str.from_int StartInt_7) (ite StartBool_2 Start_11 Start_8)))
   (Start_9 String ("1" "a" y x "0" (str.++ Start_4 Start) (str.substr Start_8 StartInt_4 StartInt_3) (str.replace Start_6 Start_8 Start_11) (str.from_int StartInt_1) (ite StartBool Start_4 Start_4)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_7 StartInt_3)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (str.< Start_3 Start_4) (str.suffixof Start_5 Start_2) (= StartInt StartInt_2)))
   (Start_15 String ("1" "a" "0" (str.++ Start_6 Start_6) (str.substr Start_13 StartInt_7 StartInt_7) (str.replace Start_8 Start_1 Start_9) (str.from_int StartInt_8) (ite StartBool_2 Start_2 Start_15)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool_2) (str.<= Start_1 Start_6) (str.suffixof Start_13 Start_6) (= StartInt_7 StartInt_1) (<= StartInt_5 StartInt_2)))
   (Start_2 String ("b" (ite StartBool_1 Start_2 Start)))
   (Start_18 String ("b" (str.at Start_10 StartInt_7) (str.replace Start_11 Start_17 Start_5) (ite StartBool_2 Start_3 Start_11)))
   (Start_13 String (x "0" (str.substr Start_9 StartInt_4 StartInt) (str.from_int StartInt_7) (ite StartBool_3 Start_13 Start_14)))
   (Start_16 String ("" (str.++ Start_7 Start_2) (str.at Start_7 StartInt_2) (str.replace Start_5 Start_9 Start_17)))
   (StartInt_2 Int (0 (str.len Start_1) (str.to_int Start_1)))
   (Start_5 String ("" (str.at Start_6 StartInt_1) (str.substr Start_7 StartInt StartInt_1) (str.replace Start_8 Start_2 Start_7) (ite StartBool_2 Start_5 Start_1)))
   (Start_7 String (y "0" (str.++ Start_5 Start_4) (str.from_int StartInt_3)))
   (StartInt_6 Int (1 (str.indexof Start_1 Start_12 StartInt_8) (str.to_int Start_2)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_1 Start_1 StartInt) (str.to_int Start_1)))
   (Start_10 String ("1" "a" (str.++ Start_10 Start_11) (str.at Start_2 StartInt_4) (str.replace Start_6 Start_12 Start_3) (str.from_int StartInt_2)))
   (Start_11 String (y (str.substr Start_4 StartInt_1 StartInt_2) (str.from_int StartInt_4)))
   (Start_8 String (x y "1" (str.++ Start_2 Start_3) (str.at Start_5 StartInt_5) (str.substr Start_6 StartInt_2 StartInt_4) (str.from_int StartInt_4)))
   (StartInt_5 Int (0 (str.len Start_6)))
   (StartInt_4 Int (0 1 (str.len Start_11) (str.indexof Start_3 Start_7 StartInt_3) (str.to_int Start_12)))
   (Start_1 String ("b" (str.at Start_1 StartInt_2)))
   (Start_4 String ("" "1" (str.substr Start StartInt StartInt_3) (str.replace Start_13 Start_14 Start_8)))
   (StartInt_7 Int (0 (str.len Start_14) (str.to_int Start_8)))
   (Start_14 String (x (str.substr Start_3 StartInt_6 StartInt_6) (str.from_int StartInt_6) (ite StartBool_3 Start_15 Start_2)))
   (StartInt_8 Int (0 1 (str.len Start_3) (str.to_int Start_14)))
   (Start_3 String (y (str.substr Start_7 StartInt_4 StartInt_8) (str.replace Start_1 Start_1 Start_7) (str.from_int StartInt_4) (ite StartBool Start_12 Start_13)))
   (Start_6 String ("1" "a" "0" (str.at Start_4 StartInt_3) (str.substr Start_9 StartInt_5 StartInt_1) (str.replace Start_8 Start_2 Start_1) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof y (str.++ "1" "1")) x "a")))

(check-synth)
