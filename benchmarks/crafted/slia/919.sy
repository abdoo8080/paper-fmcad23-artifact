(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_7 String) (Start_5 String) (StartBool_3 Bool) (StartBool_4 Bool) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_3 Int) (Start_8 String) (Start_3 String) (Start_4 String) (Start_1 String) (StartBool_5 Bool) (Start_2 String) (StartInt_5 Int) (StartInt_4 Int) (Start_6 String) (StartBool_2 Bool) (StartInt_1 Int))
  ((Start String ("0" "b" (str.++ Start_1 Start_1) (str.substr Start StartInt_1 StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0))
   (StartBool Bool (false (str.contains Start_6 Start_7) (= StartInt_1 StartInt_5) (<= StartInt_5 StartInt_1)))
   (StartInt_6 Int (1 (str.len Start_7) (str.indexof Start_3 Start_2 StartInt_4)))
   (Start_7 String ("" "0" (str.++ Start_4 Start_6) (str.substr Start StartInt_3 StartInt_1) (str.from_int StartInt_5)))
   (Start_5 String ("1" (str.replace Start_1 Start_1 Start_2) (ite StartBool_5 Start_5 Start_1)))
   (StartBool_3 Bool (true (str.<= Start_3 Start_4) (str.prefixof Start_4 Start_3)))
   (StartBool_4 Bool (false (and StartBool_5 StartBool_3) (= Start_2 Start_1) (= StartInt_2 StartInt_1)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_3) (str.<= Start_1 Start_1) (str.suffixof Start Start_1) (= Start_2 Start_3) (<= StartInt StartInt_2)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_2 Start_1 StartInt_3) (str.to_int Start_2)))
   (StartInt_3 Int (0 (str.len Start_2) (str.indexof Start_3 Start_4 StartInt) (str.to_int Start_4)))
   (Start_8 String (x y "b" "1" (str.at Start StartInt_2) (str.substr Start_5 StartInt StartInt_6) (str.from_int StartInt_5)))
   (Start_3 String ("" (str.replace Start_2 Start_2 Start_1)))
   (Start_4 String ("" "0" "b" "a" "1" (str.++ Start Start_3) (str.at Start_1 StartInt)))
   (Start_1 String (y "0" "1" x "b" (str.++ Start_1 Start_1) (str.at Start_2 StartInt_2) (str.substr Start StartInt StartInt) (ite StartBool_4 Start_4 Start_1)))
   (StartBool_5 Bool (true false (str.< Start_5 Start) (str.<= Start_1 Start_4) (= StartInt_3 StartInt_3) (<= StartInt_3 StartInt_2)))
   (Start_2 String (x "0" y "b" (str.at Start StartInt) (str.from_int StartInt_4)))
   (StartInt_5 Int (1 (str.len Start_2)))
   (StartInt_4 Int (1 (str.to_int Start_2)))
   (Start_6 String ("" (str.++ Start_3 Start_5) (str.at Start_5 StartInt) (str.replace Start_6 Start_8 Start_3) (str.from_int StartInt_4) (ite StartBool Start_5 Start_3)))
   (StartBool_2 Bool (true false (str.<= Start Start_1) (str.suffixof Start Start_1) (= Start Start_4) (= StartInt StartInt_3)))
   (StartInt_1 Int (1 0 (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" (str.substr "1" 0 (str.to_int y)) (str.++ "0" x))))

(check-synth)
