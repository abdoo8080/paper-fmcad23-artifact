(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartInt_4 Int) (StartInt_3 Int) (Start_1 String) (StartBool_2 Bool) (Start_13 String) (Start_8 String) (Start_7 String) (Start_3 String) (StartInt_1 Int) (Start_19 String) (Start_10 String) (StartBool_4 Bool) (Start_6 String) (StartBool_1 Bool) (Start_11 String) (Start_9 String) (Start_4 String) (StartInt_2 Int) (Start_12 String) (Start_15 String) (Start_5 String) (StartInt_5 Int) (Start_14 String) (StartBool_5 Bool) (Start_16 String) (Start_17 String) (Start_18 String) (StartBool_3 Bool))
  ((Start String ("b" "" y "0" (str.from_int StartInt) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 (str.to_int Start_1)))
   (StartBool Bool (false (not StartBool_2) (str.< Start_3 Start_6) (str.<= Start_12 Start_7) (= Start_10 Start_11)))
   (Start_2 String ("" (str.++ Start_7 Start_18) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_4) (ite StartBool_1 Start_8 Start_17)))
   (StartInt_4 Int (0 1 (str.len Start_10)))
   (StartInt_3 Int (0 1 (str.to_int Start_7)))
   (Start_1 String (x y (str.++ Start Start) (str.substr Start StartInt StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_4 StartBool_3) (str.<= Start_15 Start_15) (str.contains Start_10 Start_1)))
   (Start_13 String ("" y (str.at Start_10 StartInt_4) (str.replace Start Start_12 Start_14) (str.from_int StartInt_2)))
   (Start_8 String ("a" (str.++ Start_1 Start_9) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_10 Start Start_4) (ite StartBool Start_11 Start_3)))
   (Start_7 String ("" "0" (str.++ Start_4 Start_5) (str.replace Start_5 Start_2 Start_5) (str.from_int StartInt_1)))
   (Start_3 String ("" (str.++ Start_4 Start_3) (str.at Start_2 StartInt) (str.replace Start_3 Start_1 Start_4)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start Start StartInt_1) (str.to_int Start_1)))
   (Start_19 String ("1" y (str.at Start_1 StartInt_2) (str.replace Start_16 Start_14 Start_12) (str.from_int StartInt_5) (ite StartBool_5 Start_19 Start_9)))
   (Start_10 String (x (str.++ Start_8 Start_12) (str.at Start_11 StartInt_4) (str.replace Start_11 Start_12 Start_7)))
   (StartBool_4 Bool (false true (and StartBool_2 StartBool_2) (str.< Start_16 Start_11) (str.<= Start_12 Start_16) (str.suffixof Start_3 Start_15) (str.contains Start_10 Start_18) (= Start_11 Start_19) (= StartInt_5 StartInt_5) (<= StartInt_1 StartInt_3)))
   (Start_6 String ("b" (str.++ Start_5 Start_2) (str.at Start_8 StartInt)))
   (StartBool_1 Bool (false true (not StartBool) (str.contains Start_2 Start) (= Start_3 Start_3)))
   (Start_11 String (x (str.++ Start Start) (str.substr Start_11 StartInt_3 StartInt_3) (str.from_int StartInt_1) (ite StartBool Start Start_9)))
   (Start_9 String ("" (str.++ Start_10 Start) (str.from_int StartInt_1)))
   (Start_4 String ("" "0" (str.++ Start_5 Start_3) (str.at Start_3 StartInt) (str.replace Start_6 Start_2 Start_7)))
   (StartInt_2 Int (1 (str.to_int Start_14)))
   (Start_12 String (x "1" (str.at Start_2 StartInt_2) (str.from_int StartInt_3) (ite StartBool_2 Start_4 Start_13)))
   (Start_15 String ("" (str.++ Start_16 Start_15) (str.at Start_13 StartInt_3) (str.replace Start_1 Start_14 Start_2) (ite StartBool_5 Start_10 Start_6)))
   (Start_5 String ("0" y "" (str.++ Start_19 Start_10) (str.at Start_2 StartInt_5) (str.replace Start_1 Start_8 Start_6) (str.from_int StartInt)))
   (StartInt_5 Int (1 0 (str.indexof Start_10 Start_17 StartInt_3) (str.to_int Start_13)))
   (Start_14 String (x y "b" (str.from_int StartInt)))
   (StartBool_5 Bool (true (not StartBool_3) (and StartBool_4 StartBool_3) (str.< Start_16 Start_4) (str.<= Start_15 Start_7) (str.prefixof Start_9 Start_12) (str.contains Start_4 Start_2) (= Start_10 Start_1) (= StartInt_4 StartInt_1)))
   (Start_16 String ("b" (str.++ Start_17 Start_16) (str.substr Start_8 StartInt_2 StartInt_3) (str.from_int StartInt) (ite StartBool Start_6 Start_4)))
   (Start_17 String ("b" "a" (str.from_int StartInt)))
   (Start_18 String ("0" (str.++ Start Start_17)))
   (StartBool_3 Bool (false (and StartBool_5 StartBool_1) (str.<= Start_4 Start_4) (str.prefixof Start_19 Start_7) (str.suffixof Start_13 Start_5) (str.contains Start_16 Start_5) (= Start_18 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.from_int (str.len (str.at (str.from_int (str.len x)) 1))) 1)))

(check-synth)
