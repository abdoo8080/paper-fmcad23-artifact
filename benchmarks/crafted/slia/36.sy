(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_8 Int) (StartInt_2 Int) (StartInt_3 Int) (StartInt_7 Int) (StartBool_3 Bool) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_5 Int) (StartInt_4 Int) (Start_4 String) (Start_3 String) (StartInt_1 Int) (Start_5 String) (Start_7 String) (Start_2 String) (Start_6 String) (Start_9 String) (StartInt_6 Int) (Start_8 String))
  ((Start String ("1" (str.++ Start_1 Start_1) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0 1 (str.len Start_4) (str.to_int Start_8)))
   (StartBool Bool (false (not StartBool_2) (and StartBool StartBool) (str.< Start_5 Start_3) (str.prefixof Start_8 Start_7) (str.suffixof Start Start_7) (str.contains Start_8 Start_6) (= StartInt_2 StartInt_6)))
   (Start_1 String ("0" (str.++ Start_5 Start_4) (str.at Start_8 StartInt_7) (str.substr Start_9 StartInt_2 StartInt_5)))
   (StartInt_8 Int (0 (str.len Start_5) (str.indexof Start_4 Start_8 StartInt_6) (str.to_int Start_3)))
   (StartInt_2 Int (0 1 (str.len Start_6)))
   (StartInt_3 Int (1))
   (StartInt_7 Int (0 (str.len Start_1) (str.to_int Start_4)))
   (StartBool_3 Bool (false (str.< Start_4 Start_8)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool StartBool_1) (str.< Start_3 Start_3) (str.<= Start Start) (str.prefixof Start_2 Start_4) (str.suffixof Start_2 Start_3) (str.contains Start_2 Start_5) (= Start_4 Start_1) (= StartInt_4 StartInt_4) (<= StartInt_1 StartInt_5)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_1) (str.< Start_2 Start_5) (str.<= Start_1 Start_7) (str.prefixof Start_2 Start_2) (str.suffixof Start_6 Start_6) (str.contains Start_1 Start_6) (= StartInt_6 StartInt)))
   (StartInt_5 Int (1 0 (str.len Start_4)))
   (StartInt_4 Int (0 1 (str.len Start_6)))
   (Start_4 String ("" (str.++ Start Start_3) (str.replace Start_5 Start_2 Start_1) (str.from_int StartInt_5)))
   (Start_3 String ("b" (str.substr Start_4 StartInt StartInt_5) (str.replace Start_2 Start_1 Start_4) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_1 Int (1))
   (Start_5 String ("0" "" y "1" x "a" "b" (str.++ Start Start_7) (str.substr Start_6 StartInt_3 StartInt_1)))
   (Start_7 String ("0" x (str.substr Start_3 StartInt_1 StartInt_1) (str.from_int StartInt_5)))
   (Start_2 String ("0" (str.at Start_3 StartInt) (str.substr Start_8 StartInt_6 StartInt_8) (str.from_int StartInt_6) (ite StartBool_3 Start_6 Start_8)))
   (Start_6 String ("0" "b" "a" (str.at Start_2 StartInt_3) (str.substr Start_2 StartInt_1 StartInt) (ite StartBool_1 Start_3 Start_5)))
   (Start_9 String ("" "b" (str.++ Start_2 Start_8) (str.at Start_3 StartInt_6) (str.substr Start_8 StartInt_3 StartInt_7) (ite StartBool_2 Start_3 Start)))
   (StartInt_6 Int (1 0 (str.to_int Start_8)))
   (Start_8 String ("a" "b" y (str.++ Start_3 Start_5) (str.at Start_6 StartInt_1) (str.substr Start_5 StartInt_6 StartInt) (str.replace Start_6 Start_9 Start_3) (ite StartBool_1 Start_1 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "a" "0")))

(check-synth)
