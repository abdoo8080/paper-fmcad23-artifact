(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartBool_4 Bool) (StartInt_9 Int) (Start_11 String) (Start_8 String) (StartBool_3 Bool) (StartInt_7 Int) (StartInt_1 Int) (Start_10 String) (StartInt_2 Int) (Start_12 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_1 String) (Start_3 String) (Start_7 String) (Start_5 String) (StartInt_3 Int) (Start_4 String) (Start_6 String) (StartInt_6 Int) (Start_9 String) (StartInt_4 Int) (StartInt_5 Int) (StartInt_8 Int) (Start_2 String))
  ((Start String ("1" (str.++ Start_1 Start) (str.substr Start StartInt StartInt_1) (str.replace Start Start Start_2) (str.from_int StartInt_2)))
   (StartInt Int (0 1 (str.len Start_4) (str.indexof Start_5 Start StartInt_3) (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_3 StartBool_4) (str.< Start_7 Start_9) (str.prefixof Start_10 Start_9) (str.contains Start_11 Start_4) (= Start_9 Start_3)))
   (Start_13 String ("" (str.++ Start_3 Start_1) (str.at Start StartInt_7) (str.replace Start_2 Start_7 Start_4) (str.from_int StartInt_4) (ite StartBool_3 Start_10 Start_4)))
   (StartBool_4 Bool (false (str.< Start_7 Start_11) (str.<= Start_10 Start_6) (str.contains Start_10 Start_6) (= Start_4 Start)))
   (StartInt_9 Int (0 (str.to_int Start)))
   (Start_11 String (x (str.at Start_9 StartInt_4) (str.replace Start_1 Start_10 Start_8)))
   (Start_8 String (x "a" (str.substr Start_1 StartInt_8 StartInt_7) (str.from_int StartInt_4) (ite StartBool_1 Start_6 Start_3)))
   (StartBool_3 Bool (false true (str.< Start_7 Start_4) (str.prefixof Start_12 Start_12) (= Start_4 Start_1) (<= StartInt_6 StartInt_2)))
   (StartInt_7 Int (1 (str.to_int Start_5)))
   (StartInt_1 Int (0 1 (str.len Start_5)))
   (Start_10 String (x (str.at Start_5 StartInt_9) (str.substr Start_8 StartInt_5 StartInt_2) (str.replace Start_2 Start_3 Start_11) (str.from_int StartInt_8)))
   (StartInt_2 Int (1 (str.len Start_3)))
   (Start_12 String ("a" (str.++ Start_8 Start_9) (str.at Start_5 StartInt_6) (str.replace Start_4 Start_10 Start_4) (str.from_int StartInt_3) (ite StartBool_3 Start_13 Start_1)))
   (StartBool_2 Bool (true false (str.< Start_7 Start_4) (str.prefixof Start_8 Start_7) (str.contains Start_3 Start_3) (= Start_4 Start_3) (= StartInt_5 StartInt_7)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.<= Start_1 Start_3) (str.suffixof Start_2 Start_5) (= StartInt_3 StartInt)))
   (Start_1 String ("b" "" (str.++ Start_4 Start_7) (str.at Start_1 StartInt_6) (str.replace Start_6 Start_8 Start_6) (ite StartBool_2 Start_3 Start_4)))
   (Start_3 String ("1" (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt_3 StartInt) (str.replace Start_3 Start_3 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_3)))
   (Start_7 String ("1" (str.++ Start_4 Start_3) (str.at Start StartInt_5) (str.substr Start_6 StartInt_6 StartInt_6)))
   (Start_5 String ("0" y (str.++ Start_5 Start_3) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_6) (str.to_int Start_6)))
   (Start_4 String ("0" "1" (str.++ Start_4 Start_3) (str.from_int StartInt_4)))
   (Start_6 String ("1" (str.++ Start_7 Start) (str.substr Start_2 StartInt_3 StartInt) (str.replace Start_1 Start_7 Start)))
   (StartInt_6 Int (1 (str.len Start_3) (str.to_int Start_6)))
   (Start_9 String (y "1" (str.++ Start_2 Start_2) (str.at Start_4 StartInt_8) (str.substr Start StartInt_2 StartInt_8) (str.from_int StartInt_2) (ite StartBool_3 Start_11 Start_2)))
   (StartInt_4 Int (0 1 (str.indexof Start_3 Start_2 StartInt_1)))
   (StartInt_5 Int (1 0 (str.indexof Start_2 Start StartInt_3) (str.to_int Start_5)))
   (StartInt_8 Int (0 (str.indexof Start_6 Start StartInt_8) (str.to_int Start)))
   (Start_2 String ("b" "0" "" "a" (str.at Start_2 StartInt_3) (str.substr Start_2 StartInt_3 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof "1" y 0))))

(check-synth)
