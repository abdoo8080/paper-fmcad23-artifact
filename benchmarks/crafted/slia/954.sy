(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_12 String) (StartInt_7 Int) (Start_9 String) (StartInt_6 Int) (Start_2 String) (Start_11 String) (Start_4 String) (Start_10 String) (StartInt_1 Int) (Start_1 String) (Start_8 String) (StartInt_2 Int) (Start_3 String) (Start_5 String) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_4 Int) (Start_13 String) (StartBool_3 Bool) (Start_6 String) (StartInt_3 Int) (Start_7 String) (StartBool_2 Bool))
  ((Start String ("a" "1" (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.to_int Start_11)))
   (StartBool Bool (false (not StartBool) (str.< Start_8 Start_12) (str.prefixof Start_2 Start_9) (str.suffixof Start_10 Start_3)))
   (StartInt_8 Int (1 0 (str.indexof Start_6 Start StartInt)))
   (Start_12 String (y "a" (str.++ Start_4 Start_9) (str.at Start_4 StartInt) (str.from_int StartInt_5) (ite StartBool Start_7 Start_13)))
   (StartInt_7 Int (0 (str.len Start_4)))
   (Start_9 String ("0" (str.++ Start_5 Start_9) (str.substr Start_9 StartInt_6 StartInt_4) (str.replace Start_9 Start_5 Start) (str.from_int StartInt_7) (ite StartBool_3 Start_6 Start_8)))
   (StartInt_6 Int (0 1 (str.len Start_2) (str.indexof Start_1 Start_10 StartInt_7) (str.to_int Start_9)))
   (Start_2 String (x "1" "a" "" y "0" (str.++ Start_4 Start) (str.at Start_7 StartInt_1) (str.replace Start_8 Start_3 Start_9)))
   (Start_11 String ("b" y (str.++ Start_2 Start_5) (ite StartBool_1 Start_10 Start_9)))
   (Start_4 String ("0"))
   (Start_10 String (y (str.substr Start_8 StartInt_1 StartInt_6) (str.from_int StartInt_8)))
   (StartInt_1 Int (0 (str.len Start)))
   (Start_1 String (y (str.++ Start Start_1) (str.at Start_2 StartInt) (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start Start Start_2) (str.from_int StartInt_1) (ite StartBool Start_2 Start_2)))
   (Start_8 String ("b" "" "0" x y (str.at Start_10 StartInt)))
   (StartInt_2 Int (0 1 (str.indexof Start Start StartInt_2)))
   (Start_3 String (x (str.++ Start_3 Start_4) (str.at Start_1 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool Start Start_5)))
   (Start_5 String ("b" "a" (str.substr Start_5 StartInt_3 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start Start_5)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.<= Start_2 Start) (str.suffixof Start_3 Start) (= Start Start_2) (<= StartInt_2 StartInt_2)))
   (StartInt_5 Int (0 (str.len Start_4) (str.to_int Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.indexof Start_2 Start_5 StartInt_5)))
   (Start_13 String ("1" "a" "b" "" y "0" x (str.++ Start_12 Start) (str.at Start_6 StartInt_6) (str.from_int StartInt_4)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_1 StartBool) (str.prefixof Start_2 Start_3) (str.suffixof Start_1 Start_4) (= Start_1 Start_7) (= StartInt_2 StartInt_6)))
   (Start_6 String ("0" "b" x "1" (str.++ Start_4 Start_3) (str.at Start_1 StartInt_4) (str.substr Start StartInt_1 StartInt_5) (ite StartBool_2 Start_7 Start_2)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_4 StartInt_4) (str.to_int Start_6)))
   (Start_7 String ("" (str.++ Start_2 Start_5) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false true (str.< Start_5 Start_7) (str.<= Start_4 Start_3) (str.prefixof Start_3 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "1" x "b") "0")))

(check-synth)
