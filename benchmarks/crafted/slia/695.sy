(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (Start_16 String) (StartInt_9 Int) (Start_6 String) (StartBool_4 Bool) (StartInt_2 Int) (StartInt_4 Int) (Start_9 String) (Start_5 String) (Start_7 String) (Start_3 String) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_6 Int) (Start_12 String) (Start_4 String) (StartInt_5 Int) (StartBool_5 Bool) (Start_14 String) (Start_15 String) (Start_2 String) (Start_1 String) (Start_11 String) (StartInt_8 Int) (Start_8 String) (StartBool_3 Bool) (StartInt_1 Int) (Start_10 String) (StartBool_1 Bool) (Start_13 String) (StartInt_7 Int))
  ((Start String ("" (str.++ Start Start) (str.at Start StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 (str.len Start_7) (str.indexof Start_2 Start_15 StartInt_8)))
   (StartBool Bool (false true (str.< Start_13 Start_3) (= Start_16 Start_9) (<= StartInt_10 StartInt)))
   (StartInt_10 Int (0))
   (Start_16 String (y "b" "1" "0" "a" "" x (str.substr Start_5 StartInt_8 StartInt)))
   (StartInt_9 Int (1 0))
   (Start_6 String ("a" (str.at Start_3 StartInt_2) (str.substr Start_5 StartInt_5 StartInt_3) (str.replace Start_6 Start_1 Start_2)))
   (StartBool_4 Bool (false true (and StartBool_2 StartBool) (str.<= Start_10 Start_8) (str.suffixof Start_7 Start_9) (= StartInt StartInt_4) (<= StartInt_1 StartInt_4)))
   (StartInt_2 Int (1 0 (str.to_int Start_1)))
   (StartInt_4 Int (1 (str.len Start_5) (str.indexof Start_4 Start_6 StartInt_2) (str.to_int Start_7)))
   (Start_9 String ("0" (str.at Start_8 StartInt) (str.replace Start Start_2 Start_4) (ite StartBool_3 Start_1 Start_5)))
   (Start_5 String (y "0" (str.++ Start_1 Start_2) (str.at Start StartInt_4) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt_5) (ite StartBool_2 Start_4 Start)))
   (Start_7 String ("a" (ite StartBool_2 Start_2 Start)))
   (Start_3 String ("a" (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_5 Start_5 Start_4)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_2 StartBool) (str.<= Start_5 Start) (str.prefixof Start_1 Start_4) (<= StartInt_1 StartInt_1)))
   (StartInt_3 Int (1 (str.len Start_2) (str.to_int Start_4)))
   (StartInt_6 Int (1 (str.len Start_5) (str.to_int Start_6)))
   (Start_12 String ("" (str.replace Start_14 Start_12 Start_7) (str.from_int StartInt_1) (ite StartBool_3 Start_8 Start_5)))
   (Start_4 String (y "" "a" x "1" "0" "b" (str.substr Start_4 StartInt StartInt_3)))
   (StartInt_5 Int (1 0))
   (StartBool_5 Bool (false (not StartBool_5) (and StartBool_1 StartBool) (str.contains Start_7 Start_1) (= Start_5 Start_9) (= StartInt_1 StartInt_5)))
   (Start_14 String ("0" (str.substr Start_10 StartInt_2 StartInt_2)))
   (Start_15 String ("" "0" "a" "1" (str.++ Start_16 Start_5) (str.at Start_16 StartInt_9) (str.substr Start_10 StartInt_3 StartInt_8) (str.replace Start_3 Start_2 Start_3)))
   (Start_2 String ("b" x (str.at Start_8 StartInt_3) (str.replace Start_3 Start_3 Start_2)))
   (Start_1 String ("b" "a" "1" (str.at Start_2 StartInt_1) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_3 Start_4)))
   (Start_11 String ("1" (str.++ Start_5 Start_4) (str.substr Start_12 StartInt_4 StartInt_4) (str.replace Start_12 Start_13 Start_5) (str.from_int StartInt_3) (ite StartBool_2 Start_12 Start_1)))
   (StartInt_8 Int (0 (str.indexof Start Start_13 StartInt_5)))
   (Start_8 String (y (str.++ Start_7 Start_8) (str.at Start_2 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_8 Start_9)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_4 StartBool_2) (str.< Start Start_3) (str.<= Start_3 Start_3) (str.suffixof Start_1 Start_7) (str.contains Start_1 Start_1) (= Start_8 Start) (= StartInt_1 StartInt_2)))
   (StartInt_1 Int (0 (str.len Start_2)))
   (Start_10 String ("" (str.at Start_2 StartInt_6) (str.from_int StartInt_5)))
   (StartBool_1 Bool (true (and StartBool StartBool_3) (str.<= Start Start_5) (str.prefixof Start_11 Start_2) (str.suffixof Start_3 Start_10) (str.contains Start_11 Start_6) (= Start_7 Start_11)))
   (Start_13 String ("1" (str.++ Start_9 Start_11) (str.substr Start_3 StartInt StartInt_7) (str.replace Start_7 Start_13 Start_12) (ite StartBool_5 Start_6 Start)))
   (StartInt_7 Int (0 (str.indexof Start_6 Start_4 StartInt_8) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "" y "a") (str.to_int x))))

(check-synth)
