(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_8 Bool) (Start_13 String) (StartInt_8 Int) (StartInt_4 Int) (Start_8 String) (StartInt_5 Int) (StartInt_2 Int) (Start_6 String) (Start_4 String) (Start_2 String) (StartBool_2 Bool) (Start_7 String) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_7 Int) (Start_3 String) (StartBool_3 Bool) (Start_1 String) (StartBool_5 Bool) (Start_9 String) (StartBool_7 Bool) (Start_5 String) (StartBool_4 Bool) (StartBool_6 Bool) (StartInt_1 Int) (StartInt_6 Int) (Start_10 String) (Start_12 String) (Start_11 String))
  ((Start String ("a" (str.++ Start Start_1) (str.at Start StartInt_1) (str.replace Start Start_2 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 (str.len Start_7)))
   (StartBool Bool (true (not StartBool) (and StartBool_6 StartBool_2) (str.< Start_1 Start_5) (str.<= Start_11 Start_12) (str.contains Start_2 Start_11) (= Start_1 Start_7) (<= StartInt_6 StartInt_7)))
   (StartBool_8 Bool (false (str.prefixof Start_10 Start_5) (str.contains Start_10 Start_13) (= StartInt_4 StartInt_4)))
   (Start_13 String ("0" "a" y (str.++ Start_11 Start_3) (str.from_int StartInt_8) (ite StartBool_8 Start_10 Start_8)))
   (StartInt_8 Int (1 0 (str.len Start_9) (str.indexof Start_4 Start_12 StartInt) (str.to_int Start_13)))
   (StartInt_4 Int (0 (str.len Start_7) (str.indexof Start_4 Start_4 StartInt_4) (str.to_int Start_4)))
   (Start_8 String (x (str.replace Start_4 Start_3 Start_5)))
   (StartInt_5 Int (0 (str.len Start) (str.to_int Start_7)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.indexof Start_4 Start_3 StartInt) (str.to_int Start_3)))
   (Start_6 String ("0" (str.++ Start_7 Start_3) (str.at Start_6 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_4)))
   (Start_4 String (x "1" y "a" (str.++ Start_1 Start) (str.replace Start_2 Start_5 Start_6)))
   (Start_2 String ("b" "a" "1" "" x y (str.++ Start_1 Start_6) (str.from_int StartInt_5)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_3) (str.< Start Start) (str.contains Start_4 Start_4) (<= StartInt_3 StartInt_1)))
   (Start_7 String ("0" (str.from_int StartInt_1)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (str.< Start_2 Start_3) (str.prefixof Start_4 Start_4) (str.suffixof Start_2 Start_4) (str.contains Start_4 Start_2) (= Start_2 Start) (= StartInt_2 StartInt)))
   (StartInt_3 Int (0 1 (str.len Start_8) (str.indexof Start_4 Start_7 StartInt_3) (str.to_int Start)))
   (StartInt_7 Int (1 0 (str.len Start_4)))
   (Start_3 String ("b" "" (str.at Start StartInt_4) (str.replace Start_2 Start_1 Start_6)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_5 StartBool_5) (str.suffixof Start_8 Start) (str.contains Start_8 Start_5)))
   (Start_1 String ("b" (str.++ Start_8 Start_2) (str.substr Start_2 StartInt_6 StartInt) (ite StartBool_2 Start_7 Start_5)))
   (StartBool_5 Bool (false (not StartBool_1) (and StartBool_1 StartBool_4) (str.<= Start_3 Start_5) (= Start_9 Start_3) (= StartInt_6 StartInt_3)))
   (Start_9 String (x (str.substr Start_6 StartInt_1 StartInt_5)))
   (StartBool_7 Bool (true false (str.< Start_11 Start) (<= StartInt_6 StartInt_3)))
   (Start_5 String ("" (str.at Start_7 StartInt_3) (str.substr Start_5 StartInt_4 StartInt_5) (str.from_int StartInt_4)))
   (StartBool_4 Bool (true (and StartBool_5 StartBool_4) (str.< Start_7 Start_1) (str.<= Start_8 Start_10) (str.contains Start_6 Start_8) (= Start_8 Start_5) (= StartInt_5 StartInt_7) (<= StartInt_2 StartInt_2)))
   (StartBool_6 Bool (false true (not StartBool) (and StartBool_3 StartBool_7) (str.prefixof Start_8 Start_8) (str.suffixof Start_3 Start_2) (str.contains Start_10 Start_4) (<= StartInt_6 StartInt)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.to_int Start_2)))
   (StartInt_6 Int (1))
   (Start_10 String ("" "0" (str.at Start_9 StartInt_1) (ite StartBool_6 Start_3 Start_1)))
   (Start_12 String (x "0" (str.++ Start_6 Start_5) (str.at Start_6 StartInt_7) (str.from_int StartInt_8)))
   (Start_11 String (y (str.at Start_9 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ (str.at "b" (str.len y)) x) 1)))

(check-synth)
