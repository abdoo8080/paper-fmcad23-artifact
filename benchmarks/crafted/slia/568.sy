(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_10 String) (StartInt_9 Int) (Start_5 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_8 String) (Start_2 String) (StartInt_1 Int) (Start_9 String) (Start_1 String) (Start_4 String) (StartInt_6 Int) (StartInt_2 Int) (StartInt_7 Int) (Start_6 String) (Start_3 String) (StartBool_1 Bool) (StartInt_8 Int) (StartBool_3 Bool) (StartInt_4 Int) (StartInt_3 Int) (Start_7 String))
  ((Start String ("1" (str.at Start StartInt)))
   (StartInt Int (0 (str.indexof Start Start_1 StartInt) (str.to_int Start_1)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool StartBool_2) (str.<= Start_9 Start_4) (= Start_3 Start_6) (= StartInt_8 StartInt_9)))
   (Start_11 String ("1" "a" (str.++ Start_3 Start_5) (str.at Start_3 StartInt_5)))
   (Start_10 String ("0" (str.substr Start_9 StartInt_7 StartInt_8) (str.replace Start_11 Start_2 Start_7) (str.from_int StartInt_9) (ite StartBool_2 Start_2 Start_11)))
   (StartInt_9 Int (0 1 (str.len Start_5) (str.to_int Start_7)))
   (Start_5 String ("a" (str.at Start_3 StartInt_2) (str.substr Start_1 StartInt_2 StartInt_6) (str.from_int StartInt_7)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_3) (str.< Start_9 Start_6) (str.<= Start_6 Start_5) (str.prefixof Start_5 Start_1)))
   (StartInt_5 Int (1 0 (str.len Start) (str.indexof Start_9 Start_1 StartInt_4) (str.to_int Start_2)))
   (Start_8 String ("a" "0" (str.++ Start_8 Start_4) (str.at Start_8 StartInt_5) (str.substr Start_6 StartInt_4 StartInt_4)))
   (Start_2 String (y "b" (str.++ Start_2 Start) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start_4 Start_2 Start_3) (str.from_int StartInt)))
   (StartInt_1 Int (1 (str.len Start_2)))
   (Start_9 String (x (str.substr Start_3 StartInt_2 StartInt_4) (str.replace Start Start Start_5) (ite StartBool_3 Start_9 Start_9)))
   (Start_1 String ("" "a" "1" (str.at Start_2 StartInt) (str.replace Start Start_2 Start_1)))
   (Start_4 String ("0" (str.substr Start_2 StartInt StartInt_2) (str.replace Start_3 Start_2 Start_4) (str.from_int StartInt_2)))
   (StartInt_6 Int (0 (str.len Start_6) (str.to_int Start_8)))
   (StartInt_2 Int (1))
   (StartInt_7 Int (1 0 (str.to_int Start_3)))
   (Start_6 String ("0" y "a" "b" (str.++ Start_4 Start_8) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_9 Start_4 Start_1)))
   (Start_3 String (y (str.at Start_5 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool) (str.< Start_5 Start_2) (str.prefixof Start_4 Start) (str.contains Start_6 Start_4) (<= StartInt_2 StartInt_3)))
   (StartInt_8 Int (1 (str.len Start_10) (str.indexof Start_9 Start_7 StartInt)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_3 StartBool_2) (str.<= Start Start_1) (str.prefixof Start_8 Start) (str.contains Start_2 Start_8) (= StartInt_1 StartInt)))
   (StartInt_4 Int (1 (str.len Start_1)))
   (StartInt_3 Int (1 0 (str.len Start_7) (str.to_int Start_2)))
   (Start_7 String ("1" "" "b" x "a" y "0" (str.++ Start_7 Start_3) (str.replace Start_5 Start_8 Start_9) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.replace y "1" "a") "")))

(check-synth)
