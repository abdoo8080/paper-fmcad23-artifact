(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartBool_4 Bool) (StartBool_1 Bool) (Start_3 String) (Start_8 String) (Start_2 String) (StartInt_2 Int) (Start_4 String) (Start_7 String) (Start_5 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_1 String) (StartInt_1 Int) (StartInt_5 Int) (StartInt_4 Int) (Start_6 String) (StartInt_6 Int))
  ((Start String ("1" (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt) (ite StartBool Start_3 Start_2)))
   (StartInt Int (0 1))
   (StartBool Bool (true false (and StartBool StartBool) (str.<= Start_1 Start_3) (str.prefixof Start_2 Start_3) (= StartInt_6 StartInt_4) (<= StartInt_1 StartInt_5)))
   (StartBool_2 Bool (false true (not StartBool) (str.< Start_3 Start_1) (str.prefixof Start_2 Start_3) (str.suffixof Start_4 Start_5) (str.contains Start_2 Start_5)))
   (StartBool_4 Bool (false (str.contains Start_7 Start_7)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_3) (<= StartInt StartInt_6)))
   (Start_3 String (y "" "1" "a" x (str.++ Start_2 Start) (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start Start_1)))
   (Start_8 String ("a" (str.replace Start_8 Start_4 Start_1)))
   (Start_2 String ("" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_1) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 0 (str.indexof Start Start_4 StartInt_3)))
   (Start_4 String ("1" (str.at Start_1 StartInt_4) (ite StartBool Start_4 Start)))
   (Start_7 String (x "" (str.at Start_7 StartInt_6)))
   (Start_5 String ("1" "" "a" "b" y x "0" (str.at Start_3 StartInt) (str.replace Start_1 Start_6 Start_3) (str.from_int StartInt_4) (ite StartBool_1 Start Start)))
   (StartInt_3 Int (0))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_4 StartBool_1) (str.< Start_6 Start_3) (str.<= Start_5 Start_3) (str.prefixof Start_6 Start_4) (str.suffixof Start_5 Start_3) (= Start_2 Start_7) (<= StartInt_6 StartInt)))
   (Start_1 String ("a" "1" (str.++ Start_4 Start_2) (str.at Start_4 StartInt_4) (str.substr Start_3 StartInt_5 StartInt_5) (str.replace Start_3 Start_3 Start_2) (str.from_int StartInt_1) (ite StartBool Start_2 Start_1)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start_3 Start StartInt_5) (str.to_int Start_3)))
   (StartInt_5 Int (0 (str.len Start) (str.to_int Start)))
   (StartInt_4 Int (1 0 (str.len Start_2) (str.to_int Start_4)))
   (Start_6 String (y "1" (str.at Start_8 StartInt_3) (str.substr Start_2 StartInt_6 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_8 Start_3)))
   (StartInt_6 Int (0 1 (str.len Start_5) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof "0" (str.from_int (str.indexof x "1" 0)) 1))))

(check-synth)
