(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartInt_8 Int) (Start_10 String) (StartBool_6 Bool) (StartInt_7 Int) (StartBool_2 Bool) (Start_11 String) (StartBool_4 Bool) (StartBool_1 Bool) (Start_6 String) (StartBool_3 Bool) (Start_8 String) (StartInt_1 Int) (Start_4 String) (Start_3 String) (Start_7 String) (Start_2 String) (Start_1 String) (Start_5 String) (StartInt_4 Int) (StartInt_3 Int) (StartInt_6 Int) (Start_12 String) (Start_9 String) (StartInt_5 Int) (StartInt_2 Int))
  ((Start String ("1" y (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_1 StartInt)))
   (StartInt Int (1 0 (str.len Start_5)))
   (StartBool Bool (true false (and StartBool_3 StartBool) (str.< Start_11 Start) (= Start_1 Start_6)))
   (StartBool_5 Bool (true (and StartBool_6 StartBool_1) (str.suffixof Start_8 Start_4) (str.contains Start_5 Start_9) (= Start_9 Start_9)))
   (StartInt_8 Int (0 (str.to_int Start_10)))
   (Start_10 String ("1" x y "" "b" (str.++ Start_8 Start_6) (str.at Start_4 StartInt_8) (ite StartBool_1 Start_5 Start_4)))
   (StartBool_6 Bool (false (str.< Start_2 Start_3) (str.<= Start_10 Start_11) (str.prefixof Start_2 Start_1) (str.suffixof Start_6 Start_4)))
   (StartInt_7 Int (0 1 (str.len Start_5)))
   (StartBool_2 Bool (false (not StartBool_5) (and StartBool_6 StartBool_6) (str.< Start_4 Start_7) (str.prefixof Start_5 Start_2) (str.suffixof Start_8 Start_6) (str.contains Start_5 Start_4) (= Start_4 Start_5) (<= StartInt_7 StartInt_6)))
   (Start_11 String ("" (str.++ Start_1 Start_6) (str.at Start_5 StartInt_5) (str.substr Start_1 StartInt_5 StartInt_6) (str.replace Start_5 Start Start_5) (str.from_int StartInt_1) (ite StartBool_1 Start_12 Start_4)))
   (StartBool_4 Bool (false true (not StartBool_1) (str.< Start_5 Start_7) (str.<= Start_4 Start_5) (str.prefixof Start_8 Start_7) (str.suffixof Start_1 Start_7)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_3) (str.<= Start_2 Start_9) (str.suffixof Start_7 Start_8) (= StartInt_1 StartInt_4)))
   (Start_6 String ("a" x "1" (str.at Start_6 StartInt_1)))
   (StartBool_3 Bool (false true (not StartBool_4) (str.suffixof Start_4 Start) (str.contains Start_4 Start_8) (= Start_5 Start) (<= StartInt_6 StartInt_6)))
   (Start_8 String ("0" "a" "" (str.substr Start_5 StartInt_1 StartInt_6) (ite StartBool_1 Start_8 Start_5)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_2 Start_1 StartInt_1)))
   (Start_4 String (x "" "1" (str.++ Start_1 Start_5) (str.at Start_4 StartInt_2) (str.substr Start_6 StartInt_4 StartInt_4) (str.replace Start_5 Start_1 Start_4)))
   (Start_3 String (x (str.++ Start_1 Start_3) (str.replace Start_8 Start Start_4)))
   (Start_7 String ("" (str.++ Start_6 Start_2) (str.substr Start_2 StartInt_5 StartInt_6)))
   (Start_2 String (x (str.++ Start_2 Start_3) (str.at Start_4 StartInt_1) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_4 Start_3 Start_5) (str.from_int StartInt_1) (ite StartBool Start_6 Start_5)))
   (Start_1 String ("0" (str.++ Start_5 Start_8) (str.at Start_6 StartInt_7) (str.substr Start_11 StartInt_7 StartInt_3) (str.replace Start_9 Start_6 Start) (str.from_int StartInt_7) (ite StartBool_3 Start_6 Start_12)))
   (Start_5 String ("0" (str.++ Start_1 Start_1) (str.at Start_7 StartInt_3) (str.substr Start_2 StartInt_1 StartInt_4) (str.from_int StartInt_5)))
   (StartInt_4 Int (1 0 (str.indexof Start_2 Start_5 StartInt) (str.to_int Start_7)))
   (StartInt_3 Int (0 (str.len Start_6) (str.to_int Start)))
   (StartInt_6 Int (1 0))
   (Start_12 String ("b" (str.at Start_12 StartInt_6) (str.substr Start_5 StartInt_3 StartInt_4) (str.from_int StartInt_1)))
   (Start_9 String ("" "a" (str.replace Start Start Start_6) (ite StartBool Start_8 Start_5)))
   (StartInt_5 Int (0 1))
   (StartInt_2 Int (0 1 (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.at (str.replace "1" y "b") 1)))))

(check-synth)
