(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_12 String) (Start_1 String) (Start_13 String) (Start_11 String) (StartInt_8 Int) (Start_10 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_2 String) (StartInt_7 Int) (Start_3 String) (StartInt_6 Int) (Start_9 String) (Start_5 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_7 String) (Start_4 String) (StartInt_5 Int) (StartInt_1 Int) (Start_6 String) (StartInt_3 Int) (Start_8 String))
  ((Start String ("b" "0" "" y (str.at Start_1 StartInt_1) (str.substr Start StartInt_2 StartInt_1) (str.replace Start Start_1 Start_1) (str.from_int StartInt_3) (ite StartBool Start_2 Start_1)))
   (StartInt Int (0 1 (str.len Start_12)))
   (StartBool Bool (false (not StartBool) (str.prefixof Start_13 Start_3) (str.suffixof Start_11 Start_3)))
   (StartInt_9 Int (1 0 (str.to_int Start_7)))
   (Start_12 String (x "1" (str.++ Start_4 Start_9) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_1 Start_9 Start) (str.from_int StartInt)))
   (Start_1 String (y x (str.++ Start_8 Start_4) (str.at Start StartInt) (str.substr Start_4 StartInt_2 StartInt_3) (str.replace Start Start_1 Start_6) (str.from_int StartInt_2) (ite StartBool Start Start_4)))
   (Start_13 String ("0" x "a" "b" y "1" (str.substr Start_12 StartInt_9 StartInt_7) (str.from_int StartInt_5)))
   (Start_11 String (y (str.at Start_9 StartInt_4) (str.replace Start_11 Start_9 Start_6) (str.from_int StartInt_7) (ite StartBool_1 Start_1 Start_11)))
   (StartInt_8 Int (1 (str.indexof Start_1 Start_4 StartInt_4) (str.to_int Start_4)))
   (Start_10 String ("0" "1" "b" (str.substr Start StartInt_7 StartInt_8) (str.replace Start_7 Start_4 Start_5) (str.from_int StartInt_2)))
   (StartInt_2 Int (1 (str.indexof Start_6 Start_11 StartInt_5) (str.to_int Start_7)))
   (StartBool_2 Bool (false (str.<= Start_9 Start_4) (str.prefixof Start_9 Start_10) (= Start_2 Start_7) (<= StartInt_3 StartInt_4)))
   (Start_2 String ("a" (str.++ Start Start_2) (str.at Start_3 StartInt_2) (str.replace Start_4 Start_4 Start_2)))
   (StartInt_7 Int (0 (str.len Start_11) (str.indexof Start_8 Start_8 StartInt) (str.to_int Start_10)))
   (Start_3 String ("b" "0" y (str.at Start_2 StartInt) (str.substr Start_8 StartInt_3 StartInt_3) (ite StartBool_2 Start_7 Start_1)))
   (StartInt_6 Int (1 0 (str.indexof Start_6 Start_5 StartInt) (str.to_int Start_3)))
   (Start_9 String ("1" "" "b" x y (str.++ Start_8 Start_4) (ite StartBool_1 Start_3 Start_5)))
   (Start_5 String ("a" x "b" (str.replace Start_1 Start_5 Start_5) (ite StartBool_1 Start_2 Start_4)))
   (StartBool_1 Bool (true false (str.<= Start_6 Start_7) (str.suffixof Start_5 Start_7) (= StartInt_4 StartInt_4)))
   (StartInt_4 Int (0 1 (str.len Start) (str.to_int Start_1)))
   (Start_7 String ("1" (str.++ Start_1 Start) (str.replace Start_5 Start_6 Start_2) (ite StartBool Start Start_4)))
   (Start_4 String ("" "a" "1" (str.at Start_1 StartInt_1) (str.substr Start_5 StartInt_3 StartInt_3) (str.replace Start_3 Start_2 Start_5) (str.from_int StartInt_3) (ite StartBool Start_1 Start_4)))
   (StartInt_5 Int (1 (str.indexof Start_7 Start_9 StartInt_4) (str.to_int Start)))
   (StartInt_1 Int (0 1 (str.indexof Start_11 Start_9 StartInt_7)))
   (Start_6 String ("1" y "0" x (str.substr Start_8 StartInt_5 StartInt_3) (str.replace Start_7 Start_2 Start_5) (str.from_int StartInt_6) (ite StartBool Start_2 Start_7)))
   (StartInt_3 Int (1 (str.indexof Start_1 Start_4 StartInt_5)))
   (Start_8 String ("" (str.++ Start_8 Start_2) (ite StartBool_1 Start_5 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" y "a")))

(check-synth)
