(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (Start_1 String) (StartBool_3 Bool) (StartInt_8 Int) (StartBool_1 Bool) (StartInt_6 Int) (StartInt_9 Int) (Start_2 String) (Start_3 String) (Start_10 String) (Start_4 String) (Start_6 String) (StartInt_5 Int) (StartInt_2 Int) (Start_5 String) (StartInt_1 Int) (StartInt_3 Int) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_7 Int) (Start_9 String) (Start_8 String) (Start_7 String))
  ((Start String ("" x y "0" (str.++ Start_1 Start) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 0 (str.indexof Start_9 Start_4 StartInt_4) (str.to_int Start_3)))
   (StartBool Bool (false true (and StartBool_1 StartBool) (str.contains Start_3 Start_3) (= Start_6 Start_7) (<= StartInt_2 StartInt_7)))
   (StartInt_10 Int (1))
   (Start_1 String ("" "1" x (str.at Start_5 StartInt_9) (str.replace Start_10 Start_4 Start_10) (str.from_int StartInt_10)))
   (StartBool_3 Bool (true (and StartBool StartBool_3) (str.<= Start Start_6) (= Start_5 Start_3)))
   (StartInt_8 Int (1 0))
   (StartBool_1 Bool (true (and StartBool_3 StartBool_3) (str.<= Start_3 Start_4) (<= StartInt StartInt_3)))
   (StartInt_6 Int (0 (str.indexof Start_3 Start_7 StartInt_1)))
   (StartInt_9 Int (0 (str.indexof Start_3 Start_2 StartInt_7) (str.to_int Start_1)))
   (Start_2 String ("1" (str.replace Start Start Start_3) (str.from_int StartInt)))
   (Start_3 String ("a" (str.++ Start_3 Start_1) (str.at Start_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_4 Start)))
   (Start_10 String ("1" "0" (str.at Start_3 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start_6)))
   (Start_4 String ("1" "b" (str.++ Start_1 Start_4) (str.substr Start_2 StartInt_2 StartInt_1)))
   (Start_6 String (x (str.++ Start_4 Start_3) (str.at Start_6 StartInt_4) (str.substr Start_5 StartInt_5 StartInt_6) (ite StartBool_2 Start_1 Start_6)))
   (StartInt_5 Int (0 (str.len Start_5) (str.to_int Start)))
   (StartInt_2 Int (1 (str.len Start) (str.indexof Start_5 Start_5 StartInt_2) (str.to_int Start_2)))
   (Start_5 String ("a" (str.++ Start_2 Start_6) (str.at Start_5 StartInt_3)))
   (StartInt_1 Int (0 (str.indexof Start_2 Start_10 StartInt_8) (str.to_int Start_9)))
   (StartInt_3 Int (0 1 (str.len Start_4) (str.to_int Start_4)))
   (StartBool_2 Bool (false true (not StartBool_2) (str.<= Start_7 Start_4) (str.prefixof Start_8 Start_8) (str.contains Start_9 Start_8) (= Start_1 Start_7)))
   (StartInt_4 Int (1 0 (str.len Start_5) (str.indexof Start_5 Start_2 StartInt_8)))
   (StartInt_7 Int (1 0 (str.indexof Start Start_2 StartInt_7) (str.to_int Start_9)))
   (Start_9 String ("b" "1" x "0" (str.at Start_4 StartInt_7) (str.replace Start_8 Start_6 Start_6) (str.from_int StartInt_2)))
   (Start_8 String ("b" (str.++ Start_7 Start_9) (str.from_int StartInt_3)))
   (Start_7 String (x (str.substr Start_7 StartInt_2 StartInt_5) (str.replace Start_3 Start_10 Start_8) (ite StartBool Start_4 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof x "a") y "1")))

(check-synth)
