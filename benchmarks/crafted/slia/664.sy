(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_3 String) (StartInt_3 Int) (Start_1 String) (Start_6 String) (StartBool_1 Bool) (Start_5 String) (Start_2 String) (StartInt_2 Int) (Start_4 String) (StartInt_1 Int))
  ((Start String ("b" (str.++ Start Start) (str.substr Start_1 StartInt StartInt)))
   (StartInt Int (0 1 (str.len Start_5)))
   (StartBool Bool (false (not StartBool) (str.suffixof Start_7 Start_7) (= Start Start) (= StartInt_2 StartInt_1) (<= StartInt_3 StartInt_1)))
   (Start_7 String ("1" (str.++ Start_4 Start_3) (str.at Start_5 StartInt_3) (str.replace Start Start_6 Start_3) (ite StartBool Start_4 Start_7)))
   (Start_3 String ("b" (str.++ Start Start) (str.substr Start StartInt StartInt_1) (str.replace Start_2 Start_2 Start_5)))
   (StartInt_3 Int (0 1 (str.len Start_4)))
   (Start_1 String ("b" (str.++ Start_1 Start) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_1 Start_1) (ite StartBool_1 Start_1 Start)))
   (Start_6 String ("0" y "" (str.from_int StartInt_1)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (str.< Start Start_1) (str.<= Start Start_2) (str.suffixof Start_3 Start_3) (str.contains Start Start) (= Start_4 Start_4) (= StartInt_2 StartInt_2)))
   (Start_5 String (x (str.++ Start Start_4) (str.at Start_2 StartInt_3) (str.substr Start_5 StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start_2)))
   (Start_2 String ("a" "" (str.++ Start_2 Start)))
   (StartInt_2 Int (0 1 (str.to_int Start_4)))
   (Start_4 String ("0" (str.replace Start_2 Start_2 Start)))
   (StartInt_1 Int (1 (str.indexof Start_6 Start_3 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof "b" x 0))))

(check-synth)
