(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (Start_6 String) (Start_1 String) (Start_4 String) (StartInt_1 Int) (StartInt_2 Int) (Start_3 String) (Start_5 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_2 String) (Start_7 String))
  ((Start String ("" "b" (str.++ Start Start) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start_2)))
   (StartBool Bool (false true (<= StartInt_3 StartInt)))
   (StartBool_1 Bool (true (str.< Start_3 Start_4) (str.suffixof Start_1 Start_2) (= StartInt StartInt)))
   (Start_6 String (y x "a" "" (str.replace Start_3 Start_1 Start_3)))
   (Start_1 String ("" "b" (str.++ Start_2 Start_2) (ite StartBool_1 Start Start_2)))
   (Start_4 String ("0" "a" (str.++ Start_1 Start_1) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start Start_4 Start)))
   (StartInt_1 Int (1 (str.to_int Start_3)))
   (StartInt_2 Int (1 0 (str.len Start_5) (str.to_int Start_3)))
   (Start_3 String (y "1" (str.++ Start Start) (str.at Start_5 StartInt_2) (str.substr Start_4 StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (Start_5 String (y "" (str.at Start_4 StartInt_3) (str.replace Start_2 Start Start_3) (ite StartBool_2 Start_5 Start_5)))
   (StartInt_3 Int (0 (str.len Start_5) (str.to_int Start)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (str.<= Start Start_5) (str.prefixof Start_5 Start_2) (str.suffixof Start_5 Start_1) (<= StartInt_3 StartInt_1)))
   (Start_2 String (x (str.++ Start_1 Start_4) (str.replace Start_6 Start Start_7) (str.from_int StartInt_1)))
   (Start_7 String ("" (ite StartBool Start_6 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "0" "a") y "")))

(check-synth)
