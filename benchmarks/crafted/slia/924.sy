(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartBool_3 Bool) (Start_3 String) (StartInt_5 Int) (Start_12 String) (StartInt_4 Int) (Start_11 String) (Start_2 String) (StartBool_4 Bool) (Start_5 String) (StartInt_1 Int) (Start_1 String) (Start_6 String) (StartInt_3 Int) (Start_4 String) (Start_7 String) (StartBool_1 Bool) (Start_8 String) (Start_9 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_10 String))
  ((Start String ("0" "a" (str.++ Start_1 Start_2) (str.at Start_2 StartInt)))
   (StartInt Int (0 (str.indexof Start_4 Start_10 StartInt)))
   (StartBool Bool (false true (and StartBool StartBool_1) (str.< Start Start_10) (str.<= Start_2 Start_10) (= Start_1 Start_3) (<= StartInt_1 StartInt_4)))
   (StartInt_6 Int (1 0 (str.len Start_10) (str.to_int Start_9)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_4) (str.<= Start_11 Start_1) (str.prefixof Start_2 Start_7) (str.contains Start_12 Start_1) (<= StartInt_1 StartInt_1)))
   (Start_3 String ("0" (str.at Start_12 StartInt_1) (str.replace Start Start_6 Start_1) (ite StartBool_3 Start_8 Start_3)))
   (StartInt_5 Int (1 0 (str.indexof Start_9 Start_9 StartInt_5)))
   (Start_12 String ("a" (str.++ Start Start_1) (str.at Start_6 StartInt_4) (str.from_int StartInt_2)))
   (StartInt_4 Int (0 1 (str.len Start_12) (str.indexof Start_8 Start_9 StartInt_1)))
   (Start_11 String ("1" (str.++ Start_1 Start_1) (str.at Start_8 StartInt) (str.replace Start_8 Start_11 Start_9)))
   (Start_2 String (x "1" (str.++ Start_2 Start_1) (str.replace Start_2 Start_3 Start_1) (ite StartBool Start_4 Start_5)))
   (StartBool_4 Bool (false (not StartBool_3) (str.< Start_8 Start_10) (str.prefixof Start_10 Start_8) (str.suffixof Start_5 Start) (= Start_1 Start_4) (= StartInt_5 StartInt_4) (<= StartInt StartInt_5)))
   (Start_5 String (x (str.at Start_3 StartInt) (str.substr Start_4 StartInt StartInt) (str.replace Start_6 Start Start_4) (str.from_int StartInt_1) (ite StartBool Start_4 Start)))
   (StartInt_1 Int (1 (str.len Start_3)))
   (Start_1 String ("a" "0" y "1" x (str.++ Start_11 Start) (str.substr Start_8 StartInt_6 StartInt_5) (str.replace Start_1 Start_5 Start_12) (ite StartBool Start Start_3)))
   (Start_6 String (y "b" (str.at Start_6 StartInt_2) (str.substr Start_7 StartInt_1 StartInt_2) (str.replace Start_7 Start_5 Start_6) (str.from_int StartInt_1)))
   (StartInt_3 Int (0 (str.len Start_9) (str.indexof Start_4 Start_4 StartInt) (str.to_int Start_8)))
   (Start_4 String ("0" "1" (str.substr Start_4 StartInt_3 StartInt_4) (str.replace Start Start_6 Start_2)))
   (Start_7 String ("b" (str.++ Start_1 Start_1) (str.replace Start_1 Start_7 Start_3) (ite StartBool_1 Start_7 Start)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.prefixof Start_8 Start_4) (str.suffixof Start_2 Start_3) (= StartInt StartInt_2)))
   (Start_8 String ("1" (str.++ Start_9 Start_9) (str.from_int StartInt_3) (ite StartBool_2 Start_1 Start_3)))
   (Start_9 String ("" "1" (str.at Start_10 StartInt) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_9) (str.to_int Start_11)))
   (StartBool_2 Bool (true (= StartInt_1 StartInt_3)))
   (Start_10 String ("1" "0" "b" (str.++ Start Start_7) (str.substr Start_2 StartInt_3 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.from_int (str.len (str.++ y "0"))) 0)))

(check-synth)
