(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartBool_1 Bool) (Start_6 String) (Start_2 String) (Start_5 String) (StartInt_3 Int) (Start_3 String) (Start_4 String) (StartInt_2 Int) (Start_1 String))
  ((Start String ("a" x (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (1 (str.len Start)))
   (StartBool Bool (false true (and StartBool StartBool_1) (str.< Start_5 Start) (str.suffixof Start_4 Start_4) (= Start_2 Start_4)))
   (StartInt_1 Int (1 (str.to_int Start_5)))
   (StartBool_1 Bool (false true (str.<= Start_3 Start_2) (str.suffixof Start_2 Start_5) (= Start Start_6)))
   (Start_6 String ("1" (str.substr Start_6 StartInt_2 StartInt) (str.replace Start_4 Start_4 Start_2) (ite StartBool_1 Start_4 Start_2)))
   (Start_2 String ("a" "1" (str.from_int StartInt_1) (ite StartBool Start_3 Start_6)))
   (Start_5 String ("1" "a" (str.++ Start_5 Start_5) (str.substr Start StartInt_1 StartInt_3) (ite StartBool Start_4 Start_4)))
   (StartInt_3 Int (1 (str.len Start) (str.indexof Start_4 Start StartInt_3) (str.to_int Start_2)))
   (Start_3 String ("b" (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_3)))
   (Start_4 String (y (str.++ Start_2 Start) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_5 Start_1 Start_3) (str.from_int StartInt_2)))
   (StartInt_2 Int (1 (str.len Start_2)))
   (Start_1 String ("a" (str.++ Start_2 Start) (str.at Start_2 StartInt) (str.replace Start Start_3 Start) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "1" x "1") 0)))

(check-synth)
