(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_5 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_11 String) (Start_12 String) (Start_10 String) (Start_1 String) (Start_9 String) (StartInt_6 Int) (StartInt_7 Int) (Start_3 String) (Start_5 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_8 String) (StartInt_1 Int) (Start_13 String) (Start_4 String) (StartInt_2 Int) (StartInt_4 Int) (Start_2 String) (Start_7 String) (Start_6 String))
  ((Start String (x y "1" (str.++ Start_1 Start_2) (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_1 Start_2 Start_1) (ite StartBool Start_2 Start_3)))
   (StartInt Int (1 0 (str.len Start_8) (str.indexof Start_4 Start_11 StartInt_7) (str.to_int Start_9)))
   (StartBool Bool (false true (not StartBool_4) (str.suffixof Start_7 Start_7) (= Start_7 Start) (= StartInt_1 StartInt_7) (<= StartInt_7 StartInt_6)))
   (StartBool_4 Bool (false true (str.prefixof Start_10 Start_7) (str.contains Start_6 Start_11) (= Start_10 Start) (<= StartInt_6 StartInt_4)))
   (StartInt_5 Int (1 (str.len Start_2) (str.to_int Start_13)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_3) (str.< Start_1 Start_3) (str.contains Start_4 Start_10) (= Start Start_5) (= StartInt_2 StartInt_2)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_1) (str.< Start_7 Start) (str.prefixof Start_11 Start_4) (<= StartInt_4 StartInt)))
   (Start_11 String ("1" "a" "" x y "b" (str.++ Start_1 Start_12) (str.at Start_13 StartInt_5) (str.substr Start_10 StartInt_5 StartInt_6) (ite StartBool_2 Start_4 Start_13)))
   (Start_12 String (y "1" "0" (str.++ Start_6 Start_8) (str.substr Start_4 StartInt_1 StartInt_7) (str.replace Start_5 Start_3 Start_6) (str.from_int StartInt_7) (ite StartBool Start_7 Start_1)))
   (Start_10 String (x "b" "a" "" y "1" "0" (str.++ Start_11 Start_7) (str.at Start_1 StartInt_1)))
   (Start_1 String (x (str.++ Start_5 Start_4) (str.at Start_7 StartInt_4) (ite StartBool_3 Start_11 Start_9)))
   (Start_9 String (x (str.at Start_10 StartInt_2) (str.replace Start_6 Start_6 Start_8)))
   (StartInt_6 Int (1 0 (str.indexof Start_13 Start_3 StartInt_5) (str.to_int Start_5)))
   (StartInt_7 Int (0 (str.len Start_9) (str.to_int Start_7)))
   (Start_3 String (x "" (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_1)))
   (Start_5 String (x (str.substr Start_1 StartInt_4 StartInt_2) (str.replace Start_1 Start_4 Start_5) (str.from_int StartInt_3)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool) (str.< Start_2 Start_3) (str.<= Start_4 Start_3) (str.prefixof Start Start_1) (str.suffixof Start_4 Start_3) (str.contains Start_2 Start_4) (= StartInt_2 StartInt_2) (<= StartInt_1 StartInt)))
   (StartInt_3 Int (0 (str.len Start_2)))
   (Start_8 String (y (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_1 Start_5 Start_2) (str.from_int StartInt_3)))
   (StartInt_1 Int (1 (str.len Start_3)))
   (Start_13 String ("b" "" (str.at Start_9 StartInt) (str.substr Start_2 StartInt_6 StartInt_3) (str.from_int StartInt_7) (ite StartBool Start_3 Start_3)))
   (Start_4 String (y "" x "a" "1" "b" "0" (str.++ Start_3 Start_2) (str.substr Start_5 StartInt_3 StartInt_2) (str.replace Start_4 Start Start_3) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_2 Int (0 1))
   (StartInt_4 Int (0 (str.indexof Start_5 Start StartInt_2)))
   (Start_2 String ("a" "b" y "" (str.replace Start_4 Start_6 Start_7) (ite StartBool_1 Start_3 Start_7)))
   (Start_7 String ("b" "a" (str.at Start_4 StartInt_3) (str.replace Start_7 Start_7 Start_8)))
   (Start_6 String ("a" (str.++ Start_5 Start_4) (str.substr Start_8 StartInt_4 StartInt) (str.from_int StartInt) (ite StartBool Start_1 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "" x) x "a")))

(check-synth)
