(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_1 String) (Start_4 String) (StartInt_6 Int) (Start_7 String) (Start_3 String) (StartInt_4 Int) (StartInt_2 Int) (StartInt_3 Int) (Start_9 String) (Start_6 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_8 String) (StartInt_1 Int) (Start_10 String) (StartInt_7 Int) (Start_2 String) (Start_5 String))
  ((Start String ("0" (str.++ Start Start) (str.at Start StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 0 (str.indexof Start_1 Start_8 StartInt_7)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (str.suffixof Start_3 Start) (str.contains Start_1 Start_1) (= Start_5 Start_6) (= StartInt_1 StartInt_2)))
   (Start_11 String ("b" "a" (str.++ Start_9 Start_11)))
   (Start_1 String ("" x "b" (str.at Start_7 StartInt_4) (str.substr Start_5 StartInt_5 StartInt_3) (str.from_int StartInt_7) (ite StartBool_1 Start_10 Start_8)))
   (Start_4 String ("a" (str.substr Start_9 StartInt_4 StartInt) (str.replace Start_6 Start_7 Start_3) (str.from_int StartInt_7) (ite StartBool Start_3 Start_8)))
   (StartInt_6 Int (1 0))
   (Start_7 String ("1" (str.at Start_2 StartInt_1) (str.substr Start_7 StartInt_2 StartInt_5) (str.replace Start_8 Start_4 Start) (str.from_int StartInt_3)))
   (Start_3 String (y "1" (str.++ Start_4 Start_1) (str.at Start_5 StartInt) (str.substr Start StartInt StartInt_2) (str.replace Start_5 Start_3 Start_5) (str.from_int StartInt_1)))
   (StartInt_4 Int (0 1 (str.to_int Start_8)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.indexof Start_6 Start_5 StartInt_3) (str.to_int Start_6)))
   (StartInt_3 Int (0 (str.to_int Start)))
   (Start_9 String ("a" (str.at Start_9 StartInt_5) (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start_3 Start_3 Start_2) (ite StartBool Start_2 Start_10)))
   (Start_6 String ("a" (str.++ Start Start_7) (str.at Start_4 StartInt) (str.substr Start StartInt_1 StartInt) (str.replace Start_3 Start_5 Start) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (str.prefixof Start_1 Start) (str.contains Start_7 Start_4) (= Start_11 Start_6) (= StartInt_2 StartInt_5) (<= StartInt_4 StartInt_1)))
   (StartInt_5 Int (0 1 (str.to_int Start_9)))
   (Start_8 String (x (str.++ Start_4 Start_7) (str.substr Start_6 StartInt_4 StartInt)))
   (StartInt_1 Int (0 1 (str.len Start_7)))
   (Start_10 String ("b" "a" (str.at Start StartInt_3) (str.replace Start_9 Start_1 Start_1) (ite StartBool_1 Start Start_9)))
   (StartInt_7 Int (0 (str.indexof Start_1 Start_2 StartInt_7) (str.to_int Start_10)))
   (Start_2 String ("a" x "b" (str.++ Start_1 Start_1) (ite StartBool Start_3 Start_2)))
   (Start_5 String ("" y (str.++ Start_5 Start_4) (str.at Start_6 StartInt_1) (str.substr Start_10 StartInt_6 StartInt_6) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "b" "" x) 0)))

(check-synth)
