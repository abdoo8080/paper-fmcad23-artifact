(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartInt_1 Int) (StartBool_3 Bool) (Start_13 String) (Start_10 String) (StartInt_6 Int) (StartBool_2 Bool) (Start_1 String) (Start_2 String) (StartInt_7 Int) (Start_11 String) (Start_7 String) (Start_8 String) (Start_12 String) (Start_4 String) (StartBool_1 Bool) (Start_14 String) (Start_3 String) (Start_5 String) (StartInt_4 Int) (Start_6 String) (StartInt_2 Int) (StartInt_8 Int) (StartInt_5 Int) (StartInt_3 Int) (Start_9 String))
  ((Start String ("" (str.substr Start_1 StartInt StartInt_1) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_9 Start_15 StartInt_3) (str.to_int Start_6)))
   (StartBool Bool (true false (and StartBool_2 StartBool_3) (str.prefixof Start_4 Start_4) (str.contains Start_9 Start_6) (= Start_5 Start)))
   (Start_15 String ("b" "0" (str.++ Start_7 Start_5) (str.at Start_8 StartInt_7) (str.substr Start_1 StartInt_1 StartInt_5) (str.from_int StartInt_7)))
   (StartInt_1 Int (0 (str.to_int Start_9)))
   (StartBool_3 Bool (false (not StartBool_2) (str.< Start_3 Start_2) (str.<= Start_10 Start_11) (str.prefixof Start_10 Start_10) (str.contains Start_6 Start_8) (= StartInt_7 StartInt_6)))
   (Start_13 String (x (str.++ Start_11 Start_5) (str.substr Start_12 StartInt_4 StartInt_6) (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_2)))
   (Start_10 String ("b" "1" (str.++ Start_11 Start) (str.at Start_2 StartInt) (str.substr Start_9 StartInt_1 StartInt_5)))
   (StartInt_6 Int (1 (str.len Start_12) (str.indexof Start_14 Start_5 StartInt_1) (str.to_int Start_12)))
   (StartBool_2 Bool (true (str.< Start_7 Start_10) (str.<= Start Start_6)))
   (Start_1 String ("1" (str.++ Start_11 Start_2) (str.substr Start_6 StartInt_8 StartInt_4) (str.replace Start Start_1 Start_9) (str.from_int StartInt_8) (ite StartBool Start_3 Start_5)))
   (Start_2 String ("1" (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_7 Int (0 1 (str.len Start_14)))
   (Start_11 String (x y (str.at Start_4 StartInt_3) (str.from_int StartInt_1) (ite StartBool_3 Start_11 Start_12)))
   (Start_7 String (y (str.at Start StartInt_2) (str.from_int StartInt_2)))
   (Start_8 String ("" "a" (str.++ Start Start_7) (str.replace Start_3 Start_1 Start_4) (str.from_int StartInt) (ite StartBool Start_7 Start_6)))
   (Start_12 String ("" (str.replace Start_13 Start_14 Start_14) (ite StartBool_2 Start_11 Start_8)))
   (Start_4 String ("b" y "a" "" "0" x (str.at Start StartInt_4) (str.substr Start_9 StartInt_3 StartInt) (str.replace Start_2 Start_9 Start)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_2 StartBool_2) (str.<= Start_1 Start_2) (str.prefixof Start_2 Start_3) (= StartInt StartInt_1)))
   (Start_14 String ("0" (str.++ Start_7 Start_13) (str.replace Start_9 Start_12 Start_11) (str.from_int StartInt_2)))
   (Start_3 String ("a" (str.++ Start Start) (str.substr Start_4 StartInt_1 StartInt) (str.replace Start_1 Start_4 Start_5)))
   (Start_5 String (x (str.at Start_2 StartInt_1) (str.substr Start_5 StartInt_2 StartInt_2) (str.replace Start_3 Start_3 Start_6)))
   (StartInt_4 Int (1 0 (str.to_int Start_7)))
   (Start_6 String ("a" (str.++ Start_4 Start_6) (str.substr Start_7 StartInt_2 StartInt_1)))
   (StartInt_2 Int (0 (str.len Start_5) (str.indexof Start_5 Start_4 StartInt_3) (str.to_int Start_2)))
   (StartInt_8 Int (1 0 (str.len Start_13) (str.indexof Start_14 Start_2 StartInt_2) (str.to_int Start_11)))
   (StartInt_5 Int (1))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start_2 Start_8 StartInt_2)))
   (Start_9 String ("a" (str.at Start_2 StartInt) (str.substr Start_9 StartInt_3 StartInt_3) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "1" x)))

(check-synth)
