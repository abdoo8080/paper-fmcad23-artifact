(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_4 Int) (Start_9 String) (StartBool_2 Bool) (Start_3 String) (StartInt_7 Int) (Start_10 String) (Start_6 String) (Start_4 String) (Start_7 String) (StartInt_1 Int) (Start_11 String) (StartInt_9 Int) (Start_13 String) (Start_8 String) (Start_2 String) (StartInt_5 Int) (Start_1 String) (Start_5 String) (StartInt_2 Int) (StartInt_8 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_14 String) (StartInt_10 Int) (StartInt_3 Int) (Start_15 String))
  ((Start String ("0" "1" (str.at Start StartInt) (str.from_int StartInt) (ite StartBool Start Start_1)))
   (StartInt Int (0 (str.len Start_1) (str.to_int Start_15)))
   (StartBool Bool (false true (not StartBool_3) (str.<= Start_6 Start_15) (str.prefixof Start_4 Start_8) (str.suffixof Start_7 Start_12) (= Start_4 Start_5) (= StartInt StartInt)))
   (Start_12 String ("0" x "b" "" (str.++ Start_1 Start) (str.substr Start_12 StartInt_7 StartInt_4) (str.from_int StartInt_7)))
   (StartInt_6 Int (0 (str.len Start_8) (str.indexof Start_11 Start_3 StartInt_7) (str.to_int Start_6)))
   (StartBool_1 Bool (true (not StartBool_4) (str.suffixof Start_7 Start) (str.contains Start_3 Start_2) (= Start_3 Start_11)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_2 StartInt_3)))
   (Start_9 String ("a" "b" (str.++ Start_7 Start_3) (str.substr Start_10 StartInt_6 StartInt_6) (str.from_int StartInt_5) (ite StartBool_1 Start_9 Start_8)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_3 StartBool_2) (str.< Start_3 Start_8) (str.<= Start_1 Start_5) (str.suffixof Start_8 Start_9) (str.contains Start_8 Start_1) (= Start_5 Start)))
   (Start_3 String (x (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start Start_1 Start_1) (ite StartBool_1 Start_3 Start_4)))
   (StartInt_7 Int (0 (str.indexof Start_12 Start_4 StartInt_4)))
   (Start_10 String (x (str.substr Start_11 StartInt_1 StartInt_3) (str.replace Start_9 Start_13 Start_11) (str.from_int StartInt_2)))
   (Start_6 String ("1" (str.substr Start_6 StartInt_4 StartInt_5) (ite StartBool_2 Start_6 Start_6)))
   (Start_4 String ("b" (str.++ Start Start_5) (str.at Start_6 StartInt_1) (str.replace Start_5 Start_5 Start_5) (ite StartBool Start_5 Start_7)))
   (Start_7 String (y "0" "" "b" x "1" (str.++ Start_7 Start_1) (str.at Start StartInt_1) (str.substr Start StartInt_1 StartInt_4)))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.to_int Start_3)))
   (Start_11 String (x "1" "b" (str.++ Start_7 Start_4) (str.substr Start StartInt_4 StartInt_2) (str.replace Start_5 Start_10 Start_4) (str.from_int StartInt) (ite StartBool_3 Start_6 Start_7)))
   (StartInt_9 Int (1 (str.to_int Start_1)))
   (Start_13 String ("" y "a" "0" (str.at Start_13 StartInt_6) (str.from_int StartInt_7) (ite StartBool_3 Start_5 Start_5)))
   (Start_8 String ("a" "1" (str.at Start_13 StartInt_7) (str.replace Start_2 Start_5 Start_1)))
   (Start_2 String ("a" (str.at Start_13 StartInt_2) (str.substr Start_2 StartInt_7 StartInt_5) (ite StartBool Start_6 Start_9)))
   (StartInt_5 Int (1 (str.to_int Start_9)))
   (Start_1 String (y "a" (str.replace Start_2 Start_2 Start_2) (str.from_int StartInt_1)))
   (Start_5 String (y (str.from_int StartInt_5)))
   (StartInt_2 Int (1))
   (StartInt_8 Int (1 0))
   (StartBool_3 Bool (false (not StartBool) (str.<= Start_12 Start_8) (str.contains Start_5 Start_9) (= Start_1 Start_2) (= StartInt StartInt_7)))
   (StartBool_4 Bool (true (not StartBool_2) (str.< Start_3 Start_3) (str.<= Start_6 Start_13) (str.suffixof Start_14 Start_11) (str.contains Start_4 Start_1)))
   (Start_14 String ("0" "" (str.++ Start_8 Start) (str.at Start_13 StartInt_8)))
   (StartInt_10 Int (1 0 (str.indexof Start_12 Start_11 StartInt_8) (str.to_int Start_7)))
   (StartInt_3 Int (1 (str.indexof Start Start_5 StartInt_8)))
   (Start_15 String ("a" "0" (str.at Start_8 StartInt_9) (str.substr Start_11 StartInt_7 StartInt_8) (str.replace Start_7 Start_13 Start_13) (str.from_int StartInt_10) (ite StartBool_2 Start_11 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.at x 1) "a")))

(check-synth)
