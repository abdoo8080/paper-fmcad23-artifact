(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_13 String) (Start_4 String) (Start_5 String) (Start_2 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_8 String) (Start_10 String) (Start_6 String) (StartBool_4 Bool) (StartInt_1 Int) (Start_7 String) (StartBool_3 Bool) (StartInt_6 Int) (StartInt_2 Int) (StartInt_3 Int) (Start_1 String) (Start_15 String) (Start_9 String) (Start_14 String) (Start_12 String) (Start_11 String) (StartInt_7 Int) (StartInt_8 Int) (Start_16 String))
  ((Start String (x (str.++ Start_1 Start) (str.substr Start StartInt StartInt)))
   (StartInt Int (1 0 (str.to_int Start_2)))
   (StartBool Bool (false true (str.<= Start_3 Start_2) (str.prefixof Start Start_4) (str.suffixof Start_3 Start_5) (str.contains Start_4 Start_1) (= StartInt StartInt_1) (<= StartInt_2 StartInt_1)))
   (Start_3 String ("1" (str.++ Start_9 Start_5) (str.at Start_14 StartInt_5) (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_4 Int (1 (str.len Start_6) (str.to_int Start_10)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_1 StartBool_2) (str.< Start_7 Start) (str.prefixof Start_8 Start_6) (str.suffixof Start_9 Start_8) (str.contains Start_9 Start_3) (<= StartInt_3 StartInt_5)))
   (Start_13 String ("a" "1" (str.replace Start_7 Start_3 Start_11) (str.from_int StartInt_4)))
   (Start_4 String (x (str.substr Start_5 StartInt_4 StartInt_5) (str.replace Start_4 Start_4 Start_2)))
   (Start_5 String ("0" "" "1" (str.at Start_4 StartInt) (str.substr Start_1 StartInt StartInt_3) (str.replace Start_3 Start_4 Start) (ite StartBool Start_3 Start_5)))
   (Start_2 String ("b" y "a" "1" x (str.at Start StartInt_2) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false true (str.prefixof Start_14 Start_1) (str.suffixof Start_10 Start_15) (str.contains Start_14 Start_6) (= StartInt_8 StartInt_7)))
   (StartInt_5 Int (1 (str.len Start) (str.indexof Start_5 Start_6 StartInt_4) (str.to_int Start_6)))
   (Start_8 String (y "b" (str.substr Start_5 StartInt_4 StartInt_2) (ite StartBool Start_3 Start_5)))
   (Start_10 String ("b" "1" "a" "" (str.++ Start_2 Start_12) (str.substr Start_5 StartInt_6 StartInt_4) (str.replace Start_7 Start_5 Start_13) (str.from_int StartInt_1)))
   (Start_6 String ("1" "a" "b" (str.++ Start_2 Start_3) (str.at Start_1 StartInt_5) (str.substr Start_5 StartInt_4 StartInt_4) (str.replace Start Start_4 Start_3) (ite StartBool_1 Start Start_2)))
   (StartBool_4 Bool (false true (str.< Start_12 Start_4) (str.contains Start_4 Start_10) (= Start_6 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start Start StartInt) (str.to_int Start_1)))
   (Start_7 String ("1" (str.++ Start_10 Start_5) (str.at Start_11 StartInt) (str.substr Start_7 StartInt_2 StartInt_2) (str.replace Start_2 Start_12 Start_13)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_2 StartBool_4) (str.<= Start_6 Start) (= StartInt_3 StartInt_3) (<= StartInt_6 StartInt_6)))
   (StartInt_6 Int (1 0 (str.len Start_3) (str.indexof Start_13 Start_12 StartInt)))
   (StartInt_2 Int (0 1 (str.len Start)))
   (StartInt_3 Int (1 (str.indexof Start_4 Start_4 StartInt_2) (str.to_int Start)))
   (Start_1 String ("a" "1" (str.from_int StartInt_1)))
   (Start_15 String ("0" "b" (str.at Start_8 StartInt_5) (str.substr Start_16 StartInt_8 StartInt_2) (str.replace Start_10 Start_8 Start_15) (str.from_int StartInt_3)))
   (Start_9 String (x (str.substr Start_8 StartInt_1 StartInt_3) (str.from_int StartInt) (ite StartBool Start_9 Start_8)))
   (Start_14 String ("" x (str.substr Start_14 StartInt StartInt) (str.replace Start_14 Start_9 Start_7) (str.from_int StartInt_2) (ite StartBool_3 Start_2 Start)))
   (Start_12 String ("0" "1" "b" "" (str.++ Start_6 Start_11) (str.at Start_4 StartInt_3) (str.replace Start_14 Start_3 Start_11)))
   (Start_11 String ("a" x (str.++ Start_6 Start_7) (str.at Start_7 StartInt_1) (str.substr Start_7 StartInt_4 StartInt_2) (str.replace Start_7 Start_5 Start_5) (str.from_int StartInt_7)))
   (StartInt_7 Int (0 (str.len Start_3) (str.indexof Start_10 Start_9 StartInt_8)))
   (StartInt_8 Int (0 1 (str.indexof Start_3 Start_14 StartInt_4)))
   (Start_16 String ("1" (str.++ Start_10 Start_5) (str.at Start_2 StartInt_8) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.at x 0) "1")))

(check-synth)
