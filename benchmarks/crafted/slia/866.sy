(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_7 String) (StartInt_4 Int) (StartInt_7 Int) (StartBool_2 Bool) (StartInt_3 Int) (Start_3 String) (StartInt_2 Int) (Start_4 String) (Start_5 String) (Start_9 String) (StartBool_4 Bool) (StartBool_1 Bool) (Start_8 String) (Start_2 String) (Start_13 String) (Start_12 String) (Start_11 String) (StartInt_8 Int) (StartBool_5 Bool) (Start_10 String) (StartInt_6 Int) (Start_6 String) (StartBool_3 Bool) (StartInt_9 Int) (Start_14 String) (Start_1 String) (StartInt_1 Int))
  ((Start String ("b" x (str.at Start StartInt_1) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_1 Start_1 Start_2)))
   (StartInt Int (0 (str.len Start_13) (str.indexof Start_14 Start_13 StartInt_6)))
   (StartBool Bool (false (and StartBool_2 StartBool) (str.< Start_5 Start_2) (str.<= Start_2 Start) (str.prefixof Start_12 Start_7) (str.contains Start_12 Start_8)))
   (StartInt_5 Int (0 (str.len Start_8) (str.indexof Start Start_1 StartInt_4) (str.to_int Start_1)))
   (Start_7 String ("b" (str.at Start_6 StartInt_1) (str.substr Start_4 StartInt StartInt) (str.replace Start_1 Start_7 Start_1) (str.from_int StartInt_6)))
   (StartInt_4 Int (0 (str.len Start_2) (str.indexof Start_3 Start_4 StartInt_3)))
   (StartInt_7 Int (1 (str.len Start_2) (str.to_int Start_2)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_4 StartBool_5) (str.prefixof Start_4 Start_2) (= Start Start) (= StartInt StartInt_3)))
   (StartInt_3 Int (1 (str.indexof Start_3 Start_5 StartInt_4) (str.to_int Start_5)))
   (Start_3 String ("" "1" x "a" "0" (str.++ Start_10 Start_2) (str.replace Start_6 Start_14 Start_6) (ite StartBool_5 Start Start_13)))
   (StartInt_2 Int (1 (str.len Start_14)))
   (Start_4 String ("0" (str.replace Start_1 Start_4 Start_4) (str.from_int StartInt) (ite StartBool_2 Start_4 Start_4)))
   (Start_5 String (y (str.++ Start_2 Start_6) (str.substr Start_3 StartInt_5 StartInt) (str.replace Start_1 Start_3 Start_5) (str.from_int StartInt) (ite StartBool_4 Start_7 Start_1)))
   (Start_9 String ("" (str.++ Start_3 Start_5) (str.at Start_4 StartInt_7)))
   (StartBool_4 Bool (false true (not StartBool_1) (and StartBool_4 StartBool_3) (str.<= Start_9 Start_10) (str.suffixof Start_3 Start_11) (str.contains Start_12 Start_13) (= Start_6 Start_4) (= StartInt_7 StartInt_6)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool_1) (= Start_4 Start_2)))
   (Start_8 String ("a" (str.at Start_3 StartInt_5) (str.substr Start_1 StartInt_6 StartInt_5) (ite StartBool_5 Start_2 Start_5)))
   (Start_2 String ("1" "a" "b" x (str.++ Start_2 Start_2) (str.at Start_3 StartInt_2) (str.substr Start_2 StartInt_1 StartInt_1) (ite StartBool_1 Start_1 Start_3)))
   (Start_13 String ("1" x (str.++ Start_12 Start_9) (str.replace Start_13 Start_4 Start_4) (str.from_int StartInt_1) (ite StartBool_4 Start_13 Start_12)))
   (Start_12 String ("1" "b" "" x "a" (str.++ Start_9 Start_3) (str.at Start_1 StartInt)))
   (Start_11 String (y (str.++ Start_12 Start_4) (str.at Start_1 StartInt_8) (str.substr Start_3 StartInt StartInt_3) (str.replace Start_1 Start_5 Start_1)))
   (StartInt_8 Int (1 (str.indexof Start_3 Start StartInt_7) (str.to_int Start_5)))
   (StartBool_5 Bool (true (not StartBool) (str.prefixof Start_4 Start_7) (= Start_1 Start_4) (<= StartInt_1 StartInt_1)))
   (Start_10 String ("a" (str.substr Start StartInt_7 StartInt_2)))
   (StartInt_6 Int (1 (str.indexof Start_5 Start_6 StartInt_1)))
   (Start_6 String ("0" (str.at Start_5 StartInt_2) (str.substr Start_8 StartInt_7 StartInt) (str.replace Start_2 Start_4 Start_1) (str.from_int StartInt_6) (ite StartBool_2 Start_4 Start_3)))
   (StartBool_3 Bool (true false (not StartBool) (str.prefixof Start_3 Start_10) (str.suffixof Start Start_9) (str.contains Start_8 Start_2) (= Start_12 Start) (= StartInt_5 StartInt_9) (<= StartInt_2 StartInt_2)))
   (StartInt_9 Int (1))
   (Start_14 String ("" (str.at Start_1 StartInt_6) (str.replace Start_13 Start_3 Start_9)))
   (Start_1 String ("b" x "" (str.substr Start_14 StartInt_5 StartInt_4)))
   (StartInt_1 Int (1 (str.len Start_8) (str.to_int Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ y "a") (str.++ (str.replace "b" "" x) (str.++ "a" x)))))

(check-synth)
