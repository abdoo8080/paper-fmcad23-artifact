(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_6 Int) (Start_4 String) (StartInt_4 Int) (StartInt_7 Int) (Start_11 String) (Start_9 String) (StartInt_1 Int) (Start_1 String) (StartInt_5 Int) (StartInt_2 Int) (Start_8 String) (Start_3 String) (Start_2 String) (Start_5 String) (StartInt_3 Int) (Start_10 String) (Start_6 String) (Start_7 String))
  ((Start String ("b" (str.++ Start_1 Start_1) (str.from_int StartInt)))
   (StartInt Int (0 (str.indexof Start_2 Start_1 StartInt_1) (str.to_int Start)))
   (StartBool Bool (false true (and StartBool_1 StartBool) (str.prefixof Start_4 Start_5) (str.suffixof Start_4 Start_5) (= Start_3 Start_3)))
   (StartInt_8 Int (1))
   (StartBool_2 Bool (false (not StartBool) (str.< Start_8 Start_5) (str.<= Start_1 Start_3) (= Start_11 Start_9) (= StartInt_7 StartInt_8)))
   (StartBool_1 Bool (false (not StartBool_2) (str.suffixof Start_10 Start_9) (= Start_2 Start_11) (<= StartInt_1 StartInt_1)))
   (StartInt_6 Int (1 0 (str.len Start_2) (str.indexof Start_10 Start_11 StartInt_5) (str.to_int Start_6)))
   (Start_4 String ("0" "1" (str.++ Start_10 Start_4) (str.substr Start_10 StartInt_3 StartInt_6) (ite StartBool_1 Start_11 Start)))
   (StartInt_4 Int (1 0 (str.indexof Start_4 Start_1 StartInt_5) (str.to_int Start_1)))
   (StartInt_7 Int (1 (str.len Start_9) (str.indexof Start_2 Start_3 StartInt_7)))
   (Start_11 String ("1" (str.++ Start_2 Start_5) (str.substr Start_9 StartInt_5 StartInt) (str.replace Start_2 Start_9 Start_8) (str.from_int StartInt_5) (ite StartBool Start_5 Start_3)))
   (Start_9 String (x "b" (str.++ Start_10 Start_10) (str.at Start_3 StartInt) (str.substr Start_6 StartInt_3 StartInt) (str.replace Start_1 Start_10 Start_8) (str.from_int StartInt_5)))
   (StartInt_1 Int (0 (str.indexof Start Start_1 StartInt_2) (str.to_int Start_1)))
   (Start_1 String ("" (str.++ Start_2 Start_3) (str.at Start_2 StartInt_1) (str.from_int StartInt)))
   (StartInt_5 Int (0 1 (str.indexof Start_4 Start_9 StartInt) (str.to_int Start_1)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start_3 Start_2 StartInt_2)))
   (Start_8 String ("1" (str.++ Start_2 Start_4) (str.replace Start_4 Start_4 Start_8) (str.from_int StartInt)))
   (Start_3 String ("b" x (str.replace Start_2 Start Start) (ite StartBool Start_1 Start)))
   (Start_2 String ("b" "1" (str.++ Start_2 Start_2) (str.at Start_3 StartInt_2) (str.substr Start StartInt StartInt_2)))
   (Start_5 String ("0" x (str.substr Start StartInt StartInt_2) (str.replace Start_6 Start_6 Start_3) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_6 StartInt) (str.to_int Start)))
   (Start_10 String ("0" (str.++ Start_3 Start_7) (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_4 Start_10 Start_11)))
   (Start_6 String (y "b" x "0" (str.at Start_6 StartInt_4) (str.substr Start_4 StartInt_4 StartInt_5) (str.replace Start_3 Start_7 Start_8) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_6)))
   (Start_7 String ("b" y "a" x (str.at Start_8 StartInt_1) (str.substr Start_2 StartInt_5 StartInt_5) (str.replace Start_1 Start_1 Start_9) (ite StartBool_1 Start_3 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "1" "" "b") "0")))

(check-synth)
