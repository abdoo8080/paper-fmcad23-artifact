(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_2 Bool) (Start_9 String) (Start_8 String) (StartInt_1 Int) (StartInt_2 Int) (StartInt_5 Int) (Start_4 String) (Start_5 String) (StartInt_4 Int) (StartInt_3 Int) (Start_1 String) (Start_3 String) (Start_6 String) (Start_2 String) (Start_7 String) (StartBool_1 Bool))
  ((Start String (x (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_1)))
   (StartBool Bool (true false (str.< Start Start_9) (str.prefixof Start_5 Start_3) (<= StartInt_1 StartInt_4)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool_1) (str.prefixof Start_2 Start_8) (str.contains Start_1 Start_9) (= Start_5 Start_9)))
   (StartBool_2 Bool (false (not StartBool_3) (str.< Start_1 Start) (str.prefixof Start_1 Start_7) (= Start_4 Start_8) (= StartInt_1 StartInt_3)))
   (Start_9 String ("b" x y (str.at Start_5 StartInt_3) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_9)))
   (Start_8 String (y (str.++ Start_4 Start_2) (str.replace Start_4 Start Start_3) (str.from_int StartInt_5)))
   (StartInt_1 Int (0 1 (str.to_int Start)))
   (StartInt_2 Int (0 (str.len Start_3) (str.indexof Start_4 Start_1 StartInt_2) (str.to_int Start_3)))
   (StartInt_5 Int (1 0 (str.len Start_5) (str.indexof Start Start_7 StartInt)))
   (Start_4 String ("a" "" "1" (str.substr Start_4 StartInt_1 StartInt)))
   (Start_5 String ("" "b" (str.++ Start_4 Start_4) (str.at Start_3 StartInt_5) (str.substr Start_9 StartInt_4 StartInt_5) (str.replace Start_2 Start_7 Start_7) (ite StartBool_3 Start_2 Start_6)))
   (StartInt_4 Int (1))
   (StartInt_3 Int (1))
   (Start_1 String ("" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt_2) (ite StartBool Start_3 Start_1)))
   (Start_3 String ("0" "a"))
   (Start_6 String ("a" (str.++ Start_6 Start_4) (str.substr Start_6 StartInt_3 StartInt_4) (str.replace Start_7 Start_5 Start_6)))
   (Start_2 String ("0" (str.replace Start_2 Start_5 Start_1) (ite StartBool_1 Start_2 Start_6)))
   (Start_7 String ("" "1" "a" "0" "b" y x (str.at Start_3 StartInt_2) (str.replace Start Start_4 Start_2) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_6)))
   (StartBool_1 Bool (true (not StartBool_2) (str.<= Start_8 Start_3) (str.suffixof Start_2 Start_3) (str.contains Start_9 Start_9) (= Start_4 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.indexof y "" (str.to_int y)))))

(check-synth)
