(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_6 String) (Start_8 String) (Start_1 String) (Start_5 String) (Start_7 String) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_5 Int) (StartInt_1 Int) (Start_4 String) (Start_2 String) (StartInt_2 Int) (StartBool_3 Bool) (Start_3 String) (StartInt_6 Int) (StartInt_4 Int))
  ((Start String ("a" "" (str.from_int StartInt) (ite StartBool Start Start_1)))
   (StartInt Int (0 1 (str.len Start) (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool) (and StartBool_1 StartBool_2) (str.prefixof Start_2 Start_3) (str.suffixof Start Start_1) (= StartInt_1 StartInt_1)))
   (StartBool_2 Bool (false (not StartBool_3) (str.<= Start_6 Start_7) (= StartInt_4 StartInt_5) (<= StartInt_6 StartInt_2)))
   (Start_6 String (y "a" (str.++ Start Start_3) (str.at Start_4 StartInt_5) (str.substr Start StartInt StartInt_2) (str.replace Start_3 Start_6 Start_5)))
   (Start_8 String (x (str.++ Start_3 Start_7) (str.at Start_7 StartInt_5) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_8 Start_8 Start_6) (str.from_int StartInt_5)))
   (Start_1 String (x "0" "a" (str.at Start StartInt_1) (str.replace Start Start Start) (ite StartBool_1 Start_1 Start_1)))
   (Start_5 String ("a" "" (str.substr Start StartInt_1 StartInt_2) (str.from_int StartInt_3)))
   (Start_7 String ("b" "1" (str.++ Start_2 Start) (str.from_int StartInt)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool_1) (str.prefixof Start_1 Start_1) (str.contains Start_1 Start) (<= StartInt_1 StartInt)))
   (StartInt_3 Int (0 (str.indexof Start_6 Start_4 StartInt_4) (str.to_int Start)))
   (StartInt_5 Int (0 (str.len Start_2) (str.to_int Start_5)))
   (StartInt_1 Int (0 1))
   (Start_4 String (y (str.++ Start_1 Start_4) (str.from_int StartInt_1)))
   (Start_2 String ("1" "a" "b" (str.++ Start_5 Start_5) (str.at Start_4 StartInt_1) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.indexof Start_4 Start StartInt_1) (str.to_int Start_5)))
   (StartBool_3 Bool (true false (str.< Start_4 Start_2) (str.suffixof Start_4 Start_7) (str.contains Start_5 Start_7) (= StartInt_3 StartInt) (<= StartInt StartInt_5)))
   (Start_3 String (x "a" (str.++ Start_1 Start_2) (str.replace Start_2 Start_4 Start_2)))
   (StartInt_6 Int (1 0 (str.len Start_1) (str.indexof Start_8 Start_1 StartInt_1) (str.to_int Start_8)))
   (StartInt_4 Int (0 (str.len Start_6) (str.indexof Start_5 Start_4 StartInt_5) (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y (str.replace "b" "" x))))

(check-synth)
