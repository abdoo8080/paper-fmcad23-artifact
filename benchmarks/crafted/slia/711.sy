(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_9 String) (Start_10 String) (StartInt_4 Int) (Start_12 String) (Start_3 String) (Start_13 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_5 Int) (Start_2 String) (StartBool_1 Bool) (Start_11 String) (Start_8 String) (Start_5 String) (Start_6 String) (Start_7 String) (StartBool_2 Bool) (StartInt_2 Int) (StartBool_3 Bool) (Start_4 String) (Start_1 String))
  ((Start String ("a" (str.at Start StartInt_1) (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (true (not StartBool) (str.< Start_2 Start_11) (str.<= Start_3 Start_6) (str.prefixof Start_1 Start_5) (str.suffixof Start_5 Start_12) (str.contains Start_13 Start_3) (= Start_4 Start_5) (<= StartInt StartInt_3)))
   (Start_14 String ("a" "" "0" (str.replace Start_7 Start Start_4)))
   (Start_9 String ("a" (ite StartBool Start_6 Start_6)))
   (Start_10 String ("" "0" "b" (str.++ Start_8 Start_4) (ite StartBool Start Start_10)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.indexof Start_2 Start_9 StartInt_5) (str.to_int Start_10)))
   (Start_12 String ("a" x y (str.++ Start_12 Start_2) (ite StartBool_1 Start_10 Start_13)))
   (Start_3 String ("a" (str.at Start_5 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_6 Start_3 Start_5) (ite StartBool_3 Start_4 Start_6)))
   (Start_13 String ("a" (str.++ Start_11 Start) (str.substr Start_8 StartInt_3 StartInt_3) (str.replace Start_13 Start_5 Start_14)))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.to_int Start_2)))
   (StartInt_3 Int (1 (str.len Start_6) (str.indexof Start_8 Start_10 StartInt_2)))
   (StartInt_5 Int (0 1 (str.to_int Start_8)))
   (Start_2 String (y (str.++ Start Start_3) (ite StartBool_1 Start_1 Start)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool StartBool) (str.<= Start_4 Start_5) (= StartInt StartInt_2)))
   (Start_11 String (x "a" (str.++ Start_2 Start_2) (str.at Start_5 StartInt) (str.substr Start_4 StartInt_5 StartInt_1) (str.from_int StartInt_4)))
   (Start_8 String (y x "" (str.++ Start_2 Start_6) (str.substr Start_2 StartInt_1 StartInt_1)))
   (Start_5 String ("" x (str.++ Start_1 Start_6) (str.from_int StartInt) (ite StartBool_3 Start_2 Start_6)))
   (Start_6 String ("" (str.++ Start Start_6) (str.substr Start_6 StartInt_1 StartInt) (str.replace Start_5 Start_1 Start_3) (str.from_int StartInt_1)))
   (Start_7 String ("0" "b" (str.at Start_3 StartInt_4) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_5 Start_8 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_7)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.prefixof Start_4 Start_2) (= Start_3 Start_3)))
   (StartInt_2 Int (1 (str.len Start_5) (str.indexof Start_2 Start_1 StartInt)))
   (StartBool_3 Bool (false (not StartBool_1) (and StartBool_3 StartBool_2) (str.suffixof Start_1 Start_4) (= Start_2 Start_4)))
   (Start_4 String ("a"))
   (Start_1 String ("a" (str.at Start_3 StartInt_3) (str.replace Start_2 Start Start_6) (str.from_int StartInt_3) (ite StartBool_2 Start_7 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.from_int (str.to_int (str.at (str.replace "1" x "1") 1)))))))

(check-synth)
