(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_12 String) (Start_11 String) (Start_14 String) (StartInt_4 Int) (Start_13 String) (Start_6 String) (StartInt_6 Int) (StartBool_3 Bool) (StartInt_2 Int) (Start_4 String) (Start_10 String) (Start_2 String) (Start_5 String) (StartInt_1 Int) (StartInt_5 Int) (Start_7 String) (Start_3 String) (Start_1 String) (StartBool_1 Bool) (Start_9 String) (StartInt_3 Int) (Start_8 String))
  ((Start String ("" "0" x (str.++ Start_1 Start_1) (str.replace Start_2 Start_2 Start_2) (ite StartBool Start_1 Start)))
   (StartInt Int (0 1 (str.indexof Start_9 Start_8 StartInt_2) (str.to_int Start_5)))
   (StartBool Bool (true (not StartBool_2) (and StartBool StartBool_3) (str.< Start_6 Start_12) (str.<= Start_5 Start_14) (str.prefixof Start Start_8) (str.suffixof Start_14 Start_6) (str.contains Start_14 Start_13) (= Start_7 Start_2)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_1) (str.prefixof Start_4 Start_6) (str.suffixof Start_4 Start_9) (str.contains Start_6 Start_13) (<= StartInt_2 StartInt_2)))
   (Start_12 String ("0" (str.++ Start_2 Start_9) (str.substr Start_1 StartInt_1 StartInt_3) (str.from_int StartInt_5)))
   (Start_11 String (y (str.at Start_11 StartInt_1) (str.from_int StartInt_3) (ite StartBool_2 Start_12 Start_9)))
   (Start_14 String (y (str.++ Start_2 Start_5) (str.substr Start_12 StartInt StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.to_int Start)))
   (Start_13 String ("1" (str.at Start_2 StartInt_6) (str.substr Start_3 StartInt_4 StartInt_3) (str.replace Start_14 Start_7 Start_13) (str.from_int StartInt_3) (ite StartBool_3 Start_11 Start_8)))
   (Start_6 String ("a" "0" (str.replace Start_3 Start Start_4) (str.from_int StartInt_2)))
   (StartInt_6 Int (1 0 (str.indexof Start_3 Start_10 StartInt_6) (str.to_int Start_1)))
   (StartBool_3 Bool (false (not StartBool_1) (str.<= Start_3 Start_3) (str.prefixof Start_2 Start_9) (= Start_5 Start_1)))
   (StartInt_2 Int (1 (str.len Start) (str.indexof Start_4 Start_1 StartInt_1)))
   (Start_4 String ("b" (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_4 Start_5 Start_5) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_7)))
   (Start_10 String ("1" (str.at Start_11 StartInt) (str.from_int StartInt_1)))
   (Start_2 String (y (str.at Start_3 StartInt) (str.replace Start_4 Start_1 Start_5)))
   (Start_5 String (x "" (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_1 Start Start_2)))
   (StartInt_1 Int (0 (str.to_int Start_6)))
   (StartInt_5 Int (0 (str.to_int Start_7)))
   (Start_7 String (y "0" "a" x (str.++ Start_2 Start_3) (str.from_int StartInt_2) (ite StartBool Start_7 Start_2)))
   (Start_3 String (x "a" y "" (ite StartBool_1 Start_3 Start_2)))
   (Start_1 String ("b" (str.++ Start_1 Start_3) (str.at Start_8 StartInt) (str.substr Start_8 StartInt_1 StartInt) (str.from_int StartInt)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.< Start_7 Start_3) (str.prefixof Start_4 Start) (= Start Start_7) (<= StartInt_3 StartInt)))
   (Start_9 String (x "0" "b" "1" (str.at Start_1 StartInt) (str.replace Start_10 Start_7 Start)))
   (StartInt_3 Int (0 (str.to_int Start_1)))
   (Start_8 String ("b" "1" "" x "a" (str.at Start StartInt_4) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "0" x "") (str.at y 1) x)))

(check-synth)
