(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (StartInt_5 Int) (StartInt_1 Int) (Start_2 String) (Start_5 String) (Start_3 String) (Start_6 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_1 String) (StartInt_4 Int) (StartInt_3 Int) (Start_7 String))
  ((Start String ("0" "" y (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.to_int Start_7)))
   (StartBool Bool (true (str.<= Start_6 Start) (= StartInt_3 StartInt_5) (<= StartInt_3 StartInt)))
   (Start_4 String (y "" "1" (str.replace Start_1 Start_4 Start_6) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_5 Int (1 0))
   (StartInt_1 Int (1 (str.len Start_2) (str.indexof Start_2 Start_2 StartInt_1)))
   (Start_2 String ("b" "" "1" (str.++ Start_2 Start) (str.replace Start_3 Start_1 Start) (str.from_int StartInt)))
   (Start_5 String ("0" y (str.++ Start_3 Start) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_2)))
   (Start_3 String ("0" (ite StartBool_1 Start Start_3)))
   (Start_6 String (y "0" "b" (str.++ Start_7 Start_7) (str.at Start_4 StartInt_3) (str.substr Start_2 StartInt_2 StartInt_4) (ite StartBool_1 Start_5 Start_2)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool) (str.< Start Start_3) (str.suffixof Start_3 Start_1) (= StartInt StartInt) (<= StartInt_2 StartInt)))
   (StartInt_2 Int (1 (str.len Start) (str.indexof Start_1 Start_3 StartInt)))
   (Start_1 String (x (str.++ Start_4 Start_2) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_1 Start_1 Start_5) (ite StartBool_1 Start_5 Start_1)))
   (StartInt_4 Int (0))
   (StartInt_3 Int (1 (str.to_int Start_7)))
   (Start_7 String ("a" (str.++ Start_2 Start_3) (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool_1 Start_4 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (ite (str.contains y "b") "" "a"))))

(check-synth)
