(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_5 Int) (Start_12 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_13 String) (Start_9 String) (StartInt_4 Int) (Start_11 String) (Start_14 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_4 String) (StartInt_1 Int) (Start_15 String) (Start_5 String) (Start_6 String) (Start_2 String) (Start_7 String) (Start_3 String) (StartBool_2 Bool) (Start_8 String) (Start_1 String) (Start_10 String) (StartInt_3 Int))
  ((Start String ("" "b" (str.substr Start StartInt StartInt_1) (str.replace Start Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool Start_3 Start_2)))
   (StartInt Int (0 1 (str.indexof Start_13 Start_5 StartInt_2)))
   (StartBool Bool (true (not StartBool_2) (and StartBool StartBool_1) (str.<= Start_5 Start_12) (str.prefixof Start_7 Start_8) (str.contains Start_1 Start_14) (= StartInt_3 StartInt_6)))
   (StartInt_6 Int (0 1))
   (StartInt_5 Int (1 0 (str.to_int Start_15)))
   (Start_12 String ("" x (str.substr Start_8 StartInt_2 StartInt_4) (str.replace Start_12 Start Start_9) (ite StartBool_3 Start_10 Start_14)))
   (StartBool_3 Bool (true false (str.< Start_7 Start_11) (str.<= Start_7 Start_6) (str.suffixof Start_5 Start_1) (= StartInt StartInt_4) (<= StartInt StartInt)))
   (StartBool_4 Bool (true (and StartBool StartBool_4) (str.< Start_8 Start_5) (str.suffixof Start_2 Start_8) (str.contains Start Start_13) (= Start_3 Start_7) (= StartInt_5 StartInt_3)))
   (Start_13 String ("0" (str.++ Start_10 Start_7) (str.substr Start_9 StartInt_3 StartInt_3) (str.replace Start_12 Start_4 Start_4) (str.from_int StartInt_1) (ite StartBool_3 Start_11 Start_7)))
   (Start_9 String (x "" (str.++ Start_4 Start_10) (str.substr Start_9 StartInt StartInt_6) (str.replace Start_2 Start_10 Start_8) (ite StartBool_3 Start_8 Start_13)))
   (StartInt_4 Int (1 (str.len Start)))
   (Start_11 String (y "" (str.++ Start_12 Start_8) (str.at Start_13 StartInt) (str.substr Start_4 StartInt_3 StartInt_4)))
   (Start_14 String ("0" x "a" (str.from_int StartInt_1) (ite StartBool_4 Start Start_11)))
   (StartBool_1 Bool (false (not StartBool_1) (str.suffixof Start_4 Start_2) (str.contains Start_1 Start_1)))
   (StartInt_2 Int (1))
   (Start_4 String ("" "b" "0" (str.++ Start_5 Start_3) (str.at Start_5 StartInt) (str.replace Start Start_1 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_8) (str.indexof Start_15 Start_8 StartInt_1) (str.to_int Start_6)))
   (Start_15 String (x y (str.++ Start_15 Start_11) (str.substr Start_2 StartInt StartInt_1)))
   (Start_5 String ("0" (ite StartBool_2 Start_6 Start_5)))
   (Start_6 String ("b" "1" (str.++ Start_6 Start_3) (str.substr Start_5 StartInt_2 StartInt_2)))
   (Start_2 String ("" (str.at Start StartInt_2) (str.substr Start_7 StartInt_2 StartInt_1) (str.from_int StartInt)))
   (Start_7 String ("b" (str.at Start_8 StartInt_1) (str.substr Start_6 StartInt StartInt_2) (str.replace Start_7 Start_5 Start) (str.from_int StartInt)))
   (Start_3 String ("a" "b" "0" "1" "" (str.from_int StartInt) (ite StartBool_1 Start Start_1)))
   (StartBool_2 Bool (false true (not StartBool_2) (str.< Start_6 Start_6) (str.prefixof Start_3 Start_1)))
   (Start_8 String (x (str.++ Start_1 Start_7) (str.substr Start StartInt_1 StartInt) (str.replace Start_2 Start_8 Start_5) (str.from_int StartInt_2)))
   (Start_1 String ("0" (str.at Start_4 StartInt_2) (str.substr Start_5 StartInt_3 StartInt) (str.replace Start_1 Start_2 Start) (ite StartBool Start_7 Start_1)))
   (Start_10 String ("" y (str.++ Start_3 Start_11) (str.at Start_7 StartInt_1) (str.substr Start_7 StartInt_3 StartInt_3) (str.replace Start_1 Start_2 Start_11)))
   (StartInt_3 Int (0 (str.indexof Start_9 Start_10 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "" x) "0" y)))

(check-synth)
