(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartBool_4 Bool) (StartInt_6 Int) (Start_10 String) (Start_3 String) (StartInt_1 Int) (Start_11 String) (Start_7 String) (Start_2 String) (StartInt_3 Int) (StartInt_4 Int) (StartBool_3 Bool) (Start_1 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_9 String) (Start_5 String) (Start_6 String) (Start_4 String) (Start_8 String) (StartBool_1 Bool) (StartInt_5 Int))
  ((Start String ("b" x (str.++ Start Start) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start) (str.indexof Start Start_1 StartInt) (str.to_int Start_2)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_4 StartBool_1) (str.< Start_4 Start_5) (str.suffixof Start_4 Start_5) (str.contains Start_6 Start) (= Start_3 Start_1) (<= StartInt_5 StartInt_1)))
   (StartInt_7 Int (1 0 (str.indexof Start_11 Start_5 StartInt_5)))
   (StartBool_4 Bool (false true (str.<= Start_11 Start) (str.suffixof Start_11 Start_5) (str.contains Start_9 Start_3) (= StartInt_5 StartInt) (<= StartInt_7 StartInt)))
   (StartInt_6 Int (0 (str.len Start_2) (str.to_int Start_8)))
   (Start_10 String (x (str.++ Start_2 Start_10)))
   (Start_3 String ("0" "a" "" "1" x (str.++ Start_4 Start_4) (str.replace Start_9 Start_10 Start) (ite StartBool_2 Start_5 Start_3)))
   (StartInt_1 Int (1 (str.to_int Start_2)))
   (Start_11 String ("" (str.at Start_6 StartInt)))
   (Start_7 String ("1" y "" (str.++ Start_5 Start_4) (str.substr Start_3 StartInt StartInt_2) (ite StartBool Start_3 Start_2)))
   (Start_2 String ("b" (str.++ Start_2 Start) (str.at Start_3 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_1) (ite StartBool Start_2 Start)))
   (StartInt_3 Int (1 (str.indexof Start_3 Start StartInt_4) (str.to_int Start_6)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.indexof Start_5 Start_7 StartInt_1) (str.to_int Start_7)))
   (StartBool_3 Bool (true (and StartBool StartBool_2) (str.< Start_7 Start_4) (str.prefixof Start_4 Start_4) (str.suffixof Start_6 Start_11) (= StartInt_6 StartInt)))
   (Start_1 String ("1" "0" (ite StartBool_1 Start_5 Start)))
   (StartBool_2 Bool (true (str.< Start_9 Start_4) (str.<= Start_9 Start_2)))
   (StartInt_2 Int (1 0 (str.indexof Start_5 Start_5 StartInt_1)))
   (Start_9 String ("" "b" "0" "a" x y (str.at Start_9 StartInt_3) (str.from_int StartInt_6) (ite StartBool Start_10 Start_8)))
   (Start_5 String (y "a" "1" "b" x (str.++ Start_1 Start_5) (str.at Start_5 StartInt_2) (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_4 Start_3 Start_3) (ite StartBool Start_6 Start_1)))
   (Start_6 String ("b" x (str.++ Start_6 Start_2) (str.from_int StartInt_1)))
   (Start_4 String (y (str.at Start_2 StartInt_1) (str.replace Start_2 Start_7 Start_8) (str.from_int StartInt_1)))
   (Start_8 String ("0" (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start)))
   (StartBool_1 Bool (false (= StartInt StartInt_4) (<= StartInt_5 StartInt_1)))
   (StartInt_5 Int (1 (str.indexof Start Start_8 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "1" y)))

(check-synth)
