(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_18 String) (Start_4 String) (StartBool_1 Bool) (Start_6 String) (StartBool_4 Bool) (Start_11 String) (StartInt_2 Int) (StartInt_4 Int) (Start_2 String) (StartInt_3 Int) (Start_5 String) (Start_7 String) (StartBool_2 Bool) (Start_16 String) (Start_1 String) (StartInt_11 Int) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_10 Int) (Start_10 String) (Start_9 String) (StartInt_7 Int) (StartInt_5 Int) (Start_12 String) (Start_3 String) (Start_8 String) (Start_14 String) (StartInt_6 Int) (StartInt_8 Int) (StartInt_9 Int) (Start_13 String) (Start_15 String))
  ((Start String ("b" (str.++ Start_1 Start_1) (str.replace Start_1 Start_1 Start) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.indexof Start_2 Start_7 StartInt_2)))
   (StartBool Bool (false true (not StartBool) (and StartBool_1 StartBool_3) (str.< Start_8 Start) (str.suffixof Start_14 Start_17) (= Start_9 Start_18) (= StartInt StartInt_11) (<= StartInt_6 StartInt_10)))
   (Start_17 String (x "0" (str.++ Start_5 Start_15) (str.from_int StartInt_6)))
   (Start_18 String (y (str.at Start_2 StartInt_8) (str.substr Start_15 StartInt_11 StartInt_7)))
   (Start_4 String ("b" (str.++ Start_6 Start) (str.at Start_10 StartInt_1) (str.replace Start_9 Start_1 Start_7) (str.from_int StartInt_7)))
   (StartBool_1 Bool (true (str.< Start_1 Start_1) (str.<= Start_3 Start_3) (str.suffixof Start_4 Start_5)))
   (Start_6 String (x "1" "b" (str.++ Start_3 Start_1) (str.at Start StartInt_4) (str.replace Start_5 Start Start_7) (ite StartBool_2 Start_4 Start_4)))
   (StartBool_4 Bool (false (str.< Start_11 Start_14) (str.<= Start_10 Start_8) (str.prefixof Start_14 Start_4) (<= StartInt_9 StartInt_10)))
   (Start_11 String (x "" (str.++ Start_13 Start_2) (str.at Start_10 StartInt_4) (ite StartBool_3 Start_3 Start_1)))
   (StartInt_2 Int (1 0 (str.to_int Start_2)))
   (StartInt_4 Int (1 0 (str.len Start) (str.indexof Start_3 Start_2 StartInt) (str.to_int Start_1)))
   (Start_2 String ("" "0" y "a" (str.++ Start_1 Start_1) (str.at Start_3 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_3) (str.from_int StartInt_4)))
   (StartInt_3 Int (1))
   (Start_5 String ("b" (str.++ Start_4 Start_1) (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_5) (str.from_int StartInt_6) (ite StartBool Start_3 Start_6)))
   (Start_7 String (x "a" "" "0" "1" (str.++ Start_4 Start_14) (str.at Start_3 StartInt_11) (str.replace Start Start_12 Start_1) (ite StartBool_1 Start_11 Start_12)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool) (str.suffixof Start_7 Start_6) (<= StartInt_2 StartInt)))
   (Start_16 String ("1" "a" (str.++ Start_8 Start_2) (str.substr Start_16 StartInt_6 StartInt) (str.replace Start Start_16 Start_13) (ite StartBool Start_9 Start_16)))
   (Start_1 String ("a" (str.++ Start Start_1) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt)))
   (StartInt_11 Int (1 0 (str.to_int Start_6)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_4) (str.< Start_7 Start) (str.<= Start_8 Start_4) (str.prefixof Start_3 Start_9) (str.contains Start_1 Start_10) (= StartInt_3 StartInt_5) (<= StartInt_5 StartInt_4)))
   (StartInt_1 Int (1 0 (str.to_int Start_1)))
   (StartInt_10 Int (0 (str.indexof Start_13 Start_14 StartInt_2)))
   (Start_10 String ("0" (str.++ Start_5 Start_7) (str.replace Start_1 Start_5 Start_7)))
   (Start_9 String ("a" (str.++ Start_8 Start_1) (str.at Start_1 StartInt) (str.substr Start_4 StartInt_3 StartInt) (str.replace Start_5 Start_9 Start_3)))
   (StartInt_7 Int (1))
   (StartInt_5 Int (0))
   (Start_12 String ("b" "1" (str.at Start StartInt_7) (ite StartBool_3 Start_5 Start_1)))
   (Start_3 String ("b" y (str.++ Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start_3)))
   (Start_8 String ("" (str.++ Start_10 Start_9) (str.at Start_11 StartInt_5) (str.substr Start_12 StartInt_7 StartInt_7) (str.from_int StartInt_6)))
   (Start_14 String ("1" (str.at Start_2 StartInt_3) (str.replace Start_5 Start_2 Start_15) (str.from_int StartInt_10)))
   (StartInt_6 Int (1 0 (str.len Start_2)))
   (StartInt_8 Int (0 (str.len Start)))
   (StartInt_9 Int (1 (str.len Start_4) (str.indexof Start_3 Start_4 StartInt_2) (str.to_int Start_12)))
   (Start_13 String ("" y x (str.++ Start_4 Start_3) (str.at Start_8 StartInt_1) (str.substr Start_8 StartInt_8 StartInt_6) (str.replace Start_9 Start_10 Start_7) (str.from_int StartInt)))
   (Start_15 String ("1" (str.replace Start_10 Start_16 Start_11) (str.from_int StartInt_5) (ite StartBool_2 Start_13 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ x (str.at x 0))))

(check-synth)
