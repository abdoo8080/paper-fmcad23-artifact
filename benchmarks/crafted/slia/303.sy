(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_5 Int) (Start_10 String) (StartBool_1 Bool) (Start_4 String) (Start_6 String) (Start_2 String) (StartInt_6 Int) (Start_8 String) (StartBool_2 Bool) (Start_3 String) (StartInt_3 Int) (Start_5 String) (StartInt_4 Int) (StartInt_1 Int) (Start_9 String) (StartInt_2 Int) (Start_7 String))
  ((Start String ("0" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.replace Start_2 Start Start_2) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.indexof Start_6 Start_6 StartInt_5) (str.to_int Start_9)))
   (StartBool Bool (true (and StartBool_2 StartBool_2) (str.contains Start_4 Start_1) (= Start_8 Start_2) (= StartInt_2 StartInt_3)))
   (Start_1 String ("b" (str.++ Start_1 Start_10) (ite StartBool_1 Start_2 Start_8)))
   (StartInt_5 Int (1 0 (str.len Start_7) (str.indexof Start_8 Start_2 StartInt_3)))
   (Start_10 String ("b" y "0" (str.at Start_1 StartInt_1) (str.substr Start_10 StartInt_4 StartInt_5) (str.replace Start_7 Start_5 Start_6) (ite StartBool_2 Start_9 Start)))
   (StartBool_1 Bool (true (str.<= Start_3 Start_7) (str.prefixof Start_10 Start_7) (= StartInt_3 StartInt_2)))
   (Start_4 String (x (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (Start_6 String (x (str.++ Start_5 Start_2) (str.substr Start_7 StartInt_4 StartInt_4) (str.from_int StartInt_4)))
   (Start_2 String ("1" (str.at Start StartInt_1) (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_2)))
   (StartInt_6 Int (0 (str.len Start)))
   (Start_8 String ("" (str.++ Start_6 Start_6) (str.substr Start_8 StartInt_1 StartInt) (str.replace Start_3 Start_8 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.< Start_1 Start_7) (str.prefixof Start_9 Start_10) (str.suffixof Start_3 Start_7) (= Start_3 Start_6) (<= StartInt_1 StartInt_6)))
   (Start_3 String ("1" (str.at Start_3 StartInt) (str.substr Start_4 StartInt_2 StartInt_3) (str.from_int StartInt_4) (ite StartBool Start_1 Start_5)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.to_int Start)))
   (Start_5 String ("a" y (str.at Start_5 StartInt)))
   (StartInt_4 Int (1 (str.len Start)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start_1 Start_6 StartInt) (str.to_int Start_6)))
   (Start_9 String ("0" "1" (str.++ Start_2 Start) (str.at Start_8 StartInt_3) (str.substr Start_6 StartInt StartInt_1) (str.from_int StartInt_4) (ite StartBool Start_1 Start_8)))
   (StartInt_2 Int (0 1 (str.len Start_2)))
   (Start_7 String (y (str.at Start_5 StartInt_1) (str.replace Start_6 Start_6 Start) (ite StartBool_1 Start_2 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof y (str.at (str.replace "a" x "0") 1) 1))))

(check-synth)
