(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_5 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_10 String) (Start_12 String) (Start_7 String) (StartInt_9 Int) (StartInt_4 Int) (Start_4 String) (Start_14 String) (StartInt_2 Int) (Start_11 String) (StartInt_8 Int) (Start_3 String) (StartBool_3 Bool) (StartInt_5 Int) (Start_9 String) (Start_8 String) (Start_2 String) (Start_6 String) (StartInt_7 Int) (Start_13 String) (StartInt_6 Int) (Start_1 String) (StartBool_4 Bool))
  ((Start String (x "" "1" "a" (str.++ Start_1 Start_2) (str.replace Start_2 Start Start_3) (ite StartBool_1 Start_1 Start_4)))
   (StartInt Int (1 0 (str.len Start_4) (str.indexof Start_6 Start_6 StartInt_3) (str.to_int Start_8)))
   (StartBool Bool (true false (and StartBool_3 StartBool_1) (str.< Start_2 Start_1) (str.<= Start_2 Start_3) (str.prefixof Start_2 Start_10) (str.suffixof Start_4 Start_5) (str.contains Start_14 Start_15)))
   (Start_15 String ("" (str.substr Start_12 StartInt_9 StartInt_6) (ite StartBool Start_1 Start_15)))
   (StartBool_1 Bool (false (not StartBool_2) (str.prefixof Start Start_4) (str.suffixof Start_9 Start_9) (str.contains Start_3 Start_4) (= Start_10 Start_2) (= StartInt_3 StartInt)))
   (StartInt_1 Int (1 0 (str.len Start_7) (str.indexof Start_9 Start_2 StartInt_3)))
   (Start_5 String ("" y "0"))
   (StartBool_2 Bool (true (not StartBool_2) (str.<= Start_4 Start_1) (str.contains Start_2 Start_11) (<= StartInt_3 StartInt_3)))
   (StartInt_3 Int (0 1 (str.len Start_8) (str.to_int Start_9)))
   (Start_10 String ("1" y (str.++ Start Start_1) (str.replace Start_5 Start_10 Start_7) (str.from_int StartInt_4)))
   (Start_12 String ("" (str.at Start_11 StartInt_2) (str.replace Start_12 Start_6 Start_3) (str.from_int StartInt_3)))
   (Start_7 String ("a" "b" (str.at Start_8 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_9 Int (0 1 (str.len Start_12) (str.to_int Start_10)))
   (StartInt_4 Int (1 0 (str.len Start_10) (str.indexof Start_6 Start_3 StartInt)))
   (Start_4 String ("a" "" (str.at Start_2 StartInt_1) (str.substr Start_5 StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start_7)))
   (Start_14 String ("a" "b" (str.++ Start_10 Start_2) (str.substr Start_9 StartInt_8 StartInt_1) (str.replace Start_11 Start_1 Start_8)))
   (StartInt_2 Int (1))
   (Start_11 String ("b" "" (str.++ Start_5 Start_10) (str.substr Start_11 StartInt_2 StartInt_2) (str.replace Start_2 Start_4 Start_11) (ite StartBool Start_3 Start_2)))
   (StartInt_8 Int (0 1 (str.len Start_5)))
   (Start_3 String ("0" y "a" "" (str.substr Start_8 StartInt_5 StartInt_3) (ite StartBool_3 Start_8 Start_12)))
   (StartBool_3 Bool (false true (str.< Start_2 Start_10) (str.<= Start_5 Start_9) (str.contains Start_12 Start_2) (= Start_6 Start_8)))
   (StartInt_5 Int (0 1 (str.indexof Start_3 Start_1 StartInt_3)))
   (Start_9 String ("" "0" "a" (str.++ Start Start_8) (str.replace Start_4 Start_8 Start_5) (str.from_int StartInt_3)))
   (Start_8 String ("" "a" "0" (str.++ Start_4 Start) (str.at Start_4 StartInt_1) (str.replace Start_5 Start_4 Start) (ite StartBool Start_3 Start_4)))
   (Start_2 String ("" "b" (str.++ Start_2 Start_3) (str.at Start_10 StartInt_5) (str.substr Start_7 StartInt_6 StartInt_2) (str.replace Start_4 Start_9 Start_13)))
   (Start_6 String ("b" "" x (str.substr Start_1 StartInt_1 StartInt_3) (ite StartBool Start_8 Start_3)))
   (StartInt_7 Int (1 0 (str.to_int Start_12)))
   (Start_13 String (x y "1" "a" "0" (str.from_int StartInt_2)))
   (StartInt_6 Int (0 1 (str.len Start_3) (str.to_int Start_10)))
   (Start_1 String ("1" "" (str.at Start StartInt_5) (str.substr Start_7 StartInt StartInt) (str.replace Start_9 Start Start_7) (ite StartBool_4 Start_8 Start_12)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool StartBool_4) (str.< Start_14 Start_11) (str.prefixof Start_6 Start_6) (str.suffixof Start_3 Start_14) (str.contains Start_1 Start_5) (= Start_10 Start_2) (= StartInt_2 StartInt_2) (<= StartInt_2 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof y "a" 0))))

(check-synth)
