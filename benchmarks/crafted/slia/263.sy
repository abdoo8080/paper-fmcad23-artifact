(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartInt_7 Int) (Start_11 String) (Start_14 String) (Start_4 String) (Start_3 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_10 String) (StartInt_1 Int) (StartInt_2 Int) (StartInt_8 Int) (Start_1 String) (Start_7 String) (Start_13 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_5 String) (StartInt_5 Int) (Start_6 String) (Start_12 String) (Start_9 String) (StartInt_3 Int) (Start_8 String))
  ((Start String (x (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 (str.len Start_12) (str.to_int Start_3)))
   (StartBool Bool (false (not StartBool_1) (str.<= Start_3 Start_1) (= Start_9 Start_8) (= StartInt_5 StartInt)))
   (Start_2 String ("1" "a" (str.++ Start_12 Start_8) (str.at Start_4 StartInt_6) (str.substr Start_6 StartInt_4 StartInt_7)))
   (StartInt_7 Int (1 (str.len Start_7) (str.to_int Start_12)))
   (Start_11 String ("b" y "" "1" (str.++ Start_11 Start_8) (str.at Start_6 StartInt_6) (str.substr Start_5 StartInt_3 StartInt_7) (str.replace Start_10 Start Start_10) (str.from_int StartInt_6)))
   (Start_14 String ("" (str.++ Start_5 Start_4) (str.at Start StartInt_4) (str.substr Start_11 StartInt_7 StartInt_2) (ite StartBool_1 Start Start_12)))
   (Start_4 String ("a" "" (str.++ Start_5 Start_4)))
   (Start_3 String (y (str.substr Start_7 StartInt_1 StartInt_6) (str.from_int StartInt) (ite StartBool_2 Start_8 Start_10)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_2) (str.suffixof Start_4 Start) (= Start_6 Start_1) (= StartInt StartInt_4)))
   (StartInt_6 Int (0 1 (str.len Start_11) (str.to_int Start_9)))
   (Start_10 String ("a" (str.++ Start_9 Start_10) (str.at Start StartInt_1) (str.from_int StartInt_4) (ite StartBool_2 Start_6 Start_9)))
   (StartInt_1 Int (0 1))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_7 Start_1 StartInt_3)))
   (StartInt_8 Int (1 0 (str.len Start_10) (str.indexof Start_6 Start_7 StartInt)))
   (Start_1 String (y x "0" (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1)))
   (Start_7 String ("" (str.++ Start_9 Start_6) (str.at Start StartInt_1) (str.substr Start_8 StartInt_2 StartInt_4) (str.from_int StartInt_3)))
   (Start_13 String ("" (str.substr Start_13 StartInt StartInt)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.< Start_1 Start_2) (str.prefixof Start_1 Start_1) (str.suffixof Start_3 Start_4) (str.contains Start_5 Start_4)))
   (StartInt_4 Int (0 (str.len Start_3) (str.indexof Start_5 Start_3 StartInt)))
   (Start_5 String ("" (str.++ Start Start_4) (str.at Start_2 StartInt) (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start_6 Start_6 Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_5 Int (1 (str.to_int Start_10)))
   (Start_6 String ("a" (str.substr Start_5 StartInt_1 StartInt_1) (str.replace Start_2 Start_5 Start_6)))
   (Start_12 String (x "1" "0" (str.at Start_13 StartInt_8) (str.replace Start_10 Start_14 Start_11) (ite StartBool_2 Start_13 Start_7)))
   (Start_9 String ("0" "b" (str.++ Start_3 Start_9) (str.substr Start StartInt_5 StartInt_2) (str.replace Start_9 Start_4 Start_9) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_6 Start_8 StartInt_4)))
   (Start_8 String (y "0" x (str.++ Start_8 Start_3) (str.replace Start_3 Start_4 Start_2) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ x x) (str.++ (str.at x 1) x) x)))

(check-synth)
