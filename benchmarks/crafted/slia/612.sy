(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (Start_2 String) (StartInt_3 Int) (StartInt_2 Int) (StartInt_1 Int) (Start_1 String) (Start_3 String) (Start_5 String) (Start_7 String) (Start_6 String) (Start_4 String))
  ((Start String (x "0" (str.at Start StartInt) (ite StartBool Start Start)))
   (StartInt Int (1))
   (StartBool Bool (true (not StartBool) (and StartBool_1 StartBool_1) (str.<= Start_1 Start_2) (str.contains Start_1 Start_1) (= Start_1 Start)))
   (StartBool_1 Bool (false (str.< Start_3 Start_1) (str.<= Start_6 Start_4) (str.suffixof Start_3 Start_5) (str.contains Start_2 Start_2) (= StartInt StartInt)))
   (Start_2 String ("0" "b" (str.++ Start_2 Start_1) (str.substr Start StartInt_1 StartInt_1) (ite StartBool_1 Start Start_1)))
   (StartInt_3 Int (1 (str.len Start_3) (str.to_int Start_4)))
   (StartInt_2 Int (1))
   (StartInt_1 Int (1 (str.len Start_1)))
   (Start_1 String ("" (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_4)))
   (Start_3 String (x "a" (str.at Start_3 StartInt) (str.replace Start_2 Start_2 Start_5) (ite StartBool_1 Start_3 Start_3)))
   (Start_5 String (y "" x "a" (str.++ Start_2 Start_4) (str.at Start StartInt_1) (str.substr Start_6 StartInt StartInt_2) (str.replace Start Start Start_5) (str.from_int StartInt_3)))
   (Start_7 String ("b" (str.++ Start_1 Start_5) (str.substr Start_2 StartInt StartInt_2) (str.from_int StartInt_3)))
   (Start_6 String ("1" "" (str.++ Start_5 Start_7) (ite StartBool Start_2 Start_3)))
   (Start_4 String ("" (str.++ Start_2 Start_3) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof y x) x "")))

(check-synth)
