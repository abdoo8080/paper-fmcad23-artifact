(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (Start_6 String) (StartInt_6 Int) (StartInt_1 Int) (Start_5 String) (Start_12 String) (Start_4 String) (Start_9 String) (Start_10 String) (StartInt_5 Int) (Start_8 String) (StartInt_4 Int) (StartInt_3 Int) (StartInt_9 Int) (StartInt_2 Int) (StartBool_1 Bool) (Start_1 String) (Start_11 String) (StartBool_4 Bool) (Start_13 String) (Start_7 String) (StartBool_6 Bool) (StartBool_2 Bool) (StartBool_5 Bool) (StartInt_7 Int) (StartBool_3 Bool) (Start_2 String) (StartInt_8 Int))
  ((Start String ("a" "" (str.replace Start Start Start_1) (ite StartBool Start_1 Start)))
   (StartInt Int (0 (str.to_int Start_7)))
   (StartBool Bool (false (not StartBool_5) (str.< Start Start_1) (str.prefixof Start_7 Start_4) (str.suffixof Start Start_12) (= Start_6 Start_1) (<= StartInt StartInt_8)))
   (Start_3 String ("b" "1" y (str.++ Start_6 Start_3) (str.at Start_5 StartInt_4) (str.substr Start_7 StartInt StartInt) (str.replace Start_7 Start_6 Start) (ite StartBool_3 Start_5 Start_7)))
   (Start_6 String ("a" (str.at Start_1 StartInt_3) (str.substr Start_5 StartInt_4 StartInt) (str.from_int StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.indexof Start_9 Start_6 StartInt_1) (str.to_int Start_2)))
   (StartInt_1 Int (0 1))
   (Start_5 String (y (str.substr Start_4 StartInt_3 StartInt_1) (str.replace Start_1 Start Start) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_5)))
   (Start_12 String ("" "a"))
   (Start_4 String ("0" "b" (str.substr Start_2 StartInt StartInt_2) (str.replace Start_3 Start_5 Start_3) (str.from_int StartInt_3)))
   (Start_9 String ("0" (str.++ Start_10 Start_11) (str.at Start_11 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool_3 Start_7 Start_5)))
   (Start_10 String ("a" y "0" (str.at Start_1 StartInt_5) (str.substr Start StartInt_3 StartInt_5) (str.replace Start_12 Start_11 Start_2)))
   (StartInt_5 Int (1 0))
   (Start_8 String ("" (str.at Start_6 StartInt_3) (str.substr Start_9 StartInt_2 StartInt_3) (str.replace Start_6 Start_4 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_3)))
   (StartInt_4 Int (0 1))
   (StartInt_3 Int (1 (str.indexof Start_4 Start_3 StartInt_4)))
   (StartInt_9 Int (1 0))
   (StartInt_2 Int (0 (str.indexof Start_1 Start StartInt_3) (str.to_int Start)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.< Start_3 Start) (str.<= Start_1 Start_4) (str.prefixof Start Start) (= StartInt StartInt_2)))
   (Start_1 String ("0" (str.substr Start_2 StartInt StartInt_1) (ite StartBool_1 Start Start_2)))
   (Start_11 String (y (str.substr Start_12 StartInt_4 StartInt_3) (str.replace Start_6 Start_3 Start_11) (ite StartBool_4 Start_4 Start)))
   (StartBool_4 Bool (false true (and StartBool_4 StartBool) (str.<= Start_6 Start_13) (str.prefixof Start_5 Start_2) (str.suffixof Start_9 Start) (str.contains Start_13 Start_11) (<= StartInt_4 StartInt)))
   (Start_13 String ("0" (str.++ Start_12 Start_5) (str.substr Start_12 StartInt_1 StartInt_1)))
   (Start_7 String ("1" (str.++ Start Start_12) (str.at Start_1 StartInt_4) (str.substr Start_9 StartInt_5 StartInt_1)))
   (StartBool_6 Bool (false (not StartBool_1) (str.< Start_11 Start_4) (str.prefixof Start_11 Start_12) (str.suffixof Start_4 Start_2) (= StartInt_5 StartInt_2) (<= StartInt_1 StartInt_2)))
   (StartBool_2 Bool (false (not StartBool_5) (and StartBool_1 StartBool_6) (str.suffixof Start_6 Start_5) (str.contains Start_10 Start_10) (= StartInt_3 StartInt_6)))
   (StartBool_5 Bool (true (not StartBool_3) (= Start_10 Start_11) (= StartInt_4 StartInt_7) (<= StartInt_4 StartInt_2)))
   (StartInt_7 Int (1 (str.len Start_10) (str.indexof Start_11 Start_3 StartInt_1) (str.to_int Start_10)))
   (StartBool_3 Bool (false true (str.< Start_6 Start_7) (str.prefixof Start_5 Start_4) (str.suffixof Start_7 Start_8) (str.contains Start_3 Start_1) (= Start_8 Start)))
   (Start_2 String ("" "b" (str.++ Start_12 Start_2) (str.at Start_9 StartInt_8) (str.substr Start_12 StartInt_7 StartInt_5) (str.from_int StartInt_9)))
   (StartInt_8 Int (1 0 (str.len Start_1) (str.indexof Start_12 Start_10 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "b" (str.++ (str.replace "1" "" "b") "b"))))

(check-synth)
