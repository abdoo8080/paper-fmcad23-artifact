(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_10 String) (Start_9 String) (Start_8 String) (StartInt_6 Int) (Start_7 String) (Start_3 String) (Start_4 String) (StartInt_4 Int) (Start_2 String) (StartInt_5 Int) (Start_5 String) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_2 Int) (Start_1 String) (Start_6 String) (StartBool_1 Bool) (StartInt_1 Int))
  ((Start String ("0" (str.++ Start Start_1) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_3) (str.from_int StartInt_4)))
   (StartInt Int (0 (str.indexof Start_10 Start_6 StartInt_4) (str.to_int Start_3)))
   (StartBool Bool (true (and StartBool_2 StartBool) (str.< Start_10 Start_3) (str.prefixof Start_3 Start_11) (<= StartInt_3 StartInt_2)))
   (Start_11 String ("b" (str.++ Start_5 Start_1) (str.at Start_6 StartInt_2) (str.substr Start_7 StartInt_3 StartInt_4) (ite StartBool_1 Start_2 Start_6)))
   (Start_10 String (x (str.++ Start_2 Start_9) (str.at Start_5 StartInt_4) (str.substr Start_7 StartInt_6 StartInt_3) (str.from_int StartInt_6) (ite StartBool_2 Start_2 Start)))
   (Start_9 String ("" (str.++ Start_7 Start_1) (str.at Start_1 StartInt_1) (str.replace Start_6 Start_1 Start_7)))
   (Start_8 String ("" "a" x (str.++ Start_8 Start_3) (str.at Start_3 StartInt_2) (str.replace Start_4 Start_9 Start_2)))
   (StartInt_6 Int (0 (str.indexof Start_6 Start_2 StartInt_3) (str.to_int Start_8)))
   (Start_7 String ("1" (str.at Start_2 StartInt_1) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_6 Start_2 Start_2) (str.from_int StartInt_6) (ite StartBool Start_4 Start_1)))
   (Start_3 String ("1" (str.substr Start_3 StartInt_3 StartInt_5) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt_2) (ite StartBool Start Start_2)))
   (Start_4 String ("a" (str.++ Start_1 Start_4) (str.replace Start_2 Start_2 Start_1) (ite StartBool_1 Start_2 Start_3)))
   (StartInt_4 Int (0 (str.len Start_2) (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start)))
   (Start_2 String ("0" x (str.at Start_3 StartInt_1) (str.replace Start_2 Start_3 Start_2)))
   (StartInt_5 Int (1 (str.len Start_3) (str.indexof Start_4 Start_3 StartInt_4) (str.to_int Start_3)))
   (Start_5 String ("1" "a" "b" (str.substr Start_2 StartInt_4 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_2 Bool (true false (not StartBool) (str.< Start_1 Start_2) (= Start Start_5)))
   (StartInt_3 Int (0 1 (str.indexof Start_1 Start StartInt_1)))
   (StartInt_2 Int (1 (str.len Start_6) (str.indexof Start_4 Start_5 StartInt_2) (str.to_int Start_5)))
   (Start_1 String ("0" "b" "a" (str.++ Start_3 Start_5) (str.substr Start_1 StartInt_4 StartInt_1) (str.replace Start_5 Start_1 Start_4) (ite StartBool Start_7 Start)))
   (Start_6 String (y (str.at Start_1 StartInt_5) (str.from_int StartInt_4) (ite StartBool Start_4 Start_6)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.< Start_2 Start_4) (str.prefixof Start_5 Start_1) (str.contains Start Start) (= Start_3 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.at x 1))))

(check-synth)
