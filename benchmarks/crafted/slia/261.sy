(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartBool_3 Bool) (Start_7 String) (StartInt_1 Int) (StartBool_4 Bool) (Start_4 String) (Start_2 String) (Start_5 String) (Start_9 String) (StartBool_5 Bool) (StartInt_3 Int) (StartBool_1 Bool) (Start_15 String) (StartInt_6 Int) (Start_8 String) (StartBool_7 Bool) (Start_11 String) (StartBool_2 Bool) (StartBool_6 Bool) (Start_12 String) (StartInt_5 Int) (Start_6 String) (Start_10 String) (Start_3 String) (Start_14 String) (StartInt_4 Int) (Start_13 String) (StartInt_2 Int) (StartBool_8 Bool))
  ((Start String (x "0" "" "b" "a" y "1" (str.substr Start StartInt_1 StartInt_1)))
   (StartInt Int (1 0 (str.len Start_14) (str.indexof Start_9 Start_7 StartInt_6) (str.to_int Start_9)))
   (StartBool Bool (false (and StartBool_5 StartBool) (str.<= Start_5 Start_4) (str.prefixof Start_12 Start_4) (str.suffixof Start_1 Start_13) (str.contains Start_13 Start_5) (<= StartInt_5 StartInt)))
   (Start_1 String (y (str.substr Start_4 StartInt StartInt_3) (str.replace Start_3 Start_7 Start_8)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_5 StartBool_1) (str.prefixof Start_1 Start_1) (str.suffixof Start_3 Start_5) (str.contains Start_8 Start_5) (= StartInt_4 StartInt_3)))
   (Start_7 String ("b" (str.at Start_6 StartInt_2) (str.substr Start_6 StartInt_3 StartInt_4) (str.replace Start_3 Start_3 Start_7) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start Start_1 StartInt_1) (str.to_int Start_2)))
   (StartBool_4 Bool (false true (and StartBool_6 StartBool_7) (str.< Start_2 Start_6) (str.suffixof Start_2 Start_9)))
   (Start_4 String (y (str.++ Start_4 Start_3) (str.at Start_1 StartInt) (str.substr Start_4 StartInt_2 StartInt_3) (str.replace Start Start_5 Start_2) (str.from_int StartInt_2)))
   (Start_2 String ("0" (str.++ Start_3 Start_3) (str.substr Start StartInt_2 StartInt_3) (str.replace Start Start_4 Start_2) (str.from_int StartInt_2)))
   (Start_5 String (y (str.at Start_6 StartInt_3) (str.substr Start_2 StartInt StartInt_3) (str.replace Start_4 Start_5 Start_5)))
   (Start_9 String (x (str.++ Start Start_8) (str.at Start_5 StartInt_2) (str.substr Start_1 StartInt_3 StartInt_3) (str.replace Start_5 Start_10 Start_6) (ite StartBool_2 Start_7 Start_10)))
   (StartBool_5 Bool (false (not StartBool_3) (str.suffixof Start_9 Start_10) (= Start_5 Start_2) (= StartInt_6 StartInt_5)))
   (StartInt_3 Int (1 (str.indexof Start_14 Start_13 StartInt_2)))
   (StartBool_1 Bool (true false (str.<= Start_2 Start_7) (str.prefixof Start_3 Start_5) (str.suffixof Start_6 Start_4) (str.contains Start_1 Start_2) (= StartInt_5 StartInt) (<= StartInt_5 StartInt_3)))
   (Start_15 String ("a" (str.at Start_4 StartInt_6) (str.substr Start_9 StartInt StartInt_3) (str.from_int StartInt_2) (ite StartBool_8 Start_9 Start_10)))
   (StartInt_6 Int (1 0 (str.len Start_3) (str.indexof Start_9 Start_7 StartInt) (str.to_int Start_2)))
   (Start_8 String ("b" "" "0" (str.++ Start_3 Start_9) (str.from_int StartInt) (ite StartBool_1 Start_9 Start_8)))
   (StartBool_7 Bool (true false (and StartBool_1 StartBool_6) (str.< Start_1 Start) (str.prefixof Start_3 Start_10) (str.contains Start_5 Start_9) (= Start_8 Start_6)))
   (Start_11 String (y (str.++ Start_7 Start_1) (str.at Start_1 StartInt) (str.replace Start_12 Start_4 Start_7)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool StartBool_3) (str.< Start_4 Start_2) (str.<= Start_10 Start_8) (str.suffixof Start_5 Start_2) (= StartInt StartInt_2) (<= StartInt_1 StartInt_4)))
   (StartBool_6 Bool (false (not StartBool_2) (and StartBool_7 StartBool_3) (str.prefixof Start_11 Start_10) (str.suffixof Start_8 Start_2) (str.contains Start Start_7) (= Start Start_8) (<= StartInt_1 StartInt_6)))
   (Start_12 String ("a" (ite StartBool_7 Start_10 Start_6)))
   (StartInt_5 Int (0 1 (str.to_int Start_8)))
   (Start_6 String ("b" x (str.++ Start_4 Start_2) (str.at Start_1 StartInt_2) (str.replace Start_2 Start_1 Start) (str.from_int StartInt_3) (ite StartBool Start_7 Start_5)))
   (Start_10 String (x "b" "1" "a" "" "0" (str.replace Start Start_11 Start_10) (str.from_int StartInt_3)))
   (Start_3 String ("0" (str.++ Start_3 Start_5) (str.substr Start_15 StartInt_3 StartInt_2) (str.from_int StartInt_4)))
   (Start_14 String ("0" (str.++ Start_6 Start_3)))
   (StartInt_4 Int (1 0 (str.len Start_13) (str.to_int Start_10)))
   (Start_13 String ("a" (str.++ Start_7 Start_6) (str.at Start_13 StartInt_5) (str.substr Start_5 StartInt_4 StartInt_6) (ite StartBool_7 Start_2 Start_14)))
   (StartInt_2 Int (1 0 (str.len Start_1)))
   (StartBool_8 Bool (false (not StartBool_5) (str.prefixof Start_9 Start_14) (str.contains Start_5 Start_8) (= Start_9 Start_10) (= StartInt_5 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.at "a" (str.indexof "0" y 1)))))

(check-synth)
