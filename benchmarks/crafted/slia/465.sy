(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (Start_17 String) (Start_16 String) (Start_4 String) (StartBool_6 Bool) (Start_7 String) (Start_3 String) (StartInt_1 Int) (Start_2 String) (Start_18 String) (StartBool_3 Bool) (Start_10 String) (Start_5 String) (StartInt_6 Int) (StartInt_3 Int) (StartBool_2 Bool) (Start_15 String) (StartInt_2 Int) (Start_19 String) (Start_9 String) (Start_6 String) (StartInt_7 Int) (StartInt_8 Int) (Start_14 String) (StartBool_4 Bool) (StartInt_10 Int) (Start_8 String) (StartInt_4 Int) (Start_12 String) (Start_1 String) (Start_11 String) (Start_20 String) (Start_13 String) (StartInt_9 Int) (StartBool_1 Bool) (StartInt_5 Int) (StartBool_5 Bool))
  ((Start String (x "0" "a" (str.++ Start_1 Start) (str.substr Start_2 StartInt_1 StartInt_2)))
   (StartInt Int (1 0 (str.indexof Start_4 Start_12 StartInt_3)))
   (StartBool Bool (false true (and StartBool_6 StartBool_2) (str.< Start_16 Start_9) (str.<= Start_15 Start_6) (str.suffixof Start_12 Start_3) (str.contains Start_14 Start_11)))
   (StartInt_11 Int (0 (str.len Start_2) (str.indexof Start_14 Start_8 StartInt_2) (str.to_int Start_3)))
   (Start_17 String ("" (str.++ Start_18 Start) (str.at Start_14 StartInt_7) (str.substr Start_12 StartInt_7 StartInt_2) (str.replace Start_2 Start_7 Start_17) (str.from_int StartInt)))
   (Start_16 String ("a" "0" "1" x (str.substr Start_13 StartInt_10 StartInt_7) (str.replace Start_17 Start_10 Start_12) (str.from_int StartInt_2) (ite StartBool_4 Start Start_18)))
   (Start_4 String ("b" "1" x (str.substr Start_8 StartInt_3 StartInt) (str.from_int StartInt_7) (ite StartBool Start_3 Start_5)))
   (StartBool_6 Bool (false true (str.prefixof Start Start_20) (str.contains Start_14 Start_8) (= Start_16 Start_12) (<= StartInt_11 StartInt_4)))
   (Start_7 String ("" (str.substr Start_6 StartInt_1 StartInt_6)))
   (Start_3 String ("b" "0" (str.++ Start_2 Start_3) (str.at Start_1 StartInt_3) (str.from_int StartInt) (ite StartBool_2 Start_1 Start_2)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_2)))
   (Start_2 String (y "0" (str.++ Start_1 Start_2) (str.at Start_1 StartInt_4) (str.from_int StartInt_5) (ite StartBool_1 Start Start_3)))
   (Start_18 String ("1" "" "a" "0" x (str.substr Start_14 StartInt_2 StartInt_6) (str.from_int StartInt_9) (ite StartBool_2 Start_1 Start_2)))
   (StartBool_3 Bool (true false (and StartBool_1 StartBool_3) (str.<= Start_4 Start_6) (<= StartInt_4 StartInt_3)))
   (Start_10 String ("a" (str.at Start_3 StartInt_7) (str.replace Start_3 Start_5 Start_12)))
   (Start_5 String (x y "0" "" "a" "b" "1" (str.substr Start_6 StartInt_6 StartInt_1) (str.from_int StartInt_2) (ite StartBool_3 Start_3 Start_3)))
   (StartInt_6 Int (0 (str.len Start_2) (str.indexof Start_7 Start_5 StartInt_5) (str.to_int Start_2)))
   (StartInt_3 Int (0 1))
   (StartBool_2 Bool (false true (not StartBool) (str.< Start_2 Start_1) (str.<= Start_4 Start_4) (str.prefixof Start Start_5) (str.suffixof Start_1 Start_6) (= StartInt_4 StartInt_3)))
   (Start_15 String ("" (str.++ Start_14 Start) (str.at Start_14 StartInt_6) (str.substr Start_13 StartInt_10 StartInt_10) (str.from_int StartInt_3) (ite StartBool_4 Start_12 Start_16)))
   (StartInt_2 Int (1 0 (str.indexof Start_1 Start_2 StartInt_3) (str.to_int Start_1)))
   (Start_19 String ("0" (str.at Start_11 StartInt_7) (str.replace Start_9 Start_4 Start_20) (str.from_int StartInt_6)))
   (Start_9 String ("b" (str.++ Start_9 Start_5) (str.replace Start_2 Start_7 Start) (str.from_int StartInt_3) (ite StartBool_4 Start_6 Start_6)))
   (Start_6 String ("a" y (str.++ Start_5 Start_2) (str.replace Start Start_5 Start_4) (str.from_int StartInt_4) (ite StartBool_3 Start_6 Start_7)))
   (StartInt_7 Int (0 (str.indexof Start_8 Start_6 StartInt_8) (str.to_int Start_7)))
   (StartInt_8 Int (1 0 (str.to_int Start_5)))
   (Start_14 String (y "0" (str.++ Start_19 Start_20) (ite StartBool Start_20 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_4) (and StartBool_4 StartBool_2) (str.< Start_10 Start_7) (str.<= Start_2 Start_11) (str.prefixof Start Start_11) (str.suffixof Start_12 Start_2) (= Start_7 Start)))
   (StartInt_10 Int (1 (str.len Start_4)))
   (Start_8 String ("" (str.at Start_8 StartInt_9) (str.substr Start_9 StartInt_6 StartInt_7) (ite StartBool Start_5 Start_4)))
   (StartInt_4 Int (1 0))
   (Start_12 String (y (str.++ Start_4 Start_12) (str.at Start_8 StartInt_3) (str.substr Start_6 StartInt_9 StartInt_5) (str.replace Start_5 Start_5 Start_9) (str.from_int StartInt_6)))
   (Start_1 String ("" y x "a" "b" (str.at Start_5 StartInt_8) (str.substr Start_7 StartInt_4 StartInt_8) (str.replace Start_2 Start_11 Start_2) (str.from_int StartInt_2) (ite StartBool_5 Start_8 Start_5)))
   (Start_11 String ("b" (str.++ Start_13 Start_13) (str.at Start_7 StartInt_3) (str.substr Start_7 StartInt_1 StartInt_4) (str.replace Start_1 Start_10 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_7 Start_11)))
   (Start_20 String (x (str.++ Start_20 Start_12) (str.replace Start_5 Start_12 Start_20) (str.from_int StartInt_2)))
   (Start_13 String ("a" y "1" "" (str.at Start_8 StartInt_2)))
   (StartInt_9 Int (1 0 (str.len Start_2) (str.indexof Start_10 Start StartInt_7)))
   (StartBool_1 Bool (true false (not StartBool_3) (and StartBool_1 StartBool_1) (str.< Start_11 Start_10) (<= StartInt_2 StartInt_9)))
   (StartInt_5 Int (1 (str.len Start_13) (str.indexof Start_1 Start_2 StartInt_5)))
   (StartBool_5 Bool (false true (not StartBool_2) (and StartBool_5 StartBool_3) (str.contains Start_14 Start_1) (= Start_11 Start_15) (<= StartInt StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" "" (str.++ y "b"))))

(check-synth)
