(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_1 String) (Start_13 String) (Start_14 String) (StartInt_8 Int) (Start_12 String) (StartInt_3 Int) (Start_4 String) (StartInt_9 Int) (StartInt_5 Int) (StartInt_2 Int) (Start_5 String) (Start_9 String) (Start_7 String) (Start_8 String) (StartInt_7 Int) (Start_6 String) (Start_2 String) (StartInt_6 Int) (Start_3 String) (Start_10 String) (StartInt_4 Int) (Start_11 String))
  ((Start String ("a" (str.++ Start Start) (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_1) (str.replace Start Start_1 Start_2)))
   (StartInt Int (0 (str.indexof Start_6 Start_14 StartInt_2) (str.to_int Start_9)))
   (StartBool Bool (true (= StartInt_2 StartInt_7) (<= StartInt_9 StartInt_9)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_7 StartInt_1) (str.to_int Start_10)))
   (Start_1 String ("b" "" (str.++ Start_2 Start_11) (str.at Start StartInt_6) (str.substr Start_8 StartInt_5 StartInt_3) (str.replace Start_1 Start_11 Start_3) (ite StartBool Start_14 Start_2)))
   (Start_13 String ("b"))
   (Start_14 String (y "b" "a" (str.substr Start_9 StartInt_7 StartInt_1)))
   (StartInt_8 Int (1 (str.indexof Start_9 Start_14 StartInt_3)))
   (Start_12 String ("0" (str.++ Start_4 Start_12) (str.at Start_13 StartInt_8) (str.from_int StartInt_8)))
   (StartInt_3 Int (1 0))
   (Start_4 String ("b" "a" y x (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start Start_5 Start_5)))
   (StartInt_9 Int (1 0 (str.to_int Start_11)))
   (StartInt_5 Int (1 (str.len Start_11) (str.to_int Start_2)))
   (StartInt_2 Int (0 1 (str.len Start_5) (str.to_int Start_1)))
   (Start_5 String ("a" (str.replace Start_6 Start_3 Start_2) (str.from_int StartInt_4) (ite StartBool Start_7 Start_1)))
   (Start_9 String ("" (str.replace Start_6 Start_2 Start_10) (str.from_int StartInt)))
   (Start_7 String ("" (str.++ Start Start_8) (str.at Start_2 StartInt_2)))
   (Start_8 String (y (str.++ Start_1 Start) (str.substr Start_9 StartInt_3 StartInt_1) (ite StartBool Start_2 Start_7)))
   (StartInt_7 Int (0 (str.len Start) (str.to_int Start_5)))
   (Start_6 String ("a" y "" x (str.++ Start_11 Start_10) (str.at Start_7 StartInt_3) (str.substr Start_1 StartInt_6 StartInt_3)))
   (Start_2 String (x "0" "a" (str.++ Start_3 Start_1) (str.replace Start_2 Start_1 Start) (str.from_int StartInt_2) (ite StartBool Start Start_4)))
   (StartInt_6 Int (1 0))
   (Start_3 String ("a" (str.++ Start_12 Start_9) (str.at Start_5 StartInt_1) (str.substr Start_12 StartInt StartInt_7) (str.from_int StartInt_4)))
   (Start_10 String (x (str.at Start_3 StartInt_1)))
   (StartInt_4 Int (1 (str.len Start_5) (str.indexof Start_8 Start_11 StartInt_2)))
   (Start_11 String ("" y "a" "0" (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "b" y "") (str.indexof y "0" 0))))

(check-synth)
