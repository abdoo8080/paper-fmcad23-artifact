(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_1 Int) (StartInt_2 Int) (StartInt_9 Int) (StartBool_1 Bool) (StartBool_3 Bool) (StartInt_5 Int) (StartInt_7 Int) (Start_11 String) (Start_5 String) (Start_6 String) (Start_1 String) (Start_9 String) (StartBool_2 Bool) (StartInt_4 Int) (Start_13 String) (Start_4 String) (Start_2 String) (StartInt_3 Int) (Start_8 String) (StartInt_8 Int) (Start_7 String) (Start_12 String) (Start_10 String) (Start_3 String) (StartInt_6 Int))
  ((Start String ("" (str.at Start StartInt_1) (str.substr Start StartInt_2 StartInt) (str.from_int StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (0 1 (str.len Start) (str.indexof Start_10 Start_9 StartInt_5) (str.to_int Start_1)))
   (StartBool Bool (true (and StartBool_3 StartBool_2) (str.< Start_14 Start_9) (str.contains Start_7 Start_13) (= Start_10 Start_12) (= StartInt_8 StartInt_7) (<= StartInt_1 StartInt_8)))
   (Start_14 String (x (str.from_int StartInt_7) (ite StartBool Start_10 Start_10)))
   (StartInt_1 Int (0 (str.indexof Start_8 Start_13 StartInt_8) (str.to_int Start_13)))
   (StartInt_2 Int (0 1 (str.len Start_5)))
   (StartInt_9 Int (1))
   (StartBool_1 Bool (true (not StartBool_2) (str.<= Start_3 Start_2) (str.contains Start_5 Start_1) (= StartInt_8 StartInt) (<= StartInt_9 StartInt_8)))
   (StartBool_3 Bool (true (str.<= Start_1 Start_6) (str.suffixof Start_1 Start_13) (= StartInt_8 StartInt_7) (<= StartInt_2 StartInt_2)))
   (StartInt_5 Int (0 1 (str.len Start_10) (str.to_int Start_11)))
   (StartInt_7 Int (1 (str.to_int Start_6)))
   (Start_11 String ("" (str.at Start_8 StartInt_2) (str.substr Start_12 StartInt_3 StartInt_7) (str.replace Start_3 Start_3 Start_9)))
   (Start_5 String (y "" (str.++ Start_5 Start) (str.substr Start_3 StartInt_4 StartInt) (ite StartBool_2 Start_2 Start_5)))
   (Start_6 String ("0" (str.++ Start_10 Start_10) (str.replace Start_5 Start Start_11) (str.from_int StartInt_3)))
   (Start_1 String ("0" (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt) (ite StartBool_2 Start_1 Start)))
   (Start_9 String ("" "0" (str.++ Start_12 Start) (str.at Start_9 StartInt_5) (str.substr Start_11 StartInt_1 StartInt_1) (ite StartBool_2 Start_3 Start_10)))
   (StartBool_2 Bool (true (not StartBool_3) (str.< Start_2 Start) (str.<= Start_3 Start_2) (str.prefixof Start_3 Start_2) (str.suffixof Start_3 Start_2) (= StartInt_1 StartInt_3) (<= StartInt_3 StartInt_2)))
   (StartInt_4 Int (1 (str.indexof Start Start_5 StartInt_4) (str.to_int Start_3)))
   (Start_13 String (x (str.++ Start_5 Start_11) (str.at Start_1 StartInt_6) (str.substr Start_13 StartInt_1 StartInt_1) (str.from_int StartInt)))
   (Start_4 String ("" x (str.++ Start_2 Start_4) (str.at Start_2 StartInt_2) (str.replace Start_2 Start_2 Start_5) (str.from_int StartInt)))
   (Start_2 String (y "a" (str.++ Start_4 Start) (str.at Start_6 StartInt_5) (str.substr Start_6 StartInt StartInt_6) (str.replace Start_7 Start Start_7) (ite StartBool Start Start_8)))
   (StartInt_3 Int (1 (str.len Start_2)))
   (Start_8 String (x y "" "b" (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start_8)))
   (StartInt_8 Int (0 (str.indexof Start_1 Start_1 StartInt_6)))
   (Start_7 String ("b" x "a" "0" "1" (str.++ Start_6 Start) (str.at Start_1 StartInt_6) (str.substr Start_7 StartInt_6 StartInt_2) (str.from_int StartInt_5)))
   (Start_12 String (x (str.++ Start_7 Start_5) (str.at Start_5 StartInt_3) (ite StartBool_2 Start_3 Start_3)))
   (Start_10 String (y "a" "" (str.++ Start_11 Start_9) (str.at Start_5 StartInt_2) (str.from_int StartInt_2)))
   (Start_3 String ("b" x (str.substr Start StartInt_3 StartInt_4) (str.replace Start Start_1 Start_3) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.indexof Start_7 Start_9 StartInt_3) (str.to_int Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" y "b")))

(check-synth)
