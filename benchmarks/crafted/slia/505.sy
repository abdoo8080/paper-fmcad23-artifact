(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartInt_5 Int) (StartBool_4 Bool) (Start_11 String) (Start_7 String) (Start_6 String) (StartBool_2 Bool) (Start_3 String) (StartInt_6 Int) (Start_5 String) (Start_8 String) (Start_1 String) (StartBool_3 Bool) (Start_10 String) (StartInt_4 Int) (StartInt_1 Int) (StartInt_2 Int) (StartInt_7 Int) (StartInt_3 Int) (Start_4 String) (StartBool_1 Bool) (Start_9 String))
  ((Start String ("b" "0" "" "1" x y "a" (str.substr Start_1 StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.len Start) (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool) (str.<= Start_2 Start_2) (<= StartInt_2 StartInt_1)))
   (Start_2 String ("" (str.replace Start_7 Start_10 Start_7) (str.from_int StartInt_7)))
   (StartInt_5 Int (0 (str.len Start_9) (str.indexof Start_6 Start_11 StartInt_1) (str.to_int Start_4)))
   (StartBool_4 Bool (true false (and StartBool StartBool) (str.< Start_8 Start_9) (str.<= Start_3 Start_5) (str.prefixof Start_4 Start) (str.suffixof Start Start) (str.contains Start_8 Start_6)))
   (Start_11 String ("a" "b" (str.at Start_2 StartInt_3)))
   (Start_7 String ("a" x (str.++ Start_7 Start_4) (str.at Start_6 StartInt_2) (str.substr Start StartInt_5 StartInt_4) (str.replace Start_10 Start_11 Start_1) (str.from_int StartInt_2)))
   (Start_6 String (y "1" "0" (str.++ Start_11 Start_7) (str.at Start_11 StartInt_5) (str.from_int StartInt_7)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.< Start_1 Start_5) (str.suffixof Start_9 Start_1) (str.contains Start Start) (= StartInt_1 StartInt_1) (<= StartInt_1 StartInt_4)))
   (Start_3 String ("b" x (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt_3)))
   (StartInt_6 Int (0 (str.indexof Start_9 Start_3 StartInt_7) (str.to_int Start_5)))
   (Start_5 String (y (str.++ Start_4 Start_3) (str.substr Start StartInt_3 StartInt) (str.replace Start_1 Start_6 Start_7) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_1)))
   (Start_8 String ("a" (str.++ Start_9 Start_1) (ite StartBool_2 Start_6 Start)))
   (Start_1 String ("b" "" (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_1 Start)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool) (str.< Start Start_11) (str.suffixof Start_11 Start_3) (str.contains Start_6 Start_10) (= Start_5 Start_4)))
   (Start_10 String ("0" "1" x "b" "a" y "" (str.at Start_8 StartInt_6) (str.substr Start_11 StartInt_6 StartInt_5) (ite StartBool_3 Start_6 Start_2)))
   (StartInt_4 Int (0))
   (StartInt_1 Int (0 1))
   (StartInt_2 Int (0 (str.indexof Start_3 Start_3 StartInt_2) (str.to_int Start)))
   (StartInt_7 Int (0 1 (str.len Start_11) (str.indexof Start Start_3 StartInt_7) (str.to_int Start_5)))
   (StartInt_3 Int (0 1 (str.len Start_4) (str.indexof Start_4 Start_3 StartInt_1) (str.to_int Start)))
   (Start_4 String ("b" (str.++ Start_4 Start_5) (ite StartBool Start_5 Start_5)))
   (StartBool_1 Bool (true false (and StartBool StartBool_1) (str.< Start_1 Start_7) (str.prefixof Start Start_1) (str.suffixof Start_4 Start_4) (str.contains Start_1 Start_8) (= Start_5 Start_9)))
   (Start_9 String ("b" (str.++ Start Start_2) (str.at Start_6 StartInt_2) (str.replace Start Start_7 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= (str.from_int (str.indexof y x 0)) (str.++ (str.replace (str.++ y x) "" "1") "b")) (str.at x 1) "0")))

(check-synth)
