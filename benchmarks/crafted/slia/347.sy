(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_5 Int) (Start_5 String) (Start_12 String) (Start_7 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_4 String) (StartInt_7 Int) (StartInt_2 Int) (StartBool_4 Bool) (Start_9 String) (Start_1 String) (StartInt_10 Int) (StartBool_5 Bool) (StartInt_9 Int) (Start_11 String) (StartInt_4 Int) (Start_10 String) (StartBool_3 Bool) (Start_3 String) (StartInt_6 Int) (Start_2 String) (StartInt_1 Int) (Start_6 String) (StartBool_1 Bool) (StartInt_8 Int))
  ((Start String (x "a" y (str.substr Start_1 StartInt StartInt_1) (str.replace Start_2 Start_3 Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (0 1 (str.len Start_12) (str.indexof Start_4 Start_4 StartInt_1)))
   (StartBool Bool (false (not StartBool_1) (str.<= Start_1 Start_10) (str.prefixof Start_12 Start_3) (str.contains Start_8 Start_10)))
   (Start_8 String ("b" "1" (str.++ Start_7 Start_6) (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_9)))
   (StartInt_5 Int (1 (str.len Start_7) (str.indexof Start_5 Start_2 StartInt_2) (str.to_int Start_2)))
   (Start_5 String ("1" (str.at Start_5 StartInt_2) (str.substr Start_6 StartInt_3 StartInt_4) (ite StartBool_1 Start Start_4)))
   (Start_12 String ("0" "b" "" "a" (str.++ Start_3 Start) (str.substr Start_12 StartInt_2 StartInt_3) (str.from_int StartInt)))
   (Start_7 String ("a" (str.at Start_1 StartInt) (str.substr Start_7 StartInt_2 StartInt_1)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_5 StartInt_4) (str.to_int Start_5)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_2) (str.< Start_3 Start_4) (str.<= Start_1 Start_3) (str.suffixof Start_3 Start_4) (str.contains Start Start_1) (= Start_1 Start_1) (= StartInt StartInt_3) (<= StartInt_1 StartInt)))
   (Start_4 String ("1" (str.++ Start_3 Start_7) (str.at Start_3 StartInt_6) (str.substr Start StartInt_4 StartInt_2) (str.replace Start_2 Start_8 Start_5) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_8)))
   (StartInt_7 Int (0 1 (str.len Start_9)))
   (StartInt_2 Int (0 1 (str.len Start) (str.indexof Start Start_1 StartInt_1)))
   (StartBool_4 Bool (true (not StartBool_3) (str.< Start_6 Start_6) (str.prefixof Start_2 Start_6) (str.contains Start Start_6) (= StartInt_2 StartInt_5) (<= StartInt_1 StartInt_2)))
   (Start_9 String (y x (str.++ Start_10 Start_8) (str.at Start StartInt_7) (str.substr Start_4 StartInt_8 StartInt_8)))
   (Start_1 String ("0" "1" "" "a" "b" y (str.++ Start_7 Start_8) (str.at Start_3 StartInt_9) (str.replace Start_11 Start_5 Start_9) (str.from_int StartInt_7)))
   (StartInt_10 Int (0 1 (str.indexof Start_5 Start_10 StartInt_9)))
   (StartBool_5 Bool (true (str.< Start_8 Start_6) (str.prefixof Start_10 Start_3) (str.suffixof Start_5 Start_2) (str.contains Start_6 Start_2) (= Start_5 Start_2) (= StartInt_4 StartInt_9)))
   (StartInt_9 Int (0 1 (str.indexof Start_9 Start_9 StartInt_5)))
   (Start_11 String (x "0" "" (str.++ Start_6 Start_8) (str.substr Start_12 StartInt_7 StartInt_3) (str.from_int StartInt_8) (ite StartBool_3 Start_10 Start_5)))
   (StartInt_4 Int (0 1))
   (Start_10 String ("a" (str.++ Start_10 Start_7) (ite StartBool_5 Start_6 Start_3)))
   (StartBool_3 Bool (false true (str.prefixof Start_1 Start_12) (str.suffixof Start Start) (str.contains Start Start_8) (= Start_7 Start_8) (= StartInt_4 StartInt_5) (<= StartInt_9 StartInt_4)))
   (Start_3 String ("1" "a" (ite StartBool_3 Start_5 Start_5)))
   (StartInt_6 Int (1 (str.indexof Start_11 Start StartInt_1) (str.to_int Start_4)))
   (Start_2 String (y x (str.++ Start_11 Start_10) (str.substr Start_2 StartInt_10 StartInt_1) (ite StartBool_2 Start_12 Start_1)))
   (StartInt_1 Int (0 1 (str.to_int Start_6)))
   (Start_6 String ("0" (str.at Start_3 StartInt_2) (ite StartBool_4 Start_4 Start_7)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.contains Start Start_2) (= Start_2 Start) (<= StartInt StartInt_2)))
   (StartInt_8 Int (1 0 (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.at x 0) x)))

(check-synth)
