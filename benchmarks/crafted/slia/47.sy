(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (Start_3 String) (Start_8 String) (Start_1 String) (StartInt_5 Int) (StartInt_1 Int) (Start_5 String) (StartBool_2 Bool) (Start_4 String) (Start_9 String) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_3 Bool) (Start_6 String) (StartInt_3 Int) (Start_7 String) (StartInt_4 Int))
  ((Start String (y (str.++ Start Start_1) (str.at Start_1 StartInt_1)))
   (StartInt Int (0 1 (str.len Start_6)))
   (StartBool Bool (false true (and StartBool_3 StartBool_1) (str.<= Start_4 Start_9) (str.suffixof Start_6 Start_8) (= StartInt_4 StartInt_4) (<= StartInt_4 StartInt_5)))
   (Start_2 String ("0" (str.++ Start_7 Start_6) (str.replace Start_8 Start_6 Start_4)))
   (Start_3 String ("a" (str.replace Start_6 Start_9 Start_3) (ite StartBool_2 Start_8 Start_5)))
   (Start_8 String ("1" (str.++ Start_3 Start_7) (str.at Start_9 StartInt_2) (str.from_int StartInt_5)))
   (Start_1 String ("a" y (str.++ Start_2 Start) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_3 Start_3 Start_4) (str.from_int StartInt)))
   (StartInt_5 Int (0 (str.len Start_6) (str.to_int Start_1)))
   (StartInt_1 Int (1 0 (str.to_int Start_1)))
   (Start_5 String ("1" (str.++ Start_6 Start_1)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_3) (str.< Start_2 Start_4) (str.suffixof Start_4 Start_6) (= StartInt_3 StartInt_4) (<= StartInt_1 StartInt_3)))
   (Start_4 String ("a" "0" "" "b" y (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool Start_3 Start_3)))
   (Start_9 String ("b" (str.++ Start_2 Start_7) (str.at Start StartInt_5) (str.substr Start_7 StartInt_5 StartInt_3) (str.from_int StartInt_1)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_3 StartBool) (str.<= Start_6 Start_2) (str.prefixof Start_6 Start)))
   (StartInt_2 Int (0 (str.len Start_1) (str.to_int Start_5)))
   (StartBool_3 Bool (true false (str.contains Start Start_4) (= Start_2 Start_6) (= StartInt_1 StartInt) (<= StartInt_3 StartInt_1)))
   (Start_6 String ("0" "b" x (str.replace Start_3 Start_4 Start_6) (ite StartBool_1 Start_6 Start_3)))
   (StartInt_3 Int (1 0 (str.indexof Start_5 Start_7 StartInt_2) (str.to_int Start_7)))
   (Start_7 String ("1" (str.++ Start_3 Start_6)))
   (StartInt_4 Int (1 (str.len Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof y "1" 1))))

(check-synth)
