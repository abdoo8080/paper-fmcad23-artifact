(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_12 String) (Start_11 String) (Start_1 String) (Start_10 String) (Start_8 String) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_2 Int) (Start_9 String) (StartInt_1 Int) (Start_5 String) (Start_4 String) (StartInt_4 Int) (Start_6 String) (Start_3 String) (Start_2 String) (Start_7 String))
  ((Start String ("b" (str.++ Start Start_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start_12) (str.to_int Start_13)))
   (StartBool Bool (true (and StartBool_1 StartBool) (str.prefixof Start_3 Start_2) (str.suffixof Start_5 Start_8) (= Start_2 Start_6) (<= StartInt_4 StartInt_4)))
   (Start_13 String ("1" (str.substr Start_10 StartInt_1 StartInt) (str.replace Start_1 Start_5 Start_6)))
   (Start_12 String ("b" x "0" (str.replace Start_2 Start Start_12) (str.from_int StartInt_3)))
   (Start_11 String ("a" (ite StartBool_1 Start_12 Start)))
   (Start_1 String ("1" "0" (str.++ Start_11 Start_6) (str.at Start_11 StartInt_1)))
   (Start_10 String (x (str.replace Start_4 Start Start_1)))
   (Start_8 String ("" (str.at Start_10 StartInt_5) (str.replace Start_6 Start_6 Start_10) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.indexof Start Start_5 StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start_2 Start) (str.prefixof Start Start_1) (str.suffixof Start_3 Start_4) (str.contains Start Start_3) (= StartInt StartInt_1) (<= StartInt_2 StartInt)))
   (StartInt_5 Int (0 (str.indexof Start_3 Start_1 StartInt_2)))
   (StartInt_2 Int (0 (str.len Start) (str.indexof Start_3 Start_3 StartInt)))
   (Start_9 String ("" "a" y (str.++ Start_1 Start_5)))
   (StartInt_1 Int (1 0 (str.indexof Start_3 Start_3 StartInt_1) (str.to_int Start)))
   (Start_5 String ("b" "" (str.at Start_5 StartInt_2) (str.replace Start_5 Start_2 Start_2)))
   (Start_4 String ("0" (str.at Start StartInt_3) (str.replace Start_1 Start_5 Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.indexof Start_1 Start_6 StartInt_2) (str.to_int Start_5)))
   (Start_6 String (x (str.++ Start_5 Start_2) (str.at Start_4 StartInt_3) (str.replace Start Start_3 Start) (str.from_int StartInt_2)))
   (Start_3 String ("a" "" x "1" "0" (str.substr Start_6 StartInt_5 StartInt_4) (str.replace Start_6 Start Start_5) (str.from_int StartInt_1)))
   (Start_2 String (y x (str.at Start_2 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_7)))
   (Start_7 String (x (str.++ Start_8 Start_4) (str.at Start_1 StartInt_4) (str.substr Start StartInt_2 StartInt) (str.replace Start_1 Start_1 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "" (str.replace "1" x "0"))))

(check-synth)
