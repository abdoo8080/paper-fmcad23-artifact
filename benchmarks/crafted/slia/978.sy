(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_7 String) (Start_3 String) (StartInt_4 Int) (StartInt_6 Int) (StartInt_5 Int) (StartInt_7 Int) (StartBool_1 Bool) (Start_4 String) (Start_15 String) (Start_6 String) (Start_5 String) (StartBool_2 Bool) (StartInt_2 Int) (StartBool_3 Bool) (Start_9 String) (Start_10 String) (Start_12 String) (StartInt_1 Int) (Start_8 String) (Start_2 String) (Start_1 String) (Start_16 String) (StartInt_3 Int) (StartBool_5 Bool) (Start_13 String) (Start_17 String) (Start_14 String) (Start_11 String))
  ((Start String ("" "1" (str.at Start_1 StartInt_1)))
   (StartInt Int (0 1 (str.len Start_1) (str.indexof Start_8 Start_7 StartInt_7) (str.to_int Start_7)))
   (StartBool Bool (false (str.< Start_1 Start_9) (str.prefixof Start_2 Start_10)))
   (StartBool_4 Bool (false (not StartBool_3) (str.<= Start_17 Start_14) (str.suffixof Start_9 Start_5) (str.contains Start_1 Start_14) (<= StartInt_6 StartInt_5)))
   (Start_7 String ("b" x "1" "a" (str.substr Start_8 StartInt_5 StartInt) (str.replace Start Start_7 Start_4)))
   (Start_3 String ("1" x y "b" "" "a" "0" (str.++ Start_3 Start_1) (str.at Start_5 StartInt_2) (str.substr Start_6 StartInt_3 StartInt)))
   (StartInt_4 Int (1 (str.to_int Start_5)))
   (StartInt_6 Int (1 (str.indexof Start_1 Start StartInt_4)))
   (StartInt_5 Int (0 1 (str.indexof Start Start StartInt_6)))
   (StartInt_7 Int (0))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool) (str.<= Start_5 Start_2) (str.suffixof Start_2 Start_4) (= Start Start_1) (= StartInt StartInt_6)))
   (Start_4 String ("0" (str.at Start_3 StartInt_4) (str.substr Start_4 StartInt_1 StartInt_5) (str.replace Start_4 Start_4 Start_5)))
   (Start_15 String (y "0" x (str.++ Start Start_11) (str.at Start_1 StartInt_4) (str.substr Start_7 StartInt_5 StartInt_2) (ite StartBool_2 Start_4 Start)))
   (Start_6 String (y (str.replace Start_1 Start_6 Start_5) (str.from_int StartInt_1) (ite StartBool Start_7 Start_2)))
   (Start_5 String (x "" (str.substr Start StartInt_6 StartInt_1) (ite StartBool_1 Start_2 Start_4)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_4) (str.< Start_6 Start_10) (str.<= Start_11 Start_5) (str.prefixof Start_12 Start_2) (str.suffixof Start_12 Start_4) (str.contains Start_13 Start) (= StartInt_7 StartInt_6) (<= StartInt_3 StartInt_1)))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_3 StartInt_3)))
   (StartBool_3 Bool (true (not StartBool_2) (str.< Start_10 Start_3) (str.<= Start_14 Start_16) (str.contains Start_9 Start_8) (= Start_5 Start_15)))
   (Start_9 String (y "1" (str.++ Start Start_6) (str.at Start_2 StartInt_3) (str.substr Start_5 StartInt StartInt_5) (str.replace Start_5 Start_4 Start_2) (str.from_int StartInt_3)))
   (Start_10 String ("" x "a" (str.at Start_2 StartInt_5) (str.replace Start_7 Start_9 Start_7) (ite StartBool_2 Start_5 Start_2)))
   (Start_12 String ("0" x "b" "1" "" "a" y (str.++ Start_16 Start_14) (str.substr Start_15 StartInt_3 StartInt_5)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_1 Start StartInt_2)))
   (Start_8 String ("" (str.substr Start_1 StartInt_3 StartInt_6) (str.replace Start_9 Start_1 Start_9)))
   (Start_2 String ("b" "a" "" y "1" (str.substr Start_3 StartInt_6 StartInt_5) (str.from_int StartInt_5)))
   (Start_1 String (y (str.++ Start_1 Start_5) (str.at Start_5 StartInt_5)))
   (Start_16 String (x "" "b" y (str.++ Start_5 Start_8)))
   (StartInt_3 Int (0 (str.len Start_1) (str.indexof Start_2 Start_4 StartInt_1)))
   (StartBool_5 Bool (false (and StartBool_5 StartBool_3) (str.<= Start_8 Start_14) (str.suffixof Start_3 Start_9) (str.contains Start_1 Start_1) (= Start_9 Start_11)))
   (Start_13 String ("0" (str.++ Start_2 Start_6) (str.at Start_6 StartInt_6) (ite StartBool_5 Start_10 Start_10)))
   (Start_17 String ("b" (str.++ Start_11 Start_2) (str.substr Start_10 StartInt_2 StartInt_2) (str.from_int StartInt)))
   (Start_14 String ("0" (str.replace Start_4 Start_15 Start_5) (str.from_int StartInt_6) (ite StartBool_3 Start_15 Start_7)))
   (Start_11 String ("0" x (str.at Start_8 StartInt_4) (str.from_int StartInt) (ite StartBool_3 Start_15 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "a" (str.indexof "1" y 0))))

(check-synth)
