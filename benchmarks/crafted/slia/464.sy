(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_10 String) (Start_1 String) (StartInt_1 Int) (StartInt_2 Int) (StartBool_2 Bool) (Start_3 String) (Start_8 String) (Start_7 String) (Start_2 String) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_4 Int) (Start_11 String) (StartInt_9 Int) (StartInt_7 Int) (Start_9 String) (Start_5 String) (StartInt_5 Int) (Start_6 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_4 String) (StartInt_8 Int))
  ((Start String ("" (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt_2) (ite StartBool Start Start_2)))
   (StartInt Int (1 (str.len Start_9) (str.to_int Start_4)))
   (StartBool Bool (false true (and StartBool_3 StartBool_1) (str.<= Start_8 Start_3) (= Start_4 Start_11)))
   (Start_12 String ("" "b" (str.++ Start_12 Start_2) (str.replace Start_12 Start_1 Start_4)))
   (Start_10 String ("0" "a" (str.substr Start_9 StartInt_7 StartInt) (str.replace Start_10 Start_2 Start_9) (str.from_int StartInt_7) (ite StartBool_3 Start Start_1)))
   (Start_1 String ("b" (str.at Start_9 StartInt_5) (str.substr Start_1 StartInt_3 StartInt_5) (str.replace Start_3 Start_10 Start_8) (ite StartBool_1 Start_5 Start_7)))
   (StartInt_1 Int (0 1))
   (StartInt_2 Int (0 (str.len Start_2)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_1 StartBool_1) (str.prefixof Start Start_5) (str.suffixof Start_5 Start_6) (= Start_3 Start) (= StartInt_2 StartInt_7)))
   (Start_3 String ("1" "" (str.at Start_2 StartInt_1) (str.substr Start_7 StartInt_5 StartInt_9) (str.replace Start_2 Start_2 Start_7) (str.from_int StartInt_7) (ite StartBool_2 Start_5 Start)))
   (Start_8 String ("b" (str.substr Start_7 StartInt_8 StartInt_6) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (Start_7 String ("" y (str.++ Start_3 Start_4) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_3 Start_6 Start_7)))
   (Start_2 String ("0" "a" "b" "1" x (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_1)))
   (StartInt_6 Int (0 (str.indexof Start_3 Start StartInt_1)))
   (StartBool_1 Bool (false true (str.suffixof Start_3 Start_1) (= Start_4 Start) (= StartInt_1 StartInt_2) (<= StartInt_3 StartInt_4)))
   (StartInt_4 Int (0 1 (str.len Start_5)))
   (Start_11 String ("0" "" (str.++ Start_6 Start_12) (str.substr Start_5 StartInt_4 StartInt_3)))
   (StartInt_9 Int (0 1 (str.len Start_7) (str.indexof Start_5 Start_7 StartInt_6) (str.to_int Start_5)))
   (StartInt_7 Int (1 0 (str.len Start_1)))
   (Start_9 String ("a" y "" (str.substr Start_5 StartInt_1 StartInt_5) (str.replace Start_6 Start_8 Start_2)))
   (Start_5 String ("0" (str.++ Start_2 Start_6) (str.at Start_1 StartInt_5)))
   (StartInt_5 Int (0 1 (str.len Start_3) (str.to_int Start_5)))
   (Start_6 String ("b" (str.++ Start_4 Start) (str.at Start_1 StartInt_3) (str.substr Start_3 StartInt_4 StartInt_1) (str.from_int StartInt_6) (ite StartBool_1 Start_4 Start_7)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start_7 Start StartInt_7)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool StartBool) (str.< Start_3 Start_8) (str.<= Start_8 Start_7) (str.prefixof Start_4 Start) (= StartInt_9 StartInt_5)))
   (Start_4 String ("b" "1" (str.at Start_6 StartInt_2) (str.substr Start StartInt_1 StartInt_8) (str.from_int StartInt_6) (ite StartBool_1 Start_3 Start)))
   (StartInt_8 Int (1 0 (str.indexof Start Start_3 StartInt_7) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof y "b") "0" "b")))

(check-synth)
