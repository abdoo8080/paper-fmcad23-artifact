(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (Start_20 String) (Start_18 String) (Start_17 String) (Start_10 String) (StartInt_6 Int) (Start_6 String) (Start_13 String) (Start_15 String) (Start_7 String) (Start_9 String) (StartInt_3 Int) (StartInt_4 Int) (Start_5 String) (Start_1 String) (StartInt_8 Int) (Start_4 String) (StartInt_7 Int) (StartBool_1 Bool) (StartBool_3 Bool) (Start_3 String) (Start_2 String) (StartInt_5 Int) (Start_12 String) (Start_11 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_14 String) (StartInt_2 Int) (Start_8 String) (Start_16 String))
  ((Start String ("a" (str.at Start_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_2)))
   (StartInt Int (0 (str.len Start_16) (str.indexof Start_7 Start_14 StartInt_1)))
   (StartBool Bool (false true (str.<= Start_19 Start_20) (str.contains Start_19 Start_20) (= Start_18 Start_17) (<= StartInt_2 StartInt_5)))
   (Start_19 String ("" (str.replace Start_6 Start_2 Start_15) (str.from_int StartInt_3)))
   (Start_20 String (x (str.substr Start_18 StartInt_7 StartInt_6) (ite StartBool Start_10 Start_11)))
   (Start_18 String ("b" "1" "0" (str.replace Start_14 Start_13 Start_1)))
   (Start_17 String ("0" (str.++ Start_6 Start_16) (str.at Start_18 StartInt_3) (str.from_int StartInt_8)))
   (Start_10 String ("0" "" (str.at Start_11 StartInt_3) (str.substr Start_11 StartInt_5 StartInt) (str.replace Start_9 Start_7 Start_4) (ite StartBool_3 Start_2 Start_1)))
   (StartInt_6 Int (1 (str.len Start_6) (str.indexof Start_6 Start_11 StartInt_5) (str.to_int Start_3)))
   (Start_6 String ("0" (str.++ Start_8 Start_8) (str.at Start_8 StartInt_2) (str.from_int StartInt_3) (ite StartBool_2 Start_9 Start_8)))
   (Start_13 String ("b" (str.++ Start_7 Start_12) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_12 Start_8 Start_4) (ite StartBool Start_5 Start_4)))
   (Start_15 String (x (str.substr Start StartInt_1 StartInt_8)))
   (Start_7 String ("0" "a" (str.from_int StartInt_2)))
   (Start_9 String (y (str.at Start_6 StartInt) (str.substr Start_2 StartInt_3 StartInt_2) (str.replace Start_5 Start_4 Start) (str.from_int StartInt_4) (ite StartBool_3 Start_6 Start_2)))
   (StartInt_3 Int (0 (str.to_int Start_3)))
   (StartInt_4 Int (1 0 (str.to_int Start_2)))
   (Start_5 String ("a" (str.++ Start_3 Start_2) (str.from_int StartInt_1) (ite StartBool Start_2 Start_4)))
   (Start_1 String ("0" y "a" (str.++ Start_5 Start_2) (str.from_int StartInt_6)))
   (StartInt_8 Int (0 (str.len Start_3)))
   (Start_4 String ("" "1" "0" (str.++ Start_5 Start_3) (str.at Start_6 StartInt_2) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_5 Start_7 Start_8) (str.from_int StartInt_2) (ite StartBool Start_2 Start_1)))
   (StartInt_7 Int (1 (str.indexof Start_2 Start_12 StartInt_6) (str.to_int Start_6)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.< Start Start) (str.<= Start Start_1) (str.contains Start_3 Start_4) (= Start_3 Start_5) (<= StartInt_3 StartInt_2)))
   (StartBool_3 Bool (true (not StartBool_2) (str.suffixof Start_10 Start_7) (str.contains Start_1 Start_1) (= Start_9 Start_7) (<= StartInt_4 StartInt)))
   (Start_3 String ("b" (str.++ Start Start_3) (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt_3)))
   (Start_2 String (y (str.at Start_1 StartInt) (str.replace Start_2 Start Start_3)))
   (StartInt_5 Int (1 0 (str.indexof Start_12 Start_5 StartInt_4)))
   (Start_12 String ("b" x y "a" "" "1" "0" (str.from_int StartInt_1)))
   (Start_11 String ("" "a" (str.at Start_9 StartInt_2) (str.replace Start_4 Start_13 Start_1) (ite StartBool_3 Start_13 Start_5)))
   (StartInt_1 Int (1 0 (str.len Start_13)))
   (StartBool_2 Bool (true false (str.suffixof Start_5 Start_3) (str.contains Start_10 Start_3) (= StartInt_6 StartInt_4)))
   (Start_14 String ("a" x (str.++ Start_7 Start_10) (str.substr Start_5 StartInt_6 StartInt_7) (str.replace Start_15 Start_8 Start_15) (ite StartBool_2 Start_3 Start_5)))
   (StartInt_2 Int (0 (str.len Start_14) (str.indexof Start_5 Start_14 StartInt_3)))
   (Start_8 String (y (str.++ Start_3 Start_7) (str.replace Start_1 Start_1 Start_3) (str.from_int StartInt_2)))
   (Start_16 String ("" "b" "0" (str.replace Start_17 Start_8 Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (ite (str.<= y (str.replace y "" x)) "" "a")))))

(check-synth)
