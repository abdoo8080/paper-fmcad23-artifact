(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (Start_19 String) (Start_2 String) (Start_1 String) (Start_9 String) (Start_7 String) (StartInt_10 Int) (Start_13 String) (StartBool_2 Bool) (StartInt_9 Int) (Start_17 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_10 String) (Start_5 String) (Start_8 String) (Start_6 String) (StartInt_3 Int) (StartBool_4 Bool) (StartBool_3 Bool) (Start_4 String) (Start_12 String) (Start_14 String) (StartInt_5 Int) (Start_16 String) (Start_11 String) (StartInt_6 Int) (Start_15 String) (Start_18 String) (StartInt_2 Int) (StartBool_5 Bool) (StartInt_8 Int) (Start_3 String) (StartInt_7 Int) (StartInt_4 Int))
  ((Start String ("0" (str.++ Start_1 Start_2) (str.replace Start_2 Start_3 Start_1)))
   (StartInt Int (1 (str.len Start_14) (str.to_int Start_5)))
   (StartBool Bool (false (str.<= Start_19 Start_6) (str.prefixof Start_10 Start_12) (str.contains Start_12 Start_19) (= StartInt_1 StartInt_5) (<= StartInt_11 StartInt_1)))
   (StartInt_11 Int (1))
   (Start_19 String (y (str.at Start_8 StartInt_6) (str.replace Start_17 Start_12 Start_6) (ite StartBool_3 Start_8 Start_13)))
   (Start_2 String ("b" "0" (str.at Start_9 StartInt_1)))
   (Start_1 String ("b" "0" (str.++ Start_6 Start_6) (str.at Start_5 StartInt_3) (str.substr Start_14 StartInt_2 StartInt_3) (str.replace Start_18 Start_7 Start_15) (str.from_int StartInt_8) (ite StartBool Start_12 Start_17)))
   (Start_9 String (x (str.replace Start_6 Start Start_1) (str.from_int StartInt_4) (ite StartBool_3 Start_4 Start_3)))
   (Start_7 String ("1" (str.++ Start_7 Start_5) (str.at Start_9 StartInt_1) (str.substr Start_8 StartInt_4 StartInt_1) (ite StartBool_3 Start_7 Start_2)))
   (StartInt_10 Int (0))
   (Start_13 String ("" y "a" x "b" (ite StartBool_5 Start_9 Start_7)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_2) (str.< Start_7 Start) (str.<= Start_7 Start_4) (str.suffixof Start_4 Start_8)))
   (StartInt_9 Int (1 0 (str.indexof Start_2 Start_2 StartInt_11) (str.to_int Start_6)))
   (Start_17 String ("0" (str.at Start_11 StartInt_6) (str.replace Start_10 Start_15 Start_10) (str.from_int StartInt_4) (ite StartBool_2 Start_15 Start_6)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start_4 Start_1 StartInt_3)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_2) (str.prefixof Start_5 Start_5) (str.suffixof Start_4 Start_1) (str.contains Start_4 Start) (= StartInt_3 StartInt_5)))
   (Start_10 String ("1" (str.++ Start_6 Start_11) (str.at Start_8 StartInt_5) (str.substr Start StartInt_1 StartInt_5) (str.replace Start_8 Start_9 Start_12) (ite StartBool Start_11 Start_10)))
   (Start_5 String (y (str.++ Start_5 Start_1) (str.at Start_4 StartInt_3) (str.substr Start StartInt_4 StartInt_3) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_5)))
   (Start_8 String ("" "b" (ite StartBool_3 Start_2 Start_1)))
   (Start_6 String ("a"))
   (StartInt_3 Int (0 1 (str.len Start_5)))
   (StartBool_4 Bool (true (and StartBool_1 StartBool_2) (str.<= Start_1 Start_11) (str.prefixof Start Start_8) (str.suffixof Start_3 Start_9) (str.contains Start_9 Start_12) (= Start_5 Start_17) (<= StartInt_7 StartInt_8)))
   (StartBool_3 Bool (false true (and StartBool_4 StartBool) (str.suffixof Start_10 Start_1) (<= StartInt_2 StartInt_1)))
   (Start_4 String (x (str.replace Start_17 Start Start_12)))
   (Start_12 String ("1" (str.at Start_6 StartInt_4) (str.substr Start_6 StartInt_5 StartInt_1) (ite StartBool Start_12 Start_2)))
   (Start_14 String ("" (str.++ Start_1 Start_4) (str.at Start_13 StartInt_6)))
   (StartInt_5 Int (0 1 (str.indexof Start_6 Start StartInt_5)))
   (Start_16 String (y "a" (str.from_int StartInt_7) (ite StartBool_3 Start_2 Start_9)))
   (Start_11 String (x "0" (str.++ Start_9 Start_5) (str.substr Start_13 StartInt_2 StartInt_4) (str.replace Start_3 Start_14 Start_13) (ite StartBool_3 Start_2 Start_7)))
   (StartInt_6 Int (1 (str.len Start_8) (str.indexof Start_4 Start_15 StartInt)))
   (Start_15 String ("b" x y (str.replace Start_14 Start_13 Start_2) (str.from_int StartInt) (ite StartBool_3 Start_5 Start_4)))
   (Start_18 String ("b" (str.at Start_10 StartInt_9) (str.substr Start_19 StartInt_3 StartInt_8) (str.replace Start_5 Start_9 Start_6) (str.from_int StartInt_10)))
   (StartInt_2 Int (1 0))
   (StartBool_5 Bool (true false (not StartBool_5) (and StartBool_3 StartBool) (str.<= Start_5 Start_1) (= Start Start_16) (<= StartInt_5 StartInt_4)))
   (StartInt_8 Int (0 (str.len Start_15) (str.to_int Start_16)))
   (Start_3 String ("" "b" "0" (str.++ Start_1 Start_4) (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_2)))
   (StartInt_7 Int (1 0))
   (StartInt_4 Int (1 (str.len Start_17) (str.indexof Start_9 Start_16 StartInt_2) (str.to_int Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" x (str.at "1" (str.indexof "1" y 0)))))

(check-synth)
