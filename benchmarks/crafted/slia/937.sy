(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (Start_5 String) (Start_3 String) (StartInt_2 Int) (Start_6 String) (Start_1 String) (StartInt_3 Int) (Start_4 String) (Start_2 String) (StartInt_1 Int))
  ((Start String ("0" (str.++ Start Start_1) (str.at Start StartInt) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.to_int Start_2)))
   (StartBool Bool (false (str.< Start_2 Start_2) (str.<= Start_2 Start_2) (str.prefixof Start_3 Start) (str.contains Start_3 Start_5) (= Start_2 Start_2) (<= StartInt StartInt_2)))
   (StartBool_1 Bool (true (str.< Start_3 Start_4) (str.suffixof Start Start) (str.contains Start_5 Start_4) (= StartInt_3 StartInt_1) (<= StartInt_2 StartInt_3)))
   (Start_5 String (x (str.++ Start_4 Start_6) (str.from_int StartInt_1) (ite StartBool_1 Start Start_1)))
   (Start_3 String (y (str.at Start StartInt_1) (str.substr Start_2 StartInt_2 StartInt)))
   (StartInt_2 Int (0))
   (Start_6 String (x "a" (str.++ Start_3 Start_1) (str.substr Start_4 StartInt_3 StartInt)))
   (Start_1 String (x (str.++ Start Start_1) (str.at Start_2 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 (str.to_int Start_6)))
   (Start_4 String ("b" (str.substr Start StartInt StartInt_2) (str.replace Start_4 Start_2 Start_1) (str.from_int StartInt_1)))
   (Start_2 String ("0" (str.++ Start_2 Start_3) (str.at Start_3 StartInt_2) (str.replace Start_3 Start Start) (str.from_int StartInt_2) (ite StartBool Start_1 Start_4)))
   (StartInt_1 Int (1 0 (str.len Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 0) y)))

(check-synth)
