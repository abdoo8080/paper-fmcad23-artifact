(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_4 Int) (Start_4 String) (StartInt_1 Int) (StartInt_7 Int) (Start_2 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_5 String) (Start_13 String) (Start_1 String) (Start_7 String) (StartBool_4 Bool) (Start_10 String) (Start_3 String) (Start_11 String) (StartBool_7 Bool) (Start_6 String) (StartInt_6 Int) (StartBool_8 Bool) (Start_9 String) (StartBool_2 Bool) (Start_8 String) (StartBool_5 Bool) (StartInt_5 Int) (StartInt_3 Int) (Start_12 String) (StartBool_3 Bool) (StartBool_6 Bool))
  ((Start String ("1" "0" (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_3)))
   (StartInt Int (0 1 (str.to_int Start_1)))
   (StartBool Bool (false (and StartBool_3 StartBool) (str.< Start_10 Start_7) (str.<= Start_9 Start_6) (str.prefixof Start_6 Start_9) (str.contains Start_3 Start) (= Start_2 Start_4) (<= StartInt StartInt_2)))
   (StartInt_4 Int (0 1 (str.len Start_2) (str.indexof Start_1 Start_5 StartInt_1) (str.to_int Start_6)))
   (Start_4 String ("b" (str.++ Start_4 Start_3) (str.at Start_4 StartInt_3) (str.from_int StartInt_4)))
   (StartInt_1 Int (0 1 (str.len Start_1)))
   (StartInt_7 Int (1 (str.to_int Start_4)))
   (Start_2 String ("b" (str.++ Start_3 Start) (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (str.suffixof Start_9 Start_9) (str.contains Start_10 Start_1) (= Start_3 Start_9) (<= StartInt_4 StartInt_4)))
   (StartInt_2 Int (1 0 (str.len Start_3)))
   (Start_5 String ("1" (str.replace Start_6 Start_1 Start_5) (str.from_int StartInt_5) (ite StartBool Start Start_7)))
   (Start_13 String ("" (str.++ Start_12 Start_1) (str.at Start_1 StartInt_3) (str.substr Start_4 StartInt_4 StartInt_2) (str.replace Start_3 Start_6 Start_8)))
   (Start_1 String ("a" x y "0" (str.++ Start Start_1) (str.replace Start_4 Start_1 Start)))
   (Start_7 String ("" (str.++ Start_3 Start) (str.at Start_8 StartInt_3) (str.substr Start_8 StartInt StartInt_4) (ite StartBool_1 Start Start_7)))
   (StartBool_4 Bool (false true (not StartBool_7) (and StartBool_6 StartBool_6) (str.< Start_12 Start_1) (<= StartInt_1 StartInt_2)))
   (Start_10 String ("b" y (str.substr Start_8 StartInt_6 StartInt_1) (str.replace Start_1 Start_7 Start) (str.from_int StartInt_5)))
   (Start_3 String ("" "0" (str.++ Start_1 Start_2) (str.from_int StartInt_2)))
   (Start_11 String ("a" "0" "b" "" (str.++ Start_3 Start_2) (str.substr Start_9 StartInt StartInt_2) (str.from_int StartInt_5) (ite StartBool_2 Start_2 Start_3)))
   (StartBool_7 Bool (false (not StartBool_3) (and StartBool_7 StartBool_8) (str.<= Start_6 Start_3) (str.suffixof Start_6 Start_8) (= Start_5 Start_4) (<= StartInt_1 StartInt_4)))
   (Start_6 String ("b" (str.++ Start Start_4) (str.at Start_2 StartInt) (ite StartBool Start_1 Start_4)))
   (StartInt_6 Int (1 0 (str.len Start_6)))
   (StartBool_8 Bool (false true (and StartBool_1 StartBool_5) (str.suffixof Start_8 Start_9) (<= StartInt StartInt_5)))
   (Start_9 String ("1" "a" "0" (str.at Start_8 StartInt_7) (str.substr Start_4 StartInt_5 StartInt_6) (str.replace Start_4 Start_7 Start_4) (ite StartBool_2 Start_9 Start_2)))
   (StartBool_2 Bool (true false (and StartBool_2 StartBool) (str.<= Start_11 Start_12) (= Start_5 Start_2)))
   (Start_8 String (y (str.substr Start_7 StartInt_2 StartInt_7) (str.replace Start Start_3 Start_5) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_8)))
   (StartBool_5 Bool (true (str.<= Start_1 Start_2) (str.prefixof Start_11 Start_2) (str.suffixof Start_4 Start_2) (= StartInt_3 StartInt) (<= StartInt_7 StartInt_2)))
   (StartInt_5 Int (1 0 (str.len Start_5) (str.indexof Start_9 Start_6 StartInt_3)))
   (StartInt_3 Int (1))
   (Start_12 String (x "b" "" (str.++ Start_9 Start_11) (str.at Start_4 StartInt_1) (str.replace Start_3 Start_1 Start_6) (str.from_int StartInt) (ite StartBool_2 Start_7 Start_1)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_5 StartBool_6) (str.<= Start_3 Start_6) (str.prefixof Start Start_1) (str.suffixof Start_9 Start_1) (str.contains Start_7 Start_13) (= StartInt_7 StartInt_7) (<= StartInt_5 StartInt_3)))
   (StartBool_6 Bool (true false (str.< Start_1 Start_10) (str.contains Start_2 Start_6) (= Start_2 Start_5) (<= StartInt_2 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "1" (str.++ y "b"))))

(check-synth)
