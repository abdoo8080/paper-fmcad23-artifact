(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartInt_3 Int) (StartInt_2 Int) (Start_3 String) (Start_1 String) (Start_4 String) (StartBool_1 Bool) (StartInt_1 Int) (StartInt_4 Int) (Start_5 String) (Start_7 String) (Start_6 String))
  ((Start String ("b" (str.replace Start_1 Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start_4)))
   (StartBool Bool (false true (str.< Start_6 Start_4) (str.<= Start_4 Start_6)))
   (Start_2 String ("1" "b" (str.substr Start_2 StartInt_4 StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt_3 Int (0 (str.to_int Start_1)))
   (StartInt_2 Int (1 0 (str.to_int Start_4)))
   (Start_3 String (x (str.++ Start_3 Start) (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt_2)))
   (Start_1 String (x "0" "b" (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_2 Start Start_3)))
   (Start_4 String ("" x y (str.at Start StartInt_3) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_1)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_2 Start_3) (str.<= Start_3 Start) (str.prefixof Start_3 Start_2) (str.contains Start Start_1)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_4 StartInt)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_5 StartInt) (str.to_int Start_1)))
   (Start_5 String ("" "0" (ite StartBool_1 Start_1 Start_6)))
   (Start_7 String ("a" (str.substr Start_5 StartInt_2 StartInt_4)))
   (Start_6 String ("a" (str.++ Start_1 Start_3) (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start_7 Start Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace (str.++ "1" "b") x "") x)))

(check-synth)
