(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartInt_10 Int) (StartInt_3 Int) (StartBool_4 Bool) (Start_9 String) (StartInt_9 Int) (Start_6 String) (StartInt_4 Int) (Start_13 String) (Start_3 String) (Start_8 String) (Start_5 String) (Start_7 String) (Start_14 String) (StartInt_6 Int) (StartInt_8 Int) (StartInt_7 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_10 String) (StartInt_5 Int) (StartInt_11 Int) (Start_12 String) (StartInt_2 Int) (Start_2 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_1 String) (Start_4 String) (Start_11 String) (StartBool_5 Bool))
  ((Start String ("b" y "a" (str.at Start_1 StartInt) (str.replace Start_2 Start_2 Start) (ite StartBool Start_3 Start_1)))
   (StartInt Int (1 0 (str.indexof Start_12 Start_10 StartInt_4)))
   (StartBool Bool (false (and StartBool_1 StartBool_5) (str.< Start_2 Start_2) (str.prefixof Start_6 Start_12) (str.suffixof Start_2 Start_10) (= Start_5 Start_3)))
   (Start_15 String ("b" (str.++ Start_11 Start_11) (str.at Start_11 StartInt_7) (str.replace Start_6 Start_2 Start_11) (str.from_int StartInt_8) (ite StartBool_4 Start_13 Start_6)))
   (StartInt_10 Int (0 (str.indexof Start_15 Start_3 StartInt_1)))
   (StartInt_3 Int (0 (str.indexof Start_8 Start_5 StartInt_1) (str.to_int Start_5)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool_1 StartBool) (str.contains Start_7 Start_5) (= Start_2 Start_3) (<= StartInt_3 StartInt_4)))
   (Start_9 String ("1" y (str.++ Start_5 Start)))
   (StartInt_9 Int (0))
   (Start_6 String ("1" "b" (str.from_int StartInt_6)))
   (StartInt_4 Int (1 0 (str.len Start_8) (str.indexof Start_6 Start_1 StartInt_1)))
   (Start_13 String (y (str.at Start_2 StartInt_1) (str.substr Start_12 StartInt_10 StartInt) (ite StartBool_5 Start_13 Start_8)))
   (Start_3 String (x (str.at Start_4 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start_3 Start Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start)))
   (Start_8 String ("1" y (str.++ Start_9 Start_9) (str.at Start_6 StartInt) (str.from_int StartInt_5)))
   (Start_5 String ("0" "b" (str.at Start_2 StartInt) (str.replace Start_4 Start_1 Start_6) (ite StartBool_4 Start_4 Start)))
   (Start_7 String ("b" (str.++ Start_6 Start_9) (str.replace Start_10 Start_8 Start_5)))
   (Start_14 String ("0" "" (str.++ Start_2 Start_1) (str.at Start_9 StartInt_4) (str.substr Start_7 StartInt StartInt_4) (str.replace Start_10 Start_1 Start_1) (str.from_int StartInt_11)))
   (StartInt_6 Int (1 (str.indexof Start_1 Start_4 StartInt_4) (str.to_int Start_1)))
   (StartInt_8 Int (0 1 (str.len Start_6) (str.to_int Start_3)))
   (StartInt_7 Int (0 (str.indexof Start_1 Start_2 StartInt_5) (str.to_int Start_5)))
   (StartBool_3 Bool (false true (str.suffixof Start_7 Start_10) (<= StartInt_1 StartInt_3)))
   (StartBool_2 Bool (true (str.< Start_5 Start_7) (= StartInt_2 StartInt_3)))
   (Start_10 String (x (str.at Start_3 StartInt_7) (str.from_int StartInt_8) (ite StartBool_1 Start_3 Start_10)))
   (StartInt_5 Int (1 0 (str.len Start_9) (str.indexof Start_4 Start StartInt_6) (str.to_int Start_1)))
   (StartInt_11 Int (1 0 (str.indexof Start Start_1 StartInt_11)))
   (Start_12 String ("0" (str.++ Start_7 Start_9) (str.substr Start_7 StartInt_2 StartInt_8) (str.replace Start_13 Start Start_11) (str.from_int StartInt) (ite StartBool Start_8 Start_13)))
   (StartInt_2 Int (0))
   (Start_2 String (x (str.++ Start_5 Start_3) (str.at Start StartInt_7) (str.substr Start_5 StartInt_7 StartInt_6) (str.replace Start_2 Start_10 Start_9) (str.from_int StartInt_6) (ite StartBool_2 Start_11 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_5) (str.to_int Start_7)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_5 Start_1) (str.<= Start_4 Start_2) (str.contains Start_2 Start_3) (= Start_2 Start_3)))
   (Start_1 String ("0" (str.++ Start_5 Start_7) (str.at Start_10 StartInt_8) (str.substr Start StartInt_9 StartInt_6) (ite StartBool_4 Start_12 Start_12)))
   (Start_4 String ("a" (ite StartBool_2 Start Start_5)))
   (Start_11 String ("b" (str.++ Start_9 Start_11) (str.at Start_10 StartInt_2) (str.replace Start_11 Start_9 Start_6) (str.from_int StartInt_5)))
   (StartBool_5 Bool (true false (not StartBool) (str.prefixof Start_3 Start_14) (str.suffixof Start_10 Start_5) (str.contains Start_10 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "a" "1") (str.replace "1" "" "b"))))

(check-synth)
