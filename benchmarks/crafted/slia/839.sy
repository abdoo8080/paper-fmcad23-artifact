(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_6 String) (Start_1 String) (StartInt_6 Int) (StartInt_4 Int) (StartInt_2 Int) (Start_12 String) (Start_11 String) (Start_7 String) (StartInt_9 Int) (Start_4 String) (Start_13 String) (Start_3 String) (StartBool_3 Bool) (StartInt_10 Int) (StartInt_3 Int) (StartInt_7 Int) (Start_8 String) (Start_14 String) (StartInt_8 Int) (Start_16 String) (StartBool_4 Bool) (StartInt_5 Int) (Start_15 String) (StartBool_2 Bool) (Start_5 String) (Start_10 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_9 String) (Start_2 String))
  ((Start String ("" "a" (str.++ Start_1 Start_2) (str.replace Start_2 Start Start_3) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start_9)))
   (StartBool Bool (false (not StartBool_3) (str.prefixof Start_16 Start_15) (str.suffixof Start_15 Start_12) (= StartInt_10 StartInt_10)))
   (Start_17 String (x (str.substr Start_5 StartInt StartInt_7) (str.replace Start_1 Start_10 Start_1)))
   (Start_6 String ("a" "" x y "b" (str.++ Start_4 Start) (str.at Start_2 StartInt) (ite StartBool_1 Start_7 Start_1)))
   (Start_1 String (y "0" "1" "b" (str.++ Start_16 Start_14) (str.at Start_5 StartInt_3) (str.substr Start_17 StartInt_1 StartInt_5) (str.from_int StartInt_5)))
   (StartInt_6 Int (0 1 (str.len Start_6) (str.indexof Start_4 Start_10 StartInt_9)))
   (StartInt_4 Int (0))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_5 Start_6 StartInt)))
   (Start_12 String ("" (str.++ Start_9 Start_3) (str.at Start_4 StartInt_7) (str.substr Start_3 StartInt_7 StartInt_3) (str.from_int StartInt_6) (ite StartBool_1 Start_12 Start_11)))
   (Start_11 String ("a" (str.at Start_9 StartInt_2) (str.substr Start_10 StartInt_4 StartInt_4) (ite StartBool_2 Start_8 Start_1)))
   (Start_7 String ("a" (str.replace Start_8 Start_7 Start) (str.from_int StartInt_2)))
   (StartInt_9 Int (0 1 (str.indexof Start_14 Start_15 StartInt_1)))
   (Start_4 String ("" (str.at Start_3 StartInt) (str.replace Start_4 Start_5 Start_6) (str.from_int StartInt_1) (ite StartBool Start_5 Start)))
   (Start_13 String ("a" (str.++ Start_9 Start_13) (str.at Start_11 StartInt_2) (str.replace Start_10 Start_11 Start_6) (str.from_int StartInt_8)))
   (Start_3 String ("b" "a" "1" (str.++ Start Start) (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt_1 StartInt)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_2) (str.< Start_11 Start_4) (str.suffixof Start_11 Start_8) (str.contains Start Start) (= Start_12 Start_3) (<= StartInt_2 StartInt_5)))
   (StartInt_10 Int (0 (str.indexof Start_15 Start_7 StartInt_6)))
   (StartInt_3 Int (1 (str.to_int Start_5)))
   (StartInt_7 Int (0 1 (str.indexof Start_13 Start_5 StartInt_2)))
   (Start_8 String ("a" (str.at Start_9 StartInt_3) (str.substr Start StartInt StartInt_4)))
   (Start_14 String ("0" y (str.at Start_6 StartInt_9) (str.substr Start_7 StartInt_8 StartInt_4) (ite StartBool_1 Start_10 Start_11)))
   (StartInt_8 Int (0 1))
   (Start_16 String ("" "1" (str.substr Start_7 StartInt StartInt_6) (str.replace Start_5 Start_4 Start_15) (str.from_int StartInt_5) (ite StartBool_2 Start_6 Start_13)))
   (StartBool_4 Bool (false true (str.suffixof Start_14 Start_7) (str.contains Start_3 Start_2) (= StartInt_4 StartInt_5)))
   (StartInt_5 Int (0 1))
   (Start_15 String (y "1" (str.replace Start_7 Start_2 Start_3) (str.from_int StartInt)))
   (StartBool_2 Bool (true (str.< Start_5 Start_4) (str.<= Start_10 Start_6) (str.suffixof Start_6 Start_9) (str.contains Start_7 Start_8) (= Start_10 Start_6) (= StartInt_3 StartInt_3)))
   (Start_5 String ("1" "b" y "a" (str.substr Start_12 StartInt_7 StartInt_1)))
   (Start_10 String (x "a" "1" "" (str.++ Start_5 Start_6) (str.substr Start_4 StartInt_1 StartInt_5) (str.replace Start Start_11 Start_11) (str.from_int StartInt_6) (ite StartBool_3 Start_6 Start_8)))
   (StartBool_1 Bool (true (str.< Start_3 Start_14) (str.<= Start_12 Start_7) (str.prefixof Start_1 Start_6) (str.suffixof Start_2 Start_4) (str.contains Start_2 Start_5) (= StartInt_2 StartInt_9)))
   (StartInt_1 Int (1 (str.len Start_3) (str.to_int Start_1)))
   (Start_9 String ("b" (ite StartBool Start_10 Start_11)))
   (Start_2 String (y (str.replace Start_15 Start_16 Start_9) (ite StartBool_3 Start_9 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace x y "1") 1)))

(check-synth)
