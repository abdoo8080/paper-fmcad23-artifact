(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartInt_2 Int) (Start_1 String) (Start_7 String) (StartInt_3 Int) (Start_2 String) (Start_3 String) (StartBool_1 Bool) (Start_5 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_4 String) (Start_6 String) (StartBool_3 Bool) (StartInt_5 Int))
  ((Start String ("0" (str.at Start StartInt) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_2 Start_1 StartInt_1) (str.to_int Start_7)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_3 StartBool_1) (str.suffixof Start_1 Start_6) (= Start_4 Start_3)))
   (StartInt_1 Int (0 (str.len Start_2)))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_7 StartInt_4)))
   (Start_1 String (x "" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_2 Start_1) (str.from_int StartInt_3) (ite StartBool Start_2 Start_1)))
   (Start_7 String ("a" (str.++ Start_4 Start_4) (str.at Start_4 StartInt) (str.replace Start_1 Start_7 Start_1)))
   (StartInt_3 Int (0 1))
   (Start_2 String ("1" (str.++ Start_1 Start_2) (str.at Start_3 StartInt_3) (str.substr Start_4 StartInt_3 StartInt_3) (str.replace Start Start_4 Start_2) (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start_1)))
   (Start_3 String ("1" "" (str.++ Start_4 Start_3) (str.substr Start_6 StartInt_5 StartInt_5) (str.from_int StartInt_2) (ite StartBool Start_4 Start_1)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool StartBool_1) (str.< Start_1 Start_2) (str.suffixof Start_3 Start) (str.contains Start_2 Start_3) (= StartInt_1 StartInt_3) (<= StartInt_4 StartInt_2)))
   (Start_5 String (x y (str.at Start_2 StartInt_3) (str.replace Start_5 Start Start_3)))
   (StartInt_4 Int (1 0 (str.to_int Start_1)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool) (str.suffixof Start_4 Start_4) (= Start_4 Start) (= StartInt_2 StartInt_2) (<= StartInt StartInt_3)))
   (Start_4 String (y "1" (str.at Start_2 StartInt_4) (str.replace Start Start_2 Start_1) (ite StartBool_3 Start_5 Start_2)))
   (Start_6 String (x y "1" (str.++ Start_1 Start_3) (str.replace Start_5 Start_7 Start_7) (ite StartBool_2 Start_2 Start_5)))
   (StartBool_3 Bool (false (and StartBool_2 StartBool_2) (str.< Start Start_1) (str.prefixof Start_4 Start_4)))
   (StartInt_5 Int (1 0 (str.len Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "a" "") 0)))

(check-synth)
