(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (StartBool_6 Bool) (Start_18 String) (Start_20 String) (Start_10 String) (Start_2 String) (Start_3 String) (Start_16 String) (Start_8 String) (Start_15 String) (Start_5 String) (StartBool_5 Bool) (Start_7 String) (Start_11 String) (Start_6 String) (StartBool_4 Bool) (StartBool_1 Bool) (Start_1 String) (Start_12 String) (StartInt_5 Int) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_4 Int) (Start_13 String) (Start_17 String) (Start_9 String) (StartInt_6 Int) (StartInt_7 Int) (Start_14 String) (StartInt_8 Int) (StartInt_3 Int) (Start_19 String) (StartBool_2 Bool) (Start_21 String) (StartInt_9 Int) (Start_4 String) (StartInt_1 Int))
  ((Start String (x (str.++ Start_1 Start_1) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start Start_1) (ite StartBool_1 Start Start)))
   (StartInt Int (0 (str.len Start_19) (str.indexof Start_4 Start_9 StartInt)))
   (StartBool Bool (false (not StartBool_6) (str.< Start Start_3) (str.<= Start_9 Start_7) (str.prefixof Start_2 Start_16) (str.contains Start Start_10) (= Start_20 Start_12) (= StartInt_3 StartInt)))
   (StartInt_10 Int (1 0 (str.indexof Start_11 Start_4 StartInt_9) (str.to_int Start_3)))
   (StartBool_6 Bool (false (and StartBool_1 StartBool_5) (str.< Start_17 Start_13) (str.prefixof Start_15 Start_6) (str.suffixof Start_16 Start_5) (= StartInt_2 StartInt_2) (<= StartInt_4 StartInt_2)))
   (Start_18 String (y (str.replace Start_11 Start_12 Start)))
   (Start_20 String ("a" x))
   (Start_10 String ("" (str.at Start_1 StartInt_2) (str.substr Start_4 StartInt_1 StartInt) (str.replace Start_8 Start Start_12)))
   (Start_2 String ("a" (str.++ Start Start_1) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_4 Start_3 Start_3) (str.from_int StartInt_2) (ite StartBool_2 Start Start_5)))
   (Start_3 String ("1" (str.from_int StartInt) (ite StartBool_1 Start_2 Start_2)))
   (Start_16 String ("0" y (str.at Start StartInt_8) (ite StartBool_6 Start_17 Start_18)))
   (Start_8 String ("0" "b" "a" y (str.++ Start_5 Start_4) (str.substr Start_1 StartInt_3 StartInt) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt_4) (ite StartBool_4 Start_8 Start_5)))
   (Start_15 String ("a" x y "" (str.substr Start_8 StartInt_2 StartInt_8) (str.from_int StartInt_1) (ite StartBool Start_11 Start_10)))
   (Start_5 String ("0" y (str.replace Start_1 Start_2 Start_6) (str.from_int StartInt_1) (ite StartBool_2 Start_1 Start)))
   (StartBool_5 Bool (true (not StartBool) (str.<= Start_2 Start_9) (str.prefixof Start_10 Start_14) (str.suffixof Start_7 Start_11) (str.contains Start_3 Start_7) (= StartInt_7 StartInt_5)))
   (Start_7 String (y (str.++ Start_2 Start_8) (str.at Start_5 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_6 Start_4)))
   (Start_11 String ("a" (str.++ Start_1 Start_2) (str.substr Start_11 StartInt_1 StartInt_4) (ite StartBool_2 Start_11 Start_8)))
   (Start_6 String ("0" y "a" "1" "" x (str.++ Start_2 Start) (str.substr Start_4 StartInt_3 StartInt) (str.from_int StartInt_1) (ite StartBool_3 Start_6 Start_7)))
   (StartBool_4 Bool (true (not StartBool) (str.prefixof Start_6 Start_9) (= Start_7 Start_7) (= StartInt_1 StartInt_1) (<= StartInt_3 StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_2 Start_2) (str.<= Start Start) (str.suffixof Start_1 Start_1) (str.contains Start_1 Start_3)))
   (Start_1 String (y "a" "" "1" "b" (str.at Start_2 StartInt_3) (str.replace Start_12 Start_4 Start_6) (str.from_int StartInt_9)))
   (Start_12 String ("b" "1" y (str.at Start_3 StartInt_5)))
   (StartInt_5 Int (1 0))
   (StartInt_2 Int (0 (str.indexof Start_7 Start StartInt_2)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_5) (str.< Start_7 Start) (str.<= Start_1 Start_6) (str.prefixof Start_5 Start_13) (str.suffixof Start_2 Start) (str.contains Start_11 Start_11) (= StartInt_5 StartInt_6)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_10 Start_11 StartInt_3) (str.to_int Start_10)))
   (Start_13 String ("0" "b"))
   (Start_17 String ("0" "b" (str.substr Start_18 StartInt StartInt) (str.replace Start_17 Start Start_2) (ite StartBool_2 Start_16 Start_18)))
   (Start_9 String ("" (str.++ Start_8 Start) (str.at Start_4 StartInt_3) (str.substr Start_9 StartInt_3 StartInt) (str.replace Start_2 Start_4 Start_1) (ite StartBool Start_4 Start_5)))
   (StartInt_6 Int (0 (str.len Start_5) (str.indexof Start_9 Start_9 StartInt_3)))
   (StartInt_7 Int (1 (str.to_int Start)))
   (Start_14 String (y "a" x "1" (str.++ Start Start_15) (str.substr Start StartInt_7 StartInt_6) (str.from_int StartInt_4)))
   (StartInt_8 Int (1 0 (str.indexof Start_2 Start_9 StartInt_9) (str.to_int Start_7)))
   (StartInt_3 Int (1 (str.len Start_7) (str.indexof Start_2 Start_5 StartInt_5) (str.to_int Start_8)))
   (Start_19 String ("" (str.++ Start Start_20) (str.at Start_5 StartInt_4) (str.replace Start_10 Start_2 Start_19) (str.from_int StartInt_10) (ite StartBool_5 Start_17 Start_21)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_3) (str.< Start_1 Start_7) (str.contains Start_1 Start_8) (= Start_1 Start_5) (= StartInt_1 StartInt_8)))
   (Start_21 String ("a" "b" (str.at Start_13 StartInt_4) (str.substr Start_9 StartInt_1 StartInt_4) (str.replace Start_2 Start_4 Start_10) (str.from_int StartInt_1)))
   (StartInt_9 Int (1))
   (Start_4 String ("b" (str.++ Start_7 Start_7)))
   (StartInt_1 Int (1 (str.len Start_9) (str.indexof Start_11 Start_16 StartInt_3) (str.to_int Start_17)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (ite (str.< "" x) y "b") x (str.replace "" y "b"))))

(check-synth)
