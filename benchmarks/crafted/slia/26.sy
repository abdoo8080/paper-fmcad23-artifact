(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_4 Int) (StartInt_6 Int) (StartBool_3 Bool) (StartInt_7 Int) (Start_10 String) (Start_11 String) (StartBool_2 Bool) (Start_9 String) (Start_2 String) (StartInt_2 Int) (Start_12 String) (StartInt_3 Int) (Start_3 String) (StartBool_1 Bool) (StartInt_5 Int) (StartBool_4 Bool) (Start_4 String) (StartInt_1 Int) (Start_6 String) (Start_7 String) (Start_5 String) (Start_8 String))
  ((Start String (y x "b" "1" "a" (ite StartBool Start Start)))
   (StartInt Int (0 (str.len Start) (str.indexof Start_1 Start_2 StartInt_1) (str.to_int Start)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_4 StartBool) (str.<= Start_1 Start_3) (= Start_12 Start_1) (<= StartInt_7 StartInt)))
   (Start_1 String ("b" "0" y (str.++ Start Start_1) (str.from_int StartInt_4) (ite StartBool_3 Start_9 Start_12)))
   (StartInt_4 Int (1 (str.len Start_1) (str.to_int Start_2)))
   (StartInt_6 Int (1 0 (str.len Start_11) (str.indexof Start_2 Start_3 StartInt_7)))
   (StartBool_3 Bool (false (not StartBool_3) (and StartBool_2 StartBool_3) (str.prefixof Start_2 Start_2) (= Start_1 Start_4) (<= StartInt_2 StartInt_1)))
   (StartInt_7 Int (0 (str.len Start_3) (str.indexof Start_12 Start_2 StartInt_6) (str.to_int Start)))
   (Start_10 String (y "a" (str.substr Start_11 StartInt_7 StartInt_5) (str.replace Start_7 Start_8 Start_2)))
   (Start_11 String (x (ite StartBool_3 Start_6 Start_2)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_3) (str.<= Start_9 Start_4) (str.contains Start_1 Start_10) (= Start_11 Start_2) (= StartInt_5 StartInt_3) (<= StartInt_5 StartInt_3)))
   (Start_9 String (y (str.++ Start_9 Start_1) (str.at Start_2 StartInt_2) (str.replace Start_1 Start_4 Start_9)))
   (Start_2 String ("a" y (str.from_int StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.indexof Start Start StartInt_3) (str.to_int Start_1)))
   (Start_12 String ("0" "b" (str.at Start_7 StartInt_3) (str.replace Start_5 Start_2 Start_4) (ite StartBool Start_5 Start_11)))
   (StartInt_3 Int (1 (str.indexof Start_1 Start_1 StartInt) (str.to_int Start)))
   (Start_3 String ("b" (str.++ Start_2 Start_2) (str.at Start_3 StartInt_4) (str.replace Start_4 Start_1 Start_3) (str.from_int StartInt_4) (ite StartBool_1 Start_4 Start_3)))
   (StartBool_1 Bool (true (str.< Start_4 Start_5) (str.prefixof Start_3 Start_1) (= StartInt_3 StartInt_4) (<= StartInt_5 StartInt_2)))
   (StartInt_5 Int (0 1 (str.indexof Start_3 Start StartInt_2)))
   (StartBool_4 Bool (true (not StartBool_2) (str.<= Start_2 Start_1) (str.prefixof Start_9 Start_7) (str.suffixof Start_5 Start_12) (= Start_2 Start_10) (= StartInt_7 StartInt_7)))
   (Start_4 String (y "1" x (str.at Start_10 StartInt) (str.replace Start_1 Start_6 Start_7) (ite StartBool_2 Start_7 Start_10)))
   (StartInt_1 Int (0 1 (str.to_int Start_2)))
   (Start_6 String ("b" (str.++ Start_4 Start_5) (str.at Start_6 StartInt) (str.substr Start_1 StartInt_3 StartInt_2) (str.replace Start Start_7 Start_1)))
   (Start_7 String ("a" (str.++ Start_4 Start) (str.at Start_3 StartInt_6) (str.substr Start StartInt_5 StartInt_6) (str.replace Start_4 Start_7 Start_7) (str.from_int StartInt) (ite StartBool_2 Start_5 Start_8)))
   (Start_5 String ("1" "" "0" (str.substr Start_6 StartInt_4 StartInt_4) (str.from_int StartInt_1)))
   (Start_8 String (x (str.at Start_5 StartInt_5) (str.replace Start_9 Start_9 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "1" "0") 1)))

(check-synth)
