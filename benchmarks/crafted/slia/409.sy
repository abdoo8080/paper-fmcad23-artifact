(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_1 Int) (Start_9 String) (Start_14 String) (Start_6 String) (Start_13 String) (Start_15 String) (Start_4 String) (StartInt_4 Int) (Start_12 String) (StartInt_3 Int) (StartInt_7 Int) (Start_5 String) (Start_3 String) (Start_8 String) (StartInt_2 Int) (Start_17 String) (Start_1 String) (Start_2 String) (Start_11 String) (StartInt_5 Int) (StartInt_6 Int) (Start_10 String) (Start_16 String) (StartBool_3 Bool) (StartInt_8 Int))
  ((Start String ("" y "0" (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt_1) (str.replace Start Start Start) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.to_int Start_11)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_1 StartBool_3) (str.<= Start_8 Start_5) (str.suffixof Start_15 Start_15) (= StartInt_1 StartInt_6) (<= StartInt_6 StartInt_4)))
   (Start_7 String (y x "" "1" "b" (str.++ Start Start_7) (str.at Start_1 StartInt_4) (str.substr Start_6 StartInt_2 StartInt) (str.replace Start_7 Start_5 Start)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool) (str.< Start Start_1) (str.prefixof Start_7 Start_5) (str.contains Start_10 Start_6) (= Start_11 Start_13)))
   (StartBool_1 Bool (false (not StartBool) (str.suffixof Start_8 Start_7) (= StartInt_3 StartInt_4) (<= StartInt_3 StartInt_3)))
   (StartInt_1 Int (1 0 (str.len Start_2) (str.indexof Start Start_2 StartInt_1) (str.to_int Start_1)))
   (Start_9 String (x y (str.at Start_6 StartInt_4) (str.substr Start_5 StartInt_3 StartInt) (str.replace Start_6 Start Start_7) (ite StartBool Start_8 Start_5)))
   (Start_14 String ("" (str.++ Start_12 Start_15) (str.substr Start_4 StartInt_2 StartInt_6) (str.replace Start_13 Start_7 Start_7) (str.from_int StartInt_7)))
   (Start_6 String ("a" x (str.++ Start_3 Start_5) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_1 Start_7 Start_8) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_9)))
   (Start_13 String (x "0" "1" (str.++ Start_3 Start_6) (str.at Start_14 StartInt) (ite StartBool_1 Start_13 Start_10)))
   (Start_15 String (x "b" (str.from_int StartInt_2) (ite StartBool_3 Start_16 Start_7)))
   (Start_4 String (x "b" (str.++ Start_5 Start) (str.substr Start_4 StartInt_3 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_6 Start_1)))
   (StartInt_4 Int (1 0 (str.len Start_7) (str.to_int Start)))
   (Start_12 String ("0" (str.++ Start_4 Start_3) (str.at Start_8 StartInt_5) (str.substr Start_12 StartInt_3 StartInt_6) (ite StartBool_2 Start_11 Start_12)))
   (StartInt_3 Int (1 (str.len Start_7)))
   (StartInt_7 Int (0 (str.to_int Start_1)))
   (Start_5 String ("a" x (str.++ Start_5 Start_4) (str.replace Start_3 Start_1 Start_3) (str.from_int StartInt)))
   (Start_3 String (y (str.++ Start Start) (str.at Start_2 StartInt_2) (str.substr Start_4 StartInt StartInt_2) (str.replace Start Start_5 Start_2) (ite StartBool Start Start)))
   (Start_8 String (y (str.++ Start_5 Start)))
   (StartInt_2 Int (1 (str.len Start_6)))
   (Start_17 String (y (str.substr Start_5 StartInt_5 StartInt_7)))
   (Start_1 String (x (str.++ Start_6 Start_9) (str.at Start_10 StartInt_4) (str.substr Start_6 StartInt_5 StartInt_2) (str.replace Start_6 Start_10 Start_11) (ite StartBool Start_5 Start_2)))
   (Start_2 String ("" (str.at Start_1 StartInt) (str.substr Start_3 StartInt StartInt) (str.replace Start_1 Start Start_3)))
   (Start_11 String (x (str.++ Start_9 Start_7) (str.at Start_10 StartInt_5) (str.substr Start StartInt_1 StartInt_5) (str.replace Start_1 Start_4 Start_1) (str.from_int StartInt)))
   (StartInt_5 Int (0 1 (str.len Start_10)))
   (StartInt_6 Int (0 1 (str.len Start_4)))
   (Start_10 String (x "0" "b" y (str.substr Start_12 StartInt_4 StartInt_5)))
   (Start_16 String ("a" y (str.++ Start_17 Start_9)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool StartBool_1) (str.< Start_1 Start_17) (str.<= Start_6 Start_2) (str.contains Start_16 Start_11) (= StartInt_5 StartInt_2) (<= StartInt_6 StartInt_8)))
   (StartInt_8 Int (1 0 (str.len Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "b" y)))

(check-synth)
