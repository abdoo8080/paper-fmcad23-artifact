(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartBool_2 Bool) (Start_4 String) (Start_11 String) (StartInt_3 Int) (StartBool_4 Bool) (StartInt_2 Int) (Start_10 String) (Start_8 String) (StartInt_1 Int) (StartInt_5 Int) (Start_5 String) (Start_6 String) (Start_9 String) (StartBool_3 Bool) (StartInt_6 Int) (Start_12 String) (StartBool_5 Bool) (Start_3 String) (Start_1 String) (StartInt_7 Int) (StartBool_6 Bool) (Start_7 String) (Start_14 String) (StartInt_4 Int) (Start_2 String) (Start_13 String) (StartBool_1 Bool))
  ((Start String ("a" (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start) (str.to_int Start_2)))
   (StartBool Bool (false (and StartBool_5 StartBool_1) (str.< Start_10 Start_4) (str.<= Start_6 Start_10) (str.contains Start_2 Start_7)))
   (StartInt_8 Int (1 0 (str.len Start_2) (str.to_int Start_4)))
   (StartBool_2 Bool (false true (str.prefixof Start_5 Start_4) (str.suffixof Start_6 Start_2) (str.contains Start_7 Start_2) (= StartInt StartInt_1) (<= StartInt_3 StartInt_4)))
   (Start_4 String (y (str.at Start_5 StartInt_1) (str.replace Start_2 Start_2 Start_6) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start)))
   (Start_11 String (y "0" "a" "1" (str.++ Start_4 Start) (str.replace Start_10 Start_2 Start_9) (ite StartBool Start Start_9)))
   (StartInt_3 Int (1 (str.len Start_8)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool_1) (= Start Start_10) (<= StartInt_7 StartInt)))
   (StartInt_2 Int (0 (str.len Start_6)))
   (Start_10 String ("1" "0" "b" y x "a" (str.at Start_11 StartInt_5) (str.substr Start StartInt_2 StartInt_5) (str.replace Start_3 Start_1 Start_3) (ite StartBool_2 Start_11 Start_6)))
   (Start_8 String (x "" (str.at Start_5 StartInt_4) (str.from_int StartInt_3)))
   (StartInt_1 Int (1 (str.len Start_3) (str.indexof Start_3 Start_11 StartInt_6) (str.to_int Start_5)))
   (StartInt_5 Int (1 0 (str.len Start_11) (str.indexof Start Start_7 StartInt_1) (str.to_int Start_9)))
   (Start_5 String ("b" (str.++ Start_12 Start_3) (str.at Start_12 StartInt_7) (str.substr Start_9 StartInt_3 StartInt_5) (str.replace Start_12 Start_1 Start_12) (str.from_int StartInt_7) (ite StartBool_5 Start_10 Start_11)))
   (Start_6 String ("a" (str.at Start StartInt_2) (str.substr Start_7 StartInt_2 StartInt_1) (ite StartBool_2 Start_1 Start_6)))
   (Start_9 String ("" (str.at Start_4 StartInt_4) (str.replace Start_8 Start_5 Start_1) (ite StartBool_3 Start_2 Start)))
   (StartBool_3 Bool (false true (not StartBool_4) (str.< Start_11 Start) (str.<= Start_11 Start_9) (str.suffixof Start_1 Start_2) (str.contains Start_12 Start_10) (= StartInt_6 StartInt_4) (<= StartInt_3 StartInt_3)))
   (StartInt_6 Int (1 (str.indexof Start_3 Start_12 StartInt_2) (str.to_int Start_7)))
   (Start_12 String ("b" (str.++ Start_9 Start_8) (str.at Start_11 StartInt_7) (str.replace Start_6 Start_4 Start_12) (str.from_int StartInt_4)))
   (StartBool_5 Bool (true (not StartBool) (and StartBool_3 StartBool_2) (str.<= Start_2 Start) (str.prefixof Start Start_2) (= StartInt_2 StartInt_4) (<= StartInt_7 StartInt_2)))
   (Start_3 String (x "a" "0" (str.replace Start_13 Start Start_4) (str.from_int StartInt_4) (ite StartBool Start_8 Start)))
   (Start_1 String ("b" "" "1" "a" x (str.at Start StartInt) (str.from_int StartInt)))
   (StartInt_7 Int (0 1 (str.len Start) (str.to_int Start_5)))
   (StartBool_6 Bool (true false (not StartBool_6) (str.< Start_9 Start_3) (str.<= Start_1 Start_14) (str.prefixof Start Start_4) (str.suffixof Start_4 Start) (str.contains Start_2 Start_6) (= Start Start_9) (<= StartInt_5 StartInt_4)))
   (Start_7 String ("1" "a" y "" (str.substr Start_4 StartInt_1 StartInt_4) (str.replace Start_9 Start_10 Start_9) (ite StartBool_1 Start_11 Start_4)))
   (Start_14 String ("" "b" (str.at Start_4 StartInt_5) (str.substr Start_9 StartInt_7 StartInt_8) (ite StartBool_4 Start_10 Start_5)))
   (StartInt_4 Int (1 (str.len Start_7) (str.indexof Start_8 Start_6 StartInt_4) (str.to_int Start_2)))
   (Start_2 String ("b" "1" x "" "a" (str.++ Start_2 Start) (str.at Start_1 StartInt) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_4)))
   (Start_13 String ("" "0" (str.at Start_5 StartInt_6) (str.replace Start_7 Start_1 Start_11) (str.from_int StartInt_2) (ite StartBool_4 Start_8 Start_3)))
   (StartBool_1 Bool (true (and StartBool_6 StartBool_3) (str.prefixof Start_12 Start_7) (= StartInt_5 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "a" x)))

(check-synth)
