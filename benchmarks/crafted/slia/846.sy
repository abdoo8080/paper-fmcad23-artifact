(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_13 String) (Start_5 String) (StartBool_6 Bool) (StartBool_8 Bool) (Start_8 String) (StartInt_3 Int) (StartInt_4 Int) (StartBool_5 Bool) (Start_12 String) (StartInt_8 Int) (StartBool_1 Bool) (Start_9 String) (Start_6 String) (Start_11 String) (StartBool_4 Bool) (StartInt_2 Int) (Start_7 String) (Start_3 String) (StartBool_2 Bool) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_7 Int) (Start_2 String) (StartBool_7 Bool) (Start_10 String) (Start_14 String) (StartInt_9 Int) (StartInt_6 Int) (StartInt_5 Int) (Start_4 String))
  ((Start String ("1" (str.++ Start_1 Start) (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_1) (ite StartBool_1 Start_3 Start)))
   (StartInt Int (0 (str.to_int Start_3)))
   (StartBool Bool (true (and StartBool_3 StartBool_5) (str.prefixof Start_5 Start_3) (str.suffixof Start_9 Start_11) (str.contains Start_13 Start_13) (= StartInt_6 StartInt_8) (<= StartInt_5 StartInt_4)))
   (Start_1 String ("" (str.++ Start_13 Start_3)))
   (Start_13 String ("1" "" "b" y "0" (str.from_int StartInt_5)))
   (Start_5 String ("b" (str.at Start_3 StartInt_5) (str.substr Start_8 StartInt_5 StartInt_4) (str.replace Start_1 Start_6 Start_4) (str.from_int StartInt_6) (ite StartBool_3 Start_3 Start_7)))
   (StartBool_6 Bool (true false (not StartBool_2) (str.suffixof Start_4 Start_10) (str.contains Start_3 Start_5) (= Start_9 Start_1)))
   (StartBool_8 Bool (false true (str.< Start_10 Start_8) (str.<= Start_10 Start_3) (str.suffixof Start_4 Start_12) (str.contains Start_10 Start_4) (= Start_8 Start_2) (= StartInt_6 StartInt_9)))
   (Start_8 String ("1"))
   (StartInt_3 Int (0 1 (str.len Start_8) (str.to_int Start_2)))
   (StartInt_4 Int (0 1 (str.len Start_8) (str.to_int Start_2)))
   (StartBool_5 Bool (false true (and StartBool_3 StartBool_7) (str.< Start_6 Start_6) (str.<= Start_13 Start_3) (str.suffixof Start_8 Start) (<= StartInt_4 StartInt_2)))
   (Start_12 String ("0" (str.at Start_3 StartInt_5) (str.substr Start_8 StartInt_5 StartInt_7) (str.replace Start_12 Start_8 Start_9) (ite StartBool_4 Start_13 Start_9)))
   (StartInt_8 Int (0 (str.len Start_13) (str.to_int Start_9)))
   (StartBool_1 Bool (true false (and StartBool StartBool_8) (str.< Start_4 Start_7) (str.suffixof Start_9 Start) (= StartInt_1 StartInt_2)))
   (Start_9 String ("" (str.++ Start_13 Start_11) (str.at Start_6 StartInt_7) (ite StartBool_6 Start_1 Start)))
   (Start_6 String (y "" "1" "0" (str.++ Start_4 Start_2) (str.at Start_4 StartInt) (str.substr Start_5 StartInt_1 StartInt_3) (str.from_int StartInt_2) (ite StartBool_2 Start_4 Start_7)))
   (Start_11 String (x (str.++ Start Start_6) (str.at Start_10 StartInt_2) (str.from_int StartInt) (ite StartBool_5 Start_3 Start_7)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool_8 StartBool_1) (str.< Start_8 Start_7) (str.suffixof Start_6 Start) (str.contains Start_1 Start_4) (= Start_1 Start_14) (<= StartInt_8 StartInt_4)))
   (StartInt_2 Int (1 (str.len Start_5) (str.indexof Start_6 Start_4 StartInt_1)))
   (Start_7 String ("b" "0" (str.at Start StartInt_1) (str.substr Start_6 StartInt StartInt) (str.replace Start_7 Start_3 Start)))
   (Start_3 String ("1" (str.at Start_4 StartInt_2)))
   (StartBool_2 Bool (true (not StartBool) (str.prefixof Start_2 Start_1) (str.suffixof Start_4 Start_3) (= StartInt_3 StartInt_3) (<= StartInt_2 StartInt_4)))
   (StartInt_1 Int (1 (str.len Start_9) (str.to_int Start_10)))
   (StartBool_3 Bool (false true (and StartBool_4 StartBool_5) (str.<= Start_1 Start_9) (str.prefixof Start_3 Start_10) (str.suffixof Start_2 Start_5) (str.contains Start Start_11) (= Start_5 Start_12)))
   (StartInt_7 Int (0 (str.to_int Start_4)))
   (Start_2 String ("1" y (str.from_int StartInt_3) (ite StartBool_5 Start_3 Start_2)))
   (StartBool_7 Bool (true (str.prefixof Start_3 Start_1) (= Start_2 Start_8) (<= StartInt_2 StartInt_8)))
   (Start_10 String (y "" x "a" "0" (str.replace Start_13 Start_11 Start_2) (ite StartBool_4 Start_6 Start_4)))
   (Start_14 String (y (str.at Start_1 StartInt_6) (str.substr Start_8 StartInt_1 StartInt_5) (str.from_int StartInt_3) (ite StartBool_3 Start_5 Start_9)))
   (StartInt_9 Int (1))
   (StartInt_6 Int (1 (str.len Start_10) (str.indexof Start_7 Start_3 StartInt_6)))
   (StartInt_5 Int (1 (str.to_int Start_7)))
   (Start_4 String ("a" y "" "0" (str.++ Start_12 Start_2) (str.replace Start_1 Start Start_3) (str.from_int StartInt_1) (ite StartBool_6 Start_4 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (not (= y "b")) x "")))

(check-synth)
