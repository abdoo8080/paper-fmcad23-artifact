(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_4 String) (StartBool_4 Bool) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_10 Int) (Start_7 String) (StartInt_2 Int) (StartInt_6 Int) (Start_3 String) (Start_8 String) (Start_6 String) (Start_2 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_8 Int) (Start_10 String) (StartInt_7 Int) (Start_11 String) (StartInt_9 Int) (Start_9 String) (Start_13 String) (StartBool_1 Bool) (Start_1 String) (Start_5 String) (Start_12 String) (StartInt_4 Int) (StartBool_3 Bool) (StartBool_5 Bool))
  ((Start String (y (str.replace Start_1 Start Start) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.indexof Start_10 Start_10 StartInt_7)))
   (StartBool Bool (true false (not StartBool_6) (and StartBool_5 StartBool_4) (str.<= Start_12 Start_9) (str.contains Start_6 Start_2) (= Start_1 Start_10) (= StartInt StartInt_3)))
   (StartBool_6 Bool (true false (str.prefixof Start_7 Start_8) (= StartInt_6 StartInt_7)))
   (Start_4 String (y "0" "a" x "b" "" (str.at Start_7 StartInt_6) (str.substr Start_1 StartInt_3 StartInt) (ite StartBool Start_1 Start_7)))
   (StartBool_4 Bool (false (not StartBool_5) (and StartBool StartBool) (str.< Start_6 Start_7) (str.<= Start_13 Start_2) (= Start_6 Start) (= StartInt_7 StartInt_9) (<= StartInt_2 StartInt_7)))
   (StartInt_5 Int (1 (str.len Start_6) (str.to_int Start_5)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_3) (str.< Start_11 Start_3) (<= StartInt_9 StartInt_7)))
   (StartInt_10 Int (1 0 (str.indexof Start_13 Start_1 StartInt_10) (str.to_int Start_9)))
   (Start_7 String (x (str.at Start StartInt_5) (str.substr Start StartInt_4 StartInt_3) (str.from_int StartInt_5)))
   (StartInt_2 Int (1 0 (str.indexof Start_5 Start_5 StartInt_5)))
   (StartInt_6 Int (1 0 (str.len Start_1)))
   (Start_3 String ("0" (str.substr Start_8 StartInt_4 StartInt_6) (str.replace Start_4 Start_4 Start_3) (ite StartBool_1 Start_4 Start_3)))
   (Start_8 String ("0" (str.++ Start_8 Start_9) (str.at Start_8 StartInt) (str.substr Start_3 StartInt_2 StartInt_7) (str.from_int StartInt_8)))
   (Start_6 String ("0" (str.substr Start_5 StartInt StartInt_4) (ite StartBool_1 Start Start_5)))
   (Start_2 String ("" y (str.++ Start_1 Start_3) (str.at Start_3 StartInt) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start Start_2 Start_4) (ite StartBool_1 Start_1 Start)))
   (StartInt_1 Int (1 0 (str.indexof Start_2 Start_1 StartInt) (str.to_int Start_2)))
   (StartInt_3 Int (0 1 (str.indexof Start_2 Start_4 StartInt_4) (str.to_int Start_3)))
   (StartInt_8 Int (0 1 (str.indexof Start_5 Start_8 StartInt_3) (str.to_int Start_10)))
   (Start_10 String ("0" "b"))
   (StartInt_7 Int (0 1 (str.len Start_3) (str.indexof Start_11 Start_3 StartInt_8) (str.to_int Start_11)))
   (Start_11 String ("" (str.++ Start_1 Start_5) (str.at Start_11 StartInt_4) (str.substr Start_1 StartInt_1 StartInt_4) (ite StartBool Start_8 Start)))
   (StartInt_9 Int (1 (str.len Start_3) (str.to_int Start_5)))
   (Start_9 String ("0" (str.++ Start_11 Start_11) (str.at Start_2 StartInt_3) (str.from_int StartInt)))
   (Start_13 String ("b" (ite StartBool_2 Start_8 Start_10)))
   (StartBool_1 Bool (false (not StartBool_1) (str.< Start_5 Start_6) (str.<= Start_7 Start_3) (= Start_6 Start_6) (= StartInt_2 StartInt_1) (<= StartInt StartInt_3)))
   (Start_1 String (y "b" "0" x "" "a" (str.at Start_9 StartInt_6) (ite StartBool Start_4 Start_12)))
   (Start_5 String (x (str.at Start_1 StartInt) (str.substr Start_5 StartInt_4 StartInt_4) (str.from_int StartInt_1)))
   (Start_12 String ("a" (str.++ Start_10 Start_13) (str.at Start_6 StartInt_1) (str.replace Start_4 Start_13 Start_11)))
   (StartInt_4 Int (0 (str.indexof Start_3 Start_2 StartInt_1) (str.to_int Start_4)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool_4) (str.<= Start_9 Start_9)))
   (StartBool_5 Bool (false (not StartBool) (and StartBool_6 StartBool_3) (str.<= Start_5 Start_1) (str.prefixof Start_5 Start_12) (str.contains Start_4 Start_4) (= Start Start) (= StartInt_10 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" y x)))

(check-synth)
