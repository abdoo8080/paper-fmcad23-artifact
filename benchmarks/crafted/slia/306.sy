(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_1 Int) (Start_2 String) (Start_3 String) (StartInt_2 Int) (Start_6 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_5 Int) (Start_1 String) (Start_5 String) (Start_4 String) (StartInt_3 Int))
  ((Start String (x y (str.at Start_1 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (1 (str.len Start_4)))
   (StartBool Bool (true (not StartBool_1) (and StartBool_2 StartBool_1) (str.< Start_6 Start_2) (str.<= Start_6 Start_1) (str.prefixof Start_4 Start_1) (str.suffixof Start_3 Start_3) (str.contains Start_1 Start_4) (= StartInt_5 StartInt_3) (<= StartInt_3 StartInt_5)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_1) (str.prefixof Start_5 Start_6) (str.contains Start_1 Start_1) (<= StartInt_2 StartInt)))
   (StartInt_1 Int (1 (str.len Start_4) (str.indexof Start_1 Start_5 StartInt_5)))
   (Start_2 String (y "0" "b" (str.at Start_1 StartInt) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_2 Start_2 Start_3) (ite StartBool_1 Start_1 Start_2)))
   (Start_3 String ("a" (str.++ Start Start_3) (str.substr Start_1 StartInt_2 StartInt_2) (ite StartBool Start Start_1)))
   (StartInt_2 Int (1 0 (str.to_int Start_3)))
   (Start_6 String ("b" "a" "" y (str.at Start_6 StartInt_2) (str.substr Start StartInt StartInt_5)))
   (StartBool_1 Bool (true (not StartBool_1) (str.<= Start_4 Start) (str.suffixof Start_3 Start_5) (<= StartInt StartInt_1)))
   (StartInt_4 Int (1 0 (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start_4)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.to_int Start_1)))
   (Start_1 String ("1" "b" "a" x))
   (Start_5 String ("a" (str.at Start StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (Start_4 String (y (str.substr Start_3 StartInt_2 StartInt_3) (str.from_int StartInt_4)))
   (StartInt_3 Int (0 (str.len Start_1) (str.indexof Start_4 Start_2 StartInt_2) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.indexof "b" "" (str.to_int x)))))

(check-synth)
