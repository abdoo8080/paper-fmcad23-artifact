(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (StartBool_6 Bool) (Start_18 String) (StartInt_8 Int) (Start_16 String) (Start_17 String) (StartInt_4 Int) (Start_11 String) (Start_10 String) (StartInt_3 Int) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_6 Int) (Start_9 String) (StartInt_1 Int) (Start_8 String) (Start_7 String) (StartBool_7 Bool) (StartBool_1 Bool) (Start_2 String) (StartBool_4 Bool) (StartBool_5 Bool) (Start_4 String) (Start_1 String) (Start_5 String) (Start_12 String) (StartInt_5 Int) (Start_6 String) (Start_3 String) (Start_13 String) (StartBool_3 Bool) (Start_15 String) (Start_14 String) (StartInt_7 Int))
  ((Start String ("b" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_7) (str.to_int Start_14)))
   (StartBool Bool (false (not StartBool_4) (and StartBool_5 StartBool_6) (str.prefixof Start_16 Start_3) (str.suffixof Start_6 Start_13) (= StartInt_3 StartInt_3) (<= StartInt_4 StartInt_6)))
   (Start_19 String ("0" (str.++ Start_16 Start_4) (str.substr Start_19 StartInt_8 StartInt_3) (str.replace Start_4 Start_10 Start) (str.from_int StartInt_5)))
   (StartBool_6 Bool (true (not StartBool_7) (str.<= Start_17 Start_4) (str.prefixof Start_12 Start_10) (str.contains Start_8 Start_8) (= Start_19 Start_3) (= StartInt_1 StartInt_8) (<= StartInt_1 StartInt_6)))
   (Start_18 String (y (str.from_int StartInt) (ite StartBool_2 Start_1 Start_14)))
   (StartInt_8 Int (0 1 (str.indexof Start_3 Start_1 StartInt) (str.to_int Start_1)))
   (Start_16 String (x "" (str.++ Start_17 Start_1) (str.replace Start_1 Start Start_15) (str.from_int StartInt) (ite StartBool_3 Start Start_1)))
   (Start_17 String (x "1" (str.++ Start_18 Start_2) (str.at Start_17 StartInt_2) (str.from_int StartInt_5) (ite StartBool Start_5 Start_11)))
   (StartInt_4 Int (1 0 (str.indexof Start_7 Start_3 StartInt_3)))
   (Start_11 String (y "a" "1" (str.at Start_7 StartInt_3) (str.substr Start_1 StartInt_3 StartInt) (ite StartBool Start_3 Start_7)))
   (Start_10 String ("1" (str.++ Start_3 Start_10) (ite StartBool_1 Start Start_11)))
   (StartInt_3 Int (0 1 (str.to_int Start_6)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_2 StartInt) (str.to_int Start)))
   (StartBool_2 Bool (false true (not StartBool_5) (and StartBool_1 StartBool_3) (str.<= Start_10 Start_4) (str.contains Start Start_14) (= Start_6 Start_7)))
   (StartInt_6 Int (0 1 (str.len Start_15) (str.indexof Start_7 Start StartInt_1) (str.to_int Start_10)))
   (Start_9 String ("a" y (str.++ Start_4 Start_2) (str.replace Start_5 Start_1 Start_10) (ite StartBool_4 Start_2 Start_10)))
   (StartInt_1 Int (1 0 (str.to_int Start_2)))
   (Start_8 String (x "" (str.++ Start_8 Start_4) (str.replace Start Start_9 Start_4) (str.from_int StartInt_2)))
   (Start_7 String ("0" x "" "a" (str.replace Start_5 Start_7 Start_4)))
   (StartBool_7 Bool (true (not StartBool_2) (and StartBool_2 StartBool_6) (str.< Start_17 Start_8) (str.<= Start_19 Start_18)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (str.prefixof Start_3 Start_3) (str.suffixof Start_1 Start_2) (str.contains Start_1 Start_4) (= Start_5 Start_3) (= StartInt_1 StartInt_2) (<= StartInt_1 StartInt_2)))
   (Start_2 String (y (str.++ Start_9 Start_12) (str.at Start_2 StartInt) (str.from_int StartInt_3) (ite StartBool_4 Start_7 Start_4)))
   (StartBool_4 Bool (false (str.< Start_7 Start_11) (str.<= Start_2 Start_6) (str.prefixof Start_7 Start_4) (str.suffixof Start_4 Start) (= StartInt_4 StartInt)))
   (StartBool_5 Bool (true (and StartBool_3 StartBool_5) (str.<= Start_1 Start_12) (str.contains Start_6 Start_13) (= Start_5 Start_11) (= StartInt_3 StartInt_6) (<= StartInt_4 StartInt_4)))
   (Start_4 String ("0" "1" (str.substr Start_2 StartInt_5 StartInt_4) (str.from_int StartInt_3) (ite StartBool_4 Start_12 Start_5)))
   (Start_1 String ("a" (str.at Start_11 StartInt_5) (str.substr Start_2 StartInt_5 StartInt_3) (str.replace Start_4 Start_7 Start_3) (ite StartBool_3 Start_10 Start_10)))
   (Start_5 String (y (str.at Start StartInt_2) (str.replace Start_6 Start_1 Start_6) (ite StartBool_3 Start_5 Start_7)))
   (Start_12 String (y (str.++ Start_12 Start_9) (str.substr Start_6 StartInt_3 StartInt_1) (str.replace Start_2 Start_7 Start_9)))
   (StartInt_5 Int (1 0 (str.len Start_6)))
   (Start_6 String ("" x "0" (str.++ Start_6 Start_7) (str.replace Start_2 Start_6 Start_1) (ite StartBool_4 Start_8 Start_8)))
   (Start_3 String (y (str.++ Start_2 Start_1) (str.at Start_9 StartInt_5) (str.substr Start StartInt_2 StartInt_1) (str.from_int StartInt_1) (ite StartBool_2 Start_6 Start_13)))
   (Start_13 String ("" (str.++ Start_1 Start) (str.substr Start_13 StartInt_4 StartInt_5) (str.replace Start_1 Start_9 Start_3) (str.from_int StartInt_2) (ite StartBool_2 Start_12 Start_3)))
   (StartBool_3 Bool (false true (not StartBool_5) (and StartBool StartBool_3) (str.< Start_10 Start_7) (str.<= Start Start_13) (str.prefixof Start_10 Start_13) (str.suffixof Start_14 Start_9) (str.contains Start_2 Start_9) (= Start_2 Start_4) (= StartInt_6 StartInt_3)))
   (Start_15 String (x "a"))
   (Start_14 String ("" (str.++ Start_13 Start_5) (str.at Start_15 StartInt_4) (str.substr Start_8 StartInt_4 StartInt_7) (str.replace Start_15 Start_1 Start_3) (str.from_int StartInt)))
   (StartInt_7 Int (1 (str.indexof Start_8 Start_3 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.indexof "0" x 1))))

(check-synth)
