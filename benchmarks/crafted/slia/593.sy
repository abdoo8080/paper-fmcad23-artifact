(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (Start_17 String) (Start_8 String) (Start_7 String) (Start_2 String) (StartInt_2 Int) (Start_9 String) (StartInt_1 Int) (StartInt_3 Int) (StartBool_1 Bool) (Start_1 String) (StartInt_4 Int) (Start_10 String) (Start_14 String) (Start_3 String) (StartBool_3 Bool) (StartInt_6 Int) (StartInt_7 Int) (StartInt_12 Int) (StartInt_11 Int) (StartInt_9 Int) (Start_6 String) (Start_11 String) (StartInt_10 Int) (Start_12 String) (Start_4 String) (StartInt_8 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_5 String) (StartInt_5 Int) (Start_13 String) (Start_15 String))
  ((Start String ("a" (str.++ Start_1 Start) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_16) (str.indexof Start_13 Start StartInt_7) (str.to_int Start_17)))
   (StartBool Bool (true (not StartBool) (str.suffixof Start_7 Start_7) (<= StartInt_12 StartInt_5)))
   (Start_16 String (y (str.at Start_2 StartInt_5) (str.replace Start_11 Start_8 Start_7) (str.from_int StartInt_5) (ite StartBool_4 Start_14 Start_9)))
   (Start_17 String ("1" (str.at Start_15 StartInt_4) (str.substr Start_1 StartInt StartInt_11) (str.replace Start_15 Start_6 Start_15) (ite StartBool_4 Start_9 Start_4)))
   (Start_8 String ("0" x "b" "1" "" "a" (str.++ Start Start_4) (str.at Start_3 StartInt)))
   (Start_7 String ("b" "1" (str.replace Start_6 Start_3 Start_6) (ite StartBool_3 Start Start_7)))
   (Start_2 String ("b" x (str.++ Start_4 Start_14)))
   (StartInt_2 Int (1 (str.indexof Start_4 Start_8 StartInt_4)))
   (Start_9 String ("b" "0" x "a" (str.at Start_1 StartInt_5) (str.substr Start_1 StartInt StartInt_6) (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start StartInt)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_6 Start_4 StartInt_3) (str.to_int Start_6)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_2) (str.< Start_1 Start_5) (str.<= Start_6 Start_5) (str.suffixof Start_6 Start_7) (str.contains Start Start_2) (= StartInt StartInt_2) (<= StartInt StartInt_3)))
   (Start_1 String ("b" x "" (str.replace Start_2 Start Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_4 Int (1))
   (Start_10 String ("b" (str.at Start_1 StartInt_3) (ite StartBool_4 Start_11 Start_10)))
   (Start_14 String ("0" (str.at Start StartInt) (str.replace Start_2 Start_4 Start_14) (str.from_int StartInt_9)))
   (Start_3 String ("" (str.++ Start_7 Start_3) (str.substr Start_2 StartInt_1 StartInt)))
   (StartBool_3 Bool (true false (not StartBool_1) (str.<= Start_3 Start_7) (str.prefixof Start_7 Start_5) (str.suffixof Start_6 Start_6) (= StartInt_5 StartInt_4)))
   (StartInt_6 Int (0 (str.indexof Start Start_7 StartInt_7) (str.to_int Start)))
   (StartInt_7 Int (1 (str.indexof Start Start_2 StartInt_3)))
   (StartInt_12 Int (0 1 (str.to_int Start_17)))
   (StartInt_11 Int (1 0))
   (StartInt_9 Int (1 0 (str.len Start_6)))
   (Start_6 String (x "a" (str.at Start_3 StartInt_4) (str.replace Start_10 Start_10 Start_2)))
   (Start_11 String (x (str.++ Start_8 Start_10) (str.at Start_8 StartInt_5) (str.substr Start_4 StartInt_2 StartInt_8) (str.replace Start_12 Start_9 Start_5) (str.from_int StartInt_7)))
   (StartInt_10 Int (0 (str.indexof Start_15 Start_10 StartInt_7)))
   (Start_12 String ("b" "" (str.++ Start_6 Start_5) (str.substr Start_8 StartInt_5 StartInt_2) (str.replace Start Start_6 Start_4)))
   (Start_4 String ("" "1" "a" x (str.from_int StartInt)))
   (StartInt_8 Int (0 (str.len Start_12)))
   (StartBool_4 Bool (false (and StartBool_1 StartBool_1) (str.<= Start_10 Start_11) (str.prefixof Start_4 Start_4) (= StartInt StartInt_7) (<= StartInt_8 StartInt_5)))
   (StartBool_2 Bool (true (not StartBool_4) (and StartBool StartBool_2) (str.< Start_11 Start_6) (str.prefixof Start_7 Start_7) (str.contains Start_11 Start_9) (= Start_2 Start_4) (= StartInt_1 StartInt_6) (<= StartInt_10 StartInt_9)))
   (Start_5 String ("a" (str.++ Start_13 Start_4) (str.substr Start_10 StartInt_6 StartInt_4) (str.replace Start_2 Start_7 Start) (str.from_int StartInt_4)))
   (StartInt_5 Int (0 1 (str.len Start) (str.to_int Start_9)))
   (Start_13 String (y "1" "a" (str.++ Start_14 Start_10) (str.at Start StartInt) (str.replace Start_12 Start_12 Start_13)))
   (Start_15 String ("1" x "0" (str.++ Start_13 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.indexof y "1" (str.len x)))))

(check-synth)
