(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartBool_6 Bool) (StartInt_5 Int) (StartInt_4 Int) (StartBool_5 Bool) (Start_5 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_2 String) (Start_4 String) (StartBool_2 Bool) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_3 Int) (Start_3 String) (StartBool_4 Bool) (Start_6 String) (Start_7 String))
  ((Start String ("0" (str.++ Start Start) (str.substr Start StartInt StartInt_1) (str.replace Start Start_1 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_5 Start_6 StartInt_5)))
   (StartBool Bool (true (str.<= Start Start_5) (str.prefixof Start_1 Start_7) (str.suffixof Start_3 Start_5) (= Start_2 Start_6)))
   (Start_1 String ("b" "" "1" (str.from_int StartInt_2) (ite StartBool_5 Start Start_6)))
   (StartBool_6 Bool (true (str.< Start_3 Start_7) (str.contains Start_3 Start_6) (= Start Start_4)))
   (StartInt_5 Int (0 1 (str.indexof Start_2 Start_6 StartInt_3) (str.to_int Start_7)))
   (StartInt_4 Int (1 (str.to_int Start)))
   (StartBool_5 Bool (false true (not StartBool_1) (and StartBool_6 StartBool_5) (str.prefixof Start_5 Start_6) (str.suffixof Start Start_7) (<= StartInt_4 StartInt_5)))
   (Start_5 String ("b" "0" (str.++ Start_3 Start_3) (str.substr Start_2 StartInt StartInt_2)))
   (StartBool_1 Bool (false (not StartBool_1) (str.prefixof Start_2 Start_2) (= Start_2 Start_2) (<= StartInt_2 StartInt_1)))
   (StartInt_2 Int (1 0))
   (Start_2 String ("" y "b" "1" (str.++ Start_1 Start_1) (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start_3 Start Start_4) (str.from_int StartInt_2)))
   (Start_4 String ("b" y "1" "" (str.at Start_1 StartInt_2) (str.replace Start_3 Start_2 Start_4) (ite StartBool_2 Start_1 Start_2)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_1) (str.< Start_3 Start) (str.prefixof Start_2 Start_3) (str.contains Start_3 Start_1) (= Start_3 Start_2) (= StartInt_2 StartInt) (<= StartInt_1 StartInt_2)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_2 StartBool_4) (str.< Start_3 Start_3) (str.<= Start_3 Start_5) (str.prefixof Start_1 Start_2) (= StartInt StartInt_2)))
   (StartInt_1 Int (0 1 (str.len Start_6) (str.indexof Start_5 Start_5 StartInt_2)))
   (StartInt_3 Int (0 (str.to_int Start_6)))
   (Start_3 String (x "1" "a" (str.at Start_5 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_2 Start Start_7) (str.from_int StartInt_3) (ite StartBool_2 Start_3 Start_7)))
   (StartBool_4 Bool (false true (and StartBool StartBool_4) (str.< Start_3 Start_2) (str.<= Start_6 Start_1) (str.suffixof Start_5 Start_1) (= Start_6 Start_3)))
   (Start_6 String ("" (str.at Start_5 StartInt_2) (str.from_int StartInt_1)))
   (Start_7 String (x y (str.at Start_3 StartInt) (str.substr Start_6 StartInt_2 StartInt_1) (str.replace Start_6 Start_5 Start) (str.from_int StartInt_1) (ite StartBool_5 Start_2 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x y "0")))

(check-synth)
