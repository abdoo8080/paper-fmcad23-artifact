(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_2 String) (Start_10 String) (Start_3 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_4 Int) (Start_7 String) (Start_6 String) (Start_8 String) (StartInt_6 Int) (StartInt_3 Int) (Start_4 String) (StartBool_2 Bool) (StartInt_7 Int) (StartInt_2 Int) (Start_9 String) (StartInt_5 Int) (Start_5 String))
  ((Start String ("b" "a" "0" x (str.++ Start_1 Start_2) (str.substr Start_3 StartInt StartInt_1) (ite StartBool_1 Start_1 Start_3)))
   (StartInt Int (1 (str.len Start_5) (str.indexof Start_10 Start_1 StartInt_7)))
   (StartBool Bool (true (not StartBool_2) (and StartBool StartBool_2) (str.< Start_1 Start_6) (str.contains Start_9 Start_4) (= Start_7 Start_10) (<= StartInt_7 StartInt_4)))
   (Start_1 String ("b" (str.at Start_5 StartInt_5) (str.substr Start_5 StartInt_4 StartInt_7) (str.from_int StartInt)))
   (Start_2 String ("b" "1" (str.++ Start_2 Start_5) (str.substr Start_9 StartInt StartInt_2) (ite StartBool_1 Start_5 Start_2)))
   (Start_10 String ("0" y (str.at Start StartInt_2) (str.replace Start_3 Start_1 Start_6)))
   (Start_3 String (y (str.++ Start_4 Start_10) (str.replace Start_2 Start_9 Start_5) (str.from_int StartInt)))
   (StartInt_1 Int (0 1 (str.indexof Start_6 Start_7 StartInt_6)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool) (str.contains Start Start_2) (= Start_4 Start_2) (<= StartInt_1 StartInt_1)))
   (StartInt_4 Int (0 1 (str.indexof Start_9 Start StartInt_4) (str.to_int Start_6)))
   (Start_7 String ("b" "" y (str.++ Start Start_4) (str.substr Start_3 StartInt_4 StartInt_4) (ite StartBool_2 Start Start)))
   (Start_6 String ("" "0" "1" (str.++ Start_7 Start_4) (str.replace Start_3 Start_4 Start_5) (str.from_int StartInt_3)))
   (Start_8 String (y x "1" "b" "a" (str.++ Start_2 Start_7) (str.at Start_2 StartInt) (str.replace Start_7 Start_9 Start_9)))
   (StartInt_6 Int (0 (str.len Start_4) (str.indexof Start_6 Start StartInt_4)))
   (StartInt_3 Int (1))
   (Start_4 String ("1" x (str.++ Start_4 Start_4) (str.substr Start_2 StartInt_2 StartInt_3) (str.replace Start_1 Start Start_5) (ite StartBool_1 Start_2 Start_6)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool) (str.<= Start_7 Start_8) (str.prefixof Start_1 Start_2) (str.suffixof Start_2 Start) (= StartInt_2 StartInt_5)))
   (StartInt_7 Int (1 (str.indexof Start_3 Start_10 StartInt_7)))
   (StartInt_2 Int (0 1 (str.len Start_7) (str.indexof Start_4 Start StartInt_3)))
   (Start_9 String (y (str.at Start_5 StartInt) (str.replace Start_7 Start_7 Start_7) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 (str.indexof Start_7 Start StartInt_5)))
   (Start_5 String (x (str.++ Start_9 Start_2) (str.at Start_1 StartInt_4) (str.replace Start_5 Start_4 Start_3) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace x "1" "") "1" "")))

(check-synth)
