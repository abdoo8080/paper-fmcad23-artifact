(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartBool_6 Bool) (Start_1 String) (StartBool_1 Bool) (Start_7 String) (Start_9 String) (Start_10 String) (Start_12 String) (StartInt_6 Int) (Start_8 String) (Start_2 String) (Start_5 String) (StartInt_1 Int) (StartInt_5 Int) (StartInt_2 Int) (StartInt_7 Int) (StartInt_3 Int) (StartBool_3 Bool) (Start_3 String) (StartBool_2 Bool) (Start_6 String) (Start_4 String) (StartInt_4 Int) (StartBool_5 Bool) (StartBool_4 Bool))
  ((Start String ("a" x y (str.++ Start_1 Start_1) (str.at Start StartInt) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.indexof Start Start_8 StartInt_4) (str.to_int Start)))
   (StartBool Bool (true (not StartBool) (and StartBool_6 StartBool_5) (str.< Start_9 Start_9) (str.prefixof Start Start_7)))
   (Start_11 String ("" "0" (str.at Start_6 StartInt_3)))
   (StartBool_6 Bool (true (and StartBool_6 StartBool_4) (str.< Start_7 Start_11) (str.<= Start_3 Start) (str.suffixof Start_12 Start_4) (= Start_2 Start_1) (= StartInt_1 StartInt_5)))
   (Start_1 String (y x "b" "" (str.at Start_6 StartInt_3) (str.from_int StartInt_7) (ite StartBool_5 Start_7 Start_8)))
   (StartBool_1 Bool (true (not StartBool_1) (str.< Start_8 Start_2) (str.<= Start_10 Start_6) (str.prefixof Start_8 Start_7) (str.suffixof Start_7 Start_1) (= StartInt_4 StartInt_3)))
   (Start_7 String ("a" "0" (str.from_int StartInt_3)))
   (Start_9 String ("" (str.replace Start_9 Start_7 Start_6)))
   (Start_10 String ("b" (str.replace Start_5 Start_6 Start_3) (str.from_int StartInt_2)))
   (Start_12 String ("0" "1" (str.at Start_5 StartInt_7) (str.from_int StartInt) (ite StartBool_5 Start_4 Start_4)))
   (StartInt_6 Int (0 (str.len Start)))
   (Start_8 String ("0" "b" "a" x (str.at Start_5 StartInt_5)))
   (Start_2 String ("a" "0" (str.++ Start_1 Start_2) (str.at Start_3 StartInt_3)))
   (Start_5 String (x (str.++ Start Start_4) (str.from_int StartInt_3) (ite StartBool_5 Start Start_5)))
   (StartInt_1 Int (0 1 (str.indexof Start_1 Start StartInt_2)))
   (StartInt_5 Int (0 (str.to_int Start)))
   (StartInt_2 Int (1 (str.indexof Start Start_1 StartInt_3) (str.to_int Start)))
   (StartInt_7 Int (1 (str.len Start_3) (str.to_int Start_2)))
   (StartInt_3 Int (0 (str.len Start_2) (str.to_int Start_2)))
   (StartBool_3 Bool (true (str.prefixof Start_7 Start) (str.suffixof Start_8 Start_9) (= Start_10 Start_8)))
   (Start_3 String ("0" (str.++ Start Start_3) (str.at Start StartInt_2) (str.replace Start_3 Start_3 Start_1) (ite StartBool_1 Start_4 Start_4)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_4 StartBool) (str.<= Start_2 Start_3) (str.suffixof Start Start) (<= StartInt_4 StartInt_2)))
   (Start_6 String ("0" (str.++ Start_1 Start_3)))
   (Start_4 String ("" (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_1)))
   (StartInt_4 Int (1 0 (str.len Start) (str.to_int Start_5)))
   (StartBool_5 Bool (true false (and StartBool_1 StartBool) (str.suffixof Start_3 Start_2) (= StartInt_5 StartInt_4)))
   (StartBool_4 Bool (true (str.< Start_5 Start_1) (str.<= Start_4 Start) (str.suffixof Start_2 Start_6) (str.contains Start_6 Start_6) (= Start_6 Start_5) (<= StartInt_6 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.to_int (str.++ x (str.at x 0))))))

(check-synth)
