(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_1 String) (StartInt_12 Int) (Start_2 String) (StartInt_11 Int) (Start_4 String) (StartInt_4 Int) (StartInt_3 Int) (Start_9 String) (Start_13 String) (StartBool_7 Bool) (Start_5 String) (Start_14 String) (Start_15 String) (StartBool_5 Bool) (StartBool_2 Bool) (Start_7 String) (StartBool_4 Bool) (StartInt_2 Int) (Start_3 String) (Start_11 String) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_7 Int) (Start_12 String) (Start_16 String) (StartInt_5 Int) (StartInt_10 Int) (StartInt_8 Int) (StartInt_1 Int) (Start_10 String) (Start_8 String) (StartBool_6 Bool) (StartInt_9 Int) (StartBool_3 Bool) (Start_6 String))
  ((Start String ("1" (str.at Start_1 StartInt) (str.replace Start Start_2 Start) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.len Start_17) (str.to_int Start_7)))
   (StartBool Bool (true false (and StartBool_7 StartBool_7) (str.suffixof Start_14 Start_10) (<= StartInt StartInt_11)))
   (Start_17 String (y "0" (str.from_int StartInt_12)))
   (Start_1 String (y x "b" "1" (str.++ Start_12 Start_3) (str.replace Start_12 Start_4 Start_2)))
   (StartInt_12 Int (1 0))
   (Start_2 String (x "0" "a" (str.from_int StartInt_9) (ite StartBool_3 Start_4 Start_16)))
   (StartInt_11 Int (0 1 (str.len Start_6) (str.to_int Start_7)))
   (Start_4 String (y (str.at Start_8 StartInt_11) (str.replace Start_4 Start_5 Start_10) (str.from_int StartInt_5)))
   (StartInt_4 Int (1 0 (str.to_int Start_4)))
   (StartInt_3 Int (0 1 (str.indexof Start_7 Start_7 StartInt_4) (str.to_int Start_7)))
   (Start_9 String ("1" (str.++ Start_14 Start_12) (str.substr Start_15 StartInt_1 StartInt_8) (str.replace Start_10 Start_7 Start_15) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (Start_13 String ("1" "" x (str.++ Start_9 Start_8) (str.at Start_4 StartInt)))
   (StartBool_7 Bool (false (not StartBool_3) (and StartBool_2 StartBool_7) (str.prefixof Start Start_15) (str.suffixof Start_10 Start_8) (str.contains Start_6 Start_17) (= StartInt_1 StartInt_6) (<= StartInt_3 StartInt_11)))
   (Start_5 String ("a" "1" (str.at Start_6 StartInt_3) (str.substr Start_4 StartInt_3 StartInt_3) (str.replace Start_2 Start Start_2)))
   (Start_14 String ("" (str.at Start_11 StartInt_6)))
   (Start_15 String ("" (str.at Start_2 StartInt) (ite StartBool_4 Start Start_5)))
   (StartBool_5 Bool (false (and StartBool_5 StartBool) (= Start_9 Start_12) (= StartInt_6 StartInt_3)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool StartBool_3) (str.suffixof Start_3 Start_13)))
   (Start_7 String (x "a" "" "0" (str.++ Start_5 Start_3) (str.at Start_8 StartInt) (str.replace Start Start_4 Start_9) (str.from_int StartInt_4) (ite StartBool_1 Start_10 Start_11)))
   (StartBool_4 Bool (true (not StartBool_2) (and StartBool_4 StartBool_3) (str.< Start Start) (str.<= Start_13 Start_11) (str.suffixof Start_3 Start_6) (<= StartInt_2 StartInt_4)))
   (StartInt_2 Int (0 (str.len Start_5) (str.indexof Start_3 Start_5 StartInt_1) (str.to_int Start_3)))
   (Start_3 String ("" (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt StartInt_2) (str.from_int StartInt)))
   (Start_11 String ("1" (str.substr Start_10 StartInt_2 StartInt_1) (str.replace Start_11 Start_12 Start_11) (str.from_int StartInt_5) (ite StartBool_2 Start_6 Start_1)))
   (StartInt_6 Int (1 (str.indexof Start_5 Start_3 StartInt_1)))
   (StartBool_1 Bool (false (not StartBool_5) (and StartBool_5 StartBool_3) (str.< Start_9 Start_12) (str.<= Start_14 Start_9) (str.prefixof Start_1 Start_5) (= Start_6 Start_7)))
   (StartInt_7 Int (0 (str.indexof Start_7 Start_8 StartInt_2)))
   (Start_12 String ("0" (str.at Start_6 StartInt_7) (str.substr Start_12 StartInt_8 StartInt_6) (str.replace Start_6 Start_15 Start)))
   (Start_16 String ("" (str.++ Start_4 Start_5) (str.at Start_13 StartInt_12) (str.replace Start_9 Start_7 Start_9) (ite StartBool Start_3 Start_11)))
   (StartInt_5 Int (1 0 (str.indexof Start Start_5 StartInt_7) (str.to_int Start_2)))
   (StartInt_10 Int (0 (str.len Start_6)))
   (StartInt_8 Int (1 (str.to_int Start_15)))
   (StartInt_1 Int (1 0 (str.len Start_3)))
   (Start_10 String ("a" "" (str.replace Start_15 Start_1 Start_3) (str.from_int StartInt_5)))
   (Start_8 String ("a" x (str.at Start_9 StartInt_1) (str.replace Start_13 Start_7 Start_7) (ite StartBool_6 Start_9 Start_1)))
   (StartBool_6 Bool (true (not StartBool_4) (str.<= Start_8 Start_4) (= Start_3 Start_10) (= StartInt_9 StartInt_1) (<= StartInt_6 StartInt_6)))
   (StartInt_9 Int (0 1 (str.len Start_1) (str.indexof Start_15 Start_15 StartInt_10)))
   (StartBool_3 Bool (false true (and StartBool StartBool_4) (str.< Start_3 Start_8) (str.prefixof Start_14 Start_15) (str.contains Start_12 Start_11) (= Start_15 Start_7) (<= StartInt_2 StartInt_3)))
   (Start_6 String ("b" "0" (str.replace Start_2 Start_2 Start_9) (str.from_int StartInt_7) (ite StartBool_6 Start_5 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (<= (str.to_int y) 0) y "b")))

(check-synth)
