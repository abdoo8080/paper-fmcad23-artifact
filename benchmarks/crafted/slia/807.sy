(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (Start_7 String) (StartInt_4 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_5 Int) (StartInt_6 Int) (Start_6 String) (StartInt_2 Int) (StartInt_7 Int) (StartInt_3 Int) (Start_4 String) (Start_5 String) (Start_3 String) (Start_8 String) (Start_2 String) (StartBool_3 Bool))
  ((Start String ("b" "" (str.++ Start Start) (str.at Start_1 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1 0 (str.len Start_4)))
   (StartBool Bool (true (not StartBool) (str.<= Start_1 Start_3) (str.contains Start_8 Start_2) (<= StartInt_7 StartInt_2)))
   (Start_1 String (x "a" "b" (str.++ Start_8 Start_6) (str.at Start_1 StartInt_7) (str.substr Start_7 StartInt_5 StartInt_3) (str.replace Start_5 Start_8 Start_1)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_3 Start_2 StartInt_6)))
   (Start_7 String ("b" "1" (str.replace Start Start_4 Start_6)))
   (StartInt_4 Int (0 1 (str.to_int Start_8)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start Start) (str.<= Start_1 Start) (str.prefixof Start Start_4) (str.suffixof Start_4 Start_2) (<= StartInt StartInt_3)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool) (str.< Start_4 Start) (str.suffixof Start_3 Start_2) (= Start Start_5) (= StartInt StartInt)))
   (StartInt_5 Int (0 1))
   (StartInt_6 Int (1 (str.to_int Start_7)))
   (Start_6 String (y (str.substr Start_7 StartInt StartInt_1) (str.replace Start_8 Start_6 Start_5) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 1))
   (StartInt_7 Int (0 (str.to_int Start_2)))
   (StartInt_3 Int (0 1 (str.len Start) (str.indexof Start_2 Start_2 StartInt_3)))
   (Start_4 String ("0" (str.replace Start_1 Start_4 Start_3) (str.from_int StartInt_1)))
   (Start_5 String (y "0" (str.++ Start_2 Start_4) (str.at Start_6 StartInt) (str.replace Start_5 Start_4 Start_5) (str.from_int StartInt_3)))
   (Start_3 String ("a" "1" (str.from_int StartInt_2)))
   (Start_8 String ("" (str.at Start_6 StartInt_4) (str.from_int StartInt_5) (ite StartBool_3 Start_5 Start_2)))
   (Start_2 String ("b" (str.++ Start_3 Start) (ite StartBool Start_4 Start)))
   (StartBool_3 Bool (false (str.< Start Start_3) (str.suffixof Start Start_7) (= StartInt_2 StartInt_6) (<= StartInt_2 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "0" "b") (str.at y 1) "b")))

(check-synth)
