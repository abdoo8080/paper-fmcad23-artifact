(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_7 Int) (StartBool_4 Bool) (StartInt_1 Int) (StartBool_3 Bool) (Start_1 String) (Start_2 String) (Start_10 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_7 String) (Start_6 String) (StartInt_5 Int) (Start_5 String) (StartInt_4 Int) (Start_9 String) (StartInt_2 Int) (Start_8 String) (Start_4 String) (Start_3 String) (StartBool_2 Bool))
  ((Start String ("0" "1" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_2) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1))
   (StartBool Bool (true (not StartBool_3) (and StartBool_3 StartBool_1) (str.< Start_9 Start_10) (str.prefixof Start_7 Start_2) (str.contains Start_10 Start_4) (= Start_4 Start_10) (= StartInt_5 StartInt)))
   (StartInt_6 Int (1 (str.len Start_9)))
   (StartInt_7 Int (1 0 (str.to_int Start_10)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool_3) (str.<= Start_10 Start_6) (str.contains Start_2 Start_3) (= Start_1 Start_10) (= StartInt_2 StartInt) (<= StartInt_6 StartInt_7)))
   (StartInt_1 Int (1 0 (str.indexof Start_6 Start StartInt_3)))
   (StartBool_3 Bool (true (and StartBool StartBool_4) (str.prefixof Start_2 Start_2) (str.suffixof Start_8 Start_9) (= Start_10 Start_5)))
   (Start_1 String (y (str.++ Start_8 Start_8) (str.from_int StartInt_5)))
   (Start_2 String ("" (str.++ Start_3 Start_3) (str.at Start_3 StartInt_4) (str.substr Start_3 StartInt_3 StartInt_4) (str.from_int StartInt_4) (ite StartBool Start_4 Start_3)))
   (Start_10 String (x "1" "a" (str.++ Start_5 Start) (str.substr Start_2 StartInt StartInt_4) (str.replace Start_7 Start_8 Start_7) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_1 StartBool) (str.<= Start_1 Start_1) (str.contains Start Start_2) (= Start Start_1) (<= StartInt_3 StartInt_3)))
   (StartInt_3 Int (1 0 (str.len Start_2)))
   (Start_7 String ("" (str.at Start_6 StartInt_2) (str.from_int StartInt_1)))
   (Start_6 String ("0" "a" x (str.++ Start_1 Start_3) (str.at Start_3 StartInt_3)))
   (StartInt_5 Int (0 1 (str.indexof Start_1 Start_4 StartInt_5)))
   (Start_5 String ("b" (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_7)))
   (StartInt_4 Int (1 0 (str.indexof Start_8 Start_9 StartInt_4)))
   (Start_9 String ("b" (str.++ Start_6 Start_5) (str.from_int StartInt_2) (ite StartBool Start Start_7)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_6 StartInt_2) (str.to_int Start_1)))
   (Start_8 String ("" x y (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start)))
   (Start_4 String ("" y (str.++ Start_1 Start_5) (str.from_int StartInt_4)))
   (Start_3 String (y "a" (ite StartBool_2 Start_7 Start_2)))
   (StartBool_2 Bool (true (str.< Start_3 Start_5) (str.<= Start_7 Start_9) (str.contains Start_5 Start_3) (= Start_7 Start_10) (<= StartInt_2 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" x "a")))

(check-synth)
