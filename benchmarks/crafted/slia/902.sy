(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_1 String) (Start_16 String) (StartInt_10 Int) (StartInt_3 Int) (Start_11 String) (StartInt_4 Int) (Start_14 String) (Start_7 String) (Start_5 String) (StartInt_5 Int) (Start_17 String) (Start_2 String) (Start_10 String) (Start_8 String) (StartInt_1 Int) (Start_15 String) (Start_4 String) (StartBool_4 Bool) (StartInt_9 Int) (Start_3 String) (StartInt_8 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_6 String) (StartInt_7 Int) (StartInt_11 Int) (Start_13 String) (Start_9 String) (Start_12 String) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_2 Int))
  ((Start String ("b" (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1))
   (StartBool Bool (true false (str.< Start_17 Start_14) (str.suffixof Start_5 Start_12) (str.contains Start_2 Start_11) (= StartInt_5 StartInt_2) (<= StartInt_6 StartInt_11)))
   (StartBool_5 Bool (true (str.< Start_10 Start_14) (str.suffixof Start_16 Start_4)))
   (Start_1 String (x "0" (str.substr Start_7 StartInt_5 StartInt_6) (str.replace Start_17 Start_13 Start_11) (ite StartBool_5 Start_14 Start)))
   (Start_16 String ("b" (str.++ Start_16 Start_1) (str.substr Start_14 StartInt_4 StartInt_9) (ite StartBool Start_15 Start_4)))
   (StartInt_10 Int (0 (str.indexof Start_10 Start_6 StartInt_11)))
   (StartInt_3 Int (1 0 (str.to_int Start_6)))
   (Start_11 String ("0" "1" "" (str.++ Start_6 Start_7) (str.substr Start_1 StartInt_8 StartInt_8) (str.from_int StartInt_9) (ite StartBool_1 Start_11 Start_11)))
   (StartInt_4 Int (0 1 (str.to_int Start)))
   (Start_14 String (y (str.substr Start_9 StartInt_9 StartInt_10) (str.from_int StartInt_10)))
   (Start_7 String (x "b" (str.replace Start_1 Start_7 Start_5) (str.from_int StartInt_6) (ite StartBool_1 Start_8 Start_1)))
   (Start_5 String ("1" "a" y (str.++ Start_6 Start_3) (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_5) (ite StartBool Start_2 Start_6)))
   (StartInt_5 Int (1 0 (str.indexof Start_4 Start StartInt_2) (str.to_int Start_1)))
   (Start_17 String ("b" "0" (str.++ Start_12 Start_10) (str.at Start_12 StartInt_7) (str.substr Start_16 StartInt_8 StartInt_2) (str.from_int StartInt_5) (ite StartBool_1 Start_8 Start_8)))
   (Start_2 String ("b" (str.++ Start_3 Start_4) (str.at Start StartInt_3) (str.substr Start_2 StartInt_4 StartInt_3) (str.replace Start_2 Start_5 Start_3) (str.from_int StartInt_5) (ite StartBool Start_5 Start_5)))
   (Start_10 String ("" "0" x (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_11)))
   (Start_8 String ("1" (str.++ Start_4 Start_5) (str.at Start_5 StartInt_7) (str.replace Start_1 Start_9 Start_2) (ite StartBool_2 Start_1 Start_3)))
   (StartInt_1 Int (1 (str.len Start)))
   (Start_15 String ("0" (str.++ Start_10 Start_16) (str.substr Start_1 StartInt_8 StartInt_6) (str.from_int StartInt_8) (ite StartBool_1 Start_10 Start_15)))
   (Start_4 String (y "b" "a" (str.replace Start_4 Start_7 Start_1) (ite StartBool Start_7 Start_6)))
   (StartBool_4 Bool (false true (and StartBool_4 StartBool_2) (str.suffixof Start_13 Start_6) (= StartInt_9 StartInt_11)))
   (StartInt_9 Int (1 (str.len Start_8)))
   (Start_3 String (x "a" (str.at Start_3 StartInt_10) (str.substr Start_6 StartInt_3 StartInt_2) (str.from_int StartInt_4) (ite StartBool_4 Start_5 Start_3)))
   (StartInt_8 Int (0 1 (str.indexof Start_7 Start_11 StartInt_10) (str.to_int Start_8)))
   (StartBool_2 Bool (false (str.<= Start_6 Start_1) (str.prefixof Start_9 Start_3) (str.contains Start_10 Start_7) (= Start_9 Start_5) (<= StartInt StartInt_2)))
   (StartBool_3 Bool (false true (not StartBool) (str.< Start_4 Start_9) (str.<= Start_4 Start_5) (str.contains Start_13 Start_4) (= Start_8 Start_9) (= StartInt_10 StartInt_4)))
   (Start_6 String ("0" (str.++ Start Start_6) (str.at Start_1 StartInt_1) (str.substr Start_5 StartInt_5 StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_7 Int (0 1 (str.indexof Start_2 Start_9 StartInt_6) (str.to_int Start_3)))
   (StartInt_11 Int (1 (str.len Start_9)))
   (Start_13 String ("0" (str.substr Start_13 StartInt_11 StartInt_2) (str.replace Start_14 Start_10 Start_5) (ite StartBool_3 Start Start_6)))
   (Start_9 String ("a" (str.at Start_12 StartInt_1) (ite StartBool_3 Start_1 Start_8)))
   (Start_12 String ("" "a" (str.at Start_5 StartInt_2) (str.substr Start_8 StartInt_2 StartInt_7) (str.replace Start_4 Start_2 Start_3) (str.from_int StartInt_1)))
   (StartInt_6 Int (0 (str.indexof Start Start StartInt_9) (str.to_int Start_2)))
   (StartBool_1 Bool (false (str.<= Start_9 Start_2) (str.prefixof Start_7 Start_14) (= StartInt_6 StartInt_7)))
   (StartInt_2 Int (1 0 (str.indexof Start_11 Start_15 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof "1" "1" (str.len y)))))

(check-synth)
