(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_2 String) (StartInt_2 Int) (StartInt_10 Int) (StartBool_1 Bool) (StartInt_7 Int) (Start_5 String) (StartInt_8 Int) (Start_11 String) (Start_6 String) (Start_4 String) (StartInt_4 Int) (StartInt_9 Int) (Start_7 String) (StartInt_6 Int) (StartInt_11 Int) (Start_9 String) (Start_13 String) (StartInt_5 Int) (StartInt_3 Int) (StartInt_1 Int) (Start_8 String) (StartBool_2 Bool) (Start_3 String) (Start_12 String) (Start_10 String))
  ((Start String (y x "0" "a" "" "1" (str.++ Start Start_1) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_1 Start_3 Start_3) (ite StartBool_1 Start Start_4)))
   (StartInt Int (1 0 (str.len Start_9) (str.to_int Start_13)))
   (StartBool Bool (true (and StartBool_1 StartBool_2) (str.<= Start_7 Start_11) (str.suffixof Start_2 Start_13)))
   (Start_1 String (y x (str.substr Start_4 StartInt_3 StartInt_5) (str.from_int StartInt)))
   (Start_2 String ("a" (str.substr Start_4 StartInt_10 StartInt_11) (ite StartBool_1 Start_3 Start_13)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_3 StartInt_9) (str.to_int Start_5)))
   (StartInt_10 Int (1 (str.to_int Start_6)))
   (StartBool_1 Bool (true false (and StartBool StartBool_1) (str.< Start_1 Start_7) (str.prefixof Start_12 Start_2) (str.contains Start_10 Start_2) (= StartInt_6 StartInt_8)))
   (StartInt_7 Int (1 0 (str.to_int Start)))
   (Start_5 String ("b" "0" (str.++ Start_2 Start_1) (str.substr Start_6 StartInt_5 StartInt_6) (str.replace Start_5 Start_2 Start_3) (ite StartBool Start_5 Start_1)))
   (StartInt_8 Int (1 (str.to_int Start)))
   (Start_11 String ("a" y x (str.++ Start_6 Start_10) (str.at Start_3 StartInt_4) (str.substr Start_9 StartInt_8 StartInt_4) (str.from_int StartInt_7) (ite StartBool_1 Start_6 Start)))
   (Start_6 String (y "1" "0" (str.++ Start_3 Start_6) (str.from_int StartInt_1)))
   (Start_4 String ("a" "0" (str.at Start_1 StartInt) (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start Start_2 Start_2) (str.from_int StartInt_4) (ite StartBool_1 Start_1 Start_1)))
   (StartInt_4 Int (0 (str.len Start_2) (str.indexof Start_5 Start_4 StartInt_2)))
   (StartInt_9 Int (1 0))
   (Start_7 String ("1" y "a" (str.replace Start_1 Start_2 Start) (str.from_int StartInt_7) (ite StartBool_2 Start_2 Start_8)))
   (StartInt_6 Int (1 (str.len Start_6) (str.to_int Start_3)))
   (StartInt_11 Int (0 1))
   (Start_9 String ("b" "0" (str.++ Start_1 Start) (str.at Start_9 StartInt_8) (str.replace Start_4 Start_2 Start_10) (str.from_int StartInt_1)))
   (Start_13 String (y (str.at Start StartInt_2) (str.replace Start_3 Start_1 Start_6)))
   (StartInt_5 Int (0 (str.len Start_5) (str.indexof Start Start_6 StartInt_2)))
   (StartInt_3 Int (1 0 (str.indexof Start Start_4 StartInt_1) (str.to_int Start_7)))
   (StartInt_1 Int (0 1 (str.to_int Start_4)))
   (Start_8 String ("1" (str.at Start_5 StartInt_2) (ite StartBool Start_1 Start_4)))
   (StartBool_2 Bool (false (str.< Start_6 Start_9) (str.suffixof Start_2 Start) (str.contains Start Start_5) (= Start_8 Start) (<= StartInt_1 StartInt_7)))
   (Start_3 String ("1" y (str.++ Start Start_10) (str.from_int StartInt_1)))
   (Start_12 String (y (str.substr Start_2 StartInt_1 StartInt_5) (str.replace Start_2 Start_9 Start_3) (str.from_int StartInt_8)))
   (Start_10 String ("b" x (str.substr Start_9 StartInt StartInt_3) (str.replace Start_11 Start_4 Start_6) (str.from_int StartInt_3) (ite StartBool_1 Start_8 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.at x 1) x)))

(check-synth)
