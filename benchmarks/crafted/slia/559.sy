(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (Start_14 String) (Start_17 String) (Start_5 String) (StartInt_1 Int) (StartInt_4 Int) (StartBool_1 Bool) (Start_2 String) (Start_1 String) (StartInt_5 Int) (StartBool_2 Bool) (Start_3 String) (StartInt_2 Int) (StartBool_3 Bool) (Start_8 String) (Start_9 String) (StartInt_7 Int) (Start_12 String) (Start_10 String) (StartInt_3 Int) (StartInt_6 Int) (Start_16 String) (Start_11 String) (StartInt_8 Int) (Start_7 String) (Start_13 String) (Start_6 String) (StartBool_4 Bool) (StartInt_9 Int) (Start_15 String))
  ((Start String ("" "a" "b" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_1 Start_2 Start) (ite StartBool Start_3 Start)))
   (StartInt Int (1))
   (StartBool Bool (false (and StartBool StartBool_2) (str.<= Start Start_4) (str.contains Start_5 Start_3) (= StartInt_2 StartInt_4)))
   (Start_4 String ("1" (str.++ Start_8 Start_14) (str.substr Start_13 StartInt_1 StartInt_7) (str.from_int StartInt_5) (ite StartBool_4 Start_11 Start_12)))
   (Start_14 String ("a" "b" (str.++ Start_5 Start) (str.replace Start_7 Start_17 Start_16) (str.from_int StartInt_2)))
   (Start_17 String ("a" "b" y (str.++ Start_11 Start_3) (str.substr Start_11 StartInt StartInt_3) (str.from_int StartInt_1)))
   (Start_5 String ("0" "" (str.++ Start_3 Start_6) (str.at Start_1 StartInt_5) (ite StartBool Start_7 Start_8)))
   (StartInt_1 Int (0 1 (str.indexof Start_1 Start StartInt) (str.to_int Start_1)))
   (StartInt_4 Int (1 (str.len Start_2) (str.indexof Start Start StartInt_2)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_2 StartBool_1) (str.<= Start_1 Start_2) (str.contains Start_1 Start) (<= StartInt_3 StartInt)))
   (Start_2 String ("0" (str.substr Start_1 StartInt_1 StartInt)))
   (Start_1 String ("a" (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_3 Start_5 StartInt_7)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool StartBool_1) (str.< Start_1 Start_2) (str.contains Start_3 Start) (= StartInt_3 StartInt_3) (<= StartInt_4 StartInt_2)))
   (Start_3 String (x "1" "" "a" (str.at Start_3 StartInt) (str.substr Start_2 StartInt StartInt)))
   (StartInt_2 Int (0 1))
   (StartBool_3 Bool (true false (not StartBool_3) (str.suffixof Start_9 Start_3) (str.contains Start_3 Start_6) (= Start_8 Start_5) (= StartInt_6 StartInt_6) (<= StartInt_7 StartInt_6)))
   (Start_8 String (x (str.++ Start Start_4) (str.substr Start_7 StartInt_6 StartInt_4) (str.replace Start_2 Start_3 Start_1) (ite StartBool_3 Start_9 Start)))
   (Start_9 String (x "0" (str.++ Start_5 Start_5) (str.substr Start StartInt_1 StartInt_6) (str.replace Start Start_1 Start_4)))
   (StartInt_7 Int (1 0 (str.indexof Start_10 Start_10 StartInt_4)))
   (Start_12 String (y "0" (str.at Start StartInt_7) (str.substr Start StartInt_8 StartInt_9) (str.from_int StartInt_4)))
   (Start_10 String ("a" y (str.++ Start_5 Start) (str.at Start_5 StartInt_4) (str.substr Start StartInt_8 StartInt_4)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.to_int Start)))
   (StartInt_6 Int (1 0 (str.indexof Start Start StartInt) (str.to_int Start_6)))
   (Start_16 String ("" (str.++ Start_16 Start_17) (str.at Start_2 StartInt_7) (str.from_int StartInt_3) (ite StartBool_3 Start_2 Start_5)))
   (Start_11 String ("b" (str.at Start_1 StartInt_3) (str.substr Start_7 StartInt_3 StartInt_4) (str.replace Start_10 Start_2 Start_3) (str.from_int StartInt_8)))
   (StartInt_8 Int (1 0 (str.len Start_8)))
   (Start_7 String ("0" (str.++ Start_7 Start_3) (str.at Start_2 StartInt_5) (str.replace Start_11 Start_6 Start_10)))
   (Start_13 String ("a" (str.++ Start_1 Start_5) (str.at Start_13 StartInt_3) (str.substr Start_14 StartInt_9 StartInt_7) (str.replace Start_15 Start_13 Start_6) (ite StartBool_2 Start_8 Start_10)))
   (Start_6 String ("1" "0" (str.++ Start_10 Start_3) (str.at Start_11 StartInt_5) (str.replace Start_4 Start_3 Start_12) (ite StartBool_4 Start_5 Start_11)))
   (StartBool_4 Bool (true (not StartBool) (str.< Start_5 Start_9) (str.prefixof Start_10 Start_9) (str.suffixof Start_7 Start_1)))
   (StartInt_9 Int (1 0 (str.indexof Start_13 Start_11 StartInt_8)))
   (Start_15 String ("a" (str.substr Start_6 StartInt_7 StartInt_3) (str.replace Start_16 Start_1 Start_7) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.indexof (str.replace x "" "1") "b" 0))))

(check-synth)
