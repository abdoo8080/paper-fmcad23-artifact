(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (StartInt_1 Int) (Start_1 String) (Start_4 String) (Start_2 String) (Start_6 String) (StartInt_2 Int) (StartInt_3 Int) (StartInt_4 Int) (Start_5 String) (Start_3 String) (StartInt_5 Int))
  ((Start String ("0" (str.replace Start_1 Start_2 Start)))
   (StartInt Int (1 (str.len Start) (str.to_int Start_1)))
   (StartBool Bool (true false (str.<= Start_1 Start_1) (<= StartInt_1 StartInt_2)))
   (Start_7 String (y "b" (str.substr Start_2 StartInt_3 StartInt_3) (str.replace Start_3 Start_5 Start_3)))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.to_int Start_3)))
   (Start_1 String ("" (str.++ Start Start_7) (str.substr Start_1 StartInt_1 StartInt_3) (str.from_int StartInt_1)))
   (Start_4 String (y (str.++ Start_1 Start_5) (str.at Start StartInt) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_6 Start Start_4) (str.from_int StartInt_1)))
   (Start_2 String (x "b" (str.++ Start_3 Start) (str.at Start_1 StartInt) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_1 Start Start_1)))
   (Start_6 String ("b" "a" "1" "" (str.++ Start_4 Start_1) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 (str.len Start_1) (str.indexof Start_5 Start_3 StartInt_2)))
   (StartInt_3 Int (0 1 (str.len Start) (str.indexof Start_2 Start StartInt_4) (str.to_int Start_6)))
   (StartInt_4 Int (0 (str.indexof Start_6 Start_6 StartInt_5)))
   (Start_5 String ("" "1" "b" (str.at Start_7 StartInt_2) (str.replace Start_2 Start_2 Start_2) (ite StartBool Start_2 Start_7)))
   (Start_3 String ("" "1" x y (str.++ Start_2 Start_4) (str.from_int StartInt_1) (ite StartBool Start_4 Start)))
   (StartInt_5 Int (0 1 (str.len Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof x "1") (str.++ "b" "a") "")))

(check-synth)
