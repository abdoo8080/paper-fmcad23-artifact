(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_21 String) (Start_2 String) (Start_19 String) (StartInt_10 Int) (Start_17 String) (StartInt_5 Int) (Start_11 String) (StartInt_3 Int) (Start_13 String) (StartBool_4 Bool) (StartInt_6 Int) (StartInt_9 Int) (Start_10 String) (Start_9 String) (Start_20 String) (Start_7 String) (StartBool_7 Bool) (StartBool_1 Bool) (Start_5 String) (Start_15 String) (Start_4 String) (Start_18 String) (Start_12 String) (Start_6 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_1 String) (StartBool_5 Bool) (StartBool_6 Bool) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_2 Int) (Start_3 String) (Start_8 String) (StartInt_8 Int) (Start_14 String) (Start_16 String) (StartInt_7 Int))
  ((Start String (y (str.++ Start_1 Start_2) (str.at Start StartInt) (str.replace Start_3 Start_3 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start_15 Start_7 StartInt_7) (str.to_int Start_14)))
   (StartBool Bool (false true (and StartBool_6 StartBool_6) (str.<= Start_6 Start_3) (str.prefixof Start_8 Start_1) (= Start_3 Start_20) (= StartInt_4 StartInt_9)))
   (Start_21 String (y x "0" (str.at Start_7 StartInt_9) (str.from_int StartInt_2) (ite StartBool_3 Start_15 Start_4)))
   (Start_2 String (y "0" (str.at Start_19 StartInt_4) (str.substr Start_13 StartInt_3 StartInt_2) (str.replace Start_14 Start_10 Start_13) (str.from_int StartInt_2) (ite StartBool_1 Start_14 Start_11)))
   (Start_19 String ("1" (str.at Start_14 StartInt_10) (str.from_int StartInt_7)))
   (StartInt_10 Int (0 1 (str.indexof Start_12 Start StartInt_8) (str.to_int Start_19)))
   (Start_17 String ("b" "0" "a" x (str.at Start_17 StartInt_9) (str.substr Start_13 StartInt_7 StartInt_9) (str.replace Start_8 Start_10 Start_7) (ite StartBool_2 Start_18 Start_4)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_11 Start_4 StartInt_2) (str.to_int Start_12)))
   (Start_11 String ("1" y "b" "" "0" (str.++ Start_8 Start_5) (str.from_int StartInt)))
   (StartInt_3 Int (1 0 (str.indexof Start_10 Start_11 StartInt_5) (str.to_int Start_12)))
   (Start_13 String ("" (str.++ Start_5 Start_9) (str.at Start_1 StartInt_3) (str.substr Start_2 StartInt_2 StartInt_3) (ite StartBool_5 Start_2 Start_13)))
   (StartBool_4 Bool (true (str.<= Start_4 Start_6)))
   (StartInt_6 Int (1 0 (str.len Start_11) (str.indexof Start Start_9 StartInt_6) (str.to_int Start_10)))
   (StartInt_9 Int (1 0 (str.indexof Start_3 Start_8 StartInt_10) (str.to_int Start_15)))
   (Start_10 String (x "b" y "1" "a" (str.at Start_6 StartInt_2) (str.from_int StartInt_3) (ite StartBool_3 Start_1 Start_11)))
   (Start_9 String ("a" (str.at Start_1 StartInt_2) (str.substr Start_10 StartInt_3 StartInt_5) (str.replace Start_3 Start_12 Start_4) (str.from_int StartInt_4) (ite StartBool_4 Start_4 Start)))
   (Start_20 String ("a" (str.at Start_11 StartInt_4) (str.substr Start_4 StartInt_2 StartInt_1) (str.from_int StartInt_7) (ite StartBool_7 Start_10 Start_18)))
   (Start_7 String ("a" (str.substr Start StartInt_2 StartInt_1) (str.replace Start_4 Start_1 Start_1)))
   (StartBool_7 Bool (false true (str.< Start_15 Start_21) (str.contains Start_14 Start_18) (= StartInt_6 StartInt_8)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start_3 Start_1) (str.contains Start Start_4) (= StartInt_1 StartInt) (<= StartInt StartInt_1)))
   (Start_5 String ("" x "b" "0" "a" "1" (str.++ Start_8 Start_4) (str.at Start_7 StartInt) (str.replace Start_6 Start_5 Start_8) (str.from_int StartInt_1)))
   (Start_15 String (x "0" (str.++ Start_9 Start_15) (str.replace Start Start_11 Start_4) (str.from_int StartInt_5) (ite StartBool_6 Start_14 Start_2)))
   (Start_4 String ("0" "" (str.++ Start_4 Start_5) (str.at Start_1 StartInt_2) (str.replace Start_3 Start_2 Start_6) (str.from_int StartInt_1)))
   (Start_18 String ("1" (str.at Start_3 StartInt_3) (str.replace Start_5 Start_6 Start_17)))
   (Start_12 String (x (str.replace Start_7 Start_12 Start_1)))
   (Start_6 String ("" "a" (str.at Start_5 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_6 Start)))
   (StartInt_4 Int (1 0 (str.len Start_1)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_5) (str.suffixof Start_10 Start) (<= StartInt_4 StartInt_5)))
   (Start_1 String ("a" (str.at Start_17 StartInt_9)))
   (StartBool_5 Bool (true (not StartBool_1) (and StartBool_6 StartBool_1) (str.< Start_1 Start_12) (str.prefixof Start_5 Start) (str.suffixof Start Start_13) (str.contains Start_4 Start_3)))
   (StartBool_6 Bool (true (and StartBool_5 StartBool_1) (str.< Start_7 Start_14) (str.<= Start_9 Start_1) (str.suffixof Start_5 Start_4) (= Start_13 Start_4) (= StartInt_4 StartInt_2)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start_2 Start_11 StartInt_5) (str.to_int Start_11)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_4) (str.<= Start_7 Start_5) (= StartInt_4 StartInt_5) (<= StartInt_5 StartInt_6)))
   (StartInt_2 Int (0 1 (str.len Start_5) (str.indexof Start Start_7 StartInt)))
   (Start_3 String ("1" "0" (str.at Start_2 StartInt_6) (str.substr Start_1 StartInt_3 StartInt_7) (str.from_int StartInt_8)))
   (Start_8 String ("" (str.++ Start_9 Start_1) (str.at Start StartInt) (str.replace Start_5 Start_5 Start_2) (str.from_int StartInt_3) (ite StartBool_3 Start_10 Start_3)))
   (StartInt_8 Int (1 0 (str.indexof Start_16 Start_10 StartInt_4)))
   (Start_14 String ("b" y "1" (str.++ Start_5 Start_8) (str.at Start_15 StartInt_5) (str.replace Start_6 Start_12 Start_3) (str.from_int StartInt_3)))
   (Start_16 String (y (str.++ Start_15 Start_3) (str.at Start_7 StartInt_5) (str.from_int StartInt_8) (ite StartBool Start_13 Start_2)))
   (StartInt_7 Int (0 (str.len Start_10) (str.indexof Start_13 Start_17 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ (str.++ "a" x) x) x y)))

(check-synth)
