(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_7 Bool) (StartBool_6 Bool) (Start_15 String) (Start_2 String) (Start_6 String) (StartInt_5 Int) (StartInt_1 Int) (Start_10 String) (Start_3 String) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_7 Int) (Start_5 String) (Start_11 String) (StartBool_4 Bool) (StartBool_2 Bool) (Start_8 String) (Start_4 String) (Start_7 String) (Start_12 String) (StartInt_6 Int) (StartBool_3 Bool) (Start_1 String) (StartInt_4 Int) (StartInt_8 Int) (Start_13 String) (StartInt_2 Int) (Start_9 String) (StartBool_5 Bool) (Start_14 String))
  ((Start String ("0" y "1" (str.++ Start_1 Start) (str.at Start_2 StartInt_1) (str.replace Start_3 Start_1 Start) (str.from_int StartInt_1) (ite StartBool Start_2 Start_4)))
   (StartInt Int (1 0 (str.len Start_12) (str.indexof Start_10 Start_13 StartInt)))
   (StartBool Bool (true (and StartBool_7 StartBool_1) (str.< Start_9 Start_5) (str.prefixof Start_13 Start_1) (str.suffixof Start_14 Start_1) (= Start_8 Start_14)))
   (StartBool_7 Bool (true false (str.< Start_8 Start_15) (= StartInt_6 StartInt_3)))
   (StartBool_6 Bool (true false (and StartBool StartBool_5) (str.< Start_1 Start_12) (str.<= Start_12 Start_14) (str.suffixof Start_2 Start_1) (= Start_11 Start_14) (<= StartInt_6 StartInt)))
   (Start_15 String ("a" y "0" x "" "1" (str.substr Start_8 StartInt_4 StartInt_8)))
   (Start_2 String ("b" "" (str.++ Start_5 Start) (str.at Start StartInt_4) (str.substr Start_1 StartInt_3 StartInt) (ite StartBool_2 Start_2 Start)))
   (Start_6 String ("" "0" y (str.++ Start_3 Start_1) (str.substr Start_3 StartInt_4 StartInt) (str.replace Start_4 Start_6 Start_4) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_10 Start_9 StartInt_2)))
   (StartInt_1 Int (1 (str.indexof Start_4 Start_6 StartInt_2) (str.to_int Start)))
   (Start_10 String ("a" x y "" "0" (str.++ Start_1 Start_4) (str.at Start_9 StartInt_1) (str.substr Start_3 StartInt_6 StartInt) (str.replace Start_8 Start_11 Start_1)))
   (Start_3 String ("b" "" "a" "0" x y "1" (str.replace Start_1 Start_2 Start_3) (ite StartBool_1 Start_3 Start_3)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.to_int Start_3)))
   (StartBool_1 Bool (true false (str.prefixof Start_1 Start_1) (<= StartInt_2 StartInt_3)))
   (StartInt_7 Int (1))
   (Start_5 String (x "0" (str.replace Start_1 Start Start_5) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_3)))
   (Start_11 String ("" "b" "0" "a" (str.replace Start_7 Start_9 Start_8) (str.from_int StartInt_1)))
   (StartBool_4 Bool (false (not StartBool) (and StartBool_3 StartBool_5) (str.< Start_4 Start) (str.<= Start_12 Start_4) (str.prefixof Start_4 Start_4)))
   (StartBool_2 Bool (false true (str.<= Start_2 Start_2) (str.suffixof Start_7 Start_3) (= Start_8 Start)))
   (Start_8 String (x y "b" "1" (str.at Start_2 StartInt_3) (str.substr Start_7 StartInt_4 StartInt)))
   (Start_4 String ("a" "" y (str.++ Start_4 Start_5) (str.from_int StartInt)))
   (Start_7 String (y "1" "a" x (str.from_int StartInt_3) (ite StartBool_3 Start_4 Start_1)))
   (Start_12 String (x (str.++ Start_12 Start_3) (str.at Start_6 StartInt_5) (ite StartBool_2 Start_11 Start_5)))
   (StartInt_6 Int (0 (str.len Start_3) (str.indexof Start_2 Start_7 StartInt_6) (str.to_int Start_1)))
   (StartBool_3 Bool (true false (and StartBool_3 StartBool) (str.<= Start_1 Start_9) (str.suffixof Start_10 Start_9) (str.contains Start_10 Start) (= Start_6 Start_11) (<= StartInt_3 StartInt_5)))
   (Start_1 String (x "" "0" "b" (str.substr Start_3 StartInt_5 StartInt) (str.from_int StartInt_8) (ite StartBool_5 Start_6 Start_12)))
   (StartInt_4 Int (1 (str.len Start_4) (str.to_int Start_2)))
   (StartInt_8 Int (1 0 (str.indexof Start_10 Start_3 StartInt_6) (str.to_int Start_12)))
   (Start_13 String ("0" (str.substr Start_10 StartInt_6 StartInt_7) (str.replace Start_14 Start_8 Start_7) (ite StartBool_3 Start_9 Start)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start_3 Start_5 StartInt) (str.to_int Start)))
   (Start_9 String ("" (str.at Start_5 StartInt_7) (ite StartBool_4 Start_7 Start_3)))
   (StartBool_5 Bool (false true (not StartBool) (str.prefixof Start_10 Start_1) (str.contains Start_6 Start_12)))
   (Start_14 String (x "b" (str.at Start_4 StartInt_4) (str.replace Start_4 Start_13 Start_4) (ite StartBool_6 Start_11 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= x "0") "0" "")))

(check-synth)
