(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (StartInt_8 Int) (Start_1 String) (Start_2 String) (StartInt_1 Int) (StartInt_6 Int) (Start_11 String) (StartBool_1 Bool) (Start_6 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_4 String) (Start_5 String) (Start_7 String) (Start_8 String) (StartInt_4 Int) (Start_9 String) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_5 Int) (Start_3 String) (StartInt_7 Int))
  ((Start String ("a" "" (str.++ Start_1 Start_2) (str.substr Start_1 StartInt StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 (str.indexof Start_3 Start_1 StartInt_4)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_1 StartBool_3) (str.prefixof Start_7 Start) (str.suffixof Start_2 Start_4) (= Start_5 Start_10) (= StartInt_8 StartInt_4) (<= StartInt_1 StartInt_7)))
   (Start_10 String ("a" y "" (str.++ Start_1 Start_2) (str.at Start_11 StartInt_4) (str.from_int StartInt_4) (ite StartBool Start_9 Start_1)))
   (StartInt_8 Int (1 0 (str.to_int Start_3)))
   (Start_1 String (x "b" "" "a" (str.from_int StartInt_7)))
   (Start_2 String ("0" "" "b" x (str.substr Start_4 StartInt_7 StartInt_5)))
   (StartInt_1 Int (0 (str.len Start_9)))
   (StartInt_6 Int (1 (str.indexof Start_5 Start_8 StartInt_7) (str.to_int Start_6)))
   (Start_11 String (x (str.replace Start_3 Start Start_10) (str.from_int StartInt_6)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool_2) (str.< Start Start_2) (str.prefixof Start_2 Start_3) (str.suffixof Start_1 Start) (= Start_2 Start_1) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_3)))
   (Start_6 String ("b" (str.at Start_3 StartInt_4) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_4 StartInt_2)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool) (str.< Start_1 Start_7) (str.<= Start Start_4) (str.prefixof Start_6 Start_4) (str.suffixof Start_4 Start_7) (= StartInt_6 StartInt_5) (<= StartInt_7 StartInt_3)))
   (Start_4 String (x "b" "1" (str.++ Start_4 Start_4) (str.substr Start_3 StartInt_3 StartInt_3) (str.replace Start_4 Start_2 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start_1)))
   (Start_5 String ("" (str.++ Start_6 Start_1) (str.replace Start_7 Start_7 Start_1)))
   (Start_7 String ("a" (str.at Start_5 StartInt_4) (str.substr Start_5 StartInt StartInt_1)))
   (Start_8 String ("a" (str.at Start_1 StartInt_6)))
   (StartInt_4 Int (0 (str.indexof Start_6 Start_6 StartInt_3) (str.to_int Start_1)))
   (Start_9 String ("0" (str.++ Start_2 Start_6) (str.at Start_3 StartInt_5) (str.replace Start_1 Start_9 Start_2)))
   (StartInt_2 Int (0))
   (StartBool_3 Bool (false true (str.< Start_8 Start_8) (str.prefixof Start_9 Start_1) (str.suffixof Start_3 Start_3) (= StartInt_7 StartInt_2) (<= StartInt_2 StartInt_4)))
   (StartInt_5 Int (0 (str.len Start_3) (str.indexof Start_5 Start StartInt_4) (str.to_int Start_3)))
   (Start_3 String ("b" (str.at Start_3 StartInt_5) (str.substr Start_5 StartInt_5 StartInt) (str.from_int StartInt_4)))
   (StartInt_7 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.substr "0" (str.indexof "b" x (str.indexof y x 1)) (str.len x)) (str.replace "a" y "1"))))

(check-synth)
