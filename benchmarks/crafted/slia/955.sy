(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartBool_5 Bool) (StartInt_3 Int) (StartBool_2 Bool) (Start_4 String) (StartInt_6 Int) (Start_2 String) (Start_6 String) (StartInt_2 Int) (Start_3 String) (StartInt_9 Int) (StartBool_4 Bool) (Start_1 String) (StartBool_1 Bool) (Start_7 String) (Start_10 String) (StartInt_1 Int) (Start_12 String) (Start_5 String) (StartInt_8 Int) (StartInt_4 Int) (Start_8 String) (Start_13 String) (Start_9 String) (Start_11 String) (StartInt_7 Int) (StartBool_3 Bool))
  ((Start String (y "b" (str.at Start StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_4) (str.indexof Start_7 Start_5 StartInt_1) (str.to_int Start_8)))
   (StartBool Bool (true false (not StartBool) (and StartBool StartBool_3) (str.prefixof Start_7 Start_3) (str.suffixof Start_1 Start_9) (str.contains Start_1 Start) (= Start_6 Start_10) (= StartInt_3 StartInt_3) (<= StartInt_6 StartInt_6)))
   (StartInt_5 Int (1 (str.indexof Start_3 Start_6 StartInt) (str.to_int Start_6)))
   (StartBool_5 Bool (true false (str.< Start_7 Start) (str.<= Start_4 Start_6) (str.prefixof Start_3 Start_10)))
   (StartInt_3 Int (0 1 (str.len Start) (str.indexof Start_6 Start_6 StartInt_2)))
   (StartBool_2 Bool (true false (not StartBool) (str.< Start_2 Start) (str.contains Start Start_1) (= StartInt_3 StartInt_1) (<= StartInt_1 StartInt_2)))
   (Start_4 String ("0" "" y "1" x "b" (str.++ Start Start_7) (str.substr Start_3 StartInt_4 StartInt_5) (str.replace Start_2 Start_7 Start) (str.from_int StartInt_1)))
   (StartInt_6 Int (0 (str.indexof Start_7 Start_1 StartInt_3) (str.to_int Start_8)))
   (Start_2 String ("1" x (str.++ Start_4 Start_3) (str.substr Start_5 StartInt StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_5)))
   (Start_6 String (y x "b" "0" (str.replace Start_6 Start_5 Start) (ite StartBool_2 Start_5 Start)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_3 Start_1 StartInt)))
   (Start_3 String ("1" (str.++ Start_2 Start_2) (str.at Start StartInt) (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_9 Int (1 (str.len Start_2) (str.indexof Start_10 Start StartInt_6)))
   (StartBool_4 Bool (false true (str.< Start_3 Start_5) (= Start_12 Start_3) (= StartInt_1 StartInt_4)))
   (Start_1 String ("b" (str.at Start_1 StartInt_2) (str.substr Start StartInt_2 StartInt_2)))
   (StartBool_1 Bool (false true (not StartBool) (str.<= Start_3 Start) (str.suffixof Start_3 Start_3)))
   (Start_7 String ("1" (str.at Start_2 StartInt_2) (ite StartBool_1 Start_5 Start_5)))
   (Start_10 String ("b" (str.from_int StartInt_5)))
   (StartInt_1 Int (0 1 (str.indexof Start Start StartInt) (str.to_int Start_1)))
   (Start_12 String ("a" "0" (str.substr Start_7 StartInt_2 StartInt_7) (str.replace Start_3 Start_4 Start_10) (ite StartBool_5 Start_13 Start_12)))
   (Start_5 String (x (str.substr Start_3 StartInt_3 StartInt_3)))
   (StartInt_8 Int (1 (str.len Start)))
   (StartInt_4 Int (0 1 (str.to_int Start_2)))
   (Start_8 String (y (str.++ Start_8 Start_8) (str.at Start_3 StartInt_6) (str.replace Start_4 Start_1 Start_5) (ite StartBool_2 Start_8 Start_3)))
   (Start_13 String ("" (str.++ Start_3 Start_10) (str.substr Start_12 StartInt_9 StartInt) (ite StartBool_1 Start_2 Start_4)))
   (Start_9 String (y "0" (str.++ Start_3 Start_8) (str.at Start_8 StartInt) (str.replace Start_3 Start_11 Start) (ite StartBool_1 Start_3 Start_11)))
   (Start_11 String ("" "a" "0" "1" (str.at Start_6 StartInt) (str.substr Start_4 StartInt_7 StartInt_8) (ite StartBool Start_3 Start_11)))
   (StartInt_7 Int (0 1 (str.indexof Start_2 Start_7 StartInt_8) (str.to_int Start_2)))
   (StartBool_3 Bool (false (not StartBool_4) (str.< Start_6 Start_9) (str.<= Start_10 Start_3) (str.contains Start_7 Start) (= Start_4 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.from_int (str.len (str.++ (str.at "0" (str.len (str.at "b" (str.indexof "0" y 1)))) "1"))))))

(check-synth)
