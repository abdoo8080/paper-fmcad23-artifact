(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_22 String) (Start_6 String) (Start_13 String) (Start_12 String) (StartInt_3 Int) (StartInt_7 Int) (Start_14 String) (Start_8 String) (Start_5 String) (StartInt_2 Int) (StartBool_5 Bool) (Start_1 String) (StartBool_1 Bool) (Start_20 String) (StartBool_2 Bool) (Start_2 String) (Start_16 String) (StartInt_1 Int) (Start_4 String) (StartBool_4 Bool) (Start_11 String) (Start_3 String) (Start_21 String) (StartInt_4 Int) (StartBool_6 Bool) (Start_17 String) (StartInt_5 Int) (StartInt_6 Int) (Start_9 String) (Start_7 String) (Start_15 String) (StartBool_3 Bool) (Start_10 String) (Start_18 String) (Start_19 String))
  ((Start String ("1" "a" "" "b" "0" x (str.++ Start_1 Start) (str.substr Start_2 StartInt_1 StartInt)))
   (StartInt Int (1 0 (str.indexof Start_3 Start_10 StartInt_2) (str.to_int Start_12)))
   (StartBool Bool (true (str.< Start_14 Start_14) (str.<= Start_3 Start_13) (str.contains Start_17 Start_5) (= Start_22 Start_13) (= StartInt_7 StartInt_6)))
   (Start_22 String ("1" "" "0" y (str.++ Start_9 Start_21) (str.from_int StartInt_3)))
   (Start_6 String ("1" (str.++ Start_8 Start_15) (str.at Start_12 StartInt_2) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_13 Start_21 Start_15)))
   (Start_13 String ("a" "" y (str.++ Start_9 Start_14) (str.at Start_8 StartInt_4) (str.replace Start Start_13 Start_6) (str.from_int StartInt_4)))
   (Start_12 String ("0" (str.at Start_5 StartInt_2) (str.substr Start_13 StartInt_2 StartInt_1) (str.replace Start_14 Start_7 Start_2) (str.from_int StartInt_1)))
   (StartInt_3 Int (1 (str.len Start_12) (str.indexof Start_17 Start_17 StartInt_1)))
   (StartInt_7 Int (1 (str.indexof Start_2 Start StartInt_3)))
   (Start_14 String ("1" "0" "" (str.++ Start_1 Start_14) (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start_11 Start_12 Start_11) (str.from_int StartInt_4)))
   (Start_8 String (x "b" (str.++ Start_5 Start_8)))
   (Start_5 String ("b" y (str.++ Start_5 Start_4) (str.at Start_4 StartInt_1) (str.substr Start_6 StartInt_2 StartInt_3) (str.replace Start_1 Start_7 Start_3) (ite StartBool_1 Start_6 Start_1)))
   (StartInt_2 Int (0 (str.len Start_21)))
   (StartBool_5 Bool (false (not StartBool_6) (and StartBool_1 StartBool_5) (str.suffixof Start_9 Start) (= Start_16 Start_3) (<= StartInt_5 StartInt_4)))
   (Start_1 String (x (str.substr Start_1 StartInt_2 StartInt_3)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_2) (str.<= Start_8 Start_2) (str.contains Start_3 Start_8) (= Start_2 Start_7) (= StartInt StartInt_1) (<= StartInt_3 StartInt_3)))
   (Start_20 String ("" (str.++ Start_4 Start_12) (str.substr Start_16 StartInt_4 StartInt_7) (str.replace Start_6 Start_1 Start_11) (str.from_int StartInt_5)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.< Start_3 Start_1) (str.<= Start_2 Start_9) (str.suffixof Start Start_4) (str.contains Start_10 Start_11) (= StartInt_1 StartInt_4) (<= StartInt_1 StartInt)))
   (Start_2 String ("a" (str.++ Start_3 Start_2) (str.at Start_1 StartInt_1) (str.replace Start_3 Start_2 Start_4)))
   (Start_16 String ("a" (str.substr Start_1 StartInt_5 StartInt_4) (str.replace Start Start_6 Start_14) (ite StartBool_5 Start_2 Start_11)))
   (StartInt_1 Int (1 0))
   (Start_4 String ("0" "1" "b" (str.++ Start_1 Start_4) (str.at Start_3 StartInt_1) (str.from_int StartInt)))
   (StartBool_4 Bool (true (str.<= Start_12 Start_14) (str.prefixof Start_10 Start_15) (str.contains Start_10 Start_6) (= Start_4 Start_5)))
   (Start_11 String (y "1" "" "b" (str.at Start_6 StartInt) (str.replace Start Start_9 Start_7) (str.from_int StartInt_5) (ite StartBool_4 Start_3 Start_12)))
   (Start_3 String ("0" (str.++ Start_2 Start_1) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start_2 Start_1 Start_5) (str.from_int StartInt)))
   (Start_21 String ("b" "a" x "0" (str.at Start_14 StartInt_6) (str.replace Start_8 Start_4 Start_20) (ite StartBool_1 Start_2 Start_16)))
   (StartInt_4 Int (1 (str.len Start_5) (str.indexof Start_2 Start_4 StartInt_4) (str.to_int Start_12)))
   (StartBool_6 Bool (true false (str.prefixof Start_1 Start_3) (str.suffixof Start_17 Start_4) (= StartInt_4 StartInt_1) (<= StartInt StartInt_4)))
   (Start_17 String ("b" (str.++ Start_3 Start_12) (str.substr Start StartInt_4 StartInt_4) (str.replace Start_13 Start_8 Start_8)))
   (StartInt_5 Int (0 1 (str.indexof Start_17 Start_2 StartInt_1) (str.to_int Start)))
   (StartInt_6 Int (0 1 (str.indexof Start_6 Start_10 StartInt_5) (str.to_int Start_13)))
   (Start_9 String ("a" "" y "0" "b" x "1" (str.++ Start_7 Start_5) (str.at Start_17 StartInt_3) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_5 Start_14 Start_17) (str.from_int StartInt_5)))
   (Start_7 String ("" "1" "a" (str.++ Start_20 Start_2) (str.substr Start_10 StartInt_7 StartInt_1) (str.from_int StartInt)))
   (Start_15 String ("" "0" (str.replace Start_16 Start_9 Start_4)))
   (StartBool_3 Bool (true false (str.<= Start_8 Start_18) (str.suffixof Start_12 Start_12) (= Start_6 Start) (= StartInt_6 StartInt_6) (<= StartInt_3 StartInt_7)))
   (Start_10 String ("0" "" (str.substr Start_9 StartInt_2 StartInt_2) (str.from_int StartInt_6)))
   (Start_18 String ("" "a" (str.++ Start_17 Start_18) (str.at Start_19 StartInt_5) (str.from_int StartInt_3)))
   (Start_19 String (x "1" "b" (str.++ Start_4 Start_17) (str.replace Start_20 Start_4 Start_6) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (not (str.<= y "")) (str.replace x "a" "1") "1")))

(check-synth)
