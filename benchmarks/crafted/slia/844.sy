(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_10 String) (StartBool_1 Bool) (Start_5 String) (Start_2 String) (StartInt_3 Int) (StartInt_8 Int) (StartInt_2 Int) (Start_8 String) (Start_13 String) (Start_4 String) (StartInt_1 Int) (StartBool_5 Bool) (Start_6 String) (Start_3 String) (Start_7 String) (Start_11 String) (Start_12 String) (Start_9 String) (StartInt_7 Int) (StartInt_5 Int) (StartBool_4 Bool) (StartInt_4 Int) (StartInt_6 Int) (Start_1 String) (StartBool_3 Bool) (Start_14 String))
  ((Start String ("b" (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool Start_2 Start_3)))
   (StartInt Int (0 1 (str.len Start_9) (str.to_int Start_11)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_1 StartBool_2) (str.prefixof Start_6 Start_10) (str.suffixof Start_9 Start_12) (= Start_13 Start_13)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool) (str.<= Start_4 Start_5) (str.prefixof Start_3 Start_2) (str.suffixof Start_2 Start_5) (= Start_3 Start_2) (= StartInt_1 StartInt_3) (<= StartInt StartInt_3)))
   (Start_10 String ("" "1" (str.replace Start_11 Start_4 Start_2) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (str.prefixof Start_4 Start_2) (str.suffixof Start_3 Start_2) (= StartInt StartInt_2) (<= StartInt_1 StartInt_1)))
   (Start_5 String ("a" "b" y (str.++ Start Start_5) (str.substr Start_6 StartInt_1 StartInt_3) (str.from_int StartInt_3) (ite StartBool_1 Start_5 Start_5)))
   (Start_2 String ("" x (str.at Start_2 StartInt) (ite StartBool Start Start_4)))
   (StartInt_3 Int (0 (str.indexof Start_2 Start_3 StartInt_1) (str.to_int Start_5)))
   (StartInt_8 Int (0 1 (str.len Start_10) (str.to_int Start_13)))
   (StartInt_2 Int (0 (str.len Start_5) (str.indexof Start_1 Start_6 StartInt_3)))
   (Start_8 String ("1" (str.at Start_8 StartInt_3) (str.substr Start_3 StartInt_2 StartInt) (str.from_int StartInt_4) (ite StartBool_2 Start_5 Start_2)))
   (Start_13 String ("b" (str.from_int StartInt_3)))
   (Start_4 String ("b" (str.replace Start_2 Start_4 Start) (str.from_int StartInt_2)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start_7 Start_7 StartInt_2) (str.to_int Start_5)))
   (StartBool_5 Bool (false (not StartBool) (str.<= Start_10 Start) (str.prefixof Start_12 Start_1) (str.suffixof Start_10 Start_6) (str.contains Start_7 Start_9) (= Start_9 Start_9) (= StartInt_1 StartInt_8) (<= StartInt_3 StartInt_8)))
   (Start_6 String ("1" (str.++ Start_6 Start_2) (str.at Start_3 StartInt_3) (str.substr Start_2 StartInt_1 StartInt) (ite StartBool Start_1 Start_5)))
   (Start_3 String ("0" (str.++ Start_2 Start_1) (str.at Start_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_1 Start_2)))
   (Start_7 String ("b" y "0" "1" (str.at Start_7 StartInt_4) (str.substr Start_8 StartInt StartInt)))
   (Start_11 String ("" (str.++ Start_9 Start_5) (str.substr Start_5 StartInt_5 StartInt_6) (str.replace Start_1 Start_1 Start_12) (str.from_int StartInt_4) (ite StartBool_3 Start_5 Start_4)))
   (Start_12 String ("1" (str.++ Start_10 Start_12) (str.substr Start_8 StartInt_6 StartInt_7) (str.replace Start_6 Start_6 Start_3) (ite StartBool_5 Start_2 Start_2)))
   (Start_9 String (x "0" "a" "b" "1" "" y (str.++ Start_8 Start_6) (str.at Start_7 StartInt) (str.substr Start StartInt_5 StartInt_6) (ite StartBool_4 Start_10 Start_7)))
   (StartInt_7 Int (0 (str.to_int Start_5)))
   (StartInt_5 Int (0))
   (StartBool_4 Bool (false true (str.< Start_8 Start_10) (str.<= Start_10 Start_3) (= Start_6 Start_2) (= StartInt_1 StartInt_7) (<= StartInt_2 StartInt_5)))
   (StartInt_4 Int (1 (str.len Start_8)))
   (StartInt_6 Int (0 (str.indexof Start_6 Start StartInt_4)))
   (Start_1 String ("1" (str.++ Start_14 Start_10) (str.substr Start_7 StartInt StartInt_6) (ite StartBool Start_8 Start_12)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_5) (str.<= Start_1 Start_3) (str.prefixof Start_6 Start) (str.suffixof Start_7 Start_3) (= Start_3 Start_9) (= StartInt_4 StartInt_3)))
   (Start_14 String ("b" (str.++ Start_13 Start_13) (str.at Start_12 StartInt_5) (str.substr Start_5 StartInt_6 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" (str.at y 1) y)))

(check-synth)
