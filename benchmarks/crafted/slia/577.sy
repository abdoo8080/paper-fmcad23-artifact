(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_7 String) (StartInt_4 Int) (Start_9 String) (Start_6 String) (Start_10 String) (StartBool_6 Bool) (StartBool_1 Bool) (StartBool_3 Bool) (StartBool_2 Bool) (Start_5 String) (Start_2 String) (Start_4 String) (Start_14 String) (Start_8 String) (Start_13 String) (StartInt_3 Int) (StartInt_5 Int) (StartBool_5 Bool) (Start_1 String) (StartInt_2 Int) (StartInt_1 Int) (Start_11 String) (StartBool_4 Bool) (Start_3 String) (StartInt_6 Int) (Start_12 String))
  ((Start String ("b" "1" x (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start Start_1) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (1 0 (str.len Start) (str.indexof Start_11 Start_8 StartInt_3)))
   (StartBool Bool (true false (not StartBool_5) (and StartBool_6 StartBool_3) (str.<= Start Start_4) (str.prefixof Start_4 Start) (= Start_7 Start) (<= StartInt StartInt_5)))
   (StartInt_7 Int (0 (str.len Start_6) (str.to_int Start_12)))
   (Start_7 String ("a" x "b" "0" (str.at Start_7 StartInt_1) (ite StartBool_4 Start_4 Start_7)))
   (StartInt_4 Int (0 1 (str.indexof Start_1 Start StartInt_4)))
   (Start_9 String (y "0" (str.at Start_6 StartInt_2) (str.from_int StartInt_3)))
   (Start_6 String ("b" (str.++ Start_4 Start_2)))
   (Start_10 String (y "" (str.++ Start_4 Start) (str.at Start_2 StartInt_3) (str.from_int StartInt_3)))
   (StartBool_6 Bool (false true (str.< Start_9 Start_9) (str.contains Start_9 Start_2) (= Start_5 Start) (= StartInt_5 StartInt_6) (<= StartInt_6 StartInt_4)))
   (StartBool_1 Bool (true false (not StartBool_3) (and StartBool_1 StartBool) (str.<= Start_3 Start_3) (str.contains Start Start_5) (= Start_4 Start_5) (= StartInt_2 StartInt)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_3) (str.< Start_6 Start_7) (str.contains Start Start_2) (= Start_1 Start_5)))
   (StartBool_2 Bool (true (str.< Start_6 Start_2) (str.<= Start_1 Start_5)))
   (Start_5 String (y "0" "1" "" x "b" (str.++ Start_4 Start_1) (str.substr Start_5 StartInt_1 StartInt)))
   (Start_2 String ("a" (str.++ Start_1 Start_3) (str.at Start_3 StartInt_3) (ite StartBool Start_1 Start)))
   (Start_4 String ("1" (str.at Start_5 StartInt_1) (str.from_int StartInt)))
   (Start_14 String ("a" (str.at Start_10 StartInt_5) (str.substr Start_4 StartInt_3 StartInt_3) (str.replace Start_4 Start_6 Start_13) (str.from_int StartInt_2)))
   (Start_8 String ("" "a" (str.++ Start_10 Start_7) (str.from_int StartInt_2)))
   (Start_13 String ("a" (str.substr Start_12 StartInt_1 StartInt_6) (str.replace Start_10 Start_14 Start_3) (ite StartBool_3 Start_10 Start_11)))
   (StartInt_3 Int (0 (str.to_int Start_2)))
   (StartInt_5 Int (0 (str.len Start_8) (str.indexof Start_4 Start_8 StartInt_5) (str.to_int Start_9)))
   (StartBool_5 Bool (false (str.prefixof Start_3 Start_4) (str.suffixof Start_13 Start_6) (= StartInt_1 StartInt_1) (<= StartInt_2 StartInt_7)))
   (Start_1 String ("a" (str.at Start_3 StartInt_5) (str.replace Start_8 Start_2 Start) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 1 (str.len Start_2)))
   (StartInt_1 Int (1 0 (str.len Start_4)))
   (Start_11 String (y (str.++ Start_12 Start_7) (str.substr Start_5 StartInt_2 StartInt_6) (str.replace Start_2 Start_10 Start_12) (str.from_int StartInt_2)))
   (StartBool_4 Bool (true false (str.< Start Start_2) (= StartInt_3 StartInt_5)))
   (Start_3 String ("1" (str.++ Start Start_1) (str.at Start_3 StartInt_4) (str.replace Start_2 Start_3 Start) (ite StartBool_2 Start_4 Start_4)))
   (StartInt_6 Int (0))
   (Start_12 String ("0" x (str.++ Start_13 Start_14) (str.at Start_1 StartInt_3) (str.substr Start_9 StartInt_2 StartInt) (str.replace Start_1 Start_9 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "" x) "b" "a")))

(check-synth)
