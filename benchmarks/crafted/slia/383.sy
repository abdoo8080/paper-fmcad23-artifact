(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_12 String) (StartInt_9 Int) (StartInt_6 Int) (Start_11 String) (Start_1 String) (StartInt_5 Int) (Start_10 String) (StartInt_7 Int) (Start_8 String) (StartInt_4 Int) (StartInt_8 Int) (Start_3 String) (StartInt_1 Int) (Start_5 String) (Start_14 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_13 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_4 String) (Start_6 String) (Start_2 String) (Start_9 String))
  ((Start String ("1" "0" y "b" "a" x (str.++ Start Start_1) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start Start)))
   (StartInt Int (1 0))
   (StartBool Bool (false (and StartBool StartBool) (= Start_8 Start_11) (= StartInt StartInt_5)))
   (Start_7 String ("0"))
   (Start_12 String (x ""))
   (StartInt_9 Int (0 (str.indexof Start_10 Start_5 StartInt_2) (str.to_int Start_14)))
   (StartInt_6 Int (1 (str.len Start_5)))
   (Start_11 String ("0" "" "1" (str.++ Start_6 Start) (str.substr Start_3 StartInt_5 StartInt_6) (str.replace Start_12 Start_5 Start_11) (str.from_int StartInt_7)))
   (Start_1 String ("0" (str.++ Start Start_6) (str.at Start_2 StartInt) (str.from_int StartInt_8)))
   (StartInt_5 Int (0 1))
   (Start_10 String ("a" "b" (str.at Start_11 StartInt_5) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_4)))
   (StartInt_7 Int (0 1 (str.len Start_8) (str.indexof Start_3 Start_13 StartInt_8)))
   (Start_8 String ("0" y (str.++ Start_2 Start_3) (str.at Start_9 StartInt_2) (str.substr Start_6 StartInt StartInt_3) (str.replace Start_8 Start_8 Start_3) (str.from_int StartInt_2)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_3 StartInt_3)))
   (StartInt_8 Int (0 1 (str.indexof Start_11 Start_2 StartInt_8) (str.to_int Start_11)))
   (Start_3 String ("1" (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_1 Int (0 1))
   (Start_5 String ("a" (str.at Start_1 StartInt_3) (str.replace Start_1 Start_5 Start)))
   (Start_14 String ("" (str.at Start_7 StartInt_7) (str.substr Start_13 StartInt_3 StartInt_4) (str.from_int StartInt_4)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.suffixof Start Start_5) (<= StartInt_2 StartInt_1)))
   (StartInt_3 Int (0))
   (Start_13 String ("1" y "b" (str.substr Start_13 StartInt StartInt_5) (str.from_int StartInt_9) (ite StartBool_2 Start_8 Start_2)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool) (str.< Start_6 Start_6) (str.<= Start Start_3) (<= StartInt_3 StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_5)))
   (Start_4 String (x "b" "1" y "" "a" "0" (str.++ Start Start_1) (str.replace Start_4 Start Start_3) (str.from_int StartInt_1)))
   (Start_6 String ("b" (str.++ Start_1 Start_3) (str.at Start_7 StartInt_2) (str.replace Start_8 Start_1 Start_2) (str.from_int StartInt_4)))
   (Start_2 String ("1" (str.++ Start_3 Start_1) (str.at Start StartInt_1) (str.substr Start_2 StartInt StartInt) (str.replace Start Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool Start_2 Start_4)))
   (Start_9 String (y "0" "a" (str.substr Start_4 StartInt_2 StartInt_1) (ite StartBool_1 Start_4 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "" x y) "a")))

(check-synth)
