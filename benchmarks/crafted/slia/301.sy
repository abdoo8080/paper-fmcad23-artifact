(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartBool_5 Bool) (StartBool_6 Bool) (Start_1 String) (StartBool_4 Bool) (StartInt_6 Int) (StartInt_1 Int) (Start_11 String) (StartInt_4 Int) (Start_9 String) (Start_2 String) (Start_4 String) (Start_3 String) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_2 Int) (Start_13 String) (StartInt_3 Int) (Start_6 String) (StartInt_5 Int) (Start_8 String) (Start_7 String) (Start_5 String) (StartBool_3 Bool) (Start_12 String) (Start_10 String))
  ((Start String ("0" (str.++ Start_1 Start) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt_1) (ite StartBool Start_2 Start_3)))
   (StartInt Int (0 1 (str.len Start_7) (str.to_int Start_6)))
   (StartBool Bool (true false (not StartBool_6) (str.<= Start_1 Start_12) (str.prefixof Start_9 Start_5) (<= StartInt_3 StartInt)))
   (StartInt_7 Int (0 (str.indexof Start Start_8 StartInt_2) (str.to_int Start_5)))
   (StartBool_5 Bool (false true (str.<= Start_3 Start_3) (str.prefixof Start_4 Start_13) (str.suffixof Start_7 Start_4) (str.contains Start_7 Start_3)))
   (StartBool_6 Bool (false (not StartBool_3) (and StartBool_2 StartBool_6) (str.< Start_6 Start_11) (= Start_9 Start_13) (<= StartInt_3 StartInt_5)))
   (Start_1 String ("a" x "b" (str.++ Start_2 Start_13) (str.substr Start_12 StartInt_2 StartInt_7) (str.from_int StartInt_2) (ite StartBool_5 Start_2 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_3 StartBool_1) (str.< Start_10 Start_11) (str.suffixof Start_2 Start) (str.contains Start_9 Start_2) (<= StartInt_3 StartInt_3)))
   (StartInt_6 Int (1 (str.len Start_13)))
   (StartInt_1 Int (1 (str.to_int Start_2)))
   (Start_11 String ("a" (str.at Start_11 StartInt_1) (str.substr Start_12 StartInt_4 StartInt_1) (str.replace Start_7 Start_2 Start_9) (str.from_int StartInt_3) (ite StartBool_3 Start_9 Start_8)))
   (StartInt_4 Int (1 0 (str.len Start_1)))
   (Start_9 String ("a" x (str.++ Start_5 Start_4) (str.at Start_10 StartInt_4) (ite StartBool_2 Start_2 Start)))
   (Start_2 String ("0" (str.at Start StartInt_6) (str.replace Start_5 Start_13 Start_5) (ite StartBool Start_8 Start_12)))
   (Start_4 String ("b" (str.++ Start_8 Start_1) (str.at Start_5 StartInt) (str.replace Start_2 Start_4 Start_1) (str.from_int StartInt_1) (ite StartBool_3 Start_3 Start_6)))
   (Start_3 String ("1" "a" (str.from_int StartInt) (ite StartBool_1 Start Start_3)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool_2) (str.< Start_2 Start_3) (str.<= Start_3 Start) (str.suffixof Start_1 Start_1) (= StartInt StartInt_1)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_1 StartBool) (str.prefixof Start_1 Start) (str.suffixof Start_3 Start_2) (str.contains Start_4 Start_1) (= Start_3 Start_5) (= StartInt StartInt_2)))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_5 StartInt_3) (str.to_int Start_2)))
   (Start_13 String ("" (str.++ Start_9 Start_12) (str.at Start_5 StartInt_5) (str.substr Start_11 StartInt_2 StartInt_1)))
   (StartInt_3 Int (0 (str.len Start_3) (str.to_int Start_6)))
   (Start_6 String ("0" (str.++ Start_2 Start_7) (str.substr Start StartInt_1 StartInt) (ite StartBool Start_6 Start_8)))
   (StartInt_5 Int (0 1 (str.to_int Start_1)))
   (Start_8 String ("a" (str.++ Start_2 Start_1) (str.at Start_4 StartInt_2) (str.replace Start_1 Start_3 Start)))
   (Start_7 String ("" x (str.at Start_2 StartInt_3) (str.replace Start_6 Start_5 Start)))
   (Start_5 String (y (str.at Start_1 StartInt) (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start_5 Start_8 Start_7) (str.from_int StartInt)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_2 StartBool_4) (str.<= Start_7 Start_9) (str.contains Start_9 Start_10) (= StartInt_3 StartInt_1) (<= StartInt_2 StartInt_1)))
   (Start_12 String ("" "b" (str.++ Start_2 Start_12) (str.at Start_5 StartInt) (str.replace Start_4 Start_11 Start_9) (str.from_int StartInt_2) (ite StartBool_6 Start_6 Start_11)))
   (Start_10 String (x (str.++ Start_3 Start_5) (str.at Start_8 StartInt_2) (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_7 Start_2 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y "")))

(check-synth)
