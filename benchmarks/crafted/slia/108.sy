(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_6 String) (Start_9 String) (Start_4 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_2 String) (StartInt_2 Int) (Start_1 String) (Start_5 String) (Start_3 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_8 String) (StartInt_1 Int) (Start_7 String) (StartInt_5 Int))
  ((Start String ("" x y (str.++ Start_1 Start_2) (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt)))
   (StartInt Int (1 (str.indexof Start_1 Start_10 StartInt_2) (str.to_int Start_3)))
   (StartBool Bool (true (str.<= Start_10 Start_5) (str.suffixof Start Start_8)))
   (Start_10 String (y "" (str.++ Start_9 Start_5) (str.substr Start_5 StartInt StartInt_5) (str.from_int StartInt_2)))
   (Start_6 String ("b" (str.at Start_1 StartInt_1)))
   (Start_9 String ("b" "0" (str.++ Start_5 Start) (str.at Start_4 StartInt_5) (str.from_int StartInt_5)))
   (Start_4 String ("a" (str.++ Start_4 Start_2)))
   (StartBool_2 Bool (true (not StartBool) (str.<= Start_4 Start_6) (str.contains Start_9 Start_2) (= StartInt_4 StartInt_4) (<= StartInt_4 StartInt_5)))
   (StartInt_3 Int (1 (str.len Start_2) (str.to_int Start_3)))
   (Start_2 String ("a" "" "0" y (str.++ Start_2 Start_2) (str.at Start_3 StartInt_1) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_1 Start_1 Start_3) (ite StartBool Start_1 Start)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_3 Start_4 StartInt_2) (str.to_int Start_1)))
   (Start_1 String ("" "0" y (str.++ Start_2 Start_4) (str.at Start_10 StartInt_4)))
   (Start_5 String ("1" "b" (str.++ Start_2 Start_1) (str.substr Start_4 StartInt_1 StartInt_3) (str.replace Start_2 Start_6 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_5)))
   (Start_3 String (x "0" "b" (str.++ Start Start_5) (str.at Start_5 StartInt_2) (str.substr Start_5 StartInt_1 StartInt_1)))
   (StartInt_4 Int (1 (str.len Start_1) (str.indexof Start_4 Start_4 StartInt_3)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_2) (str.< Start_7 Start) (str.prefixof Start_5 Start) (str.suffixof Start_3 Start_8) (str.contains Start_3 Start_2) (<= StartInt_2 StartInt)))
   (Start_8 String (y "a" (str.substr Start_8 StartInt_2 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_8 Start_8)))
   (StartInt_1 Int (1))
   (Start_7 String ("0" (str.++ Start_8 Start_1) (str.substr Start_1 StartInt_1 StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y "b")))

(check-synth)
