(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (StartInt_2 Int) (StartInt_1 Int) (StartBool_1 Bool) (Start_8 String) (Start_2 String) (Start_3 String) (Start_1 String) (Start_6 String) (Start_5 String) (Start_7 String) (Start_4 String))
  ((Start String ("1" (str.++ Start Start) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_1 Start_2) (ite StartBool Start_2 Start_2)))
   (StartInt Int (0 1 (str.to_int Start_3)))
   (StartBool Bool (false true (str.< Start_3 Start_4) (str.prefixof Start_5 Start_2) (str.suffixof Start_7 Start_5) (str.contains Start_3 Start_8) (= StartInt_3 StartInt)))
   (StartInt_3 Int (0 (str.len Start_3) (str.to_int Start_1)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_1 StartInt_1)))
   (StartInt_1 Int (1 (str.len Start_2)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (str.< Start_1 Start_2) (str.<= Start Start_6) (= StartInt StartInt_1) (<= StartInt StartInt_2)))
   (Start_8 String (y (str.at Start_7 StartInt_1) (str.substr Start_8 StartInt_1 StartInt_2)))
   (Start_2 String ("1" (str.substr Start_2 StartInt_1 StartInt_2)))
   (Start_3 String (x (str.++ Start_4 Start_3) (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start_5 Start_2 Start_6)))
   (Start_1 String ("0" (str.at Start_1 StartInt_2) (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start_2 Start_1 Start_2)))
   (Start_6 String (x (str.++ Start Start_6) (str.at Start_3 StartInt) (str.substr Start_4 StartInt StartInt_2) (str.from_int StartInt_2)))
   (Start_5 String ("1" (str.++ Start_6 Start_1) (str.replace Start Start_4 Start_3) (ite StartBool_1 Start_5 Start_1)))
   (Start_7 String ("a" x (str.at Start StartInt) (str.substr Start_5 StartInt_1 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_7 Start_7)))
   (Start_4 String ("1" "b" (ite StartBool_1 Start_7 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.at x 1) "a" x)))

(check-synth)
