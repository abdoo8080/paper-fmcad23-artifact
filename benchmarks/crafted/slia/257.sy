(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_2 Int) (Start_4 String) (StartInt_5 Int) (Start_8 String) (StartInt_7 Int) (StartInt_1 Int) (Start_14 String) (Start_5 String) (Start_2 String) (Start_12 String) (Start_3 String) (Start_16 String) (Start_17 String) (Start_6 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_10 String) (Start_7 String) (Start_9 String) (StartInt_10 Int) (StartInt_6 Int) (StartBool_2 Bool) (Start_11 String) (Start_13 String) (StartInt_8 Int) (StartInt_4 Int) (StartBool_3 Bool) (StartBool_4 Bool) (Start_15 String) (StartInt_9 Int))
  ((Start String ("b" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 1))
   (StartBool Bool (false (and StartBool_4 StartBool_2) (str.<= Start_11 Start_17) (str.prefixof Start_12 Start_14) (str.contains Start_13 Start_10)))
   (Start_1 String (y (str.++ Start_5 Start_1) (str.at Start_16 StartInt_3) (str.from_int StartInt_8)))
   (StartInt_2 Int (0 (str.indexof Start_14 Start_11 StartInt_10) (str.to_int Start_5)))
   (Start_4 String ("" y (str.++ Start_7 Start_8) (str.at Start_2 StartInt_6) (str.replace Start_4 Start Start)))
   (StartInt_5 Int (1 0))
   (Start_8 String ("1" "" (str.++ Start_4 Start_3) (str.replace Start_9 Start_10 Start_3) (str.from_int StartInt_6)))
   (StartInt_7 Int (1 (str.len Start_14)))
   (StartInt_1 Int (1 (str.indexof Start_17 Start_12 StartInt_10) (str.to_int Start_1)))
   (Start_14 String ("a" x (str.++ Start_6 Start_2) (str.substr Start_13 StartInt StartInt_7) (str.from_int StartInt_1)))
   (Start_5 String ("b" (str.++ Start_1 Start_5) (str.substr Start_5 StartInt_1 StartInt_1) (str.replace Start_4 Start_3 Start_2) (ite StartBool_2 Start_6 Start_1)))
   (Start_2 String ("0" (str.++ Start_4 Start_4) (str.substr Start_4 StartInt_2 StartInt_4) (str.from_int StartInt_2) (ite StartBool Start_4 Start_5)))
   (Start_12 String ("" (str.++ Start_2 Start_5) (str.at Start_4 StartInt_6) (str.substr Start StartInt StartInt) (ite StartBool_1 Start_12 Start_5)))
   (Start_3 String ("b" (str.++ Start_1 Start) (str.at Start_1 StartInt) (str.replace Start Start_3 Start_2)))
   (Start_16 String (y (str.at Start_1 StartInt) (str.replace Start_17 Start_17 Start_15)))
   (Start_17 String ("a" (str.at Start_12 StartInt_9) (str.substr Start_16 StartInt_9 StartInt) (str.replace Start_11 Start_16 Start_4) (str.from_int StartInt_10)))
   (Start_6 String (x (str.at Start StartInt_2) (str.substr Start_2 StartInt_5 StartInt_2) (str.replace Start Start_6 Start_3) (ite StartBool Start_5 Start)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_1 StartBool_3) (str.<= Start_2 Start_3) (str.contains Start_3 Start) (<= StartInt_1 StartInt_3)))
   (StartInt_3 Int (0))
   (Start_10 String (x "0" (str.at Start_9 StartInt_2) (str.replace Start Start_10 Start_2)))
   (Start_7 String ("1" (str.substr Start_11 StartInt_8 StartInt)))
   (Start_9 String ("0" (str.++ Start_7 Start) (str.at Start_11 StartInt_2) (str.replace Start_12 Start_3 Start_6) (str.from_int StartInt_5) (ite StartBool_3 Start_11 Start_5)))
   (StartInt_10 Int (0 (str.len Start_2) (str.indexof Start_15 Start_5 StartInt_6) (str.to_int Start_15)))
   (StartInt_6 Int (0 1 (str.to_int Start_5)))
   (StartBool_2 Bool (false true (str.suffixof Start Start_15) (<= StartInt_8 StartInt)))
   (Start_11 String ("" "b" (str.++ Start_13 Start_2) (str.at Start_13 StartInt_3) (str.from_int StartInt) (ite StartBool_2 Start_7 Start_4)))
   (Start_13 String ("1" (str.++ Start_3 Start_4) (ite StartBool Start_14 Start_9)))
   (StartInt_8 Int (1 0 (str.len Start_12)))
   (StartInt_4 Int (0 (str.len Start_5) (str.indexof Start_6 Start_2 StartInt_3) (str.to_int Start_2)))
   (StartBool_3 Bool (true (not StartBool_4) (str.contains Start_12 Start_5) (= Start_1 Start_1)))
   (StartBool_4 Bool (true false (and StartBool StartBool) (str.<= Start_10 Start_13) (str.suffixof Start_15 Start_5) (str.contains Start_13 Start_8) (= Start_7 Start_7) (= StartInt_8 StartInt_9)))
   (Start_15 String ("b" x (str.at Start StartInt_2) (ite StartBool_4 Start_17 Start_5)))
   (StartInt_9 Int (0 (str.len Start_5) (str.to_int Start_16)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at "0" (str.to_int x)) "1")))

(check-synth)
