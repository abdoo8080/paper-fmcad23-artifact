(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_8 Int) (Start_13 String) (Start_12 String) (StartBool_3 Bool) (StartBool_2 Bool) (Start_1 String) (Start_9 String) (Start_3 String) (Start_10 String) (StartInt_6 Int) (StartBool_1 Bool) (Start_4 String) (StartBool_4 Bool) (StartInt_2 Int) (Start_2 String) (Start_6 String) (StartInt_5 Int) (StartInt_4 Int) (Start_11 String) (StartInt_3 Int) (StartInt_1 Int) (Start_5 String) (Start_7 String) (StartInt_7 Int) (Start_8 String))
  ((Start String ("1" (str.from_int StartInt_1)))
   (StartInt Int (0))
   (StartBool Bool (true false (str.suffixof Start_7 Start_13) (<= StartInt_4 StartInt_8)))
   (Start_14 String ("1" (str.substr Start_5 StartInt_3 StartInt_2) (str.from_int StartInt_3) (ite StartBool_3 Start_9 Start_11)))
   (StartInt_8 Int (1 (str.indexof Start_13 Start_6 StartInt_4) (str.to_int Start_1)))
   (Start_13 String (y (str.substr Start_10 StartInt_4 StartInt_1) (str.replace Start_4 Start_13 Start_5) (str.from_int StartInt_5) (ite StartBool Start_5 Start)))
   (Start_12 String ("a" (str.++ Start_6 Start_3) (str.at Start_11 StartInt) (str.from_int StartInt_3) (ite StartBool_4 Start Start_4)))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool_2 StartBool_2) (str.< Start_10 Start_10) (str.prefixof Start_10 Start_5) (str.contains Start_1 Start_10) (= StartInt_7 StartInt_4)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_2 StartBool_1) (= Start_6 Start_5)))
   (Start_1 String (y "b" (str.replace Start_6 Start_6 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_10 Start_10)))
   (Start_9 String (x "a" y (str.++ Start_1 Start_4) (str.at Start_8 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_4) (ite StartBool Start_6 Start_3)))
   (Start_3 String ("" "1" y "0" (str.++ Start_5 Start_6) (str.replace Start_1 Start_2 Start_9)))
   (Start_10 String (y (str.++ Start_11 Start_9) (str.substr Start_11 StartInt_4 StartInt_5) (str.replace Start_5 Start_12 Start_6) (ite StartBool_2 Start_7 Start_12)))
   (StartInt_6 Int (1 (str.indexof Start_5 Start_3 StartInt_1) (str.to_int Start_1)))
   (StartBool_1 Bool (true (str.< Start Start_12) (str.<= Start_11 Start) (str.prefixof Start_11 Start_1) (str.suffixof Start_1 Start_11) (str.contains Start_14 Start_7) (= Start_1 Start_5) (<= StartInt_3 StartInt_8)))
   (Start_4 String (y "" x (str.++ Start_1 Start_3) (str.at Start_5 StartInt_1) (ite StartBool Start_6 Start_2)))
   (StartBool_4 Bool (true false (not StartBool) (str.< Start_9 Start_13) (str.contains Start_13 Start_11) (= Start Start_13)))
   (StartInt_2 Int (1 (str.len Start_2)))
   (Start_2 String (x "1" "0" y (str.++ Start_3 Start_3) (str.replace Start_1 Start_1 Start_3) (str.from_int StartInt) (ite StartBool Start_3 Start_4)))
   (Start_6 String ("b" (str.at Start StartInt_2) (str.substr Start StartInt_3 StartInt_4) (str.from_int StartInt_5)))
   (StartInt_5 Int (0 (str.indexof Start_5 Start_3 StartInt_2) (str.to_int Start_4)))
   (StartInt_4 Int (0 (str.indexof Start_2 Start_6 StartInt_3)))
   (Start_11 String (x (str.at Start_6 StartInt_2) (ite StartBool_4 Start_3 Start_11)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start StartInt_1)))
   (StartInt_1 Int (1 (str.indexof Start_1 Start StartInt_2) (str.to_int Start_1)))
   (Start_5 String ("" (str.at Start StartInt) (str.substr Start StartInt_5 StartInt_6) (str.replace Start_5 Start_2 Start_7)))
   (Start_7 String ("" "0" y (str.at Start_5 StartInt_7) (str.replace Start_5 Start Start_4)))
   (StartInt_7 Int (0 (str.len Start_8)))
   (Start_8 String ("0" (str.substr Start_3 StartInt_2 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof "b" (str.replace "b" "" x) 0))))

(check-synth)
