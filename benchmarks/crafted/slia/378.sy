(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_10 String) (Start_9 String) (Start_12 String) (Start_6 String) (Start_2 String) (StartBool_1 Bool) (Start_3 String) (Start_11 String) (Start_1 String) (Start_7 String) (Start_4 String) (Start_5 String) (StartInt_1 Int) (StartInt_6 Int) (Start_8 String) (StartInt_4 Int) (StartInt_2 Int) (StartInt_3 Int) (StartInt_5 Int))
  ((Start String (x (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start Start_2 Start_2) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.indexof Start_1 Start_7 StartInt_3)))
   (StartBool Bool (false true (not StartBool) (str.< Start Start_12) (str.prefixof Start_4 Start_13) (str.contains Start_9 Start_3) (= Start_7 Start_4) (= StartInt_5 StartInt)))
   (Start_13 String ("a" (str.++ Start_11 Start_2) (str.from_int StartInt_2)))
   (Start_10 String ("" (str.at Start StartInt_1) (ite StartBool Start_7 Start_9)))
   (Start_9 String ("a" (str.at Start_6 StartInt_5) (str.replace Start_6 Start_10 Start_10) (ite StartBool Start_11 Start_5)))
   (Start_12 String ("0" "a" (str.replace Start Start_13 Start_9) (str.from_int StartInt)))
   (Start_6 String ("a" (str.++ Start_5 Start_5) (str.replace Start_4 Start_1 Start_6) (ite StartBool_1 Start_5 Start_5)))
   (Start_2 String ("b" x (str.at Start StartInt) (str.substr Start StartInt_1 StartInt) (str.replace Start Start_3 Start_4) (str.from_int StartInt_1)))
   (StartBool_1 Bool (true (= Start_2 Start_4) (= StartInt_3 StartInt) (<= StartInt_2 StartInt_4)))
   (Start_3 String ("0" (str.at Start_3 StartInt_4) (str.substr Start_4 StartInt_4 StartInt) (str.from_int StartInt_2)))
   (Start_11 String ("0" (str.at Start_1 StartInt_6) (str.replace Start_9 Start_4 Start_6)))
   (Start_1 String ("a" (str.substr Start_5 StartInt_1 StartInt_3) (str.replace Start_6 Start_5 Start_3) (ite StartBool_1 Start_2 Start_5)))
   (Start_7 String ("" (str.++ Start_2 Start_6) (str.replace Start_4 Start_4 Start_6) (ite StartBool_1 Start_8 Start_8)))
   (Start_4 String ("0" y "" "a" (str.at Start StartInt_3)))
   (Start_5 String ("0" (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start_6)))
   (StartInt_1 Int (1 (str.indexof Start_5 Start StartInt_5)))
   (StartInt_6 Int (0 1 (str.indexof Start_1 Start_10 StartInt_6) (str.to_int Start_5)))
   (Start_8 String ("a" "b" y (str.++ Start_5 Start_5) (str.substr Start_8 StartInt_4 StartInt_5) (ite StartBool Start_9 Start)))
   (StartInt_4 Int (0 1 (str.indexof Start_2 Start_4 StartInt) (str.to_int Start_6)))
   (StartInt_2 Int (0 1 (str.len Start_3)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start Start_3 StartInt_3) (str.to_int Start_5)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_3 Start StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.replace y "1" x)))))

(check-synth)
