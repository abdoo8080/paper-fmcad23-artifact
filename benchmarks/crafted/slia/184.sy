(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_3 String) (Start_1 String) (Start_8 String) (StartInt_1 Int) (Start_12 String) (Start_4 String) (StartInt_5 Int) (StartInt_3 Int) (StartInt_6 Int) (Start_15 String) (Start_2 String) (Start_9 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_5 String) (StartBool_2 Bool) (Start_7 String) (Start_10 String) (StartBool_3 Bool) (Start_6 String) (Start_11 String) (StartInt_7 Int) (StartInt_2 Int) (Start_13 String) (StartInt_8 Int) (StartBool_4 Bool) (Start_14 String) (Start_16 String))
  ((Start String ("0" "" (str.at Start_1 StartInt) (str.replace Start_1 Start Start_1) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.indexof Start_3 Start_14 StartInt_3)))
   (StartBool Bool (true (not StartBool_4) (str.< Start_1 Start_5) (str.suffixof Start_1 Start_15) (= Start_17 Start_4)))
   (Start_17 String ("0" "a" x "" "1" y (str.++ Start_1 Start_4) (str.at Start_11 StartInt_5) (str.substr Start_1 StartInt_4 StartInt_3) (str.replace Start_14 Start_5 Start_12)))
   (Start_3 String ("0" y (str.substr Start_1 StartInt_3 StartInt) (str.replace Start_1 Start Start) (ite StartBool_2 Start Start_2)))
   (Start_1 String ("1" (str.at Start_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start)))
   (Start_8 String ("a" (str.substr Start StartInt StartInt_2) (str.replace Start_7 Start_3 Start_9) (str.from_int StartInt_4)))
   (StartInt_1 Int (0 (str.to_int Start_1)))
   (Start_12 String (y "b" "" (str.substr Start_3 StartInt_7 StartInt_5) (str.replace Start_3 Start_8 Start_11) (str.from_int StartInt_6)))
   (Start_4 String ("" (str.++ Start_5 Start_6) (str.at Start_7 StartInt_3) (ite StartBool Start_5 Start_8)))
   (StartInt_5 Int (1 0 (str.indexof Start_4 Start_7 StartInt_2) (str.to_int Start_10)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_4 StartInt_3)))
   (StartInt_6 Int (1 0 (str.len Start_7) (str.to_int Start_11)))
   (Start_15 String ("" "b" (str.at Start_11 StartInt_2) (str.from_int StartInt_4) (ite StartBool_1 Start_13 Start_6)))
   (Start_2 String (y "a" "1" (str.replace Start_3 Start_1 Start) (str.from_int StartInt_2)))
   (Start_9 String ("" y (str.replace Start_1 Start_8 Start_1) (ite StartBool Start_10 Start_8)))
   (StartBool_1 Bool (false (str.suffixof Start_1 Start) (str.contains Start_2 Start)))
   (StartInt_4 Int (0 (str.len Start_4)))
   (Start_5 String ("a" (str.++ Start Start_9) (str.substr Start_5 StartInt_6 StartInt_7) (str.replace Start_11 Start_10 Start_1) (str.from_int StartInt_1) (ite StartBool_2 Start_3 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.< Start_1 Start_3) (str.contains Start_3 Start) (= Start_3 Start_1) (= StartInt_1 StartInt_2) (<= StartInt_2 StartInt)))
   (Start_7 String ("b" x "" "1" "a" (str.at Start_8 StartInt_5)))
   (Start_10 String ("b" x (str.substr Start_3 StartInt_3 StartInt_3)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_4 StartBool_4) (str.< Start_5 Start_13) (= Start_10 Start_12) (= StartInt_1 StartInt) (<= StartInt_1 StartInt_6)))
   (Start_6 String ("b" x (str.++ Start_4 Start_11) (str.substr Start_4 StartInt_4 StartInt) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_8)))
   (Start_11 String ("0"))
   (StartInt_7 Int (0 (str.indexof Start_12 Start_11 StartInt_3)))
   (StartInt_2 Int (0 (str.indexof Start_5 Start_13 StartInt_7) (str.to_int Start_11)))
   (Start_13 String ("a" "1" (str.++ Start_12 Start_5) (str.substr Start_6 StartInt_5 StartInt) (str.replace Start_1 Start_8 Start_11) (str.from_int StartInt_5) (ite StartBool_3 Start_14 Start_2)))
   (StartInt_8 Int (1 (str.indexof Start_1 Start_9 StartInt_8)))
   (StartBool_4 Bool (true false (not StartBool_1) (str.< Start_1 Start_10) (str.<= Start_16 Start_14) (str.contains Start_13 Start_2) (= Start_14 Start_1) (<= StartInt_4 StartInt_8)))
   (Start_14 String (y "" (str.++ Start_13 Start_15) (str.substr Start_2 StartInt StartInt_8) (str.replace Start Start_13 Start_3) (str.from_int StartInt_5)))
   (Start_16 String ("0" "b" "" (str.++ Start_15 Start_10) (str.at Start_10 StartInt_1) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace (str.at x 1) "1" "0") "0")))

(check-synth)
