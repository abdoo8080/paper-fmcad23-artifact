(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartBool_2 Bool) (Start_4 String) (Start_5 String) (StartBool_1 Bool) (Start_2 String) (StartInt_1 Int) (Start_1 String))
  ((Start String ("" (str.at Start StartInt_1) (str.substr Start StartInt_1 StartInt_1)))
   (StartInt Int (0 (str.indexof Start_3 Start_3 StartInt) (str.to_int Start_5)))
   (StartBool Bool (false (not StartBool_2) (and StartBool StartBool) (= Start Start_5) (= StartInt StartInt_1)))
   (Start_3 String (y (str.++ Start_1 Start_4) (str.at Start StartInt_1) (str.substr Start_2 StartInt StartInt_1)))
   (StartBool_2 Bool (false (and StartBool StartBool_1) (str.< Start_2 Start_5) (str.prefixof Start Start_4) (str.contains Start_5 Start_2) (= Start Start_4) (<= StartInt StartInt)))
   (Start_4 String ("b" "1" y (str.at Start_5 StartInt_1) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt)))
   (Start_5 String ("" (str.at Start_5 StartInt)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_2) (str.< Start_3 Start_4) (= Start Start_5) (<= StartInt StartInt_1)))
   (Start_2 String ("0" (str.replace Start Start_2 Start_2) (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start StartInt_1) (str.to_int Start_2)))
   (Start_1 String ("b" x "0" (str.at Start_3 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 0) "b")))

(check-synth)
