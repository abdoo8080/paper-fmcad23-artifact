(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_8 String) (Start_6 String) (Start_5 String) (StartBool_1 Bool) (Start_1 String) (Start_4 String) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_3 Int) (Start_2 String) (Start_7 String))
  ((Start String ("0" (str.from_int StartInt)))
   (StartInt Int (1 (str.indexof Start_1 Start_1 StartInt) (str.to_int Start)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool StartBool) (str.< Start_3 Start_6) (str.<= Start_3 Start_1) (str.prefixof Start_3 Start_6) (str.suffixof Start_2 Start_7) (str.contains Start_4 Start) (= Start_7 Start_4)))
   (StartBool_2 Bool (true false (str.< Start_4 Start_6) (str.prefixof Start_2 Start_2) (str.suffixof Start_5 Start_8) (str.contains Start_8 Start_4) (= Start Start_7)))
   (Start_8 String (y "" "b" (str.at Start_2 StartInt) (str.from_int StartInt_1)))
   (Start_6 String ("0" x (str.at Start_6 StartInt_1) (str.replace Start_1 Start_1 Start_1)))
   (Start_5 String ("1" "b" (str.++ Start_4 Start_3) (str.at Start_4 StartInt_1) (str.substr Start_4 StartInt_2 StartInt) (str.from_int StartInt_3) (ite StartBool Start_4 Start_5)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_3 StartBool) (str.< Start_7 Start_7) (str.<= Start Start_2) (str.prefixof Start_8 Start_7) (= StartInt StartInt_4)))
   (Start_1 String ("1" (str.++ Start Start_1) (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool Start Start_2)))
   (Start_4 String (x "" (str.++ Start_5 Start_1)))
   (Start_3 String ("a" (str.replace Start_2 Start_2 Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_3 Start_4 StartInt_4)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.to_int Start_2)))
   (StartBool_3 Bool (false (str.suffixof Start_4 Start_6) (<= StartInt_2 StartInt_4)))
   (StartInt_1 Int (0 (str.indexof Start Start_5 StartInt)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_1 StartInt_3) (str.to_int Start_4)))
   (Start_2 String ("a" "" "1" "0" (str.++ Start_2 Start) (str.at Start_3 StartInt) (str.replace Start_4 Start_5 Start)))
   (Start_7 String (x (str.at Start_3 StartInt_1) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "b" "a")))

(check-synth)
