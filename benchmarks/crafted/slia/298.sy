(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_10 String) (Start_1 String) (StartInt_1 Int) (Start_9 String) (StartInt_5 Int) (Start_8 String) (StartBool_4 Bool) (Start_5 String) (Start_6 String) (StartInt_6 Int) (StartBool_1 Bool) (Start_3 String) (StartInt_3 Int) (StartInt_4 Int) (Start_11 String) (StartBool_3 Bool) (Start_4 String) (Start_7 String) (Start_2 String) (StartInt_2 Int) (StartBool_2 Bool))
  ((Start String (y x "b" "0" "" (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_1)))
   (StartInt Int (0 (str.len Start_9) (str.to_int Start_5)))
   (StartBool Bool (false true (and StartBool_5 StartBool_1) (str.< Start_4 Start_9) (str.prefixof Start_9 Start_6) (str.suffixof Start_5 Start_4) (str.contains Start_8 Start_10)))
   (StartBool_5 Bool (false true (not StartBool_1) (and StartBool StartBool_4) (str.contains Start_6 Start_10) (= Start_9 Start_11)))
   (Start_10 String ("a" (str.++ Start_4 Start_9) (str.replace Start_11 Start_3 Start_9) (str.from_int StartInt_4)))
   (Start_1 String ("1" "b" x "" (str.++ Start_2 Start_6) (str.from_int StartInt_3)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_3 Start_1 StartInt_3) (str.to_int Start_2)))
   (Start_9 String ("" (str.++ Start_6 Start_8) (str.at Start_5 StartInt) (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start_6 Start_4 Start) (str.from_int StartInt_1) (ite StartBool_4 Start_7 Start_8)))
   (StartInt_5 Int (0 1 (str.indexof Start_9 Start_5 StartInt_6) (str.to_int Start_6)))
   (Start_8 String (x "1" "b" (str.at Start_5 StartInt_5) (ite StartBool Start_8 Start)))
   (StartBool_4 Bool (true (not StartBool_4) (and StartBool StartBool_3) (str.< Start_6 Start_9) (= Start_1 Start_7) (= StartInt_2 StartInt_4) (<= StartInt_1 StartInt_3)))
   (Start_5 String (y (str.++ Start_5 Start_4) (str.from_int StartInt_2)))
   (Start_6 String ("" y "0" (str.substr Start_4 StartInt_4 StartInt_5) (str.replace Start_6 Start_4 Start_6) (str.from_int StartInt) (ite StartBool Start_7 Start_5)))
   (StartInt_6 Int (0 1 (str.indexof Start_7 Start_9 StartInt)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start_1 Start_2) (= Start_4 Start_2) (<= StartInt_3 StartInt_2)))
   (Start_3 String ("a" "" "b" (str.++ Start_2 Start_1) (ite StartBool_1 Start Start_2)))
   (StartInt_3 Int (0 (str.len Start_2)))
   (StartInt_4 Int (0 (str.len Start_5) (str.indexof Start_1 Start_1 StartInt_2)))
   (Start_11 String ("b" x (str.++ Start_10 Start_2) (str.at Start_9 StartInt) (str.from_int StartInt_1) (ite StartBool_4 Start_9 Start_10)))
   (StartBool_3 Bool (true false (str.< Start_1 Start_4) (str.<= Start_2 Start)))
   (Start_4 String (x (str.substr Start_4 StartInt_4 StartInt) (ite StartBool_2 Start_3 Start_1)))
   (Start_7 String (y (str.++ Start_1 Start_3) (str.substr Start_8 StartInt_2 StartInt_1) (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_4)))
   (Start_2 String ("" (str.at Start StartInt) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool Start_1 Start)))
   (StartInt_2 Int (0))
   (StartBool_2 Bool (false (str.< Start_1 Start_3) (str.prefixof Start_6 Start_2) (str.contains Start_2 Start_1) (= Start_1 Start_5) (= StartInt_3 StartInt) (<= StartInt StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.++ "0" "a") x)))

(check-synth)
