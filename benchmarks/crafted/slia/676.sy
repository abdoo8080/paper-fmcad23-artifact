(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_15 String) (StartBool_2 Bool) (StartInt_9 Int) (StartInt_4 Int) (Start_7 String) (Start_1 String) (StartBool_1 Bool) (StartBool_3 Bool) (Start_5 String) (Start_2 String) (StartBool_4 Bool) (StartInt_1 Int) (StartInt_7 Int) (Start_4 String) (Start_6 String) (Start_3 String) (StartInt_2 Int) (Start_8 String) (StartInt_6 Int) (StartInt_3 Int) (Start_9 String) (Start_11 String) (StartInt_5 Int) (StartInt_8 Int) (Start_10 String) (Start_13 String) (Start_12 String))
  ((Start String ("1" y "b" (str.substr Start StartInt StartInt_1) (str.replace Start Start_1 Start_1) (ite StartBool_1 Start Start_2)))
   (StartInt Int (0 (str.len Start_6) (str.indexof Start_10 Start_7 StartInt_9)))
   (StartBool Bool (false true (str.< Start_8 Start_11) (str.prefixof Start_8 Start_12) (str.contains Start_13 Start_11) (= Start_11 Start_5)))
   (Start_14 String ("" (str.substr Start_15 StartInt_6 StartInt_8)))
   (Start_15 String ("" (str.++ Start_14 Start_8) (ite StartBool_1 Start_3 Start_12)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.<= Start_2 Start_3) (str.prefixof Start Start_1) (str.contains Start_1 Start_3)))
   (StartInt_9 Int (1 0 (str.len Start_7) (str.to_int Start_9)))
   (StartInt_4 Int (1 (str.to_int Start_1)))
   (Start_7 String (y "1" "" (str.substr Start_6 StartInt StartInt_4) (str.from_int StartInt_1)))
   (Start_1 String ("1" (str.at Start_1 StartInt_3) (str.replace Start_5 Start_6 Start_6) (ite StartBool_3 Start_2 Start_7)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool_1) (str.<= Start Start_4) (str.prefixof Start_5 Start_2) (str.contains Start_1 Start_1) (= Start_5 Start_1)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool_1 StartBool_4) (str.prefixof Start_2 Start) (str.contains Start_8 Start_5) (= Start_7 Start_7) (= StartInt_5 StartInt_4) (<= StartInt_1 StartInt_2)))
   (Start_5 String ("a" x (str.replace Start_1 Start Start_3) (str.from_int StartInt_1) (ite StartBool_2 Start_1 Start_4)))
   (Start_2 String (x "0" (str.at Start_3 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_4 Start_2)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.< Start_5 Start_8) (str.<= Start_6 Start_6) (str.prefixof Start_9 Start_1) (str.suffixof Start_9 Start_9) (str.contains Start_5 Start_3)))
   (StartInt_1 Int (0 1 (str.len Start_11) (str.indexof Start_7 Start StartInt) (str.to_int Start_7)))
   (StartInt_7 Int (0 1 (str.len Start_3) (str.to_int Start_7)))
   (Start_4 String ("b" (ite StartBool_2 Start_3 Start)))
   (Start_6 String (x "0" (str.++ Start_10 Start) (str.at Start_3 StartInt) (str.substr Start_2 StartInt_2 StartInt_7) (str.replace Start_9 Start_1 Start_8) (ite StartBool_1 Start_4 Start_8)))
   (Start_3 String ("b" "0" (str.from_int StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start Start_3 StartInt)))
   (Start_8 String ("a" (str.++ Start_8 Start_9) (str.replace Start_7 Start_8 Start_4) (ite StartBool_2 Start Start_9)))
   (StartInt_6 Int (1 (str.len Start_4) (str.to_int Start_6)))
   (StartInt_3 Int (0 (str.len Start_6) (str.to_int Start_1)))
   (Start_9 String ("a" (str.++ Start_3 Start_3) (str.at Start_7 StartInt_6) (str.replace Start_5 Start Start_2)))
   (Start_11 String ("b" y "" x (str.++ Start_9 Start_11) (str.at Start StartInt_1) (str.substr Start_10 StartInt_8 StartInt_9) (str.from_int StartInt_6) (ite StartBool_1 Start Start_5)))
   (StartInt_5 Int (0))
   (StartInt_8 Int (0 1 (str.indexof Start_2 Start_7 StartInt_9) (str.to_int Start_10)))
   (Start_10 String ("0" "1" "b" (str.++ Start_11 Start_8) (ite StartBool Start_11 Start_2)))
   (Start_13 String (y))
   (Start_12 String ("a" (str.++ Start_6 Start_14) (str.replace Start_8 Start_11 Start_12) (ite StartBool_4 Start Start_15)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof y (str.at x 1) 1))))

(check-synth)
