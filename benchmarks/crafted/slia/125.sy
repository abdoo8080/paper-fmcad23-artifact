(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_3 Int) (StartInt_5 Int) (StartInt_2 Int) (StartBool_1 Bool) (StartBool_2 Bool) (Start_4 String) (StartInt_1 Int) (Start_2 String) (Start_3 String) (Start_6 String) (Start_5 String) (StartInt_4 Int) (Start_1 String))
  ((Start String ("" y (str.at Start_1 StartInt) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt)))
   (StartInt Int (0 (str.indexof Start_4 Start_1 StartInt_5) (str.to_int Start_1)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_1 StartBool_3) (str.<= Start_2 Start_2) (str.prefixof Start_2 Start_6) (str.contains Start_2 Start_1) (= StartInt_1 StartInt)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_1) (str.< Start_2 Start_1) (str.contains Start Start) (= Start Start_4)))
   (StartInt_3 Int (0 (str.len Start_1)))
   (StartInt_5 Int (1 0 (str.len Start_4) (str.to_int Start_1)))
   (StartInt_2 Int (0 (str.len Start_6)))
   (StartBool_1 Bool (false (str.suffixof Start_3 Start) (str.contains Start_3 Start_4)))
   (StartBool_2 Bool (true (not StartBool_1) (str.<= Start_3 Start_5) (str.suffixof Start_1 Start_4) (= StartInt_2 StartInt_2)))
   (Start_4 String ("b" "1" (str.substr Start StartInt_3 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.to_int Start_6)))
   (Start_2 String ("b" (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool_1 Start_1 Start_1)))
   (Start_3 String ("0" (ite StartBool Start_5 Start_4)))
   (Start_6 String (y "1" (str.++ Start_2 Start_2) (str.at Start_4 StartInt_4) (str.from_int StartInt_3)))
   (Start_5 String ("b" (str.replace Start Start_5 Start_3) (str.from_int StartInt_4) (ite StartBool Start_2 Start_5)))
   (StartInt_4 Int (0 (str.len Start_1)))
   (Start_1 String ("a" x "b" y (str.++ Start Start) (ite StartBool_2 Start_5 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x y x)))

(check-synth)
