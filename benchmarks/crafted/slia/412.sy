(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartInt_8 Int) (StartBool_3 Bool) (Start_10 String) (StartInt_6 Int) (StartBool_2 Bool) (Start_12 String) (Start_8 String) (Start_1 String) (Start_5 String) (StartInt_2 Int) (StartInt_1 Int) (Start_2 String) (StartInt_3 Int) (Start_7 String) (Start_11 String) (Start_9 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_6 String) (Start_4 String) (Start_13 String) (Start_3 String) (StartInt_4 Int))
  ((Start String (x "1" "a" (str.substr Start_1 StartInt StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0))
   (StartBool Bool (false true (not StartBool_2) (str.prefixof Start_5 Start_1) (str.suffixof Start_2 Start)))
   (StartInt_7 Int (0 (str.len Start_12)))
   (StartInt_8 Int (0 1 (str.len Start_13)))
   (StartBool_3 Bool (true false (and StartBool StartBool) (str.prefixof Start_7 Start_9) (str.contains Start_6 Start_6) (= StartInt_4 StartInt_7)))
   (Start_10 String (y (str.at Start_5 StartInt) (str.replace Start_10 Start_10 Start_2)))
   (StartInt_6 Int (1 0 (str.len Start_11) (str.indexof Start_3 Start_11 StartInt_3) (str.to_int Start_6)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool_3) (str.<= Start Start_7) (str.prefixof Start_8 Start_2) (str.contains Start_3 Start) (<= StartInt_5 StartInt_1)))
   (Start_12 String ("" (str.++ Start_1 Start_3) (str.at Start_2 StartInt_7) (str.substr Start_13 StartInt_3 StartInt)))
   (Start_8 String ("b" (str.++ Start_1 Start_5) (str.substr Start_8 StartInt_4 StartInt_4)))
   (Start_1 String ("1" "a" (str.at Start_2 StartInt_1) (str.substr Start StartInt StartInt)))
   (Start_5 String ("b" (str.++ Start_5 Start_2) (str.from_int StartInt) (ite StartBool Start_6 Start_5)))
   (StartInt_2 Int (1 (str.indexof Start_7 Start_5 StartInt_1) (str.to_int Start_6)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_2 Start StartInt)))
   (Start_2 String ("1" y (str.++ Start_3 Start_3) (str.replace Start_1 Start_4 Start_4) (ite StartBool_1 Start_5 Start_5)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start_5 Start_3 StartInt_3) (str.to_int Start_7)))
   (Start_7 String ("" x (str.at Start_7 StartInt_3) (str.substr Start_6 StartInt_1 StartInt_3) (ite StartBool_1 Start_3 Start_2)))
   (Start_11 String ("a" "b" "1" (str.++ Start_6 Start_3) (str.at Start_9 StartInt_5) (str.substr Start_9 StartInt_1 StartInt_4) (str.from_int StartInt_4)))
   (Start_9 String ("" x "b" (str.++ Start_10 Start_9) (str.substr Start StartInt_6 StartInt_2) (str.from_int StartInt_1)))
   (StartBool_1 Bool (false true (str.< Start_4 Start_7) (str.<= Start Start_1) (= Start Start_3) (= StartInt_3 StartInt)))
   (StartInt_5 Int (1 (str.indexof Start_9 Start_2 StartInt_5) (str.to_int Start_9)))
   (Start_6 String ("b" (str.at Start_1 StartInt_2) (str.substr Start_4 StartInt_3 StartInt_1) (str.replace Start_4 Start_5 Start_3)))
   (Start_4 String ("" (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_1)))
   (Start_13 String (y "a" "" (str.++ Start_8 Start_12) (str.at Start_2 StartInt_8) (str.replace Start_1 Start_5 Start_3)))
   (Start_3 String ("b" (str.at Start_6 StartInt_3) (str.substr Start_8 StartInt StartInt_2) (str.from_int StartInt_4)))
   (StartInt_4 Int (1 0 (str.len Start_1) (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "1" (str.++ y "a")) "a" x)))

(check-synth)
