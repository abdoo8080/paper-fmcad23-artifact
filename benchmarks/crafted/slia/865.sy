(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_12 String) (StartBool_5 Bool) (Start_10 String) (Start_9 String) (StartBool_3 Bool) (Start_7 String) (StartInt_4 Int) (StartInt_6 Int) (StartInt_3 Int) (Start_3 String) (Start_1 String) (StartInt_8 Int) (Start_11 String) (Start_2 String) (StartBool_1 Bool) (Start_4 String) (Start_5 String) (StartInt_2 Int) (Start_6 String) (StartInt_7 Int) (StartInt_5 Int) (StartBool_4 Bool) (StartInt_1 Int) (Start_8 String) (StartBool_2 Bool))
  ((Start String (x "" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (1 0 (str.len Start) (str.indexof Start_5 Start_1 StartInt_7) (str.to_int Start_5)))
   (StartBool Bool (true false (and StartBool_5 StartBool_5) (str.<= Start Start_1) (str.contains Start_11 Start_3) (= Start_12 Start_1) (= StartInt_6 StartInt_3) (<= StartInt_6 StartInt)))
   (StartBool_6 Bool (true false (and StartBool_6 StartBool_4) (str.contains Start_2 Start_7) (= StartInt_1 StartInt_7) (<= StartInt StartInt_8)))
   (Start_12 String ("1" (str.at Start_12 StartInt_2) (str.replace Start_9 Start_2 Start_3) (ite StartBool_6 Start_9 Start)))
   (StartBool_5 Bool (false true (and StartBool StartBool_1) (str.prefixof Start_5 Start_7) (= StartInt_1 StartInt_4)))
   (Start_10 String ("1" (str.++ Start_10 Start_6) (str.at Start_7 StartInt_6) (str.substr Start_4 StartInt_6 StartInt) (str.replace Start_1 Start_1 Start_11)))
   (Start_9 String ("0" (str.at Start_1 StartInt_3) (str.from_int StartInt_4) (ite StartBool_4 Start_10 Start_9)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_3) (str.<= Start Start_5) (str.suffixof Start_8 Start) (= Start_7 Start_9) (= StartInt StartInt_2) (<= StartInt_3 StartInt_1)))
   (Start_7 String ("1" (str.++ Start_2 Start) (str.substr Start_7 StartInt_4 StartInt_3) (ite StartBool_3 Start_6 Start_8)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.to_int Start_5)))
   (StartInt_6 Int (0 (str.len Start_8) (str.indexof Start_3 Start_2 StartInt_4)))
   (StartInt_3 Int (0 1))
   (Start_3 String ("0" (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_3 StartInt_3) (str.replace Start_3 Start_2 Start_4) (str.from_int StartInt_3)))
   (Start_1 String ("0" "" "a" (str.at Start_4 StartInt) (str.substr Start_5 StartInt_4 StartInt_2) (str.replace Start_4 Start Start_6)))
   (StartInt_8 Int (1 (str.len Start_8) (str.to_int Start_1)))
   (Start_11 String ("a" (str.replace Start_10 Start_5 Start_7) (str.from_int StartInt_1)))
   (Start_2 String ("0" (str.substr Start StartInt_3 StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool StartBool_1) (str.prefixof Start_3 Start_1) (= StartInt_3 StartInt_1) (<= StartInt_2 StartInt_3)))
   (Start_4 String ("1" (str.++ Start Start_3) (str.replace Start_3 Start_4 Start_5)))
   (Start_5 String ("" "1" "a" (str.replace Start Start_2 Start_5) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 (str.len Start) (str.indexof Start Start_4 StartInt) (str.to_int Start_5)))
   (Start_6 String ("b" "0" "" (str.at Start_4 StartInt_1) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_6)))
   (StartInt_7 Int (1 (str.len Start_2) (str.indexof Start_5 Start_5 StartInt_3) (str.to_int Start_4)))
   (StartInt_5 Int (1 0 (str.indexof Start_7 Start_1 StartInt_3)))
   (StartBool_4 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_4) (str.< Start_7 Start_6) (str.suffixof Start_1 Start_4) (= StartInt_2 StartInt_1)))
   (StartInt_1 Int (1 (str.len Start_4) (str.indexof Start_2 Start StartInt_1) (str.to_int Start_2)))
   (Start_8 String ("a" "1" x (str.++ Start_5 Start) (str.from_int StartInt_5) (ite StartBool_4 Start_8 Start)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_4) (str.< Start_1 Start_5) (str.<= Start_6 Start_4) (str.contains Start_6 Start_6) (<= StartInt_4 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "a" x) "0" "")))

(check-synth)
