(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_12 String) (StartBool_2 Bool) (Start_10 String) (StartInt_4 Int) (Start_13 String) (Start_9 String) (StartBool_1 Bool) (Start_1 String) (StartInt_2 Int) (StartInt_1 Int) (Start_11 String) (Start_3 String) (Start_7 String) (Start_4 String) (Start_6 String) (Start_5 String) (StartInt_3 Int) (Start_2 String) (Start_8 String))
  ((Start String ("0" "" x (str.++ Start_1 Start_1) (str.substr Start_1 StartInt StartInt)))
   (StartInt Int (1 (str.to_int Start_6)))
   (StartBool Bool (false (not StartBool_2) (and StartBool StartBool) (str.prefixof Start_4 Start_6) (str.suffixof Start_13 Start_9) (str.contains Start_1 Start_1) (= StartInt_4 StartInt) (<= StartInt_3 StartInt_4)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_8 Start_1 StartInt)))
   (Start_12 String (y (str.++ Start_2 Start_5) (str.at Start_9 StartInt_1) (str.substr Start_12 StartInt_5 StartInt_1) (str.from_int StartInt_4)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_2 StartBool_1) (= Start_11 Start_12) (<= StartInt StartInt_3)))
   (Start_10 String (x "0" (str.++ Start_3 Start_7) (str.replace Start_4 Start_11 Start_11) (str.from_int StartInt_4) (ite StartBool Start_11 Start_2)))
   (StartInt_4 Int (0 (str.len Start_10)))
   (Start_13 String ("a" x "1" "0" (str.at Start_9 StartInt_3) (str.from_int StartInt) (ite StartBool Start_3 Start_6)))
   (Start_9 String ("a" "b" (str.++ Start_8 Start_10) (ite StartBool_1 Start_8 Start_2)))
   (StartBool_1 Bool (true false (str.<= Start_10 Start) (str.suffixof Start_9 Start_2) (str.contains Start_9 Start_9) (= Start_1 Start_10) (<= StartInt_2 StartInt_4)))
   (Start_1 String ("a" (str.++ Start Start) (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start_2 Start)))
   (StartInt_2 Int (0 (str.len Start_2)))
   (StartInt_1 Int (0 (str.len Start) (str.to_int Start_1)))
   (Start_11 String ("" (str.at Start_8 StartInt_4) (ite StartBool_2 Start_6 Start_2)))
   (Start_3 String ("a" (str.++ Start_4 Start_2) (str.replace Start_2 Start_4 Start_4)))
   (Start_7 String ("" "a" "1" (str.at Start_8 StartInt) (str.replace Start_9 Start_8 Start_1)))
   (Start_4 String ("0" "1" y "" "a" x (str.++ Start_5 Start) (str.at Start_2 StartInt_2) (ite StartBool Start_2 Start)))
   (Start_6 String ("1" "a" "" y "0" (str.++ Start_7 Start_7) (str.at Start_6 StartInt) (str.replace Start Start_5 Start_8) (str.from_int StartInt_3) (ite StartBool Start_1 Start_6)))
   (Start_5 String ("a" (str.at Start StartInt) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0))
   (Start_2 String (y (str.++ Start Start) (str.at Start StartInt) (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt_2)))
   (Start_8 String (y "a" (str.++ Start_4 Start_8) (str.at Start_8 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.++ x x) "")))

(check-synth)
