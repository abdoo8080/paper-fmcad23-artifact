(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_12 String) (Start_11 String) (StartInt_6 Int) (StartBool_3 Bool) (Start_9 String) (StartInt_5 Int) (Start_1 String) (StartInt_2 Int) (StartInt_1 Int) (Start_2 String) (Start_10 String) (Start_4 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_5 String) (Start_6 String) (StartBool_4 Bool) (StartBool_1 Bool) (StartInt_4 Int) (Start_8 String) (Start_3 String) (Start_7 String) (StartInt_3 Int))
  ((Start String ("b" y (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt) (str.replace Start Start_1 Start_1)))
   (StartInt Int (1 0 (str.len Start_11)))
   (StartBool Bool (true (not StartBool_5) (and StartBool_3 StartBool_2) (str.< Start_1 Start_4) (str.<= Start_6 Start) (str.prefixof Start_5 Start_8) (str.suffixof Start_1 Start_12) (= Start_7 Start_9)))
   (StartBool_5 Bool (false (and StartBool_2 StartBool) (str.< Start Start_3) (str.<= Start_8 Start_4) (= StartInt_2 StartInt_6)))
   (Start_12 String ("0" (str.++ Start_4 Start_1) (str.at Start_1 StartInt_7) (str.replace Start_3 Start_6 Start_12) (str.from_int StartInt_1)))
   (Start_11 String ("" (str.++ Start_9 Start_9) (str.at Start StartInt_2) (str.substr Start_6 StartInt_5 StartInt_3) (str.replace Start_12 Start_7 Start_6) (str.from_int StartInt)))
   (StartInt_6 Int (0 1))
   (StartBool_3 Bool (false (= Start_4 Start_7) (<= StartInt_6 StartInt_6)))
   (Start_9 String (x "b" (str.++ Start_5 Start) (str.at Start_1 StartInt_4) (str.substr Start_8 StartInt_5 StartInt_2) (str.from_int StartInt) (ite StartBool_4 Start_9 Start)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_1 StartInt_1)))
   (Start_1 String ("0" (str.++ Start_2 Start_1) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt)))
   (StartInt_2 Int (1 (str.len Start_3) (str.to_int Start_1)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.indexof Start_1 Start_1 StartInt_1)))
   (Start_2 String (y (str.++ Start_1 Start_3) (str.at Start_2 StartInt_1) (str.replace Start_4 Start_3 Start) (str.from_int StartInt) (ite StartBool Start_3 Start_1)))
   (Start_10 String ("a" "" "0" (str.++ Start_1 Start_6) (str.at Start_1 StartInt_3) (str.replace Start_8 Start_5 Start_4) (ite StartBool_3 Start_8 Start_7)))
   (Start_4 String (y (str.from_int StartInt_1)))
   (StartInt_7 Int (0 1))
   (StartBool_2 Bool (true (and StartBool_4 StartBool_1) (str.< Start_5 Start_5) (str.<= Start_4 Start_2)))
   (Start_5 String (x (str.++ Start_3 Start_3) (str.at Start_3 StartInt_1) (str.replace Start_2 Start Start_6)))
   (Start_6 String ("1" "b" (str.++ Start_6 Start) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_4 Bool (true (not StartBool_2) (and StartBool StartBool) (str.< Start_4 Start_4) (str.prefixof Start_1 Start_6) (str.suffixof Start_7 Start_2) (= Start_3 Start_10)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_1 StartBool_3) (= Start_6 Start_7) (= StartInt_1 StartInt_3) (<= StartInt_4 StartInt_2)))
   (StartInt_4 Int (1 (str.len Start_4) (str.indexof Start_3 Start_8 StartInt)))
   (Start_8 String ("0" x "1" "" (str.replace Start_5 Start_7 Start_1)))
   (Start_3 String ("0" x (str.++ Start_2 Start) (str.replace Start_5 Start_2 Start_3) (str.from_int StartInt_1)))
   (Start_7 String (y "0" (str.++ Start_1 Start_8) (str.substr Start_9 StartInt_4 StartInt_5) (str.from_int StartInt_4)))
   (StartInt_3 Int (1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace y "a" y) 0 1)))

(check-synth)
