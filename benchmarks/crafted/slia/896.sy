(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_20 String) (Start_19 String) (StartInt_1 Int) (Start_2 String) (StartBool_3 Bool) (Start_6 String) (Start_8 String) (StartInt_4 Int) (Start_14 String) (Start_9 String) (StartInt_2 Int) (Start_3 String) (StartInt_5 Int) (StartInt_3 Int) (Start_4 String) (Start_5 String) (StartBool_2 Bool) (Start_1 String) (StartInt_8 Int) (StartBool_1 Bool) (Start_15 String) (StartInt_6 Int) (Start_12 String) (StartInt_9 Int) (StartInt_7 Int) (Start_16 String) (Start_13 String) (Start_11 String) (Start_7 String) (Start_17 String) (Start_10 String) (Start_18 String))
  ((Start String (x (str.++ Start Start) (str.from_int StartInt) (ite StartBool Start Start)))
   (StartInt Int (0 1 (str.len Start) (str.indexof Start Start StartInt_1) (str.to_int Start_1)))
   (StartBool Bool (true (str.< Start_5 Start_17) (str.prefixof Start_12 Start_19) (str.suffixof Start_15 Start_8) (= Start_17 Start_8)))
   (Start_20 String (x (str.from_int StartInt_5) (ite StartBool_3 Start_20 Start_1)))
   (Start_19 String ("a" y (str.substr Start StartInt_2 StartInt_7) (str.replace Start_19 Start_2 Start_20) (ite StartBool_3 Start_5 Start_3)))
   (StartInt_1 Int (1 0 (str.to_int Start_13)))
   (Start_2 String (x (str.at Start_12 StartInt_4) (str.replace Start_3 Start_12 Start_5) (str.from_int StartInt_7)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool_2) (str.< Start_12 Start_9)))
   (Start_6 String ("" (str.++ Start_3 Start_4)))
   (Start_8 String (x (str.++ Start_7 Start_8) (str.substr Start_6 StartInt_2 StartInt_3) (str.from_int StartInt_2)))
   (StartInt_4 Int (1 (str.to_int Start_3)))
   (Start_14 String (y (str.++ Start_15 Start_13) (str.at Start_2 StartInt_5) (str.substr Start_16 StartInt_2 StartInt_8)))
   (Start_9 String (y "1" (str.substr Start_6 StartInt_1 StartInt_7) (str.replace Start_8 Start_2 Start_10) (str.from_int StartInt_9) (ite StartBool Start_5 Start_14)))
   (StartInt_2 Int (0 1 (str.len Start_4)))
   (Start_3 String ("a" (ite StartBool_1 Start_4 Start_5)))
   (StartInt_5 Int (1 (str.indexof Start_11 Start_12 StartInt) (str.to_int Start_6)))
   (StartInt_3 Int (1 (str.len Start_6) (str.indexof Start_8 Start StartInt_3) (str.to_int Start)))
   (Start_4 String ("" (str.++ Start Start) (str.substr Start_6 StartInt_1 StartInt_2) (ite StartBool Start_7 Start)))
   (Start_5 String (y (str.replace Start_5 Start_3 Start) (str.from_int StartInt_1) (ite StartBool Start_5 Start_2)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_1 StartBool_1) (str.< Start_3 Start_2) (= Start_4 Start_8) (= StartInt_4 StartInt_2)))
   (Start_1 String ("0" (str.++ Start_1 Start) (str.at Start StartInt) (str.replace Start_2 Start_1 Start_3) (ite StartBool Start_3 Start_3)))
   (StartInt_8 Int (1 0 (str.indexof Start_13 Start_3 StartInt_7) (str.to_int Start_13)))
   (StartBool_1 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_3) (str.< Start_9 Start_10) (str.<= Start_4 Start_6) (= Start_9 Start_9) (= StartInt_5 StartInt_6)))
   (Start_15 String (y "" "a" (str.++ Start_5 Start_3)))
   (StartInt_6 Int (1 (str.indexof Start_6 Start_3 StartInt_1) (str.to_int Start_2)))
   (Start_12 String (x "" "1" (str.++ Start Start_2) (str.substr Start_13 StartInt_7 StartInt_3) (str.from_int StartInt_6) (ite StartBool_1 Start_12 Start_6)))
   (StartInt_9 Int (1 (str.len Start_5) (str.indexof Start_16 Start_9 StartInt_5)))
   (StartInt_7 Int (1 (str.len Start_4) (str.indexof Start_14 Start_1 StartInt_6)))
   (Start_16 String (x "0" (str.++ Start_9 Start_14) (str.from_int StartInt_8) (ite StartBool_1 Start_16 Start)))
   (Start_13 String ("1" (str.++ Start_9 Start_3) (str.at Start_10 StartInt_8) (str.substr Start_12 StartInt_4 StartInt_2) (str.replace Start_8 Start_17 Start_14)))
   (Start_11 String ("0" (str.++ Start_15 Start_8) (str.substr Start_4 StartInt_3 StartInt_5)))
   (Start_7 String ("0" y "1" (str.++ Start_3 Start_6) (str.replace Start_6 Start_7 Start_6) (ite StartBool_2 Start_1 Start_8)))
   (Start_17 String (y (str.substr Start_10 StartInt_9 StartInt_8) (str.replace Start_1 Start_17 Start_3) (str.from_int StartInt)))
   (Start_10 String ("a" "" (str.++ Start_13 Start_18) (str.substr Start_12 StartInt_3 StartInt_3) (str.replace Start Start_2 Start_15)))
   (Start_18 String (x (str.++ Start_4 Start_12) (str.at Start StartInt_3) (str.replace Start_5 Start_2 Start_4) (ite StartBool Start_5 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.at x 1) "")))

(check-synth)
