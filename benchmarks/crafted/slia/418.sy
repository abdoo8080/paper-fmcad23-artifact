(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (StartInt_1 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_2 String) (Start_1 String) (Start_3 String) (StartInt_2 Int))
  ((Start String (y x (str.substr Start StartInt StartInt_1) (str.replace Start Start Start_1) (str.from_int StartInt_2)))
   (StartInt Int (1))
   (StartBool Bool (false (not StartBool) (str.< Start_2 Start_4) (str.prefixof Start Start_4)))
   (Start_4 String ("a" (str.from_int StartInt_1)))
   (StartInt_1 Int (0 (str.len Start_3)))
   (StartInt_4 Int (1 0 (str.len Start_2) (str.to_int Start_3)))
   (StartInt_3 Int (0 (str.indexof Start_1 Start_2 StartInt_4)))
   (Start_2 String ("0" "" (str.at Start StartInt_3) (str.substr Start StartInt_3 StartInt_3) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool Start Start_1)))
   (Start_1 String ("0" (str.++ Start_2 Start) (str.at Start StartInt_2) (str.substr Start StartInt_1 StartInt_1) (str.from_int StartInt_1)))
   (Start_3 String ("1" (str.++ Start_3 Start_1) (str.from_int StartInt_4)))
   (StartInt_2 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.++ (str.replace "0" x "b") "0")))))

(check-synth)
