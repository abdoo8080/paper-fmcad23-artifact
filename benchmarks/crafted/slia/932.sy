(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_8 Int) (StartInt_7 Int) (StartBool_3 Bool) (Start_9 String) (Start_10 String) (Start_8 String) (StartInt_4 Int) (Start_2 String) (Start_12 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_7 String) (StartInt_1 Int) (Start_3 String) (Start_11 String) (StartInt_3 Int) (Start_4 String) (Start_5 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_1 String) (Start_6 String))
  ((Start String ("1" (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt) (str.replace Start_2 Start_2 Start) (ite StartBool Start_2 Start)))
   (StartInt Int (0 1 (str.len Start_4)))
   (StartBool Bool (true (and StartBool StartBool_1) (str.< Start_7 Start_3) (str.<= Start_9 Start_3) (str.prefixof Start_10 Start_9) (= StartInt_2 StartInt)))
   (StartInt_6 Int (1 0 (str.len Start_4)))
   (StartInt_8 Int (0))
   (StartInt_7 Int (0 1 (str.indexof Start_6 Start_12 StartInt_4) (str.to_int Start_12)))
   (StartBool_3 Bool (true (and StartBool StartBool) (str.< Start_10 Start_11) (str.<= Start_8 Start_12) (str.prefixof Start_6 Start) (str.suffixof Start Start_1) (<= StartInt_7 StartInt_1)))
   (Start_9 String ("1" "" (str.at Start_1 StartInt_6) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start Start_9 Start_3) (ite StartBool_3 Start_9 Start_2)))
   (Start_10 String ("b"))
   (Start_8 String ("" "b" x y "a" "1" "0" (str.++ Start_1 Start_7) (ite StartBool Start_4 Start)))
   (StartInt_4 Int (0 (str.len Start_4)))
   (Start_2 String ("a" "0" "" (str.at Start StartInt) (str.replace Start_2 Start Start_1) (ite StartBool_1 Start_1 Start)))
   (Start_12 String (y "" "b" (ite StartBool_3 Start_3 Start_7)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool) (str.prefixof Start_2 Start_3) (str.suffixof Start_2 Start_1) (= Start_3 Start_2) (= StartInt StartInt_2) (<= StartInt_1 StartInt_2)))
   (StartInt_2 Int (1 (str.to_int Start)))
   (Start_7 String ("b" "a" y "0" x (str.++ Start_3 Start_4) (str.at Start StartInt_2) (str.substr Start StartInt_1 StartInt_2) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start Start_4 StartInt_3) (str.to_int Start_5)))
   (Start_3 String (x (str.at Start StartInt_3) (str.replace Start Start_1 Start)))
   (Start_11 String ("0" (str.substr Start_7 StartInt_8 StartInt) (str.replace Start_6 Start_5 Start_7) (str.from_int StartInt_7)))
   (StartInt_3 Int (1 (str.len Start_2) (str.to_int Start_4)))
   (Start_4 String ("b" "1" y (str.++ Start_2 Start_4) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start_1 Start_3 Start) (ite StartBool Start_2 Start_2)))
   (Start_5 String ("a" "" "1" x (str.++ Start_3 Start_2) (str.substr Start_1 StartInt_3 StartInt_2) (ite StartBool_2 Start_4 Start_5)))
   (StartBool_2 Bool (false (not StartBool) (str.< Start_5 Start_1) (str.suffixof Start_4 Start_3) (str.contains Start_5 Start_3) (= StartInt_3 StartInt_5)))
   (StartInt_5 Int (1 0 (str.indexof Start_6 Start_5 StartInt_5) (str.to_int Start_5)))
   (Start_1 String ("" x (str.++ Start_7 Start_8) (str.replace Start_1 Start_6 Start_1) (ite StartBool_1 Start_2 Start_6)))
   (Start_6 String (x y "1" (str.++ Start_7 Start_5) (str.at Start_5 StartInt_3) (str.substr Start StartInt_1 StartInt) (str.replace Start Start_3 Start_7) (str.from_int StartInt_4) (ite StartBool_2 Start_5 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "b" y) "a" "")))

(check-synth)
