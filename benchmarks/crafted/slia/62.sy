(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_3 String) (StartBool_4 Bool) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_6 Int) (Start_4 String) (StartBool_1 Bool) (Start_1 String) (Start_5 String) (StartInt_4 Int) (StartInt_3 Int) (Start_7 String) (Start_8 String) (StartBool_3 Bool) (Start_6 String) (Start_2 String) (StartInt_5 Int) (Start_10 String) (Start_11 String) (Start_12 String) (Start_9 String))
  ((Start String ("1" "0" y (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_1 Start_2 Start)))
   (StartInt Int (1 (str.len Start_2) (str.indexof Start_7 Start_6 StartInt_2)))
   (StartBool Bool (true false (str.< Start_8 Start_9) (str.<= Start_12 Start_1) (str.prefixof Start_5 Start_4) (str.suffixof Start_8 Start_5) (= Start_10 Start_4) (= StartInt_4 StartInt_4)))
   (StartInt_1 Int (0 (str.len Start_8) (str.indexof Start_4 Start_3 StartInt_6)))
   (Start_3 String ("" "1" "b" "0" x (ite StartBool_2 Start_7 Start_10)))
   (StartBool_4 Bool (false (and StartBool_1 StartBool_1) (str.contains Start_7 Start_3) (= StartInt_2 StartInt) (<= StartInt_3 StartInt_3)))
   (StartInt_2 Int (1 (str.to_int Start_1)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_2 StartBool_4) (str.<= Start_9 Start_4) (str.prefixof Start_2 Start_6) (str.suffixof Start_8 Start_11) (= Start_7 Start_6) (= StartInt_2 StartInt_6)))
   (StartInt_6 Int (1 (str.to_int Start_4)))
   (Start_4 String ("a" "1" (str.++ Start_5 Start_6) (str.at Start_4 StartInt_1) (str.substr Start StartInt_2 StartInt_3) (str.from_int StartInt_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (str.< Start_3 Start_1)))
   (Start_1 String (y "" "1" (str.++ Start_4 Start_2) (str.replace Start_8 Start_3 Start_11) (ite StartBool_4 Start_5 Start)))
   (Start_5 String ("a" x (str.replace Start_7 Start_7 Start_7) (ite StartBool_3 Start_7 Start_7)))
   (StartInt_4 Int (1 0 (str.len Start) (str.indexof Start_1 Start_9 StartInt_1) (str.to_int Start_10)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_7 Start StartInt_1)))
   (Start_7 String ("1" x (str.++ Start_4 Start_4) (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start_3)))
   (Start_8 String ("1" (str.++ Start_5 Start_3) (str.at Start_2 StartInt) (ite StartBool Start_2 Start)))
   (StartBool_3 Bool (false (str.< Start_5 Start_6) (str.suffixof Start_6 Start_8) (= Start_4 Start_3) (= StartInt_4 StartInt_1)))
   (Start_6 String ("0" x y "1" (str.replace Start_3 Start_10 Start_10)))
   (Start_2 String ("1" "0" (str.replace Start_3 Start_4 Start_3) (ite StartBool Start_4 Start_2)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.indexof Start_9 Start_9 StartInt_4)))
   (Start_10 String ("a" "0" y (str.++ Start_11 Start_4) (str.at Start_2 StartInt) (str.substr Start_1 StartInt_4 StartInt_3)))
   (Start_11 String ("a" (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start_2 Start_1 Start_4) (str.from_int StartInt_5) (ite StartBool_3 Start_9 Start_8)))
   (Start_12 String ("0" (str.substr Start_1 StartInt StartInt_6) (str.from_int StartInt_2)))
   (Start_9 String (x (str.at Start_9 StartInt_5) (str.substr Start_11 StartInt_6 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_11 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "1" "")))

(check-synth)
