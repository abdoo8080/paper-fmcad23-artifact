(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_13 String) (StartInt_7 Int) (Start_11 String) (StartInt_6 Int) (Start_15 String) (StartInt_1 Int) (Start_10 String) (StartBool_3 Bool) (Start_12 String) (Start_9 String) (StartInt_5 Int) (StartInt_8 Int) (Start_7 String) (Start_4 String) (StartInt_2 Int) (Start_5 String) (Start_6 String) (Start_8 String) (Start_2 String) (StartInt_3 Int) (Start_1 String) (StartInt_4 Int) (Start_3 String) (StartBool_1 Bool) (StartBool_2 Bool))
  ((Start String ("a" "0" "b" "1" y x (str.++ Start Start) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start Start_2)))
   (StartInt Int (0 1 (str.len Start_1) (str.indexof Start_1 Start_13 StartInt_7) (str.to_int Start_7)))
   (StartBool Bool (false (str.contains Start Start_7) (= Start_12 Start_15) (= StartInt_4 StartInt_3) (<= StartInt_1 StartInt_8)))
   (Start_14 String (y (str.++ Start Start_1) (str.at Start_2 StartInt_5) (str.replace Start_11 Start_13 Start_7) (str.from_int StartInt_2) (ite StartBool Start_14 Start_14)))
   (Start_13 String (y "b" "a" (str.++ Start Start_4) (str.at Start_14 StartInt_4) (str.replace Start_1 Start Start_8) (str.from_int StartInt_3)))
   (StartInt_7 Int (0 (str.len Start)))
   (Start_11 String ("0" x "b" y "1" (str.at Start_10 StartInt_5) (str.substr Start_6 StartInt_2 StartInt_1) (ite StartBool Start_1 Start_12)))
   (StartInt_6 Int (0 1 (str.len Start_1) (str.indexof Start_10 Start_11 StartInt_3) (str.to_int Start_8)))
   (Start_15 String ("" "0" (str.++ Start_4 Start_1) (str.substr Start_1 StartInt_7 StartInt_1) (str.from_int StartInt_8) (ite StartBool_2 Start_3 Start_4)))
   (StartInt_1 Int (0))
   (Start_10 String ("1" "" (str.++ Start_11 Start_8) (str.at Start_5 StartInt_6) (str.replace Start Start_11 Start_7)))
   (StartBool_3 Bool (true (str.< Start_5 Start_4) (str.<= Start_2 Start_10) (str.suffixof Start Start_10) (str.contains Start_6 Start_10) (= Start_3 Start)))
   (Start_12 String ("a" (str.++ Start_12 Start_10) (str.replace Start_4 Start_12 Start_1)))
   (Start_9 String ("" (str.++ Start_8 Start_3) (str.substr Start_8 StartInt_2 StartInt_1) (str.from_int StartInt_4)))
   (StartInt_5 Int (1 0 (str.len Start_7) (str.indexof Start_6 Start_9 StartInt_2) (str.to_int Start_4)))
   (StartInt_8 Int (0 1 (str.len Start_13)))
   (Start_7 String (y (str.++ Start_1 Start_7) (str.at Start_2 StartInt_5) (str.replace Start_3 Start_6 Start_6) (ite StartBool_1 Start_1 Start_8)))
   (Start_4 String (x (str.++ Start_4 Start_2) (str.at Start_5 StartInt) (str.from_int StartInt_2)))
   (StartInt_2 Int (1 (str.len Start_4) (str.to_int Start)))
   (Start_5 String (y (str.at Start_3 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_6 Start_6)))
   (Start_6 String ("b" "" "a" (str.substr Start StartInt StartInt_1)))
   (Start_8 String (x "0" (str.++ Start_7 Start_2) (str.at Start_3 StartInt_1) (str.substr Start_6 StartInt_4 StartInt_3) (ite StartBool Start_8 Start)))
   (Start_2 String ("" (str.++ Start_1 Start_2) (str.at Start_2 StartInt_1) (str.from_int StartInt) (ite StartBool Start_3 Start_4)))
   (StartInt_3 Int (0 (str.to_int Start_5)))
   (Start_1 String (y "a" "1" "b" (str.substr Start_3 StartInt_4 StartInt_6) (str.replace Start_6 Start_11 Start_12) (str.from_int StartInt_6)))
   (StartInt_4 Int (0 (str.to_int Start_1)))
   (Start_3 String ("1" (str.++ Start_4 Start_6) (str.at Start StartInt) (ite StartBool_1 Start_5 Start)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_1) (str.prefixof Start_5 Start_5) (<= StartInt_2 StartInt_3)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_1) (str.< Start_2 Start_5) (str.prefixof Start_7 Start_1) (str.suffixof Start_7 Start) (str.contains Start_7 Start_3) (<= StartInt_3 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y y) 1)))

(check-synth)
