(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_7 Int) (Start_2 String) (StartInt_6 Int) (Start_8 String) (Start_10 String) (Start_1 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_11 String) (Start_3 String) (Start_5 String) (StartInt_5 Int) (StartInt_1 Int) (Start_4 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_6 String) (Start_9 String) (Start_7 String) (StartInt_4 Int) (StartBool_2 Bool))
  ((Start String ("a" (str.substr Start_1 StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start_10)))
   (StartBool Bool (false true (and StartBool StartBool_3) (str.< Start_4 Start_9) (str.<= Start_2 Start_9) (str.contains Start_9 Start_7) (= Start_10 Start_5) (= StartInt StartInt_5) (<= StartInt_3 StartInt_7)))
   (Start_12 String ("0" x "" (str.++ Start_9 Start_4) (str.substr Start_12 StartInt_1 StartInt_7)))
   (StartInt_7 Int (0 (str.len Start_11) (str.to_int Start_12)))
   (Start_2 String ("0" "b" (str.substr Start_4 StartInt_2 StartInt_4) (str.from_int StartInt_1)))
   (StartInt_6 Int (1 (str.len Start_5) (str.indexof Start_8 Start_7 StartInt_6) (str.to_int Start)))
   (Start_8 String ("a" (str.++ Start_3 Start_2) (str.at Start_4 StartInt_3) (str.from_int StartInt_4)))
   (Start_10 String (y x (str.++ Start_6 Start_6) (str.replace Start_8 Start_10 Start_5) (str.from_int StartInt_5) (ite StartBool_3 Start_4 Start_2)))
   (Start_1 String ("1" x (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_3)))
   (StartInt_3 Int (1 (str.len Start_5) (str.indexof Start_4 Start_2 StartInt)))
   (StartBool_3 Bool (true (not StartBool) (str.< Start_1 Start_3) (str.<= Start_2 Start_8) (str.prefixof Start_2 Start_3)))
   (Start_11 String ("1" (str.at Start StartInt_6) (str.replace Start_11 Start_4 Start) (str.from_int StartInt_2) (ite StartBool_3 Start_2 Start)))
   (Start_3 String ("b" "1" (str.at Start_2 StartInt_2) (str.substr Start_4 StartInt_1 StartInt_3) (str.from_int StartInt_3)))
   (Start_5 String (y (str.substr Start_1 StartInt_2 StartInt)))
   (StartInt_5 Int (1 0 (str.len Start_11) (str.to_int Start_1)))
   (StartInt_1 Int (1 (str.len Start_9)))
   (Start_4 String ("0" y "" "1" "a" x (str.++ Start Start_5) (str.substr Start_3 StartInt StartInt_3)))
   (StartInt_2 Int (0 1 (str.len Start_4)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.< Start_5 Start_6) (str.contains Start_2 Start_3) (<= StartInt_4 StartInt_2)))
   (Start_6 String ("1" (str.++ Start_1 Start) (str.at Start_1 StartInt_2) (str.from_int StartInt_4)))
   (Start_9 String ("0" (str.at Start_3 StartInt_3) (str.substr Start_4 StartInt_5 StartInt_1) (str.replace Start_10 Start Start_9)))
   (Start_7 String (x "" (str.from_int StartInt_1) (ite StartBool_1 Start_7 Start_4)))
   (StartInt_4 Int (0 1))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_1) (str.<= Start_7 Start_3) (<= StartInt_4 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace "0" (str.at x 1) "1")))))

(check-synth)
