(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_10 String) (Start_7 String) (Start_9 String) (Start_6 String) (Start_1 String) (Start_8 String) (StartInt_1 Int) (StartBool_1 Bool) (StartBool_5 Bool) (StartInt_4 Int) (Start_13 String) (StartInt_3 Int) (StartInt_2 Int) (StartInt_5 Int) (Start_15 String) (StartBool_4 Bool) (Start_3 String) (Start_14 String) (Start_2 String) (Start_11 String) (StartBool_3 Bool) (Start_16 String) (Start_12 String) (StartBool_2 Bool) (Start_4 String) (Start_5 String))
  ((Start String ("0" y))
   (StartInt Int (1))
   (StartBool Bool (false (str.< Start_1 Start_2) (str.prefixof Start Start_3) (str.suffixof Start_3 Start_4) (str.contains Start_5 Start_1) (= Start_6 Start_6) (<= StartInt_1 StartInt_2)))
   (StartInt_6 Int (1))
   (Start_10 String ("b" (str.at Start_6 StartInt_1) (str.replace Start_9 Start_11 Start_9) (ite StartBool_4 Start_5 Start_11)))
   (Start_7 String ("0" x (str.replace Start_1 Start_4 Start_11) (str.from_int StartInt_2) (ite StartBool_4 Start_13 Start)))
   (Start_9 String ("" "1" (str.++ Start_7 Start_2) (str.at Start_3 StartInt_1) (str.substr Start_3 StartInt_3 StartInt_2) (str.from_int StartInt_4) (ite StartBool Start_3 Start_7)))
   (Start_6 String ("1" (str.++ Start_3 Start_7) (str.substr Start_7 StartInt_3 StartInt) (str.replace Start_5 Start_4 Start_8) (str.from_int StartInt) (ite StartBool Start_5 Start_8)))
   (Start_1 String ("1" (str.substr Start_9 StartInt_6 StartInt) (str.replace Start_5 Start_11 Start_14) (str.from_int StartInt_3) (ite StartBool_4 Start_6 Start_9)))
   (Start_8 String (y "0" "1" (str.replace Start_8 Start_6 Start_3) (ite StartBool_1 Start_8 Start_8)))
   (StartInt_1 Int (0 1 (str.len Start_6) (str.indexof Start_5 Start_4 StartInt) (str.to_int Start_6)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_2 StartBool_2) (str.<= Start_8 Start_2) (str.suffixof Start_9 Start_1) (str.contains Start_7 Start_6) (= Start_8 Start) (= StartInt_2 StartInt)))
   (StartBool_5 Bool (true (not StartBool_4) (str.< Start_16 Start_10) (str.<= Start_2 Start_9) (str.prefixof Start_11 Start_6) (str.suffixof Start_15 Start_14) (<= StartInt_1 StartInt_4)))
   (StartInt_4 Int (0 (str.to_int Start_9)))
   (Start_13 String ("b" "0" (str.++ Start_9 Start_7) (str.replace Start_9 Start_11 Start_2)))
   (StartInt_3 Int (0 1 (str.to_int Start_3)))
   (StartInt_2 Int (1 0 (str.indexof Start_5 Start StartInt_3) (str.to_int Start_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_16 Start StartInt)))
   (Start_15 String ("1" "b" (str.++ Start_9 Start_8) (str.at Start_11 StartInt_1) (ite StartBool Start_6 Start)))
   (StartBool_4 Bool (true (str.contains Start_8 Start_2) (= Start_2 Start_11)))
   (Start_3 String (y "b" (str.replace Start_12 Start_7 Start_12) (str.from_int StartInt_4)))
   (Start_14 String (x (str.++ Start_16 Start_13) (str.at Start_12 StartInt_3)))
   (Start_2 String ("0" (str.replace Start_16 Start_6 Start_7) (str.from_int StartInt_2) (ite StartBool_2 Start_4 Start_5)))
   (Start_11 String ("1" (str.at Start_2 StartInt_1) (ite StartBool_1 Start_8 Start_12)))
   (StartBool_3 Bool (true (str.< Start_3 Start_4) (str.<= Start_4 Start_7) (str.prefixof Start_11 Start_4) (str.suffixof Start_5 Start_8) (= Start_13 Start_11) (= StartInt_3 StartInt) (<= StartInt StartInt_4)))
   (Start_16 String ("a" "b" x "0" (str.at Start_6 StartInt_1)))
   (Start_12 String ("b" x))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_1) (str.contains Start_7 Start_8) (= Start_6 Start_10)))
   (Start_4 String ("b" (str.++ Start_15 Start_15) (str.substr Start_5 StartInt_5 StartInt_4) (str.from_int StartInt_3) (ite StartBool_3 Start_7 Start_14)))
   (Start_5 String ("1" x (str.++ Start_5 Start_14) (str.replace Start_5 Start_7 Start_15) (str.from_int StartInt_1) (ite StartBool_5 Start_14 Start_15)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (<= 0 (str.to_int y)) (str.++ "a" (str.++ y "0")) (str.replace "1" y "a"))))

(check-synth)
