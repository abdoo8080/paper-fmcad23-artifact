(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_7 Int) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_4 Int) (Start_2 String) (StartInt_3 Int) (Start_4 String) (Start_3 String) (StartInt_6 Int) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_1 Int) (Start_1 String) (Start_5 String) (Start_6 String))
  ((Start String ("a" (str.++ Start_1 Start_1) (str.at Start StartInt_1) (str.substr Start StartInt StartInt) (str.from_int StartInt) (ite StartBool Start_2 Start_2)))
   (StartInt Int (1 (str.indexof Start_5 Start_2 StartInt_4) (str.to_int Start_3)))
   (StartBool Bool (true false (not StartBool_1) (str.<= Start_1 Start_5) (str.contains Start_2 Start_6) (= StartInt StartInt)))
   (StartInt_8 Int (0 (str.len Start_6) (str.to_int Start_3)))
   (StartInt_7 Int (1 0 (str.len Start_2)))
   (StartBool_1 Bool (true (not StartBool_2) (str.suffixof Start_5 Start_6) (str.contains Start_4 Start_4) (= StartInt_6 StartInt_1) (<= StartInt StartInt_7)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_3 Start_6 StartInt_4) (str.to_int Start_2)))
   (StartInt_4 Int (0 1 (str.len Start_3) (str.indexof Start_1 Start StartInt_4)))
   (Start_2 String ("a" (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_1 Start_3 Start_4)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_4 StartInt)))
   (Start_4 String ("0" x (str.replace Start_4 Start_1 Start_1)))
   (Start_3 String (x "0" (str.++ Start_3 Start_3) (str.at Start_4 StartInt_2) (str.substr Start_4 StartInt StartInt_1) (ite StartBool Start_2 Start)))
   (StartInt_6 Int (1 (str.indexof Start_4 Start_2 StartInt_6)))
   (StartInt_2 Int (1 0 (str.to_int Start_1)))
   (StartBool_2 Bool (false (str.< Start_5 Start) (str.<= Start_3 Start_2) (str.contains Start_5 Start_1) (= StartInt_8 StartInt_4)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start_4 Start_2 StartInt_1) (str.to_int Start)))
   (Start_1 String (y (str.++ Start_2 Start_1) (str.at Start_3 StartInt_3) (str.replace Start_5 Start Start_5)))
   (Start_5 String ("0" "b" (str.at Start_4 StartInt_2) (str.replace Start_4 Start_4 Start_3)))
   (Start_6 String ("a" (str.substr Start_6 StartInt_2 StartInt_5) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.replace "b" x "0"))))

(check-synth)
