(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (StartBool_2 Bool) (Start_3 String) (Start_4 String) (Start_2 String) (Start_7 String) (Start_6 String) (Start_1 String) (StartBool_1 Bool) (Start_5 String) (StartInt_1 Int) (StartInt_3 Int))
  ((Start String (y "" "1" "b" (str.at Start_1 StartInt) (str.replace Start_1 Start Start_1)))
   (StartInt Int (0 1))
   (StartBool Bool (false (= Start_3 Start_6)))
   (StartInt_2 Int (0 1 (str.to_int Start_1)))
   (StartBool_2 Bool (false (not StartBool_1) (str.contains Start Start) (= Start_3 Start_5) (= StartInt_1 StartInt_2)))
   (Start_3 String (x "" (str.++ Start_4 Start_2) (str.from_int StartInt)))
   (Start_4 String ("1" x "b" (str.replace Start_1 Start_4 Start_3) (str.from_int StartInt_2)))
   (Start_2 String ("1" "" "b" (str.++ Start_5 Start_2) (str.at Start_5 StartInt_1) (str.substr Start_5 StartInt StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_6 Start_2)))
   (Start_7 String (x "a" (str.++ Start_7 Start_2) (str.at Start_3 StartInt_3) (str.replace Start Start_4 Start_2)))
   (Start_6 String ("" "1" "b" (str.++ Start Start_6)))
   (Start_1 String (y "" "a" (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_1 Start_1 Start) (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_2) (str.< Start_3 Start_2) (str.suffixof Start_3 Start_5) (= Start_3 Start_3) (= StartInt_2 StartInt_2)))
   (Start_5 String (y x (str.++ Start_5 Start_7) (str.at Start StartInt_3) (str.substr Start_2 StartInt_1 StartInt) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start_2 Start_2 StartInt)))
   (StartInt_3 Int (1 0 (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= x "a") x "a")))

(check-synth)
