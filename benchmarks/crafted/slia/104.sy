(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_3 Bool) (Start_1 String) (StartInt_5 Int) (Start_9 String) (Start_10 String) (Start_2 String) (Start_7 String) (StartBool_1 Bool) (Start_5 String) (Start_11 String) (Start_8 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_2 Int) (StartInt_6 Int) (StartBool_2 Bool) (Start_6 String) (Start_4 String) (Start_3 String) (StartInt_4 Int))
  ((Start String ("0" "" (str.++ Start Start_1) (str.substr Start_2 StartInt StartInt) (ite StartBool_1 Start Start)))
   (StartInt Int (0 (str.len Start_1) (str.to_int Start_11)))
   (StartBool Bool (true (not StartBool_3) (and StartBool_2 StartBool_4) (str.< Start_11 Start_8) (str.<= Start_1 Start_8) (str.suffixof Start_8 Start_5) (str.contains Start_5 Start_1) (= Start_4 Start_10) (= StartInt_5 StartInt_5)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool StartBool_2) (str.< Start Start_4) (str.<= Start Start_10) (str.prefixof Start_1 Start_11) (str.suffixof Start_5 Start_2) (str.contains Start_1 Start_3) (= Start_2 Start_10) (<= StartInt_6 StartInt_1)))
   (StartBool_3 Bool (false true (str.<= Start_3 Start_2) (str.prefixof Start_10 Start_6) (= Start_4 Start_9) (= StartInt_1 StartInt_3) (<= StartInt_5 StartInt_4)))
   (Start_1 String ("b" (str.++ Start_6 Start_8) (str.replace Start_8 Start_3 Start_10) (str.from_int StartInt) (ite StartBool Start_5 Start_7)))
   (StartInt_5 Int (1 0 (str.indexof Start_7 Start_8 StartInt_4)))
   (Start_9 String ("a" "1" "0" "b" y (str.substr Start_6 StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_2 Start_2)))
   (Start_10 String ("b" (str.at Start_8 StartInt) (ite StartBool_3 Start_6 Start_5)))
   (Start_2 String ("b" "1" "" "0" "a" y (str.substr Start_7 StartInt_5 StartInt) (str.replace Start_2 Start_2 Start_5) (ite StartBool_2 Start_5 Start_5)))
   (Start_7 String (x (str.++ Start_4 Start_7) (str.replace Start_2 Start_5 Start_6) (str.from_int StartInt_3)))
   (StartBool_1 Bool (true false (and StartBool StartBool_1) (str.<= Start_3 Start_1) (str.prefixof Start_1 Start_4) (str.contains Start_4 Start_4) (= Start_5 Start_1) (<= StartInt StartInt)))
   (Start_5 String ("a" "0" (str.at Start StartInt_1) (str.substr Start_6 StartInt_2 StartInt_1) (str.replace Start_4 Start_1 Start_4) (ite StartBool Start_3 Start_7)))
   (Start_11 String ("" (str.++ Start_8 Start_9) (str.at Start_7 StartInt_4) (str.substr Start_8 StartInt_1 StartInt_4)))
   (Start_8 String ("1" (str.++ Start_4 Start_1) (str.at Start_5 StartInt_1) (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt)))
   (StartInt_1 Int (1 (str.indexof Start_5 Start_3 StartInt_3)))
   (StartInt_3 Int (0 1 (str.len Start_5) (str.indexof Start Start_6 StartInt_2) (str.to_int Start_8)))
   (StartInt_2 Int (1 0))
   (StartInt_6 Int (1 0 (str.len Start_10)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_1 Start_9) (str.contains Start_3 Start_6) (<= StartInt StartInt_4)))
   (Start_6 String ("b" x (str.++ Start Start_5) (str.at Start_2 StartInt_1) (str.substr Start_7 StartInt StartInt) (str.replace Start_1 Start_2 Start_6) (str.from_int StartInt_3)))
   (Start_4 String ("b" x y "1" "0" "a" (str.++ Start_7 Start_5) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_6 Start_7 Start_7) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_4)))
   (Start_3 String (x "0" "a" (str.at Start_7 StartInt) (str.from_int StartInt_1) (ite StartBool_2 Start_4 Start_5)))
   (StartInt_4 Int (0 (str.len Start_8) (str.indexof Start_5 Start StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace (str.at y 1) "" y) 0)))

(check-synth)
