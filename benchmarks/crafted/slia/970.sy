(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_6 Int) (StartInt_4 Int) (Start_13 String) (Start_12 String) (Start_2 String) (Start_10 String) (StartInt_1 Int) (Start_6 String) (StartInt_7 Int) (Start_8 String) (Start_4 String) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_5 Int) (Start_1 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_5 String) (Start_11 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_7 String) (Start_3 String) (Start_9 String))
  ((Start String (x "0" y (str.replace Start Start Start_1)))
   (StartInt Int (1 (str.len Start_7) (str.to_int Start_8)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_1 StartBool) (str.< Start_5 Start_11) (str.<= Start_9 Start_1) (str.prefixof Start_5 Start_2) (str.contains Start_10 Start_2) (<= StartInt_5 StartInt_1)))
   (StartInt_8 Int (0 1 (str.len Start_9) (str.to_int Start_12)))
   (StartInt_6 Int (1 (str.len Start_4) (str.indexof Start_13 Start_11 StartInt_7)))
   (StartInt_4 Int (1 0))
   (Start_13 String ("" (str.++ Start_8 Start_7) (str.substr Start_13 StartInt_4 StartInt_5) (str.replace Start_7 Start_9 Start_12) (str.from_int StartInt_2)))
   (Start_12 String ("b" (str.substr Start_2 StartInt_2 StartInt_4) (str.replace Start Start_6 Start_6) (str.from_int StartInt_1) (ite StartBool_4 Start_2 Start_10)))
   (Start_2 String ("b" (str.++ Start_2 Start) (str.substr Start_11 StartInt StartInt_1) (str.replace Start_12 Start Start_4)))
   (Start_10 String ("0" (str.substr Start_5 StartInt StartInt_3)))
   (StartInt_1 Int (1 0 (str.to_int Start_9)))
   (Start_6 String ("a" (str.++ Start_5 Start_1) (str.replace Start_7 Start_3 Start) (str.from_int StartInt)))
   (StartInt_7 Int (1 (str.len Start_11) (str.indexof Start_8 Start_8 StartInt_8)))
   (Start_8 String ("0" "b" (str.++ Start_9 Start) (str.from_int StartInt) (ite StartBool_1 Start_6 Start_1)))
   (Start_4 String ("1" (str.from_int StartInt_2) (ite StartBool_2 Start_9 Start_10)))
   (StartInt_3 Int (1 (str.len Start_9)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (str.prefixof Start_2 Start)))
   (StartInt_5 Int (0 (str.indexof Start_5 Start_12 StartInt_3) (str.to_int Start_6)))
   (Start_1 String ("b" (str.++ Start_2 Start) (str.replace Start Start_2 Start_1) (ite StartBool Start_3 Start_1)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_2) (str.prefixof Start_2 Start_4) (= StartInt_1 StartInt_2)))
   (StartInt_2 Int (1 0 (str.len Start) (str.indexof Start_5 Start_2 StartInt_2) (str.to_int Start)))
   (Start_5 String ("a" y "1" x "" (str.++ Start_6 Start_4) (str.at Start_4 StartInt_1) (str.replace Start_1 Start_2 Start_4) (ite StartBool_3 Start_6 Start_2)))
   (Start_11 String (x (str.++ Start_13 Start_7) (str.substr Start_4 StartInt_4 StartInt_6) (str.replace Start_3 Start_10 Start_2) (str.from_int StartInt_6) (ite StartBool_4 Start_13 Start_10)))
   (StartBool_3 Bool (true (not StartBool_3) (and StartBool StartBool) (str.< Start_4 Start_1) (str.prefixof Start_3 Start_5) (str.suffixof Start_3 Start_6)))
   (StartBool_4 Bool (false true (str.<= Start_9 Start_3) (str.prefixof Start_7 Start_9) (str.suffixof Start_10 Start_3) (= Start_13 Start_4) (= StartInt_5 StartInt_1) (<= StartInt StartInt_5)))
   (Start_7 String (x (str.replace Start_8 Start_6 Start_7) (ite StartBool_2 Start_8 Start)))
   (Start_3 String (y (str.++ Start_2 Start_3) (str.replace Start_3 Start Start_2) (ite StartBool_1 Start_1 Start_1)))
   (Start_9 String ("a" (str.substr Start StartInt_2 StartInt_3) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "b" (str.replace (str.at x 1) "0" "1") y) "1" "0")))

(check-synth)
