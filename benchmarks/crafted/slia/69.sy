(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_10 String) (StartInt_7 Int) (StartBool_3 Bool) (Start_12 String) (Start_11 String) (StartInt_5 Int) (StartInt_6 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_1 Int) (Start_6 String) (StartInt_3 Int) (Start_2 String) (Start_4 String) (Start_13 String) (Start_9 String) (Start_3 String) (Start_1 String) (StartInt_2 Int) (StartInt_4 Int) (Start_5 String) (Start_8 String) (Start_7 String))
  ((Start String (y (str.++ Start Start) (str.substr Start_1 StartInt_1 StartInt) (ite StartBool Start Start)))
   (StartInt Int (1 0 (str.len Start_5)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_3 StartBool_3) (str.< Start_10 Start) (str.<= Start_4 Start_4) (str.suffixof Start Start) (= Start_8 Start_11) (= StartInt_2 StartInt_5) (<= StartInt StartInt)))
   (StartInt_8 Int (1 0 (str.indexof Start Start_13 StartInt_8) (str.to_int Start_7)))
   (Start_10 String (y x "" (str.at Start_7 StartInt_3) (str.replace Start Start_13 Start_7) (str.from_int StartInt_5) (ite StartBool_3 Start_13 Start_11)))
   (StartInt_7 Int (1 0 (str.len Start_8)))
   (StartBool_3 Bool (false (str.< Start_7 Start_13)))
   (Start_12 String (y x "a" "b" (str.substr Start_10 StartInt_3 StartInt_7) (ite StartBool_2 Start_12 Start_2)))
   (Start_11 String (x "" (str.substr Start_10 StartInt_4 StartInt_4) (str.from_int StartInt_5) (ite StartBool_3 Start_12 Start_1)))
   (StartInt_5 Int (1 (str.len Start_7) (str.indexof Start_7 Start_5 StartInt_6) (str.to_int Start_2)))
   (StartInt_6 Int (1 0 (str.len Start_5) (str.to_int Start_4)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool) (str.< Start_4 Start_1) (str.suffixof Start_5 Start) (str.contains Start_9 Start_8) (<= StartInt_5 StartInt_6)))
   (StartBool_1 Bool (false (not StartBool_2) (str.< Start_9 Start_1) (str.prefixof Start_8 Start_9) (str.contains Start_6 Start_1) (= StartInt_2 StartInt_1) (<= StartInt_4 StartInt_3)))
   (StartInt_1 Int (0 (str.indexof Start_2 Start_1 StartInt_2)))
   (Start_6 String ("a" "0" (str.at Start_3 StartInt_4) (str.substr Start_6 StartInt_3 StartInt_4) (str.replace Start Start_4 Start_1) (str.from_int StartInt)))
   (StartInt_3 Int (0 1 (str.len Start_3)))
   (Start_2 String ("0" (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start Start_2)))
   (Start_4 String ("0" (str.++ Start_2 Start) (str.at Start_5 StartInt_1) (str.substr Start_2 StartInt_4 StartInt_1) (str.replace Start_4 Start_6 Start_6) (str.from_int StartInt_1) (ite StartBool Start_3 Start_5)))
   (Start_13 String ("" (str.at Start_2 StartInt_7) (str.substr Start StartInt_8 StartInt) (str.from_int StartInt_1) (ite StartBool Start_1 Start_1)))
   (Start_9 String (y (str.at Start_9 StartInt_4) (str.substr Start_3 StartInt StartInt_1) (ite StartBool_1 Start_5 Start_6)))
   (Start_3 String ("" (str.++ Start_2 Start_1) (str.at Start_3 StartInt) (str.substr Start_1 StartInt_1 StartInt_1)))
   (Start_1 String ("0" "1" x "b" y (str.at Start_4 StartInt_1) (str.from_int StartInt)))
   (StartInt_2 Int (0 (str.indexof Start Start_2 StartInt_3)))
   (StartInt_4 Int (1 (str.indexof Start_4 Start_4 StartInt_4)))
   (Start_5 String ("" x (str.++ Start_7 Start_2) (str.at Start_5 StartInt_2) (str.replace Start_4 Start_8 Start_3)))
   (Start_8 String ("a" x (str.++ Start_3 Start_4) (str.at Start_6 StartInt_1) (str.from_int StartInt)))
   (Start_7 String ("a" "b" "0" y (str.++ Start_9 Start_7) (str.replace Start_7 Start_7 Start_1) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.replace y "0" y) x)))

(check-synth)
