(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_20 String) (Start_18 String) (Start_1 String) (Start_2 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_8 String) (Start_5 String) (Start_3 String) (Start_15 String) (StartInt_2 Int) (StartInt_4 Int) (StartInt_6 Int) (Start_13 String) (Start_19 String) (StartBool_1 Bool) (Start_9 String) (StartBool_2 Bool) (Start_11 String) (StartBool_6 Bool) (Start_4 String) (Start_16 String) (Start_10 String) (StartBool_4 Bool) (StartBool_7 Bool) (StartInt_1 Int) (Start_12 String) (StartBool_8 Bool) (Start_14 String) (Start_6 String) (StartInt_7 Int) (StartInt_5 Int) (Start_17 String) (StartBool_5 Bool) (Start_7 String))
  ((Start String ("b" (str.++ Start_1 Start_1) (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt_1) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start_14 Start_14 StartInt_1)))
   (StartBool Bool (true (and StartBool_7 StartBool_5) (str.<= Start_18 Start_16) (str.prefixof Start_2 Start_14) (str.suffixof Start_12 Start_19) (= Start_10 Start_19)))
   (Start_20 String ("0" x))
   (Start_18 String ("0" x "b" y "" (str.substr Start_11 StartInt_6 StartInt_3) (str.replace Start_20 Start_16 Start_20) (str.from_int StartInt_6)))
   (Start_1 String ("0" (str.substr Start_9 StartInt StartInt_6) (ite StartBool_4 Start_6 Start_1)))
   (Start_2 String (x (str.at Start_5 StartInt_2) (str.replace Start Start_8 Start) (ite StartBool_4 Start_5 Start_15)))
   (StartInt_3 Int (0 (str.len Start_2)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_4 StartBool_2) (str.< Start_2 Start_2) (str.<= Start_8 Start_7) (str.contains Start_1 Start_4)))
   (Start_8 String ("0" (str.at Start_4 StartInt_1) (ite StartBool_3 Start_2 Start_5)))
   (Start_5 String ("a" (str.at Start StartInt_3) (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_2 Start_7 Start_7) (str.from_int StartInt_4) (ite StartBool_2 Start Start_8)))
   (Start_3 String ("a" x "0" (str.at Start_5 StartInt_2) (str.replace Start_5 Start_1 Start_2)))
   (Start_15 String ("a" "b" "1" (str.++ Start_16 Start_7) (str.at Start_5 StartInt_6) (str.substr Start_11 StartInt_1 StartInt_6) (str.from_int StartInt_7) (ite StartBool_4 Start_4 Start_11)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.to_int Start_1)))
   (StartInt_4 Int (1))
   (StartInt_6 Int (1 0 (str.len Start_12) (str.indexof Start_6 Start_1 StartInt_1)))
   (Start_13 String ("1" "0" (str.from_int StartInt_2) (ite StartBool_7 Start_7 Start_6)))
   (Start_19 String (y (str.++ Start_12 Start_18) (str.at Start_14 StartInt_2) (str.substr Start_7 StartInt_1 StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_2 Start) (str.<= Start_2 Start_4) (str.prefixof Start_1 Start) (str.contains Start_2 Start_4)))
   (Start_9 String ("0" (str.++ Start_5 Start) (str.at Start_10 StartInt_5) (str.substr Start_11 StartInt_1 StartInt_3) (str.from_int StartInt_6) (ite StartBool_6 Start_11 Start_2)))
   (StartBool_2 Bool (true false (not StartBool_4) (and StartBool_5 StartBool_6) (str.<= Start_6 Start_1) (str.prefixof Start_4 Start) (str.suffixof Start_4 Start_1) (str.contains Start_7 Start) (= Start_9 Start_1) (<= StartInt_2 StartInt)))
   (Start_11 String ("b" "" x (str.++ Start_10 Start_14) (str.at Start_14 StartInt_1) (str.from_int StartInt_4) (ite StartBool Start_15 Start_10)))
   (StartBool_6 Bool (true (and StartBool StartBool_1) (str.contains Start_12 Start_2) (= Start_16 Start_17) (<= StartInt_3 StartInt_4)))
   (Start_4 String ("1" (str.++ Start_4 Start_3) (str.at Start_1 StartInt) (str.replace Start_1 Start Start) (str.from_int StartInt_2)))
   (Start_16 String ("b" (str.++ Start_5 Start_12) (str.at Start_2 StartInt_2) (str.substr Start_11 StartInt_1 StartInt) (str.replace Start_8 Start_13 Start_2) (str.from_int StartInt_6)))
   (Start_10 String (x (str.++ Start_1 Start_13) (str.at Start_6 StartInt_7) (str.replace Start_15 Start_3 Start_12) (str.from_int StartInt_7) (ite StartBool_6 Start_13 Start_12)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_4) (str.< Start_5 Start) (str.suffixof Start_2 Start_4) (= Start Start_6) (<= StartInt_2 StartInt_1)))
   (StartBool_7 Bool (true (not StartBool_3) (and StartBool_3 StartBool_7) (str.< Start_5 Start_10) (str.<= Start_6 Start_8) (str.prefixof Start_11 Start_11) (str.suffixof Start_4 Start_11) (str.contains Start_3 Start_14) (= StartInt_4 StartInt_4)))
   (StartInt_1 Int (1 (str.len Start_1) (str.to_int Start_1)))
   (Start_12 String ("" (str.++ Start_11 Start_13) (ite StartBool_1 Start_6 Start_9)))
   (StartBool_8 Bool (true (not StartBool_5) (str.prefixof Start_15 Start_17) (= StartInt_5 StartInt_3) (<= StartInt_4 StartInt_4)))
   (Start_14 String (x "a" "1" y "0" (str.++ Start_3 Start_10) (str.at Start_1 StartInt) (str.substr Start_4 StartInt_3 StartInt_4) (str.from_int StartInt_1) (ite StartBool_7 Start_5 Start_7)))
   (Start_6 String ("0" (str.++ Start_8 Start_13) (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt_7 StartInt_5) (str.from_int StartInt_5)))
   (StartInt_7 Int (0 1 (str.indexof Start_13 Start_14 StartInt_2) (str.to_int Start_6)))
   (StartInt_5 Int (1 (str.to_int Start_14)))
   (Start_17 String (y (str.++ Start_15 Start_15) (str.at Start_11 StartInt_5) (str.substr Start_10 StartInt_6 StartInt_5) (str.replace Start_5 Start_16 Start_12) (ite StartBool_3 Start_11 Start_2)))
   (StartBool_5 Bool (false true (not StartBool_3) (str.<= Start_8 Start_16) (str.prefixof Start Start_16) (= Start_10 Start_12)))
   (Start_7 String ("" "1" (str.++ Start_2 Start_2) (str.from_int StartInt_3) (ite StartBool_8 Start_3 Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.substr y 0 1) (str.indexof "" y 0))))

(check-synth)
