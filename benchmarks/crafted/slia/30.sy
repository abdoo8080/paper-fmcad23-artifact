(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_5 String) (StartInt_2 Int) (StartBool_6 Bool) (StartInt_7 Int) (StartBool_4 Bool) (Start_3 String) (Start_4 String) (Start_7 String) (Start_1 String) (StartInt_4 Int) (Start_2 String) (StartInt_8 Int) (Start_6 String) (Start_10 String) (Start_13 String) (Start_11 String) (StartInt_3 Int) (Start_8 String) (Start_12 String) (Start_9 String) (StartBool_2 Bool) (StartInt_6 Int) (StartBool_3 Bool) (StartBool_5 Bool) (StartInt_1 Int))
  ((Start String ("" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_2 Start_2 Start_3)))
   (StartInt Int (1 0 (str.to_int Start_8)))
   (StartBool Bool (false true (not StartBool_5) (str.< Start_4 Start_2) (str.<= Start_4 Start_1) (str.prefixof Start_6 Start_14) (= Start_8 Start_1)))
   (Start_14 String ("b" (str.substr Start_10 StartInt_5 StartInt_3) (str.replace Start_3 Start_4 Start_6) (str.from_int StartInt_4)))
   (StartInt_5 Int (1))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_4) (str.< Start Start_3) (str.suffixof Start_2 Start) (= Start_2 Start_5) (= StartInt_1 StartInt_2) (<= StartInt_1 StartInt_3)))
   (Start_5 String ("a" "" "1" "0" (str.++ Start_6 Start_5) (str.substr Start_2 StartInt StartInt_3)))
   (StartInt_2 Int (0 1 (str.to_int Start)))
   (StartBool_6 Bool (false true (str.<= Start_13 Start_8) (str.contains Start_5 Start_10) (= StartInt_3 StartInt_6)))
   (StartInt_7 Int (1 (str.to_int Start_9)))
   (StartBool_4 Bool (true (not StartBool_4) (and StartBool StartBool_1) (str.< Start_3 Start_3) (str.<= Start_5 Start_2) (str.suffixof Start_7 Start) (str.contains Start_3 Start_6) (= StartInt_4 StartInt_2)))
   (Start_3 String ("" "0" "a" (str.at Start_4 StartInt_2) (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (Start_4 String ("b" "a" (str.++ Start_3 Start_3) (str.replace Start_2 Start Start_2)))
   (Start_7 String ("b" (str.substr Start_3 StartInt_4 StartInt) (str.from_int StartInt_5)))
   (Start_1 String ("1" (str.++ Start_6 Start_13) (str.at Start_13 StartInt_7) (str.substr Start_5 StartInt_3 StartInt_2)))
   (StartInt_4 Int (0 (str.indexof Start_1 Start_7 StartInt_4) (str.to_int Start)))
   (Start_2 String (y x (ite StartBool_1 Start_2 Start_3)))
   (StartInt_8 Int (0 (str.len Start_10) (str.indexof Start_3 Start_12 StartInt_1)))
   (Start_6 String ("a" "b" (str.at Start StartInt_2) (str.replace Start_3 Start_2 Start)))
   (Start_10 String ("" "1" (str.++ Start_2 Start_1) (str.at Start_11 StartInt_4) (str.replace Start_6 Start_9 Start_6) (str.from_int StartInt) (ite StartBool Start_2 Start_6)))
   (Start_13 String ("0" "1" "b" (str.at Start_7 StartInt_5) (str.substr Start_2 StartInt_6 StartInt_8) (str.replace Start Start_3 Start_2) (ite StartBool_5 Start Start)))
   (Start_11 String ("0" "" "1" (str.++ Start_6 Start_2) (str.at Start_3 StartInt_7) (str.replace Start Start_4 Start_2) (str.from_int StartInt_3) (ite StartBool_4 Start Start_2)))
   (StartInt_3 Int (1 0 (str.to_int Start_3)))
   (Start_8 String (x "1" (str.at Start_12 StartInt) (str.substr Start_4 StartInt StartInt_7) (str.from_int StartInt_2)))
   (Start_12 String ("1" (str.at Start_10 StartInt_7) (str.substr Start_5 StartInt_3 StartInt) (ite StartBool_4 Start_4 Start_13)))
   (Start_9 String ("" (str.++ Start_2 Start_10) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_11)))
   (StartBool_2 Bool (false true (not StartBool_6) (str.<= Start_10 Start_8) (= Start_13 Start_12) (= StartInt_1 StartInt_6)))
   (StartInt_6 Int (0 (str.len Start_10) (str.to_int Start_2)))
   (StartBool_3 Bool (true (str.< Start_7 Start_6) (str.<= Start_4 Start_4) (str.prefixof Start_2 Start_8) (str.suffixof Start Start_1) (str.contains Start_1 Start_3) (= Start_3 Start_9) (= StartInt_6 StartInt_2) (<= StartInt_6 StartInt)))
   (StartBool_5 Bool (false (not StartBool_3) (str.< Start_3 Start_4) (str.contains Start_13 Start_5) (= Start_6 Start_5) (<= StartInt_4 StartInt_3)))
   (StartInt_1 Int (1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ (str.replace y "1" y) x) y "a")))

(check-synth)
