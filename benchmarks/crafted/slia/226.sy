(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_1 Int) (Start_8 String) (Start_5 String) (Start_7 String) (StartBool_4 Bool) (Start_3 String) (Start_2 String) (StartInt_2 Int) (StartInt_5 Int) (StartInt_6 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_1 String) (StartInt_3 Int) (Start_4 String) (StartInt_4 Int) (StartInt_7 Int) (Start_6 String) (StartBool_2 Bool))
  ((Start String ("b" (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt) (ite StartBool_1 Start Start_3)))
   (StartInt Int (1 (str.len Start) (str.indexof Start_8 Start_2 StartInt) (str.to_int Start_4)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_4 StartBool_3) (str.< Start_3 Start_5) (= Start_6 Start_8) (= StartInt_3 StartInt_3) (<= StartInt_7 StartInt_3)))
   (Start_9 String ("" "0" "b" (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.to_int Start)))
   (Start_8 String (y (str.++ Start_9 Start_3) (str.substr Start_9 StartInt StartInt_4) (ite StartBool_3 Start_8 Start_2)))
   (Start_5 String (y "a" (str.at Start_7 StartInt_2) (ite StartBool_2 Start_8 Start_5)))
   (Start_7 String ("1" "a" x (str.substr Start_6 StartInt_5 StartInt_4) (ite StartBool Start_4 Start_6)))
   (StartBool_4 Bool (true (and StartBool StartBool_3) (str.prefixof Start_1 Start_2) (str.suffixof Start Start_5) (= Start_2 Start_6) (= StartInt_5 StartInt_4) (<= StartInt StartInt)))
   (Start_3 String ("b" "" y (str.at Start_3 StartInt_1) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt_2)))
   (Start_2 String (y (str.++ Start_4 Start) (str.at Start_2 StartInt) (str.substr Start_3 StartInt StartInt_4) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 (str.len Start_3)))
   (StartInt_5 Int (0 1 (str.to_int Start_1)))
   (StartInt_6 Int (1 (str.indexof Start_3 Start_1 StartInt_7)))
   (StartBool_3 Bool (false true (str.< Start_3 Start_1) (= Start_7 Start_5) (<= StartInt_2 StartInt)))
   (StartBool_1 Bool (true false (str.< Start_3 Start_3) (str.<= Start_1 Start_3) (str.suffixof Start_1 Start_1) (str.contains Start Start_1) (= Start_3 Start) (<= StartInt_1 StartInt_3)))
   (Start_1 String (x "0" y (str.++ Start_5 Start_1) (str.from_int StartInt_7) (ite StartBool_3 Start_6 Start_6)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.indexof Start Start_2 StartInt_3)))
   (Start_4 String ("" (str.++ Start_3 Start_3) (str.at Start_3 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_5) (str.from_int StartInt_6) (ite StartBool_2 Start_3 Start_1)))
   (StartInt_4 Int (1 (str.indexof Start_3 Start StartInt_3) (str.to_int Start_2)))
   (StartInt_7 Int (0 1 (str.to_int Start_1)))
   (Start_6 String ("" y "0" "a" "b" (str.substr Start_6 StartInt_4 StartInt_5) (str.from_int StartInt_2)))
   (StartBool_2 Bool (true false (str.< Start_4 Start) (= Start_2 Start_1) (= StartInt_1 StartInt_3) (<= StartInt_2 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "0" "")))

(check-synth)
