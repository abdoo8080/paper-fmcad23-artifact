(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_11 String) (Start_10 String) (StartBool_2 Bool) (StartBool_3 Bool) (Start_13 String) (Start_5 String) (Start_9 String) (Start_8 String) (StartInt_1 Int) (StartInt_5 Int) (Start_6 String) (StartBool_4 Bool) (StartBool_1 Bool) (StartBool_5 Bool) (Start_14 String) (Start_15 String) (Start_3 String) (Start_7 String) (StartInt_6 Int) (StartInt_3 Int) (Start_4 String) (StartInt_2 Int) (Start_2 String) (StartInt_4 Int) (Start_1 String) (Start_16 String))
  ((Start String ("b" x (str.at Start_1 StartInt) (str.replace Start Start_1 Start) (str.from_int StartInt_1) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start_7) (str.to_int Start_11)))
   (StartBool Bool (true (str.<= Start_3 Start_9) (str.suffixof Start_14 Start_8) (= StartInt_3 StartInt) (<= StartInt_3 StartInt)))
   (Start_12 String ("1" (str.++ Start_6 Start_7) (str.at Start_8 StartInt_2) (str.substr Start_8 StartInt_3 StartInt_4) (str.replace Start_12 Start_2 Start) (str.from_int StartInt_2)))
   (Start_11 String ("0" (str.++ Start_5 Start_8) (str.at Start_1 StartInt_3) (str.substr Start_5 StartInt_1 StartInt_3) (str.from_int StartInt)))
   (Start_10 String ("0" (str.at Start_11 StartInt_3)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_4) (str.<= Start Start_11) (str.prefixof Start_10 Start_11) (str.suffixof Start_2 Start_4) (= Start_5 Start)))
   (StartBool_3 Bool (false (not StartBool_3) (and StartBool StartBool) (str.< Start_7 Start_7) (str.<= Start_5 Start_3) (str.suffixof Start_6 Start) (str.contains Start_1 Start) (= Start_6 Start_4)))
   (Start_13 String (y "1" (str.++ Start_3 Start_13) (str.substr Start_4 StartInt_5 StartInt_6) (str.replace Start_9 Start_6 Start_2) (str.from_int StartInt_2) (ite StartBool_3 Start_13 Start_4)))
   (Start_5 String (x "b" (str.substr Start_1 StartInt_2 StartInt_3)))
   (Start_9 String ("1" (str.++ Start_5 Start_3) (str.at Start_1 StartInt) (str.substr Start_6 StartInt_3 StartInt_1) (str.replace Start_10 Start_1 Start_7) (str.from_int StartInt) (ite StartBool Start_8 Start_2)))
   (Start_8 String ("a" (str.at Start_3 StartInt) (str.substr Start_1 StartInt_1 StartInt_4) (str.replace Start_6 Start_9 Start_4) (ite StartBool_1 Start_7 Start)))
   (StartInt_1 Int (1 (str.len Start_2) (str.to_int Start_3)))
   (StartInt_5 Int (0 1 (str.to_int Start_8)))
   (Start_6 String ("0" y "1" (str.substr Start_9 StartInt_5 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_2 Start_10)))
   (StartBool_4 Bool (true false (str.< Start_10 Start_9) (str.<= Start_13 Start_10) (str.prefixof Start_12 Start_8) (str.suffixof Start_6 Start_14) (= Start_10 Start_10)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_4 Start_6) (str.<= Start_1 Start_5) (str.prefixof Start_7 Start_7) (str.suffixof Start_3 Start_7) (<= StartInt StartInt)))
   (StartBool_5 Bool (true false (not StartBool_2) (str.< Start_4 Start_1) (str.prefixof Start_7 Start_8) (str.contains Start_8 Start_4) (= StartInt StartInt_6) (<= StartInt_1 StartInt_6)))
   (Start_14 String ("a" (str.at Start_11 StartInt_1) (str.replace Start_6 Start_4 Start) (ite StartBool Start_9 Start_15)))
   (Start_15 String ("a" "" "0" x "b" "1" (str.substr Start_5 StartInt_4 StartInt_4) (str.replace Start_10 Start_14 Start_10) (str.from_int StartInt) (ite StartBool_5 Start Start_15)))
   (Start_3 String ("0" (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_3 Start_4 Start_5) (ite StartBool_1 Start_5 Start_1)))
   (Start_7 String ("0" "1" "b" "a" (str.at Start_4 StartInt_3) (str.substr Start_4 StartInt_4 StartInt_1) (str.replace Start_6 Start_5 Start_7) (str.from_int StartInt_4) (ite StartBool_3 Start_2 Start_6)))
   (StartInt_6 Int (0))
   (StartInt_3 Int (0 (str.len Start_12) (str.indexof Start_2 Start_3 StartInt_2)))
   (Start_4 String ("0" (str.++ Start_9 Start_7) (str.at Start_6 StartInt_1) (str.from_int StartInt)))
   (StartInt_2 Int (1 (str.indexof Start_5 Start_2 StartInt_6)))
   (Start_2 String (x (str.at Start_7 StartInt_3) (str.from_int StartInt_5)))
   (StartInt_4 Int (0 1 (str.to_int Start_8)))
   (Start_1 String ("" (str.++ Start_1 Start_8) (str.at Start_8 StartInt_1) (str.substr Start_16 StartInt_1 StartInt) (str.replace Start_6 Start_15 Start_10) (str.from_int StartInt) (ite StartBool_5 Start_3 Start_11)))
   (Start_16 String ("b" "0" (str.++ Start_4 Start_11) (str.at Start_7 StartInt_3) (str.substr Start_16 StartInt_4 StartInt) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= y "") y "b")))

(check-synth)
