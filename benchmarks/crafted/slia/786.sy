(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_10 String) (StartInt_8 Int) (Start_12 String) (StartBool_3 Bool) (Start_9 String) (Start_8 String) (StartBool_1 Bool) (StartInt_5 Int) (StartInt_7 Int) (Start_2 String) (StartInt_6 Int) (Start_11 String) (StartInt_3 Int) (StartInt_4 Int) (StartBool_2 Bool) (Start_4 String) (Start_3 String) (StartInt_1 Int) (Start_5 String) (StartInt_2 Int) (Start_1 String) (Start_6 String))
  ((Start String (x (str.++ Start Start) (str.at Start StartInt) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (0 1 (str.indexof Start Start_1 StartInt_3) (str.to_int Start_3)))
   (StartBool Bool (false (not StartBool_1) (str.<= Start_1 Start_3) (str.prefixof Start_1 Start_3) (str.suffixof Start Start_5) (str.contains Start_2 Start_1) (= Start_6 Start_1)))
   (Start_7 String (x (str.++ Start_11 Start_12) (str.at Start_7 StartInt) (str.substr Start_11 StartInt_4 StartInt_4) (str.replace Start_5 Start_7 Start_6) (str.from_int StartInt_6)))
   (Start_10 String (x "b" "0" y (ite StartBool_2 Start_3 Start_8)))
   (StartInt_8 Int (0 (str.indexof Start_1 Start_3 StartInt_7) (str.to_int Start_4)))
   (Start_12 String ("0" (str.at Start_4 StartInt_3) (str.substr Start_10 StartInt_1 StartInt_2)))
   (StartBool_3 Bool (false (and StartBool StartBool) (= StartInt StartInt_2) (<= StartInt_1 StartInt_6)))
   (Start_9 String ("" x (str.++ Start_1 Start_10) (str.at Start_9 StartInt_3) (str.substr Start_6 StartInt StartInt_8) (str.replace Start_8 Start_11 Start_5)))
   (Start_8 String ("a" (str.++ Start Start_2) (str.at Start_2 StartInt_3) (str.substr Start_3 StartInt_4 StartInt_6) (str.replace Start_4 Start_5 Start_9) (str.from_int StartInt_7) (ite StartBool Start_6 Start_4)))
   (StartBool_1 Bool (true false (and StartBool StartBool_3) (str.<= Start Start_7) (str.contains Start_8 Start_5) (= StartInt_2 StartInt) (<= StartInt_5 StartInt_3)))
   (StartInt_5 Int (0 1 (str.indexof Start_6 Start_5 StartInt_5) (str.to_int Start_4)))
   (StartInt_7 Int (1 0 (str.to_int Start_9)))
   (Start_2 String ("b" y (str.++ Start_3 Start_3) (str.at Start_3 StartInt_4) (str.substr Start StartInt StartInt_1) (str.from_int StartInt) (ite StartBool Start_3 Start_4)))
   (StartInt_6 Int (1 (str.len Start_8) (str.to_int Start)))
   (Start_11 String ("0" "1" (str.at Start_12 StartInt_1) (str.from_int StartInt_4)))
   (StartInt_3 Int (1 (str.indexof Start_1 Start_2 StartInt_3) (str.to_int Start_1)))
   (StartInt_4 Int (1 0))
   (StartBool_2 Bool (true false (not StartBool) (str.<= Start_4 Start_5) (str.suffixof Start Start_3) (str.contains Start_6 Start_5) (= StartInt StartInt_4)))
   (Start_4 String ("0" "b" (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt_1)))
   (Start_3 String ("1" "0" "" x "b" "a" (str.substr Start_4 StartInt StartInt) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 0 (str.len Start) (str.to_int Start_3)))
   (Start_5 String (y (str.++ Start_3 Start_6) (str.substr Start_6 StartInt StartInt_5) (str.replace Start_1 Start_3 Start_2) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_3)))
   (StartInt_2 Int (1 0 (str.to_int Start_2)))
   (Start_1 String (y "b" (str.at Start_2 StartInt_2) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_3)))
   (Start_6 String ("0" (str.at Start_2 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "a" (str.replace "1" x "0"))))

(check-synth)
