(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_7 Int) (Start_1 String) (Start_2 String) (Start_12 String) (Start_3 String) (StartBool_1 Bool) (Start_4 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_6 Int) (StartInt_2 Int) (StartBool_2 Bool) (Start_10 String) (Start_9 String) (StartInt_4 Int) (Start_6 String) (StartInt_5 Int) (Start_7 String) (Start_8 String) (Start_5 String))
  ((Start String (x "a" "0" (str.replace Start_1 Start_2 Start_3) (ite StartBool_1 Start_4 Start_4)))
   (StartInt Int (0 (str.indexof Start_4 Start_4 StartInt_6)))
   (StartBool Bool (true false (and StartBool_2 StartBool_2) (str.<= Start_7 Start_9) (str.prefixof Start_10 Start_11) (str.suffixof Start Start_1) (str.contains Start_4 Start_12) (= StartInt_4 StartInt_7)))
   (Start_11 String (y "0" (str.substr Start_3 StartInt_7 StartInt_2) (str.from_int StartInt_5)))
   (StartInt_7 Int (0 (str.len Start_12) (str.indexof Start_9 Start_8 StartInt_5)))
   (Start_1 String ("1" "0" (str.from_int StartInt_1) (ite StartBool_1 Start_7 Start_9)))
   (Start_2 String ("b" x "0" (str.at Start_3 StartInt_3) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_7 Start_7)))
   (Start_12 String (x y (str.from_int StartInt_3) (ite StartBool Start_4 Start_8)))
   (Start_3 String ("" "1" y "b" "a" (str.++ Start_3 Start_4) (str.at Start_5 StartInt_2) (str.replace Start_4 Start_7 Start_4)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.< Start_8 Start) (str.prefixof Start_1 Start_5) (str.suffixof Start_7 Start_1) (= Start_7 Start_7) (<= StartInt_2 StartInt_1)))
   (Start_4 String ("b" (str.++ Start_1 Start_3) (str.at Start_1 StartInt) (str.substr Start_5 StartInt StartInt) (str.replace Start_2 Start_4 Start_6) (str.from_int StartInt_1) (ite StartBool Start_3 Start)))
   (StartInt_1 Int (0))
   (StartInt_3 Int (0 1 (str.indexof Start_6 Start StartInt_4) (str.to_int Start_6)))
   (StartInt_6 Int (1 (str.len Start_8) (str.indexof Start_1 Start_5 StartInt_6) (str.to_int Start_2)))
   (StartInt_2 Int (1 0 (str.indexof Start_6 Start_7 StartInt_5)))
   (StartBool_2 Bool (false (str.<= Start_5 Start_5) (str.suffixof Start_4 Start_7) (str.contains Start_6 Start_4) (= StartInt_2 StartInt_1)))
   (Start_10 String ("a" "" (str.substr Start_2 StartInt_4 StartInt_6) (str.from_int StartInt_4)))
   (Start_9 String (x "" (str.from_int StartInt_5)))
   (StartInt_4 Int (1 (str.len Start_2) (str.indexof Start_4 Start_2 StartInt_1) (str.to_int Start_3)))
   (Start_6 String ("" y "0" "a" "b" "1" x (str.++ Start_6 Start) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_6 Start_6 Start_4) (ite StartBool_1 Start_6 Start)))
   (StartInt_5 Int (0 (str.indexof Start_7 Start_4 StartInt_1)))
   (Start_7 String ("1" (str.++ Start_6 Start_2) (str.replace Start_7 Start_3 Start) (str.from_int StartInt_2)))
   (Start_8 String (y (str.substr Start_5 StartInt_1 StartInt_5) (str.replace Start_2 Start_6 Start_5) (str.from_int StartInt)))
   (Start_5 String ("a" (str.at Start StartInt_6) (str.from_int StartInt_5) (ite StartBool_2 Start_7 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof x y 0))))

(check-synth)
