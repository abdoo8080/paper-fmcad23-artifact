(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_3 Int) (Start_8 String) (Start_10 String) (StartInt_4 Int) (Start_2 String) (Start_3 String) (Start_4 String) (Start_5 String) (Start_6 String) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_1 String) (StartInt_1 Int) (Start_7 String) (StartBool_2 Bool))
  ((Start String ("b" y "" "1" (str.++ Start Start_1) (str.replace Start_1 Start_2 Start)))
   (StartInt Int (1 0 (str.indexof Start_7 Start_2 StartInt_1)))
   (StartBool Bool (true (not StartBool) (str.< Start Start_9) (str.<= Start_4 Start_4) (str.prefixof Start_8 Start_4) (str.suffixof Start Start_5) (str.contains Start Start_9) (= Start Start_4) (= StartInt_4 StartInt_2)))
   (Start_9 String ("0" (str.++ Start_9 Start_2) (str.at Start_5 StartInt_5) (str.from_int StartInt_4)))
   (StartInt_3 Int (0 1 (str.indexof Start_2 Start_5 StartInt_1) (str.to_int Start_6)))
   (Start_8 String ("b" "0" (str.++ Start_2 Start) (str.replace Start_1 Start_5 Start_2) (str.from_int StartInt_1)))
   (Start_10 String ("a" (str.substr Start StartInt StartInt_5) (str.replace Start_1 Start_3 Start_3)))
   (StartInt_4 Int (1 (str.indexof Start_7 Start_3 StartInt_1) (str.to_int Start_10)))
   (Start_2 String ("1" (str.at Start StartInt) (str.substr Start StartInt StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (Start_3 String (x (str.++ Start_1 Start_2) (str.at Start_4 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_2)))
   (Start_4 String ("a" x (str.++ Start_1 Start_1) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_2 Start_3 Start_5) (str.from_int StartInt_1)))
   (Start_5 String ("b" "a" (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_4 Start_2 Start_6)))
   (Start_6 String (y (str.at Start_1 StartInt_1) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_5) (str.to_int Start_7)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.suffixof Start_1 Start_3) (str.contains Start_3 Start_5) (= StartInt StartInt_1) (<= StartInt_2 StartInt)))
   (StartInt_2 Int (1 (str.len Start_6)))
   (Start_1 String ("0" x "1" (str.++ Start_5 Start_1) (str.at Start_5 StartInt_1) (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.to_int Start)))
   (Start_7 String (y x "a" "1" (str.at Start_5 StartInt_3) (str.replace Start_2 Start_3 Start_4) (ite StartBool_2 Start Start_4)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_7 Start_5) (str.suffixof Start_5 Start_6) (= Start_7 Start_8) (= StartInt_2 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y "" x) (str.substr y 0 (str.indexof y "a" 1)) (str.++ "a" "b"))))

(check-synth)
