(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_8 String) (StartBool_3 Bool) (StartBool_2 Bool) (Start_9 String) (StartInt_1 Int) (Start_2 String) (Start_1 String) (Start_4 String) (Start_3 String) (StartBool_1 Bool) (Start_10 String) (StartInt_5 Int) (StartInt_2 Int) (Start_5 String) (StartInt_4 Int) (Start_7 String) (Start_6 String) (StartInt_3 Int))
  ((Start String (x (str.++ Start_1 Start_2) (str.replace Start_2 Start_1 Start) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.indexof Start_2 Start_5 StartInt_1) (str.to_int Start_6)))
   (StartBool Bool (false (not StartBool) (and StartBool_1 StartBool_1) (str.< Start_7 Start_8) (str.<= Start Start_7) (str.prefixof Start_1 Start_2) (str.suffixof Start_9 Start_6) (str.contains Start_6 Start_8)))
   (Start_11 String ("1" "b" x (str.++ Start_10 Start_9) (str.at Start_1 StartInt_3) (str.from_int StartInt_2)))
   (Start_8 String ("a" (str.at Start_1 StartInt_4) (str.substr Start_10 StartInt_5 StartInt_5) (ite StartBool_3 Start_10 Start_9)))
   (StartBool_3 Bool (false (str.< Start_5 Start_1) (str.<= Start_10 Start_1) (str.contains Start_11 Start_5)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_7 Start_2) (str.<= Start_6 Start_5) (str.prefixof Start_5 Start_5) (= StartInt_3 StartInt_4) (<= StartInt_3 StartInt_5)))
   (Start_9 String ("0" (str.++ Start_2 Start_7) (str.replace Start_3 Start_4 Start_9) (str.from_int StartInt_2) (ite StartBool_2 Start_9 Start_2)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start_3 Start_3 StartInt) (str.to_int Start_3)))
   (Start_2 String (y (str.at Start_2 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_2)))
   (Start_1 String ("1" x "" "b" "0" y "a" (str.++ Start_5 Start) (str.at Start StartInt_3) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_5 Start_4 Start_4) (str.from_int StartInt_2)))
   (Start_4 String (x (ite StartBool_1 Start_1 Start_3)))
   (Start_3 String ("" "a" "1" (str.++ Start_4 Start) (str.replace Start_4 Start_1 Start)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (str.< Start_4 Start_3) (= StartInt_2 StartInt_2) (<= StartInt_1 StartInt_1)))
   (Start_10 String ("b" "" y "1" (str.substr Start_4 StartInt StartInt_4)))
   (StartInt_5 Int (1 (str.len Start_4) (str.to_int Start_4)))
   (StartInt_2 Int (1))
   (Start_5 String (y (str.at Start_2 StartInt_2) (str.replace Start_5 Start Start_3) (str.from_int StartInt)))
   (StartInt_4 Int (0 (str.len Start_4) (str.indexof Start_1 Start StartInt) (str.to_int Start)))
   (Start_7 String ("0" "" x (str.substr Start_8 StartInt_3 StartInt_5)))
   (Start_6 String ("b" (str.++ Start_3 Start_5) (str.at Start_5 StartInt_5) (str.substr Start_6 StartInt_2 StartInt) (str.replace Start_6 Start Start_6) (ite StartBool_1 Start_4 Start)))
   (StartInt_3 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.substr y 0 1) (str.at y 1))))

(check-synth)
