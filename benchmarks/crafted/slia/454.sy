(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_9 String) (StartBool_2 Bool) (Start_8 String) (Start_1 String) (StartInt_1 Int) (Start_7 String) (StartInt_8 Int) (Start_6 String) (StartBool_1 Bool) (Start_4 String) (Start_5 String) (StartInt_5 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_3 String) (Start_2 String) (StartInt_6 Int) (StartInt_7 Int) (StartInt_2 Int))
  ((Start String ("a" y x (str.++ Start Start_1) (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start Start_2 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 (str.len Start_1) (str.indexof Start Start_1 StartInt_7) (str.to_int Start_6)))
   (StartBool Bool (false true (str.< Start Start_3) (str.<= Start_6 Start_4) (str.contains Start_7 Start) (= Start_2 Start_8) (= StartInt_8 StartInt_8)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_1 StartBool_2) (str.prefixof Start_4 Start_1) (str.contains Start_1 Start_3) (= Start_7 Start_7)))
   (Start_9 String (x (str.++ Start_6 Start_1) (str.at Start_4 StartInt_8) (ite StartBool_3 Start_8 Start_9)))
   (StartBool_2 Bool (true false (str.contains Start_9 Start_6) (<= StartInt_2 StartInt_7)))
   (Start_8 String (y "a" "" (str.substr Start_7 StartInt_5 StartInt) (str.replace Start_6 Start_3 Start) (str.from_int StartInt_3) (ite StartBool_2 Start_3 Start_5)))
   (Start_1 String (y x (str.replace Start_6 Start_1 Start_1) (str.from_int StartInt_6)))
   (StartInt_1 Int (1 (str.indexof Start_5 Start_7 StartInt) (str.to_int Start_7)))
   (Start_7 String (x "0" (str.++ Start_2 Start_7) (str.at Start_7 StartInt_8) (str.substr Start_6 StartInt_4 StartInt_7) (str.replace Start_5 Start_3 Start_6)))
   (StartInt_8 Int (0 1 (str.len Start) (str.to_int Start_6)))
   (Start_6 String ("0" y (str.at Start_3 StartInt) (str.substr Start StartInt_2 StartInt_5) (str.from_int StartInt_6)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool) (str.prefixof Start_2 Start) (str.suffixof Start_2 Start_3) (str.contains Start_4 Start_1)))
   (Start_4 String ("0" (str.at Start_3 StartInt) (str.replace Start_5 Start_2 Start_5) (str.from_int StartInt)))
   (Start_5 String ("" (str.++ Start_1 Start_4) (str.substr Start_3 StartInt_1 StartInt_3) (str.replace Start_5 Start_3 Start_4) (ite StartBool Start_5 Start_3)))
   (StartInt_5 Int (1 0))
   (StartInt_4 Int (1 0 (str.len Start_6) (str.to_int Start_3)))
   (StartInt_3 Int (1))
   (Start_3 String (y (str.++ Start_4 Start_3) (str.replace Start_5 Start_5 Start_3) (ite StartBool Start_3 Start_1)))
   (Start_2 String ("1" (str.at Start_3 StartInt_2) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start_3 Start Start_5) (ite StartBool Start Start)))
   (StartInt_6 Int (0))
   (StartInt_7 Int (0 (str.indexof Start_7 Start_2 StartInt_5)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.indexof Start_6 Start_2 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof x "a" 1))))

(check-synth)
