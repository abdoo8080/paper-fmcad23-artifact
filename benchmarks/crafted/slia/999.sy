(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_12 String) (Start_14 String) (Start_13 String) (Start_15 String) (Start_8 String) (Start_7 String) (Start_1 String) (Start_10 String) (StartInt_4 Int) (StartInt_8 Int) (StartInt_2 Int) (Start_2 String) (Start_5 String) (Start_4 String) (StartBool_2 Bool) (StartInt_5 Int) (StartInt_7 Int) (StartInt_3 Int) (StartInt_6 Int) (StartBool_3 Bool) (Start_11 String) (Start_3 String) (StartBool_1 Bool) (Start_6 String) (StartInt_1 Int))
  ((Start String ("0" "b" y (str.++ Start Start) (str.at Start_1 StartInt_1) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start Start_2)))
   (StartInt Int (1 (str.indexof Start_6 Start_8 StartInt_7)))
   (StartBool Bool (false (not StartBool_3) (str.contains Start_3 Start_1) (= Start_3 Start_10)))
   (Start_9 String ("b" "1" x y "" (str.from_int StartInt_3)))
   (Start_12 String ("0" (str.++ Start_1 Start_4) (str.substr Start_14 StartInt_7 StartInt_7)))
   (Start_14 String (x "b" y (str.++ Start_3 Start_4) (str.substr Start_15 StartInt_7 StartInt_5) (str.replace Start_11 Start Start_4)))
   (Start_13 String (y (str.from_int StartInt_4)))
   (Start_15 String ("1" (str.at Start_14 StartInt_4) (str.substr Start_1 StartInt StartInt) (str.replace Start_9 Start_7 Start)))
   (Start_8 String ("b" (str.++ Start_8 Start_1) (str.at Start_9 StartInt_6) (str.replace Start_2 Start_4 Start_10) (str.from_int StartInt_6) (ite StartBool_1 Start Start_11)))
   (Start_7 String ("0" y (str.at Start_4 StartInt_1) (str.from_int StartInt_5)))
   (Start_1 String ("" (str.++ Start_5 Start) (str.substr Start_5 StartInt StartInt_1) (str.replace Start_7 Start_3 Start_2) (str.from_int StartInt_2)))
   (Start_10 String ("" "0" (str.++ Start_5 Start_9) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start) (str.to_int Start_4)))
   (StartInt_8 Int (1 (str.len Start_14) (str.indexof Start_15 Start_6 StartInt_8)))
   (StartInt_2 Int (0 1 (str.to_int Start_3)))
   (Start_2 String (y (str.substr Start_3 StartInt StartInt_1) (str.replace Start_2 Start_1 Start_3) (ite StartBool Start_3 Start_2)))
   (Start_5 String ("" (str.at Start_6 StartInt_2) (str.substr Start_1 StartInt_3 StartInt) (str.replace Start_3 Start_2 Start_3) (ite StartBool_1 Start_4 Start_3)))
   (Start_4 String ("" "a" y (str.at Start StartInt_5)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_1) (str.prefixof Start_2 Start_13) (str.suffixof Start_12 Start_3) (str.contains Start_9 Start_2)))
   (StartInt_5 Int (1 0 (str.indexof Start Start_1 StartInt_5)))
   (StartInt_7 Int (0 1 (str.len Start_1) (str.indexof Start_6 Start_3 StartInt_7)))
   (StartInt_3 Int (1 0 (str.len Start_2)))
   (StartInt_6 Int (0 (str.len Start_2)))
   (StartBool_3 Bool (true (str.contains Start_6 Start_5) (= Start_2 Start_5) (= StartInt_6 StartInt_8) (<= StartInt_3 StartInt_5)))
   (Start_11 String ("0" (str.++ Start_9 Start_12) (str.at Start_6 StartInt_5) (str.replace Start_3 Start Start_2) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_6)))
   (Start_3 String ("a" x "0" (str.++ Start_4 Start_1) (str.at Start_2 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_2 Start Start_5)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (str.contains Start_3 Start_5) (= Start_4 Start) (= StartInt_4 StartInt_4) (<= StartInt_4 StartInt_5)))
   (Start_6 String (y (str.at Start_4 StartInt_1) (str.from_int StartInt_6) (ite StartBool Start_6 Start_5)))
   (StartInt_1 Int (1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ (str.at x 0) x) (str.at "b" (str.indexof x "b" 1)))))

(check-synth)
