(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_16 String) (Start_9 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_8 String) (Start_15 String) (Start_7 String) (Start_3 String) (StartInt_13 Int) (Start_4 String) (StartInt_6 Int) (Start_5 String) (StartInt_3 Int) (Start_2 String) (Start_11 String) (Start_13 String) (StartInt_7 Int) (StartInt_8 Int) (Start_6 String) (StartInt_4 Int) (StartInt_9 Int) (StartInt_12 Int) (StartInt_5 Int) (StartInt_10 Int) (StartInt_1 Int) (Start_12 String) (Start_1 String) (StartInt_11 Int) (Start_10 String) (StartBool_2 Bool) (Start_14 String) (StartBool_3 Bool))
  ((Start String ("0" (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool Start_1 Start_2)))
   (StartInt Int (1 0 (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_3 StartBool_2) (str.< Start_1 Start_2) (str.prefixof Start_8 Start_10) (str.suffixof Start_9 Start_16) (= Start_7 Start_11) (= StartInt_10 StartInt_2)))
   (Start_17 String ("0" "1" "" "a" (ite StartBool_2 Start_15 Start_16)))
   (Start_16 String ("a" "1" (str.++ Start_12 Start_1) (str.at Start_1 StartInt_8) (str.from_int StartInt_13) (ite StartBool_1 Start Start_4)))
   (Start_9 String ("0" y (str.substr Start_2 StartInt_7 StartInt_3) (str.replace Start_8 Start_4 Start_1) (str.from_int StartInt)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (str.<= Start_1 Start_7) (str.suffixof Start_1 Start_1) (str.contains Start_6 Start_5) (= Start_5 Start_8) (= StartInt_4 StartInt_1) (<= StartInt_4 StartInt_5)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_4 StartInt_3)))
   (Start_8 String ("1" "0" (str.substr Start_9 StartInt_3 StartInt_6) (str.replace Start_7 Start_9 Start_4) (str.from_int StartInt_1)))
   (Start_15 String ("" (str.++ Start_3 Start_5) (str.at Start_9 StartInt_12) (str.substr Start_3 StartInt_12 StartInt_9) (str.replace Start_2 Start_1 Start_7) (str.from_int StartInt_5) (ite StartBool_1 Start_15 Start_14)))
   (Start_7 String ("a" x "1" (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start_1 Start_7 Start_5) (ite StartBool_1 Start_7 Start_3)))
   (Start_3 String ("b" (str.at Start_4 StartInt_4) (str.substr Start_6 StartInt StartInt_1) (str.replace Start_5 Start_5 Start_7)))
   (StartInt_13 Int (1 0 (str.len Start_17) (str.indexof Start_9 Start_17 StartInt_9)))
   (Start_4 String ("b" (ite StartBool Start_1 Start)))
   (StartInt_6 Int (1 0 (str.indexof Start_3 Start_6 StartInt_1) (str.to_int Start_3)))
   (Start_5 String ("1" (str.++ Start_3 Start_1) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_3 StartInt_1)))
   (StartInt_3 Int (0 (str.len Start_4) (str.indexof Start_1 Start_5 StartInt_2) (str.to_int Start_1)))
   (Start_2 String (y "1" "" x "b" (str.at Start_3 StartInt_1) (str.from_int StartInt_2)))
   (Start_11 String (y "1" (str.at Start_11 StartInt_1) (str.replace Start_5 Start_9 Start_4) (str.from_int StartInt_11) (ite StartBool_1 Start_10 Start_13)))
   (Start_13 String ("1" (str.++ Start Start_6)))
   (StartInt_7 Int (0 (str.to_int Start_3)))
   (StartInt_8 Int (0 1 (str.len Start)))
   (Start_6 String ("" (str.++ Start_5 Start_3) (str.at Start_3 StartInt_1) (str.from_int StartInt_8)))
   (StartInt_4 Int (0 1 (str.indexof Start_7 Start_6 StartInt_9) (str.to_int Start_2)))
   (StartInt_9 Int (1 0 (str.len Start_8)))
   (StartInt_12 Int (0 (str.len Start_8) (str.indexof Start_15 Start_12 StartInt_10)))
   (StartInt_5 Int (0 1 (str.len Start_5) (str.to_int Start_3)))
   (StartInt_10 Int (1 (str.len Start_12)))
   (StartInt_1 Int (1 0 (str.len Start_7) (str.to_int Start_9)))
   (Start_12 String ("1" (str.++ Start_1 Start_12) (str.replace Start_5 Start_5 Start_9) (str.from_int StartInt_9) (ite StartBool_1 Start_12 Start_10)))
   (Start_1 String ("" "a" (str.++ Start_8 Start_10) (str.substr Start_11 StartInt StartInt_5) (str.replace Start_10 Start_8 Start_11) (str.from_int StartInt_9) (ite StartBool_2 Start_11 Start_2)))
   (StartInt_11 Int (0 1 (str.to_int Start_1)))
   (Start_10 String ("0" (str.++ Start_6 Start_6) (str.at Start_14 StartInt_3) (str.substr Start_3 StartInt_7 StartInt_6)))
   (StartBool_2 Bool (true (and StartBool StartBool_1) (str.<= Start_7 Start) (str.prefixof Start_4 Start_5) (str.suffixof Start_1 Start_9) (= Start_3 Start_2) (<= StartInt_10 StartInt_2)))
   (Start_14 String (y (str.++ Start_3 Start_9) (str.substr Start_2 StartInt_5 StartInt_10) (str.replace Start_10 Start_5 Start_14) (str.from_int StartInt_12) (ite StartBool_3 Start_12 Start)))
   (StartBool_3 Bool (true (not StartBool) (str.suffixof Start_10 Start_5) (= Start_3 Start) (<= StartInt_8 StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "a" x)))

(check-synth)
