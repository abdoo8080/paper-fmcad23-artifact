(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartBool_3 Bool) (StartInt_1 Int) (StartInt_5 Int) (Start_8 String) (Start_9 String) (Start_10 String) (Start_1 String) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_3 Int) (Start_7 String) (Start_5 String) (Start_3 String) (Start_2 String) (StartInt_4 Int) (Start_4 String) (Start_6 String) (StartInt_2 Int))
  ((Start String (y "" (str.at Start_1 StartInt) (str.from_int StartInt)))
   (StartInt Int (0 (str.indexof Start Start_1 StartInt)))
   (StartBool Bool (true (not StartBool_1) (str.prefixof Start_1 Start) (str.suffixof Start Start) (str.contains Start_2 Start) (= Start_3 Start_3)))
   (Start_11 String ("" x (str.++ Start Start_4) (str.at Start_5 StartInt_5) (str.substr Start_11 StartInt_5 StartInt_3) (str.from_int StartInt_3)))
   (StartBool_3 Bool (true (not StartBool) (str.< Start_2 Start_6) (str.prefixof Start_4 Start_9) (str.suffixof Start_11 Start_11) (= Start_6 Start_4) (= StartInt_5 StartInt)))
   (StartInt_1 Int (1))
   (StartInt_5 Int (0 (str.indexof Start_9 Start_5 StartInt_3)))
   (Start_8 String ("b" (str.at Start_1 StartInt_3) (str.substr Start_10 StartInt StartInt_2) (str.from_int StartInt_5) (ite StartBool_2 Start Start_3)))
   (Start_9 String ("b" (str.from_int StartInt_3) (ite StartBool_2 Start_10 Start_1)))
   (Start_10 String (x (str.at Start_7 StartInt_1) (str.from_int StartInt)))
   (Start_1 String (x (str.replace Start_1 Start Start)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (str.prefixof Start_2 Start_5) (str.suffixof Start_2 Start_5) (= StartInt_2 StartInt_5) (<= StartInt_2 StartInt_3)))
   (StartBool_2 Bool (true false (str.<= Start_2 Start_4) (str.prefixof Start_1 Start_4) (str.contains Start Start_2) (= StartInt_3 StartInt) (<= StartInt_1 StartInt_1)))
   (StartInt_3 Int (1 0 (str.indexof Start_4 Start_2 StartInt)))
   (Start_7 String ("1" "" "a" y "0" x (str.++ Start_4 Start_3) (str.replace Start_3 Start_2 Start_8) (str.from_int StartInt_4)))
   (Start_5 String ("a" x (str.++ Start_6 Start_1) (str.substr Start_5 StartInt_3 StartInt) (ite StartBool Start_4 Start_2)))
   (Start_3 String ("b"))
   (Start_2 String ("1" (str.++ Start Start_2) (str.at Start StartInt_1) (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt_2) (ite StartBool_2 Start Start_2)))
   (StartInt_4 Int (1 (str.len Start_9) (str.indexof Start_5 Start_10 StartInt_4) (str.to_int Start)))
   (Start_4 String ("" "0" "1" y (str.replace Start_3 Start_5 Start_2) (ite StartBool Start_5 Start_5)))
   (Start_6 String ("1" (str.++ Start_2 Start_1) (str.at Start StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start_5) (str.to_int Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "0" x (str.++ "0" (str.at "b" (str.indexof x "a" 1)))) 1)))

(check-synth)
