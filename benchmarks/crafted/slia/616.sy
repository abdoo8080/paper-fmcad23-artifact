(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_4 Int) (StartInt_5 Int) (StartBool_6 Bool) (StartBool_5 Bool) (Start_13 String) (Start_1 String) (Start_10 String) (StartBool_1 Bool) (Start_12 String) (Start_2 String) (Start_6 String) (StartInt_1 Int) (Start_5 String) (Start_11 String) (Start_8 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_4 String) (Start_7 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_9 String) (StartBool_4 Bool) (Start_3 String))
  ((Start String ("b" x (str.++ Start Start) (str.substr Start StartInt_1 StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0))
   (StartBool Bool (false true (str.<= Start_6 Start_3) (str.prefixof Start_14 Start_1) (str.suffixof Start_11 Start_8) (str.contains Start_8 Start_3) (= Start_11 Start_10) (<= StartInt_3 StartInt_4)))
   (Start_14 String (x (str.at Start_11 StartInt_4) (str.substr Start_5 StartInt StartInt_5)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_2 Start_13 StartInt_3)))
   (StartInt_5 Int (0))
   (StartBool_6 Bool (true false (str.<= Start_8 Start_4) (<= StartInt_5 StartInt)))
   (StartBool_5 Bool (true false (and StartBool_6 StartBool) (str.contains Start_4 Start_11)))
   (Start_13 String ("0" (str.replace Start_4 Start_7 Start_14) (str.from_int StartInt_3)))
   (Start_1 String ("1" (str.++ Start_8 Start_10) (ite StartBool_4 Start_8 Start_11)))
   (Start_10 String ("a" (str.replace Start_2 Start_10 Start_9) (str.from_int StartInt) (ite StartBool_3 Start_2 Start_6)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (str.< Start_1 Start_5) (str.<= Start_6 Start_10) (= StartInt_1 StartInt_2)))
   (Start_12 String ("b" "0" (str.++ Start_6 Start_8) (str.at Start_1 StartInt_2) (str.substr Start_7 StartInt_2 StartInt_4) (ite StartBool_5 Start_4 Start_6)))
   (Start_2 String ("" (str.replace Start_3 Start_1 Start_3) (ite StartBool_2 Start_4 Start)))
   (Start_6 String ("1" "b" x (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_6 Start Start_4) (str.from_int StartInt_3) (ite StartBool Start_1 Start)))
   (StartInt_1 Int (0 (str.len Start_6) (str.indexof Start_2 Start_13 StartInt_1) (str.to_int Start)))
   (Start_5 String ("b" (str.at Start_3 StartInt_2) (ite StartBool_3 Start_6 Start_2)))
   (Start_11 String (y x (str.++ Start_9 Start_10) (str.replace Start_12 Start_12 Start_2)))
   (Start_8 String ("0" (str.++ Start_4 Start_2)))
   (StartInt_2 Int (0 1))
   (StartBool_2 Bool (false true (and StartBool_4 StartBool_2) (str.prefixof Start_4 Start_1) (str.suffixof Start_4 Start_7) (<= StartInt StartInt_3)))
   (Start_4 String ("a" y "1" "b" x (str.++ Start_2 Start) (str.at Start_5 StartInt_1) (str.substr Start_1 StartInt StartInt_2) (str.replace Start_6 Start_3 Start_1) (ite StartBool_1 Start_4 Start_1)))
   (Start_7 String ("0" "a"))
   (StartInt_3 Int (1 (str.len Start_3) (str.to_int Start_5)))
   (StartBool_3 Bool (false true (str.< Start Start_4) (str.<= Start_5 Start_4) (str.prefixof Start_2 Start_5) (str.suffixof Start Start) (= Start_1 Start)))
   (Start_9 String ("a" (str.at Start StartInt) (str.from_int StartInt)))
   (StartBool_4 Bool (false (and StartBool StartBool) (str.suffixof Start_5 Start_5) (str.contains Start_3 Start_2) (= StartInt StartInt_1)))
   (Start_3 String ("a" (str.++ Start_1 Start_4) (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start Start_8 Start_6) (str.from_int StartInt) (ite StartBool_4 Start_9 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace x "a" x) 0)))

(check-synth)
