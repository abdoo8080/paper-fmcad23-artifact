(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_15 String) (StartInt_10 Int) (Start_6 String) (Start_9 String) (StartInt_6 Int) (Start_12 String) (Start_7 String) (StartInt_9 Int) (Start_8 String) (StartInt_5 Int) (Start_5 String) (Start_13 String) (StartBool_1 Bool) (Start_3 String) (Start_2 String) (StartBool_2 Bool) (Start_11 String) (StartInt_2 Int) (Start_4 String) (StartInt_8 Int) (StartInt_11 Int) (StartInt_3 Int) (StartInt_7 Int) (Start_10 String) (StartInt_4 Int) (StartInt_1 Int) (Start_1 String) (Start_14 String))
  ((Start String ("1" "0" (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_1 Start_2 Start)))
   (StartInt Int (0 (str.len Start_1) (str.indexof Start_3 Start_1 StartInt_2) (str.to_int Start_9)))
   (StartBool Bool (false true (and StartBool_1 StartBool_1) (str.< Start Start_11) (str.<= Start_12 Start_6) (= Start_5 Start_6) (= StartInt_9 StartInt_5)))
   (StartBool_3 Bool (true false (not StartBool_2) (str.prefixof Start_15 Start_1)))
   (Start_15 String ("0" (str.++ Start_10 Start_12) (str.at Start_5 StartInt_10)))
   (StartInt_10 Int (1 (str.len Start_4) (str.indexof Start Start StartInt_5) (str.to_int Start_3)))
   (Start_6 String (y "0" x (str.at Start_2 StartInt_3) (str.substr Start_2 StartInt_2 StartInt_2)))
   (Start_9 String ("a" "b" (str.at Start_5 StartInt_8) (str.substr Start_6 StartInt_9 StartInt_10) (str.from_int StartInt_8)))
   (StartInt_6 Int (1 0 (str.len Start_2) (str.indexof Start_4 Start StartInt_4) (str.to_int Start_7)))
   (Start_12 String ("" y "0" (str.at Start_4 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_6) (str.replace Start_10 Start_2 Start_4) (str.from_int StartInt_10) (ite StartBool Start_2 Start_6)))
   (Start_7 String ("1" (str.substr Start_6 StartInt_3 StartInt_7) (str.replace Start_1 Start_8 Start_5) (str.from_int StartInt_5) (ite StartBool Start_4 Start_8)))
   (StartInt_9 Int (1))
   (Start_8 String ("0" y "b" (str.at Start_9 StartInt_4) (str.from_int StartInt_2)))
   (StartInt_5 Int (1 0 (str.indexof Start_1 Start_6 StartInt_5) (str.to_int Start_1)))
   (Start_5 String (y "1" "" (str.++ Start_1 Start_4) (str.at Start StartInt_6) (str.replace Start_4 Start_1 Start)))
   (Start_13 String ("1" (str.++ Start_12 Start_1) (str.replace Start_11 Start_7 Start_14) (str.from_int StartInt_10)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool) (str.prefixof Start_1 Start_1) (str.suffixof Start_3 Start_4) (str.contains Start_2 Start_2) (= Start Start_5) (= StartInt_5 StartInt) (<= StartInt_4 StartInt_2)))
   (Start_3 String ("a" "b" x "1" (str.at Start_3 StartInt_3) (str.substr Start_1 StartInt_4 StartInt_3) (str.replace Start_1 Start_4 Start_1) (ite StartBool_1 Start_4 Start_3)))
   (Start_2 String (x (str.++ Start_3 Start_3) (str.at Start StartInt_1) (str.substr Start_3 StartInt_1 StartInt_2)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool_2) (str.< Start_8 Start_4) (str.<= Start_6 Start_15) (str.contains Start_9 Start_9) (= Start_15 Start_8) (<= StartInt_5 StartInt_1)))
   (Start_11 String ("" (str.substr Start_7 StartInt_9 StartInt_5) (str.replace Start Start Start_13) (ite StartBool_1 Start Start)))
   (StartInt_2 Int (0 1 (str.len Start_2)))
   (Start_4 String ("b" "" "0" (str.++ Start_5 Start_3) (str.substr Start_10 StartInt_2 StartInt_6) (ite StartBool Start_6 Start_9)))
   (StartInt_8 Int (1 0 (str.len Start_3) (str.indexof Start_9 Start_4 StartInt_11) (str.to_int Start_8)))
   (StartInt_11 Int (0))
   (StartInt_3 Int (0 1 (str.indexof Start_9 Start_8 StartInt_4) (str.to_int Start_7)))
   (StartInt_7 Int (0 (str.to_int Start_6)))
   (Start_10 String ("b" y (str.at Start_8 StartInt_11) (ite StartBool_1 Start_1 Start)))
   (StartInt_4 Int (1 (str.to_int Start)))
   (StartInt_1 Int (0 1))
   (Start_1 String ("1" (str.++ Start_2 Start_8) (str.substr Start_1 StartInt_6 StartInt_10) (ite StartBool Start_2 Start_1)))
   (Start_14 String (x "a" "1" (str.at Start StartInt_4) (str.from_int StartInt_9) (ite StartBool_2 Start Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace x "" "1") "1")))

(check-synth)
