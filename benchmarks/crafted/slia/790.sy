(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (StartInt_3 Int) (Start_9 String) (Start_8 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_2 Int) (Start_1 String) (StartInt_1 Int) (Start_2 String) (StartBool_3 Bool) (Start_7 String) (Start_4 String) (Start_3 String) (StartBool_2 Bool) (Start_5 String))
  ((Start String (x (str.++ Start Start) (str.substr Start_1 StartInt StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 (str.indexof Start_2 Start_1 StartInt_2)))
   (StartBool Bool (true false (str.< Start_6 Start_5) (str.prefixof Start_4 Start_3) (str.suffixof Start_7 Start_1) (str.contains Start_7 Start_3) (= Start_1 Start_7)))
   (Start_6 String ("b" "0" y (str.++ Start_3 Start_9) (str.substr Start_8 StartInt_4 StartInt_3) (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start_2)))
   (StartInt_3 Int (0 1 (str.to_int Start_7)))
   (Start_9 String (x y (str.++ Start_7 Start) (str.replace Start_4 Start_7 Start_5) (str.from_int StartInt_4)))
   (Start_8 String ("a" (str.++ Start_6 Start_3) (str.from_int StartInt_3) (ite StartBool_3 Start_5 Start_5)))
   (StartBool_1 Bool (true false (str.prefixof Start_1 Start_2) (str.contains Start_2 Start_2) (= Start_2 Start)))
   (StartInt_4 Int (0 1 (str.len Start_7)))
   (StartInt_2 Int (0 (str.len Start_4) (str.to_int Start_1)))
   (Start_1 String ("" (str.++ Start_2 Start_2) (str.at Start_1 StartInt_1) (str.replace Start_3 Start_2 Start) (ite StartBool_2 Start_1 Start_4)))
   (StartInt_1 Int (0 (str.len Start_5)))
   (Start_2 String ("a" (str.++ Start_1 Start_2) (str.from_int StartInt)))
   (StartBool_3 Bool (false (str.< Start_1 Start_6) (str.<= Start_6 Start_1) (str.prefixof Start_4 Start_4) (str.contains Start_9 Start_3) (= Start_6 Start_1) (= StartInt_3 StartInt_3) (<= StartInt_1 StartInt_3)))
   (Start_7 String (x (str.at Start_1 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start_8 Start_6 Start_8) (str.from_int StartInt_3)))
   (Start_4 String (x "b" "" "0" "1" "a" (str.++ Start_2 Start_3) (str.from_int StartInt)))
   (Start_3 String (y "b" (str.++ Start_4 Start_4) (str.at Start StartInt_2) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_2 StartBool) (str.< Start_1 Start_1) (= StartInt_2 StartInt)))
   (Start_5 String ("0" "" "a" "b" (str.++ Start_3 Start_5) (str.at Start_4 StartInt) (ite StartBool_1 Start_1 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof "0" x) "a" (str.substr y 0 1))))

(check-synth)
