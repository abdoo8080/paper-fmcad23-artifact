(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_1 String) (Start_14 String) (StartInt_5 Int) (Start_13 String) (StartInt_4 Int) (Start_10 String) (Start_4 String) (Start_15 String) (Start_5 String) (Start_3 String) (Start_6 String) (Start_7 String) (StartInt_6 Int) (StartInt_3 Int) (Start_11 String) (StartBool_2 Bool) (Start_9 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_8 String) (Start_12 String) (Start_2 String) (StartInt_2 Int) (StartBool_3 Bool))
  ((Start String ("" (str.at Start StartInt) (str.replace Start Start Start_1) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (1 (str.indexof Start_10 Start StartInt_1) (str.to_int Start_12)))
   (StartBool Bool (false (and StartBool_1 StartBool_3) (str.contains Start_11 Start_1) (= Start_1 Start_15) (= StartInt_3 StartInt_7) (<= StartInt StartInt_5)))
   (StartInt_7 Int (1 (str.len Start_4) (str.indexof Start_3 Start_5 StartInt_1) (str.to_int Start_11)))
   (Start_1 String ("" (str.++ Start_4 Start_13) (str.at Start_7 StartInt) (str.replace Start_8 Start_10 Start_15) (ite StartBool_2 Start_14 Start_14)))
   (Start_14 String ("b" (str.++ Start_4 Start_8) (str.at Start_14 StartInt_5) (str.substr Start_6 StartInt StartInt_5) (str.from_int StartInt)))
   (StartInt_5 Int (0 1 (str.len Start_3) (str.indexof Start_9 Start_14 StartInt_4) (str.to_int Start_8)))
   (Start_13 String (x "" (str.++ Start_4 Start_1) (str.at Start_2 StartInt_5) (str.replace Start_12 Start_3 Start_2)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.to_int Start_1)))
   (Start_10 String ("0" (str.++ Start_8 Start_1) (str.substr Start_7 StartInt_4 StartInt) (str.replace Start Start_8 Start_10)))
   (Start_4 String ("b" "a" "1" (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start Start_3 Start_2) (str.from_int StartInt_2)))
   (Start_15 String ("0" (str.++ Start_5 Start_3) (str.at Start_6 StartInt_3) (str.substr Start_14 StartInt_6 StartInt_5) (str.replace Start_4 Start_7 Start_5)))
   (Start_5 String ("a" "" x (str.++ Start_2 Start_5) (str.substr Start_6 StartInt_1 StartInt)))
   (Start_3 String ("" "a" (str.at Start StartInt_1) (str.replace Start_1 Start_4 Start_7) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (Start_6 String ("0" (str.substr Start_6 StartInt StartInt) (str.from_int StartInt)))
   (Start_7 String ("" (str.++ Start_7 Start_7) (str.at Start_4 StartInt_1) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_7 Start_5 Start_7)))
   (StartInt_6 Int (0 (str.len Start_4)))
   (StartInt_3 Int (1 0 (str.indexof Start_1 Start_3 StartInt_2)))
   (Start_11 String ("0" (str.at Start_15 StartInt_2) (str.substr Start_15 StartInt_4 StartInt)))
   (StartBool_2 Bool (true (str.< Start_11 Start_12) (str.suffixof Start_5 Start_9) (str.contains Start_10 Start_12) (= Start_6 Start_3) (= StartInt_1 StartInt)))
   (Start_9 String (x "a" "1" (ite StartBool_2 Start_10 Start_2)))
   (StartInt_1 Int (1 0 (str.len Start_5) (str.to_int Start_4)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_3) (str.< Start_8 Start_2) (str.contains Start_2 Start_4) (<= StartInt_2 StartInt_1)))
   (Start_8 String (x "b" (str.at Start_2 StartInt_2) (str.substr Start_2 StartInt_1 StartInt) (ite StartBool_2 Start_2 Start_5)))
   (Start_12 String ("1" x (str.at Start_3 StartInt_1) (str.replace Start_4 Start_1 Start_13)))
   (Start_2 String ("a" "1" (str.at Start_3 StartInt) (str.replace Start Start_1 Start_4)))
   (StartInt_2 Int (1 0 (str.len Start) (str.to_int Start)))
   (StartBool_3 Bool (true (and StartBool StartBool_2) (str.< Start_5 Start_9) (str.suffixof Start_5 Start_2) (str.contains Start_8 Start) (= Start_6 Start_6) (= StartInt_3 StartInt_1) (<= StartInt_2 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (ite (= "a" x) "b" "0") "b")))

(check-synth)
