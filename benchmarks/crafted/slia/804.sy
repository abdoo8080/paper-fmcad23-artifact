(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_6 Int) (StartInt_3 Int) (Start_3 String) (Start_12 String) (Start_7 String) (Start_1 String) (Start_5 String) (StartBool_2 Bool) (Start_10 String) (StartInt_4 Int) (Start_13 String) (Start_4 String) (StartBool_4 Bool) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_2 Int) (Start_8 String) (Start_11 String) (Start_6 String) (StartBool_3 Bool) (Start_9 String) (StartInt_1 Int) (Start_14 String) (StartInt_5 Int) (Start_2 String) (Start_15 String))
  ((Start String ("1" (str.++ Start_1 Start_2) (str.substr Start StartInt_1 StartInt) (str.replace Start Start_2 Start) (str.from_int StartInt_2) (ite StartBool_1 Start Start)))
   (StartInt Int (0 1 (str.len Start_10) (str.indexof Start_10 Start_12 StartInt_7)))
   (StartBool Bool (true false (not StartBool_2) (str.contains Start_9 Start_13) (= StartInt_8 StartInt_6)))
   (StartInt_8 Int (1 (str.len Start_4) (str.indexof Start_1 Start_15 StartInt_1) (str.to_int Start_8)))
   (StartInt_6 Int (1 (str.indexof Start_2 Start_9 StartInt) (str.to_int Start_6)))
   (StartInt_3 Int (0 (str.len Start_11) (str.to_int Start_8)))
   (Start_3 String ("b" y x "0" (str.++ Start_11 Start_8) (str.at Start StartInt_2) (str.substr Start_9 StartInt_7 StartInt_5) (str.from_int StartInt_6) (ite StartBool Start_10 Start_5)))
   (Start_12 String (x (str.at Start_7 StartInt) (ite StartBool_1 Start_2 Start_3)))
   (Start_7 String ("1" (str.++ Start_2 Start_6) (str.at Start_8 StartInt_4) (str.substr Start_3 StartInt_5 StartInt_5) (str.replace Start_9 Start_4 Start_6) (str.from_int StartInt_4) (ite StartBool_2 Start_4 Start_7)))
   (Start_1 String ("0" (str.replace Start_1 Start Start_15) (str.from_int StartInt_7)))
   (Start_5 String ("0" "a" "1" (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start_6 Start_4 Start_3) (str.from_int StartInt_4)))
   (StartBool_2 Bool (false (and StartBool StartBool_3) (str.< Start_1 Start) (str.prefixof Start Start_3) (str.suffixof Start Start_1) (str.contains Start_4 Start_1) (= Start_1 Start_5)))
   (Start_10 String ("a" (str.from_int StartInt_7) (ite StartBool_4 Start_5 Start_5)))
   (StartInt_4 Int (1 (str.indexof Start_7 Start_4 StartInt_3) (str.to_int Start_4)))
   (Start_13 String (y "b" x "" (str.++ Start_5 Start_12) (str.at Start_12 StartInt_5) (ite StartBool_3 Start_2 Start_1)))
   (Start_4 String ("a" y x (str.substr Start StartInt_1 StartInt_3) (str.from_int StartInt) (ite StartBool_2 Start_4 Start_2)))
   (StartBool_4 Bool (true (and StartBool_4 StartBool) (str.suffixof Start_5 Start_4) (= Start_3 Start_8) (= StartInt_4 StartInt)))
   (StartBool_1 Bool (true false (str.prefixof Start_1 Start_3) (str.suffixof Start_3 Start_4) (= Start_1 Start) (<= StartInt_2 StartInt_1)))
   (StartInt_7 Int (0 1 (str.len Start_7) (str.indexof Start_1 Start_6 StartInt_7) (str.to_int Start_11)))
   (StartInt_2 Int (0 (str.indexof Start_12 Start_9 StartInt_4)))
   (Start_8 String ("b" (str.++ Start_4 Start_5) (ite StartBool_2 Start_7 Start_5)))
   (Start_11 String ("a" (str.++ Start Start_2) (str.at Start_5 StartInt_4) (str.replace Start_1 Start_3 Start_12) (str.from_int StartInt_7) (ite StartBool_2 Start_13 Start_4)))
   (Start_6 String ("a" "b" "" "0" (str.at Start_11 StartInt_5) (str.substr Start_8 StartInt_6 StartInt) (ite StartBool_2 Start_12 Start_5)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool_3) (str.<= Start_10 Start_10) (str.prefixof Start_8 Start_4) (str.suffixof Start_11 Start_12) (= Start_13 Start_13) (= StartInt_1 StartInt_3)))
   (Start_9 String ("b" (str.++ Start_7 Start_7) (str.substr Start_6 StartInt_6 StartInt_5) (str.from_int StartInt_3) (ite StartBool_2 Start_7 Start_3)))
   (StartInt_1 Int (0 (str.len Start_14) (str.indexof Start_11 Start_7 StartInt_7) (str.to_int Start_14)))
   (Start_14 String ("a" "0" "1" (str.++ Start Start_2) (str.substr Start_11 StartInt_7 StartInt_3) (str.replace Start Start_5 Start_4)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_8 Start_9 StartInt_3) (str.to_int Start_10)))
   (Start_2 String ("1" (str.++ Start_14 Start) (str.substr Start_9 StartInt_1 StartInt_5) (str.replace Start_4 Start Start_4)))
   (Start_15 String ("" (str.++ Start_13 Start_3) (str.at Start_4 StartInt_1) (str.replace Start_13 Start_5 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.++ x x) "")))

(check-synth)
