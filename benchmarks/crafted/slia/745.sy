(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_9 String) (Start_11 String) (StartInt_7 Int) (Start_2 String) (StartInt_6 Int) (StartInt_3 Int) (StartInt_1 Int) (Start_1 String) (StartInt_4 Int) (Start_10 String) (StartInt_2 Int) (Start_4 String) (StartBool_1 Bool) (Start_3 String) (StartInt_5 Int) (Start_5 String) (Start_7 String) (Start_6 String) (Start_8 String))
  ((Start String ("1" "" (str.++ Start_1 Start_1) (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start)))
   (StartInt Int (1 (str.len Start_9) (str.indexof Start_7 Start_1 StartInt_7) (str.to_int Start_10)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool StartBool_1) (str.<= Start_12 Start_7) (str.prefixof Start_9 Start_5) (str.suffixof Start_4 Start) (= Start_6 Start) (= StartInt_6 StartInt_4) (<= StartInt_1 StartInt)))
   (Start_12 String (x "1" (str.++ Start_5 Start_1) (str.at Start_5 StartInt_1)))
   (Start_9 String ("1" (str.++ Start_9 Start_9) (str.from_int StartInt_7)))
   (Start_11 String ("b" (str.replace Start_1 Start_11 Start_11)))
   (StartInt_7 Int (1 0 (str.indexof Start_2 Start_7 StartInt_5) (str.to_int Start_3)))
   (Start_2 String (x (str.replace Start_8 Start Start_2) (str.from_int StartInt_6) (ite StartBool Start_3 Start_1)))
   (StartInt_6 Int (1))
   (StartInt_3 Int (0 (str.len Start_7) (str.indexof Start_8 Start_6 StartInt_3)))
   (StartInt_1 Int (1))
   (Start_1 String ("0" y (str.++ Start Start_2) (str.from_int StartInt_2)))
   (StartInt_4 Int (0 (str.len Start_3) (str.indexof Start_6 Start_2 StartInt)))
   (Start_10 String ("" (str.++ Start_11 Start_3) (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start)))
   (StartInt_2 Int (1 0 (str.indexof Start_3 Start_4 StartInt) (str.to_int Start_1)))
   (Start_4 String (x (str.++ Start_1 Start_3) (str.at Start_3 StartInt_3) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start_5 Start_4) (str.from_int StartInt_1) (ite StartBool Start_1 Start)))
   (StartBool_1 Bool (false true (str.<= Start_6 Start_7) (str.suffixof Start_2 Start_6) (= StartInt_1 StartInt_2) (<= StartInt_5 StartInt)))
   (Start_3 String ("0" "" "a" (str.++ Start_7 Start_6) (str.substr Start_6 StartInt_2 StartInt_3) (str.replace Start_4 Start_6 Start) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.indexof Start Start_2 StartInt_3) (str.to_int Start_4)))
   (Start_5 String (x (str.from_int StartInt_4)))
   (Start_7 String ("1" y "0" "" "b" (str.at Start_1 StartInt_3) (str.substr Start_6 StartInt_6 StartInt_1) (str.replace Start_2 Start_6 Start_6) (str.from_int StartInt_6)))
   (Start_6 String ("b" (str.at Start_4 StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start_4 Start)))
   (Start_8 String (y "a" "1" (str.++ Start_2 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "0" y "1") 0)))

(check-synth)
