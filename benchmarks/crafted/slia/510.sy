(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartInt_6 Int) (Start_12 String) (Start_8 String) (StartBool_1 Bool) (StartBool_2 Bool) (Start_10 String) (StartInt_3 Int) (Start_11 String) (StartInt_4 Int) (Start_9 String) (Start_3 String) (Start_2 String) (StartBool_3 Bool) (Start_4 String) (Start_1 String) (StartInt_2 Int) (StartBool_4 Bool) (StartInt_5 Int) (Start_5 String) (Start_7 String) (Start_14 String) (StartInt_1 Int) (Start_6 String))
  ((Start String (y "0" (str.at Start_1 StartInt) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 (str.len Start)))
   (StartBool Bool (false (str.prefixof Start Start_4) (str.contains Start_13 Start_7) (= StartInt_3 StartInt_2) (<= StartInt_1 StartInt_1)))
   (Start_13 String (x "1" (str.replace Start_13 Start_1 Start_14) (str.from_int StartInt_6)))
   (StartInt_6 Int (0 1 (str.len Start_4)))
   (Start_12 String ("1" (str.at Start_9 StartInt_2) (str.substr Start_8 StartInt_6 StartInt) (str.replace Start_7 Start Start_9) (str.from_int StartInt_4) (ite StartBool_2 Start_10 Start_3)))
   (Start_8 String ("0" (str.at Start_9 StartInt_1) (ite StartBool_3 Start_1 Start_7)))
   (StartBool_1 Bool (false true (str.<= Start_5 Start_3) (str.contains Start_5 Start_3) (= Start_7 Start_8)))
   (StartBool_2 Bool (true false (str.< Start_5 Start_1) (str.prefixof Start Start_3)))
   (Start_10 String ("1" y "" "a" (str.replace Start_9 Start_6 Start_11) (ite StartBool_4 Start_5 Start_5)))
   (StartInt_3 Int (1 0 (str.indexof Start Start_3 StartInt_4) (str.to_int Start_3)))
   (Start_11 String ("1" "0" (str.++ Start_11 Start_10) (str.from_int StartInt) (ite StartBool_3 Start_4 Start_6)))
   (StartInt_4 Int (1 0 (str.len Start) (str.indexof Start_3 Start_3 StartInt_4)))
   (Start_9 String ("0" (str.++ Start_2 Start) (str.substr Start_2 StartInt_4 StartInt) (str.replace Start_4 Start Start_10)))
   (Start_3 String ("a" (str.at Start_2 StartInt) (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (Start_2 String (y "a" (str.++ Start_1 Start) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_3 Start Start) (str.from_int StartInt_3)))
   (StartBool_3 Bool (true false (str.< Start_3 Start_4) (str.<= Start_1 Start_6) (str.prefixof Start_3 Start_7) (str.contains Start_2 Start_3) (= StartInt_3 StartInt_3)))
   (Start_4 String ("1" (str.at Start_3 StartInt) (str.substr Start StartInt_4 StartInt_2) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_2)))
   (Start_1 String ("b" y "" (str.at Start_9 StartInt) (str.replace Start_3 Start_6 Start_2) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.indexof Start_2 Start_2 StartInt_2) (str.to_int Start_2)))
   (StartBool_4 Bool (false (not StartBool) (and StartBool_4 StartBool_3) (str.prefixof Start_5 Start_12) (= Start_8 Start) (<= StartInt_3 StartInt)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_4 StartInt_5)))
   (Start_5 String ("0" (str.++ Start_2 Start_5) (str.at Start_5 StartInt) (str.replace Start_4 Start_2 Start_3) (ite StartBool_3 Start_4 Start_2)))
   (Start_7 String ("1" x (str.at Start_7 StartInt_5) (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt_3)))
   (Start_14 String (x "a" (str.++ Start_3 Start_6) (str.at Start_11 StartInt_3) (str.from_int StartInt) (ite StartBool Start_6 Start_11)))
   (StartInt_1 Int (1 (str.indexof Start Start_2 StartInt_5)))
   (Start_6 String ("a" (str.++ Start_6 Start_7) (str.substr Start_7 StartInt_2 StartInt_5) (ite StartBool_3 Start Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at (str.replace x "a" x) 0) "b")))

(check-synth)
