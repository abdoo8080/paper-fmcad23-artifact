(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_15 String) (Start_12 String) (Start_10 String) (Start_11 String) (StartBool_4 Bool) (Start_3 String) (StartInt_4 Int) (Start_9 String) (Start_8 String) (StartInt_5 Int) (Start_7 String) (Start_13 String) (Start_1 String) (Start_2 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_4 String) (StartBool_2 Bool) (StartInt_3 Int) (StartBool_3 Bool) (Start_5 String) (Start_6 String))
  ((Start String ("a" "b" y (str.from_int StartInt)))
   (StartInt Int (1 (str.to_int Start_1)))
   (StartBool Bool (true (str.<= Start_2 Start_3) (str.prefixof Start_3 Start_4) (= Start_4 Start_5) (= StartInt_2 StartInt_2)))
   (Start_14 String ("0" "" (str.substr Start_1 StartInt_5 StartInt_5) (str.replace Start_12 Start_7 Start)))
   (Start_15 String ("" (str.++ Start_12 Start_1) (str.substr Start StartInt_4 StartInt)))
   (Start_12 String ("" (str.at Start_5 StartInt_5) (str.from_int StartInt_3) (ite StartBool Start Start_5)))
   (Start_10 String (y "" x (str.++ Start_12 Start_2) (str.at Start_2 StartInt_1) (str.from_int StartInt)))
   (Start_11 String ("" "0" (str.at Start_2 StartInt_2) (str.substr Start StartInt_4 StartInt_2) (str.from_int StartInt_1)))
   (StartBool_4 Bool (false true (str.< Start_10 Start_11) (str.prefixof Start_3 Start_5) (str.suffixof Start_4 Start_5) (str.contains Start_11 Start_7) (= Start Start_11)))
   (Start_3 String ("0" (str.from_int StartInt_4) (ite StartBool_4 Start_5 Start_2)))
   (StartInt_4 Int (0 1 (str.indexof Start_11 Start_6 StartInt_1) (str.to_int Start_5)))
   (Start_9 String (y (str.at Start_6 StartInt_1) (ite StartBool_3 Start_4 Start_6)))
   (Start_8 String (x "0" (str.at Start_9 StartInt_1) (ite StartBool Start_5 Start_2)))
   (StartInt_5 Int (0 1 (str.len Start_13)))
   (Start_7 String ("0" "1" "" x "b" (str.at Start_8 StartInt_1) (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_6)))
   (Start_13 String ("b" (str.++ Start_3 Start_13) (str.at Start_14 StartInt_3) (str.substr Start_7 StartInt_1 StartInt) (str.replace Start_15 Start_7 Start_14)))
   (Start_1 String (y (str.at Start_1 StartInt) (str.replace Start Start_2 Start)))
   (Start_2 String ("a" "" "1" (str.at Start_1 StartInt_1) (str.from_int StartInt_1)))
   (StartInt_1 Int (1))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_2) (str.suffixof Start_2 Start) (= Start_3 Start_4) (= StartInt_1 StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start_5)))
   (Start_4 String ("1" (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_1 Start Start_3) (str.from_int StartInt_1) (ite StartBool_2 Start Start_7)))
   (StartBool_2 Bool (true false (and StartBool StartBool_3) (str.< Start_6 Start_2) (str.<= Start_4 Start) (str.prefixof Start_6 Start_5) (str.contains Start_1 Start_4) (<= StartInt_2 StartInt_1)))
   (StartInt_3 Int (1))
   (StartBool_3 Bool (false (and StartBool_1 StartBool_2) (str.< Start_3 Start_2)))
   (Start_5 String ("a" "b" "" "0" (str.substr Start_1 StartInt StartInt) (str.replace Start Start Start_6) (ite StartBool_1 Start_4 Start_3)))
   (Start_6 String ("" y "a" "1" "0" "b" (str.++ Start_5 Start_1) (str.replace Start_1 Start_2 Start_1) (ite StartBool_2 Start Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x 0)))

(check-synth)
