(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_7 String) (Start_6 String) (Start_5 String) (StartInt_2 Int) (Start_4 String) (Start_1 String) (Start_8 String) (StartBool_1 Bool) (Start_13 String) (StartBool_4 Bool) (Start_3 String) (StartInt_3 Int) (Start_2 String) (StartInt_4 Int) (StartInt_8 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_9 String) (Start_10 String) (StartInt_11 Int) (StartInt_5 Int) (StartInt_7 Int) (StartInt_6 Int) (StartInt_10 Int) (Start_11 String) (Start_12 String) (StartInt_1 Int) (Start_14 String))
  ((Start String ("1" y "a" (str.at Start StartInt) (str.replace Start Start_1 Start_1) (ite StartBool_1 Start_2 Start_2)))
   (StartInt Int (0 (str.len Start_9) (str.to_int Start_11)))
   (StartBool Bool (false true (not StartBool_1) (str.< Start_6 Start_1) (str.<= Start_1 Start_3) (str.prefixof Start_2 Start_8) (str.contains Start_8 Start_6) (= Start_4 Start_13)))
   (StartInt_9 Int (0 1 (str.indexof Start_1 Start StartInt_11)))
   (Start_7 String ("a" x y "1" (str.++ Start_2 Start_3) (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt_4 StartInt_1)))
   (Start_6 String ("" (str.replace Start_1 Start_6 Start_2) (str.from_int StartInt_4) (ite StartBool_2 Start_6 Start_5)))
   (Start_5 String ("b" (str.replace Start_6 Start_1 Start_7) (str.from_int StartInt_3)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.indexof Start Start_3 StartInt_3) (str.to_int Start_5)))
   (Start_4 String ("0" (str.at Start_2 StartInt) (str.substr Start_2 StartInt StartInt) (ite StartBool_2 Start_2 Start_1)))
   (Start_1 String (x (str.at Start_5 StartInt_5) (str.replace Start_4 Start_2 Start_8)))
   (Start_8 String ("b" (str.++ Start_9 Start_4) (str.at Start_5 StartInt_4) (str.from_int StartInt_3)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (str.<= Start_4 Start_1) (str.prefixof Start_4 Start_3)))
   (Start_13 String ("" (str.++ Start_14 Start_2) (str.at Start_9 StartInt_8) (str.substr Start_14 StartInt StartInt_5) (str.from_int StartInt_2) (ite StartBool_3 Start_12 Start_8)))
   (StartBool_4 Bool (false (and StartBool StartBool_3) (str.prefixof Start_3 Start_12) (= Start Start)))
   (Start_3 String ("a" (str.substr Start_2 StartInt_1 StartInt_1)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_3 StartInt_1) (str.to_int Start_2)))
   (Start_2 String (x "b" (str.at Start StartInt_1) (str.replace Start_2 Start Start) (str.from_int StartInt)))
   (StartInt_4 Int (1 0 (str.indexof Start_3 Start_7 StartInt_1) (str.to_int Start)))
   (StartInt_8 Int (0 (str.len Start_8)))
   (StartBool_2 Bool (false true (str.<= Start_4 Start_5) (str.suffixof Start_2 Start) (= Start_2 Start_3) (= StartInt StartInt_2)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool) (str.suffixof Start_9 Start) (= Start_10 Start_9)))
   (Start_9 String ("0" (str.at Start_10 StartInt_5)))
   (Start_10 String ("a" (str.at Start_10 StartInt_4) (str.replace Start_7 Start_1 Start)))
   (StartInt_11 Int (0 1 (str.to_int Start_6)))
   (StartInt_5 Int (1 (str.indexof Start_2 Start_9 StartInt_1) (str.to_int Start_3)))
   (StartInt_7 Int (1))
   (StartInt_6 Int (1 (str.indexof Start_6 Start_2 StartInt_8)))
   (StartInt_10 Int (0 1 (str.len Start_6) (str.indexof Start_9 Start_1 StartInt_7) (str.to_int Start_13)))
   (Start_11 String (x "a" (str.at Start_11 StartInt_1) (str.substr Start_9 StartInt_1 StartInt_1) (str.replace Start_4 Start_5 Start_10) (ite StartBool_3 Start_12 Start_11)))
   (Start_12 String ("1" (str.++ Start_1 Start_3) (str.at Start_6 StartInt_6) (str.from_int StartInt_7) (ite StartBool_2 Start_5 Start_1)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.to_int Start_1)))
   (Start_14 String (x (str.++ Start_2 Start_2) (str.at Start StartInt_9) (str.from_int StartInt_10) (ite StartBool_4 Start_9 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" (str.replace x "b" "0") (str.++ "1" "1"))))

(check-synth)
