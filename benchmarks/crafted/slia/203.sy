(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_3 Int) (Start_4 String) (StartInt_12 Int) (Start_6 String) (Start_10 String) (StartInt_4 Int) (Start_8 String) (Start_3 String) (Start_12 String) (StartInt_9 Int) (StartInt_2 Int) (StartInt_1 Int) (StartInt_8 Int) (StartInt_5 Int) (Start_7 String) (Start_1 String) (Start_2 String) (Start_5 String) (StartBool_3 Bool) (Start_9 String) (StartInt_7 Int) (StartInt_6 Int) (Start_11 String) (StartBool_1 Bool) (StartInt_11 Int) (StartInt_10 Int) (Start_13 String))
  ((Start String ("a" (str.replace Start Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 0 (str.len Start_10)))
   (StartBool Bool (true false (str.< Start_5 Start_4) (= StartInt_10 StartInt_12) (<= StartInt_3 StartInt_7)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_3) (str.< Start_1 Start_1) (str.prefixof Start_4 Start_7) (str.suffixof Start_3 Start_2) (str.contains Start_1 Start_2) (= StartInt_1 StartInt_6) (<= StartInt_7 StartInt_4)))
   (StartInt_3 Int (1 0 (str.len Start_5) (str.indexof Start Start_6 StartInt_4)))
   (Start_4 String ("a" "1" (str.++ Start_3 Start_6) (str.at Start_2 StartInt_3) (str.substr Start_5 StartInt_5 StartInt_6) (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start_1)))
   (StartInt_12 Int (0 1))
   (Start_6 String (y "b" x "0" "" "a" "1" (str.++ Start_4 Start_4) (str.at Start_3 StartInt_4) (str.substr Start_1 StartInt_5 StartInt_5) (str.replace Start_3 Start_2 Start_5) (ite StartBool Start_4 Start)))
   (Start_10 String (y "b" (str.++ Start_5 Start_8) (str.substr Start StartInt_9 StartInt_9) (str.from_int StartInt_7)))
   (StartInt_4 Int (0 (str.len Start_4) (str.indexof Start_1 Start_6 StartInt_2)))
   (Start_8 String ("" "0" "b" y x "a" (str.++ Start_7 Start_9) (str.at Start_4 StartInt_4) (str.from_int StartInt_5) (ite StartBool Start_4 Start_7)))
   (Start_3 String ("" (str.++ Start_4 Start) (str.replace Start_5 Start_1 Start_3)))
   (Start_12 String ("0" (str.++ Start_5 Start_2) (str.at Start_5 StartInt_11) (str.substr Start_4 StartInt StartInt_6) (str.replace Start_1 Start_7 Start_8) (str.from_int StartInt_2)))
   (StartInt_9 Int (0 (str.to_int Start_11)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_3 Start_2 StartInt_3) (str.to_int Start_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_2 Start_10 StartInt_4)))
   (StartInt_8 Int (0 (str.indexof Start_2 Start_8 StartInt_8) (str.to_int Start_9)))
   (StartInt_5 Int (1 0 (str.len Start_6) (str.indexof Start_3 Start_1 StartInt_2) (str.to_int Start_1)))
   (Start_7 String (y (str.replace Start_8 Start_9 Start_4)))
   (Start_1 String ("1" (str.replace Start_13 Start_5 Start_7)))
   (Start_2 String (x (str.++ Start_2 Start) (str.replace Start Start_1 Start_3)))
   (Start_5 String ("1" "a" "" (str.++ Start_5 Start_2) (str.substr Start_4 StartInt_2 StartInt) (str.replace Start_5 Start Start_4) (ite StartBool Start_4 Start_4)))
   (StartBool_3 Bool (true false (str.< Start_4 Start_7) (str.<= Start_4 Start) (str.prefixof Start_6 Start_9) (str.suffixof Start_2 Start_6) (= StartInt_3 StartInt_1)))
   (Start_9 String ("b" y (str.++ Start Start_1) (str.at Start_2 StartInt_1) (str.replace Start_1 Start_2 Start) (str.from_int StartInt_5) (ite StartBool_2 Start_7 Start_8)))
   (StartInt_7 Int (1 (str.indexof Start Start_1 StartInt_4)))
   (StartInt_6 Int (0 (str.len Start_10) (str.indexof Start_7 Start_4 StartInt_8) (str.to_int Start)))
   (Start_11 String ("b" (str.++ Start_11 Start_6) (str.at Start StartInt_2) (str.substr Start_2 StartInt_10 StartInt_11) (str.replace Start_6 Start_7 Start_10) (str.from_int StartInt_10)))
   (StartBool_1 Bool (true false (not StartBool_3) (str.< Start_1 Start_7) (str.<= Start_5 Start_9) (str.suffixof Start_5 Start) (str.contains Start Start) (= Start_10 Start_12) (= StartInt_12 StartInt_10) (<= StartInt_10 StartInt_8)))
   (StartInt_11 Int (0 (str.indexof Start_8 Start_3 StartInt_10)))
   (StartInt_10 Int (1 0))
   (Start_13 String ("0" (str.++ Start_8 Start_2) (str.substr Start_12 StartInt_1 StartInt_11) (str.replace Start_12 Start_13 Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ (str.++ (str.at y 1) y) "0") 1)))

(check-synth)
