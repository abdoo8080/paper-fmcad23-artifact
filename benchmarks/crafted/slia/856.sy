(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_6 Int) (Start_3 String) (Start_2 String) (Start_7 String) (StartInt_4 Int) (Start_9 String) (Start_8 String) (StartInt_1 Int) (Start_1 String) (Start_13 String) (Start_10 String) (Start_6 String) (Start_5 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_4 String) (StartInt_5 Int) (StartInt_2 Int) (StartBool_3 Bool) (StartBool_2 Bool) (Start_12 String) (Start_11 String))
  ((Start String ("a" (str.++ Start_1 Start) (str.at Start_1 StartInt)))
   (StartInt Int (1 (str.indexof Start_9 Start_8 StartInt_1) (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_1 StartBool_3) (str.< Start_5 Start_2) (str.prefixof Start_2 Start) (= StartInt_3 StartInt_6) (<= StartInt_6 StartInt_6)))
   (StartBool_4 Bool (false (not StartBool_1) (str.<= Start_12 Start_2) (= Start_10 Start_12) (= StartInt_1 StartInt_1) (<= StartInt_4 StartInt_2)))
   (StartInt_6 Int (0 (str.to_int Start_12)))
   (Start_3 String (x (str.++ Start_13 Start_9) (str.replace Start_6 Start_10 Start_1) (str.from_int StartInt)))
   (Start_2 String ("1" (str.++ Start_10 Start_6) (str.substr Start_5 StartInt_5 StartInt) (str.replace Start_13 Start_2 Start_11)))
   (Start_7 String ("" y (str.at Start_13 StartInt_1) (str.replace Start_12 Start_12 Start_1) (ite StartBool_2 Start_2 Start_1)))
   (StartInt_4 Int (0 1 (str.to_int Start_2)))
   (Start_9 String ("b" (str.at Start_10 StartInt_4) (str.substr Start_6 StartInt StartInt) (str.from_int StartInt_4)))
   (Start_8 String (y "a" (str.++ Start_7 Start_2) (str.substr Start StartInt_2 StartInt_4) (str.replace Start_10 Start_1 Start_13) (ite StartBool Start_3 Start_8)))
   (StartInt_1 Int (1 (str.len Start_5) (str.to_int Start_3)))
   (Start_1 String ("a" x "b" y "0" (str.++ Start_2 Start_3) (str.at Start_4 StartInt) (str.substr Start_2 StartInt_1 StartInt) (ite StartBool Start_5 Start_6)))
   (Start_13 String (x (str.++ Start_10 Start) (str.replace Start_11 Start_8 Start_9) (str.from_int StartInt_4)))
   (Start_10 String ("1" y (str.++ Start_10 Start_11) (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_2) (ite StartBool_2 Start Start_7)))
   (Start_6 String (y (str.++ Start_4 Start_6) (str.at Start_5 StartInt_1) (str.from_int StartInt_1)))
   (Start_5 String ("0" x "" (str.++ Start_4 Start_2) (str.substr Start_4 StartInt StartInt) (str.replace Start_1 Start_4 Start_6) (str.from_int StartInt)))
   (StartInt_3 Int (0 (str.len Start_5) (str.indexof Start_12 Start_5 StartInt_3)))
   (StartBool_1 Bool (false (not StartBool) (str.prefixof Start_8 Start) (str.contains Start_9 Start) (= Start_7 Start_2) (= StartInt_2 StartInt_1)))
   (Start_4 String ("b" "" "0" y "a" "1" (str.replace Start_4 Start_6 Start_7) (ite StartBool_1 Start_2 Start)))
   (StartInt_5 Int (0))
   (StartInt_2 Int (1 (str.to_int Start_10)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_2 StartBool_3) (str.< Start_7 Start_5) (str.prefixof Start_5 Start) (str.suffixof Start_7 Start_3) (= Start_13 Start_9)))
   (StartBool_2 Bool (false true (str.< Start_6 Start_9) (str.prefixof Start_9 Start_7) (str.suffixof Start_2 Start_10) (= StartInt_1 StartInt_3)))
   (Start_12 String (x (str.++ Start_4 Start_2) (str.substr Start_6 StartInt_1 StartInt_2) (str.replace Start_7 Start_4 Start_4) (str.from_int StartInt_3)))
   (Start_11 String ("0" (str.at Start_9 StartInt) (str.substr Start_2 StartInt_3 StartInt) (str.replace Start_2 Start_4 Start_4) (str.from_int StartInt_2) (ite StartBool Start_8 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "0" x "a") (str.at x 1) "a")))

(check-synth)
