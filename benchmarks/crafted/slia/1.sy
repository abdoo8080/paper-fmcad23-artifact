(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_19 String) (Start_17 String) (Start_8 String) (StartInt_4 Int) (Start_2 String) (Start_5 String) (Start_16 String) (Start_6 String) (Start_4 String) (StartInt_1 Int) (Start_3 String) (StartInt_2 Int) (Start_15 String) (StartInt_3 Int) (Start_12 String) (StartInt_5 Int) (Start_1 String) (StartBool_4 Bool) (Start_13 String) (Start_11 String) (Start_10 String) (StartInt_7 Int) (Start_7 String) (StartInt_6 Int) (Start_9 String) (StartBool_3 Bool) (Start_14 String) (StartBool_2 Bool) (StartBool_1 Bool))
  ((Start String ("1" y "b" (str.++ Start_1 Start_1) (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool_1 Start_2 Start_2)))
   (StartInt Int (0 1 (str.len Start_13) (str.indexof Start_17 Start_2 StartInt_3) (str.to_int Start_4)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_4 StartBool_2) (str.< Start_12 Start_4) (str.suffixof Start_11 Start_2) (str.contains Start Start_7) (= StartInt_2 StartInt_5) (<= StartInt_6 StartInt_7)))
   (Start_18 String (y (str.at Start_12 StartInt_2)))
   (Start_19 String ("1" (str.substr Start_10 StartInt_5 StartInt_4) (str.replace Start_16 Start_11 Start_6) (str.from_int StartInt_6) (ite StartBool Start_15 Start_6)))
   (Start_17 String ("b" y x "" (str.++ Start_18 Start_14) (str.at Start_15 StartInt) (str.substr Start_19 StartInt_5 StartInt_3) (str.replace Start_10 Start_10 Start_9) (ite StartBool_1 Start_2 Start_9)))
   (Start_8 String (y (str.++ Start_9 Start_5) (str.replace Start_3 Start_10 Start_1) (str.from_int StartInt_4) (ite StartBool Start_10 Start_5)))
   (StartInt_4 Int (0 (str.to_int Start_2)))
   (Start_2 String ("" (str.++ Start_2 Start)))
   (Start_5 String ("" y x (str.at Start StartInt_4) (str.replace Start Start_4 Start_5)))
   (Start_16 String (y "a" (ite StartBool_4 Start_1 Start_15)))
   (Start_6 String ("a" "b" "0" (str.++ Start_1 Start_6) (str.at Start_2 StartInt_5) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_7 Start_6 Start_5) (ite StartBool_2 Start_6 Start_8)))
   (Start_4 String ("" "a" (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 (str.indexof Start_5 Start_2 StartInt_1)))
   (Start_3 String ("a" (str.replace Start_2 Start Start_3) (ite StartBool Start_5 Start_3)))
   (StartInt_2 Int (1))
   (Start_15 String ("a" "0" "b" (str.++ Start_1 Start_15) (str.substr Start_1 StartInt_1 StartInt_4) (str.from_int StartInt_5)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start_4 Start_4 StartInt_2) (str.to_int Start_3)))
   (Start_12 String (y "b" x (str.replace Start_3 Start_5 Start_2) (str.from_int StartInt_3)))
   (StartInt_5 Int (0 (str.indexof Start_2 Start_14 StartInt_2) (str.to_int Start_15)))
   (Start_1 String ("a" "" "0" x (str.++ Start_1 Start_5) (str.substr Start_6 StartInt_4 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_3 Start_3)))
   (StartBool_4 Bool (true (str.<= Start_8 Start_13) (str.prefixof Start_3 Start_1) (str.suffixof Start_15 Start_1) (str.contains Start_1 Start_1) (<= StartInt_4 StartInt)))
   (Start_13 String ("0" "" "1" "a" (str.++ Start_8 Start) (str.substr Start_9 StartInt_4 StartInt) (ite StartBool Start_9 Start_2)))
   (Start_11 String ("a" (str.substr Start_7 StartInt_3 StartInt_3) (ite StartBool_2 Start_4 Start_3)))
   (Start_10 String (y "0" "a" "" "1" (str.at Start_1 StartInt_6) (str.substr Start_8 StartInt_7 StartInt_3) (str.replace Start_2 Start_11 Start_12) (str.from_int StartInt) (ite StartBool_1 Start_12 Start_8)))
   (StartInt_7 Int (0 1 (str.len Start_12) (str.indexof Start_9 Start_1 StartInt_5) (str.to_int Start_5)))
   (Start_7 String (x "0" y (str.at Start_2 StartInt_6) (str.substr Start_10 StartInt StartInt_3) (ite StartBool_3 Start_14 Start_3)))
   (StartInt_6 Int (0 1 (str.indexof Start_11 Start_4 StartInt_2) (str.to_int Start_10)))
   (Start_9 String ("0" "a" "1" (str.++ Start_9 Start_2) (str.substr Start_7 StartInt_2 StartInt_5) (str.replace Start_8 Start Start_7) (str.from_int StartInt)))
   (StartBool_3 Bool (false true (str.< Start_3 Start_1) (str.<= Start_10 Start_13) (= StartInt_6 StartInt_7)))
   (Start_14 String (y "1" "a" (str.++ Start_15 Start_16) (str.substr Start_7 StartInt_7 StartInt_4) (str.replace Start_13 Start_14 Start_1) (str.from_int StartInt_7) (ite StartBool_1 Start_13 Start_4)))
   (StartBool_2 Bool (true (not StartBool_1) (str.<= Start_11 Start_3) (str.prefixof Start_2 Start_9) (str.suffixof Start_2 Start_13) (str.contains Start_8 Start_6) (= Start_3 Start) (<= StartInt_7 StartInt_5)))
   (StartBool_1 Bool (false true (str.<= Start_1 Start_2) (= Start_3 Start_2) (= StartInt_1 StartInt_2) (<= StartInt_3 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" y "1")))

(check-synth)
