(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_7 String) (Start_6 String) (Start_3 String) (Start_5 String) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_7 Int) (StartBool_3 Bool) (StartInt_1 Int) (Start_14 String) (StartInt_8 Int) (Start_1 String) (Start_16 String) (StartInt_3 Int) (StartInt_4 Int) (Start_17 String) (StartBool_6 Bool) (Start_2 String) (StartInt_5 Int) (Start_10 String) (Start_8 String) (Start_9 String) (StartBool_2 Bool) (StartBool_4 Bool) (StartInt_6 Int) (Start_4 String) (Start_12 String) (Start_13 String) (Start_11 String) (StartBool_5 Bool))
  ((Start String ("1" (str.++ Start_1 Start)))
   (StartInt Int (1 (str.len Start)))
   (StartBool Bool (false true (str.< Start_4 Start_1) (str.suffixof Start_4 Start_3) (= Start_5 Start_4)))
   (Start_15 String ("" "a" "b" "0" (str.++ Start_4 Start_15) (str.at Start_8 StartInt_5) (str.from_int StartInt_8)))
   (Start_7 String ("b" x (str.substr Start_8 StartInt StartInt) (str.replace Start_8 Start_4 Start_9) (str.from_int StartInt_2)))
   (Start_6 String ("0" "1" (str.++ Start_3 Start_7) (str.at Start_3 StartInt_3)))
   (Start_3 String ("1" (str.from_int StartInt_2)))
   (Start_5 String (y "" (str.++ Start_6 Start_2) (str.substr Start_5 StartInt_2 StartInt_2) (str.replace Start Start_5 Start_1)))
   (StartBool_1 Bool (false true (str.< Start_2 Start_2) (str.prefixof Start Start_3) (= Start_3 Start_3) (<= StartInt_1 StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.indexof Start_1 Start StartInt_2) (str.to_int Start_1)))
   (StartInt_7 Int (0 1 (str.len Start_11) (str.indexof Start_14 Start_6 StartInt_3)))
   (StartBool_3 Bool (false true (not StartBool_6) (str.< Start_1 Start_12) (str.prefixof Start_1 Start_9) (str.contains Start_1 Start_10) (= Start Start_1) (= StartInt_6 StartInt_5) (<= StartInt_4 StartInt)))
   (StartInt_1 Int (0))
   (Start_14 String (x "1" y "0" "" "b" "a" (str.++ Start_15 Start_4) (str.at Start_16 StartInt_7) (str.replace Start_10 Start_15 Start_3) (str.from_int StartInt_3)))
   (StartInt_8 Int (0 (str.len Start_15) (str.to_int Start_15)))
   (Start_1 String (x "a" "" "1" "b" "0" y (str.substr Start_1 StartInt StartInt_1) (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt) (ite StartBool Start Start_2)))
   (Start_16 String (x "a" "1" "b" "" "0" (ite StartBool Start_12 Start_17)))
   (StartInt_3 Int (0 1))
   (StartInt_4 Int (0 1 (str.to_int Start_2)))
   (Start_17 String ("0" (str.at Start_10 StartInt) (str.substr Start_14 StartInt_6 StartInt_4) (str.replace Start_2 Start_12 Start_3)))
   (StartBool_6 Bool (false (and StartBool_4 StartBool) (str.< Start_3 Start_9) (str.<= Start_3 Start) (str.prefixof Start_10 Start_11) (str.contains Start_7 Start_12) (= Start_9 Start_7)))
   (Start_2 String ("1" (str.at Start StartInt) (str.replace Start_2 Start Start_2) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_5 Int (1 0 (str.to_int Start_4)))
   (Start_10 String ("" "b" (str.from_int StartInt_3)))
   (Start_8 String (x "0" "1" "" "b" y "a" (str.++ Start_6 Start_7) (str.substr Start_9 StartInt_4 StartInt_6)))
   (Start_9 String (x (str.at Start_5 StartInt_4) (str.replace Start_10 Start_8 Start_1) (str.from_int StartInt_3) (ite StartBool_2 Start_10 Start)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_3 StartBool_4) (str.< Start_1 Start_10) (str.suffixof Start_8 Start_10) (str.contains Start_3 Start_8) (= Start Start_8)))
   (StartBool_4 Bool (false (not StartBool_5) (and StartBool_1 StartBool) (str.< Start_8 Start_11) (str.<= Start_8 Start_8) (str.suffixof Start_11 Start_12) (= StartInt_1 StartInt_1)))
   (StartInt_6 Int (1 (str.len Start_3) (str.indexof Start_6 Start_6 StartInt)))
   (Start_4 String ("1" y (str.++ Start_14 Start_8) (str.replace Start_11 Start_8 Start_2) (ite StartBool_2 Start_12 Start_1)))
   (Start_12 String ("a" (str.++ Start_3 Start_13) (str.at Start_5 StartInt_1) (str.from_int StartInt_2)))
   (Start_13 String ("a" (str.++ Start_8 Start_7) (str.substr Start_13 StartInt_5 StartInt_2) (str.replace Start_3 Start_9 Start_3) (str.from_int StartInt_4)))
   (Start_11 String (x "0" (str.substr Start_6 StartInt_2 StartInt_1)))
   (StartBool_5 Bool (false true (str.<= Start_3 Start_1) (str.prefixof Start_11 Start_7) (= Start_9 Start_11) (= StartInt_2 StartInt_1) (<= StartInt StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x (str.replace y "0" x))))

(check-synth)
