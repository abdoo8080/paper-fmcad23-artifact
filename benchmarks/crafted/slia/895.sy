(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_7 Int) (Start_3 String) (Start_9 String) (Start_10 String) (StartInt_2 Int) (StartInt_6 Int) (StartBool_3 Bool) (Start_2 String) (Start_1 String) (StartInt_3 Int) (Start_4 String) (Start_6 String) (Start_5 String) (StartInt_5 Int) (StartBool_2 Bool) (Start_8 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_4 Int) (Start_7 String))
  ((Start String ("0" (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (0 (str.len Start_4) (str.indexof Start_9 Start_4 StartInt_6) (str.to_int Start_9)))
   (StartBool Bool (true false (str.< Start_4 Start_6) (str.<= Start_8 Start_6) (str.prefixof Start_5 Start) (str.contains Start Start_11)))
   (Start_11 String ("0" "b" "a" (str.++ Start_4 Start_3) (str.substr Start_1 StartInt_7 StartInt_4)))
   (StartInt_7 Int (1 (str.len Start_8) (str.to_int Start)))
   (Start_3 String (x "0" (str.++ Start_7 Start_8) (str.at Start_2 StartInt_7) (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start_7 Start_10 Start_1)))
   (Start_9 String (x "0" (str.replace Start_7 Start Start_10) (str.from_int StartInt_5)))
   (Start_10 String ("a" (str.++ Start_9 Start_10) (str.at Start_1 StartInt_1) (str.substr Start_6 StartInt_6 StartInt) (str.replace Start_1 Start Start_2)))
   (StartInt_2 Int (1 (str.len Start_9) (str.indexof Start_9 Start_10 StartInt_3) (str.to_int Start_3)))
   (StartInt_6 Int (1 0 (str.indexof Start_7 Start_1 StartInt_2)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool) (str.contains Start_7 Start_7) (= Start_7 Start_3)))
   (Start_2 String ("a" (str.at Start_2 StartInt) (str.replace Start Start Start_1) (str.from_int StartInt)))
   (Start_1 String ("b" y (str.at Start StartInt) (str.substr Start_3 StartInt_1 StartInt_2) (ite StartBool_1 Start_1 Start_2)))
   (StartInt_3 Int (1 0 (str.to_int Start_2)))
   (Start_4 String (y (str.++ Start_4 Start_2) (str.at Start StartInt_2) (str.substr Start_2 StartInt StartInt_3) (str.replace Start Start Start_5) (str.from_int StartInt) (ite StartBool Start_1 Start_4)))
   (Start_6 String (x "1" "a" "0" (str.at Start_8 StartInt_5) (str.from_int StartInt_5)))
   (Start_5 String (x (str.from_int StartInt_3)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start Start_3 StartInt_5) (str.to_int Start)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool) (str.prefixof Start_3 Start_6) (str.suffixof Start_6 Start_4) (= Start_3 Start_5) (<= StartInt_4 StartInt_1)))
   (Start_8 String ("0" (str.++ Start_3 Start_7) (str.at Start_7 StartInt) (str.substr Start_5 StartInt_2 StartInt) (ite StartBool_3 Start_2 Start_2)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.to_int Start_2)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_2 StartBool_1) (str.<= Start_3 Start_3) (str.contains Start_2 Start) (= Start_4 Start) (<= StartInt_2 StartInt)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.indexof Start_3 Start_7 StartInt)))
   (Start_7 String ("1" "b" "0" y (str.replace Start_7 Start_4 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y "a") x "1")))

(check-synth)
