(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_10 String) (StartBool_3 Bool) (StartInt_8 Int) (StartInt_7 Int) (StartBool_2 Bool) (Start_13 String) (Start_12 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_4 String) (StartInt_3 Int) (Start_5 String) (Start_1 String) (Start_8 String) (Start_2 String) (StartInt_4 Int) (StartInt_6 Int) (Start_3 String) (Start_7 String) (Start_6 String) (StartInt_5 Int) (Start_9 String) (Start_11 String) (StartInt_2 Int))
  ((Start String ("b" y (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_2 Start_3 Start_4) (str.from_int StartInt)))
   (StartInt Int (0 (str.to_int Start_14)))
   (StartBool Bool (true false (and StartBool_3 StartBool_3) (str.prefixof Start_12 Start_6) (str.suffixof Start_14 Start_2) (str.contains Start_5 Start_4)))
   (Start_14 String ("0" (str.at Start_12 StartInt_3) (str.replace Start_12 Start_14 Start)))
   (Start_10 String ("a" (str.replace Start_12 Start_13 Start_6) (str.from_int StartInt_8) (ite StartBool_3 Start_7 Start_11)))
   (StartBool_3 Bool (false (not StartBool_3) (str.< Start_1 Start_7) (str.prefixof Start_12 Start_11) (str.contains Start_11 Start_6)))
   (StartInt_8 Int (1 0))
   (StartInt_7 Int (0 1 (str.len Start_5) (str.to_int Start_2)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool StartBool_3) (str.suffixof Start_13 Start_10) (str.contains Start_1 Start_2) (= Start_6 Start_4)))
   (Start_13 String ("0" "a" (str.++ Start_3 Start_9) (str.at Start_11 StartInt_7) (str.replace Start_9 Start_8 Start_6) (str.from_int StartInt_7) (ite StartBool_1 Start_8 Start_10)))
   (Start_12 String ("a" (str.from_int StartInt_4) (ite StartBool_2 Start_3 Start_4)))
   (StartBool_1 Bool (true (not StartBool_1) (str.prefixof Start_8 Start_7) (str.suffixof Start_12 Start_6)))
   (StartInt_1 Int (0 1 (str.len Start_2)))
   (Start_4 String ("b" "a" "1" "" (str.++ Start_3 Start_1) (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_2) (ite StartBool Start_2 Start_2)))
   (StartInt_3 Int (0 (str.to_int Start_2)))
   (Start_5 String ("b" "a" "" (str.++ Start_3 Start_6) (str.substr Start StartInt_2 StartInt_3) (str.from_int StartInt_4)))
   (Start_1 String ("1" (str.++ Start_3 Start_10) (str.at Start_10 StartInt_6) (str.substr Start_5 StartInt_1 StartInt_5) (ite StartBool_1 Start_11 Start)))
   (Start_8 String (y (str.at Start_9 StartInt_4) (str.from_int StartInt_5)))
   (Start_2 String (x "a" (str.at Start_8 StartInt_3) (ite StartBool Start_9 Start_1)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_6 StartInt_3) (str.to_int Start_7)))
   (StartInt_6 Int (0 (str.len Start) (str.indexof Start_9 Start_8 StartInt_4) (str.to_int Start)))
   (Start_3 String ("a" "0" (str.at Start_5 StartInt) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_3)))
   (Start_7 String ("a" (str.++ Start_1 Start_1) (str.replace Start_2 Start_8 Start_7) (str.from_int StartInt) (ite StartBool Start_3 Start)))
   (Start_6 String ("b" (str.substr Start StartInt_4 StartInt_3)))
   (StartInt_5 Int (0 (str.to_int Start_1)))
   (Start_9 String (x "b" "1" "0" (ite StartBool Start_5 Start_1)))
   (Start_11 String (x (str.replace Start_1 Start Start_2) (ite StartBool Start_8 Start_2)))
   (StartInt_2 Int (0 (str.len Start_5) (str.indexof Start_9 Start_1 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.at y 1) "b" "0")))

(check-synth)
