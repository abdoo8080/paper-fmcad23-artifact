(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_20 String) (StartInt_11 Int) (Start_15 String) (StartInt_9 Int) (StartBool_8 Bool) (StartBool_7 Bool) (Start_17 String) (StartBool_6 Bool) (Start_1 String) (Start_4 String) (StartBool_9 Bool) (Start_8 String) (StartInt_3 Int) (Start_18 String) (StartBool_5 Bool) (Start_14 String) (StartInt_4 Int) (Start_21 String) (StartInt_6 Int) (Start_3 String) (StartInt_7 Int) (Start_16 String) (StartBool_3 Bool) (Start_5 String) (Start_19 String) (Start_2 String) (StartBool_2 Bool) (Start_9 String) (Start_11 String) (StartInt_5 Int) (Start_12 String) (StartInt_2 Int) (Start_13 String) (Start_22 String) (Start_6 String) (StartBool_4 Bool) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_10 Int) (Start_7 String) (Start_10 String) (StartInt_8 Int))
  ((Start String (x y (str.++ Start Start_1) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt) (ite StartBool Start_4 Start_2)))
   (StartInt Int (1 (str.to_int Start_12)))
   (StartBool Bool (true false (not StartBool) (and StartBool_1 StartBool_2) (str.prefixof Start_2 Start_10) (str.suffixof Start_2 Start_10) (= StartInt_3 StartInt_1) (<= StartInt_6 StartInt_2)))
   (Start_20 String ("" "0" (str.substr Start_7 StartInt_5 StartInt_6) (str.replace Start_20 Start_16 Start)))
   (StartInt_11 Int (0 1 (str.indexof Start_19 Start_22 StartInt_1)))
   (Start_15 String ("b" x (str.at Start_12 StartInt_10) (str.substr Start_17 StartInt_3 StartInt_3) (str.replace Start_18 Start_19 Start_13) (ite StartBool_6 Start_9 Start_15)))
   (StartInt_9 Int (0 1 (str.indexof Start_16 Start_10 StartInt_5) (str.to_int Start_5)))
   (StartBool_8 Bool (false true (not StartBool) (str.< Start_18 Start_14) (str.<= Start_17 Start_6) (str.suffixof Start_16 Start_7) (= StartInt_5 StartInt_1)))
   (StartBool_7 Bool (true (not StartBool_8) (and StartBool_4 StartBool_5) (str.suffixof Start_10 Start_12) (= Start_13 Start_1) (= StartInt_7 StartInt_5) (<= StartInt_8 StartInt_2)))
   (Start_17 String ("0" "1" x "b" y "" (str.++ Start_15 Start_9) (str.substr Start_5 StartInt_2 StartInt_4) (str.from_int StartInt_3)))
   (StartBool_6 Bool (false true (not StartBool_4) (and StartBool StartBool) (str.< Start_15 Start_6) (str.prefixof Start_7 Start_10) (str.suffixof Start_7 Start_10) (str.contains Start_5 Start_16)))
   (Start_1 String ("0" "b" y (str.++ Start_2 Start_7) (str.at Start_6 StartInt_5) (str.substr Start_8 StartInt_6 StartInt_4) (str.replace Start_3 Start_2 Start_3) (str.from_int StartInt_6)))
   (Start_4 String ("a" "1" (str.++ Start_2 Start_5) (str.at Start_6 StartInt_2) (str.substr Start_4 StartInt StartInt_3) (str.replace Start_2 Start_5 Start) (ite StartBool Start_4 Start_7)))
   (StartBool_9 Bool (false true (not StartBool_4) (str.prefixof Start_10 Start_16) (= Start_14 Start_4) (<= StartInt_8 StartInt_9)))
   (Start_8 String (""))
   (StartInt_3 Int (1 (str.to_int Start_4)))
   (Start_18 String ("a" (str.++ Start_14 Start_19) (str.at Start_9 StartInt_9) (str.substr Start_5 StartInt_9 StartInt_5) (str.replace Start_16 Start_9 Start_13) (str.from_int StartInt_5)))
   (StartBool_5 Bool (true false (not StartBool_7) (str.< Start_15 Start_3) (str.<= Start_8 Start_16) (str.suffixof Start_14 Start_17) (str.contains Start_2 Start_2) (= Start_5 Start_8) (= StartInt_4 StartInt)))
   (Start_14 String ("0" (str.++ Start_9 Start_5) (str.replace Start_15 Start_5 Start_6) (ite StartBool_4 Start_5 Start_12)))
   (StartInt_4 Int (1 0 (str.len Start_3) (str.to_int Start_2)))
   (Start_21 String ("0" (str.++ Start_14 Start_18) (str.at Start_8 StartInt) (str.replace Start Start_20 Start_18) (str.from_int StartInt_5) (ite StartBool_5 Start_12 Start_1)))
   (StartInt_6 Int (0 1 (str.indexof Start_5 Start_4 StartInt_7) (str.to_int Start_5)))
   (Start_3 String (y "a" (str.substr Start_6 StartInt_1 StartInt_4) (str.replace Start_4 Start_4 Start_1) (str.from_int StartInt_2)))
   (StartInt_7 Int (1 0 (str.len Start_9) (str.indexof Start_3 Start_8 StartInt_5)))
   (Start_16 String ("1" (str.replace Start_8 Start_11 Start_7) (str.from_int StartInt_8)))
   (StartBool_3 Bool (false (not StartBool_7) (and StartBool_9 StartBool) (str.<= Start_4 Start_2) (str.suffixof Start_6 Start_4) (str.contains Start_13 Start_20) (= Start_8 Start_21) (= StartInt_11 StartInt_1) (<= StartInt_1 StartInt_8)))
   (Start_5 String ("a" "0" (str.++ Start_7 Start_1) (str.from_int StartInt_1) (ite StartBool Start_2 Start_1)))
   (Start_19 String ("0" "" "1" "b" (str.++ Start_6 Start_15) (str.at Start_19 StartInt_9)))
   (Start_2 String ("0" "" (str.at Start_6 StartInt_2) (ite StartBool Start_8 Start_8)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_2) (str.< Start_12 Start_13) (str.<= Start Start_12) (= Start Start) (= StartInt_5 StartInt_3)))
   (Start_9 String ("a" (str.++ Start_4 Start_9) (str.replace Start_10 Start_10 Start_3) (ite StartBool Start_1 Start_2)))
   (Start_11 String ("a" "0" "b" (str.replace Start_9 Start_11 Start_5)))
   (StartInt_5 Int (0 1 (str.len Start_8)))
   (Start_12 String ("0"))
   (StartInt_2 Int (1 (str.indexof Start_7 Start_1 StartInt_2)))
   (Start_13 String (y x (str.++ Start_13 Start_2) (str.at Start_12 StartInt_1) (str.substr Start_10 StartInt_2 StartInt_3) (str.replace Start_12 Start_13 Start_12)))
   (Start_22 String ("" (str.substr Start_16 StartInt_8 StartInt_4) (str.from_int StartInt_8) (ite StartBool_5 Start_20 Start_7)))
   (Start_6 String (x (str.++ Start_6 Start_2) (str.at Start_4 StartInt) (str.from_int StartInt_1)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_2 StartBool_6) (str.< Start_7 Start_6) (str.<= Start_14 Start_16) (str.suffixof Start_2 Start_3) (= Start_16 Start_6)))
   (StartInt_1 Int (1 0 (str.len Start) (str.to_int Start_2)))
   (StartBool_1 Bool (true (not StartBool_3) (str.prefixof Start_6 Start_9) (str.suffixof Start_14 Start_10) (str.contains Start_3 Start_6) (= Start_6 Start_3) (= StartInt_7 StartInt_6) (<= StartInt_8 StartInt_6)))
   (StartInt_10 Int (1 (str.to_int Start_18)))
   (Start_7 String (y "0" "a" (str.substr Start_3 StartInt_2 StartInt_3) (str.from_int StartInt_2)))
   (Start_10 String (y "0" (str.++ Start_1 Start_1) (str.replace Start_4 Start_1 Start_11)))
   (StartInt_8 Int (1 0 (str.len Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "b" x "1") (str.indexof (str.from_int (str.to_int y)) "" 1) 1)))

(check-synth)
