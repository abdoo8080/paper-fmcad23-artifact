(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_12 String) (Start_8 String) (Start_7 String) (StartInt_7 Int) (StartBool_3 Bool) (StartInt_5 Int) (Start_3 String) (Start_6 String) (Start_2 String) (StartInt_8 Int) (StartInt_6 Int) (StartBool_1 Bool) (StartBool_4 Bool) (StartBool_2 Bool) (StartInt_2 Int) (Start_10 String) (Start_9 String) (StartInt_1 Int) (Start_4 String) (StartInt_9 Int) (StartInt_4 Int) (Start_11 String) (Start_5 String) (StartInt_3 Int) (Start_1 String))
  ((Start String ("0" "b" y (str.++ Start_1 Start) (str.at Start_2 StartInt) (str.replace Start_2 Start Start_3)))
   (StartInt Int (0 (str.indexof Start_1 Start_4 StartInt_1)))
   (StartBool Bool (false (and StartBool_3 StartBool_4) (= Start_9 Start_5) (<= StartInt_2 StartInt_1)))
   (Start_13 String (y "0" (str.at Start_8 StartInt_5) (str.from_int StartInt_3)))
   (Start_12 String ("b" (str.++ Start_12 Start_8) (str.substr Start_10 StartInt_8 StartInt_4) (str.replace Start_3 Start_6 Start_7) (str.from_int StartInt_8)))
   (Start_8 String ("b" "a" y x (str.++ Start_7 Start_8) (str.at Start_8 StartInt_2) (str.replace Start_7 Start Start_6)))
   (Start_7 String ("a" (str.++ Start_5 Start_6) (str.at Start_6 StartInt_3) (str.replace Start_4 Start_7 Start_3) (str.from_int StartInt_7) (ite StartBool Start_8 Start_1)))
   (StartInt_7 Int (0 1 (str.to_int Start_6)))
   (StartBool_3 Bool (false true (str.prefixof Start_11 Start_5) (str.contains Start_3 Start_10) (= Start_7 Start_10) (<= StartInt_3 StartInt_9)))
   (StartInt_5 Int (1 (str.indexof Start_2 Start StartInt) (str.to_int Start_5)))
   (Start_3 String ("1"))
   (Start_6 String ("" (str.++ Start_5 Start_1) (str.at Start_3 StartInt_3) (str.substr Start_1 StartInt_7 StartInt_6) (str.replace Start_6 Start_5 Start_6) (str.from_int StartInt_7)))
   (Start_2 String ("" (str.++ Start_3 Start) (str.at Start_4 StartInt_1) (str.replace Start_4 Start_1 Start_4) (ite StartBool_1 Start_1 Start_2)))
   (StartInt_8 Int (1 0 (str.indexof Start_11 Start_6 StartInt_8) (str.to_int Start_12)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.indexof Start_6 Start_5 StartInt)))
   (StartBool_1 Bool (false (not StartBool_2) (str.<= Start_1 Start) (str.contains Start_2 Start) (<= StartInt_1 StartInt)))
   (StartBool_4 Bool (false (not StartBool) (str.< Start_11 Start_10) (str.<= Start Start_9) (str.prefixof Start_4 Start_2) (= Start_6 Start_12) (<= StartInt_8 StartInt_6)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool_2) (str.<= Start Start_3) (str.contains Start_3 Start_2) (= Start Start_3) (<= StartInt StartInt_2)))
   (StartInt_2 Int (1 0))
   (Start_10 String (y "0"))
   (Start_9 String (y (str.++ Start_7 Start_1) (str.at Start_1 StartInt_6) (str.replace Start_2 Start_4 Start_10) (str.from_int StartInt_3) (ite StartBool_4 Start_3 Start_9)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start_3 Start_2 StartInt_2) (str.to_int Start_4)))
   (Start_4 String ("b" (str.substr Start_3 StartInt_3 StartInt_1) (str.replace Start_2 Start_5 Start) (str.from_int StartInt_4)))
   (StartInt_9 Int (0 (str.to_int Start_11)))
   (StartInt_4 Int (1 (str.len Start_4) (str.indexof Start_5 Start StartInt) (str.to_int Start_3)))
   (Start_11 String ("" "b" "1" (str.++ Start_13 Start_7) (str.at Start_7 StartInt_2) (str.substr Start StartInt_7 StartInt_7)))
   (Start_5 String (x "0" "b" y "" (str.++ Start_4 Start_5) (str.replace Start_5 Start_2 Start_5) (str.from_int StartInt_2)))
   (StartInt_3 Int (0 1 (str.len Start_5) (str.to_int Start_5)))
   (Start_1 String (y "1" (str.substr Start_3 StartInt_5 StartInt_6) (str.replace Start_2 Start_4 Start_5) (ite StartBool_1 Start_1 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ (str.at (str.replace "0" x y) 1) "0") "1" "")))

(check-synth)
