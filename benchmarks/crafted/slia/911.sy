(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_1 String) (Start_3 String) (Start_20 String) (Start_19 String) (Start_6 String) (StartBool_3 Bool) (Start_8 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_2 Int) (StartBool_7 Bool) (Start_9 String) (Start_21 String) (Start_7 String) (Start_4 String) (Start_10 String) (Start_17 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_12 String) (StartInt_6 Int) (Start_11 String) (Start_13 String) (Start_5 String) (Start_14 String) (Start_15 String) (Start_16 String) (StartBool_8 Bool) (Start_2 String) (StartBool_5 Bool) (StartBool_6 Bool) (Start_18 String) (StartBool_4 Bool) (StartInt_5 Int) (StartInt_3 Int))
  ((Start String ("" (str.++ Start Start) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_2 Start)))
   (StartInt Int (0 1 (str.indexof Start_11 Start_7 StartInt_3) (str.to_int Start_19)))
   (StartBool Bool (true false (not StartBool_4) (str.< Start_16 Start_21) (str.<= Start_13 Start) (str.suffixof Start_9 Start_4) (str.contains Start_12 Start_2) (= Start_3 Start_6) (<= StartInt_7 StartInt_1)))
   (StartInt_7 Int (1 (str.len Start_7) (str.to_int Start_5)))
   (Start_1 String ("a" "1" y (str.from_int StartInt_3) (ite StartBool_8 Start_17 Start_20)))
   (Start_3 String (x (str.substr Start_14 StartInt StartInt_3) (str.replace Start_9 Start_2 Start_9) (str.from_int StartInt_2) (ite StartBool_2 Start_7 Start_11)))
   (Start_20 String ("" x (str.++ Start_5 Start_14) (str.at Start_4 StartInt) (str.replace Start_4 Start_13 Start_13) (ite StartBool_2 Start_2 Start)))
   (Start_19 String (x "1" (str.++ Start_1 Start_4) (str.at Start_8 StartInt_5) (str.replace Start_12 Start_18 Start_14) (str.from_int StartInt_3) (ite StartBool_7 Start_17 Start_8)))
   (Start_6 String ("0" "b" (str.++ Start_6 Start) (str.at Start_6 StartInt) (str.substr Start StartInt StartInt)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool_2) (str.<= Start_6 Start_6) (str.prefixof Start_10 Start_11) (str.suffixof Start_12 Start_1) (= Start Start_2) (= StartInt_4 StartInt_4)))
   (Start_8 String (x "b" (str.at Start_6 StartInt_2) (str.replace Start_5 Start_5 Start_6) (str.from_int StartInt_1) (ite StartBool_3 Start_9 Start_9)))
   (StartBool_1 Bool (false (str.< Start_18 Start_4) (str.prefixof Start_15 Start_14) (str.suffixof Start_2 Start_17) (str.contains Start_9 Start_18) (= Start_15 Start_14) (<= StartInt_3 StartInt_1)))
   (StartInt_4 Int (0 (str.len Start_7) (str.indexof Start_8 Start_3 StartInt_1)))
   (StartInt_2 Int (1 (str.len Start_14) (str.to_int Start_15)))
   (StartBool_7 Bool (false true (str.<= Start_11 Start_18) (str.prefixof Start_5 Start_4) (str.suffixof Start_8 Start_20) (<= StartInt StartInt_6)))
   (Start_9 String ("1" x "b" (str.at Start_8 StartInt_2) (str.replace Start_10 Start_4 Start_2)))
   (Start_21 String (x (str.substr Start_17 StartInt_3 StartInt_3)))
   (Start_7 String ("" "a" "1" "b" (str.at Start_5 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool_2 Start_7 Start_5)))
   (Start_4 String ("b" "0" "a" "" x "1" (str.substr Start_3 StartInt StartInt_1) (str.replace Start Start_6 Start_3) (ite StartBool_1 Start_5 Start_7)))
   (Start_10 String (y "b" x "1" "0" (str.substr Start_7 StartInt StartInt_1) (ite StartBool Start_8 Start_9)))
   (Start_17 String (x (str.++ Start_7 Start_10) (str.at Start StartInt_2) (str.replace Start_2 Start_13 Start_4) (str.from_int StartInt_5)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_4 Start_5 StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool_1 StartBool_1) (= StartInt_3 StartInt_4)))
   (Start_12 String ("" (str.++ Start_1 Start_4) (str.substr Start_2 StartInt_2 StartInt_2) (ite StartBool_3 Start_9 Start_6)))
   (StartInt_6 Int (0 1 (str.len Start_18) (str.indexof Start_15 Start_7 StartInt_4)))
   (Start_11 String ("1" (str.at Start_12 StartInt_1) (ite StartBool_1 Start_4 Start_13)))
   (Start_13 String ("" "0" y x (str.at Start_5 StartInt_5) (str.substr Start_14 StartInt_1 StartInt_2) (str.from_int StartInt) (ite StartBool_2 Start_3 Start_2)))
   (Start_5 String (x (str.++ Start_4 Start_3) (str.at Start StartInt) (str.replace Start_4 Start_6 Start_2) (str.from_int StartInt) (ite StartBool Start Start)))
   (Start_14 String (x (str.++ Start_3 Start_5) (str.at Start_15 StartInt_5) (str.substr Start_15 StartInt StartInt_4) (str.from_int StartInt_3)))
   (Start_15 String ("b" (str.at Start_7 StartInt_3) (ite StartBool_4 Start_2 Start_16)))
   (Start_16 String ("1" y (str.++ Start_11 Start_17) (str.at Start StartInt_5) (str.replace Start_5 Start_7 Start_11) (str.from_int StartInt_5) (ite StartBool_5 Start_8 Start_12)))
   (StartBool_8 Bool (false (str.suffixof Start_18 Start) (str.contains Start_5 Start_4) (= Start_3 Start_11) (<= StartInt_4 StartInt_7)))
   (Start_2 String ("1" (str.at Start_1 StartInt) (str.substr Start_3 StartInt_1 StartInt_1)))
   (StartBool_5 Bool (true (not StartBool_4) (and StartBool_4 StartBool_5) (str.< Start_9 Start_16) (str.prefixof Start_2 Start_9) (<= StartInt_5 StartInt_1)))
   (StartBool_6 Bool (true (str.< Start_3 Start_8) (str.<= Start_16 Start_16) (= Start_5 Start) (<= StartInt_5 StartInt_5)))
   (Start_18 String ("1" "a" y (str.at Start_19 StartInt) (str.substr Start_7 StartInt_6 StartInt_4) (str.replace Start_11 Start_4 Start_6) (str.from_int StartInt_4) (ite StartBool_3 Start_16 Start_19)))
   (StartBool_4 Bool (false true (and StartBool_3 StartBool_6) (str.<= Start_8 Start_15) (str.suffixof Start_17 Start_17) (str.contains Start_1 Start_4) (= Start_12 Start_8)))
   (StartInt_5 Int (0 1 (str.indexof Start_12 Start_17 StartInt) (str.to_int Start_12)))
   (StartInt_3 Int (0 (str.len Start_2) (str.indexof Start_4 Start_1 StartInt_4) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.indexof x "1" 0))))

(check-synth)
