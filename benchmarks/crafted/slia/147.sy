(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartInt_7 Int) (StartBool_3 Bool) (Start_13 String) (Start_8 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_7 String) (Start_14 String) (StartInt_1 Int) (Start_12 String) (Start_10 String) (Start_5 String) (StartInt_6 Int) (StartInt_3 Int) (StartInt_8 Int) (Start_1 String) (StartInt_5 Int) (StartBool_4 Bool) (Start_4 String) (Start_3 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_9 String) (Start_6 String) (Start_11 String))
  ((Start String ("1" "b" (str.++ Start Start_1) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 (str.len Start) (str.indexof Start_11 Start_3 StartInt) (str.to_int Start_14)))
   (StartBool Bool (false (and StartBool_1 StartBool_4) (str.< Start_4 Start_2) (str.<= Start_9 Start_10) (= Start_10 Start_11)))
   (Start_2 String ("1" (str.++ Start_13 Start_6) (str.at Start_3 StartInt)))
   (StartInt_7 Int (0 1 (str.len Start_9) (str.to_int Start)))
   (StartBool_3 Bool (false true (not StartBool_3) (str.<= Start_3 Start_5) (str.prefixof Start_8 Start) (str.contains Start_6 Start) (= Start_3 Start)))
   (Start_13 String (y (str.++ Start_9 Start_2) (str.at Start_2 StartInt_4) (str.replace Start_1 Start_7 Start_4) (ite StartBool_1 Start_9 Start_4)))
   (Start_8 String ("1" (str.substr Start_12 StartInt_3 StartInt_7) (str.from_int StartInt_7) (ite StartBool_3 Start_12 Start_13)))
   (StartInt_4 Int (0 (str.len Start_5) (str.indexof Start_5 Start_2 StartInt_2)))
   (StartBool_1 Bool (false (not StartBool_1) (str.< Start_2 Start) (str.<= Start_2 Start) (str.prefixof Start_2 Start_3) (str.suffixof Start_3 Start_2) (str.contains Start_1 Start_4) (= StartInt StartInt_1) (<= StartInt_1 StartInt_1)))
   (Start_7 String ("b" (str.at Start StartInt_3) (str.replace Start_2 Start Start_4)))
   (Start_14 String ("0" (str.at Start_2 StartInt_2) (ite StartBool_1 Start_7 Start_12)))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.indexof Start_5 Start_5 StartInt)))
   (Start_12 String ("1" "b" (str.substr Start_2 StartInt_2 StartInt_2) (str.from_int StartInt_5)))
   (Start_10 String ("b" (str.at Start_8 StartInt_3) (str.from_int StartInt_3)))
   (Start_5 String ("1" (str.++ Start_6 Start) (str.at Start StartInt)))
   (StartInt_6 Int (0 1))
   (StartInt_3 Int (0 1 (str.len Start_3)))
   (StartInt_8 Int (0 1 (str.len Start) (str.indexof Start_7 Start_7 StartInt_8)))
   (Start_1 String ("" (str.from_int StartInt_8)))
   (StartInt_5 Int (1 (str.len Start_7) (str.indexof Start_10 Start_9 StartInt_3)))
   (StartBool_4 Bool (true false (not StartBool_1) (and StartBool StartBool_1) (str.<= Start_3 Start_11) (str.suffixof Start_5 Start_1) (= StartInt_1 StartInt_3) (<= StartInt_3 StartInt_5)))
   (Start_4 String (y (str.++ Start_4 Start_2) (str.at Start_1 StartInt_1) (str.substr Start_8 StartInt_4 StartInt_2) (str.replace Start_9 Start_3 Start_2) (str.from_int StartInt_3) (ite StartBool_2 Start_3 Start_3)))
   (Start_3 String ("a" (str.++ Start_11 Start_5) (str.replace Start Start_3 Start_6) (ite StartBool_1 Start_12 Start_9)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start_4 Start_7 StartInt_2) (str.to_int Start_4)))
   (StartBool_2 Bool (true false (str.<= Start_10 Start_5) (= Start_8 Start_11) (= StartInt_3 StartInt_5) (<= StartInt_1 StartInt_6)))
   (Start_9 String ("b" (str.++ Start_6 Start_6) (str.substr Start_3 StartInt_5 StartInt) (str.from_int StartInt_6) (ite StartBool_2 Start Start_8)))
   (Start_6 String ("" (str.at Start_3 StartInt_2) (str.substr Start_2 StartInt StartInt_1)))
   (Start_11 String ("0" (str.at Start_1 StartInt) (str.substr Start_3 StartInt_3 StartInt_3) (str.from_int StartInt_2) (ite StartBool_2 Start_10 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" x "b")))

(check-synth)
