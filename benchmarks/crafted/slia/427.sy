(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_7 String) (Start_11 String) (StartInt_10 Int) (StartInt_4 Int) (Start_12 String) (Start_8 String) (StartInt_3 Int) (Start_10 String) (StartInt_6 Int) (StartBool_2 Bool) (Start_6 String) (Start_2 String) (Start_16 String) (StartInt_2 Int) (Start_20 String) (StartBool_1 Bool) (Start_5 String) (Start_1 String) (StartBool_4 Bool) (Start_14 String) (StartBool_3 Bool) (StartInt_5 Int) (StartInt_11 Int) (Start_13 String) (Start_9 String) (Start_19 String) (StartInt_8 Int) (Start_18 String) (Start_4 String) (Start_15 String) (Start_3 String) (StartInt_9 Int) (StartInt_7 Int) (StartInt_1 Int) (Start_17 String) (Start_21 String))
  ((Start String ("0" y))
   (StartInt Int (1 (str.indexof Start Start_1 StartInt)))
   (StartBool Bool (true (not StartBool_5) (and StartBool_2 StartBool_1) (str.suffixof Start_4 Start_21) (str.contains Start_13 Start_8) (= Start_3 Start_15) (<= StartInt_3 StartInt_8)))
   (StartBool_5 Bool (false (and StartBool_1 StartBool_4) (str.<= Start Start_5) (str.prefixof Start_4 Start_19) (str.suffixof Start_11 Start_8) (str.contains Start_17 Start_4) (= Start_9 Start_7) (<= StartInt_3 StartInt_4)))
   (Start_7 String (x (str.at Start_19 StartInt_7) (str.replace Start_2 Start_18 Start) (str.from_int StartInt_11)))
   (Start_11 String ("a" (str.substr Start_9 StartInt_3 StartInt_10) (str.replace Start_11 Start_1 Start_16)))
   (StartInt_10 Int (1 (str.len Start_20) (str.indexof Start_4 Start_17 StartInt_11) (str.to_int Start_21)))
   (StartInt_4 Int (1 (str.len Start_2) (str.indexof Start_7 Start_2 StartInt_2)))
   (Start_12 String (y "" "a" "b" "1" (str.substr Start_10 StartInt_2 StartInt_2) (str.replace Start_9 Start_4 Start_11) (str.from_int StartInt_10)))
   (Start_8 String ("0" "b" "1" "" x (str.++ Start_1 Start_6) (str.replace Start_3 Start_5 Start) (str.from_int StartInt_5)))
   (StartInt_3 Int (1 0 (str.indexof Start_4 Start_7 StartInt_4) (str.to_int Start_8)))
   (Start_10 String (x "a" "b" "0" (str.++ Start_9 Start_16) (str.substr Start_10 StartInt_5 StartInt_6) (str.replace Start_14 Start_21 Start_1) (str.from_int StartInt_1)))
   (StartInt_6 Int (0 1 (str.len Start_5) (str.indexof Start_1 Start_9 StartInt_4) (str.to_int Start_1)))
   (StartBool_2 Bool (true (not StartBool_3) (str.< Start_3 Start_1) (str.<= Start_5 Start_6) (str.prefixof Start_2 Start_5) (str.suffixof Start_3 Start) (str.contains Start_4 Start_4) (= Start_6 Start_4)))
   (Start_6 String ("0" "b" "1" x "a" y "" (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_3 Start_2 Start) (str.from_int StartInt)))
   (Start_2 String ("1" y (str.++ Start_6 Start_2) (str.at Start_4 StartInt_3) (str.substr Start_6 StartInt_1 StartInt) (str.replace Start_6 Start_1 Start) (ite StartBool_1 Start_1 Start_2)))
   (Start_16 String ("a" (str.++ Start_16 Start_14) (str.replace Start_4 Start_5 Start_17) (ite StartBool_4 Start_8 Start)))
   (StartInt_2 Int (1 0 (str.indexof Start_14 Start_18 StartInt_5) (str.to_int Start_9)))
   (Start_20 String ("1" "" (str.++ Start_14 Start) (str.substr Start_17 StartInt_2 StartInt_9) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_2 StartBool) (str.contains Start_2 Start_1) (<= StartInt StartInt)))
   (Start_5 String ("0" (str.++ Start_6 Start_1) (str.from_int StartInt_1)))
   (Start_1 String ("1" (str.++ Start_1 Start_1) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt) (ite StartBool Start_3 Start_2)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.<= Start_13 Start_7) (str.prefixof Start_11 Start_13) (str.suffixof Start_9 Start_7) (str.contains Start_8 Start_7) (= StartInt_1 StartInt_6)))
   (Start_14 String (y (str.at Start_1 StartInt_5) (str.substr Start_3 StartInt_7 StartInt_9) (str.replace Start_15 Start_16 Start_10) (ite StartBool Start_11 Start)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_2) (str.<= Start_4 Start_6) (str.prefixof Start_5 Start_4) (str.contains Start_1 Start) (= Start_2 Start_1) (= StartInt_1 StartInt_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_8 Start_3 StartInt_1) (str.to_int Start_9)))
   (StartInt_11 Int (0 (str.len Start_7) (str.indexof Start_2 Start_12 StartInt_8) (str.to_int Start_9)))
   (Start_13 String (y "a" "1" "" "b" x "0" (str.++ Start_1 Start_8) (str.at Start_5 StartInt_5) (str.substr Start_6 StartInt_7 StartInt_4) (str.from_int StartInt_8)))
   (Start_9 String ("0" (str.++ Start_5 Start_9) (str.at Start_10 StartInt_1) (str.replace Start_11 Start_12 Start_5) (str.from_int StartInt_1) (ite StartBool_4 Start_12 Start)))
   (Start_19 String (y x "0" (str.++ Start_7 Start) (str.at Start_15 StartInt_6) (str.substr Start_9 StartInt_5 StartInt_8) (str.from_int StartInt) (ite StartBool_2 Start_20 Start_16)))
   (StartInt_8 Int (0 (str.indexof Start_9 Start_14 StartInt_1)))
   (Start_18 String (y x (str.++ Start_5 Start_17) (str.from_int StartInt_7)))
   (Start_4 String ("" (str.++ Start_5 Start_5) (str.at Start_1 StartInt_2) (str.replace Start_1 Start_3 Start_5) (ite StartBool_1 Start_1 Start)))
   (Start_15 String ("" "1" (str.++ Start_9 Start_8) (ite StartBool_3 Start_6 Start_5)))
   (Start_3 String ("1" "" (str.++ Start_2 Start_4) (str.at Start_4 StartInt_2) (str.replace Start_2 Start_4 Start_3)))
   (StartInt_9 Int (0 (str.len Start_7)))
   (StartInt_7 Int (0 (str.len Start_2) (str.indexof Start_21 Start_17 StartInt_2)))
   (StartInt_1 Int (0))
   (Start_17 String ("" "b" (str.replace Start_8 Start_6 Start_18) (ite StartBool_3 Start_18 Start_19)))
   (Start_21 String ("1" (str.substr Start_13 StartInt_9 StartInt_4) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace y "b" x)))))

(check-synth)
