(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartBool_5 Bool) (Start_7 String) (Start_9 String) (Start_6 String) (StartInt_6 Int) (Start_10 String) (Start_16 String) (StartBool_3 Bool) (StartInt_4 Int) (StartInt_5 Int) (Start_5 String) (StartBool_1 Bool) (Start_4 String) (StartInt_7 Int) (Start_13 String) (Start_17 String) (Start_2 String) (Start_1 String) (Start_15 String) (Start_8 String) (Start_12 String) (StartBool_2 Bool) (Start_14 String) (Start_11 String) (Start_3 String) (StartInt_3 Int) (StartInt_2 Int) (StartInt_1 Int))
  ((Start String ("0" (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start Start) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (1 0 (str.len Start_3) (str.indexof Start_17 Start_14 StartInt_1)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_4 StartBool_5) (str.< Start_8 Start_13) (str.suffixof Start_17 Start_1) (str.contains Start_15 Start_14) (= StartInt_1 StartInt_6)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool_5) (str.< Start Start_13) (str.<= Start_1 Start_8) (str.prefixof Start Start_2) (= StartInt_4 StartInt_1)))
   (StartBool_5 Bool (true (and StartBool_4 StartBool_5) (str.< Start_11 Start_13) (str.<= Start_6 Start_17) (str.prefixof Start_15 Start_15) (str.contains Start_16 Start_8) (= Start_15 Start_5) (= StartInt StartInt_7)))
   (Start_7 String ("b" (str.at Start StartInt_6) (str.substr Start_8 StartInt_1 StartInt) (str.replace Start_7 Start_9 Start_5) (str.from_int StartInt_6) (ite StartBool_2 Start_3 Start_8)))
   (Start_9 String ("a" "1" (str.at Start_2 StartInt_6) (ite StartBool_2 Start_10 Start_7)))
   (Start_6 String ("1" (str.substr Start_3 StartInt_5 StartInt) (str.replace Start_6 Start_2 Start_7) (str.from_int StartInt_5)))
   (StartInt_6 Int (1 0 (str.indexof Start_1 Start_7 StartInt_4)))
   (Start_10 String ("1" x (str.++ Start_1 Start_7) (str.replace Start_3 Start_7 Start_11)))
   (Start_16 String ("a" "" "0" (str.at Start_8 StartInt_4) (str.substr Start_11 StartInt StartInt) (str.from_int StartInt)))
   (StartBool_3 Bool (false (str.<= Start_1 Start_5) (str.suffixof Start_2 Start_9) (str.contains Start Start_8) (= StartInt_3 StartInt_2) (<= StartInt_3 StartInt_5)))
   (StartInt_4 Int (1 0))
   (StartInt_5 Int (0 (str.indexof Start_3 Start_2 StartInt_4)))
   (Start_5 String ("1" x "a" "b" (str.substr Start_1 StartInt_4 StartInt_3) (str.replace Start_5 Start_3 Start_2) (str.from_int StartInt_1) (ite StartBool_2 Start_2 Start_6)))
   (StartBool_1 Bool (true (not StartBool) (str.<= Start Start_1) (str.prefixof Start_3 Start_1) (str.suffixof Start_2 Start) (str.contains Start_4 Start_3) (= StartInt_2 StartInt_4) (<= StartInt_5 StartInt_5)))
   (Start_4 String ("a" x y "1" "" (str.at Start_5 StartInt_2) (ite StartBool Start_4 Start_2)))
   (StartInt_7 Int (1 (str.len Start_11) (str.indexof Start_8 Start_12 StartInt_4)))
   (Start_13 String ("1" x (str.++ Start_11 Start_3) (str.at Start_12 StartInt_1) (ite StartBool_1 Start_10 Start_2)))
   (Start_17 String (y (str.++ Start_17 Start_15) (str.at Start_8 StartInt_6) (str.replace Start Start_8 Start)))
   (Start_2 String (y (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_3 StartInt) (ite StartBool_1 Start_2 Start)))
   (Start_1 String (x (str.at Start_1 StartInt) (str.replace Start Start_2 Start_1) (ite StartBool Start_2 Start)))
   (Start_15 String (x (str.++ Start_5 Start_8) (str.at Start_7 StartInt_7) (str.from_int StartInt_7)))
   (Start_8 String ("0" "" (str.++ Start_4 Start_2) (ite StartBool_3 Start_12 Start_4)))
   (Start_12 String ("b" y (str.++ Start_11 Start_13) (str.from_int StartInt) (ite StartBool Start_4 Start_6)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.prefixof Start_12 Start_3) (str.suffixof Start_14 Start_9) (= Start_5 Start_15) (= StartInt StartInt_6) (<= StartInt_3 StartInt_5)))
   (Start_14 String (y (str.substr Start_6 StartInt_3 StartInt_5) (str.replace Start_7 Start_1 Start_5) (ite StartBool Start_4 Start)))
   (Start_11 String ("1" (str.at Start_10 StartInt_6) (ite StartBool Start_8 Start_4)))
   (Start_3 String ("" (str.++ Start_3 Start_4) (str.replace Start_13 Start_13 Start_16)))
   (StartInt_3 Int (0 1 (str.to_int Start_12)))
   (StartInt_2 Int (1 0 (str.to_int Start_6)))
   (StartInt_1 Int (1 0 (str.len Start_17)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.substr y 0 1) y)))

(check-synth)
