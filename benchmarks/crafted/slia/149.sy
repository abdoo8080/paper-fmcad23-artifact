(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_1 String) (StartInt_1 Int) (Start_3 String) (Start_5 String) (Start_4 String) (Start_9 String) (Start_7 String) (Start_6 String) (StartInt_2 Int) (StartBool_2 Bool) (StartBool_3 Bool) (StartInt_4 Int) (Start_8 String) (Start_2 String) (StartBool_1 Bool) (StartInt_3 Int))
  ((Start String ("a" (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start Start_1 Start) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 1 (str.len Start_10) (str.indexof Start_7 Start_3 StartInt_1) (str.to_int Start_1)))
   (StartBool Bool (true (not StartBool_3) (str.< Start_9 Start_10) (str.<= Start_3 Start_8) (str.prefixof Start_5 Start_9) (str.suffixof Start Start) (= StartInt_2 StartInt_3)))
   (Start_10 String ("1" "0" (str.at Start_7 StartInt_4) (str.substr Start_7 StartInt_2 StartInt) (str.replace Start_4 Start_1 Start_4)))
   (Start_1 String ("0" "b" "a" (str.at Start_6 StartInt) (str.replace Start_9 Start_2 Start_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_9 Start_7 StartInt_4) (str.to_int Start_2)))
   (Start_3 String (y (str.++ Start_7 Start_5)))
   (Start_5 String ("a" (str.++ Start_2 Start_3) (str.at Start StartInt_2) (str.substr Start_5 StartInt_3 StartInt_2) (str.replace Start_6 Start_3 Start_1) (str.from_int StartInt_3) (ite StartBool_3 Start_5 Start_1)))
   (Start_4 String ("a" "0" "b" (str.++ Start_1 Start_5) (str.substr Start StartInt StartInt_2) (str.replace Start_5 Start_6 Start_4) (ite StartBool_2 Start_2 Start_4)))
   (Start_9 String ("b" (str.++ Start_3 Start_5) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_3 Start_9 Start_1)))
   (Start_7 String (x "0" (ite StartBool Start_1 Start_1)))
   (Start_6 String (x (str.replace Start_3 Start_6 Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_7 Start_1 StartInt)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool_2) (str.contains Start_3 Start_7) (= Start_3 Start_4) (<= StartInt_3 StartInt_2)))
   (StartBool_3 Bool (true false (and StartBool StartBool_1) (str.<= Start Start_3) (str.prefixof Start_7 Start_7) (str.suffixof Start_8 Start) (= Start_1 Start_3) (= StartInt_4 StartInt_3)))
   (StartInt_4 Int (1 (str.indexof Start_4 Start_2 StartInt) (str.to_int Start_4)))
   (Start_8 String ("b" (str.at Start StartInt_3) (str.from_int StartInt_1)))
   (Start_2 String ("a" "" x y (str.at Start_3 StartInt_2) (str.replace Start_3 Start_1 Start) (str.from_int StartInt_3) (ite StartBool_1 Start Start_4)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (<= StartInt_4 StartInt_1)))
   (StartInt_3 Int (1 (str.indexof Start_6 Start_9 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" y "")))

(check-synth)
