(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (StartInt_3 Int) (Start_6 String) (Start_10 String) (Start_11 String) (StartInt_2 Int) (StartInt_5 Int) (Start_1 String) (Start_9 String) (Start_8 String) (StartBool_1 Bool) (StartInt_6 Int) (Start_3 String) (Start_2 String) (Start_12 String) (StartInt_1 Int) (Start_4 String) (Start_7 String) (StartInt_4 Int))
  ((Start String ("b" "1" (str.replace Start_1 Start_1 Start_1)))
   (StartInt Int (0))
   (StartBool Bool (true (str.< Start_4 Start_1) (str.suffixof Start_2 Start) (str.contains Start Start_4) (= Start_2 Start_3)))
   (Start_5 String ("a" "" (str.++ Start_11 Start_12) (str.replace Start_5 Start_7 Start_2) (str.from_int StartInt_1) (ite StartBool Start_4 Start_2)))
   (StartInt_3 Int (0 (str.indexof Start_6 Start_6 StartInt_4) (str.to_int Start_9)))
   (Start_6 String (y x "1" "a" (str.substr Start_10 StartInt_5 StartInt_6)))
   (Start_10 String (x "b" "a" "1" (str.from_int StartInt_4)))
   (Start_11 String ("b" x "a" (str.at Start_6 StartInt)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.indexof Start_3 Start_1 StartInt_2)))
   (StartInt_5 Int (1 (str.len Start_3) (str.indexof Start_9 Start_9 StartInt_6)))
   (Start_1 String ("b" (str.++ Start_2 Start_1) (str.at Start_1 StartInt) (str.replace Start Start_1 Start_3)))
   (Start_9 String ("b" (str.++ Start_3 Start) (str.at Start_8 StartInt) (str.substr Start_10 StartInt_1 StartInt_4) (str.replace Start_8 Start_4 Start_1) (str.from_int StartInt_1)))
   (Start_8 String ("b" "1" (str.substr Start_2 StartInt_5 StartInt_5) (str.from_int StartInt_6)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_4 Start_7) (str.prefixof Start Start_1) (<= StartInt_4 StartInt_1)))
   (StartInt_6 Int (1 0 (str.len Start_1) (str.to_int Start_9)))
   (Start_3 String (y (str.++ Start_2 Start_2) (str.substr Start_1 StartInt StartInt_1) (ite StartBool Start_2 Start_3)))
   (Start_2 String ("a" (str.++ Start_3 Start_2) (str.substr Start StartInt_2 StartInt) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (Start_12 String (x "b" "a" "0" (str.++ Start Start_6) (str.at Start_7 StartInt_4) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 0 (str.to_int Start_1)))
   (Start_4 String ("b" "1" "a" (str.++ Start Start_4) (str.substr Start_5 StartInt_3 StartInt) (str.replace Start_4 Start_6 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_5)))
   (Start_7 String (y "b" x "a" "0" "1" (str.from_int StartInt_5) (ite StartBool Start_9 Start_1)))
   (StartInt_4 Int (1 (str.len Start_8) (str.indexof Start Start_6 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ x (ite (str.contains "1" x) "0" "a"))))

(check-synth)
