(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_21 String) (StartBool_8 Bool) (StartBool_7 Bool) (Start_18 String) (Start_20 String) (StartBool_5 Bool) (Start_14 String) (Start_16 String) (Start_15 String) (Start_7 String) (Start_17 String) (StartInt_11 Int) (StartBool_1 Bool) (StartInt_6 Int) (Start_12 String) (StartBool_2 Bool) (StartBool_3 Bool) (Start_9 String) (Start_19 String) (StartInt_3 Int) (Start_5 String) (Start_13 String) (StartInt_5 Int) (StartInt_4 Int) (Start_2 String) (Start_8 String) (Start_6 String) (Start_3 String) (Start_4 String) (StartInt_1 Int) (Start_1 String) (StartBool_6 Bool) (Start_11 String) (StartBool_4 Bool) (StartInt_2 Int) (StartInt_7 Int) (StartInt_9 Int) (StartInt_8 Int) (StartInt_10 Int) (Start_10 String))
  ((Start String ("1" (str.at Start_1 StartInt_1) (ite StartBool Start_1 Start_2)))
   (StartInt Int (1 0))
   (StartBool Bool (false true (not StartBool_4) (str.< Start_5 Start_7) (str.<= Start Start_2) (str.prefixof Start_5 Start_2) (str.suffixof Start_9 Start_9) (= Start_3 Start_5)))
   (Start_21 String ("1" (str.at Start_15 StartInt_10) (str.substr Start_12 StartInt StartInt_11) (ite StartBool_3 Start_21 Start_13)))
   (StartBool_8 Bool (false true (not StartBool_2) (and StartBool_8 StartBool_3) (str.<= Start_4 Start_20) (str.suffixof Start_16 Start_10) (= Start_21 Start_11) (<= StartInt_5 StartInt_3)))
   (StartBool_7 Bool (false true (str.prefixof Start_7 Start_5) (<= StartInt_2 StartInt_9)))
   (Start_18 String ("b" "1" (str.at Start_4 StartInt_5) (str.substr Start_10 StartInt_8 StartInt_5) (str.replace Start_7 Start_5 Start_13)))
   (Start_20 String ("1" "b" (str.++ Start_8 Start) (str.at Start_5 StartInt_7) (str.replace Start Start_8 Start_6) (ite StartBool_7 Start_4 Start_4)))
   (StartBool_5 Bool (true (not StartBool_6) (str.< Start_14 Start_12) (str.suffixof Start_1 Start_19) (str.contains Start_1 Start_9) (= Start_11 Start_6)))
   (Start_14 String ("" (str.++ Start_7 Start_10) (str.at Start_1 StartInt_9) (str.replace Start_14 Start_11 Start_18) (ite StartBool_5 Start_5 Start_1)))
   (Start_16 String ("b" "" (str.++ Start_4 Start) (str.at Start_4 StartInt_7) (str.replace Start_17 Start_1 Start_5) (ite StartBool Start_4 Start_12)))
   (Start_15 String ("1" "b" y "0" "" (str.at Start_13 StartInt_3) (str.substr Start_14 StartInt_11 StartInt_2)))
   (Start_7 String ("1" (str.++ Start_8 Start_1) (str.substr Start_3 StartInt_2 StartInt_3) (str.from_int StartInt_4)))
   (Start_17 String ("" (str.substr Start_7 StartInt StartInt_5)))
   (StartInt_11 Int (1 0 (str.len Start_13) (str.indexof Start_16 Start_14 StartInt_9)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_2 StartBool_2) (str.< Start_5 Start_2) (str.<= Start Start_6) (str.suffixof Start_1 Start_1) (= StartInt_4 StartInt_3) (<= StartInt_4 StartInt_1)))
   (StartInt_6 Int (1 0 (str.len Start_2) (str.to_int Start_6)))
   (Start_12 String (x (str.++ Start_12 Start_13) (str.replace Start_2 Start_7 Start_10) (str.from_int StartInt_2) (ite StartBool_1 Start_9 Start_13)))
   (StartBool_2 Bool (false (not StartBool) (str.<= Start_5 Start_4) (str.prefixof Start_2 Start_1) (= StartInt_3 StartInt_5) (<= StartInt_5 StartInt)))
   (StartBool_3 Bool (true false (not StartBool_1) (str.< Start_1 Start_4) (str.contains Start_4 Start_2) (= Start_2 Start_2) (= StartInt_5 StartInt_6)))
   (Start_9 String (x "b" (str.substr Start_10 StartInt_4 StartInt_8) (ite StartBool_2 Start_4 Start_9)))
   (Start_19 String (x "b" (str.++ Start_10 Start_4) (str.at Start_6 StartInt_9) (str.substr Start_20 StartInt StartInt_5)))
   (StartInt_3 Int (0 (str.len Start) (str.indexof Start Start_2 StartInt)))
   (Start_5 String (y x (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (Start_13 String ("a" x y (str.at Start_3 StartInt_10) (str.substr Start StartInt_6 StartInt_5) (str.replace Start_7 Start_12 Start_3) (str.from_int StartInt_10)))
   (StartInt_5 Int (1 (str.len Start_7) (str.indexof Start_5 Start_5 StartInt_6)))
   (StartInt_4 Int (1 (str.to_int Start_5)))
   (Start_2 String (x (str.++ Start Start_3) (str.at Start_4 StartInt_2) (str.substr Start_3 StartInt_3 StartInt_2) (str.from_int StartInt_4)))
   (Start_8 String ("1" (str.at Start_1 StartInt_5) (str.replace Start Start_6 Start_5) (ite StartBool_3 Start_5 Start)))
   (Start_6 String ("1" "b" x (str.++ Start_3 Start_4) (str.substr Start_4 StartInt_5 StartInt_3) (ite StartBool_1 Start_5 Start_4)))
   (Start_3 String ("1" (str.++ Start_6 Start_3) (str.substr Start_8 StartInt_7 StartInt_3) (str.from_int StartInt_7)))
   (Start_4 String ("0" y (str.from_int StartInt_7) (ite StartBool_2 Start_3 Start_8)))
   (StartInt_1 Int (0))
   (Start_1 String ("0" (str.++ Start_6 Start_6) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_7) (ite StartBool_3 Start_5 Start_4)))
   (StartBool_6 Bool (true (not StartBool_5) (and StartBool_6 StartBool_4) (str.contains Start_9 Start_11) (= StartInt_6 StartInt) (<= StartInt_5 StartInt_3)))
   (Start_11 String ("1" "a" (str.++ Start_12 Start_2) (str.at Start_13 StartInt_2) (str.substr Start_9 StartInt_9 StartInt_1)))
   (StartBool_4 Bool (false true (not StartBool_8) (str.<= Start_14 Start_6) (= Start_11 Start_2) (= StartInt StartInt_11) (<= StartInt StartInt_11)))
   (StartInt_2 Int (1 0 (str.indexof Start_2 Start_6 StartInt_4)))
   (StartInt_7 Int (1 (str.len Start_4)))
   (StartInt_9 Int (0 1 (str.len Start_8) (str.indexof Start_7 Start_10 StartInt_4)))
   (StartInt_8 Int (1 0 (str.len Start_11) (str.to_int Start_11)))
   (StartInt_10 Int (1 0 (str.len Start_12) (str.indexof Start_8 Start_7 StartInt_2)))
   (Start_10 String (y x (str.at Start_14 StartInt_4) (str.substr Start_8 StartInt_11 StartInt_8) (str.replace Start_11 Start_11 Start_15)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace (str.replace "b" y "0") "" (str.++ "1" y))))))

(check-synth)
