(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_14 String) (Start_18 String) (Start_11 String) (Start_8 String) (StartInt_4 Int) (StartInt_2 Int) (Start_2 String) (StartBool_1 Bool) (Start_4 String) (StartBool_4 Bool) (Start_6 String) (StartInt_3 Int) (Start_5 String) (StartInt_6 Int) (Start_7 String) (StartInt_5 Int) (StartBool_3 Bool) (Start_3 String) (Start_10 String) (Start_16 String) (StartBool_5 Bool) (Start_1 String) (StartInt_7 Int) (Start_9 String) (StartBool_2 Bool) (Start_12 String) (Start_13 String) (StartInt_1 Int) (Start_15 String) (Start_17 String))
  ((Start String ("" (str.at Start_1 StartInt_1) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.indexof Start Start_8 StartInt_6) (str.to_int Start_17)))
   (StartBool Bool (false (not StartBool_2) (str.< Start Start_2) (str.prefixof Start_5 Start_5) (str.suffixof Start_17 Start_2) (<= StartInt_7 StartInt_7)))
   (StartInt_8 Int (1 (str.indexof Start_15 Start_9 StartInt_1)))
   (Start_14 String ("1" (str.at Start_18 StartInt_5) (str.substr Start_17 StartInt_1 StartInt_8) (str.replace Start_18 Start_18 Start_8)))
   (Start_18 String (y (str.++ Start_8 Start_3) (str.at Start_4 StartInt_1) (str.from_int StartInt_2)))
   (Start_11 String (x (str.at Start_10 StartInt_1) (str.replace Start_5 Start_5 Start_5) (str.from_int StartInt) (ite StartBool_3 Start_5 Start_4)))
   (Start_8 String ("0" (str.++ Start_11 Start_2) (str.at Start_1 StartInt_3) (str.replace Start_8 Start_12 Start_8) (str.from_int StartInt_4) (ite StartBool_3 Start_10 Start_1)))
   (StartInt_4 Int (0 (str.len Start_3) (str.to_int Start_11)))
   (StartInt_2 Int (0 (str.to_int Start)))
   (Start_2 String (x (str.++ Start_2 Start_3) (str.at Start_7 StartInt_2) (str.replace Start_8 Start_1 Start_9) (ite StartBool_2 Start_1 Start_5)))
   (StartBool_1 Bool (true (not StartBool_1) (str.suffixof Start_6 Start_3)))
   (Start_4 String (y (str.++ Start_6 Start_4) (str.replace Start_6 Start_5 Start_5) (ite StartBool Start Start_7)))
   (StartBool_4 Bool (true false (and StartBool StartBool_5) (str.< Start_3 Start_6) (str.suffixof Start_3 Start) (str.contains Start_4 Start_11) (= Start_2 Start_8) (<= StartInt_5 StartInt_1)))
   (Start_6 String ("0" x "1" "b" y "" "a" (str.replace Start Start_6 Start_6) (ite StartBool Start Start_6)))
   (StartInt_3 Int (1 0 (str.len Start_6) (str.to_int Start_3)))
   (Start_5 String ("1" x "a" (str.at Start_3 StartInt) (str.substr Start_5 StartInt_2 StartInt_2) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt_3)))
   (StartInt_6 Int (0))
   (Start_7 String ("1" (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_10 Start_11 StartInt_4)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_2 StartBool_3) (str.prefixof Start_3 Start_8) (str.contains Start_7 Start_3) (= StartInt_4 StartInt_3) (<= StartInt_3 StartInt)))
   (Start_3 String ("" (str.++ Start_4 Start_4) (str.at Start_5 StartInt_2) (str.replace Start Start Start_3) (str.from_int StartInt_2)))
   (Start_10 String ("" (str.replace Start_6 Start_1 Start)))
   (Start_16 String ("" "b" (ite StartBool_4 Start_1 Start_11)))
   (StartBool_5 Bool (true (not StartBool_3) (and StartBool_3 StartBool_5) (str.< Start_3 Start_3) (str.suffixof Start_4 Start_9) (= Start_1 Start_8) (= StartInt_3 StartInt_3)))
   (Start_1 String ("a" x (str.replace Start_14 Start_15 Start_4) (str.from_int StartInt_5) (ite StartBool_3 Start_16 Start_15)))
   (StartInt_7 Int (0 (str.len Start_14)))
   (Start_9 String (y (str.at Start_4 StartInt_1) (ite StartBool_2 Start_9 Start)))
   (StartBool_2 Bool (true (str.< Start_2 Start_5) (str.<= Start_10 Start_6) (str.prefixof Start_1 Start_6) (str.suffixof Start_9 Start_1) (str.contains Start_8 Start_3) (<= StartInt_4 StartInt)))
   (Start_12 String (x y "0" "a" "" (str.++ Start_4 Start_9) (ite StartBool_4 Start_13 Start_1)))
   (Start_13 String ("" (str.at Start_9 StartInt_6) (str.substr Start_5 StartInt_3 StartInt_4)))
   (StartInt_1 Int (1))
   (Start_15 String (y (str.at Start_17 StartInt_6) (ite StartBool_1 Start_10 Start_5)))
   (Start_17 String ("" "0" (str.++ Start_18 Start_1) (str.substr Start_12 StartInt_5 StartInt_7) (str.replace Start_4 Start_5 Start_2) (str.from_int StartInt_7) (ite StartBool_1 Start_14 Start_18)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains x y) "0" "b")))

(check-synth)
