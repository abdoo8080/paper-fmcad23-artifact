(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (StartInt_2 Int) (StartInt_6 Int) (Start_4 String) (StartInt_5 Int) (Start_2 String) (StartInt_1 Int) (StartInt_4 Int) (Start_6 String) (Start_1 String) (Start_5 String) (Start_3 String))
  ((Start String ("0" "a" x "b" y "1" (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_3)))
   (StartInt Int (1 0 (str.to_int Start_2)))
   (StartBool Bool (false true (not StartBool) (str.prefixof Start_6 Start_4)))
   (StartInt_3 Int (0 (str.len Start) (str.to_int Start_1)))
   (StartInt_2 Int (0 (str.indexof Start Start_2 StartInt_1)))
   (StartInt_6 Int (0 1 (str.indexof Start_3 Start_2 StartInt_6)))
   (Start_4 String ("1" x (str.++ Start_3 Start_1) (str.replace Start_2 Start Start_3) (ite StartBool Start Start_5)))
   (StartInt_5 Int (1 0 (str.len Start_6) (str.indexof Start Start_4 StartInt_1) (str.to_int Start_3)))
   (Start_2 String ("1" y (str.++ Start_3 Start_4) (str.from_int StartInt_3)))
   (StartInt_1 Int (0 1))
   (StartInt_4 Int (1 0 (str.len Start_1) (str.indexof Start_5 Start_1 StartInt) (str.to_int Start_2)))
   (Start_6 String ("1" "b" x "a" y (str.at Start_6 StartInt_5)))
   (Start_1 String ("0" (str.substr Start_5 StartInt_1 StartInt_4) (str.replace Start_1 Start_6 Start_1)))
   (Start_5 String ("1" y (str.++ Start_5 Start) (str.at Start_4 StartInt_1) (str.substr Start_3 StartInt_4 StartInt_1) (str.from_int StartInt_5)))
   (Start_3 String (y x (str.++ Start_1 Start_2) (str.at Start_2 StartInt_6) (str.replace Start_2 Start_6 Start_6) (str.from_int StartInt_2) (ite StartBool Start Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.replace "" y "0"))))

(check-synth)
