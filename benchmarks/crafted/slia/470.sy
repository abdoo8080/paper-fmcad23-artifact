(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartBool_7 Bool) (Start_4 String) (StartBool_1 Bool) (Start_12 String) (Start_2 String) (StartInt_5 Int) (StartInt_2 Int) (Start_7 String) (Start_6 String) (Start_11 String) (StartBool_6 Bool) (StartBool_2 Bool) (Start_5 String) (Start_10 String) (StartInt_7 Int) (StartInt_3 Int) (Start_3 String) (Start_8 String) (StartBool_3 Bool) (StartBool_5 Bool) (Start_1 String) (Start_9 String) (StartBool_8 Bool) (StartInt_1 Int) (Start_13 String) (StartBool_4 Bool) (StartInt_4 Int) (Start_14 String) (StartInt_6 Int))
  ((Start String ("b" "" "a" x y "1" "0" (str.substr Start StartInt StartInt) (str.replace Start_1 Start Start) (str.from_int StartInt) (ite StartBool Start Start_2)))
   (StartInt Int (1 (str.len Start) (str.indexof Start_7 Start_6 StartInt_4)))
   (StartBool Bool (false (not StartBool) (str.<= Start_5 Start_10) (str.prefixof Start_9 Start_6) (<= StartInt_1 StartInt)))
   (Start_15 String (x (str.++ Start Start)))
   (StartBool_7 Bool (false (not StartBool_2) (and StartBool_4 StartBool_7) (str.< Start_11 Start_7) (str.<= Start_7 Start_6) (str.suffixof Start_2 Start_1) (str.contains Start_4 Start_7) (= Start_4 Start_6)))
   (Start_4 String (x "0" (str.++ Start_3 Start_6) (str.at Start_3 StartInt_3) (str.substr Start_1 StartInt_4 StartInt) (str.replace Start_4 Start_2 Start_2) (ite StartBool_2 Start_3 Start)))
   (StartBool_1 Bool (true (str.< Start_3 Start_2) (str.suffixof Start_2 Start_6) (str.contains Start_5 Start_4) (= Start_2 Start_3)))
   (Start_12 String ("1" "a" "0" y "" (str.++ Start Start_12) (str.at Start_10 StartInt_2) (str.substr Start_9 StartInt StartInt_5) (str.replace Start_2 Start_8 Start_7) (str.from_int StartInt_2)))
   (Start_2 String ("a" x (str.++ Start Start) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_11 Start_11 StartInt_2) (str.to_int Start_8)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.to_int Start_1)))
   (Start_7 String ("b" (str.++ Start_7 Start_3) (str.at Start StartInt_2) (str.replace Start_7 Start_1 Start)))
   (Start_6 String (x "1" "" (str.++ Start_7 Start_6) (str.at Start_2 StartInt_2) (ite StartBool_1 Start_6 Start_2)))
   (Start_11 String ("b" x "a" "1" (str.++ Start_6 Start_9) (str.at Start_4 StartInt_1) (str.substr Start StartInt StartInt) (ite StartBool_3 Start_7 Start_12)))
   (StartBool_6 Bool (false (not StartBool_7) (and StartBool_7 StartBool_1) (= Start_11 Start_14) (= StartInt StartInt_5) (<= StartInt_6 StartInt_7)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_1) (str.< Start_2 Start_5) (str.<= Start_1 Start) (str.suffixof Start_5 Start_1) (str.contains Start_6 Start_3) (<= StartInt_2 StartInt_2)))
   (Start_5 String ("" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_1 Start_1 Start_2) (ite StartBool_2 Start_3 Start_2)))
   (Start_10 String (x "b" (str.at Start_3 StartInt) (str.substr Start_11 StartInt_2 StartInt_1) (str.replace Start_2 Start Start_4) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_6)))
   (StartInt_7 Int (1 0 (str.len Start_3)))
   (StartInt_3 Int (0 1 (str.indexof Start_8 Start_8 StartInt) (str.to_int Start)))
   (Start_3 String (y "0" (str.++ Start_4 Start_1) (str.replace Start_3 Start_3 Start_2) (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start_1)))
   (Start_8 String ("a" "0" (str.from_int StartInt) (ite StartBool_2 Start Start_9)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool_4 StartBool_5) (str.<= Start_5 Start_9) (str.suffixof Start_4 Start_13) (str.contains Start_4 Start_1) (= Start Start) (= StartInt_2 StartInt)))
   (StartBool_5 Bool (false (not StartBool_5) (and StartBool_4 StartBool_4) (str.<= Start_11 Start_14) (str.suffixof Start_8 Start) (<= StartInt_5 StartInt_2)))
   (Start_1 String (x (str.substr Start_2 StartInt StartInt_1) (str.replace Start Start_3 Start_1)))
   (Start_9 String (x (str.++ Start Start_9) (str.substr Start_7 StartInt_3 StartInt_1) (str.replace Start_6 Start_1 Start_8) (ite StartBool Start_4 Start_8)))
   (StartBool_8 Bool (false (not StartBool) (str.prefixof Start_5 Start_6) (= Start_7 Start_9) (= StartInt_5 StartInt_2)))
   (StartInt_1 Int (0 (str.len Start)))
   (Start_13 String (y x "0" "a" (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_2)))
   (StartBool_4 Bool (true (not StartBool_6) (and StartBool StartBool_8) (str.< Start_5 Start_3) (str.<= Start_3 Start_4) (str.suffixof Start_11 Start_15) (= Start_12 Start_8) (= StartInt_6 StartInt)))
   (StartInt_4 Int (1 (str.indexof Start Start StartInt)))
   (Start_14 String ("b" "0" y (str.substr Start_1 StartInt_3 StartInt) (str.replace Start_1 Start_11 Start_14) (ite StartBool_6 Start_2 Start_7)))
   (StartInt_6 Int (0 (str.len Start_13) (str.indexof Start_14 Start_11 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at x (str.len y))))))

(check-synth)
