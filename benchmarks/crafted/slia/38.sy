(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_14 String) (Start_13 String) (Start_1 String) (Start_4 String) (Start_10 String) (StartInt_7 Int) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_5 Int) (Start_11 String) (StartInt_3 Int) (StartInt_2 Int) (StartBool_4 Bool) (Start_2 String) (StartInt_6 Int) (Start_6 String) (Start_12 String) (Start_3 String) (StartInt_1 Int) (Start_8 String) (Start_5 String) (Start_7 String) (StartInt_4 Int) (Start_9 String))
  ((Start String (y "" "a" x "b" (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt)))
   (StartInt Int (1 (str.to_int Start_2)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_2 StartBool) (str.< Start_11 Start_11) (str.<= Start_9 Start_1) (str.prefixof Start_12 Start_1) (str.suffixof Start_13 Start_14) (str.contains Start_8 Start_14) (= Start_4 Start_8) (= StartInt_1 StartInt_4) (<= StartInt_1 StartInt_2)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.<= Start_11 Start_9) (str.prefixof Start_2 Start_3) (str.suffixof Start_7 Start_2) (= Start_4 Start_2) (<= StartInt_5 StartInt)))
   (Start_14 String ("" (str.++ Start_1 Start_11) (str.at Start_2 StartInt_7) (str.replace Start_13 Start_2 Start_10)))
   (Start_13 String ("b" (str.++ Start_2 Start_1) (str.replace Start_13 Start_5 Start_13)))
   (Start_1 String ("1" (str.++ Start_2 Start_5) (str.replace Start_2 Start_13 Start_10) (str.from_int StartInt_6)))
   (Start_4 String ("a" (str.++ Start Start_2) (str.substr Start_2 StartInt StartInt_3) (str.replace Start_8 Start_6 Start) (ite StartBool_1 Start_9 Start_3)))
   (Start_10 String ("0" (str.++ Start_12 Start_2) (str.at Start_10 StartInt_2) (str.from_int StartInt_5)))
   (StartInt_7 Int (1 0 (str.to_int Start_7)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (str.<= Start_1 Start_7) (str.prefixof Start_6 Start_2) (<= StartInt_1 StartInt_4)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool StartBool_4) (str.prefixof Start_12 Start_12) (str.suffixof Start_14 Start_12) (<= StartInt_7 StartInt)))
   (StartInt_5 Int (1 0))
   (Start_11 String ("b" "" "a" (str.++ Start_6 Start_3) (str.at Start_3 StartInt) (str.substr Start_2 StartInt_5 StartInt_5) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_12)))
   (StartInt_3 Int (1 0 (str.len Start_10) (str.indexof Start_4 Start_3 StartInt) (str.to_int Start_11)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.indexof Start_3 Start_1 StartInt_2) (str.to_int Start_2)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool_4) (str.<= Start Start_9)))
   (Start_2 String ("0" "1" (str.++ Start_1 Start_3) (str.at Start_3 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_2)))
   (StartInt_6 Int (1))
   (Start_6 String (y (str.at Start_2 StartInt) (str.substr Start_1 StartInt_3 StartInt) (str.replace Start Start_8 Start_7)))
   (Start_12 String (x (str.at Start_6 StartInt_2) (str.substr Start StartInt StartInt_5) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_7)))
   (Start_3 String ("0" "b" (str.++ Start_4 Start_2) (str.at Start_2 StartInt_3) (str.substr Start_4 StartInt StartInt_3) (str.replace Start Start Start_5) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start_1 Start StartInt_1) (str.to_int Start)))
   (Start_8 String (y (str.++ Start_9 Start_8) (str.at Start_9 StartInt) (str.substr Start_5 StartInt_2 StartInt_3) (str.from_int StartInt)))
   (Start_5 String ("a" x "b" (str.++ Start_6 Start_6) (str.at Start_4 StartInt_2) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_2 Start Start_2) (ite StartBool Start_3 Start_7)))
   (Start_7 String ("b" "1" (str.++ Start_4 Start_7) (str.from_int StartInt_4) (ite StartBool Start_2 Start_1)))
   (StartInt_4 Int (0 1))
   (Start_9 String ("" "a" (str.at Start_10 StartInt) (ite StartBool_1 Start_11 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ (str.replace "" (str.at x 0) y) x) 0)))

(check-synth)
