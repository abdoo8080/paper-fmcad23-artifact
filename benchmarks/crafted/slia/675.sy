(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_9 String) (Start_12 String) (StartInt_5 Int) (StartBool_2 Bool) (Start_10 String) (StartInt_1 Int) (Start_1 String) (StartInt_2 Int) (Start_2 String) (Start_4 String) (Start_8 String) (StartBool_3 Bool) (Start_6 String) (Start_11 String) (Start_5 String) (Start_7 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_3 String) (StartInt_3 Int))
  ((Start String ("" "b" x (str.at Start_1 StartInt_1)))
   (StartInt Int (0 1 (str.len Start_9) (str.indexof Start_2 Start_6 StartInt_6)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_2 StartBool_3) (str.< Start_11 Start_5) (str.<= Start_10 Start_2) (str.prefixof Start_4 Start) (str.suffixof Start_10 Start_2) (str.contains Start Start_1) (<= StartInt_1 StartInt_4)))
   (StartInt_6 Int (1 (str.len Start_6) (str.indexof Start_7 Start_9 StartInt_3) (str.to_int Start_10)))
   (Start_9 String (y (str.at Start_6 StartInt_1) (str.substr Start_5 StartInt_6 StartInt_2) (str.from_int StartInt_5) (ite StartBool_3 Start_8 Start_5)))
   (Start_12 String ("a" "" "b" (str.at Start_7 StartInt_4)))
   (StartInt_5 Int (0 1))
   (StartBool_2 Bool (false (str.suffixof Start_8 Start_3) (str.contains Start_11 Start_1) (<= StartInt_3 StartInt_5)))
   (Start_10 String ("" x (str.replace Start_2 Start_7 Start_2) (str.from_int StartInt_5) (ite StartBool_2 Start Start_4)))
   (StartInt_1 Int (1 0 (str.len Start)))
   (Start_1 String ("1" (str.at Start_2 StartInt) (str.substr Start_3 StartInt StartInt) (str.replace Start_3 Start Start_2)))
   (StartInt_2 Int (1 0))
   (Start_2 String ("a" "0" "1" y "b" (str.substr Start_4 StartInt_2 StartInt) (str.replace Start Start Start_5)))
   (Start_4 String ("1" "" (str.++ Start_7 Start_8) (str.substr Start StartInt_2 StartInt) (str.replace Start_9 Start_7 Start_3) (str.from_int StartInt_5) (ite StartBool_1 Start_2 Start_10)))
   (Start_8 String ("0" (str.++ Start_3 Start_7)))
   (StartBool_3 Bool (false (not StartBool_3) (str.<= Start_3 Start_7) (str.prefixof Start_5 Start_5) (str.suffixof Start_8 Start_2) (str.contains Start_1 Start_1) (= Start_12 Start_8)))
   (Start_6 String ("a" (str.at Start_6 StartInt_4) (str.substr Start_5 StartInt_4 StartInt) (str.replace Start_3 Start_4 Start_3)))
   (Start_11 String (y (str.++ Start_10 Start_12) (str.substr Start_6 StartInt_5 StartInt) (str.replace Start_2 Start_9 Start_4)))
   (Start_5 String ("0" y (str.at Start_6 StartInt_3) (str.substr Start_6 StartInt StartInt_2) (str.replace Start_3 Start_3 Start) (ite StartBool Start_2 Start_2)))
   (Start_7 String ("" (str.at Start_8 StartInt) (str.substr Start_5 StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_7 Start_8)))
   (StartInt_4 Int (1 0 (str.indexof Start_8 Start_3 StartInt_2)))
   (StartBool_1 Bool (false true (str.prefixof Start_5 Start_1) (str.suffixof Start_3 Start_7) (= StartInt StartInt_3) (<= StartInt StartInt)))
   (Start_3 String ("1" (str.replace Start_3 Start Start) (ite StartBool Start_1 Start_3)))
   (StartInt_3 Int (0 1 (str.to_int Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "0" y) (str.replace x "0" "b") "0")))

(check-synth)
