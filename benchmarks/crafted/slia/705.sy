(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_10 String) (Start_9 String) (StartInt_6 Int) (Start_7 String) (Start_3 String) (StartBool_2 Bool) (Start_1 String) (Start_4 String) (StartInt_4 Int) (Start_6 String) (Start_2 String) (Start_5 String) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_8 String) (StartInt_3 Int) (StartInt_1 Int))
  ((Start String ("" "0" "a" "1" x (str.at Start_1 StartInt_1) (str.replace Start_2 Start_3 Start_1)))
   (StartInt Int (1 (str.len Start_8) (str.to_int Start_10)))
   (StartBool Bool (true (and StartBool_1 StartBool_3) (= Start_4 Start_4) (<= StartInt_1 StartInt)))
   (StartBool_3 Bool (true false (str.< Start_4 Start_8) (str.<= Start_6 Start_7) (<= StartInt StartInt_2)))
   (Start_10 String ("1" y (str.at Start_3 StartInt) (str.replace Start_9 Start_1 Start_10) (str.from_int StartInt) (ite StartBool_1 Start_7 Start_10)))
   (Start_9 String ("1" (str.at Start_9 StartInt_1)))
   (StartInt_6 Int (0 1 (str.len Start_1)))
   (Start_7 String ("1" (str.++ Start_1 Start_7) (str.substr Start_5 StartInt_6 StartInt_2) (str.replace Start_8 Start_6 Start_5) (str.from_int StartInt_4)))
   (Start_3 String ("a" "" (str.at Start_3 StartInt_2) (str.replace Start_1 Start_4 Start_4) (ite StartBool Start_4 Start_1)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_1) (str.< Start_3 Start) (str.<= Start_2 Start_5) (str.prefixof Start_3 Start_2) (str.suffixof Start Start_5) (str.contains Start Start) (= Start_6 Start_5)))
   (Start_1 String ("" x "0" "a" (str.++ Start_6 Start_9)))
   (Start_4 String ("a" "0" "" "1" (str.++ Start Start_1) (str.at Start_3 StartInt_2) (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_4 Start_5 Start) (ite StartBool_1 Start_4 Start_3)))
   (StartInt_4 Int (1 0 (str.len Start_3) (str.to_int Start_1)))
   (Start_6 String ("1" x "0" (str.substr Start_2 StartInt_1 StartInt_4) (str.replace Start_1 Start_5 Start_2)))
   (Start_2 String (y "1" x (str.at Start StartInt_1) (str.replace Start_3 Start_5 Start_3) (ite StartBool Start_2 Start_6)))
   (Start_5 String ("" (str.at Start_3 StartInt_2) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start Start_5 Start_6) (str.from_int StartInt_5)))
   (StartInt_5 Int (0 1 (str.to_int Start_2)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool_2) (str.suffixof Start_5 Start_5) (= StartInt_4 StartInt_3)))
   (StartInt_2 Int (0 1))
   (Start_8 String ("" "1" "a" (str.++ Start_1 Start_6) (str.replace Start_4 Start_4 Start_7) (str.from_int StartInt_2)))
   (StartInt_3 Int (1))
   (StartInt_1 Int (0 1 (str.len Start_6) (str.indexof Start_7 Start StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "1" "" "0") (str.len y))))

(check-synth)
