(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_9 String) (StartBool_3 Bool) (Start_8 String) (StartInt_1 Int) (StartInt_2 Int) (Start_6 String) (Start_3 String) (StartBool_2 Bool) (Start_5 String) (StartInt_4 Int) (Start_4 String) (StartInt_3 Int) (Start_2 String) (StartInt_5 Int) (StartBool_4 Bool) (Start_10 String) (StartInt_6 Int) (StartInt_7 Int) (StartBool_1 Bool) (Start_1 String))
  ((Start String ("a" "b" "1" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start_1 Start) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (0 1 (str.len Start_5) (str.indexof Start_2 Start_6 StartInt_6) (str.to_int Start_4)))
   (StartBool Bool (false (not StartBool) (and StartBool_2 StartBool_1) (str.prefixof Start_7 Start_8)))
   (Start_7 String ("" (str.at Start_1 StartInt_7) (str.substr Start_1 StartInt_2 StartInt_4) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_10)))
   (Start_9 String (y "1" (str.++ Start_3 Start_6) (str.at Start StartInt_5) (str.substr Start_6 StartInt StartInt_2) (str.from_int StartInt_6) (ite StartBool Start_9 Start_9)))
   (StartBool_3 Bool (true (str.< Start Start_6) (str.prefixof Start_3 Start_5) (str.suffixof Start_4 Start_6) (str.contains Start_1 Start_9) (<= StartInt_1 StartInt_5)))
   (Start_8 String (x "" "1" "a" y (str.++ Start_4 Start_4) (str.substr Start_3 StartInt_3 StartInt_6) (str.from_int StartInt_2) (ite StartBool_3 Start_5 Start_2)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start_3 Start_1 StartInt_5)))
   (StartInt_2 Int (1 0 (str.to_int Start_2)))
   (Start_6 String (x "" (str.at Start_5 StartInt_4) (str.replace Start Start_4 Start_2) (str.from_int StartInt_1) (ite StartBool Start_5 Start_1)))
   (Start_3 String (y "1" "" "0" x (str.at Start_2 StartInt_3) (str.substr Start_4 StartInt_1 StartInt_3) (str.from_int StartInt_4)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_4 StartBool_4) (str.prefixof Start_10 Start_1) (str.suffixof Start Start_3) (str.contains Start_9 Start_9) (= Start_3 Start_4) (= StartInt_5 StartInt_3)))
   (Start_5 String ("a"))
   (StartInt_4 Int (1 (str.to_int Start)))
   (Start_4 String (x (str.++ Start_5 Start_4) (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt_2)))
   (StartInt_3 Int (0 1))
   (Start_2 String (x (str.substr Start StartInt_5 StartInt_3) (str.from_int StartInt_4)))
   (StartInt_5 Int (1 0 (str.to_int Start_3)))
   (StartBool_4 Bool (false (and StartBool_2 StartBool_4) (str.< Start_9 Start_2) (str.prefixof Start_9 Start_1) (str.suffixof Start_1 Start_2) (str.contains Start_6 Start_10) (= Start_2 Start_7)))
   (Start_10 String ("b" "" (str.substr Start_5 StartInt_4 StartInt)))
   (StartInt_6 Int (0 1 (str.len Start_3) (str.to_int Start_6)))
   (StartInt_7 Int (1 (str.len Start_4) (str.indexof Start_6 Start_7 StartInt_2)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_1 Start) (str.<= Start_3 Start_3) (str.prefixof Start_1 Start_4) (str.suffixof Start_4 Start) (str.contains Start_2 Start_5) (= Start_4 Start) (= StartInt StartInt)))
   (Start_1 String (y "b" "a" "1" "" x (str.++ Start_5 Start_5) (str.at Start_5 StartInt_2) (str.substr Start StartInt StartInt_6) (str.replace Start_2 Start_1 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.substr y 0 1) "b")))

(check-synth)
