(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartInt_8 Int) (Start_1 String) (Start_12 String) (StartBool_2 Bool) (StartBool_3 Bool) (StartInt_1 Int) (Start_9 String) (Start_10 String) (StartInt_4 Int) (Start_3 String) (Start_8 String) (StartBool_1 Bool) (Start_2 String) (Start_4 String) (StartInt_2 Int) (StartBool_4 Bool) (Start_7 String) (StartInt_3 Int) (Start_11 String) (Start_15 String) (Start_6 String) (StartInt_5 Int) (StartInt_6 Int) (Start_14 String) (StartInt_7 Int) (Start_16 String) (Start_18 String) (Start_19 String) (Start_13 String) (Start_5 String) (Start_17 String))
  ((Start String ("a" y (str.++ Start_1 Start_2) (str.at Start_1 StartInt) (ite StartBool Start_2 Start)))
   (StartInt Int (0 (str.len Start) (str.indexof Start_6 Start_19 StartInt_8)))
   (StartBool Bool (false (not StartBool) (and StartBool_5 StartBool_1) (str.prefixof Start_15 Start_12) (str.contains Start_18 Start_12) (<= StartInt StartInt_5)))
   (StartBool_5 Bool (true (and StartBool StartBool_2) (str.< Start_15 Start_9) (str.<= Start_19 Start_10) (str.contains Start_4 Start_4) (= Start_17 Start_14) (= StartInt StartInt_2)))
   (StartInt_8 Int (1 0))
   (Start_1 String ("" (str.++ Start_18 Start_17) (str.from_int StartInt_6) (ite StartBool Start_2 Start_13)))
   (Start_12 String (y (str.at Start StartInt) (str.from_int StartInt_3) (ite StartBool_3 Start_5 Start_10)))
   (StartBool_2 Bool (false true (str.< Start_6 Start_8) (str.<= Start_2 Start_1) (str.prefixof Start_4 Start_8) (= Start_9 Start) (= StartInt_1 StartInt_1) (<= StartInt StartInt_4)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.< Start_8 Start_11) (str.<= Start_7 Start_1) (str.suffixof Start_11 Start_10) (= StartInt_1 StartInt_3)))
   (StartInt_1 Int (0 1 (str.indexof Start_14 Start_7 StartInt_2) (str.to_int Start_9)))
   (Start_9 String ("" (str.at Start_1 StartInt_3) (str.replace Start_3 Start_10 Start_8) (ite StartBool Start_2 Start_8)))
   (Start_10 String ("1" (str.++ Start_10 Start_11) (str.at Start_1 StartInt_3) (str.replace Start_1 Start_6 Start_12) (str.from_int StartInt)))
   (StartInt_4 Int (0))
   (Start_3 String (y "" "a" (str.++ Start_4 Start_14) (str.at Start_3 StartInt_7) (str.from_int StartInt)))
   (Start_8 String ("b" "" (str.++ Start_7 Start_1) (str.replace Start_3 Start_2 Start_3) (ite StartBool_2 Start_6 Start_4)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.< Start_3 Start_4) (str.prefixof Start_5 Start_2) (str.suffixof Start_1 Start_2) (str.contains Start_5 Start_1) (= StartInt_2 StartInt_2) (<= StartInt_1 StartInt)))
   (Start_2 String (y x "a" (str.substr Start_1 StartInt StartInt) (str.replace Start_3 Start_2 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_2)))
   (Start_4 String (y "" "1" (str.++ Start_5 Start_8) (str.at Start_9 StartInt_3) (str.substr Start_11 StartInt_2 StartInt_6) (str.replace Start Start_4 Start_9) (str.from_int StartInt_4)))
   (StartInt_2 Int (0 (str.indexof Start_6 Start_5 StartInt) (str.to_int Start)))
   (StartBool_4 Bool (true false (str.< Start_15 Start_18) (str.prefixof Start Start_3) (= Start_2 Start_18) (= StartInt_2 StartInt_4) (<= StartInt_7 StartInt_1)))
   (Start_7 String (y (str.++ Start_11 Start_11) (str.at Start_4 StartInt_5) (ite StartBool_2 Start_12 Start_12)))
   (StartInt_3 Int (0 1 (str.len Start_8) (str.indexof Start_7 Start_2 StartInt_3) (str.to_int Start)))
   (Start_11 String ("1" y "a" "0" (str.++ Start_4 Start_2) (str.at Start_10 StartInt) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_11)))
   (Start_15 String ("a" (str.from_int StartInt_5)))
   (Start_6 String (y "" (str.++ Start Start_7) (str.at Start_8 StartInt_1) (str.from_int StartInt_3) (ite StartBool Start_3 Start_2)))
   (StartInt_5 Int (0))
   (StartInt_6 Int (0 (str.len Start_3) (str.indexof Start Start_3 StartInt) (str.to_int Start_3)))
   (Start_14 String (y "b" x (str.++ Start_2 Start_2) (str.substr Start_2 StartInt StartInt_2) (str.replace Start_4 Start_2 Start_11) (ite StartBool_3 Start Start_12)))
   (StartInt_7 Int (1 0 (str.len Start_15) (str.indexof Start_2 Start_4 StartInt_1) (str.to_int Start_16)))
   (Start_16 String ("" (str.++ Start_13 Start_11) (str.at Start_17 StartInt) (str.replace Start_10 Start_17 Start_18) (ite StartBool_4 Start_6 Start_18)))
   (Start_18 String (y (str.++ Start_9 Start) (str.from_int StartInt_5) (ite StartBool_4 Start_3 Start_19)))
   (Start_19 String (x (str.++ Start_9 Start_1) (str.at Start_1 StartInt_6)))
   (Start_13 String (y "a" "b" x "" (str.substr Start_9 StartInt_3 StartInt_5) (str.replace Start_2 Start_11 Start_12) (ite StartBool_2 Start_7 Start_11)))
   (Start_5 String ("1" "b" "0" y "" x (str.++ Start_8 Start) (str.replace Start_12 Start_8 Start_13) (str.from_int StartInt_3) (ite StartBool_3 Start_2 Start_3)))
   (Start_17 String (y (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" x (str.at x 1))))

(check-synth)
