(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_11 Int) (Start_11 String) (StartInt_10 Int) (Start_2 String) (Start_7 String) (StartInt_8 Int) (Start_3 String) (Start_8 String) (Start_9 String) (StartInt_9 Int) (Start_13 String) (Start_4 String) (Start_1 String) (StartInt_3 Int) (Start_10 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_1 Int) (StartInt_5 Int) (StartInt_6 Int) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_7 Int) (Start_5 String) (Start_6 String))
  ((Start String (y "1" "0" "a" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_1) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.indexof Start_9 Start_9 StartInt_8) (str.to_int Start_3)))
   (StartBool Bool (false (not StartBool_2) (str.prefixof Start_11 Start_10) (str.suffixof Start_3 Start_10) (= Start_4 Start_6)))
   (Start_12 String ("b" (str.at Start_7 StartInt_7) (str.substr Start_1 StartInt_4 StartInt_11) (str.replace Start_12 Start_3 Start_12)))
   (StartInt_11 Int (0 1 (str.to_int Start_6)))
   (Start_11 String ("a" "" (str.at Start_12 StartInt_6) (str.substr Start_13 StartInt_2 StartInt_4) (str.replace Start_5 Start_5 Start_7) (str.from_int StartInt_2) (ite StartBool_2 Start_2 Start)))
   (StartInt_10 Int (0 (str.indexof Start_10 Start_4 StartInt_9)))
   (Start_2 String (y (str.from_int StartInt_10)))
   (Start_7 String ("1" "" (str.replace Start Start_10 Start_7) (str.from_int StartInt_1)))
   (StartInt_8 Int (1 0 (str.len Start_2) (str.to_int Start_7)))
   (Start_3 String (y (str.++ Start_3 Start_5) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt_4) (ite StartBool Start_9 Start_5)))
   (Start_8 String (y (str.++ Start_7 Start) (str.at Start_4 StartInt) (str.substr Start_7 StartInt_4 StartInt_4) (str.replace Start_8 Start_8 Start_2) (ite StartBool_1 Start_2 Start_7)))
   (Start_9 String ("a" "0" (str.at Start_3 StartInt) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_9 Int (0 1 (str.len Start_1) (str.to_int Start_9)))
   (Start_13 String (x "b" y "1" "0" (str.++ Start_6 Start_7) (str.at Start_13 StartInt_8) (str.replace Start_6 Start_4 Start_5)))
   (Start_4 String (x "a" (str.++ Start_3 Start_4) (str.replace Start_6 Start_2 Start_2) (str.from_int StartInt_6) (ite StartBool Start_3 Start_2)))
   (Start_1 String (y (str.at Start_1 StartInt) (str.substr Start_2 StartInt_3 StartInt_3)))
   (StartInt_3 Int (0 (str.len Start) (str.indexof Start Start StartInt_4) (str.to_int Start)))
   (Start_10 String ("a" "b" (str.++ Start_4 Start) (str.at Start_2 StartInt_6) (str.replace Start_5 Start_8 Start_1) (ite StartBool Start_10 Start_3)))
   (StartBool_2 Bool (true (not StartBool_1) (str.prefixof Start_8 Start_3) (str.suffixof Start_3 Start_6) (= Start_1 Start) (<= StartInt_5 StartInt_9)))
   (StartInt_4 Int (1 (str.indexof Start_3 Start_2 StartInt_5)))
   (StartInt_1 Int (0 1 (str.to_int Start_3)))
   (StartInt_5 Int (0 (str.len Start_3) (str.indexof Start_4 Start_5 StartInt_5) (str.to_int Start_2)))
   (StartInt_6 Int (0 (str.len Start_4) (str.indexof Start_3 Start_5 StartInt_7)))
   (StartInt_2 Int (1 0 (str.len Start)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.prefixof Start_6 Start_6) (= Start_4 Start_1)))
   (StartInt_7 Int (1 (str.len Start_6) (str.indexof Start_2 Start_4 StartInt)))
   (Start_5 String ("b" "1" "" x "0" (str.from_int StartInt_1) (ite StartBool Start Start_5)))
   (Start_6 String ("0" (str.++ Start_3 Start_7) (str.at Start_5 StartInt_5) (str.substr Start_7 StartInt_8 StartInt_6) (str.replace Start_8 Start_5 Start_5) (str.from_int StartInt_5) (ite StartBool_1 Start_1 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "1" "b")))

(check-synth)
