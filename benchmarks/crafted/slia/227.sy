(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_25 String) (StartInt_1 Int) (StartBool_3 Bool) (Start_8 String) (Start_24 String) (Start_17 String) (Start_22 String) (Start_23 String) (StartBool_6 Bool) (StartInt_8 Int) (Start_7 String) (StartInt_4 Int) (StartBool_4 Bool) (Start_3 String) (Start_5 String) (Start_10 String) (StartInt_5 Int) (Start_20 String) (Start_2 String) (StartBool_1 Bool) (Start_21 String) (Start_4 String) (Start_12 String) (Start_26 String) (StartInt_10 Int) (Start_1 String) (Start_6 String) (StartInt_3 Int) (StartInt_2 Int) (StartInt_6 Int) (Start_19 String) (Start_13 String) (StartBool_2 Bool) (Start_16 String) (StartInt_7 Int) (Start_14 String) (Start_9 String) (Start_11 String) (Start_18 String) (StartBool_5 Bool) (Start_15 String) (StartInt_9 Int))
  ((Start String ("a" (str.++ Start Start) (str.at Start StartInt) (str.replace Start_1 Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start_25)))
   (StartBool Bool (true false (not StartBool) (and StartBool_5 StartBool) (str.prefixof Start_25 Start_10) (str.suffixof Start_14 Start_26) (str.contains Start_20 Start_3) (= Start_12 Start_10) (<= StartInt_3 StartInt_2)))
   (Start_25 String (y (str.at Start_14 StartInt_7)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start_16 Start_7 StartInt_6)))
   (StartBool_3 Bool (true false (str.suffixof Start_7 Start_21) (str.contains Start_4 Start_5) (= StartInt_2 StartInt_8) (<= StartInt_8 StartInt)))
   (Start_8 String ("1" (str.at Start_10 StartInt_10) (str.from_int StartInt_10) (ite StartBool_1 Start_7 Start_5)))
   (Start_24 String ("1" (str.++ Start_5 Start_24) (str.at Start_20 StartInt_4) (str.from_int StartInt_9)))
   (Start_17 String (x (str.at Start_2 StartInt_5) (str.substr Start_4 StartInt_8 StartInt_2)))
   (Start_22 String ("1" (str.++ Start_14 Start_9) (str.substr Start_11 StartInt_7 StartInt_5) (str.replace Start_15 Start_19 Start_22) (str.from_int StartInt_3) (ite StartBool_2 Start_18 Start_19)))
   (Start_23 String (x "1" (str.replace Start_3 Start_19 Start_24) (str.from_int StartInt_1)))
   (StartBool_6 Bool (true (str.<= Start_1 Start_16) (str.prefixof Start_6 Start_5) (str.contains Start_21 Start_22) (= Start_18 Start_22)))
   (StartInt_8 Int (1 (str.indexof Start_10 Start_15 StartInt_9) (str.to_int Start_8)))
   (Start_7 String ("1" "" "0" "a" x y "b" (str.++ Start_3 Start_3) (str.substr Start_8 StartInt_1 StartInt) (str.from_int StartInt_1) (ite StartBool Start_9 Start_4)))
   (StartInt_4 Int (0 (str.len Start) (str.indexof Start_1 Start_5 StartInt_2) (str.to_int Start_3)))
   (StartBool_4 Bool (false true (str.<= Start_11 Start_12) (str.prefixof Start_7 Start_1) (str.suffixof Start_2 Start_3) (str.contains Start_2 Start_8) (= StartInt_4 StartInt_5) (<= StartInt_2 StartInt_5)))
   (Start_3 String (y "b" "0" (str.at Start_3 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_4 Start_3 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start)))
   (Start_5 String (x y (str.++ Start_1 Start_3) (str.at Start_2 StartInt) (str.substr Start_5 StartInt_1 StartInt) (str.from_int StartInt_2)))
   (Start_10 String ("a" "1" (str.++ Start_4 Start_5) (str.substr Start StartInt StartInt_4) (str.from_int StartInt_1) (ite StartBool_4 Start_10 Start_1)))
   (StartInt_5 Int (1 (str.indexof Start_5 Start_9 StartInt_1)))
   (Start_20 String ("0" (str.substr Start_21 StartInt_8 StartInt_9) (str.replace Start_2 Start_16 Start_1) (str.from_int StartInt_1) (ite StartBool_5 Start_16 Start_14)))
   (Start_2 String ("" "0"))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_2) (str.prefixof Start_1 Start_2) (str.suffixof Start_3 Start_1) (str.contains Start_3 Start)))
   (Start_21 String ("0" "" (str.at Start_17 StartInt_6) (str.replace Start_4 Start_5 Start_6) (ite StartBool Start_12 Start_21)))
   (Start_4 String ("0" y "a" (str.from_int StartInt_1) (ite StartBool Start_5 Start_4)))
   (Start_12 String (x "1" y (str.++ Start_13 Start) (str.replace Start_11 Start_10 Start_10) (ite StartBool_1 Start_5 Start_13)))
   (Start_26 String ("1" (str.at Start_23 StartInt_2) (ite StartBool_1 Start_16 Start_18)))
   (StartInt_10 Int (0 1 (str.len Start_22) (str.indexof Start_14 Start_23 StartInt_2)))
   (Start_1 String ("0" (str.at Start_1 StartInt_1) (str.replace Start_1 Start Start) (ite StartBool_1 Start_2 Start_2)))
   (Start_6 String ("" (str.substr Start StartInt_1 StartInt_2) (str.replace Start_5 Start Start_4) (ite StartBool_3 Start_3 Start_7)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.indexof Start_4 Start_4 StartInt) (str.to_int Start_4)))
   (StartInt_2 Int (1))
   (StartInt_6 Int (0 (str.len Start_7) (str.to_int Start_4)))
   (Start_19 String ("a" (str.++ Start_10 Start_10) (str.replace Start_21 Start_12 Start_22)))
   (Start_13 String ("" (str.at Start_10 StartInt_4) (str.substr Start_12 StartInt_5 StartInt_4) (str.replace Start_5 Start_3 Start_1) (ite StartBool_2 Start_14 Start_15)))
   (StartBool_2 Bool (true false (str.<= Start_3 Start_2) (str.prefixof Start_2 Start) (str.suffixof Start_6 Start_6) (= Start_6 Start_1) (= StartInt_3 StartInt_2) (<= StartInt StartInt_4)))
   (Start_16 String (y (str.++ Start_3 Start_4) (str.substr Start_4 StartInt_7 StartInt_4) (str.from_int StartInt_5) (ite StartBool_2 Start_9 Start_5)))
   (StartInt_7 Int (1 (str.indexof Start_5 Start_15 StartInt_6)))
   (Start_14 String (y))
   (Start_9 String ("1" (str.++ Start_2 Start_1) (str.replace Start_5 Start_5 Start) (ite StartBool_4 Start_9 Start_10)))
   (Start_11 String ("b" "a" (str.at Start_10 StartInt_1) (str.substr Start_17 StartInt_5 StartInt_4) (str.replace Start_18 Start Start_1)))
   (Start_18 String ("1" x y (str.++ Start_10 Start_4) (str.at Start_18 StartInt_4) (str.replace Start_19 Start_2 Start_2) (ite StartBool_5 Start_10 Start_12)))
   (StartBool_5 Bool (false (not StartBool_6) (and StartBool_4 StartBool_5) (str.< Start_4 Start_4) (str.suffixof Start_16 Start_15) (str.contains Start_17 Start_9) (= StartInt_4 StartInt_8) (<= StartInt_5 StartInt_9)))
   (Start_15 String (x (str.++ Start_11 Start_1) (str.at Start_11 StartInt_6) (str.replace Start_13 Start_11 Start_8) (str.from_int StartInt_6) (ite StartBool_3 Start_4 Start_16)))
   (StartInt_9 Int (0 1 (str.indexof Start_16 Start_20 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "a" (str.to_int (str.at x 1)))))

(check-synth)
