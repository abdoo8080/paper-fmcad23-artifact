(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_18 String) (Start_19 String) (Start_15 String) (Start_17 String) (Start_13 String) (Start_1 String) (Start_8 String) (Start_2 String) (Start_14 String) (StartInt_5 Int) (Start_6 String) (Start_9 String) (StartInt_9 Int) (StartInt_3 Int) (StartInt_6 Int) (Start_11 String) (Start_4 String) (Start_5 String) (StartBool_3 Bool) (Start_16 String) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_2 Bool) (Start_3 String) (Start_10 String) (StartInt_1 Int) (Start_12 String) (StartInt_4 Int) (StartInt_8 Int) (StartInt_7 Int) (Start_7 String))
  ((Start String ("1" (str.++ Start_1 Start_2) (str.at Start_1 StartInt_1) (str.replace Start_1 Start Start_1) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (StartInt Int (0 1 (str.len Start_5) (str.to_int Start_4)))
   (StartBool Bool (true (str.< Start_9 Start_9) (str.<= Start_10 Start_14) (str.prefixof Start_15 Start_9) (str.suffixof Start_2 Start_11) (= Start_15 Start_16) (<= StartInt_6 StartInt_2)))
   (StartBool_4 Bool (false true (str.prefixof Start_6 Start_18) (= Start_8 Start_16) (<= StartInt StartInt_4)))
   (Start_18 String ("1" (str.substr Start_14 StartInt_6 StartInt_2) (str.replace Start_15 Start_17 Start_3) (str.from_int StartInt) (ite StartBool_4 Start_3 Start_8)))
   (Start_19 String (x "" (str.replace Start_9 Start_1 Start_11) (ite StartBool_1 Start Start_11)))
   (Start_15 String (x (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_6 Start_12 Start_13) (str.from_int StartInt_6)))
   (Start_17 String ("" x "1" (str.substr Start_8 StartInt_1 StartInt_9) (str.replace Start_8 Start_7 Start_14) (str.from_int StartInt_2)))
   (Start_13 String (y "b" (str.++ Start_10 Start_9) (str.at Start_7 StartInt_1) (str.substr Start_12 StartInt_7 StartInt_4) (str.replace Start_12 Start_8 Start_12) (str.from_int StartInt_4)))
   (Start_1 String (y (str.substr Start_7 StartInt_2 StartInt_2) (ite StartBool_1 Start_5 Start_1)))
   (Start_8 String (y (str.at Start_5 StartInt_4) (str.substr Start_1 StartInt_3 StartInt_4)))
   (Start_2 String ("1" (str.++ Start_2 Start_3) (str.replace Start_4 Start_6 Start)))
   (Start_14 String (y "1" x (str.++ Start_12 Start_18) (str.at Start_19 StartInt_6)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.to_int Start_1)))
   (Start_6 String ("a" (str.substr Start_4 StartInt StartInt_3) (str.from_int StartInt_1)))
   (Start_9 String ("b" "" x (str.++ Start_13 Start_5) (str.replace Start_9 Start_7 Start_11) (str.from_int StartInt_5) (ite StartBool_3 Start_4 Start_5)))
   (StartInt_9 Int (1 0 (str.len Start_17)))
   (StartInt_3 Int (0 (str.indexof Start_1 Start_5 StartInt_4)))
   (StartInt_6 Int (0 (str.len Start) (str.indexof Start_4 Start_8 StartInt_4) (str.to_int Start_11)))
   (Start_11 String ("1" "a" "" "0" (str.at Start_5 StartInt_5) (str.substr Start_9 StartInt_2 StartInt_5) (str.replace Start_4 Start_5 Start) (str.from_int StartInt_3) (ite StartBool Start_1 Start_5)))
   (Start_4 String (y (str.substr Start_5 StartInt StartInt_3) (str.from_int StartInt_2)))
   (Start_5 String ("1" (str.at Start_2 StartInt) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt)))
   (StartBool_3 Bool (true false (str.< Start_9 Start_8) (str.prefixof Start_11 Start_3) (str.suffixof Start Start_3) (str.contains Start_8 Start_13)))
   (Start_16 String (x "a" (str.++ Start_11 Start_11) (str.at Start_14 StartInt_9) (str.replace Start_15 Start_10 Start_5) (str.from_int StartInt)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.<= Start_6 Start_7) (str.prefixof Start_8 Start) (<= StartInt_2 StartInt)))
   (StartInt_2 Int (1 0 (str.indexof Start_3 Start_4 StartInt_1) (str.to_int Start_5)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool) (str.prefixof Start_2 Start) (str.contains Start_6 Start_9) (= Start_10 Start_11)))
   (Start_3 String ("" (str.++ Start_1 Start)))
   (Start_10 String (x "b" (str.at Start_5 StartInt) (str.substr Start_3 StartInt_6 StartInt_6) (str.replace Start_9 Start_9 Start_11) (ite StartBool Start_12 Start_3)))
   (StartInt_1 Int (0 (str.indexof Start_2 Start_1 StartInt_2)))
   (Start_12 String (x (str.++ Start_7 Start_8) (str.substr Start_6 StartInt_7 StartInt_7) (str.replace Start_7 Start_11 Start_9)))
   (StartInt_4 Int (0 (str.indexof Start_6 Start_3 StartInt_4) (str.to_int Start_4)))
   (StartInt_8 Int (1 (str.to_int Start_9)))
   (StartInt_7 Int (1 0 (str.len Start_9)))
   (Start_7 String ("1" x "" (str.++ Start_11 Start_2) (str.substr Start_4 StartInt_3 StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= 0 (str.to_int x)) "a" x)))

(check-synth)
