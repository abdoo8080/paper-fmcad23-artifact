(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (Start_1 String) (Start_3 String) (Start_2 String) (StartBool_1 Bool) (Start_4 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_6 String) (StartInt_4 Int) (StartInt_3 Int) (StartInt_1 Int))
  ((Start String ("1" "a" "" (str.replace Start Start Start) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_1 Start StartInt_3)))
   (StartBool Bool (false (str.< Start_5 Start_6) (str.contains Start_1 Start_4) (= Start_4 Start_2)))
   (Start_5 String ("0" "a" y (str.++ Start Start_5) (str.replace Start_4 Start_6 Start_1) (str.from_int StartInt_4)))
   (Start_1 String ("0" (str.++ Start_1 Start_1) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start_3)))
   (Start_3 String ("b" (str.replace Start_2 Start_3 Start_1)))
   (Start_2 String ("0" "" x y "1" (str.++ Start_3 Start_2) (str.at Start_1 StartInt)))
   (StartBool_1 Bool (false (not StartBool) (str.prefixof Start_2 Start_3) (= StartInt_1 StartInt) (<= StartInt_1 StartInt_2)))
   (Start_4 String ("0" (str.substr Start_4 StartInt_4 StartInt_3) (str.replace Start_3 Start_1 Start_2) (str.from_int StartInt)))
   (StartInt_2 Int (0 1 (str.to_int Start)))
   (StartBool_2 Bool (false (str.<= Start_6 Start_3) (str.prefixof Start_4 Start_1) (str.contains Start_2 Start_3)))
   (Start_6 String ("1" "a" (str.replace Start_5 Start_6 Start_1) (str.from_int StartInt) (ite StartBool_2 Start_4 Start_2)))
   (StartInt_4 Int (0 1 (str.indexof Start_2 Start_4 StartInt_3)))
   (StartInt_3 Int (1 (str.len Start_1) (str.to_int Start_4)))
   (StartInt_1 Int (0 (str.len Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.at x 1) (str.replace "" x "a"))))

(check-synth)
