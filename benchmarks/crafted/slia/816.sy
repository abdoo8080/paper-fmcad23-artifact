(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (StartInt_8 Int) (StartInt_1 Int) (Start_9 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_6 String) (StartBool_1 Bool) (StartInt_9 Int) (Start_8 String) (StartInt_7 Int) (Start_5 String) (Start_1 String) (Start_7 String) (Start_10 String) (Start_3 String) (StartInt_3 Int) (StartBool_3 Bool) (StartInt_2 Int) (StartInt_5 Int) (StartBool_4 Bool) (Start_4 String) (StartInt_4 Int) (Start_2 String))
  ((Start String ("" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_5) (str.to_int Start_4)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_4 StartBool_3) (str.< Start_2 Start_3) (str.prefixof Start_7 Start_6) (str.contains Start_8 Start_4) (= Start_4 Start_10) (<= StartInt_9 StartInt_5)))
   (StartInt_10 Int (0 (str.len Start_3) (str.indexof Start_5 Start_3 StartInt_1)))
   (StartInt_8 Int (0 1 (str.len Start_2) (str.indexof Start_9 Start_2 StartInt_10) (str.to_int Start_4)))
   (StartInt_1 Int (0 (str.to_int Start_1)))
   (Start_9 String (x (str.++ Start_4 Start_4) (str.at Start_1 StartInt_4) (str.substr Start_4 StartInt_7 StartInt_5) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false true (not StartBool_4) (and StartBool_2 StartBool_3) (str.< Start_3 Start_7) (str.suffixof Start_4 Start_6) (str.contains Start_7 Start_5) (= Start_8 Start) (= StartInt_3 StartInt_4) (<= StartInt_5 StartInt_6)))
   (StartInt_6 Int (0 (str.to_int Start_4)))
   (Start_6 String (x y "b" "1" "" (str.++ Start_4 Start_6) (str.at Start_2 StartInt_2) (str.substr Start_7 StartInt StartInt) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (str.<= Start_2 Start_1) (str.prefixof Start_3 Start_1) (str.suffixof Start_4 Start_5) (str.contains Start_4 Start_1) (= StartInt StartInt)))
   (StartInt_9 Int (0 1 (str.indexof Start_3 Start_10 StartInt_9) (str.to_int Start_10)))
   (Start_8 String ("" "b" (str.from_int StartInt)))
   (StartInt_7 Int (1 0))
   (Start_5 String ("b" (ite StartBool_4 Start_6 Start_2)))
   (Start_1 String (x (str.++ Start_4 Start_6) (str.at Start_2 StartInt_8) (str.substr Start_2 StartInt_3 StartInt_9)))
   (Start_7 String ("1" "b" (str.++ Start_2 Start_1) (str.at Start_6 StartInt) (str.substr Start_4 StartInt_2 StartInt_1) (str.from_int StartInt)))
   (Start_10 String (y (str.++ Start_3 Start_5) (ite StartBool_2 Start_6 Start_9)))
   (Start_3 String (y "a" (str.++ Start_7 Start_7) (str.at Start_8 StartInt) (str.substr Start_5 StartInt_1 StartInt) (ite StartBool_4 Start_7 Start_1)))
   (StartInt_3 Int (1 0 (str.indexof Start_8 Start_2 StartInt_2)))
   (StartBool_3 Bool (true false (not StartBool_3) (str.<= Start_5 Start_8) (= Start_6 Start_7) (= StartInt_2 StartInt_3)))
   (StartInt_2 Int (0 1))
   (StartInt_5 Int (0 (str.indexof Start_9 Start StartInt_4) (str.to_int Start_5)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool) (str.<= Start_3 Start_3) (= Start_2 Start_8)))
   (Start_4 String ("0" "b" (str.at Start_6 StartInt) (str.from_int StartInt)))
   (StartInt_4 Int (0 1 (str.indexof Start_7 Start_5 StartInt_3) (str.to_int Start_5)))
   (Start_2 String ("0" "b" y "" (str.at Start_8 StartInt_2) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ y (str.replace "1" x y))))

(check-synth)
