(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (StartBool_3 Bool) (Start_10 String) (Start_9 String) (Start_8 String) (StartInt_6 Int) (Start_12 String) (Start_2 String) (StartInt_2 Int) (StartInt_3 Int) (Start_3 String) (StartInt_5 Int) (Start_1 String) (StartInt_7 Int) (Start_6 String) (StartInt_1 Int) (StartBool_2 Bool) (StartInt_8 Int) (Start_11 String) (StartBool_1 Bool) (Start_4 String) (Start_7 String) (StartInt_4 Int))
  ((Start String (y (str.++ Start_1 Start_2) (str.substr Start_2 StartInt StartInt) (str.replace Start Start_2 Start_2)))
   (StartInt Int (0 (str.len Start) (str.to_int Start_4)))
   (StartBool Bool (false true (not StartBool_2) (str.< Start_9 Start_7) (str.suffixof Start_3 Start) (str.contains Start_6 Start_4) (= StartInt_6 StartInt_7)))
   (Start_5 String (x (str.replace Start Start_2 Start_4) (str.from_int StartInt_5)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool) (str.<= Start_4 Start_5) (str.suffixof Start_3 Start_6) (str.contains Start Start) (= Start_5 Start) (<= StartInt_5 StartInt_3)))
   (Start_10 String ("a" "0" x "" y "b" (str.replace Start_5 Start Start_5) (str.from_int StartInt_2)))
   (Start_9 String ("a" (str.++ Start_2 Start_8) (str.substr Start_3 StartInt_4 StartInt_1)))
   (Start_8 String ("1" "0" "b" "" (str.++ Start Start) (ite StartBool_3 Start_7 Start_9)))
   (StartInt_6 Int (1 0 (str.len Start_5) (str.to_int Start_1)))
   (Start_12 String ("a" "" (str.++ Start_8 Start_1) (str.at Start_3 StartInt_8) (str.substr Start StartInt_6 StartInt_7) (str.replace Start_7 Start_2 Start_8)))
   (Start_2 String ("1" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 0 (str.to_int Start)))
   (StartInt_3 Int (0 (str.indexof Start Start_8 StartInt_1) (str.to_int Start_1)))
   (Start_3 String ("1" "0" "a" (str.at Start_2 StartInt_1) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_10 Start_4 StartInt_2)))
   (Start_1 String ("b" (str.substr Start_3 StartInt_1 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_7 Int (1 (str.len Start_2) (str.indexof Start_11 Start_10 StartInt_5)))
   (Start_6 String ("a" "1" "b" (ite StartBool_1 Start_7 Start_3)))
   (StartInt_1 Int (1 (str.len Start_2)))
   (StartBool_2 Bool (false (not StartBool_2) (str.<= Start_7 Start_1) (= Start_2 Start_6)))
   (StartInt_8 Int (0 1 (str.indexof Start_1 Start_3 StartInt_6) (str.to_int Start_8)))
   (Start_11 String ("1" "a" "0" x (str.++ Start_2 Start_5) (str.replace Start_3 Start_12 Start_3) (ite StartBool_1 Start Start_4)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.<= Start Start_6) (str.prefixof Start_3 Start_1) (str.suffixof Start_3 Start_5) (str.contains Start_1 Start_4)))
   (Start_4 String ("b" "a" "1" "" "0" x (str.substr Start_5 StartInt_3 StartInt_3) (str.replace Start_6 Start_5 Start_6)))
   (Start_7 String ("0" (str.substr Start StartInt_4 StartInt_2) (ite StartBool_1 Start_7 Start_1)))
   (StartInt_4 Int (0 (str.len Start_3) (str.indexof Start_2 Start_5 StartInt_3) (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.at x 1) "b")))

(check-synth)
