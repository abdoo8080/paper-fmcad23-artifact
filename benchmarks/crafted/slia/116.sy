(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_11 String) (Start_6 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_10 String) (Start_9 String) (StartInt_1 Int) (Start_8 String) (Start_7 String) (StartInt_4 Int) (Start_12 String) (Start_2 String) (Start_5 String) (StartInt_6 Int) (StartInt_3 Int) (Start_4 String) (Start_3 String) (Start_1 String) (StartBool_1 Bool) (StartInt_5 Int) (StartBool_3 Bool))
  ((Start String ("a" (str.++ Start_1 Start_2) (str.at Start_2 StartInt_1) (str.replace Start_1 Start_2 Start)))
   (StartInt Int (0 1 (str.indexof Start_2 Start_10 StartInt) (str.to_int Start_8)))
   (StartBool Bool (false (not StartBool) (str.<= Start_10 Start_11) (str.prefixof Start_11 Start_11) (str.contains Start_9 Start_8)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_2) (str.< Start_4 Start_10) (str.<= Start_3 Start_2) (str.prefixof Start_8 Start_11) (str.suffixof Start_3 Start_12) (<= StartInt_1 StartInt_4)))
   (Start_11 String ("0" "" "1" (str.at Start_6 StartInt_1) (str.substr Start_5 StartInt_4 StartInt_5) (str.from_int StartInt_1) (ite StartBool_4 Start_7 Start_3)))
   (Start_6 String ("1" x "b" (str.++ Start_10 Start_1) (str.at Start StartInt_6) (str.replace Start_7 Start_9 Start_6)))
   (StartInt_2 Int (0 1))
   (StartBool_2 Bool (false true (not StartBool_1) (str.<= Start_9 Start_8) (str.suffixof Start Start_7) (= Start_9 Start_2) (= StartInt_5 StartInt_1)))
   (Start_10 String ("" (str.++ Start_5 Start_6) (str.at Start_4 StartInt_4) (str.substr Start_10 StartInt_1 StartInt_6) (str.replace Start_8 Start_10 Start_3) (str.from_int StartInt_6)))
   (Start_9 String ("" (str.++ Start_7 Start_4) (str.substr Start_3 StartInt_5 StartInt_2) (str.replace Start_1 Start_1 Start_7) (ite StartBool_3 Start_6 Start_2)))
   (StartInt_1 Int (1 (str.len Start_1)))
   (Start_8 String ("0" (str.++ Start_2 Start_9) (str.substr Start_7 StartInt_4 StartInt_3) (str.replace Start_6 Start_5 Start_8) (str.from_int StartInt_3)))
   (Start_7 String ("0" "a" y "b" (str.++ Start_2 Start_4) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 1))
   (Start_12 String ("b" "0" y x "a" (str.substr Start_6 StartInt_4 StartInt) (ite StartBool_1 Start_5 Start_4)))
   (Start_2 String ("b" "" "1" x y "0" "a" (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_2 Start_4 Start_5) (str.from_int StartInt_1) (ite StartBool Start_5 Start)))
   (Start_5 String ("0" (str.++ Start_1 Start_5) (str.from_int StartInt_1) (ite StartBool Start_2 Start_5)))
   (StartInt_6 Int (0))
   (StartInt_3 Int (0 (str.to_int Start_3)))
   (Start_4 String ("b" "" y (str.substr Start_4 StartInt_1 StartInt_1) (str.from_int StartInt)))
   (Start_3 String (y))
   (Start_1 String (x "0" "a" (str.++ Start_2 Start_5) (str.at Start_4 StartInt) (str.substr Start_6 StartInt_2 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_3) (str.< Start_3 Start_4) (str.<= Start_3 Start_5) (str.contains Start Start_4) (= Start_1 Start_5) (= StartInt_1 StartInt_3) (<= StartInt_4 StartInt_5)))
   (StartInt_5 Int (1 0 (str.len Start_4) (str.indexof Start_7 Start StartInt_1) (str.to_int Start_6)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_1) (str.<= Start_8 Start_9) (str.prefixof Start_3 Start_8) (str.contains Start_7 Start_1) (= Start_5 Start_9) (= StartInt_1 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof "1" x) "a" "")))

(check-synth)
