(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_7 Bool) (Start_3 String) (Start_8 String) (Start_7 String) (StartInt_5 Int) (Start_5 String) (Start_14 String) (StartInt_4 Int) (StartInt_3 Int) (Start_10 String) (StartBool_1 Bool) (Start_4 String) (Start_13 String) (StartInt_2 Int) (Start_2 String) (Start_11 String) (Start_9 String) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_9 Int) (Start_15 String) (Start_6 String) (StartInt_7 Int) (StartBool_4 Bool) (StartInt_6 Int) (Start_12 String) (StartInt_8 Int) (StartBool_6 Bool) (StartBool_5 Bool) (StartInt_10 Int) (Start_1 String) (StartBool_2 Bool))
  ((Start String ("1"))
   (StartInt Int (1 (str.indexof Start Start_1 StartInt_1) (str.to_int Start_2)))
   (StartBool Bool (true false (str.< Start_11 Start_14) (str.<= Start_9 Start_12) (str.prefixof Start_9 Start_1) (str.suffixof Start_11 Start_15) (str.contains Start_15 Start_7) (= Start_6 Start_11) (= StartInt_5 StartInt_2)))
   (StartBool_7 Bool (true (not StartBool_6) (and StartBool_2 StartBool_6) (str.<= Start_11 Start_15) (= StartInt StartInt_3) (<= StartInt_7 StartInt_4)))
   (Start_3 String ("b" "1" (str.++ Start_1 Start_14) (str.at Start_5 StartInt_7)))
   (Start_8 String ("" "0" "1" y "b" "a" x (str.++ Start_4 Start_2) (str.substr Start StartInt_3 StartInt_5) (str.replace Start_5 Start_3 Start_6) (str.from_int StartInt_5) (ite StartBool Start_2 Start_4)))
   (Start_7 String ("b" y x (str.++ Start_5 Start_7) (str.substr Start_6 StartInt_2 StartInt_4) (ite StartBool Start_8 Start)))
   (StartInt_5 Int (1 (str.to_int Start_2)))
   (Start_5 String (y "a" (str.at Start_8 StartInt_2) (str.substr Start_5 StartInt_6 StartInt_6) (str.replace Start_1 Start_1 Start_9) (str.from_int StartInt_3) (ite StartBool Start_3 Start_7)))
   (Start_14 String ("b" x (str.++ Start_9 Start_11) (str.at Start_14 StartInt_3) (str.replace Start_9 Start_12 Start_3) (str.from_int StartInt_8) (ite StartBool_6 Start_11 Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_1) (str.indexof Start_3 Start_6 StartInt_5) (str.to_int Start_4)))
   (StartInt_3 Int (1 0 (str.len Start_6) (str.indexof Start_7 Start_3 StartInt_1)))
   (Start_10 String ("0" (str.++ Start_8 Start) (str.at Start_12 StartInt_9) (str.substr Start_8 StartInt_5 StartInt_7) (str.replace Start_14 Start_11 Start)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool_3) (str.contains Start Start) (= StartInt_1 StartInt_1)))
   (Start_4 String ("" (str.++ Start_6 Start_3) (str.at Start_4 StartInt) (str.replace Start_5 Start_8 Start_14) (ite StartBool_1 Start_6 Start_9)))
   (Start_13 String (x "0" (str.++ Start_1 Start_1) (str.replace Start_5 Start_6 Start)))
   (StartInt_2 Int (0 1 (str.len Start_14) (str.indexof Start_8 Start StartInt_10) (str.to_int Start_1)))
   (Start_2 String ("1" (str.++ Start Start_3) (str.at Start StartInt_2) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_2 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (Start_11 String ("b" (str.at Start StartInt_7) (str.substr Start_13 StartInt StartInt_5) (str.from_int StartInt_5) (ite StartBool_3 Start_3 Start_5)))
   (Start_9 String (y (str.++ Start_1 Start_4) (str.at Start_10 StartInt_5) (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start_11 Start_10 Start_7) (str.from_int StartInt_7)))
   (StartInt_1 Int (0 1 (str.to_int Start_2)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_1 StartBool_4) (= Start Start) (= StartInt_2 StartInt)))
   (StartInt_9 Int (0))
   (Start_15 String ("b" x (str.replace Start_14 Start_11 Start_13) (str.from_int StartInt_6) (ite StartBool_7 Start_8 Start)))
   (Start_6 String ("b" (str.++ Start Start_3) (str.at Start_5 StartInt_2) (str.from_int StartInt_3) (ite StartBool_3 Start_2 Start_2)))
   (StartInt_7 Int (1 0 (str.len Start_10) (str.indexof Start_7 Start_2 StartInt_8) (str.to_int Start_12)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool_5) (str.prefixof Start_2 Start_4) (str.suffixof Start_5 Start) (= Start_4 Start_1) (<= StartInt_3 StartInt_4)))
   (StartInt_6 Int (0 (str.indexof Start_12 Start_4 StartInt_2)))
   (Start_12 String (y (str.replace Start_7 Start_3 Start_12) (str.from_int StartInt_4)))
   (StartInt_8 Int (1 0 (str.len Start_5) (str.indexof Start Start_10 StartInt_7) (str.to_int Start_2)))
   (StartBool_6 Bool (true (not StartBool_3) (and StartBool_4 StartBool_1) (str.<= Start_12 Start_1) (<= StartInt StartInt_3)))
   (StartBool_5 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_3) (str.<= Start_4 Start_3) (str.suffixof Start_6 Start_13) (str.contains Start_2 Start_5)))
   (StartInt_10 Int (0 (str.len Start_10) (str.indexof Start_9 Start_10 StartInt_9)))
   (Start_1 String ("b" (str.at Start_12 StartInt_9) (str.substr Start_3 StartInt_1 StartInt_1) (str.from_int StartInt_8) (ite StartBool_1 Start_8 Start_12)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_2 StartBool_6) (str.< Start Start_7) (str.prefixof Start_14 Start_5) (<= StartInt_6 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace x "b" "a") "" "0")))

(check-synth)
