(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_8 String) (StartBool_2 Bool) (Start_14 String) (Start_3 String) (StartInt_1 Int) (Start_10 String) (StartBool_4 Bool) (StartInt_10 Int) (Start_9 String) (StartBool_1 Bool) (Start_5 String) (StartBool_5 Bool) (StartInt_2 Int) (Start_6 String) (StartInt_5 Int) (Start_11 String) (Start_7 String) (Start_4 String) (StartInt_6 Int) (Start_12 String) (StartInt_8 Int) (StartBool_3 Bool) (StartInt_7 Int) (StartBool_6 Bool) (Start_13 String) (StartInt_9 Int) (Start_2 String) (Start_1 String))
  ((Start String ("a" (str.substr Start StartInt StartInt) (ite StartBool_1 Start Start)))
   (StartInt Int (1 (str.len Start_14) (str.indexof Start_2 Start_3 StartInt_10) (str.to_int Start_8)))
   (StartBool Bool (false (and StartBool_1 StartBool_2) (str.< Start_12 Start_12) (str.<= Start_6 Start_10) (str.prefixof Start_7 Start) (= StartInt_11 StartInt_5) (<= StartInt_1 StartInt_3)))
   (StartInt_11 Int (1 0 (str.len Start_6) (str.indexof Start_5 Start_11 StartInt_4) (str.to_int Start_1)))
   (StartInt_4 Int (0 1))
   (StartInt_3 Int (1 0 (str.to_int Start_6)))
   (Start_8 String ("b" (str.++ Start_3 Start_8) (str.at Start_5 StartInt_2) (str.substr Start_8 StartInt StartInt_3) (str.replace Start_1 Start Start_5) (str.from_int StartInt_2) (ite StartBool_3 Start_3 Start_1)))
   (StartBool_2 Bool (true false (= StartInt_1 StartInt)))
   (Start_14 String ("" "0" (str.++ Start_14 Start) (str.from_int StartInt_10) (ite StartBool_1 Start_13 Start_14)))
   (Start_3 String ("0" (str.at Start_2 StartInt_9) (str.from_int StartInt_8) (ite StartBool_2 Start_1 Start_2)))
   (StartInt_1 Int (1 (str.len Start_2)))
   (Start_10 String ("a" "1" (ite StartBool_3 Start_6 Start_2)))
   (StartBool_4 Bool (false true (str.< Start_1 Start_5) (str.prefixof Start_8 Start_5) (= Start_3 Start_10) (= StartInt StartInt_4) (<= StartInt_3 StartInt_2)))
   (StartInt_10 Int (1 0))
   (Start_9 String ("1" (str.++ Start Start_4)))
   (StartBool_1 Bool (false (str.< Start Start_1) (str.<= Start_2 Start_3) (str.prefixof Start_4 Start_5) (str.contains Start_5 Start_6)))
   (Start_5 String ("0" "b" (str.++ Start_1 Start_7) (str.replace Start_4 Start Start_8) (str.from_int StartInt_1)))
   (StartBool_5 Bool (true false (not StartBool_2) (and StartBool_6 StartBool) (str.<= Start_7 Start_12) (str.suffixof Start_3 Start_11) (= Start_11 Start_8) (<= StartInt_7 StartInt_3)))
   (StartInt_2 Int (1 0))
   (Start_6 String ("a" "" (str.++ Start_2 Start_6) (ite StartBool_2 Start_2 Start_1)))
   (StartInt_5 Int (0 1 (str.len Start_1)))
   (Start_11 String ("" x (str.++ Start_5 Start_6) (str.replace Start_5 Start Start_8) (ite StartBool_5 Start_3 Start_1)))
   (Start_7 String ("a" (str.substr Start_6 StartInt StartInt_5) (str.from_int StartInt_5)))
   (Start_4 String ("" (str.substr Start_4 StartInt_3 StartInt_6) (str.replace Start_7 Start_8 Start_7)))
   (StartInt_6 Int (0 1 (str.len Start_11) (str.to_int Start_7)))
   (Start_12 String ("" (str.++ Start_12 Start_9) (str.at Start_6 StartInt_7) (str.substr Start_2 StartInt_5 StartInt_7) (str.replace Start_1 Start_5 Start_12) (str.from_int StartInt_2)))
   (StartInt_8 Int (1 0))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool_4 StartBool) (str.<= Start_3 Start_7) (str.prefixof Start_9 Start)))
   (StartInt_7 Int (0 (str.len Start_2)))
   (StartBool_6 Bool (false true (not StartBool_5) (str.< Start Start_13) (str.<= Start_1 Start_5) (str.suffixof Start_11 Start_5) (str.contains Start_5 Start_1) (= StartInt_8 StartInt_1)))
   (Start_13 String ("" (str.++ Start_8 Start_7) (str.at Start_5 StartInt_7)))
   (StartInt_9 Int (0 1 (str.len Start_6) (str.to_int Start_3)))
   (Start_2 String ("0" y "" (str.replace Start_10 Start_11 Start_8) (str.from_int StartInt_7)))
   (Start_1 String ("" "b" (ite StartBool_4 Start_7 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "b" x (str.++ y y)) "a")))

(check-synth)
