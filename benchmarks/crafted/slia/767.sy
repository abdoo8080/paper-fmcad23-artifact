(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (Start_4 String) (StartInt_6 Int) (StartInt_5 Int) (StartInt_3 Int) (Start_14 String) (Start_10 String) (Start_2 String) (StartInt_2 Int) (StartBool_3 Bool) (Start_5 String) (Start_3 String) (Start_13 String) (Start_6 String) (StartInt_7 Int) (Start_7 String) (Start_8 String) (StartInt_8 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_12 String) (StartInt_4 Int) (Start_9 String) (Start_11 String))
  ((Start String ("0" "1" (str.at Start StartInt) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start Start)))
   (StartInt Int (1 0 (str.to_int Start_11)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_1 StartBool) (str.prefixof Start_13 Start_10) (str.suffixof Start_14 Start_14) (str.contains Start Start_13) (= Start_14 Start) (= StartInt_6 StartInt_8)))
   (Start_1 String ("" x "0" (str.++ Start_13 Start_12) (str.at Start_13 StartInt_6) (str.from_int StartInt_3) (ite StartBool Start_6 Start_11)))
   (StartInt_1 Int (0 1))
   (Start_4 String ("a" "" (str.substr Start StartInt_7 StartInt_4) (str.replace Start_10 Start_9 Start_14) (ite StartBool_1 Start_3 Start_5)))
   (StartInt_6 Int (0))
   (StartInt_5 Int (0 (str.indexof Start_13 Start_11 StartInt_5) (str.to_int Start_6)))
   (StartInt_3 Int (0 (str.indexof Start_11 Start_11 StartInt_4)))
   (Start_14 String ("0" (str.replace Start_11 Start_8 Start_13) (str.from_int StartInt_4)))
   (Start_10 String ("0" "b" "a" "1" (str.++ Start_2 Start_3) (str.substr Start_5 StartInt StartInt_4)))
   (Start_2 String ("a" x "" "1" "b" y (str.at Start StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt)))
   (StartInt_2 Int (1 0 (str.indexof Start_4 Start_1 StartInt_2) (str.to_int Start_5)))
   (StartBool_3 Bool (true false (not StartBool_3) (str.<= Start_3 Start_7) (str.suffixof Start_13 Start_6) (= StartInt_7 StartInt_6)))
   (Start_5 String ("1" (str.at Start_3 StartInt_3) (str.replace Start_6 Start_2 Start_2)))
   (Start_3 String (y (str.replace Start_3 Start_4 Start_1) (str.from_int StartInt_2)))
   (Start_13 String ("0" (str.at Start_8 StartInt_6) (str.replace Start_8 Start_14 Start_9) (str.from_int StartInt_3)))
   (Start_6 String (x "b" "a" "1" (str.++ Start_5 Start_3) (ite StartBool_1 Start_7 Start_1)))
   (StartInt_7 Int (0 (str.indexof Start_2 Start_1 StartInt_1) (str.to_int Start_1)))
   (Start_7 String ("1" (str.substr Start_8 StartInt_1 StartInt_1)))
   (Start_8 String ("b" x "0" "a" "1" y (str.++ Start_2 Start_3) (str.substr Start_5 StartInt_2 StartInt) (str.replace Start_4 Start_1 Start_2) (str.from_int StartInt_3)))
   (StartInt_8 Int (0 1))
   (StartBool_2 Bool (false (and StartBool StartBool_3) (str.suffixof Start_8 Start_7) (= Start_6 Start_8)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_1 StartBool_1) (str.<= Start_1 Start) (str.suffixof Start_9 Start_2) (str.contains Start_10 Start_2) (<= StartInt_1 StartInt)))
   (Start_12 String ("b" (str.++ Start_12 Start_5) (str.at Start_12 StartInt_1) (str.substr Start_7 StartInt_2 StartInt_5) (str.replace Start Start_4 Start_7)))
   (StartInt_4 Int (1 0 (str.len Start_7) (str.to_int Start_1)))
   (Start_9 String ("" "1" x "0" y (str.replace Start_5 Start_11 Start_3)))
   (Start_11 String ("1" (str.from_int StartInt_3) (ite StartBool_2 Start_10 Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof (str.replace x "1" "") "b" 0))))

(check-synth)
