(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_11 String) (Start_9 String) (StartInt_6 Int) (StartBool_4 Bool) (Start_8 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_10 String) (StartInt_3 Int) (Start_1 String) (StartInt_8 Int) (Start_4 String) (StartInt_2 Int) (StartInt_7 Int) (Start_2 String) (Start_5 String) (Start_12 String) (StartBool_3 Bool) (StartInt_5 Int) (Start_3 String) (Start_7 String) (StartInt_4 Int) (StartBool_5 Bool) (Start_6 String) (StartInt_1 Int))
  ((Start String (x (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_3)))
   (StartInt Int (1 (str.indexof Start_10 Start StartInt)))
   (StartBool Bool (true (not StartBool_5) (str.<= Start_9 Start_6) (str.prefixof Start_7 Start_9) (str.suffixof Start Start_8) (str.contains Start_10 Start_5) (= StartInt_4 StartInt_8)))
   (StartBool_6 Bool (true (not StartBool_1) (str.<= Start_12 Start_3) (str.prefixof Start_10 Start_11)))
   (Start_11 String (y "1" "b" "" "a" (str.++ Start_12 Start_1) (str.from_int StartInt_2)))
   (Start_9 String (x (str.replace Start_10 Start Start_2) (ite StartBool_2 Start_6 Start_1)))
   (StartInt_6 Int (0))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool_5) (str.< Start_7 Start) (str.suffixof Start_8 Start_9) (str.contains Start_5 Start_3) (= StartInt_5 StartInt_4) (<= StartInt_4 StartInt_6)))
   (Start_8 String ("b" x (str.++ Start Start_4) (str.substr Start_1 StartInt_5 StartInt_2) (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_2) (str.< Start_7 Start_4) (str.<= Start_2 Start_4) (str.suffixof Start_5 Start_7) (= Start_8 Start_3) (<= StartInt_3 StartInt_3)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_2) (str.<= Start_7 Start) (str.prefixof Start Start_3) (str.suffixof Start_2 Start_3) (str.contains Start_1 Start_7) (= Start_1 Start_5) (<= StartInt_5 StartInt_3)))
   (Start_10 String ("" (str.at Start_1 StartInt_6) (str.substr Start_7 StartInt_4 StartInt_5) (str.replace Start_2 Start_1 Start) (str.from_int StartInt_7) (ite StartBool_2 Start_7 Start_6)))
   (StartInt_3 Int (0 1 (str.len Start) (str.indexof Start_2 Start_3 StartInt)))
   (Start_1 String ("1" x (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_5 Start_4 Start_2) (str.from_int StartInt_5) (ite StartBool Start Start_7)))
   (StartInt_8 Int (0 (str.indexof Start Start_6 StartInt_4)))
   (Start_4 String ("a" "" x))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start_6 StartInt_4) (str.to_int Start_1)))
   (StartInt_7 Int (1 0))
   (Start_2 String ("" "0" "b" (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt_2) (ite StartBool Start_5 Start_1)))
   (Start_5 String ("b" (str.++ Start_4 Start_6) (str.at Start_1 StartInt_4) (str.substr Start_6 StartInt_5 StartInt_1) (str.from_int StartInt_3)))
   (Start_12 String (y))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_2 StartBool_6) (str.prefixof Start_7 Start_11) (<= StartInt_5 StartInt_2)))
   (StartInt_5 Int (0 1 (str.to_int Start_4)))
   (Start_3 String ("b" "a" (str.++ Start_2 Start) (str.substr Start_1 StartInt_3 StartInt) (ite StartBool Start_4 Start)))
   (Start_7 String ("b" (str.++ Start_2 Start_6) (str.at Start_3 StartInt_2) (str.substr Start StartInt_5 StartInt) (str.from_int StartInt_5) (ite StartBool_1 Start_5 Start)))
   (StartInt_4 Int (1 (str.to_int Start_3)))
   (StartBool_5 Bool (false true (not StartBool_2) (str.suffixof Start_4 Start_6) (<= StartInt_4 StartInt_2)))
   (Start_6 String ("0" (str.++ Start_4 Start_4) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 (str.len Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.replace "a" x "") x)))

(check-synth)
