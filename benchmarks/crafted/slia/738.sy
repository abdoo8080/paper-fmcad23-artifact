(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_4 String) (StartInt_7 Int) (StartInt_3 Int) (StartInt_6 Int) (StartInt_4 Int) (Start_2 String) (Start_1 String) (Start_9 String) (Start_12 String) (StartInt_5 Int) (StartInt_8 Int) (Start_5 String) (Start_8 String) (Start_11 String) (StartBool_3 Bool) (Start_15 String) (Start_10 String) (Start_7 String) (Start_13 String) (Start_3 String) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_1 Int) (Start_6 String) (StartBool_2 Bool) (Start_14 String))
  ((Start String ("0" y (str.substr Start StartInt_1 StartInt_2) (str.replace Start_1 Start Start) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.to_int Start_3)))
   (StartBool Bool (false true (and StartBool_3 StartBool_3) (str.< Start_13 Start_5) (str.suffixof Start_12 Start_14) (= Start_7 Start_1) (= StartInt_6 StartInt_6) (<= StartInt_3 StartInt_7)))
   (StartBool_4 Bool (false (not StartBool_4) (and StartBool StartBool) (str.contains Start_15 Start_6)))
   (Start_4 String ("1" (str.++ Start_1 Start_4) (str.at Start_3 StartInt_2) (str.substr Start_7 StartInt_1 StartInt) (str.replace Start_2 Start_7 Start_6) (ite StartBool_2 Start_1 Start_1)))
   (StartInt_7 Int (0 1 (str.len Start_5) (str.indexof Start_9 Start_3 StartInt) (str.to_int Start_2)))
   (StartInt_3 Int (0 1 (str.to_int Start_5)))
   (StartInt_6 Int (1 0 (str.len Start) (str.indexof Start_5 Start_5 StartInt_4)))
   (StartInt_4 Int (0 1 (str.len Start_5)))
   (Start_2 String ("0" (str.substr Start StartInt_2 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_3 Start)))
   (Start_1 String (y (str.++ Start_1 Start) (str.replace Start_1 Start_1 Start) (ite StartBool Start_2 Start_2)))
   (Start_9 String ("" "a" "b" y "0" (str.from_int StartInt_1)))
   (Start_12 String ("b" "a" (str.++ Start_7 Start_11) (str.at Start_11 StartInt_7) (str.substr Start StartInt_8 StartInt_6) (str.from_int StartInt_8)))
   (StartInt_5 Int (1 0 (str.len Start_9) (str.indexof Start_2 Start_10 StartInt_4) (str.to_int Start_3)))
   (StartInt_8 Int (0 1))
   (Start_5 String ("b" y (str.++ Start_6 Start_5) (str.substr Start_6 StartInt_1 StartInt_1) (str.from_int StartInt_2)))
   (Start_8 String ("a" "" "0" (str.++ Start_11 Start_6) (str.replace Start Start_9 Start_4)))
   (Start_11 String ("b" "0" (str.++ Start_7 Start_12) (str.at Start_7 StartInt_2) (str.substr Start_2 StartInt_2 StartInt_6) (ite StartBool Start_4 Start_12)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool) (str.< Start_4 Start_5) (str.<= Start_9 Start_9) (str.prefixof Start_12 Start_7) (str.contains Start_6 Start_3)))
   (Start_15 String ("1" "" y "0" "b" (str.at Start_11 StartInt_2) (str.replace Start_1 Start_14 Start_7) (str.from_int StartInt) (ite StartBool_4 Start_11 Start_12)))
   (Start_10 String ("" "1" "0" (str.at Start_1 StartInt_3) (ite StartBool_2 Start_2 Start_2)))
   (Start_7 String ("b" y x (str.at Start_6 StartInt_6)))
   (Start_13 String (x "a" (str.++ Start_10 Start_12) (str.from_int StartInt_6) (ite StartBool_3 Start_5 Start_3)))
   (Start_3 String (y (str.at Start_2 StartInt) (str.replace Start_2 Start Start_3) (ite StartBool_1 Start_4 Start_5)))
   (StartInt_2 Int (0 (str.indexof Start_11 Start_10 StartInt) (str.to_int Start_11)))
   (StartBool_1 Bool (false true (not StartBool_3) (and StartBool_3 StartBool_2) (str.< Start_13 Start_6) (str.prefixof Start_5 Start) (str.suffixof Start_12 Start_5) (str.contains Start_9 Start) (= StartInt_3 StartInt_6) (<= StartInt_8 StartInt_8)))
   (StartInt_1 Int (1 0))
   (Start_6 String ("0" "1" (str.from_int StartInt_3)))
   (StartBool_2 Bool (false (not StartBool_3) (str.suffixof Start_8 Start_1) (= Start_3 Start_3) (= StartInt_4 StartInt_5)))
   (Start_14 String ("" x (str.++ Start Start_10) (str.at Start_15 StartInt_3) (str.replace Start_7 Start_9 Start_15) (ite StartBool_1 Start Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.replace (str.++ "1" "a") x "a"))))

(check-synth)
