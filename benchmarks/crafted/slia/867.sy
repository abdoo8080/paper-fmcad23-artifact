(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (StartBool_2 Bool) (Start_11 String) (StartInt_6 Int) (StartBool_4 Bool) (StartInt_4 Int) (StartInt_1 Int) (Start_13 String) (Start_7 String) (Start_2 String) (Start_4 String) (Start_3 String) (Start_1 String) (StartInt_2 Int) (StartInt_5 Int) (StartInt_10 Int) (Start_6 String) (StartBool_1 Bool) (StartInt_7 Int) (StartBool_3 Bool) (Start_9 String) (Start_10 String) (Start_8 String) (Start_5 String) (Start_14 String) (StartInt_3 Int) (Start_12 String) (StartInt_8 Int) (StartInt_9 Int) (StartInt_11 Int) (Start_15 String))
  ((Start String (x "a" (str.substr Start StartInt_1 StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_7 Start_9 StartInt_7)))
   (StartBool Bool (true (not StartBool_4) (str.<= Start_6 Start_7) (str.prefixof Start_14 Start_11) (str.suffixof Start_13 Start_14) (str.contains Start_16 Start_14) (= Start_13 Start_8)))
   (Start_16 String ("0" (str.substr Start_8 StartInt_2 StartInt_7) (str.from_int StartInt_7)))
   (StartBool_2 Bool (true (str.<= Start_5 Start_5) (str.prefixof Start_4 Start_5) (str.contains Start_2 Start_4)))
   (Start_11 String ("a" (str.++ Start_6 Start) (str.at Start_11 StartInt_5) (str.substr Start_3 StartInt_1 StartInt)))
   (StartInt_6 Int (0 (str.len Start_2) (str.indexof Start_5 Start_8 StartInt_6) (str.to_int Start_9)))
   (StartBool_4 Bool (false (not StartBool_2) (and StartBool_4 StartBool_3) (str.prefixof Start_4 Start_5) (= Start_3 Start_1) (= StartInt_5 StartInt_4) (<= StartInt StartInt_3)))
   (StartInt_4 Int (1 (str.to_int Start_1)))
   (StartInt_1 Int (0 (str.indexof Start_13 Start_11 StartInt_7) (str.to_int Start_2)))
   (Start_13 String (y "b" "a" "0" (str.++ Start_13 Start_1) (str.substr Start_8 StartInt_4 StartInt_6) (str.replace Start_10 Start_7 Start_4) (ite StartBool_3 Start_8 Start_16)))
   (Start_7 String ("0" (str.++ Start_5 Start_1) (str.replace Start_9 Start_3 Start_4) (ite StartBool_3 Start_8 Start_12)))
   (Start_2 String ("" "a" y x "0" "b" (str.replace Start Start Start_4) (ite StartBool_2 Start_1 Start_2)))
   (Start_4 String ("1" "a" "b" (str.++ Start Start_1) (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_3 StartInt_3) (str.replace Start_1 Start_4 Start_2) (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start_3)))
   (Start_3 String ("1" (str.++ Start_2 Start_2) (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_1 Start_3 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_1)))
   (Start_1 String ("a" y (str.++ Start Start) (str.at Start StartInt) (str.substr Start_2 StartInt_2 StartInt_3) (str.replace Start_3 Start Start_1)))
   (StartInt_2 Int (0 (str.len Start_1) (str.indexof Start_4 Start_2 StartInt) (str.to_int Start)))
   (StartInt_5 Int (1 (str.indexof Start_6 Start_2 StartInt_3)))
   (StartInt_10 Int (1 (str.indexof Start_13 Start_13 StartInt_11)))
   (Start_6 String ("" "a" x (str.++ Start Start) (str.at Start_7 StartInt_6) (str.substr Start_2 StartInt_1 StartInt_3) (str.from_int StartInt_7) (ite StartBool_1 Start_7 Start)))
   (StartBool_1 Bool (false true (str.< Start_13 Start_12) (str.prefixof Start_14 Start_10) (= Start_15 Start_13) (<= StartInt_9 StartInt_4)))
   (StartInt_7 Int (1 0 (str.len Start_6)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool_4) (str.contains Start_6 Start_6) (= Start Start_6)))
   (Start_9 String ("a" y (str.++ Start_7 Start) (str.replace Start_4 Start Start) (ite StartBool_3 Start_8 Start_10)))
   (Start_10 String (y "1" (str.++ Start_4 Start_5) (str.replace Start_5 Start_5 Start_11) (str.from_int StartInt_5) (ite StartBool_4 Start_4 Start_6)))
   (Start_8 String ("b" "1" (str.substr Start_5 StartInt_4 StartInt_4)))
   (Start_5 String (x (str.at Start_5 StartInt_2) (str.replace Start_3 Start_6 Start_2) (ite StartBool_3 Start_4 Start_5)))
   (Start_14 String (y "0" "1" "" "b" (str.++ Start_12 Start) (str.at Start_10 StartInt_3) (str.replace Start Start_6 Start_5)))
   (StartInt_3 Int (0 (str.len Start_3) (str.indexof Start_3 Start_3 StartInt_2)))
   (Start_12 String (y "1" "b" (str.at Start_3 StartInt_8)))
   (StartInt_8 Int (0 1 (str.len Start_4) (str.indexof Start_4 Start_6 StartInt_3)))
   (StartInt_9 Int (0 1 (str.indexof Start_12 Start_1 StartInt_10) (str.to_int Start_13)))
   (StartInt_11 Int (0 (str.indexof Start_4 Start_5 StartInt_9)))
   (Start_15 String (y (str.at Start_6 StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "0" y) "b" "0")))

(check-synth)
