(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_20 String) (StartInt_12 Int) (Start_19 String) (Start_1 String) (Start_5 String) (StartBool_7 Bool) (StartInt_3 Int) (Start_10 String) (Start_18 String) (Start_17 String) (StartBool_2 Bool) (Start_7 String) (StartBool_5 Bool) (StartBool_1 Bool) (StartInt_11 Int) (Start_6 String) (Start_2 String) (StartBool_4 Bool) (StartInt_6 Int) (StartInt_4 Int) (Start_3 String) (StartBool_3 Bool) (Start_4 String) (StartInt_1 Int) (StartInt_8 Int) (Start_8 String) (Start_9 String) (StartInt_10 Int) (Start_11 String) (StartInt_2 Int) (StartInt_7 Int) (Start_12 String) (StartInt_9 Int) (StartBool_6 Bool) (StartInt_5 Int) (Start_15 String) (Start_14 String) (Start_13 String) (Start_16 String))
  ((Start String (y (str.++ Start_1 Start_2) (str.at Start_2 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.len Start_19) (str.indexof Start_8 Start_17 StartInt_5) (str.to_int Start_6)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_2 StartBool_2) (str.<= Start_2 Start_20) (str.prefixof Start_15 Start_19) (str.suffixof Start_2 Start_1) (str.contains Start_16 Start_16) (<= StartInt_12 StartInt_5)))
   (Start_20 String ("" (str.at Start_5 StartInt_1) (str.substr Start_5 StartInt_7 StartInt_4) (ite StartBool_7 Start_14 Start_3)))
   (StartInt_12 Int (0 1 (str.to_int Start_6)))
   (Start_19 String ("" (str.++ Start_4 Start_9) (str.substr Start_19 StartInt_2 StartInt_2) (ite StartBool Start_9 Start_16)))
   (Start_1 String ("b" (str.at Start_6 StartInt_10) (str.substr Start_1 StartInt_11 StartInt_3) (str.from_int StartInt_1) (ite StartBool_7 Start_10 Start)))
   (Start_5 String ("0" (str.at Start_4 StartInt) (str.substr Start_7 StartInt_4 StartInt_6) (str.replace Start_9 Start_16 Start_7) (str.from_int StartInt_3) (ite StartBool_5 Start_18 Start_15)))
   (StartBool_7 Bool (true false (not StartBool_6) (str.< Start_10 Start_16) (str.prefixof Start_4 Start_16) (str.contains Start_8 Start_5) (<= StartInt_9 StartInt)))
   (StartInt_3 Int (0 1))
   (Start_10 String ("1" "b" "" x "a" (str.++ Start_11 Start_2) (str.substr Start_13 StartInt_3 StartInt_3) (str.replace Start_6 Start_1 Start_7) (str.from_int StartInt_7) (ite StartBool_3 Start Start_7)))
   (Start_18 String (y "1" (str.++ Start_17 Start_6) (str.at Start_15 StartInt) (str.substr Start_3 StartInt_7 StartInt)))
   (Start_17 String ("a" (str.++ Start_17 Start_2) (str.at Start_2 StartInt_1) (str.from_int StartInt_10)))
   (StartBool_2 Bool (false (and StartBool_3 StartBool) (str.<= Start_5 Start_6) (str.prefixof Start_3 Start_4) (= Start_7 Start_3) (= StartInt_1 StartInt_2)))
   (Start_7 String (x (str.replace Start_1 Start_3 Start_6)))
   (StartBool_5 Bool (false true (not StartBool_2) (and StartBool_6 StartBool_4) (str.<= Start_1 Start_11) (str.suffixof Start_7 Start_5) (str.contains Start Start_16) (<= StartInt StartInt)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool_2) (str.prefixof Start_6 Start_3) (str.contains Start_1 Start_7) (= StartInt_1 StartInt_2)))
   (StartInt_11 Int (0 1 (str.indexof Start_10 Start_17 StartInt_10) (str.to_int Start_18)))
   (Start_6 String (x "a" (str.++ Start_7 Start_2) (ite StartBool_4 Start_3 Start_8)))
   (Start_2 String (y "0" (str.++ Start_2 Start_3) (str.substr Start_2 StartInt_4 StartInt_2) (str.replace Start_1 Start_5 Start_6) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_6)))
   (StartBool_4 Bool (true false (not StartBool_7) (str.suffixof Start_7 Start_15) (str.contains Start_16 Start_1) (= StartInt_2 StartInt_4)))
   (StartInt_6 Int (0 1 (str.to_int Start_14)))
   (StartInt_4 Int (0 (str.len Start_3) (str.indexof Start_4 Start_4 StartInt_3) (str.to_int Start_1)))
   (Start_3 String ("0" (str.substr Start_4 StartInt_1 StartInt_4) (ite StartBool Start_4 Start_2)))
   (StartBool_3 Bool (false (not StartBool_2)))
   (Start_4 String ("" "a" "b"))
   (StartInt_1 Int (0 1 (str.indexof Start Start_1 StartInt_2)))
   (StartInt_8 Int (1 0))
   (Start_8 String ("0" (str.++ Start_9 Start_5)))
   (Start_9 String ("" "a" (str.++ Start_8 Start_10) (str.substr Start_4 StartInt_5 StartInt_1) (str.replace Start_8 Start_9 Start_11) (str.from_int StartInt_5) (ite StartBool_3 Start_7 Start_7)))
   (StartInt_10 Int (0 (str.len Start_17) (str.indexof Start_15 Start_5 StartInt_10)))
   (Start_11 String ("b" (str.++ Start_12 Start_3) (str.at Start_3 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start_3 Start_4 StartInt_3)))
   (StartInt_7 Int (1 (str.len Start_7) (str.indexof Start_6 Start StartInt_5)))
   (Start_12 String ("0" (str.++ Start_4 Start_4) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_10)))
   (StartInt_9 Int (0 1 (str.indexof Start_1 Start_14 StartInt_10) (str.to_int Start_1)))
   (StartBool_6 Bool (false (str.< Start_12 Start_10) (str.<= Start_2 Start_1) (str.prefixof Start_3 Start_1) (str.suffixof Start Start_4) (str.contains Start_12 Start_12) (= Start_8 Start_16)))
   (StartInt_5 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_13 StartInt) (str.to_int Start_4)))
   (Start_15 String ("b" (str.substr Start_4 StartInt_7 StartInt_4)))
   (Start_14 String ("a" (str.++ Start_10 Start_4) (str.at Start_13 StartInt_1) (str.substr Start_9 StartInt_6 StartInt_1) (str.replace Start_9 Start_13 Start_2) (str.from_int StartInt_1) (ite StartBool_5 Start_15 Start_1)))
   (Start_13 String ("b" "a" "0" x (str.at Start_14 StartInt_3) (str.from_int StartInt_6) (ite StartBool_3 Start_3 Start_10)))
   (Start_16 String ("0" (str.++ Start_9 Start_8) (str.at Start_10 StartInt_7) (str.substr Start_5 StartInt_6 StartInt_8) (ite StartBool_1 Start_13 Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "1" y) "b" "")))

(check-synth)
