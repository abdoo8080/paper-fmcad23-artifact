(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_20 String) (Start_1 String) (Start_19 String) (StartBool_3 Bool) (Start_7 String) (StartInt_4 Int) (StartInt_5 Int) (StartBool_2 Bool) (StartBool_4 Bool) (Start_4 String) (Start_9 String) (Start_18 String) (Start_3 String) (StartInt_7 Int) (StartInt_6 Int) (Start_10 String) (Start_17 String) (StartInt_2 Int) (Start_14 String) (Start_13 String) (Start_8 String) (Start_11 String) (StartBool_5 Bool) (StartInt_3 Int) (Start_12 String) (Start_2 String) (Start_16 String) (StartInt_9 Int) (StartInt_8 Int) (StartBool_1 Bool) (Start_6 String) (StartInt_1 Int) (Start_5 String) (Start_15 String))
  ((Start String ("b" "a" x (str.++ Start Start) (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_2 Start_3 Start_3)))
   (StartInt Int (1 0 (str.indexof Start_15 Start_3 StartInt_3) (str.to_int Start_2)))
   (StartBool Bool (true (not StartBool_5) (and StartBool StartBool) (str.contains Start_10 Start_20)))
   (Start_20 String ("a" "" (str.++ Start_19 Start_7) (ite StartBool_4 Start_19 Start)))
   (Start_1 String ("b" (str.++ Start_8 Start_9) (str.at Start_6 StartInt_3) (str.replace Start_9 Start_17 Start_15) (str.from_int StartInt_5)))
   (Start_19 String (x "" y (str.++ Start_9 Start_18) (str.replace Start_18 Start_8 Start_4) (str.from_int StartInt)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool_1 StartBool_4) (str.< Start_3 Start_6) (str.suffixof Start_2 Start_6) (= Start_7 Start_3) (<= StartInt_3 StartInt_4)))
   (Start_7 String (y "1" (str.++ Start Start_6) (str.at Start_6 StartInt_1) (str.replace Start_1 Start Start_6) (str.from_int StartInt)))
   (StartInt_4 Int (1 0 (str.len Start_3) (str.indexof Start_4 Start_7 StartInt_4)))
   (StartInt_5 Int (1 0 (str.indexof Start_5 Start_11 StartInt_4) (str.to_int Start_3)))
   (StartBool_2 Bool (true (and StartBool StartBool_3) (str.<= Start_6 Start_4) (str.prefixof Start_1 Start_3) (<= StartInt_1 StartInt_1)))
   (StartBool_4 Bool (true (and StartBool_5 StartBool) (str.prefixof Start_8 Start_9) (str.suffixof Start Start_7) (str.contains Start_3 Start) (= Start_10 Start_5)))
   (Start_4 String ("a" (str.++ Start_4 Start_1) (str.from_int StartInt_3) (ite StartBool_1 Start Start_5)))
   (Start_9 String ("1" (str.++ Start_4 Start_11) (str.at Start StartInt_2) (str.substr Start_7 StartInt_6 StartInt_2) (ite StartBool_1 Start_12 Start_7)))
   (Start_18 String ("1" (str.++ Start_7 Start_19) (str.substr Start_17 StartInt StartInt_4) (str.from_int StartInt_7)))
   (Start_3 String ("a" (str.at Start_4 StartInt) (str.replace Start_3 Start_4 Start)))
   (StartInt_7 Int (1 (str.len Start_14)))
   (StartInt_6 Int (0 1))
   (Start_10 String ("" x "1" "0" y (str.substr Start_4 StartInt_1 StartInt_3) (str.from_int StartInt_5) (ite StartBool_1 Start_1 Start_8)))
   (Start_17 String ("1" (str.++ Start_18 Start_5) (str.replace Start_8 Start_14 Start_17)))
   (StartInt_2 Int (0 (str.len Start_16) (str.to_int Start_15)))
   (Start_14 String (x "" (str.at Start_8 StartInt_8) (str.from_int StartInt_4)))
   (Start_13 String ("1" (str.++ Start_2 Start_6) (str.replace Start_7 Start_13 Start) (ite StartBool_2 Start_9 Start)))
   (Start_8 String ("b" (str.substr Start_3 StartInt_5 StartInt_3)))
   (Start_11 String ("b" "1" "" "0" (str.++ Start_6 Start_11) (str.substr Start_3 StartInt StartInt_6) (str.replace Start_1 Start_4 Start) (str.from_int StartInt_2)))
   (StartBool_5 Bool (false true (not StartBool_4) (str.<= Start_7 Start_6) (str.prefixof Start_10 Start_5) (str.suffixof Start_7 Start_12) (= Start_7 Start_11) (= StartInt_3 StartInt_7) (<= StartInt_8 StartInt_9)))
   (StartInt_3 Int (0 1 (str.len Start_15)))
   (Start_12 String (x "1" (str.++ Start_9 Start_13) (str.replace Start_11 Start_6 Start_3)))
   (Start_2 String (x "" "1" "0" (str.substr Start_3 StartInt_6 StartInt_7)))
   (Start_16 String (x (str.++ Start_8 Start_8) (str.replace Start_16 Start_17 Start_6) (str.from_int StartInt_9)))
   (StartInt_9 Int (0 1 (str.len Start_9) (str.indexof Start_4 Start_11 StartInt_4)))
   (StartInt_8 Int (1 0 (str.to_int Start)))
   (StartBool_1 Bool (true (not StartBool) (str.contains Start_12 Start_7) (= Start_14 Start_10)))
   (Start_6 String (x (str.++ Start_12 Start_6) (str.at Start_13 StartInt_4) (str.replace Start_4 Start_10 Start_9)))
   (StartInt_1 Int (0 (str.indexof Start_4 Start_20 StartInt_9)))
   (Start_5 String ("a" "b" x (str.at Start StartInt_1) (str.substr Start StartInt StartInt_3) (str.replace Start_1 Start Start_6) (ite StartBool_2 Start_2 Start_7)))
   (Start_15 String ("" (str.++ Start_6 Start_3) (str.at Start_7 StartInt_8) (str.substr Start StartInt_9 StartInt_3) (str.replace Start_2 Start_4 Start) (ite StartBool Start_9 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 1) x)))

(check-synth)
