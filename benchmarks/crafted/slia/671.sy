(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartBool_5 Bool) (Start_18 String) (Start_17 String) (Start_7 String) (StartInt_8 Int) (StartInt_6 Int) (StartBool_4 Bool) (Start_6 String) (Start_3 String) (Start_10 String) (Start_19 String) (Start_14 String) (Start_5 String) (StartInt_5 Int) (StartInt_1 Int) (Start_8 String) (Start_1 String) (StartInt_3 Int) (Start_11 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_2 String) (Start_4 String) (Start_9 String) (Start_13 String) (StartBool_1 Bool) (Start_12 String) (StartInt_7 Int) (Start_15 String) (StartInt_2 Int) (Start_16 String))
  ((Start String ("a" x "1" (str.replace Start Start Start) (ite StartBool Start Start)))
   (StartInt Int (1 (str.to_int Start_1)))
   (StartBool Bool (false (not StartBool) (and StartBool_3 StartBool_4) (str.<= Start_11 Start_1) (str.prefixof Start_10 Start_12) (str.suffixof Start_2 Start_1) (str.contains Start_13 Start_13) (= StartInt StartInt_5)))
   (StartBool_3 Bool (true false (str.<= Start_5 Start_18) (str.suffixof Start_2 Start_10)))
   (StartBool_5 Bool (false (not StartBool_3) (and StartBool_1 StartBool_4) (str.prefixof Start_3 Start_18) (str.suffixof Start_2 Start_15) (str.contains Start_9 Start_6) (= Start_10 Start_12) (<= StartInt_3 StartInt)))
   (Start_18 String ("b" y "" "1" x "0" (str.substr Start_14 StartInt_8 StartInt_5) (str.replace Start_19 Start_19 Start_11) (str.from_int StartInt_5)))
   (Start_17 String ("a" "1" (str.replace Start_6 Start_4 Start_10) (str.from_int StartInt_1) (ite StartBool_4 Start_18 Start_13)))
   (Start_7 String (x "1" (str.at Start StartInt_4) (str.substr Start StartInt_3 StartInt_2) (str.replace Start_2 Start Start_4) (str.from_int StartInt_5) (ite StartBool_1 Start_5 Start_8)))
   (StartInt_8 Int (0 (str.len Start_2) (str.indexof Start_18 Start_7 StartInt_7)))
   (StartInt_6 Int (1 0 (str.len Start_13) (str.indexof Start_7 Start_3 StartInt_6)))
   (StartBool_4 Bool (true (not StartBool_4) (and StartBool StartBool_5) (str.prefixof Start_10 Start_17) (str.suffixof Start_8 Start_15) (str.contains Start_12 Start_11)))
   (Start_6 String ("b" (str.++ Start Start_4) (str.at Start_3 StartInt_3) (ite StartBool_1 Start_2 Start_1)))
   (Start_3 String (y "0" (str.++ Start Start_2) (str.from_int StartInt_3) (ite StartBool_1 Start Start)))
   (Start_10 String ("b" y "a" "" x (str.at Start_4 StartInt) (str.replace Start_4 Start_9 Start_3)))
   (Start_19 String (x (str.++ Start_16 Start_12)))
   (Start_14 String ("0" (str.++ Start_10 Start_2) (str.at Start_10 StartInt_1) (str.substr Start_12 StartInt_4 StartInt_5) (str.from_int StartInt_1)))
   (Start_5 String ("b" (str.at Start_3 StartInt_3) (str.replace Start_6 Start_4 Start_6) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_6)))
   (StartInt_5 Int (1 (str.len Start_1) (str.indexof Start_4 Start_1 StartInt_2) (str.to_int Start_9)))
   (StartInt_1 Int (1 (str.to_int Start_3)))
   (Start_8 String (y "b" (str.++ Start_8 Start_6) (str.substr Start_5 StartInt_1 StartInt_2) (str.replace Start Start_7 Start_2) (str.from_int StartInt)))
   (Start_1 String (y "1" (str.++ Start_2 Start_2) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start Start_1 Start_2)))
   (StartInt_3 Int (0 1))
   (Start_11 String (y "" "1" (str.from_int StartInt_1)))
   (StartInt_4 Int (1 (str.len Start_4) (str.indexof Start_2 Start_10 StartInt) (str.to_int Start_7)))
   (StartBool_2 Bool (false true (str.< Start_3 Start_1) (str.prefixof Start_8 Start_3) (str.suffixof Start_6 Start_9)))
   (Start_2 String ("" (str.substr Start_6 StartInt_5 StartInt_1) (str.replace Start_3 Start_4 Start_3)))
   (Start_4 String ("" (str.++ Start_4 Start) (str.substr Start StartInt_2 StartInt) (str.replace Start_3 Start_1 Start_3) (ite StartBool_1 Start_7 Start_2)))
   (Start_9 String (y "a" (str.at Start_6 StartInt_5) (str.substr Start_10 StartInt_5 StartInt_5)))
   (Start_13 String (x "1" y "" (str.++ Start_13 Start_7) (str.at Start_13 StartInt) (str.substr Start_8 StartInt_2 StartInt) (str.from_int StartInt_6) (ite StartBool_2 Start_14 Start)))
   (StartBool_1 Bool (true (not StartBool_2) (str.<= Start_4 Start_2) (str.prefixof Start_5 Start_1) (str.contains Start Start_3)))
   (Start_12 String ("0" (str.++ Start_15 Start_15) (str.substr Start_7 StartInt_7 StartInt_3) (str.from_int StartInt_2)))
   (StartInt_7 Int (0))
   (Start_15 String ("a" (str.++ Start_12 Start_13) (str.replace Start_10 Start_15 Start_11) (ite StartBool_4 Start_1 Start_16)))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start_2 StartInt) (str.to_int Start_2)))
   (Start_16 String (y "1" "" (str.++ Start_12 Start_14) (str.substr Start_15 StartInt_5 StartInt_5) (str.replace Start_4 Start_6 Start_11) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.from_int (str.indexof y "0" 1)) (str.replace "1" "" "0"))))

(check-synth)
