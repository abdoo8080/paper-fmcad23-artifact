(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_3 String) (StartBool_6 Bool) (StartInt_2 Int) (StartBool_5 Bool) (Start_8 String) (StartInt_5 Int) (Start_6 String) (Start_7 String) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_6 Int) (Start_2 String) (StartBool_2 Bool) (StartBool_3 Bool) (Start_5 String) (Start_4 String) (StartInt_3 Int) (Start_12 String) (Start_11 String) (StartInt_1 Int) (Start_9 String) (Start_1 String) (StartBool_4 Bool) (Start_10 String))
  ((Start String ("a" "0" (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start_1) (ite StartBool Start_2 Start_1)))
   (StartInt Int (1 0 (str.indexof Start_6 Start_4 StartInt_1)))
   (StartBool Bool (false true (not StartBool_4) (str.< Start_6 Start_5) (str.<= Start_5 Start_8) (= Start_10 Start) (= StartInt_2 StartInt_2) (<= StartInt_6 StartInt_7)))
   (StartInt_7 Int (0 (str.to_int Start_4)))
   (Start_3 String ("1" x "b" y (str.substr Start_8 StartInt_2 StartInt_2) (str.from_int StartInt_6)))
   (StartBool_6 Bool (false (str.< Start_6 Start) (str.<= Start Start_11) (str.prefixof Start_9 Start_6) (= Start_9 Start_7) (= StartInt_4 StartInt_3)))
   (StartInt_2 Int (0 1 (str.len Start_2)))
   (StartBool_5 Bool (true false (not StartBool) (and StartBool_2 StartBool_6) (str.<= Start_2 Start_1) (str.suffixof Start_8 Start_2) (str.contains Start_10 Start_5) (= Start_8 Start_8) (= StartInt_3 StartInt_3)))
   (Start_8 String ("a" (str.at Start_3 StartInt_2) (str.substr Start_9 StartInt_2 StartInt_4)))
   (StartInt_5 Int (0 1 (str.to_int Start_1)))
   (Start_6 String ("0" "1" "b" "" (str.substr Start_12 StartInt_2 StartInt_4) (str.replace Start_10 Start_6 Start_5) (str.from_int StartInt_3)))
   (Start_7 String ("a" "b" (str.++ Start_1 Start_1) (str.at Start_3 StartInt_3) (str.substr Start_7 StartInt_1 StartInt_3) (ite StartBool_1 Start_5 Start_3)))
   (StartInt_4 Int (0 (str.len Start_8) (str.to_int Start_9)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_2) (= Start_3 Start) (= StartInt StartInt) (<= StartInt StartInt)))
   (StartInt_6 Int (0 1 (str.len Start_12) (str.indexof Start_10 Start StartInt_5) (str.to_int Start_4)))
   (Start_2 String (x "1" (str.++ Start Start_3) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool) (str.prefixof Start Start_1) (str.suffixof Start_2 Start_4) (str.contains Start_4 Start) (= Start_1 Start_3) (<= StartInt StartInt)))
   (StartBool_3 Bool (true false (not StartBool) (str.suffixof Start Start_1) (str.contains Start_4 Start_4) (= StartInt_1 StartInt)))
   (Start_5 String ("" x (str.++ Start Start_6) (str.substr Start_4 StartInt_2 StartInt_1) (str.replace Start_5 Start_1 Start_4) (ite StartBool_4 Start_7 Start)))
   (Start_4 String ("b" "0" (str.at Start_2 StartInt) (str.replace Start_4 Start_1 Start_5) (str.from_int StartInt) (ite StartBool_3 Start_1 Start_4)))
   (StartInt_3 Int (1 (str.indexof Start_7 Start_2 StartInt_4)))
   (Start_12 String (y (str.substr Start_10 StartInt_5 StartInt_1) (str.replace Start_12 Start_11 Start_4)))
   (Start_11 String ("1" "" "b" y))
   (StartInt_1 Int (0))
   (Start_9 String ("a" (str.at Start_10 StartInt) (str.replace Start Start_2 Start_5) (str.from_int StartInt_4)))
   (Start_1 String (y "b" "a" (str.++ Start Start_7) (str.substr Start_6 StartInt_5 StartInt_6) (str.from_int StartInt_6) (ite StartBool_4 Start_6 Start_1)))
   (StartBool_4 Bool (true false (not StartBool_5) (and StartBool_5 StartBool_4) (str.< Start_7 Start_10) (str.suffixof Start_8 Start_1)))
   (Start_10 String ("a" "" (str.++ Start_4 Start) (str.at Start_9 StartInt_1) (str.substr Start_3 StartInt_4 StartInt_5) (str.replace Start_6 Start_1 Start_4) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.replace y "" "a") "0")))

(check-synth)
