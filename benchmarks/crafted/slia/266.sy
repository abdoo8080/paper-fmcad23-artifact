(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_5 Int) (Start_12 String) (StartBool_3 Bool) (StartInt_4 Int) (Start_11 String) (StartInt_6 Int) (Start_13 String) (Start_10 String) (Start_9 String) (Start_3 String) (Start_2 String) (Start_6 String) (StartInt_1 Int) (StartBool_4 Bool) (Start_4 String) (StartInt_7 Int) (StartInt_2 Int) (Start_8 String) (Start_1 String) (Start_7 String) (Start_5 String) (StartInt_3 Int) (StartBool_1 Bool) (StartBool_2 Bool))
  ((Start String ("1" (str.++ Start_1 Start) (str.replace Start_1 Start_2 Start_2)))
   (StartInt Int (0 (str.to_int Start_13)))
   (StartBool Bool (true false (not StartBool_4) (and StartBool_3 StartBool_2) (str.<= Start_12 Start_12) (str.prefixof Start_9 Start_12) (str.suffixof Start_13 Start_2) (= Start_1 Start_5) (= StartInt StartInt)))
   (StartInt_8 Int (1 0))
   (StartInt_5 Int (1 0 (str.len Start_12)))
   (Start_12 String ("1" y (str.++ Start_10 Start_1) (str.substr Start_6 StartInt_7 StartInt_4) (str.replace Start_3 Start_6 Start_7) (ite StartBool_1 Start_12 Start_12)))
   (StartBool_3 Bool (false (str.<= Start_7 Start_12) (str.contains Start_3 Start_2)))
   (StartInt_4 Int (1 (str.len Start_10)))
   (Start_11 String (y (str.replace Start_1 Start_10 Start_1) (str.from_int StartInt_7) (ite StartBool_3 Start_4 Start_9)))
   (StartInt_6 Int (0 1 (str.len Start_11)))
   (Start_13 String ("0" (str.++ Start Start_5) (str.at Start_3 StartInt_4) (str.substr Start_2 StartInt_7 StartInt_8) (str.from_int StartInt_3)))
   (Start_10 String ("" x (ite StartBool_1 Start_8 Start_5)))
   (Start_9 String (y x "a" (str.++ Start_5 Start_5) (str.replace Start_10 Start_2 Start_10) (ite StartBool_4 Start_6 Start_3)))
   (Start_3 String ("" (str.at Start_1 StartInt_2) (str.replace Start Start_3 Start_1) (ite StartBool Start_1 Start_4)))
   (Start_2 String ("b" "0" "" y (str.++ Start_1 Start_3) (str.from_int StartInt_1)))
   (Start_6 String ("1" "b" y "0" "a" x (str.++ Start Start_7) (str.substr Start StartInt_3 StartInt_3) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start_3 Start_3 StartInt)))
   (StartBool_4 Bool (false true (str.contains Start_7 Start_8) (= StartInt_2 StartInt)))
   (Start_4 String ("a" "0" (str.++ Start_4 Start) (str.from_int StartInt_2)))
   (StartInt_7 Int (0 1 (str.to_int Start_2)))
   (StartInt_2 Int (1 0 (str.to_int Start_4)))
   (Start_8 String ("" (str.at Start_8 StartInt_6) (str.replace Start_4 Start_2 Start_7) (str.from_int StartInt_3) (ite StartBool_1 Start_9 Start_2)))
   (Start_1 String ("0" (str.at Start_4 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_2 Start Start_1) (str.from_int StartInt_2) (ite StartBool Start_5 Start_6)))
   (Start_7 String ("0" x "" (str.++ Start_3 Start_1) (str.at Start_1 StartInt_3) (str.replace Start_3 Start_3 Start_2) (ite StartBool Start_6 Start_2)))
   (Start_5 String ("a" (str.substr Start_5 StartInt_4 StartInt_5) (ite StartBool_1 Start_6 Start_1)))
   (StartInt_3 Int (1 (str.len Start_7) (str.to_int Start_2)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_2 StartBool_1) (str.<= Start_5 Start_3) (str.suffixof Start_7 Start_7) (= Start_4 Start_1)))
   (StartBool_2 Bool (false (and StartBool StartBool_3) (str.< Start_4 Start) (str.suffixof Start_7 Start_8) (str.contains Start_9 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.at x 0) "")))

(check-synth)
