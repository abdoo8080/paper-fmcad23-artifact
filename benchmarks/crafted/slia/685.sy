(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartInt_8 Int) (StartBool_2 Bool) (Start_6 String) (StartBool_3 Bool) (StartBool_1 Bool) (Start_7 String) (Start_4 String) (StartInt_6 Int) (Start_2 String) (StartInt_3 Int) (StartInt_5 Int) (Start_9 String) (Start_11 String) (Start_5 String) (StartInt_2 Int) (StartInt_4 Int) (StartInt_7 Int) (Start_8 String) (Start_3 String) (StartBool_4 Bool) (StartInt_1 Int) (Start_10 String) (Start_1 String) (Start_13 String) (Start_12 String) (Start_14 String) (StartBool_5 Bool))
  ((Start String (y (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_3) (str.replace Start_2 Start_1 Start) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start_1) (str.to_int Start_2)))
   (StartBool Bool (true (and StartBool_1 StartBool_4) (str.< Start_11 Start_2) (str.contains Start_7 Start_8) (<= StartInt StartInt_5)))
   (Start_15 String ("1" (str.replace Start_12 Start_7 Start_12)))
   (StartInt_8 Int (0 1 (str.len Start_8)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_3 StartBool_1) (str.contains Start Start_3) (= Start_7 Start) (<= StartInt_6 StartInt)))
   (Start_6 String ("0" (str.++ Start_1 Start_5) (str.replace Start_2 Start_6 Start_4)))
   (StartBool_3 Bool (true false (not StartBool_3) (str.< Start_4 Start_5) (str.suffixof Start_7 Start_6) (= StartInt StartInt_5)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (str.< Start_7 Start) (str.prefixof Start_6 Start_7) (str.contains Start_1 Start_1)))
   (Start_7 String ("1" "" (str.++ Start_2 Start_3)))
   (Start_4 String ("1" "" (str.++ Start_2 Start_5) (ite StartBool_1 Start_4 Start_6)))
   (StartInt_6 Int (1 0))
   (Start_2 String ("1" (str.substr Start_3 StartInt_4 StartInt_3) (str.replace Start_2 Start Start_4) (str.from_int StartInt_1) (ite StartBool Start_2 Start)))
   (StartInt_3 Int (0))
   (StartInt_5 Int (1 0 (str.to_int Start_3)))
   (Start_9 String ("a" (str.++ Start_2 Start_5) (str.substr Start_8 StartInt_2 StartInt_4) (str.replace Start Start_8 Start_5)))
   (Start_11 String ("1" y "a" (str.substr Start_7 StartInt_3 StartInt_7) (str.replace Start_4 Start_8 Start_4) (ite StartBool_3 Start_12 Start_1)))
   (Start_5 String (y (str.at Start_5 StartInt_5) (str.replace Start_5 Start_2 Start_4)))
   (StartInt_2 Int (0 1 (str.indexof Start Start_1 StartInt_1) (str.to_int Start_2)))
   (StartInt_4 Int (0 (str.indexof Start_8 Start_4 StartInt_4) (str.to_int Start_9)))
   (StartInt_7 Int (0 (str.len Start_6) (str.indexof Start Start_7 StartInt) (str.to_int Start_7)))
   (Start_8 String ("a" (str.substr Start_6 StartInt_4 StartInt_6) (str.replace Start_1 Start_4 Start_5) (str.from_int StartInt_4) (ite StartBool_3 Start_1 Start_1)))
   (Start_3 String ("a" (str.substr Start_5 StartInt_7 StartInt_5) (str.replace Start_2 Start_10 Start_2) (str.from_int StartInt_7)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool_1) (str.< Start_7 Start_12) (str.<= Start_9 Start_13) (str.prefixof Start_14 Start) (str.suffixof Start_1 Start_11)))
   (StartInt_1 Int (1 0 (str.len Start_10)))
   (Start_10 String ("1" "" x "0" (str.at Start_4 StartInt_3) (str.replace Start_7 Start_3 Start_7) (ite StartBool_3 Start Start_2)))
   (Start_1 String ("b" (ite StartBool_2 Start_1 Start_6)))
   (Start_13 String ("b" (str.++ Start_10 Start_14) (str.at Start_6 StartInt_2) (str.substr Start StartInt_4 StartInt_7) (str.replace Start Start_6 Start_5) (ite StartBool_5 Start_7 Start_1)))
   (Start_12 String ("a" (str.replace Start_6 Start_12 Start_1) (str.from_int StartInt_2)))
   (Start_14 String (x (str.++ Start Start_9) (str.at Start_10 StartInt_7) (str.from_int StartInt_4)))
   (StartBool_5 Bool (true false (and StartBool_3 StartBool_1) (str.< Start_4 Start_5) (str.<= Start_14 Start_8) (str.prefixof Start_1 Start_2) (str.suffixof Start_12 Start) (str.contains Start_6 Start_15) (= Start_5 Start_6) (= StartInt_8 StartInt_2) (<= StartInt StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (<= (str.len y) 1) x y)))

(check-synth)
