(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_2 String) (StartInt_6 Int) (Start_14 String) (Start_13 String) (Start_5 String) (StartInt_5 Int) (Start_15 String) (Start_6 String) (StartBool_1 Bool) (Start_1 String) (Start_12 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_8 String) (StartInt_3 Int) (StartInt_1 Int) (Start_7 String) (Start_4 String) (Start_10 String) (Start_11 String) (Start_3 String) (Start_9 String) (StartInt_4 Int))
  ((Start String (x (str.++ Start_1 Start) (str.substr Start_1 StartInt StartInt_1) (str.replace Start Start Start_1) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start_2) (str.indexof Start_3 Start_1 StartInt_2)))
   (StartBool Bool (false true (not StartBool) (str.< Start_14 Start_15) (str.<= Start_6 Start_13) (str.contains Start_14 Start_5) (= StartInt_7 StartInt_6) (<= StartInt_4 StartInt_3)))
   (StartInt_7 Int (0 (str.len Start_4) (str.to_int Start_2)))
   (Start_2 String ("b" (str.at Start_12 StartInt_5) (str.substr Start_2 StartInt_2 StartInt_7) (str.from_int StartInt_2) (ite StartBool Start_1 Start_8)))
   (StartInt_6 Int (0 (str.indexof Start_11 Start_3 StartInt_3) (str.to_int Start_2)))
   (Start_14 String (x "b" (str.++ Start Start_7) (str.at Start_14 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_6)))
   (Start_13 String (x y "0" "b" (str.++ Start_11 Start_2) (str.substr Start_10 StartInt_1 StartInt_2) (str.replace Start_14 Start_8 Start_15) (ite StartBool_1 Start_9 Start_9)))
   (Start_5 String ("0" (str.substr Start_6 StartInt_1 StartInt)))
   (StartInt_5 Int (0 1 (str.to_int Start_9)))
   (Start_15 String ("" (str.++ Start_4 Start_1) (str.substr Start_4 StartInt_4 StartInt_1) (ite StartBool Start_14 Start_8)))
   (Start_6 String ("1" "0" (str.++ Start_7 Start_8) (str.at Start_11 StartInt) (str.substr Start StartInt StartInt_5) (str.replace Start_5 Start_11 Start_9) (ite StartBool_2 Start_5 Start_11)))
   (StartBool_1 Bool (true false (not StartBool) (str.< Start_5 Start) (str.<= Start_6 Start_4) (str.prefixof Start Start_5) (str.suffixof Start_2 Start_7) (= Start_1 Start_8) (= StartInt_3 StartInt_2) (<= StartInt StartInt_3)))
   (Start_1 String ("" (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_1)))
   (Start_12 String ("b" x (str.++ Start_1 Start) (str.at Start_8 StartInt_3) (str.substr Start_4 StartInt StartInt_3) (str.replace Start_9 Start_9 Start_10)))
   (StartInt_2 Int (0 1))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_1) (str.< Start_1 Start_5) (str.<= Start Start) (str.prefixof Start Start_8) (str.suffixof Start_1 Start_4) (<= StartInt_3 StartInt_2)))
   (Start_8 String ("0" x (str.++ Start_8 Start_4) (str.at Start_1 StartInt_2) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_13) (str.indexof Start_4 Start_7 StartInt_2)))
   (StartInt_1 Int (1 (str.len Start_1) (str.to_int Start_1)))
   (Start_7 String ("1" x "" (str.at Start_3 StartInt_2) (str.replace Start_8 Start_9 Start_5) (str.from_int StartInt) (ite StartBool Start_3 Start_7)))
   (Start_4 String (x "a" y (str.++ Start_8 Start_12)))
   (Start_10 String ("" (str.++ Start_2 Start_2) (str.at Start_11 StartInt_2) (str.substr Start_8 StartInt StartInt_2) (ite StartBool_1 Start_5 Start_11)))
   (Start_11 String (x (str.at Start_11 StartInt_4) (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_10 Start_4 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start Start_9)))
   (Start_3 String ("a" (str.at Start_2 StartInt_3) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_4 Start_3 Start_2) (ite StartBool_1 Start_2 Start)))
   (Start_9 String ("0" x (str.++ Start_3 Start_6) (str.at Start_6 StartInt) (str.substr Start_6 StartInt_2 StartInt_4) (str.replace Start_4 Start_9 Start_1) (str.from_int StartInt_2) (ite StartBool Start_10 Start_3)))
   (StartInt_4 Int (1 0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" "" "b")))

(check-synth)
