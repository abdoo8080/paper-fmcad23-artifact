(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (StartBool_4 Bool) (StartInt_4 Int) (StartBool_2 Bool) (StartInt_2 Int) (Start_6 String) (Start_7 String) (Start_4 String) (StartInt_5 Int) (StartBool_3 Bool) (Start_15 String) (Start_9 String) (Start_8 String) (Start_11 String) (StartInt_3 Int) (StartInt_7 Int) (StartInt_6 Int) (Start_1 String) (Start_12 String) (Start_10 String) (Start_5 String) (Start_14 String) (StartBool_1 Bool) (StartInt_8 Int) (Start_3 String) (Start_13 String) (StartInt_1 Int) (Start_2 String))
  ((Start String ("0" (str.++ Start Start) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (0 (str.to_int Start_6)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_4 StartBool_3) (str.<= Start_3 Start) (= Start_12 Start_9) (= StartInt_8 StartInt_7) (<= StartInt_7 StartInt_1)))
   (StartInt_9 Int (1 (str.indexof Start_8 Start_9 StartInt_6) (str.to_int Start_12)))
   (StartBool_4 Bool (true (= Start_4 Start_5) (= StartInt_8 StartInt_9)))
   (StartInt_4 Int (1 0 (str.len Start_2) (str.indexof Start_1 Start_9 StartInt_5) (str.to_int Start_5)))
   (StartBool_2 Bool (true false (and StartBool StartBool) (str.<= Start_2 Start_6) (str.suffixof Start_6 Start_1) (= Start_4 Start_3) (= StartInt_4 StartInt_2) (<= StartInt_4 StartInt)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_1 StartInt_2) (str.to_int Start_2)))
   (Start_6 String ("b" (str.at Start_5 StartInt_2) (str.substr Start StartInt_3 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start)))
   (Start_7 String (x "" "1" (str.++ Start_5 Start_5) (str.substr Start_5 StartInt_3 StartInt_2) (str.replace Start Start_5 Start_8) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_5)))
   (Start_4 String (x y (str.++ Start_4 Start_3) (str.from_int StartInt_3) (ite StartBool Start_5 Start_2)))
   (StartInt_5 Int (1 (str.len Start_3)))
   (StartBool_3 Bool (true false (not StartBool_3) (str.<= Start_5 Start_1) (str.prefixof Start_9 Start_2) (str.suffixof Start_10 Start_11) (str.contains Start_4 Start_11) (= Start_2 Start_9) (= StartInt_6 StartInt) (<= StartInt_7 StartInt_3)))
   (Start_15 String (x "a" "1" (str.replace Start_15 Start_9 Start_8)))
   (Start_9 String ("0" "b" x (str.++ Start_7 Start_3) (str.at Start_5 StartInt_2) (str.replace Start_9 Start Start_5)))
   (Start_8 String (x (str.++ Start_8 Start_2) (str.substr Start_9 StartInt StartInt_4) (str.replace Start_9 Start_2 Start_10) (ite StartBool_3 Start_2 Start_10)))
   (Start_11 String ("0" y (str.at Start_3 StartInt_7) (str.substr Start_5 StartInt_2 StartInt_5) (str.replace Start_12 Start_4 Start_13) (str.from_int StartInt)))
   (StartInt_3 Int (0 1 (str.indexof Start_6 Start_3 StartInt_3)))
   (StartInt_7 Int (1 (str.len Start_6) (str.indexof Start_9 Start_4 StartInt)))
   (StartInt_6 Int (1 (str.len Start_4) (str.to_int Start_1)))
   (Start_1 String ("a" (str.++ Start_8 Start_12) (str.at Start_15 StartInt_5)))
   (Start_12 String ("a" "b" (str.++ Start_9 Start_5) (str.at Start_1 StartInt_6) (str.from_int StartInt_8)))
   (Start_10 String ("" (str.++ Start_14 Start_5) (str.at Start_11 StartInt_8) (str.substr Start_8 StartInt_6 StartInt_4) (str.from_int StartInt_4)))
   (Start_5 String ("a" x (str.replace Start_1 Start_3 Start_1) (ite StartBool Start_5 Start)))
   (Start_14 String ("b" (str.substr Start_9 StartInt_8 StartInt_6) (str.replace Start_1 Start_13 Start_10) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false true (str.suffixof Start_1 Start_9) (str.contains Start_9 Start_15) (= Start_3 Start_3) (= StartInt_7 StartInt_3)))
   (StartInt_8 Int (0 (str.len Start_8) (str.indexof Start_4 Start_9 StartInt_8) (str.to_int Start_4)))
   (Start_3 String ("a" x (str.at Start_9 StartInt_6) (str.substr Start_5 StartInt_7 StartInt_2) (str.from_int StartInt_4)))
   (Start_13 String ("0" (str.++ Start_7 Start) (str.from_int StartInt_5) (ite StartBool_2 Start_13 Start_12)))
   (StartInt_1 Int (1 0))
   (Start_2 String ("b" "0" (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_3 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "b" (str.at x 0))))

(check-synth)
