(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_8 String) (StartInt_1 Int) (StartInt_5 Int) (StartInt_6 Int) (StartBool_2 Bool) (Start_5 String) (Start_3 String) (StartInt_2 Int) (Start_6 String) (Start_1 String) (Start_4 String) (StartBool_1 Bool) (StartInt_8 Int) (Start_7 String) (Start_11 String) (StartInt_4 Int) (Start_10 String) (StartInt_3 Int) (StartInt_7 Int) (StartBool_5 Bool) (Start_14 String) (Start_9 String) (Start_13 String) (StartInt_9 Int) (Start_2 String) (StartBool_3 Bool) (Start_12 String))
  ((Start String (x (str.++ Start Start) (str.at Start StartInt_1) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (1 (str.len Start_1) (str.indexof Start Start_3 StartInt_2)))
   (StartBool Bool (true false (not StartBool_4) (and StartBool_5 StartBool_2) (str.< Start_1 Start_1) (str.suffixof Start_2 Start_13) (= Start_2 Start_1) (<= StartInt_2 StartInt)))
   (StartBool_4 Bool (false (and StartBool_5 StartBool_3) (str.< Start_8 Start_9) (= StartInt_2 StartInt_8) (<= StartInt_8 StartInt_9)))
   (Start_8 String ("0" (str.at Start_1 StartInt_3) (str.from_int StartInt_6)))
   (StartInt_1 Int (0 1))
   (StartInt_5 Int (0 (str.len Start_12) (str.to_int Start_7)))
   (StartInt_6 Int (0 1 (str.to_int Start_3)))
   (StartBool_2 Bool (true (and StartBool StartBool) (str.<= Start_4 Start_12) (= Start_8 Start_13) (= StartInt_8 StartInt_3) (<= StartInt_8 StartInt_2)))
   (Start_5 String ("1" y "" "0" (str.at Start_4 StartInt_1) (str.substr Start_5 StartInt_4 StartInt_5) (str.replace Start Start_2 Start_6) (str.from_int StartInt)))
   (Start_3 String ("" "a" "b" "1" (str.++ Start_3 Start_2) (str.substr Start_2 StartInt_3 StartInt_3) (str.replace Start_2 Start_3 Start) (ite StartBool Start_4 Start_4)))
   (StartInt_2 Int (0 1))
   (Start_6 String ("1" (str.at Start_3 StartInt_2) (str.replace Start_7 Start_2 Start_8) (ite StartBool Start_8 Start_8)))
   (Start_1 String ("b" (str.++ Start_2 Start_1) (str.substr Start StartInt StartInt) (str.from_int StartInt)))
   (Start_4 String (y (str.++ Start_4 Start) (str.at Start_1 StartInt) (str.from_int StartInt_3) (ite StartBool Start_4 Start_5)))
   (StartBool_1 Bool (false (str.<= Start_10 Start_11) (str.prefixof Start_5 Start) (str.suffixof Start Start_7) (= StartInt_4 StartInt_2) (<= StartInt_4 StartInt_1)))
   (StartInt_8 Int (0 (str.len Start_10) (str.indexof Start_13 Start_7 StartInt_6) (str.to_int Start_14)))
   (Start_7 String ("b" "0" x (str.++ Start_7 Start_6) (str.replace Start_4 Start_6 Start_9) (ite StartBool_1 Start_1 Start_5)))
   (Start_11 String ("a" "0" y (str.at Start_9 StartInt_1) (str.substr Start_10 StartInt_5 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_4 Int (0 1 (str.len Start_7) (str.indexof Start_8 Start_13 StartInt_5)))
   (Start_10 String (y (str.substr Start_7 StartInt_5 StartInt_7) (str.from_int StartInt_7)))
   (StartInt_3 Int (1 (str.to_int Start_11)))
   (StartInt_7 Int (1 (str.len Start_1) (str.indexof Start_10 Start_2 StartInt_7)))
   (StartBool_5 Bool (true (str.< Start_14 Start_4) (= StartInt_8 StartInt_3) (<= StartInt_8 StartInt_2)))
   (Start_14 String ("b" y (str.++ Start Start_14) (str.substr Start_2 StartInt_5 StartInt_3) (ite StartBool_3 Start_3 Start_8)))
   (Start_9 String (x (str.at Start_3 StartInt_7) (ite StartBool_2 Start_8 Start_6)))
   (Start_13 String ("1" y "" (str.++ Start Start_6) (str.at Start StartInt_7) (str.substr Start_4 StartInt_6 StartInt_1) (str.from_int StartInt_5)))
   (StartInt_9 Int (0 (str.to_int Start_14)))
   (Start_2 String ("0" (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt_1 StartInt)))
   (StartBool_3 Bool (false true (str.< Start_7 Start_6) (str.<= Start_3 Start_14) (str.prefixof Start_7 Start_9) (str.suffixof Start_11 Start_1) (<= StartInt_8 StartInt_3)))
   (Start_12 String ("1" (str.at Start_4 StartInt_3) (str.replace Start_3 Start_3 Start_8) (ite StartBool_2 Start_5 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= (str.++ x "0") "b") "1" "0")))

(check-synth)
