(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_10 String) (Start_14 String) (Start_12 String) (Start_11 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_6 String) (StartInt_2 Int) (Start_4 String) (Start_8 String) (Start_2 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_7 String) (StartInt_6 Int) (Start_9 String) (Start_5 String) (StartBool_5 Bool) (Start_13 String) (Start_1 String) (StartInt_4 Int) (Start_3 String) (StartInt_5 Int))
  ((Start String (y (str.++ Start Start_1) (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt_2)))
   (StartInt Int (1 (str.len Start_10) (str.to_int Start_11)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_4 StartBool_3) (str.< Start_6 Start_6) (str.<= Start_2 Start_13) (str.prefixof Start_6 Start_6) (str.suffixof Start_3 Start_1)))
   (Start_15 String ("" "1" (str.++ Start Start_1) (str.substr Start_12 StartInt_5 StartInt_4) (str.replace Start_6 Start_6 Start_8) (str.from_int StartInt_6) (ite StartBool_5 Start_15 Start_7)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_5 StartBool_2) (str.<= Start_9 Start_11) (str.prefixof Start_14 Start_6) (str.contains Start_7 Start_15) (= StartInt_4 StartInt_5)))
   (StartBool_4 Bool (true false (not StartBool_1) (str.< Start_2 Start_2) (str.suffixof Start_12 Start_10) (= Start_1 Start_2) (<= StartInt_1 StartInt_3)))
   (Start_10 String ("0" "b" "1" (str.at Start_9 StartInt_6) (str.from_int StartInt_6)))
   (Start_14 String (y (str.++ Start_15 Start_12) (str.replace Start_4 Start_1 Start_6) (str.from_int StartInt_4)))
   (Start_12 String (x "a" (str.at Start_13 StartInt_1) (str.substr Start_13 StartInt_2 StartInt_5) (str.from_int StartInt_4)))
   (Start_11 String (y "b" (str.++ Start_12 Start_3) (str.substr Start_2 StartInt StartInt)))
   (StartInt_1 Int (0 1 (str.len Start_5) (str.indexof Start_1 Start_8 StartInt) (str.to_int Start_9)))
   (StartBool_2 Bool (false (str.< Start_9 Start_8) (str.suffixof Start Start_8) (= Start_8 Start_7) (<= StartInt StartInt)))
   (Start_6 String ("1" (str.++ Start_7 Start_1)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_3 Start_1 StartInt_1)))
   (Start_4 String (x "1" (str.from_int StartInt_3)))
   (Start_8 String ("b" x "0" "" (str.++ Start_7 Start_2)))
   (Start_2 String ("b" (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_3 Start_2 Start_4) (str.from_int StartInt)))
   (StartBool_1 Bool (true false (str.< Start_1 Start_1) (str.<= Start_1 Start_7) (str.contains Start_6 Start_7) (= Start_6 Start_2) (<= StartInt_4 StartInt_1)))
   (StartInt_3 Int (1 (str.len Start_5)))
   (Start_7 String ("0" "a" (str.++ Start_6 Start_6) (str.replace Start_8 Start_3 Start_4) (str.from_int StartInt_4) (ite StartBool_2 Start_2 Start_9)))
   (StartInt_6 Int (1 (str.indexof Start_4 Start_7 StartInt_5)))
   (Start_9 String (y "b" (str.++ Start_8 Start_4) (str.at Start_4 StartInt_4) (str.substr Start StartInt_5 StartInt)))
   (Start_5 String ("1" (str.replace Start_3 Start_6 Start) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start)))
   (StartBool_5 Bool (true (and StartBool StartBool) (str.prefixof Start_14 Start_15) (str.contains Start_2 Start_8) (= StartInt_3 StartInt_3)))
   (Start_13 String (y (str.++ Start_12 Start_4) (ite StartBool_2 Start_12 Start_13)))
   (Start_1 String (x (str.++ Start_3 Start_3) (str.substr Start_7 StartInt StartInt_3) (str.from_int StartInt_5) (ite StartBool Start_9 Start_8)))
   (StartInt_4 Int (0 (str.len Start_6)))
   (Start_3 String ("" y (str.at Start_2 StartInt)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.indexof Start_7 Start_7 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace x y "") 1)))

(check-synth)
