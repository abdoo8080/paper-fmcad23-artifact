(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_14 String) (Start_1 String) (Start_2 String) (StartInt_4 Int) (StartInt_5 Int) (Start_11 String) (StartInt_7 Int) (StartInt_2 Int) (Start_12 String) (Start_4 String) (Start_6 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_13 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_9 String) (Start_8 String) (Start_3 String) (Start_5 String) (Start_10 String) (Start_7 String))
  ((Start String (x "1" "" "a" (str.++ Start_1 Start_2) (str.at Start StartInt) (str.substr Start_1 StartInt StartInt) (ite StartBool Start_3 Start_4)))
   (StartInt Int (1 (str.len Start_9)))
   (StartBool Bool (false true (and StartBool_1 StartBool_1) (str.< Start_8 Start_10) (str.<= Start_10 Start_2) (= Start_13 Start_10) (<= StartInt_7 StartInt_4)))
   (StartInt_6 Int (1 0 (str.len Start_9)))
   (Start_14 String (y "0" "a" (str.++ Start_11 Start_13) (str.at Start_12 StartInt_5) (str.substr Start_6 StartInt_4 StartInt) (str.from_int StartInt_6)))
   (Start_1 String ("a" "0" "1" y "b" "" x (str.at Start_13 StartInt_5) (str.substr Start_6 StartInt_4 StartInt_2) (str.from_int StartInt)))
   (Start_2 String ("a" (str.++ Start_10 Start_7) (str.replace Start_7 Start_11 Start_3)))
   (StartInt_4 Int (1 0 (str.len Start_11)))
   (StartInt_5 Int (0 (str.to_int Start_10)))
   (Start_11 String (x "1" (str.at Start_10 StartInt_1) (str.replace Start_11 Start_10 Start_7) (ite StartBool_1 Start_3 Start_4)))
   (StartInt_7 Int (1 0 (str.len Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_2 Start_5 StartInt_3) (str.to_int Start_1)))
   (Start_12 String ("1" (str.substr Start_2 StartInt_4 StartInt) (str.replace Start_4 Start_11 Start_1)))
   (Start_4 String (y x (str.at Start_4 StartInt) (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_1)))
   (Start_6 String (x "1" "a" (str.++ Start_3 Start_1) (str.at Start StartInt) (str.substr Start_6 StartInt_3 StartInt_1) (str.replace Start Start_4 Start_1)))
   (StartInt_1 Int (1 (str.indexof Start_5 Start_4 StartInt_2)))
   (StartBool_2 Bool (true false (str.< Start_5 Start_5) (str.suffixof Start Start_2) (str.contains Start_7 Start_8) (= Start_6 Start_2)))
   (Start_13 String ("1" (str.++ Start_1 Start_4) (str.at Start StartInt_6) (str.replace Start_8 Start_14 Start_2) (ite StartBool_1 Start_7 Start_10)))
   (StartInt_3 Int (1 0 (str.indexof Start_4 Start_6 StartInt_3) (str.to_int Start_2)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool StartBool) (str.suffixof Start_7 Start_6) (= Start_6 Start_6) (= StartInt_2 StartInt_3) (<= StartInt_3 StartInt)))
   (Start_9 String (y "1" (str.++ Start_5 Start_1) (str.replace Start_1 Start_7 Start_4)))
   (Start_8 String ("b" (str.substr Start_4 StartInt_3 StartInt) (str.replace Start_4 Start_9 Start) (ite StartBool_1 Start_10 Start_7)))
   (Start_3 String ("" y "a" "b" x "1" "0" (str.substr Start_11 StartInt_2 StartInt) (str.replace Start_3 Start_12 Start_12)))
   (Start_5 String (y x "a" (str.substr Start_6 StartInt_4 StartInt_2) (str.replace Start_7 Start_4 Start_6) (ite StartBool_1 Start_4 Start_6)))
   (Start_10 String ("b" (str.replace Start Start_10 Start_9)))
   (Start_7 String ("" x "0" (str.substr Start_8 StartInt_4 StartInt_2) (str.replace Start_7 Start_5 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (ite (str.contains (str.replace "1" y "a") y) (str.++ "1" "0") "b") 0)))

(check-synth)
