(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (StartBool_5 Bool) (Start_13 String) (StartInt_4 Int) (Start_1 String) (StartBool_4 Bool) (StartInt_5 Int) (StartBool_6 Bool) (StartInt_1 Int) (Start_5 String) (Start_6 String) (Start_4 String) (StartBool_3 Bool) (StartBool_2 Bool) (StartInt_9 Int) (Start_3 String) (Start_7 String) (StartInt_3 Int) (Start_10 String) (Start_12 String) (Start_2 String) (Start_8 String) (StartBool_1 Bool) (Start_9 String) (StartInt_8 Int) (StartInt_2 Int) (StartBool_8 Bool) (StartInt_7 Int) (Start_11 String) (StartInt_6 Int) (StartBool_7 Bool))
  ((Start String (y "a" (str.at Start_1 StartInt_1) (str.replace Start_1 Start_1 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (0 (str.indexof Start_9 Start_5 StartInt_7)))
   (StartBool Bool (false (not StartBool_3) (and StartBool_3 StartBool_4) (str.<= Start_5 Start_12) (str.contains Start_7 Start) (= StartInt_9 StartInt_10) (<= StartInt_7 StartInt_4)))
   (StartInt_10 Int (1 (str.len Start_13)))
   (StartBool_5 Bool (true (str.< Start_4 Start_3) (str.<= Start Start_2) (str.prefixof Start_1 Start_2) (str.suffixof Start Start_7) (= Start_5 Start_1) (<= StartInt_3 StartInt)))
   (Start_13 String ("0" (str.++ Start Start_5) (str.from_int StartInt_6) (ite StartBool_6 Start_1 Start_10)))
   (StartInt_4 Int (0))
   (Start_1 String ("0" x "a" (str.at Start_5 StartInt_7) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_3 StartBool) (str.< Start_6 Start_5) (str.<= Start_2 Start_3) (str.prefixof Start_2 Start_6) (str.contains Start_4 Start_4)))
   (StartInt_5 Int (0 1 (str.to_int Start_5)))
   (StartBool_6 Bool (true (not StartBool_1) (and StartBool_7 StartBool) (str.< Start_11 Start_5) (str.suffixof Start_11 Start_6) (str.contains Start Start_1) (= Start_1 Start_4)))
   (StartInt_1 Int (0 1))
   (Start_5 String ("1" (str.at Start_3 StartInt_4) (str.substr Start_6 StartInt_1 StartInt_5) (str.replace Start_4 Start_5 Start_5) (str.from_int StartInt_5)))
   (Start_6 String (y (str.++ Start_6 Start_1) (str.from_int StartInt_1)))
   (Start_4 String (x (str.++ Start_1 Start_3) (str.at Start_1 StartInt)))
   (StartBool_3 Bool (true false (not StartBool_2) (str.<= Start_1 Start_3) (str.prefixof Start Start_1) (str.suffixof Start_3 Start_3) (= Start_1 Start_4) (<= StartInt_2 StartInt_2)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_3 StartBool) (str.< Start_2 Start_1) (str.contains Start_2 Start) (= Start_3 Start_3) (<= StartInt_1 StartInt_3)))
   (StartInt_9 Int (0 (str.indexof Start_12 Start_11 StartInt_8)))
   (Start_3 String ("0" (str.++ Start Start_2) (str.at Start StartInt_3) (str.substr Start StartInt StartInt_1) (str.replace Start_3 Start_1 Start) (ite StartBool_2 Start_1 Start)))
   (Start_7 String ("a" "" x "b" (str.++ Start Start_6) (str.replace Start_3 Start_8 Start_8) (str.from_int StartInt_4) (ite StartBool_2 Start_2 Start_3)))
   (StartInt_3 Int (1 (str.len Start_2)))
   (Start_10 String ("" (str.at Start StartInt_4) (str.substr Start_8 StartInt_1 StartInt_9) (str.from_int StartInt_4) (ite StartBool_5 Start_10 Start_6)))
   (Start_12 String (y (str.++ Start_11 Start_1) (str.at Start_11 StartInt_3) (str.replace Start_12 Start_10 Start_3) (str.from_int StartInt_2) (ite StartBool_8 Start_9 Start_9)))
   (Start_2 String (x (str.++ Start_2 Start) (str.substr Start StartInt_2 StartInt_4) (str.from_int StartInt_1) (ite StartBool_4 Start_5 Start_6)))
   (Start_8 String (y (str.++ Start_4 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_7 Start_7) (str.suffixof Start_2 Start_9) (str.contains Start_6 Start_1) (= Start_4 Start_5) (= StartInt_5 StartInt_6) (<= StartInt_6 StartInt_6)))
   (Start_9 String (x (str.substr Start_4 StartInt_3 StartInt) (str.replace Start_10 Start_2 Start_1) (str.from_int StartInt_7) (ite StartBool_6 Start_10 Start)))
   (StartInt_8 Int (1 0 (str.len Start_6) (str.indexof Start_10 Start_1 StartInt) (str.to_int Start_9)))
   (StartInt_2 Int (0 (str.len Start_10) (str.indexof Start_1 Start_12 StartInt_9)))
   (StartBool_8 Bool (false (not StartBool_3) (str.< Start_7 Start_2) (str.prefixof Start Start_9) (str.contains Start_2 Start_8) (= StartInt_2 StartInt_3) (<= StartInt_1 StartInt_6)))
   (StartInt_7 Int (0 1 (str.len Start_7) (str.indexof Start_1 Start_12 StartInt_9)))
   (Start_11 String (x (str.at Start_7 StartInt_1) (str.substr Start_4 StartInt_8 StartInt_3) (str.replace Start_6 Start_4 Start_11)))
   (StartInt_6 Int (1 (str.len Start_3) (str.indexof Start Start_2 StartInt_6)))
   (StartBool_7 Bool (true false (not StartBool_8) (and StartBool_2 StartBool_8) (str.< Start_11 Start_8) (str.suffixof Start_7 Start_3) (= StartInt_3 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ x (str.replace (str.replace (str.++ "1" "1") y "0") "" y))))

(check-synth)
