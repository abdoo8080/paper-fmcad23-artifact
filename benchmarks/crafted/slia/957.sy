(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (StartInt_11 Int) (Start_1 String) (StartBool_6 Bool) (StartInt_9 Int) (StartBool_1 Bool) (Start_7 String) (Start_9 String) (Start_3 String) (StartBool_5 Bool) (Start_5 String) (Start_15 String) (StartInt_1 Int) (Start_6 String) (StartInt_2 Int) (Start_12 String) (Start_2 String) (StartInt_4 Int) (Start_16 String) (Start_8 String) (StartInt_7 Int) (StartBool_3 Bool) (Start_10 String) (StartInt_5 Int) (Start_13 String) (Start_4 String) (Start_11 String) (StartBool_4 Bool) (Start_14 String) (Start_17 String) (StartInt_8 Int) (StartInt_3 Int) (StartInt_6 Int) (StartBool_2 Bool))
  ((Start String ("b" (str.++ Start_1 Start_2)))
   (StartInt Int (1 0 (str.to_int Start_17)))
   (StartBool Bool (false (and StartBool_1 StartBool_3) (str.<= Start_10 Start_11) (str.suffixof Start_13 Start_7) (= StartInt_10 StartInt_11) (<= StartInt_2 StartInt_10)))
   (StartInt_10 Int (0 1 (str.indexof Start_9 Start_12 StartInt_11) (str.to_int Start_8)))
   (StartInt_11 Int (1 (str.indexof Start_17 Start_16 StartInt_3) (str.to_int Start_8)))
   (Start_1 String ("" "1" (str.at Start_10 StartInt) (str.substr Start_7 StartInt_4 StartInt_9) (str.from_int StartInt_9)))
   (StartBool_6 Bool (true (not StartBool_4) (and StartBool StartBool_4) (str.<= Start_3 Start_3) (str.suffixof Start_7 Start_11) (= Start_16 Start_12)))
   (StartInt_9 Int (0 (str.to_int Start_7)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start_5 Start_2) (str.prefixof Start_8 Start_5) (str.contains Start_6 Start_4) (= Start_8 Start_6) (= StartInt_2 StartInt_3)))
   (Start_7 String ("" "0" "a" x y (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt_1)))
   (Start_9 String (x "" (str.at Start_3 StartInt_2) (str.substr Start_6 StartInt_1 StartInt_4) (str.replace Start_10 Start_10 Start_6)))
   (Start_3 String ("a" (str.replace Start_6 Start_6 Start_4) (ite StartBool_1 Start_4 Start_6)))
   (StartBool_5 Bool (true (and StartBool_2 StartBool_6) (str.< Start_10 Start_13) (str.<= Start Start_16) (str.suffixof Start_4 Start_7) (= StartInt_8 StartInt_9) (<= StartInt_4 StartInt_9)))
   (Start_5 String (x (str.substr Start_2 StartInt_1 StartInt)))
   (Start_15 String ("0" (str.substr Start_1 StartInt_7 StartInt_1) (str.from_int StartInt)))
   (StartInt_1 Int (0 (str.indexof Start_6 Start_1 StartInt_2) (str.to_int Start_7)))
   (Start_6 String ("1" (str.replace Start_1 Start_5 Start_4)))
   (StartInt_2 Int (1 (str.indexof Start_4 Start_5 StartInt)))
   (Start_12 String ("0" "" (str.++ Start_9 Start_13) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start_1)))
   (Start_2 String (x (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt_2)))
   (StartInt_4 Int (0 (str.indexof Start Start_1 StartInt_1) (str.to_int Start_1)))
   (Start_16 String ("0" (str.++ Start_9 Start_17) (ite StartBool Start_9 Start_13)))
   (Start_8 String ("b" y (str.at Start_2 StartInt_6) (str.replace Start_15 Start_11 Start_14) (str.from_int StartInt_3) (ite StartBool_1 Start_5 Start_14)))
   (StartInt_7 Int (1 (str.len Start_8) (str.indexof Start_2 Start_3 StartInt_8)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_2 StartBool_4) (str.prefixof Start_4 Start_2) (= Start_11 Start_6) (<= StartInt_5 StartInt_5)))
   (Start_10 String (x (str.++ Start_3 Start_9) (str.replace Start_3 Start_8 Start_8) (str.from_int StartInt_2) (ite StartBool_3 Start_10 Start_3)))
   (StartInt_5 Int (0 (str.to_int Start_9)))
   (Start_13 String ("" (str.++ Start_7 Start_4) (str.replace Start_14 Start_2 Start_5) (str.from_int StartInt_5) (ite StartBool_3 Start_8 Start_3)))
   (Start_4 String ("a" (str.at Start_6 StartInt_1) (str.substr Start_3 StartInt StartInt) (str.replace Start_3 Start_2 Start_3) (ite StartBool Start_3 Start_1)))
   (Start_11 String ("a" (str.substr Start_1 StartInt_4 StartInt_4) (str.from_int StartInt_1)))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool) (str.prefixof Start_3 Start) (str.suffixof Start Start_11) (str.contains Start_7 Start_12) (= Start_6 Start_6) (<= StartInt_5 StartInt_3)))
   (Start_14 String (y (str.++ Start_14 Start_1) (str.substr Start_7 StartInt StartInt_2) (ite StartBool_4 Start_11 Start_10)))
   (Start_17 String (y "b" (str.replace Start_9 Start_17 Start_5) (ite StartBool_4 Start_6 Start_16)))
   (StartInt_8 Int (0 (str.len Start_6) (str.indexof Start_13 Start_4 StartInt_6) (str.to_int Start_9)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_9 StartInt_4) (str.to_int Start_9)))
   (StartInt_6 Int (1 (str.to_int Start_16)))
   (StartBool_2 Bool (false (not StartBool_5) (str.< Start_3 Start_8) (str.contains Start_6 Start_9) (<= StartInt_3 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace y "" x)))))

(check-synth)
