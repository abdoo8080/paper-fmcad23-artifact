(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_10 String) (StartInt_9 Int) (StartBool_4 Bool) (StartInt_7 Int) (Start_2 String) (StartInt_8 Int) (Start_9 String) (StartInt_6 Int) (StartInt_2 Int) (StartBool_1 Bool) (Start_5 String) (Start_8 String) (StartBool_5 Bool) (StartBool_2 Bool) (StartInt_4 Int) (Start_4 String) (StartInt_3 Int) (Start_6 String) (Start_3 String) (StartBool_3 Bool) (Start_1 String) (StartInt_5 Int) (Start_7 String))
  ((Start String ("0" "a" (str.++ Start_1 Start) (str.at Start StartInt_1) (str.replace Start_2 Start Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_3)))
   (StartInt Int (1 (str.indexof Start_1 Start_4 StartInt_9)))
   (StartBool Bool (false true (not StartBool_1) (str.< Start_3 Start_4)))
   (StartInt_1 Int (0 (str.len Start_3) (str.indexof Start Start StartInt_1) (str.to_int Start_1)))
   (Start_10 String ("1" "" "0" (str.from_int StartInt_2) (ite StartBool_2 Start_2 Start)))
   (StartInt_9 Int (1 0 (str.indexof Start_3 Start_1 StartInt)))
   (StartBool_4 Bool (true (not StartBool_4) (str.< Start_4 Start_7) (str.<= Start_9 Start_7) (str.suffixof Start_10 Start) (= Start_8 Start_3)))
   (StartInt_7 Int (0 (str.len Start_8)))
   (Start_2 String ("a" (str.++ Start Start_10) (str.substr Start_5 StartInt_2 StartInt_6) (str.replace Start_3 Start_7 Start_7) (str.from_int StartInt_7)))
   (StartInt_8 Int (0 (str.len Start_2) (str.indexof Start_1 Start_2 StartInt_4)))
   (Start_9 String ("a" "b" x (str.++ Start_2 Start) (str.at Start_7 StartInt_7) (str.from_int StartInt_8) (ite StartBool Start Start_8)))
   (StartInt_6 Int (1 (str.len Start_4) (str.indexof Start_7 Start_7 StartInt_3) (str.to_int Start_8)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.to_int Start)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (str.<= Start_4 Start_3) (str.suffixof Start_1 Start_5) (str.contains Start_3 Start_1) (= Start_4 Start_3)))
   (Start_5 String (x (str.++ Start_5 Start_3) (str.at Start StartInt_1) (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt_1)))
   (Start_8 String ("0" "a" y "b" (str.at Start_6 StartInt_4) (str.substr Start_1 StartInt_5 StartInt_2) (str.from_int StartInt_5)))
   (StartBool_5 Bool (true (not StartBool_5) (str.< Start_4 Start) (str.contains Start_4 Start_3) (<= StartInt_7 StartInt_6)))
   (StartBool_2 Bool (false (not StartBool_4) (and StartBool StartBool_5) (str.<= Start_4 Start_9) (str.prefixof Start_5 Start_9)))
   (StartInt_4 Int (1 0 (str.len Start_8)))
   (Start_4 String ("0" (str.++ Start_4 Start) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_2 StartInt_3)))
   (Start_6 String ("" "a" (str.++ Start_7 Start) (str.replace Start_5 Start_8 Start_1) (ite StartBool_3 Start_1 Start_6)))
   (Start_3 String (x y "0" "a" (str.replace Start_5 Start_2 Start_5) (ite StartBool_2 Start_3 Start_6)))
   (StartBool_3 Bool (false (not StartBool_2) (str.suffixof Start_7 Start_7) (= StartInt StartInt_3) (<= StartInt_2 StartInt_3)))
   (Start_1 String ("a" y "0" (str.++ Start_3 Start_1) (str.at Start_10 StartInt_4) (str.from_int StartInt)))
   (StartInt_5 Int (0 1 (str.to_int Start_3)))
   (Start_7 String ("1" y (str.++ Start_9 Start_8) (str.at Start_3 StartInt_5) (str.substr Start_6 StartInt_3 StartInt_6) (ite StartBool Start_5 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.replace "a" (str.at y 1) "b") "0")))

(check-synth)
