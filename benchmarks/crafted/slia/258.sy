(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_1 String) (StartInt_2 Int) (Start_4 String) (Start_10 String) (Start_7 String) (StartBool_5 Bool) (StartInt_1 Int) (Start_8 String) (Start_2 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_13 String) (Start_9 String) (StartInt_4 Int) (StartInt_6 Int) (StartBool_4 Bool) (StartInt_3 Int) (Start_12 String) (Start_3 String) (Start_6 String) (StartBool_2 Bool) (Start_5 String) (StartBool_3 Bool))
  ((Start String (y "" "b" x (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt Int (0 (str.indexof Start_8 Start_8 StartInt_6)))
   (StartBool Bool (false true (and StartBool_2 StartBool_5) (str.< Start_2 Start_10) (str.prefixof Start_10 Start_10) (= Start_7 Start_5) (= StartInt StartInt) (<= StartInt_1 StartInt)))
   (Start_11 String (x "a" (str.substr Start_13 StartInt_5 StartInt) (str.replace Start_10 Start_3 Start_8) (str.from_int StartInt_2) (ite StartBool_4 Start_5 Start_7)))
   (Start_1 String ("b" "" (str.++ Start_11 Start_3) (str.replace Start_1 Start_1 Start_7) (str.from_int StartInt_4) (ite StartBool_3 Start_10 Start_12)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start_5)))
   (Start_4 String (y (str.++ Start_7 Start_3) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool_3 Start_9 Start_9)))
   (Start_10 String ("1" (str.++ Start_3 Start_2) (str.at Start_10 StartInt_4) (str.from_int StartInt_5) (ite StartBool_1 Start_7 Start_3)))
   (Start_7 String (y "0" "b" "" "1" "a" x (str.++ Start_9 Start_3) (str.replace Start_6 Start_10 Start_5)))
   (StartBool_5 Bool (false true (and StartBool_3 StartBool_3) (str.<= Start_7 Start_3) (= StartInt_6 StartInt_4) (<= StartInt_6 StartInt_1)))
   (StartInt_1 Int (0 (str.indexof Start_2 Start_2 StartInt) (str.to_int Start)))
   (Start_8 String ("0" (str.++ Start_7 Start_8) (str.at Start_6 StartInt_3) (str.from_int StartInt_4) (ite StartBool_3 Start_9 Start_8)))
   (Start_2 String ("0" (str.at Start_1 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_1 Bool (false (not StartBool) (str.< Start Start_1) (str.<= Start_3 Start) (str.suffixof Start_2 Start) (str.contains Start_1 Start_1) (= StartInt_3 StartInt_3) (<= StartInt_4 StartInt)))
   (StartInt_5 Int (1 0 (str.len Start_9) (str.to_int Start_1)))
   (Start_13 String (y (str.++ Start_6 Start_12) (str.substr Start StartInt_6 StartInt_3) (str.replace Start_9 Start_4 Start_5) (ite StartBool_2 Start_7 Start_1)))
   (Start_9 String (x (str.++ Start_5 Start_7) (str.at Start_1 StartInt_4) (str.replace Start_1 Start_9 Start_8) (str.from_int StartInt_3)))
   (StartInt_4 Int (1 0 (str.len Start_3) (str.to_int Start)))
   (StartInt_6 Int (0 1 (str.indexof Start_5 Start_5 StartInt_2)))
   (StartBool_4 Bool (false true (and StartBool_3 StartBool) (str.suffixof Start_6 Start_6)))
   (StartInt_3 Int (1 0))
   (Start_12 String ("1" "0" (str.substr Start_6 StartInt_5 StartInt_3) (ite StartBool_2 Start_4 Start_11)))
   (Start_3 String (x "1" "" "0" (str.++ Start_1 Start) (str.replace Start_2 Start_4 Start_5) (str.from_int StartInt_1)))
   (Start_6 String (y "" "1" (str.++ Start_6 Start_7) (str.at Start_1 StartInt_3) (str.replace Start_8 Start_8 Start_5) (ite StartBool_2 Start_6 Start_4)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_1) (str.< Start_2 Start_1) (str.<= Start_7 Start_4) (str.suffixof Start_8 Start) (= StartInt_3 StartInt_1)))
   (Start_5 String ("b" (str.at Start_6 StartInt) (ite StartBool_1 Start_1 Start_5)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.<= Start_2 Start_9) (str.suffixof Start_7 Start_1) (= Start_2 Start_2) (= StartInt_4 StartInt) (<= StartInt_5 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "a" (str.at y 1) "0") "" "0")))

(check-synth)
