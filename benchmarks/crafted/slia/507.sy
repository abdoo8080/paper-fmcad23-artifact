(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_17 String) (StartBool_6 Bool) (Start_16 String) (StartInt_1 Int) (Start_3 String) (Start_11 String) (StartInt_8 Int) (Start_13 String) (StartBool_1 Bool) (Start_7 String) (Start_14 String) (Start_8 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_10 Int) (Start_15 String) (Start_6 String) (Start_9 String) (StartInt_5 Int) (StartInt_2 Int) (Start_2 String) (StartInt_7 Int) (Start_1 String) (StartInt_9 Int) (StartBool_4 Bool) (StartInt_6 Int) (Start_10 String) (Start_4 String) (StartBool_3 Bool) (Start_5 String) (StartBool_5 Bool) (Start_12 String) (StartInt_3 Int) (StartInt_11 Int))
  ((Start String ("b" "1" y "" "a" (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt_2)))
   (StartInt Int (1 (str.len Start_18) (str.indexof Start_10 Start_5 StartInt_3)))
   (StartBool Bool (false true (not StartBool_5) (str.<= Start_10 Start) (str.prefixof Start_6 Start_13) (str.contains Start_14 Start_4) (<= StartInt_11 StartInt_5)))
   (Start_18 String (y (str.++ Start_18 Start_11) (str.at Start StartInt_5)))
   (Start_17 String ("0" y (str.++ Start_5 Start_9) (str.at Start_13 StartInt_4) (str.substr Start_2 StartInt_5 StartInt_11)))
   (StartBool_6 Bool (false true (not StartBool_5) (str.suffixof Start_14 Start_12) (str.contains Start_3 Start_7) (<= StartInt_11 StartInt_9)))
   (Start_16 String (x (str.++ Start Start_14) (str.replace Start_6 Start_17 Start_2) (str.from_int StartInt_9) (ite StartBool_6 Start_15 Start)))
   (StartInt_1 Int (0 1 (str.indexof Start_16 Start_3 StartInt_6)))
   (Start_3 String ("0" x "a" y "" (str.replace Start_12 Start_1 Start_3) (str.from_int StartInt_4)))
   (Start_11 String (x (str.replace Start Start_6 Start_1) (ite StartBool Start_12 Start_9)))
   (StartInt_8 Int (0 1 (str.len Start_8)))
   (Start_13 String ("1" (str.at Start_12 StartInt_7) (str.replace Start_11 Start_8 Start_5) (str.from_int StartInt_8)))
   (StartBool_1 Bool (false true (not StartBool_3) (and StartBool_4 StartBool_3) (str.prefixof Start_9 Start_5) (<= StartInt_2 StartInt_5)))
   (Start_7 String (y x (str.++ Start_4 Start_8) (str.at Start_7 StartInt) (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start_4 Start_3 Start)))
   (Start_14 String ("a" (str.++ Start_12 Start_9) (str.from_int StartInt_11)))
   (Start_8 String (x "b" "0" y (str.at Start_2 StartInt_2)))
   (StartBool_2 Bool (false (not StartBool_2) (str.< Start_8 Start_2) (str.<= Start_2 Start_2) (str.prefixof Start_5 Start_5) (str.suffixof Start_2 Start_1) (str.contains Start_5 Start_4)))
   (StartInt_4 Int (0))
   (StartInt_10 Int (0 (str.len Start_3) (str.to_int Start_8)))
   (Start_15 String (y "" (str.at Start_6 StartInt_1) (str.substr Start_5 StartInt_9 StartInt_9)))
   (Start_6 String ("0" (str.++ Start_1 Start_4) (str.replace Start_7 Start_8 Start_5) (str.from_int StartInt_4) (ite StartBool_2 Start_7 Start_4)))
   (Start_9 String (y (str.++ Start_1 Start_9) (str.at Start_4 StartInt) (str.replace Start_1 Start Start_5) (str.from_int StartInt_5)))
   (StartInt_5 Int (1 0 (str.len Start_8) (str.to_int Start_6)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt_1)))
   (Start_2 String ("1" "" "0" x "b" y "a" (str.++ Start_1 Start_3) (str.substr Start StartInt StartInt_3) (str.replace Start_4 Start_5 Start_2) (ite StartBool_1 Start_6 Start_2)))
   (StartInt_7 Int (0 1 (str.len Start) (str.indexof Start_12 Start_8 StartInt_3) (str.to_int Start_7)))
   (Start_1 String ("b" y x "1" (str.++ Start_1 Start_14) (str.from_int StartInt_3)))
   (StartInt_9 Int (1 (str.len Start_15) (str.indexof Start_5 Start_2 StartInt_10) (str.to_int Start_11)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.<= Start_7 Start_5) (str.prefixof Start_3 Start_3) (str.suffixof Start_7 Start_2) (str.contains Start_10 Start_5) (= Start_11 Start_4) (= StartInt_5 StartInt)))
   (StartInt_6 Int (0 (str.len Start_3)))
   (Start_10 String ("b" (str.at Start_4 StartInt_4) (str.substr Start_7 StartInt_7 StartInt_2) (str.from_int StartInt_7)))
   (Start_4 String ("a" (str.at Start_12 StartInt_5) (str.substr Start_13 StartInt_7 StartInt_1) (str.replace Start_4 Start_3 Start_13) (str.from_int StartInt_2) (ite StartBool Start_2 Start_3)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_5) (str.<= Start_8 Start) (str.prefixof Start_11 Start) (= Start_6 Start_11) (<= StartInt_5 StartInt_8)))
   (Start_5 String (x "b" "a" "" (str.at Start_1 StartInt_8)))
   (StartBool_5 Bool (true false (and StartBool_4 StartBool_5) (str.<= Start_12 Start_5) (str.suffixof Start_12 Start_9) (str.contains Start_1 Start_6) (= Start_1 Start_6) (= StartInt_6 StartInt_5)))
   (Start_12 String (y (str.replace Start_12 Start_5 Start_1) (str.from_int StartInt_6) (ite StartBool Start_11 Start_10)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_4 Start_14 StartInt_9) (str.to_int Start_4)))
   (StartInt_11 Int (1 0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y "1") (str.++ "1" "b") y)))

(check-synth)
