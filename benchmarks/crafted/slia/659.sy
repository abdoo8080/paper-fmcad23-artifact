(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_16 String) (Start_15 String) (StartInt_7 Int) (Start_14 String) (Start_12 String) (StartInt_5 Int) (StartInt_6 Int) (StartBool_2 Bool) (Start_10 String) (Start_4 String) (Start_9 String) (Start_13 String) (Start_1 String) (StartInt_4 Int) (Start_2 String) (StartBool_1 Bool) (Start_6 String) (Start_5 String) (StartInt_2 Int) (Start_3 String) (StartInt_1 Int) (Start_8 String) (StartInt_3 Int) (Start_11 String) (Start_7 String))
  ((Start String ("" (str.at Start_1 StartInt) (str.replace Start Start_2 Start_1)))
   (StartInt Int (1 0 (str.indexof Start_15 Start_10 StartInt_6)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool_2) (str.< Start_16 Start_1) (str.suffixof Start_4 Start_8) (str.contains Start_5 Start_3) (= Start_10 Start_4) (<= StartInt_6 StartInt_3)))
   (StartInt_8 Int (1 (str.indexof Start_2 Start_13 StartInt_4) (str.to_int Start_12)))
   (Start_16 String (y (str.replace Start_8 Start_12 Start_7) (str.from_int StartInt_8)))
   (Start_15 String (x "0" "a" "b" (str.replace Start_1 Start_2 Start) (ite StartBool Start_12 Start_8)))
   (StartInt_7 Int (1 (str.indexof Start_8 Start_2 StartInt_6)))
   (Start_14 String (x "0" y (str.++ Start_11 Start_15) (str.at Start_9 StartInt_5) (str.substr Start_8 StartInt_5 StartInt_7)))
   (Start_12 String ("0" "" "a" (str.++ Start_5 Start_2) (str.at Start_10 StartInt_5) (str.replace Start_14 Start Start_1) (ite StartBool_2 Start_6 Start_13)))
   (StartInt_5 Int (0 1 (str.len Start_7)))
   (StartInt_6 Int (1 (str.len Start_1) (str.to_int Start_2)))
   (StartBool_2 Bool (true false (not StartBool) (str.< Start_5 Start_1) (str.<= Start_8 Start_1) (str.prefixof Start_5 Start_6) (= StartInt_5 StartInt) (<= StartInt_1 StartInt_6)))
   (Start_10 String ("" (str.replace Start_8 Start_2 Start_3) (ite StartBool_2 Start_8 Start_7)))
   (Start_4 String ("a" "b" (str.at Start_8 StartInt_1) (str.replace Start_8 Start_10 Start) (ite StartBool_1 Start_4 Start_7)))
   (Start_9 String ("b" (str.substr Start_4 StartInt_1 StartInt_3) (str.from_int StartInt)))
   (Start_13 String ("1" x (str.at Start_4 StartInt_6) (str.substr Start_9 StartInt_4 StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_9 Start_12)))
   (Start_1 String ("1" y (str.++ Start_11 Start_3) (str.at Start_4 StartInt_3) (str.replace Start_8 Start_12 Start_13) (str.from_int StartInt_4)))
   (StartInt_4 Int (1 (str.len Start_5)))
   (Start_2 String ("a" "" "0" y "b" (str.++ Start Start) (str.replace Start Start Start) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (str.<= Start_4 Start_4) (str.prefixof Start_5 Start_3)))
   (Start_6 String ("1" x (str.++ Start_4 Start_7) (str.at Start_4 StartInt_1) (str.substr Start StartInt_2 StartInt_2)))
   (Start_5 String ("a" x "1" (str.at Start StartInt_1) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_1 Start Start)))
   (StartInt_2 Int (0 1 (str.len Start_5) (str.to_int Start_8)))
   (Start_3 String ("b" (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.indexof Start_6 Start_4 StartInt)))
   (Start_8 String ("b" (str.++ Start_1 Start_1) (str.replace Start_9 Start_9 Start_9) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0))
   (Start_11 String ("" y x (str.++ Start_2 Start_2) (str.replace Start_11 Start_5 Start_11) (ite StartBool_1 Start_11 Start_10)))
   (Start_7 String (y (str.++ Start_3 Start_10) (str.at Start_2 StartInt_1) (str.substr Start_7 StartInt_4 StartInt_3) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "0" "b")))

(check-synth)
