(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_9 String) (Start_10 String) (StartBool_2 Bool) (Start_11 String) (Start_1 String) (StartInt_5 Int) (Start_2 String) (StartInt_4 Int) (StartInt_2 Int) (Start_4 String) (Start_5 String) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_1 Int) (Start_6 String) (Start_3 String) (StartInt_6 Int) (Start_7 String))
  ((Start String ("1" (str.at Start_1 StartInt_1) (str.from_int StartInt) (ite StartBool Start_2 Start_2)))
   (StartInt Int (1 (str.len Start_5)))
   (StartBool Bool (false true (and StartBool_1 StartBool) (str.< Start_1 Start_5) (str.prefixof Start_2 Start_2) (= Start_10 Start_2) (= StartInt_3 StartInt_3)))
   (Start_8 String (y (str.++ Start_11 Start_6) (str.at Start_8 StartInt_5) (str.substr Start_9 StartInt_3 StartInt_5)))
   (Start_9 String (y "1" x (str.++ Start_6 Start_1) (str.substr Start_3 StartInt StartInt_4) (str.replace Start_2 Start_7 Start_11) (str.from_int StartInt)))
   (Start_10 String ("1" (str.at Start_1 StartInt_5) (str.replace Start Start_1 Start_10) (str.from_int StartInt_5)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool StartBool) (str.<= Start_9 Start_5) (str.prefixof Start_7 Start_3) (str.contains Start_10 Start_4)))
   (Start_11 String ("" (str.substr Start_10 StartInt_5 StartInt_3) (str.replace Start_5 Start_4 Start)))
   (Start_1 String ("a" "" (str.++ Start_6 Start_4) (str.at Start_8 StartInt_3) (str.replace Start_6 Start_4 Start_6) (ite StartBool_2 Start_7 Start_4)))
   (StartInt_5 Int (0 1 (str.len Start_2) (str.to_int Start_5)))
   (Start_2 String ("0" (str.replace Start_3 Start Start_1) (str.from_int StartInt)))
   (StartInt_4 Int (0 (str.indexof Start Start_2 StartInt_3)))
   (StartInt_2 Int (1 0 (str.indexof Start_3 Start_3 StartInt) (str.to_int Start)))
   (Start_4 String ("a" (str.++ Start Start_1) (str.at Start StartInt) (ite StartBool_1 Start_4 Start)))
   (Start_5 String ("a" x (str.at Start_1 StartInt) (str.replace Start_2 Start_4 Start_6)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_1 Start_2 StartInt_4) (str.to_int Start)))
   (StartBool_1 Bool (true (str.< Start_4 Start) (str.<= Start_4 Start_1) (str.prefixof Start Start_3) (= Start_1 Start_4) (= StartInt_3 StartInt_1)))
   (StartInt_1 Int (0 1 (str.to_int Start_5)))
   (Start_6 String (y (str.at Start_2 StartInt_5) (str.substr Start_5 StartInt_3 StartInt_4) (str.replace Start Start_3 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_7)))
   (Start_3 String ("0" (str.substr Start_4 StartInt_1 StartInt_2)))
   (StartInt_6 Int (0 (str.to_int Start_1)))
   (Start_7 String ("" (str.++ Start_1 Start_6) (str.substr Start StartInt_6 StartInt_5) (str.replace Start_7 Start_7 Start_2) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.at x 0)))))

(check-synth)
