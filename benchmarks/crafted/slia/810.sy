(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartInt_5 Int) (Start_12 String) (Start_9 String) (StartInt_3 Int) (Start_13 String) (Start_8 String) (Start_1 String) (StartInt_10 Int) (Start_5 String) (Start_7 String) (StartInt_6 Int) (StartInt_2 Int) (Start_4 String) (Start_2 String) (Start_6 String) (Start_10 String) (StartBool_3 Bool) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_4 Int) (Start_11 String) (Start_3 String) (StartInt_8 Int) (StartInt_7 Int) (StartInt_9 Int) (StartBool_4 Bool))
  ((Start String ("" (str.++ Start_1 Start_1) (str.at Start_1 StartInt) (str.replace Start Start_1 Start)))
   (StartInt Int (1 (str.len Start_3) (str.indexof Start_12 Start_13 StartInt_5)))
   (StartBool Bool (true (not StartBool) (and StartBool_3 StartBool_2) (str.< Start_3 Start_1) (str.prefixof Start_2 Start_4) (str.suffixof Start_4 Start_9) (str.contains Start_3 Start_5) (= Start_2 Start_7) (= StartInt_4 StartInt_6)))
   (StartInt_1 Int (1 (str.indexof Start_8 Start_9 StartInt_5) (str.to_int Start_3)))
   (StartInt_5 Int (0 1 (str.len Start_2) (str.indexof Start_4 Start_7 StartInt)))
   (Start_12 String (y (str.at Start_11 StartInt_5) (str.substr Start_7 StartInt_1 StartInt_3) (str.from_int StartInt_8)))
   (Start_9 String ("b" (str.substr Start StartInt_4 StartInt_2)))
   (StartInt_3 Int (0 1 (str.len Start_4) (str.indexof Start_6 Start_8 StartInt_3)))
   (Start_13 String ("1" (str.at Start StartInt_2) (str.replace Start_13 Start Start_7) (ite StartBool Start_3 Start_9)))
   (Start_8 String ("" "1" (str.++ Start_8 Start_9) (str.substr Start_5 StartInt_3 StartInt_5) (str.replace Start_3 Start_4 Start_1) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_3)))
   (Start_1 String ("b" "1" (str.++ Start_2 Start) (str.at Start_1 StartInt) (str.replace Start_3 Start Start_4) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (StartInt_10 Int (1 (str.len Start_5)))
   (Start_5 String (y (str.substr Start_7 StartInt_4 StartInt_3) (str.replace Start_4 Start_2 Start_2) (str.from_int StartInt)))
   (Start_7 String (y (str.++ Start_5 Start_2) (str.substr Start_1 StartInt_4 StartInt_2) (str.replace Start_3 Start_6 Start) (str.from_int StartInt_5)))
   (StartInt_6 Int (1 (str.len Start_3)))
   (StartInt_2 Int (0 1))
   (Start_4 String ("" (str.++ Start_5 Start_3) (str.replace Start_8 Start_2 Start_4) (ite StartBool_2 Start_10 Start_7)))
   (Start_2 String ("1" y (str.at Start_9 StartInt_2)))
   (Start_6 String (y (str.at Start_2 StartInt_3) (str.substr Start_7 StartInt StartInt_3) (str.replace Start Start_1 Start_1)))
   (Start_10 String ("0" (str.at Start_10 StartInt_4) (str.substr Start_6 StartInt StartInt_4)))
   (StartBool_3 Bool (true (and StartBool_4 StartBool_3) (str.< Start_13 Start) (str.suffixof Start_13 Start_6) (<= StartInt_6 StartInt_8)))
   (StartBool_1 Bool (false true (str.< Start_1 Start_5) (str.<= Start_1 Start_2) (str.prefixof Start_3 Start_3) (str.suffixof Start_6 Start_5) (str.contains Start_4 Start_6) (= Start_4 Start_6) (= StartInt_2 StartInt) (<= StartInt_1 StartInt)))
   (StartBool_2 Bool (true false (str.<= Start_6 Start_5) (str.prefixof Start_4 Start_6) (str.suffixof Start_10 Start_11) (str.contains Start_11 Start_5) (= StartInt StartInt_3) (<= StartInt_4 StartInt_5)))
   (StartInt_4 Int (0 (str.len Start_4)))
   (Start_11 String ("b" "" (str.substr Start_10 StartInt_6 StartInt_2) (str.replace Start_10 Start_10 Start_10) (ite StartBool_1 Start_5 Start)))
   (Start_3 String ("b" (str.at Start_1 StartInt_7) (str.substr Start_3 StartInt_6 StartInt_2) (str.replace Start_7 Start_2 Start_2) (ite StartBool Start_8 Start_12)))
   (StartInt_8 Int (0 1 (str.len Start_4)))
   (StartInt_7 Int (1 0 (str.indexof Start_6 Start_3 StartInt_9) (str.to_int Start_9)))
   (StartInt_9 Int (0 1))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool_4) (str.< Start_12 Start_6) (str.suffixof Start_11 Start_6) (= Start_7 Start_11) (= StartInt_6 StartInt_1) (<= StartInt_5 StartInt_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.to_int x))))

(check-synth)
