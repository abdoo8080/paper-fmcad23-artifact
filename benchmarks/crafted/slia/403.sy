(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_12 String) (Start_11 String) (Start_1 String) (StartBool_2 Bool) (StartBool_4 Bool) (StartInt_6 Int) (Start_10 String) (StartInt_4 Int) (StartInt_9 Int) (Start_6 String) (StartBool_1 Bool) (Start_14 String) (Start_5 String) (StartInt_5 Int) (StartInt_7 Int) (Start_17 String) (StartInt_2 Int) (Start_13 String) (StartInt_8 Int) (Start_8 String) (Start_4 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_3 String) (StartInt_10 Int) (Start_9 String) (Start_16 String) (Start_15 String) (Start_7 String) (Start_2 String))
  ((Start String ("0" (str.++ Start_1 Start) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_1 Start Start) (str.from_int StartInt_2) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 (str.len Start_2)))
   (StartBool Bool (true false (not StartBool_3) (str.< Start_12 Start_3) (str.contains Start_13 Start_4) (= Start_3 Start_3) (= StartInt_6 StartInt_8) (<= StartInt_4 StartInt_1)))
   (StartInt_1 Int (0 (str.len Start_14) (str.indexof Start_17 Start_12 StartInt_5) (str.to_int Start)))
   (Start_12 String ("a" x (str.at Start_12 StartInt_7) (str.substr Start_5 StartInt_3 StartInt_6) (str.replace Start_6 Start_6 Start_9) (str.from_int StartInt_5) (ite StartBool_4 Start_11 Start_10)))
   (Start_11 String (y "b" "" "a" (str.++ Start_9 Start_5) (str.at Start_4 StartInt_1) (str.substr Start_8 StartInt_3 StartInt_5) (str.replace Start_11 Start_1 Start_8) (str.from_int StartInt_2) (ite StartBool Start_11 Start_4)))
   (Start_1 String ("0" (str.at Start_11 StartInt_2) (str.substr Start_4 StartInt_8 StartInt_1) (ite StartBool_2 Start_8 Start_1)))
   (StartBool_2 Bool (false true (and StartBool_3 StartBool_2) (str.< Start_7 Start_3) (str.prefixof Start_8 Start_1) (str.suffixof Start_9 Start_4) (str.contains Start_10 Start_3) (= Start Start_10) (<= StartInt_1 StartInt_1)))
   (StartBool_4 Bool (true (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_5 Start_6) (str.<= Start_8 Start_10) (str.suffixof Start_3 Start_7) (str.contains Start_2 Start_6) (= Start_10 Start_11) (<= StartInt_4 StartInt)))
   (StartInt_6 Int (1 0 (str.len Start_2) (str.indexof Start_3 Start_8 StartInt_1) (str.to_int Start_2)))
   (Start_10 String ("0" (str.at Start_7 StartInt_1) (str.replace Start_10 Start_2 Start_10) (str.from_int StartInt_3) (ite StartBool_4 Start_2 Start_3)))
   (StartInt_4 Int (0 (str.indexof Start_9 Start_2 StartInt_2) (str.to_int Start_6)))
   (StartInt_9 Int (1 (str.len Start_11)))
   (Start_6 String ("1" (str.++ Start_7 Start_3) (ite StartBool_2 Start_3 Start_7)))
   (StartBool_1 Bool (true false (str.< Start_1 Start) (str.<= Start_2 Start_3) (str.suffixof Start_1 Start) (str.contains Start_3 Start) (= Start_3 Start_4) (= StartInt StartInt_1) (<= StartInt StartInt)))
   (Start_14 String (y (str.++ Start_6 Start_14) (str.at Start_1 StartInt_7) (str.substr Start_3 StartInt_2 StartInt_7) (str.replace Start_14 Start_14 Start)))
   (Start_5 String (x y (str.at Start_14 StartInt_5)))
   (StartInt_5 Int (0 (str.len Start_4) (str.indexof Start_12 Start_8 StartInt_6) (str.to_int Start_4)))
   (StartInt_7 Int (0))
   (Start_17 String ("b" (str.at Start_6 StartInt_7) (str.replace Start_12 Start_8 Start_3) (str.from_int StartInt_8)))
   (StartInt_2 Int (1 0 (str.len Start_11) (str.indexof Start_4 Start_6 StartInt_4) (str.to_int Start_13)))
   (Start_13 String (x y "b" "0" (str.++ Start_14 Start_1) (str.at Start_3 StartInt_8) (str.substr Start_3 StartInt_1 StartInt_7) (str.replace Start_11 Start_11 Start_4) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_8 Int (1 (str.len Start_3) (str.to_int Start_13)))
   (Start_8 String ("a" y (str.++ Start_3 Start_10) (str.at Start_4 StartInt) (str.from_int StartInt_2)))
   (Start_4 String ("a" y))
   (StartInt_3 Int (1 0))
   (StartBool_3 Bool (false true (not StartBool_4) (str.< Start_15 Start_3) (str.suffixof Start_7 Start_16) (str.contains Start_10 Start_9) (= StartInt_9 StartInt_7) (<= StartInt StartInt_10)))
   (Start_3 String (x (str.++ Start_4 Start_4) (str.at Start_5 StartInt) (str.replace Start_6 Start_5 Start_6) (str.from_int StartInt_2)))
   (StartInt_10 Int (0 1 (str.to_int Start_7)))
   (Start_9 String ("b" (str.at Start_5 StartInt_1) (str.replace Start_13 Start_14 Start_1) (str.from_int StartInt_6) (ite StartBool_3 Start_4 Start_1)))
   (Start_16 String ("a" "" (str.++ Start_3 Start_1) (str.from_int StartInt_10)))
   (Start_15 String ("1" "" (str.++ Start_14 Start_11) (str.at Start_1 StartInt_5) (str.substr Start StartInt_6 StartInt) (str.replace Start_8 Start_8 Start_5) (str.from_int StartInt_7)))
   (Start_7 String ("a" (str.++ Start_3 Start_12) (str.at Start_5 StartInt) (str.substr Start_4 StartInt_3 StartInt_2) (ite StartBool_2 Start_5 Start_13)))
   (Start_2 String (y "a" "0" (str.substr Start_9 StartInt_8 StartInt_9) (str.replace Start_17 Start_4 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains y "1") "a" "1")))

(check-synth)
