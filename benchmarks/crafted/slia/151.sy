(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_12 String) (Start_1 String) (StartInt_6 Int) (Start_2 String) (Start_4 String) (Start_7 String) (Start_9 String) (Start_6 String) (Start_3 String) (Start_11 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_8 String) (StartBool_1 Bool) (Start_5 String) (StartInt_2 Int) (StartInt_3 Int) (StartBool_2 Bool) (StartInt_4 Int) (Start_10 String) (StartInt_5 Int))
  ((Start String (x "0" (str.++ Start Start) (str.at Start_1 StartInt_1) (str.replace Start_2 Start_3 Start_3) (ite StartBool_1 Start_3 Start_1)))
   (StartInt Int (1 0 (str.to_int Start_5)))
   (StartBool Bool (true false (str.<= Start Start_5) (str.prefixof Start_11 Start_2)))
   (StartInt_1 Int (1 0 (str.len Start_7)))
   (Start_12 String (y "1" "b" x (str.substr Start_8 StartInt_4 StartInt) (str.from_int StartInt_3) (ite StartBool_1 Start_11 Start)))
   (Start_1 String ("1" "b" (str.++ Start_11 Start_7) (str.substr Start_12 StartInt_1 StartInt_3) (str.replace Start_3 Start_2 Start_2) (str.from_int StartInt_2)))
   (StartInt_6 Int (1 0 (str.indexof Start_3 Start_5 StartInt) (str.to_int Start_11)))
   (Start_2 String ("" "1" x "a" (str.++ Start Start_1) (str.substr Start_6 StartInt_6 StartInt_3) (str.replace Start_10 Start_10 Start_2) (str.from_int StartInt_5)))
   (Start_4 String ("" (str.++ Start_6 Start_10) (str.substr Start_2 StartInt_2 StartInt_2)))
   (Start_7 String ("0" (str.++ Start_3 Start_5) (str.at Start_8 StartInt_2) (str.substr Start_6 StartInt_5 StartInt_2) (ite StartBool Start_10 Start_6)))
   (Start_9 String (x y (str.++ Start_5 Start_2) (str.at Start_2 StartInt_1) (str.substr Start_6 StartInt_5 StartInt_2) (str.replace Start_7 Start_4 Start_4) (ite StartBool Start Start_10)))
   (Start_6 String ("1" "b" (str.++ Start_7 Start_8) (str.at Start_1 StartInt_3) (str.replace Start_6 Start_8 Start_9) (ite StartBool_2 Start_8 Start_8)))
   (Start_3 String ("b" (str.++ Start_4 Start_1) (str.at Start_5 StartInt_1) (str.substr Start_5 StartInt StartInt) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_4)))
   (Start_11 String ("0" "" (str.++ Start_9 Start_12) (str.substr Start_10 StartInt_1 StartInt_6) (str.replace Start_4 Start_9 Start_4) (str.from_int StartInt_1)))
   (StartBool_3 Bool (false (not StartBool_4) (str.< Start_1 Start_2) (= StartInt_1 StartInt) (<= StartInt_4 StartInt_3)))
   (StartBool_4 Bool (false true (str.< Start_10 Start_4) (str.suffixof Start_6 Start_5) (str.contains Start_5 Start_3) (<= StartInt_2 StartInt_4)))
   (Start_8 String ("0" "" (str.++ Start_2 Start_9) (str.substr Start_1 StartInt StartInt_2) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false (not StartBool) (= Start_2 Start_3) (= StartInt_1 StartInt_1)))
   (Start_5 String ("1" (str.at Start_2 StartInt) (str.substr Start_4 StartInt_2 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_3)))
   (StartInt_2 Int (0 (str.len Start_7) (str.indexof Start_10 Start_1 StartInt_5) (str.to_int Start)))
   (StartInt_3 Int (1 (str.to_int Start_3)))
   (StartBool_2 Bool (false (and StartBool StartBool_3) (= Start_3 Start) (= StartInt_2 StartInt_2) (<= StartInt_4 StartInt_4)))
   (StartInt_4 Int (1 (str.len Start_4)))
   (Start_10 String ("b" "a" "1" (str.++ Start_7 Start_4) (str.at Start_10 StartInt_2) (str.replace Start_10 Start_3 Start) (ite StartBool_2 Start_6 Start_7)))
   (StartInt_5 Int (0 (str.len Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" x "")))

(check-synth)
