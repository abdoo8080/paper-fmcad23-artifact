(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_8 Int) (StartInt_1 Int) (Start_9 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_3 String) (Start_11 String) (Start_12 String) (StartInt_2 Int) (StartInt_5 Int) (Start_2 String) (Start_8 String) (StartInt_3 Int) (Start_5 String) (Start_6 String) (Start_7 String) (StartBool_1 Bool) (Start_4 String) (StartInt_6 Int) (Start_1 String) (Start_10 String) (StartInt_7 Int))
  ((Start String (y (str.++ Start Start) (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_2) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_10) (str.indexof Start_11 Start_10 StartInt_8)))
   (StartBool Bool (false (not StartBool_3) (str.prefixof Start_12 Start_9) (str.suffixof Start Start_11)))
   (StartBool_3 Bool (true (and StartBool StartBool_3) (str.prefixof Start_12 Start_7) (= Start_2 Start_2) (= StartInt_6 StartInt_5) (<= StartInt_3 StartInt_7)))
   (StartInt_8 Int (1 0 (str.indexof Start_2 Start_3 StartInt_5) (str.to_int Start)))
   (StartInt_1 Int (0 (str.len Start_2) (str.to_int Start_2)))
   (Start_9 String ("b" "" (str.++ Start_10 Start_2) (ite StartBool_1 Start_6 Start_10)))
   (StartInt_4 Int (1 0 (str.to_int Start_5)))
   (StartBool_2 Bool (true (str.< Start_7 Start_7) (str.<= Start_8 Start_11) (= Start_2 Start) (= StartInt_1 StartInt_3) (<= StartInt_5 StartInt_6)))
   (Start_3 String ("0" y x (str.at Start_11 StartInt_2) (str.substr Start_7 StartInt_2 StartInt_5)))
   (Start_11 String ("b" "1" (str.substr Start_2 StartInt StartInt_5) (ite StartBool_1 Start_2 Start_1)))
   (Start_12 String ("1" x (str.at Start_11 StartInt_6) (str.substr Start_12 StartInt_2 StartInt)))
   (StartInt_2 Int (1 0 (str.indexof Start_2 Start_1 StartInt_2)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.to_int Start_3)))
   (Start_2 String ("1" "0" y "a" (str.++ Start_2 Start_3) (str.at Start_1 StartInt_3) (ite StartBool Start_1 Start_3)))
   (Start_8 String ("a" (str.from_int StartInt_1)))
   (StartInt_3 Int (1 0 (str.len Start) (str.to_int Start_4)))
   (Start_5 String ("" (str.at Start StartInt_1) (str.substr Start_2 StartInt_3 StartInt_1) (str.replace Start_3 Start Start_6) (str.from_int StartInt_3) (ite StartBool Start_5 Start_2)))
   (Start_6 String (x y (str.at Start_7 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start_8 Start_4 Start_1)))
   (Start_7 String ("0" "a" y (str.++ Start_9 Start) (str.substr Start_8 StartInt_4 StartInt_4) (str.replace Start_5 Start_1 Start_8) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_3)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start_5 Start) (str.<= Start_6 Start_1) (<= StartInt_5 StartInt_6)))
   (Start_4 String ("a" (str.at Start_4 StartInt_3) (str.substr Start_5 StartInt StartInt_2) (str.from_int StartInt)))
   (StartInt_6 Int (1 (str.len Start_10) (str.indexof Start_9 Start_1 StartInt_2)))
   (Start_1 String ("a" (str.++ Start_4 Start) (str.at Start_3 StartInt_1) (str.substr Start StartInt_7 StartInt_6) (str.replace Start_8 Start_2 Start)))
   (Start_10 String ("b" "0" x "1" y "" (str.++ Start_8 Start_2) (str.substr Start_1 StartInt_3 StartInt_2) (str.replace Start_11 Start_5 Start) (str.from_int StartInt_7) (ite StartBool_2 Start_11 Start_8)))
   (StartInt_7 Int (0 (str.len Start_10) (str.indexof Start_6 Start_10 StartInt_7) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= x "b") "" "0")))

(check-synth)
