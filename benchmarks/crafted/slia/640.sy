(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_14 Int) (Start_1 String) (StartInt_10 Int) (Start_8 String) (Start_9 String) (Start_7 String) (StartInt_11 Int) (StartBool_1 Bool) (StartInt_3 Int) (StartInt_1 Int) (Start_6 String) (Start_10 String) (StartInt_4 Int) (StartInt_7 Int) (Start_11 String) (StartInt_13 Int) (Start_3 String) (StartInt_9 Int) (Start_4 String) (Start_5 String) (StartBool_2 Bool) (Start_16 String) (Start_2 String) (StartInt_8 Int) (StartInt_6 Int) (Start_13 String) (StartInt_5 Int) (StartInt_2 Int) (Start_15 String) (StartInt_12 Int) (Start_14 String) (Start_12 String))
  ((Start String (x (str.++ Start_1 Start) (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt_1)))
   (StartInt Int (0 (str.len Start_6)))
   (StartBool Bool (false true (str.< Start_10 Start_7) (str.<= Start_2 Start_11) (str.prefixof Start_4 Start_14) (str.contains Start_14 Start_13) (= Start_16 Start_5)))
   (StartInt_14 Int (1 0 (str.len Start_14)))
   (Start_1 String ("1" (str.++ Start_15 Start_10) (str.at Start_12 StartInt_14) (str.replace Start_13 Start_1 Start_10)))
   (StartInt_10 Int (0))
   (Start_8 String ("b" x (str.replace Start_5 Start_1 Start_5) (str.from_int StartInt_8)))
   (Start_9 String (y "1" (str.substr Start_8 StartInt_1 StartInt_7) (str.replace Start_2 Start_9 Start_5) (str.from_int StartInt_1)))
   (Start_7 String (x (str.at Start StartInt_5) (str.substr Start_4 StartInt_6 StartInt_7) (str.replace Start_1 Start_2 Start_2)))
   (StartInt_11 Int (0 (str.indexof Start_12 Start_8 StartInt_10) (str.to_int Start_13)))
   (StartBool_1 Bool (false (str.< Start_12 Start_7) (str.<= Start_11 Start_3) (str.suffixof Start_12 Start_4) (str.contains Start_13 Start) (= Start_11 Start_2) (<= StartInt_11 StartInt_2)))
   (StartInt_3 Int (1 0 (str.len Start_1)))
   (StartInt_1 Int (0 (str.len Start_1) (str.indexof Start Start_1 StartInt_2) (str.to_int Start_2)))
   (Start_6 String ("b" "1" y "" x))
   (Start_10 String ("a" "" y (str.substr Start_6 StartInt_2 StartInt) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 1 (str.indexof Start_6 Start_5 StartInt_1) (str.to_int Start_1)))
   (StartInt_7 Int (1 (str.len Start_1) (str.indexof Start_8 Start_9 StartInt)))
   (Start_11 String ("0" y "b" "a" "" x (str.at Start_8 StartInt_7) (str.from_int StartInt_10) (ite StartBool_1 Start_9 Start_2)))
   (StartInt_13 Int (0 1 (str.len Start_8) (str.indexof Start_14 Start_14 StartInt_1) (str.to_int Start_12)))
   (Start_3 String (y "0" "1" "a" (str.at Start_1 StartInt_2) (str.replace Start_2 Start_4 Start_2) (str.from_int StartInt_2) (ite StartBool Start_5 Start_3)))
   (StartInt_9 Int (1 0 (str.indexof Start_9 Start_3 StartInt_2) (str.to_int Start_8)))
   (Start_4 String ("b" x "" (str.++ Start Start_4) (str.at Start_1 StartInt_1) (str.replace Start_2 Start Start_7)))
   (Start_5 String ("0" "1" (str.++ Start Start_5) (str.substr Start_6 StartInt_3 StartInt_4)))
   (StartBool_2 Bool (false true (and StartBool StartBool_1) (str.<= Start_9 Start_8) (str.prefixof Start_11 Start_13) (str.suffixof Start_2 Start_14) (str.contains Start_10 Start_3) (<= StartInt_11 StartInt_11)))
   (Start_16 String ("a" (str.replace Start_10 Start_10 Start_16) (str.from_int StartInt_3) (ite StartBool_2 Start_11 Start_9)))
   (Start_2 String ("a" "b" "1" "0" (str.++ Start_2 Start_1) (str.substr Start StartInt_1 StartInt_1) (ite StartBool Start_2 Start_3)))
   (StartInt_8 Int (0 (str.len Start_10) (str.indexof Start_10 Start_2 StartInt_4)))
   (StartInt_6 Int (0 (str.indexof Start_9 Start_8 StartInt_9)))
   (Start_13 String ("a" (str.substr Start_14 StartInt_12 StartInt_3) (str.replace Start Start_5 Start_11) (str.from_int StartInt_8)))
   (StartInt_5 Int (0 1 (str.indexof Start_1 Start_4 StartInt_9) (str.to_int Start_1)))
   (StartInt_2 Int (1 0 (str.len Start_11) (str.indexof Start_10 Start_7 StartInt_3)))
   (Start_15 String ("a" y "1" "b" "0" x (str.at Start_10 StartInt_11) (str.substr Start StartInt_11 StartInt_10) (str.from_int StartInt_6) (ite StartBool_2 Start_7 Start_4)))
   (StartInt_12 Int (1 0 (str.len Start_8)))
   (Start_14 String (y "1" (str.++ Start_8 Start_10) (str.at Start_14 StartInt_13) (str.from_int StartInt_4) (ite StartBool Start_15 Start_13)))
   (Start_12 String ("b" (str.++ Start_9 Start_10) (str.at Start_11 StartInt_7) (str.substr Start_3 StartInt_11 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "" x) 1)))

(check-synth)
