(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_13 String) (StartBool_2 Bool) (Start_5 String) (StartBool_3 Bool) (StartInt_6 Int) (Start_7 String) (Start_9 String) (StartInt_7 Int) (Start_11 String) (Start_10 String) (Start_6 String) (Start_4 String) (Start_1 String) (Start_12 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_3 String) (Start_8 String) (Start_2 String) (StartInt_4 Int) (StartInt_2 Int) (StartInt_3 Int) (StartInt_5 Int))
  ((Start String ("0" (str.++ Start_1 Start) (ite StartBool Start Start_1)))
   (StartInt Int (0 (str.len Start_2) (str.indexof Start Start_1 StartInt_2) (str.to_int Start_1)))
   (StartBool Bool (true (not StartBool_2) (str.prefixof Start_5 Start_6) (str.suffixof Start_5 Start_2) (str.contains Start_7 Start_7) (= StartInt_3 StartInt_5) (<= StartInt_5 StartInt_4)))
   (StartBool_4 Bool (false (and StartBool_2 StartBool_3) (str.contains Start_4 Start_6) (= StartInt_3 StartInt_7)))
   (Start_13 String (y "1" "0" x (str.at Start_5 StartInt_7)))
   (StartBool_2 Bool (false true (not StartBool_4) (str.< Start_11 Start_7) (str.prefixof Start_3 Start_13) (= Start_10 Start_4) (= StartInt_6 StartInt_1)))
   (Start_5 String (y (str.substr Start_5 StartInt_7 StartInt_7) (str.replace Start_7 Start_7 Start_7) (str.from_int StartInt_4) (ite StartBool Start_4 Start_10)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_1) (str.< Start Start_11) (str.suffixof Start_4 Start_10) (= StartInt StartInt_6)))
   (StartInt_6 Int (0 1 (str.indexof Start_5 Start_2 StartInt_6) (str.to_int Start_11)))
   (Start_7 String ("b" "1" x "" (str.++ Start_8 Start_2) (str.substr Start_2 StartInt_3 StartInt_6) (str.from_int StartInt_1)))
   (Start_9 String ("a" "b" (str.replace Start_9 Start_3 Start_10) (str.from_int StartInt_4) (ite StartBool Start_6 Start_9)))
   (StartInt_7 Int (1 0 (str.len Start_2) (str.to_int Start_12)))
   (Start_11 String ("a" (str.++ Start_10 Start_11) (str.substr Start_9 StartInt_6 StartInt_5) (str.from_int StartInt_3) (ite StartBool_3 Start_2 Start_6)))
   (Start_10 String (x "0" "" y "b" "a" (str.++ Start_4 Start_2) (str.at Start_1 StartInt_5) (str.from_int StartInt_2)))
   (Start_6 String ("a" "1" "b" (str.at Start_2 StartInt) (str.replace Start_6 Start Start_8) (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start_4)))
   (Start_4 String (x "1" "0" "b" "a" "" y (str.substr Start StartInt_3 StartInt_2) (str.from_int StartInt_4)))
   (Start_1 String ("a" "1" "" "b" y (str.++ Start_2 Start_2) (str.at Start_3 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_3 Start Start) (ite StartBool_1 Start Start_2)))
   (Start_12 String ("a" (str.substr Start_6 StartInt_7 StartInt_5) (str.replace Start_10 Start_2 Start_9) (str.from_int StartInt)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_1 StartBool) (str.prefixof Start_3 Start)))
   (StartInt_1 Int (0 (str.len Start_1)))
   (Start_3 String ("1" (str.at Start StartInt) (ite StartBool Start_2 Start_1)))
   (Start_8 String ("0" (str.at Start_4 StartInt_2) (str.replace Start_4 Start_2 Start) (str.from_int StartInt) (ite StartBool_1 Start Start_9)))
   (Start_2 String (y (str.substr Start_2 StartInt StartInt) (str.replace Start_3 Start_3 Start_3)))
   (StartInt_4 Int (0))
   (StartInt_2 Int (1 0 (str.len Start_4)))
   (StartInt_3 Int (0 (str.len Start_3)))
   (StartInt_5 Int (1 0 (str.indexof Start_6 Start_5 StartInt_2) (str.to_int Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof "0" x) x "")))

(check-synth)
