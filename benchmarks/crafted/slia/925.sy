(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartInt_7 Int) (StartInt_6 Int) (Start_1 String) (Start_4 String) (StartBool_2 Bool) (StartInt_5 Int) (StartInt_1 Int) (StartInt_2 Int) (Start_5 String) (StartBool_1 Bool) (Start_2 String) (Start_6 String) (StartInt_3 Int) (StartInt_4 Int) (Start_3 String) (Start_7 String))
  ((Start String ("a" "" (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start_3 Start_1) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_3)))
   (StartInt Int (1 0))
   (StartBool Bool (false (and StartBool_1 StartBool_2) (str.< Start_4 Start) (= Start_3 Start_2) (= StartInt_6 StartInt_5) (<= StartInt StartInt_7)))
   (Start_8 String ("1" "b" (str.substr Start_3 StartInt_7 StartInt_1)))
   (StartInt_7 Int (0 1 (str.len Start_6) (str.indexof Start_4 Start_8 StartInt_2)))
   (StartInt_6 Int (0 1 (str.to_int Start_3)))
   (Start_1 String ("" (str.++ Start Start_4) (str.at Start_2 StartInt_1) (str.replace Start_4 Start_3 Start) (str.from_int StartInt) (ite StartBool_2 Start_7 Start_1)))
   (Start_4 String ("a" (str.++ Start_4 Start_1) (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool_2 Start Start_3)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool StartBool_1) (str.contains Start_1 Start_5) (= Start_5 Start_5) (= StartInt StartInt_2)))
   (StartInt_5 Int (0))
   (StartInt_1 Int (1))
   (StartInt_2 Int (1 0 (str.indexof Start Start_2 StartInt_2)))
   (Start_5 String (y "1" "0" "" (str.at Start StartInt) (str.replace Start_4 Start_1 Start_1) (ite StartBool Start_6 Start_3)))
   (StartBool_1 Bool (true (not StartBool) (str.prefixof Start_4 Start_5) (<= StartInt_4 StartInt)))
   (Start_2 String ("b" (str.++ Start_6 Start_6)))
   (Start_6 String ("a" "" y "b" (str.++ Start_1 Start_6) (str.at Start_4 StartInt_3) (str.replace Start Start Start) (ite StartBool_2 Start_2 Start_4)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start Start StartInt)))
   (StartInt_4 Int (0 (str.len Start_1) (str.indexof Start_2 Start StartInt_1) (str.to_int Start_2)))
   (Start_3 String ("a" (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_6 Start_6 Start_7) (str.from_int StartInt_1)))
   (Start_7 String ("1" y x (str.++ Start_4 Start_6) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.to_int (str.replace "0" x "0")))))

(check-synth)
