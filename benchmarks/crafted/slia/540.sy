(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_9 Int) (Start_10 String) (Start_3 String) (StartInt_6 Int) (Start_8 String) (StartBool_1 Bool) (Start_1 String) (StartInt_2 Int) (Start_2 String) (Start_6 String) (Start_9 String) (Start_5 String) (Start_7 String) (StartInt_3 Int) (StartInt_8 Int) (StartInt_5 Int) (StartInt_1 Int) (StartInt_7 Int) (Start_4 String) (StartInt_4 Int))
  ((Start String ("a" (str.at Start StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 (str.indexof Start_4 Start_2 StartInt_9) (str.to_int Start_10)))
   (StartBool Bool (false true (not StartBool_1) (str.<= Start_11 Start_4) (str.prefixof Start_1 Start_2) (str.contains Start_6 Start_6)))
   (Start_11 String ("b" x (str.++ Start_1 Start_5) (str.replace Start_6 Start_10 Start_5) (ite StartBool Start_7 Start_1)))
   (StartInt_9 Int (1 0 (str.len Start_5) (str.to_int Start)))
   (Start_10 String ("0" y x "b" (str.++ Start_7 Start_6) (str.at Start_10 StartInt_9)))
   (Start_3 String (y (str.++ Start_7 Start_4) (str.at Start StartInt_7) (str.replace Start_2 Start_2 Start_4) (str.from_int StartInt_8)))
   (StartInt_6 Int (0 (str.len Start_4)))
   (Start_8 String ("" (str.at Start_5 StartInt_7) (str.replace Start_4 Start_1 Start_7) (ite StartBool_1 Start_8 Start_8)))
   (StartBool_1 Bool (true false (str.< Start Start_6) (str.prefixof Start_1 Start_2) (= Start_8 Start_3) (= StartInt_2 StartInt_6) (<= StartInt_2 StartInt_5)))
   (Start_1 String (y "1" x (str.++ Start_2 Start_1) (str.at Start_3 StartInt_1) (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 (str.len Start_3) (str.to_int Start)))
   (Start_2 String (y "0" x "a" (str.at Start_3 StartInt_3) (str.replace Start_3 Start_9 Start_8) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_2)))
   (Start_6 String (y (str.++ Start Start_2) (str.at Start_1 StartInt_2) (str.substr Start_5 StartInt_3 StartInt_5)))
   (Start_9 String (y x "b" (str.++ Start_5 Start_7) (str.at Start_9 StartInt_3) (str.substr Start_6 StartInt_2 StartInt_6)))
   (Start_5 String (x "1" (str.at Start_4 StartInt) (str.replace Start_6 Start_1 Start) (str.from_int StartInt_6) (ite StartBool_1 Start_4 Start_7)))
   (Start_7 String (x "" "a" "1" "0" (str.++ Start_6 Start_5) (str.substr Start_7 StartInt_7 StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_2) (str.indexof Start_3 Start_3 StartInt_4) (str.to_int Start_4)))
   (StartInt_8 Int (1 0 (str.indexof Start_2 Start_6 StartInt_3) (str.to_int Start_1)))
   (StartInt_5 Int (0 (str.len Start) (str.indexof Start_2 Start_6 StartInt_5)))
   (StartInt_1 Int (0 1 (str.indexof Start_3 Start_2 StartInt_3) (str.to_int Start_2)))
   (StartInt_7 Int (1 (str.indexof Start_7 Start_6 StartInt_4) (str.to_int Start_3)))
   (Start_4 String (y "b" (str.at Start_4 StartInt_1)))
   (StartInt_4 Int (0 1 (str.len Start_3) (str.indexof Start_4 Start_5 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" "" (str.replace y "0" "1"))))

(check-synth)
