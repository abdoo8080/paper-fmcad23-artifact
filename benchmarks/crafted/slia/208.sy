(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartBool_4 Bool) (StartBool_3 Bool) (StartInt_5 Int) (Start_8 String) (Start_7 String) (Start_12 String) (Start_4 String) (StartInt_3 Int) (Start_9 String) (Start_1 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_10 String) (Start_5 String) (Start_6 String) (StartInt_2 Int) (StartInt_6 Int) (Start_3 String) (Start_11 String) (StartBool_2 Bool) (Start_13 String) (StartInt_4 Int) (Start_2 String))
  ((Start String (y (str.++ Start_1 Start) (str.replace Start_1 Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (1))
   (StartBool Bool (true false (str.prefixof Start_14 Start_2) (str.suffixof Start_3 Start_13) (= Start_5 Start_13)))
   (Start_14 String ("b" (str.at Start_14 StartInt_6) (str.substr Start_4 StartInt_3 StartInt_3) (str.replace Start Start_4 Start_5)))
   (StartBool_4 Bool (true (not StartBool_1) (and StartBool_2 StartBool_1) (str.prefixof Start_2 Start_13) (str.contains Start_12 Start_14) (= Start Start) (<= StartInt_4 StartInt_1)))
   (StartBool_3 Bool (false (and StartBool StartBool_2) (str.< Start_2 Start_10) (str.<= Start_3 Start_9) (str.prefixof Start_5 Start_10) (str.suffixof Start_9 Start) (str.contains Start_11 Start_6)))
   (StartInt_5 Int (0 1 (str.len Start_9) (str.indexof Start_6 Start_8 StartInt_3) (str.to_int Start_3)))
   (Start_8 String (x (str.++ Start_7 Start_9) (str.substr Start_5 StartInt_4 StartInt_5) (str.from_int StartInt_5)))
   (Start_7 String ("" (str.++ Start Start_8) (str.at Start_1 StartInt_4)))
   (Start_12 String (x (ite StartBool_1 Start_3 Start_10)))
   (Start_4 String ("" (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_4 Start Start_5)))
   (StartInt_3 Int (0 (str.len Start_4)))
   (Start_9 String ("" "0" (str.++ Start_9 Start_2) (str.replace Start Start_2 Start_4) (ite StartBool_3 Start_5 Start_9)))
   (Start_1 String (y (str.at Start_2 StartInt) (str.replace Start_2 Start_1 Start_3) (ite StartBool_1 Start_1 Start_1)))
   (StartInt_1 Int (0 1 (str.len Start) (str.to_int Start)))
   (StartBool_1 Bool (false (str.< Start Start) (str.<= Start Start_4) (str.prefixof Start_3 Start_1) (str.suffixof Start_2 Start) (= Start_1 Start)))
   (Start_10 String ("b" "a" "0" "" "1" y (str.++ Start_3 Start_12) (str.at Start_3 StartInt_6) (str.from_int StartInt)))
   (Start_5 String ("0" (str.at Start_4 StartInt) (str.from_int StartInt_2)))
   (Start_6 String ("0" "" (str.substr Start_6 StartInt_1 StartInt) (str.from_int StartInt) (ite StartBool Start_6 Start_4)))
   (StartInt_2 Int (0 1 (str.len Start_6) (str.indexof Start_3 Start_1 StartInt_3) (str.to_int Start_4)))
   (StartInt_6 Int (0 (str.len Start_8) (str.indexof Start_2 Start_6 StartInt_1) (str.to_int Start_13)))
   (Start_3 String (y (str.++ Start_5 Start_4) (str.at Start_3 StartInt_2) (str.substr Start_4 StartInt_1 StartInt_1) (str.from_int StartInt_4) (ite StartBool_2 Start_3 Start_6)))
   (Start_11 String ("" "b" "1" "0" (str.++ Start_3 Start_10) (str.replace Start_6 Start_11 Start_3) (str.from_int StartInt)))
   (StartBool_2 Bool (true (not StartBool_1) (str.< Start_3 Start_2) (str.contains Start_3 Start_6) (= Start_5 Start_3)))
   (Start_13 String ("0" (str.++ Start_2 Start_10) (str.at Start_5 StartInt_4) (str.substr Start_13 StartInt_3 StartInt_2) (str.from_int StartInt_2) (ite StartBool_4 Start_6 Start_7)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_2 Start_4 StartInt_3)))
   (Start_2 String ("" (str.substr Start_7 StartInt_2 StartInt_1) (str.replace Start_6 Start_5 Start_3) (str.from_int StartInt_4) (ite StartBool_1 Start_7 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ x (str.at y 1))))

(check-synth)
