(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (Start_7 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_11 String) (Start_6 String) (Start_3 String) (StartInt_1 Int) (StartInt_4 Int) (Start_5 String) (Start_8 String) (StartInt_6 Int) (StartInt_5 Int) (Start_2 String) (StartBool_1 Bool) (Start_4 String) (Start_1 String) (Start_10 String) (Start_9 String) (StartInt_3 Int))
  ((Start String (x "0" "" "1" (str.++ Start Start_1) (str.at Start_2 StartInt_1) (str.substr Start StartInt_1 StartInt_1) (str.replace Start Start Start_3) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.to_int Start_3)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_1 StartBool) (str.<= Start_11 Start_3) (str.prefixof Start_5 Start_5) (str.suffixof Start_6 Start_9) (= Start_6 Start_2) (= StartInt_3 StartInt_5)))
   (StartInt_2 Int (0 (str.to_int Start_7)))
   (Start_7 String ("a" "1" "b" (str.at Start_6 StartInt_7) (str.from_int StartInt_2)))
   (StartInt_7 Int (0 (str.indexof Start_1 Start StartInt_2)))
   (StartBool_2 Bool (false (str.prefixof Start_1 Start_8) (str.suffixof Start_8 Start_6) (= Start Start_10) (= StartInt_7 StartInt_5)))
   (Start_11 String ("a" (str.replace Start Start Start_6) (str.from_int StartInt_6) (ite StartBool_2 Start_11 Start_1)))
   (Start_6 String ("a" (str.++ Start_7 Start_2) (ite StartBool_2 Start_1 Start_8)))
   (Start_3 String (x "0" (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.to_int Start)))
   (StartInt_4 Int (1 0 (str.len Start_2) (str.indexof Start_10 Start_3 StartInt_6)))
   (Start_5 String ("b" (str.from_int StartInt_1)))
   (Start_8 String ("0" (str.at Start_6 StartInt_2) (str.replace Start_7 Start_2 Start_9) (str.from_int StartInt_3) (ite StartBool_1 Start_10 Start_6)))
   (StartInt_6 Int (1 (str.len Start_10)))
   (StartInt_5 Int (1 0 (str.len Start_8) (str.indexof Start_3 Start_11 StartInt) (str.to_int Start_4)))
   (Start_2 String ("1" "" x "b" (str.at Start_3 StartInt) (str.replace Start_4 Start Start_2)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.<= Start_5 Start_6) (str.suffixof Start_5 Start_6) (<= StartInt StartInt)))
   (Start_4 String (x "" (str.++ Start_3 Start_5) (str.at Start_4 StartInt) (str.substr Start_2 StartInt StartInt)))
   (Start_1 String (x "a" "1" (str.substr Start_6 StartInt StartInt_2) (str.replace Start Start_7 Start_8) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_1)))
   (Start_10 String ("a" (str.++ Start_2 Start_5) (ite StartBool Start_10 Start_7)))
   (Start_9 String ("" (str.++ Start_2 Start_9) (str.substr Start_10 StartInt_1 StartInt_4) (str.from_int StartInt_5)))
   (StartInt_3 Int (1 (str.len Start_10) (str.indexof Start_8 Start_4 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace y "0" "a") 0)))

(check-synth)
