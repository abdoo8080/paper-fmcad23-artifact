(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (StartInt_10 Int) (Start_12 String) (Start_7 String) (StartInt_1 Int) (Start_11 String) (Start_8 String) (StartBool_1 Bool) (Start_14 String) (Start_3 String) (Start_16 String) (StartInt_3 Int) (Start_2 String) (Start_10 String) (Start_6 String) (Start_1 String) (Start_5 String) (StartBool_2 Bool) (Start_13 String) (Start_15 String) (Start_9 String) (StartBool_3 Bool) (Start_17 String) (StartBool_4 Bool) (StartInt_5 Int) (StartInt_6 Int) (StartInt_7 Int) (Start_4 String) (StartInt_4 Int) (StartInt_8 Int) (StartInt_2 Int))
  ((Start String ("" "0" "a" "1" (str.++ Start Start) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_2 Start_2 Start_1)))
   (StartInt Int (1 0))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (str.prefixof Start_14 Start_7) (str.suffixof Start Start_5) (= StartInt_9 StartInt_10)))
   (StartInt_9 Int (1 (str.len Start_16) (str.to_int Start_17)))
   (StartInt_10 Int (0 1 (str.len Start) (str.indexof Start_9 Start_15 StartInt_1) (str.to_int Start_14)))
   (Start_12 String ("b" "1" "" y (str.++ Start_3 Start_12) (str.at Start_9 StartInt_6) (str.from_int StartInt_6)))
   (Start_7 String ("a" (str.++ Start_7 Start_8) (str.at Start_6 StartInt) (str.replace Start_12 Start_3 Start_10) (ite StartBool_1 Start_9 Start_1)))
   (StartInt_1 Int (0 (str.indexof Start_5 Start_5 StartInt)))
   (Start_11 String ("0" (str.substr Start_8 StartInt_3 StartInt_1) (str.replace Start_5 Start_1 Start_9) (ite StartBool_3 Start_1 Start_8)))
   (Start_8 String ("1" (str.++ Start_9 Start_5) (str.substr Start_4 StartInt_4 StartInt_5) (str.from_int StartInt_3)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (str.< Start Start_1) (str.<= Start Start_5) (str.prefixof Start_5 Start_4) (str.suffixof Start Start_1) (= StartInt_2 StartInt_3)))
   (Start_14 String ("0" "" x "b" "1" (str.substr Start_2 StartInt_4 StartInt) (str.replace Start_11 Start_14 Start_10)))
   (Start_3 String (y "a" "b" "1" "" "0" x (str.substr Start_4 StartInt_4 StartInt_4) (str.replace Start_5 Start_1 Start) (str.from_int StartInt_5) (ite StartBool_1 Start_1 Start_3)))
   (Start_16 String ("" y x "a" (str.at Start_7 StartInt_1) (str.from_int StartInt_2) (ite StartBool_3 Start_4 Start_6)))
   (StartInt_3 Int (1 0 (str.indexof Start Start_3 StartInt)))
   (Start_2 String ("b" (str.++ Start_2 Start_2) (str.substr Start_2 StartInt_3 StartInt_2)))
   (Start_10 String (x "b" (str.++ Start_9 Start_4) (str.at Start_11 StartInt) (str.replace Start_6 Start_3 Start_8)))
   (Start_6 String ("1" "b" (str.at Start_7 StartInt) (str.from_int StartInt_4)))
   (Start_1 String ("1" (str.++ Start_15 Start_16) (str.replace Start_5 Start_13 Start_13) (str.from_int StartInt)))
   (Start_5 String ("" "0" "1" (str.++ Start_3 Start_1) (str.at Start_2 StartInt_1) (str.replace Start_13 Start_11 Start_2) (str.from_int StartInt_3)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_3 StartBool_1) (str.< Start_5 Start_1) (str.<= Start_4 Start_2) (str.suffixof Start Start_3) (str.contains Start_6 Start_2) (= Start_7 Start_4) (<= StartInt_6 StartInt)))
   (Start_13 String ("b" "1" "0" (str.at Start_1 StartInt_2) (str.substr Start_4 StartInt_7 StartInt_1) (str.from_int StartInt_1)))
   (Start_15 String ("b" (str.++ Start_9 Start_9) (str.at Start_13 StartInt_1) (str.substr Start_1 StartInt_5 StartInt_4) (str.from_int StartInt_8) (ite StartBool_1 Start_10 Start_8)))
   (Start_9 String ("0" "" (str.from_int StartInt) (ite StartBool_2 Start_7 Start_10)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_2 StartBool) (str.prefixof Start_6 Start_3) (str.suffixof Start_5 Start_11) (= StartInt_2 StartInt_3)))
   (Start_17 String (x (str.substr Start_10 StartInt_5 StartInt_4) (str.replace Start_5 Start_8 Start_16)))
   (StartBool_4 Bool (true (str.<= Start_9 Start_9) (str.suffixof Start_5 Start_6)))
   (StartInt_5 Int (1 0 (str.indexof Start_6 Start StartInt_2)))
   (StartInt_6 Int (0 (str.len Start_8) (str.indexof Start_4 Start_3 StartInt_3)))
   (StartInt_7 Int (0 1 (str.len Start_6)))
   (Start_4 String ("b" (str.++ Start_14 Start) (str.at Start_12 StartInt_4) (str.substr Start_15 StartInt StartInt_2)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_10 StartInt_3) (str.to_int Start_12)))
   (StartInt_8 Int (1 0 (str.len Start) (str.indexof Start_10 Start_1 StartInt)))
   (StartInt_2 Int (0 1 (str.len Start_10) (str.indexof Start_5 Start_3 StartInt_2) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "0" y "") "0")))

(check-synth)
