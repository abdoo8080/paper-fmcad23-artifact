(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_15 String) (Start_13 String) (StartInt_5 Int) (Start_17 String) (Start_16 String) (Start_1 String) (Start_6 String) (Start_3 String) (Start_14 String) (Start_11 String) (Start_4 String) (StartInt_2 Int) (Start_2 String) (Start_18 String) (Start_12 String) (StartInt_3 Int) (Start_7 String) (StartInt_4 Int) (StartInt_1 Int) (Start_8 String) (StartInt_6 Int) (Start_5 String) (Start_9 String) (Start_10 String) (StartBool_1 Bool))
  ((Start String ("1" "a" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt StartInt) (str.replace Start_2 Start_3 Start_2)))
   (StartInt Int (1 0 (str.to_int Start_5)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool StartBool_1) (str.<= Start_12 Start_13) (str.prefixof Start_13 Start_6) (str.suffixof Start_10 Start) (= StartInt_1 StartInt_3) (<= StartInt_5 StartInt_3)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool StartBool_1) (str.<= Start_10 Start_16) (str.prefixof Start_6 Start_1) (str.suffixof Start_11 Start_10) (= StartInt_4 StartInt_2)))
   (Start_15 String ("a" "1" (str.++ Start_3 Start_14) (str.replace Start Start_2 Start_12) (ite StartBool_1 Start_15 Start_15)))
   (Start_13 String ("" x "b" (str.at Start_1 StartInt_5) (str.replace Start_12 Start_14 Start_7) (str.from_int StartInt_3) (ite StartBool_2 Start_15 Start_4)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.indexof Start_9 Start_11 StartInt_3) (str.to_int Start_4)))
   (Start_17 String ("" (str.++ Start_8 Start_16) (str.from_int StartInt_2) (ite StartBool Start_10 Start_6)))
   (Start_16 String ("1" "0" x y (str.++ Start_4 Start_17) (str.substr Start_5 StartInt StartInt_4) (str.replace Start_4 Start_8 Start_17) (str.from_int StartInt_5)))
   (Start_1 String ("1" "" (str.++ Start_9 Start_4) (str.at Start_9 StartInt) (str.replace Start_11 Start_2 Start_8)))
   (Start_6 String (y (str.from_int StartInt_4)))
   (Start_3 String ("a" (str.++ Start_1 Start_2) (str.at Start_4 StartInt_2) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_4 Start_2 Start)))
   (Start_14 String ("a" "0" (str.++ Start_9 Start_6) (str.at Start_16 StartInt_5) (str.substr Start_15 StartInt_6 StartInt_4)))
   (Start_11 String ("" (str.replace Start_6 Start_9 Start_10) (str.from_int StartInt_3)))
   (Start_4 String ("" (str.from_int StartInt_3)))
   (StartInt_2 Int (1 (str.indexof Start_1 Start StartInt_3)))
   (Start_2 String (x "a" (str.substr Start_3 StartInt_4 StartInt_3)))
   (Start_18 String ("a" x "0" (str.at Start_14 StartInt_5) (str.substr Start_15 StartInt_4 StartInt_3) (str.from_int StartInt_3)))
   (Start_12 String (y (str.++ Start_9 Start_10) (str.at Start_17 StartInt_2) (str.substr Start_17 StartInt StartInt_1) (ite StartBool_1 Start_8 Start_18)))
   (StartInt_3 Int (0 (str.indexof Start Start_3 StartInt_1)))
   (Start_7 String ("a" "0" "" (str.at Start_2 StartInt_1) (str.substr Start_1 StartInt_3 StartInt_3) (str.replace Start_1 Start_8 Start_3) (str.from_int StartInt_4) (ite StartBool_1 Start Start_5)))
   (StartInt_4 Int (1 (str.len Start_3) (str.indexof Start_1 Start_2 StartInt_2)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start Start_4 StartInt_1) (str.to_int Start_5)))
   (Start_8 String ("0" "" "a" "1" y (str.at Start_2 StartInt_4) (str.replace Start_7 Start_6 Start_1) (ite StartBool_1 Start_9 Start_10)))
   (StartInt_6 Int (0 1 (str.len Start_17) (str.to_int Start_2)))
   (Start_5 String ("1" "0" (str.++ Start_2 Start) (str.at Start_1 StartInt_2) (str.substr Start_6 StartInt_4 StartInt_4) (str.replace Start_7 Start Start_4) (str.from_int StartInt_4) (ite StartBool_1 Start_8 Start_4)))
   (Start_9 String (y "0" "1" (str.++ Start_1 Start_9) (str.from_int StartInt_2)))
   (Start_10 String (x y (str.substr Start_2 StartInt_4 StartInt)))
   (StartBool_1 Bool (false true (str.prefixof Start_9 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ "b" "a") (ite (str.< "" y) "" x))))

(check-synth)
