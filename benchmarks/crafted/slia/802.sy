(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartBool_1 Bool) (Start_2 String) (StartInt_2 Int) (StartInt_4 Int) (StartInt_6 Int) (Start_5 String) (Start_1 String) (Start_8 String) (Start_7 String) (StartInt_1 Int) (Start_4 String) (Start_6 String) (StartInt_3 Int) (Start_3 String) (StartInt_5 Int))
  ((Start String ("0" (str.++ Start Start_1) (str.at Start_1 StartInt) (str.from_int StartInt) (ite StartBool Start_2 Start)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start_1 Start_5 StartInt_1) (str.to_int Start_6)))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (str.< Start_7 Start) (str.<= Start_5 Start_5) (str.prefixof Start_4 Start_4) (str.contains Start Start_2) (= Start_6 Start_8) (= StartInt_6 StartInt_3)))
   (StartInt_7 Int (0 (str.to_int Start_8)))
   (StartBool_1 Bool (true false (= Start_7 Start_3) (= StartInt_6 StartInt_2) (<= StartInt_3 StartInt_7)))
   (Start_2 String ("a" "1" (str.++ Start_1 Start_3) (str.at Start_4 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start Start_2 Start_5) (str.from_int StartInt_2) (ite StartBool Start_3 Start_5)))
   (StartInt_2 Int (1 0 (str.to_int Start_1)))
   (StartInt_4 Int (0 (str.len Start_4) (str.indexof Start_5 Start_7 StartInt_2)))
   (StartInt_6 Int (1 0))
   (Start_5 String (x (str.substr Start_4 StartInt_2 StartInt_2) (str.from_int StartInt)))
   (Start_1 String ("" (str.at Start_6 StartInt_4) (str.substr Start_6 StartInt StartInt_5)))
   (Start_8 String ("0" (str.++ Start_5 Start_7)))
   (Start_7 String ("b" (str.++ Start Start) (str.substr Start_6 StartInt_6 StartInt_6) (str.from_int StartInt_6) (ite StartBool_1 Start_8 Start_7)))
   (StartInt_1 Int (0 (str.len Start_5)))
   (Start_4 String (y "1" (str.++ Start_3 Start_5) (str.replace Start_2 Start Start_4) (ite StartBool Start_4 Start_3)))
   (Start_6 String ("a" "0" "" "b" y x "1" (str.++ Start_4 Start_1) (str.substr Start_3 StartInt_3 StartInt_2)))
   (StartInt_3 Int (0))
   (Start_3 String ("" (str.++ Start_2 Start_2) (str.at Start StartInt_1) (str.substr Start_6 StartInt StartInt) (str.replace Start_1 Start_2 Start_6)))
   (StartInt_5 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "b" y "") "0")))

(check-synth)
