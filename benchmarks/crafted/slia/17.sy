(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_9 Bool) (StartBool_10 Bool) (Start_14 String) (StartBool_7 Bool) (StartBool_3 Bool) (Start_8 String) (StartBool_2 Bool) (Start_6 String) (StartInt_6 Int) (StartInt_8 Int) (Start_5 String) (Start_9 String) (StartInt_4 Int) (StartInt_5 Int) (Start_4 String) (Start_3 String) (Start_2 String) (Start_10 String) (StartBool_5 Bool) (StartBool_4 Bool) (StartInt_3 Int) (Start_11 String) (Start_7 String) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_7 Int) (Start_13 String) (Start_12 String) (Start_15 String) (StartBool_6 Bool) (StartBool_8 Bool) (StartInt_1 Int) (Start_1 String))
  ((Start String ("0" x (str.at Start_1 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (1 (str.indexof Start_13 Start_2 StartInt_7)))
   (StartBool Bool (true false (not StartBool_9) (str.< Start_4 Start_7) (str.prefixof Start_12 Start) (str.contains Start_13 Start_14) (= Start_13 Start_13) (= StartInt_4 StartInt_6)))
   (StartBool_9 Bool (false true (and StartBool_9 StartBool_4) (str.<= Start_14 Start_9) (str.prefixof Start_14 Start_2) (str.contains Start_6 Start_15) (= Start_9 Start_5) (= StartInt_8 StartInt_7)))
   (StartBool_10 Bool (false (not StartBool_9) (str.prefixof Start_14 Start_3) (str.suffixof Start_6 Start_7) (<= StartInt_5 StartInt_5)))
   (Start_14 String ("0" "1" y (str.++ Start_9 Start) (str.substr Start_14 StartInt_2 StartInt_1) (str.replace Start_8 Start_8 Start_9) (str.from_int StartInt_4) (ite StartBool_3 Start_15 Start_1)))
   (StartBool_7 Bool (true (and StartBool_3 StartBool_1) (str.< Start_7 Start_8) (str.prefixof Start_11 Start_9) (= Start_1 Start_12)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_4 StartBool_5) (str.< Start_4 Start_6) (str.<= Start_10 Start_11) (str.suffixof Start_4 Start_4) (str.contains Start_3 Start_11) (= Start_7 Start_3) (= StartInt_5 StartInt_5) (<= StartInt StartInt_2)))
   (Start_8 String ("" (str.at Start_4 StartInt_4) (str.replace Start_8 Start_9 Start_2) (str.from_int StartInt)))
   (StartBool_2 Bool (true false (str.<= Start_4 Start_4) (<= StartInt_5 StartInt_3)))
   (Start_6 String (y (str.++ Start_2 Start) (str.replace Start_1 Start_3 Start_2) (str.from_int StartInt) (ite StartBool_1 Start Start_3)))
   (StartInt_6 Int (1 (str.indexof Start_7 Start_2 StartInt) (str.to_int Start_4)))
   (StartInt_8 Int (0 1 (str.to_int Start_5)))
   (Start_5 String (y (str.at Start_4 StartInt_2) (str.substr Start_6 StartInt_4 StartInt_1) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt_3)))
   (Start_9 String ("a" y (ite StartBool_3 Start Start_2)))
   (StartInt_4 Int (1 0 (str.len Start_1)))
   (StartInt_5 Int (1 (str.len Start_5) (str.indexof Start_4 Start_2 StartInt) (str.to_int Start_3)))
   (Start_4 String ("0" x (str.++ Start_1 Start_4) (str.from_int StartInt_4)))
   (Start_3 String ("0" "" (str.++ Start_1 Start) (str.at Start_1 StartInt_2) (str.substr Start_2 StartInt StartInt_3) (ite StartBool_2 Start_4 Start_1)))
   (Start_2 String ("a" x (str.substr Start StartInt_1 StartInt_1) (str.replace Start_1 Start_3 Start_1) (ite StartBool Start_2 Start_2)))
   (Start_10 String ("1" (str.++ Start_2 Start) (str.substr Start_11 StartInt StartInt_3) (ite StartBool_2 Start_8 Start_4)))
   (StartBool_5 Bool (true (and StartBool StartBool_3) (<= StartInt_5 StartInt_1)))
   (StartBool_4 Bool (false (not StartBool_5) (and StartBool_1 StartBool_4) (str.< Start_2 Start_6) (str.<= Start_9 Start_6) (str.prefixof Start_11 Start_10) (str.contains Start_7 Start_4) (= Start_2 Start_7) (= StartInt_6 StartInt_6)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start_7 Start_7 StartInt_1) (str.to_int Start_8)))
   (Start_11 String ("1" x (str.++ Start_2 Start_5) (str.at Start_3 StartInt_3) (str.substr Start StartInt StartInt_4) (str.replace Start_11 Start_4 Start_5) (str.from_int StartInt) (ite StartBool_4 Start_9 Start_8)))
   (Start_7 String ("1" (str.at Start_4 StartInt_6) (str.from_int StartInt_2) (ite StartBool_2 Start_1 Start_4)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start StartInt_4)))
   (StartBool_1 Bool (true false (not StartBool_6) (str.< Start_3 Start_9) (str.suffixof Start_10 Start_2) (= Start_4 Start_8) (<= StartInt_1 StartInt_3)))
   (StartInt_7 Int (1 (str.indexof Start_3 Start_7 StartInt_4) (str.to_int Start_11)))
   (Start_13 String ("b" "0" (str.at Start_5 StartInt_1) (str.substr Start_7 StartInt_1 StartInt_5) (str.from_int StartInt_6) (ite StartBool_5 Start_9 Start_3)))
   (Start_12 String ("b" "1" "a" (str.++ Start_5 Start_3) (str.at Start_8 StartInt_5) (str.substr Start_2 StartInt_5 StartInt_1) (ite StartBool_8 Start_1 Start_12)))
   (Start_15 String (x "0" (str.++ Start_8 Start_7) (str.substr Start_12 StartInt_6 StartInt_1) (ite StartBool_10 Start_13 Start_13)))
   (StartBool_6 Bool (false true (not StartBool_7) (and StartBool_3 StartBool_6) (str.<= Start_9 Start_10) (str.prefixof Start_4 Start_4) (str.suffixof Start_11 Start_7) (str.contains Start_6 Start_8) (= StartInt_6 StartInt_4)))
   (StartBool_8 Bool (false (str.<= Start_8 Start_3) (str.suffixof Start Start) (str.contains Start_11 Start_6)))
   (StartInt_1 Int (0 (str.len Start_11)))
   (Start_1 String ("0" (str.at Start_9 StartInt_2) (str.substr Start_13 StartInt_2 StartInt_6) (str.replace Start_10 Start_11 Start_1) (str.from_int StartInt_6) (ite StartBool_6 Start_2 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" x "1")))

(check-synth)
