(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_5 String) (StartBool_2 Bool) (Start_6 String) (Start_4 String) (Start_10 String) (StartBool_3 Bool) (Start_2 String) (StartInt_2 Int) (Start_13 String) (StartInt_3 Int) (StartInt_1 Int) (Start_11 String) (StartInt_4 Int) (StartInt_5 Int) (Start_1 String) (Start_12 String) (Start_7 String) (StartInt_6 Int) (Start_8 String) (Start_14 String) (StartInt_8 Int) (StartInt_7 Int) (Start_9 String) (Start_3 String) (StartBool_1 Bool) (StartBool_4 Bool))
  ((Start String (x (str.++ Start_1 Start) (str.at Start_2 StartInt_1) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_13) (str.indexof Start_10 Start_13 StartInt_1) (str.to_int Start_3)))
   (StartBool Bool (false true (and StartBool_2 StartBool_4) (str.< Start_13 Start_10) (= StartInt_2 StartInt_8) (<= StartInt_5 StartInt_5)))
   (Start_15 String ("" "a" "1" (str.++ Start_15 Start_5) (str.at Start_14 StartInt) (str.replace Start_4 Start_7 Start_3) (str.from_int StartInt_4)))
   (Start_5 String ("b" (str.at Start_5 StartInt_1) (str.substr Start_14 StartInt_2 StartInt_4) (str.from_int StartInt_5)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.prefixof Start_4 Start_1) (= Start_3 Start_1) (<= StartInt_1 StartInt_1)))
   (Start_6 String ("b" "0" "1" (str.substr Start_4 StartInt_1 StartInt) (str.from_int StartInt)))
   (Start_4 String ("b" "0" (str.++ Start_5 Start_1) (str.at Start_2 StartInt_2) (str.substr Start StartInt_1 StartInt_1) (ite StartBool_2 Start_6 Start_1)))
   (Start_10 String ("" x (str.replace Start_1 Start_1 Start_5) (str.from_int StartInt_1)))
   (StartBool_3 Bool (true (not StartBool_3) (str.< Start_7 Start_8) (str.<= Start_5 Start_3) (str.contains Start_6 Start_1) (= StartInt StartInt_2) (<= StartInt_2 StartInt)))
   (Start_2 String (y (str.++ Start_1 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt_2 Int (1 0 (str.len Start_4)))
   (Start_13 String ("1" (str.++ Start Start_9) (str.substr Start_2 StartInt_6 StartInt_3) (str.replace Start_11 Start_6 Start_12) (str.from_int StartInt_4) (ite StartBool_2 Start_13 Start_5)))
   (StartInt_3 Int (0 (str.len Start_2)))
   (StartInt_1 Int (0 1))
   (Start_11 String (x "0" (str.at Start_1 StartInt_3) (str.substr Start_6 StartInt_2 StartInt_2) (ite StartBool_2 Start_6 Start_7)))
   (StartInt_4 Int (0 (str.indexof Start_9 Start_12 StartInt)))
   (StartInt_5 Int (0 (str.len Start_8) (str.indexof Start_4 Start_2 StartInt_1) (str.to_int Start_1)))
   (Start_1 String ("b" (str.++ Start_3 Start_8) (str.substr Start_6 StartInt_6 StartInt_6) (str.replace Start_2 Start_6 Start_13) (str.from_int StartInt_5) (ite StartBool_3 Start_1 Start_5)))
   (Start_12 String (x "a" "1" "b" (str.++ Start_11 Start_5) (str.at Start_9 StartInt) (str.from_int StartInt_1)))
   (Start_7 String ("" (str.at Start_11 StartInt_2) (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_3 Start_13 Start_10) (str.from_int StartInt)))
   (StartInt_6 Int (0 1))
   (Start_8 String ("" (str.++ Start_9 Start_4) (str.at Start_10 StartInt_1) (str.replace Start_11 Start_10 Start_9) (ite StartBool_1 Start_3 Start_3)))
   (Start_14 String (y (str.++ Start_7 Start) (str.at Start StartInt_7) (str.substr Start_1 StartInt_3 StartInt_3) (str.from_int StartInt_2)))
   (StartInt_8 Int (0 1 (str.to_int Start_6)))
   (StartInt_7 Int (1 (str.len Start_12) (str.indexof Start_3 Start_4 StartInt_7)))
   (Start_9 String ("" x (str.substr Start_7 StartInt_4 StartInt) (str.from_int StartInt_5) (ite StartBool Start_5 Start_3)))
   (Start_3 String (y "0" (str.++ Start_4 Start_9) (str.replace Start_10 Start_14 Start_13) (ite StartBool_1 Start_10 Start_14)))
   (StartBool_1 Bool (true false (and StartBool StartBool_1) (str.<= Start_2 Start_1) (str.prefixof Start_1 Start_2) (str.contains Start_3 Start) (<= StartInt StartInt_2)))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool_2) (str.< Start_3 Start_5) (str.<= Start_15 Start_5) (str.contains Start_13 Start_8) (<= StartInt_4 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "1" (str.at x 0))))

(check-synth)
