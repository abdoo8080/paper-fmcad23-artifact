(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartBool_1 Bool) (Start_8 String) (Start_4 String) (StartInt_4 Int) (Start_13 String) (StartInt_1 Int) (Start_3 String) (Start_2 String) (StartInt_3 Int) (StartInt_2 Int) (Start_1 String) (Start_15 String) (Start_11 String) (Start_7 String) (Start_6 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_14 String) (Start_5 String) (Start_9 String) (Start_10 String) (StartBool_3 Bool) (Start_12 String))
  ((Start String (x (str.at Start_1 StartInt_1)))
   (StartInt Int (1 0 (str.indexof Start_12 Start_2 StartInt_2)))
   (StartBool Bool (true false (str.prefixof Start_15 Start_13) (str.contains Start_12 Start) (<= StartInt_2 StartInt_5)))
   (StartInt_6 Int (1 0 (str.to_int Start_1)))
   (StartBool_1 Bool (true (not StartBool) (str.< Start_5 Start_7) (str.suffixof Start_11 Start_14) (str.contains Start_5 Start) (<= StartInt_3 StartInt_1)))
   (Start_8 String ("0" (str.++ Start_13 Start_1) (str.substr Start_9 StartInt StartInt_1) (str.from_int StartInt_3) (ite StartBool Start Start_11)))
   (Start_4 String ("" (str.from_int StartInt_4)))
   (StartInt_4 Int (1 (str.len Start_1)))
   (Start_13 String ("0" y x "b" "a" (str.++ Start_11 Start_10) (str.at Start_6 StartInt) (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_12 Start_9 Start_1) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_1 StartInt_2) (str.to_int Start_1)))
   (Start_3 String ("" (str.++ Start Start) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_4 Start_5 Start_3) (str.from_int StartInt_1)))
   (Start_2 String ("b" "" (str.at Start StartInt_1) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_6 StartInt)))
   (StartInt_2 Int (0 1))
   (Start_1 String (x (str.++ Start Start) (str.substr Start_2 StartInt StartInt) (str.replace Start_2 Start Start_1) (str.from_int StartInt)))
   (Start_15 String (y (str.substr Start_3 StartInt_6 StartInt) (str.replace Start_7 Start_14 Start_1)))
   (Start_11 String (x (str.++ Start_11 Start_11) (str.substr Start_1 StartInt_3 StartInt_3) (str.from_int StartInt_1) (ite StartBool Start_12 Start_10)))
   (Start_7 String (y "b" (str.++ Start_4 Start_1) (str.substr Start_8 StartInt StartInt) (ite StartBool_2 Start_7 Start_8)))
   (Start_6 String (y x "0" "a" (str.at Start_13 StartInt_2) (str.replace Start_12 Start_10 Start_12) (ite StartBool Start_12 Start_13)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool StartBool_1) (str.prefixof Start_9 Start_8) (str.contains Start_1 Start) (= Start_1 Start_8)))
   (StartInt_5 Int (0 1 (str.indexof Start Start_7 StartInt)))
   (Start_14 String ("0" (str.at Start_3 StartInt_1) (str.substr Start_14 StartInt StartInt_4) (str.from_int StartInt_3)))
   (Start_5 String ("" "b" (str.replace Start_6 Start_3 Start_7) (str.from_int StartInt)))
   (Start_9 String ("0" (str.at Start_10 StartInt) (str.replace Start_1 Start_1 Start) (ite StartBool Start_1 Start_2)))
   (Start_10 String (y "0" (str.at Start_11 StartInt_3) (str.substr Start StartInt StartInt_4) (ite StartBool Start_9 Start_12)))
   (StartBool_3 Bool (true false (not StartBool_2) (str.prefixof Start_8 Start_8) (str.contains Start_12 Start_13) (= Start_4 Start)))
   (Start_12 String ("1" y "a" (str.at Start_1 StartInt_1) (str.substr Start_6 StartInt_4 StartInt_3) (str.replace Start_3 Start_11 Start) (ite StartBool_3 Start_3 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ y (str.replace "" x "1"))))

(check-synth)
