(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartInt_11 Int) (Start_8 String) (StartBool_1 Bool) (Start_10 String) (StartBool_5 Bool) (Start_7 String) (Start_3 String) (Start_16 String) (StartInt_6 Int) (Start_6 String) (StartInt_7 Int) (StartInt_4 Int) (Start_9 String) (Start_13 String) (Start_2 String) (StartInt_5 Int) (StartBool_2 Bool) (StartBool_4 Bool) (StartInt_2 Int) (Start_5 String) (Start_11 String) (StartInt_1 Int) (Start_4 String) (StartInt_3 Int) (StartInt_9 Int) (Start_12 String) (Start_14 String) (Start_1 String) (StartInt_10 Int) (StartInt_8 Int) (StartBool_3 Bool))
  ((Start String ("" "0" x (str.++ Start Start_1) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt Int (1))
   (StartBool Bool (true false (and StartBool StartBool_3) (str.prefixof Start_3 Start_12) (= StartInt_11 StartInt_3)))
   (Start_15 String ("1" (str.from_int StartInt_5) (ite StartBool Start_1 Start_5)))
   (StartInt_11 Int (0 1 (str.len Start_9) (str.indexof Start_14 Start_11 StartInt_2)))
   (Start_8 String (y (str.++ Start_2 Start) (str.substr Start_5 StartInt_4 StartInt_2) (str.replace Start_8 Start_2 Start_2) (str.from_int StartInt_5)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool_2) (str.<= Start_9 Start_10) (str.prefixof Start_11 Start_1) (str.contains Start_5 Start_9) (= Start Start_3) (= StartInt_5 StartInt_2) (<= StartInt_1 StartInt_1)))
   (Start_10 String ("a" (str.replace Start_3 Start_11 Start_2) (ite StartBool_2 Start_3 Start_6)))
   (StartBool_5 Bool (true (str.prefixof Start_15 Start_8) (str.suffixof Start_9 Start_4) (str.contains Start_15 Start_3) (= Start_16 Start_4) (= StartInt_10 StartInt_11) (<= StartInt_9 StartInt_6)))
   (Start_7 String ("0" y (str.++ Start_8 Start_8) (str.replace Start_7 Start_4 Start_3) (str.from_int StartInt_3) (ite StartBool_1 Start_8 Start_4)))
   (Start_3 String (y (str.at Start_13 StartInt_6) (str.substr Start_14 StartInt_8 StartInt_7)))
   (Start_16 String (x (str.++ Start_12 Start_7) (str.from_int StartInt_3)))
   (StartInt_6 Int (0 1 (str.len Start_9)))
   (Start_6 String (x (str.at Start_6 StartInt_2) (str.replace Start_2 Start_4 Start_7) (str.from_int StartInt_3)))
   (StartInt_7 Int (1 0))
   (StartInt_4 Int (1 0 (str.len Start_6) (str.indexof Start_7 Start_7 StartInt_6)))
   (Start_9 String (y (str.substr Start_2 StartInt_3 StartInt_1) (str.replace Start_2 Start_5 Start_3) (str.from_int StartInt_1)))
   (Start_13 String ("" (str.at Start StartInt_2) (ite StartBool Start_14 Start_3)))
   (Start_2 String ("b" (str.++ Start_2 Start_1) (str.at Start_3 StartInt_1) (str.replace Start_2 Start_4 Start_1) (ite StartBool_1 Start_1 Start_5)))
   (StartInt_5 Int (1 0 (str.len Start_8) (str.indexof Start_9 Start_4 StartInt_3)))
   (StartBool_2 Bool (true false (str.<= Start_11 Start_7) (str.contains Start Start_8) (= StartInt_7 StartInt_8) (<= StartInt_1 StartInt)))
   (StartBool_4 Bool (false (and StartBool_5 StartBool) (str.<= Start_6 Start_3) (str.suffixof Start_9 Start_6) (str.contains Start Start_14) (= StartInt_8 StartInt_6) (<= StartInt_2 StartInt_3)))
   (StartInt_2 Int (0))
   (Start_5 String (y "0" (str.replace Start_6 Start_1 Start_3) (ite StartBool_1 Start_3 Start_1)))
   (Start_11 String ("" "1" (str.from_int StartInt_5)))
   (StartInt_1 Int (0))
   (Start_4 String (y (str.++ Start_12 Start_5) (str.substr Start_11 StartInt_9 StartInt_3) (str.replace Start_3 Start_12 Start_5) (str.from_int StartInt_1)))
   (StartInt_3 Int (1 (str.indexof Start_7 Start_2 StartInt_3)))
   (StartInt_9 Int (0 (str.len Start_11) (str.indexof Start_8 Start_2 StartInt_10) (str.to_int Start_6)))
   (Start_12 String ("b" y (str.++ Start_11 Start_8) (str.at Start_13 StartInt) (str.substr Start StartInt_8 StartInt_9) (str.from_int StartInt_10)))
   (Start_14 String ("0" (str.++ Start_11 Start_6) (str.at Start_6 StartInt) (str.replace Start Start_9 Start_8) (str.from_int StartInt_9) (ite StartBool_2 Start_2 Start_9)))
   (Start_1 String ("b" y (str.++ Start_9 Start) (str.at Start_6 StartInt_4) (str.from_int StartInt_4) (ite StartBool_3 Start_11 Start_5)))
   (StartInt_10 Int (0 1 (str.len Start_12)))
   (StartInt_8 Int (1 (str.indexof Start_10 Start_9 StartInt_8) (str.to_int Start_8)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_2 StartBool_1) (str.suffixof Start_14 Start_7) (str.contains Start_6 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof "" (str.at y 1) 0))))

(check-synth)
