(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_8 String) (Start_1 String) (Start_9 String) (Start_6 String) (Start_7 String) (StartBool_4 Bool) (StartInt_6 Int) (StartInt_3 Int) (StartBool_3 Bool) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_4 Int) (Start_11 String) (StartInt_1 Int) (Start_10 String) (Start_3 String) (Start_2 String) (Start_5 String) (Start_16 String) (Start_12 String) (Start_14 String) (Start_4 String) (Start_15 String) (StartInt_5 Int) (StartBool_2 Bool) (Start_13 String))
  ((Start String ("1" (str.++ Start Start)))
   (StartInt Int (0 (str.len Start_1) (str.to_int Start)))
   (StartBool Bool (false true (not StartBool_2) (str.< Start_1 Start_2) (str.<= Start_12 Start_10) (str.prefixof Start_2 Start_12) (= Start_12 Start_4) (= StartInt StartInt_2) (<= StartInt StartInt_3)))
   (StartInt_7 Int (1))
   (Start_8 String ("b" "a" (str.at Start_9 StartInt_2) (str.replace Start_6 Start_4 Start_4) (ite StartBool_1 Start_2 Start_4)))
   (Start_1 String ("a" x y "" "1" "0" "b" (str.++ Start_2 Start_3) (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_4 Start Start_4) (ite StartBool_1 Start Start_1)))
   (Start_9 String (x "1" (str.at Start_9 StartInt_3) (str.substr Start_6 StartInt_3 StartInt) (str.from_int StartInt_3)))
   (Start_6 String ("1" (str.++ Start_7 Start_2) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_4 Start_1 Start_1) (str.from_int StartInt)))
   (Start_7 String (y "a" "" x "1" "b" (str.at Start_7 StartInt) (str.replace Start_7 Start_5 Start_3) (ite StartBool_1 Start_2 Start_8)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool StartBool_4) (str.< Start_13 Start_4) (str.<= Start_7 Start_11) (str.prefixof Start_10 Start_5) (= Start_13 Start_12) (<= StartInt_5 StartInt_5)))
   (StartInt_6 Int (1 (str.indexof Start_6 Start_10 StartInt_7) (str.to_int Start_13)))
   (StartInt_3 Int (0 (str.len Start_4) (str.indexof Start_4 Start_3 StartInt_1) (str.to_int Start_6)))
   (StartBool_3 Bool (false (not StartBool_1) (str.<= Start_1 Start_5) (str.suffixof Start Start_5) (= Start_3 Start_3) (= StartInt_3 StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start) (str.to_int Start_3)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_2 StartBool) (str.< Start_2 Start_2) (str.<= Start Start_2) (str.prefixof Start_4 Start_4) (= StartInt_1 StartInt)))
   (StartInt_4 Int (1 0 (str.indexof Start_1 Start_1 StartInt_4)))
   (Start_11 String ("0" (str.++ Start_9 Start_3) (str.substr Start_11 StartInt_1 StartInt_2) (ite StartBool Start Start_9)))
   (StartInt_1 Int (1 0 (str.len Start_11) (str.to_int Start_8)))
   (Start_10 String ("" (str.++ Start_2 Start_7) (str.substr Start_10 StartInt StartInt) (str.from_int StartInt_3) (ite StartBool Start_3 Start_4)))
   (Start_3 String (x (str.++ Start_11 Start_3) (str.replace Start_1 Start_9 Start) (str.from_int StartInt_4)))
   (Start_2 String ("" (str.at Start_5 StartInt_4) (str.replace Start_7 Start_3 Start_9)))
   (Start_5 String (x (str.at Start_7 StartInt_1) (str.substr Start_2 StartInt_3 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_1 Start_7)))
   (Start_16 String ("0" "1" (str.replace Start_11 Start_10 Start_16) (ite StartBool_1 Start_15 Start_5)))
   (Start_12 String ("b" (str.at Start_7 StartInt_1) (str.substr Start_8 StartInt StartInt_3) (str.replace Start_1 Start Start_13) (ite StartBool_4 Start_14 Start_1)))
   (Start_14 String (y (str.replace Start_12 Start_10 Start_9)))
   (Start_4 String (y "0" "1" "" (str.++ Start_6 Start_8) (str.at Start_9 StartInt_4) (str.replace Start_2 Start_5 Start_8) (ite StartBool_2 Start_2 Start_10)))
   (Start_15 String ("1" "" x (str.++ Start_12 Start_4) (str.at Start_3 StartInt_4) (str.from_int StartInt_2) (ite StartBool Start_16 Start_12)))
   (StartInt_5 Int (0))
   (StartBool_2 Bool (true false (not StartBool_3) (str.< Start_2 Start_2) (str.prefixof Start_3 Start_4) (<= StartInt_1 StartInt_2)))
   (Start_13 String (y x "a" (str.at Start_11 StartInt_6) (str.substr Start_8 StartInt_6 StartInt_4) (str.replace Start_10 Start_7 Start_3) (str.from_int StartInt_5) (ite StartBool_4 Start_8 Start_15)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace y "0" (str.++ (str.at x 0) y))))))

(check-synth)
