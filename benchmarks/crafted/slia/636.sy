(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_14 String) (StartBool_5 Bool) (StartInt_1 Int) (StartInt_9 Int) (Start_6 String) (Start_9 String) (StartInt_3 Int) (Start_5 String) (StartInt_5 Int) (Start_4 String) (Start_2 String) (Start_11 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_3 String) (StartInt_6 Int) (Start_1 String) (Start_7 String) (StartInt_4 Int) (StartInt_7 Int) (StartBool_3 Bool) (Start_10 String) (StartBool_4 Bool) (StartInt_10 Int) (StartBool_1 Bool) (Start_13 String) (StartInt_8 Int) (Start_12 String) (StartBool_6 Bool))
  ((Start String (x "b" "" "a" "0" (str.at Start StartInt_1) (str.replace Start_1 Start_2 Start_3) (ite StartBool Start_4 Start_1)))
   (StartInt Int (0 1 (str.len Start_1) (str.to_int Start_2)))
   (StartBool Bool (true false (not StartBool_3) (and StartBool_2 StartBool) (str.< Start Start) (str.<= Start_1 Start_4) (str.prefixof Start_2 Start_4) (= StartInt_1 StartInt_4) (<= StartInt_4 StartInt_5)))
   (Start_8 String (y "" (str.++ Start_10 Start_10) (str.at Start_9 StartInt) (str.replace Start_1 Start_6 Start_7) (str.from_int StartInt_1) (ite StartBool_4 Start_2 Start_4)))
   (Start_14 String ("" (str.from_int StartInt_5)))
   (StartBool_5 Bool (true (not StartBool_6) (str.< Start_10 Start_4) (str.<= Start_5 Start_4) (str.suffixof Start_1 Start_1) (str.contains Start_3 Start_1) (= Start_2 Start_9)))
   (StartInt_1 Int (0 (str.len Start_2)))
   (StartInt_9 Int (1 0 (str.len Start_1) (str.to_int Start_3)))
   (Start_6 String ("" "1" (str.at Start_2 StartInt_2)))
   (Start_9 String ("b" (str.at Start_9 StartInt_6) (str.replace Start_10 Start_14 Start_7) (str.from_int StartInt_9) (ite StartBool_1 Start_9 Start_1)))
   (StartInt_3 Int (0 1 (str.indexof Start_4 Start_2 StartInt_2) (str.to_int Start_3)))
   (Start_5 String ("1" (str.++ Start_4 Start_2) (str.replace Start_6 Start_1 Start_1)))
   (StartInt_5 Int (1 0 (str.to_int Start_5)))
   (Start_4 String ("0" (str.++ Start_2 Start_4) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_1 Start_4 Start_2)))
   (Start_2 String (x "" (str.from_int StartInt_2) (ite StartBool_1 Start Start_4)))
   (Start_11 String ("a" (str.++ Start_2 Start_6) (str.replace Start_5 Start_1 Start_6) (str.from_int StartInt) (ite StartBool_4 Start_8 Start)))
   (StartBool_2 Bool (false true (not StartBool_1) (<= StartInt StartInt)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_2 Start_2 StartInt) (str.to_int Start_1)))
   (Start_3 String (x (str.++ Start_4 Start_3) (str.at Start_3 StartInt) (str.replace Start_2 Start_4 Start)))
   (StartInt_6 Int (1 (str.len Start_7) (str.indexof Start_4 Start_4 StartInt_6)))
   (Start_1 String ("" x "b"))
   (Start_7 String ("b" "" "a" x (str.++ Start_8 Start) (str.replace Start_3 Start_3 Start_3) (str.from_int StartInt_6) (ite StartBool_1 Start_9 Start_10)))
   (StartInt_4 Int (0 1 (str.to_int Start_5)))
   (StartInt_7 Int (1 (str.len Start_6) (str.indexof Start_12 Start_8 StartInt_3)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_3) (str.< Start_2 Start_6) (= StartInt_6 StartInt_2) (<= StartInt_6 StartInt_2)))
   (Start_10 String (x (str.at Start_11 StartInt_5) (str.replace Start_3 Start_10 Start_12)))
   (StartBool_4 Bool (true false (not StartBool_5) (and StartBool_3 StartBool_6) (str.<= Start_2 Start_8) (str.prefixof Start_9 Start) (str.suffixof Start_10 Start_7) (= StartInt_7 StartInt_8) (<= StartInt_9 StartInt_10)))
   (StartInt_10 Int (1 (str.indexof Start_1 Start_6 StartInt_4)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (str.<= Start_3 Start_1) (str.prefixof Start_3 Start_3) (= StartInt StartInt) (<= StartInt StartInt_3)))
   (Start_13 String ("0" (str.++ Start_10 Start_5) (str.substr Start_12 StartInt_1 StartInt_3) (str.from_int StartInt_5)))
   (StartInt_8 Int (0 1 (str.len Start_10) (str.indexof Start_5 Start_2 StartInt) (str.to_int Start_13)))
   (Start_12 String (x "a" "" "b" (str.substr Start_11 StartInt_5 StartInt_5) (str.replace Start_1 Start_6 Start_1) (str.from_int StartInt_1)))
   (StartBool_6 Bool (true false (not StartBool_1) (str.< Start_8 Start_1) (str.<= Start_13 Start_7) (str.prefixof Start_9 Start_2) (str.contains Start_9 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y (str.at x 1))))

(check-synth)
