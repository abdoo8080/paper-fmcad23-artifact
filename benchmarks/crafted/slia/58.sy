(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_2 String) (Start_5 String) (StartInt_1 Int) (Start_4 String) (StartInt_4 Int) (StartInt_5 Int) (StartInt_3 Int) (Start_3 String))
  ((Start String ("0" (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start_1 StartInt StartInt) (ite StartBool_1 Start Start)))
   (StartInt Int (1 (str.len Start_1) (str.indexof Start_4 Start StartInt_5) (str.to_int Start_5)))
   (StartBool Bool (false (not StartBool_1) (str.< Start Start)))
   (Start_1 String (y (str.++ Start_1 Start_4) (str.at Start StartInt_3) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start_5)))
   (StartBool_1 Bool (true false (str.suffixof Start_2 Start) (str.contains Start Start) (= StartInt StartInt) (<= StartInt_1 StartInt_2)))
   (StartInt_2 Int (1 (str.len Start)))
   (Start_2 String ("b" (str.++ Start_1 Start_2) (str.at Start_3 StartInt) (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_1 Start_4 Start_5) (str.from_int StartInt)))
   (Start_5 String ("" "b" (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_2 StartInt_3)))
   (StartInt_1 Int (0 1 (str.to_int Start_2)))
   (Start_4 String (y "b" x (str.++ Start_1 Start) (str.from_int StartInt_4)))
   (StartInt_4 Int (1 (str.to_int Start_3)))
   (StartInt_5 Int (1 (str.len Start) (str.indexof Start_2 Start_1 StartInt_3) (str.to_int Start_3)))
   (StartInt_3 Int (1 0 (str.len Start_5)))
   (Start_3 String ("0" (str.++ Start_5 Start_1) (str.substr Start_3 StartInt_4 StartInt_3) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "0" "1")))

(check-synth)
