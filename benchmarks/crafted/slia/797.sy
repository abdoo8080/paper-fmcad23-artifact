(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (Start_8 String) (Start_2 String) (Start_1 String) (StartInt_1 Int) (Start_6 String) (Start_3 String) (StartInt_4 Int) (Start_5 String) (Start_4 String) (StartBool_2 Bool) (StartInt_2 Int) (StartBool_4 Bool) (StartBool_3 Bool) (StartInt_5 Int) (StartInt_3 Int) (StartInt_6 Int) (Start_7 String))
  ((Start String ("a" "0"))
   (StartInt Int (1 0 (str.len Start)))
   (StartBool Bool (true (not StartBool_1) (and StartBool StartBool_2) (str.<= Start Start_1) (str.suffixof Start_2 Start_3) (str.contains Start_1 Start_1) (= Start Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start_1 Start_5) (str.contains Start_6 Start_1) (= StartInt_4 StartInt_5)))
   (Start_8 String ("" "0" "b" (str.++ Start_5 Start_8) (str.from_int StartInt_5)))
   (Start_2 String (x y "" (str.at Start_7 StartInt_5) (str.substr Start_2 StartInt StartInt) (str.replace Start_5 Start_7 Start_4) (ite StartBool_4 Start_5 Start_7)))
   (Start_1 String (y "a" (str.substr Start_5 StartInt_4 StartInt_5) (str.replace Start_3 Start_1 Start_7) (str.from_int StartInt_3) (ite StartBool Start_8 Start_8)))
   (StartInt_1 Int (1 (str.indexof Start_3 Start_5 StartInt_4)))
   (Start_6 String ("b" y (str.++ Start_1 Start_1) (str.at Start_3 StartInt_3)))
   (Start_3 String ("1" (str.substr Start_2 StartInt_1 StartInt_1) (ite StartBool_3 Start_2 Start_4)))
   (StartInt_4 Int (0 1 (str.len Start_4)))
   (Start_5 String ("1" x "a" (str.substr Start_2 StartInt_2 StartInt_2) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_5)))
   (Start_4 String ("a" (str.at Start_1 StartInt) (str.from_int StartInt_2) (ite StartBool_3 Start Start_1)))
   (StartBool_2 Bool (true (str.<= Start_5 Start_8) (str.prefixof Start_5 Start_7) (str.contains Start_4 Start_8) (<= StartInt_6 StartInt_4)))
   (StartInt_2 Int (1 (str.to_int Start_3)))
   (StartBool_4 Bool (true false (and StartBool_3 StartBool_2) (str.< Start_6 Start_1) (str.<= Start_5 Start_2) (str.prefixof Start_5 Start_6) (str.contains Start Start_7) (<= StartInt_2 StartInt_4)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_3 StartBool_2) (str.prefixof Start_4 Start_4) (str.contains Start_1 Start_5) (= StartInt_1 StartInt)))
   (StartInt_5 Int (1))
   (StartInt_3 Int (0 1 (str.indexof Start_1 Start_6 StartInt_3)))
   (StartInt_6 Int (0 1 (str.to_int Start_5)))
   (Start_7 String (x "b"))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ (str.at x 0) (str.++ "a" "1")) 0)))

(check-synth)
