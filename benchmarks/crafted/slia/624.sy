(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (StartBool_4 Bool) (StartBool_3 Bool) (Start_12 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_11 String) (Start_10 String) (StartInt_7 Int) (Start_14 String) (Start_8 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_6 String) (StartInt_6 Int) (Start_3 String) (Start_2 String) (Start_5 String) (Start_13 String) (Start_9 String) (Start_4 String) (StartInt_3 Int) (StartInt_1 Int) (StartInt_4 Int) (Start_1 String))
  ((Start String ("0" y "" (str.++ Start_1 Start_1) (str.at Start_1 StartInt) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start Start_2) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_4) (str.to_int Start_2)))
   (StartBool Bool (true false (and StartBool_2 StartBool_3) (str.< Start_11 Start_7) (str.<= Start_10 Start_1) (str.suffixof Start_13 Start_4) (str.contains Start_2 Start_4) (= Start_12 Start_3) (<= StartInt_4 StartInt_1)))
   (Start_7 String ("a" (str.++ Start_8 Start_12) (str.at Start_8 StartInt_4) (str.substr Start_4 StartInt_2 StartInt) (str.replace Start_9 Start_12 Start_10) (str.from_int StartInt_1) (ite StartBool Start_1 Start_10)))
   (StartBool_4 Bool (false (not StartBool_2) (and StartBool_4 StartBool_1) (= Start_11 Start_2) (= StartInt_4 StartInt_7) (<= StartInt_2 StartInt_7)))
   (StartBool_3 Bool (false (and StartBool_4 StartBool_4) (str.< Start_13 Start_13) (str.prefixof Start_8 Start_11) (str.suffixof Start_13 Start_11) (= StartInt_5 StartInt_4) (<= StartInt_3 StartInt_6)))
   (Start_12 String ("0" "b" x "1" (str.++ Start_3 Start_5) (str.at Start_12 StartInt_4) (str.substr Start StartInt_3 StartInt_3) (str.from_int StartInt) (ite StartBool Start_9 Start_11)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.suffixof Start_6 Start_10) (str.contains Start_9 Start_12)))
   (StartInt_5 Int (1 (str.indexof Start_1 Start_14 StartInt_5)))
   (Start_11 String ("1" "0" (str.substr Start_8 StartInt_4 StartInt) (str.replace Start_3 Start_4 Start_9) (ite StartBool_2 Start_4 Start_10)))
   (Start_10 String ("b" "1" (str.++ Start_11 Start_10) (str.at Start_5 StartInt_1) (str.replace Start_2 Start_7 Start_8) (str.from_int StartInt_4)))
   (StartInt_7 Int (0))
   (Start_14 String ("" (str.++ Start_6 Start_14)))
   (Start_8 String (x (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start_6 Start_8 Start_4) (ite StartBool_1 Start_5 Start_10)))
   (StartBool_1 Bool (false true (str.<= Start Start_2) (str.prefixof Start Start) (str.contains Start_3 Start_3) (= StartInt StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start)))
   (Start_6 String ("" (str.++ Start Start_2) (str.at Start_3 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_6 Int (1 (str.to_int Start_8)))
   (Start_3 String ("" "b" (str.at Start_1 StartInt_3) (ite StartBool_1 Start_2 Start_2)))
   (Start_2 String ("a" "0" "" (str.from_int StartInt_4)))
   (Start_5 String ("" "a" y (str.++ Start_6 Start_4) (str.substr Start_3 StartInt StartInt_3) (str.replace Start_5 Start_2 Start_4)))
   (Start_13 String ("b" (str.at Start_2 StartInt_3) (str.replace Start_6 Start_2 Start_3)))
   (Start_9 String ("1" (str.++ Start Start_3) (str.at Start_3 StartInt_3) (str.substr Start_4 StartInt_4 StartInt_1) (str.replace Start_8 Start_3 Start_6)))
   (Start_4 String ("0" "b" "1" "" y (str.substr Start_3 StartInt_4 StartInt_3) (str.replace Start_6 Start_3 Start_1) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_3 Int (1))
   (StartInt_1 Int (0 (str.len Start_6) (str.indexof Start Start_3 StartInt_4)))
   (StartInt_4 Int (1 0 (str.len Start) (str.indexof Start_4 Start_5 StartInt_3)))
   (Start_1 String ("b" "" (str.++ Start_7 Start_4) (str.at Start StartInt_3) (str.substr Start_4 StartInt_2 StartInt_1) (str.replace Start_8 Start_9 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.++ "0" x) "a")))

(check-synth)
