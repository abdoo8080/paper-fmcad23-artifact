(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartInt_4 Int) (Start_1 String) (Start_2 String) (StartInt_2 Int) (StartInt_1 Int) (StartInt_3 Int) (StartBool_1 Bool))
  ((Start String ("0" (str.at Start StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start Start)))
   (StartInt Int (0 1 (str.len Start) (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start_1)))
   (StartBool Bool (true (and StartBool StartBool_1) (= Start_2 Start_1) (= StartInt StartInt_3)))
   (Start_3 String ("b" "1" "0" (str.at Start_1 StartInt) (str.from_int StartInt_4) (ite StartBool Start_3 Start_3)))
   (StartInt_4 Int (0 (str.len Start_3)))
   (Start_1 String ("1" "b" "" "a" (str.substr Start_2 StartInt_4 StartInt_4) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt)))
   (Start_2 String ("1" (str.++ Start Start_2) (str.at Start StartInt_2)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_1 Start StartInt) (str.to_int Start_2)))
   (StartInt_1 Int (1 0))
   (StartInt_3 Int (0 1))
   (StartBool_1 Bool (true false (and StartBool StartBool_1) (str.< Start Start) (str.prefixof Start Start) (str.contains Start Start) (= Start Start_1) (= StartInt StartInt_2) (<= StartInt_1 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof y x 0))))

(check-synth)
