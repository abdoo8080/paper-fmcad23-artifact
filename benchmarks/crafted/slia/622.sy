(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_7 Int) (StartInt_5 Int) (StartInt_2 Int) (StartInt_1 Int) (StartInt_6 Int) (Start_6 String) (Start_1 String) (StartBool_3 Bool) (StartBool_1 Bool) (Start_2 String) (StartInt_4 Int) (StartBool_2 Bool) (Start_8 String) (Start_13 String) (Start_4 String) (Start_11 String) (Start_7 String) (StartInt_3 Int) (Start_10 String) (Start_5 String) (Start_3 String) (Start_9 String))
  ((Start String ("0" (str.at Start StartInt) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.indexof Start_6 Start_10 StartInt_5)))
   (StartBool Bool (false true (and StartBool_1 StartBool_2) (str.< Start_4 Start_13) (str.prefixof Start_7 Start_13) (= Start_11 Start_8) (= StartInt_5 StartInt_2)))
   (Start_12 String (x (str.++ Start_10 Start_5) (str.substr Start StartInt_3 StartInt_5) (str.from_int StartInt_6) (ite StartBool_2 Start_2 Start_5)))
   (StartInt_7 Int (0 (str.len Start_5) (str.indexof Start Start_3 StartInt_7) (str.to_int Start_9)))
   (StartInt_5 Int (1 (str.indexof Start Start_6 StartInt_6)))
   (StartInt_2 Int (0 1))
   (StartInt_1 Int (0 1 (str.indexof Start_12 Start_13 StartInt_3) (str.to_int Start_5)))
   (StartInt_6 Int (0 1 (str.indexof Start_7 Start_10 StartInt_6) (str.to_int Start_8)))
   (Start_6 String (x (str.++ Start_3 Start_8)))
   (Start_1 String ("" (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (StartBool_3 Bool (true false (str.< Start_9 Start_7) (str.<= Start_8 Start_3) (str.prefixof Start_8 Start_6) (= Start_6 Start_8) (<= StartInt_3 StartInt_1)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool) (str.< Start_7 Start_7) (str.prefixof Start_6 Start_7) (str.suffixof Start_2 Start) (= Start_5 Start_2) (<= StartInt StartInt)))
   (Start_2 String ("1" (str.++ Start Start_3) (str.at Start_2 StartInt_1) (str.replace Start Start_3 Start_2) (str.from_int StartInt)))
   (StartInt_4 Int (0 (str.indexof Start_5 Start_2 StartInt_1) (str.to_int Start_7)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_3) (str.prefixof Start_8 Start_9) (str.contains Start_9 Start_10) (= Start_2 Start_7) (<= StartInt StartInt_1)))
   (Start_8 String ("a" (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start_3 Start_10 Start_5) (str.from_int StartInt_3) (ite StartBool Start_9 Start_4)))
   (Start_13 String ("1" y (str.substr Start_1 StartInt_2 StartInt_6) (str.from_int StartInt_7)))
   (Start_4 String ("0" "a" "" y x "b" (str.++ Start_2 Start_1) (str.substr Start_5 StartInt_1 StartInt_2) (str.replace Start_1 Start_6 Start_4) (ite StartBool_1 Start_3 Start_7)))
   (Start_11 String ("1" "" x (str.++ Start_7 Start_9) (str.at Start_4 StartInt_2) (str.substr Start_5 StartInt_1 StartInt) (str.replace Start_3 Start_1 Start_3) (ite StartBool_2 Start_9 Start_3)))
   (Start_7 String ("1" "0" x "" (str.substr Start_6 StartInt StartInt)))
   (StartInt_3 Int (1 0 (str.indexof Start_2 Start_5 StartInt_4) (str.to_int Start_4)))
   (Start_10 String ("1" (str.++ Start_2 Start_7) (str.at Start_7 StartInt_2) (str.from_int StartInt_1) (ite StartBool_2 Start_11 Start_10)))
   (Start_5 String (y (str.++ Start_12 Start_9) (str.substr Start_10 StartInt_5 StartInt_4) (str.replace Start_1 Start_12 Start_5) (str.from_int StartInt_3)))
   (Start_3 String ("0" "1" "" "b" "a" (str.++ Start_3 Start_2) (str.replace Start_4 Start_2 Start_4) (str.from_int StartInt_1) (ite StartBool Start_3 Start_3)))
   (Start_9 String (y (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace "1" x "a")))))

(check-synth)
