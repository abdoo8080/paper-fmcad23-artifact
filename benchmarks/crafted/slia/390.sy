(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_3 String) (StartBool_3 Bool) (Start_11 String) (Start_12 String) (StartInt_1 Int) (StartInt_2 Int) (Start_1 String) (Start_10 String) (StartBool_1 Bool) (Start_4 String) (Start_6 String) (Start_8 String) (StartInt_5 Int) (Start_2 String) (Start_5 String) (StartBool_2 Bool) (StartInt_4 Int) (Start_7 String) (Start_9 String) (StartInt_3 Int))
  ((Start String ("" (str.++ Start_1 Start) (str.at Start_2 StartInt)))
   (StartInt Int (1 (str.len Start_3) (str.indexof Start_10 Start_5 StartInt_4) (str.to_int Start_4)))
   (StartBool Bool (false (str.<= Start Start_11) (str.prefixof Start_10 Start_2) (= StartInt_5 StartInt_2)))
   (StartInt_6 Int (1 0 (str.indexof Start_4 Start_11 StartInt_6) (str.to_int Start_10)))
   (Start_3 String ("" (str.++ Start_4 Start_11) (ite StartBool_3 Start_8 Start_1)))
   (StartBool_3 Bool (false (str.< Start Start_1) (str.suffixof Start_1 Start_6) (str.contains Start_3 Start_7) (= Start_8 Start_4) (= StartInt_3 StartInt_4)))
   (Start_11 String ("0" x "b" "a" (str.at Start_8 StartInt_3) (ite StartBool_3 Start Start_4)))
   (Start_12 String ("1" "" (str.++ Start_8 Start_5) (str.at Start_9 StartInt_3) (str.substr Start_5 StartInt_5 StartInt_3)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_11 Start_8 StartInt_4) (str.to_int Start_12)))
   (StartInt_2 Int (1 0 (str.len Start_8) (str.indexof Start Start StartInt_1)))
   (Start_1 String (y (str.at Start_5 StartInt) (str.substr Start_3 StartInt_2 StartInt_5) (str.from_int StartInt_6)))
   (Start_10 String ("b" y (str.replace Start_3 Start_8 Start_2) (ite StartBool_2 Start_9 Start_9)))
   (StartBool_1 Bool (false (str.< Start_3 Start_2) (str.<= Start_7 Start) (= Start_7 Start_1) (= StartInt_1 StartInt) (<= StartInt StartInt_2)))
   (Start_4 String ("1" y (str.at Start_2 StartInt_1) (str.substr Start_5 StartInt_1 StartInt_1) (ite StartBool_1 Start_1 Start_6)))
   (Start_6 String ("" (str.++ Start Start_7) (str.replace Start Start_5 Start_4) (ite StartBool_1 Start_4 Start_7)))
   (Start_8 String (x (str.replace Start_7 Start_3 Start_8) (ite StartBool_2 Start_2 Start_7)))
   (StartInt_5 Int (1 0))
   (Start_2 String ("a" (str.from_int StartInt) (ite StartBool Start_3 Start_4)))
   (Start_5 String ("" (str.++ Start_6 Start_5) (str.substr Start_6 StartInt StartInt_1) (str.from_int StartInt_4)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_1) (str.prefixof Start_5 Start_1) (str.contains Start_9 Start_10) (= Start_6 Start_5)))
   (StartInt_4 Int (0))
   (Start_7 String (y (str.++ Start_3 Start_4) (str.replace Start_4 Start_3 Start_7) (str.from_int StartInt)))
   (Start_9 String ("1" "a" (str.at Start_5 StartInt_2) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.replace "b" y "") "")))

(check-synth)
