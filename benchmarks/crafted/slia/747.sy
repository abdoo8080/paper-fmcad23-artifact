(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_7 Int) (StartInt_1 Int) (Start_2 String) (StartBool_5 Bool) (StartInt_5 Int) (StartInt_8 Int) (StartInt_6 Int) (Start_3 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_1 String) (Start_4 String) (Start_6 String) (StartInt_4 Int) (Start_10 String) (Start_5 String) (StartBool_3 Bool) (Start_8 String) (StartBool_4 Bool) (StartBool_2 Bool) (StartInt_3 Int) (Start_7 String))
  ((Start String ("a" (str.++ Start Start_1) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt StartInt_1) (str.replace Start_1 Start Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_3)))
   (StartInt Int (1 (str.to_int Start_6)))
   (StartBool Bool (false true (str.< Start_8 Start) (str.suffixof Start Start_8) (= StartInt_8 StartInt_1)))
   (Start_9 String ("" (str.replace Start_10 Start_9 Start_1) (ite StartBool_1 Start_9 Start_6)))
   (StartInt_7 Int (1 0 (str.len Start_9) (str.indexof Start Start_10 StartInt_2) (str.to_int Start_3)))
   (StartInt_1 Int (0 (str.indexof Start Start_8 StartInt_3) (str.to_int Start_7)))
   (Start_2 String ("a" x (str.++ Start_4 Start) (str.substr Start StartInt_6 StartInt_1) (ite StartBool_4 Start_3 Start_6)))
   (StartBool_5 Bool (true false (not StartBool_3) (str.contains Start_2 Start_4)))
   (StartInt_5 Int (0 (str.indexof Start Start_2 StartInt_3) (str.to_int Start)))
   (StartInt_8 Int (0 1 (str.len Start_6)))
   (StartInt_6 Int (1 0 (str.indexof Start_1 Start_4 StartInt_1) (str.to_int Start_3)))
   (Start_3 String ("b" (str.++ Start_3 Start_1) (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_1 Start Start_3) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_2 Int (1 (str.len Start_4)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_2 StartBool_2) (str.< Start_4 Start_5) (str.prefixof Start_2 Start_4) (str.suffixof Start_6 Start) (= Start_5 Start_2) (= StartInt StartInt_2)))
   (Start_1 String ("" x y "0" (str.at Start_3 StartInt_4) (str.substr Start_2 StartInt_5 StartInt_6) (str.replace Start_7 Start_10 Start_8)))
   (Start_4 String (y "a"))
   (Start_6 String ("b" "" "1" (str.at Start_3 StartInt_3) (ite StartBool Start_4 Start_1)))
   (StartInt_4 Int (1 (str.indexof Start_4 Start_2 StartInt) (str.to_int Start_2)))
   (Start_10 String ("0" (str.at Start_1 StartInt_7) (ite StartBool Start_5 Start_2)))
   (Start_5 String ("0" "1" "" (str.++ Start Start_3) (str.at Start StartInt_3) (str.replace Start_1 Start_2 Start_1) (ite StartBool_3 Start_6 Start_3)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_4) (= Start_5 Start_1) (= StartInt_2 StartInt_1) (<= StartInt_3 StartInt_1)))
   (Start_8 String ("a" (str.at Start_6 StartInt_6) (str.replace Start_1 Start_9 Start_5) (str.from_int StartInt_3) (ite StartBool Start_1 Start_10)))
   (StartBool_4 Bool (true (str.<= Start_1 Start_2) (str.suffixof Start_5 Start) (= Start_7 Start_4) (<= StartInt_3 StartInt)))
   (StartBool_2 Bool (true false (and StartBool StartBool_5) (str.suffixof Start Start_3) (str.contains Start_6 Start_7) (= StartInt_4 StartInt_5)))
   (StartInt_3 Int (0 (str.len Start_4)))
   (Start_7 String ("" y "a" x "1" "b" (str.at Start_3 StartInt) (str.substr Start_2 StartInt StartInt_4) (str.from_int StartInt_2) (ite StartBool Start_6 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.replace y (str.at y 1) "b") "")))

(check-synth)
