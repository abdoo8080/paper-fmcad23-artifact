(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_6 Int) (Start_8 String) (Start_7 String) (StartInt_3 Int) (Start_10 String) (Start_4 String) (Start_3 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_9 String) (StartInt_1 Int) (Start_5 String) (StartInt_2 Int) (Start_1 String) (Start_2 String) (StartInt_4 Int) (Start_6 String))
  ((Start String ("b" x (str.++ Start_1 Start) (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_2 Start_1 Start) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start) (str.to_int Start_6)))
   (StartBool Bool (true (and StartBool_1 StartBool) (str.<= Start_1 Start) (str.contains Start_7 Start_4) (= Start_5 Start_1)))
   (Start_11 String ("b" y "a" (str.at Start_9 StartInt_1) (str.substr Start_6 StartInt_3 StartInt_2)))
   (StartInt_6 Int (0 1 (str.to_int Start_5)))
   (Start_8 String ("" (str.at Start_5 StartInt_3) (str.substr Start_2 StartInt_5 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_4)))
   (Start_7 String ("0" (str.++ Start_5 Start_8) (str.at Start_9 StartInt) (str.replace Start_7 Start Start_9) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 (str.to_int Start_3)))
   (Start_10 String (x (str.++ Start_4 Start_4) (str.at Start_11 StartInt_1) (str.substr Start_4 StartInt_3 StartInt_4) (str.replace Start_9 Start_1 Start_6) (str.from_int StartInt_6)))
   (Start_4 String (x "1" "b" (str.replace Start_5 Start_4 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_5)))
   (Start_3 String ("a" "0" x y "" (str.++ Start_1 Start_2) (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_4 Start_2 Start_1) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_1 Bool (true (str.<= Start_2 Start_2) (= Start_2 Start) (= StartInt_4 StartInt) (<= StartInt_3 StartInt_4)))
   (StartInt_5 Int (0 (str.len Start_10)))
   (Start_9 String ("b" "" x (str.++ Start_1 Start_9) (str.at Start_7 StartInt) (str.replace Start_4 Start Start_5) (ite StartBool Start_1 Start_5)))
   (StartInt_1 Int (1 (str.indexof Start_4 Start_2 StartInt_1) (str.to_int Start_2)))
   (Start_5 String ("b" (str.substr Start_1 StartInt_3 StartInt) (str.replace Start_3 Start_2 Start_5) (str.from_int StartInt_1)))
   (StartInt_2 Int (1))
   (Start_1 String (x "0" "" (str.replace Start_2 Start_1 Start_4)))
   (Start_2 String (y (str.++ Start_2 Start_1) (str.at Start_1 StartInt_2) (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt_3)))
   (StartInt_4 Int (0))
   (Start_6 String ("a" "" (str.++ Start_1 Start_2) (str.replace Start_6 Start_4 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "a" x) "1" "a")))

(check-synth)
