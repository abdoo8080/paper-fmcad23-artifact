(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (StartInt_1 Int) (Start_3 String) (StartInt_3 Int) (Start_2 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_1 String))
  ((Start String (y (str.at Start StartInt_1) (str.replace Start Start Start) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_4 Start_2 StartInt_2)))
   (StartBool Bool (true (not StartBool) (str.< Start Start_1) (str.prefixof Start Start_3) (str.suffixof Start Start_1) (str.contains Start_2 Start_4) (= Start Start)))
   (Start_4 String (y x "b" "1" "a" (str.substr Start_2 StartInt_1 StartInt_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_3 StartInt)))
   (Start_3 String ("" (str.++ Start_1 Start_2) (str.replace Start_2 Start_1 Start_2) (ite StartBool Start_3 Start)))
   (StartInt_3 Int (0 1 (str.len Start_1) (str.indexof Start Start_3 StartInt_3)))
   (Start_2 String ("a" y (str.substr Start StartInt_3 StartInt_2) (str.replace Start_2 Start_2 Start) (str.from_int StartInt_2) (ite StartBool_1 Start Start)))
   (StartInt_2 Int (0 (str.len Start_2) (str.indexof Start Start_1 StartInt_1)))
   (StartBool_1 Bool (false true (str.<= Start Start) (str.contains Start_2 Start) (<= StartInt StartInt_2)))
   (Start_1 String ("b" "1" "a" y "0" "" x (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start_1 Start Start) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ (str.from_int (str.to_int (str.from_int (str.indexof x "0" 0)))) "b") 1)))

(check-synth)
