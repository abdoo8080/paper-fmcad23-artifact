(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (StartInt_4 Int) (StartBool_2 Bool) (StartBool_4 Bool) (StartInt_2 Int) (Start_3 String) (Start_4 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_5 String) (StartInt_3 Int) (Start_2 String) (StartBool_3 Bool) (Start_6 String) (Start_7 String))
  ((Start String (y (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (StartInt Int (1))
   (StartBool Bool (false true (str.<= Start_1 Start) (str.prefixof Start Start_2) (= StartInt_4 StartInt_5) (<= StartInt_5 StartInt_1)))
   (Start_1 String ("a" "b" "" (str.substr Start_7 StartInt_2 StartInt) (str.replace Start_3 Start_6 Start_5) (str.from_int StartInt_4)))
   (StartInt_1 Int (1 0 (str.indexof Start_4 Start_4 StartInt_3) (str.to_int Start_5)))
   (StartInt_4 Int (0 (str.len Start_4)))
   (StartBool_2 Bool (false true (not StartBool_2) (str.prefixof Start Start_4) (str.suffixof Start_2 Start_2) (<= StartInt StartInt_3)))
   (StartBool_4 Bool (false true (not StartBool_2) (and StartBool StartBool_1) (str.< Start_2 Start_6) (str.<= Start_1 Start_2) (str.prefixof Start_7 Start) (str.suffixof Start_6 Start_1) (str.contains Start_7 Start) (= Start Start_1)))
   (StartInt_2 Int (1 0 (str.len Start_4) (str.to_int Start_4)))
   (Start_3 String (x "a" "0" "" "b" (str.++ Start Start_1) (str.at Start_3 StartInt) (str.substr Start StartInt_2 StartInt_1) (str.from_int StartInt)))
   (Start_4 String ("" "b" "0" y "1" x "a"))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (str.< Start_2 Start_4) (str.<= Start Start_3) (= StartInt_2 StartInt)))
   (StartInt_5 Int (0 1 (str.len Start_1)))
   (Start_5 String ("" (ite StartBool_1 Start_4 Start_2)))
   (StartInt_3 Int (1 0 (str.len Start_2)))
   (Start_2 String ("0" (str.++ Start_3 Start_1) (str.at Start StartInt_1) (str.substr Start_4 StartInt_3 StartInt_4) (ite StartBool_3 Start_2 Start_5)))
   (StartBool_3 Bool (true (and StartBool_4 StartBool_2) (str.prefixof Start_4 Start_5) (= StartInt_4 StartInt_1) (<= StartInt_1 StartInt)))
   (Start_6 String ("b" "a" (str.replace Start Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start_4 Start_6)))
   (Start_7 String ("0" (str.replace Start_4 Start_1 Start_3) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.replace (str.replace (str.at x 1) "0" "") y "a"))))

(check-synth)
