(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (Start_15 String) (StartInt_3 Int) (StartInt_8 Int) (StartInt_2 Int) (Start_1 String) (StartInt_5 Int) (Start_8 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_4 String) (Start_10 String) (Start_3 String) (Start_2 String) (Start_14 String) (Start_7 String) (Start_9 String) (StartBool_3 Bool) (Start_11 String) (Start_12 String) (StartInt_4 Int) (StartBool_2 Bool) (StartInt_6 Int) (StartBool_4 Bool) (Start_13 String) (StartInt_7 Int) (Start_5 String) (Start_6 String) (StartInt_9 Int) (Start_16 String))
  ((Start String ("0" (str.substr Start_1 StartInt StartInt) (ite StartBool Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_6) (str.indexof Start Start_1 StartInt_2)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_2 StartBool_1) (str.<= Start_3 Start_8) (str.suffixof Start_2 Start_1) (str.contains Start_6 Start_3) (= StartInt_3 StartInt)))
   (StartInt_10 Int (1 (str.len Start_10)))
   (Start_15 String ("a" (str.++ Start_10 Start_4) (str.substr Start_4 StartInt_4 StartInt_8) (str.replace Start_10 Start_12 Start_7) (ite StartBool_2 Start_7 Start_14)))
   (StartInt_3 Int (0 1 (str.indexof Start_8 Start_3 StartInt_1)))
   (StartInt_8 Int (0 1 (str.len Start_3)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_7 Start_3 StartInt)))
   (Start_1 String (x "0" "a" y "1" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.replace Start_2 Start_1 Start_3)))
   (StartInt_5 Int (1 0 (str.indexof Start_1 Start_2 StartInt_4)))
   (Start_8 String ("1" "a" (str.++ Start_2 Start_9) (str.at Start_9 StartInt_2) (str.substr Start StartInt_3 StartInt) (str.from_int StartInt_4) (ite StartBool_1 Start_4 Start_8)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.to_int Start_5)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_1) (str.< Start_1 Start_5) (str.prefixof Start_2 Start_3) (str.suffixof Start_5 Start_3) (= Start_2 Start_3) (<= StartInt_1 StartInt)))
   (Start_4 String ("" (str.replace Start Start Start_4) (ite StartBool_1 Start_3 Start)))
   (Start_10 String ("" (str.++ Start_5 Start_3) (str.at Start_10 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_7 Start_1 Start)))
   (Start_3 String (x "0" (str.replace Start_3 Start_3 Start_4)))
   (Start_2 String (y "1" "" (str.at Start_3 StartInt_1) (str.replace Start_3 Start Start_1) (str.from_int StartInt_1)))
   (Start_14 String ("0" (str.++ Start_3 Start_14) (str.from_int StartInt_1)))
   (Start_7 String ("a" (str.++ Start_1 Start_8) (str.at Start_6 StartInt) (str.substr Start_2 StartInt StartInt_3) (str.replace Start_8 Start_6 Start_1) (ite StartBool Start Start_3)))
   (Start_9 String ("a" (str.++ Start_3 Start_2) (str.at Start_10 StartInt_5) (ite StartBool_1 Start_7 Start_11)))
   (StartBool_3 Bool (false true (and StartBool StartBool_4) (str.suffixof Start_15 Start_16) (<= StartInt_8 StartInt_9)))
   (Start_11 String (x (str.at Start_9 StartInt_6) (str.replace Start_4 Start_12 Start_6) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_7)))
   (Start_12 String ("0" "b" x y "1" "a" "" (str.++ Start_8 Start_8) (str.substr Start_5 StartInt_2 StartInt_2) (ite StartBool_2 Start_1 Start_6)))
   (StartInt_4 Int (0 (str.to_int Start_10)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_7 Start_10) (str.<= Start_13 Start_8) (str.prefixof Start_4 Start_13) (str.suffixof Start_8 Start_10) (= StartInt_2 StartInt_1) (<= StartInt_2 StartInt_6)))
   (StartInt_6 Int (0 1 (str.indexof Start_1 Start_10 StartInt_7)))
   (StartBool_4 Bool (true false (not StartBool_2) (and StartBool_3 StartBool) (str.< Start_1 Start_4) (str.<= Start_11 Start_11) (str.prefixof Start_12 Start_10) (str.suffixof Start_4 Start_16) (str.contains Start_16 Start_4) (= StartInt_1 StartInt_7) (<= StartInt_10 StartInt_10)))
   (Start_13 String ("1" (str.++ Start_14 Start_5) (str.replace Start_12 Start_8 Start)))
   (StartInt_7 Int (0 (str.len Start_3) (str.indexof Start_8 Start_8 StartInt_5)))
   (Start_5 String ("1" x (str.++ Start_3 Start_4)))
   (Start_6 String ("a" (str.++ Start_5 Start_12) (str.at Start StartInt_5) (str.replace Start_13 Start_3 Start_3) (ite StartBool_3 Start_9 Start_8)))
   (StartInt_9 Int (0 (str.to_int Start_14)))
   (Start_16 String ("1" "" "a" (str.replace Start_13 Start_5 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.at x 0) "b")))

(check-synth)
