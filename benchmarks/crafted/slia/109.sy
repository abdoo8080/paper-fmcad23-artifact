(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (Start_18 String) (Start_17 String) (StartBool_4 Bool) (StartBool_5 Bool) (Start_13 String) (Start_8 String) (Start_6 String) (StartInt_10 Int) (StartInt_9 Int) (Start_3 String) (StartInt_6 Int) (Start_4 String) (Start_20 String) (StartInt_3 Int) (Start_7 String) (Start_10 String) (StartBool_3 Bool) (Start_9 String) (Start_5 String) (StartInt_7 Int) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_2 Int) (Start_12 String) (Start_15 String) (Start_14 String) (StartBool_1 Bool) (Start_11 String) (Start_2 String) (StartInt_1 Int) (Start_16 String) (Start_1 String) (StartInt_8 Int))
  ((Start String ("1" "a" "b" x "" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start Start_1 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_3 Start)))
   (StartInt Int (0 (str.len Start_15) (str.indexof Start_10 Start_1 StartInt_9)))
   (StartBool Bool (true (str.prefixof Start_12 Start_9) (str.suffixof Start_13 Start_6) (str.contains Start_12 Start_4) (= Start_19 Start_20)))
   (Start_19 String (y "a" x (str.at Start_19 StartInt_4) (str.substr Start_9 StartInt_7 StartInt_10)))
   (Start_18 String (x "" "a" y "b" (str.at Start_12 StartInt_2) (str.replace Start_18 Start_12 Start_4) (ite StartBool_2 Start_3 Start_5)))
   (Start_17 String ("b" (str.at Start_9 StartInt) (str.substr Start_16 StartInt StartInt_8) (str.replace Start_15 Start_18 Start_14)))
   (StartBool_4 Bool (true (not StartBool) (str.prefixof Start Start) (str.contains Start_4 Start_8) (= StartInt StartInt_3)))
   (StartBool_5 Bool (true false (and StartBool_5 StartBool_2) (str.suffixof Start_4 Start_16) (= StartInt_5 StartInt_1) (<= StartInt_8 StartInt_2)))
   (Start_13 String ("b" (str.at Start_14 StartInt_4) (str.substr Start_7 StartInt_6 StartInt_4) (str.from_int StartInt_5) (ite StartBool Start_2 Start_12)))
   (Start_8 String ("0" (str.++ Start_1 Start_9) (str.at Start_6 StartInt_7) (str.replace Start_9 Start_6 Start_5) (str.from_int StartInt_3)))
   (Start_6 String ("0" "" (str.from_int StartInt_5) (ite StartBool_3 Start_7 Start_2)))
   (StartInt_10 Int (1 0 (str.len Start_9) (str.to_int Start_8)))
   (StartInt_9 Int (0 1))
   (Start_3 String ("1" (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt StartInt_4) (str.from_int StartInt) (ite StartBool_2 Start_4 Start_5)))
   (StartInt_6 Int (1 (str.indexof Start_4 Start_1 StartInt_1) (str.to_int Start_5)))
   (Start_4 String ("" "a" "0" (str.substr Start_9 StartInt_5 StartInt_3) (str.from_int StartInt_6)))
   (Start_20 String ("b" (str.at Start_12 StartInt_5) (str.replace Start_20 Start_12 Start_10) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 0 (str.to_int Start_2)))
   (Start_7 String (x "a" (str.at Start_4 StartInt_1) (str.substr Start_6 StartInt_6 StartInt_5) (str.from_int StartInt_3) (ite StartBool_2 Start_3 Start_1)))
   (Start_10 String ("1" (str.replace Start_7 Start_5 Start)))
   (StartBool_3 Bool (true (not StartBool_4) (str.< Start Start_6) (str.prefixof Start Start_7) (str.suffixof Start_6 Start_8) (<= StartInt_3 StartInt_2)))
   (Start_9 String ("" (str.++ Start_8 Start_2) (str.at Start_5 StartInt_2) (str.from_int StartInt_6)))
   (Start_5 String ("b" "0" "1" (str.at Start_2 StartInt_5) (str.replace Start_4 Start_3 Start_6) (str.from_int StartInt_5) (ite StartBool Start_5 Start_1)))
   (StartInt_7 Int (1 0 (str.indexof Start_7 Start_2 StartInt_7) (str.to_int Start_9)))
   (StartInt_5 Int (1 (str.indexof Start_6 Start_9 StartInt_6) (str.to_int Start_2)))
   (StartBool_2 Bool (true false (str.< Start_2 Start_10) (str.<= Start_3 Start_5) (str.prefixof Start Start_2)))
   (StartInt_4 Int (1 (str.to_int Start_10)))
   (StartInt_2 Int (0 (str.len Start) (str.indexof Start_11 Start_12 StartInt_3)))
   (Start_12 String ("a" "" "1" (str.++ Start_1 Start_6) (str.at Start_9 StartInt_3) (str.from_int StartInt_6) (ite StartBool Start_1 Start_6)))
   (Start_15 String ("" "a" x (str.++ Start_17 Start_10) (str.at Start_13 StartInt_6) (str.replace Start_15 Start_6 Start_14) (ite StartBool_5 Start_12 Start_13)))
   (Start_14 String ("1" (str.at Start_5 StartInt_3) (str.substr Start_12 StartInt_5 StartInt_5) (str.from_int StartInt_7)))
   (StartBool_1 Bool (true (not StartBool) (str.prefixof Start_1 Start) (<= StartInt_3 StartInt)))
   (Start_11 String ("" "1" "0" (str.++ Start Start_3) (str.replace Start_3 Start_12 Start_12) (str.from_int StartInt_7) (ite StartBool Start_3 Start_13)))
   (Start_2 String ("0" "b" "1" "a" x y "" (str.++ Start_1 Start_12) (ite StartBool Start_3 Start_1)))
   (StartInt_1 Int (0))
   (Start_16 String ("0" "" (str.++ Start_7 Start_6) (str.at Start_2 StartInt_6) (str.replace Start Start_1 Start_9) (ite StartBool_2 Start_10 Start_4)))
   (Start_1 String (x "0" (str.at Start_15 StartInt_4) (str.from_int StartInt_1) (ite StartBool_5 Start_15 Start_7)))
   (StartInt_8 Int (0 (str.len Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "1" "b")))

(check-synth)
