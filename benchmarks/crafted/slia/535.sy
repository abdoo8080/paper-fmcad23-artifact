(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (Start_7 String) (StartInt_4 Int) (Start_8 String) (StartInt_1 Int) (StartInt_2 Int) (Start_3 String) (Start_1 String) (StartInt_3 Int) (Start_2 String) (StartBool_2 Bool) (Start_4 String) (Start_5 String) (StartBool_1 Bool) (StartBool_3 Bool) (Start_9 String))
  ((Start String ("0" (str.at Start StartInt) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.len Start) (str.to_int Start)))
   (StartBool Bool (false (not StartBool) (and StartBool_1 StartBool_1) (str.<= Start_1 Start_1) (str.suffixof Start_2 Start_1) (str.contains Start Start_2) (= Start_2 Start) (= StartInt StartInt) (<= StartInt_1 StartInt_1)))
   (Start_6 String ("0"))
   (Start_7 String (x "b" "a" "1" (str.substr Start StartInt_4 StartInt) (str.from_int StartInt)))
   (StartInt_4 Int (1 (str.indexof Start_3 Start_9 StartInt) (str.to_int Start_4)))
   (Start_8 String (x "1" (str.from_int StartInt) (ite StartBool_2 Start_7 Start_2)))
   (StartInt_1 Int (0 (str.indexof Start_2 Start_3 StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.to_int Start_4)))
   (Start_3 String ("" "1" (str.from_int StartInt)))
   (Start_1 String (x "1" (str.++ Start Start_3) (str.at Start_3 StartInt_2) (str.substr Start_1 StartInt_3 StartInt) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 0 (str.len Start_5) (str.to_int Start_4)))
   (Start_2 String ("" "0" (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_2 Bool (false true (and StartBool StartBool_3) (str.prefixof Start_4 Start_2) (str.suffixof Start_9 Start_5) (= Start_4 Start_4)))
   (Start_4 String ("b" "" "a" "0" (str.++ Start_4 Start_2) (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start_3 Start_1 Start_1) (str.from_int StartInt) (ite StartBool Start_5 Start_5)))
   (Start_5 String (x (str.++ Start_5 Start_2) (str.substr Start_2 StartInt_2 StartInt)))
   (StartBool_1 Bool (true (and StartBool StartBool) (str.< Start_1 Start_2) (str.<= Start_6 Start_7) (str.prefixof Start_3 Start_8) (str.suffixof Start_3 Start) (str.contains Start_3 Start_7) (= Start_7 Start_9) (<= StartInt_3 StartInt_1)))
   (StartBool_3 Bool (false true (not StartBool_3) (str.prefixof Start_4 Start_3) (str.suffixof Start_4 Start_9) (= Start_7 Start_8) (= StartInt_1 StartInt) (<= StartInt StartInt_4)))
   (Start_9 String ("1" (str.++ Start_2 Start_6) (str.at Start_1 StartInt_2) (str.substr Start_5 StartInt_3 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "1" "a") "" x)))

(check-synth)
