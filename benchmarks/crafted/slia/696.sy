(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartInt_6 Int) (Start_1 String) (StartInt_1 Int) (Start_2 String) (StartInt_3 Int) (Start_6 String) (StartInt_2 Int) (StartInt_5 Int) (Start_3 String) (Start_5 String) (Start_7 String) (StartBool_1 Bool) (StartBool_2 Bool) (StartInt_4 Int) (Start_8 String) (Start_4 String))
  ((Start String ("b" "0" (str.at Start_1 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start Start_1)))
   (StartInt Int (0 1 (str.to_int Start_8)))
   (StartBool Bool (false true (not StartBool) (and StartBool StartBool_1) (str.prefixof Start_3 Start_7) (= Start Start_8) (= StartInt_1 StartInt_6)))
   (StartInt_7 Int (1 (str.indexof Start_1 Start_2 StartInt)))
   (StartInt_6 Int (0 1 (str.len Start_5) (str.indexof Start_8 Start_1 StartInt_7)))
   (Start_1 String (x "b" "0" "" (str.++ Start_5 Start_5) (str.substr Start_8 StartInt StartInt_3) (str.replace Start Start_2 Start_2) (ite StartBool_2 Start_6 Start_3)))
   (StartInt_1 Int (0 1 (str.indexof Start_8 Start_1 StartInt_4) (str.to_int Start_6)))
   (Start_2 String ("" "1" "a" (ite StartBool_1 Start_4 Start)))
   (StartInt_3 Int (1 0 (str.indexof Start_8 Start StartInt_3)))
   (Start_6 String ("b" (str.at Start_7 StartInt_1) (str.substr Start StartInt_1 StartInt)))
   (StartInt_2 Int (1 0 (str.to_int Start_3)))
   (StartInt_5 Int (0 1 (str.indexof Start_1 Start_5 StartInt_2)))
   (Start_3 String ("0" y "" "b" "a" "1" (str.++ Start_1 Start_4) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_3 Start_5) (str.from_int StartInt_1) (ite StartBool Start Start_6)))
   (Start_5 String ("b" (str.++ Start_3 Start_5) (str.at Start_8 StartInt_5) (str.substr Start StartInt_3 StartInt) (str.replace Start_2 Start_6 Start_5) (ite StartBool_2 Start Start_1)))
   (Start_7 String ("1" "a" (str.++ Start_1 Start) (str.at Start_3 StartInt_2) (str.from_int StartInt) (ite StartBool_2 Start_1 Start_5)))
   (StartBool_1 Bool (false true (not StartBool) (str.prefixof Start_1 Start) (str.contains Start Start_1) (= Start_2 Start_2) (= StartInt_1 StartInt_1) (<= StartInt StartInt_2)))
   (StartBool_2 Bool (false (str.< Start_4 Start_1) (str.<= Start_2 Start_7) (str.suffixof Start Start_4) (str.contains Start_5 Start_3) (= StartInt_3 StartInt_1) (<= StartInt_4 StartInt_3)))
   (StartInt_4 Int (0 1 (str.indexof Start_4 Start_1 StartInt_2)))
   (Start_8 String (y (str.++ Start_6 Start_5) (str.replace Start_2 Start_2 Start_2) (str.from_int StartInt_1)))
   (Start_4 String ("a" "" "b" (str.substr Start_8 StartInt_5 StartInt_4) (str.replace Start_1 Start_2 Start_8) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= 1 (str.indexof x "" 1)) "a" "b")))

(check-synth)
