(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_13 String) (StartInt_1 Int) (StartInt_2 Int) (Start_2 String) (StartInt_7 Int) (StartInt_8 Int) (StartInt_9 Int) (Start_12 String) (Start_11 String) (Start_1 String) (StartBool_1 Bool) (Start_6 String) (StartInt_5 Int) (StartInt_3 Int) (Start_3 String) (StartInt_10 Int) (Start_5 String) (Start_9 String) (StartInt_4 Int) (Start_7 String) (StartInt_6 Int) (Start_4 String) (Start_8 String) (Start_10 String) (StartBool_2 Bool))
  ((Start String ("1" "0" (str.++ Start_1 Start) (str.at Start StartInt_1) (str.replace Start Start Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start_1)))
   (StartInt Int (0 1 (str.len Start_11) (str.indexof Start_13 Start_12 StartInt_10) (str.to_int Start_3)))
   (StartBool Bool (false true (not StartBool_3) (str.<= Start_1 Start_11) (str.suffixof Start_4 Start_5) (str.contains Start_13 Start_5) (= StartInt_10 StartInt) (<= StartInt_1 StartInt_3)))
   (StartBool_3 Bool (false true (and StartBool StartBool_1) (str.< Start_2 Start_13) (str.prefixof Start_11 Start_2) (str.suffixof Start_13 Start_10) (= Start_6 Start_8) (= StartInt_5 StartInt_5)))
   (Start_13 String ("b" (str.++ Start_11 Start_3) (str.at Start_10 StartInt_10) (str.substr Start StartInt_5 StartInt_9) (str.from_int StartInt_4) (ite StartBool_2 Start_3 Start_7)))
   (StartInt_1 Int (1 (str.to_int Start_2)))
   (StartInt_2 Int (0))
   (Start_2 String ("a" (str.++ Start_9 Start) (str.substr Start_4 StartInt_4 StartInt_9) (str.from_int StartInt_5) (ite StartBool Start_6 Start_12)))
   (StartInt_7 Int (1 (str.to_int Start_12)))
   (StartInt_8 Int (0 1 (str.len Start_2) (str.indexof Start_6 Start_5 StartInt_6)))
   (StartInt_9 Int (1 (str.indexof Start_12 Start StartInt_10)))
   (Start_12 String (y "1" (str.++ Start_7 Start_11) (str.substr Start_8 StartInt_1 StartInt_10) (str.from_int StartInt_9)))
   (Start_11 String ("" x "b" "a" "0" "1" (str.substr Start_8 StartInt_9 StartInt_3) (ite StartBool Start_12 Start_1)))
   (Start_1 String ("a" (str.at Start_2 StartInt_6) (str.substr Start_9 StartInt_9 StartInt_5) (ite StartBool_2 Start_6 Start_6)))
   (StartBool_1 Bool (true (and StartBool StartBool_1) (str.< Start Start_2) (str.<= Start_1 Start) (str.suffixof Start_2 Start_3) (str.contains Start_4 Start_1) (= Start_3 Start) (<= StartInt_3 StartInt_4)))
   (Start_6 String ("1" (str.++ Start_5 Start_5) (str.substr Start_8 StartInt_7 StartInt_8) (str.replace Start_7 Start_3 Start_9) (str.from_int StartInt_4)))
   (StartInt_5 Int (1 0 (str.indexof Start_3 Start_2 StartInt_4)))
   (StartInt_3 Int (1 (str.indexof Start_6 Start_2 StartInt) (str.to_int Start_7)))
   (Start_3 String ("" (str.replace Start Start_12 Start) (str.from_int StartInt_1) (ite StartBool Start_6 Start_2)))
   (StartInt_10 Int (1 0 (str.len Start_6) (str.indexof Start_4 Start_2 StartInt_7) (str.to_int Start_4)))
   (Start_5 String ("a" "b" "1" x (str.++ Start Start_1) (str.at Start_3 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt_3)))
   (Start_9 String ("a" (str.++ Start_2 Start) (str.at Start_2 StartInt_8) (str.substr Start_4 StartInt_3 StartInt_7) (str.replace Start_7 Start_6 Start_7) (str.from_int StartInt_3) (ite StartBool_2 Start_8 Start_5)))
   (StartInt_4 Int (0 (str.indexof Start_5 Start StartInt_5)))
   (Start_7 String ("" x y (str.++ Start_5 Start_3) (str.substr Start_8 StartInt_6 StartInt_5) (str.replace Start_5 Start_7 Start_5)))
   (StartInt_6 Int (0 (str.to_int Start_4)))
   (Start_4 String (y (str.++ Start_11 Start_1) (str.substr Start_12 StartInt_7 StartInt) (str.from_int StartInt_2)))
   (Start_8 String ("1" y (str.++ Start_6 Start_2) (str.at Start_4 StartInt_1) (str.replace Start_5 Start_6 Start_5) (str.from_int StartInt_1)))
   (Start_10 String ("" (str.substr Start_1 StartInt_9 StartInt_5) (str.replace Start_4 Start_5 Start_11)))
   (StartBool_2 Bool (false true (str.<= Start_6 Start_5) (str.prefixof Start_4 Start_9) (str.contains Start Start_10) (= StartInt_6 StartInt_8) (<= StartInt_5 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" y "0")))

(check-synth)
