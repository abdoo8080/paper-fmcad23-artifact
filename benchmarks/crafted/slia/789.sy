(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_4 String) (Start_10 String) (StartInt_5 Int) (StartInt_1 Int) (StartInt_6 Int) (Start_2 String) (Start_1 String) (Start_7 String) (Start_9 String) (StartBool_1 Bool) (Start_3 String) (StartBool_3 Bool) (StartInt_3 Int) (StartInt_2 Int) (Start_5 String) (Start_8 String) (Start_6 String) (StartInt_4 Int))
  ((Start String (x "1" y "" (str.substr Start StartInt_1 StartInt_1)))
   (StartInt Int (0 1 (str.len Start_4) (str.indexof Start_6 Start_1 StartInt_4) (str.to_int Start)))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (str.< Start_2 Start_8) (str.prefixof Start_4 Start_2) (= StartInt_3 StartInt_5)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_3) (str.< Start_8 Start_10) (= Start_5 Start_1) (= StartInt StartInt_4) (<= StartInt_4 StartInt_2)))
   (Start_4 String ("0" y "1" "" (str.++ Start_2 Start_4) (str.at Start_5 StartInt_3) (str.substr Start StartInt StartInt_2) (str.from_int StartInt_1)))
   (Start_10 String (y "a" "0" "1" "b" "" x (str.++ Start_4 Start_10) (ite StartBool_2 Start_5 Start_10)))
   (StartInt_5 Int (1 (str.len Start_7) (str.indexof Start_3 Start_8 StartInt_6)))
   (StartInt_1 Int (1 (str.len Start_1) (str.to_int Start)))
   (StartInt_6 Int (1 0 (str.indexof Start Start_2 StartInt_5) (str.to_int Start_1)))
   (Start_2 String ("0" (str.at Start StartInt) (str.substr Start_1 StartInt_3 StartInt_2) (str.from_int StartInt_3)))
   (Start_1 String (y (str.++ Start_2 Start_1) (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_1 Start_3 Start_1) (ite StartBool Start_1 Start_3)))
   (Start_7 String ("0" "b" "1" (str.++ Start_6 Start_1) (str.replace Start Start_4 Start_8)))
   (Start_9 String (y (str.at Start StartInt_6) (str.substr Start_10 StartInt_5 StartInt_5) (str.replace Start_9 Start_9 Start_8) (str.from_int StartInt) (ite StartBool_1 Start Start_5)))
   (StartBool_1 Bool (true (str.<= Start_7 Start_3) (str.prefixof Start_2 Start_9) (str.suffixof Start_3 Start_4)))
   (Start_3 String (x y (str.at Start_4 StartInt_2) (str.substr Start_3 StartInt StartInt_1) (str.replace Start_1 Start_2 Start_2) (ite StartBool Start Start_1)))
   (StartBool_3 Bool (false true (str.< Start_8 Start_2) (str.<= Start_8 Start_2) (str.contains Start_4 Start_2) (= StartInt_2 StartInt_5)))
   (StartInt_3 Int (1 (str.to_int Start)))
   (StartInt_2 Int (1 (str.len Start_3) (str.to_int Start_3)))
   (Start_5 String (y "0" "a" "1" "b" x "" (str.++ Start_3 Start) (str.substr Start_4 StartInt_2 StartInt) (str.replace Start_6 Start Start_4)))
   (Start_8 String (x "a" (str.at Start_6 StartInt_3)))
   (Start_6 String ("0" (str.at Start_7 StartInt_1) (str.from_int StartInt_4)))
   (StartInt_4 Int (0 1))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" x (str.replace x "" "1"))))

(check-synth)
