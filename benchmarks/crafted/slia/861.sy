(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_13 Int) (StartBool_5 Bool) (Start_1 String) (Start_17 String) (StartInt_11 Int) (StartInt_12 Int) (Start_16 String) (StartBool_4 Bool) (StartBool_3 Bool) (Start_4 String) (StartInt_3 Int) (StartInt_9 Int) (StartInt_14 Int) (Start_2 String) (Start_6 String) (StartInt_4 Int) (Start_10 String) (Start_14 String) (StartBool_1 Bool) (Start_3 String) (Start_7 String) (Start_11 String) (Start_12 String) (StartInt_10 Int) (StartInt_2 Int) (StartInt_6 Int) (Start_15 String) (Start_9 String) (StartInt_5 Int) (StartInt_8 Int) (Start_8 String) (Start_13 String) (Start_5 String) (StartInt_7 Int) (StartBool_2 Bool) (StartInt_1 Int))
  ((Start String ("1" y "a" (str.++ Start Start_1) (str.at Start_2 StartInt_1) (str.replace Start Start_2 Start_2) (ite StartBool_1 Start_3 Start_3)))
   (StartInt Int (1 (str.len Start_6) (str.to_int Start)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_4 StartBool_4) (str.suffixof Start_17 Start_15) (str.contains Start_11 Start_4) (= Start_14 Start_14) (= StartInt_9 StartInt_13) (<= StartInt_11 StartInt_7)))
   (StartInt_13 Int (1 0 (str.indexof Start_8 Start_12 StartInt_14) (str.to_int Start_7)))
   (StartBool_5 Bool (false true (not StartBool_1) (and StartBool_5 StartBool) (str.< Start_8 Start_12) (str.suffixof Start_3 Start_14) (str.contains Start_6 Start_7) (= Start_4 Start_14)))
   (Start_1 String ("a" (str.replace Start_4 Start_9 Start_3) (ite StartBool_5 Start_13 Start_13)))
   (Start_17 String (y (str.substr Start_3 StartInt_3 StartInt_2) (str.from_int StartInt_11)))
   (StartInt_11 Int (1 0 (str.indexof Start_1 Start_2 StartInt_12) (str.to_int Start_5)))
   (StartInt_12 Int (0 1 (str.indexof Start_17 Start_14 StartInt_9)))
   (Start_16 String ("a" "1" "0" x (str.++ Start_5 Start_10) (str.substr Start_17 StartInt_11 StartInt_12) (str.replace Start_1 Start_15 Start_11) (str.from_int StartInt_3)))
   (StartBool_4 Bool (false true (not StartBool_2) (str.<= Start_6 Start_2) (= Start_6 Start_7) (<= StartInt_2 StartInt_3)))
   (StartBool_3 Bool (true false (str.< Start Start) (str.<= Start_2 Start_1) (= Start_8 Start_6) (= StartInt_4 StartInt) (<= StartInt_3 StartInt_3)))
   (Start_4 String (y "b" "a" (str.from_int StartInt)))
   (StartInt_3 Int (0 (str.len Start)))
   (StartInt_9 Int (1 0 (str.len Start_4) (str.indexof Start_3 Start_5 StartInt_10)))
   (StartInt_14 Int (0 (str.len Start_3)))
   (Start_2 String ("0" "1" (str.at Start_2 StartInt_5) (str.substr Start_11 StartInt_2 StartInt_8) (str.replace Start_2 Start_14 Start_13)))
   (Start_6 String ("1" "0" "a" x (str.++ Start_4 Start_5) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_3 Start_5 Start_4) (ite StartBool_4 Start_3 Start_2)))
   (StartInt_4 Int (1))
   (Start_10 String ("b" (str.substr Start_6 StartInt_5 StartInt_5) (str.replace Start_3 Start_4 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start_11)))
   (Start_14 String (y (str.++ Start_15 Start_10) (str.at Start_14 StartInt_10) (str.replace Start_9 Start_11 Start) (str.from_int StartInt_2) (ite StartBool_3 Start_6 Start_6)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_3) (str.< Start_5 Start_2) (str.<= Start_3 Start) (str.prefixof Start Start) (str.contains Start_2 Start_4) (= StartInt StartInt)))
   (Start_3 String (y "" "1" x (str.++ Start_4 Start_3) (str.at Start_4 StartInt) (str.replace Start_1 Start_1 Start)))
   (Start_7 String ("" (str.++ Start_7 Start_3) (str.at Start_2 StartInt) (str.from_int StartInt)))
   (Start_11 String ("" (str.at Start_6 StartInt) (str.substr Start_8 StartInt_5 StartInt) (str.from_int StartInt_3) (ite StartBool_2 Start_8 Start_12)))
   (Start_12 String (y (str.++ Start_9 Start_8) (str.at Start_10 StartInt_2) (str.substr Start_9 StartInt_5 StartInt_5) (str.replace Start_10 Start_12 Start_4) (str.from_int StartInt_6)))
   (StartInt_10 Int (1 0 (str.to_int Start_9)))
   (StartInt_2 Int (0 (str.to_int Start_6)))
   (StartInt_6 Int (0 1 (str.to_int Start)))
   (Start_15 String ("1" y (str.++ Start_10 Start_14) (str.at Start_11 StartInt_10) (str.substr Start_5 StartInt_10 StartInt_7) (str.replace Start_10 Start Start_16)))
   (Start_9 String ("" (str.at Start_8 StartInt_2) (str.substr Start_3 StartInt StartInt_7) (str.replace Start_11 Start_6 Start_5) (str.from_int StartInt_8) (ite StartBool_1 Start_7 Start)))
   (StartInt_5 Int (1 (str.len Start_3)))
   (StartInt_8 Int (1 0 (str.len Start_13) (str.indexof Start_10 Start_2 StartInt_2)))
   (Start_8 String ("1" (str.++ Start_8 Start_9) (str.at Start_6 StartInt) (str.replace Start_9 Start_10 Start_6)))
   (Start_13 String (x y "a" "1" (str.++ Start_1 Start_11) (str.at Start_13 StartInt_9)))
   (Start_5 String ("" "a" "1" "0" (str.at Start_4 StartInt_1) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_5 Start_5 Start_5) (str.from_int StartInt)))
   (StartInt_7 Int (0 1 (str.to_int Start)))
   (StartBool_2 Bool (false (str.<= Start_1 Start_4) (str.suffixof Start_4 Start_8) (str.contains Start_2 Start_8)))
   (StartInt_1 Int (1 0 (str.indexof Start_4 Start_6 StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof "a" y) "0" (str.at x 0))))

(check-synth)
