(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartInt_4 Int) (Start_1 String) (Start_11 String) (Start_10 String) (Start_9 String) (Start_4 String) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_2 Int) (Start_6 String) (Start_3 String) (Start_5 String) (Start_2 String) (Start_12 String) (Start_7 String) (StartInt_3 Int) (StartInt_1 Int) (Start_8 String))
  ((Start String (y (str.++ Start_1 Start_2) (str.replace Start_1 Start_2 Start) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_6) (str.indexof Start_9 Start_6 StartInt_2) (str.to_int Start_6)))
   (StartBool Bool (true false (not StartBool) (str.<= Start_5 Start_4) (str.suffixof Start_12 Start) (str.contains Start_1 Start_10) (= Start_3 Start_10) (<= StartInt StartInt_1)))
   (Start_13 String ("" (ite StartBool_2 Start_1 Start_6)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.indexof Start_13 Start_11 StartInt_2)))
   (Start_1 String ("0" "1" "" (str.substr Start_4 StartInt_3 StartInt_3) (str.replace Start_7 Start_2 Start_4) (ite StartBool_1 Start_3 Start_1)))
   (Start_11 String ("0" (str.++ Start_4 Start_1) (str.substr Start_7 StartInt_2 StartInt) (str.replace Start_9 Start_11 Start_11) (str.from_int StartInt_2)))
   (Start_10 String (y "a" "0" "" "b" "1" (str.++ Start_10 Start_9) (str.at Start_6 StartInt_3) (str.substr Start_11 StartInt StartInt) (str.replace Start_10 Start_11 Start_2) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_9)))
   (Start_9 String (y "1" "0" (str.at Start_10 StartInt) (str.from_int StartInt_1) (ite StartBool_2 Start_2 Start_7)))
   (Start_4 String ("1" "" "0" y (str.at Start_5 StartInt) (str.replace Start_4 Start_5 Start_2)))
   (StartBool_2 Bool (false true (str.prefixof Start_4 Start_6) (= Start_6 Start_2)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_2) (str.<= Start Start_2) (str.prefixof Start Start_3) (str.suffixof Start_3 Start_1) (str.contains Start_4 Start_1)))
   (StartInt_2 Int (0 (str.indexof Start Start_5 StartInt) (str.to_int Start_1)))
   (Start_6 String ("1" x (str.at Start_4 StartInt_2)))
   (Start_3 String ("1" (str.at Start_8 StartInt_3) (str.from_int StartInt_3)))
   (Start_5 String (x "b" (str.++ Start_2 Start_2) (str.at Start StartInt) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_6 Start_7 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start)))
   (Start_2 String ("0" "a" (ite StartBool_2 Start_9 Start_7)))
   (Start_12 String ("" y x "a" (str.at Start_10 StartInt_4) (str.replace Start_9 Start_9 Start_6) (ite StartBool_2 Start_2 Start)))
   (Start_7 String ("a" "b" (str.++ Start_1 Start_3) (str.substr Start_6 StartInt_2 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_3 Int (0 1 (str.len Start_5) (str.indexof Start_8 Start_4 StartInt_1) (str.to_int Start_5)))
   (StartInt_1 Int (0 (str.len Start_8) (str.indexof Start_2 Start_8 StartInt_2)))
   (Start_8 String ("" x y "1" (str.replace Start_6 Start_5 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.substr y 1 (str.len x)) 0)))

(check-synth)
