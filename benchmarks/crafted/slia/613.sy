(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_5 String) (StartInt_1 Int) (StartInt_2 Int) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_6 Int) (Start_9 String) (Start_2 String) (Start_4 String) (StartInt_7 Int) (Start_6 String) (Start_3 String) (Start_7 String) (Start_1 String) (Start_11 String) (Start_8 String) (StartBool_2 Bool) (Start_10 String) (StartInt_3 Int) (StartInt_4 Int))
  ((Start String ("0" y "b" (str.++ Start_1 Start) (str.replace Start_1 Start_1 Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (1 (str.to_int Start_7)))
   (StartBool Bool (true (str.suffixof Start_8 Start_7)))
   (Start_12 String (y "" (str.++ Start_11 Start_8) (str.substr Start_4 StartInt_7 StartInt) (str.replace Start_11 Start_10 Start_9) (str.from_int StartInt_4)))
   (Start_5 String ("1" "a" (str.++ Start_9 Start_12) (str.substr Start_10 StartInt_3 StartInt_4) (str.replace Start_9 Start_2 Start_1)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start_7 Start_6 StartInt)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_1 Start_5 StartInt_1) (str.to_int Start_9)))
   (StartInt_5 Int (0 1 (str.indexof Start_2 Start StartInt_1)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.< Start_3 Start) (str.<= Start_4 Start) (str.prefixof Start_2 Start_3) (= StartInt StartInt)))
   (StartInt_6 Int (1 (str.len Start_2)))
   (Start_9 String (x "b" (str.++ Start_4 Start_9) (str.replace Start Start_11 Start_5)))
   (Start_2 String ("a" (ite StartBool_1 Start_1 Start_2)))
   (Start_4 String (y "" (str.++ Start_2 Start_5) (str.substr Start StartInt_1 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_1 Start_6)))
   (StartInt_7 Int (0))
   (Start_6 String ("a" (str.++ Start_1 Start_3) (str.replace Start_5 Start_1 Start_6) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start)))
   (Start_3 String (x "0" (str.++ Start_7 Start_6) (str.at Start_8 StartInt_6) (str.replace Start_5 Start_3 Start_1) (str.from_int StartInt_3) (ite StartBool_2 Start Start_5)))
   (Start_7 String ("1" (str.++ Start_1 Start) (str.replace Start_3 Start_4 Start_1) (ite StartBool Start_8 Start_8)))
   (Start_1 String ("b"))
   (Start_11 String ("0" (str.++ Start_3 Start_3) (str.substr Start_10 StartInt_5 StartInt_6)))
   (Start_8 String ("" y "0" (str.++ Start_8 Start_9) (str.substr Start_3 StartInt_4 StartInt_1) (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start_8)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_2 StartBool) (str.<= Start_1 Start_3) (str.suffixof Start Start_10) (= StartInt_2 StartInt_2)))
   (Start_10 String ("a" (str.substr Start_6 StartInt_2 StartInt_3) (str.replace Start_5 Start_7 Start_4)))
   (StartInt_3 Int (0 1 (str.indexof Start_5 Start_7 StartInt_3)))
   (StartInt_4 Int (0 (str.len Start) (str.indexof Start_6 Start_4 StartInt_4) (str.to_int Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace "" y "0")))))

(check-synth)
