(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_4 Int) (StartInt_1 Int) (StartInt_2 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_1 String) (Start_7 String) (Start_5 String) (StartBool_3 Bool) (Start_6 String) (StartInt_5 Int) (Start_2 String) (Start_4 String) (Start_8 String) (Start_3 String) (StartInt_3 Int))
  ((Start String ("b" "1" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start Start_2 Start_2) (str.from_int StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt Int (0 (str.indexof Start_5 Start_3 StartInt_4) (str.to_int Start_2)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_1 StartBool) (str.< Start Start_4) (str.suffixof Start Start_4) (= Start_7 Start_1) (= StartInt StartInt_2)))
   (StartInt_6 Int (0 1 (str.len Start_4) (str.indexof Start_5 Start_6 StartInt) (str.to_int Start_1)))
   (StartInt_4 Int (0 (str.len Start_3)))
   (StartInt_1 Int (1 0))
   (StartInt_2 Int (1 (str.len Start_7) (str.indexof Start_1 Start_3 StartInt)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_1) (str.< Start Start_3) (str.<= Start_2 Start_2) (str.contains Start Start_4) (= Start_2 Start_7) (<= StartInt_3 StartInt_5)))
   (StartBool_1 Bool (true (not StartBool) (str.<= Start Start_3) (str.prefixof Start_5 Start_8) (str.suffixof Start_7 Start_5) (= Start_8 Start_1) (<= StartInt_3 StartInt_3)))
   (Start_1 String (x "" (str.++ Start_2 Start_3) (str.at Start_1 StartInt_1) (str.replace Start_4 Start_5 Start_2)))
   (Start_7 String ("1" (str.++ Start_5 Start_3) (str.substr Start StartInt_2 StartInt_2)))
   (Start_5 String ("" "a" (str.++ Start_1 Start_1) (str.at Start_3 StartInt_2) (str.replace Start Start Start_6) (str.from_int StartInt_2)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool) (str.<= Start_7 Start_5) (str.prefixof Start Start_5) (str.suffixof Start_7 Start_7) (= Start_1 Start_8)))
   (Start_6 String ("0" (str.++ Start_6 Start_5) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start_5 Start_6 Start_3)))
   (StartInt_5 Int (0 1 (str.indexof Start_8 Start_7 StartInt_6) (str.to_int Start)))
   (Start_2 String (x "1" (str.++ Start_2 Start_1)))
   (Start_4 String ("1" (str.++ Start_8 Start) (str.at Start_5 StartInt) (str.replace Start_7 Start Start_4) (str.from_int StartInt_1)))
   (Start_8 String (y (str.at Start_3 StartInt_2) (str.replace Start_8 Start_3 Start_4)))
   (Start_3 String ("1" (str.++ Start_2 Start) (ite StartBool_1 Start_6 Start_2)))
   (StartInt_3 Int (1 (str.len Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.len (str.++ "1" "0")))))

(check-synth)
