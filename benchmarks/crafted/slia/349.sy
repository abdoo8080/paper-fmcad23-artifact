(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (StartBool_5 Bool) (Start_13 String) (StartInt_5 Int) (StartInt_4 Int) (Start_12 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_8 String) (Start_11 String) (Start_14 String) (Start_4 String) (Start_7 String) (Start_2 String) (Start_6 String) (Start_5 String) (Start_1 String) (StartBool_1 Bool) (Start_9 String) (StartInt_1 Int) (Start_3 String) (Start_15 String) (StartBool_2 Bool) (Start_10 String) (StartInt_3 Int) (StartInt_2 Int))
  ((Start String ("a" (str.++ Start_1 Start_2) (str.replace Start Start_2 Start)))
   (StartInt Int (0 1 (str.len Start_12)))
   (StartBool Bool (true false (not StartBool_4) (and StartBool_2 StartBool_4) (str.prefixof Start_2 Start_13) (str.contains Start_8 Start_5) (= StartInt_3 StartInt) (<= StartInt_3 StartInt_4)))
   (Start_16 String (x (str.++ Start_10 Start_12) (str.at Start StartInt_1) (str.from_int StartInt_1)))
   (StartBool_5 Bool (true (not StartBool) (and StartBool_4 StartBool_1) (str.< Start_5 Start_12) (str.prefixof Start_6 Start_15) (str.suffixof Start Start_16) (str.contains Start_13 Start) (= Start_1 Start_16) (= StartInt StartInt_4) (<= StartInt_3 StartInt_5)))
   (Start_13 String ("1" (str.++ Start_2 Start_2) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_11 Start_3 Start_12) (ite StartBool_5 Start Start_14)))
   (StartInt_5 Int (0 (str.len Start_4) (str.indexof Start Start_2 StartInt_1) (str.to_int Start_9)))
   (StartInt_4 Int (1 (str.len Start_2)))
   (Start_12 String ("1" y (str.++ Start_1 Start_10) (str.at Start_7 StartInt) (str.replace Start_12 Start Start) (str.from_int StartInt_2)))
   (StartBool_3 Bool (false (str.< Start_4 Start_5) (str.<= Start_8 Start_2) (str.prefixof Start_11 Start_10) (str.suffixof Start_10 Start_10)))
   (StartBool_4 Bool (true (str.<= Start_1 Start_6) (str.prefixof Start_11 Start_1) (str.suffixof Start_11 Start_3) (str.contains Start_8 Start_11) (= Start_11 Start_8)))
   (Start_8 String ("a" "0" (str.from_int StartInt)))
   (Start_11 String (y (str.from_int StartInt_2)))
   (Start_14 String ("0" (str.at Start_1 StartInt_4) (str.substr Start_4 StartInt_2 StartInt_4) (str.from_int StartInt_2) (ite StartBool_1 Start_12 Start_8)))
   (Start_4 String ("a" x (str.++ Start_3 Start) (ite StartBool_1 Start_1 Start_3)))
   (Start_7 String ("1" (str.substr Start_8 StartInt StartInt) (str.from_int StartInt_3) (ite StartBool_4 Start_7 Start_9)))
   (Start_2 String ("0" x (str.++ Start_1 Start) (str.at Start_3 StartInt_1) (str.replace Start_3 Start_3 Start) (ite StartBool Start_2 Start_4)))
   (Start_6 String (y ""))
   (Start_5 String ("a" "1" (str.at Start_4 StartInt_1) (str.replace Start_1 Start_5 Start_6)))
   (Start_1 String (y (str.at Start_6 StartInt_1) (ite StartBool_2 Start_3 Start_8)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_2 Start_3) (str.<= Start_4 Start_5) (str.prefixof Start_3 Start_5) (str.suffixof Start_1 Start_6) (str.contains Start_3 Start_4) (= StartInt StartInt) (<= StartInt StartInt_1)))
   (Start_9 String ("1" (ite StartBool_3 Start_9 Start_11)))
   (StartInt_1 Int (0 (str.len Start_2) (str.to_int Start)))
   (Start_3 String ("0" (str.++ Start_6 Start_1) (str.substr Start StartInt_1 StartInt) (str.replace Start Start_1 Start_2) (ite StartBool_2 Start_4 Start_6)))
   (Start_15 String ("" "1" y "a" x "0" (str.at Start_12 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_5) (str.from_int StartInt)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool_3 StartBool_2) (str.< Start_7 Start_8) (str.<= Start_6 Start_8) (str.prefixof Start_5 Start_4) (str.suffixof Start_6 Start_8) (= Start_7 Start_2) (= StartInt StartInt_2) (<= StartInt_1 StartInt_3)))
   (Start_10 String ("" (str.++ Start_6 Start_10) (str.from_int StartInt_1)))
   (StartInt_3 Int (1 0 (str.indexof Start_4 Start_2 StartInt_1) (str.to_int Start_5)))
   (StartInt_2 Int (1 (str.len Start_9) (str.indexof Start_4 Start_1 StartInt_3) (str.to_int Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "b" x) "a" "b")))

(check-synth)
