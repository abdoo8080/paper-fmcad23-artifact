(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_10 String) (Start_9 String) (Start_8 String) (Start_11 String) (Start_7 String) (StartInt_6 Int) (Start_2 String) (Start_4 String) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_1 String) (StartInt_1 Int) (StartInt_2 Int) (Start_5 String) (StartBool_2 Bool) (Start_6 String) (Start_3 String) (StartInt_5 Int) (StartBool_3 Bool))
  ((Start String ("" "1" (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt) (ite StartBool Start_3 Start_4)))
   (StartInt Int (0 1 (str.len Start_8) (str.indexof Start_5 Start_3 StartInt_6) (str.to_int Start_5)))
   (StartBool Bool (false true (and StartBool_1 StartBool_3) (str.<= Start_5 Start_3) (str.suffixof Start_2 Start) (str.contains Start_11 Start_10) (= Start_4 Start_1)))
   (Start_12 String (y "0" (str.++ Start_8 Start_3) (str.at Start_2 StartInt_4) (str.replace Start_12 Start_4 Start_5) (str.from_int StartInt_5)))
   (Start_10 String ("1" (str.at Start_7 StartInt_3) (str.replace Start Start Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_9 Start_10)))
   (Start_9 String ("0" "1" (str.at Start_8 StartInt_5) (ite StartBool_3 Start_4 Start_10)))
   (Start_8 String ("b" (str.replace Start_4 Start_1 Start_1) (ite StartBool Start_9 Start_1)))
   (Start_11 String ("a" (str.substr Start_12 StartInt_1 StartInt_3) (str.replace Start_12 Start_6 Start_10) (str.from_int StartInt_1) (ite StartBool Start_4 Start_2)))
   (Start_7 String ("" (str.at Start_4 StartInt_4) (str.replace Start_4 Start_4 Start_2)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.indexof Start_6 Start_5 StartInt_3)))
   (Start_2 String ("1" (str.at Start_4 StartInt_2) (str.replace Start_5 Start_1 Start_7) (str.from_int StartInt_6)))
   (Start_4 String ("1" y (str.at Start_2 StartInt_1) (str.substr Start StartInt StartInt) (str.replace Start_2 Start_4 Start_3) (ite StartBool_1 Start_4 Start_3)))
   (StartInt_4 Int (1 0 (str.to_int Start_4)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_2) (str.< Start_2 Start_3) (str.prefixof Start_1 Start_5) (str.contains Start_6 Start_2) (= StartInt_2 StartInt_3) (<= StartInt_4 StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_5) (str.indexof Start_1 Start_5 StartInt_5) (str.to_int Start_6)))
   (Start_1 String (x "0" "" (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_1)))
   (StartInt_1 Int (1))
   (StartInt_2 Int (0 (str.indexof Start_5 Start_4 StartInt_4)))
   (Start_5 String ("0" y "b" "a" "" x "1" (str.++ Start Start_4) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_2 StartBool_3) (str.prefixof Start_1 Start_1) (str.suffixof Start_3 Start_1) (str.contains Start_3 Start_5) (<= StartInt_3 StartInt_3)))
   (Start_6 String ("a" "" (str.at Start_3 StartInt_4) (str.replace Start_1 Start_3 Start_1)))
   (Start_3 String (x "0" "" (str.substr Start_5 StartInt_5 StartInt_1) (str.replace Start_1 Start_2 Start)))
   (StartInt_5 Int (0 (str.len Start_6) (str.to_int Start_2)))
   (StartBool_3 Bool (true (not StartBool_3) (str.<= Start Start_1) (str.prefixof Start_3 Start_3) (str.suffixof Start_1 Start_3) (= Start_3 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (ite (str.suffixof "1" y) "0" (str.replace x "b" "")) 0)))

(check-synth)
