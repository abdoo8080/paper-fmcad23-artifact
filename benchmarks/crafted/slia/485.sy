(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_5 Int) (Start_12 String) (StartInt_6 Int) (Start_1 String) (Start_9 String) (Start_13 String) (StartInt_4 Int) (Start_6 String) (Start_11 String) (StartBool_1 Bool) (Start_8 String) (StartInt_2 Int) (Start_5 String) (Start_3 String) (Start_2 String) (Start_7 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_4 String) (Start_10 String) (StartInt_1 Int))
  ((Start String (y (str.substr Start_1 StartInt_1 StartInt_2)))
   (StartInt Int (0 (str.to_int Start)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_1 StartBool_2) (str.< Start_4 Start_10) (= Start_11 Start_4) (<= StartInt_2 StartInt)))
   (StartBool_3 Bool (false true (str.< Start_8 Start_10) (str.<= Start_9 Start_12) (str.contains Start_12 Start_3) (= Start_2 Start_9) (= StartInt_4 StartInt) (<= StartInt StartInt_4)))
   (StartInt_5 Int (1 (str.indexof Start_8 Start_10 StartInt_5)))
   (Start_12 String (y x "a" (str.++ Start_13 Start_5)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.indexof Start Start_8 StartInt_3)))
   (Start_1 String (x (str.at Start_7 StartInt_5) (str.replace Start_10 Start_9 Start_10) (ite StartBool_2 Start_7 Start_1)))
   (Start_9 String ("a" "0" "" "1" y "b" x (str.at Start_5 StartInt_4) (ite StartBool_2 Start_2 Start_7)))
   (Start_13 String (y (str.replace Start_12 Start_8 Start_7) (str.from_int StartInt)))
   (StartInt_4 Int (0))
   (Start_6 String ("0" y (str.at Start_8 StartInt_2) (str.replace Start_4 Start_4 Start_6)))
   (Start_11 String ("1" (str.at Start_7 StartInt_2) (str.substr Start_5 StartInt_6 StartInt_6) (str.replace Start_9 Start_6 Start) (ite StartBool_3 Start_4 Start)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (str.< Start_3 Start_2) (str.<= Start_6 Start_7) (str.suffixof Start_3 Start_5) (= Start_7 Start_5)))
   (Start_8 String (y "" "0" "1" (str.++ Start_8 Start_8) (ite StartBool_2 Start_5 Start_5)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_1 StartInt_2)))
   (Start_5 String (x "1" (str.at Start_5 StartInt) (str.from_int StartInt) (ite StartBool Start_3 Start_1)))
   (Start_3 String (y (str.++ Start_7 Start_4) (str.at Start_2 StartInt) (str.substr Start_6 StartInt_1 StartInt_2) (ite StartBool_2 Start_7 Start_3)))
   (Start_2 String ("0" "b" "" x (str.++ Start_3 Start_4) (ite StartBool_1 Start_3 Start_5)))
   (Start_7 String ("" (str.substr Start_8 StartInt_3 StartInt_1) (str.from_int StartInt_1) (ite StartBool Start_6 Start)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.to_int Start_8)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.< Start Start_7) (str.<= Start_3 Start_2) (<= StartInt_2 StartInt_3)))
   (Start_4 String (y (str.at Start_6 StartInt_3) (str.replace Start_8 Start Start_4) (ite StartBool_1 Start_1 Start_2)))
   (Start_10 String ("a" "1" (str.++ Start_8 Start_10) (str.at Start StartInt_6) (str.replace Start_6 Start_2 Start_5) (ite StartBool Start_7 Start_5)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_8 Start_9 StartInt_4) (str.to_int Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr "b" 0 (str.indexof "1" (str.at x 0) 1))))

(check-synth)
