(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_9 String) (StartInt_6 Int) (Start_7 String) (StartInt_4 Int) (Start_4 String) (StartInt_3 Int) (Start_10 String) (Start_11 String) (Start_3 String) (Start_1 String) (Start_5 String) (Start_12 String) (Start_2 String) (Start_6 String) (StartBool_2 Bool) (StartInt_7 Int) (StartInt_1 Int) (StartBool_1 Bool) (Start_14 String) (Start_13 String) (StartBool_3 Bool) (StartInt_8 Int) (Start_15 String) (Start_18 String) (Start_16 String) (StartInt_2 Int) (Start_8 String) (Start_17 String) (StartInt_5 Int))
  ((Start String ("" "0" (str.++ Start_1 Start) (str.substr Start StartInt_1 StartInt_2)))
   (StartInt Int (0 (str.to_int Start_18)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_1 StartBool_3) (str.<= Start_9 Start_15) (str.prefixof Start_18 Start_9) (str.contains Start_14 Start_11) (= Start_12 Start_6) (= StartInt_9 StartInt_3) (<= StartInt_5 StartInt_5)))
   (StartInt_9 Int (0 (str.len Start_11)))
   (Start_9 String ("0" x "1" (str.substr Start_8 StartInt_2 StartInt_3) (str.replace Start_10 Start_3 Start_8)))
   (StartInt_6 Int (1 0 (str.len Start_10) (str.indexof Start_9 Start_12 StartInt_3) (str.to_int Start)))
   (Start_7 String (x (str.at Start_4 StartInt_4) (str.replace Start_5 Start_4 Start_5)))
   (StartInt_4 Int (0 (str.indexof Start_3 Start_2 StartInt_3) (str.to_int Start_2)))
   (Start_4 String (y (str.substr Start_2 StartInt_4 StartInt)))
   (StartInt_3 Int (0 1 (str.len Start_1) (str.indexof Start_5 Start_1 StartInt_3)))
   (Start_10 String (x "1" (str.at Start_5 StartInt) (str.substr Start StartInt_5 StartInt) (str.replace Start_4 Start_5 Start_8) (str.from_int StartInt) (ite StartBool_2 Start Start_4)))
   (Start_11 String (x y "" "b" "0" "a" "1" (str.at Start_11 StartInt_7) (str.replace Start_14 Start_7 Start_13) (ite StartBool_3 Start_1 Start_10)))
   (Start_3 String (y "b" (str.++ Start Start_3) (str.at Start_2 StartInt_4) (str.substr Start_4 StartInt_1 StartInt_3)))
   (Start_1 String ("1" (str.++ Start_5 Start_4) (ite StartBool_1 Start_8 Start_9)))
   (Start_5 String ("a" "b" y (str.at Start_1 StartInt_1) (str.substr Start_4 StartInt StartInt_2) (ite StartBool Start_4 Start_4)))
   (Start_12 String ("0" "b" "a" y (str.at Start_7 StartInt_3) (str.replace Start_5 Start_13 Start_14) (str.from_int StartInt_4)))
   (Start_2 String ("a" "" "1" "b" (str.substr Start StartInt_3 StartInt_2) (str.from_int StartInt_4)))
   (Start_6 String (x "b" (str.++ Start_6 Start_1) (str.at Start_3 StartInt_3) (str.replace Start_1 Start_7 Start_2) (str.from_int StartInt_2)))
   (StartBool_2 Bool (true (str.< Start_4 Start) (str.<= Start_2 Start_3) (str.suffixof Start_4 Start_11) (str.contains Start_7 Start_3) (= StartInt_6 StartInt_4) (<= StartInt_6 StartInt_1)))
   (StartInt_7 Int (1))
   (StartInt_1 Int (1 0 (str.indexof Start_5 Start_6 StartInt_1) (str.to_int Start_6)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.prefixof Start_17 Start_3) (<= StartInt_6 StartInt_8)))
   (Start_14 String (x (str.at Start_7 StartInt_3) (str.substr Start_13 StartInt_6 StartInt_2) (str.from_int StartInt_5)))
   (Start_13 String ("a" "" (str.++ Start_11 Start_12) (str.replace Start_3 Start_11 Start_9) (str.from_int StartInt_1)))
   (StartBool_3 Bool (false (and StartBool_1 StartBool) (str.<= Start_3 Start_7) (str.prefixof Start_7 Start_10) (str.suffixof Start_1 Start_15)))
   (StartInt_8 Int (0 (str.len Start_12) (str.indexof Start_14 Start_17 StartInt_1)))
   (Start_15 String ("1" (str.at Start_1 StartInt) (str.replace Start_4 Start_7 Start_16)))
   (Start_18 String ("b" "" "0" (str.at Start_17 StartInt_4) (str.substr Start_18 StartInt_4 StartInt_7) (str.from_int StartInt_1) (ite StartBool_1 Start_17 Start_15)))
   (Start_16 String ("a" "" "0" (str.substr Start_13 StartInt_1 StartInt_6) (str.replace Start_1 Start_17 Start_16)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_2 Start_1 StartInt_2)))
   (Start_8 String (y (str.++ Start_9 Start_7) (str.replace Start_7 Start_17 Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start Start_5)))
   (Start_17 String ("a" (str.at Start_14 StartInt_4) (str.replace Start_9 Start_1 Start_6) (str.from_int StartInt_4) (ite StartBool_1 Start_9 Start_14)))
   (StartInt_5 Int (0 1 (str.len Start_14) (str.indexof Start_15 Start_8 StartInt_7) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.++ (str.at y 1) "b")))))

(check-synth)
