(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_10 String) (Start_8 String) (Start_11 String) (Start_7 String) (Start_9 String) (Start_5 String) (StartInt_2 Int) (StartInt_7 Int) (StartInt_1 Int) (Start_2 String) (StartBool_3 Bool) (StartBool_2 Bool) (Start_3 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_4 String) (Start_6 String) (StartInt_4 Int) (Start_1 String) (StartInt_6 Int))
  ((Start String ("0" "" (str.at Start StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (1 0 (str.indexof Start Start_1 StartInt_3) (str.to_int Start_4)))
   (StartBool Bool (true (not StartBool) (and StartBool_1 StartBool) (str.< Start_1 Start) (str.<= Start_3 Start_1) (str.prefixof Start_3 Start_1) (str.suffixof Start_3 Start) (str.contains Start_3 Start_3) (<= StartInt_3 StartInt_3)))
   (StartInt_5 Int (1 0 (str.indexof Start_6 Start_5 StartInt_4)))
   (Start_10 String (y (str.at Start_11 StartInt_7) (str.substr Start_11 StartInt_2 StartInt_5)))
   (Start_8 String ("0" "a" (str.++ Start Start_6) (str.at Start_4 StartInt_5) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start_6)))
   (Start_11 String (y (str.++ Start_7 Start_2) (str.substr Start_1 StartInt_2 StartInt_6)))
   (Start_7 String ("0" (str.++ Start Start_2) (str.substr Start_6 StartInt_2 StartInt_5) (str.replace Start_5 Start Start_8)))
   (Start_9 String (y "a" (str.++ Start_4 Start_2) (str.substr Start_3 StartInt StartInt_6) (str.replace Start_1 Start_8 Start_6) (str.from_int StartInt_4) (ite StartBool Start_9 Start_8)))
   (Start_5 String (y (str.++ Start_2 Start_6) (str.at Start_1 StartInt) (str.substr Start_6 StartInt_3 StartInt_5) (str.replace Start_6 Start_1 Start_7) (str.from_int StartInt_3)))
   (StartInt_2 Int (1 (str.indexof Start Start StartInt)))
   (StartInt_7 Int (1 (str.len Start_6)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_2 StartInt_2)))
   (Start_2 String ("b" "0" (str.++ Start_1 Start) (str.at Start_3 StartInt) (str.substr Start_1 StartInt_1 StartInt)))
   (StartBool_3 Bool (true false (str.< Start_8 Start_10) (str.<= Start_5 Start_3) (str.suffixof Start_5 Start_2) (= StartInt_2 StartInt_6) (<= StartInt StartInt_3)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_1) (str.< Start_9 Start_7) (str.prefixof Start_5 Start_3) (= Start_5 Start_1) (= StartInt StartInt_4) (<= StartInt_2 StartInt_1)))
   (Start_3 String ("b" "a" (str.++ Start Start_3) (str.substr Start_2 StartInt_3 StartInt_1) (str.from_int StartInt_1)))
   (StartBool_1 Bool (false (not StartBool_2) (str.< Start_4 Start_5) (str.prefixof Start_6 Start_2) (= Start_2 Start_4) (<= StartInt_4 StartInt_3)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_4 StartInt_4) (str.to_int Start_2)))
   (Start_4 String ("b" y (str.at Start_3 StartInt_4) (ite StartBool Start Start_3)))
   (Start_6 String ("1" (str.replace Start_3 Start_6 Start_2) (str.from_int StartInt_4) (ite StartBool_2 Start_1 Start_6)))
   (StartInt_4 Int (0 1 (str.to_int Start_3)))
   (Start_1 String ("1" x "" (str.replace Start Start_2 Start_2) (str.from_int StartInt) (ite StartBool Start_1 Start_2)))
   (StartInt_6 Int (1 (str.to_int Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "1" y) y "b")))

(check-synth)
