(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_9 Int) (StartInt_8 Int) (Start_1 String) (Start_10 String) (StartInt_7 Int) (Start_9 String) (Start_5 String) (StartBool_2 Bool) (Start_12 String) (StartInt_4 Int) (Start_11 String) (StartInt_3 Int) (Start_13 String) (Start_3 String) (Start_6 String) (Start_2 String) (StartInt_2 Int) (StartInt_5 Int) (StartInt_1 Int) (Start_8 String) (StartBool_1 Bool) (Start_4 String) (Start_7 String) (StartInt_6 Int))
  ((Start String ("b" y (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (StartInt Int (1 0 (str.len Start_13) (str.indexof Start_5 Start_2 StartInt_5) (str.to_int Start_11)))
   (StartBool Bool (false (not StartBool_3) (str.< Start_12 Start_5) (str.<= Start_3 Start_13) (str.prefixof Start_8 Start_2) (= StartInt_6 StartInt_9)))
   (StartBool_3 Bool (true (not StartBool) (str.< Start_13 Start_8) (str.<= Start_13 Start_6) (str.contains Start_11 Start_2) (= Start_10 Start_6) (= StartInt_6 StartInt_6)))
   (StartInt_9 Int (0 (str.indexof Start_13 Start_9 StartInt_4)))
   (StartInt_8 Int (1))
   (Start_1 String (y "1" (str.substr Start_10 StartInt_2 StartInt_4) (str.replace Start_8 Start_5 Start_7) (str.from_int StartInt_7)))
   (Start_10 String ("a" x (str.++ Start_8 Start_1) (str.at Start_8 StartInt_7) (str.replace Start_11 Start_12 Start_10) (ite StartBool_1 Start Start_7)))
   (StartInt_7 Int (1 0 (str.len Start_5) (str.to_int Start_2)))
   (Start_9 String ("1" (str.at Start_3 StartInt) (str.substr Start_9 StartInt_6 StartInt_4) (str.from_int StartInt_6) (ite StartBool_2 Start_5 Start_1)))
   (Start_5 String (y (ite StartBool_1 Start_1 Start_1)))
   (StartBool_2 Bool (true false (str.< Start Start_6) (str.prefixof Start_7 Start_5) (str.contains Start_2 Start) (= Start_6 Start_6) (<= StartInt StartInt_2)))
   (Start_12 String (x (str.++ Start_2 Start_2)))
   (StartInt_4 Int (1 (str.to_int Start_6)))
   (Start_11 String ("b" x "" (str.substr Start_1 StartInt_8 StartInt_6) (str.from_int StartInt_1) (ite StartBool_2 Start_8 Start_7)))
   (StartInt_3 Int (1 0 (str.len Start_3)))
   (Start_13 String (y "" "a" (str.at Start StartInt_8) (str.replace Start_9 Start_7 Start_5) (str.from_int StartInt_5)))
   (Start_3 String ("1" (str.at Start_4 StartInt) (str.substr Start StartInt_2 StartInt) (str.replace Start Start_5 Start)))
   (Start_6 String ("a" "1" (str.++ Start_4 Start_5) (str.at Start_5 StartInt_3) (ite StartBool Start Start_5)))
   (Start_2 String (y (str.substr Start_2 StartInt_7 StartInt_3) (str.replace Start_7 Start_8 Start_9) (str.from_int StartInt) (ite StartBool_2 Start Start_5)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_1 Start_3 StartInt_5)))
   (StartInt_5 Int (1 (str.indexof Start Start_3 StartInt_1)))
   (StartInt_1 Int (1 (str.len Start_5)))
   (Start_8 String ("a" (str.++ Start_4 Start_4) (str.substr Start_4 StartInt_5 StartInt_5) (str.replace Start_2 Start_1 Start_9)))
   (StartBool_1 Bool (false (not StartBool_1) (str.<= Start_2 Start_6) (= Start_6 Start_5) (= StartInt_3 StartInt_4) (<= StartInt_4 StartInt_1)))
   (Start_4 String (x (str.++ Start_6 Start_7) (str.substr Start_4 StartInt_3 StartInt_1) (str.from_int StartInt_4) (ite StartBool_2 Start_6 Start)))
   (Start_7 String ("1" "a" (str.from_int StartInt_6)))
   (StartInt_6 Int (1 0 (str.len Start_3) (str.indexof Start_7 Start_3 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.at x 1) 0 (str.len y))))

(check-synth)
