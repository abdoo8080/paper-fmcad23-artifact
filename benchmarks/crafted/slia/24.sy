(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_8 String) (StartBool_2 Bool) (Start_7 String) (Start_3 String) (Start_5 String) (Start_11 String) (StartInt_5 Int) (Start_2 String) (StartInt_3 Int) (StartInt_2 Int) (StartInt_4 Int) (Start_14 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_6 String) (Start_10 String) (Start_9 String) (StartInt_6 Int) (Start_16 String) (Start_12 String) (StartBool_5 Bool) (Start_4 String) (StartInt_1 Int) (StartInt_7 Int) (Start_1 String) (Start_13 String) (StartBool_1 Bool))
  ((Start String (y x (str.++ Start Start_1) (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt StartInt_1) (ite StartBool_1 Start_3 Start)))
   (StartInt Int (0))
   (StartBool Bool (true false (not StartBool_5) (str.<= Start_9 Start_9) (str.prefixof Start_15 Start_14) (str.suffixof Start_16 Start_5) (str.contains Start_3 Start_7) (= Start_15 Start_10)))
   (Start_15 String (x (str.++ Start_15 Start_15) (str.at Start_7 StartInt_7) (str.substr Start_11 StartInt_4 StartInt_2)))
   (Start_8 String ("0" y x "" "b" "a" (str.substr Start_9 StartInt_2 StartInt_1) (str.replace Start_3 Start_8 Start_10)))
   (StartBool_2 Bool (false true (and StartBool StartBool_3) (str.< Start_2 Start_1) (str.<= Start_7 Start_6) (str.prefixof Start Start_5) (str.contains Start_6 Start_8) (<= StartInt_4 StartInt_5)))
   (Start_7 String ("b" (str.++ Start_1 Start_5) (str.substr Start_1 StartInt_5 StartInt_1) (ite StartBool_2 Start_6 Start_7)))
   (Start_3 String (x y "b" (str.at Start_2 StartInt_2)))
   (Start_5 String ("b" "1" x "a" (str.++ Start_2 Start_5) (str.substr Start StartInt StartInt_5) (ite StartBool_1 Start_6 Start)))
   (Start_11 String ("a" y "0" "b" (str.++ Start_12 Start_11) (str.at Start_2 StartInt_6) (str.from_int StartInt_6)))
   (StartInt_5 Int (1 (str.indexof Start_7 Start_1 StartInt_5) (str.to_int Start_4)))
   (Start_2 String (x (str.at Start_3 StartInt)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_3 StartInt_4)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start_1)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.indexof Start_1 Start_4 StartInt_1)))
   (Start_14 String ("a" y "" (str.++ Start_1 Start_1) (str.at Start_12 StartInt_3) (ite StartBool_2 Start_1 Start)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_4 StartBool_3) (str.prefixof Start_7 Start) (str.contains Start_6 Start_1) (<= StartInt_4 StartInt_2)))
   (StartBool_4 Bool (false (not StartBool_2) (and StartBool_5 StartBool_1) (str.< Start_4 Start_11) (str.<= Start_11 Start_1) (= StartInt StartInt_3) (<= StartInt_5 StartInt_6)))
   (Start_6 String (x (str.substr Start_6 StartInt StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start Start_3)))
   (Start_10 String (y "b" (str.at Start_7 StartInt) (str.substr Start_5 StartInt_4 StartInt) (str.replace Start_8 Start_1 Start_1)))
   (Start_9 String ("0" (str.++ Start_8 Start_2) (str.substr Start_6 StartInt_4 StartInt_3) (str.replace Start_6 Start_6 Start_9) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_5)))
   (StartInt_6 Int (0 1 (str.indexof Start_7 Start_1 StartInt_1)))
   (Start_16 String ("0" "a" (str.++ Start_6 Start_7)))
   (Start_12 String ("a" "1" "b" x (str.++ Start_1 Start_3) (str.at Start_2 StartInt) (str.from_int StartInt_4) (ite StartBool_2 Start_2 Start)))
   (StartBool_5 Bool (false (not StartBool) (str.<= Start_13 Start_7) (str.prefixof Start_11 Start_3) (str.suffixof Start Start_3) (str.contains Start Start_12) (= StartInt_7 StartInt_6) (<= StartInt_3 StartInt_6)))
   (Start_4 String ("" (str.++ Start_5 Start_3) (str.at Start_3 StartInt_2) (str.replace Start_2 Start_4 Start) (str.from_int StartInt_3)))
   (StartInt_1 Int (1 (str.indexof Start_5 Start_13 StartInt_3) (str.to_int Start_5)))
   (StartInt_7 Int (0 1 (str.indexof Start_3 Start_6 StartInt_4)))
   (Start_1 String ("b" (str.++ Start_10 Start_14) (str.substr Start StartInt_5 StartInt_5) (str.replace Start_6 Start_2 Start_13) (str.from_int StartInt)))
   (Start_13 String ("a" (str.at Start_8 StartInt_5)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool StartBool) (str.<= Start_3 Start_1) (str.prefixof Start_3 Start_1) (str.suffixof Start_4 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" x (str.substr y 0 1))))

(check-synth)
