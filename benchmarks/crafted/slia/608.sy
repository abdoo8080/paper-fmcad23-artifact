(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_1 String) (StartInt_3 Int) (Start_4 String) (Start_6 String) (StartBool_2 Bool) (Start_8 String) (Start_9 String) (Start_10 String) (StartInt_8 Int) (StartInt_1 Int) (StartInt_7 Int) (StartBool_1 Bool) (Start_2 String) (StartInt_4 Int) (StartInt_9 Int) (StartInt_5 Int) (StartInt_2 Int) (Start_5 String) (Start_7 String) (Start_3 String) (StartInt_6 Int))
  ((Start String ("0" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_1 StartInt_2) (str.to_int Start)))
   (StartBool Bool (false (not StartBool)))
   (StartBool_3 Bool (false (str.< Start Start_6) (= Start_8 Start_2)))
   (Start_1 String ("b" "" (str.++ Start Start) (str.at Start_3 StartInt_9) (str.from_int StartInt_6) (ite StartBool_3 Start_10 Start_8)))
   (StartInt_3 Int (0 (str.indexof Start_3 Start_1 StartInt_3)))
   (Start_4 String (x (str.at Start_7 StartInt_1) (str.replace Start_5 Start_4 Start_4) (str.from_int StartInt_8) (ite StartBool_2 Start_8 Start_8)))
   (Start_6 String ("a" "1" (str.++ Start_2 Start_9) (str.replace Start_2 Start_6 Start_3) (str.from_int StartInt_8)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool StartBool_2) (str.< Start_3 Start_9) (str.suffixof Start_4 Start_10) (str.contains Start_1 Start_9) (= StartInt_4 StartInt_4) (<= StartInt_6 StartInt_2)))
   (Start_8 String ("1" "0" (str.substr Start_6 StartInt_5 StartInt_6)))
   (Start_9 String ("b" "a" (str.replace Start_9 Start_4 Start) (str.from_int StartInt_2)))
   (Start_10 String ("b" (str.++ Start_9 Start) (str.replace Start_8 Start_2 Start_9)))
   (StartInt_8 Int (0 1 (str.indexof Start_9 Start_10 StartInt) (str.to_int Start_9)))
   (StartInt_1 Int (1 0 (str.to_int Start)))
   (StartInt_7 Int (1 (str.indexof Start Start_7 StartInt_8)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool StartBool_1) (str.< Start_1 Start_1) (str.prefixof Start_2 Start) (str.suffixof Start_1 Start) (str.contains Start_3 Start_3) (= Start_4 Start) (= StartInt_4 StartInt_4)))
   (Start_2 String ("" "b" (str.++ Start_3 Start_1) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_3)))
   (StartInt_4 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_5 StartInt_5)))
   (StartInt_9 Int (0 1 (str.indexof Start_8 Start_10 StartInt_7) (str.to_int Start_2)))
   (StartInt_5 Int (0 (str.len Start_1) (str.to_int Start)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.to_int Start)))
   (Start_5 String (y "a" x (str.++ Start_6 Start_5) (str.at Start_7 StartInt)))
   (Start_7 String ("a" (str.++ Start_7 Start_7) (str.at Start_8 StartInt_1) (str.substr Start_2 StartInt_6 StartInt_2) (str.replace Start_7 Start_8 Start_3)))
   (Start_3 String ("1" (str.++ Start_3 Start_2) (str.at Start_1 StartInt_1) (str.substr Start_5 StartInt_9 StartInt_5) (str.from_int StartInt_5) (ite StartBool Start_1 Start_3)))
   (StartInt_6 Int (1 (str.indexof Start_7 Start_5 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.replace y "0" x))))

(check-synth)
