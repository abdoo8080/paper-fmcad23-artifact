(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_2 String) (StartInt_9 Int) (Start_14 String) (Start_6 String) (StartInt_3 Int) (StartInt_2 Int) (Start_3 String) (Start_4 String) (StartInt_7 Int) (StartInt_4 Int) (StartInt_1 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_13 String) (Start_8 String) (StartBool_4 Bool) (Start_15 String) (StartInt_6 Int) (StartInt_5 Int) (Start_10 String) (Start_9 String) (Start_7 String) (StartBool_7 Bool) (StartBool_5 Bool) (Start_11 String) (StartBool_2 Bool) (Start_5 String) (Start_12 String) (StartBool_6 Bool) (StartInt_8 Int))
  ((Start String ("b" "0" x (str.from_int StartInt_1)))
   (StartInt Int (0))
   (StartBool Bool (false true (str.< Start_1 Start_2) (str.<= Start_3 Start) (str.suffixof Start_3 Start_2) (= Start_3 Start_4) (= StartInt_2 StartInt_2)))
   (Start_1 String ("1" "0" "" (str.from_int StartInt_2)))
   (Start_2 String ("a" y (str.++ Start_5 Start_6) (str.at Start_5 StartInt_3)))
   (StartInt_9 Int (1 (str.len Start_1) (str.indexof Start_13 Start_13 StartInt_6)))
   (Start_14 String ("" "b" "a" x y "0" (str.++ Start_1 Start_4) (str.at Start_14 StartInt_8) (str.substr Start_12 StartInt_7 StartInt_9) (str.replace Start_15 Start_2 Start_14) (ite StartBool_2 Start Start_10)))
   (Start_6 String ("0" x "a" y (str.substr Start StartInt_2 StartInt_3) (str.from_int StartInt_5) (ite StartBool_3 Start_5 Start_4)))
   (StartInt_3 Int (0 1 (str.len Start_2)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.to_int Start_4)))
   (Start_3 String ("" (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_1 Start_1 Start_3) (ite StartBool_1 Start_5 Start_1)))
   (Start_4 String ("1" (str.at Start_2 StartInt) (str.from_int StartInt)))
   (StartInt_7 Int (0 1 (str.indexof Start_10 Start StartInt_4)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start_7 Start_2 StartInt_3)))
   (StartInt_1 Int (0 1 (str.indexof Start Start StartInt_1)))
   (StartBool_3 Bool (false (not StartBool_3) (str.< Start_6 Start_8) (str.contains Start_4 Start_8) (= Start_5 Start_2) (= StartInt_1 StartInt_3) (<= StartInt_3 StartInt_5)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start_6 Start_3) (str.<= Start_2 Start_6) (= Start_7 Start_4) (<= StartInt_4 StartInt_2)))
   (Start_13 String ("a" "" "1" "b" (str.++ Start_13 Start_10) (str.substr Start_4 StartInt StartInt_2) (str.replace Start_1 Start Start_7) (str.from_int StartInt_5) (ite StartBool_6 Start_7 Start_11)))
   (Start_8 String ("a" "" "1" "b" (str.++ Start_2 Start_7) (str.at Start_1 StartInt_5) (ite StartBool_4 Start_8 Start_7)))
   (StartBool_4 Bool (false true (and StartBool StartBool_5) (str.< Start_3 Start_9) (str.<= Start_9 Start_3) (str.prefixof Start_5 Start_9) (str.suffixof Start_3 Start_10) (str.contains Start_9 Start_3) (<= StartInt_6 StartInt_4)))
   (Start_15 String ("b" (str.substr Start_3 StartInt_3 StartInt_5) (str.from_int StartInt_7) (ite StartBool Start_9 Start)))
   (StartInt_6 Int (1 (str.len Start_11) (str.to_int Start_8)))
   (StartInt_5 Int (1))
   (Start_10 String ("a" "b" (str.++ Start_6 Start) (str.from_int StartInt_4)))
   (Start_9 String ("1" "" "b" y "a" (str.++ Start_9 Start_1) (str.at Start_4 StartInt_6) (str.from_int StartInt_1)))
   (Start_7 String ("0" y "1" (ite StartBool Start_2 Start_7)))
   (StartBool_7 Bool (true false (not StartBool_5) (str.< Start_5 Start_13) (str.<= Start_6 Start_14) (str.suffixof Start_7 Start_13) (<= StartInt_2 StartInt_5)))
   (StartBool_5 Bool (true (not StartBool_5) (and StartBool_3 StartBool) (str.<= Start Start_1) (str.prefixof Start_7 Start_1) (= Start_7 Start_8)))
   (Start_11 String ("0" y "1" "a" x "b" "" (str.++ Start_10 Start_6) (str.from_int StartInt_7) (ite StartBool_1 Start_11 Start_11)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_3 StartBool_4) (str.< Start_9 Start_12) (str.suffixof Start_7 Start_11) (= Start_11 Start_11) (= StartInt_7 StartInt_5) (<= StartInt_2 StartInt_3)))
   (Start_5 String ("b" (str.at Start StartInt) (str.substr Start_2 StartInt_3 StartInt_3)))
   (Start_12 String ("1" (str.++ Start_8 Start_2) (str.substr Start_9 StartInt_3 StartInt_2) (str.replace Start_7 Start_8 Start_1) (ite StartBool_3 Start_13 Start_1)))
   (StartBool_6 Bool (false true (and StartBool_7 StartBool_2) (str.< Start_7 Start_5) (str.suffixof Start_9 Start) (str.contains Start_8 Start_8) (= Start_12 Start_7) (<= StartInt_2 StartInt_8)))
   (StartInt_8 Int (1 0 (str.len Start_6) (str.to_int Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" x y)))

(check-synth)
