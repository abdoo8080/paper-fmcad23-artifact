(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (Start_10 String) (Start_9 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_3 String) (Start_4 String) (Start_8 String) (Start_1 String) (Start_5 String) (StartBool_3 Bool) (StartInt_3 Int) (Start_6 String) (Start_2 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_7 String) (StartInt_2 Int))
  ((Start String ("1" (str.++ Start Start_1) (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 0 (str.len Start_7) (str.indexof Start_4 Start_5 StartInt_3) (str.to_int Start_4)))
   (StartBool Bool (true false (str.<= Start_3 Start_6) (str.contains Start_1 Start_7) (= Start_1 Start_5) (= StartInt_4 StartInt_4)))
   (StartInt_5 Int (1))
   (Start_10 String ("0" "a" "" x y "1" (str.at Start_1 StartInt) (str.substr Start_3 StartInt_3 StartInt_5) (str.replace Start_1 Start_1 Start_10)))
   (Start_9 String (x "a" "0" (str.++ Start_9 Start_10) (ite StartBool_1 Start_8 Start_6)))
   (StartInt_4 Int (0 1 (str.indexof Start_9 Start_3 StartInt)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_2) (str.< Start_2 Start) (str.<= Start_2 Start_2) (str.contains Start_1 Start) (= Start_3 Start)))
   (Start_3 String (x y (str.++ Start_2 Start_2)))
   (Start_4 String ("b" "0" "" (str.replace Start_6 Start_4 Start_3) (ite StartBool_2 Start_4 Start_6)))
   (Start_8 String ("" (str.++ Start Start_5) (str.at Start_8 StartInt_3) (str.substr Start_7 StartInt_1 StartInt_1) (str.replace Start_5 Start_1 Start_7) (ite StartBool_3 Start Start_1)))
   (Start_1 String (y "" "b" "1" "a" (str.++ Start_1 Start_8)))
   (Start_5 String (x (str.at Start_2 StartInt_1) (str.from_int StartInt_1)))
   (StartBool_3 Bool (false (not StartBool_1) (str.< Start_1 Start_4) (str.<= Start_5 Start_1) (str.suffixof Start_4 Start) (= Start_2 Start_6) (= StartInt_2 StartInt) (<= StartInt_1 StartInt_2)))
   (StartInt_3 Int (1 0 (str.len Start_5) (str.indexof Start_5 Start_1 StartInt_3)))
   (Start_6 String (y (str.++ Start Start_4) (str.at Start_5 StartInt)))
   (Start_2 String ("" (str.at Start_4 StartInt_1) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_2 Start_5 Start_2)))
   (StartInt_1 Int (0 (str.len Start_7) (str.indexof Start_8 Start_1 StartInt_2)))
   (StartBool_2 Bool (false (str.< Start_2 Start_5) (str.prefixof Start Start_5) (str.contains Start_5 Start_7) (= Start Start_1)))
   (Start_7 String ("b" (str.replace Start_6 Start_6 Start_1)))
   (StartInt_2 Int (0 (str.len Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof (str.at x 0) "" 1))))

(check-synth)
