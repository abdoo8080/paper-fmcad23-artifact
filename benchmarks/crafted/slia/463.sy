(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_8 String) (StartInt_7 Int) (Start_7 String) (Start_6 String) (Start_2 String) (Start_3 String) (Start_1 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_3 Int) (StartBool_1 Bool) (Start_4 String) (StartInt_5 Int) (StartBool_3 Bool) (StartInt_2 Int) (Start_5 String) (StartInt_6 Int))
  ((Start String ("0" "b" (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1 (str.len Start_1) (str.indexof Start_1 Start_7 StartInt_4)))
   (StartBool Bool (false (str.<= Start_2 Start_1) (str.prefixof Start_7 Start_2) (str.suffixof Start_8 Start_3) (= Start_3 Start_6)))
   (StartInt_1 Int (1 0))
   (Start_8 String ("0" (str.at Start StartInt_2) (str.replace Start_2 Start_6 Start_3)))
   (StartInt_7 Int (0 (str.indexof Start Start_4 StartInt_6)))
   (Start_7 String ("a" "" (str.++ Start_8 Start) (str.at Start_3 StartInt_7)))
   (Start_6 String (x "a" "0" (str.++ Start_4 Start_7) (str.at Start_3 StartInt_3) (str.from_int StartInt_6)))
   (Start_2 String ("b" (str.++ Start_2 Start_1) (str.substr Start_3 StartInt StartInt)))
   (Start_3 String ("a" (str.at Start_3 StartInt_3) (str.substr Start_3 StartInt_2 StartInt_4)))
   (Start_1 String (y "" "b" (str.++ Start_2 Start_1) (str.from_int StartInt_1) (ite StartBool Start_1 Start_1)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_1) (str.<= Start_4 Start_1) (str.suffixof Start_2 Start_4) (<= StartInt_2 StartInt_3)))
   (StartInt_4 Int (1))
   (StartInt_3 Int (1 (str.to_int Start_3)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_1) (str.prefixof Start_2 Start_2) (str.suffixof Start_2 Start_1) (= StartInt_1 StartInt_2)))
   (Start_4 String ("1" (str.at Start_2 StartInt_1) (str.substr Start StartInt_1 StartInt) (str.replace Start_1 Start Start_4) (ite StartBool_1 Start Start_4)))
   (StartInt_5 Int (0 (str.len Start_2) (str.indexof Start Start_3 StartInt_3) (str.to_int Start_1)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_2 StartBool_1) (str.suffixof Start_4 Start_3) (= Start_1 Start_5) (<= StartInt_4 StartInt_3)))
   (StartInt_2 Int (1 0 (str.indexof Start_7 Start_7 StartInt_1) (str.to_int Start_8)))
   (Start_5 String ("" y (str.at Start_6 StartInt_5) (str.substr Start_6 StartInt_1 StartInt_6) (str.replace Start_3 Start_3 Start_2) (ite StartBool_2 Start Start_4)))
   (StartInt_6 Int (0 (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "1" y) x (str.substr y 0 1))))

(check-synth)
