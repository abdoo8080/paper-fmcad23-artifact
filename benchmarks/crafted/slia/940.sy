(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (Start_4 String) (StartInt_3 Int) (Start_3 String) (Start_7 String) (Start_2 String) (Start_1 String) (Start_6 String) (StartInt_2 Int) (StartInt_1 Int))
  ((Start String ("1" "b" "0" "" (str.substr Start_1 StartInt StartInt_1) (str.replace Start Start_1 Start) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.len Start_3) (str.indexof Start_2 Start_3 StartInt_1)))
   (StartBool Bool (false (str.<= Start Start_3) (str.suffixof Start_1 Start_1) (str.contains Start_1 Start_2) (= Start_3 Start) (= StartInt StartInt_2) (<= StartInt_2 StartInt_3)))
   (Start_5 String (x (str.++ Start_4 Start_6) (str.substr Start_5 StartInt_3 StartInt_2) (ite StartBool Start_3 Start_6)))
   (Start_4 String ("" y "a" "1" "b" x (str.substr Start_1 StartInt_3 StartInt) (str.from_int StartInt)))
   (StartInt_3 Int (0 1 (str.len Start_4)))
   (Start_3 String ("0" (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt StartInt) (str.replace Start_3 Start_3 Start_1) (str.from_int StartInt_1) (ite StartBool Start_2 Start_3)))
   (Start_7 String ("b" y "0" (str.at Start_6 StartInt_1) (str.replace Start_6 Start Start_5)))
   (Start_2 String ("1" "b" (str.++ Start Start_2) (str.at Start_1 StartInt) (str.replace Start Start_2 Start_2)))
   (Start_1 String ("0" "" "1" (str.at Start_2 StartInt_1) (str.replace Start_2 Start_1 Start_2)))
   (Start_6 String (y "1" "a" (str.++ Start_1 Start_2) (str.replace Start_7 Start_7 Start_2)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_5 StartInt_1)))
   (StartInt_1 Int (0 (str.len Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ y (str.at x 1))))

(check-synth)
