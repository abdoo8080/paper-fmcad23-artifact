(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartInt_6 Int) (Start_8 String) (Start_7 String) (Start_11 String) (StartInt_1 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_9 String) (Start_6 String) (StartInt_5 Int) (StartBool_3 Bool) (StartInt_7 Int) (Start_3 String) (Start_1 String) (StartInt_3 Int) (Start_12 String) (Start_5 String) (Start_4 String) (StartInt_2 Int) (Start_10 String) (Start_2 String) (StartInt_4 Int))
  ((Start String ("b" (str.++ Start_1 Start) (str.replace Start Start Start) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.indexof Start Start_11 StartInt_1) (str.to_int Start_2)))
   (StartBool Bool (true (not StartBool_3) (str.< Start_3 Start_2) (str.<= Start_1 Start_3) (str.suffixof Start_2 Start_12)))
   (Start_13 String ("b" "" "1" (str.++ Start Start_9) (str.at Start_1 StartInt_1) (str.replace Start_6 Start_7 Start_10)))
   (StartInt_6 Int (1 (str.indexof Start_10 Start_2 StartInt_2)))
   (Start_8 String (x (str.substr Start_5 StartInt_3 StartInt_3) (str.from_int StartInt_1)))
   (Start_7 String ("1" (str.replace Start_5 Start_8 Start_9) (ite StartBool_2 Start_9 Start_5)))
   (Start_11 String (y (str.++ Start_7 Start_4) (str.replace Start_6 Start_8 Start_6) (str.from_int StartInt_2) (ite StartBool_2 Start_4 Start_5)))
   (StartInt_1 Int (0 1 (str.to_int Start_2)))
   (StartBool_2 Bool (true false (and StartBool_1 StartBool_2) (str.suffixof Start_3 Start_2) (= Start Start) (= StartInt_3 StartInt_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (= StartInt StartInt_3) (<= StartInt StartInt_3)))
   (Start_9 String ("b" "a" (str.++ Start_2 Start_3) (str.substr Start StartInt StartInt_4) (str.replace Start_9 Start_2 Start_2) (str.from_int StartInt_5)))
   (Start_6 String (y (str.at Start_3 StartInt) (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_3)))
   (StartInt_5 Int (1 0 (str.indexof Start_1 Start_7 StartInt_5) (str.to_int Start_1)))
   (StartBool_3 Bool (true false (and StartBool_1 StartBool) (str.suffixof Start Start)))
   (StartInt_7 Int (1 0 (str.len Start_13) (str.to_int Start_2)))
   (Start_3 String ("a" (str.substr Start_7 StartInt_4 StartInt_4) (str.replace Start_5 Start_6 Start_3)))
   (Start_1 String ("b" (str.++ Start_8 Start_6) (str.at Start_4 StartInt_4) (str.substr Start_8 StartInt_6 StartInt_6) (ite StartBool_3 Start Start_10)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.to_int Start_4)))
   (Start_12 String ("1" (str.++ Start_2 Start_10) (str.replace Start_5 Start_6 Start_2) (str.from_int StartInt_7)))
   (Start_5 String ("0" (str.++ Start_4 Start_6) (str.at Start_2 StartInt_2) (str.replace Start_6 Start Start_1) (ite StartBool Start_2 Start_3)))
   (Start_4 String ("1" (str.at Start_3 StartInt_1) (str.from_int StartInt) (ite StartBool_3 Start_5 Start_5)))
   (StartInt_2 Int (1 0 (str.indexof Start Start_3 StartInt_3) (str.to_int Start_6)))
   (Start_10 String ("" (str.++ Start Start_11) (str.substr Start_1 StartInt_2 StartInt_5) (str.replace Start_11 Start_11 Start_2) (ite StartBool_3 Start_4 Start_6)))
   (Start_2 String ("0" "b" (str.at Start_3 StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_4 Int (0 1 (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.++ "b" x) "a")))

(check-synth)
