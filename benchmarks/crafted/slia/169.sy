(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_10 String) (Start_9 String) (Start_1 String) (Start_2 String) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_3 Int) (Start_7 String) (Start_5 String) (StartInt_5 Int) (Start_6 String) (StartInt_7 Int) (StartInt_8 Int) (StartInt_4 Int) (StartInt_6 Int) (Start_8 String) (Start_3 String) (StartInt_2 Int) (Start_4 String))
  ((Start String ("a" (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_1) (str.indexof Start_5 Start_4 StartInt_3) (str.to_int Start_10)))
   (StartBool Bool (false true (not StartBool_2) (str.<= Start_8 Start_3) (<= StartInt_8 StartInt_7)))
   (StartInt_1 Int (1 (str.len Start_10) (str.to_int Start_10)))
   (Start_10 String (x "1" "" "a" "b" "0" (str.++ Start Start_3) (str.substr Start StartInt_7 StartInt) (str.replace Start_2 Start_10 Start_3)))
   (Start_9 String ("1" (ite StartBool_1 Start_3 Start_10)))
   (Start_1 String ("0" (str.++ Start_3 Start_8)))
   (Start_2 String ("1" (str.++ Start_8 Start_7) (str.at Start_4 StartInt_7) (str.replace Start_4 Start_4 Start_6) (ite StartBool Start_9 Start_8)))
   (StartBool_2 Bool (true (not StartBool_2) (str.<= Start_7 Start_8) (str.contains Start_6 Start_7) (= Start_6 Start_5) (= StartInt StartInt_7) (<= StartInt_6 StartInt_8)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_2) (str.< Start_1 Start_2) (str.<= Start_3 Start) (str.contains Start_1 Start_4) (= Start_2 Start_3) (= StartInt StartInt_2) (<= StartInt_3 StartInt_1)))
   (StartInt_3 Int (1 0 (str.len Start_5)))
   (Start_7 String ("a" (str.at Start_4 StartInt_6) (str.substr Start StartInt_1 StartInt_1) (str.from_int StartInt_7) (ite StartBool Start Start_4)))
   (Start_5 String ("0" (str.++ Start_6 Start_7) (str.substr Start_3 StartInt_4 StartInt_5) (str.from_int StartInt_4) (ite StartBool_2 Start_2 Start_2)))
   (StartInt_5 Int (1 (str.to_int Start_2)))
   (Start_6 String ("0" "" "a" y "b" (str.at Start_3 StartInt_2) (ite StartBool Start_4 Start_3)))
   (StartInt_7 Int (1 0))
   (StartInt_8 Int (0 1 (str.indexof Start_8 Start_4 StartInt_3)))
   (StartInt_4 Int (0 (str.len Start) (str.to_int Start_6)))
   (StartInt_6 Int (1 (str.indexof Start_3 Start_1 StartInt_7)))
   (Start_8 String ("0" (str.++ Start_7 Start_6) (str.at Start_1 StartInt_5)))
   (Start_3 String ("b" x "" "1" (str.at Start_1 StartInt_4) (str.substr Start_7 StartInt_8 StartInt)))
   (StartInt_2 Int (1 0 (str.indexof Start Start StartInt_7) (str.to_int Start_2)))
   (Start_4 String ("b" y "" (str.++ Start_6 Start_2) (ite StartBool_1 Start_2 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.from_int (str.to_int (str.from_int (str.to_int y)))) "a")))

(check-synth)
