(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_1 String) (Start_8 String) (StartInt_4 Int) (Start_10 String) (StartInt_5 Int) (StartInt_6 Int) (Start_4 String) (StartInt_1 Int) (Start_3 String) (Start_12 String) (StartInt_2 Int) (Start_2 String) (Start_9 String) (StartInt_3 Int) (Start_7 String) (StartInt_7 Int) (Start_6 String) (Start_5 String) (StartBool_1 Bool) (Start_11 String))
  ((Start String ("b" (str.++ Start_1 Start_2) (str.replace Start Start_3 Start_4)))
   (StartInt Int (0 1 (str.len Start_8) (str.to_int Start_4)))
   (StartBool Bool (false true (str.prefixof Start_2 Start) (str.contains Start_7 Start_4) (= Start_7 Start_6) (= StartInt_3 StartInt_1) (<= StartInt_8 StartInt_2)))
   (StartInt_8 Int (1 (str.len Start_2) (str.indexof Start_5 Start_6 StartInt_1) (str.to_int Start_4)))
   (Start_1 String ("a" y (str.substr Start_1 StartInt StartInt_2) (str.replace Start_3 Start_9 Start_6) (str.from_int StartInt_6) (ite StartBool_1 Start_12 Start_10)))
   (Start_8 String (x (str.substr Start_7 StartInt_7 StartInt_3) (str.replace Start_9 Start_11 Start_7) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_6)))
   (StartInt_4 Int (0 (str.to_int Start)))
   (Start_10 String ("a" "" "0" "b" (str.substr Start_2 StartInt_6 StartInt_7) (str.replace Start_9 Start_11 Start_1)))
   (StartInt_5 Int (0 (str.to_int Start_12)))
   (StartInt_6 Int (1 0))
   (Start_4 String (y (str.at Start StartInt) (str.substr Start_2 StartInt_1 StartInt)))
   (StartInt_1 Int (1 (str.len Start_3) (str.indexof Start_4 Start StartInt_1) (str.to_int Start_2)))
   (Start_3 String ("b" (ite StartBool Start_5 Start_3)))
   (Start_12 String ("0" (str.at Start_7 StartInt_4) (str.replace Start_6 Start_10 Start_1) (str.from_int StartInt_5) (ite StartBool Start_8 Start)))
   (StartInt_2 Int (1 0))
   (Start_2 String (y "0" "b" (str.++ Start_3 Start_1) (str.at Start_6 StartInt) (str.substr Start_4 StartInt_2 StartInt_3)))
   (Start_9 String ("b" (str.++ Start_2 Start_4) (str.at Start_2 StartInt_5) (str.substr Start_10 StartInt_5 StartInt_1) (str.replace Start_1 Start_4 Start_5) (str.from_int StartInt) (ite StartBool Start_11 Start_8)))
   (StartInt_3 Int (0 1 (str.len Start_4) (str.indexof Start_3 Start_7 StartInt) (str.to_int Start)))
   (Start_7 String (x "1" (str.++ Start_4 Start_5) (str.replace Start_3 Start_4 Start_2)))
   (StartInt_7 Int (0 1 (str.indexof Start_12 Start_1 StartInt_6)))
   (Start_6 String ("a" (str.++ Start_1 Start_5) (str.at Start_5 StartInt_1) (str.substr Start_8 StartInt_3 StartInt_4) (str.replace Start_3 Start_6 Start_6) (str.from_int StartInt_4) (ite StartBool_1 Start_4 Start)))
   (Start_5 String ("a" (str.at Start_1 StartInt) (str.substr Start_5 StartInt StartInt) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_1) (str.< Start_9 Start) (str.<= Start_2 Start_2) (str.suffixof Start_3 Start_7) (str.contains Start_5 Start_7) (= Start Start_1) (<= StartInt StartInt)))
   (Start_11 String ("" "b" (str.substr Start_8 StartInt_5 StartInt) (str.replace Start_8 Start_8 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" "" (str.replace "0" y x))))

(check-synth)
