(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_4 Int) (Start_1 String) (StartInt_3 Int) (Start_3 String) (StartInt_5 Int) (Start_6 String) (StartBool_1 Bool) (Start_5 String) (Start_7 String) (StartInt_6 Int) (StartInt_1 Int) (Start_9 String) (Start_8 String) (Start_2 String) (Start_10 String) (Start_4 String) (StartInt_2 Int))
  ((Start String ("a" y (str.++ Start Start_1) (str.at Start_1 StartInt) (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start_1 Start) (str.from_int StartInt) (ite StartBool Start_1 Start_3)))
   (StartInt Int (1 (str.len Start_10) (str.indexof Start_6 Start_10 StartInt_3)))
   (StartBool Bool (true (and StartBool StartBool) (str.< Start_1 Start_8) (str.suffixof Start_3 Start_1) (str.contains Start_4 Start_8) (<= StartInt_5 StartInt_6)))
   (StartBool_2 Bool (false (str.contains Start_10 Start_1) (= StartInt StartInt) (<= StartInt_4 StartInt_4)))
   (StartInt_4 Int (1 (str.len Start_1) (str.indexof Start Start_5 StartInt_3) (str.to_int Start_10)))
   (Start_1 String (y "" (str.++ Start_9 Start_1) (str.at Start_7 StartInt_3) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_8 Start_8 Start_4) (str.from_int StartInt)))
   (StartInt_3 Int (0 1 (str.len Start_3)))
   (Start_3 String ("" y "a" x (str.++ Start_3 Start_2) (str.substr Start_4 StartInt StartInt) (str.replace Start_4 Start_2 Start_5) (ite StartBool_1 Start_2 Start_6)))
   (StartInt_5 Int (0 1 (str.indexof Start_7 Start_9 StartInt_4)))
   (Start_6 String (y (str.at Start_2 StartInt)))
   (StartBool_1 Bool (true (str.suffixof Start_2 Start_6) (= Start_7 Start_5) (= StartInt StartInt)))
   (Start_5 String (y "1" (str.at Start_5 StartInt) (str.replace Start_8 Start Start_3) (ite StartBool Start_6 Start_3)))
   (Start_7 String ("a" (str.at Start StartInt_1) (str.from_int StartInt_1)))
   (StartInt_6 Int (1 (str.len Start_4) (str.indexof Start Start_3 StartInt_1) (str.to_int Start_4)))
   (StartInt_1 Int (1 0 (str.len Start) (str.to_int Start_8)))
   (Start_9 String (x "b" "" (str.at Start_6 StartInt_1) (str.substr Start_3 StartInt StartInt) (str.replace Start_8 Start_4 Start) (str.from_int StartInt_1)))
   (Start_8 String (y x (str.++ Start_3 Start_8) (str.at Start_3 StartInt) (str.replace Start_3 Start Start_1) (ite StartBool_1 Start_1 Start_3)))
   (Start_2 String ("b" "a" x y "0" "" "1" (str.++ Start Start_2) (str.substr Start_6 StartInt_2 StartInt_3)))
   (Start_10 String (x "1" (ite StartBool_2 Start_5 Start_8)))
   (Start_4 String ("1" x "a" (str.at Start_7 StartInt) (str.replace Start_2 Start_9 Start_6) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start)))
   (StartInt_2 Int (0 (str.len Start_7) (str.to_int Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.++ (str.at x 1) "b")))))

(check-synth)
