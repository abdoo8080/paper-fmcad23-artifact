(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (Start_2 String) (StartInt_1 Int) (Start_9 String) (Start_12 String) (Start_10 String) (Start_18 String) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_6 Int) (StartInt_4 Int) (Start_6 String) (Start_11 String) (StartInt_2 Int) (StartInt_11 Int) (Start_3 String) (Start_13 String) (StartBool_3 Bool) (Start_4 String) (Start_15 String) (Start_1 String) (Start_14 String) (StartInt_9 Int) (StartInt_8 Int) (StartInt_10 Int) (Start_7 String) (StartInt_7 Int) (StartInt_5 Int) (Start_8 String) (Start_17 String) (Start_16 String) (StartInt_3 Int) (Start_5 String))
  ((Start String ("" (str.++ Start Start) (str.at Start_1 StartInt) (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt)))
   (StartInt Int (0))
   (StartBool Bool (false (not StartBool_3) (and StartBool StartBool_3) (str.<= Start_19 Start_18) (str.prefixof Start_6 Start_5) (str.contains Start_19 Start_1) (= Start_11 Start_3) (<= StartInt_4 StartInt_10)))
   (Start_19 String ("1" "b" (str.from_int StartInt_1) (ite StartBool_2 Start_13 Start_7)))
   (Start_2 String ("a" "1" (str.++ Start_14 Start_16) (str.substr Start_9 StartInt_6 StartInt_2) (str.replace Start_19 Start_2 Start_8)))
   (StartInt_1 Int (0 1))
   (Start_9 String ("a" "1" (str.++ Start_5 Start_5) (str.substr Start_10 StartInt_1 StartInt_4) (str.from_int StartInt_5)))
   (Start_12 String ("a" y (str.++ Start_2 Start_6) (str.substr Start_11 StartInt_7 StartInt_6) (str.replace Start_2 Start_3 Start_13)))
   (Start_10 String (x (str.substr Start StartInt_8 StartInt_4) (str.from_int StartInt_3)))
   (Start_18 String ("b" x (str.++ Start_13 Start_4) (str.at Start_8 StartInt_11) (str.replace Start_9 Start Start_10) (str.from_int StartInt_3) (ite StartBool_2 Start_1 Start_10)))
   (StartBool_2 Bool (false true (and StartBool StartBool_2) (str.< Start_5 Start_2) (str.<= Start_1 Start_6) (str.prefixof Start_8 Start) (str.suffixof Start_5 Start_4) (= Start_9 Start_5) (= StartInt_4 StartInt_4) (<= StartInt_4 StartInt_4)))
   (StartBool_1 Bool (false (not StartBool_2) (str.< Start_3 Start_2) (str.<= Start_4 Start_3) (str.suffixof Start_2 Start_7)))
   (StartInt_6 Int (1 (str.to_int Start_11)))
   (StartInt_4 Int (0 1 (str.indexof Start Start_7 StartInt) (str.to_int Start_6)))
   (Start_6 String ("" x (str.++ Start_1 Start_4) (str.at Start StartInt_3) (ite StartBool_1 Start_3 Start_2)))
   (Start_11 String ("1" (str.++ Start_10 Start_8) (str.at Start_9 StartInt_4) (str.replace Start_7 Start_11 Start_4) (str.from_int StartInt_6) (ite StartBool_3 Start_7 Start_12)))
   (StartInt_2 Int (1 (str.len Start_4) (str.indexof Start_5 Start_6 StartInt_2)))
   (StartInt_11 Int (0 (str.len Start_8)))
   (Start_3 String ("a" "b" y x "1" "" "0" (str.at Start_4 StartInt_1) (str.substr Start StartInt_1 StartInt_2)))
   (Start_13 String ("1" "a" y "" x (str.++ Start_14 Start_8) (str.substr Start_12 StartInt_8 StartInt_2) (str.replace Start_5 Start Start_12) (ite StartBool_2 Start_15 Start_12)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool StartBool_2) (str.<= Start_13 Start_12) (str.prefixof Start_2 Start_3) (<= StartInt_1 StartInt_6)))
   (Start_4 String (x (str.++ Start_1 Start_8) (str.replace Start_12 Start_6 Start_4)))
   (Start_15 String ("1" (str.at Start_6 StartInt_9) (ite StartBool_1 Start_6 Start_13)))
   (Start_1 String ("b" "a" "0" "" "1" (str.substr Start_18 StartInt StartInt_7) (str.replace Start_5 Start_16 Start_14)))
   (Start_14 String ("0" "" (str.++ Start_1 Start_7) (str.at Start_9 StartInt_5) (str.substr Start_12 StartInt_7 StartInt_10) (str.from_int StartInt_5) (ite StartBool_1 Start_8 Start_2)))
   (StartInt_9 Int (1 0))
   (StartInt_8 Int (0 1 (str.to_int Start_6)))
   (StartInt_10 Int (1 0 (str.to_int Start_4)))
   (Start_7 String ("1" "b" (str.at Start_7 StartInt_2) (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_5 Start_4 Start_2) (str.from_int StartInt_3)))
   (StartInt_7 Int (1 0 (str.len Start_14) (str.to_int Start_7)))
   (StartInt_5 Int (1 0 (str.indexof Start_6 Start_8 StartInt_6) (str.to_int Start_2)))
   (Start_8 String ("a" y (str.at Start StartInt_5) (str.substr Start_16 StartInt StartInt_3) (str.replace Start_2 Start_17 Start_14) (ite StartBool_2 Start_7 Start_6)))
   (Start_17 String ("0" (str.at Start_18 StartInt_3)))
   (Start_16 String ("" (str.++ Start_4 Start_11) (str.substr Start_8 StartInt StartInt) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 1 (str.len Start_7) (str.indexof Start_4 Start_2 StartInt_1)))
   (Start_5 String (x (str.++ Start_6 Start_11) (str.at Start_16 StartInt) (str.from_int StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.at x 0) "a")))

(check-synth)
