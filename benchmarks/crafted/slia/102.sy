(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_19 String) (StartInt_4 Int) (Start_24 String) (Start_12 String) (Start_8 String) (Start_21 String) (Start_5 String) (Start_13 String) (StartInt_2 Int) (Start_2 String) (StartInt_3 Int) (Start_1 String) (Start_10 String) (Start_11 String) (Start_4 String) (StartBool_2 Bool) (Start_7 String) (StartBool_3 Bool) (Start_3 String) (StartBool_1 Bool) (Start_9 String) (StartInt_6 Int) (Start_22 String) (StartInt_7 Int) (Start_16 String) (Start_15 String) (StartInt_5 Int) (Start_20 String) (Start_14 String) (Start_6 String) (StartInt_1 Int) (StartInt_8 Int) (Start_17 String) (Start_23 String) (Start_18 String))
  ((Start String ("0" (str.++ Start Start_1) (str.at Start_2 StartInt) (str.substr Start_2 StartInt StartInt) (ite StartBool_1 Start Start_3)))
   (StartInt Int (0 1 (str.len Start_23) (str.indexof Start_6 Start_3 StartInt_7) (str.to_int Start_17)))
   (StartBool Bool (false (and StartBool_1 StartBool_3) (str.<= Start_15 Start_5) (str.prefixof Start_20 Start_13) (str.contains Start_1 Start_3)))
   (StartInt_9 Int (1))
   (Start_19 String ("b" "1" "0" "a" "" x y (str.++ Start_17 Start_12) (str.substr Start_22 StartInt_8 StartInt_5) (str.replace Start_1 Start Start_6) (ite StartBool_3 Start_1 Start_10)))
   (StartInt_4 Int (0 (str.len Start_7) (str.to_int Start_12)))
   (Start_24 String (y (str.at Start_22 StartInt_7) (str.replace Start_15 Start_23 Start_22) (str.from_int StartInt_6) (ite StartBool_2 Start_1 Start_12)))
   (Start_12 String ("0" "1" (str.substr Start_7 StartInt_2 StartInt_3) (str.replace Start_12 Start_10 Start_6) (str.from_int StartInt_2)))
   (Start_8 String ("1" (str.++ Start_4 Start_3) (str.at Start_4 StartInt) (str.substr Start_1 StartInt StartInt_2) (str.replace Start_1 Start_4 Start_5) (str.from_int StartInt_4) (ite StartBool_2 Start_4 Start_8)))
   (Start_21 String ("a" x "1" (str.at Start_17 StartInt_3) (str.substr Start_10 StartInt StartInt_8) (str.replace Start_16 Start_7 Start_4) (str.from_int StartInt_3)))
   (Start_5 String ("a" "0" "b" (str.++ Start_9 Start_13) (str.at Start_8 StartInt) (ite StartBool_1 Start_13 Start_7)))
   (Start_13 String ("1" (str.at Start_6 StartInt_1)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_12 Start_4 StartInt_3) (str.to_int Start_1)))
   (Start_2 String ("b" y "0" (str.++ Start_5 Start_18) (str.at Start_2 StartInt_8) (str.substr Start_5 StartInt_1 StartInt_7) (str.replace Start_9 Start_13 Start_3) (str.from_int StartInt_7)))
   (StartInt_3 Int (0 (str.len Start) (str.to_int Start_13)))
   (Start_1 String ("0" (str.++ Start_19 Start_20) (str.substr Start_4 StartInt_2 StartInt) (str.replace Start_21 Start_11 Start_2) (str.from_int StartInt_1) (ite StartBool_2 Start_12 Start_18)))
   (Start_10 String ("1" x "b" "a" y "0" "" (str.at Start_12 StartInt) (str.from_int StartInt_1)))
   (Start_11 String ("0" "1" y "a" (str.++ Start_10 Start_8) (str.at Start_1 StartInt_2)))
   (Start_4 String ("" (str.substr Start_1 StartInt_4 StartInt_5) (str.from_int StartInt_5)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_1 StartBool) (str.< Start_8 Start) (str.<= Start_3 Start_8) (str.prefixof Start_4 Start_4) (str.suffixof Start_9 Start_9) (str.contains Start Start_5) (= Start_5 Start_7) (<= StartInt StartInt)))
   (Start_7 String (y (str.at Start_14 StartInt_5) (str.from_int StartInt_6) (ite StartBool_2 Start_3 Start_3)))
   (StartBool_3 Bool (false (str.<= Start_23 Start) (str.prefixof Start_24 Start_20) (str.suffixof Start_15 Start_24) (str.contains Start_10 Start_17) (= Start_22 Start_20)))
   (Start_3 String ("" x "1" (str.++ Start_3 Start) (str.at Start_4 StartInt_1) (str.replace Start_5 Start_6 Start_7) (ite StartBool_2 Start_6 Start_4)))
   (StartBool_1 Bool (true (str.< Start_6 Start_10) (str.<= Start_6 Start_2) (str.suffixof Start_15 Start_17) (= Start_2 Start_15) (= StartInt_3 StartInt_1) (<= StartInt_7 StartInt_8)))
   (Start_9 String (x (str.at Start_8 StartInt_2) (str.replace Start_7 Start Start_10) (ite StartBool_1 Start_11 Start_5)))
   (StartInt_6 Int (0 (str.len Start_14) (str.indexof Start_15 Start_2 StartInt_2)))
   (Start_22 String ("1" "0" (str.substr Start StartInt_6 StartInt_9) (str.from_int StartInt_7)))
   (StartInt_7 Int (1 0))
   (Start_16 String ("a" (str.substr Start_5 StartInt StartInt) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_14)))
   (Start_15 String (y "a" "b" "0" "" x "1" (str.at Start_7 StartInt_7) (str.replace Start_10 Start_8 Start_15) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_5 Int (0 (str.len Start_5) (str.indexof Start_16 Start_9 StartInt_2)))
   (Start_20 String ("b" (str.at Start_8 StartInt_5) (str.substr Start_6 StartInt_4 StartInt_5) (ite StartBool_2 Start_1 Start_21)))
   (Start_14 String ("0" y (str.replace Start_13 Start_1 Start_15) (str.from_int StartInt_5)))
   (Start_6 String ("a" (str.at Start_15 StartInt_5) (str.replace Start_2 Start_14 Start_14) (ite StartBool Start_3 Start_9)))
   (StartInt_1 Int (0 1 (str.len Start_11) (str.to_int Start_12)))
   (StartInt_8 Int (1 (str.len Start_11) (str.indexof Start_2 Start_16 StartInt_6)))
   (Start_17 String ("b" "" "a" x y "1" "0" (str.++ Start_17 Start_10) (str.at Start_13 StartInt_6) (str.substr Start_1 StartInt_3 StartInt_2) (str.from_int StartInt_3)))
   (Start_23 String ("b" (str.++ Start_12 Start) (str.substr Start_4 StartInt_8 StartInt_5) (str.replace Start_8 Start_16 Start_6)))
   (Start_18 String ("b" "0" (str.++ Start_9 Start_3) (str.at Start_2 StartInt_6) (ite StartBool_2 Start_9 Start_16)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "b" x)))

(check-synth)
