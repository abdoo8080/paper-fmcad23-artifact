(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_6 String) (Start_11 String) (Start_14 String) (Start_9 String) (StartBool_4 Bool) (Start_5 String) (Start_4 String) (Start_1 String) (Start_7 String) (Start_3 String) (StartInt_10 Int) (Start_2 String) (StartBool_5 Bool) (StartBool_3 Bool) (StartInt_5 Int) (StartInt_4 Int) (StartInt_6 Int) (Start_10 String) (StartInt_7 Int) (StartInt_1 Int) (Start_12 String) (StartInt_9 Int) (Start_8 String) (Start_13 String) (StartInt_8 Int) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_3 Int))
  ((Start String ("b" (str.++ Start Start) (str.at Start_1 StartInt)))
   (StartInt Int (1 0 (str.indexof Start_2 Start_4 StartInt)))
   (StartBool Bool (false (and StartBool_5 StartBool_3) (str.< Start_3 Start_3) (str.<= Start_1 Start_13) (str.prefixof Start_2 Start) (str.suffixof Start_1 Start_3) (str.contains Start_3 Start_5) (= Start_10 Start_14)))
   (Start_15 String ("0" (str.at Start_13 StartInt_10) (str.substr Start_11 StartInt_6 StartInt_7) (str.replace Start_1 Start_6 Start_11)))
   (Start_6 String ("b" (str.at Start_7 StartInt_3) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt_1)))
   (Start_11 String ("1" (str.at Start_1 StartInt_5) (str.substr Start_2 StartInt StartInt_3) (ite StartBool Start_11 Start_7)))
   (Start_14 String ("0" (str.++ Start_8 Start_10) (str.from_int StartInt_6) (ite StartBool_4 Start_15 Start_9)))
   (Start_9 String ("a" y x (ite StartBool Start_3 Start_8)))
   (StartBool_4 Bool (true false (str.prefixof Start_3 Start_9) (str.contains Start_9 Start_9) (= Start_5 Start_5)))
   (Start_5 String ("" y "b" "a" x "1" "0" (str.++ Start_10 Start_1) (str.at Start_8 StartInt_3) (str.substr Start_8 StartInt_8 StartInt_10) (str.replace Start_3 Start Start)))
   (Start_4 String (y (str.++ Start_5 Start_3) (str.substr Start_1 StartInt_3 StartInt_2) (str.replace Start Start_2 Start_5) (ite StartBool_1 Start_3 Start_6)))
   (Start_1 String ("0" "a" "" (str.substr Start StartInt_1 StartInt_1) (ite StartBool Start Start_1)))
   (Start_7 String (y (str.++ Start_8 Start_9)))
   (Start_3 String ("a" (str.++ Start_3 Start_1) (str.from_int StartInt_2) (ite StartBool Start_2 Start_2)))
   (StartInt_10 Int (1 (str.indexof Start_7 Start_5 StartInt_4)))
   (Start_2 String ("1" "0" x "" "b" y (str.++ Start Start_2) (str.at Start StartInt_2) (str.substr Start_3 StartInt_1 StartInt_2)))
   (StartBool_5 Bool (false true (and StartBool_4 StartBool_5) (str.<= Start_10 Start_7)))
   (StartBool_3 Bool (false (not StartBool_4) (str.< Start_3 Start_4) (str.<= Start_6 Start_4) (= StartInt_2 StartInt_5)))
   (StartInt_5 Int (1 0 (str.len Start) (str.to_int Start_8)))
   (StartInt_4 Int (1 (str.len Start_7) (str.indexof Start Start_11 StartInt_6)))
   (StartInt_6 Int (0 (str.len Start_4) (str.indexof Start_5 Start_8 StartInt_3)))
   (Start_10 String ("a" "0" x (str.++ Start_12 Start_6) (str.at Start_2 StartInt_4) (str.substr Start_7 StartInt_3 StartInt_1) (str.replace Start_1 Start Start_7) (str.from_int StartInt) (ite StartBool_2 Start_1 Start_12)))
   (StartInt_7 Int (1))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_1 Start_2 StartInt_1)))
   (Start_12 String (x (str.++ Start_7 Start_10) (str.at Start_12 StartInt_8) (str.replace Start_10 Start_6 Start_13) (str.from_int StartInt_9)))
   (StartInt_9 Int (0 (str.to_int Start_9)))
   (Start_8 String ("a" "1" y "b" "0" "" (str.++ Start Start_10) (str.at Start_10 StartInt_4) (str.substr Start_11 StartInt StartInt_4)))
   (Start_13 String ("" "0" "1" (str.at Start_7 StartInt_7)))
   (StartInt_8 Int (0 (str.len Start_11)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_3) (str.< Start_3 Start_11) (str.prefixof Start_4 Start_11) (str.suffixof Start_13 Start_13) (str.contains Start_13 Start_11) (= StartInt_9 StartInt_7)))
   (StartInt_2 Int (1 0 (str.len Start_3) (str.to_int Start)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool StartBool_2) (str.prefixof Start Start_2) (<= StartInt_7 StartInt_3)))
   (StartInt_3 Int (1 (str.len Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.len x))))

(check-synth)
