(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartBool_3 Bool) (Start_2 String) (Start_6 String) (Start_9 String) (StartInt_3 Int) (Start_4 String) (Start_7 String) (Start_3 String) (Start_13 String) (Start_5 String) (Start_10 String) (Start_1 String) (StartInt_6 Int) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_7 Int) (StartInt_1 Int) (StartInt_5 Int) (Start_11 String) (StartBool_4 Bool) (Start_14 String) (StartBool_5 Bool) (Start_12 String) (StartInt_8 Int) (StartInt_2 Int) (StartBool_1 Bool))
  ((Start String ("a" x (str.at Start StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start Start Start_1) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (1 0 (str.indexof Start_4 Start_6 StartInt) (str.to_int Start_11)))
   (StartBool Bool (false (and StartBool_5 StartBool_5) (str.< Start_7 Start_5) (str.contains Start_14 Start_7) (= StartInt_4 StartInt_3)))
   (Start_8 String (y (str.++ Start_5 Start_2) (str.at Start_6 StartInt_2) (str.substr Start_3 StartInt_3 StartInt) (str.from_int StartInt_1)))
   (StartBool_3 Bool (false (str.suffixof Start_4 Start_4) (str.contains Start_3 Start_6) (<= StartInt_3 StartInt)))
   (Start_2 String ("b" (str.at Start_2 StartInt_2) (ite StartBool_3 Start_6 Start_5)))
   (Start_6 String ("1" x "b" y (str.++ Start Start) (str.replace Start_1 Start_4 Start_7) (str.from_int StartInt)))
   (Start_9 String ("1" (str.++ Start_3 Start_11) (str.at Start StartInt_4) (str.substr Start_4 StartInt_5 StartInt_7) (str.replace Start_4 Start_1 Start) (str.from_int StartInt_4)))
   (StartInt_3 Int (1 (str.len Start_2)))
   (Start_4 String (x (str.++ Start_1 Start_3) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_5 Start_3 Start_2) (str.from_int StartInt_3)))
   (Start_7 String ("" (str.at Start_7 StartInt_1)))
   (Start_3 String ("" x y (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_2 Start Start) (ite StartBool_2 Start Start_3)))
   (Start_13 String (x "" "0" "b" (str.++ Start_14 Start) (str.substr Start_2 StartInt_4 StartInt_4) (str.from_int StartInt_4) (ite StartBool Start_6 Start_2)))
   (Start_5 String ("a" "0" (str.at Start StartInt_3) (str.substr Start_4 StartInt StartInt) (str.replace Start_5 Start_6 Start_5) (str.from_int StartInt_1)))
   (Start_10 String ("" "0" x (str.++ Start_9 Start) (str.substr Start_7 StartInt_5 StartInt_2) (str.replace Start_10 Start Start_6) (ite StartBool_4 Start_2 Start_4)))
   (Start_1 String ("1" (str.++ Start_6 Start_9) (str.at Start StartInt_1) (str.replace Start_2 Start_1 Start_10) (str.from_int StartInt_4)))
   (StartInt_6 Int (1 0 (str.indexof Start_14 Start_13 StartInt_7) (str.to_int Start_2)))
   (StartBool_2 Bool (false (not StartBool) (str.<= Start_1 Start_3) (str.suffixof Start_1 Start) (str.contains Start_1 Start) (= StartInt_2 StartInt) (<= StartInt_2 StartInt_1)))
   (StartInt_4 Int (0 (str.len Start_2)))
   (StartInt_7 Int (1 0 (str.indexof Start_11 Start_1 StartInt_8) (str.to_int Start_5)))
   (StartInt_1 Int (0 1))
   (StartInt_5 Int (0 (str.to_int Start_11)))
   (Start_11 String (y "b" (str.at Start_12 StartInt) (str.substr Start_13 StartInt_1 StartInt_3)))
   (StartBool_4 Bool (true false (and StartBool StartBool_2) (str.<= Start_8 Start_2) (str.prefixof Start_7 Start_1) (str.suffixof Start_4 Start_3) (= StartInt_3 StartInt)))
   (Start_14 String ("" (str.++ Start_14 Start_5) (str.at Start_1 StartInt)))
   (StartBool_5 Bool (false (and StartBool_1 StartBool_2) (str.< Start_2 Start_14) (str.<= Start_10 Start_14) (str.contains Start_8 Start_12) (= Start_13 Start_7) (= StartInt_5 StartInt_3)))
   (Start_12 String ("a" (str.++ Start_11 Start_7) (str.at Start StartInt_5) (str.substr Start_11 StartInt_1 StartInt_5) (str.replace Start_3 Start_5 Start_8) (str.from_int StartInt_6) (ite StartBool Start_6 Start_8)))
   (StartInt_8 Int (0 (str.indexof Start_2 Start_4 StartInt_7)))
   (StartInt_2 Int (1 (str.indexof Start_3 Start_4 StartInt_2)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_3) (str.< Start_5 Start_5) (str.contains Start_6 Start_7) (= Start_4 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "0" y)))

(check-synth)
