(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_4 Int) (Start_2 String) (Start_3 String) (StartInt_1 Int) (Start_6 String) (StartInt_3 Int) (Start_5 String) (Start_4 String) (Start_1 String) (StartInt_2 Int))
  ((Start String ("b" x (str.from_int StartInt)))
   (StartInt Int (1 (str.to_int Start_1)))
   (StartBool Bool (true (str.< Start_2 Start) (str.<= Start_2 Start) (str.prefixof Start_3 Start_4) (str.contains Start_3 Start_2) (= Start_1 Start_1)))
   (StartInt_4 Int (1 0 (str.len Start_1) (str.to_int Start_6)))
   (Start_2 String (y "a" (str.at Start_1 StartInt_2) (str.substr Start_4 StartInt_4 StartInt_2) (ite StartBool Start_5 Start_3)))
   (Start_3 String ("a" (str.substr Start_2 StartInt StartInt_3) (str.replace Start_6 Start_3 Start_6) (str.from_int StartInt_1)))
   (StartInt_1 Int (1 0))
   (Start_6 String ("0" "a" (str.replace Start_4 Start_3 Start_6) (str.from_int StartInt_2) (ite StartBool Start_3 Start_4)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_4 Start_2 StartInt_3)))
   (Start_5 String (y "" (str.++ Start_6 Start_2) (str.at Start StartInt) (ite StartBool Start_1 Start_4)))
   (Start_4 String ("" "1" (str.++ Start_3 Start_4) (str.at Start_4 StartInt_1) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start Start_5 Start_4) (str.from_int StartInt_1)))
   (Start_1 String ("a" (str.at Start_1 StartInt) (ite StartBool Start_1 Start)))
   (StartInt_2 Int (1 (str.indexof Start_1 Start_6 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" (str.substr y (str.to_int x) 1) x)))

(check-synth)
