(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartBool_2 Bool) (Start_12 String) (Start_11 String) (Start_10 String) (StartBool_3 Bool) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_6 Int) (StartBool_4 Bool) (Start_13 String) (Start_1 String) (StartInt_1 Int) (Start_7 String) (Start_3 String) (StartInt_5 Int) (Start_4 String) (Start_9 String) (Start_5 String) (Start_2 String) (Start_6 String) (Start_8 String) (StartInt_3 Int) (StartInt_4 Int))
  ((Start String ("a" (str.substr Start_1 StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (1 0))
   (StartBool Bool (false (not StartBool_1) (and StartBool_4 StartBool_1) (str.contains Start_7 Start_9) (= StartInt_6 StartInt_5)))
   (Start_14 String ("0" x "a" "b" (str.at Start_9 StartInt_4)))
   (StartBool_2 Bool (false (str.< Start_10 Start_11) (str.<= Start_4 Start_9) (str.suffixof Start_11 Start_3) (str.contains Start_13 Start_12) (= StartInt StartInt) (<= StartInt_5 StartInt_6)))
   (Start_12 String ("" (str.at Start_13 StartInt_4) (str.replace Start_9 Start_1 Start_12) (str.from_int StartInt_5) (ite StartBool_1 Start_8 Start_1)))
   (Start_11 String (y "a" x "" (str.at Start_9 StartInt_1) (str.substr Start_11 StartInt_2 StartInt_6) (str.replace Start_3 Start_1 Start_12) (str.from_int StartInt_3)))
   (Start_10 String ("0" x y (str.++ Start_11 Start) (str.replace Start_1 Start_7 Start_9) (str.from_int StartInt_4)))
   (StartBool_3 Bool (false true (str.suffixof Start_8 Start_2) (= Start_11 Start) (= StartInt_3 StartInt_2)))
   (StartInt_2 Int (1 (str.len Start_5) (str.indexof Start_9 Start_4 StartInt_5)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start_10 Start_6) (str.prefixof Start_4 Start_3) (= Start_3 Start_2) (<= StartInt_3 StartInt_3)))
   (StartInt_6 Int (0))
   (StartBool_4 Bool (false true (str.<= Start_7 Start_11) (str.contains Start_11 Start_4) (<= StartInt_2 StartInt_3)))
   (Start_13 String ("" (str.++ Start_7 Start_14) (str.substr Start_3 StartInt_1 StartInt_3) (ite StartBool_3 Start_5 Start_11)))
   (Start_1 String ("a" (str.++ Start_2 Start_3) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 1 (str.indexof Start Start_2 StartInt_1)))
   (Start_7 String ("0" "" y "a" "1" (str.++ Start_2 Start_7)))
   (Start_3 String ("0" (str.substr Start_1 StartInt StartInt_2) (str.replace Start_4 Start_4 Start_2) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 (str.to_int Start_5)))
   (Start_4 String ("0" (str.++ Start_1 Start_5) (str.at Start_2 StartInt_2) (str.substr Start_5 StartInt_3 StartInt) (str.replace Start_4 Start_1 Start_6) (str.from_int StartInt_2)))
   (Start_9 String ("1" (str.at Start_2 StartInt_3) (str.substr Start_4 StartInt_1 StartInt_6)))
   (Start_5 String ("" "a" x (str.replace Start_6 Start_7 Start_9) (str.from_int StartInt_2)))
   (Start_2 String ("1" "" "a" "0" (str.++ Start_8 Start_5) (str.at Start StartInt) (str.substr Start_7 StartInt_1 StartInt_2) (str.replace Start_3 Start Start_10)))
   (Start_6 String ("0" "1" (str.++ Start Start_4) (str.substr Start_5 StartInt_4 StartInt_4) (str.replace Start_7 Start_8 Start_4)))
   (Start_8 String ("b" x "a" (str.++ Start_3 Start_8) (str.substr Start_2 StartInt_5 StartInt_5)))
   (StartInt_3 Int (0 (str.len Start_3) (str.indexof Start_2 Start_5 StartInt)))
   (StartInt_4 Int (0 (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= y "1") "a" y)))

(check-synth)
