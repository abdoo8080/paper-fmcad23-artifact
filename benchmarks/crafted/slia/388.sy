(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (Start_1 String) (StartInt_3 Int) (Start_2 String) (StartInt_1 Int) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int) (Start_5 String) (Start_4 String))
  ((Start String ("1" "b" "0" (str.++ Start Start_1) (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_1 Start_4 Start_4)))
   (StartInt Int (0 1 (str.len Start_1) (str.indexof Start Start_5 StartInt_3) (str.to_int Start_3)))
   (StartBool Bool (true (str.< Start_5 Start_3) (str.suffixof Start_6 Start_1) (str.contains Start_2 Start_5)))
   (Start_6 String ("0" (str.++ Start_3 Start_2) (str.from_int StartInt_4)))
   (Start_1 String (x "1" "b" (str.++ Start_5 Start_4) (str.replace Start_4 Start_5 Start_5) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 (str.len Start_4) (str.indexof Start_2 Start_2 StartInt_4) (str.to_int Start_2)))
   (Start_2 String (x "1" (str.++ Start_3 Start) (str.at Start_2 StartInt) (str.substr Start StartInt_3 StartInt_2)))
   (StartInt_1 Int (1 (str.len Start_1) (str.to_int Start_1)))
   (Start_3 String ("" "b" "a" (str.at Start_3 StartInt_1) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start_5 Start_5) (str.from_int StartInt)))
   (StartInt_2 Int (1 (str.len Start_3) (str.to_int Start_5)))
   (StartInt_4 Int (1 0))
   (Start_5 String ("1" "a" (str.replace Start_3 Start_4 Start_4) (str.from_int StartInt)))
   (Start_4 String (y (str.++ Start Start_4) (str.at Start_1 StartInt_2) (str.replace Start Start Start_4) (ite StartBool Start_1 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof y x 1))))

(check-synth)
