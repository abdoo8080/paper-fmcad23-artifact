(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_13 String) (StartBool_4 Bool) (Start_1 String) (StartBool_2 Bool) (Start_12 String) (Start_7 String) (Start_10 String) (StartInt_2 Int) (Start_11 String) (StartInt_6 Int) (StartBool_1 Bool) (Start_5 String) (StartInt_5 Int) (Start_3 String) (StartInt_7 Int) (StartInt_3 Int) (Start_6 String) (Start_4 String) (Start_14 String) (StartInt_4 Int) (Start_9 String) (Start_15 String) (StartBool_3 Bool) (Start_2 String) (Start_8 String))
  ((Start String ("1" "a" (str.at Start StartInt_1) (str.replace Start Start_1 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (0 (str.len Start_8) (str.indexof Start_4 Start_15 StartInt_4) (str.to_int Start_15)))
   (StartBool Bool (true false (str.< Start_10 Start_5) (str.<= Start_15 Start_8) (str.suffixof Start_8 Start_9) (= StartInt_5 StartInt_3) (<= StartInt_4 StartInt_3)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start_5 Start_6 StartInt)))
   (Start_13 String (x (str.substr Start_13 StartInt_3 StartInt_1) (str.replace Start_10 Start_14 Start_2) (str.from_int StartInt_6)))
   (StartBool_4 Bool (true (and StartBool_2 StartBool_1) (str.<= Start_1 Start_4) (str.prefixof Start_9 Start_13) (<= StartInt_4 StartInt_7)))
   (Start_1 String ("a" (str.++ Start_7 Start_6) (str.substr Start_10 StartInt_3 StartInt_4) (str.replace Start_8 Start_6 Start_1) (ite StartBool_4 Start_6 Start_4)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool_2 StartBool_3) (str.<= Start_12 Start_9) (str.contains Start_4 Start_5) (= StartInt_5 StartInt) (<= StartInt_2 StartInt_3)))
   (Start_12 String ("a" (str.++ Start_8 Start_5) (str.from_int StartInt_5)))
   (Start_7 String ("" "b" "1" "0" (str.replace Start_5 Start_1 Start)))
   (Start_10 String ("" "1" (str.at Start_5 StartInt_7) (str.substr Start_4 StartInt_6 StartInt_7) (str.replace Start_9 Start_5 Start_10) (str.from_int StartInt_7) (ite StartBool_2 Start_8 Start)))
   (StartInt_2 Int (0 (str.to_int Start_3)))
   (Start_11 String ("" (str.from_int StartInt_2)))
   (StartInt_6 Int (0 1 (str.indexof Start_8 Start StartInt_5) (str.to_int Start_9)))
   (StartBool_1 Bool (false (not StartBool_2) (str.prefixof Start_1 Start_2) (str.suffixof Start_2 Start) (<= StartInt StartInt_2)))
   (Start_5 String (y "1" x (str.replace Start_6 Start_4 Start_3) (str.from_int StartInt_3) (ite StartBool_2 Start Start_2)))
   (StartInt_5 Int (1 (str.indexof Start_7 Start_11 StartInt_2) (str.to_int Start_11)))
   (Start_3 String ("0" "1" y (str.++ Start_4 Start_4) (str.replace Start_2 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool_2 Start_5 Start_2)))
   (StartInt_7 Int (1 0))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.to_int Start_1)))
   (Start_6 String ("" (str.from_int StartInt_3) (ite StartBool Start_2 Start_2)))
   (Start_4 String ("b" (str.at Start_3 StartInt_4) (str.substr Start_7 StartInt_4 StartInt_5) (str.from_int StartInt_6)))
   (Start_14 String ("b" (str.++ Start_10 Start_13) (str.at Start_7 StartInt_3) (str.from_int StartInt_7) (ite StartBool_1 Start_6 Start_11)))
   (StartInt_4 Int (1 0 (str.indexof Start_8 Start_10 StartInt_2)))
   (Start_9 String (x "1" "a" (str.++ Start_7 Start) (str.at Start_8 StartInt_5) (ite StartBool_3 Start_9 Start_9)))
   (Start_15 String ("1" "b" y x (str.++ Start_10 Start_3) (str.substr Start_7 StartInt_6 StartInt_7) (str.from_int StartInt_7)))
   (StartBool_3 Bool (true (str.<= Start_2 Start_5) (str.contains Start_1 Start_7) (= StartInt_7 StartInt_7) (<= StartInt_7 StartInt_3)))
   (Start_2 String ("" (str.at Start_6 StartInt_5) (ite StartBool_1 Start_5 Start_12)))
   (Start_8 String ("a" (str.++ Start_10 Start) (str.at Start_5 StartInt_7) (str.substr Start_5 StartInt_3 StartInt_7) (str.replace Start_5 Start Start_8) (ite StartBool_2 Start_2 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.to_int y))))

(check-synth)
