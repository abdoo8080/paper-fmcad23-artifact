(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartBool_1 Bool) (Start_14 String) (Start_4 String) (StartInt_5 Int) (Start_7 String) (StartInt_2 Int) (StartInt_4 Int) (Start_8 String) (Start_6 String) (Start_1 String) (Start_9 String) (StartBool_3 Bool) (StartInt_8 Int) (Start_5 String) (StartInt_3 Int) (StartInt_1 Int) (Start_10 String) (Start_3 String) (StartInt_9 Int) (StartInt_7 Int) (Start_12 String) (Start_11 String) (Start_17 String) (StartInt_6 Int) (Start_2 String) (Start_13 String) (Start_15 String) (Start_16 String))
  ((Start String ("" "0" (str.at Start StartInt_1) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.len Start) (str.indexof Start_12 Start_5 StartInt_2)))
   (StartBool Bool (false true (and StartBool_2 StartBool_1) (str.< Start_13 Start_2) (str.<= Start_11 Start_9) (str.suffixof Start_7 Start_9) (= StartInt_3 StartInt_4) (<= StartInt_2 StartInt_5)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.< Start_10 Start_6) (str.<= Start_10 Start_12) (str.suffixof Start_11 Start_9) (str.contains Start_16 Start_12) (<= StartInt StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start_8 Start_8) (str.prefixof Start_9 Start_8) (= Start_1 Start_4)))
   (Start_14 String (x (str.++ Start_16 Start_11) (str.at Start_12 StartInt) (str.substr Start_17 StartInt_9 StartInt_2) (str.replace Start_11 Start_17 Start_12) (ite StartBool Start_13 Start_14)))
   (Start_4 String ("0" (str.at Start_1 StartInt) (str.substr Start_3 StartInt StartInt_3) (str.replace Start_5 Start_6 Start_7) (ite StartBool Start Start_1)))
   (StartInt_5 Int (0 (str.to_int Start_4)))
   (Start_7 String ("0" (str.++ Start_1 Start_7) (str.at Start_1 StartInt) (str.substr Start_2 StartInt_2 StartInt_4) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start StartInt_2)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.indexof Start_7 Start_2 StartInt_4) (str.to_int Start_2)))
   (Start_8 String ("" (str.at Start_4 StartInt_6) (str.substr Start_6 StartInt_3 StartInt_6) (str.replace Start_7 Start_2 Start_1)))
   (Start_6 String (y (str.at Start_6 StartInt_1) (str.replace Start_2 Start_6 Start_1) (str.from_int StartInt_6) (ite StartBool_1 Start_3 Start_1)))
   (Start_1 String ("a"))
   (Start_9 String ("" "b" (ite StartBool_1 Start_9 Start_6)))
   (StartBool_3 Bool (true false (not StartBool_1) (str.< Start_17 Start_1) (str.<= Start_9 Start_10) (str.suffixof Start_15 Start_4) (str.contains Start Start_8)))
   (StartInt_8 Int (0 (str.to_int Start_6)))
   (Start_5 String ("b" (str.++ Start_3 Start_4) (str.replace Start_4 Start_3 Start_9) (str.from_int StartInt_4)))
   (StartInt_3 Int (0 1 (str.len Start_10) (str.indexof Start_1 Start_5 StartInt_1) (str.to_int Start_1)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start Start_1 StartInt_2) (str.to_int Start_1)))
   (Start_10 String ("a" (str.++ Start_9 Start_6) (str.substr Start_1 StartInt StartInt_1)))
   (Start_3 String ("1" (str.at Start_8 StartInt_7)))
   (StartInt_9 Int (1 0 (str.len Start_9)))
   (StartInt_7 Int (0 (str.len Start_11)))
   (Start_12 String ("" (str.++ Start Start_3) (str.substr Start_6 StartInt_2 StartInt_8) (str.from_int StartInt_1) (ite StartBool_1 Start Start_2)))
   (Start_11 String (x "b" (str.++ Start Start_2) (str.at Start_10 StartInt) (str.from_int StartInt_7)))
   (Start_17 String (y "0" "a" x "b" "1" "" (str.++ Start_9 Start_15) (str.at Start_5 StartInt_4) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_3 Start_8 Start_10)))
   (StartInt_6 Int (0 (str.len Start) (str.to_int Start_3)))
   (Start_2 String ("1" (str.++ Start_2 Start_3) (str.replace Start_2 Start Start_4)))
   (Start_13 String ("0" y "a" "" (str.++ Start_6 Start_8) (str.replace Start_4 Start_14 Start_15) (str.from_int StartInt_2)))
   (Start_15 String (y (str.++ Start_5 Start_9) (str.from_int StartInt_8) (ite StartBool_1 Start_2 Start_16)))
   (Start_16 String ("0" (str.substr Start_12 StartInt_3 StartInt_6) (str.from_int StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.substr y 0 (str.len x)) "0")))

(check-synth)
