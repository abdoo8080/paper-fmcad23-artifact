(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_8 String) (Start_3 String) (Start_9 String) (Start_7 String) (Start_2 String) (StartBool_1 Bool) (Start_4 String) (StartBool_3 Bool) (StartInt_2 Int) (Start_5 String) (StartInt_6 Int) (StartInt_3 Int) (StartBool_4 Bool) (Start_1 String) (StartInt_4 Int) (StartInt_5 Int) (Start_6 String) (StartBool_2 Bool))
  ((Start String ("1" "a" x (str.++ Start Start_1) (str.replace Start_1 Start Start) (ite StartBool Start Start_1)))
   (StartInt Int (0 (str.len Start_7) (str.indexof Start_6 Start_5 StartInt_4)))
   (StartBool Bool (false true (and StartBool_3 StartBool_4) (str.< Start_4 Start_6) (str.prefixof Start_4 Start_1) (= Start_8 Start_7)))
   (StartInt_1 Int (0 1 (str.len Start_8) (str.indexof Start_6 Start StartInt_3) (str.to_int Start_7)))
   (Start_8 String (y "" (str.++ Start_4 Start_4) (str.at Start_7 StartInt_1) (str.from_int StartInt) (ite StartBool_3 Start_6 Start_3)))
   (Start_3 String ("" "b" (str.replace Start_8 Start_2 Start)))
   (Start_9 String (x "a" (str.++ Start_7 Start_9) (str.replace Start_7 Start_3 Start_8)))
   (Start_7 String (x "1" "" "a" y "0" "b" (str.substr Start_7 StartInt StartInt_5) (str.replace Start_3 Start_1 Start_3)))
   (Start_2 String ("a" y (str.++ Start_4 Start_2) (str.substr Start_9 StartInt_4 StartInt_2)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool StartBool_3) (str.< Start_3 Start_1) (str.suffixof Start_2 Start_4) (<= StartInt StartInt_2)))
   (Start_4 String ("0" (str.replace Start_3 Start Start_1) (str.from_int StartInt_1) (ite StartBool_4 Start_1 Start_5)))
   (StartBool_3 Bool (false true (and StartBool StartBool_4) (= Start_4 Start_6) (= StartInt_2 StartInt_2) (<= StartInt_1 StartInt_3)))
   (StartInt_2 Int (0 1 (str.to_int Start_2)))
   (Start_5 String ("b" (str.substr Start_4 StartInt StartInt) (str.from_int StartInt_3)))
   (StartInt_6 Int (1 0))
   (StartInt_3 Int (1))
   (StartBool_4 Bool (true false (not StartBool_2) (str.suffixof Start_4 Start_5)))
   (Start_1 String ("1" (str.++ Start_2 Start_2) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_3 Start_2 Start_1) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_4 Int (1 0 (str.len Start_3) (str.indexof Start_6 Start_5 StartInt_5)))
   (StartInt_5 Int (1 (str.indexof Start_6 Start_3 StartInt_3)))
   (Start_6 String ("0" "a" (str.++ Start_2 Start_3) (str.substr Start_1 StartInt StartInt_4)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.contains Start_4 Start_7) (<= StartInt_6 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.at "b" (str.indexof "0" y 1)) y)))

(check-synth)
