(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_16 String) (StartInt_9 Int) (StartInt_8 Int) (StartBool_2 Bool) (Start_7 String) (Start_9 String) (StartInt_4 Int) (StartInt_5 Int) (Start_14 String) (Start_5 String) (Start_10 String) (Start_1 String) (Start_3 String) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_1 Int) (Start_8 String) (Start_13 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_4 String) (StartInt_3 Int) (StartBool_5 Bool) (Start_12 String) (Start_11 String) (Start_2 String) (Start_6 String) (StartInt_7 Int) (StartInt_6 Int) (Start_15 String))
  ((Start String (y "b" (str.substr Start_1 StartInt_1 StartInt) (ite StartBool Start Start)))
   (StartInt Int (0 (str.len Start_13) (str.indexof Start_9 Start_15 StartInt)))
   (StartBool Bool (false true (and StartBool_5 StartBool_6) (str.suffixof Start_3 Start_15) (str.contains Start_16 Start_11) (= Start_2 Start_7) (= StartInt_3 StartInt_8) (<= StartInt_8 StartInt_4)))
   (StartBool_6 Bool (true false (and StartBool_3 StartBool_5) (= StartInt_4 StartInt_3) (<= StartInt_1 StartInt_9)))
   (Start_16 String (y x "0" "" (str.at Start_5 StartInt_8) (str.replace Start_12 Start_3 Start_11) (str.from_int StartInt) (ite StartBool_6 Start_6 Start_10)))
   (StartInt_9 Int (1 0 (str.to_int Start_15)))
   (StartInt_8 Int (0 (str.len Start_3)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.<= Start_8 Start) (str.prefixof Start Start_5) (str.contains Start_2 Start_1) (= StartInt_1 StartInt_5) (<= StartInt_5 StartInt_5)))
   (Start_7 String (x (str.++ Start_2 Start_1) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_8 Start Start_7) (ite StartBool_1 Start_8 Start)))
   (Start_9 String ("a" "0" (str.at Start_4 StartInt_1) (str.replace Start_8 Start_8 Start_3) (ite StartBool_2 Start Start_7)))
   (StartInt_4 Int (0 1 (str.indexof Start_3 Start_7 StartInt_2)))
   (StartInt_5 Int (1 (str.to_int Start_9)))
   (Start_14 String ("a" (str.at Start_11 StartInt_3) (str.substr Start_14 StartInt_3 StartInt_6) (str.from_int StartInt_5) (ite StartBool_4 Start Start_13)))
   (Start_5 String (y (str.substr Start_3 StartInt StartInt_1) (ite StartBool Start_4 Start)))
   (Start_10 String ("1" (str.++ Start_9 Start_5) (str.replace Start_2 Start_7 Start_5) (ite StartBool_1 Start_4 Start_6)))
   (Start_1 String ("b" "0" "" (str.from_int StartInt_2)))
   (Start_3 String ("a" (str.++ Start_6 Start_6) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_1 Start_5 Start) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.< Start Start) (str.<= Start_8 Start_4) (str.prefixof Start Start_9) (str.suffixof Start_1 Start_7) (str.contains Start_9 Start_10) (= Start_10 Start_2)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.indexof Start_3 Start_4 StartInt_2)))
   (StartInt_1 Int (1))
   (Start_8 String ("a" "1" "" "b" x (str.replace Start_11 Start_2 Start_6) (ite StartBool_3 Start_3 Start_10)))
   (Start_13 String ("b" (str.++ Start Start_6) (str.at Start_2 StartInt_5) (str.replace Start_13 Start_6 Start_10) (ite StartBool_2 Start_8 Start_5)))
   (StartBool_3 Bool (true false (and StartBool_4 StartBool) (str.prefixof Start_10 Start_4) (str.suffixof Start_4 Start_4) (<= StartInt_2 StartInt)))
   (StartBool_4 Bool (false (and StartBool_5 StartBool_1) (str.<= Start_6 Start_8) (str.prefixof Start_8 Start_7) (str.suffixof Start_11 Start) (<= StartInt_2 StartInt_1)))
   (Start_4 String ("b" x (str.++ Start_5 Start) (str.at Start_3 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_4 Start_2)))
   (StartInt_3 Int (1))
   (StartBool_5 Bool (true false (str.< Start Start_1) (str.prefixof Start_10 Start_6) (str.suffixof Start_4 Start_12) (str.contains Start_9 Start_7) (= StartInt_1 StartInt_4) (<= StartInt_5 StartInt_4)))
   (Start_12 String ("0" "b" (str.++ Start Start_7) (str.substr Start_8 StartInt_4 StartInt_1)))
   (Start_11 String (y (str.at Start_1 StartInt_1) (str.substr Start_5 StartInt_4 StartInt_2) (ite StartBool_1 Start_13 Start_6)))
   (Start_2 String ("b" "0" "1" "a" "" y x (str.++ Start_13 Start_13) (str.at Start_6 StartInt_1) (str.substr Start_12 StartInt_2 StartInt_6) (str.from_int StartInt_7) (ite StartBool_2 Start_14 Start_6)))
   (Start_6 String ("b" (str.substr Start_7 StartInt_1 StartInt_1) (str.replace Start_2 Start_5 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_10 Start_3)))
   (StartInt_7 Int (1 0 (str.to_int Start_2)))
   (StartInt_6 Int (1 0 (str.len Start_10) (str.indexof Start_2 Start_12 StartInt_2) (str.to_int Start_2)))
   (Start_15 String (x (str.at Start_11 StartInt_8) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "b" (str.replace "1" y x))))

(check-synth)
