(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (StartInt_1 Int) (Start_3 String) (Start_4 String) (StartInt_4 Int) (StartInt_2 Int) (Start_5 String) (StartInt_3 Int) (Start_2 String) (Start_1 String) (Start_7 String))
  ((Start String ("b" (str.++ Start_1 Start_1) (str.substr Start StartInt StartInt_1) (str.replace Start Start_1 Start) (str.from_int StartInt) (ite StartBool Start Start_1)))
   (StartInt Int (0 (str.indexof Start_3 Start_3 StartInt_3)))
   (StartBool Bool (false true (str.< Start_5 Start) (str.<= Start_2 Start_6) (str.prefixof Start_3 Start) (str.contains Start Start_3) (= Start_7 Start_3) (= StartInt_1 StartInt_4) (<= StartInt_3 StartInt_2)))
   (Start_6 String (x "1" (str.from_int StartInt_4)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_2 Start_3 StartInt_1)))
   (Start_3 String (y x "a" "b" (str.++ Start Start_1) (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start_4 Start Start_2) (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (Start_4 String ("0" "b" x "" "a" (str.at Start_2 StartInt) (ite StartBool Start_3 Start_2)))
   (StartInt_4 Int (0))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.to_int Start_5)))
   (Start_5 String ("1" "" "0" (str.++ Start_1 Start_4) (str.at Start_3 StartInt) (str.substr Start_3 StartInt StartInt_1) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_5 StartInt_1)))
   (Start_2 String ("0" (str.++ Start_5 Start_2) (str.from_int StartInt_2)))
   (Start_1 String ("" (str.++ Start_2 Start_1) (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_2)))
   (Start_7 String (y "" "a" (str.replace Start_2 Start_7 Start_2) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" x (str.at y (str.indexof x "0" 1)))))

(check-synth)
