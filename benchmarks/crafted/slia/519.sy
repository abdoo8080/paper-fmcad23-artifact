(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartInt_5 Int) (Start_6 String) (Start_14 String) (Start_13 String) (Start_1 String) (Start_11 String) (StartInt_1 Int) (StartBool_1 Bool) (Start_3 String) (Start_5 String) (StartInt_2 Int) (Start_4 String) (Start_7 String) (Start_8 String) (Start_12 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_3 Int) (Start_9 String) (Start_10 String))
  ((Start String (y "a" (str.at Start StartInt) (str.substr Start_1 StartInt StartInt_1)))
   (StartInt Int (0 1 (str.len Start_13) (str.indexof Start_3 Start_13 StartInt_5)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_1 StartBool_1) (str.prefixof Start_13 Start_7) (str.contains Start_7 Start_9) (= StartInt_3 StartInt_1) (<= StartInt_2 StartInt_1)))
   (Start_2 String (x "0" y (str.at Start_5 StartInt_3) (str.substr Start_6 StartInt_5 StartInt_3) (str.replace Start_13 Start_9 Start_10)))
   (StartInt_5 Int (1 (str.indexof Start_5 Start_2 StartInt_2)))
   (Start_6 String ("0" x y "a" (str.substr Start_12 StartInt_5 StartInt_4) (str.replace Start_2 Start_6 Start_7)))
   (Start_14 String (y "a" (str.++ Start_13 Start_8)))
   (Start_13 String (y (str.++ Start_11 Start_1) (str.substr Start_4 StartInt_4 StartInt_3) (str.replace Start Start_14 Start_9) (ite StartBool_1 Start_9 Start_10)))
   (Start_1 String (y (str.at Start_5 StartInt_4) (str.substr Start_8 StartInt StartInt_2) (ite StartBool_2 Start_2 Start_6)))
   (Start_11 String ("1" y "a" (str.++ Start_12 Start_4) (str.replace Start_3 Start_2 Start_11)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start_2 Start_1 StartInt_1) (str.to_int Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.<= Start Start) (str.contains Start_7 Start_2) (= Start_4 Start_3) (= StartInt StartInt_2) (<= StartInt StartInt_2)))
   (Start_3 String ("a" "" (str.replace Start_4 Start Start_5)))
   (Start_5 String ("0" "b" (str.++ Start_1 Start_2) (str.replace Start_5 Start_3 Start_5)))
   (StartInt_2 Int (1 0 (str.len Start_5) (str.indexof Start_3 Start StartInt)))
   (Start_4 String ("b" "1" x (str.++ Start_1 Start_2) (str.replace Start_1 Start_1 Start_6) (ite StartBool_1 Start_1 Start)))
   (Start_7 String (y "a" "1" "0" (str.at Start_3 StartInt) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_1 Start_5 Start_8)))
   (Start_8 String ("b" "a" (str.substr Start_8 StartInt_1 StartInt)))
   (Start_12 String (y (str.at Start_6 StartInt_1) (str.substr Start_11 StartInt_1 StartInt) (str.replace Start_12 Start_4 Start_13)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool StartBool) (str.prefixof Start_1 Start_2) (str.suffixof Start_6 Start_2) (str.contains Start_8 Start_5) (= Start_9 Start_9) (= StartInt_1 StartInt_1) (<= StartInt_2 StartInt_2)))
   (StartInt_4 Int (1))
   (StartInt_3 Int (0 (str.len Start_6) (str.indexof Start_9 Start_10 StartInt_1) (str.to_int Start_3)))
   (Start_9 String ("b" "0" (str.++ Start_1 Start_9) (str.at Start_4 StartInt) (str.from_int StartInt_3)))
   (Start_10 String (y x "b" (str.at Start_11 StartInt_1) (ite StartBool Start_7 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace y (str.substr y 0 1) "a")))))

(check-synth)
