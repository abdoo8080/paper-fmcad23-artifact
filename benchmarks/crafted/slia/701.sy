(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_8 String) (StartInt_7 Int) (Start_13 String) (StartInt_8 Int) (Start_3 String) (Start_6 String) (StartBool_1 Bool) (Start_4 String) (Start_5 String) (Start_2 String) (StartInt_10 Int) (StartInt_4 Int) (Start_14 String) (StartInt_2 Int) (Start_10 String) (StartInt_1 Int) (Start_7 String) (Start_12 String) (StartBool_2 Bool) (Start_15 String) (StartBool_4 Bool) (Start_1 String) (StartInt_9 Int) (StartInt_6 Int) (Start_11 String) (StartInt_5 Int) (StartBool_3 Bool) (StartInt_3 Int))
  ((Start String ("a" "0" (str.substr Start StartInt_1 StartInt) (str.replace Start_1 Start Start_2) (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (true (not StartBool) (str.prefixof Start_2 Start_5) (str.suffixof Start_8 Start_11) (str.contains Start_3 Start_11)))
   (Start_9 String ("1" x "b" (str.++ Start_4 Start_1) (str.at Start_6 StartInt_5) (str.substr Start_8 StartInt_7 StartInt_6) (str.replace Start_2 Start_3 Start_9) (ite StartBool_2 Start_10 Start_11)))
   (Start_8 String ("1" y (str.++ Start_8 Start_9) (str.at Start_1 StartInt_3) (str.substr Start_7 StartInt_3 StartInt_7) (str.replace Start_2 Start Start_7) (str.from_int StartInt_8) (ite StartBool_1 Start_9 Start_8)))
   (StartInt_7 Int (1 (str.len Start_8) (str.indexof Start Start_5 StartInt_8)))
   (Start_13 String ("a" (str.at Start_10 StartInt_3) (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_1)))
   (StartInt_8 Int (1 0 (str.indexof Start_6 Start_7 StartInt_5)))
   (Start_3 String ("a" (str.++ Start_1 Start_1) (str.at Start_3 StartInt_5) (str.substr Start_1 StartInt_6 StartInt) (str.from_int StartInt_7) (ite StartBool_1 Start_6 Start_3)))
   (Start_6 String ("1" (str.++ Start_4 Start_2) (str.at Start_6 StartInt_1) (str.substr Start_7 StartInt_6 StartInt_2) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.prefixof Start_4 Start_5) (<= StartInt_2 StartInt)))
   (Start_4 String (x (str.substr Start_2 StartInt_1 StartInt_4) (str.replace Start_1 Start_5 Start_5) (str.from_int StartInt_2)))
   (Start_5 String ("0" (str.++ Start_4 Start_5) (str.at Start_2 StartInt_4) (str.replace Start Start_1 Start_3)))
   (Start_2 String (x (str.at Start_2 StartInt_2) (str.substr Start_1 StartInt_3 StartInt_2) (str.replace Start Start_3 Start_3) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_10 Int (1 (str.to_int Start_10)))
   (StartInt_4 Int (0 1 (str.indexof Start_2 Start_2 StartInt_1)))
   (Start_14 String ("a" (str.at Start_1 StartInt_8) (str.substr Start_1 StartInt_5 StartInt_10)))
   (StartInt_2 Int (0 (str.len Start_6)))
   (Start_10 String (y (str.++ Start_6 Start_2) (str.at Start_1 StartInt_2) (str.replace Start_6 Start_10 Start) (str.from_int StartInt) (ite StartBool Start_12 Start_6)))
   (StartInt_1 Int (0 1 (str.indexof Start_10 Start_5 StartInt_7) (str.to_int Start_15)))
   (Start_7 String (y "b" (str.++ Start_5 Start_6) (str.at Start_4 StartInt_7) (str.substr Start_3 StartInt StartInt_4)))
   (Start_12 String (y "0" x (str.++ Start_4 Start) (str.at Start_5 StartInt_4) (ite StartBool_1 Start_6 Start_8)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_3 StartBool_4) (str.< Start_2 Start_11) (str.contains Start_4 Start_12)))
   (Start_15 String ("a" "b" "0" (str.from_int StartInt_6)))
   (StartBool_4 Bool (false true (not StartBool_1) (str.< Start_5 Start_5) (str.<= Start_1 Start_4) (str.prefixof Start_11 Start) (str.contains Start_4 Start_6) (= StartInt_5 StartInt_8) (<= StartInt_2 StartInt_9)))
   (Start_1 String ("0" (str.at Start_3 StartInt_4) (str.from_int StartInt_2) (ite StartBool_2 Start_14 Start_1)))
   (StartInt_9 Int (1 0 (str.indexof Start_1 Start StartInt_10) (str.to_int Start_9)))
   (StartInt_6 Int (1 0))
   (Start_11 String ("b" (str.from_int StartInt_5) (ite StartBool_1 Start Start_2)))
   (StartInt_5 Int (0 (str.indexof Start_8 Start_8 StartInt_1)))
   (StartBool_3 Bool (false (str.<= Start_7 Start_2) (str.prefixof Start_8 Start_13) (str.suffixof Start_2 Start_3) (str.contains Start_9 Start_7) (= Start Start_10)))
   (StartInt_3 Int (0 1 (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.replace (str.substr (str.replace "b" x y) 1 1) "a" "b")))))

(check-synth)
