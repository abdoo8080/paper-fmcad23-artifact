(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_13 String) (StartInt_8 Int) (Start_5 String) (Start_14 String) (StartInt_5 Int) (Start_7 String) (StartInt_9 Int) (StartInt_6 Int) (StartInt_4 Int) (Start_11 String) (Start_1 String) (Start_6 String) (StartInt_2 Int) (StartInt_7 Int) (Start_3 String) (StartBool_1 Bool) (Start_16 String) (StartInt_1 Int) (Start_8 String) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_10 Int) (Start_4 String) (Start_10 String) (Start_2 String) (Start_12 String) (Start_9 String) (Start_17 String) (Start_15 String))
  ((Start String ("b" (str.++ Start Start)))
   (StartInt Int (0 (str.indexof Start_1 Start StartInt_1) (str.to_int Start)))
   (StartBool Bool (true (str.< Start_1 Start_11) (str.prefixof Start_8 Start_4) (str.contains Start_6 Start_4) (<= StartInt_3 StartInt_8)))
   (Start_18 String (y "1" "0" "" (str.at Start_9 StartInt_6) (str.substr Start_17 StartInt_3 StartInt_10) (str.replace Start_12 Start_10 Start_16) (str.from_int StartInt)))
   (Start_13 String ("1" "0" y (str.++ Start_11 Start_9) (str.at Start_11 StartInt_2) (str.substr Start StartInt_4 StartInt_7) (ite StartBool Start_9 Start_14)))
   (StartInt_8 Int (1 0 (str.to_int Start_3)))
   (Start_5 String ("0" (str.++ Start_3 Start_1) (str.at Start_8 StartInt_6) (str.substr Start_5 StartInt_3 StartInt_7) (str.replace Start_5 Start_7 Start_5) (str.from_int StartInt_8)))
   (Start_14 String ("1" y x "a" "b" "" (str.substr Start_11 StartInt_5 StartInt)))
   (StartInt_5 Int (1 (str.to_int Start_6)))
   (Start_7 String ("b" (str.++ Start_7 Start_1) (str.substr Start_7 StartInt_3 StartInt_5)))
   (StartInt_9 Int (1 0 (str.len Start_5)))
   (StartInt_6 Int (1 (str.len Start_3)))
   (StartInt_4 Int (1 (str.len Start) (str.indexof Start Start_3 StartInt) (str.to_int Start_7)))
   (Start_11 String ("0" (str.++ Start_14 Start_11) (str.at Start_7 StartInt_8) (str.from_int StartInt_5) (ite StartBool_1 Start Start_7)))
   (Start_1 String ("b" (str.replace Start_9 Start_1 Start_18) (ite StartBool_2 Start_8 Start_15)))
   (Start_6 String ("b" (str.at Start_2 StartInt_3) (str.substr Start_5 StartInt_4 StartInt_4) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_3 Start StartInt) (str.to_int Start_3)))
   (StartInt_7 Int (1 0 (str.indexof Start Start_2 StartInt_3) (str.to_int Start)))
   (Start_3 String ("b" (str.++ Start_4 Start_2) (str.at Start_4 StartInt_3) (str.replace Start_4 Start_5 Start_6)))
   (StartBool_1 Bool (false true (str.prefixof Start_3 Start_8) (str.suffixof Start_1 Start_9) (str.contains Start_10 Start_9) (= Start_1 Start) (= StartInt_8 StartInt_9)))
   (Start_16 String ("" (str.at Start_5 StartInt_4)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start_1 Start StartInt_2)))
   (Start_8 String ("a" "1" "0" (str.substr Start_3 StartInt_4 StartInt_5) (ite StartBool Start_8 Start_1)))
   (StartBool_2 Bool (true (not StartBool_1) (str.contains Start_5 Start_13) (<= StartInt StartInt_4)))
   (StartInt_3 Int (1 (str.len Start_1)))
   (StartInt_10 Int (0 1 (str.len Start_4) (str.to_int Start_15)))
   (Start_4 String ("b" "a" "0" (str.++ Start_4 Start_8) (str.from_int StartInt_3) (ite StartBool_1 Start_1 Start_7)))
   (Start_10 String ("" (str.++ Start_6 Start_11) (str.replace Start_11 Start_12 Start_12) (str.from_int StartInt_1) (ite StartBool_2 Start_10 Start_5)))
   (Start_2 String ("0" x (str.substr Start_9 StartInt_6 StartInt_10) (str.replace Start_18 Start_9 Start_10) (str.from_int StartInt_3) (ite StartBool Start_9 Start_8)))
   (Start_12 String ("0" "" (str.++ Start_1 Start_11) (str.at Start_12 StartInt_9) (str.replace Start_12 Start_7 Start_9)))
   (Start_9 String ("a" y "" (str.++ Start Start_7) (str.at Start_13 StartInt_7) (str.substr Start_8 StartInt_1 StartInt_10) (str.replace Start_14 Start_15 Start_14) (str.from_int StartInt_10) (ite StartBool_1 Start_16 Start_17)))
   (Start_17 String (x (str.substr Start_7 StartInt_4 StartInt_7) (str.from_int StartInt_5) (ite StartBool_1 Start_10 Start_15)))
   (Start_15 String ("0" "b" x (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.replace x "0" "")))))

(check-synth)
