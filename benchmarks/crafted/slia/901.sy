(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_5 Int) (Start_2 String) (StartInt_4 Int) (StartInt_2 Int) (Start_3 String) (Start_4 String) (Start_5 String) (StartInt_1 Int) (StartInt_3 Int) (Start_6 String))
  ((Start String ("0" "1" (str.from_int StartInt_1) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 (str.len Start_4)))
   (StartBool Bool (true (str.<= Start_3 Start_1) (str.prefixof Start Start) (str.suffixof Start_5 Start) (str.contains Start_2 Start_5) (= Start Start_2) (= StartInt_2 StartInt_4)))
   (Start_1 String (x (str.substr Start_1 StartInt_1 StartInt) (str.replace Start Start_2 Start_1)))
   (StartInt_5 Int (0 (str.to_int Start)))
   (Start_2 String ("b" "0" (str.++ Start_2 Start) (str.at Start_2 StartInt_2) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_1 Start_1)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_6 Start StartInt_3)))
   (StartInt_2 Int (1 (str.indexof Start_3 Start_3 StartInt_1)))
   (Start_3 String ("" "b" "a" x "0" (str.at Start_2 StartInt_2) (str.substr Start_3 StartInt StartInt_3) (str.replace Start_2 Start_1 Start_1) (str.from_int StartInt_3)))
   (Start_4 String ("0" y "1" (str.++ Start_1 Start) (str.at Start_3 StartInt) (ite StartBool Start_5 Start_3)))
   (Start_5 String ("" (str.++ Start_3 Start_1) (str.substr Start_4 StartInt_1 StartInt_3) (str.from_int StartInt_3)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_1)))
   (StartInt_3 Int (1 0 (str.indexof Start_4 Start_4 StartInt_3)))
   (Start_6 String ("0" "" x (str.++ Start_5 Start_1) (str.at Start_3 StartInt_4) (str.substr Start_5 StartInt_5 StartInt_2) (str.replace Start_3 Start_4 Start_2) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y "a" "") "b" "0")))

(check-synth)
