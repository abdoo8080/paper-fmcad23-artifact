(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_9 String) (Start_8 String) (Start_7 String) (StartInt_5 Int) (StartInt_6 Int) (StartBool_2 Bool) (Start_6 String) (Start_2 String) (StartInt_1 Int) (Start_1 String) (StartInt_2 Int) (Start_4 String) (StartInt_4 Int) (StartInt_3 Int) (Start_3 String) (StartBool_1 Bool) (Start_5 String))
  ((Start String ("0" (str.++ Start Start) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0 (str.indexof Start_3 Start_5 StartInt)))
   (StartBool Bool (true false (str.suffixof Start_10 Start_4) (str.contains Start_7 Start_10) (= Start Start_2) (<= StartInt_3 StartInt_3)))
   (Start_10 String ("1" (str.substr Start_9 StartInt_5 StartInt_1) (str.replace Start_1 Start_6 Start_6) (str.from_int StartInt_3) (ite StartBool_2 Start_3 Start_8)))
   (Start_9 String ("0" (str.++ Start_1 Start_1) (str.replace Start_5 Start_1 Start_10)))
   (Start_8 String (y "1" (str.++ Start Start_1) (str.at Start StartInt_5) (str.substr Start_9 StartInt StartInt_6)))
   (Start_7 String (y (str.++ Start Start_6) (str.at Start_5 StartInt_3) (str.substr Start_3 StartInt_1 StartInt_6) (ite StartBool Start_8 Start_8)))
   (StartInt_5 Int (0 1 (str.indexof Start_6 Start_4 StartInt_5) (str.to_int Start_7)))
   (StartInt_6 Int (1 (str.indexof Start_5 Start_1 StartInt) (str.to_int Start_5)))
   (StartBool_2 Bool (true false (and StartBool StartBool) (str.prefixof Start_3 Start_3) (str.suffixof Start_1 Start_4) (str.contains Start_2 Start_2)))
   (Start_6 String ("0" (str.at Start_5 StartInt_3) (str.replace Start_4 Start_4 Start_6) (str.from_int StartInt_2) (ite StartBool_2 Start Start_3)))
   (Start_2 String ("b" (str.++ Start_2 Start) (str.substr Start_2 StartInt StartInt) (str.from_int StartInt) (ite StartBool Start_2 Start_1)))
   (StartInt_1 Int (0 (str.len Start) (str.to_int Start)))
   (Start_1 String ("1" y "" "b" (str.from_int StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.indexof Start Start_2 StartInt_1)))
   (Start_4 String ("1" y (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_4 StartInt_2) (str.replace Start_1 Start_3 Start_1) (ite StartBool_2 Start_3 Start)))
   (StartInt_4 Int (1 (str.indexof Start Start_3 StartInt)))
   (StartInt_3 Int (0 (str.to_int Start_3)))
   (Start_3 String ("a" (str.++ Start_2 Start_2) (str.at Start StartInt_2) (str.replace Start_3 Start_1 Start_4)))
   (StartBool_1 Bool (true false (not StartBool) (str.<= Start_2 Start_3) (= Start_1 Start_2) (= StartInt_1 StartInt_2)))
   (Start_5 String ("a" (str.++ Start_1 Start_3) (str.at Start_1 StartInt_4) (str.substr Start_4 StartInt_5 StartInt_6) (str.replace Start_5 Start_5 Start_3) (ite StartBool_2 Start Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ "b" (str.at y 1)) (str.indexof "0" "" (str.indexof "a" x 0)))))

(check-synth)
