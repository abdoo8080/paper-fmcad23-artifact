(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_2 String) (StartBool_3 Bool) (StartInt_8 Int) (StartInt_7 Int) (Start_11 String) (Start_10 String) (Start_13 String) (StartInt_6 Int) (Start_4 String) (Start_3 String) (Start_14 String) (StartInt_3 Int) (Start_12 String) (StartInt_2 Int) (Start_8 String) (StartBool_1 Bool) (Start_5 String) (Start_6 String) (StartInt_1 Int) (StartInt_4 Int) (Start_7 String) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_9 Int) (Start_9 String))
  ((Start String (y "a" "1" "b" (str.++ Start_1 Start_2) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_7 Start_2 StartInt_6)))
   (StartBool Bool (false (and StartBool_3 StartBool) (str.< Start_2 Start_4) (str.<= Start_14 Start_4) (str.prefixof Start_13 Start) (str.contains Start_12 Start_6) (= StartInt_5 StartInt_1)))
   (Start_1 String (x (str.at Start_2 StartInt_5)))
   (Start_2 String ("b" "a" "0" x (str.++ Start_11 Start_4) (str.at Start_8 StartInt_7) (ite StartBool_2 Start_10 Start_2)))
   (StartBool_3 Bool (false true (not StartBool) (and StartBool StartBool_2) (str.contains Start_9 Start_3) (= StartInt_6 StartInt_2) (<= StartInt StartInt_4)))
   (StartInt_8 Int (1 (str.len Start_13) (str.indexof Start_13 Start_1 StartInt_2)))
   (StartInt_7 Int (1 (str.indexof Start_5 Start_7 StartInt_1)))
   (Start_11 String ("1" y (str.at Start_3 StartInt_6) (str.substr Start_6 StartInt_6 StartInt_6) (str.replace Start_4 Start_6 Start_2) (ite StartBool_1 Start_12 Start_12)))
   (Start_10 String ("" "1" (str.++ Start_10 Start_6) (str.at Start_9 StartInt_6) (str.from_int StartInt_2)))
   (Start_13 String ("1" (str.substr Start_5 StartInt_3 StartInt_8) (str.replace Start_13 Start_10 Start_12) (str.from_int StartInt_6)))
   (StartInt_6 Int (1 0 (str.len Start) (str.indexof Start_11 Start_1 StartInt_1) (str.to_int Start_6)))
   (Start_4 String ("" (str.replace Start Start Start) (str.from_int StartInt_1)))
   (Start_3 String ("a" x "0" "b" y (str.replace Start Start_5 Start_4) (str.from_int StartInt)))
   (Start_14 String (y "1" (str.substr Start_13 StartInt_5 StartInt_3) (ite StartBool_1 Start_5 Start_5)))
   (StartInt_3 Int (1 (str.len Start)))
   (Start_12 String ("" (str.at Start_13 StartInt_7) (ite StartBool_2 Start_5 Start_13)))
   (StartInt_2 Int (0 (str.indexof Start_6 Start_1 StartInt_3)))
   (Start_8 String (x (str.++ Start_5 Start_5) (str.at Start_9 StartInt_2) (str.substr Start_13 StartInt_3 StartInt_8) (str.replace Start_1 Start_13 Start_9) (str.from_int StartInt_9) (ite StartBool_1 Start_14 Start)))
   (StartBool_1 Bool (true false (not StartBool_1) (str.< Start Start_3) (str.prefixof Start_3 Start_3) (= Start_3 Start_4)))
   (Start_5 String ("a" "1" "0" y (str.++ Start_4 Start) (str.substr Start_5 StartInt_2 StartInt_2) (str.replace Start_3 Start_4 Start_2) (str.from_int StartInt_3)))
   (Start_6 String (x (str.++ Start_1 Start_7) (str.at Start_7 StartInt_3) (str.substr Start_1 StartInt_4 StartInt_2) (str.replace Start_2 Start_3 Start_1)))
   (StartInt_1 Int (0 (str.indexof Start_3 Start_1 StartInt) (str.to_int Start_4)))
   (StartInt_4 Int (0 1 (str.indexof Start_4 Start StartInt_1)))
   (Start_7 String ("a" (str.++ Start_6 Start_4) (str.at Start_6 StartInt_5) (str.substr Start_4 StartInt_5 StartInt_4) (str.replace Start_4 Start_8 Start_5) (str.from_int StartInt_3) (ite StartBool_2 Start_7 Start_5)))
   (StartInt_5 Int (1 (str.len Start_6) (str.indexof Start_12 Start_8 StartInt_7)))
   (StartBool_2 Bool (false true (not StartBool_3) (str.<= Start_9 Start_1) (str.prefixof Start_7 Start_2) (str.suffixof Start_3 Start_2)))
   (StartInt_9 Int (0 (str.len Start_12)))
   (Start_9 String ("0" (str.++ Start_8 Start_2) (str.substr Start_4 StartInt_4 StartInt_3) (str.replace Start_10 Start_7 Start) (ite StartBool_1 Start_9 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof (str.replace "a" y "") y 1))))

(check-synth)
