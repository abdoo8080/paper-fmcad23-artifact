(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (StartInt_5 Int) (StartBool_3 Bool) (StartInt_4 Int) (Start_2 String) (Start_5 String) (Start_7 String) (Start_4 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_3 String) (Start_1 String) (Start_6 String) (StartInt_3 Int) (Start_9 String) (Start_8 String) (StartBool_2 Bool))
  ((Start String (y x (str.++ Start_1 Start_1) (str.from_int StartInt) (ite StartBool Start_2 Start)))
   (StartInt Int (1 0 (str.len Start_7) (str.indexof Start Start_1 StartInt_4)))
   (StartBool Bool (true (str.< Start_9 Start_3) (str.<= Start_5 Start_5) (str.contains Start_1 Start_8) (= Start Start_9)))
   (Start_10 String ("0" (str.at Start_3 StartInt_2) (str.substr Start_8 StartInt_4 StartInt)))
   (StartInt_5 Int (0 1))
   (StartBool_3 Bool (false (str.prefixof Start_8 Start_8) (str.suffixof Start_8 Start_5) (str.contains Start_10 Start_3) (= StartInt_4 StartInt) (<= StartInt_5 StartInt_4)))
   (StartInt_4 Int (1 0 (str.len Start_2)))
   (Start_2 String ("b" x (str.++ Start_3 Start_4) (str.from_int StartInt) (ite StartBool Start Start_4)))
   (Start_5 String ("" (str.at Start_2 StartInt_2)))
   (Start_7 String (y (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_6 Start_3 Start_4) (str.from_int StartInt_3)))
   (Start_4 String ("" (str.at Start_5 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start Start_4 Start_3)))
   (StartInt_1 Int (1 0 (str.indexof Start_5 Start_1 StartInt) (str.to_int Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start_6 Start_4) (str.suffixof Start_3 Start_3) (str.contains Start_8 Start_7) (= Start_2 Start) (= StartInt_3 StartInt_4)))
   (StartInt_2 Int (1 0 (str.indexof Start Start StartInt_2)))
   (Start_3 String (y x (str.substr Start_1 StartInt_1 StartInt)))
   (Start_1 String ("a" (str.at Start_4 StartInt_2) (str.substr Start_4 StartInt StartInt) (ite StartBool_1 Start Start_6)))
   (Start_6 String ("b" (str.++ Start_2 Start) (str.at Start StartInt_2) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_2) (ite StartBool_2 Start_7 Start_6)))
   (StartInt_3 Int (1 (str.to_int Start_4)))
   (Start_9 String (x "a" "1" "0" "" (str.++ Start_9 Start_7) (str.replace Start_7 Start_8 Start_2) (str.from_int StartInt_3) (ite StartBool_3 Start_1 Start_2)))
   (Start_8 String ("b" "0" (str.++ Start_1 Start) (str.at Start_8 StartInt_3) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool StartBool_2) (str.< Start Start_6) (str.<= Start_5 Start_2) (str.prefixof Start_1 Start_6) (str.contains Start_2 Start_6) (= StartInt_3 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.len y))))

(check-synth)
