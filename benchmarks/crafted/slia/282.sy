(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_6 Int) (Start_3 String) (Start_4 String) (Start_7 String) (StartInt_3 Int) (Start_12 String) (StartInt_1 Int) (StartInt_7 Int) (Start_9 String) (Start_2 String) (StartBool_2 Bool) (Start_6 String) (Start_5 String) (Start_8 String) (Start_10 String) (StartInt_2 Int) (StartBool_3 Bool) (StartBool_1 Bool) (Start_11 String) (StartInt_5 Int) (StartInt_4 Int))
  ((Start String ("" (str.replace Start_1 Start_1 Start) (ite StartBool_1 Start Start)))
   (StartInt Int (1 (str.to_int Start_7)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool StartBool) (str.< Start Start_7) (str.<= Start_4 Start_3) (str.prefixof Start Start_5) (= Start_5 Start_8) (= StartInt_4 StartInt_6) (<= StartInt_4 StartInt)))
   (Start_1 String (x "0" "b" "1" (str.++ Start_7 Start_6) (str.at Start_1 StartInt_1) (str.substr Start_7 StartInt_7 StartInt_4) (str.from_int StartInt) (ite StartBool_3 Start_4 Start_8)))
   (StartInt_6 Int (0 1 (str.indexof Start_7 Start_4 StartInt) (str.to_int Start_6)))
   (Start_3 String ("b" (str.++ Start_2 Start) (str.substr Start_9 StartInt_6 StartInt_7) (str.replace Start_1 Start_9 Start_2)))
   (Start_4 String (x y (str.substr Start_2 StartInt_1 StartInt_4) (str.replace Start_7 Start_1 Start_8) (str.from_int StartInt_3)))
   (Start_7 String ("1" "b" (str.++ Start_3 Start_6) (str.at Start_4 StartInt_5) (str.replace Start_4 Start_6 Start_10) (ite StartBool Start_6 Start_7)))
   (StartInt_3 Int (1 0 (str.indexof Start Start_6 StartInt_5) (str.to_int Start_10)))
   (Start_12 String ("b" (str.++ Start_11 Start) (ite StartBool_2 Start_6 Start_1)))
   (StartInt_1 Int (0 (str.len Start_1) (str.to_int Start)))
   (StartInt_7 Int (1 (str.len Start_8) (str.indexof Start_9 Start_10 StartInt_2)))
   (Start_9 String ("1" x (str.++ Start_2 Start_8) (str.at Start_9 StartInt) (str.substr Start_3 StartInt_2 StartInt_1) (ite StartBool_3 Start_10 Start_9)))
   (Start_2 String (y (str.from_int StartInt_1)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_1 StartBool_1) (str.prefixof Start_3 Start_2) (str.suffixof Start_4 Start_3) (str.contains Start_5 Start_2) (= Start_3 Start_6)))
   (Start_6 String ("" "0" "1" "b" (str.substr Start_4 StartInt StartInt_1) (str.from_int StartInt_1)))
   (Start_5 String (x "0" (str.at Start_4 StartInt_2) (str.substr Start_6 StartInt_2 StartInt_2) (str.replace Start_1 Start_2 Start_7) (str.from_int StartInt_3) (ite StartBool_2 Start_8 Start_5)))
   (Start_8 String ("1" (str.++ Start_8 Start_1) (str.replace Start_4 Start_7 Start_4) (ite StartBool_1 Start_9 Start_1)))
   (Start_10 String ("0"))
   (StartInt_2 Int (1 (str.len Start_1)))
   (StartBool_3 Bool (true (not StartBool_1) (str.< Start_3 Start_2) (str.<= Start_9 Start_2) (str.suffixof Start_6 Start_11) (str.contains Start_7 Start_8)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.< Start_2 Start_2) (str.prefixof Start_2 Start_1) (str.contains Start Start_2)))
   (Start_11 String (y "1" (str.at Start_7 StartInt_4) (str.replace Start_10 Start_2 Start_1) (ite StartBool_1 Start_2 Start_6)))
   (StartInt_5 Int (1 0 (str.len Start_9) (str.to_int Start_2)))
   (StartInt_4 Int (1 (str.len Start_12) (str.indexof Start_7 Start_10 StartInt_1) (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" (str.from_int (str.indexof "0" y 1)) "0")))

(check-synth)
