(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_8 Int) (Start_6 String) (StartInt_4 Int) (Start_12 String) (Start_11 String) (Start_8 String) (Start_5 String) (Start_16 String) (Start_10 String) (Start_3 String) (StartInt_1 Int) (Start_2 String) (StartInt_3 Int) (StartInt_5 Int) (StartBool_1 Bool) (Start_13 String) (Start_17 String) (Start_7 String) (StartBool_3 Bool) (Start_1 String) (Start_14 String) (Start_15 String) (Start_4 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_18 String) (StartInt_2 Int) (Start_9 String) (StartInt_7 Int))
  ((Start String ("" "0" (str.++ Start Start_1) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start_2)))
   (StartInt Int (1 0 (str.len Start_16)))
   (StartBool Bool (true false (not StartBool_4) (str.< Start_8 Start_9) (str.suffixof Start_6 Start_9) (str.contains Start_14 Start_5) (<= StartInt_3 StartInt_8)))
   (StartBool_4 Bool (false (not StartBool_1) (str.< Start_2 Start_4) (str.<= Start_4 Start_10) (str.suffixof Start_18 Start_18) (str.contains Start_5 Start_4) (= StartInt_5 StartInt_1) (<= StartInt_1 StartInt_1)))
   (StartInt_8 Int (0 1 (str.indexof Start_3 Start_2 StartInt_1)))
   (Start_6 String ("a" "b" "1" "" x (str.++ Start_6 Start_5) (str.replace Start_7 Start_8 Start_9)))
   (StartInt_4 Int (1 0 (str.indexof Start_6 Start_6 StartInt_3) (str.to_int Start_9)))
   (Start_12 String ("a" (str.++ Start_11 Start_13) (str.at Start_9 StartInt_5) (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt_5) (ite StartBool_2 Start_3 Start_12)))
   (Start_11 String ("" (str.at Start_2 StartInt) (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_11 Start_4 Start_6) (ite StartBool_2 Start_10 Start_11)))
   (Start_8 String ("1" (str.at Start_10 StartInt) (str.substr Start_11 StartInt StartInt_5) (str.replace Start_4 Start_7 Start_8)))
   (Start_5 String ("b" "0" (str.++ Start_4 Start_3) (str.at Start_2 StartInt_3) (str.substr Start StartInt_2 StartInt_1) (str.replace Start Start_6 Start_4) (str.from_int StartInt_1) (ite StartBool_2 Start_6 Start_3)))
   (Start_16 String (y "0" "1" (str.++ Start_1 Start_2) (str.at Start_17 StartInt_5) (str.substr Start_18 StartInt_3 StartInt_6) (str.replace Start_2 Start Start_11)))
   (Start_10 String ("" (str.++ Start_2 Start_10) (str.substr Start_12 StartInt_5 StartInt_1) (str.replace Start_4 Start_7 Start_5)))
   (Start_3 String ("" x (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_3 Start_2 Start_4) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_5)))
   (StartInt_1 Int (1 (str.to_int Start)))
   (Start_2 String ("0" "a" "" (str.++ Start Start_1) (str.substr Start_1 StartInt StartInt_1)))
   (StartInt_3 Int (0 1 (str.indexof Start_15 Start_16 StartInt_3)))
   (StartInt_5 Int (1))
   (StartBool_1 Bool (false true (str.< Start_11 Start_11) (str.prefixof Start Start_14) (str.suffixof Start_5 Start_18) (= StartInt_6 StartInt_4)))
   (Start_13 String ("b" (str.substr Start_14 StartInt_2 StartInt_3) (str.from_int StartInt)))
   (Start_17 String (y "" (str.substr Start_5 StartInt_4 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_11 Start_11)))
   (Start_7 String ("" y (str.from_int StartInt_2) (ite StartBool_3 Start_3 Start_11)))
   (StartBool_3 Bool (false true (not StartBool_2) (str.< Start_2 Start_5) (str.<= Start_2 Start_1) (str.prefixof Start_6 Start_15) (str.suffixof Start_3 Start_7) (str.contains Start_12 Start_8) (= Start Start) (<= StartInt_3 StartInt_3)))
   (Start_1 String ("0" x y (ite StartBool_1 Start_2 Start_3)))
   (Start_14 String (y "a" "" "1" "0" x "b" (str.replace Start_3 Start_14 Start_7) (str.from_int StartInt) (ite StartBool Start_5 Start)))
   (Start_15 String (y (str.++ Start_15 Start_3) (ite StartBool_2 Start_1 Start_2)))
   (Start_4 String (x "1" (str.++ Start_7 Start_8) (str.at Start_14 StartInt_2) (str.replace Start_7 Start_7 Start_10)))
   (StartBool_2 Bool (false (not StartBool_2) (str.<= Start Start_5) (str.contains Start_8 Start_8) (= Start_7 Start_9) (<= StartInt_2 StartInt_4)))
   (StartInt_6 Int (0 1 (str.len Start_4) (str.indexof Start_1 Start_15 StartInt_6) (str.to_int Start_11)))
   (Start_18 String ("a" (str.++ Start_14 Start_14) (str.replace Start_11 Start_16 Start_4) (ite StartBool_1 Start_2 Start_3)))
   (StartInt_2 Int (1 0 (str.len Start_10) (str.indexof Start_15 Start_16 StartInt_7)))
   (Start_9 String (y "b" x "a" "" "1" (str.at Start_8 StartInt_2) (str.substr Start_1 StartInt_4 StartInt_3)))
   (StartInt_7 Int (1 (str.indexof Start_10 Start_6 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 0) "1")))

(check-synth)
