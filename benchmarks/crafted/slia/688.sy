(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_12 String) (StartInt_2 Int) (Start_1 String) (Start_4 String) (Start_2 String) (Start_6 String) (Start_13 String) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_4 Int) (StartInt_3 Int) (StartInt_5 Int) (StartInt_7 Int) (Start_8 String) (StartBool_1 Bool) (StartInt_10 Int) (Start_7 String) (StartInt_6 Int) (Start_9 String) (StartInt_8 Int) (StartInt_9 Int) (StartBool_4 Bool) (Start_11 String) (Start_5 String) (Start_10 String) (Start_3 String) (StartBool_2 Bool))
  ((Start String (x "a" "1" "0" (str.++ Start_1 Start_2) (ite StartBool Start_3 Start_1)))
   (StartInt Int (1 (str.indexof Start_6 Start_3 StartInt_3) (str.to_int Start_1)))
   (StartBool Bool (true false (not StartBool_1) (str.<= Start_5 Start_2) (= Start_7 Start_5) (= StartInt_4 StartInt)))
   (StartBool_5 Bool (false true (not StartBool_5) (str.< Start_7 Start_3) (str.<= Start_3 Start_10) (str.suffixof Start_5 Start_7)))
   (Start_12 String (y (str.replace Start_6 Start_9 Start_3) (str.from_int StartInt_10) (ite StartBool_3 Start_2 Start_8)))
   (StartInt_2 Int (0 (str.indexof Start Start_6 StartInt) (str.to_int Start_5)))
   (Start_1 String ("" (str.++ Start_1 Start_2) (str.at Start StartInt_1) (str.substr Start_2 StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_1 Start_5)))
   (Start_4 String (x "0" (str.++ Start_3 Start_1) (str.at Start_4 StartInt) (str.substr Start_4 StartInt_1 StartInt)))
   (Start_2 String ("1" x (str.at Start_2 StartInt_1) (str.replace Start_1 Start_4 Start_3)))
   (Start_6 String ("" "1" (str.replace Start Start_2 Start_2)))
   (Start_13 String (x "1" (str.at Start_10 StartInt_6) (str.substr Start_7 StartInt_7 StartInt_6) (str.replace Start_1 Start_1 Start_7) (ite StartBool_5 Start_10 Start_13)))
   (StartInt_1 Int (0 (str.to_int Start_3)))
   (StartBool_3 Bool (false true (not StartBool_4) (str.<= Start_6 Start_7) (str.prefixof Start_5 Start_5) (str.suffixof Start_6 Start_5) (str.contains Start_1 Start_9) (= StartInt_1 StartInt_9)))
   (StartInt_4 Int (1 (str.len Start_4) (str.indexof Start_8 Start_3 StartInt_2)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.to_int Start_6)))
   (StartInt_5 Int (1))
   (StartInt_7 Int (1))
   (Start_8 String (y "" "1" (str.at Start_2 StartInt_4) (str.replace Start_6 Start_1 Start_1) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false true (not StartBool_2) (and StartBool_3 StartBool) (str.< Start_7 Start_2) (str.prefixof Start Start_3) (str.suffixof Start_3 Start_3) (str.contains Start_6 Start_2) (= Start_9 Start_3) (<= StartInt_6 StartInt_7)))
   (StartInt_10 Int (0 1 (str.indexof Start_8 Start_9 StartInt)))
   (Start_7 String (y "b" (str.++ Start_8 Start_2) (str.at Start_1 StartInt_2) (str.substr Start_4 StartInt_3 StartInt_5) (ite StartBool Start_7 Start_1)))
   (StartInt_6 Int (0 1 (str.indexof Start_8 Start_9 StartInt_6)))
   (Start_9 String ("" y (str.at Start_7 StartInt_2) (str.substr Start_1 StartInt_8 StartInt) (str.from_int StartInt_6)))
   (StartInt_8 Int (0 1 (str.indexof Start_1 Start_6 StartInt_2) (str.to_int Start_1)))
   (StartInt_9 Int (0 (str.indexof Start_8 Start_2 StartInt_8)))
   (StartBool_4 Bool (false true (not StartBool) (and StartBool StartBool_2) (str.< Start_6 Start_10) (str.prefixof Start_10 Start_3) (str.suffixof Start_4 Start_9) (str.contains Start_9 Start_11) (= Start_8 Start) (<= StartInt_10 StartInt_3)))
   (Start_11 String ("b"))
   (Start_5 String (y (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_1 Start Start_5) (str.from_int StartInt_1)))
   (Start_10 String ("b" (str.++ Start_8 Start_9) (str.from_int StartInt_10)))
   (Start_3 String ("b" (str.substr Start_3 StartInt_1 StartInt)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_5) (str.< Start Start) (str.suffixof Start_12 Start_2) (str.contains Start_9 Start_2) (= Start_12 Start_13) (= StartInt_10 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "a" (str.at x 0))))

(check-synth)
