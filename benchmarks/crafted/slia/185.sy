(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (StartBool_2 Bool) (Start_12 String) (StartInt_6 Int) (Start_14 String) (Start_11 String) (Start_15 String) (StartInt_5 Int) (Start_6 String) (Start_13 String) (Start_1 String) (StartBool_1 Bool) (Start_7 String) (StartBool_4 Bool) (StartInt_4 Int) (StartInt_3 Int) (StartInt_2 Int) (Start_10 String) (Start_4 String) (StartBool_5 Bool) (StartBool_3 Bool) (Start_3 String) (StartInt_1 Int) (Start_8 String) (Start_2 String) (Start_9 String))
  ((Start String (x "b" (str.replace Start_1 Start_1 Start) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_9)))
   (StartBool Bool (false true (not StartBool_4) (str.<= Start_12 Start) (str.suffixof Start_4 Start_12) (str.contains Start_2 Start_2) (= StartInt_2 StartInt_4)))
   (Start_5 String ("" x (str.++ Start_10 Start_12) (str.substr Start_8 StartInt_2 StartInt_5) (str.replace Start Start_10 Start_9)))
   (StartBool_2 Bool (true (not StartBool_2) (str.< Start_12 Start_4) (str.prefixof Start_9 Start_7) (str.suffixof Start_3 Start_2) (= Start_2 Start) (<= StartInt_1 StartInt_3)))
   (Start_12 String ("0" "b" "" x "a" (str.++ Start_9 Start_3) (str.substr Start_13 StartInt StartInt_5) (ite StartBool Start_2 Start_4)))
   (StartInt_6 Int (1 0 (str.len Start_4) (str.indexof Start_3 Start_10 StartInt_2)))
   (Start_14 String ("0" x (str.++ Start_11 Start_6) (str.at Start_1 StartInt_5) (str.replace Start_4 Start_15 Start_1) (ite StartBool_3 Start_8 Start_12)))
   (Start_11 String ("b" (str.at Start_9 StartInt_3) (str.substr Start_11 StartInt StartInt_3) (str.replace Start Start_12 Start_7) (str.from_int StartInt_4)))
   (Start_15 String ("0" "b" (str.++ Start_8 Start_5) (str.substr Start_7 StartInt_2 StartInt_2) (str.replace Start_9 Start_10 Start_8) (str.from_int StartInt_2)))
   (StartInt_5 Int (1 0))
   (Start_6 String ("0" "a" (str.++ Start_11 Start_5) (str.substr Start_10 StartInt StartInt_2) (str.from_int StartInt_1)))
   (Start_13 String ("a" (str.++ Start_3 Start_4) (str.at Start_11 StartInt_5) (ite StartBool_2 Start_13 Start_6)))
   (Start_1 String ("a" "1" (str.++ Start_1 Start) (ite StartBool_1 Start_1 Start)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool) (str.<= Start_1 Start_2) (str.contains Start_3 Start_1) (= StartInt StartInt_1)))
   (Start_7 String (y (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_8 Start_8)))
   (StartBool_4 Bool (true (and StartBool_5 StartBool_3) (str.< Start_9 Start_15) (str.<= Start_3 Start_3)))
   (StartInt_4 Int (0))
   (StartInt_3 Int (0 (str.indexof Start_2 Start_10 StartInt) (str.to_int Start_4)))
   (StartInt_2 Int (0 1 (str.len Start) (str.indexof Start Start_1 StartInt) (str.to_int Start_4)))
   (Start_10 String ("1" (str.from_int StartInt)))
   (Start_4 String ("a" "1" x (str.substr Start StartInt_2 StartInt_2) (ite StartBool Start_4 Start_2)))
   (StartBool_5 Bool (true false (and StartBool StartBool) (str.< Start_8 Start_14) (str.<= Start_12 Start_5) (str.prefixof Start_3 Start_2) (<= StartInt_1 StartInt_6)))
   (StartBool_3 Bool (false (str.< Start_10 Start_8) (str.prefixof Start_14 Start) (= StartInt_5 StartInt_4)))
   (Start_3 String (y (str.replace Start_5 Start_2 Start_4) (ite StartBool_2 Start_6 Start_7)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_2 StartInt_2)))
   (Start_8 String (y "1" (str.++ Start_1 Start) (str.replace Start_1 Start_9 Start_2) (str.from_int StartInt_4)))
   (Start_2 String (x "1" (str.++ Start_10 Start_13) (str.from_int StartInt_4) (ite StartBool_3 Start_5 Start_5)))
   (Start_9 String ("1" (str.at Start_3 StartInt) (str.replace Start_9 Start_4 Start_5) (ite StartBool_2 Start_4 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof "" y 0))))

(check-synth)
