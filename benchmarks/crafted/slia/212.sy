(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartInt_2 Int) (Start_1 String))
  ((Start String (x y (str.at Start StartInt_1) (str.from_int StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 0 (str.len Start_1)))
   (StartBool Bool (false (not StartBool) (str.< Start_1 Start) (= StartInt_1 StartInt_1) (<= StartInt StartInt_1)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start_1 Start StartInt_2)))
   (StartInt_2 Int (1 0))
   (Start_1 String ("" (str.++ Start Start) (str.at Start_1 StartInt_2) (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 0) "a")))

(check-synth)
