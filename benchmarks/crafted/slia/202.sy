(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_2 String) (Start_3 String) (Start_11 String) (Start_9 String) (Start_6 String) (StartInt_3 Int) (StartInt_1 Int) (StartInt_4 Int) (StartBool_1 Bool) (Start_5 String) (Start_4 String) (Start_8 String) (StartInt_5 Int) (Start_7 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_10 String))
  ((Start String ("a" (str.++ Start Start) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (0 1 (str.len Start_2)))
   (StartBool Bool (true (not StartBool) (and StartBool StartBool) (str.< Start_11 Start_10) (str.<= Start_2 Start_2) (str.prefixof Start_3 Start_10) (str.suffixof Start_8 Start_3) (str.contains Start_7 Start_1) (= Start_6 Start_5)))
   (Start_1 String ("" "b" (str.at Start_5 StartInt_5) (str.substr Start_1 StartInt StartInt_3)))
   (Start_2 String ("1" "0" (str.++ Start_4 Start_6) (str.at Start_10 StartInt_4) (str.substr Start_2 StartInt_5 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_3)))
   (Start_3 String (y "0" (str.from_int StartInt)))
   (Start_11 String ("a" "0" "" "b" (str.substr Start_6 StartInt_4 StartInt_2) (str.from_int StartInt_1)))
   (Start_9 String ("1" (str.at Start_11 StartInt_3) (str.substr Start_11 StartInt_5 StartInt) (str.from_int StartInt_3)))
   (Start_6 String (y (str.++ Start_7 Start_4) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.len Start_7) (str.indexof Start_1 Start_6 StartInt_2) (str.to_int Start_2)))
   (StartInt_1 Int (0 (str.len Start_11)))
   (StartInt_4 Int (1 (str.indexof Start_8 Start_1 StartInt_4) (str.to_int Start_6)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_1 StartBool_1) (str.< Start_3 Start_4) (str.prefixof Start_3 Start_4) (str.contains Start_5 Start_6) (= Start_1 Start) (<= StartInt_2 StartInt_1)))
   (Start_5 String ("b" "0" y (str.substr Start_1 StartInt_4 StartInt_1) (str.replace Start_8 Start_1 Start_2) (str.from_int StartInt_5) (ite StartBool Start_1 Start_6)))
   (Start_4 String ("" "1" (str.at Start_7 StartInt) (str.from_int StartInt_1) (ite StartBool_2 Start Start)))
   (Start_8 String (x "" "a" "1" "b" (str.at Start_7 StartInt_2) (str.substr Start_2 StartInt_1 StartInt_3) (ite StartBool_1 Start_5 Start_7)))
   (StartInt_5 Int (1 0 (str.to_int Start_5)))
   (Start_7 String (x (str.substr Start_6 StartInt StartInt) (str.replace Start_1 Start_1 Start_7) (ite StartBool Start_3 Start_1)))
   (StartBool_2 Bool (true false (not StartBool_2) (str.<= Start_9 Start_10) (<= StartInt StartInt_3)))
   (StartInt_2 Int (1 (str.indexof Start Start_3 StartInt_1)))
   (Start_10 String ("" "0" (str.++ Start_1 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace x "" "1") (str.++ "1" "a"))))

(check-synth)
