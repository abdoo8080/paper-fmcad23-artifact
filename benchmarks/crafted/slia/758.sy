(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_6 String) (Start_5 String) (StartInt_2 Int) (Start_1 String) (StartInt_1 Int) (Start_4 String) (Start_2 String) (Start_3 String) (StartInt_3 Int))
  ((Start String ("b" "0" (str.++ Start_1 Start_1) (str.replace Start Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start_3 Start_2)))
   (StartInt Int (0 1 (str.len Start_1) (str.indexof Start_4 Start_5 StartInt_3)))
   (StartBool Bool (true (not StartBool) (str.< Start_6 Start_3) (str.suffixof Start Start_2)))
   (Start_6 String ("0" "" "1" (ite StartBool Start_2 Start_3)))
   (Start_5 String ("0" (str.++ Start_1 Start_3) (str.replace Start_5 Start_5 Start_4) (str.from_int StartInt_1) (ite StartBool Start_2 Start_1)))
   (StartInt_2 Int (1 0))
   (Start_1 String ("" y (str.++ Start Start_3) (str.at Start_1 StartInt_2) (ite StartBool Start_2 Start_3)))
   (StartInt_1 Int (0 (str.len Start_4) (str.to_int Start_4)))
   (Start_4 String (y (str.++ Start Start_1) (str.replace Start_2 Start_4 Start_1) (str.from_int StartInt_1)))
   (Start_2 String ("" x "a" "1" (str.at Start_1 StartInt) (str.substr Start_4 StartInt StartInt) (str.replace Start_3 Start_3 Start_4)))
   (Start_3 String ("0"))
   (StartInt_3 Int (1 0 (str.len Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" (str.at x 1) "0")))

(check-synth)
