(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartBool_3 Bool) (Start_1 String) (StartInt_3 Int) (Start_3 String) (StartInt_1 Int) (Start_2 String) (Start_6 String) (Start_5 String) (Start_8 String) (StartInt_2 Int) (StartBool_2 Bool) (StartBool_1 Bool) (Start_7 String) (Start_4 String) (StartInt_4 Int))
  ((Start String ("a" y (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_3) (str.indexof Start_5 Start_9 StartInt_3) (str.to_int Start_5)))
   (StartBool Bool (true false (not StartBool_3) (str.< Start_5 Start_7) (str.<= Start_5 Start_2) (str.prefixof Start_1 Start_8) (str.suffixof Start_6 Start_6) (str.contains Start_8 Start_3) (= Start_6 Start_4) (<= StartInt_3 StartInt_2)))
   (Start_9 String (y))
   (StartBool_3 Bool (true (str.< Start_8 Start_3) (str.prefixof Start Start_7) (= Start_2 Start_2)))
   (Start_1 String ("1" y "a" (str.at Start_8 StartInt_2) (str.replace Start_4 Start_8 Start_4) (str.from_int StartInt_1)))
   (StartInt_3 Int (0 (str.len Start_1) (str.indexof Start_4 Start_8 StartInt_3) (str.to_int Start_1)))
   (Start_3 String (x "b" "1" (str.++ Start_2 Start_2) (str.substr Start_1 StartInt_2 StartInt_2) (ite StartBool Start Start_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_2 Start_3 StartInt) (str.to_int Start)))
   (Start_2 String ("b" (str.substr Start_1 StartInt_3 StartInt_4) (str.replace Start_4 Start_2 Start_2) (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start_6)))
   (Start_6 String (x "" (str.++ Start_2 Start) (str.at Start_7 StartInt_4) (str.replace Start_2 Start_4 Start_4)))
   (Start_5 String (y (str.substr Start StartInt StartInt_4) (str.from_int StartInt_2) (ite StartBool_2 Start_2 Start_2)))
   (Start_8 String ("" (str.++ Start_2 Start) (str.at Start_5 StartInt_3) (str.substr Start_4 StartInt_2 StartInt_3)))
   (StartInt_2 Int (1 (str.len Start)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_1) (str.prefixof Start_1 Start_4) (str.contains Start Start_1) (= Start_5 Start_4)))
   (StartBool_1 Bool (true (not StartBool_1) (str.<= Start_4 Start_3) (str.prefixof Start_5 Start_3) (str.suffixof Start_1 Start_2) (= Start_2 Start_5) (<= StartInt_1 StartInt_4)))
   (Start_7 String ("b" x "1" (str.at Start_4 StartInt_1) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_7 Start_5 Start_2) (str.from_int StartInt_4)))
   (Start_4 String ("" "a" (str.++ Start Start_1) (str.substr Start_5 StartInt_4 StartInt) (str.from_int StartInt)))
   (StartInt_4 Int (0 (str.len Start) (str.indexof Start_7 Start_8 StartInt_1) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ x x) 1)))

(check-synth)
