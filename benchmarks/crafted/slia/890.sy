(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (StartInt_6 Int) (StartBool_2 Bool) (StartBool_3 Bool) (Start_2 String) (StartInt_4 Int) (StartInt_5 Int) (Start_11 String) (Start_3 String) (StartBool_1 Bool) (Start_5 String) (Start_12 String) (StartInt_3 Int) (StartBool_4 Bool) (Start_8 String) (Start_10 String) (StartInt_2 Int) (Start_9 String) (Start_7 String) (Start_4 String) (Start_6 String))
  ((Start String (y "" (str.++ Start Start) (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool_1 Start Start)))
   (StartInt Int (1 0 (str.len Start_7) (str.to_int Start_4)))
   (StartBool Bool (false (str.prefixof Start_11 Start_4) (str.contains Start_9 Start_4) (<= StartInt_1 StartInt_5)))
   (Start_1 String ("b" (str.at Start_3 StartInt_6) (str.replace Start_12 Start_10 Start_3) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 (str.to_int Start_2)))
   (StartInt_6 Int (0 1 (str.len Start_5) (str.indexof Start_2 Start_1 StartInt_5) (str.to_int Start)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool) (str.<= Start_4 Start_5) (str.prefixof Start_5 Start_3) (str.suffixof Start_4 Start_3) (= Start Start_1) (<= StartInt_6 StartInt_6)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool_3) (str.<= Start_4 Start_3) (str.prefixof Start_2 Start_2) (str.contains Start_11 Start_8) (= Start_7 Start_4) (= StartInt_1 StartInt_4) (<= StartInt_2 StartInt_3)))
   (Start_2 String ("0" (str.at Start_11 StartInt_1) (str.substr Start_7 StartInt_1 StartInt)))
   (StartInt_4 Int (1 0 (str.indexof Start_10 Start_11 StartInt_3)))
   (StartInt_5 Int (0 (str.len Start_3) (str.indexof Start_5 Start_9 StartInt_1) (str.to_int Start_3)))
   (Start_11 String ("1" "a" "b" x (str.++ Start_6 Start_5) (str.substr Start_2 StartInt_1 StartInt_4) (str.replace Start_9 Start_4 Start_4)))
   (Start_3 String ("" y x (str.at Start_2 StartInt_4) (str.from_int StartInt) (ite StartBool_4 Start_1 Start_1)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_3) (str.<= Start_2 Start_3) (str.prefixof Start_3 Start_1) (str.suffixof Start Start_3) (= Start Start_4) (= StartInt_2 StartInt) (<= StartInt_1 StartInt_3)))
   (Start_5 String (y (str.++ Start_8 Start_4) (str.substr Start_8 StartInt_1 StartInt_2) (str.replace Start_5 Start_9 Start_10)))
   (Start_12 String (y (str.substr Start_8 StartInt_4 StartInt)))
   (StartInt_3 Int (1 0 (str.len Start_3)))
   (StartBool_4 Bool (false true (not StartBool_2) (str.< Start Start_5) (str.suffixof Start_1 Start_5) (str.contains Start_6 Start_5) (= Start Start_7)))
   (Start_8 String (y (str.at Start_1 StartInt_2)))
   (Start_10 String (x "a" (str.from_int StartInt_4) (ite StartBool_1 Start_4 Start_9)))
   (StartInt_2 Int (0 (str.to_int Start_2)))
   (Start_9 String ("" (str.at Start_1 StartInt_2) (str.substr Start_3 StartInt_4 StartInt) (str.from_int StartInt_5)))
   (Start_7 String (y (str.substr Start_8 StartInt_3 StartInt_1) (str.replace Start_4 Start_5 Start_2)))
   (Start_4 String (x y "a" (str.from_int StartInt_2)))
   (Start_6 String ("b" x (str.++ Start_5 Start_5) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (str.replace "b" "" x))))

(check-synth)
