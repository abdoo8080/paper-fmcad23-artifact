(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_10 String) (Start_7 String) (Start_9 String) (StartInt_5 Int) (Start_4 String) (Start_3 String) (StartInt_3 Int) (Start_5 String) (StartBool_1 Bool) (Start_12 String) (Start_8 String) (Start_6 String) (Start_11 String) (StartBool_2 Bool) (StartBool_4 Bool) (Start_1 String) (StartInt_6 Int) (StartInt_4 Int) (StartInt_2 Int) (StartInt_1 Int) (StartInt_7 Int) (StartBool_5 Bool) (Start_2 String) (Start_13 String) (StartBool_3 Bool) (Start_14 String))
  ((Start String ("b" (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start_3) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (0 1 (str.len Start_3) (str.indexof Start_11 Start_11 StartInt_2) (str.to_int Start_9)))
   (StartBool Bool (false (and StartBool StartBool_6) (str.< Start_12 Start_7) (str.prefixof Start_2 Start_9) (str.suffixof Start_14 Start_11) (<= StartInt_7 StartInt_2)))
   (StartBool_6 Bool (false true (str.< Start_14 Start_2) (str.prefixof Start_3 Start_9) (str.contains Start_2 Start) (= Start_2 Start) (= StartInt_5 StartInt_3) (<= StartInt_6 StartInt_1)))
   (Start_10 String ("0" x "a" y (str.substr Start_2 StartInt_1 StartInt_4) (str.from_int StartInt_1) (ite StartBool_2 Start_10 Start)))
   (Start_7 String ("" (str.at Start_1 StartInt_1) (str.replace Start_6 Start_6 Start_8) (str.from_int StartInt_5)))
   (Start_9 String ("b" (str.++ Start_10 Start) (str.at Start_10 StartInt_3) (str.substr Start_9 StartInt_4 StartInt_3) (ite StartBool_2 Start_11 Start_3)))
   (StartInt_5 Int (0 1 (str.to_int Start_9)))
   (Start_4 String ("b" x y "a" "1" "0" "" (str.at Start_5 StartInt_3) (str.replace Start_1 Start Start_1)))
   (Start_3 String (x "1" (str.substr Start_3 StartInt StartInt_4) (ite StartBool Start_6 Start_7)))
   (StartInt_3 Int (1 (str.len Start_4) (str.indexof Start_4 Start_5 StartInt_1)))
   (Start_5 String ("0" "" y "1" "b" x (str.from_int StartInt_1)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_1) (str.< Start_2 Start_2) (str.prefixof Start Start_1) (str.contains Start_3 Start) (= Start_1 Start_4) (<= StartInt_2 StartInt_2)))
   (Start_12 String ("a" x (str.++ Start_10 Start_10) (str.substr Start_10 StartInt_7 StartInt_7) (ite StartBool Start_11 Start_13)))
   (Start_8 String (x (str.at Start_8 StartInt_3) (str.substr Start_3 StartInt_2 StartInt_5) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_4)))
   (Start_6 String (x (str.++ Start_6 Start_1) (str.at Start_4 StartInt) (str.substr Start_7 StartInt_2 StartInt_6) (str.replace Start_10 Start_6 Start_3) (str.from_int StartInt_2) (ite StartBool_3 Start_4 Start_2)))
   (Start_11 String ("a" (str.substr Start_2 StartInt_3 StartInt_3) (str.replace Start_8 Start_2 Start_7) (str.from_int StartInt_5)))
   (StartBool_2 Bool (true (not StartBool) (and StartBool StartBool_1) (str.< Start Start) (str.prefixof Start_2 Start) (str.suffixof Start_3 Start_2) (str.contains Start_3 Start_4)))
   (StartBool_4 Bool (true (str.< Start_4 Start) (str.prefixof Start_10 Start_7) (str.suffixof Start_4 Start_5)))
   (Start_1 String ("0" "" (str.++ Start_11 Start_6) (str.at Start StartInt_3) (ite StartBool_5 Start_2 Start_1)))
   (StartInt_6 Int (0 (str.to_int Start_6)))
   (StartInt_4 Int (0 (str.len Start_6)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.to_int Start_4)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.to_int Start_11)))
   (StartInt_7 Int (1 0))
   (StartBool_5 Bool (false (str.prefixof Start_5 Start_9) (str.contains Start_12 Start_9) (= Start_4 Start_11) (= StartInt_4 StartInt_7) (<= StartInt_5 StartInt_1)))
   (Start_2 String ("a" "0" (str.at Start StartInt_3) (str.replace Start_5 Start Start_9)))
   (Start_13 String ("" (str.replace Start_6 Start_14 Start_7)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_4) (str.< Start_8 Start) (str.<= Start_4 Start) (str.prefixof Start_5 Start_8) (str.suffixof Start Start_1) (str.contains Start_4 Start_9) (= Start_2 Start_10)))
   (Start_14 String ("0" (str.++ Start_5 Start_7) (str.substr Start_9 StartInt_7 StartInt_1) (str.replace Start_8 Start_5 Start_13) (str.from_int StartInt_6) (ite StartBool_3 Start_11 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "1" y "") "" x)))

(check-synth)
