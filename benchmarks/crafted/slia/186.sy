(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (StartInt_3 Int) (Start_11 String) (StartInt_6 Int) (Start_10 String) (StartBool_2 Bool) (Start_15 String) (Start_12 String) (Start_6 String) (Start_3 String) (Start_4 String) (StartInt_1 Int) (Start_14 String) (Start_9 String) (Start_2 String) (Start_13 String) (Start_1 String) (StartInt_2 Int) (Start_7 String) (Start_5 String) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_4 Int) (Start_8 String))
  ((Start String ("b" x y "0" "1" (str.substr Start StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (1))
   (StartBool Bool (true (str.< Start_1 Start_2) (str.contains Start_1 Start_3) (= StartInt_1 StartInt)))
   (Start_16 String ("1" (str.at Start_11 StartInt_1) (str.substr Start StartInt_4 StartInt_6) (str.replace Start_7 Start Start_4)))
   (StartInt_3 Int (1 0 (str.indexof Start_12 Start_7 StartInt)))
   (Start_11 String ("a" "0" "1" "" x "b" (str.at Start_6 StartInt_5) (str.replace Start_2 Start_6 Start_4) (str.from_int StartInt_4)))
   (StartInt_6 Int (0 1 (str.indexof Start_1 Start_1 StartInt_2)))
   (Start_10 String ("b" "" (str.++ Start_3 Start_8) (str.from_int StartInt)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_2) (str.< Start Start_3) (str.<= Start_3 Start_5) (str.suffixof Start_4 Start_3) (str.contains Start_9 Start_8)))
   (Start_15 String ("1" "a" (str.at Start_2 StartInt_5) (ite StartBool Start_7 Start_16)))
   (Start_12 String ("b" "" "0" (str.at Start_8 StartInt_6) (str.from_int StartInt_5)))
   (Start_6 String ("b" (str.++ Start_4 Start_11) (str.at Start_2 StartInt_5) (str.substr Start_5 StartInt StartInt_6) (str.from_int StartInt)))
   (Start_3 String ("" (str.++ Start_2 Start_4) (str.at Start_2 StartInt) (str.substr Start StartInt_1 StartInt) (str.replace Start_3 Start_2 Start_2)))
   (Start_4 String ("1" (str.substr Start_4 StartInt StartInt)))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.indexof Start_2 Start StartInt_2)))
   (Start_14 String ("" "a" (str.at Start_7 StartInt_2) (ite StartBool_2 Start_2 Start_4)))
   (Start_9 String ("1" (str.at Start_6 StartInt_6) (str.substr Start_10 StartInt_3 StartInt_5) (ite StartBool Start_9 Start_1)))
   (Start_2 String (y "" "0" x (str.++ Start Start_3) (str.at Start_3 StartInt_3) (ite StartBool Start_5 Start)))
   (Start_13 String ("0" "1" (str.at Start_7 StartInt_6) (str.replace Start_2 Start_15 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_8 Start_12)))
   (Start_1 String ("0" (str.replace Start_6 Start_13 Start_14) (str.from_int StartInt_2) (ite StartBool Start_12 Start_8)))
   (StartInt_2 Int (0 (str.indexof Start Start_1 StartInt) (str.to_int Start_1)))
   (Start_7 String ("a" (str.at Start_7 StartInt_4) (str.replace Start_2 Start_8 Start_7)))
   (Start_5 String ("0" (str.++ Start_3 Start_2) (str.at Start_3 StartInt) (str.replace Start_4 Start_6 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_4)))
   (StartInt_5 Int (1 (str.indexof Start_4 Start_3 StartInt_3)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_2 StartBool) (str.< Start_4 Start_4) (str.contains Start_1 Start_4) (= StartInt_4 StartInt_1)))
   (StartInt_4 Int (0 1 (str.len Start_7)))
   (Start_8 String (y x (str.at Start_4 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (<= 1 (str.len (str.++ y "0"))) y "")))

(check-synth)
