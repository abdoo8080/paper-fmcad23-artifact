(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartBool_11 Bool) (StartInt_2 Int) (StartBool_5 Bool) (Start_8 String) (Start_5 String) (Start_13 String) (StartBool_3 Bool) (StartBool_8 Bool) (Start_7 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_4 String) (Start_2 String) (Start_6 String) (Start_1 String) (StartBool_7 Bool) (StartInt_1 Int) (StartBool_9 Bool) (Start_9 String) (Start_10 String) (StartInt_6 Int) (StartBool_4 Bool) (StartBool_6 Bool) (Start_12 String) (Start_11 String) (StartInt_3 Int) (StartInt_5 Int) (Start_3 String) (StartBool_2 Bool) (StartBool_10 Bool))
  ((Start String ("0" x (str.replace Start Start Start) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (0 1 (str.to_int Start_11)))
   (StartBool Bool (true (not StartBool_11) (str.<= Start Start_6) (str.prefixof Start_3 Start_8) (str.suffixof Start_1 Start_3)))
   (Start_14 String (x "b" "1" y "0" "a" "" (str.++ Start_9 Start_13) (str.at Start_4 StartInt) (str.substr Start_14 StartInt_5 StartInt) (ite StartBool Start_11 Start_3)))
   (StartBool_11 Bool (true (str.< Start Start_6) (str.<= Start_11 Start_10) (= Start_13 Start_10)))
   (StartInt_2 Int (0 (str.indexof Start_3 Start_7 StartInt_3)))
   (StartBool_5 Bool (false true (not StartBool_8) (str.< Start_6 Start_3) (<= StartInt_6 StartInt_2)))
   (Start_8 String ("" "a" "1" "0" y x (str.substr Start_5 StartInt_4 StartInt_1) (str.from_int StartInt_4)))
   (Start_5 String (y "" (str.at Start_3 StartInt_1) (str.substr Start_6 StartInt_1 StartInt) (str.from_int StartInt_2)))
   (Start_13 String ("a" (str.++ Start_11 Start_12) (str.replace Start_11 Start_14 Start_3) (str.from_int StartInt_6)))
   (StartBool_3 Bool (true (not StartBool_2) (str.< Start_3 Start_1) (str.<= Start_5 Start_5) (str.suffixof Start_1 Start_2)))
   (StartBool_8 Bool (true false (and StartBool_4 StartBool_4) (str.contains Start_2 Start_2)))
   (Start_7 String (y (str.replace Start_2 Start_6 Start_5) (str.from_int StartInt_1) (ite StartBool_3 Start_3 Start_2)))
   (StartInt_4 Int (0))
   (StartBool_1 Bool (true false (not StartBool_9) (and StartBool_9 StartBool_3) (str.< Start_7 Start_7)))
   (Start_4 String ("1" y "0" (str.replace Start_5 Start_4 Start_2) (str.from_int StartInt_2) (ite StartBool_2 Start_5 Start_5)))
   (Start_2 String ("" (str.substr Start_3 StartInt_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool_2 Start_4 Start_4)))
   (Start_6 String ("1" (str.at Start_5 StartInt) (str.substr Start_7 StartInt_3 StartInt)))
   (Start_1 String (y (str.replace Start_2 Start Start) (str.from_int StartInt)))
   (StartBool_7 Bool (false (and StartBool_1 StartBool_4) (str.<= Start_2 Start_2) (str.suffixof Start_3 Start_9) (str.contains Start_11 Start_4) (= StartInt_3 StartInt) (<= StartInt_3 StartInt)))
   (StartInt_1 Int (1 (str.len Start_8) (str.indexof Start_1 Start_9 StartInt_1) (str.to_int Start_7)))
   (StartBool_9 Bool (false true (not StartBool_10) (and StartBool_2 StartBool_1) (str.suffixof Start_1 Start_8) (= Start_8 Start_7) (<= StartInt_1 StartInt_2)))
   (Start_9 String ("b" (str.at Start_7 StartInt_4) (str.substr Start_6 StartInt StartInt_3) (str.replace Start_2 Start_5 Start) (ite StartBool_4 Start_5 Start_8)))
   (Start_10 String (y (str.at Start_5 StartInt_2) (str.substr Start_2 StartInt StartInt_3) (str.replace Start_6 Start_5 Start_1) (str.from_int StartInt_4) (ite StartBool_6 Start Start_4)))
   (StartInt_6 Int (1 0 (str.indexof Start_5 Start_4 StartInt_3)))
   (StartBool_4 Bool (false true (not StartBool_5) (str.suffixof Start Start_4) (= Start_7 Start_10) (= StartInt StartInt_1)))
   (StartBool_6 Bool (false true (and StartBool_7 StartBool_3) (str.< Start_4 Start_10) (str.<= Start_2 Start_5) (str.suffixof Start_9 Start_7) (= Start_1 Start_4) (= StartInt_4 StartInt) (<= StartInt_2 StartInt_4)))
   (Start_12 String ("b" "0" x (str.++ Start_1 Start_2) (str.at Start_4 StartInt_1) (str.replace Start_12 Start_10 Start_3)))
   (Start_11 String ("1" y "" "a" (str.++ Start_11 Start_8) (str.substr Start_10 StartInt_5 StartInt_3) (str.replace Start_5 Start_11 Start_2) (str.from_int StartInt_1)))
   (StartInt_3 Int (0 1 (str.indexof Start_2 Start_4 StartInt_2)))
   (StartInt_5 Int (1 (str.indexof Start_7 Start_3 StartInt)))
   (Start_3 String (y (str.++ Start_3 Start_1) (str.from_int StartInt_3) (ite StartBool_1 Start_12 Start_1)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.< Start_3 Start_7) (str.contains Start_3 Start_8)))
   (StartBool_10 Bool (false true (not StartBool_6) (str.contains Start_5 Start_5) (= Start_8 Start_6) (= StartInt_1 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (ite (<= (str.indexof "b" y 0) 0) "" "b") y "")))

(check-synth)
