(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartBool_1 Bool) (Start_11 String) (StartBool_3 Bool) (StartInt_6 Int) (Start_10 String) (Start_9 String) (StartBool_2 Bool) (Start_8 String) (StartInt_1 Int) (Start_1 String) (StartInt_4 Int) (Start_3 String) (Start_4 String) (Start_5 String) (StartInt_7 Int) (StartInt_2 Int) (StartInt_3 Int) (Start_6 String) (StartInt_5 Int) (Start_2 String) (Start_7 String))
  ((Start String (x y "0" (str.at Start_1 StartInt_1)))
   (StartInt Int (1 0 (str.len Start_2)))
   (StartBool Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (str.<= Start_6 Start_6) (str.prefixof Start_7 Start_7) (str.contains Start_5 Start_7) (<= StartInt_3 StartInt_5)))
   (StartInt_8 Int (1 (str.len Start_7) (str.to_int Start_2)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (str.suffixof Start_10 Start_3) (= Start_4 Start_5) (<= StartInt_7 StartInt_8)))
   (Start_11 String (y (str.substr Start_6 StartInt StartInt_3)))
   (StartBool_3 Bool (true false (str.< Start_4 Start_3) (str.<= Start_1 Start_11) (str.suffixof Start_10 Start_2) (str.contains Start_9 Start_4) (= Start_5 Start_8)))
   (StartInt_6 Int (1 (str.indexof Start_2 Start_1 StartInt_4)))
   (Start_10 String (y "b" "a" "" (str.++ Start_5 Start_7) (str.at Start_6 StartInt) (ite StartBool Start_4 Start_8)))
   (Start_9 String ("1" (str.substr Start_10 StartInt StartInt_1) (ite StartBool Start_10 Start_3)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_3 StartBool_2) (str.<= Start_8 Start_7) (str.suffixof Start_4 Start_3) (str.contains Start_6 Start_8) (= StartInt_5 StartInt_1) (<= StartInt_4 StartInt_5)))
   (Start_8 String ("0" (str.at Start_6 StartInt_6) (str.from_int StartInt_5) (ite StartBool Start_4 Start_9)))
   (StartInt_1 Int (0))
   (Start_1 String ("1" (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt) (ite StartBool Start Start)))
   (StartInt_4 Int (0 1 (str.indexof Start_7 Start_6 StartInt_5) (str.to_int Start_6)))
   (Start_3 String ("1" (str.at Start_1 StartInt) (str.substr Start_4 StartInt_3 StartInt_3) (str.replace Start Start Start)))
   (Start_4 String (x (str.substr Start_5 StartInt_1 StartInt_2) (str.from_int StartInt_2)))
   (Start_5 String ("0" "b" (str.++ Start_3 Start_6) (str.at Start_5 StartInt_1) (str.substr Start StartInt_1 StartInt)))
   (StartInt_7 Int (0 (str.len Start_4) (str.to_int Start_6)))
   (StartInt_2 Int (0 (str.len Start_5) (str.indexof Start_5 Start StartInt_3)))
   (StartInt_3 Int (1))
   (Start_6 String ("0" x (str.++ Start_6 Start_4) (str.at Start_3 StartInt_3) (str.substr Start_7 StartInt_3 StartInt_3) (str.from_int StartInt_4)))
   (StartInt_5 Int (1 0 (str.indexof Start_4 Start_4 StartInt_5) (str.to_int Start_1)))
   (Start_2 String ("a" (str.at Start_1 StartInt_2) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start Start)))
   (Start_7 String ("b" y (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt StartInt_3) (str.replace Start_2 Start_5 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains "0" y) "" "0")))

(check-synth)
