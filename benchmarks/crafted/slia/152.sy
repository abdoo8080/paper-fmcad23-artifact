(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (StartInt_2 Int) (StartInt_3 Int) (StartInt_4 Int) (Start_3 String) (Start_2 String) (Start_4 String) (StartInt_5 Int) (StartInt_6 Int) (Start_1 String) (StartInt_1 Int))
  ((Start String ("1" "0" (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt_2)))
   (StartInt Int (0 1 (str.len Start_3) (str.to_int Start_2)))
   (StartBool Bool (true false (str.< Start Start_3) (str.prefixof Start_2 Start_5) (= Start Start_5) (= StartInt_3 StartInt_3)))
   (Start_5 String ("0" (str.from_int StartInt_6)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_2 StartInt_3) (str.to_int Start)))
   (StartInt_3 Int (0 (str.to_int Start)))
   (StartInt_4 Int (1 0 (str.indexof Start_3 Start StartInt_4)))
   (Start_3 String ("" (str.substr Start_1 StartInt_2 StartInt_5) (str.from_int StartInt_2) (ite StartBool Start_1 Start_4)))
   (Start_2 String (x "1" (str.++ Start_2 Start_2) (str.substr Start StartInt_2 StartInt_4) (str.from_int StartInt)))
   (Start_4 String ("b" "" "0" (str.at Start_1 StartInt_4) (str.substr Start StartInt_6 StartInt_5) (str.from_int StartInt_5) (ite StartBool Start Start_2)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.to_int Start_2)))
   (StartInt_6 Int (1 0 (str.indexof Start_1 Start_2 StartInt_4) (str.to_int Start_5)))
   (Start_1 String ("1" (str.at Start_1 StartInt_4)))
   (StartInt_1 Int (0 1 (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr "1" 0 (str.to_int (str.replace x "1" x)))))

(check-synth)
