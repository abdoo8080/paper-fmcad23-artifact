(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_7 String) (Start_2 String) (StartInt_6 Int) (StartInt_5 Int) (StartInt_4 Int) (Start_8 String) (Start_1 String) (Start_5 String) (Start_4 String) (StartBool_1 Bool) (StartBool_2 Bool) (Start_3 String) (StartInt_3 Int) (StartInt_8 Int) (StartBool_3 Bool) (Start_10 String) (Start_6 String) (StartInt_7 Int) (StartInt_2 Int) (Start_9 String) (StartInt_1 Int) (Start_14 String) (Start_11 String) (Start_13 String) (StartInt_9 Int) (Start_15 String))
  ((Start String ("" "0" (str.++ Start Start) (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_1 Start_2) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_11 Start_8 StartInt_7) (str.to_int Start)))
   (StartBool Bool (false true (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_12 Start_9) (str.prefixof Start_13 Start_6) (str.suffixof Start_1 Start_6) (= Start Start_6) (<= StartInt_6 StartInt_1)))
   (Start_12 String ("" (str.++ Start_2 Start_12) (str.substr Start_8 StartInt_1 StartInt_5) (ite StartBool_1 Start_5 Start_4)))
   (Start_7 String ("a" "" (str.at Start_8 StartInt_5) (str.replace Start_8 Start_7 Start_8) (str.from_int StartInt)))
   (Start_2 String ("" (str.substr Start_2 StartInt_5 StartInt_4) (str.replace Start_4 Start_4 Start_6) (str.from_int StartInt_2) (ite StartBool_2 Start_5 Start_1)))
   (StartInt_6 Int (0 1 (str.len Start_4) (str.indexof Start_3 Start_1 StartInt_2)))
   (StartInt_5 Int (1 0 (str.to_int Start_2)))
   (StartInt_4 Int (0 (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_3)))
   (Start_8 String (x "b" (str.replace Start_6 Start_4 Start_9) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_9)))
   (Start_1 String ("" "a" (str.substr Start_4 StartInt_6 StartInt_8) (str.replace Start_3 Start_6 Start_7) (str.from_int StartInt_4)))
   (Start_5 String (y "0" x (str.at Start_5 StartInt_6) (str.substr Start_4 StartInt_2 StartInt_1) (str.from_int StartInt_4)))
   (Start_4 String ("a" y (str.at Start_4 StartInt_1) (str.substr Start_4 StartInt_4 StartInt_5) (str.replace Start_4 Start_1 Start_5) (str.from_int StartInt_4) (ite StartBool_1 Start_5 Start_4)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool_1 StartBool_1) (str.contains Start Start_1)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_1 StartBool_3) (str.< Start_1 Start) (str.contains Start_5 Start_7)))
   (Start_3 String ("1" (str.replace Start_1 Start_1 Start_2) (str.from_int StartInt_4)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start Start_3 StartInt_2) (str.to_int Start_4)))
   (StartInt_8 Int (0 1 (str.len Start_6) (str.indexof Start_7 Start_10 StartInt_6) (str.to_int Start_9)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_1) (str.< Start_10 Start_2) (str.prefixof Start_7 Start_6) (= Start_5 Start_6) (= StartInt_4 StartInt_6)))
   (Start_10 String ("1" "0" (str.++ Start_10 Start_1) (str.substr Start_7 StartInt StartInt_1)))
   (Start_6 String ("0" (str.++ Start_9 Start_5) (str.substr Start_8 StartInt_5 StartInt_7) (str.from_int StartInt_7) (ite StartBool_3 Start_10 Start_1)))
   (StartInt_7 Int (0 (str.len Start_8) (str.indexof Start_4 Start_3 StartInt_3)))
   (StartInt_2 Int (1 (str.indexof Start_10 Start_4 StartInt_7) (str.to_int Start_10)))
   (Start_9 String ("1" y "" (str.at Start_1 StartInt_4) (str.from_int StartInt_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_1 StartInt_4)))
   (Start_14 String (x "1" "0" (str.++ Start_1 Start_15) (str.substr Start_1 StartInt_6 StartInt_1) (str.replace Start_2 Start_10 Start_15) (str.from_int StartInt_4)))
   (Start_11 String ("1" (str.at Start_11 StartInt_2) (str.substr Start_4 StartInt StartInt) (str.replace Start_6 Start_5 Start_4) (str.from_int StartInt) (ite StartBool_2 Start_10 Start_9)))
   (Start_13 String ("b" x "0" (str.at Start_11 StartInt_7) (str.substr Start_3 StartInt_1 StartInt_9) (str.replace Start_3 Start_2 Start_12)))
   (StartInt_9 Int (0 (str.len Start_3) (str.indexof Start_4 Start_14 StartInt_4)))
   (Start_15 String ("1" x "0" "a" (str.at Start StartInt_5) (str.from_int StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y "b") "" "a")))

(check-synth)
