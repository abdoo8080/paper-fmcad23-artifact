(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_6 String) (Start_2 String) (Start_3 String) (Start_5 String) (StartBool_6 Bool) (StartInt_4 Int) (StartBool_2 Bool) (Start_4 String) (StartInt_3 Int) (StartBool_3 Bool) (StartInt_8 Int) (StartBool_5 Bool) (StartBool_1 Bool) (Start_1 String) (StartInt_1 Int) (Start_10 String) (StartInt_7 Int) (Start_8 String) (StartInt_5 Int) (Start_7 String) (StartInt_6 Int) (StartInt_2 Int) (Start_9 String) (StartBool_4 Bool) (StartBool_7 Bool) (StartInt_9 Int))
  ((Start String ("b" (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_1 Start Start) (str.from_int StartInt) (ite StartBool Start_1 Start)))
   (StartInt Int (0 (str.len Start_7) (str.to_int Start_9)))
   (StartBool Bool (true false (and StartBool_5 StartBool_6) (str.< Start_6 Start) (str.prefixof Start_2 Start_7) (str.suffixof Start_10 Start_6)))
   (Start_11 String (x (str.from_int StartInt_8)))
   (Start_6 String (y (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_2 Start_5 Start_1) (str.from_int StartInt_3) (ite StartBool_4 Start_5 Start_4)))
   (Start_2 String ("" "1" "a" "b" x y (str.substr Start_6 StartInt_6 StartInt_7) (ite StartBool_2 Start_1 Start_2)))
   (Start_3 String ("0" (str.at Start_1 StartInt) (str.substr Start StartInt_2 StartInt_5) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_2)))
   (Start_5 String ("a" "" "b" (str.++ Start_1 Start_2) (str.at Start_4 StartInt_3) (str.from_int StartInt_3) (ite StartBool_2 Start_5 Start_1)))
   (StartBool_6 Bool (true (not StartBool_4) (and StartBool_7 StartBool) (str.prefixof Start_3 Start_1) (str.suffixof Start_8 Start_1) (str.contains Start_5 Start)))
   (StartInt_4 Int (0 (str.len Start_4) (str.to_int Start_1)))
   (StartBool_2 Bool (true (not StartBool_1) (and StartBool StartBool_3) (str.< Start_2 Start_1) (= Start_3 Start) (= StartInt_2 StartInt_4) (<= StartInt_2 StartInt)))
   (Start_4 String ("a" "b" "" y (str.++ Start Start_1) (str.replace Start_5 Start_5 Start_4) (ite StartBool_2 Start_3 Start_3)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start_4 Start_2 StartInt) (str.to_int Start_2)))
   (StartBool_3 Bool (false (str.suffixof Start_4 Start_4) (str.contains Start_4 Start) (<= StartInt StartInt_1)))
   (StartInt_8 Int (1 0 (str.len Start_3) (str.to_int Start_6)))
   (StartBool_5 Bool (false true (str.<= Start_1 Start_8) (str.prefixof Start_3 Start_7) (str.suffixof Start_5 Start_2) (= Start_6 Start_11)))
   (StartBool_1 Bool (false (and StartBool StartBool_1) (str.<= Start Start_2) (str.suffixof Start_2 Start_1) (= Start_1 Start_2) (<= StartInt_2 StartInt_3)))
   (Start_1 String ("0" (str.++ Start_1 Start) (str.at Start StartInt_2) (str.replace Start_2 Start Start) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_1 Int (1 0 (str.len Start) (str.indexof Start Start StartInt_1)))
   (Start_10 String ("" (str.substr Start_1 StartInt_1 StartInt_4) (str.from_int StartInt_7) (ite StartBool_1 Start_2 Start_6)))
   (StartInt_7 Int (0 1 (str.indexof Start_7 Start_1 StartInt_4) (str.to_int Start_8)))
   (Start_8 String ("0" (str.substr Start_2 StartInt_5 StartInt_4) (str.replace Start Start_7 Start_6) (str.from_int StartInt_6) (ite StartBool Start_2 Start_4)))
   (StartInt_5 Int (0 1 (str.indexof Start_6 Start_3 StartInt_4) (str.to_int Start_2)))
   (Start_7 String ("a" y (str.at Start StartInt_1) (str.replace Start_2 Start_4 Start_6) (str.from_int StartInt_3)))
   (StartInt_6 Int (1 (str.len Start_1) (str.indexof Start_4 Start StartInt_5)))
   (StartInt_2 Int (1 0 (str.to_int Start_3)))
   (Start_9 String (y (str.++ Start_8 Start_9) (str.at Start_8 StartInt_8) (str.substr Start_7 StartInt_5 StartInt_2) (str.replace Start_8 Start Start_7)))
   (StartBool_4 Bool (false (not StartBool) (str.< Start Start_2) (str.<= Start_4 Start_3) (str.prefixof Start_6 Start_1) (str.suffixof Start_3 Start) (= Start Start_4) (<= StartInt_2 StartInt_2)))
   (StartBool_7 Bool (true (not StartBool_3) (and StartBool_5 StartBool_3) (str.< Start_8 Start_2) (str.<= Start_2 Start_7) (= Start_6 Start_9) (<= StartInt_1 StartInt_9)))
   (StartInt_9 Int (0))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "" "a") (str.++ "1" "a"))))

(check-synth)
