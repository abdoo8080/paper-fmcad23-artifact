(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_2 Int) (StartInt_1 Int) (Start_2 String) (Start_5 String) (Start_6 String) (Start_1 String) (Start_3 String) (StartInt_4 Int) (StartInt_5 Int) (Start_4 String) (StartInt_3 Int))
  ((Start String ("1" x "" (str.at Start StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_1 Start)))
   (StartInt Int (0 1 (str.indexof Start_6 Start_4 StartInt_3)))
   (StartBool Bool (false true (str.< Start Start) (str.<= Start_5 Start_5) (str.suffixof Start_6 Start_5) (= Start_2 Start_5) (= StartInt_6 StartInt_2)))
   (StartInt_6 Int (1 (str.indexof Start_6 Start_3 StartInt_5) (str.to_int Start_4)))
   (StartInt_2 Int (0))
   (StartInt_1 Int (0 1 (str.to_int Start_4)))
   (Start_2 String ("1" "b" (str.++ Start_3 Start_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start Start_3 Start) (str.from_int StartInt_2)))
   (Start_5 String ("" (str.++ Start_1 Start_5) (str.substr Start_1 StartInt_2 StartInt_3)))
   (Start_6 String (y (str.++ Start Start_1) (str.replace Start_5 Start_1 Start_6) (str.from_int StartInt_4)))
   (Start_1 String ("b" (str.++ Start_1 Start_2) (str.at Start_1 StartInt) (ite StartBool Start_2 Start)))
   (Start_3 String ("0" (str.++ Start Start) (str.at Start_2 StartInt) (str.from_int StartInt)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.indexof Start_1 Start_6 StartInt_5)))
   (StartInt_5 Int (1 (str.len Start_3) (str.indexof Start_3 Start_6 StartInt_3)))
   (Start_4 String ("a" x "0" "b" (str.++ Start_5 Start_3) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start_4 Start_2 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains "a" x) "a" "")))

(check-synth)
