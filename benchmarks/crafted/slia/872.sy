(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartInt_2 Int) (StartInt_3 Int) (Start_5 String) (Start_4 String) (Start_3 String) (StartInt_4 Int) (Start_2 String) (StartInt_1 Int) (Start_1 String))
  ((Start String ("b" "1" (str.replace Start Start_1 Start)))
   (StartInt Int (1 (str.len Start_2) (str.to_int Start_3)))
   (StartBool Bool (false true (str.<= Start_5 Start) (str.prefixof Start_1 Start_5) (str.suffixof Start Start_3) (str.contains Start Start) (= StartInt_4 StartInt_5) (<= StartInt StartInt_1)))
   (StartInt_5 Int (0 1 (str.to_int Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_1 Start_2 StartInt_3)))
   (StartInt_3 Int (1 0 (str.len Start_3)))
   (Start_5 String (y (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start Start_4 Start_5) (str.from_int StartInt_1)))
   (Start_4 String ("b" x (str.at Start_4 StartInt) (str.substr Start StartInt_3 StartInt_3) (str.replace Start_5 Start Start_1) (str.from_int StartInt)))
   (Start_3 String (y "1" "b" "" x "a" "0" (str.++ Start Start_3) (str.at Start_3 StartInt) (str.substr Start StartInt StartInt_2) (str.replace Start_1 Start Start) (str.from_int StartInt_2) (ite StartBool Start_1 Start_4)))
   (StartInt_4 Int (1 0 (str.to_int Start)))
   (Start_2 String ("b" x y "1" "" "a" (str.replace Start Start Start)))
   (StartInt_1 Int (0 1))
   (Start_1 String ("" "1" (str.++ Start_2 Start_1) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_2 Start_1 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.indexof x (str.replace y "" "b") 0))))

(check-synth)
