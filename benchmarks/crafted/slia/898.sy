(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_9 Int) (Start_4 String) (Start_1 String) (Start_8 String) (Start_6 String) (StartInt_6 Int) (StartInt_1 Int) (StartInt_3 Int) (Start_9 String) (Start_7 String) (Start_3 String) (StartInt_8 Int) (StartBool_3 Bool) (Start_11 String) (Start_2 String) (StartInt_7 Int) (StartBool_1 Bool) (StartInt_4 Int) (Start_14 String) (Start_5 String) (StartInt_2 Int) (Start_10 String) (Start_12 String) (StartBool_4 Bool) (StartInt_5 Int) (Start_13 String) (StartBool_5 Bool))
  ((Start String ("b" (str.++ Start_1 Start) (str.substr Start StartInt StartInt_1) (str.replace Start_2 Start Start_1)))
   (StartInt Int (0 1))
   (StartBool Bool (false true (not StartBool) (and StartBool_4 StartBool_5) (str.< Start_10 Start_7) (str.prefixof Start_13 Start_13)))
   (StartBool_2 Bool (false true (str.<= Start_6 Start_6) (str.prefixof Start Start) (str.suffixof Start_3 Start_1)))
   (StartInt_9 Int (0 1 (str.len Start_9) (str.indexof Start_5 Start_8 StartInt_5)))
   (Start_4 String (x (str.++ Start_5 Start_5)))
   (Start_1 String ("a" y "b" "" "1" (str.substr Start StartInt_9 StartInt_6) (ite StartBool Start_10 Start_2)))
   (Start_8 String ("0" (str.++ Start_4 Start_8) (str.substr Start_9 StartInt_1 StartInt_2) (str.replace Start_3 Start_6 Start_4) (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start_5)))
   (Start_6 String ("1" "" "a" (str.++ Start_7 Start_1) (ite StartBool_2 Start Start_8)))
   (StartInt_6 Int (1 0))
   (StartInt_1 Int (0 1 (str.indexof Start_3 Start_2 StartInt_3) (str.to_int Start_4)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.to_int Start_3)))
   (Start_9 String ("a" (str.++ Start_6 Start_10) (str.substr Start_6 StartInt_4 StartInt) (str.replace Start_5 Start_6 Start_7) (str.from_int StartInt_2)))
   (Start_7 String ("b" (str.++ Start_7 Start_8) (str.substr Start_11 StartInt_6 StartInt_8) (ite StartBool_2 Start_2 Start_7)))
   (Start_3 String ("a" (str.substr Start StartInt_1 StartInt) (str.replace Start Start Start_3) (str.from_int StartInt_3)))
   (StartInt_8 Int (1 (str.len Start_3)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool) (str.< Start_11 Start_7) (str.<= Start_12 Start_3) (str.prefixof Start_12 Start_2) (str.contains Start_4 Start_7) (= Start Start_12) (= StartInt_6 StartInt_7)))
   (Start_11 String (y (str.at Start_3 StartInt_6) (str.substr Start_4 StartInt_3 StartInt_3) (str.replace Start_2 Start Start_2)))
   (Start_2 String ("a" x y (str.++ Start_2 Start_2) (str.at Start_1 StartInt_2)))
   (StartInt_7 Int (0 1))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_2) (str.<= Start_1 Start_3) (str.suffixof Start Start_1) (= StartInt_1 StartInt_3)))
   (StartInt_4 Int (0 (str.indexof Start_4 Start_1 StartInt_1)))
   (Start_14 String ("0" (str.++ Start Start_11) (str.substr Start_12 StartInt_5 StartInt_9)))
   (Start_5 String ("0" (ite StartBool_1 Start Start_2)))
   (StartInt_2 Int (0 (str.len Start_3) (str.indexof Start Start_3 StartInt_2)))
   (Start_10 String ("0" (str.++ Start_6 Start_6) (str.substr Start_9 StartInt_5 StartInt_2) (ite StartBool_3 Start_4 Start)))
   (Start_12 String ("0" (str.++ Start_7 Start_10) (str.at Start_1 StartInt) (str.substr Start_5 StartInt_6 StartInt_4) (str.replace Start_2 Start_5 Start_9)))
   (StartBool_4 Bool (false true (str.< Start_13 Start_11) (str.prefixof Start_3 Start_12) (= Start_13 Start_14) (= StartInt_1 StartInt_4) (<= StartInt_7 StartInt_9)))
   (StartInt_5 Int (0))
   (Start_13 String ("0" "b" y (str.++ Start_7 Start_11) (str.substr Start_6 StartInt_3 StartInt_8)))
   (StartBool_5 Bool (false true (and StartBool_1 StartBool_2) (str.<= Start Start_2) (str.contains Start_8 Start_4) (<= StartInt StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= y "1") "" (str.++ x "0"))))

(check-synth)
