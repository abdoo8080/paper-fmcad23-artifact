(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_11 String) (StartBool_2 Bool) (StartInt_8 Int) (Start_9 String) (StartBool_1 Bool) (Start_4 String) (StartInt_1 Int) (Start_2 String) (StartInt_6 Int) (StartInt_9 Int) (Start_5 String) (StartBool_3 Bool) (Start_8 String) (Start_1 String) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int) (StartInt_3 Int) (StartInt_5 Int) (Start_6 String) (Start_7 String) (StartInt_7 Int))
  ((Start String ("a" y "0" "1" x "" "b" (str.++ Start_1 Start) (str.at Start_2 StartInt_1) (ite StartBool Start_2 Start)))
   (StartInt Int (1 (str.indexof Start_7 Start_3 StartInt_4)))
   (StartBool Bool (true (not StartBool) (and StartBool_2 StartBool_1) (str.<= Start Start) (str.prefixof Start_7 Start_7) (str.contains Start_1 Start_1) (= Start_1 Start_8) (= StartInt_2 StartInt_8) (<= StartInt_6 StartInt)))
   (Start_10 String ("b" (str.at Start_3 StartInt_9) (str.substr Start_2 StartInt_8 StartInt_4) (str.replace Start_7 Start_6 Start_2)))
   (Start_11 String ("0" y (str.at Start_11 StartInt_7) (str.substr Start StartInt_6 StartInt_3) (str.replace Start_9 Start_10 Start_8) (ite StartBool_3 Start_3 Start_2)))
   (StartBool_2 Bool (false (str.< Start Start_10) (str.<= Start_2 Start_11) (str.prefixof Start Start_7) (str.suffixof Start_3 Start_3) (= Start_3 Start)))
   (StartInt_8 Int (1 0))
   (Start_9 String ("b" (str.at Start_1 StartInt_6) (str.replace Start_9 Start_4 Start_7) (str.from_int StartInt_4) (ite StartBool Start_4 Start_7)))
   (StartBool_1 Bool (true false (str.< Start_7 Start_2) (str.prefixof Start_4 Start_6) (str.contains Start_1 Start_9) (= Start_1 Start_2)))
   (Start_4 String ("" (str.++ Start_4 Start_5) (str.at Start_1 StartInt) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt)))
   (StartInt_1 Int (1 (str.len Start_1) (str.indexof Start_3 Start_4 StartInt_1) (str.to_int Start_3)))
   (Start_2 String (y (str.++ Start_2 Start_7) (str.at Start_3 StartInt_9) (str.substr Start_3 StartInt_4 StartInt_8)))
   (StartInt_6 Int (1 0 (str.indexof Start_7 Start_2 StartInt_1)))
   (StartInt_9 Int (0))
   (Start_5 String ("b" "1" "a" (str.substr Start_6 StartInt StartInt_2) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt_2) (ite StartBool Start Start_3)))
   (StartBool_3 Bool (false (not StartBool_3) (str.prefixof Start_3 Start_2) (str.suffixof Start_8 Start_10) (= Start_4 Start_9) (<= StartInt StartInt_5)))
   (Start_8 String (y "0" (ite StartBool_1 Start Start_8)))
   (Start_1 String ("0" (str.++ Start_2 Start_8) (str.at Start_8 StartInt) (str.substr Start_8 StartInt StartInt_8) (str.replace Start_2 Start_9 Start_2)))
   (Start_3 String (y (str.++ Start Start_7) (str.at Start_5 StartInt_5) (str.substr Start_3 StartInt_8 StartInt_4) (str.replace Start_2 Start_6 Start_4) (str.from_int StartInt_5)))
   (StartInt_2 Int (1 (str.indexof Start_3 Start StartInt_3) (str.to_int Start_1)))
   (StartInt_4 Int (0 (str.len Start_7) (str.indexof Start_5 Start_2 StartInt_6) (str.to_int Start)))
   (StartInt_3 Int (1 (str.to_int Start_6)))
   (StartInt_5 Int (1 (str.to_int Start_6)))
   (Start_6 String ("0" (str.++ Start_1 Start_3) (str.substr Start_5 StartInt_4 StartInt_4) (str.from_int StartInt_5)))
   (Start_7 String ("a" y (str.at Start_1 StartInt_2) (str.substr Start_2 StartInt_4 StartInt_7) (str.replace Start_2 Start_3 Start_1)))
   (StartInt_7 Int (0 1 (str.indexof Start_2 Start_4 StartInt_4) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y "0" "1") "0" "1")))

(check-synth)
