(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_7 Bool) (Start_19 String) (Start_1 String) (Start_2 String) (StartInt_8 Int) (Start_9 String) (StartInt_4 Int) (Start_4 String) (Start_17 String) (Start_14 String) (StartBool_4 Bool) (Start_7 String) (StartBool_2 Bool) (Start_5 String) (StartBool_5 Bool) (StartInt_2 Int) (StartBool_3 Bool) (StartInt_6 Int) (Start_16 String) (Start_6 String) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_7 Int) (Start_8 String) (StartInt_3 Int) (Start_11 String) (Start_3 String) (StartInt_1 Int) (Start_13 String) (Start_18 String) (Start_12 String) (Start_15 String) (Start_10 String) (StartBool_6 Bool))
  ((Start String ("0" "1" "b" "" y "a" x (str.++ Start_1 Start) (str.substr Start_2 StartInt StartInt) (str.replace Start_3 Start_2 Start_4) (str.from_int StartInt) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 0 (str.to_int Start_7)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_7 StartBool) (str.< Start_9 Start_6) (str.<= Start_18 Start_19) (str.prefixof Start_16 Start_3) (str.suffixof Start_4 Start_12) (= Start_12 Start_1) (<= StartInt_5 StartInt_5)))
   (StartBool_7 Bool (false (not StartBool_5) (and StartBool StartBool_2) (str.< Start_12 Start_9) (str.<= Start_12 Start_7) (str.prefixof Start_9 Start_16) (= Start_7 Start_4) (= StartInt_8 StartInt_3)))
   (Start_19 String ("a" x (str.++ Start_3 Start_15) (str.substr Start_2 StartInt_5 StartInt_7) (ite StartBool_3 Start_18 Start_16)))
   (Start_1 String (x (str.++ Start_9 Start) (str.at Start_3 StartInt_8) (str.substr Start_3 StartInt_6 StartInt_1) (str.replace Start_6 Start_11 Start_12) (ite StartBool_6 Start_11 Start_13)))
   (Start_2 String ("1" (str.++ Start_8 Start) (str.at Start_7 StartInt_6) (str.replace Start_5 Start Start_1) (ite StartBool_6 Start_3 Start_13)))
   (StartInt_8 Int (1 (str.len Start_5) (str.indexof Start_17 Start_2 StartInt_4)))
   (Start_9 String ("0" x (str.++ Start_4 Start_1) (str.substr Start_4 StartInt_2 StartInt_2) (str.from_int StartInt) (ite StartBool_3 Start_3 Start_1)))
   (StartInt_4 Int (1 0 (str.len Start_4) (str.indexof Start_5 Start StartInt_1) (str.to_int Start_7)))
   (Start_4 String ("0" (str.++ Start_6 Start_9) (str.at Start_11 StartInt_2) (str.replace Start_4 Start_11 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_11 Start_9)))
   (Start_17 String ("1" (str.++ Start_6 Start)))
   (Start_14 String ("0" x (str.++ Start_14 Start_2) (str.at Start_11 StartInt_3) (str.replace Start_2 Start_11 Start_16)))
   (StartBool_4 Bool (false true (not StartBool) (str.< Start_7 Start_1) (str.contains Start_3 Start_10) (= Start_5 Start_5) (= StartInt_2 StartInt_5) (<= StartInt_7 StartInt_5)))
   (Start_7 String (y "1" (str.at Start_4 StartInt_1) (str.substr Start_7 StartInt_4 StartInt_4) (ite StartBool_1 Start_6 Start_2)))
   (StartBool_2 Bool (true (str.< Start_8 Start_8) (str.<= Start_3 Start_6) (str.prefixof Start_5 Start_4) (str.suffixof Start_8 Start_5) (= Start_9 Start_4) (= StartInt_1 StartInt_1)))
   (Start_5 String ("1" x (str.at Start_6 StartInt_4) (str.substr Start_1 StartInt_4 StartInt_4) (str.replace Start_5 Start_3 Start_2)))
   (StartBool_5 Bool (true false (and StartBool_4 StartBool_6) (= Start_15 Start_16) (<= StartInt_8 StartInt_6)))
   (StartInt_2 Int (1 (str.to_int Start_2)))
   (StartBool_3 Bool (false (str.< Start_2 Start_5) (str.suffixof Start_2 Start_10) (= Start_8 Start_9)))
   (StartInt_6 Int (1 0 (str.indexof Start_9 Start_14 StartInt_2) (str.to_int Start_15)))
   (Start_16 String ("b" (str.substr Start_12 StartInt_6 StartInt) (str.replace Start_1 Start_15 Start_17) (str.from_int StartInt_2) (ite StartBool_5 Start_11 Start_7)))
   (Start_6 String (y (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start_5 Start_3 Start_6) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_7)))
   (StartInt_5 Int (0 1 (str.len Start) (str.indexof Start_2 Start_7 StartInt_3)))
   (StartBool_1 Bool (true (not StartBool_2) (str.<= Start_1 Start) (str.suffixof Start Start_4) (= Start_5 Start_6) (= StartInt_1 StartInt_2)))
   (StartInt_7 Int (0 1 (str.to_int Start_5)))
   (Start_8 String ("a" y "b" (str.at Start_6 StartInt_2) (str.replace Start_9 Start_4 Start_1) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 0))
   (Start_11 String ("1" (str.at Start_11 StartInt) (str.from_int StartInt_2)))
   (Start_3 String (x y "a" (str.++ Start_12 Start_2) (str.substr Start_13 StartInt_5 StartInt_5) (str.replace Start_3 Start_9 Start_6)))
   (StartInt_1 Int (1 0))
   (Start_13 String ("1" y (str.substr Start_1 StartInt_4 StartInt_4)))
   (Start_18 String ("a" "0" "" (str.at Start_17 StartInt_2)))
   (Start_12 String (y (str.substr Start_2 StartInt_3 StartInt_1) (str.replace Start_3 Start_14 Start_12) (str.from_int StartInt_6) (ite StartBool_3 Start_11 Start_5)))
   (Start_15 String (x (str.++ Start_4 Start_16) (str.at Start_5 StartInt_4) (str.replace Start_8 Start_3 Start_6) (str.from_int StartInt) (ite StartBool_4 Start_17 Start_12)))
   (Start_10 String (y "a" "" (str.++ Start_5 Start_4) (str.at Start_9 StartInt_5) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_8)))
   (StartBool_6 Bool (true (and StartBool_4 StartBool) (str.<= Start_7 Start_1) (str.suffixof Start_9 Start_17) (= Start_18 Start_18)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ (str.++ y "a") "0") "b" "")))

(check-synth)
