(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_4 Int) (Start_3 String) (Start_5 String) (StartInt_3 Int) (Start_4 String) (Start_7 String) (Start_2 String) (StartBool_2 Bool) (Start_6 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_11 String) (Start_9 String) (Start_8 String) (Start_10 String) (StartBool_3 Bool))
  ((Start String ("0" x "1" "" (str.++ Start_1 Start) (str.substr Start_2 StartInt StartInt) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 (str.len Start_5)))
   (StartBool Bool (false (not StartBool_3) (str.< Start_10 Start_3) (str.prefixof Start_7 Start_9) (= StartInt StartInt) (<= StartInt StartInt_1)))
   (Start_1 String (x (str.replace Start_9 Start_6 Start_4) (ite StartBool Start_10 Start_8)))
   (StartInt_4 Int (1 0 (str.len Start_7) (str.to_int Start_11)))
   (Start_3 String ("" (str.replace Start_10 Start_8 Start_7) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_6)))
   (Start_5 String ("" "0" (str.++ Start_6 Start_1) (str.from_int StartInt_2) (ite StartBool_3 Start_9 Start_6)))
   (StartInt_3 Int (1 (str.len Start_4)))
   (Start_4 String (y (str.++ Start_5 Start_6) (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_4 Start Start) (str.from_int StartInt_1) (ite StartBool Start Start_7)))
   (Start_7 String (y "0" (ite StartBool Start_7 Start_2)))
   (Start_2 String ("b" "a" (str.at Start_2 StartInt_1) (str.replace Start_3 Start_2 Start) (ite StartBool Start Start_4)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool_3) (str.<= Start_8 Start_1) (str.prefixof Start_4 Start_8) (str.contains Start_3 Start) (= StartInt_1 StartInt) (<= StartInt_2 StartInt_1)))
   (Start_6 String ("" "0" y x "b" "1" "a" (str.replace Start Start_5 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start Start_5)))
   (StartInt_1 Int (1 (str.len Start_11) (str.indexof Start_7 Start_2 StartInt_3) (str.to_int Start_8)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_1 StartBool_2) (str.< Start Start_3) (str.prefixof Start Start_2) (str.contains Start_5 Start_2)))
   (StartInt_2 Int (0 (str.indexof Start_9 Start_2 StartInt_2)))
   (Start_11 String (y "a" (str.++ Start_3 Start) (str.at Start StartInt_2) (str.substr Start_2 StartInt_4 StartInt_4)))
   (Start_9 String ("a" (str.++ Start_9 Start_4) (str.at Start_2 StartInt_2) (str.substr Start_7 StartInt_1 StartInt_2) (ite StartBool_2 Start_2 Start_9)))
   (Start_8 String ("b" (str.replace Start_8 Start_5 Start_3) (str.from_int StartInt_1) (ite StartBool_3 Start_6 Start_10)))
   (Start_10 String ("0" "" "1" (str.substr Start_10 StartInt StartInt_3) (str.replace Start Start_8 Start_6)))
   (StartBool_3 Bool (false true (not StartBool_2) (str.< Start_4 Start_2) (str.<= Start_6 Start_8) (str.contains Start_1 Start_3) (= StartInt StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.at "1" (str.to_int x)))))

(check-synth)
