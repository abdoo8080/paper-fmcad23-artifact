(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_13 String) (Start_12 String) (Start_2 String) (Start_11 String) (Start_6 String) (Start_1 String) (StartBool_1 Bool) (Start_3 String) (Start_5 String) (Start_8 String) (Start_4 String) (StartBool_4 Bool) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_10 String) (StartBool_3 Bool) (StartInt_2 Int) (Start_7 String) (Start_9 String) (StartInt_1 Int) (StartBool_5 Bool))
  ((Start String (x (ite StartBool_1 Start Start_1)))
   (StartInt Int (0 (str.indexof Start_7 Start_14 StartInt_2) (str.to_int Start_3)))
   (StartBool Bool (false true (str.prefixof Start_6 Start_14) (str.suffixof Start_12 Start_12)))
   (Start_14 String ("a" x (str.from_int StartInt_4) (ite StartBool_4 Start Start_9)))
   (Start_13 String (x y "a" (str.++ Start_13 Start_6) (str.at Start_4 StartInt_4) (str.replace Start_14 Start_13 Start_6)))
   (Start_12 String ("0" (str.at Start_8 StartInt) (str.substr Start_12 StartInt_4 StartInt_2) (ite StartBool_3 Start_10 Start_3)))
   (Start_2 String (x "1" "b" y (str.at Start_1 StartInt_2) (str.substr Start_5 StartInt_3 StartInt_1) (str.replace Start_7 Start_8 Start_4) (ite StartBool_5 Start_4 Start_12)))
   (Start_11 String ("b" "1" (str.++ Start_3 Start_6) (ite StartBool_4 Start_4 Start_11)))
   (Start_6 String ("" y (str.at Start_7 StartInt) (str.replace Start_1 Start_11 Start_2) (str.from_int StartInt_3)))
   (Start_1 String ("a" x (str.at Start_1 StartInt) (str.replace Start_2 Start Start_2) (ite StartBool_1 Start_1 Start_3)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_4) (str.< Start_4 Start_8) (str.prefixof Start_10 Start_5) (str.suffixof Start_6 Start_13) (= Start_13 Start_8) (<= StartInt_1 StartInt_1)))
   (Start_3 String ("a" (str.at Start_4 StartInt_1) (str.replace Start_5 Start_2 Start_1) (str.from_int StartInt_1)))
   (Start_5 String ("" "b" x (str.++ Start_4 Start) (ite StartBool_2 Start_4 Start_1)))
   (Start_8 String (y (str.at Start_2 StartInt_1) (str.replace Start_7 Start_9 Start_10) (ite StartBool Start_1 Start_5)))
   (Start_4 String ("0" x "b" (str.++ Start_10 Start_11) (str.at Start_6 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_3) (str.from_int StartInt_2)))
   (StartBool_4 Bool (true (and StartBool StartBool_2) (str.< Start_2 Start_6) (str.prefixof Start_3 Start_7) (str.suffixof Start_3 Start_3) (str.contains Start Start_2)))
   (StartBool_2 Bool (false (str.< Start_2 Start_6) (str.<= Start_5 Start_7) (= StartInt_2 StartInt_3)))
   (StartInt_3 Int (1 (str.indexof Start_7 Start_7 StartInt_2)))
   (StartInt_4 Int (0 1 (str.to_int Start_3)))
   (Start_10 String ("0" (str.replace Start_3 Start_2 Start_8) (str.from_int StartInt_2)))
   (StartBool_3 Bool (true (and StartBool_4 StartBool_5) (str.< Start_7 Start_6) (str.<= Start_8 Start_3) (str.contains Start_2 Start) (= Start_2 Start_1) (= StartInt StartInt_2)))
   (StartInt_2 Int (0 1 (str.to_int Start_5)))
   (Start_7 String ("" "a" (str.at Start_5 StartInt_3) (ite StartBool_3 Start_7 Start_7)))
   (Start_9 String ("0" (str.++ Start_9 Start_6) (str.replace Start_8 Start_5 Start_2) (str.from_int StartInt)))
   (StartInt_1 Int (1))
   (StartBool_5 Bool (false (and StartBool_3 StartBool) (str.< Start_5 Start_10) (str.contains Start_5 Start_4) (= Start_4 Start) (= StartInt_1 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "1" (str.replace (str.++ "1" "0") x "1"))))

(check-synth)
