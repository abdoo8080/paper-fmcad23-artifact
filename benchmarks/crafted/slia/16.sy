(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_1 String) (StartInt_5 Int) (Start_7 String) (Start_2 String) (StartBool_2 Bool) (Start_6 String) (StartInt_1 Int) (StartInt_6 Int) (Start_4 String) (StartBool_1 Bool) (Start_3 String) (StartInt_2 Int) (Start_5 String) (StartInt_4 Int) (Start_8 String) (StartInt_3 Int))
  ((Start String (x "a" (str.++ Start Start) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start Start_1)))
   (StartInt Int (1 (str.indexof Start_5 Start_7 StartInt_2) (str.to_int Start_9)))
   (StartBool Bool (false (and StartBool_1 StartBool) (str.<= Start_8 Start_9) (str.suffixof Start Start_9) (str.contains Start Start_9) (= Start_7 Start_9)))
   (Start_9 String (x (str.++ Start_5 Start_9) (str.substr Start_9 StartInt_5 StartInt_3) (ite StartBool_1 Start_7 Start_5)))
   (Start_1 String (x (str.++ Start_6 Start) (str.substr Start_3 StartInt_3 StartInt_5) (str.from_int StartInt_6) (ite StartBool_2 Start_8 Start_4)))
   (StartInt_5 Int (0 1))
   (Start_7 String ("1" (str.at Start_3 StartInt_2) (str.substr Start_6 StartInt_4 StartInt_2) (str.from_int StartInt_2) (ite StartBool_2 Start_4 Start_6)))
   (Start_2 String ("" (str.replace Start_2 Start Start_1)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_2 StartBool) (str.<= Start_7 Start_2) (str.contains Start_3 Start_8) (= Start_6 Start_1)))
   (Start_6 String ("" (str.++ Start_5 Start_5) (str.at Start_5 StartInt_2) (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_2 Start_6 Start_2) (str.from_int StartInt_3)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start_2 Start_4 StartInt_1)))
   (StartInt_6 Int (0 1))
   (Start_4 String ("1" (str.at Start StartInt_1) (str.from_int StartInt_3) (ite StartBool Start_5 Start_2)))
   (StartBool_1 Bool (false (not StartBool_1) (str.< Start_6 Start_7) (str.prefixof Start_6 Start_2) (str.suffixof Start Start_6) (= Start_8 Start) (<= StartInt_1 StartInt)))
   (Start_3 String ("" (str.++ Start_7 Start_7) (str.at Start StartInt_2) (str.substr Start_1 StartInt_5 StartInt_4)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.to_int Start_2)))
   (Start_5 String ("b" "1" (str.at Start_6 StartInt_1) (str.replace Start_3 Start_3 Start_3) (ite StartBool_1 Start_3 Start_1)))
   (StartInt_4 Int (0 (str.len Start_2)))
   (Start_8 String ("" "a" x "1" (str.from_int StartInt_2) (ite StartBool_2 Start_3 Start_7)))
   (StartInt_3 Int (0 (str.indexof Start_8 Start_2 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" x "b")))

(check-synth)
