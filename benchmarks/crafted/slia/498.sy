(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (StartInt_5 Int) (Start_2 String) (Start_10 String) (StartInt_4 Int) (Start_12 String) (Start_6 String) (StartInt_8 Int) (StartInt_6 Int) (Start_9 String) (StartBool_1 Bool) (StartBool_3 Bool) (Start_3 String) (Start_7 String) (StartInt_3 Int) (Start_4 String) (Start_11 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_13 String) (Start_17 String) (Start_8 String) (Start_15 String) (Start_1 String) (Start_14 String) (StartInt_7 Int) (Start_5 String) (StartInt_10 Int) (StartInt_9 Int) (Start_18 String) (Start_16 String) (StartInt_1 Int) (Start_19 String))
  ((Start String ("0" "1" "" y (str.at Start_1 StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (0 1 (str.indexof Start_17 Start_9 StartInt_11)))
   (StartBool Bool (false (and StartBool_1 StartBool_1) (str.< Start_9 Start_16) (str.<= Start_9 Start) (str.suffixof Start_5 Start_1) (str.contains Start_5 Start_16) (= Start_18 Start) (= StartInt_11 StartInt_11) (<= StartInt_5 StartInt_11)))
   (StartInt_11 Int (0 (str.len Start_13)))
   (StartInt_5 Int (1 (str.len Start_8) (str.indexof Start_19 Start_18 StartInt_8)))
   (Start_2 String ("0" (str.substr Start_2 StartInt_4 StartInt_5) (str.from_int StartInt_6)))
   (Start_10 String (y "1" "" "0" x "a" "b" (str.substr Start_7 StartInt_6 StartInt_6) (str.from_int StartInt_1)))
   (StartInt_4 Int (0 (str.indexof Start_7 Start_4 StartInt_7) (str.to_int Start_4)))
   (Start_12 String (x (str.++ Start_11 Start_11) (str.replace Start_12 Start_11 Start_4) (ite StartBool_3 Start_4 Start_7)))
   (Start_6 String ("0" "" (str.++ Start_6 Start_3) (str.replace Start_6 Start_3 Start_3) (str.from_int StartInt_5) (ite StartBool Start_7 Start_8)))
   (StartInt_8 Int (1 0 (str.len Start_5) (str.to_int Start_8)))
   (StartInt_6 Int (1 (str.len Start_3) (str.to_int Start_2)))
   (Start_9 String ("" y x "b" "0" (str.at Start_9 StartInt_3) (str.substr Start StartInt_5 StartInt_7) (ite StartBool_2 Start_3 Start_11)))
   (StartBool_1 Bool (true (not StartBool_1) (str.< Start_2 Start_5) (str.contains Start_6 Start_1) (= Start_3 Start_2)))
   (StartBool_3 Bool (true (not StartBool_3) (str.< Start_1 Start_9) (str.prefixof Start_4 Start_10) (str.suffixof Start_11 Start_7) (= Start_7 Start_10) (<= StartInt_5 StartInt)))
   (Start_3 String ("1" (str.++ Start_3 Start_4) (str.at Start_1 StartInt_2) (str.substr Start_3 StartInt_3 StartInt) (str.from_int StartInt_5) (ite StartBool_1 Start Start)))
   (Start_7 String (y "a" (str.++ Start_8 Start_1) (str.at Start_8 StartInt_8) (str.substr Start_3 StartInt_6 StartInt_6) (ite StartBool_3 Start_6 Start_9)))
   (StartInt_3 Int (1))
   (Start_4 String ("0" "1" "a" y "b" (str.++ Start_15 Start_16) (str.substr Start_2 StartInt_9 StartInt_1) (str.from_int StartInt_10) (ite StartBool_2 Start_15 Start)))
   (Start_11 String (x (str.++ Start_1 Start_6) (str.at Start_7 StartInt_4) (str.substr Start_12 StartInt_5 StartInt_4) (str.replace Start_7 Start_6 Start_3) (ite StartBool_1 Start_8 Start_11)))
   (StartInt_2 Int (1 0 (str.indexof Start Start_2 StartInt_3)))
   (StartBool_2 Bool (false (str.< Start_3 Start_12) (str.<= Start_13 Start_14) (str.prefixof Start_12 Start_15) (<= StartInt_1 StartInt_1)))
   (Start_13 String ("" "1" (str.at Start_4 StartInt_2) (str.substr Start_1 StartInt_7 StartInt_4) (str.from_int StartInt_7)))
   (Start_17 String (y "0" (str.++ Start_2 Start_14) (str.at Start_3 StartInt) (str.replace Start_16 Start_3 Start_5) (ite StartBool Start_3 Start_16)))
   (Start_8 String (y "1" "b" "0" "a" (str.at Start_9 StartInt_5) (str.replace Start_1 Start_10 Start_2) (str.from_int StartInt_5)))
   (Start_15 String ("0" "1" (str.from_int StartInt_4)))
   (Start_1 String ("a" (str.++ Start_14 Start_8) (str.at Start StartInt_8) (str.from_int StartInt_5)))
   (Start_14 String ("" x (str.++ Start_2 Start_9) (str.at Start StartInt_2) (str.substr Start_15 StartInt_1 StartInt_7) (str.from_int StartInt) (ite StartBool_1 Start_12 Start_13)))
   (StartInt_7 Int (1 (str.len Start_8) (str.indexof Start_10 Start_7 StartInt_7)))
   (Start_5 String (y "1" (str.++ Start_3 Start_10) (str.substr Start_4 StartInt StartInt_4) (str.from_int StartInt_6)))
   (StartInt_10 Int (0 1 (str.indexof Start_9 Start StartInt_4) (str.to_int Start_17)))
   (StartInt_9 Int (0 1 (str.len Start) (str.indexof Start Start_18 StartInt) (str.to_int Start_3)))
   (Start_18 String ("b" (str.++ Start Start_6)))
   (Start_16 String ("a" (str.++ Start_12 Start_18) (str.at Start_19 StartInt_7) (str.substr Start_19 StartInt_1 StartInt_9)))
   (StartInt_1 Int (0 (str.len Start_9)))
   (Start_19 String ("" (str.++ Start_14 Start_8) (str.from_int StartInt_9) (ite StartBool_3 Start_19 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x "b")))

(check-synth)
