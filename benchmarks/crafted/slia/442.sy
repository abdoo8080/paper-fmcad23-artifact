(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_10 String) (StartInt_6 Int) (StartInt_4 Int) (StartBool_3 Bool) (Start_8 String) (Start_6 String) (StartBool_1 Bool) (Start_4 String) (StartBool_2 Bool) (Start_12 String) (Start_11 String) (Start_3 String) (StartInt_3 Int) (StartInt_7 Int) (Start_5 String) (StartInt_2 Int) (StartInt_5 Int) (Start_1 String) (Start_2 String) (Start_9 String) (StartInt_1 Int) (Start_7 String))
  ((Start String (y "a" (str.++ Start_1 Start) (str.substr Start StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_6) (str.indexof Start_4 Start_7 StartInt_3) (str.to_int Start_4)))
   (StartBool Bool (true false (and StartBool StartBool_4) (str.< Start_2 Start_3) (str.<= Start_10 Start_3) (<= StartInt_7 StartInt_7)))
   (StartBool_4 Bool (true (str.< Start_12 Start_1) (str.prefixof Start_8 Start_1) (= Start_10 Start_1) (<= StartInt_6 StartInt_3)))
   (Start_10 String ("0" "a" "1" (str.at Start_6 StartInt_3) (ite StartBool_2 Start_4 Start_2)))
   (StartInt_6 Int (1 (str.indexof Start_1 Start_5 StartInt_2)))
   (StartInt_4 Int (1 (str.indexof Start_2 Start_9 StartInt_1) (str.to_int Start_1)))
   (StartBool_3 Bool (true (str.< Start_8 Start_9) (str.prefixof Start_9 Start_4) (<= StartInt_4 StartInt_1)))
   (Start_8 String (y (str.++ Start Start_3) (str.substr Start_4 StartInt_2 StartInt_1) (ite StartBool_3 Start_8 Start_4)))
   (Start_6 String ("1" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_6) (str.replace Start_3 Start_3 Start_7) (str.from_int StartInt_1)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_2 StartBool) (str.<= Start_1 Start_1) (str.prefixof Start_3 Start_3) (str.contains Start_1 Start_4)))
   (Start_4 String ("b" (str.replace Start_3 Start_1 Start)))
   (StartBool_2 Bool (false (= Start_1 Start_5) (= StartInt_1 StartInt_2)))
   (Start_12 String ("1" (str.++ Start_12 Start_6) (ite StartBool Start_7 Start_8)))
   (Start_11 String (x (str.++ Start_9 Start_7) (str.from_int StartInt)))
   (Start_3 String ("1" (str.++ Start_2 Start_3) (ite StartBool_2 Start_5 Start_4)))
   (StartInt_3 Int (1 0 (str.to_int Start_2)))
   (StartInt_7 Int (1 (str.len Start_8) (str.indexof Start_4 Start_4 StartInt) (str.to_int Start_11)))
   (Start_5 String ("" (ite StartBool_1 Start_1 Start_1)))
   (StartInt_2 Int (0 (str.indexof Start_5 Start_5 StartInt)))
   (StartInt_5 Int (1 (str.to_int Start_8)))
   (Start_1 String ("0" "a" "b" x (str.substr Start StartInt_1 StartInt_1) (str.replace Start_2 Start Start) (ite StartBool_1 Start_2 Start)))
   (Start_2 String ("b" "a" "" (str.substr Start_5 StartInt StartInt_2) (str.replace Start_5 Start Start_4) (ite StartBool_2 Start_5 Start_4)))
   (Start_9 String ("a" (str.++ Start_9 Start_6) (str.at Start_1 StartInt_5)))
   (StartInt_1 Int (0 (str.len Start_4) (str.indexof Start_4 Start_2 StartInt)))
   (Start_7 String ("b" (str.++ Start_6 Start_1) (str.substr Start_7 StartInt_3 StartInt_2) (str.replace Start_6 Start Start_3) (ite StartBool_2 Start_6 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.replace "1" y "") y)))

(check-synth)
