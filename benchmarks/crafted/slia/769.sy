(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_7 Int) (Start_12 String) (Start_1 String) (Start_3 String) (StartBool_3 Bool) (Start_11 String) (Start_8 String) (Start_9 String) (StartInt_1 Int) (StartInt_2 Int) (StartBool_4 Bool) (StartInt_6 Int) (StartInt_3 Int) (StartBool_2 Bool) (Start_6 String) (StartInt_4 Int) (StartInt_5 Int) (StartBool_1 Bool) (Start_10 String) (Start_13 String) (Start_5 String) (Start_4 String) (Start_2 String) (Start_7 String))
  ((Start String (y "b" (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start Start Start_1) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start_2) (str.indexof Start_7 Start_3 StartInt_4) (str.to_int Start_5)))
   (StartBool Bool (false true (str.< Start_4 Start_8) (str.<= Start_8 Start_5) (str.suffixof Start_9 Start_5) (str.contains Start_5 Start_1) (= Start_13 Start_8) (<= StartInt_6 StartInt_7)))
   (Start_14 String ("0" (str.++ Start_3 Start_3) (str.at Start_12 StartInt_2) (str.replace Start_6 Start Start_10)))
   (StartInt_7 Int (0 1 (str.len Start_6) (str.to_int Start_14)))
   (Start_12 String (x "b" (str.substr Start_9 StartInt_5 StartInt_1) (str.replace Start_9 Start_13 Start_13) (ite StartBool_3 Start_4 Start_11)))
   (Start_1 String (x (str.++ Start_8 Start_12) (str.at Start_3 StartInt_5) (str.substr Start_1 StartInt StartInt_6) (str.replace Start_13 Start_8 Start_12) (str.from_int StartInt_5) (ite StartBool_2 Start_4 Start_13)))
   (Start_3 String (y "0" "b" (ite StartBool_2 Start_7 Start_6)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_3 StartBool_4) (str.< Start_13 Start_7) (str.<= Start_13 Start_10) (= StartInt_5 StartInt_6) (<= StartInt_4 StartInt_6)))
   (Start_11 String ("" (str.++ Start_1 Start) (str.at Start StartInt_2) (ite StartBool_1 Start_6 Start_7)))
   (Start_8 String (y "a" "" "0" (str.substr Start_2 StartInt StartInt)))
   (Start_9 String ("1" "b" (str.++ Start_10 Start_5) (str.substr Start_7 StartInt_2 StartInt_5) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_4)))
   (StartInt_1 Int (0 (str.indexof Start Start_1 StartInt_2) (str.to_int Start)))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool) (str.<= Start_2 Start_4) (str.suffixof Start_13 Start_9) (= Start_9 Start_1) (= StartInt StartInt_3) (<= StartInt StartInt)))
   (StartInt_6 Int (1 0))
   (StartInt_3 Int (0 1 (str.indexof Start Start_3 StartInt_2) (str.to_int Start_1)))
   (StartBool_2 Bool (true (not StartBool_1) (str.<= Start_5 Start_7) (str.prefixof Start Start_9) (str.suffixof Start_5 Start_5) (= Start_1 Start_2) (= StartInt_2 StartInt_4) (<= StartInt_4 StartInt_5)))
   (Start_6 String ("" "b" y (str.++ Start_8 Start_6) (str.substr Start_7 StartInt_2 StartInt_2) (str.from_int StartInt) (ite StartBool_2 Start_1 Start_5)))
   (StartInt_4 Int (1 0 (str.indexof Start_3 Start_10 StartInt_3)))
   (StartInt_5 Int (1 0 (str.indexof Start_10 Start_1 StartInt_5)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_3 Start_3) (str.<= Start_2 Start) (str.suffixof Start_3 Start_3) (str.contains Start Start_4) (= Start_5 Start) (= StartInt StartInt_3)))
   (Start_10 String ("b" "0" (str.++ Start Start_3)))
   (Start_13 String ("a" "0" (str.++ Start_7 Start_6) (str.replace Start_9 Start_13 Start_7)))
   (Start_5 String (y "0" "b" (str.++ Start_4 Start_5) (str.at Start_5 StartInt_3) (str.substr Start_6 StartInt_1 StartInt_3) (ite StartBool_1 Start_3 Start_7)))
   (Start_4 String (x (str.++ Start_3 Start_2) (str.at Start_8 StartInt_6) (str.replace Start_9 Start_5 Start_7) (ite StartBool_1 Start_11 Start_9)))
   (Start_2 String ("b" "a" "1" (str.++ Start_3 Start_3) (str.at Start_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_2)))
   (Start_7 String ("" (str.at Start_4 StartInt_3) (str.replace Start_3 Start_2 Start_6) (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "b" (ite (str.prefixof "0" x) "1" "a"))))

(check-synth)
