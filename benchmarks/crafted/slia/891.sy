(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartBool_6 Bool) (Start_4 String) (Start_12 String) (Start_10 String) (Start_9 String) (Start_8 String) (Start_13 String) (StartInt_3 Int) (StartBool_5 Bool) (StartInt_1 Int) (Start_3 String) (Start_1 String) (StartInt_4 Int) (StartInt_2 Int) (Start_5 String) (Start_7 String) (Start_2 String) (StartBool_1 Bool) (Start_6 String) (StartBool_3 Bool) (StartInt_5 Int) (Start_11 String) (StartBool_2 Bool) (Start_14 String) (StartBool_4 Bool))
  ((Start String ("0" (str.++ Start Start) (str.substr Start_1 StartInt StartInt_1)))
   (StartInt Int (1 0 (str.len Start_13) (str.indexof Start_13 Start_7 StartInt_3) (str.to_int Start_3)))
   (StartBool Bool (false (not StartBool_3) (and StartBool_3 StartBool) (str.prefixof Start_2 Start_2) (str.suffixof Start_5 Start_3) (str.contains Start Start_4) (= Start_9 Start_5)))
   (StartInt_6 Int (1 (str.len Start_2)))
   (StartBool_6 Bool (true false (and StartBool_4 StartBool_6) (str.< Start_5 Start) (str.<= Start_3 Start_6) (str.contains Start_2 Start_12) (= Start_9 Start_5) (<= StartInt_2 StartInt_4)))
   (Start_4 String ("" (str.++ Start Start_2) (str.at Start StartInt_2) (str.substr Start_5 StartInt_3 StartInt_4) (str.from_int StartInt_4) (ite StartBool_6 Start_2 Start_6)))
   (Start_12 String (y (str.substr Start_8 StartInt_5 StartInt)))
   (Start_10 String (x (str.replace Start_4 Start_8 Start_8)))
   (Start_9 String ("1" (str.at Start_6 StartInt_1) (str.substr Start_8 StartInt_2 StartInt) (str.replace Start_10 Start_11 Start_7) (str.from_int StartInt_3)))
   (Start_8 String (y "b" (str.substr Start_9 StartInt_4 StartInt_2) (str.from_int StartInt_4)))
   (Start_13 String ("b" x (str.replace Start_14 Start_1 Start_9)))
   (StartInt_3 Int (1 (str.indexof Start_12 Start_12 StartInt)))
   (StartBool_5 Bool (false (str.prefixof Start_4 Start_1) (= Start_6 Start_3)))
   (StartInt_1 Int (0 1 (str.indexof Start Start StartInt)))
   (Start_3 String (x "a" (str.from_int StartInt_2)))
   (Start_1 String ("a" (str.++ Start_2 Start) (str.at Start StartInt_2)))
   (StartInt_4 Int (1 (str.indexof Start_1 Start_2 StartInt_3)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start_1 Start StartInt_2) (str.to_int Start)))
   (Start_5 String ("b" "0" "" (ite StartBool_1 Start_4 Start_6)))
   (Start_7 String ("b" y "a" (str.from_int StartInt_5)))
   (Start_2 String ("b" "0" (str.at Start_4 StartInt) (str.substr Start_3 StartInt_3 StartInt_1) (str.replace Start_5 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_3)))
   (StartBool_1 Bool (false (not StartBool_2) (and StartBool_1 StartBool) (str.< Start_5 Start_3) (str.suffixof Start_5 Start) (str.contains Start_6 Start_4)))
   (Start_6 String (x (str.at Start_5 StartInt_2) (str.replace Start Start_6 Start)))
   (StartBool_3 Bool (false (not StartBool_4) (str.<= Start_7 Start_5) (str.prefixof Start_3 Start_8) (str.contains Start_2 Start_7) (<= StartInt_2 StartInt_4)))
   (StartInt_5 Int (0 1 (str.indexof Start_3 Start_4 StartInt_1)))
   (Start_11 String ("a" y "" (str.at Start_11 StartInt)))
   (StartBool_2 Bool (false true (not StartBool_3) (and StartBool StartBool_4) (str.< Start_1 Start_6) (str.prefixof Start Start_1) (str.contains Start_7 Start_4) (= Start_7 Start_6) (= StartInt_3 StartInt_4) (<= StartInt_3 StartInt_1)))
   (Start_14 String ("b" (str.++ Start_4 Start_4) (str.at Start_3 StartInt_3) (str.replace Start_13 Start_4 Start_11) (str.from_int StartInt_6) (ite StartBool_1 Start_7 Start_14)))
   (StartBool_4 Bool (true (and StartBool_4 StartBool_5) (str.< Start_5 Start_7) (str.<= Start_3 Start_3) (str.prefixof Start_1 Start_7) (str.suffixof Start_3 Start_2) (str.contains Start_7 Start_7) (= Start Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ "a" "a") (str.indexof "1" (str.substr "b" (str.indexof y "0" 0) 1) (str.len y)))))

(check-synth)
