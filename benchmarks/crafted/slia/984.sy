(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_12 String) (Start_2 String) (StartInt_1 Int) (StartInt_2 Int) (Start_13 String) (StartInt_3 Int) (Start_7 String) (Start_11 String) (StartInt_8 Int) (Start_1 String) (StartInt_7 Int) (Start_3 String) (Start_10 String) (StartBool_2 Bool) (Start_14 String) (Start_4 String) (Start_5 String) (Start_6 String) (StartInt_4 Int) (Start_8 String) (StartInt_5 Int) (Start_9 String) (StartBool_1 Bool) (StartInt_6 Int))
  ((Start String (y "b" x (str.++ Start_1 Start_2) (str.at Start_2 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt_4)))
   (StartInt Int (0 (str.len Start_11) (str.indexof Start Start_15 StartInt_2) (str.to_int Start_12)))
   (StartBool Bool (true false (str.contains Start_9 Start_6) (= StartInt_5 StartInt_1)))
   (Start_15 String ("" y "b" (str.++ Start_15 Start_11) (str.from_int StartInt_3)))
   (Start_12 String ("0" (str.at Start_14 StartInt_7) (str.substr Start_9 StartInt_8 StartInt_1)))
   (Start_2 String ("b" (str.++ Start_6 Start_12) (str.at Start_5 StartInt_4) (str.substr Start StartInt StartInt) (str.replace Start_9 Start Start) (str.from_int StartInt_3) (ite StartBool_2 Start_3 Start_13)))
   (StartInt_1 Int (1))
   (StartInt_2 Int (1 (str.len Start_7) (str.indexof Start_6 Start_10 StartInt_5)))
   (Start_13 String (x y (str.at Start_9 StartInt_1) (str.replace Start_12 Start_1 Start_5) (str.from_int StartInt_4)))
   (StartInt_3 Int (1 (str.len Start_8) (str.to_int Start_9)))
   (Start_7 String ("1" (str.++ Start Start_7) (str.at Start_6 StartInt_2) (str.substr Start_11 StartInt_7 StartInt_1) (str.from_int StartInt_5)))
   (Start_11 String ("" (str.++ Start_11 Start_5) (str.at Start StartInt_2) (str.substr Start_4 StartInt_4 StartInt_1) (str.replace Start_3 Start_3 Start_7)))
   (StartInt_8 Int (1 0 (str.to_int Start_5)))
   (Start_1 String ("" x (str.at Start_10 StartInt_8) (str.substr Start_7 StartInt_1 StartInt_6)))
   (StartInt_7 Int (0 1 (str.len Start_10) (str.indexof Start_5 Start_7 StartInt_2) (str.to_int Start_9)))
   (Start_3 String ("1" (str.++ Start_4 Start) (str.substr Start_2 StartInt_2 StartInt_1) (str.replace Start_1 Start_4 Start) (str.from_int StartInt_1)))
   (Start_10 String ("0" (str.++ Start_8 Start_5) (str.at Start_5 StartInt_1) (ite StartBool Start_1 Start_7)))
   (StartBool_2 Bool (true (and StartBool StartBool) (str.<= Start_1 Start_6) (str.prefixof Start_11 Start_11)))
   (Start_14 String ("0"))
   (Start_4 String ("0" "" x (str.replace Start_4 Start_5 Start) (str.from_int StartInt_4)))
   (Start_5 String ("a" "1" (str.++ Start_5 Start) (str.substr Start_6 StartInt StartInt_2)))
   (Start_6 String ("a" "b" (str.++ Start_2 Start_3) (str.replace Start_4 Start_1 Start_7) (str.from_int StartInt_1) (ite StartBool_1 Start_8 Start_9)))
   (StartInt_4 Int (1 0 (str.len Start_3)))
   (Start_8 String (y "0" "1" "b" (ite StartBool Start Start_6)))
   (StartInt_5 Int (0 (str.to_int Start_9)))
   (Start_9 String (x "a" "" y (str.++ Start Start_2) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_7 Start_8 Start_4) (ite StartBool Start_9 Start_9)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (str.< Start_5 Start_4) (str.<= Start_6 Start_5) (str.prefixof Start_2 Start_9) (str.contains Start_6 Start_5) (= Start Start_8) (= StartInt_5 StartInt_2) (<= StartInt_6 StartInt_3)))
   (StartInt_6 Int (0 (str.indexof Start_10 Start_10 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.indexof (str.replace y "0" (str.at x 0)) "0" (str.indexof "a" y 0)))))

(check-synth)
