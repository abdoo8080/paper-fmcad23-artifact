(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_9 String) (Start_8 String) (StartBool_1 Bool) (StartInt_6 Int) (Start_1 String) (StartInt_1 Int) (Start_2 String) (StartInt_3 Int) (StartInt_2 Int) (Start_3 String) (StartInt_8 Int) (Start_6 String) (Start_7 String) (Start_4 String) (StartInt_4 Int) (StartInt_5 Int) (Start_5 String))
  ((Start String ("a" "0" "1" (str.at Start StartInt) (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt) (ite StartBool Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_5 Start_2 StartInt_4) (str.to_int Start)))
   (StartBool Bool (false (str.< Start_3 Start_3) (str.<= Start_4 Start) (str.suffixof Start_8 Start_2) (= Start_1 Start_4)))
   (StartInt_7 Int (0 1))
   (Start_9 String ("b" y "0" (str.substr Start_8 StartInt_7 StartInt_4) (str.replace Start Start_4 Start_6) (str.from_int StartInt_8) (ite StartBool Start_2 Start_9)))
   (Start_8 String ("0" "" x y "1" (str.at Start_7 StartInt_7) (ite StartBool_1 Start_1 Start_6)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool) (str.prefixof Start_1 Start_1) (str.contains Start_6 Start_9) (= StartInt_1 StartInt_8) (<= StartInt_1 StartInt)))
   (StartInt_6 Int (0 1 (str.indexof Start_5 Start_1 StartInt_2)))
   (Start_1 String ("b" (str.++ Start_2 Start_2) (str.replace Start_1 Start_1 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start) (str.to_int Start)))
   (Start_2 String ("" "b" (str.++ Start_2 Start_2) (ite StartBool Start_3 Start_3)))
   (StartInt_3 Int (0 1 (str.len Start) (str.to_int Start_4)))
   (StartInt_2 Int (1 (str.to_int Start_4)))
   (Start_3 String (y "a" (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_2) (ite StartBool Start_4 Start_3)))
   (StartInt_8 Int (0 1))
   (Start_6 String ("1" (str.from_int StartInt_6)))
   (Start_7 String ("" (str.replace Start_3 Start_1 Start_2)))
   (Start_4 String ("" x (str.++ Start_4 Start_2) (str.at Start StartInt_1) (str.from_int StartInt_3) (ite StartBool Start_3 Start_1)))
   (StartInt_4 Int (0 (str.len Start_4)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.to_int Start)))
   (Start_5 String (y "" (str.at Start_6 StartInt_5) (str.replace Start_1 Start Start_3) (ite StartBool Start_6 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "0" x) "" (str.replace x "0" "b"))))

(check-synth)
