(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_16 String) (StartInt_6 Int) (StartBool_1 Bool) (Start_6 String) (Start_2 String) (StartInt_7 Int) (StartBool_3 Bool) (Start_7 String) (Start_13 String) (Start_15 String) (Start_3 String) (StartInt_4 Int) (Start_9 String) (Start_8 String) (StartInt_1 Int) (Start_5 String) (StartInt_9 Int) (StartInt_5 Int) (StartInt_8 Int) (Start_4 String) (StartInt_3 Int) (StartInt_2 Int) (StartBool_2 Bool) (Start_11 String) (Start_10 String) (Start_1 String) (Start_12 String))
  ((Start String (y (str.++ Start_1 Start_2) (str.at Start StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (0 1 (str.to_int Start_13)))
   (StartBool Bool (true (and StartBool_3 StartBool_3) (str.< Start_6 Start_10) (str.suffixof Start_14 Start_4) (= Start_15 Start_14) (= StartInt_8 StartInt_4)))
   (Start_14 String ("b"))
   (Start_16 String ("a" y "b" (str.at Start_16 StartInt_3) (str.substr Start_7 StartInt StartInt_5) (str.replace Start_5 Start_7 Start_6) (ite StartBool_2 Start_7 Start_5)))
   (StartInt_6 Int (1 (str.len Start_5) (str.indexof Start_7 Start_3 StartInt_6)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start_3 Start_2) (str.prefixof Start_4 Start_5) (= StartInt_2 StartInt_3) (<= StartInt_4 StartInt_4)))
   (Start_6 String (y (str.at Start_6 StartInt_5) (str.substr Start StartInt_1 StartInt_6) (str.replace Start_3 Start_5 Start_1)))
   (Start_2 String ("" (str.++ Start_2 Start) (str.at Start_8 StartInt_4) (str.replace Start_7 Start_4 Start_1) (str.from_int StartInt_4) (ite StartBool_3 Start_3 Start_2)))
   (StartInt_7 Int (1 (str.to_int Start_6)))
   (StartBool_3 Bool (true (and StartBool_1 StartBool_3) (str.< Start_2 Start_1) (str.<= Start_11 Start_10)))
   (Start_7 String ("0" (str.++ Start_1 Start_5) (str.at Start_2 StartInt) (str.replace Start_6 Start_6 Start) (str.from_int StartInt_1)))
   (Start_13 String ("b" "1" (str.++ Start_1 Start_1) (str.substr Start_2 StartInt_8 StartInt_5) (str.replace Start_6 Start_4 Start_10) (ite StartBool_3 Start_7 Start_13)))
   (Start_15 String (y (str.++ Start_9 Start) (ite StartBool Start_3 Start_16)))
   (Start_3 String ("b" (str.++ Start Start) (str.replace Start Start_4 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_3)))
   (StartInt_4 Int (1 (str.to_int Start_1)))
   (Start_9 String ("b" "a" (str.++ Start_4 Start_2) (str.at Start_7 StartInt_5)))
   (Start_8 String ("a" "1" (str.++ Start_3 Start_1) (str.at Start_8 StartInt_8) (str.replace Start_2 Start_4 Start_7)))
   (StartInt_1 Int (1 0 (str.len Start_9) (str.to_int Start_10)))
   (Start_5 String ("0" (str.++ Start_3 Start_3) (str.at Start_3 StartInt_3) (str.substr Start_8 StartInt_7 StartInt_5) (str.replace Start_8 Start_3 Start)))
   (StartInt_9 Int (0 1 (str.len Start_11)))
   (StartInt_5 Int (1 (str.len Start_1) (str.indexof Start_3 Start_5 StartInt_6) (str.to_int Start_2)))
   (StartInt_8 Int (0 (str.to_int Start_7)))
   (Start_4 String (y "0" "1" (str.++ Start_3 Start_4) (str.replace Start_3 Start_7 Start_1) (ite StartBool_2 Start_7 Start_9)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.to_int Start_6)))
   (StartInt_2 Int (1 0 (str.indexof Start_2 Start_3 StartInt_2)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_1) (str.<= Start_4 Start_1) (str.suffixof Start_5 Start_5) (str.contains Start Start_3) (= Start_6 Start_10) (<= StartInt_9 StartInt_8)))
   (Start_11 String ("0" (str.substr Start_1 StartInt_3 StartInt_2)))
   (Start_10 String ("1" (ite StartBool_1 Start Start_2)))
   (Start_1 String ("0" x "" y (str.++ Start_9 Start_12) (str.at Start_6 StartInt_4) (str.replace Start_6 Start_11 Start_5) (str.from_int StartInt) (ite StartBool_3 Start_5 Start_11)))
   (Start_12 String ("a" x (str.++ Start_7 Start_9) (str.replace Start_10 Start_2 Start) (str.from_int StartInt_4) (ite StartBool Start_3 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "a" (str.len x))))

(check-synth)
