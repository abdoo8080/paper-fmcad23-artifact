(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_12 Int) (StartBool_1 Bool) (StartInt_5 Int) (Start_9 String) (Start_4 String) (Start_8 String) (StartInt_4 Int) (StartInt_3 Int) (Start_7 String) (Start_11 String) (Start_15 String) (Start_6 String) (Start_2 String) (StartInt_1 Int) (StartInt_6 Int) (Start_10 String) (Start_5 String) (StartInt_9 Int) (Start_3 String) (Start_12 String) (StartInt_8 Int) (StartInt_11 Int) (StartInt_7 Int) (Start_13 String) (StartBool_2 Bool) (StartInt_10 Int) (Start_14 String) (StartInt_2 Int) (Start_1 String))
  ((Start String ("b" "a" "1" y x "" (str.++ Start_1 Start) (str.at Start_2 StartInt_1) (str.substr Start StartInt StartInt_1) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.indexof Start_7 Start_9 StartInt_9)))
   (StartBool Bool (false true (not StartBool_1) (str.<= Start_4 Start_3) (str.prefixof Start Start_10)))
   (StartInt_12 Int (1 (str.len Start_15) (str.indexof Start_15 Start_13 StartInt_12)))
   (StartBool_1 Bool (true false (str.< Start_4 Start_1) (str.<= Start_6 Start_1) (str.contains Start_10 Start_6) (= Start_10 Start_11) (= StartInt_1 StartInt) (<= StartInt_3 StartInt)))
   (StartInt_5 Int (0 1 (str.indexof Start_1 Start_4 StartInt_6) (str.to_int Start_8)))
   (Start_9 String ("b" "" (str.++ Start_7 Start_5) (str.from_int StartInt_2)))
   (Start_4 String ("b" (str.at Start_5 StartInt_1) (str.replace Start Start_5 Start_1) (ite StartBool_1 Start_1 Start_6)))
   (Start_8 String (x "b" (str.++ Start_6 Start_6) (str.at Start StartInt_5)))
   (StartInt_4 Int (1 0 (str.to_int Start_9)))
   (StartInt_3 Int (0 1 (str.indexof Start_4 Start_4 StartInt_2) (str.to_int Start_4)))
   (Start_7 String ("a" (str.++ Start_1 Start_5) (str.substr Start_7 StartInt_4 StartInt_5)))
   (Start_11 String (x y (str.++ Start_11 Start) (str.substr Start_4 StartInt_4 StartInt_1)))
   (Start_15 String (y "a" "0" (str.at Start_1 StartInt_7) (str.substr Start_10 StartInt StartInt_1)))
   (Start_6 String ("0" y (str.++ Start_4 Start_4) (str.substr Start_7 StartInt_3 StartInt_2) (str.replace Start_2 Start_3 Start)))
   (Start_2 String ("0" (str.++ Start_3 Start_3) (str.substr Start_1 StartInt_2 StartInt_1) (str.from_int StartInt) (ite StartBool Start Start_4)))
   (StartInt_1 Int (1 0 (str.len Start_2) (str.indexof Start_2 Start StartInt_1) (str.to_int Start)))
   (StartInt_6 Int (1 (str.indexof Start_9 Start_6 StartInt_4) (str.to_int Start_6)))
   (Start_10 String ("" "0" "1" "b" (str.++ Start_4 Start_6) (str.at Start_3 StartInt_7) (str.substr Start_3 StartInt_4 StartInt_6) (str.replace Start_12 Start Start_9) (str.from_int StartInt_1)))
   (Start_5 String (x (str.at Start_9 StartInt_9) (str.substr Start_8 StartInt_1 StartInt_7) (str.from_int StartInt_4) (ite StartBool_2 Start_13 Start_7)))
   (StartInt_9 Int (1 (str.len Start_11) (str.indexof Start_10 Start_11 StartInt_9)))
   (Start_3 String ("a" y (str.++ Start_12 Start_14) (str.at Start_8 StartInt_8) (str.substr Start_1 StartInt_11 StartInt_10) (str.from_int StartInt_2) (ite StartBool_1 Start_11 Start_1)))
   (Start_12 String ("b" "" x "0" (str.at Start_3 StartInt_6) (str.replace Start_3 Start_7 Start_5) (str.from_int StartInt_8) (ite StartBool_1 Start_5 Start_5)))
   (StartInt_8 Int (0 1 (str.indexof Start_2 Start_1 StartInt_8) (str.to_int Start_5)))
   (StartInt_11 Int (0))
   (StartInt_7 Int (1))
   (Start_13 String ("a" (str.at Start_11 StartInt_1) (str.substr Start_5 StartInt_8 StartInt_9) (ite StartBool Start_8 Start_13)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_2 StartBool) (str.< Start_14 Start_11) (str.<= Start_14 Start_6) (str.prefixof Start_11 Start_8) (str.suffixof Start_4 Start_10) (str.contains Start_7 Start_3) (= Start_14 Start_11) (= StartInt StartInt_10)))
   (StartInt_10 Int (1 0 (str.indexof Start_6 Start_1 StartInt) (str.to_int Start_6)))
   (Start_14 String ("a" "" "0" "b" x (str.++ Start_13 Start_9) (str.at Start_3 StartInt_2) (str.from_int StartInt_6)))
   (StartInt_2 Int (1 0 (str.indexof Start_6 Start_2 StartInt_1)))
   (Start_1 String ("b" (str.++ Start_2 Start_13) (str.at Start_8 StartInt_12) (str.replace Start_7 Start_15 Start_15) (str.from_int StartInt_4) (ite StartBool_2 Start_14 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" y (str.substr y 0 1))))

(check-synth)
