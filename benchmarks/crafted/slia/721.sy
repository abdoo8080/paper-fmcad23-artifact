(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (StartBool_7 Bool) (Start_14 String) (StartInt_7 Int) (Start_16 String) (StartInt_8 Int) (StartInt_3 Int) (StartBool_3 Bool) (Start_6 String) (StartBool_5 Bool) (StartInt_4 Int) (StartBool_1 Bool) (Start_9 String) (StartBool_2 Bool) (Start_5 String) (Start_3 String) (StartInt_6 Int) (Start_4 String) (Start_8 String) (StartInt_1 Int) (StartInt_5 Int) (Start_7 String) (Start_15 String) (Start_12 String) (StartInt_2 Int) (Start_1 String) (Start_11 String) (Start_10 String) (Start_13 String) (Start_2 String) (StartBool_4 Bool) (StartBool_6 Bool) (Start_17 String))
  ((Start String ("b" "1" "0" (str.substr Start StartInt_1 StartInt_1) (str.replace Start Start Start) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.indexof Start_9 Start_5 StartInt_6) (str.to_int Start_6)))
   (StartBool Bool (true (not StartBool_5) (and StartBool_5 StartBool_6) (str.< Start_14 Start_1) (str.<= Start_2 Start_11) (str.prefixof Start_5 Start_15) (str.contains Start_10 Start_15) (<= StartInt_2 StartInt_2)))
   (StartInt_9 Int (1 (str.len Start_3) (str.indexof Start_4 Start_12 StartInt_1)))
   (StartBool_7 Bool (true (and StartBool StartBool_4) (str.<= Start_16 Start_2) (str.suffixof Start_5 Start_2) (str.contains Start_14 Start_10) (<= StartInt_9 StartInt_7)))
   (Start_14 String ("1" (str.replace Start_7 Start_14 Start_2) (str.from_int StartInt_8) (ite StartBool_7 Start_1 Start_10)))
   (StartInt_7 Int (0 1 (str.indexof Start_11 Start_1 StartInt_1) (str.to_int Start_9)))
   (Start_16 String ("" "0" x "a" "b" y "1" (str.substr Start_6 StartInt_3 StartInt_6) (str.replace Start_15 Start_11 Start_14) (str.from_int StartInt_8) (ite StartBool_6 Start_1 Start_6)))
   (StartInt_8 Int (0))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start Start_6 StartInt)))
   (StartBool_3 Bool (true (str.<= Start Start_3) (str.prefixof Start_11 Start_1) (str.suffixof Start_2 Start_12) (= StartInt_3 StartInt_3)))
   (Start_6 String ("" (str.++ Start_3 Start_3) (str.at Start_2 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_7 Start_4 Start_2) (str.from_int StartInt_1)))
   (StartBool_5 Bool (false (not StartBool_4) (str.suffixof Start_17 Start_6) (<= StartInt_9 StartInt_2)))
   (StartInt_4 Int (1))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool) (str.contains Start Start_4) (<= StartInt_1 StartInt_2)))
   (Start_9 String ("1" (str.++ Start_7 Start_9) (str.substr Start_4 StartInt_3 StartInt_4) (str.replace Start_10 Start_5 Start_5) (ite StartBool_3 Start_9 Start_5)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_2 StartBool_2) (str.<= Start_11 Start_1) (= StartInt StartInt_5)))
   (Start_5 String (y (str.++ Start_2 Start_6) (str.substr Start_6 StartInt_2 StartInt_2)))
   (Start_3 String ("1" "" "a" x (str.++ Start Start) (str.at Start_2 StartInt) (ite StartBool_1 Start Start_3)))
   (StartInt_6 Int (1 0 (str.indexof Start_8 Start_6 StartInt_2)))
   (Start_4 String (x y "b" (str.substr Start_2 StartInt StartInt) (str.replace Start Start_5 Start_3)))
   (Start_8 String ("0" y (str.at Start_4 StartInt_2) (str.substr Start_9 StartInt_3 StartInt) (str.replace Start Start_9 Start_2) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 1 (str.len Start) (str.to_int Start_1)))
   (StartInt_5 Int (0 (str.len Start_5) (str.indexof Start_9 Start_7 StartInt_2)))
   (Start_7 String ("" (str.++ Start_2 Start_3) (str.at Start_8 StartInt) (str.replace Start_3 Start_7 Start_7)))
   (Start_15 String ("" (str.at Start_10 StartInt_4) (str.substr Start_5 StartInt StartInt_7) (str.replace Start_8 Start_16 Start_17) (str.from_int StartInt_8)))
   (Start_12 String ("" x (str.at Start_8 StartInt_1) (ite StartBool Start_2 Start_3)))
   (StartInt_2 Int (0 1))
   (Start_1 String ("b" "" x "1" (str.at Start_2 StartInt_1) (ite StartBool_1 Start_1 Start_3)))
   (Start_11 String ("a" (str.at Start_1 StartInt_5) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_6 Start_5 Start) (str.from_int StartInt_3) (ite StartBool_4 Start_1 Start_7)))
   (Start_10 String ("b" x "0" "a" (str.++ Start_1 Start_12) (str.substr Start_2 StartInt_3 StartInt_2) (str.from_int StartInt_4)))
   (Start_13 String ("0" (str.from_int StartInt_3) (ite StartBool_4 Start_4 Start)))
   (Start_2 String ("1" (str.at Start_3 StartInt_5) (ite StartBool_3 Start_9 Start_13)))
   (StartBool_4 Bool (true false (not StartBool_3) (and StartBool_3 StartBool_4) (str.< Start_8 Start_1) (str.suffixof Start_3 Start_1) (str.contains Start_3 Start) (= Start_2 Start_4)))
   (StartBool_6 Bool (false true (and StartBool StartBool_5) (str.prefixof Start_4 Start_3) (str.suffixof Start_9 Start_7) (str.contains Start_8 Start) (= StartInt_2 StartInt_3) (<= StartInt_3 StartInt)))
   (Start_17 String ("0" x "b" (str.substr Start_14 StartInt_4 StartInt_2) (str.replace Start_6 Start_12 Start) (ite StartBool_2 Start_1 Start_17)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= y "0") "0" (str.++ "1" y))))

(check-synth)
