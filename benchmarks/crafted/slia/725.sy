(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_1 String) (Start_11 String) (Start_2 String) (StartInt_5 Int) (StartInt_8 Int) (StartInt_1 Int) (Start_10 String) (Start_7 String) (Start_3 String) (StartInt_4 Int) (Start_4 String) (StartBool_3 Bool) (StartInt_7 Int) (StartInt_3 Int) (StartInt_2 Int) (Start_9 String) (Start_12 String) (Start_6 String) (StartBool_2 Bool) (Start_8 String) (Start_5 String) (StartBool_1 Bool) (StartInt_6 Int))
  ((Start String ("b" "" (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start_2 Start_2) (ite StartBool Start_1 Start_3)))
   (StartInt Int (0 (str.indexof Start_2 Start StartInt_6) (str.to_int Start_9)))
   (StartBool Bool (false (and StartBool_4 StartBool_1) (str.< Start_10 Start_6) (str.suffixof Start_5 Start_12) (str.contains Start_8 Start_12) (<= StartInt_7 StartInt_7)))
   (StartBool_4 Bool (true (not StartBool_1) (and StartBool StartBool_3) (str.< Start_10 Start_9) (str.prefixof Start_11 Start_1) (str.suffixof Start_5 Start) (= Start Start_11)))
   (Start_1 String ("b" (str.at Start_5 StartInt_8) (str.substr Start_2 StartInt_4 StartInt_2) (ite StartBool Start_10 Start_6)))
   (Start_11 String ("" x (str.++ Start_8 Start_4) (str.at Start_11 StartInt_6) (str.replace Start_7 Start_9 Start_10) (ite StartBool_4 Start Start_1)))
   (Start_2 String ("a" (str.at Start_9 StartInt_4) (str.replace Start_6 Start_10 Start_4)))
   (StartInt_5 Int (1 (str.indexof Start_8 Start_9 StartInt_7) (str.to_int Start_5)))
   (StartInt_8 Int (0 1 (str.len Start_12) (str.indexof Start_1 Start_10 StartInt_8) (str.to_int Start_3)))
   (StartInt_1 Int (0 (str.len Start_5) (str.indexof Start Start_8 StartInt_2)))
   (Start_10 String ("" (str.++ Start_7 Start_10) (str.substr Start_7 StartInt_1 StartInt_2) (ite StartBool_3 Start_10 Start)))
   (Start_7 String (y (str.at Start_3 StartInt_1) (str.substr Start StartInt_6 StartInt_7) (str.from_int StartInt_3)))
   (Start_3 String (x (str.++ Start_2 Start) (str.at Start_1 StartInt_1) (ite StartBool Start_4 Start_4)))
   (StartInt_4 Int (1 0 (str.len Start_5)))
   (Start_4 String ("b" "a" y (str.++ Start_2 Start_3) (str.at Start_5 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.replace Start Start_5 Start_2) (str.from_int StartInt) (ite StartBool_1 Start_2 Start)))
   (StartBool_3 Bool (true (str.<= Start_2 Start_10) (str.prefixof Start_6 Start_6) (str.suffixof Start Start_9) (str.contains Start_2 Start_3) (= Start_11 Start_9) (= StartInt_1 StartInt)))
   (StartInt_7 Int (0))
   (StartInt_3 Int (1 (str.indexof Start Start_5 StartInt_4)))
   (StartInt_2 Int (1 0 (str.to_int Start_5)))
   (Start_9 String ("" "b" (str.++ Start_8 Start_6) (str.substr Start_6 StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_7 Start_2)))
   (Start_12 String ("" y "a" (str.substr Start_1 StartInt_5 StartInt_5) (str.from_int StartInt_7)))
   (Start_6 String (y "b" (str.at Start_5 StartInt_2) (str.substr Start StartInt StartInt_2) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_3)))
   (StartBool_2 Bool (true (str.<= Start_4 Start_2) (= Start_3 Start_6) (= StartInt_3 StartInt_4)))
   (Start_8 String ("" x "a" (str.++ Start Start_7) (str.replace Start_3 Start_9 Start_1) (str.from_int StartInt_6) (ite StartBool Start_3 Start)))
   (Start_5 String ("b" "0" (str.++ Start Start_6) (str.at Start_4 StartInt) (str.substr Start_7 StartInt_2 StartInt_5) (ite StartBool_1 Start_7 Start_8)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_1 StartBool_2) (str.prefixof Start_2 Start_6) (= StartInt StartInt) (<= StartInt_1 StartInt_1)))
   (StartInt_6 Int (0 1 (str.len Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "" (str.replace x "" "1"))))

(check-synth)
