(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (Start_11 String) (Start_2 String) (Start_3 String) (StartBool_2 Bool) (Start_8 String) (StartBool_4 Bool) (Start_7 String) (StartInt_2 Int) (Start_5 String) (StartInt_3 Int) (Start_1 String) (Start_9 String) (StartInt_4 Int) (Start_12 String) (StartInt_6 Int) (Start_4 String) (StartInt_5 Int) (StartBool_1 Bool) (StartInt_1 Int) (Start_6 String) (StartBool_3 Bool))
  ((Start String ("1" x "0" "a" "" y (str.++ Start Start_1) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (1 0 (str.len Start_7) (str.to_int Start_2)))
   (StartBool Bool (false (str.< Start_4 Start) (str.prefixof Start_12 Start_6) (str.suffixof Start_1 Start_5) (str.contains Start_5 Start_12)))
   (Start_10 String ("b" y "a" (str.++ Start_7 Start_1) (str.at Start_2 StartInt_3) (str.replace Start_3 Start_2 Start) (str.from_int StartInt_5)))
   (Start_11 String ("" (str.++ Start_4 Start_10) (str.substr Start_1 StartInt_1 StartInt_5) (str.replace Start_4 Start_9 Start_9) (str.from_int StartInt_5) (ite StartBool_1 Start_9 Start_2)))
   (Start_2 String (y "1" "b" "0" x "" "a" (str.++ Start_4 Start_5) (str.substr Start_1 StartInt_2 StartInt_2) (str.replace Start_8 Start_4 Start_7) (str.from_int StartInt_6)))
   (Start_3 String (x "" (str.at Start_7 StartInt_1) (str.from_int StartInt)))
   (StartBool_2 Bool (false true (not StartBool_4) (and StartBool_1 StartBool_1) (str.<= Start_4 Start)))
   (Start_8 String ("1" (str.at Start_9 StartInt_2) (str.substr Start_8 StartInt_1 StartInt) (ite StartBool_1 Start_9 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.< Start Start_9) (str.<= Start_8 Start_3) (str.contains Start_4 Start_5) (= Start_1 Start_1) (= StartInt_5 StartInt_2) (<= StartInt_3 StartInt_5)))
   (Start_7 String ("0" (str.substr Start_8 StartInt_2 StartInt_5) (str.replace Start_9 Start_2 Start_2) (ite StartBool_3 Start Start_2)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_1 Start_2 StartInt_3) (str.to_int Start)))
   (Start_5 String ("a" (str.from_int StartInt_5) (ite StartBool_2 Start_6 Start_5)))
   (StartInt_3 Int (0 1 (str.to_int Start_2)))
   (Start_1 String ("0" (str.replace Start_10 Start_9 Start_11) (str.from_int StartInt_1)))
   (Start_9 String (x (str.++ Start_1 Start_8) (str.from_int StartInt_5) (ite StartBool_2 Start_6 Start_8)))
   (StartInt_4 Int (1 0 (str.len Start_1) (str.indexof Start Start_4 StartInt_3) (str.to_int Start_2)))
   (Start_12 String ("" (str.++ Start Start_4) (str.at Start_2 StartInt_6) (str.substr Start_8 StartInt_3 StartInt_4)))
   (StartInt_6 Int (1 0))
   (Start_4 String ("0" (str.++ Start_2 Start) (str.at Start_3 StartInt_1) (str.replace Start_4 Start_1 Start_5) (ite StartBool_1 Start Start_6)))
   (StartInt_5 Int (1 0))
   (StartBool_1 Bool (false true (not StartBool_2) (str.<= Start_1 Start_1) (str.suffixof Start_2 Start_7) (str.contains Start_3 Start_4)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start_2 Start_1 StartInt_4) (str.to_int Start_2)))
   (Start_6 String (y (str.at Start_5 StartInt_5)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.< Start Start_6) (str.suffixof Start_9 Start_1) (str.contains Start_3 Start_1) (= Start_1 Start_5) (<= StartInt_6 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.to_int x))))

(check-synth)
