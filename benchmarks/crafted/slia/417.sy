(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_3 Bool) (StartBool_2 Bool) (StartInt_3 Int) (StartBool_4 Bool) (Start_9 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_8 String) (Start_7 String) (StartInt_1 Int) (Start_4 String) (Start_1 String) (Start_2 String) (Start_6 String) (StartInt_2 Int) (Start_5 String) (StartInt_6 Int) (Start_3 String) (StartInt_4 Int))
  ((Start String (x "a" (str.at Start StartInt) (str.substr Start StartInt StartInt) (str.replace Start_1 Start Start_2)))
   (StartInt Int (1 (str.len Start_3)))
   (StartBool Bool (false (str.< Start_5 Start_5) (str.prefixof Start_1 Start_4) (= StartInt_3 StartInt_4)))
   (StartBool_5 Bool (false true (str.< Start_9 Start_1) (str.<= Start_2 Start_3) (<= StartInt_2 StartInt_6)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_4 StartBool_2) (str.<= Start_3 Start_6) (str.prefixof Start_5 Start_8) (str.suffixof Start_1 Start_1) (= StartInt StartInt_6)))
   (StartBool_2 Bool (false true (and StartBool_2 StartBool_3) (str.< Start_2 Start_5) (= Start_7 Start_6) (= StartInt_5 StartInt_5)))
   (StartInt_3 Int (0 1 (str.indexof Start Start_2 StartInt_5) (str.to_int Start_9)))
   (StartBool_4 Bool (false true (not StartBool_5) (and StartBool_2 StartBool_5) (str.< Start_7 Start_9) (str.contains Start Start_5) (= Start_8 Start_7) (= StartInt_6 StartInt_4) (<= StartInt_3 StartInt_4)))
   (Start_9 String ("b" (str.substr Start_6 StartInt_1 StartInt_6) (str.replace Start_6 Start_1 Start_7) (ite StartBool_2 Start_1 Start_5)))
   (StartInt_5 Int (1 0 (str.len Start_7) (str.indexof Start_6 Start_1 StartInt_1) (str.to_int Start_2)))
   (StartBool_1 Bool (true false (str.contains Start Start) (= Start Start)))
   (Start_8 String ("a" "0" "1" "b" (str.++ Start_4 Start_6) (str.at Start_4 StartInt_5) (str.substr Start_6 StartInt_5 StartInt_2) (str.replace Start_2 Start_4 Start_8) (str.from_int StartInt_5) (ite StartBool Start_3 Start_1)))
   (Start_7 String (x "" (str.++ Start_7 Start_8) (str.at Start_3 StartInt_4) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_8)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start_2 Start StartInt_1) (str.to_int Start)))
   (Start_4 String ("0" (str.++ Start_3 Start_2) (str.from_int StartInt_1)))
   (Start_1 String ("a" x "1" (str.replace Start_5 Start Start_2)))
   (Start_2 String (y (str.substr Start_3 StartInt StartInt) (str.replace Start_2 Start Start_2)))
   (Start_6 String ("0" (str.++ Start_4 Start_3) (str.substr Start_1 StartInt StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_3 Start_6)))
   (StartInt_2 Int (1 0 (str.indexof Start Start_3 StartInt) (str.to_int Start_1)))
   (Start_5 String ("b" "" "0" "a" y "1" (str.substr Start_1 StartInt StartInt_2) (str.replace Start_3 Start_4 Start_6) (str.from_int StartInt_1) (ite StartBool Start_4 Start_1)))
   (StartInt_6 Int (1 (str.len Start_6) (str.indexof Start_7 Start_9 StartInt_2) (str.to_int Start_4)))
   (Start_3 String (y (str.++ Start Start_4) (str.at Start_3 StartInt) (str.from_int StartInt)))
   (StartInt_4 Int (0 (str.len Start_4) (str.indexof Start_7 Start_1 StartInt_1) (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "a" (str.at y 1))))

(check-synth)
