(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_3 String) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_3 Int) (StartBool_3 Bool) (Start_6 String) (StartInt_7 Int) (Start_1 String) (Start_17 String) (Start_4 String) (StartBool_1 Bool) (Start_2 String) (StartInt_1 Int) (Start_12 String) (Start_9 String) (Start_11 String) (Start_15 String) (StartBool_4 Bool) (Start_16 String) (StartInt_6 Int) (Start_10 String) (Start_13 String) (StartInt_4 Int) (StartInt_8 Int) (Start_5 String) (Start_7 String) (Start_18 String) (Start_14 String) (StartInt_5 Int))
  ((Start String ("a" "b" y (str.++ Start Start) (str.substr Start_1 StartInt StartInt_1)))
   (StartInt Int (1 0 (str.to_int Start_10)))
   (StartBool Bool (true false (str.< Start_6 Start_2) (= Start_8 Start_9) (= StartInt_6 StartInt)))
   (Start_8 String ("b" (str.at Start StartInt_6) (str.replace Start_6 Start_15 Start_2) (str.from_int StartInt_1)))
   (Start_3 String ("1" y "a" "" "0" x (str.++ Start_7 Start_7) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_6 Start_6 Start)))
   (StartInt_2 Int (0 (str.len Start_2) (str.to_int Start_6)))
   (StartBool_2 Bool (true false (str.<= Start_2 Start_4) (str.prefixof Start_2 Start_5) (= Start_2 Start_6)))
   (StartInt_3 Int (0 (str.len Start) (str.indexof Start_3 Start_1 StartInt_4) (str.to_int Start_4)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_4) (str.< Start_6 Start_15) (str.<= Start_14 Start_8) (str.prefixof Start_11 Start_17) (str.suffixof Start_11 Start_14) (<= StartInt_2 StartInt_8)))
   (Start_6 String ("" x (str.at Start_6 StartInt_3) (str.substr Start_5 StartInt_2 StartInt) (str.replace Start Start_5 Start_2)))
   (StartInt_7 Int (0 1 (str.indexof Start_9 Start_16 StartInt_5) (str.to_int Start_13)))
   (Start_1 String ("0" "a" x (str.substr Start_2 StartInt StartInt) (str.from_int StartInt_1)))
   (Start_17 String (x y (str.++ Start_1 Start_12) (str.at Start_10 StartInt_8)))
   (Start_4 String ("0" x (str.++ Start_3 Start_5)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (str.< Start_4 Start_2) (str.<= Start_3 Start_1) (str.prefixof Start_1 Start_5) (str.contains Start_2 Start) (= Start Start_2)))
   (Start_2 String ("0" (str.++ Start_1 Start) (str.substr Start_3 StartInt StartInt_2) (str.replace Start_3 Start Start_2) (ite StartBool_1 Start Start)))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.to_int Start)))
   (Start_12 String ("1" (str.++ Start_8 Start_7) (str.at Start_9 StartInt_5) (str.replace Start_4 Start_7 Start_10) (ite StartBool_4 Start_6 Start_8)))
   (Start_9 String ("" (str.++ Start_3 Start_1) (str.at Start_4 StartInt_1) (str.replace Start Start_10 Start_1) (str.from_int StartInt)))
   (Start_11 String (x (str.++ Start_12 Start_8) (str.at Start StartInt_3) (str.replace Start_5 Start_11 Start_8) (str.from_int StartInt_4)))
   (Start_15 String ("a" (str.at Start_2 StartInt_7) (str.from_int StartInt_8)))
   (StartBool_4 Bool (true (not StartBool) (and StartBool_2 StartBool_1) (str.< Start_10 Start_4) (str.prefixof Start_3 Start) (str.suffixof Start_1 Start_8) (str.contains Start_3 Start_13) (= Start Start_14) (<= StartInt_2 StartInt_4)))
   (Start_16 String (y "0" (ite StartBool_1 Start_7 Start_1)))
   (StartInt_6 Int (0 1 (str.indexof Start_12 Start_14 StartInt_1) (str.to_int Start_16)))
   (Start_10 String ("b" x y (str.++ Start_4 Start_3) (str.replace Start_1 Start_1 Start_4) (ite StartBool Start_11 Start_9)))
   (Start_13 String (x (str.at Start_10 StartInt_7) (str.replace Start_2 Start_17 Start_18) (str.from_int StartInt_5)))
   (StartInt_4 Int (1 (str.indexof Start_2 Start_5 StartInt_2) (str.to_int Start_4)))
   (StartInt_8 Int (1 (str.to_int Start_9)))
   (Start_5 String ("b" "" "1" y "a" x (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool_2 Start Start_3)))
   (Start_7 String (y (str.++ Start_2 Start_6) (str.at Start_8 StartInt_2) (str.substr Start_5 StartInt_2 StartInt_1) (ite StartBool_3 Start_9 Start)))
   (Start_18 String ("1" (str.++ Start_7 Start_4)))
   (Start_14 String ("0" (str.at Start_10 StartInt_3) (str.substr Start_15 StartInt_6 StartInt_3) (ite StartBool_3 Start Start_6)))
   (StartInt_5 Int (1 0 (str.len Start_12) (str.to_int Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (ite (str.contains (str.replace y "" x) "0") y "b") "a")))

(check-synth)
