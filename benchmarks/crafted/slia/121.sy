(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_10 Int) (Start_14 String) (Start_5 String) (StartInt_1 Int) (StartBool_6 Bool) (Start_2 String) (StartInt_4 Int) (StartInt_2 Int) (StartInt_5 Int) (StartInt_9 Int) (StartInt_3 Int) (Start_1 String) (Start_12 String) (StartInt_7 Int) (StartInt_6 Int) (Start_6 String) (Start_4 String) (StartBool_2 Bool) (StartBool_1 Bool) (Start_7 String) (Start_9 String) (StartBool_4 Bool) (Start_10 String) (Start_13 String) (Start_3 String) (StartBool_3 Bool) (Start_11 String) (StartBool_5 Bool) (Start_8 String) (StartInt_8 Int))
  ((Start String (y (str.++ Start_1 Start_2) (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_4 Start_3 Start_3) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_12) (str.indexof Start_11 Start_3 StartInt_8)))
   (StartBool Bool (false (str.<= Start_11 Start_1) (str.suffixof Start_14 Start_8) (str.contains Start_3 Start_9) (= Start_2 Start_11) (= StartInt_5 StartInt_10)))
   (StartInt_10 Int (0))
   (Start_14 String ("0" (str.++ Start_7 Start_12) (str.at Start_5 StartInt_5) (str.substr Start_9 StartInt_3 StartInt_9) (ite StartBool_6 Start_12 Start_13)))
   (Start_5 String ("" (str.++ Start_1 Start_1) (str.substr Start_1 StartInt_3 StartInt_4)))
   (StartInt_1 Int (1 0 (str.len Start_6)))
   (StartBool_6 Bool (false (not StartBool_5) (str.<= Start_11 Start_4) (str.prefixof Start_12 Start_12) (str.suffixof Start_12 Start_11) (= StartInt_5 StartInt_4) (<= StartInt_2 StartInt_2)))
   (Start_2 String ("a" (str.++ Start_3 Start_8) (str.at Start_5 StartInt_4) (str.from_int StartInt_5) (ite StartBool_2 Start Start_4)))
   (StartInt_4 Int (0 (str.to_int Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_3 Start_6 StartInt_1) (str.to_int Start_5)))
   (StartInt_5 Int (1 (str.len Start_12) (str.to_int Start_9)))
   (StartInt_9 Int (0 (str.indexof Start_2 Start_7 StartInt_9) (str.to_int Start_4)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_4 Start_5 StartInt_4) (str.to_int Start_4)))
   (Start_1 String ("0" x (str.++ Start_4 Start_3) (str.replace Start_1 Start Start_13)))
   (Start_12 String ("0" (str.++ Start_3 Start_1) (str.from_int StartInt_7)))
   (StartInt_7 Int (1 (str.len Start_8) (str.indexof Start_4 Start_11 StartInt_7) (str.to_int Start_9)))
   (StartInt_6 Int (0 (str.len Start_4) (str.to_int Start_11)))
   (Start_6 String (x "0" (str.at Start_4 StartInt_1) (str.from_int StartInt_1)))
   (Start_4 String ("0" "1" "" "b" x "a" (str.++ Start_1 Start_3) (str.substr Start_5 StartInt_1 StartInt_1) (str.replace Start_4 Start_6 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_4)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.< Start_9 Start_9) (str.<= Start_3 Start_5) (str.prefixof Start_7 Start) (str.suffixof Start_3 Start_4)))
   (StartBool_1 Bool (true (and StartBool StartBool) (str.prefixof Start_5 Start_2) (str.contains Start_3 Start_7) (= Start_7 Start_3) (= StartInt_1 StartInt_2) (<= StartInt_1 StartInt)))
   (Start_7 String (x "1" "a" "" (str.++ Start_6 Start_2) (str.at Start_3 StartInt_2) (str.substr Start_7 StartInt_2 StartInt_3) (ite StartBool_1 Start_3 Start_2)))
   (Start_9 String ("1" "a" (str.++ Start_9 Start_8) (str.at Start_10 StartInt_4) (str.substr Start_4 StartInt_5 StartInt_5) (str.from_int StartInt_2)))
   (StartBool_4 Bool (false true (not StartBool_6) (str.prefixof Start_3 Start_12) (str.suffixof Start_9 Start_4) (str.contains Start_9 Start_4)))
   (Start_10 String (x (str.at Start_10 StartInt_1) (str.from_int StartInt_4)))
   (Start_13 String (y "1" (str.++ Start_5 Start_8) (str.at Start_3 StartInt_8) (str.substr Start_9 StartInt_4 StartInt_8)))
   (Start_3 String (x (str.at Start_1 StartInt) (str.substr Start_6 StartInt_2 StartInt) (str.replace Start_4 Start_2 Start_5) (str.from_int StartInt_1)))
   (StartBool_3 Bool (false true (and StartBool_4 StartBool_3) (str.<= Start_7 Start_4) (str.prefixof Start_4 Start_5) (str.suffixof Start Start_11) (= Start_3 Start_6)))
   (Start_11 String ("a" (str.at Start_4 StartInt_3) (str.replace Start_1 Start_10 Start_5) (str.from_int StartInt_6) (ite StartBool_5 Start_6 Start_2)))
   (StartBool_5 Bool (true false (not StartBool_4) (and StartBool_6 StartBool_6) (str.<= Start_11 Start_4) (str.prefixof Start_10 Start) (= Start_3 Start_7) (= StartInt_4 StartInt_3)))
   (Start_8 String ("a" x "" (str.++ Start_12 Start_3) (str.at Start_9 StartInt_7) (str.substr Start_4 StartInt_2 StartInt_2) (str.replace Start_2 Start_4 Start_2) (ite StartBool_2 Start_3 Start_6)))
   (StartInt_8 Int (1 (str.len Start_14) (str.indexof Start_13 Start_7 StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ x (str.++ "a" x)) 1)))

(check-synth)
