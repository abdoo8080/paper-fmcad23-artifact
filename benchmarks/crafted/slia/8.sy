(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (StartBool_4 Bool) (StartBool_1 Bool) (Start_6 String) (Start_2 String) (StartBool_3 Bool) (Start_4 String) (Start_5 String) (StartInt_2 Int) (Start_7 String) (Start_15 String) (StartInt_1 Int) (StartInt_3 Int) (Start_1 String) (StartInt_4 Int) (StartInt_5 Int) (Start_8 String) (StartBool_5 Bool) (Start_10 String) (Start_11 String) (StartInt_6 Int) (StartBool_2 Bool) (Start_3 String) (Start_9 String) (Start_13 String) (Start_12 String) (Start_14 String))
  ((Start String ("1" (str.substr Start StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (0 (str.len Start_1) (str.indexof Start Start_2 StartInt)))
   (StartBool Bool (false true (not StartBool_5) (str.prefixof Start_3 Start_1) (str.suffixof Start_14 Start_3) (= Start_7 Start_4) (= StartInt_1 StartInt_5)))
   (Start_16 String ("a" "1" "0" "b" (str.replace Start_3 Start_13 Start) (str.from_int StartInt_2)))
   (StartBool_4 Bool (false true (not StartBool) (str.<= Start_6 Start) (str.suffixof Start_6 Start_2) (= StartInt_3 StartInt_2) (<= StartInt StartInt)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_3) (str.<= Start_4 Start_4) (str.contains Start Start_1) (<= StartInt_3 StartInt_2)))
   (Start_6 String ("1" (str.++ Start_6 Start_7) (str.at Start_4 StartInt) (str.replace Start_4 Start_7 Start_5) (str.from_int StartInt) (ite StartBool_3 Start_8 Start_3)))
   (Start_2 String ("0" (str.replace Start_1 Start Start_2) (str.from_int StartInt) (ite StartBool Start_1 Start)))
   (StartBool_3 Bool (false true (not StartBool_4) (str.< Start_4 Start_2) (= StartInt_1 StartInt_3)))
   (Start_4 String (x (str.replace Start_3 Start Start_4) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_3)))
   (Start_5 String ("b" "a" (str.++ Start_3 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_2 Int (0 1 (str.len Start) (str.indexof Start_1 Start_4 StartInt_2) (str.to_int Start_4)))
   (Start_7 String ("0" x "b" (str.at Start_9 StartInt) (str.replace Start_1 Start_8 Start) (str.from_int StartInt_5)))
   (Start_15 String ("a" (str.++ Start_9 Start_8) (str.at Start_16 StartInt_1) (str.substr Start_15 StartInt_5 StartInt_3) (str.replace Start_10 Start_12 Start_6) (ite StartBool_5 Start_13 Start_9)))
   (StartInt_1 Int (0 1 (str.to_int Start_11)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.to_int Start_5)))
   (Start_1 String (x (str.++ Start_1 Start_1) (str.substr Start_3 StartInt_1 StartInt_2) (ite StartBool Start_1 Start)))
   (StartInt_4 Int (0 (str.len Start_8) (str.indexof Start_5 Start StartInt_1) (str.to_int Start)))
   (StartInt_5 Int (1 0 (str.len Start_9) (str.indexof Start_3 Start_10 StartInt_2)))
   (Start_8 String ("b" (str.at Start_5 StartInt_3) (str.substr Start_7 StartInt_3 StartInt_4) (str.replace Start_3 Start_2 Start_6)))
   (StartBool_5 Bool (true false (not StartBool_4) (and StartBool_2 StartBool_3) (str.< Start_6 Start_9) (str.<= Start_9 Start_2) (str.prefixof Start_6 Start) (str.suffixof Start_2 Start_7) (= Start_2 Start_7) (= StartInt_2 StartInt_2)))
   (Start_10 String ("a" (str.substr Start_3 StartInt_5 StartInt_6)))
   (Start_11 String ("b" (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_3 Start_4 Start_2) (ite StartBool_4 Start_2 Start_8)))
   (StartInt_6 Int (1 0 (str.len Start_8) (str.indexof Start_9 Start_4 StartInt_3)))
   (StartBool_2 Bool (true (not StartBool_5) (str.< Start_10 Start_2) (str.suffixof Start_3 Start_2) (str.contains Start Start) (= Start_1 Start_6)))
   (Start_3 String ("" (str.++ Start_12 Start_13) (str.from_int StartInt_2)))
   (Start_9 String ("0" (str.substr Start_10 StartInt_1 StartInt_4) (str.from_int StartInt_1) (ite StartBool_3 Start_6 Start_3)))
   (Start_13 String ("1" "0" "a" (str.at Start_11 StartInt_6) (ite StartBool_3 Start_1 Start_7)))
   (Start_12 String (x (str.at Start_7 StartInt_4) (str.replace Start_7 Start_9 Start_10)))
   (Start_14 String (y x "a" "" "1" (str.++ Start_8 Start_15) (str.replace Start_5 Start_12 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.from_int (str.to_int x)) 0)))

(check-synth)
