(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_5 Int) (Start_11 String) (Start_10 String) (StartInt_4 Int) (Start_8 String) (Start_1 String) (Start_5 String) (Start_2 String) (StartBool_1 Bool) (Start_9 String) (Start_3 String) (Start_4 String) (StartInt_3 Int) (StartBool_2 Bool) (StartInt_1 Int) (StartInt_2 Int) (Start_7 String) (Start_6 String))
  ((Start String ("b" y (str.++ Start Start) (str.substr Start StartInt_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_1 Start_1)))
   (StartInt Int (1 (str.indexof Start_1 Start_3 StartInt_1)))
   (StartBool Bool (false true (not StartBool_3) (str.< Start_6 Start_6) (str.<= Start_6 Start_7) (= Start_4 Start_10) (= StartInt StartInt_5)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_1) (str.<= Start_8 Start_4) (str.contains Start_9 Start_9) (<= StartInt_4 StartInt_2)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_2 Start_3 StartInt_4)))
   (Start_11 String ("" "b" y (str.at Start_10 StartInt_4)))
   (Start_10 String ("1" (str.++ Start_8 Start_1) (str.at Start_9 StartInt_1) (str.substr Start_1 StartInt StartInt_2) (str.replace Start_11 Start_7 Start_11)))
   (StartInt_4 Int (0 (str.indexof Start_8 Start_7 StartInt)))
   (Start_8 String ("1" "" (str.++ Start_5 Start_8) (str.replace Start Start_9 Start_7)))
   (Start_1 String ("1" (str.++ Start_2 Start_2) (str.replace Start_2 Start_3 Start_3)))
   (Start_5 String ("a" (str.++ Start_1 Start_4) (str.substr Start StartInt_4 StartInt) (ite StartBool_1 Start_6 Start_5)))
   (Start_2 String ("a" "" "0" "b" x "1" y (str.++ Start Start_2) (str.at Start_2 StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start_2 Start_3 Start) (ite StartBool_1 Start Start_1)))
   (StartBool_1 Bool (false (str.< Start_4 Start_3) (str.<= Start Start) (str.suffixof Start_3 Start_4) (str.contains Start_1 Start) (= Start_4 Start_1) (= StartInt_3 StartInt_3) (<= StartInt_2 StartInt_3)))
   (Start_9 String ("b" "" "1" (str.at Start StartInt_1) (str.substr Start_4 StartInt_3 StartInt) (str.replace Start_10 Start_7 Start_9) (str.from_int StartInt_2)))
   (Start_3 String ("b" "a" (str.replace Start_2 Start Start_1) (str.from_int StartInt_2)))
   (Start_4 String ("a" "b" "0" (str.++ Start Start_4) (str.substr Start StartInt_2 StartInt) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.len Start_4)))
   (StartBool_2 Bool (true false (not StartBool) (str.<= Start_5 Start_5) (str.contains Start Start_7) (= Start_5 Start_4) (= StartInt_2 StartInt_4) (<= StartInt_3 StartInt_3)))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.indexof Start_3 Start StartInt_2) (str.to_int Start_5)))
   (StartInt_2 Int (0 (str.to_int Start_1)))
   (Start_7 String (x "1" "a" "b" "0" (str.at Start_2 StartInt_1) (str.substr Start_6 StartInt_3 StartInt_3) (str.replace Start_7 Start_2 Start_5) (str.from_int StartInt_4)))
   (Start_6 String ("a" y x "" (str.at Start_2 StartInt_1) (ite StartBool_2 Start_7 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= y "") x "a")))

(check-synth)
