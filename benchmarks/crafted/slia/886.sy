(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_1 String) (Start_3 String) (Start_8 String) (Start_10 String) (Start_9 String) (Start_12 String) (Start_11 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_2 Int) (Start_2 String) (Start_5 String) (Start_4 String) (Start_6 String) (StartInt_4 Int) (Start_7 String))
  ((Start String (x y "b" (str.replace Start Start_1 Start) (ite StartBool_1 Start Start_2)))
   (StartInt Int (1 (str.len Start_6) (str.indexof Start_1 Start_11 StartInt)))
   (StartBool Bool (false true (not StartBool_3) (str.< Start_6 Start_6) (str.<= Start_5 Start) (str.prefixof Start_5 Start_7) (= Start_12 Start_11)))
   (StartBool_3 Bool (false (str.<= Start_2 Start_9) (str.prefixof Start_11 Start_5) (str.suffixof Start_7 Start_10) (str.contains Start_6 Start_7) (= StartInt_5 StartInt_3) (<= StartInt_2 StartInt)))
   (Start_1 String (y "" x "0" "1" "b" (str.at Start_1 StartInt_2) (str.from_int StartInt_2)))
   (Start_3 String ("a" "1" (str.at Start_1 StartInt_3) (str.substr Start_1 StartInt_5 StartInt_5)))
   (Start_8 String ("0" "" y x "a" (str.++ Start_4 Start_1) (str.at Start_10 StartInt_2) (str.from_int StartInt_1)))
   (Start_10 String ("b" "" (str.at Start_7 StartInt_4) (str.substr Start_12 StartInt StartInt_3)))
   (Start_9 String (x (str.at Start_10 StartInt_5) (str.substr Start_11 StartInt_2 StartInt_3) (str.replace Start_7 Start_1 Start_7) (str.from_int StartInt_2) (ite StartBool Start_5 Start_10)))
   (Start_12 String (x "0" (str.substr Start_1 StartInt_3 StartInt) (str.from_int StartInt_4) (ite StartBool_1 Start_9 Start_6)))
   (Start_11 String (y (str.at Start_12 StartInt_5) (str.replace Start_2 Start_1 Start_9)))
   (StartInt_1 Int (0 1 (str.len Start) (str.to_int Start_2)))
   (StartBool_1 Bool (true (not StartBool_1) (and StartBool StartBool_1) (str.< Start_3 Start_1) (str.<= Start_2 Start_2) (str.prefixof Start_2 Start) (str.suffixof Start_2 Start) (str.contains Start_4 Start_4) (= Start_1 Start_1) (= StartInt_2 StartInt_2) (<= StartInt_3 StartInt_2)))
   (StartInt_5 Int (0 (str.to_int Start_2)))
   (StartBool_2 Bool (false (and StartBool_1 StartBool) (str.< Start_6 Start_5) (str.<= Start_6 Start_9) (str.contains Start_9 Start_8) (= Start_3 Start_6) (= StartInt_2 StartInt_3) (<= StartInt StartInt)))
   (StartInt_3 Int (1 (str.len Start_3)))
   (StartInt_2 Int (1 (str.len Start_1) (str.indexof Start_3 Start_4 StartInt_3) (str.to_int Start_5)))
   (Start_2 String (x (str.++ Start Start_2) (str.at Start_1 StartInt_1) (str.replace Start_2 Start_1 Start_1) (ite StartBool_1 Start_2 Start_2)))
   (Start_5 String (y (str.substr Start_2 StartInt_2 StartInt_4) (str.replace Start_6 Start_2 Start_5) (str.from_int StartInt_5)))
   (Start_4 String ("" "0" x "1" (str.++ Start Start_7) (str.at Start_3 StartInt_2) (str.substr Start_5 StartInt_1 StartInt_3) (str.replace Start_2 Start_6 Start_5) (str.from_int StartInt_3)))
   (Start_6 String ("a" (str.++ Start_1 Start_4) (str.replace Start Start_1 Start_6) (str.from_int StartInt) (ite StartBool Start_6 Start_3)))
   (StartInt_4 Int (1 (str.len Start_2) (str.indexof Start_6 Start_6 StartInt_4) (str.to_int Start_3)))
   (Start_7 String ("0" "a" x "" (str.++ Start_8 Start_6) (str.replace Start_4 Start_4 Start_8) (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.substr "1" (str.len x) 1) "1" "a")))

(check-synth)
