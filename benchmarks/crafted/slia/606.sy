(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (Start_3 String) (Start_14 String) (Start_15 String) (Start_6 String) (Start_9 String) (StartInt_4 Int) (StartInt_3 Int) (Start_11 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_10 String) (StartInt_6 Int) (Start_12 String) (StartBool_4 Bool) (Start_19 String) (StartBool_2 Bool) (Start_4 String) (Start_8 String) (Start_7 String) (Start_13 String) (Start_1 String) (StartBool_5 Bool) (Start_16 String) (StartInt_5 Int) (StartInt_1 Int) (StartBool_3 Bool) (Start_5 String) (StartBool_6 Bool) (Start_18 String) (Start_17 String))
  ((Start String ("" "1" "a" (str.replace Start Start Start_1) (str.from_int StartInt_1)))
   (StartInt Int (0 1))
   (StartBool Bool (false (str.<= Start_2 Start_2) (str.prefixof Start Start_3) (= StartInt_3 StartInt_3)))
   (Start_2 String ("1" (str.++ Start_18 Start_16) (str.at Start_7 StartInt_1) (str.replace Start_6 Start_10 Start_14) (str.from_int StartInt_1) (ite StartBool_5 Start_3 Start_17)))
   (Start_3 String ("1" "0" (str.at Start_19 StartInt_6) (str.substr Start_15 StartInt_3 StartInt_2) (str.replace Start_19 Start_9 Start_18)))
   (Start_14 String ("" (str.++ Start_18 Start_12) (str.replace Start_9 Start_5 Start_11) (str.from_int StartInt_1)))
   (Start_15 String ("a" y x (str.from_int StartInt_5) (ite StartBool Start_17 Start_17)))
   (Start_6 String ("0" (str.++ Start_8 Start_2) (str.at Start StartInt) (str.substr Start_6 StartInt StartInt_4) (str.from_int StartInt_4) (ite StartBool_1 Start_9 Start_4)))
   (Start_9 String ("" (str.substr Start_7 StartInt_5 StartInt) (str.replace Start_4 Start_8 Start_10) (ite StartBool_2 Start_6 Start_10)))
   (StartInt_4 Int (1 0 (str.to_int Start_1)))
   (StartInt_3 Int (1 0 (str.indexof Start_4 Start_1 StartInt_3) (str.to_int Start)))
   (Start_11 String ("1" "" (str.++ Start_12 Start_7) (str.at Start_5 StartInt_6) (ite StartBool_4 Start_5 Start_6)))
   (StartBool_1 Bool (false (str.prefixof Start Start_4) (str.suffixof Start_4 Start_3) (str.contains Start_4 Start_5)))
   (StartInt_2 Int (0 1))
   (Start_10 String ("a" (str.replace Start_11 Start_5 Start_12)))
   (StartInt_6 Int (0 1))
   (Start_12 String ("a" x "1" "0" (str.at Start_7 StartInt_3) (str.replace Start_9 Start_11 Start_2) (str.from_int StartInt) (ite StartBool_3 Start_5 Start_6)))
   (StartBool_4 Bool (false true (not StartBool_5) (str.<= Start_3 Start) (str.prefixof Start_12 Start_2) (str.suffixof Start_3 Start_3) (str.contains Start_3 Start_13) (= Start_12 Start_8) (<= StartInt_2 StartInt_3)))
   (Start_19 String (x (str.at Start_15 StartInt_1) (str.substr Start_15 StartInt_2 StartInt) (str.replace Start_12 Start_14 Start_15) (str.from_int StartInt_1)))
   (StartBool_2 Bool (true (and StartBool_3 StartBool_1) (str.< Start_5 Start_5) (str.prefixof Start_6 Start_5) (str.contains Start_5 Start_7)))
   (Start_4 String ("" "1" x (str.at Start_3 StartInt_2) (ite StartBool_1 Start_2 Start_2)))
   (Start_8 String (x "b" "a" "0" (str.at Start_11 StartInt_3) (str.replace Start_6 Start_9 Start_13)))
   (Start_7 String ("b" "" (str.++ Start_1 Start) (str.substr Start_7 StartInt_1 StartInt_2) (ite StartBool_2 Start_4 Start)))
   (Start_13 String ("a"))
   (Start_1 String (y "" (str.substr Start StartInt_2 StartInt_1)))
   (StartBool_5 Bool (false (and StartBool StartBool_5) (str.< Start_9 Start) (str.<= Start Start_10)))
   (Start_16 String ("0" "a" "b" (str.++ Start_17 Start_18) (str.substr Start_1 StartInt_4 StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_8 Start_10 StartInt_2)))
   (StartInt_1 Int (0 1 (str.indexof Start Start StartInt_2) (str.to_int Start_1)))
   (StartBool_3 Bool (false true (not StartBool_2) (and StartBool_3 StartBool_6) (str.< Start_4 Start) (str.suffixof Start_1 Start_9) (str.contains Start_5 Start_11) (= Start_9 Start_6) (= StartInt_5 StartInt_5)))
   (Start_5 String (x "0" (str.++ Start_5 Start_1) (str.at Start_5 StartInt_1) (ite StartBool_2 Start_5 Start_5)))
   (StartBool_6 Bool (false (str.suffixof Start_2 Start_14) (str.contains Start_11 Start_15) (= Start_12 Start_16)))
   (Start_18 String ("a" (str.at Start_15 StartInt_6) (str.substr Start_17 StartInt_2 StartInt) (str.from_int StartInt_4)))
   (Start_17 String ("1" (str.at Start_1 StartInt_3) (str.substr Start_8 StartInt_1 StartInt_2) (str.from_int StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.++ x "0") "1")))

(check-synth)
