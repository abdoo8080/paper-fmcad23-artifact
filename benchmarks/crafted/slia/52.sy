(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_15 String) (StartInt_1 Int) (StartInt_4 Int) (StartInt_8 Int) (Start_3 String) (Start_1 String) (Start_6 String) (StartInt_3 Int) (StartBool_2 Bool) (Start_7 String) (Start_9 String) (Start_5 String) (Start_4 String) (Start_10 String) (Start_2 String) (Start_11 String) (StartBool_1 Bool) (Start_8 String) (StartBool_3 Bool) (StartInt_7 Int) (StartInt_2 Int) (Start_12 String) (StartInt_9 Int) (StartBool_4 Bool) (StartInt_6 Int) (StartInt_5 Int) (Start_13 String))
  ((Start String (y "1" (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start Start Start) (str.from_int StartInt_2) (ite StartBool Start Start_2)))
   (StartInt Int (0 1 (str.indexof Start_13 Start_10 StartInt_7)))
   (StartBool Bool (true false (str.prefixof Start_10 Start_11) (str.suffixof Start_2 Start_9) (= StartInt_5 StartInt_9)))
   (Start_14 String ("a" "1" "b" (str.at Start_12 StartInt_4) (str.substr Start_3 StartInt_3 StartInt_6)))
   (Start_15 String (x (str.replace Start_11 Start Start_14)))
   (StartInt_1 Int (0 1 (str.to_int Start)))
   (StartInt_4 Int (0 1 (str.indexof Start Start_10 StartInt_3) (str.to_int Start_10)))
   (StartInt_8 Int (1 0 (str.to_int Start_12)))
   (Start_3 String (y x "a" (str.at Start StartInt) (str.replace Start_4 Start Start_5) (ite StartBool Start_6 Start_1)))
   (Start_1 String ("b" (str.++ Start_4 Start_8) (str.at Start_6 StartInt_2) (str.from_int StartInt_4) (ite StartBool_2 Start_1 Start_9)))
   (Start_6 String ("b" "0" (str.++ Start_6 Start_6) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (StartInt_3 Int (0 1 (str.len Start_3)))
   (StartBool_2 Bool (true false (not StartBool) (str.< Start_4 Start_4) (str.prefixof Start_6 Start_6) (str.contains Start_1 Start) (= Start_3 Start_2) (<= StartInt StartInt_1)))
   (Start_7 String (y (str.at Start_3 StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (Start_9 String (x "b" (ite StartBool_1 Start_1 Start_4)))
   (Start_5 String ("" (str.++ Start_1 Start_4) (str.substr Start_4 StartInt StartInt) (str.replace Start_7 Start_7 Start_7)))
   (Start_4 String ("a" "" "0" (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_6 Start_1 Start_4) (str.from_int StartInt_3) (ite StartBool_2 Start_2 Start_2)))
   (Start_10 String ("" (str.replace Start_7 Start_10 Start_7) (ite StartBool_1 Start_5 Start_3)))
   (Start_2 String ("1" "0" "" "b" x (str.from_int StartInt_3)))
   (Start_11 String ("0" (str.at Start_12 StartInt_3) (str.replace Start_1 Start_3 Start_3)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_1) (str.< Start_3 Start_3) (str.suffixof Start_3 Start_3) (= Start_5 Start)))
   (Start_8 String ("0" (str.++ Start_6 Start_4) (str.at Start_4 StartInt_1) (str.substr Start_1 StartInt StartInt_5) (str.from_int StartInt_6) (ite StartBool_3 Start_5 Start_10)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_4 StartBool_1) (str.<= Start_4 Start) (str.prefixof Start_6 Start_10) (= Start_9 Start) (= StartInt_4 StartInt_3) (<= StartInt_3 StartInt_7)))
   (StartInt_7 Int (1 0))
   (StartInt_2 Int (1 (str.indexof Start_7 Start StartInt_2) (str.to_int Start_6)))
   (Start_12 String ("a" (str.++ Start_1 Start) (str.from_int StartInt_8)))
   (StartInt_9 Int (1 (str.indexof Start_14 Start_15 StartInt_4)))
   (StartBool_4 Bool (true false (not StartBool_3) (and StartBool StartBool_3) (= Start_3 Start) (= StartInt_7 StartInt_1) (<= StartInt_5 StartInt_5)))
   (StartInt_6 Int (1 0 (str.indexof Start_6 Start_2 StartInt) (str.to_int Start_9)))
   (StartInt_5 Int (1 (str.len Start_11) (str.indexof Start_6 Start_3 StartInt_1)))
   (Start_13 String ("b" "" (str.at Start_6 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "1" x)))

(check-synth)
