(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_11 String) (Start_1 String) (StartInt_6 Int) (StartBool_2 Bool) (StartBool_4 Bool) (StartInt_7 Int) (Start_12 String) (Start_3 String) (Start_5 String) (StartInt_5 Int) (Start_8 String) (Start_13 String) (Start_10 String) (Start_6 String) (StartBool_1 Bool) (StartBool_3 Bool) (Start_2 String) (StartInt_3 Int) (StartInt_4 Int) (StartBool_6 Bool) (Start_7 String) (StartInt_2 Int) (Start_4 String) (Start_9 String) (StartInt_1 Int))
  ((Start String (x (str.++ Start_1 Start_2) (str.replace Start_3 Start_4 Start_3) (str.from_int StartInt_1) (ite StartBool Start_5 Start_1)))
   (StartInt Int (1 (str.to_int Start_6)))
   (StartBool Bool (true false (and StartBool_6 StartBool_1) (str.prefixof Start_11 Start_10) (str.contains Start_2 Start_9) (= Start_7 Start_12)))
   (StartBool_5 Bool (false (not StartBool_2) (and StartBool_3 StartBool) (str.< Start_12 Start_9) (str.<= Start_2 Start_8) (str.prefixof Start_9 Start_6)))
   (Start_11 String (x (str.++ Start_2 Start_1) (str.at Start_11 StartInt_3) (str.replace Start_4 Start_1 Start_8) (str.from_int StartInt) (ite StartBool_4 Start_9 Start_6)))
   (Start_1 String ("b" "a" "" "1" (str.substr Start_8 StartInt StartInt_5) (str.replace Start_7 Start Start_11) (str.from_int StartInt_6) (ite StartBool_1 Start_8 Start_5)))
   (StartInt_6 Int (1 (str.len Start_3) (str.indexof Start_9 Start_6 StartInt_5)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool StartBool_3) (str.prefixof Start Start_1) (str.suffixof Start_8 Start_10) (= Start_3 Start_6)))
   (StartBool_4 Bool (false (not StartBool_5) (str.<= Start_5 Start_1) (str.suffixof Start_12 Start_8) (= Start_5 Start_7) (<= StartInt_5 StartInt_6)))
   (StartInt_7 Int (1 0 (str.len Start_8) (str.indexof Start_6 Start_10 StartInt_3)))
   (Start_12 String ("1" (str.++ Start_10 Start_5) (str.substr Start_6 StartInt StartInt_5) (str.from_int StartInt_7)))
   (Start_3 String ("b" "0" (str.at Start_9 StartInt_1) (str.substr Start_4 StartInt_5 StartInt_2) (str.from_int StartInt_2)))
   (Start_5 String ("0" "1" "a" x y "" "b" (str.++ Start_6 Start_5) (str.at Start_1 StartInt_2)))
   (StartInt_5 Int (1))
   (Start_8 String ("" (str.at Start_9 StartInt_5) (str.substr Start_4 StartInt StartInt_4) (str.from_int StartInt_1)))
   (Start_13 String ("1" y "a" (str.++ Start_1 Start_9) (ite StartBool Start Start_9)))
   (Start_10 String ("0" "b" "" (str.++ Start_8 Start_3) (ite StartBool_2 Start_6 Start_5)))
   (Start_6 String ("a" (str.++ Start_2 Start_6) (str.substr Start_6 StartInt_2 StartInt_3) (str.from_int StartInt_3) (ite StartBool_1 Start Start_3)))
   (StartBool_1 Bool (true (not StartBool_1) (str.<= Start Start_5) (str.contains Start Start_3) (= Start_6 Start)))
   (StartBool_3 Bool (false (not StartBool_1) (str.prefixof Start_2 Start_1) (str.contains Start_3 Start_6)))
   (Start_2 String ("a" "" (str.at Start_7 StartInt) (str.substr Start_1 StartInt_5 StartInt_6) (str.replace Start Start_7 Start_1) (str.from_int StartInt_7)))
   (StartInt_3 Int (1 0 (str.indexof Start_6 Start_7 StartInt_4) (str.to_int Start_5)))
   (StartInt_4 Int (0 (str.len Start) (str.to_int Start_3)))
   (StartBool_6 Bool (false true (not StartBool_5) (str.< Start_7 Start_4) (str.prefixof Start_6 Start_6) (str.contains Start_8 Start_9) (= Start Start_13)))
   (Start_7 String ("b" (str.++ Start_8 Start_9) (str.replace Start_3 Start_7 Start_5)))
   (StartInt_2 Int (1 0 (str.to_int Start_6)))
   (Start_4 String ("1" "" "b" x "a" (str.++ Start_1 Start_8) (str.substr Start_2 StartInt_5 StartInt_4) (str.replace Start_5 Start_9 Start)))
   (Start_9 String (y "" x "b" (str.++ Start_4 Start_7) (str.at Start_2 StartInt_4) (str.substr Start StartInt_2 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_6 Start_7)))
   (StartInt_1 Int (0 (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof "b" (str.replace x "b" "") 1))))

(check-synth)
