(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartInt_11 Int) (StartInt_10 Int) (StartBool_3 Bool) (Start_2 String) (Start_3 String) (Start_10 String) (StartInt_1 Int) (StartInt_7 Int) (Start_11 String) (Start_4 String) (StartInt_9 Int) (StartBool_1 Bool) (StartInt_8 Int) (Start_1 String) (StartInt_3 Int) (StartBool_4 Bool) (Start_7 String) (StartInt_5 Int) (Start_8 String) (Start_6 String) (StartInt_6 Int) (Start_9 String) (StartInt_4 Int) (StartInt_2 Int) (Start_5 String))
  ((Start String (y (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start)))
   (StartInt Int (0 1 (str.indexof Start_7 Start_7 StartInt_8) (str.to_int Start)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_3 StartBool_2) (str.< Start_6 Start_5) (str.prefixof Start_2 Start_4) (str.suffixof Start_3 Start_6) (= StartInt_4 StartInt) (<= StartInt StartInt)))
   (StartBool_2 Bool (false (and StartBool_4 StartBool_4) (str.<= Start_5 Start_3) (str.prefixof Start_10 Start_8) (str.contains Start_1 Start_3) (= Start_3 Start_7) (<= StartInt_8 StartInt)))
   (StartInt_11 Int (0 1 (str.indexof Start_6 Start_9 StartInt_6)))
   (StartInt_10 Int (0 1 (str.indexof Start_4 Start_6 StartInt_5)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_3 StartBool_4) (str.suffixof Start_11 Start_2) (str.contains Start_1 Start_9) (<= StartInt_10 StartInt_2)))
   (Start_2 String ("" (str.at Start_1 StartInt_4) (str.substr Start_9 StartInt_7 StartInt_4) (str.replace Start_6 Start_8 Start_2)))
   (Start_3 String ("0" x (str.++ Start_10 Start_4) (str.at Start StartInt_4) (str.replace Start_7 Start_3 Start_10) (ite StartBool_1 Start_2 Start_9)))
   (Start_10 String ("0" y x (str.replace Start_4 Start_7 Start_4) (ite StartBool_1 Start_2 Start_2)))
   (StartInt_1 Int (1 (str.len Start_2)))
   (StartInt_7 Int (1 (str.len Start_2) (str.indexof Start_7 Start_2 StartInt_9) (str.to_int Start_8)))
   (Start_11 String ("0" "1" "" "b" (str.replace Start_7 Start_10 Start)))
   (Start_4 String ("0" (str.++ Start_6 Start_1) (str.at Start_10 StartInt_5) (str.substr Start_1 StartInt_7 StartInt_3) (str.replace Start_3 Start_9 Start_9) (str.from_int StartInt_8)))
   (StartInt_9 Int (1))
   (StartBool_1 Bool (true false (str.< Start_4 Start_1) (str.suffixof Start_5 Start_3) (str.contains Start_2 Start_6) (= Start_6 Start_3) (= StartInt_2 StartInt_2) (<= StartInt_3 StartInt_1)))
   (StartInt_8 Int (1))
   (Start_1 String ("1" (str.++ Start_1 Start_2) (str.at Start_2 StartInt_1) (str.replace Start_3 Start_3 Start_1) (ite StartBool_1 Start Start)))
   (StartInt_3 Int (1 (str.len Start_4) (str.indexof Start_1 Start_4 StartInt_4) (str.to_int Start_7)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool_3 StartBool) (str.prefixof Start_5 Start_10) (str.suffixof Start_7 Start) (str.contains Start_11 Start_10) (= StartInt_10 StartInt_7) (<= StartInt_6 StartInt_11)))
   (Start_7 String ("b" (str.++ Start_7 Start_6) (str.replace Start_2 Start_8 Start_7)))
   (StartInt_5 Int (0))
   (Start_8 String (x "b" y (str.substr Start StartInt_2 StartInt_5) (str.from_int StartInt_6) (ite StartBool_1 Start_6 Start_2)))
   (Start_6 String ("1" (str.at Start_6 StartInt_4) (str.substr Start_7 StartInt StartInt_2) (str.from_int StartInt)))
   (StartInt_6 Int (1 0 (str.len Start_5) (str.indexof Start_8 Start_4 StartInt)))
   (Start_9 String ("0" "a" (str.substr Start_4 StartInt_6 StartInt_6) (str.replace Start_5 Start_2 Start_9) (ite StartBool_1 Start_9 Start)))
   (StartInt_4 Int (1 0 (str.indexof Start_1 Start_1 StartInt_6) (str.to_int Start_6)))
   (StartInt_2 Int (0 1))
   (Start_5 String (y (str.at Start StartInt_1) (str.replace Start_6 Start_9 Start_8) (ite StartBool_1 Start_9 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.at x (str.to_int x)) "0")))

(check-synth)
