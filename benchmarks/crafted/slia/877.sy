(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_1 String) (Start_2 String) (Start_3 String) (Start_4 String) (Start_9 String) (StartInt_2 Int) (StartInt_3 Int) (Start_5 String) (StartInt_1 Int) (Start_10 String) (StartBool_3 Bool) (Start_6 String) (StartInt_4 Int) (Start_7 String) (StartBool_1 Bool) (StartBool_2 Bool) (Start_8 String))
  ((Start String (y (str.++ Start Start_1) (str.at Start_2 StartInt) (ite StartBool_1 Start Start_3)))
   (StartInt Int (0 1 (str.indexof Start_8 Start StartInt_4)))
   (StartBool Bool (false true (str.< Start_11 Start_10) (str.<= Start_1 Start_6) (str.prefixof Start_10 Start_7) (= StartInt_3 StartInt) (<= StartInt_4 StartInt_3)))
   (Start_11 String ("1" "" y (str.at Start_11 StartInt_4) (str.substr Start_11 StartInt StartInt_3) (str.replace Start_5 Start_6 Start_10) (str.from_int StartInt_2)))
   (Start_1 String ("0" (str.substr Start_3 StartInt_2 StartInt) (str.from_int StartInt_4)))
   (Start_2 String ("b" (str.++ Start_9 Start_3) (str.at Start_2 StartInt_2) (str.from_int StartInt_2) (ite StartBool_3 Start_6 Start_2)))
   (Start_3 String ("0" y (str.at Start_4 StartInt) (str.replace Start_1 Start_2 Start)))
   (Start_4 String ("1" (str.substr Start_2 StartInt StartInt) (str.replace Start_1 Start_3 Start_2) (str.from_int StartInt) (ite StartBool_2 Start_4 Start)))
   (Start_9 String (x "1" "" y (str.++ Start Start_10) (str.replace Start Start_8 Start)))
   (StartInt_2 Int (1 (str.len Start_4)))
   (StartInt_3 Int (0 1 (str.len Start_1) (str.indexof Start_2 Start_4 StartInt_3) (str.to_int Start_4)))
   (Start_5 String ("b" (str.replace Start_2 Start_6 Start) (ite StartBool Start Start_3)))
   (StartInt_1 Int (0 1 (str.to_int Start_2)))
   (Start_10 String (x y "a" (ite StartBool_3 Start_5 Start_9)))
   (StartBool_3 Bool (false true (and StartBool_3 StartBool_3) (str.< Start_1 Start_7) (str.suffixof Start Start_7) (str.contains Start_6 Start_1) (= Start_8 Start_2) (= StartInt StartInt)))
   (Start_6 String (y "0" "" (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_6 Start_1 Start_2)))
   (StartInt_4 Int (1))
   (Start_7 String ("1" (str.substr Start_7 StartInt_3 StartInt_2) (ite StartBool_1 Start Start_2)))
   (StartBool_1 Bool (true false (str.< Start_4 Start_2) (str.<= Start_2 Start_1) (= StartInt_3 StartInt_1) (<= StartInt_2 StartInt)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_3) (str.< Start_5 Start_4) (str.<= Start_4 Start_3) (str.suffixof Start_3 Start_1) (= StartInt StartInt_1) (<= StartInt_2 StartInt_2)))
   (Start_8 String (y "b" "a" "0"))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= x y) x y)))

(check-synth)
