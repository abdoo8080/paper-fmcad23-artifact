(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_19 String) (Start_21 String) (Start_5 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_1 String) (Start_8 String) (Start_6 String) (StartInt_9 Int) (StartInt_4 Int) (Start_4 String) (Start_20 String) (Start_9 String) (StartInt_1 Int) (StartInt_2 Int) (Start_14 String) (Start_3 String) (StartBool_1 Bool) (Start_7 String) (Start_13 String) (Start_15 String) (StartInt_12 Int) (StartInt_10 Int) (Start_10 String) (StartInt_8 Int) (StartBool_2 Bool) (Start_22 String) (StartInt_11 Int) (Start_11 String) (Start_2 String) (StartInt_6 Int) (StartInt_5 Int) (Start_12 String) (Start_16 String) (StartInt_7 Int) (Start_17 String))
  ((Start String ("a" (str.replace Start_1 Start_2 Start_3) (ite StartBool Start_1 Start_2)))
   (StartInt Int (0 1 (str.len Start_12)))
   (StartBool Bool (true (str.< Start_18 Start_11) (str.<= Start_19 Start_15) (str.prefixof Start_13 Start_7) (str.suffixof Start_2 Start_17) (= Start_20 Start_2) (= StartInt_10 StartInt_8) (<= StartInt StartInt_1)))
   (Start_18 String ("b" (str.++ Start_18 Start_16) (str.at Start_1 StartInt_10) (str.replace Start_22 Start_5 Start_9)))
   (Start_19 String ("a" (str.at Start_6 StartInt_6) (str.substr Start_17 StartInt_6 StartInt_3) (str.from_int StartInt_4) (ite StartBool_3 Start_17 Start_4)))
   (Start_21 String ("0" (str.++ Start_14 Start_21) (str.at Start_4 StartInt_11) (str.replace Start_7 Start_4 Start_8) (str.from_int StartInt_5)))
   (Start_5 String (x (str.at Start StartInt) (str.substr Start StartInt_1 StartInt)))
   (StartInt_3 Int (0 (str.indexof Start_2 Start_7 StartInt_2) (str.to_int Start_7)))
   (StartBool_3 Bool (false (str.<= Start_3 Start_2) (str.prefixof Start_3 Start_4) (str.suffixof Start_3 Start_9) (str.contains Start_3 Start_14) (= Start_11 Start_13) (= StartInt_1 StartInt_4) (<= StartInt_2 StartInt_6)))
   (Start_1 String ("0" x (str.at Start_7 StartInt_1) (str.from_int StartInt_5) (ite StartBool_1 Start_8 Start_1)))
   (Start_8 String ("b" (str.from_int StartInt)))
   (Start_6 String ("" (str.substr Start_4 StartInt StartInt_1) (str.from_int StartInt_1)))
   (StartInt_9 Int (0 (str.indexof Start_6 Start_6 StartInt_3) (str.to_int Start_6)))
   (StartInt_4 Int (1 (str.len Start_3) (str.indexof Start Start_7 StartInt)))
   (Start_4 String ("b" (str.at Start_4 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_5 Start)))
   (Start_20 String (y (str.++ Start_21 Start_12) (str.at Start_7 StartInt_3) (str.substr Start_19 StartInt_10 StartInt_11)))
   (Start_9 String ("b" (str.++ Start_7 Start_5) (str.at Start_8 StartInt_1) (str.substr Start_4 StartInt_5 StartInt_5) (str.replace Start_10 Start_1 Start_10) (ite StartBool_1 Start_11 Start_9)))
   (StartInt_1 Int (1))
   (StartInt_2 Int (0 1 (str.indexof Start Start StartInt_2)))
   (Start_14 String (y "0" (str.++ Start_5 Start_1) (str.at Start StartInt_5) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_13 Start_6 Start_9) (ite StartBool_2 Start_15 Start_2)))
   (Start_3 String ("" (str.++ Start_4 Start_5) (str.replace Start Start_6 Start_2)))
   (StartBool_1 Bool (false (str.< Start_6 Start_8) (str.suffixof Start_1 Start_9) (str.contains Start_6 Start_10) (= Start_3 Start_7) (= StartInt StartInt_3)))
   (Start_7 String (y x "0" (str.++ Start_8 Start_6) (str.at Start_7 StartInt_2) (str.replace Start_3 Start Start_5) (str.from_int StartInt_4) (ite StartBool Start_8 Start_6)))
   (Start_13 String ("0"))
   (Start_15 String ("b" (str.at Start_13 StartInt) (str.substr Start_11 StartInt_6 StartInt_6) (str.replace Start_16 Start_6 Start_16) (str.from_int StartInt_3)))
   (StartInt_12 Int (0 (str.len Start_19) (str.to_int Start_10)))
   (StartInt_10 Int (0 1 (str.len Start) (str.indexof Start_9 Start_5 StartInt)))
   (Start_10 String ("" (str.substr Start StartInt_1 StartInt) (str.from_int StartInt) (ite StartBool_2 Start Start_8)))
   (StartInt_8 Int (1))
   (StartBool_2 Bool (false (not StartBool) (str.< Start_1 Start_11) (str.prefixof Start_3 Start) (= StartInt_5 StartInt_1)))
   (Start_22 String ("a" x "1" (str.at Start_6 StartInt_9) (str.substr Start_11 StartInt_10 StartInt_12) (str.from_int StartInt_8)))
   (StartInt_11 Int (1 0 (str.len Start_17) (str.to_int Start_12)))
   (Start_11 String ("b" y "a" (str.++ Start_2 Start_10) (str.at Start_5 StartInt_3) (str.substr Start_8 StartInt_4 StartInt_4) (str.replace Start_3 Start_2 Start_10) (str.from_int StartInt_1)))
   (Start_2 String ("1" (str.substr Start_5 StartInt StartInt_2) (str.from_int StartInt_3)))
   (StartInt_6 Int (0 1 (str.len Start_4) (str.to_int Start_2)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_12 Start_2 StartInt_1) (str.to_int Start_13)))
   (Start_12 String ("1" "b" x "0" y "" "a" (str.substr Start_12 StartInt_5 StartInt_2) (str.replace Start_6 Start_9 Start_14)))
   (Start_16 String (x (str.++ Start_7 Start_9) (str.at Start_9 StartInt_3) (str.substr Start_17 StartInt_7 StartInt_1) (str.from_int StartInt_5)))
   (StartInt_7 Int (0 (str.len Start_9) (str.indexof Start_12 Start_6 StartInt_8)))
   (Start_17 String ("b" (str.at Start_10 StartInt_2) (str.substr Start_11 StartInt_2 StartInt_3) (str.replace Start_7 Start_14 Start) (str.from_int StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.substr y 0 1) y "a")))

(check-synth)
