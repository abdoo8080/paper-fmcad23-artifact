(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartInt_6 Int) (Start_9 String) (Start_10 String) (Start_7 String) (Start_2 String) (StartBool_4 Bool) (StartInt_4 Int) (StartInt_1 Int) (StartBool_3 Bool) (Start_4 String) (StartBool_2 Bool) (StartInt_5 Int) (StartBool_1 Bool) (Start_6 String) (Start_3 String) (Start_1 String) (StartInt_3 Int) (Start_8 String) (Start_5 String) (StartInt_2 Int))
  ((Start String ("" (str.substr Start StartInt StartInt)))
   (StartInt Int (1 (str.len Start) (str.indexof Start Start_1 StartInt_1) (str.to_int Start)))
   (StartBool Bool (false (not StartBool) (and StartBool_4 StartBool_4) (str.< Start_1 Start_4) (str.<= Start_6 Start_1) (str.suffixof Start Start_4) (= Start_7 Start_8) (= StartInt_1 StartInt_5) (<= StartInt_4 StartInt_4)))
   (StartInt_7 Int (0 1))
   (StartInt_6 Int (0 (str.len Start_1) (str.indexof Start_5 Start_9 StartInt_3)))
   (Start_9 String ("" "1" y (str.++ Start_2 Start_10) (str.at Start_4 StartInt_1) (str.substr Start_6 StartInt_6 StartInt_6)))
   (Start_10 String ("0" "a" (str.++ Start_9 Start_8) (str.at Start_3 StartInt_7) (str.from_int StartInt_1)))
   (Start_7 String ("b" (str.++ Start_2 Start_1) (str.replace Start_5 Start_5 Start_4) (str.from_int StartInt_1) (ite StartBool_3 Start_5 Start_5)))
   (Start_2 String ("b" "a" x (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_5) (ite StartBool_1 Start_4 Start)))
   (StartBool_4 Bool (false true (str.<= Start_4 Start) (str.prefixof Start_9 Start_4) (str.suffixof Start Start_9) (= StartInt StartInt)))
   (StartInt_4 Int (1))
   (StartInt_1 Int (1 (str.to_int Start)))
   (StartBool_3 Bool (true false (and StartBool StartBool_1) (str.< Start_6 Start_7) (str.prefixof Start_1 Start_4) (str.contains Start_6 Start_1)))
   (Start_4 String (y (str.++ Start_4 Start) (str.at Start_6 StartInt_4) (str.replace Start Start_3 Start_5)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool StartBool) (str.suffixof Start_4 Start) (str.contains Start_2 Start_1)))
   (StartInt_5 Int (1 0 (str.indexof Start_7 Start_5 StartInt)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool) (str.prefixof Start_2 Start_2) (= Start_3 Start_3) (= StartInt StartInt_2)))
   (Start_6 String ("" x (str.replace Start_3 Start_1 Start_4) (str.from_int StartInt_3) (ite StartBool_2 Start_6 Start_1)))
   (Start_3 String (x "b" y "1" "0" "a" (str.replace Start_3 Start_2 Start_2) (ite StartBool_1 Start_4 Start_5)))
   (Start_1 String (x "0" "b" (str.++ Start_1 Start_1) (str.at Start_2 StartInt_2) (str.substr Start_2 StartInt_3 StartInt_4) (str.replace Start Start_1 Start) (ite StartBool_1 Start Start_1)))
   (StartInt_3 Int (1))
   (Start_8 String ("0" (str.substr Start_2 StartInt_3 StartInt_5) (str.replace Start_2 Start_2 Start_8) (str.from_int StartInt)))
   (Start_5 String ("b" (str.++ Start_5 Start_3)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.indexof Start Start_4 StartInt_3) (str.to_int Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (ite (str.prefixof "b" x) "" "1")))))

(check-synth)
