(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_6 Int) (StartBool_6 Bool) (Start_10 String) (StartBool_5 Bool) (StartBool_1 Bool) (StartInt_4 Int) (StartBool_4 Bool) (Start_3 String) (Start_1 String) (StartInt_5 Int) (Start_4 String) (StartBool_3 Bool) (Start_9 String) (Start_2 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_2 Int) (Start_6 String) (Start_8 String) (Start_7 String) (Start_12 String) (StartBool_2 Bool) (Start_5 String))
  ((Start String ("" y (str.from_int StartInt) (ite StartBool Start Start)))
   (StartInt Int (0))
   (StartBool Bool (false (not StartBool) (and StartBool_1 StartBool) (str.< Start Start) (str.prefixof Start_1 Start_2) (= Start_1 Start_3) (<= StartInt_1 StartInt_1)))
   (Start_11 String ("1" "b" "" (str.++ Start_10 Start_9) (str.replace Start_1 Start_12 Start_9)))
   (StartInt_6 Int (0 1 (str.len Start_6) (str.to_int Start)))
   (StartBool_6 Bool (true false (str.< Start_3 Start_7) (str.prefixof Start_9 Start_1) (str.suffixof Start_1 Start) (<= StartInt_4 StartInt_6)))
   (Start_10 String (y (str.at Start_2 StartInt_2) (str.replace Start_10 Start_7 Start_8)))
   (StartBool_5 Bool (true false (not StartBool_1) (and StartBool StartBool_3) (str.<= Start_11 Start_1) (str.prefixof Start Start_1) (= Start_2 Start_12) (= StartInt_6 StartInt_5) (<= StartInt_4 StartInt_1)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_5 StartBool_6) (str.<= Start_3 Start_1) (str.prefixof Start_9 Start_8) (str.suffixof Start_6 Start) (= Start_2 Start_2)))
   (StartInt_4 Int (1 (str.len Start_3)))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool) (str.<= Start Start_2) (str.contains Start_5 Start_4) (= Start_7 Start_6)))
   (Start_3 String ("" (str.++ Start_7 Start_8)))
   (Start_1 String ("1" y "0" (str.++ Start_4 Start_8) (str.at Start_7 StartInt_3) (str.substr Start_3 StartInt_2 StartInt_4)))
   (StartInt_5 Int (1 (str.indexof Start_7 Start_8 StartInt_4)))
   (Start_4 String ("a" (str.++ Start_5 Start) (ite StartBool_1 Start_5 Start_6)))
   (StartBool_3 Bool (true (not StartBool) (str.< Start_1 Start_1) (str.suffixof Start_5 Start_8) (str.contains Start_2 Start_6) (= StartInt_1 StartInt_3) (<= StartInt_1 StartInt_2)))
   (Start_9 String ("a" (str.replace Start_4 Start_10 Start_4)))
   (Start_2 String ("" "1" (str.at Start_2 StartInt_2) (str.substr Start_2 StartInt_4 StartInt_5) (ite StartBool_4 Start_5 Start_8)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.indexof Start Start_2 StartInt_2) (str.to_int Start_4)))
   (StartInt_3 Int (0 (str.len Start) (str.to_int Start_7)))
   (StartInt_2 Int (1))
   (Start_6 String (x "1" "0" "a" y "b" (str.substr Start_5 StartInt_3 StartInt) (ite StartBool_2 Start_6 Start_7)))
   (Start_8 String ("1" (str.++ Start_3 Start_4) (str.replace Start_3 Start_5 Start_5) (ite StartBool_2 Start_1 Start_3)))
   (Start_7 String (y (str.replace Start_4 Start_1 Start_1) (ite StartBool_1 Start_7 Start_1)))
   (Start_12 String ("1" "0" (str.at Start_9 StartInt_2) (str.substr Start_11 StartInt_6 StartInt_4) (str.replace Start_3 Start_3 Start_9)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_2 StartBool) (str.< Start_2 Start_5) (str.contains Start_2 Start_5) (= StartInt_2 StartInt_3)))
   (Start_5 String ("a" (str.++ Start_5 Start_1) (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (ite StartBool_3 Start_5 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "a" "1")))

(check-synth)
