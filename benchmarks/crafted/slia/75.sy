(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_7 Int) (Start_1 String) (StartInt_1 Int) (Start_11 String) (Start_5 String) (StartInt_4 Int) (Start_10 String) (StartInt_2 Int) (Start_2 String) (StartInt_3 Int) (Start_4 String) (Start_3 String) (Start_6 String) (Start_7 String) (Start_8 String) (StartInt_6 Int) (StartInt_5 Int) (Start_9 String) (StartBool_1 Bool))
  ((Start String ("a" (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt_2) (str.replace Start_1 Start Start_1) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.indexof Start_5 Start StartInt_7) (str.to_int Start_3)))
   (StartBool Bool (false (str.prefixof Start_5 Start_1) (= Start_10 Start_9) (<= StartInt_7 StartInt_5)))
   (Start_12 String ("" y x (str.substr Start_8 StartInt_3 StartInt_6) (str.replace Start_11 Start_9 Start_8) (str.from_int StartInt_5)))
   (StartInt_7 Int (1 0 (str.len Start_9) (str.indexof Start_12 Start_12 StartInt_1) (str.to_int Start_6)))
   (Start_1 String (y (str.++ Start_8 Start_6) (str.at Start_4 StartInt_5) (ite StartBool Start_9 Start_4)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.indexof Start_2 Start_3 StartInt_5) (str.to_int Start_3)))
   (Start_11 String ("0" (str.++ Start_9 Start_8) (str.from_int StartInt_2)))
   (Start_5 String (x (str.++ Start_10 Start_10) (str.at Start StartInt) (str.substr Start_7 StartInt_2 StartInt_5) (str.replace Start_6 Start_3 Start_2) (ite StartBool_1 Start Start_4)))
   (StartInt_4 Int (0))
   (Start_10 String ("a" "" (str.at Start_6 StartInt_3) (str.substr Start_11 StartInt_3 StartInt_1) (ite StartBool Start Start_5)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.indexof Start Start_1 StartInt) (str.to_int Start_2)))
   (Start_2 String ("a" (str.replace Start_3 Start_1 Start_3) (str.from_int StartInt) (ite StartBool Start_4 Start_4)))
   (StartInt_3 Int (1 (str.indexof Start_6 Start_3 StartInt_4) (str.to_int Start_7)))
   (Start_4 String ("" "1"))
   (Start_3 String ("b" "a" "0" (str.++ Start_5 Start_2) (str.substr Start_2 StartInt StartInt_2) (str.replace Start_2 Start_6 Start_6) (ite StartBool Start_2 Start_3)))
   (Start_6 String (x "b" (str.++ Start Start_2) (str.at Start_3 StartInt_2) (str.substr Start_1 StartInt_3 StartInt)))
   (Start_7 String ("1" y x "a" (str.at Start_6 StartInt_5) (str.replace Start_1 Start_6 Start_5)))
   (Start_8 String ("" "b" (str.at Start_2 StartInt_1) (str.replace Start_3 Start_2 Start_9) (str.from_int StartInt_6)))
   (StartInt_6 Int (0 1 (str.len Start_6)))
   (StartInt_5 Int (0 1 (str.to_int Start_8)))
   (Start_9 String (x "0" "a" "" y "1" "b" (str.at Start StartInt_4) (ite StartBool_1 Start_5 Start_5)))
   (StartBool_1 Bool (false true (and StartBool StartBool) (= StartInt_2 StartInt_2) (<= StartInt_2 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y "1")))

(check-synth)
