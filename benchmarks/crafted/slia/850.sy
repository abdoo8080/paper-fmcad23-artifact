(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_12 String) (Start_11 String) (StartInt_5 Int) (StartInt_4 Int) (Start_7 String) (StartInt_3 Int) (Start_9 String) (Start_8 String) (Start_2 String) (StartInt_1 Int) (Start_4 String) (StartInt_2 Int) (Start_3 String) (Start_5 String) (StartBool_1 Bool) (Start_6 String) (Start_10 String) (StartBool_2 Bool))
  ((Start String ("b" (str.replace Start_1 Start_2 Start) (ite StartBool Start_2 Start_2)))
   (StartInt Int (0 (str.to_int Start_7)))
   (StartBool Bool (false true (not StartBool) (str.suffixof Start_2 Start_8) (= StartInt_5 StartInt_3)))
   (Start_1 String ("a" (str.at Start_11 StartInt_3) (str.substr Start_5 StartInt_5 StartInt)))
   (Start_12 String ("a" (str.at Start_8 StartInt) (str.substr Start_10 StartInt_1 StartInt_3) (str.replace Start_10 Start_3 Start_1)))
   (Start_11 String ("" (str.++ Start_5 Start_5) (str.at Start_2 StartInt_3) (str.replace Start Start_12 Start_11) (str.from_int StartInt_2)))
   (StartInt_5 Int (1 (str.len Start_4) (str.to_int Start_7)))
   (StartInt_4 Int (0 1 (str.to_int Start_8)))
   (Start_7 String (x (str.at Start StartInt_2) (str.substr Start_8 StartInt StartInt_3) (ite StartBool_2 Start_8 Start_9)))
   (StartInt_3 Int (0 1 (str.indexof Start_11 Start_6 StartInt_2)))
   (Start_9 String ("b" y "" (str.at Start StartInt) (str.substr Start_3 StartInt_3 StartInt) (str.replace Start_6 Start Start_1) (ite StartBool Start_10 Start_9)))
   (Start_8 String ("0" (str.++ Start Start_11) (str.substr Start StartInt_3 StartInt_3)))
   (Start_2 String ("1" "a" (str.++ Start_2 Start_3) (str.at Start_2 StartInt) (str.substr Start_2 StartInt_1 StartInt_1)))
   (StartInt_1 Int (1 (str.indexof Start_1 Start_3 StartInt_2)))
   (Start_4 String (x (str.++ Start_5 Start_2) (str.replace Start_6 Start Start_5)))
   (StartInt_2 Int (1 (str.len Start_1)))
   (Start_3 String ("a" (str.at Start_2 StartInt_2) (str.substr Start_3 StartInt StartInt_1) (str.replace Start Start Start_4) (str.from_int StartInt)))
   (Start_5 String (x "b" "a" "1" "" (str.++ Start_4 Start) (str.at Start_9 StartInt_3) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start_7 Start_4) (str.prefixof Start Start) (str.contains Start_2 Start_2)))
   (Start_6 String ("1" (str.substr Start_2 StartInt_3 StartInt) (ite StartBool_1 Start_2 Start_1)))
   (Start_10 String (x "a" (str.at Start StartInt) (str.substr Start_2 StartInt_3 StartInt_3) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false true (and StartBool_1 StartBool_1) (str.prefixof Start_7 Start_3) (str.suffixof Start_6 Start_3) (<= StartInt_3 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.indexof y "" 1))))

(check-synth)
