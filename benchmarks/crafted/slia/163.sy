(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartBool_1 Bool) (Start_2 String) (Start_4 String) (Start_5 String) (Start_6 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_2 Int) (Start_3 String) (StartInt_4 Int) (Start_7 String) (Start_1 String))
  ((Start String (x "" "b" (str.++ Start_1 Start_1) (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start_1 Start) (str.from_int StartInt_1)))
   (StartInt Int (0 (str.len Start_2) (str.to_int Start_2)))
   (StartBool Bool (false (and StartBool StartBool_1) (str.prefixof Start_4 Start) (str.contains Start_3 Start_3) (= Start_1 Start) (= StartInt StartInt) (<= StartInt StartInt)))
   (Start_8 String (y (str.substr Start_2 StartInt_3 StartInt_3) (str.replace Start_2 Start_3 Start_1)))
   (StartBool_1 Bool (false (str.< Start_8 Start_7) (str.prefixof Start_7 Start) (= Start_5 Start_8)))
   (Start_2 String ("" "1" (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start Start_3 Start_4) (ite StartBool Start_3 Start_5)))
   (Start_4 String ("b" "" (str.++ Start_4 Start_6) (str.substr Start_6 StartInt StartInt_2) (str.replace Start_2 Start_7 Start_3) (str.from_int StartInt_3)))
   (Start_5 String (y "a" "0" (str.++ Start_4 Start_4) (str.at Start_4 StartInt) (str.replace Start_3 Start Start_1) (str.from_int StartInt_3) (ite StartBool Start_6 Start)))
   (Start_6 String (x (str.at Start StartInt_1) (str.substr Start_3 StartInt_2 StartInt_3)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start_2 Start_2 StartInt_1)))
   (StartInt_3 Int (1 (str.len Start_1) (str.indexof Start Start_4 StartInt_3)))
   (StartInt_2 Int (1 0 (str.to_int Start_2)))
   (Start_3 String ("1" (str.++ Start_7 Start_1) (str.at Start_5 StartInt_4)))
   (StartInt_4 Int (1 (str.len Start_3) (str.indexof Start Start_4 StartInt)))
   (Start_7 String ("b" y "a" "" "1" x "0" (str.replace Start_5 Start_2 Start_7)))
   (Start_1 String (x y (str.substr Start_5 StartInt_3 StartInt_2) (str.from_int StartInt_4) (ite StartBool Start_6 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.at x 1) "a")))

(check-synth)
