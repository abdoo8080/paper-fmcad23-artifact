(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_1 String) (StartInt_1 Int) (Start_4 String) (StartInt_2 Int) (StartInt_4 Int) (Start_2 String) (Start_3 String) (Start_5 String) (StartBool_1 Bool) (Start_7 String) (Start_6 String) (StartInt_3 Int))
  ((Start String ("a" y))
   (StartInt Int (1 (str.indexof Start Start_1 StartInt_1)))
   (StartBool Bool (false true (str.< Start_6 Start_4) (str.<= Start_3 Start_7) (str.prefixof Start_5 Start) (str.suffixof Start_1 Start_1)))
   (Start_8 String ("" x "a" (str.++ Start_1 Start) (str.from_int StartInt_3)))
   (Start_1 String ("1" "" y (str.++ Start_3 Start) (str.replace Start_8 Start Start_4)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start Start_2 StartInt_1) (str.to_int Start_3)))
   (Start_4 String ("0" "" x y "b" "1" "a" (str.++ Start_5 Start_4) (str.at Start_4 StartInt_2) (str.substr Start_1 StartInt StartInt) (str.replace Start_3 Start Start_4) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 0))
   (StartInt_4 Int (0 1 (str.indexof Start_3 Start_7 StartInt_2)))
   (Start_2 String ("0" x "b" "" "1" "a" y (str.at Start_4 StartInt_1)))
   (Start_3 String (x (str.++ Start Start_2) (str.at Start_1 StartInt_2) (str.from_int StartInt_2)))
   (Start_5 String (x (str.at Start_5 StartInt_3) (str.substr Start_6 StartInt_4 StartInt_4) (str.replace Start_5 Start_6 Start_4) (ite StartBool_1 Start_3 Start)))
   (StartBool_1 Bool (false true (str.< Start_5 Start_4) (str.suffixof Start_7 Start_6) (= Start_3 Start_6)))
   (Start_7 String ("0" "" (str.replace Start_3 Start_1 Start_5) (str.from_int StartInt_4)))
   (Start_6 String ("" x "0" "a" "1" y (str.at Start_1 StartInt_3)))
   (StartInt_3 Int (1 0 (str.len Start_4) (str.indexof Start_5 Start_6 StartInt_2) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at "b" (str.to_int x)) (str.at y 1))))

(check-synth)
