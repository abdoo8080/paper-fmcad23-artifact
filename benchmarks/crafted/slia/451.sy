(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_1 Int) (StartInt_4 Int) (Start_4 String) (Start_3 String) (StartInt_5 Int) (StartInt_2 Int) (StartInt_3 Int) (StartInt_6 Int) (Start_2 String))
  ((Start String ("" x "a" (str.++ Start Start) (str.at Start StartInt) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt_3)))
   (StartInt Int (1 0))
   (StartBool Bool (false true (not StartBool) (str.< Start_3 Start_2) (str.prefixof Start Start_4) (str.suffixof Start_4 Start_4) (str.contains Start Start) (= StartInt_2 StartInt_1) (<= StartInt_5 StartInt_6)))
   (Start_1 String ("1" "b" "" (str.++ Start Start_1) (str.replace Start Start_1 Start_3) (str.from_int StartInt)))
   (StartInt_1 Int (0 1 (str.indexof Start_4 Start_2 StartInt_1) (str.to_int Start)))
   (StartInt_4 Int (0 1 (str.indexof Start Start_1 StartInt_1)))
   (Start_4 String ("1" x "b" "a" (str.at Start StartInt) (str.replace Start_3 Start_1 Start_1) (str.from_int StartInt_3)))
   (Start_3 String (x "a" "0" "1" (str.at Start_3 StartInt_4) (str.substr Start StartInt_4 StartInt) (str.replace Start_3 Start Start_4)))
   (StartInt_5 Int (0 (str.len Start) (str.indexof Start_3 Start StartInt_6) (str.to_int Start)))
   (StartInt_2 Int (1 0 (str.indexof Start_1 Start_2 StartInt_2)))
   (StartInt_3 Int (1 (str.to_int Start)))
   (StartInt_6 Int (1))
   (Start_2 String ("a" (str.++ Start_2 Start) (str.substr Start_2 StartInt_3 StartInt) (str.replace Start Start Start_2) (str.from_int StartInt_4) (ite StartBool Start_3 Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "a" (str.replace x "a" "b"))))

(check-synth)
