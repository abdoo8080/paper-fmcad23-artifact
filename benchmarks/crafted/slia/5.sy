(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_10 String) (Start_9 String) (Start_8 String) (Start_7 String) (Start_4 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_1 String) (Start_6 String) (StartInt_2 Int) (Start_3 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_2 String) (StartInt_1 Int) (StartInt_4 Int) (StartInt_6 Int) (StartBool_1 Bool) (StartInt_5 Int) (Start_5 String))
  ((Start String (x (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_3)))
   (StartInt Int (1 (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_9)))
   (StartBool Bool (false (and StartBool_1 StartBool_2) (str.< Start_11 Start_3) (str.prefixof Start_6 Start_11) (str.suffixof Start Start_7) (str.contains Start_8 Start_8) (= StartInt_5 StartInt_7) (<= StartInt_4 StartInt_2)))
   (Start_11 String ("a" "" (str.at Start_9 StartInt_1) (str.replace Start_5 Start_2 Start_7) (str.from_int StartInt_3)))
   (Start_10 String ("a" (str.++ Start_1 Start_4) (str.at Start_3 StartInt_6) (str.replace Start_6 Start_3 Start_4) (ite StartBool_2 Start_4 Start_3)))
   (Start_9 String ("0" (str.++ Start_8 Start_2) (str.at Start_9 StartInt_3) (str.substr Start_10 StartInt_5 StartInt_5) (str.replace Start_4 Start_7 Start) (str.from_int StartInt)))
   (Start_8 String (x (str.++ Start_1 Start_3) (str.at Start_2 StartInt_3) (str.substr Start_9 StartInt_1 StartInt_1) (str.replace Start_4 Start_6 Start_8)))
   (Start_7 String ("1" "" (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_3 Start_3 Start_7) (str.from_int StartInt_4) (ite StartBool Start_8 Start_1)))
   (Start_4 String ("1" (str.at Start_5 StartInt) (str.substr Start_6 StartInt_4 StartInt_1) (ite StartBool Start_1 Start_1)))
   (StartInt_3 Int (0 1 (str.to_int Start_1)))
   (StartBool_3 Bool (false true (str.< Start_6 Start_2) (str.<= Start_10 Start_4) (str.contains Start_9 Start_2) (= StartInt_2 StartInt_7)))
   (Start_1 String (y (str.++ Start_4 Start) (str.at Start_4 StartInt) (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start Start_4) (ite StartBool_1 Start_1 Start_4)))
   (Start_6 String ("0" (str.++ Start_5 Start_5) (str.replace Start_5 Start_5 Start_1) (str.from_int StartInt_5) (ite StartBool Start_5 Start_3)))
   (StartInt_2 Int (1 0 (str.len Start_2) (str.to_int Start_3)))
   (Start_3 String (x (str.at Start StartInt_3) (str.replace Start_2 Start_1 Start)))
   (StartInt_7 Int (1 (str.len Start_2) (str.indexof Start_9 Start_6 StartInt_1) (str.to_int Start_3)))
   (StartBool_2 Bool (false (and StartBool StartBool_3) (str.suffixof Start_9 Start_7) (str.contains Start_3 Start_8) (= Start Start_3) (<= StartInt_2 StartInt)))
   (Start_2 String (x))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.indexof Start_1 Start_2 StartInt_2)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.to_int Start_1)))
   (StartInt_6 Int (0 (str.len Start_1) (str.indexof Start_8 Start_10 StartInt)))
   (StartBool_1 Bool (true false (str.< Start_3 Start_1) (str.<= Start_3 Start_2) (= StartInt StartInt) (<= StartInt_1 StartInt)))
   (StartInt_5 Int (1 (str.len Start_2) (str.to_int Start_1)))
   (Start_5 String ("" (str.++ Start_5 Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at x (str.len y))))

(check-synth)
