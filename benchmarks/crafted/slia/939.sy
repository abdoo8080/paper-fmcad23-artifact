(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_8 Int) (Start_11 String) (Start_10 String) (Start_9 String) (StartInt_7 Int) (StartBool_2 Bool) (Start_8 String) (StartBool_1 Bool) (Start_7 String) (Start_2 String) (StartInt_3 Int) (Start_3 String) (StartInt_2 Int) (StartInt_4 Int) (Start_5 String) (Start_6 String) (StartInt_1 Int) (StartInt_5 Int) (Start_4 String) (Start_1 String))
  ((Start String ("1" x (str.replace Start_1 Start_2 Start_1)))
   (StartInt Int (1 (str.len Start_5) (str.to_int Start_8)))
   (StartBool Bool (false true (not StartBool) (str.suffixof Start_9 Start_2) (str.contains Start_1 Start_3)))
   (StartInt_6 Int (0 1 (str.len Start_10) (str.indexof Start_4 Start_8 StartInt_7) (str.to_int Start_2)))
   (StartInt_8 Int (0 (str.len Start_2) (str.indexof Start_4 Start_1 StartInt_1) (str.to_int Start)))
   (Start_11 String (x (str.at Start_7 StartInt_6) (str.replace Start_11 Start_9 Start_6) (str.from_int StartInt_8)))
   (Start_10 String (x (str.substr Start_4 StartInt_8 StartInt_7) (str.replace Start_11 Start_5 Start_1)))
   (Start_9 String ("b" (str.at Start_6 StartInt_8) (str.replace Start Start_4 Start_10) (str.from_int StartInt_8)))
   (StartInt_7 Int (1 0 (str.len Start_7) (str.indexof Start_5 Start_6 StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool_2) (and StartBool_1 StartBool) (str.prefixof Start_7 Start_9) (str.contains Start_2 Start_8) (= Start_5 Start_2) (= StartInt_7 StartInt_4)))
   (Start_8 String ("0" (str.from_int StartInt)))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (str.< Start_5 Start_8) (= Start_7 Start_2) (<= StartInt_4 StartInt_1)))
   (Start_7 String ("1" x "b" y (str.at Start_5 StartInt_6) (str.replace Start_6 Start Start) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_1)))
   (Start_2 String ("a" "1" (str.++ Start_3 Start_2) (str.substr Start StartInt_1 StartInt_2) (str.replace Start_4 Start Start_4) (str.from_int StartInt_3)))
   (StartInt_3 Int (1))
   (Start_3 String ("a" (str.substr Start_1 StartInt_4 StartInt_2)))
   (StartInt_2 Int (1 0 (str.len Start) (str.indexof Start_5 Start StartInt_1) (str.to_int Start_5)))
   (StartInt_4 Int (1 0 (str.len Start) (str.indexof Start_6 Start_6 StartInt) (str.to_int Start_1)))
   (Start_5 String (x (str.at Start_5 StartInt) (str.replace Start Start Start_1) (ite StartBool Start Start_2)))
   (Start_6 String (y "b" "0" (str.substr Start_4 StartInt_5 StartInt_3) (ite StartBool Start Start_2)))
   (StartInt_1 Int (1 (str.indexof Start_3 Start_3 StartInt_1)))
   (StartInt_5 Int (1 (str.indexof Start_4 Start StartInt_3)))
   (Start_4 String (y "0" (str.substr Start StartInt_2 StartInt_3) (ite StartBool Start_3 Start_3)))
   (Start_1 String ("" "b" (str.++ Start_7 Start) (str.at Start_7 StartInt_1) (str.replace Start_3 Start_4 Start_4) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.from_int (str.indexof x "a" 0)) x "0")))

(check-synth)
