(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_2 Int) (StartInt_8 Int) (Start_6 String) (StartInt_3 Int) (Start_7 String) (StartBool_2 Bool) (Start_1 String) (Start_9 String) (Start_5 String) (Start_2 String) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_5 Int) (Start_12 String) (Start_10 String) (Start_11 String) (StartInt_4 Int) (Start_4 String) (StartInt_6 Int) (Start_3 String) (Start_8 String))
  ((Start String ("b" "" (str.substr Start StartInt_1 StartInt_2) (str.replace Start Start_1 Start) (str.from_int StartInt_3) (ite StartBool Start_1 Start_1)))
   (StartInt Int (0 1 (str.indexof Start_2 Start_2 StartInt_5)))
   (StartBool Bool (false true (and StartBool_1 StartBool) (str.< Start_11 Start_2) (str.prefixof Start_13 Start_13)))
   (Start_13 String ("" "0" "b" (str.substr Start_5 StartInt_6 StartInt_1) (str.from_int StartInt_2)))
   (StartInt_1 Int (1 0 (str.to_int Start_2)))
   (StartBool_3 Bool (true (and StartBool_2 StartBool_3) (str.suffixof Start_6 Start_5) (<= StartInt_4 StartInt_5)))
   (StartInt_2 Int (1 0 (str.len Start_12)))
   (StartInt_8 Int (0 (str.len Start_2)))
   (Start_6 String (x "a" "" (str.++ Start_11 Start_9) (str.at Start_11 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_8 Start)))
   (StartInt_3 Int (1 0 (str.to_int Start_1)))
   (Start_7 String ("" (str.++ Start_8 Start_9) (str.at Start_9 StartInt_6) (str.replace Start_1 Start_5 Start_4) (str.from_int StartInt_3)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_2 StartBool_2) (str.< Start_4 Start_7) (str.prefixof Start_6 Start_5) (str.contains Start_9 Start_4) (= Start_1 Start_9) (= StartInt_3 StartInt_1) (<= StartInt_3 StartInt_5)))
   (Start_1 String ("b" (str.++ Start Start_1) (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start_1 Start Start_2) (str.from_int StartInt_1)))
   (Start_9 String ("a" (str.++ Start_6 Start_8) (str.substr Start_7 StartInt StartInt_6) (str.from_int StartInt_4) (ite StartBool Start_3 Start_10)))
   (Start_5 String ("1" (str.++ Start_3 Start_6) (str.at Start_3 StartInt) (str.replace Start_8 Start_7 Start_11) (str.from_int StartInt_3) (ite StartBool Start_10 Start_3)))
   (Start_2 String ("1" (str.++ Start_3 Start) (str.at Start_2 StartInt) (str.substr Start_2 StartInt_3 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartBool_1 Bool (true false (not StartBool) (str.< Start Start_2) (str.<= Start Start_3) (str.prefixof Start_4 Start_3) (str.suffixof Start_3 Start_4) (= StartInt_4 StartInt_5)))
   (StartInt_7 Int (0))
   (StartInt_5 Int (1 0))
   (Start_12 String (x "0" "1" "b" (str.++ Start Start_7) (ite StartBool_2 Start_4 Start_6)))
   (Start_10 String ("a" "b" (str.substr Start_7 StartInt_2 StartInt_2) (str.replace Start_3 Start_7 Start_3) (str.from_int StartInt_6) (ite StartBool_1 Start_4 Start_5)))
   (Start_11 String ("" y (str.++ Start Start_9) (str.at Start_2 StartInt_7) (str.substr Start_5 StartInt_8 StartInt_7) (str.from_int StartInt_5)))
   (StartInt_4 Int (0 (str.indexof Start_3 Start_1 StartInt)))
   (Start_4 String ("b" "" x (str.at Start_5 StartInt_3) (str.substr Start_1 StartInt_1 StartInt_4) (str.replace Start_3 Start_5 Start_6) (str.from_int StartInt) (ite StartBool Start_2 Start_7)))
   (StartInt_6 Int (1 (str.len Start_3)))
   (Start_3 String (x "1" "0" y (str.at Start_1 StartInt_3) (str.substr Start_7 StartInt_4 StartInt) (ite StartBool Start_8 Start_11)))
   (Start_8 String (x (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof (str.at y 1) "" 1))))

(check-synth)
