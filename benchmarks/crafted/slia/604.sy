(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_9 String) (StartBool_5 Bool) (StartInt_8 Int) (StartBool_4 Bool) (Start_7 String) (Start_1 String) (Start_4 String) (Start_2 String) (StartBool_1 Bool) (StartBool_6 Bool) (StartInt_3 Int) (Start_5 String) (Start_8 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_6 String) (StartInt_6 Int) (Start_3 String) (StartBool_3 Bool) (Start_10 String) (StartInt_1 Int) (Start_11 String) (StartInt_7 Int) (StartInt_4 Int) (StartInt_2 Int))
  ((Start String ("0" "" (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_1 Start_2)))
   (StartInt Int (1 0 (str.to_int Start_4)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_6 StartBool_4) (str.< Start_11 Start_10) (str.<= Start_10 Start_6) (str.contains Start_9 Start_1) (= Start_7 Start_1)))
   (StartInt_9 Int (1 0 (str.len Start_10)))
   (Start_9 String ("" (str.at Start_9 StartInt_1) (str.replace Start_3 Start_3 Start_5) (ite StartBool_1 Start_4 Start_10)))
   (StartBool_5 Bool (true false (not StartBool) (str.<= Start_4 Start_9) (str.prefixof Start_4 Start_7) (str.contains Start_6 Start_6) (= Start_6 Start)))
   (StartInt_8 Int (1 0 (str.indexof Start Start_4 StartInt_1) (str.to_int Start_1)))
   (StartBool_4 Bool (false (not StartBool_1) (and StartBool_5 StartBool_2) (str.< Start_4 Start_6) (str.prefixof Start_7 Start_7) (str.contains Start_2 Start_6) (= StartInt_5 StartInt_8)))
   (Start_7 String ("b" (str.at Start_1 StartInt_4) (ite StartBool_2 Start_2 Start_3)))
   (Start_1 String (x y "a" (str.++ Start_6 Start_1) (str.replace Start_1 Start_7 Start_6) (ite StartBool_1 Start_1 Start_5)))
   (Start_4 String ("0" (str.replace Start_1 Start Start)))
   (Start_2 String (x (str.++ Start_3 Start_3) (str.at Start_4 StartInt_1) (str.substr Start_1 StartInt StartInt_2) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_4)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_2 StartBool_1) (str.<= Start_3 Start_5) (str.prefixof Start_2 Start_2) (str.suffixof Start_1 Start_4) (<= StartInt_2 StartInt_3)))
   (StartBool_6 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_2) (str.contains Start Start_5) (= Start_10 Start_6)))
   (StartInt_3 Int (0 1))
   (Start_5 String ("1" (str.substr Start_1 StartInt_4 StartInt)))
   (Start_8 String (y (str.++ Start_5 Start_3) (str.from_int StartInt_3) (ite StartBool Start_2 Start_10)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_5 Start) (str.prefixof Start_5 Start_2) (str.suffixof Start_1 Start_1) (= Start_2 Start_2) (= StartInt_1 StartInt_5)))
   (StartInt_5 Int (1 0 (str.len Start_2) (str.indexof Start_1 Start_1 StartInt_6) (str.to_int Start_4)))
   (Start_6 String (x (str.++ Start_1 Start_6) (str.at Start_1 StartInt_2) (str.substr Start_8 StartInt StartInt_2) (str.from_int StartInt_2) (ite StartBool_4 Start Start_8)))
   (StartInt_6 Int (1 0 (str.indexof Start_3 Start_2 StartInt_2) (str.to_int Start_3)))
   (Start_3 String ("" "a" "b" "1" y "0" x (str.++ Start_4 Start_2) (str.at Start_5 StartInt_4) (str.replace Start_3 Start_1 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_4)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.<= Start_3 Start_4) (str.prefixof Start_4 Start_4) (str.suffixof Start_4 Start) (= StartInt_1 StartInt_2)))
   (Start_10 String ("" (str.++ Start_3 Start_5) (str.substr Start_5 StartInt_9 StartInt_1) (str.from_int StartInt_3) (ite StartBool Start_1 Start_3)))
   (StartInt_1 Int (1 (str.indexof Start_5 Start StartInt_7)))
   (Start_11 String ("0" "a" x (str.substr Start_6 StartInt StartInt_9)))
   (StartInt_7 Int (0 1 (str.indexof Start_4 Start_2 StartInt_2)))
   (StartInt_4 Int (1 0))
   (StartInt_2 Int (0 (str.indexof Start_4 Start_2 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" x (str.at x 0))))

(check-synth)
