(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartBool_4 Bool) (Start_9 String) (Start_8 String) (StartInt_8 Int) (Start_7 String) (StartBool_3 Bool) (Start_10 String) (StartBool_2 Bool) (StartInt_1 Int) (Start_5 String) (StartInt_5 Int) (StartInt_6 Int) (Start_2 String) (StartInt_2 Int) (Start_4 String) (Start_3 String) (StartBool_1 Bool) (StartInt_7 Int) (Start_6 String) (Start_1 String) (Start_11 String) (StartInt_3 Int) (StartInt_4 Int))
  ((Start String ("b" "a" (str.at Start StartInt_1)))
   (StartInt Int (1 0 (str.len Start) (str.to_int Start_2)))
   (StartBool Bool (false true (not StartBool_2) (and StartBool_1 StartBool_3) (str.< Start_2 Start_4) (str.prefixof Start_3 Start_2) (str.suffixof Start_3 Start_5) (str.contains Start_2 Start_2)))
   (StartBool_5 Bool (false true (not StartBool_1) (str.<= Start_5 Start_1) (str.prefixof Start_1 Start) (str.suffixof Start_4 Start_11)))
   (StartBool_4 Bool (true false (and StartBool_2 StartBool_5) (str.< Start Start_5) (str.prefixof Start_7 Start_1) (str.suffixof Start_4 Start_8) (= Start_3 Start_10) (= StartInt_8 StartInt_2)))
   (Start_9 String ("" "0" "b" y x "a"))
   (Start_8 String ("b" "0" "a" "1" "" y (str.at Start_9 StartInt_8) (str.substr Start_7 StartInt_3 StartInt_5)))
   (StartInt_8 Int (1 0 (str.indexof Start_3 Start_8 StartInt_4)))
   (Start_7 String ("b" "a" y "1" (str.++ Start_3 Start_7) (str.from_int StartInt_7)))
   (StartBool_3 Bool (false true (str.< Start Start_1) (str.<= Start_6 Start_3) (str.contains Start Start_6) (= StartInt StartInt_2) (<= StartInt_4 StartInt_3)))
   (Start_10 String ("b" y (str.at Start_1 StartInt_3) (str.substr Start_8 StartInt_5 StartInt_5) (ite StartBool Start_1 Start_9)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_4) (str.prefixof Start_2 Start_5) (str.suffixof Start_2 Start_5) (str.contains Start_1 Start_2) (<= StartInt_8 StartInt_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start StartInt) (str.to_int Start_2)))
   (Start_5 String ("1" (str.substr Start StartInt_4 StartInt_5) (ite StartBool_1 Start Start_4)))
   (StartInt_5 Int (0 1 (str.to_int Start)))
   (StartInt_6 Int (0 1))
   (Start_2 String ("b" (str.++ Start_1 Start_3) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start_4 StartInt_2)))
   (Start_4 String ("0" "" (str.++ Start Start_4) (str.from_int StartInt_3)))
   (Start_3 String ("1" (str.substr Start_5 StartInt_3 StartInt)))
   (StartBool_1 Bool (true (not StartBool_1) (str.prefixof Start_4 Start_2) (str.contains Start_1 Start_1) (= StartInt_4 StartInt_3) (<= StartInt StartInt_2)))
   (StartInt_7 Int (0 1 (str.indexof Start_6 Start_6 StartInt_3) (str.to_int Start_3)))
   (Start_6 String (y "a" (str.at Start_7 StartInt) (str.substr Start_5 StartInt_6 StartInt) (str.replace Start_5 Start_3 Start_2) (str.from_int StartInt_4)))
   (Start_1 String ("b" (str.substr Start StartInt_1 StartInt_4) (str.from_int StartInt_5)))
   (Start_11 String (x (str.++ Start_4 Start) (str.from_int StartInt)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_3 Start_1 StartInt)))
   (StartInt_4 Int (1 (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.++ "1" (str.replace "0" (str.++ "0" x) "b"))))))

(check-synth)
