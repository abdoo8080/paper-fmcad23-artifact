(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartBool_4 Bool) (Start_7 String) (StartBool_1 Bool) (Start_6 String) (Start_9 String) (Start_5 String) (Start_14 String) (StartInt_4 Int) (Start_8 String) (Start_3 String) (StartInt_2 Int) (Start_12 String) (Start_15 String) (StartInt_5 Int) (Start_13 String) (Start_16 String) (StartBool_2 Bool) (Start_2 String) (StartInt_3 Int) (Start_4 String) (Start_11 String) (StartBool_3 Bool) (StartInt_7 Int) (Start_10 String) (StartInt_1 Int) (StartInt_8 Int) (Start_1 String))
  ((Start String ("b" "0" y (str.++ Start_1 Start_2) (str.at Start_3 StartInt) (str.replace Start_4 Start_4 Start_4) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_4) (str.to_int Start_14)))
   (StartBool Bool (false (not StartBool_1) (and StartBool_3 StartBool_4) (str.< Start_9 Start_15) (str.prefixof Start_14 Start_1) (str.suffixof Start Start_15) (<= StartInt_5 StartInt_4)))
   (StartInt_6 Int (1 (str.len Start_6) (str.indexof Start_5 Start_8 StartInt_1) (str.to_int Start_5)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_2) (str.< Start_11 Start_5) (str.<= Start_7 Start_2) (str.prefixof Start_2 Start_10) (<= StartInt_6 StartInt_5)))
   (Start_7 String ("" (str.at Start_3 StartInt_1) (str.substr Start_3 StartInt_4 StartInt_1) (str.from_int StartInt_6) (ite StartBool_1 Start Start_5)))
   (StartBool_1 Bool (true (not StartBool) (str.<= Start_6 Start_3) (str.prefixof Start_6 Start_5) (str.suffixof Start_7 Start_5) (str.contains Start_8 Start_3) (= StartInt StartInt_3) (<= StartInt_4 StartInt_1)))
   (Start_6 String ("1" (str.at Start_2 StartInt) (str.substr Start StartInt_5 StartInt_3) (str.replace Start Start_7 Start_6) (str.from_int StartInt_1)))
   (Start_9 String (x "a" (str.at Start_10 StartInt_3) (str.substr Start_5 StartInt_4 StartInt_3) (str.replace Start_6 Start_11 Start_4) (ite StartBool Start_2 Start_9)))
   (Start_5 String ("b" (str.at Start_3 StartInt_3) (str.substr Start_5 StartInt_3 StartInt_4)))
   (Start_14 String ("a" y (str.at Start StartInt_7) (str.from_int StartInt_5)))
   (StartInt_4 Int (0))
   (Start_8 String (x "1" (str.at Start_2 StartInt_5) (str.substr Start_8 StartInt_5 StartInt_5) (str.replace Start_7 Start Start_1) (str.from_int StartInt) (ite StartBool Start_1 Start_7)))
   (Start_3 String ("b" (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_2 Start_5 Start) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 (str.len Start_6)))
   (Start_12 String (x "" (str.at Start StartInt_7) (ite StartBool_2 Start_14 Start_15)))
   (Start_15 String (y "" "b" "a" x "1" "0" (str.at Start_5 StartInt_2)))
   (StartInt_5 Int (0 1 (str.len Start_7) (str.indexof Start_8 Start_5 StartInt_5) (str.to_int Start_8)))
   (Start_13 String ("a" "1" "" "b" (str.++ Start_13 Start_6) (str.from_int StartInt_6) (ite StartBool_2 Start_3 Start_5)))
   (Start_16 String (y "0" "a" (str.replace Start_4 Start_8 Start_10) (ite StartBool_2 Start_3 Start_14)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_3 StartBool) (str.< Start_5 Start_13) (str.<= Start_14 Start_14) (str.prefixof Start Start_13) (str.suffixof Start_6 Start_4) (= Start_12 Start_2) (= StartInt_1 StartInt_7)))
   (Start_2 String (x (str.++ Start_7 Start_7) (str.substr Start_9 StartInt StartInt_3) (str.replace Start_5 Start_9 Start_3)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_5 Start_3 StartInt_3)))
   (Start_4 String ("" x y (str.substr Start StartInt StartInt_1) (str.from_int StartInt) (ite StartBool Start_3 Start_3)))
   (Start_11 String (y (str.at Start_5 StartInt_1) (str.substr Start_12 StartInt_3 StartInt_7) (str.replace Start_4 Start_1 Start_11) (ite StartBool_2 Start Start_7)))
   (StartBool_3 Bool (true (and StartBool_3 StartBool_4) (str.< Start_8 Start_1) (str.suffixof Start_12 Start_6) (str.contains Start_4 Start_14)))
   (StartInt_7 Int (1 (str.len Start_9) (str.indexof Start_5 Start_13 StartInt) (str.to_int Start_12)))
   (Start_10 String ("1" (str.at Start_15 StartInt) (str.replace Start_1 Start_3 Start_6) (str.from_int StartInt)))
   (StartInt_1 Int (1 0 (str.len Start_3)))
   (StartInt_8 Int (1 (str.len Start_15) (str.indexof Start_4 Start_7 StartInt_7) (str.to_int Start_16)))
   (Start_1 String (y (str.++ Start_4 Start_11) (str.at Start_16 StartInt_8) (str.substr Start StartInt_2 StartInt_6) (ite StartBool_1 Start_12 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y "b") "b" x)))

(check-synth)
