(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (StartInt_1 Int) (StartInt_3 Int) (Start_2 String) (StartInt_2 Int) (Start_3 String) (Start_1 String) (StartInt_4 Int))
  ((Start String (x (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt)))
   (StartInt Int (0 (str.len Start_4) (str.to_int Start_3)))
   (StartBool Bool (false (str.< Start Start_3) (str.suffixof Start_1 Start) (= StartInt_4 StartInt)))
   (Start_4 String ("" x (str.++ Start_1 Start_1) (str.from_int StartInt_3) (ite StartBool Start_3 Start_2)))
   (StartInt_1 Int (1 0 (str.len Start_2) (str.indexof Start_1 Start_4 StartInt_3)))
   (StartInt_3 Int (1 (str.indexof Start_1 Start_1 StartInt_2) (str.to_int Start)))
   (Start_2 String ("" x y))
   (StartInt_2 Int (0 1 (str.len Start_1)))
   (Start_3 String ("" x (str.++ Start_1 Start_2) (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt)))
   (Start_1 String (x "b" "" "a" y (str.++ Start_2 Start_3) (str.from_int StartInt)))
   (StartInt_4 Int (0 (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y "1") 1)))

(check-synth)
