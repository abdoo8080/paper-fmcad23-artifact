(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_1 String) (StartInt_4 Int) (Start_2 String) (Start_3 String) (StartInt_2 Int) (Start_4 String) (Start_6 String) (StartBool_2 Bool) (StartInt_3 Int) (Start_5 String) (StartBool_1 Bool))
  ((Start String ("0" "b" x "a" y (str.at Start StartInt_1)))
   (StartInt Int (1 0 (str.to_int Start_1)))
   (StartBool Bool (true false (not StartBool_2) (str.< Start Start_5) (str.contains Start_4 Start_6)))
   (StartInt_1 Int (1 (str.indexof Start Start StartInt_1)))
   (Start_1 String (x y "" (str.++ Start_1 Start_2) (str.replace Start_1 Start Start_1) (str.from_int StartInt)))
   (StartInt_4 Int (0 1 (str.to_int Start_2)))
   (Start_2 String ("0" x (str.++ Start_2 Start_3) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt_2)))
   (Start_3 String ("a" (str.++ Start_2 Start_3) (str.substr Start StartInt_2 StartInt_1) (str.from_int StartInt) (ite StartBool Start_3 Start_4)))
   (StartInt_2 Int (1 0 (str.to_int Start_2)))
   (Start_4 String ("1" (str.at Start_5 StartInt) (str.substr Start_1 StartInt_2 StartInt_3) (str.from_int StartInt_3)))
   (Start_6 String (y (str.at Start_2 StartInt_2) (str.substr Start_6 StartInt_4 StartInt_1) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_2 Bool (true (and StartBool StartBool_1) (str.contains Start_5 Start_3) (<= StartInt_3 StartInt_1)))
   (StartInt_3 Int (1 0))
   (Start_5 String (x "b" (str.++ Start_6 Start) (str.substr Start_6 StartInt StartInt_4) (ite StartBool Start_3 Start_6)))
   (StartBool_1 Bool (true false (not StartBool_1) (and StartBool_1 StartBool_1) (str.< Start_2 Start_1) (str.contains Start_5 Start_5) (= StartInt_4 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at y 1) x)))

(check-synth)
