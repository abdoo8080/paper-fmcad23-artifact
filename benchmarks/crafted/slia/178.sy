(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_13 String) (Start_1 String) (Start_9 String) (StartBool_1 Bool) (Start_3 String) (StartBool_2 Bool) (Start_5 String) (StartInt_2 Int) (StartInt_1 Int) (StartInt_3 Int) (Start_6 String) (Start_4 String) (Start_2 String) (Start_11 String) (Start_7 String) (Start_8 String) (StartInt_4 Int) (Start_10 String))
  ((Start String (y (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_11) (str.indexof Start_13 Start_2 StartInt_3) (str.to_int Start_7)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_2 StartBool_2) (str.<= Start_3 Start_7) (= Start_6 Start_2) (= StartInt_4 StartInt_4) (<= StartInt_1 StartInt)))
   (Start_12 String ("" x "a" "1" (str.++ Start_2 Start_10) (str.replace Start_1 Start_4 Start_11) (str.from_int StartInt_1)))
   (Start_13 String (y (str.++ Start_13 Start_1) (str.substr Start_4 StartInt_4 StartInt) (ite StartBool_2 Start_7 Start_12)))
   (Start_1 String ("1" "a" (str.++ Start_11 Start) (str.from_int StartInt_2) (ite StartBool_1 Start_13 Start_1)))
   (Start_9 String ("a" (str.++ Start_4 Start_4) (str.at Start StartInt) (str.replace Start_5 Start_4 Start_10) (str.from_int StartInt_2)))
   (StartBool_1 Bool (true (and StartBool StartBool_2) (= Start_1 Start_10) (= StartInt_3 StartInt)))
   (Start_3 String ("b" (str.++ Start_4 Start_4) (str.at Start StartInt_1) (str.replace Start Start_1 Start_5) (str.from_int StartInt_1)))
   (StartBool_2 Bool (false (str.< Start_5 Start_10) (str.<= Start_5 Start_2) (str.prefixof Start_1 Start_3) (str.contains Start_7 Start_10) (<= StartInt_1 StartInt_2)))
   (Start_5 String (x (str.replace Start_6 Start Start_5) (str.from_int StartInt) (ite StartBool Start_4 Start_5)))
   (StartInt_2 Int (1 (str.len Start_5) (str.indexof Start_4 Start_3 StartInt)))
   (StartInt_1 Int (1 (str.len Start_12)))
   (StartInt_3 Int (1 (str.len Start_5)))
   (Start_6 String (x y (str.++ Start_6 Start_6) (str.substr Start_2 StartInt_2 StartInt) (str.replace Start_3 Start_2 Start_1) (str.from_int StartInt_2) (ite StartBool Start_4 Start)))
   (Start_4 String ("b" (str.++ Start_4 Start_7) (str.at Start StartInt_2) (str.from_int StartInt_1)))
   (Start_2 String ("0" "a" (str.at Start_8 StartInt) (str.replace Start_9 Start_1 Start_1)))
   (Start_11 String ("0" (str.substr Start_5 StartInt_3 StartInt_4) (str.replace Start_6 Start_5 Start_11) (ite StartBool_1 Start_3 Start)))
   (Start_7 String (y (str.at Start_7 StartInt_1) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_6 Start_5 Start) (ite StartBool_1 Start_1 Start_8)))
   (Start_8 String ("1" "a" x (str.++ Start_9 Start_7) (str.replace Start_5 Start_9 Start_1)))
   (StartInt_4 Int (0 (str.len Start_6) (str.to_int Start_5)))
   (Start_10 String (x "1" (str.at Start_11 StartInt_3) (str.substr Start_8 StartInt_3 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start_3 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "1" "" "b") "1")))

(check-synth)
