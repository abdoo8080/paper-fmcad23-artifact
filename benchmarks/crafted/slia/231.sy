(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (StartBool_4 Bool) (StartInt_3 Int) (Start_9 String) (Start_3 String) (Start_10 String) (StartInt_2 Int) (Start_8 String) (StartBool_3 Bool) (Start_4 String) (Start_7 String) (Start_5 String) (StartBool_1 Bool) (StartBool_5 Bool) (Start_18 String) (Start_6 String) (StartBool_6 Bool) (Start_1 String) (Start_12 String) (Start_14 String) (Start_11 String) (StartInt_6 Int) (Start_2 String) (Start_13 String) (Start_16 String) (Start_15 String) (StartInt_1 Int) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_5 Int))
  ((Start String (y (str.at Start StartInt_1) (str.substr Start StartInt_1 StartInt) (str.replace Start Start Start_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 (str.indexof Start_9 Start_3 StartInt_1)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_4 StartBool_6) (str.prefixof Start_10 Start_11) (str.suffixof Start_4 Start_1) (str.contains Start_6 Start_11) (= StartInt_5 StartInt_5) (<= StartInt_1 StartInt_2)))
   (Start_17 String ("0" (str.at Start_2 StartInt_4) (str.substr Start_18 StartInt_5 StartInt_4) (ite StartBool_5 Start_1 Start_14)))
   (StartBool_4 Bool (false true (not StartBool_1) (and StartBool_1 StartBool) (str.< Start_2 Start_10)))
   (StartInt_3 Int (1 0))
   (Start_9 String (x "0" (str.++ Start_6 Start_10) (str.from_int StartInt_2)))
   (Start_3 String ("a" "1" (ite StartBool_1 Start_4 Start_5)))
   (Start_10 String (y (str.++ Start_3 Start_10) (str.at Start_2 StartInt) (str.replace Start_6 Start_9 Start_5)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.to_int Start_8)))
   (Start_8 String ("0" (str.++ Start_1 Start_5) (str.from_int StartInt_2) (ite StartBool_4 Start_9 Start_10)))
   (StartBool_3 Bool (false true (and StartBool_2 StartBool_3) (str.< Start_3 Start_1) (str.prefixof Start_6 Start_3) (str.suffixof Start_2 Start_6) (= Start Start_7) (= StartInt StartInt_1) (<= StartInt_2 StartInt_1)))
   (Start_4 String (x (str.++ Start_6 Start_3) (str.at Start_4 StartInt) (str.replace Start Start_2 Start_4) (str.from_int StartInt) (ite StartBool_2 Start_6 Start_6)))
   (Start_7 String ("b" "a" y (str.substr Start_2 StartInt StartInt) (str.from_int StartInt) (ite StartBool_5 Start Start_6)))
   (Start_5 String ("0" "b" "" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_1 StartInt)))
   (StartBool_1 Bool (false true (str.< Start_6 Start_8) (str.<= Start_6 Start_12) (str.contains Start Start_13) (= Start_3 Start_5)))
   (StartBool_5 Bool (false (str.<= Start_3 Start_4) (str.contains Start_7 Start) (= StartInt_3 StartInt)))
   (Start_18 String ("" "1" "0" (str.at Start StartInt_6) (str.from_int StartInt) (ite StartBool_2 Start_3 Start_3)))
   (Start_6 String ("1" "a" y (str.at Start_11 StartInt_2) (str.substr Start_1 StartInt_3 StartInt) (str.replace Start_2 Start_8 Start_12)))
   (StartBool_6 Bool (true (str.< Start_16 Start_15) (str.<= Start_9 Start_8) (str.contains Start_11 Start_16) (= Start_12 Start_9) (= StartInt_3 StartInt_3)))
   (Start_1 String ("1" (str.++ Start_15 Start_5) (str.replace Start_7 Start_5 Start_4)))
   (Start_12 String (y (str.at Start_12 StartInt_1) (str.substr Start StartInt StartInt_2) (ite StartBool_5 Start_8 Start_11)))
   (Start_14 String ("b" (str.++ Start_12 Start_3) (str.from_int StartInt_1)))
   (Start_11 String ("" (str.at Start_1 StartInt_3) (str.from_int StartInt_1) (ite StartBool Start_6 Start_11)))
   (StartInt_6 Int (1 0 (str.indexof Start_4 Start_1 StartInt_3)))
   (Start_2 String ("a" (str.++ Start_2 Start_3) (str.substr Start StartInt_1 StartInt)))
   (Start_13 String ("" (str.++ Start_7 Start_1) (str.at Start_8 StartInt_3) (str.substr Start_5 StartInt_3 StartInt_1) (ite StartBool_2 Start_9 Start_14)))
   (Start_16 String (x (str.++ Start_17 Start_13) (str.at Start_4 StartInt_1) (str.from_int StartInt_3)))
   (Start_15 String ("1" y "0" "" (str.++ Start_2 Start_3) (str.at Start_13 StartInt_4) (str.replace Start_4 Start_7 Start_11)))
   (StartInt_1 Int (0 1 (str.to_int Start_7)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_3) (str.prefixof Start_4 Start_2) (str.suffixof Start_2 Start_1) (= Start Start_3) (= StartInt StartInt_1) (<= StartInt_1 StartInt_1)))
   (StartInt_4 Int (0 1 (str.to_int Start_11)))
   (StartInt_5 Int (1 (str.len Start_9) (str.indexof Start_9 Start_6 StartInt_6) (str.to_int Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y x "")))

(check-synth)
