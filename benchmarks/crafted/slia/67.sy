(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_18 String) (StartInt_5 Int) (Start_7 String) (Start_1 String) (Start_11 String) (Start_6 String) (Start_16 String) (StartBool_1 Bool) (Start_8 String) (StartInt_4 Int) (StartInt_2 Int) (StartBool_6 Bool) (Start_17 String) (Start_3 String) (StartBool_3 Bool) (Start_4 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_9 String) (Start_10 String) (StartInt_3 Int) (Start_12 String) (Start_19 String) (StartInt_1 Int) (Start_13 String) (StartInt_8 Int) (StartBool_7 Bool) (Start_2 String) (StartBool_5 Bool) (StartBool_4 Bool) (Start_15 String) (Start_14 String) (Start_5 String))
  ((Start String ("b" "1" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_1 Start_1 Start) (str.from_int StartInt)))
   (StartInt Int (1 (str.to_int Start_7)))
   (StartBool Bool (true false (str.<= Start_11 Start_7) (str.prefixof Start_5 Start_18) (str.contains Start_11 Start_7) (= Start_9 Start_14) (= StartInt_7 StartInt_4)))
   (StartInt_7 Int (1 0 (str.indexof Start_19 Start_9 StartInt_5)))
   (Start_18 String ("a" "0" (str.replace Start_5 Start_19 Start_4) (ite StartBool_7 Start_8 Start_17)))
   (StartInt_5 Int (1 (str.len Start_1) (str.to_int Start_4)))
   (Start_7 String (x "b" (str.at Start_8 StartInt_5) (str.from_int StartInt)))
   (Start_1 String ("b" "1" (str.++ Start_17 Start_15) (str.replace Start_17 Start_4 Start_9) (ite StartBool_2 Start_9 Start_18)))
   (Start_11 String (x (str.++ Start_11 Start_10) (str.substr Start_12 StartInt_4 StartInt_4) (str.replace Start_12 Start_10 Start_8)))
   (Start_6 String ("" (str.++ Start_7 Start) (str.at Start_6 StartInt_4) (str.substr Start StartInt_1 StartInt) (ite StartBool_1 Start_1 Start_1)))
   (Start_16 String ("a" (str.++ Start_13 Start_16) (str.at Start_4 StartInt_1) (str.from_int StartInt_1) (ite StartBool_7 Start_16 Start_14)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_2 StartBool_3) (str.< Start_5 Start_1) (str.prefixof Start_6 Start_3) (= Start_1 Start_3) (= StartInt_2 StartInt_3) (<= StartInt StartInt_3)))
   (Start_8 String (y (str.++ Start_6 Start)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start_3 Start_6 StartInt_2) (str.to_int Start_1)))
   (StartInt_2 Int (0 1))
   (StartBool_6 Bool (true false (and StartBool_3 StartBool_7) (str.prefixof Start_14 Start_15)))
   (Start_17 String ("b" "a" (str.replace Start_4 Start_17 Start_9) (str.from_int StartInt_5)))
   (Start_3 String ("1" "b" y "a" (str.++ Start_4 Start_1) (str.replace Start_3 Start_1 Start_2)))
   (StartBool_3 Bool (true false (not StartBool) (and StartBool_4 StartBool_2) (str.< Start_1 Start_8) (str.prefixof Start_1 Start_6) (str.suffixof Start_9 Start_7) (= Start_3 Start_3)))
   (Start_4 String ("a" y "0" (str.++ Start_2 Start_1) (str.at Start_4 StartInt_2) (str.substr Start_5 StartInt_3 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start_1)))
   (StartBool_2 Bool (false (not StartBool_7) (str.prefixof Start_9 Start_2) (str.contains Start_9 Start_10) (= Start_9 Start_15) (= StartInt_4 StartInt_1) (<= StartInt_6 StartInt_4)))
   (StartInt_6 Int (0 1 (str.len Start_10)))
   (Start_9 String ("" x (str.at Start_8 StartInt_4) (str.replace Start_7 Start_1 Start_10) (str.from_int StartInt_3) (ite StartBool_4 Start_3 Start_8)))
   (Start_10 String ("0" "a" "1" (str.++ Start_5 Start_4) (str.at Start_5 StartInt_2) (str.substr Start_11 StartInt StartInt) (str.replace Start_4 Start_7 Start_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_11 Start_6 StartInt_5)))
   (Start_12 String (y (str.++ Start_4 Start_10) (str.substr Start_10 StartInt_4 StartInt_3) (str.replace Start_8 Start_10 Start_6) (ite StartBool_5 Start_13 Start_10)))
   (Start_19 String (y "a" (str.++ Start_6 Start_6) (str.at Start_9 StartInt_7) (str.from_int StartInt_8) (ite StartBool_2 Start_13 Start_15)))
   (StartInt_1 Int (0 1 (str.indexof Start Start_2 StartInt_1) (str.to_int Start)))
   (Start_13 String ("b" "a" (str.from_int StartInt_2) (ite StartBool_5 Start_12 Start_13)))
   (StartInt_8 Int (1 (str.indexof Start_9 Start_1 StartInt_2) (str.to_int Start_5)))
   (StartBool_7 Bool (true false (not StartBool_4) (str.< Start_9 Start_9) (str.prefixof Start_7 Start_4) (str.contains Start_12 Start_10) (<= StartInt_1 StartInt)))
   (Start_2 String ("a" "b" x (str.++ Start_3 Start_2) (str.substr Start_3 StartInt StartInt_2)))
   (StartBool_5 Bool (true false (str.suffixof Start_3 Start_1)))
   (StartBool_4 Bool (false true (and StartBool_6 StartBool_5) (str.prefixof Start_9 Start_3) (str.suffixof Start_12 Start_2) (str.contains Start_14 Start_9) (= Start_15 Start_8) (= StartInt StartInt_5) (<= StartInt_3 StartInt_4)))
   (Start_15 String (y (str.++ Start_8 Start_13) (str.replace Start_12 Start_11 Start_10) (ite StartBool_3 Start_15 Start_8)))
   (Start_14 String ("1" (str.++ Start_1 Start_9) (str.at Start_11 StartInt_1) (str.substr Start_16 StartInt_1 StartInt_6) (str.replace Start_15 Start_16 Start_10)))
   (Start_5 String ("a" "1" (str.++ Start_11 Start_11) (str.at Start_6 StartInt_6) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt_1) (ite StartBool_5 Start_5 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" x "0")))

(check-synth)
