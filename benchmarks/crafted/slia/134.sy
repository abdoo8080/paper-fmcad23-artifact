(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_7 Int) (StartInt_6 Int) (Start_9 String) (Start_10 String) (StartInt_5 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_8 String) (StartBool_3 Bool) (StartInt_3 Int) (Start_12 String) (Start_2 String) (Start_4 String) (StartInt_4 Int) (StartBool_1 Bool) (StartBool_5 Bool) (Start_3 String) (StartInt_2 Int) (Start_5 String) (StartInt_1 Int) (Start_1 String) (Start_6 String) (Start_11 String) (Start_7 String))
  ((Start String (y x "" "0" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_1 Start_2 Start)))
   (StartInt Int (0 (str.len Start_7) (str.indexof Start Start_5 StartInt_2) (str.to_int Start_2)))
   (StartBool Bool (false (and StartBool_1 StartBool_2) (str.prefixof Start_6 Start_2) (= Start_6 Start_3) (= StartInt_2 StartInt_1)))
   (StartInt_8 Int (1 (str.len Start_6) (str.indexof Start_12 Start_5 StartInt_1) (str.to_int Start_11)))
   (StartInt_7 Int (1 (str.len Start_3) (str.to_int Start_1)))
   (StartInt_6 Int (1))
   (Start_9 String ("a" "b" y "1" "" (str.++ Start_9 Start_1) (str.replace Start_9 Start_8 Start_1) (str.from_int StartInt_6)))
   (Start_10 String ("0" (str.at Start_9 StartInt_5) (str.replace Start_7 Start_7 Start_6)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_6 Start_6 StartInt_1)))
   (StartBool_4 Bool (true (not StartBool_5) (str.< Start_5 Start_9) (str.<= Start_9 Start_4) (str.prefixof Start_7 Start_4) (str.suffixof Start_10 Start_4) (<= StartInt_1 StartInt_5)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool_2 StartBool_4) (str.< Start_7 Start_8) (str.prefixof Start_1 Start_8) (str.suffixof Start_4 Start_6) (str.contains Start_4 Start_2) (= Start Start) (= StartInt_2 StartInt_2) (<= StartInt StartInt_1)))
   (Start_8 String ("0" (str.++ Start_5 Start_7) (str.replace Start Start_2 Start_3) (str.from_int StartInt_4)))
   (StartBool_3 Bool (false true (not StartBool_4) (and StartBool_3 StartBool) (str.< Start_11 Start_9) (str.suffixof Start_5 Start_9) (str.contains Start_2 Start_5) (= Start_2 Start_4) (= StartInt_8 StartInt)))
   (StartInt_3 Int (1 0 (str.len Start_6) (str.indexof Start_8 Start_4 StartInt_1) (str.to_int Start_6)))
   (Start_12 String ("a" (str.++ Start_12 Start_11) (str.substr Start_7 StartInt_7 StartInt_5) (str.replace Start_10 Start_10 Start_12)))
   (Start_2 String ("1" (str.++ Start_1 Start_1) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_4 Start_1 Start_1)))
   (Start_4 String (y "" x (str.++ Start_2 Start) (str.at Start_5 StartInt_2) (str.substr Start_4 StartInt StartInt_2)))
   (StartInt_4 Int (1 0 (str.indexof Start_1 Start_7 StartInt_2) (str.to_int Start_2)))
   (StartBool_1 Bool (false true (not StartBool) (str.<= Start_3 Start_6) (str.contains Start Start) (= Start_5 Start_4)))
   (StartBool_5 Bool (false true (not StartBool_4) (str.< Start_1 Start_11) (str.<= Start_7 Start) (str.prefixof Start_12 Start_4)))
   (Start_3 String ("b" x (ite StartBool Start_5 Start)))
   (StartInt_2 Int (0))
   (Start_5 String ("" "0" "a" (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start_5)))
   (StartInt_1 Int (1 (str.indexof Start_3 Start_5 StartInt_1)))
   (Start_1 String ("a" y (str.from_int StartInt_1)))
   (Start_6 String (x "0" (str.++ Start Start_2) (str.substr Start_2 StartInt_2 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_5)))
   (Start_11 String ("0" x "" "1" (str.++ Start_7 Start_2) (str.at Start_5 StartInt_1) (str.substr Start_2 StartInt_8 StartInt_1) (str.from_int StartInt_8) (ite StartBool_3 Start_2 Start_2)))
   (Start_7 String ("" "a" x (str.++ Start_1 Start_6) (str.at Start_4 StartInt) (str.substr Start_7 StartInt_3 StartInt_4) (str.from_int StartInt_4) (ite StartBool Start_7 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "a" (str.at x 1))))

(check-synth)
