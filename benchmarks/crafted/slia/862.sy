(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartInt_8 Int) (StartInt_3 Int) (StartInt_7 Int) (StartInt_5 Int) (StartBool_4 Bool) (StartBool_2 Bool) (Start_11 String) (StartInt_2 Int) (Start_1 String) (Start_2 String) (Start_5 String) (StartBool_3 Bool) (Start_9 String) (StartInt_4 Int) (StartBool_5 Bool) (Start_4 String) (Start_6 String) (Start_12 String) (Start_10 String) (StartInt_6 Int) (Start_3 String) (Start_7 String) (Start_8 String) (StartBool_1 Bool))
  ((Start String ("b" (str.++ Start Start_1)))
   (StartInt Int (1 0 (str.len Start_7) (str.indexof Start_10 Start_11 StartInt_3)))
   (StartBool Bool (false true (str.< Start_1 Start_8) (str.contains Start_3 Start_11) (= Start_4 Start_11) (<= StartInt_7 StartInt_7)))
   (StartInt_1 Int (1 0 (str.to_int Start_9)))
   (StartInt_8 Int (1 0 (str.len Start_5) (str.to_int Start_2)))
   (StartInt_3 Int (0 1 (str.len Start_10)))
   (StartInt_7 Int (1 (str.len Start_6)))
   (StartInt_5 Int (1 0 (str.len Start_11) (str.indexof Start_2 Start_12 StartInt_5) (str.to_int Start_6)))
   (StartBool_4 Bool (true false (not StartBool_4) (str.< Start_6 Start_2) (= StartInt_4 StartInt_5)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_3) (<= StartInt_4 StartInt_6)))
   (Start_11 String ("" "0" "a" (str.at Start_7 StartInt_2) (str.substr Start_3 StartInt_7 StartInt_4) (str.from_int StartInt_6)))
   (StartInt_2 Int (1 0 (str.len Start_12) (str.indexof Start_8 Start StartInt_8)))
   (Start_1 String ("a" "" y "b" (str.at Start_1 StartInt_1) (str.replace Start_2 Start_2 Start_2) (str.from_int StartInt)))
   (Start_2 String (x "" (str.substr Start_1 StartInt StartInt_1) (str.replace Start_1 Start Start_3) (str.from_int StartInt) (ite StartBool Start_3 Start_3)))
   (Start_5 String ("1" "0" (str.at Start_2 StartInt_4) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_1 Start_3 Start_6) (str.from_int StartInt_1)))
   (StartBool_3 Bool (true (not StartBool_2) (and StartBool_4 StartBool_5) (str.< Start_9 Start_1) (str.prefixof Start_4 Start_3) (str.suffixof Start_9 Start_10) (str.contains Start_9 Start) (= Start_4 Start_6) (= StartInt_6 StartInt_1)))
   (Start_9 String (x "1" (str.replace Start_9 Start_4 Start_3) (str.from_int StartInt_6)))
   (StartInt_4 Int (0 1 (str.indexof Start_4 Start_4 StartInt_3)))
   (StartBool_5 Bool (false true (not StartBool) (and StartBool_2 StartBool_5) (str.< Start_9 Start_5) (str.<= Start_9 Start_10) (str.prefixof Start_6 Start_9) (str.suffixof Start Start_1) (str.contains Start_2 Start_5)))
   (Start_4 String ("" (str.++ Start_5 Start_4) (str.at Start_2 StartInt_2) (str.from_int StartInt_2)))
   (Start_6 String ("" (str.++ Start_6 Start_7) (str.at Start_4 StartInt_4) (str.substr Start_2 StartInt_2 StartInt_4)))
   (Start_12 String ("0" "" "b" (str.++ Start_1 Start) (ite StartBool_4 Start_1 Start_11)))
   (Start_10 String ("b" x "0" y (str.at Start_6 StartInt_4) (str.substr Start StartInt_3 StartInt_5) (str.replace Start_3 Start_7 Start_5) (ite StartBool Start_3 Start_6)))
   (StartInt_6 Int (1 (str.len Start_1)))
   (Start_3 String ("" "b" (str.substr Start_3 StartInt_2 StartInt_3) (str.from_int StartInt_4)))
   (Start_7 String (x (str.substr Start_4 StartInt_5 StartInt) (str.from_int StartInt_6) (ite StartBool_1 Start_8 Start_6)))
   (Start_8 String ("" (str.++ Start_9 Start_4) (str.substr Start_1 StartInt StartInt_2)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (str.contains Start_7 Start_10) (= Start_3 Start_2) (= StartInt_4 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.from_int (str.indexof "0" y 1)) 1)))

(check-synth)
