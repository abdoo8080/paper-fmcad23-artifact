(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_2 String) (Start_3 String) (StartBool_2 Bool) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_1 String) (StartInt_5 Int) (StartInt_6 Int) (Start_4 String) (StartBool_4 Bool) (Start_5 String) (StartBool_3 Bool) (StartInt_2 Int))
  ((Start String ("0" y "1" (str.at Start StartInt_1) (str.substr Start StartInt StartInt) (str.replace Start_1 Start_2 Start_3) (str.from_int StartInt) (ite StartBool Start_1 Start_2)))
   (StartInt Int (1 (str.indexof Start_5 Start_2 StartInt)))
   (StartBool Bool (false (str.prefixof Start Start_2) (str.suffixof Start_5 Start_1) (= Start Start_2) (<= StartInt_5 StartInt_6)))
   (StartInt_1 Int (1 0 (str.indexof Start_2 Start_3 StartInt_1)))
   (Start_2 String (y (str.from_int StartInt_1)))
   (Start_3 String (y (str.replace Start Start_1 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartBool_2 Bool (true (and StartBool_4 StartBool_2) (str.<= Start_4 Start_2) (str.suffixof Start_4 Start_5) (= Start_1 Start_1) (<= StartInt_1 StartInt_6)))
   (StartInt_4 Int (0 1))
   (StartBool_1 Bool (false (and StartBool_1 StartBool_2) (str.< Start_3 Start) (str.<= Start_1 Start_1) (str.suffixof Start_1 Start) (str.contains Start Start_1) (= StartInt StartInt_2) (<= StartInt_3 StartInt)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_4 StartInt_4)))
   (Start_1 String ("" (str.at Start_1 StartInt_2) (str.substr Start StartInt_4 StartInt_1) (str.replace Start_2 Start_1 Start_5)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_3 Start_1 StartInt_4) (str.to_int Start_3)))
   (StartInt_6 Int (0 1))
   (Start_4 String (x (str.at Start StartInt_2) (str.substr Start_3 StartInt_4 StartInt_2) (str.replace Start Start_3 Start_4) (str.from_int StartInt_1) (ite StartBool_3 Start_1 Start_1)))
   (StartBool_4 Bool (false true (not StartBool_2)))
   (Start_5 String ("a" x (str.at Start_5 StartInt) (str.replace Start Start_2 Start_4) (str.from_int StartInt_5)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.< Start_2 Start_4) (= StartInt_3 StartInt_5)))
   (StartInt_2 Int (0 1 (str.indexof Start_5 Start_1 StartInt_4) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.at "0" (str.to_int x))))))

(check-synth)
