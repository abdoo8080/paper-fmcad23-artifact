(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_7 String) (StartInt_6 Int) (Start_9 String) (StartInt_5 Int) (StartInt_4 Int) (Start_1 String) (Start_2 String) (Start_3 String) (StartInt_2 Int) (StartBool_1 Bool) (StartInt_3 Int) (Start_4 String) (StartInt_1 Int) (StartInt_7 Int) (Start_10 String) (Start_5 String) (Start_6 String) (Start_8 String))
  ((Start String ("a" "" "1" "b" x (str.replace Start_1 Start Start) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.len Start_5)))
   (StartBool Bool (true (str.< Start_1 Start_6) (str.prefixof Start_6 Start_9) (str.suffixof Start_3 Start_7) (<= StartInt_7 StartInt_4)))
   (StartInt_8 Int (1 0))
   (Start_7 String (y "" x (str.substr Start_1 StartInt_3 StartInt) (str.from_int StartInt_4)))
   (StartInt_6 Int (1 (str.len Start_4) (str.indexof Start_10 Start StartInt)))
   (Start_9 String ("b" (str.substr Start_7 StartInt StartInt_6)))
   (StartInt_5 Int (0 1 (str.len Start_5) (str.indexof Start Start_5 StartInt_4)))
   (StartInt_4 Int (1 (str.len Start_10) (str.to_int Start_8)))
   (Start_1 String ("b" "0" (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start) (str.from_int StartInt) (ite StartBool Start_1 Start_2)))
   (Start_2 String ("a" (str.at Start_2 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start Start_3)))
   (Start_3 String ("" "0" (str.at Start_1 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start Start_2 Start_1)))
   (StartInt_2 Int (1 0))
   (StartBool_1 Bool (true (str.<= Start_1 Start) (str.prefixof Start_1 Start) (str.suffixof Start_4 Start) (= Start_2 Start) (= StartInt_2 StartInt_1)))
   (StartInt_3 Int (0 1))
   (Start_4 String ("a" y (str.++ Start_3 Start_2) (str.substr Start_4 StartInt_2 StartInt) (str.replace Start_2 Start_2 Start)))
   (StartInt_1 Int (0 1 (str.indexof Start_3 Start_1 StartInt_1)))
   (StartInt_7 Int (0 (str.len Start_6) (str.indexof Start_9 Start_10 StartInt_8)))
   (Start_10 String ("a" (str.at Start StartInt_2) (str.substr Start_4 StartInt_5 StartInt_5)))
   (Start_5 String (y (str.at Start_6 StartInt_3)))
   (Start_6 String (x "b" (str.++ Start_6 Start_4) (str.substr Start_7 StartInt StartInt_2) (str.replace Start_1 Start_8 Start_4)))
   (Start_8 String ("b" (str.at Start_9 StartInt_2) (str.replace Start_9 Start_2 Start_9) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace x "" "1") y "")))

(check-synth)
