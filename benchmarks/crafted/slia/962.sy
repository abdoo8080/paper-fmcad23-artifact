(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (Start_13 String) (StartInt_7 Int) (Start_9 String) (Start_7 String) (Start_6 String) (StartInt_1 Int) (Start_10 String) (Start_2 String) (Start_4 String) (StartInt_6 Int) (StartBool_3 Bool) (StartBool_2 Bool) (StartInt_4 Int) (Start_1 String) (StartInt_2 Int) (Start_3 String) (StartBool_5 Bool) (Start_12 String) (Start_5 String) (StartInt_5 Int) (Start_11 String) (Start_8 String) (StartBool_1 Bool) (StartInt_3 Int) (StartBool_4 Bool))
  ((Start String ("" x (str.++ Start_1 Start_1) (str.at Start_1 StartInt_1) (str.replace Start_1 Start_2 Start_2) (ite StartBool_1 Start_2 Start)))
   (StartInt Int (1 (str.len Start_12) (str.indexof Start_5 Start_2 StartInt) (str.to_int Start_11)))
   (StartBool Bool (true false (str.< Start_11 Start_6) (str.suffixof Start_13 Start_8)))
   (StartBool_6 Bool (false true (not StartBool_4) (and StartBool_6 StartBool) (str.<= Start_2 Start_10) (str.prefixof Start_6 Start_1) (str.contains Start_9 Start_3)))
   (Start_13 String ("0" y (str.++ Start_8 Start_5) (str.replace Start_13 Start_13 Start_9) (str.from_int StartInt) (ite StartBool_3 Start Start_12)))
   (StartInt_7 Int (0 (str.len Start_12) (str.indexof Start_8 Start_4 StartInt)))
   (Start_9 String (y "1" (str.at Start StartInt_1) (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start Start_8 Start_10) (ite StartBool Start_11 Start_1)))
   (Start_7 String ("a" (str.from_int StartInt_4) (ite StartBool_6 Start_4 Start_8)))
   (Start_6 String ("1" "" "a" "b" (str.at Start StartInt_1) (str.substr Start_6 StartInt_4 StartInt_1) (str.from_int StartInt_6) (ite StartBool_4 Start Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.indexof Start_3 Start_4 StartInt_6) (str.to_int Start_5)))
   (Start_10 String (y "0" (str.++ Start Start_2) (str.at Start_1 StartInt) (str.substr Start_4 StartInt StartInt)))
   (Start_2 String ("b" "a" x "0" "" "1" y (str.++ Start_5 Start) (str.at Start StartInt_1) (str.replace Start_3 Start_2 Start_3) (ite StartBool_3 Start_2 Start_2)))
   (Start_4 String ("a"))
   (StartInt_6 Int (1 (str.indexof Start_6 Start_3 StartInt_4) (str.to_int Start_2)))
   (StartBool_3 Bool (true false (not StartBool_1) (str.contains Start_2 Start) (= StartInt_1 StartInt)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_3 StartBool_4) (str.< Start_1 Start_2) (str.suffixof Start_2 Start) (str.contains Start_3 Start_4) (= Start_2 Start_4) (= StartInt_2 StartInt_2) (<= StartInt_2 StartInt)))
   (StartInt_4 Int (1 (str.indexof Start_4 Start StartInt_2)))
   (Start_1 String ("1" "" "0" (str.replace Start_7 Start_5 Start_5) (str.from_int StartInt_5) (ite StartBool_2 Start_6 Start_5)))
   (StartInt_2 Int (1 (str.len Start_3)))
   (Start_3 String ("" (str.++ Start_2 Start_1) (str.substr Start StartInt StartInt_3) (str.replace Start_2 Start_5 Start_4) (ite StartBool_5 Start_2 Start)))
   (StartBool_5 Bool (true (not StartBool_2) (and StartBool_3 StartBool_1) (str.<= Start_1 Start_1) (str.prefixof Start_3 Start_3) (str.suffixof Start Start_4) (str.contains Start_5 Start_4) (<= StartInt StartInt_2)))
   (Start_12 String ("0" "" (str.substr Start StartInt StartInt_7) (str.from_int StartInt)))
   (Start_5 String ("a" (str.++ Start Start_2) (str.substr Start_5 StartInt StartInt_4) (str.from_int StartInt_4)))
   (StartInt_5 Int (0 1 (str.len Start_5) (str.to_int Start)))
   (Start_11 String ("0" y (str.replace Start_12 Start_12 Start) (str.from_int StartInt_1)))
   (Start_8 String ("a" (str.++ Start_6 Start_8) (str.replace Start_4 Start_3 Start_6) (ite StartBool_2 Start_3 Start_9)))
   (StartBool_1 Bool (false (and StartBool_2 StartBool_3) (str.< Start_2 Start_1) (str.<= Start Start) (= Start Start_2) (<= StartInt StartInt_1)))
   (StartInt_3 Int (0 1 (str.indexof Start_4 Start_2 StartInt_5)))
   (StartBool_4 Bool (true false (str.prefixof Start_2 Start_4) (= Start_2 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace x "1" y) "0")))

(check-synth)
