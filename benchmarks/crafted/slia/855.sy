(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_3 Int) (Start_4 String) (Start_1 String) (Start_3 String) (StartInt_1 Int) (Start_2 String))
  ((Start String (y "a" (str.++ Start_1 Start) (str.replace Start Start Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_2)))
   (StartInt Int (1 0 (str.indexof Start_4 Start_1 StartInt_1)))
   (StartBool Bool (false (str.< Start_3 Start) (str.<= Start_2 Start) (str.prefixof Start_2 Start) (str.suffixof Start_2 Start_3) (= StartInt StartInt_1)))
   (StartBool_2 Bool (false (str.suffixof Start_3 Start_1) (= Start_3 Start_1)))
   (StartBool_1 Bool (true (str.<= Start_2 Start_1) (= Start_1 Start_3)))
   (StartInt_2 Int (1 (str.len Start_1) (str.to_int Start_2)))
   (StartInt_3 Int (1 0))
   (Start_4 String ("b" (str.++ Start Start_2) (str.at Start_3 StartInt_3)))
   (Start_1 String ("" "a" (str.at Start StartInt_3) (str.substr Start_3 StartInt_2 StartInt_2) (str.from_int StartInt_1) (ite StartBool_2 Start Start_3)))
   (Start_3 String ("b" "a" (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt StartInt_2) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_1 Int (1 (str.len Start_3) (str.to_int Start_2)))
   (Start_2 String ("b" (str.++ Start Start_2) (str.at Start_2 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "0" (str.at "0" (str.to_int y)))))

(check-synth)
