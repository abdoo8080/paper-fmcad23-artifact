(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartInt_6 Int) (Start_7 String) (Start_6 String) (StartInt_5 Int) (StartInt_1 Int) (Start_2 String) (Start_3 String) (StartInt_2 Int) (StartInt_3 Int) (Start_5 String) (Start_1 String) (StartBool_1 Bool) (Start_4 String) (StartInt_4 Int))
  ((Start String ("" y (str.at Start StartInt_1)))
   (StartInt Int (0 1))
   (StartBool Bool (false true (not StartBool) (and StartBool StartBool_1) (str.<= Start Start_6) (str.suffixof Start_4 Start_3) (= StartInt_2 StartInt_1) (<= StartInt_2 StartInt_4)))
   (StartInt_7 Int (1 (str.indexof Start_6 Start StartInt_2) (str.to_int Start_2)))
   (StartInt_6 Int (1 (str.len Start_5)))
   (Start_7 String (x "b" (str.at Start_3 StartInt_7) (str.replace Start_1 Start_2 Start_3)))
   (Start_6 String ("0" (str.++ Start Start_4) (str.at Start_1 StartInt_3) (str.substr Start_2 StartInt_5 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start Start_2)))
   (StartInt_5 Int (1 (str.indexof Start_6 Start StartInt_6) (str.to_int Start_2)))
   (StartInt_1 Int (0 (str.indexof Start_1 Start_2 StartInt_2)))
   (Start_2 String (y (str.at Start_1 StartInt_1) (str.replace Start Start_3 Start) (str.from_int StartInt_3)))
   (Start_3 String ("b" "0" "" "1" x (str.++ Start_5 Start) (str.from_int StartInt)))
   (StartInt_2 Int (0 (str.indexof Start_1 Start StartInt_1)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start Start_4 StartInt_3) (str.to_int Start_1)))
   (Start_5 String ("0" x (str.at Start_1 StartInt_3) (ite StartBool Start_2 Start_2)))
   (Start_1 String ("a" (str.substr Start StartInt StartInt_1) (str.replace Start Start_1 Start_4)))
   (StartBool_1 Bool (true (not StartBool) (str.<= Start_7 Start) (str.suffixof Start_7 Start_3) (<= StartInt_1 StartInt_7)))
   (Start_4 String (y "a" "b" (str.from_int StartInt_2)))
   (StartInt_4 Int (1 0 (str.indexof Start_6 Start_3 StartInt_5) (str.to_int Start_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ x (str.replace y "" x))))

(check-synth)
