(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartBool_5 Bool) (StartBool_3 Bool) (StartInt_1 Int) (Start_2 String) (Start_5 String) (Start_12 String) (StartInt_6 Int) (Start_11 String) (StartInt_5 Int) (Start_4 String) (Start_1 String) (Start_3 String) (StartBool_1 Bool) (Start_8 String) (StartBool_4 Bool) (StartBool_2 Bool) (Start_7 String) (StartInt_3 Int) (StartInt_4 Int) (Start_6 String) (Start_10 String) (StartInt_2 Int) (Start_9 String))
  ((Start String (y (str.++ Start Start) (str.substr Start StartInt_1 StartInt) (str.from_int StartInt) (ite StartBool Start Start_1)))
   (StartInt Int (1 0 (str.to_int Start_9)))
   (StartBool Bool (true (not StartBool_2) (and StartBool_3 StartBool) (str.<= Start_6 Start_1) (str.suffixof Start_11 Start_10) (<= StartInt_6 StartInt_3)))
   (StartInt_7 Int (0 1 (str.len Start_4) (str.indexof Start_11 Start_6 StartInt_7)))
   (StartBool_5 Bool (false true (not StartBool_5) (= Start_1 Start_3) (= StartInt_2 StartInt_1) (<= StartInt_1 StartInt_1)))
   (StartBool_3 Bool (true false (not StartBool_4) (and StartBool_5 StartBool_3) (str.<= Start_4 Start_10) (str.suffixof Start_3 Start_2)))
   (StartInt_1 Int (1 0 (str.indexof Start_10 Start_9 StartInt_3) (str.to_int Start_3)))
   (Start_2 String ("0" (str.replace Start_3 Start_1 Start_5) (str.from_int StartInt_4) (ite StartBool_2 Start_3 Start_9)))
   (Start_5 String ("" "a" y (str.replace Start_11 Start_4 Start)))
   (Start_12 String ("1" (str.at Start_11 StartInt_6) (str.replace Start_11 Start_12 Start_5) (str.from_int StartInt_5) (ite StartBool_2 Start_10 Start)))
   (StartInt_6 Int (1))
   (Start_11 String ("0" "1" "" (str.++ Start_11 Start_7) (str.substr Start_5 StartInt_3 StartInt_2) (str.replace Start_6 Start_9 Start_4) (ite StartBool Start_8 Start_12)))
   (StartInt_5 Int (1 (str.indexof Start_4 Start_11 StartInt_6) (str.to_int Start_11)))
   (Start_4 String ("" (str.++ Start Start_5) (str.at Start_6 StartInt_2) (str.substr Start_7 StartInt_2 StartInt_2) (ite StartBool_1 Start Start)))
   (Start_1 String ("b" (str.++ Start Start_1) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_3 Start_3)))
   (Start_3 String ("" "0" (str.replace Start_2 Start_4 Start_1) (ite StartBool Start_1 Start)))
   (StartBool_1 Bool (true false (str.<= Start_5 Start_1) (= Start_8 Start_8) (<= StartInt StartInt)))
   (Start_8 String ("1" y x (str.from_int StartInt) (ite StartBool_2 Start_5 Start_5)))
   (StartBool_4 Bool (true false (not StartBool_5) (and StartBool_4 StartBool_5) (str.< Start_11 Start_9) (str.prefixof Start_8 Start_4) (str.contains Start_5 Start_7) (= StartInt_7 StartInt_5) (<= StartInt_3 StartInt_1)))
   (StartBool_2 Bool (true (str.< Start_5 Start_1) (str.prefixof Start_5 Start_7)))
   (Start_7 String (y (str.++ Start_2 Start_4) (str.at Start_4 StartInt_3) (str.substr Start_4 StartInt StartInt_1) (str.replace Start_5 Start_4 Start_6)))
   (StartInt_3 Int (0 (str.indexof Start Start_9 StartInt_4) (str.to_int Start_1)))
   (StartInt_4 Int (1 0 (str.indexof Start_10 Start_1 StartInt) (str.to_int Start_4)))
   (Start_6 String ("a" (str.at Start StartInt_5) (str.substr Start_9 StartInt_3 StartInt_3) (str.replace Start_8 Start Start_9) (str.from_int StartInt_2)))
   (Start_10 String ("" (str.replace Start_2 Start_1 Start_5) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 0 (str.indexof Start_4 Start_7 StartInt_1)))
   (Start_9 String (y (str.substr Start StartInt_4 StartInt_4) (str.replace Start_10 Start_2 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "a" x) "" (str.replace "1" "" "b"))))

(check-synth)
