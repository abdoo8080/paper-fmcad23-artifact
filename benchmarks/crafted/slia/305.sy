(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartBool_3 Bool) (StartBool_4 Bool) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_9 String) (StartInt_5 Int) (StartInt_8 Int) (StartInt_3 Int) (Start_6 String) (Start_2 String) (Start_7 String) (Start_4 String) (StartBool_2 Bool) (Start_12 String) (StartInt_6 Int) (Start_8 String) (StartInt_7 Int) (StartBool_5 Bool) (Start_10 String) (Start_3 String) (StartInt_1 Int) (Start_11 String) (Start_5 String) (Start_14 String) (StartInt_9 Int) (Start_1 String))
  ((Start String ("" "0" (str.++ Start_1 Start_1) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt) (ite StartBool Start_4 Start_4)))
   (StartInt Int (0 (str.to_int Start_4)))
   (StartBool Bool (true false (str.< Start_9 Start_8) (str.<= Start_1 Start_8) (str.prefixof Start_10 Start_3) (str.contains Start_13 Start_3) (= Start_5 Start_1)))
   (Start_13 String (y (str.++ Start_13 Start_3) (str.substr Start_5 StartInt_1 StartInt_2) (str.from_int StartInt_2)))
   (StartBool_3 Bool (true (not StartBool_1) (str.< Start_1 Start_7) (str.prefixof Start Start_7) (str.contains Start_1 Start_4) (= Start_6 Start_4) (= StartInt_6 StartInt_6)))
   (StartBool_4 Bool (true false (not StartBool_4) (str.suffixof Start_10 Start_8) (= Start_4 Start) (= StartInt_3 StartInt_7)))
   (StartInt_4 Int (0 (str.len Start_4) (str.indexof Start_1 Start_11 StartInt_7)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool_3) (str.<= Start_5 Start_5) (str.prefixof Start_9 Start_5) (str.suffixof Start_3 Start_8) (str.contains Start_3 Start_1) (= StartInt StartInt_5)))
   (StartInt_2 Int (0 (str.len Start_7) (str.indexof Start_1 Start_4 StartInt_1) (str.to_int Start_4)))
   (Start_9 String (y (str.++ Start_6 Start_1) (str.from_int StartInt_1)))
   (StartInt_5 Int (0 1 (str.indexof Start_1 Start_1 StartInt_1) (str.to_int Start)))
   (StartInt_8 Int (0 (str.indexof Start_10 Start StartInt_2)))
   (StartInt_3 Int (0 1 (str.len Start_6) (str.to_int Start_7)))
   (Start_6 String (x "" (str.++ Start_5 Start_1) (str.substr Start_7 StartInt_1 StartInt_2) (str.replace Start_8 Start_1 Start_1) (str.from_int StartInt_3) (ite StartBool Start_9 Start_4)))
   (Start_2 String ("" "b" (str.++ Start_14 Start_13) (str.at Start_12 StartInt_7)))
   (Start_7 String ("b" (str.++ Start_9 Start_7) (str.substr Start_9 StartInt StartInt_4) (str.replace Start_7 Start_6 Start_1) (ite StartBool_1 Start_5 Start_1)))
   (Start_4 String (y "0" "b" (str.at Start_5 StartInt) (str.substr Start_6 StartInt StartInt_1) (ite StartBool Start_6 Start_3)))
   (StartBool_2 Bool (false true (and StartBool_4 StartBool_3) (str.< Start_6 Start_7) (str.suffixof Start_7 Start_2) (str.contains Start_9 Start_9) (= StartInt StartInt_5)))
   (Start_12 String (y (str.++ Start_5 Start_13) (str.at Start_9 StartInt_2) (str.replace Start_13 Start_4 Start_13)))
   (StartInt_6 Int (0 (str.len Start) (str.to_int Start_9)))
   (Start_8 String ("1" (str.++ Start_2 Start_4) (str.at Start_7 StartInt) (str.from_int StartInt)))
   (StartInt_7 Int (0 1 (str.len Start_10) (str.indexof Start_9 Start_8 StartInt_4) (str.to_int Start_3)))
   (StartBool_5 Bool (true false (not StartBool_3) (str.< Start_4 Start_14) (str.<= Start_5 Start_2) (str.prefixof Start_11 Start_2)))
   (Start_10 String ("" "a" (str.++ Start_2 Start_11) (str.at Start_2 StartInt) (str.replace Start_7 Start_6 Start_12) (str.from_int StartInt_4) (ite StartBool_4 Start_2 Start_2)))
   (Start_3 String ("" "a" "1" (str.++ Start_6 Start_13) (str.substr Start_8 StartInt_5 StartInt_2) (ite StartBool_5 Start_9 Start_1)))
   (StartInt_1 Int (0 (str.len Start_6)))
   (Start_11 String ("1" "" (str.++ Start_11 Start_10) (ite StartBool_2 Start_3 Start_8)))
   (Start_5 String ("0" (str.at Start_12 StartInt_7) (str.substr Start_3 StartInt StartInt_8) (ite StartBool_2 Start Start_13)))
   (Start_14 String (x (str.++ Start_14 Start_8) (str.at Start_8 StartInt_2) (str.substr Start_5 StartInt_9 StartInt) (str.replace Start_8 Start_7 Start_14) (str.from_int StartInt_7)))
   (StartInt_9 Int (1))
   (Start_1 String ("" (str.substr Start_4 StartInt_2 StartInt_7) (str.replace Start_10 Start_12 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x y (str.++ "1" "0"))))

(check-synth)
