(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (Start_15 String) (StartBool_4 Bool) (StartBool_2 Bool) (StartInt_4 Int) (Start_5 String) (Start_13 String) (Start_11 String) (Start_7 String) (Start_10 String) (Start_8 String) (Start_3 String) (StartInt_6 Int) (Start_12 String) (StartInt_2 Int) (Start_2 String) (StartInt_1 Int) (Start_14 String) (StartInt_3 Int) (Start_9 String) (StartBool_5 Bool) (Start_4 String) (Start_6 String) (StartBool_1 Bool) (Start_1 String) (StartInt_5 Int))
  ((Start String ("a" (str.substr Start StartInt StartInt) (ite StartBool Start Start)))
   (StartInt Int (0 (str.indexof Start_1 Start StartInt) (str.to_int Start_2)))
   (StartBool Bool (true false (and StartBool_2 StartBool_2) (str.< Start Start_8) (str.<= Start_3 Start_2) (str.suffixof Start_1 Start_8) (str.contains Start_3 Start) (= StartInt_5 StartInt_1)))
   (StartBool_3 Bool (true (not StartBool_5) (str.<= Start_9 Start_3) (str.prefixof Start_10 Start_9) (str.suffixof Start_13 Start_2) (= Start Start_3)))
   (Start_15 String ("" "a" (str.++ Start_3 Start_5) (str.at Start_13 StartInt_3) (str.substr Start_9 StartInt_6 StartInt_4) (str.from_int StartInt_5) (ite StartBool_5 Start_5 Start_3)))
   (StartBool_4 Bool (false (not StartBool_2) (and StartBool_1 StartBool_1) (str.< Start_8 Start_11) (str.prefixof Start_8 Start_4) (str.contains Start_1 Start_8) (= StartInt_4 StartInt_2)))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool_3 StartBool_4) (str.<= Start_10 Start_10) (str.prefixof Start_5 Start_1) (str.suffixof Start Start) (str.contains Start_9 Start_2)))
   (StartInt_4 Int (1 (str.to_int Start_2)))
   (Start_5 String (x y (str.replace Start_9 Start_6 Start_6) (str.from_int StartInt_6)))
   (Start_13 String ("b" "a" (str.++ Start_1 Start_12) (str.from_int StartInt_5) (ite StartBool_5 Start_5 Start_10)))
   (Start_11 String ("b" "1" x (str.at Start_11 StartInt_5) (ite StartBool Start_12 Start_2)))
   (Start_7 String ("b" (str.at Start StartInt_4) (str.substr Start_8 StartInt_2 StartInt_4) (ite StartBool_1 Start_8 Start_11)))
   (Start_10 String ("0" x "b" "a" "" (str.at Start StartInt_4) (str.from_int StartInt_2)))
   (Start_8 String (x "a" "b" "" y "0" (str.++ Start_2 Start) (str.at Start_10 StartInt_2) (str.from_int StartInt_5) (ite StartBool Start_5 Start)))
   (Start_3 String ("a" (str.++ Start_2 Start_3) (str.substr Start_4 StartInt_1 StartInt_2)))
   (StartInt_6 Int (0 (str.len Start_3)))
   (Start_12 String (x "a" (str.++ Start_5 Start_6) (str.substr Start_7 StartInt_2 StartInt)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.to_int Start_2)))
   (Start_2 String ("a"))
   (StartInt_1 Int (0 (str.indexof Start_3 Start_4 StartInt_3) (str.to_int Start_4)))
   (Start_14 String ("b" x (str.++ Start_5 Start_8) (str.at Start_14 StartInt_4) (str.from_int StartInt_4) (ite StartBool_5 Start_9 Start_11)))
   (StartInt_3 Int (0 1))
   (Start_9 String ("a" (str.++ Start_9 Start_7) (str.at Start_3 StartInt_2) (str.from_int StartInt_4)))
   (StartBool_5 Bool (false (str.< Start_14 Start_1) (str.<= Start_1 Start_15) (= Start_6 Start_8)))
   (Start_4 String (x (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_4) (str.replace Start_5 Start_1 Start_6)))
   (Start_6 String (x "1" "a" (str.replace Start_5 Start_2 Start_3) (ite StartBool_1 Start_2 Start_4)))
   (StartBool_1 Bool (true (not StartBool) (and StartBool_1 StartBool) (str.< Start_7 Start_8) (str.prefixof Start_2 Start_8) (str.suffixof Start_2 Start_9) (str.contains Start_6 Start_5) (<= StartInt_5 StartInt_5)))
   (Start_1 String ("0" "" "b" y (str.++ Start_1 Start_3) (str.replace Start_2 Start Start_2)))
   (StartInt_5 Int (1 0 (str.indexof Start_4 Start_8 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "1" y) "b" y)))

(check-synth)
