(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartInt_9 Int) (StartInt_5 Int) (Start_6 String) (StartBool_1 Bool) (Start_1 String) (Start_8 String) (Start_5 String) (Start_4 String) (StartBool_4 Bool) (Start_2 String) (StartInt_3 Int) (Start_11 String) (StartBool_6 Bool) (Start_9 String) (StartInt_10 Int) (StartInt_1 Int) (StartInt_6 Int) (Start_10 String) (StartBool_3 Bool) (StartInt_4 Int) (StartBool_5 Bool) (Start_7 String) (StartInt_2 Int) (Start_12 String) (Start_14 String) (StartBool_2 Bool) (Start_3 String) (Start_13 String) (StartInt_7 Int) (StartInt_8 Int))
  ((Start String (x "1" "" (str.at Start_1 StartInt_1)))
   (StartInt Int (1 (str.indexof Start_7 Start_4 StartInt_8)))
   (StartBool Bool (true (not StartBool_2) (str.suffixof Start_8 Start_12) (= Start Start_3) (<= StartInt_10 StartInt_1)))
   (Start_15 String ("1" "a" y (str.substr Start_3 StartInt_3 StartInt_5) (ite StartBool_4 Start_3 Start_10)))
   (StartInt_9 Int (0 1 (str.len Start_10) (str.to_int Start_2)))
   (StartInt_5 Int (1 (str.len Start_5) (str.indexof Start_5 Start_7 StartInt_7)))
   (Start_6 String (x (str.at Start_7 StartInt_5) (str.replace Start_1 Start Start_8) (ite StartBool_2 Start Start_3)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.<= Start Start_3) (str.suffixof Start_2 Start_4) (<= StartInt_4 StartInt_4)))
   (Start_1 String ("0" (str.++ Start_7 Start_10) (str.substr Start_2 StartInt_1 StartInt_3) (str.replace Start_8 Start_14 Start_1)))
   (Start_8 String (y (str.at Start_5 StartInt_2) (str.substr Start_9 StartInt StartInt_6)))
   (Start_5 String ("1" y "b" "0" (str.replace Start_6 Start_1 Start_4) (str.from_int StartInt_4) (ite StartBool_2 Start Start_3)))
   (Start_4 String (x (str.at Start_5 StartInt_1) (str.substr Start StartInt_4 StartInt_2) (str.replace Start_1 Start Start_5)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_3 StartBool_6) (str.<= Start_10 Start_12) (str.prefixof Start_8 Start_10) (str.suffixof Start_14 Start_4) (str.contains Start_3 Start_12)))
   (Start_2 String ("a" (str.at Start_1 StartInt) (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start_3 Start_1 Start_3) (ite StartBool_1 Start_2 Start_3)))
   (StartInt_3 Int (1 0 (str.indexof Start_5 Start_5 StartInt_2) (str.to_int Start_6)))
   (Start_11 String ("a" (str.++ Start_4 Start_7) (ite StartBool_1 Start_12 Start_7)))
   (StartBool_6 Bool (true false (str.<= Start_5 Start_4) (str.contains Start_13 Start) (= Start_14 Start_8) (= StartInt_5 StartInt_3)))
   (Start_9 String (x (str.++ Start Start_1) (str.at Start_4 StartInt_2) (str.substr Start_4 StartInt_1 StartInt_4)))
   (StartInt_10 Int (0 (str.len Start_12) (str.indexof Start_4 Start_10 StartInt_6)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start_2 Start_2 StartInt_2) (str.to_int Start_2)))
   (StartInt_6 Int (0 (str.len Start) (str.to_int Start_9)))
   (Start_10 String ("0" x "b" (str.++ Start_12 Start_5) (str.at Start_13 StartInt_4) (str.substr Start_10 StartInt_7 StartInt_2) (str.replace Start_12 Start_9 Start_8) (str.from_int StartInt_8)))
   (StartBool_3 Bool (false true (not StartBool) (str.<= Start_8 Start) (str.prefixof Start_7 Start_10) (str.contains Start_2 Start_8) (= Start_2 Start_11) (<= StartInt_3 StartInt_7)))
   (StartInt_4 Int (1))
   (StartBool_5 Bool (true false (str.< Start_1 Start_10) (str.suffixof Start_15 Start_12) (= StartInt_2 StartInt_9) (<= StartInt_6 StartInt_2)))
   (Start_7 String ("1" (str.++ Start_3 Start_6) (str.at Start_6 StartInt_3) (str.substr Start StartInt_5 StartInt_4)))
   (StartInt_2 Int (1 (str.len Start_2) (str.to_int Start_1)))
   (Start_12 String ("b" "" "0" (str.at Start_11 StartInt_4) (str.from_int StartInt_1) (ite StartBool_2 Start_13 Start_3)))
   (Start_14 String ("a" (str.at Start_1 StartInt_4) (str.replace Start_7 Start_14 Start_6) (str.from_int StartInt_2) (ite StartBool_4 Start_14 Start_13)))
   (StartBool_2 Bool (false (not StartBool_2) (str.<= Start_5 Start) (str.prefixof Start_6 Start_7) (str.suffixof Start_3 Start_7) (= Start_2 Start_7)))
   (Start_3 String ("" "1" y "b" (str.++ Start_10 Start_1) (str.at Start StartInt_4) (str.substr Start_8 StartInt_6 StartInt_4) (str.from_int StartInt_5) (ite StartBool_3 Start_6 Start_6)))
   (Start_13 String ("0" "1" "" "a" "b" y (str.++ Start_8 Start_12) (str.substr Start_13 StartInt_3 StartInt_1) (str.from_int StartInt_4) (ite StartBool_3 Start_10 Start_10)))
   (StartInt_7 Int (0 1 (str.len Start_8) (str.indexof Start_8 Start StartInt_4) (str.to_int Start_6)))
   (StartInt_8 Int (1 (str.indexof Start_9 Start_1 StartInt_8) (str.to_int Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.substr x 1 (str.len y)) "1" y)))

(check-synth)
