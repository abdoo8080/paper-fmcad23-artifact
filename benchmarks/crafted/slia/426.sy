(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_3 String) (Start_7 String) (StartBool_2 Bool) (StartInt_1 Int) (Start_5 String) (Start_2 String) (StartBool_3 Bool) (Start_8 String) (StartInt_2 Int) (Start_9 String) (StartBool_1 Bool) (Start_4 String) (Start_6 String) (Start_1 String))
  ((Start String ("0" "a" y (str.replace Start_1 Start_2 Start_1) (ite StartBool_1 Start_1 Start_3)))
   (StartInt Int (0 1))
   (StartBool Bool (false (not StartBool_2) (str.< Start Start_1) (str.<= Start_3 Start_8) (str.contains Start_1 Start_9) (<= StartInt_1 StartInt_1)))
   (StartInt_3 Int (1 (str.len Start_9) (str.indexof Start_5 Start_6 StartInt_4) (str.to_int Start_1)))
   (StartInt_4 Int (0 (str.len Start_7) (str.to_int Start_3)))
   (Start_3 String ("0" "" (str.++ Start_1 Start) (str.from_int StartInt)))
   (Start_7 String ("1" (str.at Start_5 StartInt_1) (str.substr Start_6 StartInt StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool_1) (str.< Start_3 Start_3) (str.<= Start_1 Start_1) (str.suffixof Start Start_1) (str.contains Start_1 Start) (= StartInt_1 StartInt_2) (<= StartInt_2 StartInt_2)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start_4 Start_4 StartInt_1) (str.to_int Start_2)))
   (Start_5 String (y x (str.++ Start Start_5) (str.substr Start_5 StartInt StartInt) (str.replace Start_6 Start_7 Start_2)))
   (Start_2 String ("a" "0" "" x (ite StartBool_1 Start_4 Start_1)))
   (StartBool_3 Bool (false true (not StartBool_3) (str.< Start_7 Start) (str.<= Start_8 Start_3) (str.suffixof Start_3 Start_5) (str.contains Start_6 Start_3) (= Start_3 Start_7)))
   (Start_8 String (y (str.at Start_1 StartInt_3) (str.substr Start_6 StartInt_3 StartInt_4)))
   (StartInt_2 Int (1))
   (Start_9 String ("b" (str.++ Start_7 Start_6) (str.at Start_2 StartInt_3) (str.replace Start_2 Start Start_5)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool) (str.<= Start_3 Start) (str.suffixof Start_1 Start_1) (= Start_3 Start)))
   (Start_4 String ("1" y (str.at Start_4 StartInt) (str.replace Start_1 Start_3 Start_5)))
   (Start_6 String ("0" y "1" (str.++ Start_3 Start_7) (str.replace Start_4 Start_3 Start_1)))
   (Start_1 String ("b" y "" "0" "a" "1" (str.at Start_5 StartInt_1) (str.substr Start_1 StartInt_2 StartInt_3) (str.from_int StartInt_3) (ite StartBool_3 Start_4 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof x (str.replace y "" "a") (str.indexof "0" x 1)))))

(check-synth)
