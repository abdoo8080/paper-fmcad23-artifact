(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_17 String) (StartBool_1 Bool) (Start_9 String) (Start_5 String) (Start_16 String) (StartBool_2 Bool) (Start_10 String) (StartInt_3 Int) (StartInt_9 Int) (StartInt_6 Int) (StartBool_3 Bool) (StartInt_7 Int) (Start_1 String) (Start_3 String) (StartInt_5 Int) (Start_2 String) (Start_6 String) (StartBool_6 Bool) (StartInt_4 Int) (StartBool_4 Bool) (StartBool_5 Bool) (Start_15 String) (Start_4 String) (Start_13 String) (Start_14 String) (StartInt_8 Int) (Start_12 String) (Start_8 String) (StartInt_2 Int) (Start_11 String) (Start_7 String))
  ((Start String ("0" y (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 (str.indexof Start_3 Start_17 StartInt_2)))
   (StartBool Bool (false true (not StartBool) (str.< Start_11 Start_8) (str.prefixof Start_10 Start_5) (= StartInt_8 StartInt_5)))
   (StartInt_1 Int (1 0 (str.len Start_13)))
   (Start_17 String ("b" (str.replace Start_3 Start_5 Start) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false true (str.< Start_8 Start_14) (str.<= Start_15 Start_13) (str.prefixof Start_11 Start_2) (str.suffixof Start_17 Start_1) (= StartInt_2 StartInt_1) (<= StartInt_6 StartInt_7)))
   (Start_9 String ("0" "" (str.++ Start_6 Start_2) (str.at Start_4 StartInt) (str.replace Start_8 Start_4 Start_7) (ite StartBool Start_10 Start_6)))
   (Start_5 String (x (str.at Start_2 StartInt_4) (str.replace Start Start_5 Start_2) (ite StartBool_1 Start_2 Start_2)))
   (Start_16 String ("" (str.at Start_15 StartInt_4) (str.substr Start_8 StartInt_9 StartInt_6) (str.replace Start_6 Start_10 Start_9) (str.from_int StartInt_3) (ite StartBool_3 Start_6 Start_10)))
   (StartBool_2 Bool (false true (not StartBool) (str.<= Start_4 Start_5) (str.contains Start_2 Start) (= StartInt_3 StartInt_3) (<= StartInt_3 StartInt_3)))
   (Start_10 String ("a" (str.at Start_10 StartInt_5) (str.substr Start_5 StartInt_4 StartInt_4) (str.replace Start_8 Start_8 Start_4) (ite StartBool_2 Start_3 Start_8)))
   (StartInt_3 Int (0 (str.indexof Start_1 Start_2 StartInt_1) (str.to_int Start_3)))
   (StartInt_9 Int (0))
   (StartInt_6 Int (1 (str.to_int Start_4)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_1 StartBool) (str.< Start_8 Start_5) (str.<= Start_3 Start_9) (= Start Start_4) (<= StartInt_3 StartInt_3)))
   (StartInt_7 Int (1 0))
   (Start_1 String ("" (str.++ Start Start_1) (str.substr Start_2 StartInt_2 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start Start_3)))
   (Start_3 String ("0" "1" (str.from_int StartInt_2) (ite StartBool_2 Start_1 Start_3)))
   (StartInt_5 Int (0 (str.indexof Start_11 Start_2 StartInt_4)))
   (Start_2 String ("b" "1" "a" "" y (str.++ Start_13 Start_15) (str.at Start_2 StartInt_3) (str.replace Start_16 Start_3 Start_16)))
   (Start_6 String (y "1" (str.replace Start Start_3 Start_7) (str.from_int StartInt_1) (ite StartBool_3 Start_2 Start_6)))
   (StartBool_6 Bool (true false (not StartBool_1) (and StartBool_4 StartBool_6) (str.< Start_2 Start_4) (str.prefixof Start_10 Start_11) (= Start_9 Start_2)))
   (StartInt_4 Int (1 (str.indexof Start_5 Start_5 StartInt_4) (str.to_int Start_5)))
   (StartBool_4 Bool (true (not StartBool_5) (and StartBool_1 StartBool_6) (str.< Start_11 Start_1) (str.<= Start_6 Start_8) (str.suffixof Start_4 Start_4) (str.contains Start_3 Start_2) (= Start_11 Start_1)))
   (StartBool_5 Bool (true (not StartBool_2) (str.contains Start_13 Start_6) (<= StartInt StartInt_7)))
   (Start_15 String ("0" (str.++ Start_14 Start_13) (str.substr Start_3 StartInt_6 StartInt_4)))
   (Start_4 String (x (str.++ Start_6 Start_2) (str.at Start StartInt_2) (str.substr Start_2 StartInt_1 StartInt_4) (str.replace Start_2 Start Start_3) (str.from_int StartInt_1)))
   (Start_13 String (x "b" "a" (str.++ Start_11 Start_4) (str.at Start_10 StartInt_4) (str.substr Start_11 StartInt_8 StartInt_1) (str.replace Start_10 Start_5 Start_5) (str.from_int StartInt_7)))
   (Start_14 String (x (str.at Start_12 StartInt_8) (str.from_int StartInt_5)))
   (StartInt_8 Int (1 (str.len Start_8) (str.indexof Start_6 Start_9 StartInt_3) (str.to_int Start_13)))
   (Start_12 String ("a" "1" (str.replace Start_8 Start_4 Start_12) (str.from_int StartInt_5)))
   (Start_8 String (y "" (ite StartBool_4 Start_6 Start)))
   (StartInt_2 Int (0 1 (str.indexof Start_11 Start_8 StartInt_6) (str.to_int Start_10)))
   (Start_11 String (y "1" "b" x (str.++ Start_5 Start_4) (str.at Start_11 StartInt_6) (str.substr Start_9 StartInt_6 StartInt_1) (str.replace Start_1 Start_9 Start_12) (str.from_int StartInt_4) (ite StartBool_4 Start_5 Start_11)))
   (Start_7 String ("" "0" (str.++ Start_13 Start_14) (str.at Start_13 StartInt) (str.substr Start_15 StartInt_3 StartInt_7) (str.from_int StartInt_2) (ite StartBool Start Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" (str.at (str.++ x x) 1) y)))

(check-synth)
