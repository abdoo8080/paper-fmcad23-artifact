(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_1 Bool) (StartInt_5 Int) (Start_9 String) (Start_8 String) (Start_2 String) (Start_3 String) (Start_1 String) (StartInt_2 Int) (Start_4 String) (Start_10 String) (Start_7 String) (Start_5 String) (StartInt_6 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_6 String) (StartInt_1 Int))
  ((Start String ("a" "1" (str.++ Start Start)))
   (StartInt Int (1 (str.indexof Start Start StartInt_1) (str.to_int Start_1)))
   (StartBool Bool (false true (not StartBool_1) (str.< Start_3 Start_5) (str.<= Start_9 Start_1)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_1 StartBool_1) (str.< Start Start) (str.prefixof Start_9 Start_3) (str.suffixof Start_8 Start_8) (<= StartInt_6 StartInt_5)))
   (StartInt_5 Int (1 0))
   (Start_9 String ("1" (str.++ Start_1 Start) (str.substr Start_6 StartInt_2 StartInt_3) (str.from_int StartInt_5)))
   (Start_8 String ("b" "a" (str.++ Start_1 Start_1) (str.at Start StartInt_4)))
   (Start_2 String ("a" "" "b" (str.at Start_3 StartInt_1) (ite StartBool Start_2 Start_4)))
   (Start_3 String (y (str.at Start_2 StartInt_1) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_4 Start_5 Start_1)))
   (Start_1 String ("1" "b" "a" (str.++ Start_2 Start_1) (str.at Start_1 StartInt_1)))
   (StartInt_2 Int (0 1 (str.len Start)))
   (Start_4 String ("1" x "" "a" "b" (str.substr Start_4 StartInt_2 StartInt_1) (ite StartBool Start_3 Start_4)))
   (Start_10 String ("b" (str.++ Start_10 Start) (str.at Start_10 StartInt_5) (str.substr Start_7 StartInt_2 StartInt_3) (str.replace Start_4 Start_5 Start_4)))
   (Start_7 String ("1" (str.++ Start_7 Start_5) (str.at Start_3 StartInt) (str.substr Start_2 StartInt_2 StartInt_4)))
   (Start_5 String ("" (str.++ Start_6 Start_4) (str.substr Start_3 StartInt_2 StartInt_4) (str.from_int StartInt_2)))
   (StartInt_6 Int (0 1 (str.indexof Start_7 Start_3 StartInt_3) (str.to_int Start_10)))
   (StartInt_4 Int (1 (str.len Start_6) (str.indexof Start_7 Start_6 StartInt_2) (str.to_int Start_1)))
   (StartInt_3 Int (1 0))
   (Start_6 String ("a" (str.substr Start_1 StartInt_3 StartInt_1) (str.from_int StartInt_3) (ite StartBool Start_4 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_6) (str.to_int Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "b" "" x) "1" x)))

(check-synth)
