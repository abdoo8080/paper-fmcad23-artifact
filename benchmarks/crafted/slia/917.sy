(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_6 String) (Start_7 String) (StartInt_5 Int) (StartInt_6 Int) (StartInt_1 Int) (Start_1 String) (Start_2 String) (StartInt_2 Int) (Start_4 String) (StartInt_3 Int) (Start_3 String) (StartInt_4 Int) (StartBool_1 Bool) (Start_5 String))
  ((Start String (y "" "a" "b" (str.++ Start Start) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.to_int Start_5)))
   (StartBool Bool (true false (and StartBool_1 StartBool) (str.<= Start_6 Start) (str.suffixof Start_5 Start_1) (= StartInt_5 StartInt_5) (<= StartInt_6 StartInt_5)))
   (StartInt_7 Int (1 (str.len Start_4) (str.indexof Start Start_3 StartInt_1)))
   (Start_6 String ("a" (str.++ Start_4 Start_5) (str.substr Start_1 StartInt_7 StartInt_6) (str.from_int StartInt_2)))
   (Start_7 String (y "0" (str.++ Start_6 Start_6) (str.replace Start_5 Start_1 Start_4) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 0 (str.len Start) (str.to_int Start_7)))
   (StartInt_6 Int (0 1))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start StartInt_2)))
   (Start_1 String ("1" (str.++ Start Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_2)))
   (Start_2 String ("1" (str.++ Start_1 Start) (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_2 Int (0 (str.indexof Start Start StartInt) (str.to_int Start)))
   (Start_4 String (y (str.++ Start_2 Start_4) (str.at Start_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start Start_1)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.to_int Start)))
   (Start_3 String ("1" y "a" "0" (str.at Start StartInt_3) (str.substr Start_3 StartInt StartInt_4) (str.replace Start_4 Start_1 Start) (ite StartBool Start_2 Start_3)))
   (StartInt_4 Int (1 0))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_1) (str.prefixof Start_3 Start_3) (str.suffixof Start_3 Start_1) (<= StartInt_2 StartInt_2)))
   (Start_5 String ("" "b" (str.++ Start_1 Start) (str.substr Start StartInt_2 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.at "a" (str.indexof "a" x 0)) 0)))

(check-synth)
