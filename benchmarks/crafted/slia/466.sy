(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_13 String) (Start_12 String) (StartInt_7 Int) (Start_10 String) (StartBool_4 Bool) (StartInt_4 Int) (Start_5 String) (Start_6 String) (StartInt_8 Int) (StartInt_6 Int) (Start_9 String) (Start_2 String) (StartInt_3 Int) (StartBool_3 Bool) (Start_4 String) (Start_8 String) (Start_11 String) (Start_7 String) (StartBool_2 Bool) (Start_1 String) (StartInt_2 Int) (Start_3 String) (StartBool_1 Bool) (StartInt_5 Int))
  ((Start String ("1" (str.at Start StartInt_1) (str.substr Start StartInt_2 StartInt_2) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt) (ite StartBool Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_11 Start_5 StartInt_4)))
   (StartBool Bool (false (and StartBool StartBool) (str.< Start_8 Start_4) (str.suffixof Start_12 Start_12) (= StartInt_5 StartInt_1) (<= StartInt_5 StartInt_1)))
   (StartInt_1 Int (0))
   (Start_13 String ("b" (str.replace Start_13 Start_5 Start)))
   (Start_12 String ("" "a" (str.++ Start_10 Start_10) (str.substr Start_6 StartInt_8 StartInt) (str.replace Start_12 Start_10 Start_10) (ite StartBool_1 Start_13 Start_2)))
   (StartInt_7 Int (0 (str.indexof Start_7 Start StartInt_4) (str.to_int Start_1)))
   (Start_10 String ("0" x "1" "" "a" y (str.substr Start_4 StartInt_6 StartInt_1) (ite StartBool_4 Start_4 Start_8)))
   (StartBool_4 Bool (true (not StartBool) (and StartBool_4 StartBool_1) (str.< Start_3 Start) (= Start_11 Start_11) (= StartInt StartInt_7)))
   (StartInt_4 Int (0 1 (str.len Start_10) (str.indexof Start_10 Start_2 StartInt_2)))
   (Start_5 String ("0" y (str.++ Start_6 Start_1) (str.at Start_7 StartInt_3)))
   (Start_6 String ("" (str.substr Start_7 StartInt_5 StartInt_6) (str.replace Start Start_7 Start) (str.from_int StartInt) (ite StartBool_2 Start_9 Start_5)))
   (StartInt_8 Int (0 (str.to_int Start_5)))
   (StartInt_6 Int (1 0 (str.to_int Start_4)))
   (Start_9 String (x (str.++ Start Start_9) (str.at Start_6 StartInt_5) (str.substr Start_7 StartInt_2 StartInt_6) (ite StartBool_3 Start_3 Start_6)))
   (Start_2 String (x (str.++ Start_3 Start_4) (str.substr Start_1 StartInt_3 StartInt) (str.replace Start_2 Start_4 Start) (str.from_int StartInt_3) (ite StartBool Start_1 Start_1)))
   (StartInt_3 Int (1 0 (str.len Start_4) (str.to_int Start_3)))
   (StartBool_3 Bool (true false (str.< Start_1 Start_3) (str.<= Start_9 Start_3) (str.contains Start_9 Start_6) (= Start_3 Start_6)))
   (Start_4 String (y (str.substr Start_4 StartInt StartInt_3) (ite StartBool Start_2 Start_1)))
   (Start_8 String ("1" (str.++ Start_4 Start_8) (str.at Start_5 StartInt_1) (str.from_int StartInt_1)))
   (Start_11 String ("1" x "b" (str.++ Start_11 Start_4) (str.at Start_12 StartInt_1) (str.substr Start StartInt_3 StartInt_1) (str.replace Start_5 Start_5 Start_12) (str.from_int StartInt_5)))
   (Start_7 String ("1" "a" "" (str.++ Start_5 Start_9) (str.at Start_8 StartInt_4) (str.from_int StartInt_3) (ite StartBool_3 Start_8 Start)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_1 StartBool_2) (str.prefixof Start_1 Start_5) (str.suffixof Start_6 Start_2) (str.contains Start_7 Start_8) (= StartInt_2 StartInt_5)))
   (Start_1 String ("0" (str.replace Start_1 Start Start_1) (str.from_int StartInt_4) (ite StartBool_1 Start_2 Start_4)))
   (StartInt_2 Int (1 (str.len Start_7) (str.indexof Start_8 Start_4 StartInt_3)))
   (Start_3 String ("0" "a" y x "" (str.substr Start_1 StartInt_3 StartInt_1)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_2) (= StartInt_4 StartInt_3)))
   (StartInt_5 Int (0 1 (str.len Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "0" (str.at x 0))))

(check-synth)
