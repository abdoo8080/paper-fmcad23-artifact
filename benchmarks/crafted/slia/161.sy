(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_11 Int) (Start_8 String) (StartInt_3 Int) (Start_10 String) (StartInt_10 Int) (Start_9 String) (StartInt_5 Int) (Start_3 String) (StartInt_6 Int) (StartInt_2 Int) (Start_4 String) (Start_18 String) (StartInt_4 Int) (Start_11 String) (StartInt_7 Int) (Start_15 String) (StartInt_9 Int) (Start_17 String) (Start_7 String) (StartInt_8 Int) (Start_6 String) (Start_13 String) (Start_12 String) (Start_14 String) (Start_2 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_16 String) (Start_5 String) (StartBool_2 Bool))
  ((Start String ("0" "a" "" x "b" (str.++ Start_1 Start_2) (str.at Start StartInt_1) (str.replace Start_2 Start_1 Start_2) (ite StartBool Start_3 Start_4)))
   (StartInt Int (1 0 (str.len Start_1)))
   (StartBool Bool (true false (not StartBool) (str.prefixof Start_3 Start_14) (str.suffixof Start_7 Start_11) (= StartInt_9 StartInt_7)))
   (Start_1 String ("" y x (str.replace Start_12 Start_15 Start_9) (str.from_int StartInt_10) (ite StartBool Start Start_18)))
   (StartInt_11 Int (0 (str.indexof Start_16 Start_14 StartInt_9)))
   (Start_8 String ("1" (str.++ Start_5 Start_9) (str.from_int StartInt_2)))
   (StartInt_3 Int (1))
   (Start_10 String ("" (str.at Start_10 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_1) (str.from_int StartInt_6) (ite StartBool Start_3 Start_9)))
   (StartInt_10 Int (0 1 (str.len Start_15) (str.indexof Start_15 Start_3 StartInt_4)))
   (Start_9 String ("0" x y (str.++ Start_7 Start_6) (str.substr Start_10 StartInt StartInt_4) (str.replace Start_7 Start_3 Start_3) (str.from_int StartInt_2) (ite StartBool Start_10 Start_9)))
   (StartInt_5 Int (0 (str.len Start_6) (str.to_int Start_9)))
   (Start_3 String ("a" (ite StartBool_1 Start_6 Start_7)))
   (StartInt_6 Int (1 (str.to_int Start_9)))
   (StartInt_2 Int (1 0))
   (Start_4 String ("0" x (str.at Start_5 StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_5 Start_4)))
   (Start_18 String ("b" (str.++ Start_3 Start_4) (str.from_int StartInt_3) (ite StartBool_1 Start_10 Start_2)))
   (StartInt_4 Int (1 0))
   (Start_11 String (x (str.substr Start_8 StartInt_3 StartInt_4) (str.replace Start_9 Start_10 Start_12)))
   (StartInt_7 Int (0 1 (str.len Start_4)))
   (Start_15 String ("b" (str.replace Start_8 Start_7 Start_4) (str.from_int StartInt)))
   (StartInt_9 Int (1 (str.len Start_6) (str.to_int Start)))
   (Start_17 String (x "b" "" (str.at Start_4 StartInt) (str.substr Start_10 StartInt_5 StartInt_4) (str.replace Start_2 Start Start) (str.from_int StartInt_2)))
   (Start_7 String (y "" (str.++ Start_4 Start_3) (str.at Start_4 StartInt_1) (str.replace Start_5 Start_8 Start_9) (str.from_int StartInt_5)))
   (StartInt_8 Int (1 (str.len Start_2) (str.indexof Start_13 Start_6 StartInt)))
   (Start_6 String ("" (str.++ Start_6 Start_10) (str.at Start_11 StartInt_3) (str.substr Start_1 StartInt_7 StartInt_2) (str.from_int StartInt_3)))
   (Start_13 String ("a" "1" "b" (str.at Start StartInt_1) (str.replace Start_14 Start_12 Start_1) (ite StartBool Start_8 Start_1)))
   (Start_12 String (x y (str.++ Start_7 Start_3) (str.at Start_9 StartInt_7) (str.substr Start_13 StartInt_8 StartInt_3) (str.from_int StartInt_5) (ite StartBool Start_10 Start_12)))
   (Start_14 String ("1" "0" (str.at Start_6 StartInt_5) (str.substr Start_2 StartInt_9 StartInt_4)))
   (Start_2 String ("" "1" (str.++ Start_17 Start_11) (str.substr Start_4 StartInt_4 StartInt_11)))
   (StartBool_1 Bool (true (and StartBool_1 StartBool_2) (str.<= Start_5 Start_13) (str.suffixof Start_10 Start) (str.contains Start_11 Start) (= Start_14 Start_1) (<= StartInt StartInt_2)))
   (StartInt_1 Int (0 1 (str.indexof Start_10 Start_1 StartInt_5) (str.to_int Start_16)))
   (Start_16 String ("b" (str.at Start_15 StartInt_5) (str.substr Start_17 StartInt_10 StartInt_3) (str.replace Start Start_1 Start_8) (ite StartBool_2 Start_3 Start_4)))
   (Start_5 String ("0" (str.at Start_1 StartInt_4) (ite StartBool Start Start_3)))
   (StartBool_2 Bool (false (str.< Start_5 Start_1) (str.<= Start_8 Start_7) (str.prefixof Start_15 Start_7) (= StartInt_4 StartInt_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "0" x)))

(check-synth)
