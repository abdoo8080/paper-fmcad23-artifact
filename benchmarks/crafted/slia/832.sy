(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_8 Int) (StartInt_9 Int) (Start_3 String) (StartInt_6 Int) (StartBool_3 Bool) (StartInt_7 Int) (Start_10 String) (Start_13 String) (Start_11 String) (Start_2 String) (Start_6 String) (Start_12 String) (Start_5 String) (Start_1 String) (StartInt_3 Int) (Start_4 String) (StartInt_5 Int) (Start_9 String) (Start_7 String) (Start_8 String) (StartInt_1 Int) (StartInt_4 Int) (StartBool_1 Bool) (StartInt_2 Int) (StartBool_2 Bool))
  ((Start String (y "1" "a" (str.++ Start_1 Start) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_2) (str.indexof Start_3 Start_4 StartInt) (str.to_int Start)))
   (StartBool Bool (true (str.< Start_9 Start_4) (str.<= Start_13 Start_8) (str.prefixof Start_5 Start_5) (= Start_5 Start_1) (= StartInt StartInt_2)))
   (Start_14 String (y (str.++ Start_3 Start_2) (str.substr Start_10 StartInt_5 StartInt) (str.replace Start_13 Start_6 Start_6)))
   (StartInt_8 Int (0 (str.indexof Start_13 Start_14 StartInt_8)))
   (StartInt_9 Int (1 (str.len Start_10)))
   (Start_3 String ("a" (str.++ Start_10 Start_12) (str.at Start StartInt_4) (str.substr Start_10 StartInt_1 StartInt_7) (str.replace Start_4 Start_7 Start_7)))
   (StartInt_6 Int (0 (str.len Start_8) (str.indexof Start_5 Start_7 StartInt_1) (str.to_int Start_9)))
   (StartBool_3 Bool (false (not StartBool_1) (str.<= Start_1 Start_6) (str.prefixof Start_4 Start_6) (str.contains Start_6 Start_11) (= StartInt_4 StartInt_9) (<= StartInt_1 StartInt_4)))
   (StartInt_7 Int (0))
   (Start_10 String (y (str.at Start_6 StartInt_6) (str.substr Start_3 StartInt_1 StartInt_6) (str.from_int StartInt_7)))
   (Start_13 String ("" (str.++ Start_10 Start_3) (str.substr Start_2 StartInt StartInt) (str.replace Start_11 Start_7 Start_11) (ite StartBool_3 Start_10 Start_5)))
   (Start_11 String ("1" (str.at Start StartInt_3)))
   (Start_2 String (x (str.++ Start_10 Start_14) (str.at Start_10 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_5) (str.replace Start_8 Start_8 Start_7) (str.from_int StartInt_7) (ite StartBool_2 Start_10 Start_5)))
   (Start_6 String ("0" "1" (str.++ Start_7 Start_7) (str.substr Start_2 StartInt_3 StartInt_2) (str.replace Start_4 Start_6 Start_1) (str.from_int StartInt_2)))
   (Start_12 String ("b" (str.at Start_5 StartInt_8) (str.substr Start_11 StartInt_8 StartInt_3) (str.replace Start_1 Start_7 Start_8) (str.from_int StartInt_5) (ite StartBool Start_8 Start_13)))
   (Start_5 String ("a" "b" "1" (str.++ Start_6 Start_3) (str.at Start_10 StartInt_5) (str.replace Start_8 Start_5 Start_9) (str.from_int StartInt) (ite StartBool Start_1 Start_11)))
   (Start_1 String ("0" y "a"))
   (StartInt_3 Int (0 1 (str.to_int Start_4)))
   (Start_4 String ("b" "1" (str.++ Start_2 Start_5) (str.replace Start_1 Start_6 Start_6) (ite StartBool_1 Start Start_3)))
   (StartInt_5 Int (0 1 (str.len Start_4) (str.to_int Start_11)))
   (Start_9 String ("a" (str.++ Start_7 Start_6) (str.replace Start_2 Start_3 Start) (ite StartBool_2 Start_5 Start_9)))
   (Start_7 String ("a" (str.at Start_8 StartInt) (str.substr Start_1 StartInt StartInt_2) (str.replace Start_7 Start_5 Start_6) (str.from_int StartInt_3)))
   (Start_8 String (y (str.substr Start_4 StartInt_4 StartInt_3) (str.from_int StartInt_3)))
   (StartInt_1 Int (0 1))
   (StartInt_4 Int (1 0 (str.len Start_9) (str.indexof Start_8 Start_1 StartInt_1) (str.to_int Start_2)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_1 StartBool) (str.suffixof Start_6 Start_7) (str.contains Start_6 Start_3) (<= StartInt_2 StartInt_3)))
   (StartInt_2 Int (0 1 (str.len Start_5)))
   (StartBool_2 Bool (true (not StartBool_2) (= StartInt_2 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ y "0") "1" x)))

(check-synth)
