(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_1 String) (Start_4 String) (Start_11 String) (StartInt_2 Int) (StartInt_6 Int) (StartInt_3 Int) (Start_14 String) (Start_10 String) (StartBool_3 Bool) (Start_6 String) (StartInt_7 Int) (Start_3 String) (Start_9 String) (Start_5 String) (StartInt_4 Int) (Start_2 String) (StartBool_2 Bool) (StartInt_8 Int) (Start_13 String) (Start_7 String) (Start_12 String) (Start_8 String) (StartBool_1 Bool) (StartInt_1 Int) (StartInt_5 Int))
  ((Start String ("0"))
   (StartInt Int (1 (str.indexof Start_1 Start_2 StartInt_1)))
   (StartBool Bool (true (and StartBool_4 StartBool_2) (str.<= Start_7 Start_9) (str.prefixof Start_1 Start_1) (str.contains Start_12 Start_4)))
   (StartBool_4 Bool (false (and StartBool_3 StartBool) (str.suffixof Start_9 Start_4) (str.contains Start_3 Start_13) (<= StartInt_6 StartInt_8)))
   (Start_1 String ("" "b" "1" "a" y (str.from_int StartInt_4) (ite StartBool Start_2 Start_4)))
   (Start_4 String (y (str.++ Start_10 Start_2) (str.at Start_7 StartInt_7) (str.from_int StartInt_6)))
   (Start_11 String ("" (str.++ Start_12 Start_5) (str.substr Start_8 StartInt_6 StartInt_2) (str.from_int StartInt_5)))
   (StartInt_2 Int (0 (str.len Start_4) (str.indexof Start_7 Start_9 StartInt_1) (str.to_int Start_3)))
   (StartInt_6 Int (0 1 (str.to_int Start)))
   (StartInt_3 Int (1 (str.indexof Start_11 Start_2 StartInt_1) (str.to_int Start_1)))
   (Start_14 String ("0" (ite StartBool_1 Start_1 Start_6)))
   (Start_10 String ("1" (str.substr Start_5 StartInt_5 StartInt_1)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool) (str.suffixof Start_12 Start_8) (str.contains Start_6 Start_14) (= StartInt_4 StartInt_4)))
   (Start_6 String ("1" (str.at Start_4 StartInt_1) (str.substr Start_7 StartInt StartInt_1) (str.replace Start_4 Start_3 Start_8) (ite StartBool Start_3 Start_7)))
   (StartInt_7 Int (0 (str.indexof Start_11 Start_7 StartInt_7)))
   (Start_3 String ("" (str.++ Start_3 Start_2) (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_2) (str.replace Start_2 Start Start_1) (ite StartBool Start_4 Start_5)))
   (Start_9 String (y "a" (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_3 Start_3 Start_7) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_1)))
   (Start_5 String ("a" y "0" "b" "" x (str.substr Start_2 StartInt_3 StartInt_1) (str.replace Start_2 Start_6 Start_7) (str.from_int StartInt_4)))
   (StartInt_4 Int (0 1 (str.indexof Start_6 Start_3 StartInt_2) (str.to_int Start_6)))
   (Start_2 String ("a" "1" (str.substr Start_13 StartInt_3 StartInt_1) (ite StartBool_3 Start_5 Start_2)))
   (StartBool_2 Bool (true false (not StartBool_1) (and StartBool_2 StartBool_1) (str.prefixof Start_1 Start_8) (str.suffixof Start_4 Start_8) (str.contains Start_6 Start_10) (= StartInt_5 StartInt_2)))
   (StartInt_8 Int (1 (str.len Start_12) (str.indexof Start_7 Start_11 StartInt_4)))
   (Start_13 String ("0" "1" (str.substr Start_1 StartInt_2 StartInt_3)))
   (Start_7 String ("a" "" (str.at Start_1 StartInt_4) (str.substr Start_5 StartInt StartInt_2) (str.replace Start Start_3 Start_4)))
   (Start_12 String ("" "0" x (str.at Start_2 StartInt_6) (str.replace Start_5 Start_12 Start_9) (str.from_int StartInt)))
   (Start_8 String (x (str.++ Start_9 Start_4) (str.at Start_9 StartInt_2) (ite StartBool Start_5 Start_1)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_2) (str.<= Start_3 Start_4) (str.prefixof Start_3 Start_5) (str.contains Start_6 Start_4) (= Start_7 Start_3) (<= StartInt StartInt_5)))
   (StartInt_1 Int (1 0 (str.to_int Start_3)))
   (StartInt_5 Int (0 (str.indexof Start_5 Start_7 StartInt_5) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "1" (str.++ "a" "1"))))

(check-synth)
