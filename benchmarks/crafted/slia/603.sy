(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_2 Int) (StartBool_1 Bool) (Start_5 String) (StartBool_4 Bool) (Start_12 String) (StartBool_3 Bool) (StartInt_3 Int) (Start_10 String) (Start_2 String) (Start_11 String) (StartInt_5 Int) (Start_9 String) (Start_3 String) (Start_4 String) (StartInt_6 Int) (Start_13 String) (StartInt_4 Int) (Start_6 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_8 String) (StartInt_7 Int) (Start_1 String) (Start_7 String))
  ((Start String ("1" x (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt) (str.from_int StartInt_3) (ite StartBool Start_2 Start)))
   (StartInt Int (0 (str.indexof Start_4 Start_2 StartInt_3)))
   (StartBool Bool (false true (and StartBool_4 StartBool_1) (str.< Start_8 Start_4) (str.<= Start_12 Start_13) (str.prefixof Start_2 Start_4)))
   (StartInt_2 Int (1 0 (str.indexof Start_11 Start_5 StartInt) (str.to_int Start_9)))
   (StartBool_1 Bool (false (and StartBool_4 StartBool_1) (str.< Start_3 Start_4) (str.<= Start_12 Start) (str.suffixof Start_4 Start_1) (= Start_4 Start_3)))
   (Start_5 String (y x (str.replace Start_7 Start_4 Start_11) (str.from_int StartInt_4)))
   (StartBool_4 Bool (false (str.< Start_4 Start_12) (str.<= Start_7 Start_1) (= Start_3 Start_6)))
   (Start_12 String ("b" (str.++ Start_7 Start_8) (str.at Start_5 StartInt_3) (str.replace Start_8 Start_8 Start_4)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool_4 StartBool_4) (str.<= Start_3 Start_6) (str.prefixof Start_9 Start_1) (str.suffixof Start_5 Start) (str.contains Start Start_11) (= Start_7 Start_7)))
   (StartInt_3 Int (1 (str.indexof Start_6 Start_12 StartInt_2)))
   (Start_10 String ("b" (str.++ Start_6 Start) (str.at Start_2 StartInt_1) (str.replace Start_10 Start_6 Start_10) (ite StartBool_3 Start_4 Start_1)))
   (Start_2 String ("0" x (str.++ Start_1 Start_3) (str.replace Start_3 Start_2 Start_2) (str.from_int StartInt_1)))
   (Start_11 String ("a" (str.++ Start_12 Start_3) (str.substr Start_7 StartInt_2 StartInt_1) (ite StartBool Start_3 Start_2)))
   (StartInt_5 Int (0 (str.len Start_5) (str.indexof Start_7 Start_8 StartInt) (str.to_int Start_7)))
   (Start_9 String ("a" "0" "b" x (str.++ Start_9 Start_1) (str.substr Start_3 StartInt_3 StartInt_5) (str.replace Start_6 Start_6 Start) (str.from_int StartInt_6)))
   (Start_3 String ("0" (str.++ Start_2 Start) (str.at Start StartInt) (str.replace Start Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start_4)))
   (Start_4 String ("0" (str.++ Start_5 Start_5) (str.at Start_3 StartInt_3) (str.substr Start_1 StartInt StartInt_3) (str.replace Start_4 Start_1 Start_6) (ite StartBool_2 Start_2 Start_3)))
   (StartInt_6 Int (1 (str.len Start_2) (str.to_int Start_6)))
   (Start_13 String ("1" (str.++ Start_12 Start_3) (str.substr Start_3 StartInt_5 StartInt_1) (str.from_int StartInt_7)))
   (StartInt_4 Int (0 (str.len Start_3) (str.to_int Start_5)))
   (Start_6 String ("" x (str.at Start_1 StartInt_4) (str.substr Start StartInt_5 StartInt_6) (str.from_int StartInt_6)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.indexof Start Start_7 StartInt_4)))
   (StartBool_2 Bool (true (not StartBool_1) (str.< Start_2 Start_2) (str.<= Start_5 Start) (str.suffixof Start_2 Start_1) (str.contains Start_5 Start_2) (= Start Start_5) (= StartInt_4 StartInt_1)))
   (Start_8 String ("1" (str.at Start_7 StartInt_7) (str.substr Start_6 StartInt_5 StartInt_2) (str.replace Start_9 Start_3 Start_4)))
   (StartInt_7 Int (1 (str.indexof Start_8 Start_9 StartInt_1)))
   (Start_1 String ("b" (str.++ Start_2 Start_13) (str.at Start StartInt_2)))
   (Start_7 String ("b" (str.++ Start_7 Start_10) (str.replace Start Start_6 Start_6) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" (str.replace y "" x) "")))

(check-synth)
