(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_19 String) (Start_18 String) (StartBool_6 Bool) (StartInt_10 Int) (StartInt_1 Int) (StartBool_1 Bool) (Start_14 String) (Start_17 String) (Start_11 String) (StartInt_3 Int) (Start_12 String) (Start_2 String) (Start_4 String) (StartBool_2 Bool) (Start_13 String) (Start_5 String) (Start_15 String) (Start_1 String) (Start_9 String) (StartInt_6 Int) (Start_16 String) (StartInt_4 Int) (StartBool_3 Bool) (Start_8 String) (Start_10 String) (StartInt_2 Int) (Start_6 String) (StartInt_5 Int) (StartInt_8 Int) (Start_3 String) (StartBool_5 Bool) (Start_7 String) (StartBool_4 Bool) (StartInt_7 Int) (StartInt_9 Int))
  ((Start String ("b" (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 (str.len Start_4)))
   (StartBool Bool (true (not StartBool_6) (and StartBool_1 StartBool_4) (str.<= Start_11 Start_9)))
   (Start_19 String (x (str.++ Start_6 Start_12)))
   (Start_18 String (x "b" (str.++ Start_16 Start_19) (str.at Start_8 StartInt_5) (str.replace Start_6 Start_16 Start_5) (ite StartBool_6 Start_8 Start_2)))
   (StartBool_6 Bool (false true (and StartBool_6 StartBool_4) (str.<= Start_2 Start_4) (str.prefixof Start_15 Start_16) (str.suffixof Start_17 Start_2) (= Start_1 Start_9) (= StartInt_8 StartInt_10) (<= StartInt_7 StartInt_8)))
   (StartInt_10 Int (1 0 (str.indexof Start_18 Start_13 StartInt_4) (str.to_int Start_7)))
   (StartInt_1 Int (1))
   (StartBool_1 Bool (true (not StartBool) (and StartBool StartBool_4) (str.<= Start_4 Start_3) (str.suffixof Start_3 Start_11) (= Start_4 Start_16) (= StartInt_7 StartInt_9)))
   (Start_14 String (y (str.++ Start_8 Start_1) (str.at Start_15 StartInt_5) (str.from_int StartInt_4)))
   (Start_17 String ("0" "b" (str.++ Start_9 Start_16) (str.substr Start_9 StartInt_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool_5 Start_2 Start_4)))
   (Start_11 String ("b" (str.++ Start_3 Start) (str.substr Start_6 StartInt_3 StartInt_4) (str.replace Start_3 Start_8 Start_12) (ite StartBool_3 Start_3 Start)))
   (StartInt_3 Int (1 (str.indexof Start_8 Start_8 StartInt_3)))
   (Start_12 String ("b" (str.++ Start_4 Start_2) (str.substr Start_13 StartInt_3 StartInt_1)))
   (Start_2 String ("b" x "a" "" (str.++ Start_3 Start_4) (str.at Start_2 StartInt_1) (ite StartBool Start_5 Start)))
   (Start_4 String ("a" y x "1" (str.++ Start_5 Start_4) (str.at Start StartInt_1) (str.substr Start_5 StartInt StartInt_1) (str.replace Start_2 Start_6 Start_3) (str.from_int StartInt_2) (ite StartBool_2 Start_2 Start)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_1 StartBool_3) (str.<= Start_5 Start_7) (str.contains Start_3 Start_1) (= StartInt_1 StartInt_2) (<= StartInt_1 StartInt_2)))
   (Start_13 String ("1" (str.++ Start_2 Start_8) (str.substr Start_4 StartInt_2 StartInt_1) (ite StartBool_4 Start_7 Start_14)))
   (Start_5 String ("a" (str.++ Start Start_2) (str.at Start_3 StartInt) (ite StartBool Start_3 Start_1)))
   (Start_15 String ("0" (str.++ Start_15 Start_8) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_12 Start_3 Start_1) (ite StartBool_1 Start_9 Start_4)))
   (Start_1 String ("1" (str.++ Start Start_7) (str.at Start_5 StartInt_5) (str.replace Start_6 Start_8 Start_13)))
   (Start_9 String ("1" (str.++ Start_4 Start_6) (str.substr Start_6 StartInt StartInt_3)))
   (StartInt_6 Int (0 1 (str.indexof Start_13 Start StartInt_7) (str.to_int Start_11)))
   (Start_16 String (x (str.replace Start_13 Start_5 Start_7) (ite StartBool_2 Start_17 Start_11)))
   (StartInt_4 Int (0 1 (str.len Start_15)))
   (StartBool_3 Bool (true (and StartBool StartBool_2) (str.<= Start Start_3) (str.prefixof Start_12 Start_2) (str.contains Start_7 Start_9) (= Start_12 Start_11)))
   (Start_8 String ("b" (str.substr Start_5 StartInt StartInt_4) (str.replace Start_6 Start_10 Start_7) (str.from_int StartInt) (ite StartBool_1 Start_11 Start_6)))
   (Start_10 String ("1" "b" "0" (str.++ Start_11 Start) (str.substr Start_12 StartInt_1 StartInt_3) (str.from_int StartInt_7)))
   (StartInt_2 Int (0 1 (str.len Start_8) (str.indexof Start_7 Start_4 StartInt_8) (str.to_int Start_14)))
   (Start_6 String ("" x y "0" "b" "a" (str.substr Start_12 StartInt_4 StartInt_7) (str.replace Start_13 Start_7 Start_10) (ite StartBool_4 Start_1 Start_2)))
   (StartInt_5 Int (1 0 (str.indexof Start_8 Start_15 StartInt)))
   (StartInt_8 Int (0 1 (str.to_int Start_1)))
   (Start_3 String ("1" (str.++ Start_16 Start) (str.substr Start_17 StartInt_7 StartInt_2) (ite StartBool Start_14 Start_4)))
   (StartBool_5 Bool (false true (not StartBool) (str.contains Start_12 Start_14) (= StartInt_9 StartInt_9)))
   (Start_7 String ("a" "b" "0" (str.at Start_3 StartInt_1) (str.replace Start_8 Start_6 Start_1) (str.from_int StartInt_3) (ite StartBool_1 Start_3 Start_9)))
   (StartBool_4 Bool (false true (not StartBool_1) (str.< Start_2 Start) (str.<= Start_14 Start_1) (str.suffixof Start_3 Start_5) (str.contains Start_9 Start) (= Start_13 Start_3) (= StartInt StartInt_4) (<= StartInt_6 StartInt_3)))
   (StartInt_7 Int (0 1 (str.indexof Start_15 Start_11 StartInt_4)))
   (StartInt_9 Int (1 (str.len Start_5) (str.to_int Start_13)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.++ "b" "a") x (str.at x 0))))

(check-synth)
