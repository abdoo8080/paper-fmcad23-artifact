(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_3 String) (StartInt_5 Int) (StartInt_6 Int) (Start_2 String) (StartInt_3 Int) (Start_1 String) (StartInt_4 Int) (StartInt_2 Int) (StartInt_1 Int))
  ((Start String ("a" "" (str.at Start StartInt_1)))
   (StartInt Int (0 1 (str.len Start)))
   (StartBool Bool (false (and StartBool StartBool) (= Start Start_3) (= StartInt_5 StartInt_5) (<= StartInt StartInt)))
   (StartInt_7 Int (0 1 (str.to_int Start_1)))
   (Start_3 String ("" (str.at Start_3 StartInt_6) (str.from_int StartInt_7)))
   (StartInt_5 Int (1 0))
   (StartInt_6 Int (1 (str.to_int Start_2)))
   (Start_2 String ("0" y (str.substr Start_3 StartInt_2 StartInt_4) (str.replace Start Start_3 Start_1)))
   (StartInt_3 Int (1 0))
   (Start_1 String ("0" (str.at Start_1 StartInt_2) (str.substr Start_1 StartInt_3 StartInt_3) (ite StartBool Start Start_2)))
   (StartInt_4 Int (1 (str.len Start_1) (str.indexof Start Start_2 StartInt_5)))
   (StartInt_2 Int (0 (str.len Start_1) (str.indexof Start_1 Start StartInt) (str.to_int Start)))
   (StartInt_1 Int (0 1 (str.len Start) (str.indexof Start Start StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= "1" x) "0" "b")))

(check-synth)
