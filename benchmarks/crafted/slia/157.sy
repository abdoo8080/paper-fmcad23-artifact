(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartBool_4 Bool) (Start_9 String) (StartInt_7 Int) (Start_13 String) (Start_14 String) (Start_10 String) (Start_8 String) (StartInt_8 Int) (StartInt_2 Int) (StartInt_5 Int) (Start_1 String) (Start_12 String) (Start_6 String) (StartInt_6 Int) (StartInt_3 Int) (Start_7 String) (StartInt_1 Int) (Start_4 String) (Start_5 String) (StartBool_2 Bool) (StartBool_3 Bool) (Start_11 String) (StartInt_4 Int) (Start_2 String) (StartBool_1 Bool))
  ((Start String ("" (str.substr Start StartInt_1 StartInt_2) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_7)))
   (StartBool Bool (true (not StartBool) (str.suffixof Start_1 Start_11) (str.contains Start_8 Start_6) (= StartInt StartInt_3) (<= StartInt_3 StartInt_6)))
   (Start_3 String ("b" (str.at Start_7 StartInt_2) (str.substr Start_4 StartInt_7 StartInt_6) (ite StartBool_1 Start_13 Start_2)))
   (StartBool_4 Bool (false true (and StartBool_2 StartBool_4) (str.< Start_12 Start_12) (str.<= Start_4 Start_14) (str.contains Start_8 Start_1) (= StartInt_2 StartInt_3)))
   (Start_9 String ("" x (str.++ Start_1 Start) (str.substr Start_3 StartInt_2 StartInt) (str.replace Start_5 Start_13 Start_1) (ite StartBool_4 Start_13 Start_11)))
   (StartInt_7 Int (1 (str.len Start_1) (str.indexof Start_1 Start_5 StartInt_3) (str.to_int Start_14)))
   (Start_13 String ("" x y "b" (str.++ Start_13 Start_3) (str.at Start_9 StartInt_6) (str.replace Start Start_3 Start_5) (str.from_int StartInt_7)))
   (Start_14 String ("" y (str.++ Start_2 Start_3) (str.substr Start_8 StartInt_1 StartInt_2) (str.replace Start_4 Start_8 Start_13) (str.from_int StartInt_3)))
   (Start_10 String (x "b" (str.++ Start_13 Start_8) (str.from_int StartInt) (ite StartBool_3 Start_1 Start_14)))
   (Start_8 String ("b" (str.++ Start_9 Start_10) (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start_3 Start_5 Start_11) (ite StartBool Start_5 Start_8)))
   (StartInt_8 Int (0 1))
   (StartInt_2 Int (0 (str.to_int Start)))
   (StartInt_5 Int (1))
   (Start_1 String (y (str.at Start StartInt_3) (str.from_int StartInt_1)))
   (Start_12 String ("a" x (str.substr Start_10 StartInt StartInt_3) (str.from_int StartInt_5)))
   (Start_6 String (x "a" (str.++ Start_5 Start_6) (str.substr Start_6 StartInt_2 StartInt_2) (str.from_int StartInt_4) (ite StartBool Start Start_1)))
   (StartInt_6 Int (1 0 (str.len Start_12) (str.indexof Start_2 Start_10 StartInt_8) (str.to_int Start_1)))
   (StartInt_3 Int (0 (str.len Start_2)))
   (Start_7 String ("" x (str.replace Start Start_6 Start) (ite StartBool_2 Start Start)))
   (StartInt_1 Int (1 0 (str.len Start_1) (str.to_int Start_1)))
   (Start_4 String ("1" x (str.at Start StartInt_1) (str.replace Start_3 Start Start_2) (ite StartBool Start_2 Start_5)))
   (Start_5 String (x (str.substr Start_3 StartInt StartInt_2) (str.replace Start_6 Start_6 Start_6) (str.from_int StartInt) (ite StartBool_2 Start Start_2)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_2 StartBool_1) (str.< Start_6 Start_4) (str.prefixof Start_2 Start_7) (= StartInt_4 StartInt_1)))
   (StartBool_3 Bool (false true (not StartBool) (= StartInt_2 StartInt_1)))
   (Start_11 String (x (str.++ Start_8 Start_12) (str.substr Start_10 StartInt_1 StartInt_2) (str.from_int StartInt_2)))
   (StartInt_4 Int (0 (str.len Start_7) (str.to_int Start_4)))
   (Start_2 String ("b" "1" "" (str.++ Start Start) (str.at Start_3 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool_1 Start_4 Start_3)))
   (StartBool_1 Bool (false true (and StartBool StartBool_1) (str.<= Start Start_5) (str.suffixof Start Start_1) (str.contains Start_4 Start_8) (= Start_7 Start_1) (= StartInt_3 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "0" "b")))

(check-synth)
