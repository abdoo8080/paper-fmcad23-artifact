(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_2 String) (StartInt_1 Int) (StartInt_6 Int) (Start_3 String) (Start_11 String) (Start_5 String) (StartInt_2 Int) (Start_9 String) (Start_13 String) (Start_8 String) (Start_12 String) (StartBool_1 Bool) (Start_4 String) (StartInt_4 Int) (StartInt_3 Int) (Start_6 String) (Start_1 String) (StartBool_2 Bool) (StartBool_4 Bool) (Start_7 String) (Start_10 String) (StartBool_3 Bool) (StartInt_5 Int) (StartBool_5 Bool))
  ((Start String ("1" (str.++ Start_1 Start_2) (str.at Start StartInt_1) (str.replace Start_2 Start_3 Start_4) (ite StartBool Start_4 Start_2)))
   (StartInt Int (0 1 (str.len Start) (str.to_int Start_7)))
   (StartBool Bool (true false (not StartBool_4) (and StartBool_1 StartBool_5) (str.< Start Start_11) (str.suffixof Start_3 Start_5) (= Start_9 Start_3) (= StartInt_2 StartInt_5)))
   (Start_14 String ("a" (str.++ Start_3 Start_10) (str.at Start_10 StartInt_4) (str.replace Start_7 Start_5 Start_2) (str.from_int StartInt_3) (ite StartBool_2 Start_10 Start_3)))
   (Start_2 String (y "b" (str.substr Start_4 StartInt_3 StartInt_2) (str.replace Start_9 Start_13 Start_4) (ite StartBool_4 Start Start_9)))
   (StartInt_1 Int (0 (str.indexof Start Start_5 StartInt_5) (str.to_int Start_5)))
   (StartInt_6 Int (0 1 (str.len Start_2) (str.indexof Start_5 Start_5 StartInt)))
   (Start_3 String ("" "b" "a" (str.++ Start_8 Start_1) (str.at Start_9 StartInt) (str.substr Start_4 StartInt_4 StartInt_6) (str.from_int StartInt_4) (ite StartBool_2 Start_2 Start_12)))
   (Start_11 String ("a" "" x (str.replace Start Start_8 Start_12) (str.from_int StartInt_4)))
   (Start_5 String ("b" (str.at Start_7 StartInt_1) (str.replace Start_7 Start_11 Start_11) (ite StartBool_5 Start_3 Start_11)))
   (StartInt_2 Int (1))
   (Start_9 String ("" (str.++ Start_10 Start_8) (str.replace Start_7 Start Start_3) (str.from_int StartInt_3)))
   (Start_13 String (y "1" "b" "a" "0" "" (str.replace Start_1 Start_2 Start_14)))
   (Start_8 String ("1" "a" (str.from_int StartInt_2)))
   (Start_12 String ("" x "a" (str.++ Start_5 Start_3) (str.substr Start_8 StartInt_1 StartInt_2) (str.replace Start_2 Start_8 Start_12) (str.from_int StartInt_5)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_2 StartBool_2) (str.contains Start_4 Start_6) (= StartInt_2 StartInt_1)))
   (Start_4 String (x (str.++ Start Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_3)))
   (StartInt_4 Int (1 (str.len Start_8) (str.to_int Start_5)))
   (StartInt_3 Int (0 1 (str.len Start_6) (str.to_int Start_1)))
   (Start_6 String (y "" (str.at Start_5 StartInt_2) (ite StartBool Start_2 Start_4)))
   (Start_1 String ("b" (str.replace Start_8 Start_1 Start_13) (str.from_int StartInt_5) (ite StartBool Start Start_12)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_4 StartBool_1) (str.prefixof Start_6 Start)))
   (StartBool_4 Bool (false true (and StartBool StartBool_3) (str.prefixof Start_2 Start_7) (= StartInt_1 StartInt_3)))
   (Start_7 String ("0" (str.++ Start_7 Start_2) (str.at Start_3 StartInt_1) (str.substr Start_8 StartInt_1 StartInt_1) (str.replace Start_8 Start_6 Start) (str.from_int StartInt_4)))
   (Start_10 String ("0" (str.++ Start_1 Start_2) (str.substr Start_3 StartInt_4 StartInt_3) (str.from_int StartInt_2) (ite StartBool_5 Start_4 Start_6)))
   (StartBool_3 Bool (false true (not StartBool_5) (str.prefixof Start_6 Start_8) (= Start_6 Start_2) (= StartInt_5 StartInt_2) (<= StartInt_3 StartInt)))
   (StartInt_5 Int (0 (str.len Start_2) (str.indexof Start_3 Start_3 StartInt_3) (str.to_int Start_6)))
   (StartBool_5 Bool (true (str.< Start_4 Start) (str.prefixof Start_9 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "a" y) x (str.replace y "1" x))))

(check-synth)
