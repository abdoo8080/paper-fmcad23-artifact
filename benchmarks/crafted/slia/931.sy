(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_6 Int) (StartBool_7 Bool) (Start_11 String) (StartBool_5 Bool) (StartBool_4 Bool) (Start_8 String) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_2 Int) (Start_10 String) (Start_3 String) (StartInt_7 Int) (StartBool_6 Bool) (Start_1 String) (Start_12 String) (Start_6 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_7 String) (Start_5 String) (StartInt_4 Int) (StartInt_5 Int) (StartBool_2 Bool) (Start_2 String) (Start_4 String))
  ((Start String (x (str.++ Start Start) (str.at Start StartInt) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start_7) (str.indexof Start_6 Start_2 StartInt_4) (str.to_int Start_3)))
   (StartBool Bool (true false (not StartBool_2) (and StartBool_1 StartBool_1) (str.< Start_8 Start) (str.<= Start_7 Start_1) (str.prefixof Start_4 Start_5) (str.suffixof Start_7 Start) (str.contains Start_2 Start_3) (= StartInt StartInt_1)))
   (Start_9 String (y "b" (str.at Start_8 StartInt) (ite StartBool_1 Start_4 Start_2)))
   (StartInt_6 Int (1 (str.len Start_7) (str.to_int Start_12)))
   (StartBool_7 Bool (true (not StartBool_1) (and StartBool_2 StartBool) (str.<= Start_8 Start_12) (= StartInt_6 StartInt_3) (<= StartInt_5 StartInt_7)))
   (Start_11 String ("a" (str.at Start_6 StartInt_4) (str.substr Start_5 StartInt_4 StartInt_4) (str.replace Start_12 Start_9 Start_12)))
   (StartBool_5 Bool (false true (and StartBool_7 StartBool_7) (str.<= Start Start_6) (str.suffixof Start_4 Start_6) (str.contains Start_11 Start_1) (= Start_5 Start_6)))
   (StartBool_4 Bool (true false (not StartBool_4) (and StartBool_5 StartBool_6) (str.<= Start Start_8) (str.prefixof Start_2 Start_9) (str.contains Start Start_5) (<= StartInt_4 StartInt_4)))
   (Start_8 String (x (str.++ Start_6 Start_6) (str.replace Start Start_9 Start_5) (ite StartBool_3 Start_7 Start)))
   (StartInt_1 Int (1 (str.indexof Start_1 Start_1 StartInt_2) (str.to_int Start)))
   (StartBool_3 Bool (false (not StartBool_2) (and StartBool_1 StartBool_4) (str.<= Start_3 Start_1) (str.prefixof Start_1 Start_6) (str.suffixof Start_6 Start_3) (str.contains Start_3 Start_10) (= Start_2 Start_2) (= StartInt_2 StartInt_3) (<= StartInt_3 StartInt_4)))
   (StartInt_2 Int (1 0))
   (Start_10 String ("a" (str.++ Start Start_3) (str.substr Start_2 StartInt_5 StartInt) (str.replace Start_6 Start_5 Start) (str.from_int StartInt_2) (ite StartBool_4 Start_10 Start_8)))
   (Start_3 String (y (str.++ Start_3 Start_1) (str.substr Start StartInt StartInt_2)))
   (StartInt_7 Int (1 0 (str.indexof Start_2 Start_7 StartInt_1) (str.to_int Start_1)))
   (StartBool_6 Bool (true false (not StartBool) (str.< Start_5 Start_2) (str.suffixof Start_5 Start_10) (str.contains Start_2 Start_3)))
   (Start_1 String ("a" (str.++ Start_1 Start_2) (str.at Start_2 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_3) (str.replace Start_1 Start_2 Start)))
   (Start_12 String ("1" "a" "0" (str.++ Start_6 Start_6) (str.from_int StartInt_3) (ite StartBool_5 Start_2 Start_1)))
   (Start_6 String ("0" (str.++ Start_3 Start_6) (str.substr Start_2 StartInt_2 StartInt) (str.from_int StartInt_5)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.to_int Start)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start_2 Start_1) (str.<= Start_4 Start_3) (str.prefixof Start_3 Start_3) (= StartInt_2 StartInt_4) (<= StartInt_4 StartInt_1)))
   (Start_7 String ("0" (str.++ Start_2 Start_1) (str.substr Start_6 StartInt_2 StartInt_3) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_6)))
   (Start_5 String ("" "1" (str.++ Start_4 Start_5) (str.at Start_3 StartInt_4) (str.replace Start_1 Start_7 Start_5) (str.from_int StartInt_3) (ite StartBool Start Start_7)))
   (StartInt_4 Int (0 1 (str.to_int Start_4)))
   (StartInt_5 Int (0 (str.len Start_2)))
   (StartBool_2 Bool (false (not StartBool) (str.< Start_5 Start_6) (str.prefixof Start_1 Start) (= Start_7 Start_5)))
   (Start_2 String (y (str.++ Start_1 Start) (str.replace Start Start_2 Start_1) (ite StartBool_1 Start_1 Start_3)))
   (Start_4 String ("b" y (str.substr Start_4 StartInt_4 StartInt_2) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= 1 (str.indexof x y 0)) "b" y)))

(check-synth)
