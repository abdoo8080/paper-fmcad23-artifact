(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (Start_7 String) (StartBool_3 Bool) (StartBool_1 Bool) (StartInt_5 Int) (Start_6 String) (Start_5 String) (StartInt_1 Int) (StartInt_4 Int) (Start_2 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_4 String) (Start_1 String) (Start_8 String) (StartInt_3 Int) (Start_3 String) (StartInt_6 Int))
  ((Start String ("b" "0" y "" (ite StartBool_1 Start Start)))
   (StartInt Int (0 1 (str.len Start_8) (str.indexof Start_9 Start_6 StartInt_5)))
   (StartBool Bool (false (not StartBool) (and StartBool StartBool_2) (str.suffixof Start_4 Start_1) (= Start_8 Start_1)))
   (Start_9 String ("" (str.++ Start_4 Start_4) (str.replace Start_1 Start Start_8)))
   (Start_7 String ("" x "a" (str.at Start_9 StartInt) (str.from_int StartInt) (ite StartBool Start_5 Start_2)))
   (StartBool_3 Bool (true (= Start Start) (= StartInt StartInt_3)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_1 Start) (str.prefixof Start_1 Start) (= Start_2 Start_3) (<= StartInt_1 StartInt_2)))
   (StartInt_5 Int (0 1 (str.to_int Start_8)))
   (Start_6 String (y "a" (str.replace Start_3 Start Start_6) (str.from_int StartInt_4) (ite StartBool_1 Start_3 Start_5)))
   (Start_5 String ("a" "" "1" (str.at Start_2 StartInt_3) (str.replace Start_1 Start Start_2) (str.from_int StartInt_4)))
   (StartInt_1 Int (0 (str.to_int Start_3)))
   (StartInt_4 Int (0 (str.to_int Start_6)))
   (Start_2 String ("b" "0" (str.++ Start Start_1) (str.at Start_4 StartInt_1) (str.substr Start_5 StartInt_3 StartInt)))
   (StartBool_2 Bool (true (not StartBool_2) (and StartBool_1 StartBool) (str.< Start_8 Start_4) (= Start_8 Start_2)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.indexof Start_2 Start_2 StartInt_1) (str.to_int Start)))
   (Start_4 String ("1" "" (str.at Start_1 StartInt_1) (str.substr Start StartInt_1 StartInt_4) (str.replace Start_5 Start_6 Start)))
   (Start_1 String ("1" (str.++ Start_1 Start_7) (str.at Start_5 StartInt_5) (str.substr Start StartInt_1 StartInt_4) (str.from_int StartInt_6) (ite StartBool Start_5 Start_7)))
   (Start_8 String ("0" x (str.substr Start_3 StartInt_4 StartInt_6) (str.from_int StartInt_6) (ite StartBool_3 Start_5 Start_1)))
   (StartInt_3 Int (0 1 (str.len Start_1)))
   (Start_3 String ("0" "a"))
   (StartInt_6 Int (1 0 (str.len Start_7) (str.to_int Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "a" x "1") 0)))

(check-synth)
