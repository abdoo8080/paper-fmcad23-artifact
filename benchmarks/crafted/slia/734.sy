(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartBool_2 Bool) (Start_8 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_2 String) (StartInt_1 Int) (Start_15 String) (Start_9 String) (StartInt_4 Int) (Start_17 String) (Start_1 String) (Start_3 String) (Start_6 String) (Start_10 String) (StartInt_3 Int) (Start_7 String) (StartBool_4 Bool) (Start_5 String) (Start_12 String) (StartInt_5 Int) (Start_11 String) (Start_4 String) (StartBool_3 Bool) (Start_13 String) (StartInt_6 Int) (Start_16 String))
  ((Start String ("" (str.at Start_1 StartInt) (str.from_int StartInt)))
   (StartInt Int (1 (str.len Start_11) (str.to_int Start_4)))
   (StartBool Bool (false true (not StartBool_1) (str.< Start_14 Start_14) (str.suffixof Start_13 Start_15) (str.contains Start_5 Start_16) (<= StartInt_2 StartInt_4)))
   (Start_14 String (x (str.++ Start Start_5) (str.at Start_12 StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.suffixof Start_9 Start_8) (<= StartInt_4 StartInt_2)))
   (Start_8 String (x "a" "b" "" "0" "1" (str.from_int StartInt_4) (ite StartBool_2 Start_5 Start_9)))
   (StartInt_2 Int (1 (str.len Start_1)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_1 StartBool_1) (str.< Start_4 Start) (str.suffixof Start_2 Start_5)))
   (Start_2 String ("0" (str.replace Start_11 Start_8 Start_5) (ite StartBool_1 Start_1 Start_5)))
   (StartInt_1 Int (0 1 (str.indexof Start_7 Start_8 StartInt_2)))
   (Start_15 String ("0" "b" x "" "1" (str.at Start_10 StartInt_4) (str.substr Start_10 StartInt_5 StartInt_4) (str.replace Start_17 Start Start_17)))
   (Start_9 String ("" (str.at Start_5 StartInt_3) (str.from_int StartInt_4) (ite StartBool_2 Start_6 Start_1)))
   (StartInt_4 Int (0 1 (str.len Start_6) (str.indexof Start_4 Start_5 StartInt_4) (str.to_int Start_6)))
   (Start_17 String (y (str.++ Start_4 Start_4) (str.substr Start_13 StartInt StartInt)))
   (Start_1 String ("0" "b" (str.++ Start_2 Start_3) (str.at Start_2 StartInt) (str.replace Start Start_4 Start) (ite StartBool Start_2 Start_4)))
   (Start_3 String ("0" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_5 Start_4 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start)))
   (Start_6 String ("b" (str.++ Start_2 Start_4) (str.replace Start_2 Start Start)))
   (Start_10 String ("1" (str.++ Start_5 Start_4) (str.substr Start_8 StartInt StartInt) (str.replace Start_5 Start_8 Start_9)))
   (StartInt_3 Int (1 0 (str.len Start_4) (str.to_int Start_4)))
   (Start_7 String (y (str.at Start_5 StartInt) (str.substr Start_10 StartInt_5 StartInt_5)))
   (StartBool_4 Bool (true false (and StartBool_1 StartBool_2) (str.<= Start_4 Start_3) (str.prefixof Start_5 Start_8) (str.contains Start_10 Start_1) (<= StartInt_4 StartInt_3)))
   (Start_5 String ("a" "" (str.++ Start_3 Start_6) (str.from_int StartInt)))
   (Start_12 String (y "0" (str.replace Start_5 Start_4 Start) (ite StartBool_1 Start_7 Start_13)))
   (StartInt_5 Int (0 1 (str.len Start_1) (str.indexof Start_9 Start_5 StartInt_1) (str.to_int Start)))
   (Start_11 String ("a" (str.++ Start_8 Start_9) (str.at Start_11 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_4) (str.replace Start_3 Start_4 Start_10) (str.from_int StartInt) (ite StartBool_4 Start_12 Start_2)))
   (Start_4 String ("1" (str.++ Start_5 Start_5) (str.substr Start_4 StartInt StartInt) (str.replace Start_3 Start Start_1) (str.from_int StartInt)))
   (StartBool_3 Bool (false true (not StartBool_4) (str.<= Start_3 Start_9) (str.contains Start_4 Start_3) (= StartInt_3 StartInt_1)))
   (Start_13 String ("" x y (str.++ Start_8 Start_1) (str.at Start_10 StartInt_6) (str.substr Start_11 StartInt_1 StartInt_2) (str.replace Start_8 Start_6 Start_10)))
   (StartInt_6 Int (0 (str.len Start_6)))
   (Start_16 String ("" (str.++ Start_4 Start_1) (str.substr Start_2 StartInt StartInt_6) (str.replace Start_7 Start_2 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y (str.replace "b" x "a"))))

(check-synth)
