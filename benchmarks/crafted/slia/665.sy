(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_15 String) (Start_10 String) (Start_2 String) (StartBool_2 Bool) (Start_4 String) (Start_6 String) (StartInt_6 Int) (StartInt_9 Int) (Start_9 String) (StartBool_3 Bool) (StartInt_3 Int) (StartInt_5 Int) (StartInt_2 Int) (StartInt_8 Int) (StartInt_7 Int) (StartInt_10 Int) (Start_11 String) (Start_12 String) (Start_5 String) (StartInt_4 Int) (Start_1 String) (StartBool_1 Bool) (Start_3 String) (Start_7 String) (StartInt_1 Int) (StartInt_11 Int) (Start_8 String) (Start_13 String))
  ((Start String ("b" (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_1) (str.replace Start_1 Start Start_2) (str.from_int StartInt_2)))
   (StartInt Int (0 (str.len Start_7) (str.indexof Start_12 Start_6 StartInt_4)))
   (StartBool Bool (false (and StartBool StartBool_3) (str.< Start_4 Start_12) (str.prefixof Start_1 Start_1) (str.suffixof Start_10 Start_13) (str.contains Start_5 Start_8) (= Start_1 Start_1) (= StartInt StartInt_9)))
   (Start_14 String ("1" "b" (str.at Start_14 StartInt_4) (str.substr Start_11 StartInt_4 StartInt_5) (str.replace Start_3 Start_5 Start_10) (str.from_int StartInt_4)))
   (Start_15 String ("" (str.at Start_12 StartInt) (str.substr Start_7 StartInt_11 StartInt_5) (str.replace Start_7 Start_11 Start_13) (str.from_int StartInt_3)))
   (Start_10 String ("1" (str.++ Start_10 Start_3) (str.at Start_7 StartInt_5) (str.from_int StartInt_3)))
   (Start_2 String (y "1" (str.++ Start Start_3) (str.at Start_1 StartInt_4) (str.substr Start_4 StartInt StartInt_4) (str.from_int StartInt) (ite StartBool Start_3 Start_2)))
   (StartBool_2 Bool (false true (str.< Start_3 Start_10) (str.prefixof Start_8 Start_9) (str.suffixof Start_11 Start_5) (= StartInt_2 StartInt_10)))
   (Start_4 String (y (str.++ Start_5 Start_4) (str.at Start_1 StartInt_5) (str.substr Start StartInt_4 StartInt) (ite StartBool_1 Start Start_6)))
   (Start_6 String (y (str.++ Start_1 Start_7) (str.at Start_8 StartInt_2) (str.substr Start_1 StartInt_4 StartInt_4) (str.from_int StartInt_6) (ite StartBool Start_3 Start_1)))
   (StartInt_6 Int (1 0 (str.indexof Start_7 Start_7 StartInt_2) (str.to_int Start)))
   (StartInt_9 Int (1 (str.indexof Start_5 Start_3 StartInt) (str.to_int Start_1)))
   (Start_9 String ("1" y "a" (str.at Start_5 StartInt_7) (str.substr Start_10 StartInt_6 StartInt) (str.replace Start_6 Start_2 Start_6) (str.from_int StartInt_7)))
   (StartBool_3 Bool (true (str.<= Start_5 Start_11) (str.prefixof Start_14 Start) (str.suffixof Start_6 Start_11) (str.contains Start_4 Start_15)))
   (StartInt_3 Int (1 (str.indexof Start_2 Start_1 StartInt)))
   (StartInt_5 Int (1 0 (str.len Start_6) (str.indexof Start_5 Start_11 StartInt_6)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_2 StartInt_3)))
   (StartInt_8 Int (1 0 (str.len Start_1) (str.indexof Start_6 Start_4 StartInt)))
   (StartInt_7 Int (1 (str.indexof Start_4 Start_2 StartInt_8) (str.to_int Start_1)))
   (StartInt_10 Int (0))
   (Start_11 String ("a" (str.substr Start_12 StartInt_1 StartInt_3)))
   (Start_12 String ("1" (str.++ Start_11 Start_2) (str.substr Start_10 StartInt_7 StartInt_7) (str.replace Start_7 Start Start_9) (str.from_int StartInt_5)))
   (Start_5 String ("" (str.at Start_6 StartInt_1) (str.from_int StartInt_1)))
   (StartInt_4 Int (0 (str.len Start) (str.indexof Start_10 Start_8 StartInt_5)))
   (Start_1 String (y (str.at Start_1 StartInt_1) (ite StartBool_1 Start_9 Start_4)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.<= Start_1 Start_2) (str.prefixof Start_9 Start_3) (str.contains Start_1 Start_4)))
   (Start_3 String (x (str.++ Start_8 Start_12) (str.at Start_11 StartInt_7) (str.substr Start_10 StartInt StartInt_2)))
   (Start_7 String ("0" (str.from_int StartInt_9) (ite StartBool Start_10 Start_4)))
   (StartInt_1 Int (0 (str.indexof Start_3 Start_7 StartInt_4) (str.to_int Start_3)))
   (StartInt_11 Int (0 (str.len Start_13) (str.to_int Start_7)))
   (Start_8 String ("" (str.at Start_9 StartInt_4) (str.substr Start_10 StartInt_6 StartInt_3) (str.replace Start_5 Start_5 Start_10)))
   (Start_13 String ("1"))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.prefixof y x) "a" "")))

(check-synth)
