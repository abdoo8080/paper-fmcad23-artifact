(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (StartBool_1 Bool) (Start_2 String) (StartInt_2 Int) (Start_4 String) (Start_1 String) (StartBool_4 Bool) (Start_9 String) (Start_13 String) (Start_3 String) (Start_5 String) (Start_6 String) (Start_11 String) (StartInt_5 Int) (StartBool_2 Bool) (Start_8 String) (Start_10 String) (Start_7 String) (StartInt_3 Int) (Start_14 String) (StartBool_3 Bool) (StartInt_4 Int) (Start_12 String))
  ((Start String (x (str.at Start_1 StartInt_1) (str.substr Start StartInt StartInt_2) (str.replace Start_1 Start_1 Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (0 1 (str.len Start_5) (str.indexof Start_8 Start_3 StartInt_2)))
   (StartBool Bool (false (str.< Start_11 Start_12) (str.<= Start_4 Start_7) (<= StartInt_3 StartInt_5)))
   (StartInt_1 Int (0 1))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_4) (str.< Start_3 Start_10) (str.<= Start_9 Start_4) (str.suffixof Start Start_7) (= Start_9 Start_10) (= StartInt_5 StartInt_3) (<= StartInt_2 StartInt_2)))
   (Start_2 String ("a" (str.++ Start_11 Start) (str.substr Start StartInt StartInt_3) (str.replace Start_6 Start_6 Start_14)))
   (StartInt_2 Int (0 (str.len Start_2)))
   (Start_4 String ("a" (str.++ Start_9 Start_5) (str.replace Start_12 Start_6 Start_12)))
   (Start_1 String (x "a" y (str.at Start_5 StartInt_4) (str.replace Start_3 Start_9 Start)))
   (StartBool_4 Bool (false (not StartBool_1) (and StartBool StartBool_3) (str.<= Start_9 Start_14) (str.suffixof Start Start_2) (= StartInt_4 StartInt_2) (<= StartInt_5 StartInt)))
   (Start_9 String ("b" (str.++ Start Start_3) (str.replace Start_9 Start_2 Start_8) (str.from_int StartInt_2) (ite StartBool Start_4 Start_5)))
   (Start_13 String ("0" "a" (str.++ Start_2 Start_10) (str.at Start_3 StartInt_1) (str.substr Start_5 StartInt_5 StartInt_4) (str.from_int StartInt_2) (ite StartBool_2 Start_8 Start_9)))
   (Start_3 String (x (str.++ Start_4 Start_2) (str.at Start_4 StartInt_2) (str.substr Start StartInt StartInt) (str.replace Start_5 Start_4 Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start_1)))
   (Start_5 String ("" "0" (str.from_int StartInt) (ite StartBool_2 Start_6 Start_5)))
   (Start_6 String ("b" (str.++ Start_1 Start_1) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_7 Start_3 Start_8)))
   (Start_11 String ("0" (str.substr Start_7 StartInt_4 StartInt) (str.from_int StartInt_3) (ite StartBool_3 Start_10 Start_6)))
   (StartInt_5 Int (1 (str.to_int Start_13)))
   (StartBool_2 Bool (true false (not StartBool_4) (and StartBool StartBool_3) (str.< Start_8 Start_9) (str.<= Start Start_11) (str.prefixof Start Start_12) (str.suffixof Start_12 Start_9) (str.contains Start_3 Start_8)))
   (Start_8 String ("b" "1" (str.++ Start_1 Start_6) (str.substr Start_2 StartInt_2 StartInt_1) (str.from_int StartInt_2)))
   (Start_10 String (x (str.++ Start_5 Start_3) (str.at Start_11 StartInt_3) (str.substr Start_3 StartInt_4 StartInt) (str.from_int StartInt_1)))
   (Start_7 String ("0" (str.at Start_5 StartInt_1) (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start_3 Start_9 Start_1) (ite StartBool_2 Start Start_10)))
   (StartInt_3 Int (0 (str.len Start_10) (str.to_int Start_1)))
   (Start_14 String ("1" "0" "" (str.++ Start_1 Start_6) (str.at Start_6 StartInt_1) (ite StartBool_4 Start_3 Start_4)))
   (StartBool_3 Bool (true false (and StartBool StartBool) (str.< Start_7 Start_5) (str.suffixof Start_3 Start_6) (str.contains Start_12 Start_2) (= StartInt_4 StartInt_3)))
   (StartInt_4 Int (1 (str.len Start_4)))
   (Start_12 String (x (str.at Start_3 StartInt) (str.substr Start_10 StartInt_5 StartInt_2) (str.replace Start_6 Start_4 Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.at "a" (str.len (str.substr y 0 1))) x "1")))

(check-synth)
