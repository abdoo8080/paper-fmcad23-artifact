(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (Start_13 String) (Start_12 String) (StartInt_6 Int) (StartInt_3 Int) (Start_11 String) (StartInt_4 Int) (Start_10 String) (StartInt_8 Int) (StartBool_2 Bool) (Start_3 String) (Start_1 String) (Start_6 String) (StartInt_2 Int) (StartInt_1 Int) (Start_9 String) (StartInt_5 Int) (Start_5 String) (Start_2 String) (Start_7 String) (StartBool_3 Bool) (Start_4 String) (StartBool_1 Bool) (StartInt_7 Int) (Start_8 String))
  ((Start String ("b" "a" (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt)))
   (StartInt Int (0 1 (str.len Start) (str.indexof Start_1 Start_4 StartInt) (str.to_int Start_5)))
   (StartBool Bool (true (not StartBool) (and StartBool_2 StartBool_3) (str.<= Start_4 Start_11) (str.suffixof Start_10 Start_2) (= Start_9 Start_1) (= StartInt StartInt_2) (<= StartInt_8 StartInt_4)))
   (Start_14 String ("a" (str.replace Start_10 Start_3 Start_7)))
   (Start_13 String (x "a" (str.at Start_14 StartInt_4)))
   (Start_12 String ("a" "" (str.at Start_9 StartInt_4) (str.substr Start_6 StartInt StartInt_7) (str.replace Start_2 Start_9 Start_7) (str.from_int StartInt_6)))
   (StartInt_6 Int (1))
   (StartInt_3 Int (1 (str.len Start) (str.to_int Start_9)))
   (Start_11 String (y (str.++ Start_2 Start_12) (str.at Start_7 StartInt_6) (str.substr Start_6 StartInt_1 StartInt_2) (str.from_int StartInt_4)))
   (StartInt_4 Int (1 (str.len Start_1) (str.to_int Start_8)))
   (Start_10 String ("0" "a" "1" y (str.replace Start_3 Start_3 Start_6) (str.from_int StartInt)))
   (StartInt_8 Int (0 1))
   (StartBool_2 Bool (true (str.< Start_7 Start_5) (str.prefixof Start Start_4) (str.suffixof Start_6 Start) (str.contains Start_8 Start_1) (= Start_6 Start_8) (<= StartInt_2 StartInt_1)))
   (Start_3 String (x "a" (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt_2) (str.from_int StartInt_1)))
   (Start_1 String (x "0" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt StartInt_2) (str.replace Start_3 Start_1 Start) (str.from_int StartInt_1)))
   (Start_6 String ("b" "" (str.++ Start_3 Start_2) (str.replace Start_2 Start_9 Start_10) (str.from_int StartInt_7) (ite StartBool Start Start_10)))
   (StartInt_2 Int (1 0 (str.to_int Start_1)))
   (StartInt_1 Int (1 0 (str.len Start_2) (str.to_int Start_1)))
   (Start_9 String ("" (str.substr Start_3 StartInt_3 StartInt_1) (str.from_int StartInt_4) (ite StartBool_1 Start_10 Start_6)))
   (StartInt_5 Int (0 (str.len Start_11)))
   (Start_5 String ("a" (str.++ Start Start_2) (str.at Start_4 StartInt_3) (str.replace Start_6 Start_1 Start) (ite StartBool_1 Start_6 Start_6)))
   (Start_2 String ("a" x (str.++ Start_4 Start_4) (str.at Start_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool Start_1 Start_3)))
   (Start_7 String ("1" "0" (str.at Start_4 StartInt_1) (str.substr Start_6 StartInt_2 StartInt_5) (str.replace Start_5 Start_4 Start_6)))
   (StartBool_3 Bool (true (and StartBool_2 StartBool) (str.<= Start_12 Start_6) (str.prefixof Start_9 Start_1) (str.contains Start_3 Start_3) (= Start_13 Start_12)))
   (Start_4 String ("a" y "" "1" "0" (str.replace Start Start_1 Start_2) (ite StartBool Start_3 Start_1)))
   (StartBool_1 Bool (true (and StartBool_2 StartBool_2) (str.< Start Start_4) (str.suffixof Start_5 Start) (str.contains Start_5 Start_5)))
   (StartInt_7 Int (0 (str.len Start_11) (str.indexof Start_3 Start_4 StartInt_5) (str.to_int Start_1)))
   (Start_8 String ("0" (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_9 Start_4 Start) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ x (str.at y 1)) 0)))

(check-synth)
