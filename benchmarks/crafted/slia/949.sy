(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_6 Int) (StartBool_2 Bool) (StartInt_1 Int) (Start_2 String) (StartInt_5 Int) (Start_3 String) (StartInt_2 Int) (Start_4 String) (Start_6 String) (StartInt_3 Int) (Start_7 String) (Start_8 String) (StartInt_4 Int) (Start_12 String) (Start_9 String) (Start_10 String) (Start_13 String) (Start_5 String) (Start_1 String) (StartBool_1 Bool) (Start_11 String))
  ((Start String (y (str.++ Start Start_1) (str.at Start StartInt_1) (str.replace Start_2 Start_2 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_4 Start_3)))
   (StartInt Int (1 (str.len Start_11)))
   (StartBool Bool (false true (and StartBool_1 StartBool_2) (str.<= Start_3 Start_3) (str.prefixof Start_3 Start_4) (str.suffixof Start_10 Start) (= Start_9 Start_14) (<= StartInt_4 StartInt_6)))
   (Start_14 String ("" "0" x (str.++ Start_14 Start_10) (str.at Start_1 StartInt_5) (str.substr Start_11 StartInt_1 StartInt_3) (str.replace Start Start_12 Start_4) (ite StartBool_2 Start_3 Start_7)))
   (StartInt_6 Int (1 0 (str.indexof Start_9 Start_11 StartInt_4) (str.to_int Start_13)))
   (StartBool_2 Bool (true (str.< Start_12 Start_9) (str.<= Start_14 Start) (str.contains Start_13 Start_13) (= StartInt_1 StartInt_6)))
   (StartInt_1 Int (0 (str.len Start_9) (str.indexof Start_3 Start_7 StartInt_5) (str.to_int Start_13)))
   (Start_2 String ("" "b" "0" "1" "a" x y (str.++ Start_11 Start_7) (str.at Start_3 StartInt_5) (str.replace Start_6 Start_4 Start_1)))
   (StartInt_5 Int (1))
   (Start_3 String (y (str.at Start_13 StartInt) (str.substr Start_11 StartInt_5 StartInt_1) (str.replace Start_2 Start Start_13)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_5 Start StartInt)))
   (Start_4 String ("1" (str.at Start_5 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_6 Start_3)))
   (Start_6 String (x "1" (str.++ Start_4 Start_4) (str.at Start_6 StartInt) (str.replace Start_5 Start_7 Start_5) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.to_int Start_6)))
   (Start_7 String (y "" "0" "a" x (str.at Start_8 StartInt_1)))
   (Start_8 String ("a" x (str.at Start_9 StartInt_3) (ite StartBool_1 Start_4 Start_8)))
   (StartInt_4 Int (1 (str.indexof Start_8 Start StartInt) (str.to_int Start_3)))
   (Start_12 String ("a" "0" (str.++ Start_8 Start_6) (str.substr Start_7 StartInt_4 StartInt_3)))
   (Start_9 String ("b" (str.substr Start_9 StartInt_4 StartInt)))
   (Start_10 String ("a" "1" (str.++ Start_1 Start_7) (str.at Start_9 StartInt) (str.substr Start_2 StartInt_1 StartInt_2)))
   (Start_13 String ("1" (str.++ Start_5 Start_11) (str.at Start_10 StartInt_2) (str.substr Start_11 StartInt_1 StartInt_1)))
   (Start_5 String (x (str.at Start_1 StartInt_4) (str.substr Start_10 StartInt_1 StartInt) (str.from_int StartInt)))
   (Start_1 String ("b" (str.at Start_7 StartInt_4) (str.substr Start_14 StartInt StartInt_1) (str.from_int StartInt_4) (ite StartBool_2 Start_11 Start_5)))
   (StartBool_1 Bool (false (str.<= Start Start_11) (str.prefixof Start Start) (str.contains Start_10 Start_5)))
   (Start_11 String ("b" x (str.at Start_8 StartInt_1) (str.replace Start_10 Start_11 Start_12) (ite StartBool_1 Start_7 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains y "1") "b" "1")))

(check-synth)
