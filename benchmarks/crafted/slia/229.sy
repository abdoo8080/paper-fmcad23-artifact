(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (StartBool_2 Bool) (StartInt_6 Int) (StartBool_1 Bool) (Start_8 String) (Start_11 String) (StartInt_2 Int) (Start_3 String) (Start_5 String) (Start_6 String) (StartInt_5 Int) (Start_10 String) (StartInt_4 Int) (Start_2 String) (Start_9 String) (Start_4 String) (StartInt_1 Int) (StartInt_3 Int) (Start_7 String) (Start_1 String))
  ((Start String ("1" y "b" "a" (str.++ Start_1 Start_2) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_2 StartInt) (str.replace Start_3 Start Start_1) (str.from_int StartInt_2)))
   (StartInt Int (1 (str.to_int Start_5)))
   (StartBool Bool (true false (str.< Start_2 Start_6) (str.prefixof Start_8 Start_1) (<= StartInt_3 StartInt_5)))
   (StartInt_7 Int (1 0 (str.len Start) (str.indexof Start_8 Start StartInt_5)))
   (StartBool_2 Bool (true (str.< Start_11 Start_4) (str.prefixof Start_2 Start_4) (str.suffixof Start_2 Start_11) (= Start_2 Start_11) (<= StartInt_6 StartInt)))
   (StartInt_6 Int (0 (str.indexof Start_3 Start_11 StartInt_2)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.contains Start_5 Start_1)))
   (Start_8 String (y "a" (str.at Start_5 StartInt_6) (str.substr Start_9 StartInt_2 StartInt_1) (str.replace Start_1 Start_8 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_10 Start_4)))
   (Start_11 String ("a" (str.at Start_9 StartInt_7) (str.replace Start_7 Start_1 Start_10) (str.from_int StartInt) (ite StartBool Start_11 Start_5)))
   (StartInt_2 Int (0 1 (str.len Start_4) (str.indexof Start_4 Start_1 StartInt_2)))
   (Start_3 String ("1" "0" "a" "" x (str.at Start_4 StartInt_2) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_4 Start_1 Start_3)))
   (Start_5 String ("b" (str.++ Start_2 Start_1) (str.at Start_2 StartInt_1) (str.substr Start_2 StartInt_3 StartInt_1) (str.replace Start Start_2 Start_4) (str.from_int StartInt_3)))
   (Start_6 String (x (str.++ Start_7 Start_5) (str.at Start_6 StartInt_2) (str.replace Start_2 Start_3 Start_2) (str.from_int StartInt_5)))
   (StartInt_5 Int (0))
   (Start_10 String ("a" x "" (str.++ Start_2 Start_8) (str.replace Start_10 Start_3 Start_4) (ite StartBool Start_8 Start_4)))
   (StartInt_4 Int (1 (str.len Start_3) (str.indexof Start_4 Start StartInt_4)))
   (Start_2 String (y (str.at Start StartInt) (str.substr Start_4 StartInt_5 StartInt_5) (str.from_int StartInt_2)))
   (Start_9 String ("" y (str.++ Start_10 Start_6)))
   (Start_4 String ("a" (str.++ Start_1 Start_5) (str.substr Start StartInt_3 StartInt_4) (str.replace Start_3 Start Start) (str.from_int StartInt_4)))
   (StartInt_1 Int (0 1 (str.len Start_6)))
   (StartInt_3 Int (0 1 (str.len Start) (str.indexof Start_5 Start_3 StartInt_3)))
   (Start_7 String ("b" (str.at Start StartInt_5) (str.replace Start_2 Start_6 Start_7)))
   (Start_1 String (x "b" (str.++ Start_7 Start_7) (str.from_int StartInt_3) (ite StartBool Start_2 Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "0" y "a")))

(check-synth)
