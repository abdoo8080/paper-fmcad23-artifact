(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (Start_2 String) (StartInt_7 Int) (Start_11 String) (Start_14 String) (StartBool_4 Bool) (Start_10 String) (Start_8 String) (Start_3 String) (Start_9 String) (Start_12 String) (StartBool_1 Bool) (StartInt_8 Int) (StartInt_6 Int) (Start_6 String) (Start_5 String) (StartBool_3 Bool) (Start_1 String) (Start_4 String) (StartInt_4 Int) (StartInt_3 Int) (Start_7 String) (StartInt_1 Int) (StartBool_2 Bool) (StartInt_5 Int) (StartInt_2 Int))
  ((Start String (y "b" x (str.++ Start_1 Start) (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_1 Start Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_3)))
   (StartInt Int (0 1 (str.len Start_9) (str.indexof Start_8 Start_12 StartInt_7)))
   (StartBool Bool (false (= Start_9 Start_3) (<= StartInt StartInt_8)))
   (Start_13 String ("1" "a" "b" "0" (str.++ Start_3 Start) (str.at Start_14 StartInt) (str.substr Start_14 StartInt_1 StartInt_1) (str.replace Start Start_4 Start_1) (str.from_int StartInt_7)))
   (Start_2 String ("" (str.++ Start_12 Start_13) (str.replace Start_5 Start_10 Start_1)))
   (StartInt_7 Int (1 0 (str.len Start_12) (str.to_int Start_8)))
   (Start_11 String ("0" (str.replace Start_3 Start_12 Start_1) (str.from_int StartInt_5)))
   (Start_14 String ("b" (str.++ Start_9 Start_1) (str.replace Start_4 Start_8 Start_6)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.<= Start_9 Start_11) (str.contains Start_2 Start_4) (= Start_10 Start_5)))
   (Start_10 String ("0" (str.++ Start_1 Start_6)))
   (Start_8 String ("a" y "" (str.++ Start_9 Start_2) (str.replace Start_2 Start_1 Start_1) (ite StartBool_4 Start_10 Start_8)))
   (Start_3 String ("0" (str.++ Start Start_4) (str.substr Start_2 StartInt_5 StartInt_6) (str.from_int StartInt_4)))
   (Start_9 String ("1" "" "b" "0" (str.++ Start_4 Start_4) (str.at Start_10 StartInt_5) (str.substr Start_4 StartInt_4 StartInt_3) (str.from_int StartInt_2) (ite StartBool_1 Start_9 Start_1)))
   (Start_12 String ("1" (str.at Start_10 StartInt_7) (str.substr Start_10 StartInt_6 StartInt_1) (str.replace Start_2 Start_7 Start) (str.from_int StartInt) (ite StartBool_3 Start_12 Start_1)))
   (StartBool_1 Bool (false (not StartBool_2) (str.<= Start_4 Start_3) (str.prefixof Start_4 Start_4) (= Start_3 Start)))
   (StartInt_8 Int (1 (str.len Start_14)))
   (StartInt_6 Int (0 1 (str.len Start_8) (str.to_int Start_3)))
   (Start_6 String ("a" (str.substr Start_6 StartInt_2 StartInt_2) (str.from_int StartInt) (ite StartBool_3 Start_2 Start_1)))
   (Start_5 String ("1" (str.++ Start_2 Start_2) (str.at Start_2 StartInt_1) (str.replace Start_6 Start_1 Start)))
   (StartBool_3 Bool (true (str.<= Start Start_2) (str.prefixof Start_5 Start_2) (str.contains Start_7 Start_4) (= StartInt_3 StartInt_2) (<= StartInt_1 StartInt_4)))
   (Start_1 String ("0" y (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start_11 Start_1 Start_14) (str.from_int StartInt)))
   (Start_4 String ("a" (str.at Start_3 StartInt)))
   (StartInt_4 Int (1 (str.len Start_3) (str.to_int Start_1)))
   (StartInt_3 Int (1 0 (str.to_int Start_1)))
   (Start_7 String ("" (str.++ Start_7 Start_5) (str.at Start_3 StartInt_1) (str.from_int StartInt_5) (ite StartBool_2 Start_1 Start_2)))
   (StartInt_1 Int (0 (str.len Start_6)))
   (StartBool_2 Bool (false (not StartBool) (and StartBool_1 StartBool) (str.<= Start_5 Start_4) (str.suffixof Start_5 Start_4) (= StartInt_1 StartInt_2)))
   (StartInt_5 Int (0))
   (StartInt_2 Int (1 0 (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.at x 1)))))

(check-synth)
