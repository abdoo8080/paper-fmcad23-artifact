(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartInt_7 Int) (StartInt_8 Int) (Start_6 String) (Start_12 String) (Start_11 String) (StartBool_1 Bool) (Start_10 String) (StartInt_6 Int) (StartInt_4 Int) (Start_9 String) (Start_2 String) (StartBool_3 Bool) (StartInt_3 Int) (StartInt_1 Int) (StartInt_9 Int) (Start_7 String) (Start_1 String) (StartInt_5 Int) (Start_8 String) (StartInt_10 Int) (Start_4 String) (StartBool_2 Bool) (StartInt_2 Int) (Start_5 String))
  ((Start String ("0" (str.++ Start Start_1) (str.at Start_1 StartInt) (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.indexof Start_1 Start_2 StartInt_1) (str.to_int Start_1)))
   (StartBool Bool (true false (not StartBool_1) (str.<= Start Start_2) (str.contains Start_3 Start_3) (= Start_4 Start_4) (= StartInt_1 StartInt_2) (<= StartInt_3 StartInt_1)))
   (Start_3 String ("b" "1" "" (str.++ Start_8 Start_7) (str.at Start_8 StartInt)))
   (StartInt_7 Int (1 0 (str.len Start) (str.indexof Start_3 Start_1 StartInt_3)))
   (StartInt_8 Int (1 0 (str.to_int Start_2)))
   (Start_6 String ("a" "" (str.substr Start_8 StartInt_3 StartInt_10) (str.replace Start_8 Start_11 Start_6) (str.from_int StartInt_8) (ite StartBool Start_7 Start_3)))
   (Start_12 String ("b" (str.++ Start_2 Start_10) (str.at Start_6 StartInt_4)))
   (Start_11 String ("a" (str.at Start_5 StartInt_8) (str.substr Start_3 StartInt_6 StartInt_9) (str.from_int StartInt_4)))
   (StartBool_1 Bool (true false (str.prefixof Start_6 Start_1) (str.suffixof Start_12 Start_5) (str.contains Start_4 Start) (<= StartInt_2 StartInt_5)))
   (Start_10 String ("b" (str.at Start_6 StartInt_7) (str.replace Start_2 Start_9 Start_9) (ite StartBool_2 Start_3 Start_9)))
   (StartInt_6 Int (0 1 (str.to_int Start_3)))
   (StartInt_4 Int (0 (str.len Start_9) (str.to_int Start)))
   (Start_9 String ("1" (str.++ Start_7 Start_8) (str.at Start_8 StartInt_4) (str.replace Start_3 Start_10 Start_8) (str.from_int StartInt_5)))
   (Start_2 String ("b" (str.++ Start Start_1) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt) (ite StartBool Start Start)))
   (StartBool_3 Bool (false (not StartBool_1) (= StartInt_5 StartInt) (<= StartInt_4 StartInt_2)))
   (StartInt_3 Int (0 1))
   (StartInt_1 Int (0 (str.len Start_1)))
   (StartInt_9 Int (0 1 (str.len Start_12)))
   (Start_7 String (y (str.++ Start_2 Start_1) (str.at Start_1 StartInt_5) (str.from_int StartInt_5)))
   (Start_1 String ("1" x (str.at Start_1 StartInt_1) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 0 (str.len Start_1) (str.indexof Start_8 Start_8 StartInt) (str.to_int Start_6)))
   (Start_8 String ("0" "b" "" x y (str.++ Start_9 Start_3) (str.at Start_6 StartInt_1) (str.substr Start_2 StartInt_2 StartInt_6) (str.replace Start_7 Start_7 Start_7) (str.from_int StartInt_5) (ite StartBool Start_1 Start)))
   (StartInt_10 Int (0 (str.len Start_11)))
   (Start_4 String ("0" "1" (str.++ Start Start) (str.at Start StartInt_1) (str.replace Start_5 Start Start_2) (str.from_int StartInt_2) (ite StartBool Start_1 Start_2)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.< Start_5 Start_8) (str.<= Start_11 Start_11) (str.suffixof Start_5 Start_4) (= StartInt_3 StartInt_7)))
   (StartInt_2 Int (0 (str.to_int Start_2)))
   (Start_5 String ("0" (str.++ Start_1 Start_2) (str.at Start_6 StartInt_4) (str.substr Start_5 StartInt_3 StartInt_3) (str.from_int StartInt_2) (ite StartBool_1 Start_7 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y "" "a") "b" "0")))

(check-synth)
