(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_12 Int) (StartBool_6 Bool) (StartInt_10 Int) (StartInt_13 Int) (StartInt_11 Int) (StartBool_7 Bool) (StartInt_9 Int) (Start_5 String) (StartInt_4 Int) (StartInt_5 Int) (StartInt_6 Int) (Start_4 String) (StartBool_2 Bool) (Start_13 String) (StartInt_1 Int) (Start_10 String) (Start_16 String) (StartInt_2 Int) (Start_3 String) (StartBool_3 Bool) (Start_14 String) (Start_15 String) (Start_8 String) (StartInt_3 Int) (Start_12 String) (StartBool_5 Bool) (StartBool_1 Bool) (StartInt_7 Int) (Start_6 String) (Start_7 String) (Start_11 String) (Start_2 String) (Start_9 String) (Start_1 String) (StartInt_8 Int) (StartBool_4 Bool))
  ((Start String ("a" x (str.++ Start_1 Start_1) (str.substr Start_2 StartInt StartInt) (str.replace Start_1 Start_3 Start_2)))
   (StartInt Int (1 0 (str.len Start_8)))
   (StartBool Bool (true (and StartBool StartBool_4) (str.<= Start_11 Start_5) (<= StartInt_8 StartInt_2)))
   (StartInt_12 Int (0 (str.to_int Start_15)))
   (StartBool_6 Bool (false true (str.< Start_13 Start_2) (str.<= Start_14 Start_6) (str.prefixof Start_10 Start_16) (= Start_9 Start_16) (<= StartInt_12 StartInt_3)))
   (StartInt_10 Int (1 (str.len Start_1)))
   (StartInt_13 Int (0 1 (str.indexof Start_14 Start_3 StartInt_5)))
   (StartInt_11 Int (1 (str.indexof Start_1 Start_11 StartInt_8)))
   (StartBool_7 Bool (true false (str.<= Start_12 Start_15) (str.prefixof Start_1 Start_12) (str.suffixof Start_1 Start_13) (str.contains Start_14 Start) (= Start_11 Start_4) (<= StartInt_7 StartInt_11)))
   (StartInt_9 Int (1 0 (str.indexof Start_2 Start_3 StartInt_8) (str.to_int Start_15)))
   (Start_5 String (y (str.replace Start_5 Start_2 Start_5) (ite StartBool_2 Start_1 Start_3)))
   (StartInt_4 Int (0 (str.len Start_4) (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_4)))
   (StartInt_5 Int (1 0 (str.to_int Start_5)))
   (StartInt_6 Int (0 1 (str.len Start_8)))
   (Start_4 String ("a" x "1" (str.at Start_3 StartInt) (str.substr Start_3 StartInt_3 StartInt) (ite StartBool Start_5 Start_5)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_3 StartBool) (str.< Start Start_6) (str.<= Start_4 Start_3) (str.prefixof Start Start_3) (= StartInt_4 StartInt_3) (<= StartInt_5 StartInt_4)))
   (Start_13 String ("b" (str.++ Start_2 Start_14) (str.at Start_11 StartInt_1) (str.substr Start_7 StartInt_2 StartInt_7) (str.from_int StartInt_8) (ite StartBool Start_8 Start_14)))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.to_int Start)))
   (Start_10 String ("a" (str.at Start_1 StartInt_4) (str.substr Start_4 StartInt_6 StartInt_5) (str.replace Start_7 Start_10 Start_9) (str.from_int StartInt_3)))
   (Start_16 String ("0" "b" (str.++ Start_2 Start_9) (str.at Start_8 StartInt_13) (str.from_int StartInt_7)))
   (StartInt_2 Int (1 (str.len Start_3) (str.to_int Start_7)))
   (Start_3 String ("" x (str.substr Start_2 StartInt StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start_4)))
   (StartBool_3 Bool (true false (not StartBool) (str.<= Start Start_5) (str.suffixof Start_3 Start_8) (= Start_9 Start_6)))
   (Start_14 String (y (str.replace Start_10 Start_2 Start_7)))
   (Start_15 String ("" (str.substr Start_9 StartInt_3 StartInt_3) (str.replace Start_14 Start_13 Start_1) (str.from_int StartInt_10) (ite StartBool_7 Start_9 Start_10)))
   (Start_8 String ("1" "0" (str.++ Start Start_9) (str.at Start_6 StartInt_3) (str.replace Start_2 Start_7 Start_6) (str.from_int StartInt)))
   (StartInt_3 Int (1 0 (str.len Start_9)))
   (Start_12 String ("1" (str.substr Start StartInt_7 StartInt_8) (str.replace Start_7 Start_11 Start_10) (str.from_int StartInt_3) (ite StartBool_2 Start_6 Start_10)))
   (StartBool_5 Bool (false (and StartBool_6 StartBool_6) (str.< Start_14 Start_11) (str.suffixof Start_8 Start_5) (= StartInt_4 StartInt_9) (<= StartInt_8 StartInt_3)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool_2) (str.< Start_2 Start_9) (str.<= Start_11 Start_6) (str.contains Start_6 Start_8) (= Start_9 Start_2) (= StartInt_3 StartInt_7)))
   (StartInt_7 Int (1 (str.indexof Start_7 Start StartInt_6) (str.to_int Start_2)))
   (Start_6 String ("" (str.at Start_1 StartInt_4) (str.replace Start_4 Start_7 Start_6) (str.from_int StartInt_4) (ite StartBool_2 Start_1 Start_2)))
   (Start_7 String (x (str.at Start_1 StartInt_3) (str.substr Start_5 StartInt_4 StartInt) (str.replace Start_2 Start_2 Start_7) (str.from_int StartInt_1) (ite StartBool Start_5 Start_5)))
   (Start_11 String (x (str.++ Start_1 Start) (str.replace Start_10 Start_8 Start_11) (str.from_int StartInt_4)))
   (Start_2 String ("b" "0" "1" "" (str.++ Start_12 Start_7) (str.substr Start_1 StartInt_5 StartInt_3) (str.replace Start_2 Start Start_12) (str.from_int StartInt_2)))
   (Start_9 String ("1" "a" "" "0" (str.++ Start_2 Start_6) (str.at Start_5 StartInt_1) (str.replace Start_7 Start_2 Start_5) (ite StartBool Start_10 Start_3)))
   (Start_1 String (y "b" x (str.++ Start_10 Start_3) (str.at Start_4 StartInt) (str.replace Start_13 Start_7 Start_9) (ite StartBool_1 Start_8 Start_13)))
   (StartInt_8 Int (1 (str.len Start_7) (str.indexof Start_9 Start_10 StartInt_2) (str.to_int Start_6)))
   (StartBool_4 Bool (true (not StartBool_5) (str.<= Start_13 Start_7) (str.prefixof Start_7 Start_8) (str.contains Start_9 Start_4) (= StartInt_4 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains y x) "a" "1")))

(check-synth)
