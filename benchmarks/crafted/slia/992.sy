(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_11 Int) (StartInt_2 Int) (Start_16 String) (Start_1 String) (Start_5 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_3 String) (Start_4 String) (StartInt_3 Int) (Start_10 String) (StartBool_1 Bool) (Start_7 String) (Start_2 String) (Start_14 String) (StartInt_8 Int) (StartBool_3 Bool) (StartInt_5 Int) (Start_6 String) (Start_8 String) (StartInt_4 Int) (StartInt_9 Int) (Start_12 String) (StartBool_4 Bool) (Start_13 String) (Start_11 String) (StartInt_6 Int) (Start_15 String) (StartInt_10 Int) (StartInt_7 Int) (Start_9 String))
  ((Start String ("0" x y (str.++ Start Start_1) (str.replace Start_1 Start Start_2)))
   (StartInt Int (1 (str.to_int Start_6)))
   (StartBool Bool (false (str.< Start_14 Start_3) (str.contains Start_6 Start_8) (<= StartInt_10 StartInt_5)))
   (StartInt_11 Int (0 (str.len Start_4) (str.indexof Start_7 Start_1 StartInt_2) (str.to_int Start_11)))
   (StartInt_2 Int (0 1 (str.len Start_5) (str.indexof Start_2 Start_7 StartInt_3)))
   (Start_16 String ("b" (str.substr Start StartInt_5 StartInt_4) (str.from_int StartInt_6)))
   (Start_1 String ("1" x "0" "a" (str.substr Start_9 StartInt_1 StartInt) (str.replace Start Start_10 Start_1) (str.from_int StartInt_3) (ite StartBool_2 Start_7 Start_8)))
   (Start_5 String ("b" (str.substr Start_1 StartInt StartInt) (str.replace Start Start Start) (ite StartBool Start_6 Start)))
   (StartInt_1 Int (1 (str.len Start_5) (str.to_int Start_5)))
   (StartBool_2 Bool (true (str.< Start_9 Start_9) (str.<= Start_3 Start_10) (str.prefixof Start_7 Start) (str.suffixof Start_9 Start_4) (str.contains Start_5 Start_8) (= Start_4 Start_1) (= StartInt_2 StartInt_3)))
   (Start_3 String ("a" (str.++ Start_3 Start_1) (str.substr Start_3 StartInt StartInt_2) (str.from_int StartInt) (ite StartBool Start_6 Start_3)))
   (Start_4 String ("0" "1" (str.substr Start_2 StartInt StartInt_1) (str.replace Start_3 Start_2 Start) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_3 Int (1 0 (str.len Start_5) (str.to_int Start_2)))
   (Start_10 String ("a" (str.++ Start_4 Start_8) (str.substr Start_10 StartInt_2 StartInt_2) (str.from_int StartInt_3) (ite StartBool_3 Start_8 Start_7)))
   (StartBool_1 Bool (true (not StartBool_1) (str.< Start_1 Start_2) (str.<= Start_3 Start_3) (str.suffixof Start_3 Start) (= Start Start_4) (<= StartInt_1 StartInt)))
   (Start_7 String ("a" (str.at Start_8 StartInt) (str.replace Start_8 Start_3 Start_4) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_4)))
   (Start_2 String (x y (str.++ Start_3 Start_1) (str.at Start_1 StartInt) (str.substr Start_3 StartInt_1 StartInt) (str.replace Start Start Start) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_2)))
   (Start_14 String ("a" (str.++ Start Start_11) (str.substr Start_10 StartInt_2 StartInt_6) (str.from_int StartInt_8) (ite StartBool_2 Start_2 Start_11)))
   (StartInt_8 Int (1 (str.to_int Start_11)))
   (StartBool_3 Bool (true false (and StartBool_2 StartBool_2) (= Start_1 Start_9) (= StartInt_4 StartInt) (<= StartInt_1 StartInt_5)))
   (StartInt_5 Int (1 0))
   (Start_6 String (y x "a" (str.++ Start_3 Start_5) (str.from_int StartInt)))
   (Start_8 String ("" (str.at Start_8 StartInt_1) (str.substr Start_3 StartInt_3 StartInt_2) (str.replace Start_3 Start_6 Start_5) (str.from_int StartInt) (ite StartBool Start_8 Start)))
   (StartInt_4 Int (0 (str.len Start_1) (str.indexof Start_11 Start_12 StartInt_4) (str.to_int Start_11)))
   (StartInt_9 Int (1 (str.indexof Start_1 Start_16 StartInt)))
   (Start_12 String (y "a" "0" "1" "b" (str.replace Start_4 Start_1 Start_4) (str.from_int StartInt_5) (ite StartBool_4 Start_6 Start_8)))
   (StartBool_4 Bool (true false (not StartBool_4) (str.<= Start_6 Start_6) (str.contains Start_5 Start_4) (= Start_13 Start_1) (<= StartInt_2 StartInt_3)))
   (Start_13 String ("1" (str.at Start_3 StartInt_1) (str.replace Start_13 Start_2 Start_13) (ite StartBool_2 Start_7 Start_4)))
   (Start_11 String (x (str.at Start_1 StartInt_4) (str.from_int StartInt_6)))
   (StartInt_6 Int (0 (str.len Start_9) (str.indexof Start Start_14 StartInt_7) (str.to_int Start_11)))
   (Start_15 String ("0" (str.++ Start_13 Start_3) (str.at Start_14 StartInt_2) (str.substr Start_7 StartInt_9 StartInt_6)))
   (StartInt_10 Int (1 (str.indexof Start_3 Start_7 StartInt_11)))
   (StartInt_7 Int (1 (str.len Start_6) (str.to_int Start_13)))
   (Start_9 String ("0" (str.at Start_15 StartInt_3) (str.replace Start_5 Start_4 Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace (str.substr y 0 1) y "") "1")))

(check-synth)
