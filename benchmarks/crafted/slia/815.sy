(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_16 String) (Start_9 String) (Start_8 String) (Start_10 String) (StartBool_1 Bool) (Start_4 String) (Start_2 String) (StartBool_2 Bool) (StartInt_8 Int) (StartInt_5 Int) (StartInt_1 Int) (Start_5 String) (StartInt_2 Int) (StartInt_6 Int) (StartInt_4 Int) (Start_6 String) (Start_11 String) (Start_15 String) (Start_7 String) (StartInt_3 Int) (Start_3 String) (Start_12 String) (StartBool_3 Bool) (StartInt_7 Int) (Start_13 String) (Start_14 String) (Start_1 String))
  ((Start String ("a" "" "1" (str.at Start StartInt) (ite StartBool Start Start)))
   (StartInt Int (1 (str.len Start) (str.indexof Start_1 Start_2 StartInt) (str.to_int Start_2)))
   (StartBool Bool (true false (not StartBool) (str.< Start_16 Start_15) (str.prefixof Start_10 Start_11) (= Start_10 Start) (<= StartInt_1 StartInt_1)))
   (Start_17 String ("a" x "0" (str.replace Start_6 Start_4 Start_1) (str.from_int StartInt_1)))
   (Start_16 String ("" "0" y (str.at Start_13 StartInt_2) (str.replace Start_17 Start_13 Start) (str.from_int StartInt_1) (ite StartBool Start_4 Start_4)))
   (Start_9 String (y (str.substr Start_3 StartInt_6 StartInt_4) (str.replace Start_2 Start_3 Start_8)))
   (Start_8 String ("0" (str.replace Start_7 Start_3 Start_5) (str.from_int StartInt_5) (ite StartBool_2 Start_7 Start_8)))
   (Start_10 String ("b" (str.substr Start_1 StartInt StartInt)))
   (StartBool_1 Bool (false true (not StartBool_1) (and StartBool StartBool_1) (str.< Start_4 Start) (str.<= Start_5 Start) (str.prefixof Start_2 Start_3) (str.suffixof Start_7 Start_5) (str.contains Start_2 Start_4) (= StartInt_4 StartInt_4) (<= StartInt_2 StartInt_5)))
   (Start_4 String ("a" "0" "b" (str.++ Start_5 Start_4) (str.substr Start_6 StartInt_2 StartInt_3) (ite StartBool_1 Start_1 Start_1)))
   (Start_2 String ("0" (str.at Start_1 StartInt) (str.substr Start_3 StartInt_1 StartInt) (str.from_int StartInt_2)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_3 StartBool_3) (str.< Start_6 Start) (str.<= Start_3 Start_5) (str.prefixof Start_2 Start_5) (str.suffixof Start_9 Start_10) (str.contains Start_10 Start_6) (<= StartInt_3 StartInt_2)))
   (StartInt_8 Int (0 (str.to_int Start_2)))
   (StartInt_5 Int (0 (str.indexof Start_5 Start_1 StartInt_5)))
   (StartInt_1 Int (0 (str.len Start_4)))
   (Start_5 String ("" (str.at Start_7 StartInt_8) (str.substr Start_6 StartInt_5 StartInt_3)))
   (StartInt_2 Int (1))
   (StartInt_6 Int (0 1 (str.len Start) (str.indexof Start_9 Start_9 StartInt_3) (str.to_int Start)))
   (StartInt_4 Int (1 0 (str.indexof Start_8 Start_1 StartInt_5)))
   (Start_6 String ("0" (str.replace Start_4 Start_9 Start_13) (str.from_int StartInt_7)))
   (Start_11 String ("b" (str.++ Start_10 Start_9) (str.substr Start_11 StartInt_5 StartInt_6) (str.from_int StartInt_4)))
   (Start_15 String ("" y (str.++ Start_9 Start_14) (str.replace Start_11 Start_12 Start_2) (str.from_int StartInt_8)))
   (Start_7 String ("a" "b" (str.++ Start_5 Start) (ite StartBool Start_9 Start_2)))
   (StartInt_3 Int (1 0 (str.indexof Start_12 Start_1 StartInt_2)))
   (Start_3 String ("b" (str.++ Start_14 Start_15) (str.at Start_5 StartInt_6)))
   (Start_12 String ("a" y (str.++ Start_10 Start_5) (str.substr Start_9 StartInt_7 StartInt_1) (str.replace Start_5 Start_4 Start_12)))
   (StartBool_3 Bool (true false (not StartBool) (str.< Start_9 Start_9) (str.<= Start_1 Start_10) (str.prefixof Start_7 Start_9) (str.contains Start_6 Start_4) (= Start_7 Start_11) (<= StartInt_3 StartInt_3)))
   (StartInt_7 Int (1 0 (str.len Start_1) (str.indexof Start_13 Start StartInt_3) (str.to_int Start)))
   (Start_13 String ("" (str.++ Start_4 Start_12) (str.substr Start_11 StartInt_5 StartInt_1) (str.from_int StartInt_8)))
   (Start_14 String ("1" (str.substr Start_3 StartInt_6 StartInt_3) (str.from_int StartInt)))
   (Start_1 String (y "1" "0" "b" x "" "a" (str.from_int StartInt_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace y (str.++ "0" "a") y) "b" x)))

(check-synth)
