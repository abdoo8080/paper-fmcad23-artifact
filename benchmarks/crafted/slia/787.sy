(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (Start_1 String) (Start_11 String) (Start_9 String) (Start_10 String) (StartBool_3 Bool) (StartInt_3 Int) (StartInt_2 Int) (StartInt_5 Int) (Start_4 String) (StartInt_1 Int) (StartInt_8 Int) (Start_2 String) (Start_7 String) (StartBool_1 Bool) (StartInt_7 Int) (StartInt_6 Int) (StartInt_4 Int) (Start_5 String) (Start_8 String) (Start_6 String) (StartBool_2 Bool) (StartBool_4 Bool))
  ((Start String ("" (str.++ Start_1 Start) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (1))
   (StartBool Bool (true (str.contains Start_4 Start_9) (= Start_5 Start_8) (<= StartInt_8 StartInt_8)))
   (Start_3 String ("a" (str.++ Start_5 Start_10) (str.at Start_10 StartInt_4)))
   (Start_1 String ("1" (str.++ Start_1 Start_3) (str.replace Start Start_2 Start)))
   (Start_11 String ("1" (str.++ Start_9 Start_7) (str.at Start_7 StartInt) (str.substr Start_7 StartInt_1 StartInt_7)))
   (Start_9 String ("a" (str.++ Start_3 Start_11) (str.substr Start StartInt_8 StartInt_8) (ite StartBool_2 Start_11 Start_10)))
   (Start_10 String ("b" (str.++ Start_5 Start_6) (str.at Start_8 StartInt_7) (str.from_int StartInt_6) (ite StartBool_3 Start_4 Start_2)))
   (StartBool_3 Bool (false (str.<= Start_4 Start_3) (str.prefixof Start_9 Start_10) (str.contains Start_5 Start_3) (= Start_10 Start_3)))
   (StartInt_3 Int (1 (str.indexof Start Start_1 StartInt_2)))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start_2 StartInt_1)))
   (StartInt_5 Int (1 0 (str.len Start_8)))
   (Start_4 String ("" (str.at Start_1 StartInt) (str.substr Start_4 StartInt_3 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_1 Int (0 1 (str.indexof Start_1 Start_2 StartInt_2)))
   (StartInt_8 Int (0))
   (Start_2 String (y "a" "1" (str.substr Start_3 StartInt_1 StartInt_2) (ite StartBool_1 Start_3 Start_4)))
   (Start_7 String (y (str.++ Start_1 Start_5) (str.at Start_7 StartInt_3) (str.substr Start_7 StartInt StartInt_5) (str.from_int StartInt) (ite StartBool_4 Start_2 Start_3)))
   (StartBool_1 Bool (true false (and StartBool_2 StartBool) (str.< Start_3 Start) (= Start_2 Start_5) (<= StartInt_1 StartInt_4)))
   (StartInt_7 Int (0 1 (str.indexof Start_8 Start_7 StartInt_4)))
   (StartInt_6 Int (0 (str.len Start_8) (str.indexof Start_8 Start_2 StartInt_2)))
   (StartInt_4 Int (0 1 (str.indexof Start_2 Start_3 StartInt_4)))
   (Start_5 String ("a" (str.++ Start_3 Start_6) (str.replace Start Start_4 Start_1) (str.from_int StartInt_4)))
   (Start_8 String ("0" (str.++ Start_2 Start_8) (str.at Start_3 StartInt_6) (str.replace Start_7 Start_5 Start_8) (str.from_int StartInt_6) (ite StartBool_3 Start_3 Start_1)))
   (Start_6 String (x "0" y "" "a" (str.++ Start Start_5)))
   (StartBool_2 Bool (true (and StartBool StartBool_3) (str.< Start_7 Start_7) (str.<= Start_3 Start_4) (= Start_7 Start_5)))
   (StartBool_4 Bool (true (not StartBool_2) (str.<= Start_8 Start_6) (str.contains Start Start_5) (= StartInt_6 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "1" (ite (str.suffixof y "a") y ""))))

(check-synth)
