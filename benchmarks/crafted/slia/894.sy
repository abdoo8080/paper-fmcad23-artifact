(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_7 String) (Start_1 String) (Start_5 String) (StartInt_1 Int) (Start_2 String) (Start_4 String) (StartInt_3 Int) (Start_3 String) (StartBool_1 Bool) (Start_6 String) (StartInt_2 Int))
  ((Start String (x "1"))
   (StartInt Int (1 0 (str.to_int Start_1)))
   (StartBool Bool (true (not StartBool) (and StartBool StartBool_1) (str.< Start_2 Start_1) (str.prefixof Start_3 Start) (str.suffixof Start_3 Start) (= Start Start_2) (= StartInt_1 StartInt_2) (<= StartInt_3 StartInt)))
   (Start_7 String ("0" "1" "b" (str.++ Start_7 Start) (str.at Start_1 StartInt_1)))
   (Start_1 String ("" "b" y "1" x "a" (str.at Start_1 StartInt) (str.from_int StartInt_1) (ite StartBool Start_1 Start_1)))
   (Start_5 String (x "b" (str.++ Start_3 Start) (str.at Start StartInt_1) (str.from_int StartInt_3) (ite StartBool_1 Start Start_5)))
   (StartInt_1 Int (0 1 (str.to_int Start_1)))
   (Start_2 String (y (str.at Start_5 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start Start_3)))
   (Start_4 String ("b" "a" (str.at Start_2 StartInt) (str.substr Start_1 StartInt_1 StartInt)))
   (StartInt_3 Int (1))
   (Start_3 String ("1" (str.++ Start Start_1) (str.replace Start_1 Start_5 Start_1)))
   (StartBool_1 Bool (false (str.<= Start_5 Start) (str.prefixof Start Start_6)))
   (Start_6 String ("" (str.++ Start_7 Start_1) (str.at Start_6 StartInt_2) (str.replace Start_5 Start_4 Start_4) (str.from_int StartInt)))
   (StartInt_2 Int (1 (str.len Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.indexof x y 1))))

(check-synth)
