(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_2 Bool) (Start_13 String) (StartInt_7 Int) (Start_15 String) (Start_14 String) (StartBool_1 Bool) (StartInt_6 Int) (StartInt_4 Int) (Start_12 String) (Start_1 String) (Start_6 String) (StartInt_8 Int) (Start_2 String) (Start_11 String) (Start_3 String) (StartInt_1 Int) (Start_5 String) (StartInt_5 Int) (StartInt_2 Int) (StartInt_3 Int) (Start_10 String) (Start_4 String) (Start_9 String) (Start_7 String) (Start_8 String))
  ((Start String ("1" y "" "0" (str.from_int StartInt) (ite StartBool Start_1 Start)))
   (StartInt Int (1 (str.indexof Start_10 Start_10 StartInt_8)))
   (StartBool Bool (true false (not StartBool_2) (str.< Start_14 Start_4) (str.contains Start_9 Start_4) (= StartInt StartInt_1)))
   (StartBool_2 Bool (false true (str.<= Start_3 Start_14) (str.prefixof Start_1 Start_12) (str.suffixof Start_15 Start_4) (= Start_3 Start_7) (<= StartInt_8 StartInt_6)))
   (Start_13 String (x (str.++ Start_5 Start_1) (str.substr Start_11 StartInt_8 StartInt_1) (ite StartBool_1 Start_3 Start_9)))
   (StartInt_7 Int (0 (str.len Start_7) (str.to_int Start_13)))
   (Start_15 String ("1" (str.replace Start_4 Start_8 Start_10)))
   (Start_14 String ("0" (str.++ Start_1 Start_5) (str.substr Start_7 StartInt_7 StartInt_3) (str.replace Start_7 Start_11 Start_10) (str.from_int StartInt_3)))
   (StartBool_1 Bool (true false (and StartBool StartBool) (str.< Start_11 Start_10) (str.<= Start_5 Start_7) (str.contains Start_5 Start_10) (<= StartInt_7 StartInt_7)))
   (StartInt_6 Int (1 (str.indexof Start_11 Start_10 StartInt_2)))
   (StartInt_4 Int (0 1 (str.len Start_1) (str.indexof Start_6 Start_11 StartInt_6)))
   (Start_12 String ("b" "" "0" (str.++ Start_2 Start_6) (str.replace Start Start_6 Start_10)))
   (Start_1 String ("b" "0" (str.substr Start_1 StartInt StartInt) (ite StartBool Start_2 Start_1)))
   (Start_6 String (y (str.replace Start_1 Start_7 Start_1) (ite StartBool Start_2 Start_4)))
   (StartInt_8 Int (0 (str.to_int Start_1)))
   (Start_2 String (x (str.++ Start_2 Start) (str.at Start StartInt) (str.replace Start Start_3 Start_1) (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (Start_11 String (x (str.++ Start_11 Start_6) (str.substr Start_6 StartInt_3 StartInt_5) (str.replace Start_7 Start_12 Start_2) (str.from_int StartInt_4)))
   (Start_3 String (x "" (str.replace Start_1 Start_4 Start_3) (str.from_int StartInt_1)))
   (StartInt_1 Int (0 1 (str.len Start_5) (str.to_int Start)))
   (Start_5 String ("" (str.++ Start_2 Start_3) (str.substr Start_4 StartInt_1 StartInt_2) (ite StartBool Start_3 Start_5)))
   (StartInt_5 Int (1 (str.len Start_12)))
   (StartInt_2 Int (1 (str.len Start_3) (str.to_int Start_6)))
   (StartInt_3 Int (0 (str.len Start_1)))
   (Start_10 String ("" (str.++ Start_3 Start_3) (str.at Start_5 StartInt_1) (ite StartBool Start_3 Start_3)))
   (Start_4 String ("1" (str.substr Start_6 StartInt StartInt_3) (str.replace Start Start_5 Start_6) (str.from_int StartInt) (ite StartBool_1 Start_8 Start_9)))
   (Start_9 String ("b" "1" y "0" x "" "a" (str.++ Start_10 Start_2) (str.at Start_5 StartInt) (str.from_int StartInt_1) (ite StartBool Start_10 Start_7)))
   (Start_7 String ("a" x "0" "1" y (str.at Start_3 StartInt_2) (str.from_int StartInt) (ite StartBool Start_1 Start_5)))
   (Start_8 String (y x "" (str.at Start_10 StartInt_3) (str.substr Start StartInt_1 StartInt_4) (str.replace Start_6 Start_11 Start_1) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< x "b") "b" "1")))

(check-synth)
