(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_19 String) (StartInt_10 Int) (Start_18 String) (Start_10 String) (Start_8 String) (StartInt_8 Int) (Start_7 String) (Start_14 String) (StartBool_4 Bool) (Start_6 String) (StartBool_5 Bool) (StartInt_1 Int) (Start_5 String) (Start_4 String) (StartBool_1 Bool) (StartBool_2 Bool) (Start_15 String) (Start_1 String) (Start_9 String) (StartInt_6 Int) (StartInt_2 Int) (Start_20 String) (Start_2 String) (Start_13 String) (Start_11 String) (StartInt_5 Int) (StartInt_7 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_3 String) (StartBool_6 Bool) (Start_12 String) (StartBool_3 Bool) (Start_16 String) (Start_17 String))
  ((Start String (y "0" (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_2 Start_1)))
   (StartInt Int (0 (str.len Start_14) (str.indexof Start_10 Start_18 StartInt_2)))
   (StartBool Bool (false (and StartBool_2 StartBool_3) (str.< Start_8 Start_2) (str.<= Start_2 Start_20) (str.prefixof Start_18 Start_12) (str.suffixof Start_1 Start)))
   (StartInt_9 Int (0 1 (str.indexof Start_1 Start_18 StartInt)))
   (Start_19 String ("a" "0" "1" y (str.at Start_2 StartInt_1) (str.substr Start_14 StartInt_1 StartInt_3) (str.replace Start_7 Start_9 Start_15)))
   (StartInt_10 Int (1 (str.len Start_1) (str.indexof Start_8 Start_20 StartInt_9)))
   (Start_18 String ("b" (str.++ Start_17 Start_18) (str.at Start_14 StartInt_6) (str.substr Start_8 StartInt_9 StartInt_9) (str.replace Start_5 Start_16 Start_9) (ite StartBool_5 Start_16 Start_4)))
   (Start_10 String ("b" x "a" y (str.at Start_1 StartInt_3)))
   (Start_8 String (x (str.++ Start_9 Start_5) (str.substr Start_2 StartInt_4 StartInt_2) (str.replace Start_4 Start_7 Start_10) (str.from_int StartInt_6)))
   (StartInt_8 Int (1 0 (str.len Start_10) (str.indexof Start_9 Start_4 StartInt_5)))
   (Start_7 String ("1" (str.++ Start_4 Start_5) (str.from_int StartInt_6)))
   (Start_14 String ("" "0" "b" x (str.++ Start_14 Start_15) (str.at Start_8 StartInt_2) (str.substr Start_2 StartInt_7 StartInt_5) (ite StartBool_3 Start_3 Start_5)))
   (StartBool_4 Bool (true (not StartBool_3) (str.prefixof Start_12 Start) (str.contains Start_1 Start_1) (= Start_16 Start_12) (= StartInt_7 StartInt_3)))
   (Start_6 String (y (str.++ Start_1 Start) (str.substr Start_3 StartInt_4 StartInt_5) (ite StartBool_1 Start_6 Start_7)))
   (StartBool_5 Bool (true (and StartBool_4 StartBool_6) (str.< Start_9 Start_8) (str.<= Start_5 Start_15) (str.prefixof Start Start_5) (str.contains Start_16 Start_12) (<= StartInt_8 StartInt_3)))
   (StartInt_1 Int (0))
   (Start_5 String (y x (str.at Start_7 StartInt_1) (str.substr Start_10 StartInt_2 StartInt_4) (str.replace Start_1 Start_7 Start) (str.from_int StartInt_7)))
   (Start_4 String ("1" (str.++ Start_2 Start_1) (str.at Start_4 StartInt_3) (str.replace Start_3 Start_5 Start_6) (str.from_int StartInt_1)))
   (StartBool_1 Bool (true (not StartBool) (str.< Start_9 Start_5) (str.prefixof Start_7 Start_3) (str.suffixof Start_10 Start_1) (str.contains Start_10 Start_10) (= Start_7 Start_4) (= StartInt_2 StartInt_2)))
   (StartBool_2 Bool (true (and StartBool StartBool_2) (str.< Start_11 Start_10) (str.<= Start_3 Start_4) (str.prefixof Start_4 Start_13) (str.contains Start_14 Start_4) (= Start_8 Start_12) (= StartInt_5 StartInt_5) (<= StartInt_4 StartInt)))
   (Start_15 String ("1" (str.++ Start_8 Start_5) (str.at Start_7 StartInt) (ite StartBool_4 Start_17 Start_10)))
   (Start_1 String ("a" "0" "1" "b" (str.at Start_15 StartInt_3) (str.replace Start_16 Start_5 Start_10) (str.from_int StartInt_5) (ite StartBool_3 Start_2 Start_5)))
   (Start_9 String ("" (str.at Start_10 StartInt_6) (str.replace Start_2 Start_7 Start_3)))
   (StartInt_6 Int (1 (str.len Start_8) (str.to_int Start_4)))
   (StartInt_2 Int (1))
   (Start_20 String ("b" (str.replace Start Start_2 Start_14)))
   (Start_2 String ("" y x "0" "1" "b" "a" (str.++ Start_2 Start_3) (str.at Start_2 StartInt) (str.substr Start_4 StartInt_1 StartInt_1) (str.from_int StartInt_2)))
   (Start_13 String (x "a" y "1" "b" "" "0" (str.substr Start_13 StartInt_8 StartInt_5) (str.replace Start_4 Start_7 Start_3) (ite StartBool Start_16 Start_6)))
   (Start_11 String ("b" y "0" (ite StartBool Start_8 Start_5)))
   (StartInt_5 Int (0 1 (str.len Start_11) (str.indexof Start_8 Start_10 StartInt_5)))
   (StartInt_7 Int (1 0 (str.len Start_2)))
   (StartInt_4 Int (0 1 (str.indexof Start_8 Start StartInt_6) (str.to_int Start_9)))
   (StartInt_3 Int (0))
   (Start_3 String ("1" y (str.++ Start_9 Start_9) (ite StartBool_1 Start_9 Start_12)))
   (StartBool_6 Bool (false (and StartBool_5 StartBool_2) (str.<= Start_17 Start_19) (str.prefixof Start_3 Start_18) (str.contains Start_16 Start_18) (= Start_4 Start_2) (= StartInt_10 StartInt_8) (<= StartInt_4 StartInt)))
   (Start_12 String (x (str.++ Start_11 Start_11) (ite StartBool_2 Start_6 Start_1)))
   (StartBool_3 Bool (false true (and StartBool StartBool_4) (str.< Start_3 Start_5) (str.<= Start_11 Start_12) (str.suffixof Start_4 Start_8) (str.contains Start_10 Start_7) (= Start_8 Start_7) (<= StartInt_1 StartInt_6)))
   (Start_16 String (y (str.at Start_15 StartInt_5) (str.substr Start_12 StartInt_4 StartInt_4)))
   (Start_17 String (x "1" (str.++ Start_11 Start_11) (str.at Start_10 StartInt_3) (str.substr Start_10 StartInt_2 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ y "a") 1)))

(check-synth)
