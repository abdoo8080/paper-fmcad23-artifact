(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_1 String) (Start_3 String) (Start_6 String) (StartInt_3 Int) (Start_5 String) (StartBool_1 Bool) (Start_2 String) (StartInt_2 Int) (Start_7 String) (Start_4 String) (StartInt_1 Int))
  ((Start String (x "" y "1" "b" (str.++ Start_1 Start_2) (str.substr Start StartInt StartInt) (str.replace Start Start_1 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (0 1 (str.indexof Start_6 Start_5 StartInt_3) (str.to_int Start_8)))
   (StartBool Bool (true (str.< Start_6 Start_1) (str.prefixof Start_8 Start_3) (= Start_1 Start_5) (<= StartInt_2 StartInt)))
   (Start_8 String ("a" "1" "b"))
   (Start_1 String ("1" "b" x "0" "a" (str.++ Start_1 Start_2) (str.replace Start Start_6 Start_2)))
   (Start_3 String ("0" (str.replace Start_2 Start_5 Start_6) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_1)))
   (Start_6 String (y (str.++ Start_5 Start_3) (str.replace Start_6 Start_4 Start_5) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.len Start_1)))
   (Start_5 String (y "a" (str.++ Start_6 Start_6) (str.at Start_7 StartInt) (str.substr Start_5 StartInt_3 StartInt_1) (ite StartBool_1 Start_6 Start_6)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (str.prefixof Start_1 Start_3) (str.suffixof Start_4 Start) (str.contains Start_2 Start_1)))
   (Start_2 String ("a" (str.at Start_2 StartInt_3) (str.substr Start_3 StartInt_1 StartInt_3) (str.replace Start_5 Start Start_4)))
   (StartInt_2 Int (1 (str.len Start_2) (str.indexof Start_5 Start_5 StartInt_2) (str.to_int Start_5)))
   (Start_7 String ("0" x "a" (ite StartBool Start_7 Start)))
   (Start_4 String ("b" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start_2 Start_3) (str.from_int StartInt)))
   (StartInt_1 Int (0 (str.len Start_4) (str.to_int Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "0" y) "a" "")))

(check-synth)
