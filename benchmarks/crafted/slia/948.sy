(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_3 String) (StartInt_7 Int) (Start_10 String) (Start_9 String) (StartBool_2 Bool) (Start_2 String) (Start_1 String) (StartInt_3 Int) (StartInt_2 Int) (Start_4 String) (Start_5 String) (StartInt_4 Int) (StartInt_6 Int) (Start_7 String) (Start_6 String) (StartInt_5 Int) (Start_8 String) (StartBool_1 Bool) (StartInt_1 Int))
  ((Start String ("1" (str.at Start StartInt) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.indexof Start_1 Start StartInt) (str.to_int Start_2)))
   (StartBool Bool (true (str.< Start_9 Start_4) (str.<= Start_9 Start_5) (str.prefixof Start_1 Start_2)))
   (Start_3 String ("b" (str.++ Start_7 Start_2) (str.from_int StartInt_2) (ite StartBool Start_4 Start_9)))
   (StartInt_7 Int (1 0 (str.indexof Start_10 Start_9 StartInt_4) (str.to_int Start_8)))
   (Start_10 String ("b" (str.++ Start_5 Start_7) (str.substr Start_10 StartInt_4 StartInt_7) (str.replace Start_9 Start_7 Start_3) (str.from_int StartInt_3)))
   (Start_9 String ("" "b" (str.++ Start_4 Start_9) (str.at Start_3 StartInt_4) (str.substr Start_10 StartInt_4 StartInt_5) (str.replace Start_10 Start_9 Start_10) (str.from_int StartInt_5)))
   (StartBool_2 Bool (false true (str.< Start_4 Start) (str.<= Start_2 Start_8) (str.suffixof Start_4 Start_9) (str.contains Start_9 Start_3) (= StartInt_6 StartInt) (<= StartInt_3 StartInt)))
   (Start_2 String (x y (str.++ Start_2 Start_3) (str.at Start_4 StartInt_1) (str.replace Start_1 Start Start_5) (str.from_int StartInt) (ite StartBool Start_1 Start_5)))
   (Start_1 String ("0" x (str.++ Start Start_3) (str.replace Start_4 Start_2 Start_4) (str.from_int StartInt_4)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_3 StartInt_2) (str.to_int Start_3)))
   (StartInt_2 Int (1 0 (str.len Start_6) (str.to_int Start_5)))
   (Start_4 String (y "a" (str.++ Start_3 Start_6) (str.replace Start_4 Start Start_1) (str.from_int StartInt_5) (ite StartBool_2 Start_3 Start_3)))
   (Start_5 String ("0" (str.++ Start_1 Start) (str.substr Start_6 StartInt_2 StartInt) (str.replace Start Start_6 Start_7) (str.from_int StartInt) (ite StartBool_1 Start_5 Start_2)))
   (StartInt_4 Int (1 0 (str.len Start_6)))
   (StartInt_6 Int (0 1 (str.len Start_9)))
   (Start_7 String (y (str.at Start_4 StartInt_3) (str.replace Start_2 Start_5 Start_4)))
   (Start_6 String ("" (str.substr Start_1 StartInt_5 StartInt) (str.from_int StartInt_4)))
   (StartInt_5 Int (1 (str.len Start_1) (str.to_int Start_5)))
   (Start_8 String ("1" y "0" (str.++ Start Start_10) (str.substr Start_7 StartInt_3 StartInt) (str.from_int StartInt_7) (ite StartBool_2 Start_2 Start_10)))
   (StartBool_1 Bool (false true (= StartInt_3 StartInt_4)))
   (StartInt_1 Int (1 0 (str.len Start_4) (str.indexof Start_6 Start_1 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "b" y "a") 1)))

(check-synth)
