(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (Start_14 String) (Start_12 String) (StartBool_4 Bool) (Start_9 String) (Start_1 String) (Start_2 String) (StartInt_1 Int) (Start_8 String) (StartBool_3 Bool) (Start_4 String) (Start_10 String) (StartInt_2 Int) (Start_5 String) (StartInt_7 Int) (Start_13 String) (StartBool_1 Bool) (Start_6 String) (StartInt_6 Int) (StartBool_2 Bool) (Start_11 String) (Start_7 String) (StartInt_5 Int) (StartInt_4 Int) (StartInt_3 Int) (Start_3 String))
  ((Start String ("b" "a" (str.++ Start_1 Start_2) (str.at Start_1 StartInt) (str.substr Start StartInt_1 StartInt) (str.replace Start_2 Start_1 Start_3) (str.from_int StartInt_2)))
   (StartInt Int (1 0 (str.len Start_9) (str.to_int Start_2)))
   (StartBool Bool (true false (str.< Start_10 Start_4) (str.suffixof Start_5 Start_15) (= Start Start_4) (= StartInt_1 StartInt_6)))
   (Start_15 String ("a" "b" (str.++ Start_4 Start_10) (str.substr Start_3 StartInt_3 StartInt) (str.from_int StartInt_1)))
   (Start_14 String (x "b" (str.++ Start_3 Start_3) (str.substr Start StartInt_5 StartInt_6)))
   (Start_12 String (x (str.++ Start_8 Start_11) (str.at Start StartInt_1) (str.substr Start_12 StartInt_2 StartInt_2) (ite StartBool_1 Start_11 Start_12)))
   (StartBool_4 Bool (false true (not StartBool_4) (str.< Start_7 Start_7) (str.suffixof Start_2 Start_13) (= Start_8 Start_5)))
   (Start_9 String ("1" (str.at Start_6 StartInt) (str.substr Start_10 StartInt_3 StartInt_3) (str.replace Start_2 Start_6 Start_6) (str.from_int StartInt_6) (ite StartBool_3 Start_7 Start_2)))
   (Start_1 String ("b" (str.++ Start_9 Start_3) (str.from_int StartInt_3) (ite StartBool_2 Start_7 Start_3)))
   (Start_2 String ("" "0" "a" y "1" (str.at Start_8 StartInt_5) (str.from_int StartInt_2)))
   (StartInt_1 Int (1 (str.indexof Start_4 Start_7 StartInt_5) (str.to_int Start_4)))
   (Start_8 String ("1" "0" y x "a" (str.++ Start_2 Start) (str.substr Start_3 StartInt_2 StartInt_5)))
   (StartBool_3 Bool (false true (not StartBool_1) (str.< Start_6 Start_10) (str.suffixof Start_11 Start_7) (str.contains Start_11 Start_12)))
   (Start_4 String (y "" (str.at Start StartInt_1) (str.substr Start StartInt_1 StartInt_3) (str.replace Start Start_2 Start_5) (str.from_int StartInt)))
   (Start_10 String ("0" (str.at Start_7 StartInt_4) (str.replace Start_7 Start_13 Start_4) (str.from_int StartInt_7) (ite StartBool_4 Start_2 Start_4)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.indexof Start_3 Start_4 StartInt_2) (str.to_int Start_4)))
   (Start_5 String ("b" (str.++ Start Start_4) (str.substr Start StartInt StartInt_3) (str.replace Start_3 Start_6 Start_1) (str.from_int StartInt_4) (ite StartBool_1 Start_4 Start_6)))
   (StartInt_7 Int (0 (str.len Start_5)))
   (Start_13 String ("b" "a" (str.++ Start_14 Start_5) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false (not StartBool) (and StartBool_1 StartBool_2) (str.<= Start_1 Start_3) (str.prefixof Start_1 Start_5) (str.suffixof Start_4 Start) (str.contains Start_3 Start) (= Start_5 Start_5) (= StartInt_2 StartInt_4) (<= StartInt_4 StartInt)))
   (Start_6 String ("1" (str.++ Start_3 Start_6) (str.at Start_2 StartInt_1) (str.from_int StartInt_6) (ite StartBool_1 Start Start_2)))
   (StartInt_6 Int (0 (str.len Start_6) (str.indexof Start Start_6 StartInt_6)))
   (StartBool_2 Bool (true (not StartBool) (str.< Start_6 Start_3) (str.<= Start_3 Start_4) (str.suffixof Start_7 Start_6) (= Start_2 Start)))
   (Start_11 String ("" "a" (str.++ Start_13 Start_9) (str.at Start_3 StartInt_4) (str.substr Start_13 StartInt_4 StartInt_3)))
   (Start_7 String ("0" (str.at Start_7 StartInt_4)))
   (StartInt_5 Int (1 (str.indexof Start_7 Start_2 StartInt_3) (str.to_int Start_2)))
   (StartInt_4 Int (1 0 (str.len Start_5) (str.indexof Start_1 Start_1 StartInt_5) (str.to_int Start_7)))
   (StartInt_3 Int (1 (str.len Start_1)))
   (Start_3 String ("b" x "0" "a" (str.at Start StartInt_6) (str.from_int StartInt_6) (ite StartBool_2 Start_5 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" x "b")))

(check-synth)
