(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_13 String) (StartInt_5 Int) (Start_12 String) (Start_9 String) (Start_8 String) (Start_1 String) (StartInt_4 Int) (Start_2 String) (Start_3 String) (Start_5 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_4 String) (StartInt_3 Int) (Start_10 String) (Start_6 String) (Start_7 String))
  ((Start String ("" (str.at Start StartInt_1) (str.substr Start StartInt_1 StartInt) (str.replace Start_1 Start_1 Start_2)))
   (StartInt Int (0 (str.len Start_2) (str.to_int Start_7)))
   (StartBool Bool (true false (not StartBool) (str.< Start_5 Start_9) (str.contains Start_9 Start_8) (= Start_10 Start_7) (<= StartInt_1 StartInt)))
   (Start_11 String ("1" (str.replace Start_8 Start_4 Start_13) (ite StartBool_1 Start_9 Start_10)))
   (Start_13 String ("" "b" (ite StartBool_1 Start_6 Start_7)))
   (StartInt_5 Int (0 1))
   (Start_12 String ("a" (str.at Start_13 StartInt_3) (str.substr Start_12 StartInt_4 StartInt) (str.from_int StartInt_5) (ite StartBool Start_12 Start_7)))
   (Start_9 String ("1" "a" "" y "0" x "b" (str.replace Start Start_10 Start_3) (str.from_int StartInt_4) (ite StartBool Start_11 Start_12)))
   (Start_8 String ("0" (str.at Start_3 StartInt_1) (str.from_int StartInt) (ite StartBool Start_7 Start_6)))
   (Start_1 String ("a" (str.++ Start Start_6) (str.replace Start_5 Start_6 Start_6) (ite StartBool_1 Start_2 Start_6)))
   (StartInt_4 Int (0 (str.indexof Start_8 Start_6 StartInt_1) (str.to_int Start_5)))
   (Start_2 String ("a" "" (str.++ Start_3 Start) (str.replace Start_1 Start_4 Start_3) (str.from_int StartInt_1) (ite StartBool Start_2 Start_1)))
   (Start_3 String ("a" y "0" (str.++ Start_1 Start_3) (str.replace Start_2 Start_4 Start) (ite StartBool_1 Start Start_1)))
   (Start_5 String ("" (str.at Start_6 StartInt_3) (str.substr Start_6 StartInt StartInt_3) (str.replace Start_5 Start_6 Start_5) (str.from_int StartInt_1) (ite StartBool_1 Start Start_1)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start_1 Start_4 StartInt_2) (str.to_int Start_5)))
   (StartBool_1 Bool (false (str.< Start_3 Start_1) (str.suffixof Start_5 Start_4) (= Start Start_1) (= StartInt StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start) (str.indexof Start_2 Start StartInt) (str.to_int Start)))
   (Start_4 String (x (str.++ Start_2 Start_3) (str.at Start StartInt) (str.substr Start_4 StartInt_1 StartInt_1) (str.replace Start_4 Start_1 Start_1) (str.from_int StartInt_1)))
   (StartInt_3 Int (1))
   (Start_10 String ("b" "0" "a" "" (str.++ Start_6 Start_6) (str.from_int StartInt_4)))
   (Start_6 String ("1" (str.from_int StartInt_3) (ite StartBool Start_3 Start_3)))
   (Start_7 String ("a" (str.++ Start Start_2) (str.substr Start_7 StartInt_4 StartInt) (str.replace Start_4 Start Start_1) (str.from_int StartInt_4) (ite StartBool Start_5 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "b" (str.replace "b" "" (str.++ x (str.++ "0" "a"))))))

(check-synth)
