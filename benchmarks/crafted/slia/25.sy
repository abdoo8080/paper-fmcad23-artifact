(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_16 String) (Start_2 String) (StartInt_2 Int) (Start_15 String) (StartBool_4 Bool) (Start_14 String) (Start_7 String) (Start_12 String) (StartInt_5 Int) (StartInt_3 Int) (StartInt_1 Int) (Start_9 String) (Start_1 String) (Start_3 String) (StartBool_1 Bool) (Start_4 String) (StartBool_2 Bool) (Start_5 String) (StartBool_3 Bool) (Start_13 String) (Start_10 String) (Start_6 String) (StartInt_4 Int) (Start_8 String) (Start_11 String))
  ((Start String ("b" y (str.++ Start_1 Start) (str.replace Start_1 Start Start)))
   (StartInt Int (1 (str.indexof Start_2 Start_10 StartInt_5)))
   (StartBool Bool (false (str.<= Start_8 Start_4) (str.prefixof Start_10 Start_1) (str.suffixof Start_7 Start_3) (= Start_8 Start_7) (= StartInt_5 StartInt_2)))
   (StartInt_6 Int (0 (str.len Start_13)))
   (Start_16 String (x "b" "0" "a" "" (str.substr Start_8 StartInt_5 StartInt_1) (str.from_int StartInt_6)))
   (Start_2 String ("1" (str.at Start_7 StartInt) (str.substr Start_6 StartInt_2 StartInt_1) (str.replace Start_16 Start_8 Start_9) (ite StartBool Start_5 Start_2)))
   (StartInt_2 Int (0 1 (str.len Start_12) (str.to_int Start_5)))
   (Start_15 String (y (str.substr Start_6 StartInt_1 StartInt)))
   (StartBool_4 Bool (true (not StartBool_2) (str.suffixof Start_5 Start_4) (= StartInt_2 StartInt_1)))
   (Start_14 String ("" (str.++ Start_2 Start_9) (str.from_int StartInt_1)))
   (Start_7 String (y x (str.at Start_2 StartInt_4) (str.substr Start_13 StartInt_2 StartInt_1)))
   (Start_12 String ("1" (str.at Start_1 StartInt_5) (ite StartBool_2 Start Start_2)))
   (StartInt_5 Int (1))
   (StartInt_3 Int (1 (str.len Start_8) (str.to_int Start_15)))
   (StartInt_1 Int (0 1 (str.indexof Start Start_3 StartInt) (str.to_int Start_2)))
   (Start_9 String ("" (str.++ Start_11 Start_10) (str.at Start_10 StartInt) (str.substr Start StartInt_5 StartInt_1)))
   (Start_1 String ("" (str.at Start_2 StartInt_1)))
   (Start_3 String (x y (str.++ Start Start) (str.substr Start_1 StartInt_2 StartInt_3) (ite StartBool_1 Start Start_3)))
   (StartBool_1 Bool (false (str.< Start_1 Start_1) (str.suffixof Start Start_1) (str.contains Start_4 Start_3) (= Start Start_1)))
   (Start_4 String ("a" (ite StartBool_2 Start_5 Start_4)))
   (StartBool_2 Bool (false true (not StartBool_1) (and StartBool_1 StartBool_3) (str.< Start_3 Start_5) (= StartInt_2 StartInt_2) (<= StartInt_1 StartInt_2)))
   (Start_5 String (x "a" "b" (str.substr Start_2 StartInt_3 StartInt) (str.replace Start_2 Start_2 Start_3)))
   (StartBool_3 Bool (false (not StartBool) (and StartBool_4 StartBool) (str.<= Start Start_6) (str.prefixof Start_2 Start_6) (str.suffixof Start Start_4)))
   (Start_13 String (x "1" "0" "a" (str.substr Start_1 StartInt_3 StartInt_1) (str.replace Start_2 Start_3 Start_4) (str.from_int StartInt_4) (ite StartBool_1 Start_7 Start_14)))
   (Start_10 String ("" "0" y "1" (str.++ Start_8 Start_12) (ite StartBool_4 Start_8 Start_2)))
   (Start_6 String ("a" "1" (str.++ Start_7 Start_8) (str.substr Start_7 StartInt_4 StartInt_1)))
   (StartInt_4 Int (0 1 (str.to_int Start_6)))
   (Start_8 String (x "1" (str.at Start_4 StartInt) (str.replace Start_7 Start_9 Start_7) (ite StartBool Start_10 Start_11)))
   (Start_11 String (y (str.substr Start_10 StartInt_3 StartInt_4) (ite StartBool Start_3 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.< "a" x) "b" "a")))

(check-synth)
