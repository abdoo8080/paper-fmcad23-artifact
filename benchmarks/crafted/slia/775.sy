(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (StartInt_10 Int) (Start_15 String) (Start_1 String) (StartBool_6 Bool) (StartInt_4 Int) (StartInt_3 Int) (StartInt_1 Int) (StartInt_8 Int) (Start_3 String) (StartInt_11 Int) (Start_6 String) (Start_4 String) (Start_7 String) (Start_5 String) (StartBool_1 Bool) (StartInt_5 Int) (Start_8 String) (StartInt_2 Int) (Start_14 String) (StartBool_3 Bool) (Start_10 String) (StartInt_6 Int) (Start_13 String) (StartBool_2 Bool) (Start_9 String) (StartInt_9 Int) (StartBool_5 Bool) (StartInt_7 Int) (Start_11 String) (StartBool_7 Bool) (StartBool_4 Bool) (Start_2 String) (Start_12 String))
  ((Start String ("" (str.++ Start Start_1) (str.replace Start_1 Start Start_1) (ite StartBool_1 Start_1 Start_1)))
   (StartInt Int (1))
   (StartBool Bool (true (not StartBool_3) (and StartBool_1 StartBool_6) (str.< Start Start_5) (str.<= Start_15 Start_14) (str.prefixof Start_3 Start_15) (str.suffixof Start_14 Start_5) (= StartInt_1 StartInt_9) (<= StartInt StartInt_6)))
   (Start_16 String ("a" (str.substr Start_6 StartInt_10 StartInt_2) (ite StartBool_4 Start_11 Start_9)))
   (StartInt_10 Int (1 0 (str.len Start_5) (str.to_int Start_5)))
   (Start_15 String ("a" (str.++ Start_4 Start_9) (str.at Start_12 StartInt_1) (str.replace Start_16 Start_4 Start_4) (str.from_int StartInt_4) (ite StartBool_7 Start_14 Start_10)))
   (Start_1 String ("a" "b" (str.++ Start_1 Start_8) (ite StartBool Start_3 Start_5)))
   (StartBool_6 Bool (false (and StartBool_2 StartBool) (str.< Start_2 Start_15) (str.<= Start_9 Start) (str.prefixof Start_12 Start_11) (str.suffixof Start_5 Start_8) (= StartInt_11 StartInt_1) (<= StartInt_4 StartInt_9)))
   (StartInt_4 Int (1 (str.len Start_7) (str.indexof Start_2 Start_4 StartInt_1) (str.to_int Start_6)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_1 StartInt)))
   (StartInt_1 Int (0 (str.indexof Start_7 Start_3 StartInt_3)))
   (StartInt_8 Int (1 0 (str.to_int Start_1)))
   (Start_3 String ("" "a" (str.++ Start_5 Start) (str.substr Start_7 StartInt_4 StartInt_4) (str.from_int StartInt_3)))
   (StartInt_11 Int (1 0 (str.len Start_10) (str.to_int Start_12)))
   (Start_6 String (x "1" "a" "" (str.at Start_1 StartInt_2) (str.from_int StartInt_2) (ite StartBool_2 Start_6 Start_4)))
   (Start_4 String ("a" y "" "0" "b" x "1" (str.++ Start_6 Start_3) (str.at Start_4 StartInt_4) (str.replace Start_7 Start_2 Start)))
   (Start_7 String ("a" y (str.++ Start_3 Start_2) (str.from_int StartInt_1)))
   (Start_5 String ("b" (str.++ Start_2 Start_5) (str.at Start StartInt) (str.replace Start_6 Start_2 Start_2) (str.from_int StartInt) (ite StartBool_2 Start_5 Start_4)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool StartBool_2) (str.< Start_2 Start_3) (str.suffixof Start_4 Start) (str.contains Start_2 Start_2) (= Start_3 Start_3) (= StartInt_1 StartInt) (<= StartInt_1 StartInt_2)))
   (StartInt_5 Int (0 (str.len Start_3)))
   (Start_8 String ("a" "1" (str.replace Start_1 Start_6 Start_6) (ite StartBool_3 Start_4 Start_6)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_1 Start_5 StartInt)))
   (Start_14 String (x y (ite StartBool_2 Start_13 Start_11)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_2 StartBool_4) (str.< Start_4 Start_9) (str.<= Start_5 Start_8) (= StartInt_5 StartInt_5) (<= StartInt_6 StartInt_7)))
   (Start_10 String ("1" (ite StartBool_5 Start_10 Start_2)))
   (StartInt_6 Int (1 (str.len Start_7) (str.to_int Start)))
   (Start_13 String (x "1" "" (str.++ Start_1 Start)))
   (StartBool_2 Bool (true false (not StartBool_2) (str.< Start_4 Start_5) (= Start_3 Start_7) (= StartInt_4 StartInt_3) (<= StartInt_4 StartInt_1)))
   (Start_9 String ("a" "" (str.++ Start_5 Start_1) (str.at Start_9 StartInt_4) (str.substr Start_10 StartInt_2 StartInt)))
   (StartInt_9 Int (0 (str.len Start_14) (str.indexof Start_3 Start StartInt)))
   (StartBool_5 Bool (true false (str.suffixof Start_3 Start_2) (str.contains Start_1 Start_7) (= Start_11 Start)))
   (StartInt_7 Int (0 1 (str.len Start_3)))
   (Start_11 String ("" y "b" "a" x (str.at Start_4 StartInt_5) (str.replace Start_2 Start_1 Start_10) (ite StartBool_1 Start_1 Start_7)))
   (StartBool_7 Bool (true false (and StartBool StartBool_2) (str.< Start_16 Start_8) (<= StartInt_1 StartInt_10)))
   (StartBool_4 Bool (true false (and StartBool StartBool_4) (str.< Start_9 Start_3) (str.prefixof Start_3 Start_12) (str.contains Start_11 Start_1) (= Start_10 Start_13) (= StartInt_4 StartInt_8)))
   (Start_2 String ("b" (str.++ Start_2 Start_5) (str.at Start_5 StartInt_1) (str.substr Start_6 StartInt_4 StartInt_4) (ite StartBool_2 Start Start_1)))
   (Start_12 String (y "b" "a" (str.++ Start_14 Start_13) (str.at Start_7 StartInt_3) (str.substr Start StartInt_1 StartInt) (str.replace Start_5 Start_9 Start_1) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (= (str.++ y y) x) y (str.++ "a" (str.replace x "a" "b")))))

(check-synth)
