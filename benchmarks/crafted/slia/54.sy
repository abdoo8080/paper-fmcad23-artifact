(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_5 String) (StartInt_3 Int) (StartInt_2 Int) (Start_1 String) (Start_2 String) (Start_4 String) (StartInt_1 Int) (Start_3 String))
  ((Start String ("0" "a" (str.from_int StartInt_1)))
   (StartInt Int (0 1 (str.indexof Start_3 Start_4 StartInt_3)))
   (StartBool Bool (false (str.<= Start_4 Start_2) (= StartInt_2 StartInt_1)))
   (Start_5 String (y "0" (str.++ Start Start_2) (str.from_int StartInt_2) (ite StartBool Start_4 Start)))
   (StartInt_3 Int (0 1 (str.indexof Start_1 Start_2 StartInt_2)))
   (StartInt_2 Int (1 (str.indexof Start Start_3 StartInt_1)))
   (Start_1 String ("b" "a" y (str.++ Start_2 Start_1) (str.substr Start_1 StartInt_2 StartInt_2)))
   (Start_2 String ("" "b" (str.++ Start_2 Start_5) (str.at Start_2 StartInt) (str.substr Start_5 StartInt_3 StartInt_1) (str.from_int StartInt_3)))
   (Start_4 String (y "b" "a" "1" "" x "0" (str.++ Start_1 Start) (str.replace Start Start_4 Start_3) (ite StartBool Start_1 Start_4)))
   (StartInt_1 Int (0 (str.len Start_1) (str.to_int Start_1)))
   (Start_3 String ("" "0" (str.substr Start_1 StartInt_2 StartInt_3) (str.replace Start_4 Start Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" "" (str.++ x "1"))))

(check-synth)
