(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_8 String) (Start_10 String) (Start_6 String) (Start_7 String) (StartInt_8 Int) (StartBool_2 Bool) (StartInt_2 Int) (Start_11 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_7 Int) (Start_2 String) (Start_5 String) (Start_4 String) (StartInt_1 Int) (Start_1 String) (StartInt_3 Int) (StartInt_5 Int) (Start_9 String) (StartInt_6 Int) (Start_12 String) (Start_13 String) (Start_3 String) (StartBool_3 Bool) (Start_14 String) (StartBool_5 Bool))
  ((Start String (y (str.++ Start Start) (str.at Start StartInt) (str.replace Start Start_1 Start_1) (ite StartBool_1 Start_2 Start_3)))
   (StartInt Int (0))
   (StartBool Bool (false (and StartBool StartBool_3) (str.< Start_6 Start_7) (str.<= Start_3 Start_1) (str.prefixof Start_5 Start) (str.contains Start_4 Start_8) (= StartInt_3 StartInt_2) (<= StartInt_3 StartInt_3)))
   (StartBool_4 Bool (true (not StartBool_2) (str.prefixof Start_12 Start_3) (= StartInt_4 StartInt_5) (<= StartInt StartInt_4)))
   (Start_8 String ("0" (str.++ Start_7 Start_9) (str.substr Start_6 StartInt_2 StartInt_3) (str.replace Start_7 Start_9 Start_10) (str.from_int StartInt_5)))
   (Start_10 String ("a" (str.substr Start_10 StartInt_5 StartInt_1)))
   (Start_6 String ("a" (str.from_int StartInt) (ite StartBool Start Start_3)))
   (Start_7 String ("b" "a" (str.substr Start_7 StartInt_1 StartInt_2)))
   (StartInt_8 Int (1 (str.to_int Start_9)))
   (StartBool_2 Bool (true (str.< Start_4 Start_2) (str.prefixof Start_2 Start_2) (str.suffixof Start_6 Start_7) (str.contains Start_2 Start_4) (= Start_6 Start) (<= StartInt_1 StartInt_1)))
   (StartInt_2 Int (1 (str.indexof Start_3 Start_5 StartInt)))
   (Start_11 String (x (str.substr Start_2 StartInt_6 StartInt_3) (str.replace Start_7 Start_4 Start_2) (ite StartBool_5 Start_13 Start_4)))
   (StartBool_1 Bool (true false (and StartBool StartBool_2) (str.< Start_3 Start_6) (str.<= Start_6 Start_4) (str.prefixof Start_2 Start) (= StartInt_1 StartInt_2)))
   (StartInt_4 Int (0 1 (str.to_int Start_1)))
   (StartInt_7 Int (0 (str.indexof Start Start_6 StartInt_3) (str.to_int Start_10)))
   (Start_2 String ("" "b" (str.++ Start_3 Start_4)))
   (Start_5 String ("" "a" (str.++ Start_1 Start_5) (str.from_int StartInt_1)))
   (Start_4 String ("1" y "b" (str.++ Start_2 Start_1) (str.substr Start_5 StartInt StartInt_1)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.indexof Start_2 Start StartInt_1) (str.to_int Start_3)))
   (Start_1 String ("b" "" (str.++ Start_3 Start_1)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start_5 Start_6 StartInt_4) (str.to_int Start_2)))
   (StartInt_5 Int (0 (str.len Start_7) (str.indexof Start_8 Start_10 StartInt)))
   (Start_9 String (y "a" x "1" "0" (str.substr Start_4 StartInt_6 StartInt_3)))
   (StartInt_6 Int (0 (str.len Start_9) (str.indexof Start_7 Start_3 StartInt_2)))
   (Start_12 String (x "0" "b" (str.++ Start_3 Start_6) (ite StartBool_3 Start_11 Start)))
   (Start_13 String ("a" (str.substr Start StartInt_7 StartInt_3) (str.replace Start_12 Start_7 Start_14) (ite StartBool Start_11 Start_9)))
   (Start_3 String (y "0" "1" "b" (str.at Start_3 StartInt) (str.from_int StartInt_1) (ite StartBool_1 Start Start_3)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_2 StartBool_3) (str.< Start_3 Start_10) (str.prefixof Start_5 Start_11) (str.contains Start_8 Start_12) (= Start Start_7) (<= StartInt_6 StartInt_2)))
   (Start_14 String ("1" "" x "0" y (str.replace Start_10 Start_14 Start_8) (str.from_int StartInt_2) (ite StartBool_3 Start_1 Start_3)))
   (StartBool_5 Bool (false (str.<= Start_14 Start) (str.prefixof Start_13 Start) (str.suffixof Start_5 Start_7) (str.contains Start_12 Start_10) (= StartInt_8 StartInt_3) (<= StartInt StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at y (str.indexof x "a" 0))))

(check-synth)
