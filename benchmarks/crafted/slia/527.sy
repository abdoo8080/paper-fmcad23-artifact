(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_10 Int) (Start_16 String) (StartBool_4 Bool) (StartInt_4 Int) (Start_4 String) (Start_1 String) (StartInt_8 Int) (StartInt_9 Int) (StartBool_2 Bool) (Start_12 String) (StartInt_1 Int) (Start_7 String) (StartInt_6 Int) (Start_9 String) (Start_17 String) (Start_3 String) (StartInt_5 Int) (StartInt_3 Int) (StartInt_2 Int) (Start_5 String) (Start_2 String) (Start_6 String) (StartInt_7 Int) (Start_10 String) (Start_8 String) (Start_18 String) (StartBool_3 Bool) (StartBool_1 Bool) (Start_14 String) (Start_13 String) (Start_15 String))
  ((Start String ("a" (str.++ Start Start) (str.substr Start StartInt StartInt) (str.replace Start_1 Start_2 Start_1) (str.from_int StartInt_1) (ite StartBool_1 Start_3 Start)))
   (StartInt Int (0 1 (str.len Start_4)))
   (StartBool Bool (true false (str.< Start_10 Start_8) (str.suffixof Start_4 Start_3) (str.contains Start_11 Start_12) (= Start Start_10) (<= StartInt_1 StartInt_6)))
   (Start_11 String ("1" (str.substr Start_1 StartInt_8 StartInt_7) (str.from_int StartInt_10)))
   (StartInt_10 Int (1 0 (str.indexof Start_8 Start_2 StartInt_6)))
   (Start_16 String (x "1" (str.from_int StartInt_4)))
   (StartBool_4 Bool (false true (not StartBool) (str.prefixof Start_6 Start_4) (<= StartInt_6 StartInt_8)))
   (StartInt_4 Int (0 (str.to_int Start_2)))
   (Start_4 String ("a" (str.++ Start_3 Start_2) (str.replace Start_5 Start_6 Start_2) (str.from_int StartInt)))
   (Start_1 String ("0" "a" "1" (str.++ Start_7 Start_2) (str.at Start_6 StartInt_7) (str.replace Start_7 Start Start_2) (ite StartBool_3 Start_8 Start)))
   (StartInt_8 Int (0 (str.len Start_9) (str.to_int Start_9)))
   (StartInt_9 Int (1))
   (StartBool_2 Bool (true false (str.prefixof Start_7 Start_2) (str.contains Start_1 Start_3) (= StartInt_2 StartInt_3) (<= StartInt_3 StartInt_1)))
   (Start_12 String ("1" (str.at Start_13 StartInt_2) (str.substr Start_10 StartInt_8 StartInt_7) (str.replace Start Start_3 Start_4) (ite StartBool_2 Start_7 Start_11)))
   (StartInt_1 Int (1 (str.len Start_4) (str.indexof Start_3 Start_2 StartInt) (str.to_int Start_5)))
   (Start_7 String ("0" "1" (str.++ Start Start_2) (str.at Start_6 StartInt_5) (str.substr Start_2 StartInt_6 StartInt_7) (str.replace Start_7 Start_5 Start_3) (ite StartBool Start_3 Start_3)))
   (StartInt_6 Int (0 (str.len Start_4) (str.indexof Start_3 Start_2 StartInt_5)))
   (Start_9 String ("a" (str.at Start_2 StartInt_6) (str.substr Start_7 StartInt StartInt_5) (str.replace Start_7 Start_5 Start) (str.from_int StartInt_6) (ite StartBool_3 Start_10 Start_4)))
   (Start_17 String ("a" (str.++ Start_10 Start_13) (str.at Start_18 StartInt_4) (ite StartBool_1 Start_4 Start_7)))
   (Start_3 String ("" (str.++ Start_1 Start_1)))
   (StartInt_5 Int (0 1 (str.len Start) (str.to_int Start_8)))
   (StartInt_3 Int (1 (str.len Start_3) (str.indexof Start Start_3 StartInt_4)))
   (StartInt_2 Int (1 0 (str.len Start_4) (str.to_int Start_5)))
   (Start_5 String ("0" "a" (str.at Start StartInt) (str.substr Start_5 StartInt StartInt) (str.replace Start_4 Start_5 Start) (str.from_int StartInt_1) (ite StartBool Start_3 Start)))
   (Start_2 String ("1" (str.replace Start_1 Start_2 Start) (ite StartBool_2 Start Start_2)))
   (Start_6 String ("b" y (str.at Start_4 StartInt_2) (str.replace Start Start_3 Start_2) (str.from_int StartInt_2)))
   (StartInt_7 Int (1 (str.len Start_7)))
   (Start_10 String ("0" x (str.substr Start_1 StartInt_7 StartInt_4) (str.from_int StartInt_3) (ite StartBool Start Start_8)))
   (Start_8 String ("" (str.at Start_5 StartInt_3) (str.replace Start_6 Start_2 Start_2)))
   (Start_18 String ("b" "1" (str.at Start_4 StartInt_7) (str.replace Start_3 Start_3 Start_18) (str.from_int StartInt_10) (ite StartBool_4 Start_15 Start_14)))
   (StartBool_3 Bool (true false (str.< Start_9 Start_6) (str.prefixof Start Start_5) (str.suffixof Start_8 Start_8) (str.contains Start_7 Start_5)))
   (StartBool_1 Bool (true (str.prefixof Start_1 Start_2) (str.suffixof Start_1 Start_2) (str.contains Start_2 Start_1) (= Start_2 Start_2) (= StartInt_1 StartInt)))
   (Start_14 String ("a" (str.substr Start_2 StartInt_3 StartInt_8) (str.replace Start_11 Start_15 Start_5)))
   (Start_13 String ("b" "" x y "a" "0" "1" (str.++ Start_11 Start_8) (str.substr Start_14 StartInt StartInt_1) (str.from_int StartInt_6)))
   (Start_15 String ("a" "1" (str.at Start_5 StartInt_9) (str.replace Start_9 Start_3 Start_16) (ite StartBool_2 Start_1 Start_17)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.to_int (str.at "b" (str.len y))))))

(check-synth)
