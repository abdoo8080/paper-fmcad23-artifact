(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (Start_18 String) (Start_17 String) (StartBool_2 Bool) (Start_4 String) (Start_14 String) (Start_15 String) (Start_10 String) (StartInt_7 Int) (Start_8 String) (StartInt_2 Int) (Start_6 String) (Start_16 String) (Start_11 String) (Start_7 String) (StartBool_3 Bool) (Start_3 String) (Start_1 String) (Start_12 String) (Start_5 String) (Start_9 String) (Start_13 String) (StartInt_4 Int) (StartInt_3 Int) (StartInt_5 Int) (Start_2 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_6 Int) (StartBool_4 Bool))
  ((Start String ("a" (str.++ Start_1 Start_1) (str.replace Start_1 Start_1 Start_1)))
   (StartInt Int (0 1 (str.len Start_7) (str.to_int Start_14)))
   (StartBool Bool (false true (not StartBool_4) (str.suffixof Start_15 Start_6) (<= StartInt_5 StartInt)))
   (StartBool_5 Bool (true (and StartBool StartBool_4) (str.<= Start_10 Start_10) (str.prefixof Start_4 Start_3) (= Start_16 Start_2)))
   (Start_18 String ("" (str.from_int StartInt_7)))
   (Start_17 String ("b" (str.at Start_18 StartInt_2) (str.substr Start_2 StartInt_1 StartInt_5)))
   (StartBool_2 Bool (false (not StartBool_1) (str.suffixof Start Start_4) (str.contains Start_8 Start_8) (= Start_4 Start_12)))
   (Start_4 String (x (str.++ Start_11 Start_6) (str.at Start_5 StartInt_2) (str.substr Start_11 StartInt_1 StartInt_2) (str.replace Start_1 Start_12 Start_5) (ite StartBool_3 Start_13 Start_9)))
   (Start_14 String ("b" (str.substr Start_3 StartInt_4 StartInt_5) (str.replace Start_3 Start_10 Start_9) (str.from_int StartInt_3) (ite StartBool_3 Start_9 Start_14)))
   (Start_15 String ("0" (str.++ Start_13 Start_7) (str.at Start_5 StartInt_2) (str.substr Start_9 StartInt_6 StartInt_2) (str.replace Start_7 Start_10 Start_7)))
   (Start_10 String (x "b" (str.++ Start_5 Start_7) (str.at Start_6 StartInt_2) (str.substr Start_6 StartInt_2 StartInt_3) (ite StartBool Start_6 Start_4)))
   (StartInt_7 Int (0 1 (str.indexof Start_12 Start_10 StartInt_2) (str.to_int Start_13)))
   (Start_8 String ("b" y "" "1" (str.at Start_2 StartInt_3) (str.replace Start_7 Start_5 Start_5) (str.from_int StartInt_1)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.to_int Start_6)))
   (Start_6 String ("" (str.at Start_1 StartInt_1) (str.substr Start_7 StartInt StartInt) (str.replace Start_3 Start_1 Start_8)))
   (Start_16 String (y "0" (str.++ Start_4 Start_7) (str.at Start_11 StartInt_7) (str.substr Start_6 StartInt_3 StartInt) (str.replace Start_14 Start_5 Start_6) (ite StartBool_5 Start_17 Start_3)))
   (Start_11 String ("a" (str.++ Start_10 Start_7) (str.substr Start StartInt StartInt) (str.replace Start_8 Start_9 Start_9)))
   (Start_7 String ("a" "b" "0" (str.++ Start_1 Start_5) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_7 Start_2 Start_4) (ite StartBool Start Start)))
   (StartBool_3 Bool (true false (not StartBool_1) (and StartBool_3 StartBool_2) (str.< Start_14 Start_4) (str.<= Start_9 Start_9) (str.suffixof Start Start_4) (= Start_3 Start_2) (= StartInt_3 StartInt_1) (<= StartInt_4 StartInt_2)))
   (Start_3 String ("" x "b" "0" "1" (str.++ Start_1 Start_4) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_1 StartInt_1) (str.replace Start_2 Start_3 Start_4) (ite StartBool_1 Start Start_1)))
   (Start_1 String ("0" (str.at Start_1 StartInt) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_2 Start_3 Start_3) (ite StartBool Start_1 Start_1)))
   (Start_12 String ("1" "b" (str.at Start_11 StartInt) (str.replace Start_9 Start_1 Start_12)))
   (Start_5 String ("0" "" x (str.at Start_1 StartInt_1) (str.substr Start_6 StartInt_3 StartInt_1) (str.replace Start_9 Start_6 Start_2) (ite StartBool_2 Start_10 Start_11)))
   (Start_9 String ("1" y))
   (Start_13 String ("0" (str.at Start_11 StartInt_4) (str.substr Start_10 StartInt StartInt_1) (str.replace Start_10 Start_1 Start_8)))
   (StartInt_4 Int (0 1))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.to_int Start)))
   (StartInt_5 Int (0))
   (Start_2 String ("b" "0" "" (str.at Start_12 StartInt_4) (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_5) (ite StartBool_3 Start_4 Start_7)))
   (StartInt_1 Int (1 (str.indexof Start_14 Start_9 StartInt_1) (str.to_int Start_4)))
   (StartBool_1 Bool (true (str.< Start_3 Start_4) (str.<= Start_5 Start_5) (= StartInt StartInt_2)))
   (StartInt_6 Int (0 (str.indexof Start_6 Start_5 StartInt_2) (str.to_int Start_3)))
   (StartBool_4 Bool (true false (and StartBool_1 StartBool_5) (str.prefixof Start_13 Start_7) (str.contains Start_16 Start_3) (= StartInt_7 StartInt_1) (<= StartInt_1 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "" y (str.from_int (str.indexof x "0" 0))) 0)))

(check-synth)
