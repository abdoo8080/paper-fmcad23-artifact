(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (Start_7 String) (Start_5 String) (Start_2 String) (Start_4 String) (Start_3 String) (StartInt_1 Int) (Start_6 String) (Start_8 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_1 String))
  ((Start String ("" y (str.++ Start Start_1) (str.at Start_1 StartInt) (str.substr Start_1 StartInt StartInt_1) (str.replace Start_1 Start Start) (str.from_int StartInt_2) (ite StartBool Start_2 Start)))
   (StartInt Int (1 0 (str.indexof Start_6 Start_8 StartInt_3)))
   (StartBool Bool (false true (and StartBool_1 StartBool) (<= StartInt_1 StartInt_2)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_4 Start_1 StartInt) (str.to_int Start_5)))
   (Start_7 String (y "b" "a" (str.at Start_3 StartInt) (str.replace Start_1 Start_8 Start_4) (ite StartBool_1 Start_4 Start_4)))
   (Start_5 String ("" "0" (str.++ Start_1 Start_2) (str.at Start_3 StartInt) (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start Start_3 Start_3)))
   (Start_2 String ("1" (str.++ Start_3 Start_3) (str.at Start_3 StartInt)))
   (Start_4 String ("a" "" "0" (str.replace Start_1 Start_2 Start_4) (str.from_int StartInt_3)))
   (Start_3 String (y "0" (str.from_int StartInt_3)))
   (StartInt_1 Int (1 0 (str.indexof Start_7 Start_5 StartInt_1) (str.to_int Start_8)))
   (Start_6 String ("b" (str.at Start_6 StartInt_3) (str.from_int StartInt_2)))
   (Start_8 String (y x (str.++ Start_8 Start_8) (str.at Start_7 StartInt_3) (str.substr Start_6 StartInt_1 StartInt_3) (str.replace Start_7 Start_3 Start) (ite StartBool Start_2 Start_5)))
   (StartBool_1 Bool (false (str.<= Start_1 Start_3) (str.prefixof Start Start_3) (str.suffixof Start Start) (str.contains Start_2 Start_4) (= StartInt_3 StartInt_3)))
   (StartInt_2 Int (0 1 (str.indexof Start_3 Start_1 StartInt_2) (str.to_int Start_6)))
   (Start_1 String (y "b" (str.at Start StartInt) (str.replace Start_4 Start_4 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.contains (str.replace x y "") "0") "" x)))

(check-synth)
