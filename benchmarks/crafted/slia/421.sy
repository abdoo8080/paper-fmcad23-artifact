(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_2 String) (StartInt_1 Int) (StartInt_2 Int))
  ((Start String ("b" (str.++ Start_1 Start_2) (str.at Start StartInt_1) (str.substr Start StartInt_2 StartInt) (str.from_int StartInt_2)))
   (StartInt Int (1 0 (str.indexof Start_1 Start StartInt_1) (str.to_int Start_2)))
   (StartBool Bool (false true (<= StartInt_2 StartInt_1)))
   (Start_1 String ("0" x (str.++ Start_2 Start) (str.at Start StartInt_1) (str.replace Start Start_1 Start_2)))
   (Start_2 String ("b" (str.at Start_1 StartInt) (str.substr Start StartInt StartInt) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start StartInt)))
   (StartInt_2 Int (1 (str.len Start) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "1" (str.++ "a" "a"))))

(check-synth)
