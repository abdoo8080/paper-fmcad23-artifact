(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_15 String) (Start_14 String) (Start_10 String) (Start_6 String) (Start_9 String) (Start_8 String) (StartInt_5 Int) (StartInt_1 Int) (Start_11 String) (StartBool_1 Bool) (Start_5 String) (Start_2 String) (StartInt_2 Int) (StartInt_6 Int) (StartInt_3 Int) (Start_1 String) (Start_4 String) (Start_3 String) (StartInt_4 Int) (StartInt_7 Int) (Start_7 String) (Start_13 String) (StartBool_2 Bool))
  ((Start String ("b" (str.at Start StartInt) (str.replace Start Start Start_1) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_8) (str.to_int Start_2)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_2 StartBool_1) (str.prefixof Start_13 Start_11) (str.suffixof Start_15 Start_13) (= Start_15 Start_15) (= StartInt_6 StartInt) (<= StartInt_2 StartInt_1)))
   (Start_12 String (y "a" "1" (str.substr Start_13 StartInt_2 StartInt_6) (str.replace Start_2 Start_2 Start_11)))
   (Start_15 String ("" (str.++ Start_1 Start_11) (str.substr Start_7 StartInt_2 StartInt_2) (str.replace Start_10 Start_4 Start_8) (ite StartBool_2 Start_9 Start_11)))
   (Start_14 String (x "0" "" "b" "a" (str.replace Start_12 Start_4 Start_15) (str.from_int StartInt_1)))
   (Start_10 String (y "a" "b" "" (str.at Start_13 StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_1 Start_11)))
   (Start_6 String ("0" "" y "b" "1" (str.++ Start_10 Start_5) (str.at Start_5 StartInt_1) (str.substr Start_11 StartInt_3 StartInt_4) (str.replace Start_6 Start_5 Start_6) (str.from_int StartInt) (ite StartBool_2 Start_9 Start_7)))
   (Start_9 String (x (str.++ Start_8 Start_3) (str.substr Start_3 StartInt_3 StartInt) (str.replace Start_7 Start_9 Start_4) (str.from_int StartInt_4)))
   (Start_8 String (x "" (str.++ Start_6 Start_5) (str.at Start_3 StartInt_4) (str.replace Start_9 Start_1 Start_3) (str.from_int StartInt_7)))
   (StartInt_5 Int (1 0 (str.indexof Start Start_4 StartInt_6)))
   (StartInt_1 Int (1 0 (str.len Start_2)))
   (Start_11 String ("a" "0" (str.++ Start_6 Start_8) (str.at Start_4 StartInt_2) (str.substr Start_12 StartInt_7 StartInt_3) (str.replace Start_13 Start_3 Start_5) (str.from_int StartInt) (ite StartBool_1 Start_14 Start_14)))
   (StartBool_1 Bool (true false (not StartBool) (str.prefixof Start_4 Start) (str.suffixof Start_3 Start_3) (str.contains Start_1 Start_5) (= StartInt_2 StartInt_4) (<= StartInt_1 StartInt_2)))
   (Start_5 String ("0" (str.++ Start_6 Start_3) (str.substr Start StartInt_4 StartInt_1) (str.replace Start_2 Start_4 Start_7)))
   (Start_2 String ("a" "0" x (str.at Start_2 StartInt_1) (str.replace Start Start_2 Start) (str.from_int StartInt_2)))
   (StartInt_2 Int (0 1 (str.len Start_2) (str.indexof Start_2 Start_3 StartInt) (str.to_int Start_1)))
   (StartInt_6 Int (0 1))
   (StartInt_3 Int (0 (str.indexof Start_3 Start StartInt_1)))
   (Start_1 String ("0" (str.++ Start_2 Start_3) (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start_3 Start_2 Start) (ite StartBool_1 Start Start_4)))
   (Start_4 String ("a" (str.++ Start_3 Start_3) (ite StartBool Start_1 Start_1)))
   (Start_3 String ("a" (str.at Start_3 StartInt_1) (str.substr Start StartInt StartInt_3) (ite StartBool Start_2 Start_2)))
   (StartInt_4 Int (0 (str.len Start_2) (str.indexof Start_4 Start_4 StartInt) (str.to_int Start_2)))
   (StartInt_7 Int (0 1 (str.len Start_9) (str.to_int Start_9)))
   (Start_7 String ("1" (str.++ Start_8 Start_1) (str.from_int StartInt_4) (ite StartBool_2 Start_8 Start_6)))
   (Start_13 String (x "a" (str.++ Start_4 Start_11) (str.at Start StartInt_2) (str.replace Start_8 Start_7 Start_15) (ite StartBool Start_4 Start_4)))
   (StartBool_2 Bool (false (str.< Start_6 Start_8) (str.<= Start_6 Start_6) (= Start_1 Start_5) (= StartInt_5 StartInt) (<= StartInt_2 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace (str.replace "1" "" "0") (str.replace y x "b") x)))

(check-synth)
