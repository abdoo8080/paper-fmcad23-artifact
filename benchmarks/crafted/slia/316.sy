(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_7 Bool) (StartInt_9 Int) (StartBool_4 Bool) (Start_14 String) (StartInt_7 Int) (Start_5 String) (StartBool_1 Bool) (Start_15 String) (Start_3 String) (StartInt_3 Int) (Start_12 String) (Start_2 String) (StartInt_4 Int) (Start_13 String) (Start_1 String) (StartInt_2 Int) (Start_11 String) (Start_6 String) (StartInt_5 Int) (Start_4 String) (StartBool_5 Bool) (StartBool_2 Bool) (Start_9 String) (Start_10 String) (StartBool_3 Bool) (Start_8 String) (StartBool_6 Bool) (StartInt_6 Int) (StartInt_8 Int) (Start_7 String) (StartInt_1 Int))
  ((Start String ("0" "1" y "" "a" (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.replace Start_2 Start_2 Start)))
   (StartInt Int (1 (str.indexof Start_13 Start_4 StartInt_9) (str.to_int Start_14)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_7 StartBool_7) (= StartInt_1 StartInt_2) (<= StartInt_8 StartInt_7)))
   (StartBool_7 Bool (true (str.< Start_12 Start_7) (str.<= Start Start_11) (str.suffixof Start_12 Start_6)))
   (StartInt_9 Int (1 (str.len Start_2)))
   (StartBool_4 Bool (true (not StartBool_4) (str.<= Start_8 Start_1) (str.prefixof Start_5 Start_8) (= StartInt_4 StartInt_1) (<= StartInt_7 StartInt)))
   (Start_14 String (y (str.++ Start_12 Start_11) (str.substr Start_13 StartInt_3 StartInt_2) (ite StartBool_6 Start_6 Start_9)))
   (StartInt_7 Int (0 (str.len Start_9) (str.indexof Start_10 Start_2 StartInt_3)))
   (Start_5 String ("" (str.++ Start Start_6) (str.at Start_2 StartInt_3) (str.replace Start_6 Start_7 Start_1) (ite StartBool_1 Start_6 Start_4)))
   (StartBool_1 Bool (true false (str.prefixof Start Start) (str.suffixof Start_3 Start_1) (str.contains Start_4 Start_4) (= Start_1 Start_2) (<= StartInt_2 StartInt_3)))
   (Start_15 String ("a" (str.substr Start_14 StartInt_2 StartInt_1)))
   (Start_3 String ("0" "a" (ite StartBool_1 Start Start_3)))
   (StartInt_3 Int (1 0 (str.len Start)))
   (Start_12 String (y "b" "" "1" "0" (str.++ Start_4 Start_3) (str.substr Start_4 StartInt_7 StartInt_3) (str.replace Start_10 Start_8 Start_12) (ite StartBool_3 Start_6 Start_1)))
   (Start_2 String ("b" (str.at Start_2 StartInt_2) (str.substr Start StartInt_1 StartInt) (str.from_int StartInt_3)))
   (StartInt_4 Int (0 1 (str.len Start_4) (str.indexof Start_12 Start_8 StartInt)))
   (Start_13 String ("0" "1" y (str.++ Start_10 Start_1) (str.at Start_1 StartInt_8) (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_6)))
   (Start_1 String ("a" (str.++ Start_11 Start_14) (str.replace Start_6 Start_15 Start_14) (str.from_int StartInt_1) (ite StartBool_2 Start_14 Start_1)))
   (StartInt_2 Int (0 (str.indexof Start Start_3 StartInt) (str.to_int Start)))
   (Start_11 String ("" "b" "a" (str.++ Start_10 Start_9) (str.at Start_5 StartInt) (str.substr Start_6 StartInt_3 StartInt_6)))
   (Start_6 String ("0" x (str.++ Start_6 Start_1) (str.from_int StartInt_4) (ite StartBool_2 Start Start_6)))
   (StartInt_5 Int (1 0 (str.len Start_9) (str.to_int Start_8)))
   (Start_4 String ("b" (str.substr Start_5 StartInt_2 StartInt_1) (str.from_int StartInt)))
   (StartBool_5 Bool (false true (not StartBool) (and StartBool_2 StartBool_2) (str.<= Start_11 Start_8) (str.prefixof Start_6 Start_7) (str.contains Start_11 Start_4) (= Start_9 Start_4) (<= StartInt_2 StartInt_3)))
   (StartBool_2 Bool (false (and StartBool StartBool_3) (str.< Start_2 Start_4) (str.<= Start_8 Start_7) (str.prefixof Start_8 Start) (str.contains Start_7 Start_6) (= Start_3 Start_3) (= StartInt_1 StartInt) (<= StartInt_3 StartInt_3)))
   (Start_9 String ("1" "a" (str.++ Start_6 Start_7) (str.at Start_7 StartInt_2) (str.from_int StartInt) (ite StartBool_5 Start_4 Start_10)))
   (Start_10 String (x y (str.at Start_5 StartInt_1) (str.substr Start_10 StartInt_2 StartInt_6) (str.from_int StartInt_6) (ite StartBool Start_4 Start_11)))
   (StartBool_3 Bool (false (and StartBool StartBool_6) (str.< Start_8 Start_11) (str.<= Start_10 Start_11) (str.prefixof Start_9 Start_10) (str.contains Start_12 Start_8) (= StartInt_3 StartInt_3)))
   (Start_8 String ("0" "b" (str.++ Start Start_9) (str.at Start_7 StartInt_5) (str.substr Start_2 StartInt_1 StartInt_6) (str.from_int StartInt_4) (ite StartBool_4 Start_9 Start_1)))
   (StartBool_6 Bool (true false (and StartBool_4 StartBool_3) (str.prefixof Start_11 Start_3) (str.suffixof Start_1 Start_11) (str.contains Start_4 Start_13) (= Start_6 Start_2) (= StartInt_6 StartInt_4)))
   (StartInt_6 Int (0 1 (str.len Start_11) (str.to_int Start_5)))
   (StartInt_8 Int (1 0))
   (Start_7 String ("1" y (str.substr Start_2 StartInt StartInt)))
   (StartInt_1 Int (0 (str.indexof Start Start_6 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "b" "")))

(check-synth)
