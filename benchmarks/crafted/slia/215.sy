(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_6 Bool) (StartInt_1 Int) (Start_2 String) (Start_14 String) (Start_12 String) (Start_13 String) (StartBool_1 Bool) (StartInt_4 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_4 String) (StartInt_5 Int) (Start_1 String) (Start_9 String) (StartInt_2 Int) (Start_11 String) (Start_5 String) (StartInt_3 Int) (Start_3 String) (Start_7 String) (Start_6 String) (StartBool_3 Bool) (StartBool_2 Bool) (Start_10 String) (Start_15 String) (Start_8 String))
  ((Start String (y (str.++ Start Start_1) (str.substr Start_1 StartInt_1 StartInt_1) (ite StartBool Start_2 Start_3)))
   (StartInt Int (1 0 (str.len Start_15) (str.indexof Start_8 Start_7 StartInt_2)))
   (StartBool Bool (false (not StartBool_6) (and StartBool_1 StartBool_2) (str.<= Start_6 Start_5) (str.suffixof Start_2 Start_8) (= Start_11 Start_9) (<= StartInt StartInt_3)))
   (StartBool_6 Bool (false (and StartBool_6 StartBool_6) (str.suffixof Start Start_8) (str.contains Start_9 Start_2) (= StartInt StartInt_5)))
   (StartInt_1 Int (0 1 (str.to_int Start_8)))
   (Start_2 String ("a" "1" (str.at Start_14 StartInt_2) (str.from_int StartInt)))
   (Start_14 String ("a" "1" (str.substr Start StartInt_1 StartInt) (str.replace Start_11 Start_14 Start_13) (ite StartBool_4 Start_8 Start_8)))
   (Start_12 String ("b" x "" (str.++ Start_11 Start_6) (str.substr Start_8 StartInt StartInt_4) (str.replace Start_2 Start_12 Start)))
   (Start_13 String ("b" y (str.substr Start StartInt_2 StartInt_4) (ite StartBool_3 Start_8 Start_3)))
   (StartBool_1 Bool (false true (not StartBool_5) (str.<= Start_2 Start_8) (str.suffixof Start_7 Start_8) (str.contains Start_12 Start_12) (= Start_13 Start_3) (= StartInt_2 StartInt) (<= StartInt_3 StartInt_1)))
   (StartInt_4 Int (0 (str.len Start_2) (str.to_int Start_8)))
   (StartBool_5 Bool (false (str.prefixof Start_3 Start_10) (str.suffixof Start_10 Start_13) (str.contains Start_3 Start_14) (<= StartInt_4 StartInt_2)))
   (StartBool_4 Bool (true false (not StartBool_3) (and StartBool_3 StartBool_3) (str.< Start_6 Start_3) (str.<= Start_8 Start_10) (str.suffixof Start_8 Start_2) (str.contains Start_8 Start_7) (= Start_10 Start_7) (= StartInt_4 StartInt_2)))
   (Start_4 String ("1" "a" "b" y "0" "" x (str.++ Start_5 Start_5) (str.substr Start_5 StartInt_1 StartInt_2)))
   (StartInt_5 Int (1 (str.len Start_1) (str.indexof Start_15 Start_5 StartInt) (str.to_int Start_1)))
   (Start_1 String ("0" y x "1" (str.++ Start_12 Start_15) (str.substr Start_3 StartInt_1 StartInt) (str.replace Start_10 Start_8 Start_7) (str.from_int StartInt) (ite StartBool_2 Start_6 Start_14)))
   (Start_9 String (y "a" (str.++ Start_5 Start_10) (str.at Start_10 StartInt) (str.from_int StartInt_1) (ite StartBool_2 Start Start_9)))
   (StartInt_2 Int (1 0 (str.len Start_3)))
   (Start_11 String (x "" (str.from_int StartInt)))
   (Start_5 String ("1" (str.replace Start_1 Start Start_4) (str.from_int StartInt_3)))
   (StartInt_3 Int (0 (str.to_int Start_6)))
   (Start_3 String ("" "b" (str.++ Start_2 Start_3) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start_3 Start_1 Start) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_1)))
   (Start_7 String (y (str.++ Start_4 Start_6)))
   (Start_6 String (x (str.at Start_4 StartInt_2) (str.replace Start_3 Start Start_1) (ite StartBool_2 Start_6 Start_2)))
   (StartBool_3 Bool (true false (str.< Start_1 Start_5) (str.<= Start_8 Start_7) (str.contains Start_9 Start_10) (<= StartInt StartInt_1)))
   (StartBool_2 Bool (true false (not StartBool_3) (str.< Start_6 Start_5) (str.suffixof Start_5 Start_7) (str.contains Start_2 Start_7) (<= StartInt StartInt_1)))
   (Start_10 String ("b" y "0" (str.++ Start_7 Start_2) (str.replace Start_7 Start_9 Start_7)))
   (Start_15 String ("b" (str.++ Start_2 Start_6) (str.at Start_6 StartInt_2) (str.substr Start_5 StartInt StartInt_3) (str.from_int StartInt_1)))
   (Start_8 String ("1" "a" "0" "b" y (str.substr Start_4 StartInt_4 StartInt_4) (str.replace Start_11 Start_6 Start_5) (str.from_int StartInt_1) (ite StartBool_4 Start_5 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "1" (str.len (str.replace y "" x)))))

(check-synth)
