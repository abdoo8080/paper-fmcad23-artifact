(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartInt_2 Int) (Start_5 String) (Start_3 String) (Start_9 String) (StartInt_8 Int) (Start_2 String) (Start_1 String) (StartInt_3 Int) (Start_4 String) (StartBool_2 Bool) (StartInt_6 Int) (StartBool_4 Bool) (StartInt_4 Int) (StartInt_1 Int) (Start_6 String) (Start_7 String) (Start_12 String) (StartBool_3 Bool) (StartInt_7 Int) (StartBool_1 Bool) (StartInt_9 Int) (StartBool_6 Bool) (StartBool_5 Bool) (Start_11 String) (StartInt_5 Int) (Start_10 String) (Start_8 String))
  ((Start String ("1" (str.++ Start Start) (str.at Start StartInt_1)))
   (StartInt Int (0 1 (str.len Start) (str.to_int Start)))
   (StartBool Bool (false (and StartBool_1 StartBool) (str.prefixof Start Start_1) (= StartInt_2 StartInt) (<= StartInt_3 StartInt_2)))
   (Start_13 String ("0" (str.at Start_9 StartInt_9) (ite StartBool Start_13 Start_6)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start StartInt_3)))
   (Start_5 String ("b" x (str.at Start_6 StartInt) (ite StartBool Start_5 Start_5)))
   (Start_3 String (x "a" y "1" "b" (str.++ Start_1 Start_2) (str.at Start_1 StartInt_4) (str.substr Start_3 StartInt_3 StartInt_4) (str.replace Start Start_1 Start_2)))
   (Start_9 String ("a" (str.at Start_2 StartInt_4) (str.substr Start StartInt_2 StartInt) (str.replace Start_2 Start_5 Start_1) (ite StartBool_3 Start_1 Start_8)))
   (StartInt_8 Int (0))
   (Start_2 String ("0" (str.at Start_2 StartInt) (str.substr Start_4 StartInt_4 StartInt_4) (ite StartBool Start_5 Start_5)))
   (Start_1 String (x (str.++ Start_2 Start_2) (str.at Start_2 StartInt_4) (str.substr Start_7 StartInt_3 StartInt_1) (ite StartBool_2 Start_1 Start)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.indexof Start_3 Start_1 StartInt_3)))
   (Start_4 String (x "0" "b" (str.substr Start_5 StartInt_2 StartInt_1)))
   (StartBool_2 Bool (true (and StartBool_1 StartBool_1) (str.<= Start_4 Start) (str.prefixof Start_2 Start) (str.contains Start_4 Start_4) (= Start_1 Start_3) (<= StartInt_2 StartInt)))
   (StartInt_6 Int (0 (str.len Start_7) (str.indexof Start Start_4 StartInt_3)))
   (StartBool_4 Bool (true false (and StartBool_4 StartBool_2) (str.< Start_5 Start_1) (str.prefixof Start_10 Start_2) (str.suffixof Start_2 Start_6) (= Start_11 Start) (= StartInt_4 StartInt_6) (<= StartInt_6 StartInt_4)))
   (StartInt_4 Int (0 1))
   (StartInt_1 Int (1))
   (Start_6 String ("1" "" y (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_4)))
   (Start_7 String ("b" "0" (str.++ Start_1 Start) (str.at Start StartInt_1) (str.replace Start_8 Start_4 Start) (ite StartBool_3 Start_1 Start_4)))
   (Start_12 String ("b" (str.substr Start_2 StartInt_7 StartInt_8)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool_5 StartBool_6) (str.prefixof Start_1 Start_3) (<= StartInt_5 StartInt_1)))
   (StartInt_7 Int (0 1 (str.len Start_5) (str.indexof Start_8 Start_1 StartInt_6) (str.to_int Start_9)))
   (StartBool_1 Bool (true false (not StartBool_4) (and StartBool_1 StartBool_4) (str.<= Start_11 Start_3) (str.contains Start_9 Start_9) (= Start_4 Start_13)))
   (StartInt_9 Int (1 (str.indexof Start_3 Start_10 StartInt_7) (str.to_int Start_2)))
   (StartBool_6 Bool (true false (str.prefixof Start_5 Start_8) (str.contains Start_2 Start_9) (= Start_1 Start_2) (= StartInt_2 StartInt_3) (<= StartInt_1 StartInt_3)))
   (StartBool_5 Bool (false (not StartBool_3) (str.prefixof Start_9 Start_5) (str.suffixof Start_6 Start) (str.contains Start_2 Start_1) (= Start_6 Start_5) (<= StartInt_5 StartInt)))
   (Start_11 String ("1" "0" (str.substr Start_4 StartInt StartInt_3) (ite StartBool_4 Start Start_2)))
   (StartInt_5 Int (0 (str.to_int Start_9)))
   (Start_10 String (y "a" (str.++ Start_9 Start_1) (str.at Start_12 StartInt) (str.replace Start_1 Start_6 Start_3)))
   (Start_8 String ("b" "" (str.substr Start_5 StartInt StartInt_3) (str.replace Start_12 Start_5 Start_10) (ite StartBool_2 Start_3 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "0" x "b") 1)))

(check-synth)
