(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_13 String) (StartInt_5 Int) (Start_7 String) (Start_6 String) (StartInt_4 Int) (Start_12 String) (StartBool_6 Bool) (StartBool_2 Bool) (StartBool_7 Bool) (StartBool_4 Bool) (Start_1 String) (StartInt_3 Int) (Start_5 String) (Start_10 String) (Start_9 String) (Start_8 String) (StartInt_1 Int) (Start_2 String) (StartBool_3 Bool) (Start_3 String) (Start_4 String) (StartBool_5 Bool) (Start_11 String) (StartInt_2 Int) (StartBool_1 Bool))
  ((Start String ("b" x (str.substr Start StartInt_1 StartInt) (str.replace Start_1 Start Start)))
   (StartInt Int (0 (str.indexof Start_3 Start_2 StartInt_1) (str.to_int Start_1)))
   (StartBool Bool (false (not StartBool_1) (str.< Start_1 Start) (str.suffixof Start Start_2) (str.contains Start_1 Start_1) (= Start Start) (= StartInt_2 StartInt) (<= StartInt_3 StartInt_3)))
   (Start_13 String (y (str.at Start_10 StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_13)))
   (Start_7 String ("a" "1" "b" (str.++ Start_8 Start_11) (str.substr Start_5 StartInt_1 StartInt_4) (str.replace Start_2 Start_5 Start_8) (str.from_int StartInt_4) (ite StartBool_6 Start_3 Start_12)))
   (Start_6 String (x "" (str.++ Start_7 Start_8) (str.replace Start_2 Start_5 Start_6) (str.from_int StartInt_2) (ite StartBool_5 Start_8 Start_8)))
   (StartInt_4 Int (1 0 (str.len Start_6) (str.indexof Start Start_4 StartInt_1)))
   (Start_12 String ("a" x "" (str.++ Start_12 Start_9) (str.replace Start_2 Start_1 Start_8) (str.from_int StartInt_4)))
   (StartBool_6 Bool (false true (str.prefixof Start_3 Start) (= Start_4 Start_3) (= StartInt_4 StartInt_4)))
   (StartBool_2 Bool (false (and StartBool_5 StartBool_6) (str.<= Start_2 Start_3) (str.prefixof Start Start_5)))
   (StartBool_7 Bool (true false (and StartBool StartBool_4) (str.prefixof Start_10 Start_3) (str.contains Start_1 Start_3) (= Start_8 Start_6) (= StartInt_2 StartInt) (<= StartInt_1 StartInt)))
   (StartBool_4 Bool (true (and StartBool_1 StartBool_3) (str.prefixof Start_5 Start_5) (str.suffixof Start_2 Start_1) (= Start_1 Start_2) (<= StartInt_3 StartInt_1)))
   (Start_1 String ("0" (str.++ Start_1 Start_1) (str.replace Start Start Start)))
   (StartInt_3 Int (0 1 (str.len Start_1) (str.indexof Start_2 Start_3 StartInt) (str.to_int Start_2)))
   (Start_5 String ("b" "1" y "0" (str.++ Start Start_4) (str.substr Start_5 StartInt_2 StartInt) (ite StartBool_3 Start_3 Start_4)))
   (Start_10 String (x "b" (str.++ Start_6 Start_1) (str.at Start_3 StartInt_3) (str.substr Start_2 StartInt_2 StartInt_2) (str.replace Start_4 Start_2 Start_3) (str.from_int StartInt_2) (ite StartBool_7 Start Start_3)))
   (Start_9 String ("0" (str.substr Start_7 StartInt_1 StartInt) (str.replace Start Start_10 Start_1) (ite StartBool_1 Start_10 Start_7)))
   (Start_8 String (y "a" "" "b" "1" "0" (str.substr Start_9 StartInt_2 StartInt_4) (str.replace Start_5 Start_5 Start_9)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_2 StartInt)))
   (Start_2 String ("0" (str.from_int StartInt_1)))
   (StartBool_3 Bool (false (not StartBool_3) (and StartBool_4 StartBool_4) (str.<= Start Start_5) (str.prefixof Start_3 Start) (str.suffixof Start_4 Start_2)))
   (Start_3 String ("b" "1" (str.substr Start_2 StartInt_1 StartInt)))
   (Start_4 String (x (str.++ Start_5 Start_5) (str.from_int StartInt_1)))
   (StartBool_5 Bool (true (not StartBool_5) (str.< Start_7 Start_6) (str.<= Start_1 Start_1) (str.prefixof Start_9 Start_8)))
   (Start_11 String (y (str.at Start_8 StartInt_5) (str.substr Start_1 StartInt StartInt_4)))
   (StartInt_2 Int (0 (str.indexof Start_3 Start_3 StartInt_2)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (str.< Start_4 Start_2) (str.<= Start_2 Start_3) (str.prefixof Start_1 Start_1) (str.suffixof Start_3 Start_2) (str.contains Start_3 Start_5) (<= StartInt_1 StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof y (str.replace x y "1") 1))))

(check-synth)
