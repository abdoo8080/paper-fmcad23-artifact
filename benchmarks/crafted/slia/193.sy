(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (Start_2 String) (Start_10 String) (StartBool_1 Bool) (Start_6 String) (StartInt_1 Int) (StartInt_4 Int) (StartInt_9 Int) (StartInt_10 Int) (Start_7 String) (Start_11 String) (Start_1 String) (StartBool_3 Bool) (Start_9 String) (Start_5 String) (StartInt_3 Int) (StartInt_2 Int) (StartBool_2 Bool) (Start_8 String) (Start_3 String) (StartBool_4 Bool) (StartInt_6 Int) (StartInt_8 Int) (StartInt_5 Int) (Start_4 String) (StartInt_7 Int))
  ((Start String ("0" "b" (str.replace Start Start_1 Start)))
   (StartInt Int (0 1 (str.len Start_3) (str.to_int Start_9)))
   (StartBool Bool (true false (not StartBool_1) (str.< Start_12 Start_7) (str.prefixof Start_11 Start_3) (str.contains Start_10 Start_2) (= Start_5 Start_6) (= StartInt_10 StartInt_3)))
   (Start_12 String (y (str.++ Start_1 Start_4)))
   (Start_2 String ("1" (str.++ Start_10 Start_9) (str.replace Start_9 Start_11 Start_4)))
   (Start_10 String ("" "b" (str.++ Start_8 Start_1) (str.replace Start_7 Start_6 Start_7) (str.from_int StartInt_4)))
   (StartBool_1 Bool (false true (not StartBool_3) (and StartBool_3 StartBool_1) (str.< Start_8 Start_6) (str.<= Start_2 Start_1) (str.suffixof Start_9 Start_3) (str.contains Start Start_5) (= Start_5 Start_8)))
   (Start_6 String (x "b" "" y))
   (StartInt_1 Int (0 1 (str.indexof Start_8 Start_6 StartInt_1)))
   (StartInt_4 Int (1 (str.indexof Start_3 Start_7 StartInt_6) (str.to_int Start_8)))
   (StartInt_9 Int (1 0 (str.len Start_6)))
   (StartInt_10 Int (1 0 (str.indexof Start_10 Start StartInt_8) (str.to_int Start_1)))
   (Start_7 String ("a" y x "1" "b" (str.substr Start StartInt_3 StartInt_5) (str.replace Start_7 Start_3 Start_7) (str.from_int StartInt_6) (ite StartBool_2 Start_4 Start)))
   (Start_11 String ("" (str.replace Start Start_8 Start_2) (ite StartBool Start_7 Start_2)))
   (Start_1 String ("b" (str.++ Start_1 Start_2) (str.substr Start_3 StartInt_1 StartInt_1) (ite StartBool_1 Start_3 Start_4)))
   (StartBool_3 Bool (false true (not StartBool_1) (and StartBool StartBool_4) (str.< Start_4 Start_10) (str.<= Start Start_5) (str.prefixof Start_10 Start) (= StartInt_1 StartInt_9)))
   (Start_9 String ("a" x (str.at Start_3 StartInt_8) (str.substr Start_7 StartInt StartInt_4) (ite StartBool_2 Start_1 Start_5)))
   (Start_5 String ("1" (str.++ Start_3 Start_6) (str.at Start_2 StartInt_2) (str.substr Start_4 StartInt_3 StartInt) (str.from_int StartInt_2)))
   (StartInt_3 Int (1 (str.indexof Start Start_6 StartInt_4) (str.to_int Start_7)))
   (StartInt_2 Int (1 (str.to_int Start_7)))
   (StartBool_2 Bool (true (str.<= Start_1 Start_1) (str.suffixof Start Start_8) (<= StartInt_3 StartInt_5)))
   (Start_8 String ("a" (str.++ Start_7 Start_3) (str.at Start_5 StartInt) (str.replace Start_6 Start_5 Start_8) (str.from_int StartInt_2) (ite StartBool_2 Start_4 Start_4)))
   (Start_3 String ("b" (str.++ Start_6 Start_11) (str.replace Start_7 Start_2 Start_8)))
   (StartBool_4 Bool (false true (str.<= Start_1 Start) (str.prefixof Start_2 Start_3)))
   (StartInt_6 Int (0 1 (str.indexof Start_6 Start_9 StartInt_7) (str.to_int Start_1)))
   (StartInt_8 Int (0 (str.indexof Start_1 Start_9 StartInt_5) (str.to_int Start_9)))
   (StartInt_5 Int (1 (str.len Start_5) (str.indexof Start_7 Start_3 StartInt_9) (str.to_int Start_9)))
   (Start_4 String (x "1" (str.++ Start_5 Start_2) (str.from_int StartInt)))
   (StartInt_7 Int (0 (str.indexof Start_5 Start_8 StartInt_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "1" "a")))

(check-synth)
