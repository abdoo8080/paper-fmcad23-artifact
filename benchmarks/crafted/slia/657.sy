(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_6 Int) (Start_12 String) (Start_10 String) (Start_2 String) (StartInt_3 Int) (StartInt_1 Int) (Start_13 String) (Start_5 String) (Start_3 String) (Start_8 String) (Start_1 String) (Start_4 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_2 Int) (Start_9 String) (Start_7 String) (StartInt_5 Int) (Start_6 String) (StartBool_1 Bool))
  ((Start String (x "b" "0" "a" y "" (str.at Start StartInt) (str.replace Start_1 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start Start StartInt_1) (str.to_int Start_3)))
   (StartBool Bool (false (and StartBool_2 StartBool_2) (str.< Start_7 Start_2) (str.<= Start_4 Start_11) (str.suffixof Start_11 Start_3) (str.contains Start_12 Start_12) (= StartInt_1 StartInt) (<= StartInt StartInt_2)))
   (Start_11 String ("a" "1" (str.from_int StartInt)))
   (StartInt_6 Int (0 (str.len Start_2) (str.indexof Start_11 Start_12 StartInt_3) (str.to_int Start_9)))
   (Start_12 String ("0" (str.replace Start_4 Start_8 Start_13) (str.from_int StartInt_6) (ite StartBool_2 Start_4 Start_9)))
   (Start_10 String (y "b" "a" "0" "" x (str.substr Start_3 StartInt_3 StartInt_4) (str.from_int StartInt)))
   (Start_2 String ("a" y x "b" (str.++ Start_6 Start_1) (str.replace Start_8 Start_5 Start_6) (str.from_int StartInt_5)))
   (StartInt_3 Int (0))
   (StartInt_1 Int (0 1 (str.len Start_1) (str.to_int Start)))
   (Start_13 String (x (str.at Start_6 StartInt_4) (str.from_int StartInt_2) (ite StartBool Start_8 Start_13)))
   (Start_5 String ("b" "" (str.++ Start_4 Start) (str.at Start_8 StartInt_1) (str.substr Start_1 StartInt_1 StartInt) (str.from_int StartInt)))
   (Start_3 String ("a" (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (ite StartBool_1 Start_4 Start_2)))
   (Start_8 String ("1"))
   (Start_1 String ("" (str.substr Start StartInt StartInt) (str.from_int StartInt_1)))
   (Start_4 String (y (str.at Start_5 StartInt_1) (ite StartBool_2 Start Start_1)))
   (StartBool_2 Bool (false (and StartBool StartBool_1) (str.< Start_2 Start_4) (str.prefixof Start_4 Start_3) (str.suffixof Start_1 Start_4) (str.contains Start_2 Start_5) (= Start_6 Start_1) (<= StartInt_2 StartInt_2)))
   (StartInt_4 Int (0 (str.len Start_9) (str.indexof Start_6 Start_6 StartInt_4)))
   (StartInt_2 Int (1 (str.to_int Start_7)))
   (Start_9 String ("" "a" (str.replace Start_6 Start_3 Start_6) (ite StartBool_1 Start_9 Start_4)))
   (Start_7 String ("0" (str.++ Start_7 Start_3) (str.at Start_2 StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_2) (str.indexof Start_10 Start_6 StartInt_4) (str.to_int Start_8)))
   (Start_6 String ("" x "1" "a" (str.++ Start_2 Start_4) (str.replace Start_2 Start_7 Start_5) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.suffixof Start Start_7) (= Start_7 Start_4) (= StartInt_2 StartInt_3) (<= StartInt_4 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.++ "b" "b") (str.to_int x))))

(check-synth)
