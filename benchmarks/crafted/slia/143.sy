(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (StartInt_10 Int) (Start_1 String) (Start_4 String) (StartBool_2 Bool) (Start_5 String) (Start_7 String) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_1 Int) (StartInt_4 Int) (StartInt_5 Int) (StartInt_7 Int) (Start_12 String) (StartInt_2 Int) (StartBool_3 Bool) (Start_6 String) (Start_8 String) (Start_10 String) (StartInt_6 Int) (StartInt_8 Int) (StartBool_5 Bool) (StartBool_4 Bool) (Start_2 String) (Start_11 String) (Start_14 String) (Start_15 String) (Start_3 String) (Start_9 String) (Start_13 String))
  ((Start String ("b" (str.substr Start StartInt StartInt) (str.from_int StartInt)))
   (StartInt Int (0))
   (StartBool Bool (true (str.prefixof Start_1 Start_2) (str.contains Start_1 Start_1) (= Start Start_2)))
   (StartInt_9 Int (0 (str.to_int Start_15)))
   (StartInt_10 Int (1 0))
   (Start_1 String ("" (str.++ Start_1 Start) (str.at Start_4 StartInt_4) (str.substr Start_14 StartInt_9 StartInt_8) (str.replace Start_9 Start_15 Start_13) (str.from_int StartInt) (ite StartBool_5 Start_5 Start_7)))
   (Start_4 String ("a" "b" "0" x (str.++ Start_3 Start_5) (str.substr Start_5 StartInt_1 StartInt_4) (str.replace Start_5 Start_1 Start_1) (str.from_int StartInt_3)))
   (StartBool_2 Bool (true (str.<= Start_5 Start_6) (str.prefixof Start_4 Start_5) (str.suffixof Start_4 Start_4) (str.contains Start Start_3)))
   (Start_5 String ("b" "a" "1" y "0" "" (str.++ Start_4 Start_6)))
   (Start_7 String ("0" (str.replace Start_10 Start_6 Start) (str.from_int StartInt) (ite StartBool_2 Start_6 Start_10)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.to_int Start_2)))
   (StartBool_1 Bool (false (str.< Start_2 Start_1) (str.<= Start_2 Start_2) (str.prefixof Start_3 Start_4) (str.suffixof Start_3 Start) (= Start Start) (= StartInt_3 StartInt_4)))
   (StartInt_1 Int (1 (str.indexof Start_6 Start_5 StartInt_1)))
   (StartInt_4 Int (1 0 (str.indexof Start_1 Start_1 StartInt_1)))
   (StartInt_5 Int (0 1 (str.to_int Start_1)))
   (StartInt_7 Int (0 (str.indexof Start_1 Start_14 StartInt_2)))
   (Start_12 String ("1" "b" (ite StartBool_4 Start_5 Start_8)))
   (StartInt_2 Int (1 (str.len Start_4) (str.indexof Start_3 Start StartInt) (str.to_int Start)))
   (StartBool_3 Bool (true (not StartBool_3) (str.< Start Start_9) (str.<= Start_3 Start) (str.suffixof Start_11 Start_2) (str.contains Start_7 Start_6) (= Start_12 Start_4) (= StartInt_5 StartInt_1) (<= StartInt_6 StartInt_1)))
   (Start_6 String ("a" (str.++ Start_5 Start_5) (str.at Start_2 StartInt_2) (str.replace Start_4 Start_4 Start_1) (str.from_int StartInt_1) (ite StartBool_2 Start_5 Start)))
   (Start_8 String ("1" (str.at Start_7 StartInt_3) (ite StartBool_2 Start_9 Start_6)))
   (Start_10 String (x "1" "0" y "b" (str.substr Start_7 StartInt_2 StartInt_3) (str.replace Start_8 Start_1 Start_8) (ite StartBool_3 Start_6 Start)))
   (StartInt_6 Int (1 0 (str.indexof Start_4 Start_9 StartInt_5) (str.to_int Start_3)))
   (StartInt_8 Int (1 0 (str.len Start_14) (str.indexof Start_6 Start_6 StartInt_6)))
   (StartBool_5 Bool (false true (str.< Start_14 Start_11) (str.suffixof Start_11 Start_11) (str.contains Start_13 Start_6) (= StartInt_9 StartInt_1) (<= StartInt_10 StartInt_7)))
   (StartBool_4 Bool (true false (str.< Start_6 Start_12) (str.<= Start_10 Start) (= Start_4 Start_5)))
   (Start_2 String ("a" (str.++ Start_3 Start_3) (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt StartInt_2) (ite StartBool_1 Start_3 Start_2)))
   (Start_11 String ("a" (str.++ Start_13 Start_8) (str.at Start_9 StartInt) (str.substr Start_14 StartInt_7 StartInt_7) (str.replace Start_8 Start Start_3) (str.from_int StartInt)))
   (Start_14 String ("a" (str.++ Start_15 Start_15) (str.at Start_14 StartInt_7)))
   (Start_15 String ("a" "1" (str.++ Start_2 Start) (str.at Start_11 StartInt) (str.substr Start_5 StartInt_6 StartInt_3) (str.from_int StartInt_4)))
   (Start_3 String (y "" "0" x (str.++ Start_5 Start_7) (str.substr Start_5 StartInt_4 StartInt_4) (str.replace Start_1 Start_5 Start_3) (str.from_int StartInt_4) (ite StartBool Start_8 Start_9)))
   (Start_9 String ("1" "" (str.at Start_3 StartInt_2) (str.replace Start_9 Start Start_3)))
   (Start_13 String (x y (str.++ Start_13 Start_12) (str.at Start_6 StartInt_6) (str.substr Start_10 StartInt_8 StartInt_1) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "a" (ite (str.< "1" y) x "0"))))

(check-synth)
