(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_2 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_3 String) (Start_4 String) (StartInt_1 Int) (Start_6 String) (Start_5 String) (StartInt_2 Int))
  ((Start String ("" (str.++ Start_1 Start_1) (str.at Start_2 StartInt) (str.substr Start StartInt StartInt_1) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt) (ite StartBool_1 Start_4 Start_4)))
   (StartInt Int (1 (str.len Start_4) (str.to_int Start_1)))
   (StartBool Bool (false (and StartBool_1 StartBool) (str.< Start_2 Start_6) (str.<= Start_5 Start_5) (str.suffixof Start_4 Start_6) (str.contains Start_1 Start_5) (= StartInt_2 StartInt_1) (<= StartInt_1 StartInt_2)))
   (Start_1 String ("b" (str.++ Start_2 Start_2) (str.at Start StartInt_3) (ite StartBool_1 Start_2 Start_5)))
   (Start_2 String ("b" "" (str.substr Start_6 StartInt_1 StartInt_1) (str.replace Start_3 Start Start_2) (str.from_int StartInt)))
   (StartInt_3 Int (1 (str.len Start_3)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (str.<= Start_4 Start_5) (= Start_5 Start_4) (= StartInt StartInt_2) (<= StartInt StartInt)))
   (Start_3 String ("a" "b" x "1" "" "0" y (str.++ Start Start_1) (str.from_int StartInt_2)))
   (Start_4 String (x (str.from_int StartInt_1)))
   (StartInt_1 Int (1 (str.len Start) (str.indexof Start Start StartInt_2) (str.to_int Start_4)))
   (Start_6 String ("a" (str.at Start_3 StartInt_2) (str.from_int StartInt)))
   (Start_5 String ("b" x (str.++ Start_6 Start_1) (ite StartBool Start Start)))
   (StartInt_2 Int (1 (str.len Start_3) (str.indexof Start_4 Start_5 StartInt_2) (str.to_int Start_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at y 1) "1")))

(check-synth)
