(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_5 Bool) (StartInt_10 Int) (Start_23 String) (StartInt_12 Int) (Start_22 String) (Start_2 String) (Start_19 String) (Start_20 String) (Start_9 String) (Start_18 String) (StartBool_3 Bool) (StartInt_2 Int) (Start_8 String) (StartBool_6 Bool) (StartInt_7 Int) (Start_10 String) (Start_5 String) (Start_12 String) (StartInt_11 Int) (Start_7 String) (Start_6 String) (Start_4 String) (Start_14 String) (StartInt_9 Int) (Start_21 String) (StartBool_4 Bool) (Start_15 String) (Start_16 String) (Start_24 String) (Start_11 String) (Start_17 String) (Start_13 String) (StartInt_3 Int) (Start_1 String) (StartInt_5 Int) (StartInt_4 Int) (StartInt_1 Int) (StartBool_2 Bool) (StartBool_1 Bool) (StartInt_8 Int) (StartInt_6 Int) (Start_3 String))
  ((Start String ("a" x "" "0" "b" (str.++ Start Start_1) (str.substr Start_2 StartInt_1 StartInt) (str.replace Start_3 Start_4 Start_2) (ite StartBool Start_3 Start_3)))
   (StartInt Int (1 0 (str.len Start_16)))
   (StartBool Bool (false (not StartBool_5) (and StartBool_6 StartBool_4) (str.suffixof Start_1 Start_7) (str.contains Start_11 Start_6) (= Start_4 Start_11) (= StartInt_10 StartInt_11)))
   (StartBool_5 Bool (false true (and StartBool_3 StartBool_3) (str.< Start Start_11) (str.prefixof Start_13 Start_22) (str.suffixof Start_20 Start_9) (str.contains Start_18 Start_16) (= Start_9 Start_24) (= StartInt_1 StartInt_8) (<= StartInt_4 StartInt_10)))
   (StartInt_10 Int (0 (str.len Start_18) (str.to_int Start_10)))
   (Start_23 String (y (str.substr Start_22 StartInt_6 StartInt_2) (str.replace Start_6 Start_17 Start_6) (str.from_int StartInt_8)))
   (StartInt_12 Int (0 (str.len Start_18)))
   (Start_22 String (y))
   (Start_2 String (x "b" (str.++ Start_21 Start_22) (str.replace Start_19 Start_22 Start_9)))
   (Start_19 String ("b" (str.at Start_12 StartInt_1) (str.substr Start_3 StartInt StartInt) (str.replace Start Start_8 Start_5)))
   (Start_20 String ("" y "a" "1" "b" x (str.++ Start_3 Start_15) (str.replace Start_15 Start_6 Start_17)))
   (Start_9 String (y "1" (str.from_int StartInt_1) (ite StartBool_1 Start_10 Start_5)))
   (Start_18 String ("1" "b" y "" (str.++ Start_2 Start_2) (ite StartBool Start_10 Start_2)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_1 StartBool_3) (str.< Start_7 Start_13) (str.<= Start_14 Start_4) (str.suffixof Start_14 Start_9) (str.contains Start_15 Start_11) (= Start_7 Start_5)))
   (StartInt_2 Int (1 (str.to_int Start_1)))
   (Start_8 String ("0" "b" "a" (str.++ Start_6 Start_4) (str.at Start_1 StartInt) (str.substr Start_2 StartInt StartInt_3) (str.from_int StartInt_2) (ite StartBool Start_9 Start_7)))
   (StartBool_6 Bool (false (and StartBool_6 StartBool) (str.< Start_4 Start_2) (str.<= Start_7 Start_10) (str.prefixof Start_13 Start_9) (<= StartInt_1 StartInt_10)))
   (StartInt_7 Int (1 (str.indexof Start_13 Start_4 StartInt_9) (str.to_int Start_18)))
   (Start_10 String ("1" (str.at Start_7 StartInt_3) (str.replace Start_11 Start_2 Start) (str.from_int StartInt_2)))
   (Start_5 String ("" (str.++ Start_8 Start_4) (str.at Start_3 StartInt) (str.from_int StartInt_2)))
   (Start_12 String (x (str.++ Start_13 Start_11) (str.at Start_14 StartInt_1) (str.replace Start_9 Start Start_10) (ite StartBool_3 Start_7 Start_11)))
   (StartInt_11 Int (1 (str.len Start_23) (str.indexof Start_19 Start_20 StartInt_9) (str.to_int Start_16)))
   (Start_7 String ("b" (str.substr Start_6 StartInt_2 StartInt_2) (str.replace Start_5 Start_4 Start) (str.from_int StartInt)))
   (Start_6 String ("0" "" y (str.++ Start_3 Start_3) (str.from_int StartInt)))
   (Start_4 String (x (str.at Start_5 StartInt_2) (str.replace Start_5 Start_4 Start_6) (str.from_int StartInt) (ite StartBool Start_7 Start_2)))
   (Start_14 String ("a" (str.++ Start_15 Start_11) (str.at Start_11 StartInt_2) (str.replace Start_7 Start_9 Start_14) (str.from_int StartInt_3)))
   (StartInt_9 Int (1 (str.len Start_8) (str.indexof Start Start_17 StartInt_8) (str.to_int Start_3)))
   (Start_21 String (x "b" y "a" "" "1" "0" (str.at Start_19 StartInt_3) (str.replace Start_1 Start_6 Start_13)))
   (StartBool_4 Bool (false (not StartBool_1) (and StartBool_3 StartBool_1) (str.<= Start_17 Start_9) (str.prefixof Start Start_8) (str.contains Start_15 Start_12) (= StartInt_6 StartInt_7) (<= StartInt_5 StartInt_8)))
   (Start_15 String ("" (str.++ Start_16 Start_3)))
   (Start_16 String ("b" "1" (str.++ Start Start_7) (str.at Start_7 StartInt_3) (str.substr Start StartInt_1 StartInt_3) (str.from_int StartInt_2)))
   (Start_24 String (x "a" (str.++ Start_2 Start_13) (str.at Start_15 StartInt) (str.substr Start_17 StartInt_12 StartInt_11)))
   (Start_11 String ("0" (str.replace Start_9 Start Start_7)))
   (Start_17 String (x (str.at Start_5 StartInt_6) (str.substr Start_6 StartInt_7 StartInt_8) (str.replace Start_14 Start Start_14) (ite StartBool_3 Start_14 Start_17)))
   (Start_13 String ("0" "a" (str.at Start_9 StartInt_1) (str.substr Start_9 StartInt_4 StartInt_5) (str.replace Start_6 Start_5 Start_2) (ite StartBool_1 Start_3 Start)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.to_int Start_6)))
   (Start_1 String (y "a" (ite StartBool_3 Start_18 Start_2)))
   (StartInt_5 Int (0 1 (str.indexof Start_7 Start_15 StartInt_5)))
   (StartInt_4 Int (0 (str.indexof Start_10 Start_16 StartInt)))
   (StartInt_1 Int (0))
   (StartBool_2 Bool (true (not StartBool) (and StartBool_4 StartBool_2) (str.< Start_3 Start_17) (str.suffixof Start_6 Start_3) (= StartInt_4 StartInt) (<= StartInt_6 StartInt_6)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool StartBool) (str.prefixof Start_2 Start_5) (str.contains Start_5 Start_12) (= Start_5 Start_5)))
   (StartInt_8 Int (0 1 (str.indexof Start_6 Start_3 StartInt_2)))
   (StartInt_6 Int (1 0 (str.len Start_3) (str.to_int Start_12)))
   (Start_3 String ("0" (str.++ Start_14 Start_6) (str.at Start_19 StartInt_1) (str.replace Start_8 Start_20 Start_11) (str.from_int StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "a" (str.len (str.replace (str.at x 0) x y)))))

(check-synth)
