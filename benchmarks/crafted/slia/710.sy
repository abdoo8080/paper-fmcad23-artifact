(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_1 String) (StartInt_1 Int) (Start_16 String) (StartInt_5 Int) (Start_9 String) (Start_12 String) (Start_15 String) (Start_14 String) (Start_10 String) (Start_11 String) (Start_13 String) (StartInt_3 Int) (StartInt_4 Int) (Start_4 String) (StartBool_1 Bool) (Start_5 String) (StartBool_2 Bool) (Start_3 String) (Start_6 String) (StartInt_2 Int) (Start_8 String) (Start_2 String) (Start_17 String) (Start_7 String) (StartBool_3 Bool))
  ((Start String ("0" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_2) (str.replace Start_2 Start_3 Start_3) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.len Start_8) (str.indexof Start_15 Start_18 StartInt) (str.to_int Start_8)))
   (StartBool Bool (false (str.<= Start_15 Start_8)))
   (Start_18 String ("" (str.++ Start_9 Start_15) (ite StartBool_3 Start_6 Start_5)))
   (Start_1 String ("0" "1" (str.substr Start StartInt_1 StartInt_3) (str.replace Start_6 Start_7 Start_3) (str.from_int StartInt_1)))
   (StartInt_1 Int (1 (str.indexof Start_8 Start_10 StartInt_5)))
   (Start_16 String ("0" y (str.++ Start_3 Start_14)))
   (StartInt_5 Int (1 0 (str.len Start_13) (str.to_int Start_12)))
   (Start_9 String ("" (str.++ Start_10 Start) (str.at Start_5 StartInt_2) (str.replace Start_8 Start_16 Start_17) (str.from_int StartInt_5)))
   (Start_12 String ("" (str.++ Start_12 Start_11) (str.replace Start_15 Start_13 Start_9)))
   (Start_15 String ("a" (str.++ Start_2 Start_10) (str.replace Start_7 Start_10 Start_10)))
   (Start_14 String ("" (str.++ Start_14 Start_10) (str.substr Start_15 StartInt_3 StartInt_2) (str.replace Start_8 Start_12 Start_7) (str.from_int StartInt_1)))
   (Start_10 String ("b" (str.substr Start_12 StartInt_3 StartInt_4) (str.replace Start_1 Start_8 Start_8) (ite StartBool_2 Start_13 Start_7)))
   (Start_11 String ("b" "1" "" (str.++ Start_2 Start_10) (str.substr Start_9 StartInt_1 StartInt_2)))
   (Start_13 String ("0" "1" (str.++ Start_2 Start_8) (str.at Start_13 StartInt_2) (str.replace Start_7 Start_9 Start_7)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.to_int Start)))
   (StartInt_4 Int (1 (str.indexof Start_2 Start_12 StartInt) (str.to_int Start_14)))
   (Start_4 String ("0" y "1" "b" x (str.at Start_2 StartInt) (str.replace Start Start Start) (str.from_int StartInt) (ite StartBool_1 Start_2 Start_5)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_2 StartBool) (str.prefixof Start_2 Start_1) (str.contains Start_2 Start_1) (= StartInt_1 StartInt_1) (<= StartInt_3 StartInt_2)))
   (Start_5 String ("b" "0" "1" (str.++ Start_1 Start_6) (str.at Start_4 StartInt_3)))
   (StartBool_2 Bool (false (str.< Start_5 Start_4) (str.<= Start_7 Start_3) (str.contains Start_5 Start_5)))
   (Start_3 String ("a" (str.substr Start StartInt_3 StartInt_3) (ite StartBool_1 Start_4 Start)))
   (Start_6 String ("1" "b" (str.++ Start_4 Start_3) (str.from_int StartInt_3) (ite StartBool_1 Start_6 Start_1)))
   (StartInt_2 Int (1 0 (str.indexof Start_4 Start StartInt_3)))
   (Start_8 String ("a" (str.++ Start_9 Start) (str.at Start_10 StartInt_2) (str.replace Start_11 Start_5 Start_10) (str.from_int StartInt_1) (ite StartBool_1 Start_9 Start_7)))
   (Start_2 String ("" "0" y x "a" (str.++ Start_3 Start_1) (str.at Start_5 StartInt_1) (str.from_int StartInt_1) (ite StartBool_3 Start_3 Start_5)))
   (Start_17 String (y (str.replace Start_17 Start_7 Start_7) (ite StartBool_1 Start_16 Start_14)))
   (Start_7 String ("" "b" x "1" (str.++ Start_6 Start_7) (str.substr Start StartInt_1 StartInt_1)))
   (StartBool_3 Bool (true false (str.< Start_4 Start_3) (str.prefixof Start_8 Start_2) (str.suffixof Start_4 Start_4) (str.contains Start Start_2) (= StartInt StartInt_3) (<= StartInt_1 StartInt_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "0" (str.indexof (str.++ y y) y 1))))

(check-synth)
