(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (Start_13 String) (StartInt_3 Int) (Start_7 String) (Start_6 String) (Start_5 String) (Start_2 String) (StartInt_4 Int) (Start_11 String) (Start_9 String) (StartBool_1 Bool) (StartInt_1 Int) (Start_14 String) (StartInt_6 Int) (StartBool_3 Bool) (Start_15 String) (StartInt_5 Int) (Start_16 String) (Start_10 String) (StartBool_2 Bool) (Start_12 String) (StartInt_2 Int) (Start_8 String) (Start_1 String) (Start_3 String) (StartInt_9 Int) (StartInt_7 Int) (StartInt_8 Int))
  ((Start String (y "a" (str.at Start_1 StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_14)))
   (StartBool Bool (true (and StartBool_3 StartBool_3) (str.< Start_10 Start_8) (str.prefixof Start_5 Start_16) (= StartInt_4 StartInt_8) (<= StartInt_8 StartInt_3)))
   (Start_4 String ("" (str.substr Start_3 StartInt_1 StartInt_5) (ite StartBool_2 Start_4 Start_7)))
   (Start_13 String ("0" "a" x "1" y (str.at Start_2 StartInt_8) (str.replace Start_11 Start_9 Start_15) (ite StartBool Start_6 Start_16)))
   (StartInt_3 Int (0 1))
   (Start_7 String (y (str.at Start_8 StartInt_1) (str.substr Start StartInt_1 StartInt_1) (ite StartBool_1 Start_7 Start_6)))
   (Start_6 String ("1" (str.substr Start_2 StartInt_1 StartInt_1) (ite StartBool_1 Start_7 Start_5)))
   (Start_5 String ("0" "a" (str.++ Start_3 Start) (str.at Start_1 StartInt_2) (str.substr Start_6 StartInt_2 StartInt_2) (str.replace Start_1 Start_3 Start) (str.from_int StartInt_2) (ite StartBool Start_2 Start_2)))
   (Start_2 String (x (str.++ Start_1 Start_2) (str.at Start_3 StartInt_2) (str.replace Start_4 Start Start_1) (ite StartBool Start_5 Start_2)))
   (StartInt_4 Int (0 1 (str.to_int Start_6)))
   (Start_11 String ("1" "b" (str.++ Start_5 Start_3) (str.replace Start Start_9 Start) (ite StartBool Start_1 Start_8)))
   (Start_9 String ("b" x "a" y "0" "1" "" (str.at Start_2 StartInt) (str.from_int StartInt_2)))
   (StartBool_1 Bool (false (str.< Start_6 Start_6) (str.contains Start_3 Start_2) (= Start_10 Start_10) (<= StartInt_2 StartInt_3)))
   (StartInt_1 Int (1 0 (str.indexof Start Start_2 StartInt_1)))
   (Start_14 String ("0" x "" (str.++ Start_8 Start_11) (str.substr Start StartInt_4 StartInt_2) (str.replace Start_4 Start_6 Start_6) (str.from_int StartInt_7)))
   (StartInt_6 Int (0 1 (str.len Start_8) (str.indexof Start_10 Start_4 StartInt_4)))
   (StartBool_3 Bool (false (and StartBool_2 StartBool_2) (str.< Start_4 Start_1) (str.prefixof Start_11 Start_8) (= Start_11 Start_1) (<= StartInt_7 StartInt_7)))
   (Start_15 String (x "a" (str.++ Start_5 Start_13) (str.at Start_6 StartInt_9) (str.replace Start_5 Start_14 Start_11) (ite StartBool_2 Start_7 Start_15)))
   (StartInt_5 Int (0 1 (str.to_int Start_12)))
   (Start_16 String (y "" x "a" (str.substr Start_16 StartInt_2 StartInt_6) (str.replace Start_5 Start_13 Start_1) (str.from_int StartInt_7)))
   (Start_10 String ("1" "b" x "" "0" y (str.substr Start_9 StartInt_4 StartInt_2) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt_3) (ite StartBool Start Start_3)))
   (StartBool_2 Bool (false (not StartBool_2) (and StartBool_3 StartBool_3) (str.<= Start_3 Start_2) (str.prefixof Start_2 Start_2) (str.contains Start_1 Start_7) (= StartInt_1 StartInt_3) (<= StartInt_4 StartInt_6)))
   (Start_12 String ("b" (str.++ Start_9 Start_3) (str.from_int StartInt_2) (ite StartBool_2 Start_9 Start_7)))
   (StartInt_2 Int (1 0 (str.indexof Start_10 Start_1 StartInt_6)))
   (Start_8 String (y "a" "0" "1" "b" (str.++ Start_8 Start) (str.at Start StartInt_2) (str.substr Start_2 StartInt_3 StartInt_1) (str.replace Start_7 Start_9 Start_6) (str.from_int StartInt_2)))
   (Start_1 String (x "a" y (str.++ Start_12 Start_11) (str.at Start_5 StartInt_4) (str.replace Start Start_3 Start_1) (str.from_int StartInt_8)))
   (Start_3 String ("b" "0" y (str.at Start_3 StartInt_3) (str.replace Start_13 Start_11 Start_14) (ite StartBool_1 Start_4 Start_6)))
   (StartInt_9 Int (1 (str.len Start_9) (str.to_int Start_15)))
   (StartInt_7 Int (0 1 (str.to_int Start_4)))
   (StartInt_8 Int (1 0 (str.indexof Start_9 Start_11 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at x (str.indexof x "" 1))))))

(check-synth)
