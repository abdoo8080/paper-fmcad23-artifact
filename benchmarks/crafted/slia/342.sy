(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_8 String) (Start_17 String) (StartBool_6 Bool) (Start_4 String) (StartInt_4 Int) (StartBool_4 Bool) (StartInt_7 Int) (Start_7 String) (StartInt_3 Int) (Start_2 String) (Start_3 String) (Start_6 String) (StartInt_2 Int) (StartBool_5 Bool) (Start_15 String) (StartBool_2 Bool) (StartBool_3 Bool) (StartInt_9 Int) (StartBool_1 Bool) (Start_16 String) (Start_12 String) (Start_10 String) (Start_11 String) (StartBool_7 Bool) (StartInt_6 Int) (Start_5 String) (StartInt_5 Int) (Start_1 String) (Start_9 String) (Start_14 String) (StartInt_1 Int) (Start_13 String) (StartInt_8 Int))
  ((Start String ("b" (str.substr Start StartInt_1 StartInt) (str.replace Start Start_1 Start_1) (ite StartBool_1 Start Start_1)))
   (StartInt Int (0 (str.len Start_14) (str.indexof Start_7 Start_2 StartInt)))
   (StartBool Bool (true (str.prefixof Start Start_3) (str.suffixof Start_9 Start_16) (str.contains Start_13 Start_10) (<= StartInt_8 StartInt_9)))
   (Start_18 String ("" "a" "1" (str.substr Start_6 StartInt_3 StartInt_8) (str.replace Start_16 Start_3 Start_11) (ite StartBool_1 Start_8 Start_5)))
   (Start_8 String (x (str.substr Start_5 StartInt_4 StartInt_2) (str.from_int StartInt)))
   (Start_17 String (x "" (str.at Start_12 StartInt_4) (ite StartBool_3 Start_5 Start_12)))
   (StartBool_6 Bool (true false (not StartBool_3) (str.< Start_11 Start_1) (str.<= Start Start_11) (str.suffixof Start_8 Start) (str.contains Start Start_8) (= Start_6 Start_9) (<= StartInt_4 StartInt_2)))
   (Start_4 String ("" (str.at Start_5 StartInt_1) (ite StartBool_4 Start_2 Start_1)))
   (StartInt_4 Int (0 (str.len Start_1)))
   (StartBool_4 Bool (true (not StartBool_2) (and StartBool StartBool_5) (str.< Start_5 Start_9) (str.prefixof Start_1 Start_9) (str.suffixof Start_5 Start_10) (= Start_9 Start_4) (<= StartInt_2 StartInt_3)))
   (StartInt_7 Int (0 1))
   (Start_7 String (x "" "b" "1" (str.from_int StartInt_3) (ite StartBool_3 Start_7 Start_6)))
   (StartInt_3 Int (0 (str.indexof Start_8 Start_6 StartInt_4)))
   (Start_2 String ("a" "" "0" x (str.++ Start_4 Start_2) (str.substr Start_2 StartInt_1 StartInt) (ite StartBool_3 Start_2 Start_3)))
   (Start_3 String (x "" "1" (ite StartBool Start_1 Start_2)))
   (Start_6 String ("b" (str.substr Start_2 StartInt_4 StartInt_1) (str.replace Start_3 Start_7 Start_7) (str.from_int StartInt_4) (ite StartBool_3 Start_4 Start_7)))
   (StartInt_2 Int (0 1 (str.len Start_6) (str.indexof Start_7 Start_3 StartInt)))
   (StartBool_5 Bool (true (str.<= Start_8 Start_10) (str.prefixof Start_6 Start_12) (str.contains Start_10 Start_1)))
   (Start_15 String ("b" "1" "" (str.++ Start_16 Start_5) (str.replace Start_14 Start_1 Start_1) (str.from_int StartInt_8) (ite StartBool_3 Start_5 Start_13)))
   (StartBool_2 Bool (false true (str.< Start_10 Start_7) (str.<= Start_2 Start_10) (str.prefixof Start_11 Start_4) (str.suffixof Start_10 Start_15) (str.contains Start Start_1) (= Start_11 Start_12)))
   (StartBool_3 Bool (false true (and StartBool_1 StartBool_3) (str.suffixof Start_5 Start) (= StartInt StartInt_1) (<= StartInt StartInt)))
   (StartInt_9 Int (1 0 (str.len Start_4) (str.indexof Start_6 Start_2 StartInt_2) (str.to_int Start_11)))
   (StartBool_1 Bool (true false (not StartBool_2) (str.< Start Start_1) (str.prefixof Start Start_2) (str.contains Start_3 Start) (= Start Start_2)))
   (Start_16 String ("b" "" "1" "0" (str.++ Start_4 Start_13) (str.at Start_3 StartInt_5) (str.replace Start_13 Start_4 Start_15) (str.from_int StartInt_2)))
   (Start_12 String (y (str.++ Start_3 Start_7) (str.at Start StartInt_6) (str.substr Start_11 StartInt StartInt) (str.from_int StartInt_7)))
   (Start_10 String (x (str.from_int StartInt_5) (ite StartBool_6 Start_9 Start_8)))
   (Start_11 String ("0" (str.at Start StartInt_2) (str.replace Start_6 Start_12 Start_5) (str.from_int StartInt_2) (ite StartBool_7 Start_13 Start_2)))
   (StartBool_7 Bool (true false (not StartBool_7) (and StartBool_2 StartBool) (str.<= Start Start_9) (str.suffixof Start_14 Start_12) (= Start_7 Start_9)))
   (StartInt_6 Int (0 (str.indexof Start_7 Start_3 StartInt_4) (str.to_int Start_5)))
   (Start_5 String ("" "0" "b" (str.++ Start_2 Start_5) (str.at Start_5 StartInt_2) (str.substr Start_2 StartInt StartInt_1)))
   (StartInt_5 Int (1 (str.len Start_9)))
   (Start_1 String (x (str.++ Start_7 Start_12) (str.replace Start_17 Start_5 Start_14) (str.from_int StartInt_2)))
   (Start_9 String ("b" (str.++ Start_7 Start_5) (str.at Start_2 StartInt_6) (str.substr Start_13 StartInt_3 StartInt_3) (str.from_int StartInt)))
   (Start_14 String ("b" y "1" "a" "0" x "" (str.++ Start_10 Start_12) (str.at Start_3 StartInt_5) (str.substr Start_10 StartInt_3 StartInt_5) (str.from_int StartInt_1) (ite StartBool_2 Start_14 Start_10)))
   (StartInt_1 Int (1 0 (str.len Start_7) (str.to_int Start_18)))
   (Start_13 String ("b" (str.at Start_8 StartInt_6) (str.substr Start_8 StartInt_6 StartInt_1) (str.replace Start_13 Start_5 Start_10) (str.from_int StartInt) (ite StartBool Start_8 Start_11)))
   (StartInt_8 Int (1 (str.to_int Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "b" "1")))

(check-synth)
