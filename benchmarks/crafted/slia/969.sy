(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_9 String) (StartInt_5 Int) (StartBool_5 Bool) (Start_12 String) (Start_11 String) (Start_10 String) (StartBool_4 Bool) (StartBool_3 Bool) (StartInt_6 Int) (Start_1 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_3 String) (StartInt_3 Int) (Start_7 String) (Start_8 String) (Start_4 String) (Start_5 String) (Start_6 String) (Start_2 String) (StartInt_4 Int) (StartInt_1 Int) (StartBool_2 Bool))
  ((Start String ("a" "1" (str.at Start StartInt_1) (str.replace Start_1 Start_1 Start_1)))
   (StartInt Int (0 (str.indexof Start_7 Start_6 StartInt_4)))
   (StartBool Bool (false (str.suffixof Start_4 Start_9) (= Start_10 Start_6) (= StartInt_2 StartInt_2) (<= StartInt StartInt_3)))
   (Start_9 String ("a" (str.++ Start_3 Start_4) (str.at Start_2 StartInt_2) (str.from_int StartInt_5) (ite StartBool_1 Start_5 Start_11)))
   (StartInt_5 Int (1 (str.indexof Start_4 Start_4 StartInt_6) (str.to_int Start_4)))
   (StartBool_5 Bool (false true (and StartBool_4 StartBool_4) (str.< Start_12 Start_4) (str.<= Start_2 Start_7) (str.prefixof Start_1 Start_5) (= StartInt StartInt_5)))
   (Start_12 String (x (str.++ Start_3 Start) (str.at Start_6 StartInt_1)))
   (Start_11 String (x "b" (str.++ Start_6 Start_10) (str.at Start_11 StartInt_1) (str.from_int StartInt_2) (ite StartBool_5 Start_10 Start)))
   (Start_10 String ("b" (str.at Start_11 StartInt_3) (str.substr Start_3 StartInt_1 StartInt_3) (str.replace Start_3 Start Start_10) (str.from_int StartInt_1)))
   (StartBool_4 Bool (true (and StartBool_3 StartBool_3) (str.< Start_7 Start_3) (str.suffixof Start Start_4) (str.contains Start Start_5)))
   (StartBool_3 Bool (true (not StartBool_4) (and StartBool StartBool_4) (str.< Start Start_8) (str.<= Start_1 Start_7) (str.prefixof Start_7 Start_1) (str.suffixof Start_6 Start_5)))
   (StartInt_6 Int (1 (str.len Start_3) (str.to_int Start_8)))
   (Start_1 String ("1" "b" (str.substr Start StartInt_1 StartInt) (ite StartBool Start_2 Start_3)))
   (StartBool_1 Bool (true false (not StartBool) (= Start_3 Start_4) (= StartInt StartInt_2)))
   (StartInt_2 Int (1))
   (Start_3 String (y "1" "a" "0" (str.++ Start_3 Start_3) (str.at Start StartInt) (str.substr Start_3 StartInt_1 StartInt_1) (str.from_int StartInt) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_3 Int (0 1 (str.len Start_1) (str.indexof Start_3 Start_5 StartInt_3)))
   (Start_7 String ("b" (str.substr Start_8 StartInt_2 StartInt) (ite StartBool Start_6 Start_4)))
   (Start_8 String (y (str.at Start_3 StartInt_2) (str.substr Start_8 StartInt StartInt_3) (str.from_int StartInt_4)))
   (Start_4 String ("0" "a" (str.substr Start_3 StartInt_2 StartInt_3)))
   (Start_5 String ("0" (str.++ Start_2 Start_1) (str.at Start_6 StartInt_4) (str.substr Start StartInt_4 StartInt)))
   (Start_6 String (y "" "1" (str.++ Start_5 Start_5) (str.at Start_4 StartInt_1) (str.substr Start_2 StartInt_3 StartInt_2) (str.replace Start_6 Start_5 Start_3) (ite StartBool_2 Start_3 Start_4)))
   (Start_2 String ("b" (str.from_int StartInt_2)))
   (StartInt_4 Int (1 (str.indexof Start_4 Start_5 StartInt_3) (str.to_int Start_4)))
   (StartInt_1 Int (0 1 (str.len Start_3) (str.to_int Start_1)))
   (StartBool_2 Bool (false (not StartBool_3) (and StartBool_3 StartBool) (str.<= Start_7 Start_4) (str.prefixof Start_3 Start_7) (= Start_7 Start_7) (<= StartInt StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "b" (str.replace "b" y "0"))))

(check-synth)
