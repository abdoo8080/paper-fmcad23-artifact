(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (StartInt_7 Int) (StartBool_3 Bool) (Start_8 String) (StartInt_4 Int) (Start_14 String) (Start_16 String) (Start_6 String) (Start_13 String) (Start_4 String) (Start_11 String) (StartInt_1 Int) (Start_15 String) (StartInt_2 Int) (Start_5 String) (Start_2 String) (StartBool_1 Bool) (Start_3 String) (StartBool_5 Bool) (StartInt_8 Int) (Start_1 String) (Start_7 String) (StartInt_5 Int) (StartBool_2 Bool) (StartInt_3 Int) (Start_10 String) (StartInt_6 Int) (Start_9 String) (Start_12 String))
  ((Start String ("0" "" (str.at Start StartInt) (str.substr Start_1 StartInt StartInt)))
   (StartInt Int (1 (str.to_int Start_4)))
   (StartBool Bool (true false (and StartBool_4 StartBool_4) (str.contains Start_5 Start_11) (= Start_5 Start_12) (= StartInt_2 StartInt_6) (<= StartInt_1 StartInt_3)))
   (StartBool_4 Bool (true (not StartBool_1) (str.< Start_9 Start_2) (= Start_1 Start_2) (= StartInt_8 StartInt_4)))
   (StartInt_7 Int (1))
   (StartBool_3 Bool (true (not StartBool_1) (and StartBool_3 StartBool_2) (str.< Start Start_5) (str.<= Start_4 Start_4) (str.prefixof Start_8 Start) (str.contains Start_2 Start_2) (<= StartInt_5 StartInt_5)))
   (Start_8 String (x (str.at Start_7 StartInt_2) (str.replace Start_5 Start_3 Start)))
   (StartInt_4 Int (1 (str.len Start_7)))
   (Start_14 String ("b" "a" "" (str.++ Start_9 Start_13) (str.replace Start_11 Start_7 Start_3) (ite StartBool_5 Start_9 Start_11)))
   (Start_16 String ("1" "b" "" (str.++ Start_9 Start_2) (str.substr Start_14 StartInt_1 StartInt_5) (str.replace Start_15 Start_5 Start_5)))
   (Start_6 String ("1" (str.++ Start_2 Start_4) (str.substr Start_4 StartInt_2 StartInt_1)))
   (Start_13 String ("1" "a" x y (str.at Start_1 StartInt_5) (str.substr Start_9 StartInt_7 StartInt) (str.from_int StartInt_5)))
   (Start_4 String (y "0" (str.++ Start Start_1) (str.from_int StartInt_2) (ite StartBool Start_3 Start_1)))
   (Start_11 String ("" "a" (str.++ Start_6 Start_2) (str.substr Start_13 StartInt_3 StartInt_5) (str.replace Start_14 Start_10 Start_15)))
   (StartInt_1 Int (1 (str.indexof Start Start StartInt_3) (str.to_int Start_3)))
   (Start_15 String ("a" "" x (str.replace Start_12 Start_13 Start_4) (str.from_int StartInt_3)))
   (StartInt_2 Int (1 (str.indexof Start_2 Start_2 StartInt_2) (str.to_int Start)))
   (Start_5 String (x (str.replace Start_1 Start_1 Start_6) (str.from_int StartInt_4)))
   (Start_2 String ("b" (str.at Start StartInt_1) (str.substr Start_1 StartInt StartInt_2)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_5 Start_1) (str.suffixof Start_6 Start) (= Start_2 Start)))
   (Start_3 String ("1" (str.at Start_2 StartInt_2) (str.substr Start_3 StartInt StartInt_2) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_2)))
   (StartBool_5 Bool (false (str.< Start_14 Start_11) (str.prefixof Start_14 Start_7) (str.suffixof Start_16 Start_1) (<= StartInt_6 StartInt_6)))
   (StartInt_8 Int (1 0 (str.to_int Start_1)))
   (Start_1 String (y "0" "b" "1" (str.++ Start_1 Start) (str.at Start StartInt) (str.replace Start Start_2 Start_1)))
   (Start_7 String ("1" "" y (str.replace Start_2 Start_5 Start_1) (ite StartBool_3 Start_5 Start_4)))
   (StartInt_5 Int (0 (str.len Start_5) (str.indexof Start_7 Start_6 StartInt_2)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool StartBool_1) (str.< Start_7 Start_4) (str.<= Start_3 Start_2) (str.prefixof Start_2 Start_4) (str.suffixof Start Start_7) (str.contains Start_7 Start) (= StartInt_4 StartInt_4) (<= StartInt_2 StartInt_4)))
   (StartInt_3 Int (0 (str.len Start_9) (str.indexof Start_3 Start_1 StartInt_5)))
   (Start_10 String ("" (str.substr Start_7 StartInt StartInt) (str.replace Start Start_4 Start_8)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.indexof Start_4 Start_9 StartInt_3)))
   (Start_9 String ("" (str.++ Start_9 Start) (str.replace Start Start_2 Start_10) (ite StartBool_2 Start_5 Start_5)))
   (Start_12 String ("b" (str.at Start StartInt_5) (str.substr Start StartInt_3 StartInt_5) (str.replace Start_1 Start_3 Start_3)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "b" (str.substr y 0 1))))

(check-synth)
