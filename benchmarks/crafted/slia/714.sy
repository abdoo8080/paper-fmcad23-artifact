(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_12 String) (StartInt_7 Int) (Start_2 String) (Start_4 String) (StartInt_6 Int) (Start_5 String) (StartInt_2 Int) (Start_11 String) (StartInt_4 Int) (Start_14 String) (StartBool_1 Bool) (Start_3 String) (StartBool_2 Bool) (StartBool_4 Bool) (Start_9 String) (StartInt_3 Int) (StartInt_1 Int) (StartBool_3 Bool) (Start_13 String) (Start_6 String) (Start_10 String) (Start_7 String) (StartBool_5 Bool) (StartInt_5 Int) (Start_8 String))
  ((Start String (y "" "a" "1" (str.replace Start Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool Start Start_3)))
   (StartInt Int (0 1 (str.len Start)))
   (StartBool Bool (true (str.< Start_1 Start_6) (= Start_5 Start_2) (= StartInt_1 StartInt) (<= StartInt_5 StartInt_1)))
   (Start_1 String ("b" "1" (str.++ Start_4 Start_3) (str.substr Start_13 StartInt_3 StartInt_7)))
   (Start_12 String ("1" (str.++ Start_11 Start_12) (str.at Start_3 StartInt_2) (str.substr Start_5 StartInt_5 StartInt_4) (str.replace Start_11 Start_14 Start_10) (str.from_int StartInt_4)))
   (StartInt_7 Int (0 (str.to_int Start_5)))
   (Start_2 String ("" "a" y "0" (str.++ Start_7 Start_1) (str.at Start_12 StartInt_3) (str.replace Start_4 Start_13 Start_10) (str.from_int StartInt_2) (ite StartBool_5 Start Start_4)))
   (Start_4 String ("b" (str.at Start_4 StartInt_6) (str.substr Start StartInt_2 StartInt_5) (str.replace Start_7 Start_10 Start_2) (ite StartBool_4 Start_3 Start_8)))
   (StartInt_6 Int (0 (str.len Start_7) (str.indexof Start_7 Start_8 StartInt_2)))
   (Start_5 String (y "0" (str.++ Start_5 Start_1) (str.replace Start_1 Start_3 Start_11)))
   (StartInt_2 Int (0 1 (str.len Start_3) (str.indexof Start_6 Start_10 StartInt)))
   (Start_11 String (x "1" (str.++ Start_6 Start_1) (str.at Start_6 StartInt_3) (ite StartBool_5 Start_10 Start_6)))
   (StartInt_4 Int (0 (str.indexof Start_3 Start_4 StartInt)))
   (Start_14 String (x "a" (str.at Start_13 StartInt_4) (str.substr Start_2 StartInt_2 StartInt_6)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_3) (str.<= Start_4 Start_3) (str.contains Start_6 Start_6) (= Start_3 Start) (= StartInt_1 StartInt_3)))
   (Start_3 String (x (str.++ Start_4 Start) (str.substr Start StartInt_1 StartInt) (str.replace Start_3 Start Start_5) (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start_1)))
   (StartBool_2 Bool (false (not StartBool_5) (str.prefixof Start_7 Start_5) (str.suffixof Start_6 Start)))
   (StartBool_4 Bool (false true (not StartBool_3) (and StartBool_2 StartBool_3) (str.< Start_5 Start_5) (str.prefixof Start_7 Start_2) (str.suffixof Start_1 Start)))
   (Start_9 String ("" "1" "0" x (str.++ Start_8 Start) (str.replace Start_1 Start Start_10)))
   (StartInt_3 Int (0 (str.len Start_5) (str.indexof Start_2 Start_5 StartInt) (str.to_int Start_6)))
   (StartInt_1 Int (0 (str.len Start_5)))
   (StartBool_3 Bool (true (and StartBool StartBool_3) (str.< Start_8 Start_3) (str.prefixof Start_11 Start_6) (str.suffixof Start_9 Start_6) (= StartInt_1 StartInt_4) (<= StartInt_4 StartInt_5)))
   (Start_13 String ("0" "a" "1" y "b" "" x (str.++ Start_5 Start_11) (str.at Start_4 StartInt_6) (str.substr Start StartInt_5 StartInt_1) (str.from_int StartInt_6)))
   (Start_6 String ("b" (str.at Start_7 StartInt_1) (ite StartBool_4 Start_7 Start_4)))
   (Start_10 String ("" (str.++ Start_8 Start_1) (str.from_int StartInt)))
   (Start_7 String ("" "a" (str.replace Start_4 Start_8 Start_7) (str.from_int StartInt_3) (ite StartBool_5 Start_8 Start_9)))
   (StartBool_5 Bool (false true (not StartBool_1) (and StartBool_5 StartBool_3) (str.<= Start_8 Start_1) (= Start_10 Start_7)))
   (StartInt_5 Int (0 1 (str.indexof Start_4 Start_8 StartInt_1)))
   (Start_8 String ("0" y (str.++ Start_6 Start_8) (str.from_int StartInt_1) (ite StartBool_3 Start_7 Start)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace "b" "" x) "0")))

(check-synth)
