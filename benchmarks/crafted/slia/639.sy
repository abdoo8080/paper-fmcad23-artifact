(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (StartInt_3 Int) (Start_12 String) (Start_9 String) (Start_14 String) (StartBool_1 Bool) (StartInt_4 Int) (Start_3 String) (Start_13 String) (StartInt_1 Int) (Start_11 String) (StartBool_2 Bool) (StartInt_5 Int) (Start_7 String) (Start_5 String) (StartInt_8 Int) (Start_10 String) (Start_4 String) (StartInt_2 Int) (StartInt_7 Int) (Start_6 String) (Start_2 String) (StartInt_9 Int) (StartInt_6 Int) (Start_8 String))
  ((Start String ("a" y "b" "1" (str.++ Start Start_1) (str.at Start_1 StartInt_1) (str.substr Start StartInt_2 StartInt_3) (ite StartBool_1 Start Start_1)))
   (StartInt Int (1 (str.len Start_12) (str.indexof Start_9 Start_1 StartInt_5)))
   (StartBool Bool (true (str.< Start_11 Start_10) (str.contains Start Start_13) (<= StartInt_9 StartInt_2)))
   (Start_1 String ("b" (str.at Start_4 StartInt_5) (ite StartBool Start_7 Start_6)))
   (StartInt_3 Int (1 0))
   (Start_12 String ("b" "1" (str.++ Start_9 Start_2) (str.from_int StartInt_2)))
   (Start_9 String ("b" x y "0" (str.++ Start_3 Start_8) (str.at Start_10 StartInt_4) (str.replace Start_6 Start_2 Start_5) (str.from_int StartInt_4) (ite StartBool Start_4 Start_10)))
   (Start_14 String (y "" (str.++ Start_8 Start_1)))
   (StartBool_1 Bool (false (and StartBool StartBool_1) (str.< Start_1 Start) (str.<= Start_2 Start_2) (= Start_3 Start_2) (= StartInt_3 StartInt_1) (<= StartInt_4 StartInt)))
   (StartInt_4 Int (0 1))
   (Start_3 String ("0" "1" (str.at Start_4 StartInt_2) (str.replace Start_1 Start_4 Start) (str.from_int StartInt_2) (ite StartBool_2 Start_1 Start)))
   (Start_13 String ("b" (str.replace Start_14 Start_10 Start_11) (str.from_int StartInt)))
   (StartInt_1 Int (0 1 (str.len Start_8) (str.indexof Start_4 Start_7 StartInt_3)))
   (Start_11 String ("1" (str.at Start_5 StartInt_1) (ite StartBool Start_5 Start_5)))
   (StartBool_2 Bool (true (str.< Start_1 Start_4) (str.<= Start Start_1) (str.prefixof Start_2 Start_5) (= StartInt_1 StartInt_3) (<= StartInt_5 StartInt_6)))
   (StartInt_5 Int (0 1))
   (Start_7 String ("0" (str.at Start_7 StartInt_8)))
   (Start_5 String (x "a" (str.from_int StartInt_3)))
   (StartInt_8 Int (0 1 (str.to_int Start)))
   (Start_10 String ("" "a" "1" "b" "0" (str.at Start_6 StartInt_8) (str.replace Start_7 Start_9 Start_3) (str.from_int StartInt) (ite StartBool_2 Start_2 Start_11)))
   (Start_4 String ("0" (str.from_int StartInt_6) (ite StartBool Start Start_3)))
   (StartInt_2 Int (1 0 (str.to_int Start_7)))
   (StartInt_7 Int (0 1 (str.len Start_4)))
   (Start_6 String ("0" (str.++ Start_1 Start) (str.replace Start_5 Start Start_5) (str.from_int StartInt_1)))
   (Start_2 String ("b" (str.++ Start Start_7) (str.at Start_1 StartInt_2) (str.substr Start_8 StartInt StartInt_7) (ite StartBool_1 Start_4 Start_6)))
   (StartInt_9 Int (1 (str.indexof Start_12 Start_14 StartInt_6)))
   (StartInt_6 Int (0 (str.len Start_6)))
   (Start_8 String ("a" (str.++ Start_1 Start_9) (str.at Start_3 StartInt_2) (str.substr Start_4 StartInt StartInt_7) (str.from_int StartInt) (ite StartBool Start_6 Start_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr "1" (str.to_int (str.++ "1" (str.replace x "a" ""))) 1)))

(check-synth)
