(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_1 Int) (Start_3 String) (Start_9 String) (StartInt_3 Int) (Start_6 String) (StartBool_2 Bool) (StartInt_2 Int) (StartBool_1 Bool) (Start_4 String) (Start_2 String) (Start_10 String) (Start_1 String) (StartInt_4 Int) (Start_7 String) (Start_8 String) (StartInt_6 Int) (StartBool_3 Bool) (StartInt_5 Int) (Start_5 String))
  ((Start String ("0" y (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start Start Start)))
   (StartInt Int (1 (str.len Start_5) (str.to_int Start_6)))
   (StartBool Bool (true (and StartBool_1 StartBool_1) (str.< Start_2 Start_9) (str.<= Start_9 Start_3) (str.prefixof Start_10 Start_10) (str.suffixof Start_4 Start_9) (= Start Start_10) (<= StartInt_2 StartInt_6)))
   (StartInt_1 Int (1 0 (str.indexof Start_4 Start_9 StartInt_4) (str.to_int Start_2)))
   (Start_3 String (y))
   (Start_9 String ("a" (str.substr Start_8 StartInt_3 StartInt_2) (str.replace Start_4 Start_6 Start_2)))
   (StartInt_3 Int (1 0 (str.len Start_1) (str.indexof Start_2 Start_1 StartInt_4)))
   (Start_6 String ("0" (str.substr Start_3 StartInt_1 StartInt_4) (str.from_int StartInt_3) (ite StartBool_2 Start Start_7)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.< Start_7 Start_3) (str.<= Start_8 Start_7) (= StartInt_5 StartInt_6)))
   (StartInt_2 Int (0 1 (str.indexof Start Start StartInt_3) (str.to_int Start_2)))
   (StartBool_1 Bool (true (not StartBool) (str.< Start_3 Start_4) (str.<= Start_2 Start_4) (str.prefixof Start Start_4) (str.contains Start_5 Start_4) (= Start_3 Start_6) (<= StartInt_4 StartInt_4)))
   (Start_4 String ("" "0" (str.at Start_6 StartInt_5) (str.replace Start_9 Start_2 Start) (ite StartBool_2 Start_1 Start_1)))
   (Start_2 String (x "a" (str.replace Start Start_2 Start) (ite StartBool_1 Start_2 Start_1)))
   (Start_10 String (x (str.++ Start_8 Start_5) (str.substr Start_10 StartInt_2 StartInt_5) (str.replace Start_3 Start_1 Start_4) (str.from_int StartInt_5) (ite StartBool_1 Start Start_9)))
   (Start_1 String (x "0" y "a" "b" "1" (str.substr Start_10 StartInt_3 StartInt) (str.replace Start_6 Start_4 Start_2) (str.from_int StartInt_4)))
   (StartInt_4 Int (0 1 (str.indexof Start_3 Start StartInt_2) (str.to_int Start_6)))
   (Start_7 String (x (str.++ Start_8 Start_7) (str.at Start_3 StartInt) (str.substr Start_6 StartInt_2 StartInt_1)))
   (Start_8 String ("b" (str.from_int StartInt_3) (ite StartBool_3 Start_8 Start_3)))
   (StartInt_6 Int (1 0))
   (StartBool_3 Bool (true false (str.<= Start Start) (str.prefixof Start Start_6) (str.suffixof Start_6 Start_6) (str.contains Start_6 Start_1) (= StartInt_4 StartInt_3) (<= StartInt_1 StartInt_3)))
   (StartInt_5 Int (0 1))
   (Start_5 String (y x (str.++ Start_7 Start_2) (str.at Start_2 StartInt_6) (str.replace Start_8 Start_1 Start_6) (ite StartBool_2 Start_6 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ "b" (str.replace y "1" ""))))

(check-synth)
