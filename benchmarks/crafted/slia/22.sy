(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_4 String) (Start_8 String) (Start_5 String) (StartInt_2 Int) (StartInt_3 Int) (StartBool_1 Bool) (Start_2 String) (Start_1 String) (StartInt_5 Int) (StartInt_1 Int) (Start_6 String) (Start_7 String) (Start_3 String) (StartInt_6 Int) (StartInt_4 Int))
  ((Start String ("a" (str.++ Start_1 Start_1) (str.substr Start StartInt StartInt_1) (str.from_int StartInt)))
   (StartInt Int (1 0 (str.len Start_5) (str.indexof Start_6 Start_3 StartInt_1) (str.to_int Start_1)))
   (StartBool Bool (true (str.suffixof Start_6 Start_5) (= Start Start_7) (= StartInt_4 StartInt_2)))
   (Start_4 String ("1" x (str.from_int StartInt_4) (ite StartBool Start Start_8)))
   (Start_8 String ("1" "a" (str.from_int StartInt_6)))
   (Start_5 String ("a" (str.at Start_3 StartInt_1) (str.substr Start_2 StartInt_4 StartInt_3) (str.replace Start_2 Start_3 Start_6) (str.from_int StartInt_3) (ite StartBool Start_8 Start_2)))
   (StartInt_2 Int (1 (str.len Start_1) (str.to_int Start_3)))
   (StartInt_3 Int (1 0 (str.len Start_3) (str.indexof Start_2 Start StartInt_1)))
   (StartBool_1 Bool (false true (and StartBool StartBool_1) (str.< Start_6 Start_6) (str.<= Start_4 Start_4) (str.prefixof Start_1 Start_7) (str.suffixof Start_5 Start) (str.contains Start_7 Start_1)))
   (Start_2 String (x (str.++ Start_1 Start_4) (str.replace Start_3 Start_5 Start_3) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_6)))
   (Start_1 String ("0" x (str.substr Start StartInt StartInt_1) (str.from_int StartInt) (ite StartBool Start_2 Start_3)))
   (StartInt_5 Int (1 (str.indexof Start_5 Start_4 StartInt)))
   (StartInt_1 Int (1 0 (str.indexof Start Start StartInt_1)))
   (Start_6 String ("1" (str.++ Start_1 Start_4) (str.replace Start_4 Start_1 Start_7) (str.from_int StartInt_3)))
   (Start_7 String ("" "0" "b" (str.at Start_5 StartInt_4) (str.substr Start_1 StartInt_5 StartInt_5) (str.replace Start_3 Start_6 Start_5) (str.from_int StartInt_6)))
   (Start_3 String ("" (str.at Start_3 StartInt_2) (str.replace Start_2 Start_1 Start_2) (str.from_int StartInt)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.to_int Start_2)))
   (StartInt_4 Int (0 (str.indexof Start_1 Start_4 StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "a" x "a")))

(check-synth)
