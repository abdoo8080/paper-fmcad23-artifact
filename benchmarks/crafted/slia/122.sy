(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (Start_3 String) (StartInt_1 Int) (StartInt_2 Int) (Start_1 String) (StartInt_4 Int) (Start_2 String) (Start_5 String) (Start_4 String) (Start_6 String) (StartInt_3 Int) (Start_7 String))
  ((Start String ("1" (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt) (ite StartBool Start_3 Start_1)))
   (StartInt Int (0 1 (str.to_int Start_3)))
   (StartBool Bool (true (str.< Start_5 Start_6) (str.prefixof Start Start_6) (str.suffixof Start_7 Start_3) (= Start_7 Start_8)))
   (Start_8 String ("a" (str.++ Start_1 Start_8) (str.at Start StartInt_3) (str.replace Start_5 Start_8 Start_5)))
   (Start_3 String ("" (str.++ Start_3 Start_3) (str.replace Start_2 Start_3 Start_1)))
   (StartInt_1 Int (1 (str.len Start) (str.to_int Start)))
   (StartInt_2 Int (0 1 (str.len Start) (str.indexof Start_1 Start_1 StartInt_1)))
   (Start_1 String ("a" (str.++ Start_4 Start_3) (str.at Start_3 StartInt_2) (str.replace Start_1 Start_3 Start_2) (ite StartBool Start_4 Start)))
   (StartInt_4 Int (0 1))
   (Start_2 String ("1" y "b" (str.++ Start Start) (str.at Start_3 StartInt_2) (str.substr Start_3 StartInt_1 StartInt_1)))
   (Start_5 String (x (str.substr Start StartInt_1 StartInt_3) (str.from_int StartInt_4)))
   (Start_4 String (y "0" (str.at Start_3 StartInt_3) (str.replace Start_2 Start Start_4)))
   (Start_6 String (y (str.at Start_3 StartInt_3)))
   (StartInt_3 Int (1 0 (str.indexof Start_1 Start StartInt_2)))
   (Start_7 String (y (str.++ Start_1 Start_8)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" "" "0")))

(check-synth)
