(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_5 Int) (StartInt_1 Int) (Start_1 String) (Start_4 String) (Start_3 String) (StartInt_4 Int) (StartInt_3 Int) (Start_2 String) (Start_5 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_6 String))
  ((Start String ("b" "1" "" y (str.++ Start Start) (str.at Start StartInt) (str.replace Start_1 Start Start_1) (ite StartBool Start_2 Start)))
   (StartInt Int (1))
   (StartBool Bool (true (not StartBool) (str.<= Start_4 Start_3) (str.prefixof Start_5 Start_5) (str.suffixof Start_5 Start_6) (str.contains Start Start_5) (= Start_2 Start) (<= StartInt_3 StartInt)))
   (StartInt_5 Int (0 1 (str.to_int Start_2)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start_1 Start_1 StartInt)))
   (Start_1 String ("1" (str.at Start_2 StartInt_2) (str.replace Start_2 Start_3 Start_3) (ite StartBool_1 Start Start_2)))
   (Start_4 String ("b" "0" (ite StartBool_1 Start_2 Start_5)))
   (Start_3 String ("b" "1" (str.at Start_1 StartInt) (str.substr Start_2 StartInt_1 StartInt_1)))
   (StartInt_4 Int (0 1 (str.len Start) (str.indexof Start_1 Start_2 StartInt_3)))
   (StartInt_3 Int (1 (str.indexof Start_4 Start_6 StartInt_3)))
   (Start_2 String (x "" "b" y (str.substr Start_1 StartInt StartInt) (str.replace Start_1 Start_2 Start_2) (str.from_int StartInt_1)))
   (Start_5 String ("a" "1" (str.at Start StartInt_2) (str.substr Start_2 StartInt_1 StartInt_5) (str.from_int StartInt_3) (ite StartBool_1 Start_4 Start_4)))
   (StartInt_2 Int (0 1))
   (StartBool_1 Bool (true (str.< Start_3 Start_3) (str.suffixof Start_3 Start_2) (str.contains Start_3 Start_3) (= StartInt StartInt_2)))
   (Start_6 String ("" (str.++ Start_2 Start) (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "1" (str.++ y "a"))))

(check-synth)
