(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_17 String) (StartInt_9 Int) (Start_3 String) (Start_15 String) (Start_1 String) (StartInt_4 Int) (StartInt_5 Int) (Start_12 String) (StartInt_1 Int) (Start_6 String) (Start_8 String) (Start_4 String) (StartInt_6 Int) (StartBool_3 Bool) (Start_9 String) (Start_14 String) (StartInt_3 Int) (Start_16 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_5 String) (Start_13 String) (Start_2 String) (Start_7 String) (Start_10 String) (StartBool_2 Bool) (StartInt_7 Int) (Start_11 String) (StartInt_8 Int))
  ((Start String (x "0" (str.++ Start Start_1) (str.at Start_2 StartInt_1) (str.substr Start StartInt_2 StartInt_3) (str.replace Start Start_1 Start)))
   (StartInt Int (0 (str.len Start_13) (str.indexof Start_13 Start_18 StartInt_7) (str.to_int Start_2)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_1 StartBool_1) (str.< Start_8 Start_2) (str.prefixof Start_15 Start_11)))
   (Start_18 String ("a" "1" y (str.replace Start_7 Start Start_18) (str.from_int StartInt_9)))
   (Start_17 String ("b" x "1" (str.at Start_10 StartInt_7) (str.substr Start_1 StartInt_9 StartInt_6) (str.replace Start_2 Start_12 Start_8) (ite StartBool_2 Start_8 Start_3)))
   (StartInt_9 Int (1 (str.len Start_9) (str.to_int Start_4)))
   (Start_3 String ("b" (str.substr Start_3 StartInt_2 StartInt_1) (str.from_int StartInt_2)))
   (Start_15 String ("1" (str.substr Start_16 StartInt_8 StartInt_7) (str.replace Start_13 Start_9 Start) (ite StartBool_3 Start_1 Start_13)))
   (Start_1 String ("0" (str.++ Start_5 Start_1) (str.at Start_2 StartInt_5) (str.replace Start_6 Start_1 Start_6)))
   (StartInt_4 Int (0 1 (str.to_int Start_2)))
   (StartInt_5 Int (0 1 (str.indexof Start_5 Start_6 StartInt_6)))
   (Start_12 String ("0" y (str.++ Start_10 Start_15) (str.replace Start_13 Start_10 Start_7) (ite StartBool Start_14 Start_3)))
   (StartInt_1 Int (1 0 (str.to_int Start_1)))
   (Start_6 String (x "b" (str.substr Start_1 StartInt_5 StartInt_5) (ite StartBool_1 Start_2 Start)))
   (Start_8 String (y (str.++ Start Start_4) (str.replace Start_7 Start_6 Start_8) (ite StartBool_2 Start Start_9)))
   (Start_4 String ("b" "" y "a" "1" x (str.++ Start_3 Start) (str.at Start_2 StartInt_4) (str.substr Start_1 StartInt_2 StartInt_4)))
   (StartInt_6 Int (1 (str.len Start_7) (str.indexof Start_1 Start_4 StartInt) (str.to_int Start_2)))
   (StartBool_3 Bool (true false (str.< Start_4 Start_13) (str.<= Start_6 Start_9) (str.prefixof Start Start_11) (str.contains Start_14 Start_14) (= Start_9 Start_2) (<= StartInt_7 StartInt_8)))
   (Start_9 String ("" y (str.++ Start_9 Start_10) (str.substr Start_1 StartInt_2 StartInt_2) (ite StartBool_2 Start_1 Start_5)))
   (Start_14 String (y "a" (str.++ Start_3 Start_9) (str.from_int StartInt_4) (ite StartBool_2 Start Start_9)))
   (StartInt_3 Int (1 (str.len Start) (str.indexof Start_2 Start StartInt_2) (str.to_int Start_1)))
   (Start_16 String (x "0" "" "1" "a" (str.++ Start_14 Start_14) (str.at Start_17 StartInt_6)))
   (StartBool_1 Bool (true (str.prefixof Start_4 Start_3) (= StartInt_1 StartInt_3)))
   (StartInt_2 Int (1 (str.to_int Start_1)))
   (Start_5 String ("a" (str.at Start_11 StartInt_7) (str.substr Start_6 StartInt StartInt_6) (ite StartBool Start_1 Start_7)))
   (Start_13 String ("a" "b" "0" "" (str.at Start_12 StartInt_1) (str.substr Start_2 StartInt_9 StartInt_3) (ite StartBool_3 Start Start_8)))
   (Start_2 String (y "0" (str.++ Start Start) (str.at Start_3 StartInt_4) (str.substr Start StartInt_3 StartInt_2) (ite StartBool_1 Start_1 Start)))
   (Start_7 String ("a" (str.at Start_2 StartInt_4) (str.replace Start_8 Start Start_3) (str.from_int StartInt_6)))
   (Start_10 String ("" (str.at Start_4 StartInt_6) (str.replace Start_9 Start_6 Start_9) (str.from_int StartInt_6)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_1 StartBool_1) (str.< Start_7 Start)))
   (StartInt_7 Int (1 (str.len Start_2)))
   (Start_11 String (x "1" (str.at Start_8 StartInt_6) (str.substr Start_12 StartInt StartInt_3) (str.replace Start_9 Start_4 Start_12) (ite StartBool_3 Start_7 Start_11)))
   (StartInt_8 Int (0 1 (str.indexof Start_6 Start_2 StartInt_6) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" x (str.++ "1" "0"))))

(check-synth)
