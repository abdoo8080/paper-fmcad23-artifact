(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_12 String) (Start_9 String) (StartBool_2 Bool) (Start_1 String) (StartBool_4 Bool) (Start_2 String) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_8 Int) (StartInt_3 Int) (Start_10 String) (Start_7 String) (StartInt_7 Int) (StartBool_3 Bool) (Start_4 String) (StartInt_5 Int) (Start_5 String) (Start_3 String) (Start_6 String) (StartInt_6 Int) (Start_8 String) (StartInt_4 Int) (StartInt_2 Int))
  ((Start String ("" y (str.++ Start_1 Start_2) (str.substr Start_2 StartInt_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_2 Start_1)))
   (StartInt Int (0))
   (StartBool Bool (false (and StartBool StartBool_3) (str.< Start_11 Start_12) (= StartInt_6 StartInt)))
   (Start_11 String ("a" x y "1" ""))
   (Start_12 String ("1" y "a" (str.++ Start_2 Start_3) (str.at Start_3 StartInt) (str.substr Start_8 StartInt_5 StartInt_2) (ite StartBool_3 Start Start_1)))
   (Start_9 String (x y "1" "" (str.++ Start_8 Start_5) (str.substr Start_4 StartInt_2 StartInt_4)))
   (StartBool_2 Bool (true false (not StartBool) (str.< Start Start_8) (str.<= Start_1 Start_9) (str.prefixof Start_8 Start) (str.suffixof Start_7 Start_7) (str.contains Start_6 Start_4) (= StartInt StartInt_7) (<= StartInt_2 StartInt)))
   (Start_1 String ("1" (ite StartBool_2 Start_5 Start_3)))
   (StartBool_4 Bool (false true (not StartBool) (str.<= Start_7 Start_5) (str.suffixof Start_6 Start_8) (= Start_5 Start_9) (= StartInt_1 StartInt_3)))
   (Start_2 String ("b" "0" (str.substr Start_5 StartInt_2 StartInt_1) (str.replace Start_1 Start_3 Start_1) (ite StartBool_1 Start_3 Start_5)))
   (StartInt_1 Int (0 1 (str.len Start_2) (str.to_int Start_5)))
   (StartBool_1 Bool (false true (not StartBool) (str.< Start_3 Start_2) (= Start_4 Start_2) (= StartInt_3 StartInt_2)))
   (StartInt_8 Int (1 0 (str.len Start_10) (str.indexof Start_2 Start_4 StartInt_6) (str.to_int Start_8)))
   (StartInt_3 Int (1 0 (str.to_int Start_2)))
   (Start_10 String (x y (str.replace Start_5 Start_7 Start_2) (ite StartBool Start_2 Start_1)))
   (Start_7 String ("b" "" y (str.at Start_2 StartInt_1) (ite StartBool_1 Start_6 Start)))
   (StartInt_7 Int (0 (str.indexof Start_5 Start_5 StartInt_1) (str.to_int Start_1)))
   (StartBool_3 Bool (true (not StartBool_4) (str.< Start_11 Start) (str.<= Start_3 Start_8) (= Start_6 Start_4) (<= StartInt_8 StartInt_8)))
   (Start_4 String (y x "b" "0" "1" (str.++ Start_3 Start_4) (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt StartInt) (str.from_int StartInt_3)))
   (StartInt_5 Int (0 (str.to_int Start_7)))
   (Start_5 String ("" (str.++ Start Start_1) (str.at Start_6 StartInt_1) (str.substr Start_6 StartInt_6 StartInt_1) (ite StartBool_1 Start Start_6)))
   (Start_3 String ("" "0" (str.++ Start_1 Start) (str.at Start_1 StartInt) (str.substr Start_1 StartInt_4 StartInt_5) (ite StartBool_1 Start_5 Start_3)))
   (Start_6 String ("0" "" (str.at Start_4 StartInt_2) (str.from_int StartInt_5)))
   (StartInt_6 Int (0 1 (str.indexof Start_2 Start_3 StartInt_7) (str.to_int Start_2)))
   (Start_8 String ("0" "b" "1" x y "a" (str.++ Start_7 Start_3) (str.substr Start_4 StartInt_8 StartInt_2) (str.replace Start_3 Start_6 Start_1)))
   (StartInt_4 Int (1 0 (str.indexof Start Start_7 StartInt_4) (str.to_int Start_4)))
   (StartInt_2 Int (0 1 (str.len Start_7) (str.indexof Start_2 Start_2 StartInt) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace (str.substr y 0 1) x "b") "0")))

(check-synth)
