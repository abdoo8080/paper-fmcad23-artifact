(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_4 Bool) (Start_8 String) (StartBool_3 Bool) (StartInt_1 Int) (Start_6 String) (StartBool_2 Bool) (Start_2 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_5 String) (Start_7 String) (Start_1 String) (Start_3 String) (Start_4 String) (StartInt_3 Int))
  ((Start String ("" x (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.substr Start StartInt_1 StartInt) (str.replace Start Start_1 Start)))
   (StartInt Int (1 0 (str.indexof Start_2 Start_4 StartInt_2)))
   (StartBool Bool (false (and StartBool_2 StartBool_3) (str.< Start_1 Start_2) (str.<= Start_3 Start) (= Start_2 Start) (= StartInt_3 StartInt_3)))
   (StartBool_4 Bool (false (str.prefixof Start_6 Start_1) (str.suffixof Start_4 Start) (str.contains Start_4 Start_8)))
   (Start_8 String ("a" y "0" "" "1" "b"))
   (StartBool_3 Bool (false (not StartBool) (str.prefixof Start_5 Start_2) (str.suffixof Start_2 Start_5) (str.contains Start_2 Start_7) (= Start_2 Start_4) (= StartInt_1 StartInt) (<= StartInt StartInt_3)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start_1 Start StartInt_1)))
   (Start_6 String (y (str.++ Start_1 Start_4) (str.from_int StartInt)))
   (StartBool_2 Bool (false true (and StartBool_4 StartBool_4) (str.prefixof Start_4 Start_1) (str.suffixof Start_6 Start_3) (str.contains Start_4 Start_8) (<= StartInt_2 StartInt)))
   (Start_2 String ("0" "a" (str.++ Start_1 Start) (str.at Start_3 StartInt_2) (str.replace Start_2 Start_3 Start_1)))
   (StartBool_1 Bool (false true (and StartBool StartBool_1) (str.< Start_4 Start) (str.<= Start Start_5) (str.contains Start_2 Start)))
   (StartInt_2 Int (0))
   (Start_5 String ("b" (str.++ Start_5 Start_2) (str.at Start_4 StartInt)))
   (Start_7 String (x (str.++ Start Start_5) (str.at Start_7 StartInt) (str.substr Start_1 StartInt_3 StartInt) (str.from_int StartInt_2)))
   (Start_1 String ("b" (str.at Start_3 StartInt) (str.substr Start_5 StartInt_2 StartInt) (str.replace Start_2 Start_6 Start_2)))
   (Start_3 String ("a" (ite StartBool_1 Start_3 Start_2)))
   (Start_4 String (x y "0" (str.substr Start_4 StartInt_1 StartInt) (ite StartBool Start_4 Start_3)))
   (StartInt_3 Int (0 (str.indexof Start Start_4 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x (str.++ "1" y) "a")))

(check-synth)
