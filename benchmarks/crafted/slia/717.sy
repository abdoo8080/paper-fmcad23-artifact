(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (StartInt_1 Int) (StartInt_7 Int) (StartInt_8 Int) (Start_11 String) (Start_4 String) (Start_9 String) (StartInt_2 Int) (Start_3 String) (StartInt_3 Int) (Start_10 String) (StartInt_4 Int) (Start_8 String) (Start_2 String) (Start_5 String) (StartBool_1 Bool) (Start_1 String) (Start_6 String) (Start_7 String) (StartInt_6 Int) (StartBool_2 Bool) (StartInt_5 Int))
  ((Start String ("" x "b" "1" "a" (str.++ Start Start) (str.substr Start_1 StartInt_1 StartInt) (str.replace Start_1 Start Start_1) (ite StartBool Start_2 Start_3)))
   (StartInt Int (0 (str.to_int Start_3)))
   (StartBool Bool (false true (and StartBool StartBool_1) (str.prefixof Start_8 Start_10) (= Start Start_7) (= StartInt_5 StartInt_7)))
   (StartInt_9 Int (1 0 (str.len Start_4)))
   (StartInt_1 Int (1 (str.len Start_5) (str.indexof Start_6 Start_3 StartInt_4) (str.to_int Start_9)))
   (StartInt_7 Int (0 1 (str.to_int Start_9)))
   (StartInt_8 Int (1 0 (str.to_int Start_4)))
   (Start_11 String ("0" (str.++ Start_6 Start_3) (str.substr Start_3 StartInt_2 StartInt_5) (ite StartBool_2 Start_3 Start_5)))
   (Start_4 String ("1" (str.++ Start_2 Start_4)))
   (Start_9 String ("1" y (str.substr Start_7 StartInt_4 StartInt_3) (str.from_int StartInt_6)))
   (StartInt_2 Int (1 0 (str.len Start_6)))
   (Start_3 String (y (str.++ Start_1 Start_4) (str.at Start_3 StartInt_2) (str.from_int StartInt_3)))
   (StartInt_3 Int (1 (str.indexof Start Start_5 StartInt_1)))
   (Start_10 String (x "" (str.++ Start_4 Start_11) (str.substr Start StartInt_6 StartInt) (str.from_int StartInt_2) (ite StartBool Start_2 Start_1)))
   (StartInt_4 Int (1 (str.len Start_3) (str.to_int Start_1)))
   (Start_8 String ("b" (str.++ Start_6 Start_7) (str.substr Start_2 StartInt_3 StartInt_2) (str.from_int StartInt_2) (ite StartBool Start_9 Start_1)))
   (Start_2 String ("0" x (str.++ Start_10 Start_9) (str.substr Start_8 StartInt_1 StartInt_4)))
   (Start_5 String ("a" (str.++ Start_1 Start_6) (str.at Start_4 StartInt_4) (str.from_int StartInt_3) (ite StartBool Start Start)))
   (StartBool_1 Bool (true false (str.prefixof Start_7 Start) (str.contains Start_1 Start_3) (= StartInt StartInt_1)))
   (Start_1 String ("1" (str.++ Start_11 Start_4) (str.at Start_10 StartInt_7) (str.substr Start_4 StartInt StartInt_9) (str.from_int StartInt_3) (ite StartBool Start_8 Start_1)))
   (Start_6 String ("0" (str.at Start_2 StartInt) (str.substr Start_2 StartInt_5 StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_6 Start_1)))
   (Start_7 String ("a" "0" (str.++ Start Start_3) (str.substr Start_8 StartInt StartInt_3) (str.replace Start_1 Start Start_5) (str.from_int StartInt_5) (ite StartBool Start_7 Start_2)))
   (StartInt_6 Int (0 1 (str.to_int Start_9)))
   (StartBool_2 Bool (false (and StartBool_2 StartBool_1) (str.< Start_3 Start_9) (str.<= Start_10 Start_10) (str.contains Start_6 Start_11) (= Start_5 Start_11) (= StartInt_7 StartInt_8)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.indexof Start_2 Start_2 StartInt_2) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.suffixof x "a") "b" "a")))

(check-synth)
