(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (Start_15 String) (Start_14 String) (Start_4 String) (Start_1 String) (Start_13 String) (Start_12 String) (Start_6 String) (StartInt_3 Int) (StartBool_5 Bool) (Start_2 String) (StartInt_6 Int) (Start_11 String) (StartBool_1 Bool) (Start_9 String) (StartInt_4 Int) (Start_7 String) (StartInt_1 Int) (Start_8 String) (StartBool_3 Bool) (Start_5 String) (Start_10 String) (StartBool_2 Bool) (StartInt_7 Int) (StartInt_5 Int) (StartInt_9 Int) (StartInt_2 Int) (StartInt_8 Int) (StartBool_4 Bool) (Start_3 String))
  ((Start String (y (str.++ Start Start) (str.at Start StartInt_1) (str.from_int StartInt_2)))
   (StartInt Int (1 (str.indexof Start Start_11 StartInt_1)))
   (StartBool Bool (false true (and StartBool_5 StartBool_5) (str.< Start_5 Start_3) (str.<= Start_8 Start_2) (str.prefixof Start_4 Start_1) (= Start_13 Start_9) (= StartInt_6 StartInt_9) (<= StartInt_5 StartInt_5)))
   (Start_16 String ("a" "b" "1" (str.substr Start_4 StartInt_1 StartInt_8) (str.from_int StartInt_5) (ite StartBool_2 Start_13 Start_14)))
   (Start_15 String ("1" "0" (str.++ Start_4 Start_4) (str.at Start_5 StartInt_9) (str.substr Start_10 StartInt_3 StartInt_1) (str.replace Start_16 Start_8 Start_3) (ite StartBool_1 Start_2 Start_8)))
   (Start_14 String ("b" "0" "a" (str.++ Start_14 Start_6) (str.at Start_11 StartInt_5) (str.substr Start_12 StartInt StartInt_8) (str.replace Start Start_13 Start_15)))
   (Start_4 String ("1" "b" "0" "" (str.++ Start_1 Start) (str.at Start_1 StartInt_1) (str.substr Start StartInt_4 StartInt) (str.replace Start_5 Start_4 Start_4) (str.from_int StartInt) (ite StartBool Start_2 Start_6)))
   (Start_1 String ("1" y "b" (str.++ Start Start) (str.substr Start StartInt_2 StartInt_3) (str.replace Start_1 Start Start)))
   (Start_13 String ("1" x (str.++ Start_13 Start_11) (str.substr Start_14 StartInt_4 StartInt_5) (str.replace Start_8 Start_9 Start_11) (str.from_int StartInt_9) (ite StartBool_3 Start_5 Start_3)))
   (Start_12 String ("a" (str.at Start_11 StartInt_5) (str.substr Start_7 StartInt_3 StartInt_2) (str.from_int StartInt_8) (ite StartBool_5 Start_4 Start_4)))
   (Start_6 String ("0" (str.substr Start_7 StartInt_2 StartInt) (str.from_int StartInt_5)))
   (StartInt_3 Int (0 (str.len Start) (str.indexof Start_1 Start StartInt_1) (str.to_int Start)))
   (StartBool_5 Bool (true false (and StartBool_5 StartBool) (str.< Start_8 Start_8) (= StartInt StartInt_6)))
   (Start_2 String ("a" (ite StartBool Start_3 Start_4)))
   (StartInt_6 Int (1 0 (str.to_int Start_1)))
   (Start_11 String ("0" "a" (str.at Start_11 StartInt_6)))
   (StartBool_1 Bool (true (str.<= Start_1 Start_4) (str.contains Start_5 Start_5) (= Start_2 Start_8) (= StartInt StartInt_3) (<= StartInt StartInt)))
   (Start_9 String (x "" (str.++ Start_4 Start_6) (str.at Start_1 StartInt_2) (str.substr Start StartInt_1 StartInt_1)))
   (StartInt_4 Int (1 (str.indexof Start_8 Start_1 StartInt_6) (str.to_int Start_10)))
   (Start_7 String ("b" "a" "" (str.++ Start_5 Start_6) (str.substr Start_2 StartInt_3 StartInt_1) (str.replace Start_4 Start_5 Start_6) (ite StartBool_1 Start_4 Start_4)))
   (StartInt_1 Int (0 1 (str.indexof Start_1 Start_2 StartInt_3)))
   (Start_8 String ("0" "1" (str.at Start_4 StartInt_6) (str.substr Start StartInt StartInt_2)))
   (StartBool_3 Bool (false (not StartBool_1) (str.<= Start_11 Start_7) (str.prefixof Start_9 Start_12) (str.contains Start_4 Start_5) (= StartInt StartInt_4) (<= StartInt_4 StartInt_6)))
   (Start_5 String ("" "1" (str.++ Start_6 Start_1) (str.replace Start_7 Start_6 Start_6) (ite StartBool_1 Start_6 Start_9)))
   (Start_10 String (x (str.at Start StartInt_3) (ite StartBool_2 Start_11 Start_9)))
   (StartBool_2 Bool (true false (not StartBool_3) (and StartBool StartBool_4) (str.<= Start_1 Start_7) (str.suffixof Start Start_5) (str.contains Start_11 Start_2) (= Start_2 Start_5) (<= StartInt_1 StartInt_7)))
   (StartInt_7 Int (0 1 (str.indexof Start_2 Start StartInt_1)))
   (StartInt_5 Int (1))
   (StartInt_9 Int (0 1 (str.len Start_9) (str.to_int Start_6)))
   (StartInt_2 Int (0 (str.len Start_1)))
   (StartInt_8 Int (0 1 (str.len Start_7)))
   (StartBool_4 Bool (true false (str.< Start_11 Start_8) (= StartInt_2 StartInt_3) (<= StartInt_8 StartInt_9)))
   (Start_3 String ("" y (str.++ Start_4 Start) (ite StartBool_5 Start_5 Start_10)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at x 1) "b")))

(check-synth)
