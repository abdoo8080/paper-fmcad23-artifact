(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (StartInt_6 Int) (Start_10 String) (Start_2 String) (StartBool_2 Bool) (Start_4 String) (Start_1 String) (StartInt_2 Int) (StartInt_1 Int) (Start_6 String) (StartInt_3 Int) (StartInt_5 Int) (StartBool_1 Bool) (Start_5 String) (Start_3 String) (Start_7 String) (Start_9 String) (Start_8 String) (StartInt_4 Int))
  ((Start String ("b" "0" "1" (str.++ Start_1 Start_1) (str.at Start_1 StartInt)))
   (StartInt Int (0 1 (str.len Start_1) (str.indexof Start_4 Start_10 StartInt_5)))
   (StartBool Bool (false true (and StartBool_2 StartBool_1) (str.<= Start Start_3) (str.prefixof Start_3 Start) (str.contains Start_9 Start_1) (= StartInt StartInt_6)))
   (Start_11 String (y "1" "a" "b" (str.++ Start_11 Start_4) (str.replace Start_11 Start Start_3) (str.from_int StartInt) (ite StartBool_1 Start Start_2)))
   (StartInt_6 Int (1 0 (str.indexof Start_11 Start_10 StartInt_5)))
   (Start_10 String ("a" y x "b" "1" (str.at Start_9 StartInt_5) (str.substr Start_1 StartInt_3 StartInt_2) (ite StartBool Start_8 Start_5)))
   (Start_2 String (x "a" (str.at Start_6 StartInt_2) (str.substr Start_9 StartInt StartInt_2) (str.replace Start_7 Start_4 Start_7) (str.from_int StartInt_4) (ite StartBool_2 Start_9 Start_7)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_1 StartBool) (str.<= Start_2 Start_4) (str.contains Start_6 Start_9) (= Start_3 Start_3)))
   (Start_4 String ("1" (str.++ Start_5 Start_9) (str.substr Start_4 StartInt_3 StartInt_4) (str.replace Start_7 Start_6 Start_9) (ite StartBool_2 Start_9 Start)))
   (Start_1 String ("0" x (str.at Start_2 StartInt) (str.substr Start_3 StartInt_1 StartInt_2) (str.from_int StartInt_1)))
   (StartInt_2 Int (1 (str.len Start_2)))
   (StartInt_1 Int (1 (str.to_int Start_1)))
   (Start_6 String ("a" "0" (str.at Start_4 StartInt_3) (str.replace Start_4 Start Start_1) (ite StartBool_1 Start_5 Start_3)))
   (StartInt_3 Int (0 1 (str.len Start_2) (str.indexof Start_1 Start_6 StartInt_2) (str.to_int Start_5)))
   (StartInt_5 Int (1 (str.indexof Start_2 Start_4 StartInt_5)))
   (StartBool_1 Bool (false true (not StartBool) (and StartBool_1 StartBool_1) (str.<= Start_3 Start_1) (<= StartInt_1 StartInt_2)))
   (Start_5 String ("" "1" (str.substr Start_5 StartInt_1 StartInt_1) (str.from_int StartInt_2) (ite StartBool_1 Start_5 Start_7)))
   (Start_3 String (x "1" y (str.replace Start Start_4 Start_5) (ite StartBool_1 Start_6 Start_1)))
   (Start_7 String ("a" "0" (str.++ Start_8 Start_9) (str.substr Start_1 StartInt_3 StartInt_3) (str.replace Start_7 Start_3 Start_2) (str.from_int StartInt_3)))
   (Start_9 String ("0" x "1" (str.++ Start_2 Start_1)))
   (Start_8 String ("0" (str.substr Start_1 StartInt_2 StartInt_4) (str.replace Start_9 Start_1 Start_9) (str.from_int StartInt)))
   (StartInt_4 Int (0 (str.len Start) (str.indexof Start_6 Start_2 StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "b" "" x) 1)))

(check-synth)
