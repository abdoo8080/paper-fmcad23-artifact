(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_2 String) (StartBool_5 Bool) (StartInt_11 Int) (Start_7 String) (Start_3 String) (Start_11 String) (Start_8 String) (StartBool_4 Bool) (StartBool_1 Bool) (StartInt_3 Int) (Start_6 String) (StartInt_7 Int) (StartInt_10 Int) (StartInt_5 Int) (Start_1 String) (Start_14 String) (Start_9 String) (StartInt_12 Int) (StartInt_2 Int) (Start_13 String) (Start_12 String) (StartInt_1 Int) (StartBool_3 Bool) (StartInt_8 Int) (StartInt_6 Int) (Start_4 String) (Start_10 String) (StartInt_9 Int) (Start_15 String) (Start_16 String) (StartBool_2 Bool) (Start_5 String) (StartInt_4 Int) (Start_17 String))
  ((Start String ("" (str.at Start StartInt_1) (ite StartBool Start_1 Start)))
   (StartInt Int (1 0))
   (StartBool Bool (true false (str.prefixof Start_6 Start_7) (str.suffixof Start_10 Start_17) (= StartInt_12 StartInt_7) (<= StartInt_3 StartInt_3)))
   (Start_2 String ("" (str.++ Start Start_10) (str.substr Start_10 StartInt_9 StartInt_6) (ite StartBool Start Start_11)))
   (StartBool_5 Bool (true false (not StartBool) (and StartBool_1 StartBool_1) (str.<= Start_15 Start_15) (= StartInt_6 StartInt_10) (<= StartInt_1 StartInt_10)))
   (StartInt_11 Int (0 1 (str.indexof Start_10 Start_2 StartInt_9)))
   (Start_7 String (x "0" (str.at Start_10 StartInt_2) (str.substr Start StartInt StartInt_6) (ite StartBool_2 Start_11 Start_1)))
   (Start_3 String ("1" y (str.++ Start_12 Start_2) (str.at Start_6 StartInt_3) (str.from_int StartInt_5) (ite StartBool_5 Start_11 Start_4)))
   (Start_11 String ("0" y "b" "1" (str.++ Start_1 Start) (str.at Start_11 StartInt_7) (ite StartBool_3 Start_9 Start)))
   (Start_8 String ("a" (str.++ Start_2 Start_9) (str.at Start_1 StartInt) (str.substr Start_6 StartInt_2 StartInt_1) (str.replace Start_3 Start_8 Start_4)))
   (StartBool_4 Bool (false (not StartBool_2) (str.< Start_12 Start_9) (str.<= Start_4 Start_1) (str.prefixof Start_8 Start_7) (= Start_11 Start_3) (= StartInt StartInt_3)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_3 Start_5) (str.<= Start_3 Start_6) (str.suffixof Start_3 Start) (= Start_2 Start_6) (= StartInt_4 StartInt_3)))
   (StartInt_3 Int (0 1 (str.indexof Start_1 Start_3 StartInt_2) (str.to_int Start_4)))
   (Start_6 String ("a" "b" "1" y (str.at Start_3 StartInt_3) (str.substr Start_7 StartInt StartInt) (str.replace Start_7 Start_8 Start_1) (ite StartBool_2 Start_5 Start)))
   (StartInt_7 Int (1 (str.len Start_4) (str.indexof Start_12 Start_12 StartInt_8)))
   (StartInt_10 Int (0 1 (str.len Start_4) (str.indexof Start_7 Start_4 StartInt_11) (str.to_int Start_14)))
   (StartInt_5 Int (1 (str.to_int Start_8)))
   (Start_1 String ("a" "0" (str.++ Start Start) (str.at Start StartInt_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_1 Start Start_1) (ite StartBool Start Start_1)))
   (Start_14 String ("" "b" (str.++ Start_10 Start) (str.at Start_10 StartInt_3) (str.substr Start StartInt_8 StartInt_3)))
   (Start_9 String ("a" (str.substr Start_9 StartInt StartInt_2) (str.replace Start_4 Start Start_1) (str.from_int StartInt_4)))
   (StartInt_12 Int (0))
   (StartInt_2 Int (0 (str.indexof Start_2 Start_3 StartInt_3) (str.to_int Start_1)))
   (Start_13 String ("0" "1" (str.++ Start_4 Start_9) (str.at Start_9 StartInt_4) (str.substr Start_7 StartInt_2 StartInt_5) (str.from_int StartInt_3) (ite StartBool Start_1 Start_13)))
   (Start_12 String ("b" (str.++ Start_2 Start_5) (str.at Start_7 StartInt_1) (str.substr Start_14 StartInt_7 StartInt) (str.replace Start_9 Start_7 Start_1) (str.from_int StartInt_5)))
   (StartInt_1 Int (0 1 (str.indexof Start_5 Start_6 StartInt_1)))
   (StartBool_3 Bool (false (not StartBool_4) (and StartBool StartBool_1) (str.<= Start_12 Start_5) (str.prefixof Start_13 Start_1) (str.suffixof Start_6 Start_13) (= Start_3 Start_2)))
   (StartInt_8 Int (0 (str.len Start_12) (str.to_int Start_10)))
   (StartInt_6 Int (0 1))
   (Start_4 String ("a" "1" x y "b" (str.substr Start_2 StartInt_4 StartInt_4) (ite StartBool_1 Start Start_1)))
   (Start_10 String (y "" (str.substr Start_11 StartInt_8 StartInt_1) (str.replace Start Start_2 Start_9) (str.from_int StartInt_7) (ite StartBool_1 Start_15 Start_15)))
   (StartInt_9 Int (1 0 (str.indexof Start_2 Start_8 StartInt_4) (str.to_int Start_8)))
   (Start_15 String ("a" "" x y (str.++ Start_15 Start_14) (str.at Start_5 StartInt_5) (str.replace Start_11 Start_1 Start) (ite StartBool Start_10 Start_16)))
   (Start_16 String ("1" "a" x (str.++ Start_6 Start_15) (str.substr Start_12 StartInt_3 StartInt_8) (ite StartBool Start_6 Start_7)))
   (StartBool_2 Bool (true (str.< Start_9 Start) (str.prefixof Start_7 Start_7) (= StartInt_5 StartInt) (<= StartInt_4 StartInt_4)))
   (Start_5 String ("a" (str.++ Start_9 Start_8) (str.at Start_1 StartInt_9) (str.substr Start_12 StartInt StartInt_4) (ite StartBool Start Start_11)))
   (StartInt_4 Int (0 (str.len Start_17) (str.to_int Start_1)))
   (Start_17 String ("1" "a" "" (str.++ Start Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y (str.++ "1" "1") "b")))

(check-synth)
