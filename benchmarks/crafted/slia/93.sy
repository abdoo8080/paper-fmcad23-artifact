(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartBool_3 Bool) (StartInt_3 Int) (Start_9 String) (StartInt_5 Int) (StartInt_2 Int) (StartInt_4 Int) (Start_6 String) (StartBool_1 Bool) (Start_3 String) (Start_7 String) (Start_10 String) (Start_11 String) (StartInt_7 Int) (Start_1 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_4 String) (Start_12 String) (StartBool_4 Bool) (Start_13 String) (Start_5 String) (StartInt_8 Int) (StartInt_6 Int) (Start_2 String) (StartInt_9 Int) (Start_8 String) (Start_14 String))
  ((Start String (y "0" (str.at Start_1 StartInt_1) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.len Start_4) (str.indexof Start_14 Start_6 StartInt_4)))
   (StartBool Bool (false (str.prefixof Start_1 Start_13)))
   (StartBool_3 Bool (true (not StartBool_1) (str.< Start_6 Start) (str.<= Start_1 Start_9) (str.prefixof Start Start_10) (= Start_9 Start_3)))
   (StartInt_3 Int (1 0 (str.len Start) (str.to_int Start_6)))
   (Start_9 String (y (str.substr Start_1 StartInt StartInt_1)))
   (StartInt_5 Int (0 (str.len Start_9)))
   (StartInt_2 Int (0 (str.indexof Start_4 Start_4 StartInt)))
   (StartInt_4 Int (0 1 (str.len Start_8) (str.indexof Start_5 Start StartInt_1) (str.to_int Start_8)))
   (Start_6 String (y (str.at Start_2 StartInt_2) (str.substr Start_5 StartInt StartInt_3) (str.replace Start_7 Start Start)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool_3 StartBool) (str.< Start_1 Start_3) (str.contains Start_3 Start_6)))
   (Start_3 String ("" (str.at Start_1 StartInt_1) (str.substr Start_3 StartInt_1 StartInt_1) (str.replace Start_1 Start_4 Start) (str.from_int StartInt_2) (ite StartBool Start_5 Start)))
   (Start_7 String (y "" (str.substr Start_4 StartInt_4 StartInt_3) (str.from_int StartInt_4)))
   (Start_10 String ("0" y (str.++ Start_7 Start_7) (str.substr Start_8 StartInt_2 StartInt_4) (str.replace Start_9 Start_9 Start_2) (str.from_int StartInt_1)))
   (Start_11 String ("0" "" "1" x "b" y "a" (str.++ Start_12 Start_6) (str.at Start_9 StartInt_6) (str.replace Start_13 Start Start_11) (str.from_int StartInt_5) (ite StartBool Start_10 Start_12)))
   (StartInt_7 Int (0 1))
   (Start_1 String (y "a" "1" "b" (str.++ Start_5 Start_11) (str.at Start_3 StartInt) (str.from_int StartInt_2)))
   (StartInt_1 Int (0 (str.len Start_2) (str.indexof Start_3 Start_3 StartInt_1)))
   (StartBool_2 Bool (false (not StartBool_3) (str.<= Start Start_2) (str.suffixof Start_1 Start_2) (= StartInt_5 StartInt_5) (<= StartInt_1 StartInt_4)))
   (Start_4 String ("" (str.++ Start_3 Start_5) (str.substr Start_3 StartInt_3 StartInt_6) (str.from_int StartInt_4) (ite StartBool_4 Start_7 Start_1)))
   (Start_12 String (x (str.++ Start_10 Start) (str.replace Start_3 Start Start_2) (ite StartBool_1 Start_6 Start_10)))
   (StartBool_4 Bool (true (not StartBool_2) (str.< Start Start_7) (str.suffixof Start Start_3) (= Start_11 Start_2) (= StartInt_6 StartInt)))
   (Start_13 String (x "" y "b" (str.++ Start_7 Start_11) (str.substr Start StartInt_1 StartInt_7) (str.from_int StartInt_8)))
   (Start_5 String ("0" "a" (str.++ Start_3 Start) (str.at Start_5 StartInt) (str.substr Start_5 StartInt StartInt_2) (str.replace Start_5 Start_5 Start_2) (ite StartBool_1 Start_2 Start_1)))
   (StartInt_8 Int (1 (str.len Start_6) (str.indexof Start_6 Start_7 StartInt_7) (str.to_int Start_11)))
   (StartInt_6 Int (0 (str.len Start_6) (str.indexof Start_10 Start_12 StartInt_5) (str.to_int Start_4)))
   (Start_2 String ("0" (str.++ Start_12 Start_9) (str.at Start_12 StartInt_9) (str.replace Start_13 Start_12 Start_7) (str.from_int StartInt_4)))
   (StartInt_9 Int (1 (str.len Start_13) (str.to_int Start_1)))
   (Start_8 String ("0" (str.at Start_6 StartInt_3) (str.substr Start StartInt_3 StartInt_5)))
   (Start_14 String (x "1" (str.at Start StartInt_2) (str.replace Start_5 Start_10 Start_2) (str.from_int StartInt_1) (ite StartBool_3 Start_7 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" y "0")))

(check-synth)
