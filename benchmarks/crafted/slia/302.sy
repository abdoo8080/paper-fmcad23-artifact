(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_8 String) (StartBool_3 Bool) (Start_6 String) (StartInt_4 Int) (Start_7 String) (StartInt_1 Int) (Start_2 String) (StartInt_3 Int) (StartBool_1 Bool) (Start_4 String) (StartInt_2 Int) (StartBool_2 Bool) (Start_3 String) (Start_1 String) (Start_5 String))
  ((Start String (x "0" (str.replace Start Start Start_1) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 0 (str.len Start_2) (str.indexof Start_4 Start StartInt_2)))
   (StartBool Bool (true false (not StartBool_1) (and StartBool StartBool_2) (str.prefixof Start_4 Start_2) (<= StartInt StartInt_2)))
   (Start_8 String ("0" y x "1" (str.replace Start_5 Start_3 Start)))
   (StartBool_3 Bool (false true (not StartBool_3) (and StartBool_3 StartBool) (str.<= Start_3 Start_2) (str.prefixof Start_8 Start_1) (str.suffixof Start_5 Start_5) (= Start_2 Start_3) (= StartInt StartInt_1)))
   (Start_6 String ("b" "a" x (str.++ Start_5 Start) (str.at Start_6 StartInt_4) (str.replace Start_3 Start_1 Start_6)))
   (StartInt_4 Int (1 (str.len Start_3)))
   (Start_7 String ("0" "b" (str.substr Start StartInt StartInt_4) (ite StartBool_2 Start_2 Start_7)))
   (StartInt_1 Int (0 (str.indexof Start_2 Start_3 StartInt) (str.to_int Start_1)))
   (Start_2 String ("a" (str.at Start_1 StartInt_1)))
   (StartInt_3 Int (0 1 (str.len Start_5) (str.indexof Start_4 Start_2 StartInt_3) (str.to_int Start_4)))
   (StartBool_1 Bool (false true (str.< Start Start_1) (str.prefixof Start Start_1) (str.suffixof Start Start_2) (str.contains Start Start_2) (<= StartInt StartInt)))
   (Start_4 String ("0" "" (str.++ Start_2 Start_3) (str.substr Start_3 StartInt_1 StartInt_2) (str.replace Start_3 Start_3 Start)))
   (StartInt_2 Int (0 (str.len Start_4) (str.indexof Start_4 Start_1 StartInt)))
   (StartBool_2 Bool (false (not StartBool_1) (and StartBool_3 StartBool_1) (str.< Start_3 Start_5) (str.<= Start_6 Start_7) (= Start_2 Start_1) (<= StartInt StartInt_1)))
   (Start_3 String (x "" "b" (str.at Start_4 StartInt_1) (ite StartBool Start_1 Start_1)))
   (Start_1 String ("1" (str.at Start_3 StartInt_3) (str.replace Start_4 Start_3 Start_5) (str.from_int StartInt_3) (ite StartBool Start_5 Start_5)))
   (Start_5 String ("" (str.++ Start Start) (str.substr Start_2 StartInt_3 StartInt_1) (str.from_int StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at "b" (str.indexof x "0" 0))))

(check-synth)
