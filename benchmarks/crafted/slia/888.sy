(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_18 String) (Start_17 String) (StartBool_10 Bool) (StartBool_8 Bool) (StartBool_9 Bool) (StartInt_4 Int) (Start_14 String) (StartInt_9 Int) (Start_16 String) (Start_7 String) (StartBool_3 Bool) (StartBool_2 Bool) (StartBool_6 Bool) (StartBool_7 Bool) (Start_8 String) (Start_9 String) (StartBool_1 Bool) (Start_5 String) (Start_10 String) (StartInt_2 Int) (StartInt_7 Int) (StartInt_1 Int) (StartInt_3 Int) (Start_2 String) (Start_12 String) (Start_11 String) (StartBool_4 Bool) (StartBool_5 Bool) (StartInt_8 Int) (StartInt_6 Int) (StartInt_5 Int) (Start_1 String) (Start_6 String) (Start_4 String) (Start_3 String) (Start_13 String) (Start_15 String))
  ((Start String ("0" (str.++ Start_1 Start) (str.substr Start_1 StartInt StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 0 (str.indexof Start_14 Start_15 StartInt_6) (str.to_int Start_6)))
   (StartBool Bool (true (not StartBool) (and StartBool_10 StartBool_10) (= Start_5 Start_5) (<= StartInt_3 StartInt_4)))
   (Start_18 String (x "0" (str.++ Start_8 Start_18) (str.at Start_4 StartInt_7) (str.replace Start_15 Start_5 Start_6) (str.from_int StartInt_5)))
   (Start_17 String ("a" "1" y "0" "b" (str.at Start_5 StartInt_9) (str.replace Start Start_16 Start_6) (ite StartBool Start_13 Start_3)))
   (StartBool_10 Bool (true (not StartBool) (str.<= Start_11 Start_12) (str.prefixof Start_17 Start_13) (str.suffixof Start Start_15) (= StartInt_2 StartInt_5)))
   (StartBool_8 Bool (true (not StartBool_2) (and StartBool_10 StartBool_2) (= Start_4 Start_13) (= StartInt_4 StartInt_2) (<= StartInt_1 StartInt_3)))
   (StartBool_9 Bool (true (not StartBool_1) (str.<= Start_2 Start_3) (str.suffixof Start_15 Start_2) (str.contains Start_11 Start_7)))
   (StartInt_4 Int (0 (str.len Start_2) (str.to_int Start_1)))
   (Start_14 String ("a" (str.++ Start_4 Start_3) (str.replace Start Start_6 Start_16) (str.from_int StartInt_5) (ite StartBool_6 Start_5 Start_8)))
   (StartInt_9 Int (0 1 (str.len Start_15) (str.indexof Start_4 Start_8 StartInt_3) (str.to_int Start_5)))
   (Start_16 String ("b" "0" (str.at Start_4 StartInt_7) (str.substr Start_9 StartInt_4 StartInt_6) (ite StartBool_7 Start_14 Start_7)))
   (Start_7 String ("a" "0" (str.++ Start Start_2) (str.replace Start_5 Start_10 Start_3) (ite StartBool_1 Start_11 Start)))
   (StartBool_3 Bool (true (str.<= Start_9 Start_1) (str.prefixof Start_6 Start_8) (str.suffixof Start_1 Start_6) (str.contains Start_6 Start_8) (<= StartInt_1 StartInt_3)))
   (StartBool_2 Bool (true false (and StartBool_3 StartBool_1) (str.prefixof Start_8 Start_5) (= StartInt StartInt_1) (<= StartInt_3 StartInt_3)))
   (StartBool_6 Bool (true (not StartBool) (and StartBool_1 StartBool_6) (str.prefixof Start_15 Start_16) (str.suffixof Start_3 Start_14) (str.contains Start_1 Start_12) (= Start_16 Start_12)))
   (StartBool_7 Bool (true false (and StartBool_8 StartBool_9) (= StartInt_8 StartInt_3)))
   (Start_8 String ("1" "" "0" (ite StartBool_1 Start_2 Start_4)))
   (Start_9 String ("b" "a" (str.++ Start_6 Start_6) (str.at Start_4 StartInt) (str.substr Start_3 StartInt StartInt_4)))
   (StartBool_1 Bool (true (not StartBool_2) (and StartBool_1 StartBool_1) (str.suffixof Start_6 Start_8) (= StartInt_3 StartInt_3) (<= StartInt_2 StartInt)))
   (Start_5 String ("a" (str.at Start_6 StartInt_1) (str.replace Start_7 Start_1 Start_2) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_2)))
   (Start_10 String ("1" y (str.++ Start_6 Start_6) (str.substr Start_9 StartInt_3 StartInt_3) (str.replace Start_1 Start_4 Start)))
   (StartInt_2 Int (1 0 (str.indexof Start_5 Start_2 StartInt_2)))
   (StartInt_7 Int (1 0 (str.len Start_13) (str.indexof Start_8 Start_17 StartInt_9) (str.to_int Start_5)))
   (StartInt_1 Int (0 (str.len Start) (str.indexof Start Start_2 StartInt) (str.to_int Start)))
   (StartInt_3 Int (1 0 (str.len Start_2) (str.to_int Start_6)))
   (Start_2 String ("b" (str.replace Start_3 Start_4 Start_2) (str.from_int StartInt_2)))
   (Start_12 String ("" (str.++ Start_11 Start_2) (str.at Start_3 StartInt_2) (str.substr Start StartInt_3 StartInt_4) (str.from_int StartInt_5)))
   (Start_11 String ("" "a" (str.++ Start_9 Start_6) (str.at Start_3 StartInt_1) (str.substr Start_12 StartInt_3 StartInt_5) (str.from_int StartInt) (ite StartBool_4 Start_7 Start_8)))
   (StartBool_4 Bool (false (not StartBool_1) (and StartBool_5 StartBool_2) (str.<= Start Start_11) (str.prefixof Start_3 Start_7) (str.contains Start_3 Start_8) (= StartInt StartInt_5)))
   (StartBool_5 Bool (true false (str.< Start_1 Start_3) (str.<= Start_2 Start_1) (str.suffixof Start_9 Start_5) (str.contains Start_9 Start_5) (= Start_12 Start_8) (= StartInt_5 StartInt_6) (<= StartInt_1 StartInt_6)))
   (StartInt_8 Int (1 0 (str.len Start_14) (str.indexof Start_16 Start_4 StartInt_2)))
   (StartInt_6 Int (0 1))
   (StartInt_5 Int (0 (str.len Start_12) (str.indexof Start_9 Start_3 StartInt_5) (str.to_int Start_8)))
   (Start_1 String ("" (str.++ Start_13 Start_18)))
   (Start_6 String (y "0" (str.at Start StartInt_4) (str.substr Start_1 StartInt StartInt_1) (str.from_int StartInt_3)))
   (Start_4 String (y "" x (str.substr Start_3 StartInt StartInt_1) (str.replace Start_7 Start_11 Start_10) (ite StartBool_1 Start Start_4)))
   (Start_3 String (y "a" (str.++ Start_1 Start_11) (str.substr Start_13 StartInt_1 StartInt_1) (str.replace Start_3 Start_9 Start_6) (str.from_int StartInt_1)))
   (Start_13 String (x "1" "b" (str.++ Start_7 Start_13) (str.at Start_4 StartInt_6) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_1 Start Start_3) (str.from_int StartInt_4) (ite StartBool_1 Start_14 Start_15)))
   (Start_15 String ("1" (str.substr Start_8 StartInt_5 StartInt_4) (str.from_int StartInt)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= "1" y) "1" y)))

(check-synth)
