(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (StartInt_5 Int) (StartBool_4 Bool) (Start_6 String) (StartInt_4 Int) (StartInt_1 Int) (Start_4 String) (Start_1 String) (StartInt_2 Int) (Start_2 String) (StartBool_2 Bool) (Start_11 String) (Start_3 String) (StartBool_1 Bool) (Start_10 String) (Start_5 String) (Start_8 String) (Start_7 String) (StartInt_3 Int) (Start_9 String) (StartBool_3 Bool))
  ((Start String ("a" "0" x (str.at Start StartInt) (str.from_int StartInt_1)))
   (StartInt Int (1 (str.indexof Start_7 Start_4 StartInt_1) (str.to_int Start_11)))
   (StartBool Bool (false true (not StartBool_4) (and StartBool_2 StartBool_2) (str.< Start_2 Start_11) (str.<= Start_8 Start_5) (str.contains Start_5 Start_6) (= StartInt_6 StartInt_4)))
   (StartInt_6 Int (1 0 (str.indexof Start_3 Start_11 StartInt_5) (str.to_int Start_7)))
   (StartInt_5 Int (0 1))
   (StartBool_4 Bool (true false (not StartBool_3) (str.suffixof Start Start_7) (str.contains Start_10 Start_9) (<= StartInt_3 StartInt_5)))
   (Start_6 String ("0" x "" (str.++ Start_7 Start_5)))
   (StartInt_4 Int (1 0 (str.indexof Start_3 Start_7 StartInt_3)))
   (StartInt_1 Int (1 (str.len Start_1)))
   (Start_4 String ("0" y x (str.at Start_3 StartInt) (str.substr Start_4 StartInt_2 StartInt_1) (str.replace Start_4 Start_4 Start_1)))
   (Start_1 String ("1" (str.++ Start_2 Start_3) (str.at Start_2 StartInt_1) (str.substr Start_4 StartInt StartInt_1) (str.from_int StartInt_2)))
   (StartInt_2 Int (1 0))
   (Start_2 String (y (str.substr Start_1 StartInt_2 StartInt_1) (str.replace Start Start_4 Start_5) (str.from_int StartInt_5) (ite StartBool_4 Start_9 Start_9)))
   (StartBool_2 Bool (true false (str.< Start_1 Start_2) (str.<= Start_1 Start_5) (str.prefixof Start_2 Start_4) (str.contains Start_4 Start_2) (= Start_3 Start) (<= StartInt StartInt_1)))
   (Start_11 String ("a" (str.++ Start_10 Start) (str.at Start_7 StartInt_2)))
   (Start_3 String ("b" (str.++ Start_1 Start) (str.substr Start_3 StartInt_2 StartInt_2) (str.replace Start_2 Start_3 Start_4) (ite StartBool_1 Start_1 Start)))
   (StartBool_1 Bool (false true (and StartBool StartBool_2) (str.<= Start_3 Start_4) (str.prefixof Start_2 Start_1) (str.suffixof Start_2 Start_3) (str.contains Start Start_2) (<= StartInt StartInt_2)))
   (Start_10 String (y (str.++ Start_8 Start_9) (str.substr Start_8 StartInt_5 StartInt_5) (str.replace Start_5 Start_3 Start_7) (str.from_int StartInt_1)))
   (Start_5 String ("0" (str.at Start_6 StartInt_1) (str.replace Start_3 Start_7 Start_1) (str.from_int StartInt_2) (ite StartBool_3 Start_8 Start_8)))
   (Start_8 String ("b" (str.++ Start_8 Start_8) (str.substr Start_4 StartInt_3 StartInt_1) (str.replace Start_8 Start_2 Start_1) (str.from_int StartInt_4)))
   (Start_7 String ("1" (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start_5 Start_6 Start) (ite StartBool Start_2 Start_1)))
   (StartInt_3 Int (1 0 (str.to_int Start_8)))
   (Start_9 String (y (str.substr Start StartInt_4 StartInt_1) (str.from_int StartInt_5) (ite StartBool Start_1 Start_3)))
   (StartBool_3 Bool (false (and StartBool_3 StartBool_3) (str.<= Start_7 Start_5) (str.prefixof Start_1 Start_2) (str.suffixof Start Start_5) (str.contains Start_2 Start_7) (<= StartInt_4 StartInt_4)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.indexof (str.replace y "" "a") "1" (str.len (str.++ "1" "0"))))))

(check-synth)
