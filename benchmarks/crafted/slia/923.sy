(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_9 Int) (Start_3 String) (Start_1 String) (StartInt_8 Int) (Start_10 String) (Start_8 String) (StartInt_7 Int) (StartBool_2 Bool) (StartInt_2 Int) (StartInt_3 Int) (StartInt_1 Int) (StartBool_1 Bool) (StartInt_4 Int) (Start_5 String) (Start_6 String) (Start_7 String) (Start_2 String) (Start_9 String) (Start_4 String) (StartInt_5 Int) (StartInt_6 Int))
  ((Start String ("1" (str.++ Start_1 Start_1) (str.at Start_1 StartInt_1) (str.replace Start Start_2 Start_1)))
   (StartInt Int (1 0 (str.indexof Start_4 Start_5 StartInt_9) (str.to_int Start_6)))
   (StartBool Bool (false true (str.< Start_10 Start_6) (str.contains Start_4 Start_5) (= Start_4 Start_5) (= StartInt_1 StartInt)))
   (StartInt_9 Int (0 (str.len Start_2) (str.indexof Start_5 Start_4 StartInt_2)))
   (Start_3 String ("a" (str.++ Start_1 Start_5) (str.at Start_2 StartInt_4) (str.substr Start_6 StartInt_1 StartInt_8) (str.from_int StartInt)))
   (Start_1 String ("b" (str.++ Start_6 Start) (str.replace Start_6 Start Start_7)))
   (StartInt_8 Int (1))
   (Start_10 String ("0" "1" y "a" (str.++ Start_10 Start_5) (str.substr Start_4 StartInt_7 StartInt_4) (ite StartBool_2 Start_2 Start_9)))
   (Start_8 String ("1" (str.++ Start_2 Start_2) (str.at Start_8 StartInt_8)))
   (StartInt_7 Int (1 (str.len Start)))
   (StartBool_2 Bool (false true (not StartBool_2) (str.< Start_1 Start_2) (str.prefixof Start_5 Start) (str.suffixof Start_4 Start_6) (<= StartInt_9 StartInt_7)))
   (StartInt_2 Int (1 (str.to_int Start)))
   (StartInt_3 Int (1))
   (StartInt_1 Int (1 0 (str.len Start_3) (str.indexof Start_1 Start_1 StartInt_4)))
   (StartBool_1 Bool (false (and StartBool_1 StartBool) (str.prefixof Start_5 Start_4) (= StartInt_1 StartInt_7)))
   (StartInt_4 Int (1 0 (str.indexof Start_4 Start_1 StartInt) (str.to_int Start_5)))
   (Start_5 String ("a" (str.at Start_2 StartInt_3) (str.replace Start Start Start_6)))
   (Start_6 String (y "1" "b" "" "0" x (str.++ Start_3 Start_5) (str.replace Start_1 Start_2 Start_5) (str.from_int StartInt)))
   (Start_7 String ("b" "1" "0" (str.++ Start_3 Start_8) (str.at Start_9 StartInt_5) (str.substr Start_3 StartInt_3 StartInt_6) (str.replace Start_7 Start_4 Start_1) (str.from_int StartInt_2)))
   (Start_2 String ("1" (str.++ Start Start_2) (str.at Start_1 StartInt_2) (str.from_int StartInt_3)))
   (Start_9 String ("" x (ite StartBool_1 Start Start_7)))
   (Start_4 String ("b" (str.++ Start_3 Start_4) (str.substr Start_5 StartInt StartInt_5) (str.from_int StartInt)))
   (StartInt_5 Int (1 0 (str.to_int Start_7)))
   (StartInt_6 Int (0 1 (str.len Start_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace x "0" (str.++ x "a"))))

(check-synth)
