(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_14 String) (StartInt_5 Int) (Start_2 String) (Start_8 String) (StartInt_4 Int) (Start_4 String) (Start_6 String) (StartBool_1 Bool) (Start_11 String) (Start_10 String) (StartInt_1 Int) (StartInt_3 Int) (Start_1 String) (Start_5 String) (Start_7 String) (StartInt_7 Int) (StartInt_8 Int) (StartInt_6 Int) (StartInt_2 Int) (Start_3 String) (Start_9 String) (Start_13 String) (StartBool_2 Bool) (StartInt_9 Int) (Start_12 String) (StartInt_10 Int) (StartBool_3 Bool))
  ((Start String ("a" (str.at Start_1 StartInt) (str.replace Start_1 Start_2 Start_2) (ite StartBool_1 Start_3 Start_3)))
   (StartInt Int (1 (str.indexof Start_8 Start_9 StartInt_1)))
   (StartBool Bool (false true (not StartBool_3) (and StartBool_1 StartBool_1) (str.<= Start_7 Start_12) (str.prefixof Start_13 Start_5) (str.suffixof Start_8 Start_4) (= Start_8 Start_7)))
   (Start_14 String (x "0" (str.at Start_5 StartInt_8)))
   (StartInt_5 Int (0 1 (str.to_int Start_6)))
   (Start_2 String ("a" "0" (str.replace Start_4 Start_2 Start_1) (str.from_int StartInt_1)))
   (Start_8 String ("a" "0" (str.++ Start_9 Start_10) (str.at Start_3 StartInt_5) (str.replace Start_9 Start_8 Start_10) (str.from_int StartInt_6) (ite StartBool_2 Start_7 Start_11)))
   (StartInt_4 Int (1 (str.len Start_2) (str.indexof Start_7 Start_7 StartInt_4)))
   (Start_4 String (y x "0" "" (str.substr Start_3 StartInt_5 StartInt_3) (str.from_int StartInt_2)))
   (Start_6 String ("" y (str.substr Start_5 StartInt_2 StartInt_4) (str.replace Start_6 Start_5 Start_3) (str.from_int StartInt_1) (ite StartBool Start_6 Start_4)))
   (StartBool_1 Bool (false (str.prefixof Start_7 Start_1) (str.suffixof Start_6 Start_2) (= Start_1 Start) (<= StartInt_3 StartInt_6)))
   (Start_11 String ("a" "b" (str.substr Start_3 StartInt_6 StartInt_8) (str.from_int StartInt_3)))
   (Start_10 String (x (str.++ Start Start_11) (str.at Start_12 StartInt_9) (str.substr Start_7 StartInt_8 StartInt_6) (str.replace Start_2 Start_7 Start_9) (str.from_int StartInt_10)))
   (StartInt_1 Int (1 0 (str.indexof Start_1 Start_3 StartInt) (str.to_int Start_7)))
   (StartInt_3 Int (0 (str.len Start_2) (str.indexof Start_5 Start_1 StartInt_2)))
   (Start_1 String ("1" (str.at Start_2 StartInt_6) (str.replace Start_4 Start_5 Start_5) (ite StartBool Start_6 Start_6)))
   (Start_5 String ("0" "1" y (str.at Start_3 StartInt_4) (str.substr Start_6 StartInt StartInt_2) (str.replace Start_7 Start_7 Start_5) (ite StartBool_1 Start_1 Start_2)))
   (Start_7 String ("a" "0" (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt_3 StartInt_4)))
   (StartInt_7 Int (1))
   (StartInt_8 Int (1 0 (str.to_int Start_1)))
   (StartInt_6 Int (0 1 (str.len Start_3) (str.indexof Start_4 Start_1 StartInt)))
   (StartInt_2 Int (0 (str.indexof Start_5 Start_6 StartInt_3) (str.to_int Start_4)))
   (Start_3 String ("1" (str.substr Start_4 StartInt_1 StartInt_2) (str.from_int StartInt_1) (ite StartBool Start Start_4)))
   (Start_9 String (x "0" y "1" "a" "" (str.at Start_9 StartInt) (str.substr Start StartInt_6 StartInt_7) (str.from_int StartInt_7) (ite StartBool_1 Start_3 Start_2)))
   (Start_13 String (x (str.++ Start_1 Start) (str.replace Start_13 Start_12 Start_5) (ite StartBool_2 Start_1 Start_7)))
   (StartBool_2 Bool (true false (= StartInt_6 StartInt) (<= StartInt_9 StartInt_8)))
   (StartInt_9 Int (1 0 (str.len Start_12) (str.indexof Start_5 Start_6 StartInt_1)))
   (Start_12 String ("0"))
   (StartInt_10 Int (0 1 (str.len Start_13)))
   (StartBool_3 Bool (true (not StartBool_3) (str.prefixof Start_2 Start_12) (str.suffixof Start_14 Start_10) (str.contains Start_7 Start_5) (= Start_8 Start_6) (= StartInt_3 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "a" y)))

(check-synth)
