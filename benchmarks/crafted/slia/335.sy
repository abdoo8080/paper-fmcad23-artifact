(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_1 String) (Start_2 String) (StartInt_6 Int) (Start_6 String) (StartInt_1 Int) (StartBool_2 Bool) (StartInt_3 Int) (StartInt_4 Int) (Start_4 String) (StartInt_5 Int) (Start_3 String) (Start_5 String) (StartInt_2 Int) (StartBool_1 Bool))
  ((Start String (x "b" "1" (str.++ Start Start_1) (str.substr Start_2 StartInt_1 StartInt_1) (ite StartBool Start Start_1)))
   (StartInt Int (0 1 (str.indexof Start Start_2 StartInt_7)))
   (StartBool Bool (false true (not StartBool_1) (str.prefixof Start_5 Start_2) (str.suffixof Start_3 Start_6) (= Start Start_6) (= StartInt_5 StartInt_4)))
   (StartInt_7 Int (1 0 (str.len Start_5) (str.indexof Start_2 Start_5 StartInt_3) (str.to_int Start_2)))
   (Start_1 String ("" (str.++ Start_3 Start_6) (str.at Start_3 StartInt_5) (str.from_int StartInt_4)))
   (Start_2 String ("" y (str.from_int StartInt) (ite StartBool_1 Start_3 Start_1)))
   (StartInt_6 Int (1 0 (str.len Start_3) (str.to_int Start_4)))
   (Start_6 String (y "b" "a" "0" x "1" (str.substr Start_4 StartInt_3 StartInt_3) (ite StartBool_1 Start_3 Start_2)))
   (StartInt_1 Int (1 0 (str.to_int Start_3)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_2) (str.< Start_3 Start_4) (str.<= Start_4 Start_5) (str.prefixof Start_2 Start) (= Start_1 Start_1) (<= StartInt_1 StartInt_4)))
   (StartInt_3 Int (1 (str.len Start_4)))
   (StartInt_4 Int (1 0 (str.to_int Start_2)))
   (Start_4 String ("0" "a" y (str.at Start_3 StartInt_3) (str.substr Start_4 StartInt_3 StartInt_3) (str.replace Start_1 Start_3 Start) (ite StartBool_2 Start_4 Start_4)))
   (StartInt_5 Int (0 (str.indexof Start_1 Start_5 StartInt_5)))
   (Start_3 String ("1" "0" y "b" "a" x "" (str.substr Start_2 StartInt_2 StartInt) (str.replace Start Start_3 Start_3) (str.from_int StartInt_2) (ite StartBool_1 Start_4 Start_2)))
   (Start_5 String ("" (str.++ Start_2 Start_1) (str.from_int StartInt_5)))
   (StartInt_2 Int (1 (str.len Start_3) (str.to_int Start_4)))
   (StartBool_1 Bool (false true (and StartBool_2 StartBool_2) (str.< Start_4 Start_5) (str.<= Start_4 Start_6) (str.contains Start_4 Start) (= StartInt_5 StartInt_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.at (str.replace "1" y "0") 1)))

(check-synth)
