(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_10 String) (StartBool_4 Bool) (StartInt_3 Int) (Start_9 String) (Start_7 String) (Start_3 String) (Start_11 String) (StartBool_2 Bool) (Start_4 String) (Start_2 String) (StartInt_4 Int) (Start_8 String) (StartBool_3 Bool) (Start_12 String) (Start_6 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_5 String) (StartInt_1 Int) (Start_1 String))
  ((Start String ("0" (str.replace Start_1 Start_2 Start) (str.from_int StartInt_1) (ite StartBool_1 Start_1 Start_3)))
   (StartInt Int (1 0 (str.indexof Start_2 Start_4 StartInt_4)))
   (StartBool Bool (false true (and StartBool StartBool_3) (= Start_11 Start_6) (= StartInt_1 StartInt)))
   (Start_10 String ("b" "a" "0" (str.at Start_8 StartInt_3) (str.from_int StartInt_2)))
   (StartBool_4 Bool (false (not StartBool_3) (and StartBool StartBool_4) (str.prefixof Start_6 Start_10) (str.contains Start_12 Start)))
   (StartInt_3 Int (1 (str.len Start_6) (str.indexof Start_2 Start_10 StartInt_1)))
   (Start_9 String (y "b" (str.++ Start_10 Start_4) (str.replace Start_7 Start_10 Start_9) (ite StartBool_4 Start_11 Start_1)))
   (Start_7 String ("a" x "0" "" "b" y "1" (str.++ Start Start_1) (str.at Start_6 StartInt_1) (str.replace Start_3 Start Start_5)))
   (Start_3 String ("a" (str.replace Start_1 Start_2 Start_4) (ite StartBool_1 Start_4 Start)))
   (Start_11 String ("" (str.substr Start_8 StartInt_3 StartInt_1) (str.replace Start_9 Start_10 Start_11)))
   (StartBool_2 Bool (false true (not StartBool_2) (and StartBool_2 StartBool) (str.suffixof Start_1 Start_1) (str.contains Start_4 Start_1) (= Start_4 Start) (= StartInt_1 StartInt)))
   (Start_4 String ("" "1" x y "a" "0" (str.++ Start_2 Start_4) (str.at Start_4 StartInt_1) (ite StartBool_2 Start Start_3)))
   (Start_2 String ("a" (str.++ Start_6 Start_2) (str.at Start_1 StartInt_2) (str.substr Start_3 StartInt_2 StartInt_1) (str.replace Start_7 Start_4 Start_4) (str.from_int StartInt)))
   (StartInt_4 Int (1 (str.len Start_3)))
   (Start_8 String ("1" (str.++ Start_7 Start_3) (str.substr Start_9 StartInt_2 StartInt_1) (str.from_int StartInt_2)))
   (StartBool_3 Bool (true false (not StartBool_3) (and StartBool_2 StartBool) (str.prefixof Start Start_2) (str.suffixof Start_5 Start_3) (= Start_6 Start_3) (= StartInt_1 StartInt) (<= StartInt_1 StartInt)))
   (Start_12 String ("" x))
   (Start_6 String (y "" (str.++ Start_6 Start_2) (str.replace Start_4 Start_1 Start_3) (str.from_int StartInt_2)))
   (StartInt_2 Int (1 0 (str.len Start_7) (str.indexof Start_1 Start_1 StartInt)))
   (StartBool_1 Bool (false true (and StartBool_1 StartBool_3) (= Start_3 Start) (<= StartInt_1 StartInt)))
   (Start_5 String ("1"))
   (StartInt_1 Int (0 1 (str.len Start)))
   (Start_1 String ("a" "" x (str.replace Start_6 Start_8 Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "b" (str.substr y 0 1) "")))

(check-synth)
