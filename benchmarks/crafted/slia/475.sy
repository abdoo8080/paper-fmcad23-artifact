(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_7 Int) (Start_11 String) (StartInt_9 Int) (Start_9 String) (StartBool_2 Bool) (StartInt_10 Int) (Start_3 String) (Start_8 String) (Start_2 String) (Start_4 String) (StartInt_2 Int) (StartBool_1 Bool) (Start_5 String) (StartInt_8 Int) (Start_7 String) (StartInt_1 Int) (StartInt_3 Int) (StartInt_4 Int) (Start_10 String) (StartInt_5 Int) (Start_1 String) (Start_6 String) (StartInt_6 Int))
  ((Start String ("a" (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_1 Start_2)))
   (StartInt Int (1 0 (str.indexof Start_4 Start_3 StartInt_10) (str.to_int Start_4)))
   (StartBool Bool (true (str.< Start_4 Start_3) (str.<= Start_5 Start_5) (str.prefixof Start_2 Start_2) (str.suffixof Start_5 Start_2) (<= StartInt_5 StartInt_9)))
   (StartInt_7 Int (0 1 (str.len Start_1) (str.indexof Start_10 Start_9 StartInt_8) (str.to_int Start)))
   (Start_11 String (x "0" (str.++ Start_5 Start_2) (str.at Start_3 StartInt_4) (str.substr Start_7 StartInt StartInt_9) (str.replace Start_5 Start_6 Start_5) (str.from_int StartInt_7)))
   (StartInt_9 Int (0 (str.len Start_4) (str.indexof Start Start_4 StartInt_9) (str.to_int Start_5)))
   (Start_9 String ("b" x (str.++ Start_10 Start_1) (str.at Start_10 StartInt_8) (str.from_int StartInt)))
   (StartBool_2 Bool (false true (not StartBool_1) (str.<= Start_4 Start_9) (str.prefixof Start_6 Start_2) (= StartInt_3 StartInt_1)))
   (StartInt_10 Int (0 (str.len Start_3)))
   (Start_3 String ("b" "" (str.substr Start_1 StartInt StartInt_2) (str.replace Start_1 Start_3 Start_2) (str.from_int StartInt_2)))
   (Start_8 String ("1" "0" "b" (str.++ Start_8 Start_1)))
   (Start_2 String ("0" (str.at Start_2 StartInt_1) (str.substr Start_1 StartInt StartInt_1) (ite StartBool_1 Start_2 Start_3)))
   (Start_4 String (y "a" (str.++ Start Start) (str.substr Start StartInt_2 StartInt_1) (str.replace Start_2 Start_2 Start_5)))
   (StartInt_2 Int (1 0 (str.len Start_2)))
   (StartBool_1 Bool (false true (str.<= Start_4 Start_3) (str.prefixof Start_2 Start_2) (= StartInt_1 StartInt_1)))
   (Start_5 String ("1" (str.++ Start_3 Start_3) (str.at Start_5 StartInt_2) (str.replace Start_3 Start_5 Start_2) (str.from_int StartInt)))
   (StartInt_8 Int (0 (str.len Start_11) (str.indexof Start_5 Start_9 StartInt_9) (str.to_int Start)))
   (Start_7 String ("b" (str.++ Start_7 Start_5) (str.substr Start_4 StartInt StartInt_5)))
   (StartInt_1 Int (0 (str.indexof Start_4 Start_3 StartInt_3) (str.to_int Start_4)))
   (StartInt_3 Int (0 1 (str.indexof Start Start_3 StartInt_4)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.indexof Start_2 Start_2 StartInt_5) (str.to_int Start)))
   (Start_10 String ("1" (str.++ Start_3 Start_1) (str.substr Start_5 StartInt_5 StartInt_7) (str.from_int StartInt_6)))
   (StartInt_5 Int (1 0 (str.len Start_6)))
   (Start_1 String (y (str.at Start_6 StartInt_5) (str.substr Start_5 StartInt_6 StartInt) (str.from_int StartInt_7) (ite StartBool_2 Start_8 Start_5)))
   (Start_6 String ("b" "a" "0" x "1" (str.++ Start_4 Start_5) (str.substr Start StartInt_3 StartInt_6) (str.replace Start_1 Start_1 Start_2)))
   (StartInt_6 Int (0 (str.len Start_6) (str.to_int Start_7)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.replace x "" "1")))))

(check-synth)
