(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_16 String) (Start_18 String) (Start_17 String) (StartInt_5 Int) (StartBool_3 Bool) (StartBool_2 Bool) (StartInt_6 Int) (Start_7 String) (StartInt_7 Int) (Start_12 String) (Start_8 String) (Start_4 String) (StartInt_2 Int) (Start_10 String) (Start_9 String) (Start_3 String) (Start_6 String) (Start_1 String) (Start_5 String) (Start_15 String) (StartBool_4 Bool) (StartInt_3 Int) (StartInt_1 Int) (Start_11 String) (StartBool_1 Bool) (Start_2 String) (StartInt_4 Int) (Start_13 String) (Start_14 String) (StartInt_8 Int))
  ((Start String ("0" "b" (str.++ Start_1 Start_1) (str.substr Start_2 StartInt_1 StartInt_2)))
   (StartInt Int (1 (str.len Start_4) (str.to_int Start_11)))
   (StartBool Bool (false (str.< Start_15 Start) (str.<= Start_11 Start_5) (str.prefixof Start_10 Start_10) (str.contains Start_8 Start_1) (= Start_11 Start_9) (= StartInt_5 StartInt_7)))
   (Start_16 String (y (str.++ Start_6 Start_14) (str.from_int StartInt_8) (ite StartBool_3 Start_9 Start_16)))
   (Start_18 String ("1" (str.++ Start_17 Start_10) (str.at Start_15 StartInt) (str.substr Start_6 StartInt_3 StartInt_5) (str.replace Start_17 Start_13 Start_12)))
   (Start_17 String (x (str.++ Start_5 Start_18) (str.at Start_2 StartInt_6) (str.substr Start_5 StartInt StartInt_7) (str.replace Start_8 Start_13 Start_15)))
   (StartInt_5 Int (1 (str.indexof Start_8 Start_7 StartInt_3) (str.to_int Start_10)))
   (StartBool_3 Bool (false (and StartBool_2 StartBool_3) (str.< Start_1 Start_7) (str.<= Start_2 Start) (str.suffixof Start Start_4) (= StartInt_5 StartInt)))
   (StartBool_2 Bool (true (not StartBool_3) (and StartBool_1 StartBool_2) (str.<= Start_8 Start_9) (str.suffixof Start_10 Start_7) (str.contains Start_6 Start_4) (<= StartInt StartInt)))
   (StartInt_6 Int (0 1 (str.len Start_1)))
   (Start_7 String ("a" "b" (str.++ Start_3 Start_3) (str.at Start_9 StartInt_2) (str.substr Start_1 StartInt_1 StartInt_2) (str.replace Start_6 Start_7 Start_8)))
   (StartInt_7 Int (0 (str.indexof Start_3 Start_8 StartInt_4) (str.to_int Start_8)))
   (Start_12 String ("b" (str.replace Start_11 Start_11 Start_13) (str.from_int StartInt_2) (ite StartBool_1 Start_9 Start_9)))
   (Start_8 String ("a" (str.at Start_1 StartInt_2) (str.replace Start_8 Start_3 Start_2)))
   (Start_4 String ("0" y (str.at Start_5 StartInt) (str.substr Start_6 StartInt_1 StartInt) (ite StartBool_1 Start_1 Start_3)))
   (StartInt_2 Int (0 1 (str.len Start_3)))
   (Start_10 String ("1" y (str.at Start_10 StartInt_2) (str.from_int StartInt_1)))
   (Start_9 String ("a" "1" "b" (str.replace Start_7 Start_3 Start_1) (ite StartBool_1 Start_6 Start_7)))
   (Start_3 String ("1" "" (str.++ Start Start_1) (str.at Start StartInt_2) (str.from_int StartInt_3) (ite StartBool Start_4 Start_1)))
   (Start_6 String ("" x "b" y "a" "0" (str.++ Start_5 Start_5) (str.substr Start StartInt_1 StartInt) (str.from_int StartInt_1)))
   (Start_1 String ("1" (str.++ Start_8 Start) (str.at Start StartInt_2) (str.from_int StartInt_7)))
   (Start_5 String ("a" (str.++ Start_10 Start_2) (str.substr Start_4 StartInt StartInt_2) (ite StartBool_4 Start_7 Start_2)))
   (Start_15 String ("" "b" "0" (str.++ Start_3 Start_16) (str.at Start_3 StartInt_8) (str.substr Start_16 StartInt_3 StartInt_4) (str.replace Start_17 Start_13 Start_1) (ite StartBool_3 Start_14 Start)))
   (StartBool_4 Bool (false (str.< Start_5 Start_10) (str.prefixof Start_9 Start_2) (str.suffixof Start_8 Start_5) (str.contains Start_7 Start_4) (= Start_8 Start_9) (<= StartInt_6 StartInt_4)))
   (StartInt_3 Int (0 (str.indexof Start_10 Start_5 StartInt_4)))
   (StartInt_1 Int (0 1 (str.indexof Start_9 Start_4 StartInt_6) (str.to_int Start_8)))
   (Start_11 String ("a" (str.++ Start_2 Start_2) (str.at Start_4 StartInt_7) (str.substr Start_8 StartInt_5 StartInt_3) (str.replace Start_3 Start_12 Start) (str.from_int StartInt_3)))
   (StartBool_1 Bool (false (not StartBool_2) (str.prefixof Start_7 Start_3) (str.suffixof Start_3 Start) (= Start_8 Start_6) (= StartInt_3 StartInt_1) (<= StartInt_4 StartInt)))
   (Start_2 String ("b" (str.++ Start_10 Start) (str.substr Start_6 StartInt_2 StartInt_1) (ite StartBool_3 Start_8 Start_2)))
   (StartInt_4 Int (1))
   (Start_13 String (y (str.++ Start_7 Start_14) (str.substr Start_13 StartInt_4 StartInt_5) (str.from_int StartInt) (ite StartBool_3 Start_8 Start_2)))
   (Start_14 String ("b" x y (ite StartBool Start_3 Start_6)))
   (StartInt_8 Int (1 (str.len Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace y "a" (str.from_int (str.to_int (str.at x 0))))))

(check-synth)
