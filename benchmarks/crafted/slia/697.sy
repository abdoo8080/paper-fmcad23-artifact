(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_3 Int) (StartBool_1 Bool) (StartInt_2 Int) (Start_1 String) (StartInt_1 Int) (Start_3 String) (Start_4 String) (Start_5 String) (Start_7 String) (Start_2 String) (Start_6 String))
  ((Start String ("" "b" (str.at Start_1 StartInt_1) (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt_2)))
   (StartInt Int (0 1 (str.indexof Start_1 Start_4 StartInt)))
   (StartBool Bool (true (not StartBool_1) (str.< Start Start_1) (= Start Start_2) (= StartInt StartInt_3)))
   (StartInt_3 Int (0 (str.to_int Start_5)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.< Start_4 Start) (str.<= Start_6 Start_6) (str.prefixof Start_1 Start_3) (str.suffixof Start_7 Start_6) (= StartInt_2 StartInt_1) (<= StartInt StartInt_1)))
   (StartInt_2 Int (1 0 (str.len Start_1) (str.indexof Start Start_1 StartInt_2)))
   (Start_1 String ("" "0" (str.++ Start_1 Start) (str.replace Start_2 Start_3 Start_2)))
   (StartInt_1 Int (1))
   (Start_3 String ("1" (ite StartBool Start_2 Start_3)))
   (Start_4 String (y "1" (str.++ Start_4 Start_4) (str.at Start_5 StartInt_1)))
   (Start_5 String (y (str.at Start StartInt_2) (str.replace Start_5 Start_2 Start_4) (ite StartBool_1 Start_5 Start_3)))
   (Start_7 String ("1" "b" x (str.substr Start_6 StartInt_1 StartInt) (str.replace Start_1 Start_1 Start_2)))
   (Start_2 String ("b" (str.substr Start_2 StartInt_1 StartInt_2) (str.from_int StartInt)))
   (Start_6 String ("1" "" (str.from_int StartInt_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.len (str.at y (str.indexof "0" x 1))))))

(check-synth)
