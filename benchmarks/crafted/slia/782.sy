(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_12 String) (StartInt_6 Int) (Start_1 String) (StartInt_1 Int) (Start_3 String) (Start_8 String) (Start_10 String) (StartInt_2 Int) (StartBool_2 Bool) (StartInt_7 Int) (Start_9 String) (StartBool_1 Bool) (StartInt_3 Int) (Start_6 String) (Start_7 String) (Start_4 String) (Start_11 String) (Start_2 String) (StartInt_5 Int) (Start_5 String) (StartInt_4 Int) (StartBool_3 Bool))
  ((Start String ("a" (str.++ Start_1 Start_1) (str.substr Start_1 StartInt_1 StartInt_2) (str.from_int StartInt) (ite StartBool_1 Start_1 Start)))
   (StartInt Int (1 (str.len Start_4)))
   (StartBool Bool (false (not StartBool_2) (and StartBool_2 StartBool) (str.< Start_1 Start_7) (str.<= Start_2 Start_2) (str.prefixof Start_12 Start_6) (str.suffixof Start_7 Start_6) (str.contains Start_6 Start_1) (= StartInt_3 StartInt_4)))
   (Start_12 String ("1" x "0" (str.at Start_3 StartInt_6)))
   (StartInt_6 Int (0 (str.len Start_12) (str.indexof Start_6 Start_9 StartInt_7) (str.to_int Start_8)))
   (Start_1 String ("a" "1" x (str.++ Start_9 Start_5) (str.substr Start_9 StartInt_6 StartInt_3)))
   (StartInt_1 Int (0 1 (str.indexof Start_2 Start StartInt_1)))
   (Start_3 String ("" "0"))
   (Start_8 String ("" "0" (str.at Start_4 StartInt_1) (str.substr Start_1 StartInt_4 StartInt) (str.replace Start_5 Start_4 Start_9)))
   (Start_10 String ("a" "" "0" "b" "1" (str.++ Start_4 Start_2) (str.from_int StartInt) (ite StartBool_3 Start_8 Start_9)))
   (StartInt_2 Int (1 0))
   (StartBool_2 Bool (true false (not StartBool) (and StartBool StartBool_2) (str.<= Start_4 Start_2) (str.contains Start_2 Start_4) (= Start Start_1) (= StartInt StartInt_3)))
   (StartInt_7 Int (1 0 (str.indexof Start_3 Start StartInt_2) (str.to_int Start_5)))
   (Start_9 String ("a" (str.++ Start_4 Start_5) (str.at Start_9 StartInt_2) (str.replace Start_5 Start_2 Start_10) (ite StartBool_3 Start_5 Start_6)))
   (StartBool_1 Bool (false (str.prefixof Start_2 Start_2) (str.suffixof Start_1 Start) (= Start Start_2)))
   (StartInt_3 Int (1 (str.len Start_2) (str.indexof Start_5 Start_6 StartInt_4) (str.to_int Start_7)))
   (Start_6 String ("a" "0" (str.substr Start_4 StartInt_1 StartInt_5) (str.from_int StartInt_1)))
   (Start_7 String (y "b" "a" "" "0" x "1" (str.++ Start_3 Start) (str.at Start_6 StartInt) (str.substr Start_4 StartInt_5 StartInt_4) (ite StartBool Start_7 Start_6)))
   (Start_4 String ("1" (str.++ Start_4 Start_6) (str.from_int StartInt)))
   (Start_11 String ("b" (str.from_int StartInt_1) (ite StartBool Start_8 Start_5)))
   (Start_2 String ("b" (str.substr Start StartInt StartInt_1) (str.replace Start Start_1 Start_3) (ite StartBool_2 Start Start_1)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.indexof Start_3 Start_5 StartInt) (str.to_int Start_6)))
   (Start_5 String (x "0" "a" "" (str.++ Start_5 Start_3) (str.at Start_8 StartInt_5) (str.substr Start_5 StartInt_5 StartInt_3) (str.replace Start_3 Start_9 Start_1) (ite StartBool_2 Start_6 Start_5)))
   (StartInt_4 Int (0 1 (str.len Start_5) (str.indexof Start_5 Start_4 StartInt_2)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_2 StartBool_2) (str.< Start_8 Start_6) (str.<= Start_7 Start_11) (= Start_5 Start) (= StartInt_2 StartInt_1)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.++ "b" "0") (str.replace y "0" "1"))))

(check-synth)
