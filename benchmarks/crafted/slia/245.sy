(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_11 String) (Start_10 String) (Start_8 String) (Start_6 String) (StartInt_5 Int) (StartBool_1 Bool) (Start_7 String) (StartInt_2 Int) (Start_9 String) (StartInt_3 Int) (StartInt_7 Int) (Start_3 String) (StartInt_4 Int) (Start_2 String) (StartInt_6 Int) (Start_4 String) (Start_5 String) (Start_1 String) (StartBool_2 Bool) (StartInt_1 Int))
  ((Start String ("0" "b" "a" x "" (str.at Start StartInt_1) (str.substr Start_1 StartInt_2 StartInt)))
   (StartInt Int (0))
   (StartBool Bool (true false (not StartBool_1) (and StartBool_2 StartBool) (str.< Start_4 Start_1) (str.contains Start_3 Start_3)))
   (Start_11 String ("0" (str.++ Start_9 Start_6) (str.substr Start_1 StartInt_5 StartInt_3) (ite StartBool_2 Start_7 Start)))
   (Start_10 String ("1" "0" "" (str.++ Start_1 Start_11) (str.substr Start_7 StartInt_4 StartInt_3)))
   (Start_8 String (y (str.++ Start_2 Start_1) (str.at Start_2 StartInt_2) (str.from_int StartInt_5) (ite StartBool_1 Start_1 Start_9)))
   (Start_6 String (y "0" (str.++ Start_5 Start_6) (str.at Start StartInt_4) (str.replace Start_5 Start_6 Start_6) (str.from_int StartInt_3) (ite StartBool_2 Start_7 Start_8)))
   (StartInt_5 Int (1 0 (str.indexof Start_4 Start_7 StartInt_6)))
   (StartBool_1 Bool (true false (and StartBool_1 StartBool_1) (str.< Start_4 Start_5) (str.suffixof Start_6 Start_3) (<= StartInt_5 StartInt_1)))
   (Start_7 String (y (str.substr Start_3 StartInt_3 StartInt) (str.replace Start_1 Start_7 Start_1) (str.from_int StartInt_4)))
   (StartInt_2 Int (0 1 (str.indexof Start_2 Start_1 StartInt_3) (str.to_int Start_1)))
   (Start_9 String (x (str.at Start_10 StartInt_6) (str.from_int StartInt_7)))
   (StartInt_3 Int (1 0 (str.indexof Start_3 Start_1 StartInt_2) (str.to_int Start_1)))
   (StartInt_7 Int (1 0 (str.indexof Start Start_6 StartInt_5)))
   (Start_3 String (x "" (str.++ Start_2 Start_4) (str.at Start_1 StartInt_1) (str.substr Start_1 StartInt_4 StartInt_1) (str.replace Start_3 Start_2 Start)))
   (StartInt_4 Int (0 1 (str.indexof Start Start StartInt_2)))
   (Start_2 String ("" (str.++ Start_3 Start_3) (ite StartBool Start_5 Start_2)))
   (StartInt_6 Int (0 1 (str.len Start_7) (str.to_int Start_6)))
   (Start_4 String (y "b" "0" "a" x "1" "" (str.substr Start_1 StartInt_3 StartInt_4)))
   (Start_5 String (x (str.from_int StartInt_3)))
   (Start_1 String ("1" (str.from_int StartInt_4)))
   (StartBool_2 Bool (true (str.< Start_5 Start) (str.<= Start_3 Start) (str.suffixof Start_2 Start_5) (<= StartInt_4 StartInt_3)))
   (StartInt_1 Int (0 (str.len Start_2) (str.to_int Start_2)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.replace y "1" "a") "b")))

(check-synth)
