(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_1 String) (Start_16 String) (StartInt_8 Int) (StartBool_1 Bool) (Start_10 String) (Start_7 String) (Start_6 String) (Start_11 String) (StartBool_3 Bool) (Start_9 String) (Start_15 String) (Start_2 String) (Start_4 String) (StartInt_2 Int) (Start_12 String) (StartBool_2 Bool) (StartInt_7 Int) (StartInt_6 Int) (Start_14 String) (Start_5 String) (StartInt_5 Int) (StartInt_3 Int) (StartInt_1 Int) (Start_8 String) (StartInt_4 Int) (Start_3 String) (Start_13 String))
  ((Start String (x (str.substr Start StartInt_1 StartInt_1) (str.replace Start_1 Start Start_1) (str.from_int StartInt_2)))
   (StartInt Int (1 0 (str.to_int Start_10)))
   (StartBool Bool (true false (not StartBool) (str.< Start_7 Start_14) (str.prefixof Start_14 Start_13) (<= StartInt_5 StartInt_7)))
   (Start_1 String ("a" y (str.substr Start_1 StartInt_2 StartInt) (str.from_int StartInt_1) (ite StartBool Start_2 Start)))
   (Start_16 String ("0" "1" (str.++ Start_14 Start) (ite StartBool_2 Start_5 Start_16)))
   (StartInt_8 Int (1 (str.len Start_8)))
   (StartBool_1 Bool (false true (not StartBool_1) (str.<= Start_6 Start_2) (str.prefixof Start_1 Start_3) (str.contains Start_6 Start_10)))
   (Start_10 String ("1" "0" "b" (str.++ Start_9 Start_1) (str.replace Start_11 Start_6 Start_6) (str.from_int StartInt_3)))
   (Start_7 String ("1" (str.substr Start_5 StartInt_4 StartInt) (str.replace Start_3 Start_3 Start_8) (str.from_int StartInt_1) (ite StartBool_1 Start_9 Start_9)))
   (Start_6 String ("" (str.++ Start_7 Start_2) (str.substr Start_3 StartInt_2 StartInt_3) (str.replace Start Start_2 Start_4) (ite StartBool Start_4 Start_4)))
   (Start_11 String ("0" (str.++ Start_8 Start_12) (str.at Start_13 StartInt_5) (str.substr Start_14 StartInt_4 StartInt_6) (ite StartBool_2 Start_10 Start_4)))
   (StartBool_3 Bool (false true (str.< Start_4 Start_15) (str.prefixof Start_10 Start_6) (= Start_2 Start_15) (<= StartInt_8 StartInt_8)))
   (Start_9 String ("b" (str.++ Start_5 Start_4) (str.at Start_4 StartInt) (str.substr Start_2 StartInt StartInt_1) (str.from_int StartInt_4) (ite StartBool_1 Start_8 Start_4)))
   (Start_15 String ("" x (str.substr Start StartInt_5 StartInt_7) (str.replace Start_14 Start_3 Start_1)))
   (Start_2 String ("0" (str.++ Start_3 Start_3) (str.at Start StartInt) (str.substr Start StartInt_1 StartInt_1) (str.replace Start_4 Start_4 Start) (str.from_int StartInt_1)))
   (Start_4 String (y (str.++ Start_5 Start_3) (str.at Start StartInt_1)))
   (StartInt_2 Int (0 1 (str.indexof Start Start_1 StartInt)))
   (Start_12 String (x "" y (str.substr Start_1 StartInt_5 StartInt_5) (str.replace Start_3 Start_14 Start_14) (str.from_int StartInt_8)))
   (StartBool_2 Bool (false true (not StartBool) (and StartBool_2 StartBool) (str.< Start_10 Start_11) (str.suffixof Start_1 Start_6) (= StartInt_2 StartInt_3)))
   (StartInt_7 Int (1 0 (str.len Start_7)))
   (StartInt_6 Int (0 (str.indexof Start_15 Start_1 StartInt_3) (str.to_int Start_14)))
   (Start_14 String ("a" "1" x (str.++ Start_12 Start_2) (str.substr Start_16 StartInt_6 StartInt_1) (str.replace Start_11 Start_5 Start_6) (ite StartBool Start_3 Start_15)))
   (Start_5 String ("0" (str.replace Start_6 Start_1 Start_6)))
   (StartInt_5 Int (1))
   (StartInt_3 Int (0 (str.to_int Start_3)))
   (StartInt_1 Int (1 (str.len Start_3) (str.to_int Start_4)))
   (Start_8 String ("0" (str.at Start StartInt_2) (str.replace Start_7 Start_5 Start_12)))
   (StartInt_4 Int (1 (str.to_int Start_16)))
   (Start_3 String ("1" x y "0" "" "b" "a" (str.at Start StartInt_6)))
   (Start_13 String (x (str.++ Start_15 Start) (str.substr Start_12 StartInt_2 StartInt_7) (str.from_int StartInt_6) (ite StartBool_3 Start Start_12)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.substr (str.replace "1" "" "b") 1 (str.to_int x))))

(check-synth)
