(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_17 String) (Start_16 String) (StartInt_1 Int) (StartBool_2 Bool) (Start_7 String) (Start_6 String) (Start_4 String) (Start_5 String) (StartBool_4 Bool) (StartInt_3 Int) (StartInt_7 Int) (StartBool_3 Bool) (StartBool_1 Bool) (StartInt_2 Int) (StartInt_4 Int) (Start_11 String) (Start_3 String) (Start_13 String) (StartBool_6 Bool) (Start_9 String) (Start_10 String) (Start_2 String) (StartInt_6 Int) (Start_12 String) (StartBool_5 Bool) (Start_14 String) (Start_1 String) (Start_15 String) (Start_8 String) (StartInt_5 Int))
  ((Start String ("0" (str.++ Start Start_1) (str.replace Start_2 Start Start_3)))
   (StartInt Int (0 (str.len Start_9)))
   (StartBool Bool (false true (not StartBool_6) (and StartBool_2 StartBool) (str.<= Start_5 Start_17)))
   (Start_17 String ("" "1" (str.from_int StartInt_3)))
   (Start_16 String ("0" "b" y (str.++ Start_15 Start_16) (str.from_int StartInt_4)))
   (StartInt_1 Int (0 (str.indexof Start_1 Start_2 StartInt_3)))
   (StartBool_2 Bool (true (and StartBool_2 StartBool_2) (str.<= Start_1 Start_3) (str.contains Start_1 Start_5) (= Start_1 Start_3) (= StartInt_1 StartInt_3) (<= StartInt_2 StartInt_1)))
   (Start_7 String ("" "b" (str.at Start_5 StartInt_3) (str.substr Start StartInt StartInt_3) (str.replace Start_4 Start_2 Start_6) (str.from_int StartInt_4)))
   (Start_6 String ("0" (str.substr Start StartInt_4 StartInt_3) (str.from_int StartInt_4) (ite StartBool_1 Start Start_1)))
   (Start_4 String ("" "0" (str.at Start StartInt) (str.substr Start_4 StartInt_1 StartInt_5) (str.replace Start_5 Start_7 Start_8) (str.from_int StartInt) (ite StartBool_4 Start_1 Start_2)))
   (Start_5 String ("a" y (str.++ Start_1 Start_4) (str.at Start_3 StartInt) (str.from_int StartInt_2) (ite StartBool_3 Start_1 Start_2)))
   (StartBool_4 Bool (true false (not StartBool) (and StartBool_5 StartBool_5) (str.< Start_5 Start_3) (str.prefixof Start_6 Start_9) (str.suffixof Start_4 Start_3) (= Start_7 Start_1) (<= StartInt StartInt_1)))
   (StartInt_3 Int (0 (str.len Start_5) (str.indexof Start_4 Start StartInt_1)))
   (StartInt_7 Int (0 (str.to_int Start_12)))
   (StartBool_3 Bool (true (not StartBool) (and StartBool_3 StartBool_3) (str.suffixof Start_5 Start_3) (str.contains Start_6 Start_1) (= StartInt_1 StartInt_3) (<= StartInt StartInt_1)))
   (StartBool_1 Bool (true false (not StartBool) (and StartBool_1 StartBool_2) (str.< Start_5 Start_2) (str.contains Start_4 Start_3) (<= StartInt_1 StartInt_1)))
   (StartInt_2 Int (0 1 (str.len Start_1) (str.indexof Start_4 Start_6 StartInt_2) (str.to_int Start_5)))
   (StartInt_4 Int (1 0 (str.len Start_7) (str.to_int Start_5)))
   (Start_11 String ("" (str.at Start_9 StartInt_5) (str.substr Start_10 StartInt_3 StartInt_2) (str.replace Start_11 Start_6 Start_2) (ite StartBool_1 Start_10 Start_7)))
   (Start_3 String ("" "1" (str.substr Start_4 StartInt_1 StartInt_2) (ite StartBool_1 Start_4 Start_2)))
   (Start_13 String ("" (str.at Start_7 StartInt) (str.replace Start_11 Start_12 Start)))
   (StartBool_6 Bool (true (str.<= Start_14 Start_6) (str.prefixof Start_12 Start_7) (str.contains Start_4 Start_1) (= Start_4 Start_11)))
   (Start_9 String ("b" (str.++ Start_10 Start_4) (str.at Start_5 StartInt_5) (str.replace Start_4 Start_4 Start_11) (str.from_int StartInt)))
   (Start_10 String ("a" x "0" (str.++ Start_5 Start_4) (str.at Start_1 StartInt_6) (str.from_int StartInt)))
   (Start_2 String ("0" (str.replace Start_15 Start_4 Start_3)))
   (StartInt_6 Int (0 (str.indexof Start_10 Start_9 StartInt_7) (str.to_int Start_1)))
   (Start_12 String ("a" (str.++ Start_13 Start_6) (str.replace Start_6 Start_10 Start_13)))
   (StartBool_5 Bool (false (not StartBool_6) (str.contains Start_4 Start_12) (<= StartInt_3 StartInt_6)))
   (Start_14 String ("0" "a" (str.substr Start StartInt_4 StartInt_2)))
   (Start_1 String ("a" (str.at Start_16 StartInt_6) (str.substr Start_13 StartInt_1 StartInt_2) (str.replace Start_7 Start_10 Start_2) (str.from_int StartInt_5)))
   (Start_15 String (y "a" "b" (str.++ Start_15 Start_2) (str.at Start_14 StartInt_4) (str.replace Start_1 Start_8 Start_8) (str.from_int StartInt_6) (ite StartBool_1 Start_15 Start_6)))
   (Start_8 String ("0" (str.at Start_2 StartInt_4) (str.substr Start_15 StartInt StartInt_4)))
   (StartInt_5 Int (0 (str.to_int Start_14)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "1" x "")))

(check-synth)
