(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (Start_10 String) (StartInt_7 Int) (Start_9 String) (Start_2 String) (StartBool_2 Bool) (StartInt_6 Int) (Start_1 String) (Start_8 String) (StartBool_1 Bool) (StartInt_2 Int) (Start_5 String) (StartInt_1 Int) (Start_4 String) (StartInt_5 Int) (Start_3 String) (StartInt_3 Int) (Start_7 String) (StartInt_4 Int) (Start_6 String))
  ((Start String ("0" x "b" "" (str.++ Start_1 Start_1) (str.replace Start Start Start_1)))
   (StartInt Int (1 0))
   (StartBool Bool (false (not StartBool_2) (str.contains Start_5 Start_3) (= StartInt_7 StartInt_1) (<= StartInt_4 StartInt_4)))
   (StartInt_8 Int (0 (str.len Start_5)))
   (Start_10 String ("" (str.at Start StartInt) (str.substr Start_5 StartInt_1 StartInt_8) (ite StartBool_2 Start_10 Start_2)))
   (StartInt_7 Int (1 (str.len Start_10)))
   (Start_9 String ("0" (str.++ Start Start_9) (str.at Start_9 StartInt_5) (str.substr Start_2 StartInt StartInt_4) (str.replace Start_5 Start Start_4) (str.from_int StartInt_6)))
   (Start_2 String ("a" "b" "1" y x (str.at Start_5 StartInt_3) (str.substr Start_8 StartInt_1 StartInt_5) (str.replace Start_7 Start_4 Start_7) (str.from_int StartInt_3) (ite StartBool_1 Start_9 Start_3)))
   (StartBool_2 Bool (true false (not StartBool_2) (str.<= Start_4 Start_8) (str.prefixof Start_3 Start_2) (str.suffixof Start_5 Start_8) (= Start_6 Start_6) (= StartInt_3 StartInt) (<= StartInt StartInt_6)))
   (StartInt_6 Int (1 0 (str.indexof Start_5 Start_8 StartInt_3)))
   (Start_1 String ("b" x (str.++ Start_2 Start_3) (str.at Start StartInt_1) (str.from_int StartInt_1) (ite StartBool_1 Start_2 Start)))
   (Start_8 String (y "1" (str.substr Start_6 StartInt_2 StartInt_6) (str.from_int StartInt)))
   (StartBool_1 Bool (false true (not StartBool_2) (str.<= Start Start_2) (str.prefixof Start_4 Start_2) (str.suffixof Start_5 Start_2) (= StartInt_1 StartInt_2) (<= StartInt_2 StartInt_1)))
   (StartInt_2 Int (0 (str.len Start) (str.indexof Start_5 Start_3 StartInt_1) (str.to_int Start_4)))
   (Start_5 String (x (str.replace Start_4 Start_4 Start_2)))
   (StartInt_1 Int (0 1 (str.len Start_4) (str.to_int Start_3)))
   (Start_4 String ("1" "" (str.at Start_2 StartInt_3) (str.replace Start Start Start_5) (str.from_int StartInt_1)))
   (StartInt_5 Int (1 0 (str.len Start_6) (str.to_int Start_3)))
   (Start_3 String (x "a" (str.at Start_6 StartInt_6)))
   (StartInt_3 Int (0 1 (str.len Start_3) (str.indexof Start_1 Start_6 StartInt_1) (str.to_int Start_7)))
   (Start_7 String ("" "b" (str.++ Start_7 Start_6) (str.substr Start StartInt_3 StartInt_4) (str.replace Start_5 Start_3 Start_6) (ite StartBool Start_5 Start)))
   (StartInt_4 Int (0 1 (str.len Start_3)))
   (Start_6 String (x (str.++ Start_7 Start_6) (str.substr Start_8 StartInt_2 StartInt_1) (str.replace Start_8 Start_7 Start_4) (str.from_int StartInt_5)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (ite (str.<= y "0") "b" "")))

(check-synth)
