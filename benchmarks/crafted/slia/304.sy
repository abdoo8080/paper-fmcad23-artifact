(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_8 Int) (StartInt_9 Int) (Start_11 String) (StartInt_3 Int) (Start_1 String) (Start_9 String) (Start_7 String) (Start_8 String) (Start_6 String) (Start_17 String) (StartBool_2 Bool) (StartInt_4 Int) (StartInt_2 Int) (StartInt_1 Int) (Start_15 String) (Start_5 String) (Start_12 String) (Start_13 String) (Start_10 String) (StartInt_7 Int) (StartBool_1 Bool) (StartInt_6 Int) (Start_14 String) (StartInt_5 Int) (Start_4 String) (Start_2 String) (Start_3 String) (Start_16 String) (Start_18 String))
  ((Start String ("0" (str.++ Start Start) (str.at Start StartInt)))
   (StartInt Int (0 (str.len Start_1) (str.indexof Start_2 Start_3 StartInt) (str.to_int Start_3)))
   (StartBool Bool (true false (and StartBool StartBool_2) (str.< Start_11 Start_14) (str.suffixof Start_4 Start_11) (str.contains Start_3 Start) (= Start_11 Start_13) (= StartInt StartInt_7) (<= StartInt_4 StartInt_7)))
   (StartInt_8 Int (1 (str.indexof Start_16 Start_16 StartInt_1)))
   (StartInt_9 Int (1 0))
   (Start_11 String ("1" x y (str.++ Start Start_4) (str.at Start_8 StartInt_2) (str.substr Start_9 StartInt_2 StartInt_3)))
   (StartInt_3 Int (1 (str.to_int Start_9)))
   (Start_1 String (x "a" "b" (str.at Start StartInt_3) (ite StartBool_2 Start_8 Start_11)))
   (Start_9 String (x (str.from_int StartInt_4)))
   (Start_7 String (y x (str.at Start StartInt) (str.substr Start_2 StartInt_3 StartInt_3) (str.from_int StartInt_2) (ite StartBool Start_2 Start_7)))
   (Start_8 String ("a" "b" (str.at Start_6 StartInt_2) (str.substr Start StartInt StartInt_1)))
   (Start_6 String (x (str.++ Start Start) (str.at Start_7 StartInt_2) (str.replace Start_6 Start_8 Start_2) (str.from_int StartInt_1)))
   (Start_17 String ("a" "1"))
   (StartBool_2 Bool (true false (and StartBool StartBool_1) (str.< Start_12 Start_4) (str.<= Start_8 Start_12) (str.suffixof Start_2 Start_2) (str.contains Start_12 Start_9) (= StartInt_4 StartInt_5)))
   (StartInt_4 Int (0 (str.len Start_3) (str.indexof Start_10 Start_11 StartInt_2) (str.to_int Start_1)))
   (StartInt_2 Int (1 (str.len Start_6) (str.to_int Start_5)))
   (StartInt_1 Int (0 (str.len Start_4) (str.indexof Start_5 Start_1 StartInt_1) (str.to_int Start)))
   (Start_15 String ("1" (str.at Start_15 StartInt_2) (str.substr Start_8 StartInt_7 StartInt_8) (str.replace Start_4 Start Start_5) (ite StartBool_1 Start_16 Start_8)))
   (Start_5 String ("0" (str.++ Start_1 Start_6) (str.substr Start_6 StartInt_2 StartInt_1)))
   (Start_12 String ("a" "0" (str.++ Start_2 Start_5) (str.substr Start_4 StartInt_1 StartInt_4) (ite StartBool Start_13 Start_7)))
   (Start_13 String ("0" y (str.++ Start_6 Start_8) (str.at Start_8 StartInt_3) (str.replace Start_4 Start_11 Start) (str.from_int StartInt_5) (ite StartBool_1 Start_3 Start_4)))
   (Start_10 String (y (str.++ Start_12 Start_9) (str.at Start_2 StartInt) (str.substr Start_12 StartInt_1 StartInt_2) (str.replace Start_3 Start_7 Start) (ite StartBool Start_1 Start)))
   (StartInt_7 Int (1 (str.to_int Start_2)))
   (StartBool_1 Bool (true false (not StartBool_2) (and StartBool StartBool) (str.< Start_9 Start_2) (str.<= Start_5 Start_3) (str.suffixof Start_11 Start_2) (str.contains Start_5 Start_2) (<= StartInt_5 StartInt_4)))
   (StartInt_6 Int (1 (str.indexof Start_6 Start_9 StartInt)))
   (Start_14 String (y "b" "a" (str.++ Start_7 Start_4) (str.at Start_15 StartInt) (str.substr Start_12 StartInt_5 StartInt_2) (ite StartBool_1 Start_14 Start_8)))
   (StartInt_5 Int (1 (str.indexof Start_12 Start_5 StartInt_6)))
   (Start_4 String (y (str.substr Start_7 StartInt_4 StartInt_3) (str.replace Start_9 Start_2 Start_7) (ite StartBool_1 Start_11 Start_4)))
   (Start_2 String ("0" (str.++ Start_3 Start_9) (str.replace Start_6 Start_13 Start_4) (str.from_int StartInt_3)))
   (Start_3 String ("b" y (str.++ Start_3 Start_3) (str.from_int StartInt_1)))
   (Start_16 String ("1" "b" (str.++ Start_5 Start_4) (str.at Start_8 StartInt_2) (str.replace Start_10 Start_16 Start_1) (str.from_int StartInt_8) (ite StartBool_1 Start_17 Start_18)))
   (Start_18 String ("" x "a" "1" (str.++ Start_16 Start_17) (str.substr Start_8 StartInt_7 StartInt_9)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.replace "" y "b")))

(check-synth)
