(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (Start_15 String) (StartInt_5 Int) (Start_10 String) (StartInt_7 Int) (Start_6 String) (StartBool_2 Bool) (StartInt_4 Int) (Start_8 String) (Start_11 String) (Start_12 String) (Start_9 String) (StartBool_5 Bool) (StartInt_3 Int) (Start_5 String) (StartBool_6 Bool) (Start_4 String) (StartInt_2 Int) (StartInt_6 Int) (StartInt_1 Int) (Start_7 String) (StartBool_3 Bool) (StartBool_4 Bool) (Start_3 String) (StartBool_1 Bool) (Start_14 String) (Start_13 String) (Start_2 String) (Start_1 String))
  ((Start String ("b" (str.at Start_1 StartInt_1) (str.replace Start_2 Start_2 Start_3) (ite StartBool_1 Start_1 Start_4)))
   (StartInt Int (1 0 (str.to_int Start_15)))
   (StartBool Bool (false (and StartBool StartBool) (str.< Start_12 Start_11) (str.<= Start_10 Start_2) (str.suffixof Start_1 Start_9) (str.contains Start_7 Start_3)))
   (Start_15 String ("" (str.++ Start_10 Start_9) (str.at Start_6 StartInt_2) (str.from_int StartInt)))
   (StartInt_5 Int (1 (str.len Start_3) (str.indexof Start_4 Start_2 StartInt) (str.to_int Start_3)))
   (Start_10 String (y (str.at Start_1 StartInt_4) (str.substr Start_2 StartInt StartInt_6) (str.replace Start_6 Start_5 Start_6) (str.from_int StartInt_1)))
   (StartInt_7 Int (0 (str.len Start) (str.indexof Start_6 Start_10 StartInt) (str.to_int Start_11)))
   (Start_6 String ("a" (ite StartBool_1 Start_10 Start_3)))
   (StartBool_2 Bool (false (not StartBool_2) (str.< Start Start) (str.<= Start_9 Start) (= StartInt StartInt_2) (<= StartInt_3 StartInt_4)))
   (StartInt_4 Int (1))
   (Start_8 String (x (str.replace Start_7 Start Start_5) (ite StartBool_2 Start_8 Start_5)))
   (Start_11 String (x "" (str.substr Start_6 StartInt StartInt_2) (str.replace Start_12 Start_6 Start_12) (ite StartBool_3 Start_9 Start_4)))
   (Start_12 String ("0" (str.++ Start_10 Start_1) (str.replace Start_11 Start_6 Start_7)))
   (Start_9 String ("b" (str.substr Start_5 StartInt_4 StartInt_5) (ite StartBool Start_1 Start)))
   (StartBool_5 Bool (false (not StartBool_6) (and StartBool_6 StartBool_6) (str.< Start_11 Start_11) (str.<= Start_10 Start_13) (str.suffixof Start_12 Start_10) (= Start_14 Start_13) (= StartInt StartInt)))
   (StartInt_3 Int (1 (str.indexof Start_8 Start_7 StartInt_4)))
   (Start_5 String ("" x (str.at Start_3 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_2) (str.replace Start_6 Start_5 Start_1) (str.from_int StartInt_1) (ite StartBool_2 Start_7 Start_1)))
   (StartBool_6 Bool (true false (str.prefixof Start_14 Start_5) (str.suffixof Start_2 Start_14) (= Start_10 Start_4) (<= StartInt_6 StartInt_4)))
   (Start_4 String ("1" (str.at Start StartInt_2) (str.substr Start_2 StartInt_1 StartInt_1) (str.replace Start Start_5 Start_2) (ite StartBool_1 Start_1 Start_4)))
   (StartInt_2 Int (0 (str.len Start_1) (str.indexof Start_2 Start StartInt_4)))
   (StartInt_6 Int (0 1 (str.len Start)))
   (StartInt_1 Int (1 0 (str.to_int Start_2)))
   (Start_7 String ("a" "" (str.at Start_6 StartInt_1) (str.substr Start_4 StartInt_1 StartInt_3) (ite StartBool_1 Start_4 Start_4)))
   (StartBool_3 Bool (true false (not StartBool_2) (and StartBool_4 StartBool_1) (str.<= Start_10 Start_8) (str.prefixof Start_9 Start_11) (= Start_10 Start_4) (= StartInt_5 StartInt_5)))
   (StartBool_4 Bool (true false (str.<= Start_3 Start_11) (str.prefixof Start_1 Start_5) (str.suffixof Start Start_1)))
   (Start_3 String ("0" x "" "a" y (str.++ Start_1 Start_4) (str.from_int StartInt_3) (ite StartBool_5 Start_2 Start)))
   (StartBool_1 Bool (false (not StartBool_1) (and StartBool_1 StartBool_3) (str.suffixof Start_6 Start_3) (= StartInt_1 StartInt_1)))
   (Start_14 String ("a" (str.at Start_1 StartInt_3) (ite StartBool_4 Start_2 Start_7)))
   (Start_13 String ("" (str.++ Start_9 Start_2) (str.from_int StartInt_3) (ite StartBool Start_3 Start)))
   (Start_2 String (y (str.++ Start_9 Start_7) (str.substr Start StartInt_3 StartInt_7) (str.replace Start_6 Start_8 Start_6) (ite StartBool Start_13 Start_6)))
   (Start_1 String (x (str.++ Start_2 Start_13) (str.substr Start_4 StartInt_2 StartInt_7) (str.from_int StartInt_1) (ite StartBool_1 Start_5 Start_11)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.from_int (str.to_int (str.replace "a" y "")))))

(check-synth)
