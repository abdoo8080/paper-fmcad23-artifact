(set-logic SLIA)

(synth-fun f ((x String) (y String)) String
  ((Start String) (StartInt Int) (StartBool Bool) (StartInt_6 Int) (Start_10 String) (Start_1 String) (Start_8 String) (StartBool_2 Bool) (Start_9 String) (StartInt_2 Int) (Start_7 String) (Start_3 String) (StartInt_5 Int) (Start_5 String) (StartInt_3 Int) (Start_2 String) (StartBool_1 Bool) (StartInt_4 Int) (StartInt_1 Int) (Start_4 String) (Start_6 String))
  ((Start String (x y "0" (str.at Start StartInt_1)))
   (StartInt Int (0 (str.len Start)))
   (StartBool Bool (false (str.< Start Start_1) (str.prefixof Start Start_2) (str.suffixof Start_3 Start_3) (<= StartInt_2 StartInt_2)))
   (StartInt_6 Int (1 (str.indexof Start_7 Start_7 StartInt_2)))
   (Start_10 String ("a" (ite StartBool Start_5 Start_1)))
   (Start_1 String ("0" (str.substr Start StartInt_2 StartInt_4) (ite StartBool_2 Start_3 Start)))
   (Start_8 String (x (str.replace Start_5 Start_9 Start_8)))
   (StartBool_2 Bool (false true (str.< Start_7 Start_10) (str.prefixof Start_5 Start_3) (str.contains Start_3 Start_7) (= Start_9 Start_6) (= StartInt_3 StartInt_5) (<= StartInt_3 StartInt_6)))
   (Start_9 String (y x "1" (str.substr Start StartInt_3 StartInt_2) (str.from_int StartInt)))
   (StartInt_2 Int (1))
   (Start_7 String ("" "0" x (str.++ Start_5 Start_5) (str.at Start_8 StartInt_4) (str.substr Start_8 StartInt_2 StartInt_1) (str.from_int StartInt_1)))
   (Start_3 String ("b" (str.from_int StartInt_3)))
   (StartInt_5 Int (1 0 (str.len Start_3) (str.indexof Start_6 Start_1 StartInt_6)))
   (Start_5 String ("0" (str.from_int StartInt_2) (ite StartBool_1 Start Start_2)))
   (StartInt_3 Int (0 1))
   (Start_2 String ("a" "b" y (str.from_int StartInt_2) (ite StartBool_1 Start_3 Start_2)))
   (StartBool_1 Bool (true (not StartBool) (str.< Start_3 Start_4) (str.prefixof Start Start_5) (str.suffixof Start_4 Start_3) (str.contains Start_3 Start_1) (= Start_1 Start_5) (<= StartInt StartInt_4)))
   (StartInt_4 Int (1 (str.len Start_4) (str.to_int Start_2)))
   (StartInt_1 Int (0 1 (str.to_int Start)))
   (Start_4 String ("1" (str.replace Start_5 Start_6 Start_5) (ite StartBool_1 Start_2 Start_5)))
   (Start_6 String ("" "b" (str.++ Start Start_4) (str.replace Start_7 Start_1 Start_6)))))

(declare-var x String)
(declare-var y String)

(constraint (= (f x y) (str.++ (str.at y 1) "0")))

(check-synth)
